{"version":3,"sources":["webpack://network-bubble-chart/webpack/universalModuleDefinition","webpack://network-bubble-chart/webpack/bootstrap","webpack://network-bubble-chart/./src/voidgl/types.ts","webpack://network-bubble-chart/external \"three\"","webpack://network-bubble-chart/./src/voidgl/instance-provider/index.ts","webpack://network-bubble-chart/./src/voidgl/util/index.ts","webpack://network-bubble-chart/./src/voidgl/primitives/bounds.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/buffer-manager-base.ts","webpack://network-bubble-chart/./src/voidgl/instance-provider/instance.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/types.ts","webpack://network-bubble-chart/./src/voidgl/primitives/index.ts","webpack://network-bubble-chart/./node_modules/debug/src/browser.js","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/generate-layer-model.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/layer-buffer-type.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/index.ts","webpack://network-bubble-chart/./src/voidgl/util/identify-by-key.ts","webpack://network-bubble-chart/./src/voidgl/util/shader-templating.ts","webpack://network-bubble-chart/./src/voidgl/util/uid.ts","webpack://network-bubble-chart/./src/voidgl/instance-provider/observable.ts","webpack://network-bubble-chart/./src/voidgl/surface/view.ts","webpack://network-bubble-chart/./src/voidgl/surface/scene.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/label-atlas-resource.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/base-atlas-resource.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/types.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/uniform-buffering/uniform-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/instance-attribute-buffering/instance-attribute-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/util/webgl-stat.ts","webpack://network-bubble-chart/./src/voidgl/util/view-camera.ts","webpack://network-bubble-chart/./src/voidgl/shaders/template-vars.ts","webpack://network-bubble-chart/./src/voidgl/util/chart-camera.ts","webpack://network-bubble-chart/./src/voidgl/util/vector.ts","webpack://network-bubble-chart/./src/voidgl/surface/event-manager.ts","webpack://network-bubble-chart/./src/voidgl/surface/mouse-event-manager.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/inject-shader-io.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/generate-layer-material.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/generate-layer-geometry.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/generate-default-scene.ts","webpack://network-bubble-chart/./src/voidgl/util/data-bounds.ts","webpack://network-bubble-chart/./src/voidgl/shaders/processing/shader-module-unit.ts","webpack://network-bubble-chart/./src/voidgl/shaders/processing/shader-module.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/labels/index.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/label-rasterizer.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/image-atlas-resource.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/color-rasterizer.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/color-atlas-resource.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/sub-texture.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/atlas.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/images/index.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/base-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/shaders/processing/uniform-processing.ts","webpack://network-bubble-chart/./src/voidgl/util/emit-once.ts","webpack://network-bubble-chart/./src/voidgl/shaders/processing/formatting.ts","webpack://network-bubble-chart/./src/voidgl/util/mouse.ts","webpack://network-bubble-chart/./src/voidgl/shaders/util/extend-shader.ts","webpack://network-bubble-chart/./src/voidgl/util/auto-easing-method.ts","webpack://network-bubble-chart/./src/voidgl/util/common-options.ts","webpack://network-bubble-chart/./src/voidgl/util/easing-props.ts","webpack://network-bubble-chart/./src/voidgl/shaders/base-modules/no-picking.fs","webpack://network-bubble-chart/./src/voidgl/shaders/base-modules/no-picking.vs","webpack://network-bubble-chart/./src/voidgl/shaders/base-modules/picking.fs","webpack://network-bubble-chart/./src/voidgl/shaders/base-modules/picking.vs","webpack://network-bubble-chart/./src/voidgl/shaders/base-modules/projection.vs","webpack://network-bubble-chart/./src/voidgl/shaders/base-modules/no-op.fs","webpack://network-bubble-chart/./src/voidgl/shaders/base-modules/no-op.vs","webpack://network-bubble-chart/./src/voidgl/shaders/processing/index.ts","webpack://network-bubble-chart/./src/voidgl/shaders/base-modules/index.ts","webpack://network-bubble-chart/./src/voidgl/shaders/index.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/atlas-resource-manager.ts","webpack://network-bubble-chart/./src/voidgl/util/quad-tree.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/pack-attributes.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/expand-easing-attributes.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/expand-atlas-attributes.ts","webpack://network-bubble-chart/./src/voidgl/primitives/absolute-position.ts","webpack://network-bubble-chart/./src/voidgl/surface/event-managers/layer-mouse-events.ts","webpack://network-bubble-chart/./src/voidgl/util/color-picking-analysis.ts","webpack://network-bubble-chart/./src/voidgl/shaders/processing/metrics-processing.ts","webpack://network-bubble-chart/./src/voidgl/shaders/processing/easing-processing.ts","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/active-attribute-handler.vs","webpack://network-bubble-chart/./src/voidgl/shaders/processing/attribute-processing.ts","webpack://network-bubble-chart/./src/voidgl/shaders/processing/shader-processor.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-surface.ts","webpack://network-bubble-chart/./src/voidgl/surface/index.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/rings/ring-layer.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/rings/ring-layer.fs","webpack://network-bubble-chart/./src/voidgl/base-layers/rings/ring-layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/rings/ring-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/rings/index.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/rectangle/rectangle-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/rectangle/rectangle-layer.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/rectangle/rectangle-layer.fs","webpack://network-bubble-chart/./src/voidgl/base-layers/rectangle/rectangle-layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/rectangle/index.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/labels/label-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/labels/label-layer.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/labels/label-layer.fs","webpack://network-bubble-chart/./src/voidgl/base-layers/labels/label-layer.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/image-rasterizer.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/atlas-manager.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/pack-node.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/images/image-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/images/image-layer.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/images/image-layer.fs","webpack://network-bubble-chart/./src/voidgl/base-layers/images/image-layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/edge-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/shader/edge-layer.fs","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/shader/edge-layer-screen-curve.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/shader/edge-layer.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/shader/edge-layer-bezier2.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/shader/edge-layer-bezier.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/shader/edge-layer-line.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/edge-picking.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/edge-layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/index.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/circles/circle-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/circles/circle-layer.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/circles/circle-layer.fs","webpack://network-bubble-chart/./src/voidgl/primitives/point.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/circles/circle-layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/circles/index.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/arcs/arc-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/arcs/arc-layer.fs","webpack://network-bubble-chart/./src/voidgl/base-layers/arcs/arc-layer-screen-space.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/arcs/arc-layer.vs","webpack://network-bubble-chart/./src/voidgl/surface/layer-interaction-handler.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/uniform-buffering/uniform-quad-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/uniform-buffering/uniform-color-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/instance-attribute-buffering/instance-attribute-quad-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/instance-attribute-buffering/instance-attribute-color-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/uniform-buffering/uniform-buffer-manager.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/instance-attribute-packed-buffering/instance-attribute-packing-buffer-manager.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/instance-attribute-buffering/instance-attribute-buffer-manager.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/instance-diff-manager.ts","webpack://network-bubble-chart/./src/voidgl/instance-provider/instance-provider.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/arcs/arc-layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/arcs/index.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/index.ts","webpack://network-bubble-chart/./src/voidgl/util/tracked-quad-tree.ts","webpack://network-bubble-chart/./src/voidgl/util/reference-camera.ts","webpack://network-bubble-chart/./node_modules/ms/index.js","webpack://network-bubble-chart/./node_modules/debug/src/debug.js","webpack://network-bubble-chart/./node_modules/process/browser.js","webpack://network-bubble-chart/external \"bowser\"","webpack://network-bubble-chart/./src/voidgl/util/extend-shader-io.ts","webpack://network-bubble-chart/./src/voidgl/util/animation-helper.ts","webpack://network-bubble-chart/./src/voidgl/base-event-managers/basic-camera-controller.ts","webpack://network-bubble-chart/./src/voidgl/base-event-managers/index.ts","webpack://network-bubble-chart/./src/voidgl/index.ts","webpack://network-bubble-chart/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__140__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","InstanceAttributeSize","InstanceBlockIndex","instanceAttributeSizeFloatCount","_a","ONE","TWO","THREE","FOUR","ATLAS","UniformSize","VertexAttributeSize","ShaderInjectionTarget","PickType","InstanceDiffType","__export","Bounds","options","this","x","y","width","height","left","top","bottom","right","emptyBounds","containsPoint","point","encapsulate","item","Math","abs","fits","bounds","hitBounds","isInside","toString","isBufferLocation","val","buffer","isBufferLocationGroup","propertyToBufferLocation","BufferManagerBase","layer","scene","easing_props_1","observable_1","instanceUID","Instance","changes","_easing","Map","observableStorage","_uid","newUID","_id","id","active","_this","_observer","oldObserver","clear","remove","clearEasing","easingId","getEasing","attributeName","easing","EasingProps","resourceTrigger","console","warn","__decorate","observable","Three","types_1","util_1","identify_by_key_1","instance_diff_manager_1","layer_interaction_handler_1","Layer","_super","props","depth","instanceById","instanceVertexCount","needsViewDrawn","animationEndTime","assign","defaultProps","picking","NONE","ALL","pickingMethods","getInstancePickingMethods","currentPickMode","hitTest","quadTree","TrackedQuadTree","boundsAccessor","type","SINGLE","uidToInstance","__extends","_bufferManager","_bufferType","destroy","bufferManager","removeLayer","removeFromScene","didUpdateProps","draw","uniform","change","instance","bufferLocations","changeList","data","length","diffManager","processing","processor","incomingChangeList","end","getBufferLocations","values","commit","resolve","uniforms","update","materialUniforms","forEach","materialUniform","Error","getModelType","drawMode","TrianglesDrawMode","modelType","Mesh","getMaterialOptions","initShader","fs","instanceAttributes","vertexAttributes","vertexCount","vs","makeInstanceAttribute","block","blockIndex","size","atlas","makeUniform","shaderInjection","qualifier","setBufferManager","InstanceDiffManager","makeProcessor","interactions","LayerInteractionHandler","setBufferType","undefined","shouldDrawView","oldProps","newProps","key","willUpdateInstances","_changes","willUpdateProps","_newProps","didUpdate","IdentifyByKey","AnchorType","ScaleType","process","load","storage","debug","e","env","DEBUG","log","Function","apply","arguments","formatArgs","args","useColors","namespace","humanize","diff","color","splice","index","lastC","replace","match","save","namespaces","removeItem","navigator","userAgent","toLowerCase","document","documentElement","style","WebkitAppearance","firebug","exception","table","parseInt","RegExp","$1","chrome","local","localStorage","localstorage","colors","formatters","j","v","JSON","stringify","err","message","enable","generateLayerModel","geometry","material","modelInfo","model","Boolean","isMesh","TriangleStripDrawMode","LayerBufferType","webgl_stat_1","instance_attribute_buffer_manager_1","instance_attribute_packing_buffer_manager_1","uniform_buffer_manager_1","getLayerBufferType","_gl","UNIFORM","attributesUsed","bufferType","WebGLStat","HARDWARE_INSTANCING","attribute","ceil","MAX_VERTEX_ATTRIBUTES","max","INSTANCE_ATTRIBUTE_PACKING","INSTANCE_ATTRIBUTE","makeLayerBufferManager","gl","InstanceAttributeBufferManager","InstanceAttributePackingBufferManager","UniformBufferManager","shaderTemplate","templateOptions","shader","required","onError","onToken","matched","noValueProvided","notFound","shaderOptions","shaderResults","_x","set","keys","option","results","resolvedShaderOptions","shaderProvidedOptions","unresolvedProvidedOptions","unresolvedShaderOptions","msg","error","UID","uid","CUID","colorUID","uid_1","ObservableMonitoring","setObservableMonitor","enabled","gatherIds","observableIds","getObservableMonitorIds","slice","observableNamesToUID","target","propertyUID","push","newVal","observer","instanceUpdated","absolute_position_1","bounds_1","view_camera_1","isOrthographic","ClearFlags","View","pixelRatio","devicePixelRatio","needsDraw","screenToPixelSpace","out","pixelSpaceToScreen","screenToView","viewBounds","viewToScreen","screenToWorld","view","world","camera","offset","scale","viewCamera","ViewCameraType","CUSTOM","worldToScreen","screen","viewToWorld","worldToView","fitViewtoViewport","surfaceDimensions","CONTROLLED","baseCamera","getAbsolutePositionBounds","viewport","far","near","position","z","updateMatrix","updateMatrixWorld","updateProjectionMatrix","screenBounds","DEFAULT_VIEW_ID","sortByDepth","a","b","Scene","container","pickingContainer","layers","sortIsDirty","viewById","frustumCulled","autoUpdate","addLayer","addView","indexOf","sortLayers","sort","DEFAULT_SCENE_ID","LabelAtlasResource","label","BaseAtlasResource","sampleScale","EdgeScaleType","EdgeType","EdgeBroadphase","base_diff_processor_1","buffer_manager_base_1","VECTOR_ACCESSORS","EMPTY","UniformDiffProcessor","addInstance","manager","_propIds","uniformCluster","changeInstance","add","updateInstance","removeInstance","uniformRangeStart","range","instanceData","instanceUniform","start","k","endk","resource","setTargetAtlas","activeAttribute","BaseDiffProcessor","DiffMode","min","InstanceAttributeDiffProcessor","diffMode","PARTIAL","bufferAttributeUpdateRange","bufferAttributeWillUpdate","updateInstancePartial","newBufferLocations","propIds","location","updateValue","updateRange","childLocations","attributeChangeUID","propertyToLocation","getUpdateAllPropertyIdList","packUID","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","getActiveAttributePropertyId","updateInstanceFull","updates","bufferAttribute","needsUpdate","count","getInstanceCount","FULL","getProgramInfo","program","result","attributeCount","attributes","Array","uniformCount","activeUniforms","getProgramParameter","ACTIVE_UNIFORMS","activeAttributes","ACTIVE_ATTRIBUTES","enums","35664","35665","35666","35667","35668","35669","35670","35671","35672","35673","35674","35675","35676","35678","35680","5120","5121","5122","5123","5124","5125","5126","blocks","getActiveUniform","typeName","getActiveAttrib","MAX_VERTEX_UNIFORMS","MAX_FRAGMENT_UNIFORMS","WEBGL_SUPPORTED","MAX_TEXTURE_SIZE","HARDWARE_INSTANCING_ANGLE","canvas","createElement","WebGLRenderingContext","getContext","getAContext","getParameter","MAX_VERTEX_UNIFORM_VECTORS","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_VERTEX_ATTRIBS","getExtension","initStats","ViewCamera","templateVars","easingMethod","extend","extendHeader","T","chartCameraUID","applyArray","source","concat","ChartCamera","_offset","_scale","_needsViewDrawn","setId","setOffset","setScale","sqrt","add1","copy1","vec","scale1","subtract1","multiply1","dot1","linear1","t","length1","add2","copy2","scale2","subtract2","multiply2","dot2","linear2","length2","add3","copy3","scale3","subtract3","multiply3","linear3","length3","dot3","add4","copy4","scale4","subtract4","multiply4","dot4","linear4","length4","vec1Methods","copy","dot","linear","multiply","subtract","vec2Methods","vec3Methods","vec4Methods","VecMath","EventManager","getProjection","viewId","mouseManager","getView","getViewScreenBounds","setMouseManager","mouse_1","quad_tree_1","isDefined","MouseEventManager","views","controllers","handlesWheelEvents","eventCleanup","_waitingForRender","getViewsUnderMouse","mouse","hitViews","query","resize","context","setViews","setControllers","addContextListeners","QuadTree","addAll","map","filter","startView","element","startPosition","wheelHandler","event","eventElementPosition","interaction","makeInteraction","wheel","makeWheel","controller","handleWheel","stopPropagation","preventDefault","onwheel","addEventListener","onmouseleave","waitingForRender","handleMouseOut","onmousemove","handleMouseMove","onmousedown","downViews","canClick","clickStartTime","Date","now","currentPosition","handleMouseDown","button","delta","drag","makeDrag","handleDrag","onmouseup","_event","onmouseover","handleMouseOver","handleMouseUp","handleClick","experiemental","onselectstart","addTouchContextListeners","ontouchstart","ontouchend","ontouchmove","ontouchcancel","_i","previous","current","viewsUnderMouse","normalizeWheel","experimental","onmousewheel","removeEventListener","expand_atlas_attributes_1","expand_easing_attributes_1","layer_buffer_type_1","pack_attributes_1","testStartVector","testEndVector","_b","isInstanceAttribute","attr","isVertexAttribute","isUniform","toVertexAttributeInternal","materialAttribute","toUniformInternal","sortNeedsUpdateFirstToTop","compareVec","round","injectShaderIO","shaderIO","find","testStart","testEnd","validationRules","validation","test","cpu","ignoreEndValueCheck","ignoreOverTimeCheck","validateInstanceAttributes","generateEasingAttributes","addedUniforms","generateAtlasResourceUniforms","MATRIX4","projectionMatrix","elements","matrix","surface","frameMetrics","currentTime","generateBaseUniforms","generatePickingUniforms","addedInstanceAttributes","generateBaseInstanceAttributes","generatePickingAttributes","allUniforms","allInstanceAttributes","packAttributes","generateBaseVertexAttributes","UNIFORM_SIZE_TO_MATERIAL_TYPE","MATRIX3","DEFAULT_UNIFORM_VALUE","toMaterialUniform","generateLayerMaterial","layerUniforms","instancingUniforms","materialParams","vertexShader","fragmentShader","generatedUniform","RawShaderMaterial","isNumberCluster","isArray","generateLayerGeometry","maxInstancesPerBuffer","vertexBuffers","attribute_1","Float32Array","formatError","endj","instanceSize","endk_1","copyWithin","instancingBuffer","instanceStartIndex","BufferGeometry","attribute_3","BufferAttribute","addAttribute","chart_camera_1","scene_1","view_1","generateDefaultScene","aspectRatio","viewSize","defaultCamera","OrthographicCamera","defaultChartCamera","defaultViewport","defaultView","defaultScene","DataBounds","LOCKED_MODULE_UNIT_MESSAGE","ShaderModuleUnit","_content","_isLocked","_moduleId","_compatibility","lock","shader_module_unit_1","debugModuleVS","debugModuleFS","IMPORT_TOKEN","IMPORT_DELIMITER","isUnitCompatible","unit","compatibility","ShaderModule","register","out_1","output","isFSCompatible","FRAGMENT","isVSCompatible","VERTEX","isFinal","additionalModules","included","Set","errors","debugTarget","modifedShader","reverse","join","queueIndex","unshift","circularPath","shift","has","includedModuleOutput","template","token","trimmedToken","trim","afterToken","substr","mod","moduleContent","content","floor","LabelRasterizer","awaitContext","Promise","setTimeout","sent","calculateLabelSize","calculateTexture","calculateTrucatedText","sampleScaling","drawLabel","truncatedText","measureContents","minX","minY","maxX","maxY","rasterization","texture","createCroppedCanvas","maxWidth","text","firstTest","cursor","safety","nextCursor","cropped","imageSmoothingEnabled","drawImage","fontSize","getLabelRasterizationFontSize","fillStyle","font","makeCSSFont","measureText","fillText","potentialCanvas","fontWeight","fontFamily","imageData","getImageData","render","renderSync","ImageAtlasResource","image","ColorRasterizer","limit","makeCSS","g","opacity","fillRect","ColorAtlasResource","SubTexture","atlasReferenceID","atlasTexture","atlasTL","atlasTR","atlasBL","atlasBR","widthOnAtlas","heightOnAtlas","isValid","pixelWidth","pixelHeight","pack_node_1","sub_texture_1","AtlasSize","Atlas","validResources","textureSettings","packing","PackNode","updateTexture","invalidateResource","zero","setManager","registerResource","removeResource","delete","redoneCanvas","dispose","Texture","generateMipmaps","premultiplyAlpha","_isValid","sizeToType","1","2","3","4","9","16","99","UniformProcessing","metricsProcessor","generateUniformAttributePacking","uniformPackingBufferName","totalInstanceUniformBlocks","fill","Vector4","injectionType","injection","toEmit","emitOnce","callback","emit","clearTimeout","flushEmitOnce","getAttributeShaderName","browser","three_1","IE_ADJUSTMENT","OLD_IE_ADJUSTMENT","MAX_FIREFOX_WHEELDELTA","lowPassY","LOW_PASS_U0","LOW_PASS_U1","LOW_PASS_U2","LOW_PASS_U3","firefox","deltaX","deltaY","sign","pop","Vector2","msie","version","wheelDeltaX","wheelDeltaY","wheelDelta","detail","msedge","multiplyScalar","relative","mouseX","mouseY","eventX","eventY","nativeEvent","pageX","pageY","clientX","clientY","scrollLeft","scrollTop","body","offsetParent","offsetLeft","offsetTop","shader_templating_1","template_vars_1","extendShader","baseVS","baseFS","extendedVS","extendedFS","header","AutoEasingLoopStyle","vector_1","pow","sin","PI","GPU_PI","clamp","minVal","maxVal","easeOutElasticGPU","easeBackInGPU","continuousSinusoidalGPU","AutoEasingMethod","gpu","duration","method","delay","loop","methodName","immediate","_start","_t","easeInQuad","time","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeOutElastic","easeBackIn","easeBackOut","t1","easeBackInOut","a1","t2","continuousSinusoidal","CONTINUOUS","direction","amplitude","CommonMaterialOptions","transparentShape","premultipliedAlpha","transparent","transparentImage","blending","CustomBlending","blendSrc","OneFactor","isManualStart","isTimeSet","setAutomatic","setStart","setTiming","label_atlas_resource_1","toInstanceIOValue","AtlasResourceManager","targetAtlas","requestQueue","requestLookup","atlasManager","dequeueRequests","didDequeue","resources","requests","this_1","updateAtlas","atlasRequests_1","request","iMax","requestAnimationFrame","from","entries","getAtlasTexture","atlasRequests","existingRequests","filterQuery","queryValues","filtered","obj","Quadrants","mid","TL","Node","TR","BL","BR","children","nodes","child","doAdd","cover","childrenProps","MAX_VALUE","allChildren","gatherChildren","split","isNaN","area","list","visit","queryBounds","queryPoint","cb","finished","Block","available","setAttribute","check","ensureSizes","newBlock","BLANK_EASING_PROPS","startTime","isEasingAttribute","usedInstanceAttributes","easingAttributes","instanceAttributes_1","easingIds","providedUID","name_1","easingUID","attributeDataShare","attributeDelay","attributeDuration","easingValues","timeValue","REPEAT","REFLECT","timePassed","childAttributes","startAttr","parentAttribute","_o","startTimeAttr","durationAttr","easingAttributes_1","emptyTexture","atlasInstanceAttributes","requestedAtlasInjections","isAtlasAttribute","injections","flatten","instanceAttribute","data_bounds_1","ref","scaleRatio","parse","num","parseFloat","reference","top_1","LayerMouseEvents","isOver","sceneViews","getSceneViewsUnderMouse","sceneViewByViewId","sceneView","viewItem","getMouseByViewId","viewMouseByViewId","handleInteraction","handleMouseClick","_drag","handleMouseDrag","sceneViews_1","handleSceneView","_e","_flag","updateColorPickRange","allSceneViews","currentSceneViews","analyzeColorPickingRendering","pickingData","allColors","colorData","dataHeight","dataWidth","nearestColor","uniqueColors","pixelIndex","distance","row","dx","dy","testDistance","MetricsProcessing","calculateUniformBlockUseage","instanceMaxBlock","blocksPerInstance","maxUniforms","maxUniformsForInstancing","EasingProcessing","methods","methodSizes","sizeType","auto_easing_method_1","formatting_1","VECTOR_COMPONENTS","orderByPriority","makeVectorSwizzle","AttributeProcessing","uniformProcessor","declarations","processDeclarations","destructuring","processDestructuring","processVertexAttributes","processInstanceAttributeBufferStrategy","processInstanceAttributePackingBufferStrategy","orderedAttributes","processDestructuringInstanceAttribute","processDestructuringInstanceAttributePacking","processDestructuringUniformBuffer","processAutoEasingTiming","processDestructureBlocks","pingPong","maxBlock","attribute_processing_1","easing_processing_1","metrics_processing_1","shader_module_1","uniform_processing_1","ShaderProcessor","easingProcessing","metricsProcessing","uniformProcessing","attributeProcessing","shaders","shadersWithImports","processImports","attributeDeclarations","vertexUniformDeclarations","fragmentUniformDeclarations","easingMethodDeclarations","fullShaderVS","fullShaderFS","processedShaderVS","stack","additionalImports","images_1","labels_1","shader_processor_1","color_picking_analysis_1","layer_mouse_events_1","generate_default_scene_1","generate_layer_geometry_1","generate_layer_material_1","generate_layer_model_1","inject_shader_io_1","mouse_event_manager_1","texture_1","atlas_resource_manager_1","DEFAULT_BACKGROUND_COLOR","Color","isCanvas","createLayer","layerClass","LayerSurface","AtlasManager","currentViewport","currentFrame","previousTime","isBufferingAtlas","scenes","willDisposeLayer","viewDrawDependencies","loadReady","loadReadyResolve","layerId","initLayer","frameIncrement","onViewReady","validLayers","erroredLayers","pickingPassByView","pickingPass","overlapViews","passed","initializer","resourceManager","renderer","pickingRenderer","LabelInstance","ImageInstance","drawSceneView","updateColorPick","flags","clearFlags","COLOR","DEPTH","pickingTarget","Uint8Array","pickWidth","readRenderTargetPixels","pickHeight","colorPicking","didBuffer","rendererSize","getSize","getPixelRatio","background","setScissorTest","setScissor","clearColor","setSize","setRenderTarget","STENCIL","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","setViewport","gatherViewDrawDependencies","endi","sourceView","targetView","getViewSize","getViewWorldBounds","topLeft","bottomRight","init","setContext","initGL","initMouseManager","initResources","WebGLRenderer","alpha","antialias","preserveDrawingBuffer","autoClear","setRendererSize","setPixelRatio","setClearColor","sceneViewDepth","SCISSOR_TEST","sceneOptions","newScene","defaultSceneElement","viewOptions","newView","addLayerToScene","shaderMetrics","printShader","eventManagers","atlasResources","createAtlas","layerInitializers","existingLayer","sync","_layer","fitContainer","_pixelRatio","parentElement","className","containerBox","getBoundingClientRect","box","isWebGLContext","canvasContext","isString","getElementById","WebGLRenderTarget","magFilter","LinearFilter","minFilter","stencilBuffer","instance_provider_1","primitives_1","layer_1","RingLayer","ring","radius","center","scaleFactor","animations","animate","animateColor","animateCenter","animateRadius","vertexToNormal","0","5","vertexToSide","attributeNames","thickness","_","vertex","InstanceProvider","instance_1","RingInstance","anchorCalculator","TopLeft","anchor","_rectangle","padding","TopMiddle","rectangle","TopRight","MiddleLeft","Middle","MiddleRight","BottomLeft","BottomMiddle","BottomRight","Custom","RectangleInstance","maxScale","scaling","BOUND_MAX","_anchor","setAnchor","newAnchor","types_2","RectangleLayer","anchorEffect","projection","minScale","ALWAYS","NEVER","screenPoint","_u","rasterizationLookUp","_label","_cssFont","_fontFamily","_fontSize","_fontStyle","_fontWeight","_maxWidth","_text","_width","_height","_isDestroyed","fontStyle","cssFontLookup","rasterizations","references","_rasterization","LabelLayer","animateLocation","animateSize","ImageRasterizer","calculateImageSize","_sampleScale","atlas_1","color_atlas_resource_1","color_rasterizer_1","image_atlas_resource_1","label_rasterizer_1","ZERO_IMAGE","allAtlas","destroyAtlas","atlasName","setDefaultImage","loadImage","loadedImage","isValidImage","rect","dimensions","first","second","insertedNode","insert","nodeImage","ux","nodeDimensions","uy","uw","uh","onePixelX","atlasDimensions","imageSrc","subTexture","image_1","onload","onerror","path","toDataURL","Image","src","resources_1","isLeaf","child0","child1","hasChild","newNode","fitFlag","imgWidth","imgHeight","dWidth","dHeight","removed","_image","tint","_sourceWidth","_sourceHeight","_element","_path","aspect","common_options_1","ImageLayer","animateTint","EdgeInstance","colorStart","colorEnd","control","widthStart","widthEnd","setEdgeWidth","setColor","interpolation","LINE","p1","p2","_c1","_c2","BEZIER","c1","BEZIER2","c2","toPointObject","toPointArray","TEST_RESOLUTION","edgePicking","broadphase","minPickDistance","scaleType","interpolate","edge","edgeWidthStart","edgeWidthEnd","PASS_X","PASS_Y","SCREEN_CURVE","closestIndex","closestDistance","secondClosestIndex","secondClosestDistance","control1","control2","startPoint","endPoint","linePoint","lineWidth","startSegment","endSegment","vector","lineDirection","lineNormal","distanceTo","_view","edge_picking_1","pickVS","screenVS","edgeFS","EdgeLayer","_c","_d","_f","animateEnd","animateStart","animateColorStart","animateColorEnd","animateControl","MAX_SEGMENTS","vertexInterpolation","_uniform","CircleInstance","squareDistance","Point","getClosest","testPoint","points","closestPoint","getClosestIndex","amount","normalize","magnitude","getDistance","squared","getMidpoint","make","CircleLayer","circle","circleScreenCenter","mouseScreen","fadeOutOversized","ArcInstance","angle","isMouseOver","isMouseDown","getColorPickInstance","isColorProcessor","_mouse","onMouseDown","hitTest_1","query_1","world_1","querySpace","instances","bind","instanceForColor","onMouseOut","hitTest_2","query_2","world_2","onMouseUp","hitTest_3","query_3","world_3","onMouseOver","onMouseMove","hitTest_4","query_4","info","world_4","notOverInstances","isCurrentlyOver_1","noLongerOver","onMouseClick","hitTest_5","query_5","world_5","UniformQuadDiffProcessor","quadPicking","UniformColorDiffProcessor","InstanceAttributeQuadDiffProcessor","locations","InstanceAttributeColorDiffProcessor","buffers","availableClusters","instanceToCluster","clusterToBuffer","makeNewBuffer","cluster","maxUniformBlock","uniformBlocksPerInstance","pickModel","setScene","newGeometry","drawRange","newMaterial","clone","newModel","activeInstances","clusters","firstInstance","lastInstance","uniformIndex","uniformName","fakeAttribute","InstancedBufferAttribute","instanceIndex","emit_once_1","allBufferLocations","availableLocations","currentInstancedCount","instanceToBufferLocation","growthCount","maxInstancedCount","blockSubAttributesLookup","attributeToPropertyIds","updateAllPropertyIdList","activePropertyId","doAddWithRegistration","propertyIdsForAttribute","makeUpdateAllPropertyIdList","locationInfo","resizeBuffer","gatherLocationsIntoGroups","newLocations","growth","ids","attributeToNewBufferLocations","InstancedBufferGeometry","previousInstanceAmount","blockAttributes","array","newAttribute","setDynamic","blockSubAttributes","blockSize","kMax","subAttribute","allLocations","internalAttribute","startAttributeIndex","attributeSize","jMax","newLocation","blockSizes","blockAttributeUID","totalNewInstances","attributesBufferLocations","bufferLocationsForAttribute","childBufferLocations","group","bufferLocation","childAttribute","bufferLocationsForChildAttribute","childBufferLocation","_g","instance_attribute_color_diff_processor_1","instance_attribute_diff_processor_1","instance_attribute_quad_diff_processor_1","uniform_color_diff_processor_1","uniform_diff_processor_1","uniform_quad_diff_processor_1","cleanObservation","instanceChanges","allowChanges","disposer","observableDisposer","INSERT","CHANGE","REMOVE","emptyPropertyChanges","ArcScaleType","ArcLayer","animateAngle","animateThickness","side","DoubleSide","getBounds","childToNode","childToBounds","nullBounded","fromSplit","doRemove","found","node","ReferenceCamera","offsetFilter","scaleFilter","base","_val","h","plural","ms","str","String","exec","long","fmtLong","fmtShort","createDebug","prevTime","self","curr","prev","coerce","format","formatter","hash","charCodeAt","selectColor","disable","names","skips","len","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","noop","nextTick","title","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","extend_shader_1","extendShaderInitialization","extendedShaders","isNumber","AnimationHelper","groupAnimation","groupCount","baseDelay","delayGap","modifyInstances","startFrameTime","gap","CameraBoundsAnchor","event_manager_1","BasicCameraController","isPanning","panFilter","_allViews","startViews","onRangeChanged","_camera","_targetView","startViewDidStart","applyBounds","applyScaleBounds","boundsHorizontalOffset","boundsVerticalOffset","scaleMin","scaleMax","setBounds","ignoreCoverViews","anchoredByBoundsHorizontal","TOP_LEFT","MIDDLE_LEFT","BOTTOM_LEFT","worldBounds","screenPadding","TOP_MIDDLE","MIDDLE","BOTTOM_MIDDLE","TOP_RIGHT","MIDDLE_RIGHT","BOTTOM_RIGHT","anchoredByBoundsVertical","worldTLinScreenSpace","worldBRinScreenSpace","canStart","findCoveredStartView","under","coveredStartView","getTargetView","_button","pan","wheelMetrics","beforeZoom","currentZoomX","currentZoomY","deltaScale","afterZoom","getRange","setRange","newWorld","deltaPan"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"three\"), require(\"bowser\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"three\", \"bowser\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"network-bubble-chart\"] = factory(require(\"three\"), require(\"bowser\"));\n\telse\n\t\troot[\"network-bubble-chart\"] = factory(root[\"three\"], root[\"bowser\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__140__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 146);\n","import * as Three from \"three\";\nimport { Instance } from \"./instance-provider/instance\";\nimport { Bounds } from \"./primitives/bounds\";\nimport { IPoint } from \"./primitives/point\";\nimport { ChartCamera, Vec, Vec2 } from \"./util\";\nimport { IAutoEasingMethod } from \"./util/auto-easing-method\";\nimport { IVisitFunction, TrackedQuadTree } from \"./util/tracked-quad-tree\";\n\nexport type Diff<T extends string, U extends string> = ({ [P in T]: P } &\n  { [P in U]: never } & { [x: string]: never })[T];\nexport type Omit<TType, TKeys> = Pick<TType, Exclude<keyof TType, TKeys>>;\nexport type ShaderIOValue =\n  | [number]\n  | [number, number]\n  | [number, number, number]\n  | [number, number, number, number]\n  | Three.Vector4[]\n  | Float32Array;\nexport type InstanceIOValue =\n  | [number]\n  | [number, number]\n  | [number, number, number]\n  | [number, number, number, number];\nexport type UniformIOValue =\n  | number\n  | InstanceIOValue\n  | Float32Array\n  | Three.Texture;\n\nexport enum InstanceBlockIndex {\n  ONE = 1,\n  TWO = 2,\n  THREE = 3,\n  FOUR = 4\n}\n\nexport enum InstanceAttributeSize {\n  ONE = 1,\n  TWO = 2,\n  THREE = 3,\n  FOUR = 4,\n  /** Special case for making instance attributes that can target Atlas resources */\n  ATLAS = 99\n}\n\nexport const instanceAttributeSizeFloatCount: { [key: number]: number } = {\n  [InstanceAttributeSize.ONE]: 1,\n  [InstanceAttributeSize.TWO]: 2,\n  [InstanceAttributeSize.THREE]: 3,\n  [InstanceAttributeSize.FOUR]: 4,\n  [InstanceAttributeSize.ATLAS]: 4\n};\n\nexport enum UniformSize {\n  ONE = 1,\n  TWO = 2,\n  THREE = 3,\n  FOUR = 4,\n  MATRIX3 = 9,\n  MATRIX4 = 16,\n  ATLAS = 99\n}\n\nexport enum VertexAttributeSize {\n  ONE = 1,\n  TWO = 2,\n  THREE = 3,\n  FOUR = 4\n}\n\n/**\n * This represents a color in the VoidGL system. Ranges are [0 - 1, 0 - 1, 0 - 1, 0 - 1]\n */\nexport type Color = [number, number, number, number];\n\n/**\n * Represents something with a unique id\n */\nexport interface Identifiable {\n  /** A unique identifier */\n  id: string;\n}\n\n/**\n * Information provided in mouse events interacting with instances and\n * layers.\n */\nexport interface IPickInfo<T extends Instance> {\n  /** If a mouse button is involved in the pick, this will be populated */\n  button?: number;\n  /** This is the parent layer id of the instances interacted with */\n  layer: string;\n  /** This is the list of instances that were detected in the interaction */\n  instances: T[];\n  /** If picking is set to ALL then this will be provided which can be used to make additional spatial queries */\n  querySpace?(bounds: Bounds | IPoint, visit?: IVisitFunction<T>): T[];\n  /** This is the screen coordinates of the mouse point that interacted with the instances */\n  screen: [number, number];\n  /** This is the world coordinates of the mouse point that interacted with the instances */\n  world: [number, number];\n  /** Projection methods to easily go between coordinate spaces */\n  projection: IProjection;\n}\n\nexport interface IVertexAttribute {\n  /**\n   * When initWithBuffer and customFill are not specified, this is was the system will initially\n   * load each vertex attribute with.\n   */\n  defaults?: number[];\n  /**\n   * When this is specified it will initialize the model's attribute with the data in this buffer.\n   */\n  initWithBuffer?: Float32Array;\n  /**\n   * When generating this attribute in the shader this will be the prefix to the attribute:\n   * For instance, if you specify 'highp' as the modifier, then the attribute that appears\n   * in the shader will be:\n   * attribute highp vec3 position;\n   */\n  qualifier?: string;\n  /**\n   * This is the name the attribute will be for the model.\n   */\n  name: string;\n  /**\n   * This is the number of floats the attribute will consume. For now, we only allow for up\n   * to four floats per attribute.\n   */\n  size: VertexAttributeSize;\n  /**\n   * This lets you populate the buffer with an automatically called method. This will fire when\n   * necessary updates are detected or on initialization.\n   */\n  update(vertex: number): ShaderIOValue;\n}\n\nexport interface IVertexAttributeInternal extends IVertexAttribute {\n  /** This is the actual attribute generated internally for the ThreeJS interfacing */\n  materialAttribute: Three.BufferAttribute | null;\n}\n\nexport interface IInstanceAttribute<T extends Instance> {\n  /**\n   * If this is specified, this attribute becomes a size of 4 and will have a block index of\n   * 0. This makes this attribute and layer become compatible with reading atlas resources.\n   * The value provided for this property should be the name of the atlas that is created.\n   */\n  atlas?: {\n    /** Specify which generated atlas to target for the resource */\n    key: string;\n    /** Specify the name that will be injected that will be the sampler2D in the shader */\n    name: string;\n    /**\n     * This specifies which of the shaders the sampler2D will be injected into.\n     * Defaults to the Fragment shader only.\n     */\n    shaderInjection?: ShaderInjectionTarget;\n  };\n  /**\n   * This is a block index helping describe the instancing process. It can be any number as\n   * the system will sort and organize them for you. This only helps the system detect when\n   * you cram too much info into a single block. The tighter you pack your blocks the better\n   * your program will perform.\n   *\n   * Note: It's best to leave this blank as the system now packs your attributes for you and\n   * will determine this number for you.\n   */\n  block?: number;\n  /**\n   * This is the index within the block this attribute will be available.\n   */\n  blockIndex?: InstanceBlockIndex;\n  /**\n   * If the settings on this attrubute spawns additional attributes, those attributes shall\n   * be populated here. Otherwise this remains undefined.\n   */\n  childAttributes?: IInstanceAttribute<T>[];\n  /**\n   * When this is set, the system will automatically inject necessary Shader IO to facilitate\n   * performing the easing on the GPU, which saves enormous amounts of CPU processing time\n   * trying to calcuate animations and tweens for properties.\n   *\n   * NOTE: Setting this increases the amount of data per instance by: size * 2 + ;\n   * as it injects in a start value, start time, and duration\n   */\n  easing?: IAutoEasingMethod<Vec>;\n  /**\n   * This is the name that will be available in your shader for use. This will only be\n   * available after the ${attributes} declaration.\n   */\n  name: string;\n  /**\n   * If this attribute is created automatically by the system based on the settings of another\n   * attribute, that parent attribute will be set here. Otherwise this remains undefined.\n   */\n  parentAttribute?: IInstanceAttribute<T>;\n  /**\n   * When generating this attribute in the shader this will be the prefix to the attribute:\n   * For instance, if you specify 'highp' as the modifier, then the attribute that appears\n   * in the shader will be:\n   * attribute highp vec3 position;\n   */\n  qualifier?: string;\n  /**\n   * This is how many floats the instance attribute takes up. Due to how instancing is\n   * implemented, we can only take up to 4 floats per variable right now.\n   */\n  size?: InstanceAttributeSize;\n  /**\n   * This is the accessor that executes when the instance needs updating. Simply return the\n   * value that should be populated for this attribute.\n   */\n  update(instance: T): InstanceIOValue;\n}\n\n/**\n * Internal Instance Attributes are ones that actually map to an attribute in the shader and use\n * hardware instancing.\n */\nexport interface IInstanceAttributeInternal<T extends Instance>\n  extends IInstanceAttribute<T> {\n  /** We will keep an internal uid for the  */\n  uid: number;\n  /**\n   * Sometimes an attribute is actually a sub attribute to another attribute, such as in the cases of\n   * attribute packing (in uniforms or in attribute packing). This UID indicates the parental attribute\n   * UID. This parent identifier may be an actual InstanceAttribute or not. It could just indicate this\n   * attribute is packed into SOMETHING.\n   */\n  packUID?: number;\n  /** This is the actual attribute mapped to a buffer */\n  bufferAttribute: Three.InstancedBufferAttribute;\n}\n\n/**\n * This is an attribute where the atlas is definitely declared.\n */\nexport interface IAtlasInstanceAttribute<T extends Instance>\n  extends IInstanceAttribute<T> {\n  /**\n   * If this is specified, this attribute becomes a size of 4 and will have a block index of\n   * 0. This makes this attribute and layer become compatible with reading atlas resources.\n   * The value provided for this property should be the name of the atlas that is created.\n   */\n  atlas: {\n    /** Specify which generated atlas to target for the resource */\n    key: string;\n    /** Specify the name that will be injected that will be the sampler2D in the shader */\n    name: string;\n    /**\n     * This specifies which of the shaders the sampler2D will be injected into.\n     * Defaults to the Fragment shader only.\n     */\n    shaderInjection?: ShaderInjectionTarget;\n  };\n}\n\n/**\n * This is an attribute that is simply a value\n */\nexport interface IEasingInstanceAttribute<T extends Instance>\n  extends IInstanceAttribute<T> {\n  /**\n   * This MUST be defined to be an Easing attribute\n   */\n  easing: IAutoEasingMethod<Vec> & { uid?: number };\n  /**\n   * Easing attributes requires size to be present\n   */\n  size: InstanceAttributeSize;\n}\n\n/**\n * This is an attribute that is simply a value\n */\nexport interface IValueInstanceAttribute<T extends Instance>\n  extends IInstanceAttribute<T> {\n  /**\n   * If this is specified, this attribute becomes a size of 4 and will have a block index of\n   * 0. This makes this attribute and layer become compatible with reading atlas resources.\n   * The value provided for this property should be the name of the atlas that is created.\n   */\n  atlas: undefined;\n}\n\n/** These are flags for indicating which shaders receive certain injection elements */\nexport enum ShaderInjectionTarget {\n  /** ONLY the vertex shader will receive the injection */\n  VERTEX = 1,\n  /** ONLY the fragment shader will receive the injection */\n  FRAGMENT = 2,\n  /** Both the fragment and vertex shader will receive the injection */\n  ALL = 3\n}\n\nexport interface IUniform {\n  /**\n   * This lets you specify which of the shaders will receive this uniform as available.\n   * This defaults to only injecting into the vertex shader.\n   */\n  shaderInjection?: ShaderInjectionTarget;\n  /** Name of the uniform as will be available in the shaders */\n  name: string;\n  /** How many floats the uniform shall encompass */\n  size: UniformSize;\n  /**\n   * When generating this uniform in the shader this will be the prefix to the uniform:\n   * For instance, if you specify 'highp' as the modifier, then the uniform that appears\n   * in the shader will be:\n   * uniform highp vec3 position;\n   */\n  qualifier?: string;\n  /**\n   * This is the accessor that executes every frame before this layer is drawn. It gives\n   * opportunity to update the uniform's value before every draw.\n   */\n  update(uniform: IUniform): UniformIOValue;\n}\n\nexport interface IUniformInternal extends IUniform {\n  /**\n   * All layers will have many many ShaderMaterials generated per each instance buffer as a single buffer\n   * can only render so many instances. This tracks across all generated ShaderMaterials for each buffer\n   * the material uniforms that need to be updated as a Uniform for a layer is dictated as uniform across\n   * all instances.\n   */\n  materialUniforms: Three.IUniform[];\n}\n\n/**\n * This is the structure of a uniform generated for the sake of instancing\n */\nexport interface IInstancingUniform {\n  name: string;\n  type: \"f\" | \"v2\" | \"v3\" | \"v4\" | \"4fv\" | \"bvec4\";\n  value: ShaderIOValue;\n}\n\n/**\n * Represents a complete shader object set.\n */\nexport interface IShaders {\n  fs: string;\n  vs: string;\n}\n\n/**\n * Represents an element that has a full list of projection methods\n */\nexport interface IProjection {\n  /** This is the chart camera utilized in the projection of elements */\n  camera: ChartCamera;\n  /** Converts from the pixel density layer to the screen space */\n  pixelSpaceToScreen(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from the screen coordinates to the pixel density layer */\n  screenToPixelSpace(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from screen space to the view's relative coordinates */\n  screenToView(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from screen space to the world space of a scene */\n  screenToWorld(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from a view's space to the screen */\n  viewToScreen(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from a views space to the world coordinates */\n  viewToWorld(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from world coordinate space of a scene to the screen */\n  worldToScreen(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from world coordinate space of a scene to the view's space */\n  worldToView(point: IPoint, out?: IPoint): IPoint;\n}\n\nexport type IMaterialOptions = Partial<\n  Omit<\n    Omit<Omit<Three.ShaderMaterialParameters, \"uniforms\">, \"vertexShader\">,\n    \"fragmentShader\"\n  >\n>;\n\n/** This is the method signature for determining whether or not a point hits an instance */\nexport type InstanceHitTest<T> = (o: T, p: IPoint, v: IProjection) => boolean;\n\n/**\n * This is the type of picking assigned to a layer. Each mode has performance and functionality\n * tradeoffs.\n */\nexport enum PickType {\n  /** Disable any picking methodology */\n  NONE,\n  /** Pick all instances found underneath the mouse. The Layer must explicitly support this feature. */\n  ALL,\n  /**\n   * NOTE: NOT IMPLEMENTED YET\n   *\n   * Uses highly efficient color rendering method to detect an instance on a pixel by pixel check. Since it is\n   * based on rendering, it will only select the 'visually' top most rendered instance. This means instances can be occluded\n   * by other instances is an instance renders behind another.\n   *\n   * This is vastly more efficient and accurate than ALL. This also will be more readily supported than ALL.\n   */\n  SINGLE\n}\n\n/**\n * This represents the settings and objects used to facilitate picking in a layer.\n */\nexport interface IPickingMetrics {\n  /** This is the current pick mode that is active during the draw pass of the layer */\n  currentPickMode: PickType;\n  /** This is the picking style to be used */\n  type: PickType;\n}\n\n/**\n * This is the picking settings and objects to facilitate PickType.ALL so we can get\n * all instances underneath the mouse.\n */\nexport interface IQuadTreePickingMetrics<T extends Instance>\n  extends IPickingMetrics {\n  /** This handles the ALL type only */\n  type: PickType.ALL;\n  /** This stores all of our instances in a quad tree to spatially track our instances */\n  quadTree: TrackedQuadTree<T>;\n  /** This is the method for performing a hit test with the provided instance */\n  hitTest: InstanceHitTest<T>;\n}\n\n/**\n * This is the picking settings and objects to facilitate PickType.SINGLE so we can get\n * a single instance underneath the mouse.\n */\nexport interface ISinglePickingMetrics<T extends Instance>\n  extends IPickingMetrics {\n  /** Set the enum for the type */\n  type: PickType.SINGLE;\n  /**\n   * This is a lookup of the instance by it's UID which is all that is needed to decode a color to an instance\n   * The color UINT8 components composited into a single UINT32 IS the UID of the instance\n   */\n  uidToInstance: Map<number, T>;\n}\n\n/**\n * This is the picking settings and objects to facilitate PickType.NONE where no information\n * is retrieved for mouse interactions.\n */\nexport interface INonePickingMetrics extends IPickingMetrics {\n  // Single Picking does not require any special helper information\n  type: PickType.NONE;\n}\n\nexport interface IColorPickingData {\n  /** The mouse target position where the data is rendered */\n  mouse: Vec2;\n  /** The color data loaded for last picking rendering */\n  colorData: Uint8Array;\n  /** The height of the data array */\n  dataHeight: number;\n  /** The width of the data array */\n  dataWidth: number;\n  /** The nearest found color */\n  nearestColor: number;\n  /** All colors in the data */\n  allColors: number[];\n}\n\n/**\n * Diff types that an instance can go through. Used to help the system consume the diff\n * and apply it to the GL framework.\n */\nexport enum InstanceDiffType {\n  CHANGE = 0,\n  INSERT = 1,\n  REMOVE = 2\n}\n\n/**\n * This is the metrics associated with a frame. Mostly dealing with timing values.\n */\nexport type FrameMetrics = {\n  /** The frame number rendered. Increases by 1 every surface draw */\n  currentFrame: number;\n  /** The start time of the current frame */\n  currentTime: number;\n  /** The start time of the previous frame */\n  previousTime: number;\n};\n\n/**\n * This represents controls that can be utilized when adjustig easing\n */\nexport interface IEasingControl {\n  /** A value in ms that expresses how long the system should wait before beginning the animation */\n  readonly delay?: number;\n  /** Indicates how long the easing should take to complete in ms */\n  readonly duration: number;\n  /** The end value the easing should approach */\n  readonly end: Vec;\n  /** The starting value of the easing object */\n  readonly start: Vec;\n  /** The start time in ms the easing object utilizes */\n  readonly startTime: number;\n\n  /**\n   * If you manually set values for the easing properties, then you use this to return\n   * the easing object back to an automated state which is where the start value is\n   * the calculated current position of the output and the delay and duration is determined\n   * by the easing set to the layer's IAutomatedEasingMethod value set to the layer.\n   */\n  setAutomatic(): void;\n\n  /**\n   * This controls the start value of the easing. This should be used to force a starting\n   * value of the animation.\n   *\n   * Use setAutomatic() to return to default easing behavior.\n   */\n  setStart(start?: Vec): void;\n\n  /**\n   * This controls of the timing of the easing equation. This should be used to adjust\n   * when a value is to be adjusted\n   *\n   * Use setAutomatic() to return to default easing behavior.\n   */\n  setTiming(delay?: number, duration?: number): void;\n}\n\n/**\n * This is the minimum properties required to make all easing functions operate.\n */\nexport interface IEasingProps {\n  /** A value in ms that expresses how long the system should wait before beginning the animation */\n  delay?: number;\n  /** Indicates how long the easing should take to complete in ms */\n  duration: number;\n  /** The end value the easing should approach */\n  end: Vec;\n  /** A flag indicating if the easing start value is manually set, thus prioritizing the values already set in this object */\n  isManualStart?: boolean;\n  /** A flag indicating if the easing timing is manually set, thus prioritizing the values already set in this object */\n  isTimeSet?: boolean;\n  /** The starting value of the easing object */\n  start: Vec;\n  /** The start time in ms the easing object utilizes */\n  startTime: number;\n}\n\n/**\n * This is the Shader IO information a layer will provide.\n */\nexport interface IShaderInputs<T extends Instance> {\n  /** These are very frequently changing attributes and are uniform across all vertices in the model */\n  instanceAttributes?: (IInstanceAttribute<T> | null)[];\n  /** These are attributes that should be static on a vertex. These are considered unique per vertex. */\n  vertexAttributes?: (IVertexAttribute | null)[];\n  /** Specify how many vertices there are per instance */\n  vertexCount: number;\n  /** These are uniforms in the shader. These are uniform across all vertices and all instances for this layer. */\n  uniforms?: (IUniform | null)[];\n}\n\n/**\n * This is the initialization of the shader.\n */\nexport type IShaderInitialization<T extends Instance> = IShaderInputs<T> &\n  IShaders;\n\nexport interface IShaderExtension {\n  header?: string;\n  body?: string;\n}\n\nexport type IShaderIOExtension<T extends Instance> = Partial<\n  IShaderInputs<T>\n> & {\n  vs?: IShaderExtension;\n  fs?: IShaderExtension;\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","export * from \"./observable\";\nexport * from \"./instance-provider\";\nexport * from \"./instance\";\n","export * from \"../instance-provider/instance\";\nexport * from \"./common-options\";\nexport * from \"./animation-helper\";\nexport * from \"./auto-easing-method\";\nexport * from \"./chart-camera\";\nexport * from \"./extend-shader-io\";\nexport * from \"./mouse\";\nexport * from \"./reference-camera\";\nexport * from \"./shader-templating\";\nexport * from \"./tracked-quad-tree\";\nexport * from \"./uid\";\nexport * from \"./vector\";\nexport * from \"./view-camera\";\nexport * from \"./webgl-stat\";\n","import { IPoint } from \"./point\";\n\nexport interface IBoundsOptions {\n  /** Top left x position */\n  x?: number;\n  /** Top left y position */\n  y?: number;\n  /** Width covered */\n  width?: number;\n  /** height covered */\n  height?: number;\n\n  /** Specify the left */\n  left?: number;\n  /** Specify the right */\n  right?: number;\n  /** Specify the top */\n  top?: number;\n  /** Specify the bottom */\n  bottom?: number;\n}\n\n/**\n * Class to manage the x, y, width, and height of an object\n *\n * @template T This specifies the data type associated with this shape and is accessible\n *             via the property 'd'\n */\nexport class Bounds {\n  x: number = 0;\n  y: number = 0;\n  width: number = 0;\n  height: number = 0;\n\n  get area() {\n    return this.width * this.height;\n  }\n\n  get bottom() {\n    return this.y + this.height;\n  }\n\n  get left() {\n    return this.x;\n  }\n\n  get mid() {\n    return {\n      x: this.x + this.width / 2.0,\n      y: this.y + this.height / 2.0\n    };\n  }\n\n  get right() {\n    return this.x + this.width;\n  }\n\n  get top() {\n    return this.y;\n  }\n\n  static emptyBounds() {\n    return new Bounds({\n      height: 0,\n      width: 0,\n      x: 0,\n      y: 0\n    });\n  }\n\n  /**\n   * Create a new instance\n   *\n   * @param left  The left side (x coordinate) of the instance\n   * @param right The right side of the instance\n   * @param top The top (y coordinate) of the instance\n   * @param bottom The bottom of the instance\n   */\n  constructor(options: IBoundsOptions) {\n    this.x = options.x || options.left || 0;\n    this.y = options.y || options.top || 0;\n    this.height = options.height || (options.bottom || 0) - this.y || 0;\n    this.width = options.width || (options.right || 0) - this.x || 0;\n  }\n\n  /**\n   * Checks to see if a point is within this bounds object.\n   *\n   * @param point\n   */\n  containsPoint(point: IPoint) {\n    return !(\n      point.x < this.x ||\n      point.y < this.y ||\n      point.x > this.right ||\n      point.y > this.bottom\n    );\n  }\n\n  /**\n   * Grows this bounds object to cover the space of the provided bounds object\n   *\n   * @param item\n   */\n  encapsulate(item: Bounds | IPoint) {\n    if (item instanceof Bounds) {\n      if (item.x < this.x) {\n        this.width += Math.abs(item.x - this.x);\n        this.x = item.x;\n      }\n\n      if (item.y < this.y) {\n        this.height += Math.abs(item.y - this.y);\n        this.y = item.y;\n      }\n\n      if (this.right < item.right) {\n        this.width += item.right - this.right;\n      }\n\n      if (this.bottom < item.bottom) {\n        this.height += item.bottom - this.bottom;\n      }\n\n      return true;\n    } else {\n      if (item.x < this.x) {\n        this.width += this.x - item.x;\n        this.x = item.x;\n      }\n\n      if (item.x > this.right) {\n        this.width += item.x - this.x;\n      }\n\n      if (item.y < this.y) {\n        this.height += this.y - item.y;\n        this.y = item.y;\n      }\n\n      if (item.y > this.bottom) {\n        this.height += item.y - this.y;\n      }\n\n      return true;\n    }\n  }\n\n  /**\n   * Checks to see if the provided bounds object could fit within the dimensions of this bounds object\n   * This ignores position and just checks width and height.\n   *\n   * @param bounds\n   *\n   * @return {number} 0 if it doesn't fit. 1 if it fits perfectly. 2 if it just fits.\n   */\n  fits(bounds: Bounds): 0 | 1 | 2 {\n    // If the same, the bounds fits exactly into this bounds\n    if (this.width === bounds.width && this.height === bounds.height) {\n      return 1;\n    }\n\n    // The bounds can fit within this, then it just fits\n    if (this.width >= bounds.width && this.height >= bounds.height) {\n      return 2;\n    }\n\n    // Otherwise, the bounds does not fit within this bounds\n    return 0;\n  }\n\n  /**\n   * Checks if a bounds object intersects another bounds object.\n   *\n   * @param bounds\n   */\n  hitBounds(bounds: Bounds) {\n    return !(\n      this.right < bounds.x ||\n      this.x > bounds.right ||\n      this.bottom < bounds.y ||\n      this.y > bounds.height\n    );\n  }\n\n  /**\n   * Sees if the provided bounds is completely within this bounds object. Unlike fits() this takes\n   * position into account.\n   *\n   * @param bounds\n   */\n  isInside(bounds: Bounds): boolean {\n    return (\n      this.x >= bounds.x &&\n      this.right <= bounds.right &&\n      this.y >= bounds.y &&\n      this.bottom <= bounds.bottom\n    );\n  }\n\n  /**\n   * Easy readout of this Bounds object.\n   */\n  toString() {\n    return `{x: ${this.x} y:${this.y} w:${this.width} h:${this.height}}`;\n  }\n}\n","import { Instance } from \"../../instance-provider/instance\";\nimport { IInstanceAttributeInternal } from \"../../types\";\nimport { Vec2 } from \"../../util\";\nimport { Layer } from \"../layer\";\nimport { Scene } from \"../scene\";\n\nexport function isBufferLocation(val: any): val is IBufferLocation {\n  return val && val.buffer && val.buffer.value;\n}\n\nexport function isBufferLocationGroup(\n  val: any\n): val is IBufferLocationGroup<IBufferLocation> {\n  return val && val.propertyToBufferLocation;\n}\n\n/**\n * This defines a base information object that explains where in a buffer a value\n * is represented.\n */\nexport interface IBufferLocation {\n  /** This is the parent attribute of this location */\n  attribute: IInstanceAttributeInternal<Instance>;\n  /** For some buffer strategies, there is a concept of block that is used to tightly pack attributes together. */\n  block?: number;\n  /**\n   * This is the generic buffer object interface for accessing the actual buffer.\n   */\n  buffer: {\n    value: Float32Array | Uint8Array;\n  };\n  /**\n   * If the attribute has child attributes (attributes auto generated as a consequence of the attributes settings)\n   * then the children's buffer locations can be found here.\n   */\n  childLocations?: IBufferLocation[];\n  /**\n   * This is the instance index indicative of the instance positioning within the buffer.\n   * Keep in mind: This does NOT correlate to a lookup for an Instance object but rather for\n   * the instancing concept designed for GL Buffers.\n   */\n  instanceIndex: number;\n  /**\n   * This is the range within the buffer values should be injected for this location.\n   */\n  range: Vec2;\n}\n\n/**\n * Each instance that comes in can be associated with a group of buffer locations. A buffer location for each\n * instance attribute used in updates. So a grouping is several buffer locations that are keyed by\n * the instance's property's UIDs.\n */\nexport interface IBufferLocationGroup<T extends IBufferLocation> {\n  /** This is the instance index WITHIN THE BUFFERS. This does NOT have relevance to Instance type objects */\n  instanceIndex: number;\n  /** This is a map of property UIDs to an associated buffer location */\n  propertyToBufferLocation: { [key: number]: T };\n}\n\n/**\n * Layers manage instances and those instances require a form of binding to their associated buffers.\n * The buffers have to be intelligently created and managed in this tieing to maximize performance.\n * One can not have a buffer for every instance in most cases, so the buffer manager has to get instances\n * to cooperate sharing a buffer in whatever strategy possible that best suits the hardware and it's limitations.\n *\n * This provides a uniform interface between instances and their corresponding buffer.\n */\nexport abstract class BufferManagerBase<\n  T extends Instance,\n  U extends IBufferLocation\n> {\n  /** The layer this manager glues Instances to Buffers */\n  layer: Layer<T, any>;\n  /** The scene the layer is injecting elements into */\n  scene: Scene;\n\n  /**\n   * Base constructor. A manager always needs to be associated with it's layer and it's scene.\n   */\n  constructor(layer: Layer<T, any>, scene: Scene) {\n    this.layer = layer;\n    this.scene = scene;\n  }\n\n  /**\n   * Destroy all elements that consume GPU resources or consumes otherwise unreleaseable resources.\n   */\n  abstract destroy(): void;\n\n  /**\n   * This adds an instance to the manager and thus ties the instance to an IBuffer location\n   */\n  add: (instance: T) => U | IBufferLocationGroup<U> | undefined;\n\n  /**\n   * Retrieves the buffer locations for the instance provided\n   */\n  abstract getBufferLocations(\n    instance: T\n  ): U | IBufferLocationGroup<U> | undefined;\n\n  /**\n   * This retrieves the property ID for the active attribute. This is necessary to prevent\n   * the need for lookups to find the active attribute.\n   */\n  abstract getActiveAttributePropertyId(): number;\n\n  /**\n   * This returns how many instances this buffer manager has grown to accommodate.\n   */\n  abstract getInstanceCount(): number;\n\n  /**\n   * This should provide a minimum property id list that represents a set of properties that if triggered\n   * for update, would cause all of the attributes to be updated for the layer.\n   */\n  abstract getUpdateAllPropertyIdList(): number[];\n\n  /**\n   * Disassociates an instance with it's buffer location and makes the instance\n   * in the buffer no longer drawable.\n   */\n  remove: (instance: T) => T;\n\n  /**\n   * Removes the manager from the scene it applied itself to.\n   */\n  abstract removeFromScene(): void;\n}\n","import { Identifiable, IEasingControl, IEasingProps } from \"../types\";\nimport { EasingProps } from \"../util/easing-props\";\nimport { InstanceProvider } from \"./instance-provider\";\nimport { observable } from \"./observable\";\n\nlet instanceUID = 0;\n\nexport interface IInstanceOptions {\n  /** The instance can be declared with an initial active state */\n  active?: boolean;\n  /** An instance must be declared with an identifier */\n  id?: string;\n}\n\nexport class Instance implements Identifiable {\n  static get newUID() {\n    return (instanceUID = ++instanceUID % 0xffffff);\n  }\n\n  /** This indicates when the instance is active / rendering */\n  @observable active: boolean;\n  /** The property changes on the instance */\n  changes: { [key: number]: number } = {};\n  /** Stores property identification numbers */\n  property: { [key: string]: number } = {};\n  /**\n   * This is a lookup that provides a means to retrieve the id of an easing type currently available to the instance.\n   * This is populated when the instance becomes a part of a layer with easing attributes.\n   *\n   * This property is to NOT be mutated except by the system.\n   */\n  easingId: { [key: string]: number } | undefined;\n  /** This is an internal easing object to track properties for automated easing */\n  private _easing = new Map<number, IEasingProps>();\n  /** Internal, non-changeable id */\n  private _id: string;\n  /** This is the observer of the Instance's observable properties */\n  private _observer: InstanceProvider<this> | null;\n  /** This is where observables store their data for the instance */\n  observableStorage: any[] = [];\n  /** A numerical look up for the instance. Numerical identifiers run faster than objects or strings */\n  @observable private _uid = Instance.newUID;\n\n  /**\n   * Retrieves a method for disposing the link between observables and observer.\n   */\n  get observableDisposer(): () => void {\n    return () => delete this._observer;\n  }\n\n  /**\n   * Retrieves the observer of the observables.\n   */\n  get observer(): InstanceProvider<this> | null {\n    return this._observer || null;\n  }\n\n  /**\n   * Applies an observer for changes to the observables.\n   */\n  set observer(val: InstanceProvider<this> | null) {\n    // If an observer already is present, we should inform it, that it is being removed\n    // in favor of a new observer\n    const oldObserver = this._observer;\n\n    // If we're switching observers, then we have to dump out assumptions made within other observers\n    if (oldObserver && oldObserver !== val) {\n      this._easing.clear();\n      oldObserver.remove(this);\n    }\n\n    // Apply the new observer as the current observer\n    this._observer = val;\n  }\n\n  /**\n   * This clears any lingering easing information that may have been registered with the instance.\n   */\n  clearEasing() {\n    this._easing.clear();\n    delete this.easingId;\n  }\n\n  /**\n   * Retrieves easing properties for the observables that are associated with easing.\n   */\n  get easing() {\n    return this._easing;\n  }\n\n  /**\n   * This attempts to get the easing object for this instance for a given attribute that it MIGHT be associated with.\n   *\n   * When an instance is added to a layer and the layer has attributes with easing applied to them, the instance gains easing values\n   * for the attributes in the layer with applied easing.\n   *\n   * You can access the easing values by requesting the attribute's \"name\" property value using this method.\n   *\n   * There is NO WAY TO GUARANTEE this value is set or available, so this method WILL return undefined if you did\n   * not use the correct name, or no such value exists, or the layer decided to not make the attribute animateable.\n   *\n   * Thus ALWAYS check the returned value to ensure it is defined before attempting to use it's results.\n   *\n   * PERFORMANCE: You can probably get much better performance NOT using this to manipulate the easing object directly.\n   * The system is designed to automatically animate an item from it's current rendered location to the next location\n   * seamlessly thus accounting for most situations. This method is provided to commit much more complex start, duration,\n   * and delay animations within a given frame to prevent the need for complicated setTimeout patterns.\n   *\n   * This CAN be faster than the default behavior if it avoids causing complicated easing computations to determine where\n   * the rendering should be at the moment (complicated cpu methods within the IAutoEasingMethod used).\n   */\n  getEasing(attributeName: string): IEasingControl | undefined {\n    if (this.easingId) {\n      const easingId = this.easingId[attributeName];\n\n      if (easingId) {\n        const easing = this._easing.get(easingId);\n\n        if (easing instanceof EasingProps) {\n          return easing;\n        }\n      }\n    }\n\n    return;\n  }\n\n  /**\n   * Get the applied id of this instance\n   */\n  get id() {\n    return this._id;\n  }\n\n  /**\n   * Get the auto generated ID of this instance\n   */\n  get uid() {\n    return this._uid;\n  }\n\n  /**\n   * This method is utilized internally to indicate when requested resources are ready.\n   * If you have a property that will be requesting a resource, you should implement this method\n   * to cause a trigger for the property to activate such that the property will update it's buffer.\n   */\n  resourceTrigger() {\n    // No default behavior, subclasses must override and provide behavior.\n    console.warn(\n      \"resourceTrigger called on an instance that did not override resourceTrigger. resourceTrigger MUST be overridden for instances\",\n      \"that utilize a resource. The observable that is tied to committing the resource should be 'triggered' in this method.\"\n    );\n  }\n\n  constructor(options: IInstanceOptions) {\n    this._id = options.id || \"\";\n    this.active = options.active || this.active;\n  }\n}\n","import * as Three from \"three\";\nimport { Instance } from \"../instance-provider/instance\";\nimport { InstanceDiff } from \"../instance-provider/instance-provider\";\nimport {\n  IInstanceAttribute,\n  IMaterialOptions,\n  INonePickingMetrics,\n  InstanceAttributeSize,\n  InstanceBlockIndex,\n  InstanceDiffType,\n  InstanceHitTest,\n  InstanceIOValue,\n  IPickInfo,\n  IQuadTreePickingMetrics,\n  IShaderInitialization,\n  ISinglePickingMetrics,\n  IUniform,\n  IUniformInternal,\n  IVertexAttributeInternal,\n  PickType,\n  ShaderInjectionTarget,\n  UniformIOValue,\n  UniformSize\n} from \"../types\";\nimport { BoundsAccessor, TrackedQuadTree } from \"../util\";\nimport { IdentifyByKey, IdentifyByKeyOptions } from \"../util/identify-by-key\";\nimport {\n  BufferManagerBase,\n  IBufferLocation\n} from \"./buffer-management/buffer-manager-base\";\nimport { InstanceDiffManager } from \"./buffer-management/instance-diff-manager\";\nimport { LayerInteractionHandler } from \"./layer-interaction-handler\";\nimport { LayerBufferType } from \"./layer-processing/layer-buffer-type\";\nimport { LayerInitializer, LayerSurface } from \"./layer-surface\";\nimport { AtlasResourceManager } from \"./texture/atlas-resource-manager\";\nimport { View } from \"./view\";\n\nexport interface IModelType {\n  /** This is the draw type of the model to be used */\n  drawMode?: Three.TrianglesDrawModes;\n  /** This is the THREE JS model type */\n  modelType: IModelConstructable;\n}\n\n/**\n * Bare minimum required features a provider must provide to be the data for the layer.\n */\nexport interface IInstanceProvider<T extends Instance> {\n  /** A list of changes to instances */\n  changeList: InstanceDiff<T>[];\n  /** Resolves the changes as consumed */\n  resolve(): void;\n  /** Forces the provider to make a change list that ensures all elements are added */\n  sync(): void;\n}\n\n/**\n * Constructor options when generating a layer.\n */\nexport interface ILayerProps<T extends Instance> extends IdentifyByKeyOptions {\n  /** This is the data provider where the instancing data is injected and modified. */\n  data: IInstanceProvider<T>;\n  /**\n   * This sets how instances can be picked via the mouse. This activates the mouse events for the layer IFF\n   * the value is not NONE.\n   */\n  picking?: PickType;\n  /**\n   * Used for debugging. Logs the generated shader for the layer in the console.\n   */\n  printShader?: boolean;\n  /**\n   * This identifies the scene we want the layer to be a part of.\n   * Layer's with the same identifiers will render their buffers in the same scene.\n   * This only applies to the layer when the layer is initialized in a layer surface. You shouldn't\n   * be swapping layers from scene to scene.\n   *\n   * The scene identifier must be an identifier used when constructing the layer surface that this layer\n   * is added to.\n   */\n  scene: string;\n\n  // ---- EVENTS ----\n  /** Executes when the mouse is down on instances and a picking type is set */\n  onMouseDown?(info: IPickInfo<T>): void;\n  /** Executes when the mouse moves on instances and a picking type is set */\n  onMouseMove?(info: IPickInfo<T>): void;\n  /** Executes when the mouse no longer over instances and a picking type is set */\n  onMouseOut?(info: IPickInfo<T>): void;\n  /** Executes when the mouse is newly over instances and a picking type is set */\n  onMouseOver?(info: IPickInfo<T>): void;\n  /** Executes when the mouse button is release when over instances and a picking type is set */\n  onMouseUp?(info: IPickInfo<T>): void;\n  /** Executes when the mouse click gesture is executed over instances and a picking type is set */\n  onMouseClick?(info: IPickInfo<T>): void;\n}\n\nexport interface IModelConstructable {\n  new (\n    geometry?: Three.Geometry | Three.BufferGeometry,\n    material?: Three.Material | Three.Material[]\n  ): any;\n}\n\nexport interface IPickingMethods<T extends Instance> {\n  /** This provides a way to calculate bounds of an Instance */\n  boundsAccessor: BoundsAccessor<T>;\n  /** This is the way the system tests hitting an intsance */\n  hitTest: InstanceHitTest<T>;\n}\n\n/**\n * A base class for generating drawable content\n */\nexport class Layer<\n  T extends Instance,\n  U extends ILayerProps<T>\n> extends IdentifyByKey {\n  /** This MUST be implemented by sublayers in order for proper code hinting to happen */\n  static defaultProps: any = {};\n\n  /** This is the attribute that specifies the _active flag for an instance */\n  activeAttribute: IInstanceAttribute<T>;\n  /** This matches an instance to the list of Three uniforms that the instance is responsible for updating */\n  private _bufferManager: BufferManagerBase<T, IBufferLocation>;\n  /** Buffer manager is read only. Must use setBufferManager */\n  get bufferManager() {\n    return this._bufferManager;\n  }\n  /** This is the determined buffering strategy of the layer */\n  private _bufferType: LayerBufferType;\n  /** Buffer type is private and should not be directly modified */\n  get bufferType() {\n    return this._bufferType;\n  }\n  /** This determines the drawing order of the layer within it's scene */\n  depth: number = 0;\n  /** This contains the methods and controls for handling diffs for the layer */\n  diffManager: InstanceDiffManager<T>;\n  /**\n   * This gets populated when there are attributes that have easing applied to them. This\n   * subsequently gets applied to instances when they get added to the layer.\n   */\n  easingId: { [key: string]: number };\n  /** This is the threejs geometry filled with the vertex information */\n  geometry: Three.BufferGeometry;\n  /** This is the initializer used when making this layer. */\n  initializer: LayerInitializer;\n  /** This is all of the instance attributes generated for the layer */\n  instanceAttributes: IInstanceAttribute<T>[];\n  /** A lookup fo an instance by it's ID */\n  instanceById = new Map<string, T>();\n  /** Provides the number of vertices a single instance spans */\n  instanceVertexCount: number = 0;\n  /** This is the handler that manages interactions for the layer */\n  interactions: LayerInteractionHandler<T, U>;\n  /** The official shader material generated for the layer */\n  material: Three.RawShaderMaterial;\n  /** INTERNAL: For the given shader IO provided this is how many instances can be present per buffer. */\n  maxInstancesPerBuffer: number;\n  /** This is the mesh for the Threejs setup */\n  model: Three.Object3D;\n  /** This is all of the picking metrics kept for handling picking scenarios */\n  picking:\n    | IQuadTreePickingMetrics<T>\n    | ISinglePickingMetrics<T>\n    | INonePickingMetrics;\n  /** Properties handed to the Layer during a LayerSurface render */\n  props: U;\n  /** This is the system provided resource manager that lets a layer request Atlas resources */\n  resource: AtlasResourceManager;\n  /** This is the surface this layer is generated under */\n  surface: LayerSurface;\n  /** This is all of the uniforms generated for the layer */\n  uniforms: IUniformInternal[];\n  /** This is all of the vertex attributes generated for the layer */\n  vertexAttributes: IVertexAttributeInternal[];\n  /** This is the view the layer is applied to. The system sets this, modifying will only cause sorrow. */\n  view: View;\n  /** This indicates whether this layer needs to draw */\n  needsViewDrawn: boolean = false;\n  /** End time of animation */\n  animationEndTime: number = 0;\n\n  constructor(props: ILayerProps<T>) {\n    // We do not establish bounds in the layer. The surface manager will take care of that for us\n    // After associating the layer with the view it is a part of.\n    super(props);\n    // Keep our props within the layer\n    this.props = Object.assign({}, Layer.defaultProps || {}, props as U);\n    // Set up the pick type for the layer\n    const { picking = PickType.NONE } = this.props;\n\n    // If ALL is specified we set up QUAD tree picking for our instances\n    if (picking === PickType.ALL) {\n      const pickingMethods = this.getInstancePickingMethods();\n\n      this.picking = {\n        currentPickMode: PickType.NONE,\n        hitTest: pickingMethods.hitTest,\n        quadTree: new TrackedQuadTree<T>(\n          0,\n          1,\n          0,\n          1,\n          pickingMethods.boundsAccessor\n        ),\n        type: PickType.ALL\n      };\n    } else if (picking === PickType.SINGLE) {\n      this.picking = {\n        currentPickMode: PickType.NONE,\n        type: PickType.SINGLE,\n        uidToInstance: new Map<number, T>()\n      };\n    } else {\n      this.picking = {\n        currentPickMode: PickType.NONE,\n        type: PickType.NONE\n      };\n    }\n  }\n\n  /**\n   * Invalidate and free all resources assocated with this layer.\n   */\n  destroy() {\n    if (this.bufferManager) {\n      if (this.bufferManager.scene) this.bufferManager.scene.removeLayer(this);\n      this.bufferManager.removeFromScene();\n      this.bufferManager.destroy();\n    }\n  }\n\n  didUpdateProps() {\n    /** LIFECYCLE */\n  }\n\n  /**\n   * This is where global uniforms should update their values. Executes every frame.\n   */\n  draw() {\n    let uniform: IUniformInternal;\n    let value: UniformIOValue;\n\n    // Consume the diffs for the instances to update each element\n    const changeList = this.props.data.changeList;\n    // Set needsViewDrawn to be true if there is any change\n    if (changeList.length > 0) this.needsViewDrawn = true;\n    // Make some holder variables to prevent declaration within the loop\n    let change, instance, bufferLocations;\n    // Fast ref to the processor and manager\n    const diffManager = this.diffManager;\n    const processing = diffManager.processing;\n    const processor = diffManager.processor;\n\n    // Forewarn the processor how many instances are flagged for a change.\n    processor.incomingChangeList(changeList);\n\n    for (let i = 0, end = changeList.length; i < end; ++i) {\n      change = changeList[i];\n      instance = change[0];\n      bufferLocations = this.bufferManager.getBufferLocations(instance);\n      // The diff type is change[1] which we use to find the diff processing method to use\n      processing[change[1]](\n        processor,\n        instance,\n        Object.values(change[2]),\n        bufferLocations\n      );\n      // Clear the changes for the instance\n      instance.changes = {};\n    }\n\n    // Tell the diff processor that it has completed it's task set\n    processor.commit();\n    // Indicate the diffs are consumed\n    this.props.data.resolve();\n\n    // Loop through the uniforms that are across all instances\n    for (let i = 0, end = this.uniforms.length; i < end; ++i) {\n      uniform = this.uniforms[i];\n      value = uniform.update(uniform);\n      uniform.materialUniforms.forEach(\n        materialUniform => (materialUniform.value = value)\n      );\n    }\n  }\n\n  /**\n   * This method is for layers to implement to specify how the bounds for an instance are retrieved or\n   * calculated and how the Instance interacts with a point. This is REQUIRED to support PickType.ALL on the layer.\n   */\n  getInstancePickingMethods(): IPickingMethods<T> {\n    throw new Error(\n      \"When picking is set to PickType.ALL, the layer MUST have this method implemented; otherwise, the layer is incompatible with this picking mode.\"\n    );\n  }\n\n  /**\n   * The type of Three model as well as the preferred draw mode associated with it.\n   */\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TrianglesDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  /**\n   * The options for a three material without uniforms.\n   */\n  getMaterialOptions(): IMaterialOptions {\n    return {};\n  }\n\n  /**\n   * This sets up all of the data bindings that will transport data from the CPU\n   * to the Shader on the GPU.\n   *\n   * Instance Attributes: These are very frequently changing attributes\n   * Vertex Attributes: These are attributes that should be static on a vertex. Conisder it very costly to update.\n   *                    The only time making these modifieable is in the event of GL_POINTS.\n   * Uniforms: These set up the uniforms for the layer, thus having all normal implications of a uniform. Global\n   *           across the fragment and vertex shaders and can be modified with little consequence.\n   */\n  initShader(): IShaderInitialization<T> {\n    return {\n      fs: \"${import: no-op}\",\n      instanceAttributes: [],\n      uniforms: [],\n      vertexAttributes: [],\n      vertexCount: 0,\n      vs: \"${import: no-op}\"\n    };\n  }\n\n  /**\n   * Helper method for making an instance attribute. Depending on set up, this makes creating elements\n   * have better documentation when typing out the elements.\n   */\n  makeInstanceAttribute(\n    block: number,\n    blockIndex: InstanceBlockIndex,\n    name: string,\n    size: InstanceAttributeSize,\n    update: (o: T) => InstanceIOValue,\n    atlas?: {\n      key: string;\n      name: string;\n      shaderInjection?: ShaderInjectionTarget;\n    }\n  ): IInstanceAttribute<T> {\n    return {\n      atlas,\n      block,\n      blockIndex,\n      name,\n      size,\n      update\n    };\n  }\n\n  /**\n   * Helper method for making a uniform type. Depending on set up, this makes creating elements\n   * have better documentation when typing out the elements.\n   */\n  makeUniform(\n    name: string,\n    size: UniformSize,\n    update: (o: IUniform) => UniformIOValue,\n    shaderInjection?: ShaderInjectionTarget,\n    qualifier?: string\n  ): IUniform {\n    return {\n      name,\n      qualifier,\n      shaderInjection,\n      size,\n      update\n    };\n  }\n\n  /**\n   * Applies a buffer manager to the layer which handles instance changes and applies those changes\n   * to an appropriate buffer at the appropriate location.\n   */\n  setBufferManager(bufferManager: BufferManagerBase<T, IBufferLocation>) {\n    if (!this._bufferManager) {\n      this._bufferManager = bufferManager;\n      this.diffManager = new InstanceDiffManager<T>(this, bufferManager);\n      this.diffManager.makeProcessor();\n      this.interactions = new LayerInteractionHandler(this);\n    } else {\n      console.warn(\n        \"You can not change a layer's buffer strategy once it has been instantiated.\"\n      );\n    }\n  }\n\n  /**\n   * Only allows the buffer type to be set once\n   */\n  setBufferType(val: LayerBufferType) {\n    if (this._bufferType === undefined) {\n      this._bufferType = val;\n    } else {\n      console.warn(\n        \"You can not change a layers buffer strategy once it has been instantiated.\"\n      );\n    }\n  }\n\n  /**\n   * This method returns a flag indicating whether or not the layer should trigger it's view to redraw.\n   * By default, a redraw is triggered (this returns true) when a shallow comparison of the current props\n   * and the incoming props are different.\n   * This method can be overridden to place custom logic at this point to indicate when redraws should happen.\n   *\n   * NOTE: This should be considered for redraw logic centered around changes in the layer itself.\n   * There ARE additional triggers in the system that causes redraws. This method just aids in ensuring\n   * necessary redraws take place for layer level logic and props.\n   */\n  shouldDrawView(oldProps: U, newProps: U) {\n    for (const key in newProps) {\n      if (newProps[key] !== oldProps[key]) return true;\n    }\n\n    return false;\n  }\n\n  willUpdateInstances(_changes: [T, InstanceDiffType]) {\n    // HOOK: Simple hook so a class can review all of it's changed instances before\n    //       Getting applied to the Shader IO\n  }\n\n  willUpdateProps(_newProps: ILayerProps<T>) {\n    /** LIFECYCLE */\n  }\n\n  didUpdate() {\n    this.props.data.resolve();\n  }\n}\n","export enum AnchorType {\n  BottomLeft,\n  BottomMiddle,\n  BottomRight,\n  Custom,\n  Middle,\n  MiddleLeft,\n  MiddleRight,\n  TopLeft,\n  TopMiddle,\n  TopRight\n}\n\nexport type Anchor = {\n  /** When the anchor gets calculated on the image, this allows the anchor to go beyond the borders of the image by this amount */\n  padding: number;\n  /** This is the location of the anchor. If a custom anchor is specified, then the x and y are not automatically populated */\n  type: AnchorType;\n  /** This is populated with the anchor's location relative to the image's surface */\n  x?: number;\n  /** This is populated with the anchor's location relative to the image's surface */\n  y?: number;\n};\n\nexport enum ScaleType {\n  /** The size of the image will be tied to world space */\n  ALWAYS = 1,\n  /** The image will scale to it's font size then stop growing */\n  BOUND_MAX = 2,\n  /** The image will alwyas retain it's font size on screen */\n  NEVER = 3\n}\n","export * from \"./bounds\";\nexport * from \"./circle\";\nexport * from \"./point\";\nexport * from \"./scale\";\nexport * from \"./size\";\n","/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',\n  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',\n  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',\n  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',\n  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',\n  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',\n  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',\n  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',\n  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',\n  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',\n  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // Internet Explorer and Edge do not support colors.\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n    return false;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n","import * as Three from \"three\";\nimport { IModelConstructable, Layer } from \"../layer\";\n\nfunction isMesh(val: any): val is Three.Mesh {\n  return Boolean(val.isMesh);\n}\n\nexport function generateLayerModel(\n  layer: Layer<any, any>,\n  geometry: Three.BufferGeometry,\n  material: Three.ShaderMaterial\n): IModelConstructable & Three.Object3D {\n  const modelInfo = layer.getModelType();\n  const model = new modelInfo.modelType(geometry, material);\n\n  if (isMesh(model)) {\n    model.drawMode =\n      modelInfo.drawMode === undefined\n        ? Three.TriangleStripDrawMode\n        : modelInfo.drawMode;\n  }\n\n  return model;\n}\n","import { Instance } from \"../../instance-provider/instance\";\nimport {\n  IInstanceAttribute,\n  instanceAttributeSizeFloatCount,\n  IVertexAttribute\n} from \"../../types\";\nimport { WebGLStat } from \"../../util/webgl-stat\";\nimport { InstanceAttributeBufferManager } from \"../buffer-management/instance-attribute-buffering/instance-attribute-buffer-manager\";\nimport { InstanceAttributePackingBufferManager } from \"../buffer-management/instance-attribute-packed-buffering/instance-attribute-packing-buffer-manager\";\nimport { UniformBufferManager } from \"../buffer-management/uniform-buffering/uniform-buffer-manager\";\nimport { Layer } from \"../layer\";\nimport { Scene } from \"../scene\";\n\nconst debug = require(\"debug\")(\"performance\");\n\nexport enum LayerBufferType {\n  // This is a compatibility mode for instance attributes. This is used when:\n  // 1. It would perform better\n  // 2. When instance attributes are not available for the gl context (ANGLE draw instanced arrays)\n  // 3. When the instance attributes + vertex attributes exceeds the max Vertex Attributes for the hardware and Attribute\n  //    packing still can not fit all of the attributes for the item.\n  UNIFORM,\n  // This is a fast and zippy buffering strategy used when the hardware supports it for a provided layer!\n  INSTANCE_ATTRIBUTE,\n  // This is a slight degradation from the normal INSTANCE_ATTRIBUTE buffering strategy. If provided attributes do\n  // not fit the limited amount of vertex attributes supported by the hardware, then we have one last strategy\n  // to utilize the highly optimized hardware instancing, which is to cram multiple attributes within single\n  // attribute blocks. An attribute block is considered to be 4 32 bit floats. These packed attributes will then\n  // get dereferenced in the shader.\n  INSTANCE_ATTRIBUTE_PACKING\n}\n\n/**\n * This analyzes a layer and determines if it should use a compatibility instancing mode or use hardware\n * instancing.\n */\nexport function getLayerBufferType<T extends Instance>(\n  _gl: WebGLRenderingContext,\n  layer: Layer<T, any>,\n  vertexAttributes: IVertexAttribute[],\n  instanceAttributes: IInstanceAttribute<T>[]\n) {\n  let type = LayerBufferType.UNIFORM;\n  let attributesUsed = 0;\n\n  // The layer only gets it's buffer type calculated once\n  if (layer.bufferType !== undefined) {\n    return layer.bufferType;\n  }\n\n  // Uncomment this to force the uniform buffer strategy\n  // layer.setBufferType(LayerBufferType.UNIFORM);\n  // return LayerBufferType.UNIFORM;\n\n  if (WebGLStat.HARDWARE_INSTANCING) {\n    for (let i = 0, end = vertexAttributes.length; i < end; ++i) {\n      const attribute = vertexAttributes[i];\n      attributesUsed += Math.ceil(attribute.size / 4);\n    }\n\n    for (let i = 0, end = instanceAttributes.length; i < end; ++i) {\n      const attribute = instanceAttributes[i];\n      attributesUsed += Math.ceil(\n        instanceAttributeSizeFloatCount[attribute.size || 1] / 4\n      );\n    }\n\n    // Too many attempted single attributes. We will next attempt to see if we can pack the vertex\n    // attributes down into blocks.\n    if (attributesUsed > WebGLStat.MAX_VERTEX_ATTRIBUTES) {\n      attributesUsed = 0;\n\n      for (let i = 0, end = instanceAttributes.length; i < end; ++i) {\n        const attribute = instanceAttributes[i];\n        attributesUsed = Math.max(attributesUsed, attribute.block || 0);\n      }\n\n      for (let i = 0, end = vertexAttributes.length; i < end; ++i) {\n        const attribute = vertexAttributes[i];\n        attributesUsed += Math.ceil(attribute.size / 4);\n      }\n\n      // If we can fit now, then we are good to go with using attribute packing\n      if (attributesUsed < WebGLStat.MAX_VERTEX_ATTRIBUTES) {\n        type = LayerBufferType.INSTANCE_ATTRIBUTE_PACKING;\n\n        debug(\n          `Performance Issue (Moderate):\n          Layer %o is utilizing too many vertex attributes and is now using vertex packing.\n          Max Vertex units %o\n          Used Vertex units %o\n          Instance Attributes %o\n          Vertex Attributes %o`,\n          layer.id,\n          WebGLStat.MAX_VERTEX_ATTRIBUTES,\n          attributesUsed,\n          instanceAttributes,\n          vertexAttributes\n        );\n      }\n    } else {\n      // If we make it here, we are good to go using hardware instancing! Hooray performance!\n      type = LayerBufferType.INSTANCE_ATTRIBUTE;\n    }\n  }\n\n  // No other faster mode supported: use uniform instancing\n  if (type === LayerBufferType.UNIFORM) {\n    debug(\n      `Performance Issue (High):\n      Layer %o is utilizing too many vertex attributes and is now using a uniform buffer.\n      Max Vertex units %o\n      Used Vertex units %o\n      Instance Attributes %o\n      Vertex Attributes %o`,\n      layer.id,\n      WebGLStat.MAX_VERTEX_ATTRIBUTES,\n      attributesUsed,\n      instanceAttributes,\n      vertexAttributes\n    );\n    type = LayerBufferType.UNIFORM;\n  }\n\n  // Apply the type to the layer\n  layer.setBufferType(type);\n\n  return type;\n}\n\n/**\n * Builds the proper buffer manager for the provided layer\n */\nexport function makeLayerBufferManager<T extends Instance>(\n  gl: WebGLRenderingContext,\n  layer: Layer<T, any>,\n  scene: Scene\n) {\n  // Esnure the buffering type has been calculated for the layer\n  const type = getLayerBufferType(\n    gl,\n    layer,\n    layer.vertexAttributes,\n    layer.instanceAttributes\n  );\n\n  switch (type) {\n    // This is the Instance Attribute buffering strategy, which means the system\n    case LayerBufferType.INSTANCE_ATTRIBUTE: {\n      layer.setBufferManager(new InstanceAttributeBufferManager(layer, scene));\n      break;\n    }\n\n    // This is the Instance Attribute buffering strategy, which means the system\n    case LayerBufferType.INSTANCE_ATTRIBUTE_PACKING: {\n      layer.setBufferManager(\n        new InstanceAttributePackingBufferManager(layer, scene)\n      );\n      break;\n    }\n\n    // Anything not utiliziing a specialized buffering strategy will use the uniform compatibility mode\n    default: {\n      layer.setBufferManager(new UniformBufferManager(layer, scene));\n      break;\n    }\n  }\n}\n","export * from \"./atlas\";\nexport * from \"./atlas-manager\";\nexport * from \"./color-atlas-resource\";\nexport * from \"./color-rasterizer\";\nexport * from \"./image-atlas-resource\";\nexport * from \"./image-rasterizer\";\nexport * from \"./label-atlas-resource\";\nexport * from \"./label-rasterizer\";\n","export interface IdentifyByKeyOptions {\n  /** The identifier of the object */\n  key: string;\n}\n\n/**\n * This is an object that specifically is generated with a 'key' option that can never\n * be modified on the object and is identified henceforth with the key applied as the\n * 'id' of the object.\n */\nexport class IdentifyByKey {\n  /** Internal key held by the object */\n  private key: string;\n\n  /** READONLY id of the object. */\n  get id() {\n    return this.key;\n  }\n\n  constructor(options: IdentifyByKeyOptions) {\n    this.key = options.key;\n  }\n}\n","export interface IShaderTemplateResults {\n  /** This is the resulting shader string generated from the templating */\n  shader: string;\n  /** This is the template options provided by the shader. {option: num occurrences} */\n  shaderProvidedOptions: Map<string, number>;\n  /**\n   * This is the template options provided by the shader that were not resolved by the options parameter\n   * {option: num occurrences}\n   */\n  unresolvedShaderOptions: Map<string, number>;\n  /** This is the options provided to the template that did not get resolved by the shader {option: 1} */\n  unresolvedProvidedOptions: Map<string, number>;\n  /** This is the list of options that DID get resolved by the options provided {option: num occurrences} */\n  resolvedShaderOptions: Map<string, number>;\n}\n\nexport interface IShaderTemplateRequirements {\n  /** A string identifier to make it easier to identify which shader template failed requirements */\n  name: string;\n  /** The options that must be present within both provided options AND within the template */\n  values: string[];\n}\n\nexport interface IShaderTemplateOptions {\n  /** Callback for 'required' errors being emitted */\n  onError?(msg: string): void;\n  /** Callback that allows overrides for token replacement. Provides the token found and the suggested replacement for it */\n  onToken?(token: string, replace: string): string;\n  /** This is a key value pair the template uses to match tokens found to replacement values */\n  options: { [key: string]: string };\n  /** This is used to indicate which tokens are required both within the shader AND within the 'options' */\n  required?: IShaderTemplateRequirements;\n  /** THis is the shader written with templating information */\n  shader: string;\n}\n\n/**\n * This is a method that aids in making shaders a bit more dynamic with simple string replacement based on tokens written\n * into the shader. Tokens in the shader will appear as ${token} and will either be ignored by this method and thus removed\n * or will be replaced with a provided value.\n *\n * This method will give feedback on the replacements taking place and simplify the process of detecting errors within the process.\n */\nexport function shaderTemplate(\n  templateOptions: IShaderTemplateOptions\n): IShaderTemplateResults {\n  const { shader, options, required, onError, onToken } = templateOptions;\n  const matched = new Map<string, number>();\n  const noValueProvided = new Map<string, number>();\n  const notFound = new Map<string, number>();\n  const shaderOptions = new Map<string, number>();\n\n  const shaderResults = shader.replace(\n    /\\$\\{([^\\}]*)\\}/g,\n    (_x: string, match: string) => {\n      let replace = \"\";\n      shaderOptions.set(match, (shaderOptions.get(match) || 0) + 1);\n\n      if (match in options) {\n        matched.set(match, (matched.get(match) || 0) + 1);\n        replace = options[match];\n      } else {\n        noValueProvided.set(match, (noValueProvided.get(match) || 0) + 1);\n      }\n\n      if (onToken) {\n        replace = onToken(match, replace);\n      }\n\n      return replace;\n    }\n  );\n\n  Object.keys(options).forEach(option => {\n    if (!matched.get(option)) {\n      notFound.set(option, (notFound.get(option) || 0) + 1);\n    }\n  });\n\n  // Provide metrics\n  const results = {\n    resolvedShaderOptions: matched,\n    shader: shaderResults,\n    shaderProvidedOptions: shaderOptions,\n    unresolvedProvidedOptions: notFound,\n    unresolvedShaderOptions: noValueProvided\n  };\n\n  if (required) {\n    // This will ensure that BOTH the parameter input AND the shader provided the required options.\n    required.values.forEach(require => {\n      if (results.unresolvedProvidedOptions.get(require)) {\n        const msg = `${\n          required.name\n        }: Could not resolve all the required inputs. Input: ${require}`;\n        if (onError) onError(msg);\n        else console.error(msg);\n      } else if (results.unresolvedShaderOptions.get(require)) {\n        const msg = `${\n          required.name\n        }: A required option was not provided in the options parameter. Option: ${require}`;\n        if (onError) onError(msg);\n        else console.error(msg);\n      } else if (!results.resolvedShaderOptions.get(require)) {\n        const msg = `${\n          required.name\n        }: A required option was not provided in the options parameter. Option: ${require}`;\n        if (onError) onError(msg);\n        else console.error(msg);\n      }\n    });\n  }\n\n  return results;\n}\n","/** Important to start UIDs at 1 so that falsey evaluations do not pass when examining UIDs */\nlet UID = 1;\n\n/**\n * Provides a 64 bit UID.\n *\n * Note: all uids generated with uid() are unique amongst uid() calls and NOT unique amongst\n * other types of uid calls.\n */\nexport function uid() {\n  return ++UID;\n}\n\nlet CUID = 0;\n\n/**\n * Provides a 24 bit UID (keeps the UID within non-alpha color ranges)\n *\n * Note: all uids generated with colorUID() are unique amongst colorUID() calls and NOT unique amongst\n * other types of uid calls.\n */\nexport function colorUID() {\n  return ++CUID % 0xffffff;\n}\n","import { uid } from \"../util/uid\";\nimport { Instance } from \"./instance\";\n\nexport class ObservableMonitoring {\n  static gatherIds: boolean = false;\n  static observableIds: number[] = [];\n  static observableNamesToUID = new Map<string, number>();\n\n  /**\n   * This activates all observables to gather their UIDs when they are retrieved via their getter.\n   * All of the ID's gathered can be accessed via getObservableMonitorIds. It is REQUIRED that this\n   * is disabled again to prevent a MASSIVE memory leak.\n   */\n  static setObservableMonitor(enabled: boolean) {\n    ObservableMonitoring.gatherIds = enabled;\n    ObservableMonitoring.observableIds = [];\n  }\n\n  /**\n   * This retrieves the observables montiored IDs that were gathered when setObservableMonitor was\n   * enabled.\n   */\n  static getObservableMonitorIds(clear?: boolean) {\n    const values = ObservableMonitoring.observableIds.slice(0);\n    if (clear) ObservableMonitoring.observableIds = [];\n\n    return values;\n  }\n}\n\n/**\n * This is a custom decorator intended for single properties on Instances only! It will\n * facilitate automatic updates and stream the updates through an InstanceProvider to properly\n * update the Instances values in the appropriate and corresponding buffers that will get committed\n * to the GPU.\n */\nexport function observable<T extends Instance>(target: T, key: string) {\n  // Here we store the name of the observable to a UID. This mapping allows us to have a UID\n  // per NAME of an observable. A UID for a name can produce MUCH faster lookups than the name itself.\n  // Matching against the name allows us to have instances with their own property sets but have matching\n  // name mappings to improve compatibility of Instances with varying Layers.\n  let propertyUID: number =\n    ObservableMonitoring.observableNamesToUID.get(key) || 0;\n\n  if (!propertyUID) {\n    propertyUID = uid();\n    ObservableMonitoring.observableNamesToUID.set(key, propertyUID);\n  }\n\n  /**\n   * New property getter to get the property's alternative storage since we overrode\n   * the initial storage with a custom getter and setter.\n   */\n  function getter(this: T) {\n    if (ObservableMonitoring.gatherIds) {\n      ObservableMonitoring.observableIds.push(propertyUID);\n    }\n    return this.observableStorage[propertyUID];\n  }\n\n  /**\n   * New property setter to replace the property marked as observable. This allows\n   * us to broadcast a change to our current observer.\n   */\n  function setter(this: T, newVal: any) {\n    // Update the privatized value\n    this.observableStorage[propertyUID] = newVal;\n    // Broadcast change\n    this.changes[propertyUID] = propertyUID;\n    this.observer && this.observer.instanceUpdated(this);\n  }\n\n  /**\n   * Make sure the desired property is declared on the class with our custom getter and\n   * setter.\n   */\n  Object.defineProperty(target, key, {\n    configurable: true,\n    enumerable: true,\n    get: getter,\n    set: setter\n  });\n}\n","import * as Three from \"three\";\nimport {\n  AbsolutePosition,\n  getAbsolutePositionBounds\n} from \"../primitives/absolute-position\";\nimport { Bounds } from \"../primitives/bounds\";\nimport { IPoint } from \"../primitives/point\";\nimport { Color } from \"../types\";\nimport { ChartCamera } from \"../util/chart-camera\";\nimport { DataBounds } from \"../util/data-bounds\";\nimport { IdentifyByKey, IdentifyByKeyOptions } from \"../util/identify-by-key\";\nimport { ViewCamera, ViewCameraType } from \"../util/view-camera\";\n\nexport enum ClearFlags {\n  COLOR = 0b0001,\n  DEPTH = 0b0010,\n  STENCIL = 0b0100\n}\n\n/**\n * Defines the input metrics of a view for a scene.\n */\nexport interface IViewOptions extends IdentifyByKeyOptions {\n  /**\n   * The background color that gets cleared out for this view. Performance is\n   * better if this is left clear. Probably better to draw a colored quad instead.\n   * This is just convenient.\n   */\n  background?: Color;\n  /**\n   * This is the spatial charting camera that is concerned with offsets and scales.\n   * It is often easier to work with camera positioning and settings rather than working\n   * with the complex and nuanced viewCamera which works with special transformation matrices\n   * to express orientation.\n   *\n   * If not provided, then this camera will use a default ChartCamera for this camera slot. This\n   * will also cause a normal camera handler to be utilized.\n   */\n  camera?: ChartCamera;\n  /**\n   * This sets what buffers get cleared by webgl before the view is drawn in it's space.\n   */\n  clearFlags?: ClearFlags[];\n  /**\n   * If this is provided, the layer can be rendered with a traditional camera that utilizes\n   * matrix transforms to provide orientation/projection for the view.\n   *\n   * If this is NOT provided, the camera will be a special orthographic camera for 2d spaces\n   * with a y-axis of +y points down with (0, 0) at the top left of the viewport.\n   */\n  viewCamera?: ViewCamera;\n  /**\n   * This specifies the bounds on the canvas this camera will render to. This let's you render\n   * say a little square in the bottom right showing a minimap.\n   *\n   * If this is not specified, the entire canvas will be the viewport.\n   */\n  viewport: AbsolutePosition;\n}\n\nfunction isOrthographic(val: Three.Camera): val is Three.OrthographicCamera {\n  return \"left\" in val;\n}\n\n/**\n * This defines a view of a scene\n */\nexport class View extends IdentifyByKey {\n  static DEFAULT_VIEW_ID = \"__default__\";\n\n  /** If present, is the cleared color before this view renders */\n  background: Color;\n  /** Camera that defines the individual components of each axis with simpler concepts */\n  camera: ChartCamera;\n  /** These are the clear flags set for this view */\n  clearFlags: ClearFlags[];\n  /**\n   * This is the depth of the view. The higher the depth represents which layer is on top.\n   * Zero always represents the default view.\n   */\n  depth: number = 0;\n  /** This is set to ensure the projections that happen properly translates the pixel ratio to normal Web coordinates */\n  pixelRatio: number = window.devicePixelRatio;\n  /** This is the rendering bounds within screen space */\n  screenBounds: Bounds;\n  /** Camera that defines the view projection matrix */\n  viewCamera: ViewCamera;\n  /** The size positioning of the view */\n  viewport: AbsolutePosition;\n  /** The bounds of the render space on the canvas this view will render on */\n  viewBounds: DataBounds<View>;\n  /** This is the flag to see if a view needs draw */\n  needsDraw: boolean = false;\n  /** End time of animation */\n  animationEndTime: number = 0;\n\n  constructor(options: IViewOptions) {\n    super(options);\n    Object.assign(this, options);\n  }\n\n  screenToPixelSpace(point: IPoint, out?: IPoint) {\n    const p = out || { x: 0, y: 0 };\n\n    p.x = point.x * this.pixelRatio;\n    p.y = point.y * this.pixelRatio;\n\n    return p;\n  }\n\n  pixelSpaceToScreen(point: IPoint, out?: IPoint) {\n    const p = out || { x: 0, y: 0 };\n\n    p.x = point.x / this.pixelRatio;\n    p.y = point.y / this.pixelRatio;\n\n    return p;\n  }\n\n  screenToView(point: IPoint, out?: IPoint) {\n    const p = this.screenToPixelSpace(point, out);\n\n    p.x = p.x - this.viewBounds.x;\n    p.y = p.y - this.viewBounds.y;\n\n    return p;\n  }\n\n  viewToScreen(point: IPoint, out?: IPoint) {\n    const p = { x: 0, y: 0 };\n\n    p.x = point.x + this.viewBounds.x;\n    p.y = point.y + this.viewBounds.y;\n\n    return this.pixelSpaceToScreen(p, out);\n  }\n\n  screenToWorld(point: IPoint, out?: IPoint) {\n    const view = this.pixelSpaceToScreen(this.screenToView(point));\n\n    const world = out || { x: 0, y: 0 };\n    world.x =\n      (view.x - this.camera.offset[0] * this.camera.scale[0]) /\n      this.camera.scale[0];\n    world.y =\n      (view.y - this.camera.offset[1] * this.camera.scale[1]) /\n      this.camera.scale[1];\n\n    // If this is a custom camera, we must actually project our world point to the screen\n    if (this.viewCamera.type === ViewCameraType.CUSTOM) {\n      console.warn(\"Custom View Camera projections not supported yet\");\n    }\n\n    return world;\n  }\n\n  worldToScreen(point: IPoint, out?: IPoint) {\n    const screen = { x: 0, y: 0 };\n\n    // Calculate from the camera to view space\n    screen.x =\n      (point.x * this.camera.scale[0] +\n        this.camera.offset[0] * this.camera.scale[0]) *\n      this.pixelRatio;\n    screen.y =\n      (point.y * this.camera.scale[1] +\n        this.camera.offset[1] * this.camera.scale[1]) *\n      this.pixelRatio;\n\n    // If this is a custom camera, we must actually project our world point to the screen\n    if (this.viewCamera.type === ViewCameraType.CUSTOM) {\n      console.warn(\"Custom View Camera projections not supported yet\");\n    }\n\n    // Convert from view to screen space\n    return this.viewToScreen(screen, out);\n  }\n\n  viewToWorld(point: IPoint, out?: IPoint) {\n    const world = out || { x: 0, y: 0 };\n\n    const screen = this.pixelSpaceToScreen(point);\n    world.x =\n      (screen.x - this.camera.offset[0] * this.camera.scale[0]) /\n      this.camera.scale[0];\n    world.y =\n      (screen.y - this.camera.offset[1] * this.camera.scale[1]) /\n      this.camera.scale[1];\n\n    // If this is a custom camera, we must actually project our world point to the screen\n    if (this.viewCamera.type === ViewCameraType.CUSTOM) {\n      console.warn(\"Custom View Camera projections not supported yet\");\n    }\n\n    return world;\n  }\n\n  worldToView(point: IPoint, out?: IPoint) {\n    const screen = out || { x: 0, y: 0 };\n\n    // Calculate from the camera to view space\n    screen.x =\n      point.x * this.camera.scale[0] +\n      this.camera.offset[0] * this.camera.scale[0];\n    screen.y =\n      point.y * this.camera.scale[1] +\n      this.camera.offset[1] * this.camera.scale[1];\n\n    // If this is a custom camera, we must actually project our world point to the screen\n    if (this.viewCamera.type === ViewCameraType.CUSTOM) {\n      console.warn(\"Custom View Camera projections not supported yet\");\n    }\n\n    return screen;\n  }\n\n  /**\n   * This operation makes sure we have the view camera adjusted to the new viewport's needs.\n   * For default behavior this ensures that the coordinate system has no distortion, orthographic,\n   * top left as 0,0 with +y axis pointing down.\n   */\n  fitViewtoViewport(surfaceDimensions: Bounds) {\n    if (\n      this.viewCamera.type === ViewCameraType.CONTROLLED &&\n      isOrthographic(this.viewCamera.baseCamera)\n    ) {\n      const viewBounds = getAbsolutePositionBounds<View>(\n        this.viewport,\n        surfaceDimensions,\n        this.pixelRatio\n      );\n\n      const width = viewBounds.width;\n      const height = viewBounds.height;\n\n      const viewport = {\n        bottom: -height / 2,\n        far: 10000000,\n        left: -width / 2,\n        near: -100,\n        right: width / 2,\n        top: height / 2\n      };\n\n      const scaleX = 1;\n      const scaleY = 1;\n      const camera = this.viewCamera.baseCamera;\n\n      Object.assign(camera, viewport);\n      camera.position.set(\n        -viewBounds.width / 2.0 * scaleX,\n        viewBounds.height / 2.0 * scaleY,\n        camera.position.z\n      );\n      camera.scale.set(scaleX, -scaleY, 1.0);\n      camera.updateMatrix();\n      camera.updateMatrixWorld(true);\n      camera.updateProjectionMatrix();\n\n      this.viewBounds = viewBounds;\n      this.viewBounds.data = this;\n      this.screenBounds = new Bounds({\n        height: this.viewBounds.height / this.pixelRatio,\n        width: this.viewBounds.width / this.pixelRatio,\n        x: this.viewBounds.x / this.pixelRatio,\n        y: this.viewBounds.y / this.pixelRatio\n      });\n    } else if (!isOrthographic(this.viewCamera.baseCamera)) {\n      console.warn(\n        \"Fit to viewport does not support non-orthographic cameras as a default behavior.\"\n      );\n    }\n  }\n}\n","import * as Three from \"three\";\nimport { Instance } from \"../instance-provider/instance\";\nimport { ILayerProps, Layer } from \"../surface/layer\";\nimport { IdentifyByKey, IdentifyByKeyOptions } from \"../util/identify-by-key\";\nimport { IViewOptions, View } from \"./view\";\n\n/**\n * Defines the input for an available scene layers can add themselves to. Each scene can be rendered with multiple\n * views.\n */\nexport interface ISceneOptions extends IdentifyByKeyOptions {\n  /**\n   * This indicates all of the views this scene can be rendered with. For instance: You have a\n   * world scene and you want to render it stereoscopically for VR. Then you can specify two\n   * views with two viewports to render the scene on both halves of the canvas.\n   *\n   * Or perhaps you want an aerial shot as a minimap in the bottom right corner while the rest\n   * of the canvas renders a first person view, then you would make two views for that as well.\n   */\n  views: IViewOptions[];\n}\n\nfunction sortByDepth(a: Layer<any, any>, b: Layer<any, any>) {\n  return a.depth - b.depth;\n}\n\n/**\n * This defines a scene to which layers are added to. It also tracks the views that this scene\n * is rendered with.\n */\nexport class Scene extends IdentifyByKey {\n  static DEFAULT_SCENE_ID = \"__default__\";\n\n  /** This is the three scene which actually sets up the rendering objects */\n  container: Three.Scene | undefined = new Three.Scene();\n  // TODO: This 'could' be smarter when Three is gone. The pipeline could IMMEDIATELY render\n  /** We make a picking container specifically for the cases where objects must be rendered for picking */\n  pickingContainer: Three.Scene = new Three.Scene();\n  /** This is all of the layers tracked to the scene */\n  layers: Layer<any, any>[] = [];\n  /** This indicates the sort is dirty for a set of layers */\n  sortIsDirty = false;\n  /** This is the view */\n  viewById = new Map<string, View>();\n\n  constructor(options: ISceneOptions) {\n    super(options);\n\n    if (this.container) {\n      this.container.frustumCulled = false;\n      this.container.autoUpdate = false;\n    }\n  }\n\n  /**\n   * Adds a layer to the scene with the current view setting the layer contains.\n   * The layer can not jump between views or scenes. You must destroy and reconstruct\n   * the layer.\n   */\n  addLayer<T extends Instance, U extends ILayerProps<T>>(layer: Layer<T, U>) {\n    // Add the layer to the list of layers under the view\n    this.layers.push(layer);\n    this.sortIsDirty = true;\n  }\n\n  /**\n   * This adds a view to this scene to be used by the scene\n   */\n  addView(view: View) {\n    this.viewById.set(view.id, view);\n  }\n\n  /**\n   * Release any resources this may be hanging onto\n   */\n  destroy() {\n    delete this.container;\n  }\n\n  /**\n   * Removes a layer from the scene. No resort is needed as remove operations\n   * do not adjust the sorting order.\n   */\n  removeLayer(layer: Layer<any, any>) {\n    if (this.layers) {\n      const index = this.layers.indexOf(layer);\n\n      if (index >= 0) {\n        this.layers.splice(index, 1);\n        return;\n      }\n    }\n\n    console.warn(\n      \"Could not remove a layer from the scene as the layer was not a part of the scene to start. Scene:\",\n      this.id,\n      \"Layer:\",\n      layer.id\n    );\n  }\n\n  sortLayers() {\n    if (this.sortIsDirty) {\n      this.layers.sort(sortByDepth);\n    }\n  }\n}\n","import { Label } from \"../../primitives/label\";\nimport { BaseAtlasResource } from \"./base-atlas-resource\";\n\nexport class LabelAtlasResource extends BaseAtlasResource {\n  /** This is the label to be loaded into the atlas */\n  label: Label;\n  /** If the label renders */\n  truncatedText: string;\n\n  constructor(label: Label) {\n    super();\n    this.label = label;\n  }\n}\n","import { SubTexture } from \"./sub-texture\";\n\nexport class BaseAtlasResource {\n  /** The rasterization metrics of the label */\n  rasterization: {\n    /**\n     * WARNING: This will ONLY SOMETIMES be populated. The system can choose\n     * when to consume this as it chooses as it can be a major memory eater if\n     * permanently left in place. DO NOT RELY on this being available.\n     */\n    canvas?: HTMLCanvasElement;\n    image?: HTMLImageElement;\n    /** The rasterization dimensions as it is rendered to texture space on an atlas */\n    texture: {\n      height: number;\n      width: number;\n    };\n    /** The rasterization dimensions as it would be rendered in world space */\n    world: {\n      height: number;\n      width: number;\n    };\n  };\n  /**\n   * This sets the ratserization to be a larger value on the texture than is rendered within\n   * the world space. This allows for techniques to be applied in the shaders to incorporate super sampling\n   * or other processes which require higher levels of resolution.\n   *\n   * The default is 1 for a 1 to 1 sample scaling to world space rendering\n   */\n  sampleScale: number = 1;\n  /** Once loaded into the texture, this will be populated */\n  texture: SubTexture;\n}\n","export enum EdgeScaleType {\n  /** All dimensions are within world space */\n  NONE,\n  /**\n   * The control points are a delta from the end points within screen space, and the line thickness is within\n   * screen space as well all measured in pixels. The scaleFactor scales both thickness and control delta values.\n   * The endpoints remain in world space\n   */\n  SCREEN_CURVE\n}\n\nexport enum EdgeType {\n  /** Makes a straight edge with no curve */\n  LINE,\n  /** Makes a single control point Bezier curve */\n  BEZIER,\n  /** Makes a two control point bezier curve */\n  BEZIER2\n}\n\n/**\n * This is the broadphase control for edges to help handle quad tree adjustments for picking. If the edge scale type\n * is NONE, you don't need to utilize this. If you use screen space and have camera distortions along an axis, this\n * can help greatly.\n */\nexport enum EdgeBroadphase {\n  /** Use this if the broad phase detection should use both width and height of the edge's bounds */\n  ALL,\n  /** Use this to ensure a test against the edge is performed if the mouse aligns with it on the x-axis */\n  PASS_Y,\n  /** Use this to ensure a test against the edge is performed if the mouse aligns with it on the y axis */\n  PASS_X\n}\n","import * as Three from \"three\";\nimport { Instance, InstanceDiff } from \"../../../instance-provider\";\nimport { BaseDiffProcessor } from \"../base-diff-processor\";\nimport { isBufferLocation } from \"../buffer-manager-base\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\nimport { IUniformBufferLocation } from \"./uniform-buffer-manager\";\n\n// This is a mapping of the vector properties as they relate to an array order\nconst VECTOR_ACCESSORS: (keyof Three.Vector4)[] = [\"x\", \"y\", \"z\", \"w\"];\nconst EMPTY: number[] = [];\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class UniformDiffProcessor<T extends Instance> extends BaseDiffProcessor<\n  T\n> {\n  /**\n   * This processes add operations from changes in the instancing data\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (uniformCluster) {\n      manager.changeInstance(manager, instance, EMPTY, uniformCluster);\n    } else {\n      // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n      const uniforms = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocation(uniforms)) {\n        instance.active = true;\n        instance.easingId = manager.layer.easingId;\n        manager.updateInstance(manager.layer, instance, uniforms);\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the uniforms\n    if (uniformCluster) {\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n    } else {\n      // If we don't have existing uniforms, then we must remove the instance\n      manager.addInstance(manager, instance, EMPTY, uniformCluster);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation\n  ) {\n    if (uniformCluster) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // Remove the easing information the instance gained from being apart of the layer\n      instance.clearEasing();\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n    }\n  }\n\n  /**\n   * This performs the actual updating of buffers the instance needs to update\n   */\n  updateInstance(\n    layer: IInstanceDiffManagerTarget<T>,\n    instance: T,\n    uniformCluster: IUniformBufferLocation\n  ) {\n    if (instance.active) {\n      const uniforms = uniformCluster.buffer;\n      const uniformRangeStart = uniformCluster.range[0];\n      const instanceData: Three.Vector4[] = uniforms.value;\n      let instanceUniform, value, block, start;\n      let k, endk;\n\n      // Loop through the instance attributes and update the uniform cluster with the valaues\n      // Calculated for the instance\n      for (let i = 0, end = layer.instanceAttributes.length; i < end; ++i) {\n        instanceUniform = layer.instanceAttributes[i];\n        value = instanceUniform.update(instance);\n        block = instanceData[uniformRangeStart + (instanceUniform.block || 0)];\n        instanceUniform.atlas &&\n          layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n        start = instanceUniform.blockIndex;\n\n        if (start === undefined) {\n          continue;\n        }\n\n        // Hyper optimized vector filling routine. It uses properties that are globally scoped\n        // To greatly reduce overhead\n        for (k = start, endk = value.length + start; k < endk; ++k) {\n          block[VECTOR_ACCESSORS[k]] = value[k - start];\n        }\n      }\n\n      uniforms.value = instanceData;\n    } else {\n      const uniforms: Three.IUniform = uniformCluster.buffer;\n      const uniformRangeStart = uniformCluster.range[0];\n      const instanceData: Three.Vector4[] = uniforms.value;\n      let instanceUniform, value, block, start;\n\n      // Only update the _active attribute to ensure it is false. When it is false, there is no\n      // Point to updating any other uniform\n      instanceUniform = layer.activeAttribute;\n      value = instanceUniform.update(instance);\n      block = instanceData[uniformRangeStart + (instanceUniform.block || 0)];\n      instanceUniform.atlas &&\n        layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n      start = instanceUniform.blockIndex;\n\n      if (start !== undefined) {\n        // Hyper optimized vector filling routine. It uses properties that are globally scoped\n        // To greatly reduce overhead\n        for (let k = start, endk = value.length + start; k < endk; ++k) {\n          block[VECTOR_ACCESSORS[k]] = value[k - start];\n        }\n      }\n\n      uniforms.value = instanceData;\n    }\n  }\n\n  /**\n   * Right now there is no operations for committing for the uniform manager.\n   */\n  commit() {\n    /** no-op */\n  }\n\n  /**\n   * There are no optimizations available for this processor yet.\n   */\n  incomingChangeList(_changes: InstanceDiff<T>[]) {\n    /** no-op */\n  }\n}\n","import { Instance } from \"../../../instance-provider/instance\";\nimport { InstanceDiff } from \"../../../instance-provider/instance-provider\";\nimport { IInstanceAttributeInternal } from \"../../../types\";\nimport { Vec } from \"../../../util\";\nimport { BaseDiffProcessor } from \"../base-diff-processor\";\nimport {\n  IBufferLocation,\n  IBufferLocationGroup,\n  isBufferLocationGroup\n} from \"../buffer-manager-base\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\nimport { IInstanceAttributeBufferLocationGroup } from \"./instance-attribute-buffer-manager\";\n\nconst EMPTY: number[] = [];\nconst { min, max } = Math;\n\nenum DiffMode {\n  /** This mode will analyze incoming buffer location changes and only update the range of changed buffer */\n  PARTIAL,\n  /** This mode will not spend time figuring out what has changed for a buffer, rather the whole buffer will get an update */\n  FULL\n}\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class InstanceAttributeDiffProcessor<\n  T extends Instance\n> extends BaseDiffProcessor<T> {\n  /** This is the processor's current diff mode for consuming instance updates. */\n  private diffMode: DiffMode = DiffMode.PARTIAL;\n\n  /** This tracks a buffer attribute's uid to the range of data that it should update */\n  bufferAttributeUpdateRange: {\n    [key: number]: [IInstanceAttributeInternal<T>, number, number];\n  } = {};\n\n  /** This tracks a buffer attribute's uid that will perform a complete update */\n  bufferAttributeWillUpdate: {\n    [key: number]: IInstanceAttributeInternal<T>;\n  } = {};\n\n  /**\n   * The instance updating is a property instead of a method as we will want to be able to gear shift it for varying levels\n   * of adjustments.\n   */\n  updateInstance: (\n    layer: IInstanceDiffManagerTarget<T>,\n    instance: T,\n    propIds: number[],\n    bufferLocations: IBufferLocationGroup<IBufferLocation>\n  ) => void = this.updateInstancePartial;\n\n  /**\n   * This processes add operations from changes in the instancing data\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (bufferLocations) {\n      manager.changeInstance(manager, instance, EMPTY, bufferLocations);\n    } else {\n      // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n      const newBufferLocations = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocationGroup(newBufferLocations)) {\n        instance.active = true;\n        instance.easingId = manager.layer.easingId;\n\n        manager.updateInstance(\n          manager.layer,\n          instance,\n          EMPTY,\n          newBufferLocations\n        );\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the bufferLocations\n    if (bufferLocations) {\n      manager.updateInstance(manager.layer, instance, propIds, bufferLocations);\n    } else {\n      // If we don't have existing bufferLocations, then we must add the instance\n      manager.addInstance(manager, instance, EMPTY, bufferLocations);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    if (bufferLocations) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // Remove the easing information the instance gained from being apart of the layer\n      instance.clearEasing();\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, EMPTY, bufferLocations);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n    }\n  }\n\n  /**\n   * This performs the actual updating of buffers the instance needs to update\n   */\n  updateInstancePartial(\n    layer: IInstanceDiffManagerTarget<T>,\n    instance: T,\n    propIds: number[],\n    bufferLocations: IBufferLocationGroup<IBufferLocation>\n  ) {\n    const propertyToLocation = bufferLocations.propertyToBufferLocation;\n    const bufferAttributeUpdateRange = this.bufferAttributeUpdateRange;\n    let location: IBufferLocation;\n    let updateValue: Vec;\n    let updateRange;\n    let childLocations: IBufferLocation[];\n    let attribute: IInstanceAttributeInternal<T>;\n    let attributeChangeUID;\n\n    if (instance.active) {\n      // If no prop ids provided, then we perform a complete instance property update\n      if (propIds.length === 0) {\n        propIds = this.bufferManager.getUpdateAllPropertyIdList();\n      }\n\n      for (let i = 0, end = propIds.length; i < end; ++i) {\n        // First update for the instance attribute itself\n        location = propertyToLocation[propIds[i]];\n        attribute = location.attribute;\n        attributeChangeUID = attribute.packUID || attribute.uid;\n        attribute.atlas && layer.resource.setTargetAtlas(attribute.atlas.key);\n        updateValue = attribute.update(instance);\n        location.buffer.value.set(updateValue, location.range[0]);\n        updateRange = bufferAttributeUpdateRange[attributeChangeUID] || [\n          null,\n          Number.MAX_SAFE_INTEGER,\n          Number.MIN_SAFE_INTEGER\n        ];\n        updateRange[0] = attribute;\n        updateRange[1] = min(location.range[0], updateRange[1]);\n        updateRange[2] = max(location.range[1], updateRange[2]);\n        bufferAttributeUpdateRange[attributeChangeUID] = updateRange;\n\n        // Now update any child attributes that would need updating based on the parent attribute changing\n        if (location.childLocations) {\n          childLocations = location.childLocations;\n\n          for (let k = 0, endk = childLocations.length; k < endk; ++k) {\n            location = childLocations[k];\n            attributeChangeUID =\n              location.attribute.packUID || location.attribute.uid;\n            updateValue = location.attribute.update(instance);\n            location.buffer.value.set(updateValue, location.range[0]);\n            updateRange = bufferAttributeUpdateRange[attributeChangeUID] || [\n              null,\n              Number.MAX_SAFE_INTEGER,\n              Number.MIN_SAFE_INTEGER\n            ];\n            updateRange[0] = location.attribute;\n            updateRange[1] = min(location.range[0], updateRange[1]);\n            updateRange[2] = max(location.range[1], updateRange[2]);\n            bufferAttributeUpdateRange[attributeChangeUID] = updateRange;\n          }\n        }\n      }\n    } else {\n      // When the instance is inactive all we update is the active attribute to false\n      location =\n        propertyToLocation[this.bufferManager.getActiveAttributePropertyId()];\n      attribute = location.attribute;\n      attributeChangeUID = attribute.packUID || attribute.uid;\n      updateValue = attribute.update(instance);\n      location.buffer.value.set(updateValue, location.range[0]);\n      updateRange = bufferAttributeUpdateRange[attributeChangeUID] || [\n        null,\n        Number.MAX_SAFE_INTEGER,\n        Number.MIN_SAFE_INTEGER\n      ];\n      updateRange[0] = attribute;\n      updateRange[1] = min(location.range[0], updateRange[1]);\n      updateRange[2] = max(location.range[1], updateRange[2]);\n      bufferAttributeUpdateRange[attributeChangeUID] = updateRange;\n    }\n  }\n\n  /**\n   * This performs an update on the buffers with the intent the entire buffer is going to update\n   * rather than a chunk of it.\n   */\n  updateInstanceFull(\n    layer: IInstanceDiffManagerTarget<T>,\n    instance: T,\n    propIds: number[],\n    bufferLocations: IBufferLocationGroup<IBufferLocation>\n  ) {\n    const propertyToLocation = bufferLocations.propertyToBufferLocation;\n    const bufferAttributeWillUpdate = this.bufferAttributeWillUpdate;\n    let location: IBufferLocation;\n    let updateValue: Vec;\n    let childLocations: IBufferLocation[];\n    let attribute: IInstanceAttributeInternal<T>;\n\n    if (instance.active) {\n      // If no prop ids provided, then we perform a complete instance property update\n      if (propIds.length === 0) {\n        propIds = this.bufferManager.getUpdateAllPropertyIdList();\n      }\n\n      for (let i = 0, end = propIds.length; i < end; ++i) {\n        // First update for the instance attribute itself\n        location = propertyToLocation[propIds[i]];\n        attribute = location.attribute;\n        attribute.atlas && layer.resource.setTargetAtlas(attribute.atlas.key);\n        updateValue = attribute.update(instance);\n        location.buffer.value.set(updateValue, location.range[0]);\n        bufferAttributeWillUpdate[\n          attribute.packUID || attribute.uid\n        ] = attribute;\n\n        // Now update any child attributes that would need updating based on the parent attribute changing\n        if (location.childLocations) {\n          childLocations = location.childLocations;\n\n          for (let k = 0, endk = childLocations.length; k < endk; ++k) {\n            location = childLocations[k];\n            attribute = location.attribute;\n            updateValue = attribute.update(instance);\n            location.buffer.value.set(updateValue, location.range[0]);\n            bufferAttributeWillUpdate[\n              attribute.packUID || attribute.uid\n            ] = attribute;\n          }\n        }\n      }\n    } else {\n      // When the instance is inactive all we update is the active attribute to false\n      location =\n        propertyToLocation[this.bufferManager.getActiveAttributePropertyId()];\n      attribute = location.attribute;\n      attribute.atlas && layer.resource.setTargetAtlas(attribute.atlas.key);\n      updateValue = attribute.update(instance);\n      location.buffer.value.set(updateValue, location.range[0]);\n      bufferAttributeWillUpdate[attribute.packUID || attribute.uid] = attribute;\n    }\n  }\n\n  /**\n   * Finalize all of the buffer changes and apply the correct update ranges\n   */\n  commit() {\n    // If we're in a partial mode: just update the portion of the buffer that needs updating.\n    if (this.diffMode === DiffMode.PARTIAL) {\n      // We now grab all of the attributes and set their update ranges\n      const updates = Object.values(this.bufferAttributeUpdateRange);\n\n      for (let i = 0, end = updates.length; i < end; ++i) {\n        const update = updates[i];\n        const attribute = update[0].bufferAttribute;\n        attribute.needsUpdate = true;\n        attribute.updateRange = {\n          count: update[2] - update[1],\n          offset: update[1]\n        };\n      }\n    } else {\n      // Otherwise just update the full buffer\n      // We now grab all of the attributes and set their update ranges\n      const updates = Object.values(this.bufferAttributeWillUpdate);\n\n      for (let i = 0, end = updates.length; i < end; ++i) {\n        const attribute = updates[i].bufferAttribute;\n        attribute.needsUpdate = true;\n        attribute.updateRange = {\n          count: -1,\n          offset: 0\n        };\n      }\n    }\n\n    // Clear the attribute update metrics\n    this.bufferAttributeUpdateRange = {};\n  }\n\n  /**\n   * This will optimize the update method used. If there are enough instances being updated, we will\n   * cause the entire attribute buffer to update. If there are not enough, then we will update with\n   * additional steps to only update the chunks of the buffer that are affected by the changelist.\n   */\n  incomingChangeList(changes: InstanceDiff<T>[]) {\n    if (changes.length === 0) {\n      this.diffMode = DiffMode.PARTIAL;\n    } else if (changes.length > this.bufferManager.getInstanceCount() * 0.7) {\n      this.diffMode = DiffMode.FULL;\n    } else {\n      this.diffMode = DiffMode.PARTIAL;\n    }\n\n    if (this.diffMode === DiffMode.PARTIAL) {\n      this.updateInstance = this.updateInstancePartial;\n    } else {\n      this.updateInstance = this.updateInstanceFull;\n    }\n  }\n}\n","export function getProgramInfo(gl: WebGLRenderingContext, program: any) {\n  const result = {\n      attributeCount: 0,\n      attributes: new Array(),\n      uniformCount: 0,\n      uniforms: new Array()\n    },\n    activeUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS),\n    activeAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n  // Taken from the WebGl spec:\n  // Http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14\n  const enums: { [key: number]: string } = {\n    0x8b50: \"FLOAT_VEC2\",\n    0x8b51: \"FLOAT_VEC3\",\n    0x8b52: \"FLOAT_VEC4\",\n    0x8b53: \"INT_VEC2\",\n    0x8b54: \"INT_VEC3\",\n    0x8b55: \"INT_VEC4\",\n    0x8b56: \"BOOL\",\n    0x8b57: \"BOOL_VEC2\",\n    0x8b58: \"BOOL_VEC3\",\n    0x8b59: \"BOOL_VEC4\",\n    0x8b5a: \"FLOAT_MAT2\",\n    0x8b5b: \"FLOAT_MAT3\",\n    0x8b5c: \"FLOAT_MAT4\",\n    0x8b5e: \"SAMPLER_2D\",\n    0x8b60: \"SAMPLER_CUBE\",\n    0x1400: \"BYTE\",\n    0x1401: \"UNSIGNED_BYTE\",\n    0x1402: \"SHORT\",\n    0x1403: \"UNSIGNED_SHORT\",\n    0x1404: \"INT\",\n    0x1405: \"UNSIGNED_INT\",\n    0x1406: \"FLOAT\"\n  };\n\n  const blocks: { [key: number]: number } = {\n    0x8b50: 1,\n    0x8b51: 1,\n    0x8b52: 1,\n    0x8b53: 1,\n    0x8b54: 1,\n    0x8b55: 1,\n    0x8b56: 1,\n    0x8b57: 1,\n    0x8b58: 1,\n    0x8b59: 1,\n    0x8b5a: 1,\n    0x8b5b: 3,\n    0x8b5c: 4,\n    0x8b5e: 1,\n    0x8b60: 1,\n    0x1400: 1,\n    0x1401: 1,\n    0x1402: 1,\n    0x1403: 1,\n    0x1404: 1,\n    0x1405: 1,\n    0x1406: 1\n  };\n\n  // Loop through active uniforms\n  for (let i = 0; i < activeUniforms; ++i) {\n    const uniform: any = gl.getActiveUniform(program, i);\n    uniform.typeName = enums[uniform.type];\n    result.uniforms.push(uniform);\n    result.uniformCount += uniform.size;\n    uniform.size = uniform.size * blocks[uniform.type];\n  }\n\n  // Loop through active attributes\n  for (let i = 0; i < activeAttributes; i++) {\n    const attribute: any = gl.getActiveAttrib(program, i);\n    attribute.typeName = enums[attribute.type];\n    result.attributes.push(attribute);\n    result.attributeCount += attribute.size;\n  }\n\n  return result;\n}\n\nexport class WebGLStat {\n  static MAX_VERTEX_UNIFORMS = 0;\n  static MAX_FRAGMENT_UNIFORMS = 0;\n  static MAX_VERTEX_ATTRIBUTES = 0;\n  static WEBGL_SUPPORTED: boolean = false;\n  static MAX_TEXTURE_SIZE = 0;\n  static HARDWARE_INSTANCING = false;\n  static HARDWARE_INSTANCING_ANGLE = false;\n}\n\nfunction initStats() {\n  // Let's perform some immediate operations to do some gl querying for useful information\n  function getAContext() {\n    try {\n      const canvas = document.createElement(\"canvas\");\n      return (\n        (window as any).WebGLRenderingContext &&\n        (canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\"))\n      );\n    } catch (e) {\n      return false;\n    }\n  }\n\n  // Attempt to retrieve a context for webgl\n  const gl = getAContext();\n\n  // If the context exists, then we know gl is supported and we can fill in some metrics\n  if (gl) {\n    WebGLStat.WEBGL_SUPPORTED = true;\n    WebGLStat.MAX_VERTEX_UNIFORMS = gl.getParameter(\n      gl.MAX_VERTEX_UNIFORM_VECTORS\n    );\n    WebGLStat.MAX_FRAGMENT_UNIFORMS = gl.getParameter(\n      gl.MAX_FRAGMENT_UNIFORM_VECTORS\n    );\n    WebGLStat.MAX_VERTEX_ATTRIBUTES = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    WebGLStat.MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    WebGLStat.HARDWARE_INSTANCING_ANGLE = Boolean(\n      gl.getExtension(\"ANGLE_instanced_arrays\")\n    );\n    WebGLStat.HARDWARE_INSTANCING = WebGLStat.HARDWARE_INSTANCING_ANGLE;\n  }\n}\n\ninitStats();\n","import * as Three from \"three\";\n\nexport enum ViewCameraType {\n  /**\n   * Indicates a camera that is forced by the system to follow:\n   * - Match width and height of the view port\n   * - +y axis points downward\n   * - gl origin is at the top left of the screen\n   */\n  CONTROLLED,\n  /**\n   * This allows a custom view camera to be applied to the scene.\n   */\n  CUSTOM\n}\n\n/**\n * This is a camera that controls the view projection matrix. This is a much more\n * complicated way to handle views that is better suited for handling 3D applications\n * and is very overkill for most 2D charting systems. If you are working purely with\n * 2D components, it's recommended to leave this as a CONTROLLED camera and utilize\n * the ChartCamera for most of your needs.\n */\nexport class ViewCamera {\n  type: ViewCameraType = ViewCameraType.CONTROLLED;\n  baseCamera: Three.Camera;\n}\n","export const templateVars = {\n  attributes: \"attributes\",\n  easingMethod: \"easingMethod\",\n  extend: \"extend\",\n  extendHeader: \"extendHeader\",\n  T: \"T\"\n};\n","let chartCameraUID = 0;\n\nexport interface IChartCameraOptions {\n  /** The world space offset of elements in the chart */\n  offset?: [number] | [number, number] | [number, number, number];\n  /** The world space scaling present in the chart */\n  scale?: [number] | [number, number] | [number, number, number];\n}\n\n/**\n * Quick method for applying a source array to a target array. This\n * ensures the arrays both are valid and applies the values without just making\n * a copy of the source.\n */\nfunction applyArray(target?: number[], source?: number[]) {\n  target && source && target.splice(0, source.length, ...source);\n}\n\nexport class ChartCamera {\n  /** Internally set id */\n  private _id: number = chartCameraUID++;\n  /** Represents how much an element should be offset in world space */\n  private _offset: [number, number, number] = [0, 0, 0];\n  /** Represents how scaled each axis should be in world space */\n  private _scale: [number, number, number] = [1, 1, 1];\n  /** This indicates whether the view where the camera is in needs drawn */\n  private _needsViewDrawn: boolean = true;\n\n  constructor(options?: IChartCameraOptions) {\n    if (options) {\n      applyArray(this.offset, options.offset);\n      applyArray(this.scale, options.scale);\n    }\n  }\n\n  /** Keep id as readonly */\n  get id() {\n    return this._id;\n  }\n\n  setId(id: number) {\n    this._id = id;\n    this._needsViewDrawn = true;\n  }\n\n  get offset() {\n    return this._offset;\n  }\n\n  /**\n   * Sets the location of the camera by adjusting the offsets to match.\n   */\n  setOffset(offset: [number, number, number]) {\n    this._offset = offset.slice(0) as [number, number, number];\n    this._needsViewDrawn = true;\n  }\n\n  get scale() {\n    return this._scale;\n  }\n\n  setScale(scale: [number, number, number]) {\n    this._scale = scale;\n    this._needsViewDrawn = true;\n  }\n\n  get needsViewDrawn() {\n    return this._needsViewDrawn;\n  }\n\n  resolve() {\n    this._needsViewDrawn = false;\n  }\n\n  update() {\n    this._needsViewDrawn = true;\n  }\n}\n","const { sqrt } = Math;\n\n/** Explicit Vec1 */\nexport interface IVec1 extends Array<number> {\n  0: number;\n  length: 1;\n}\n\n/** Explicit Vec2 */\nexport interface IVec2 extends Array<number> {\n  0: number;\n  1: number;\n  length: 2;\n}\n\n/** Explicit Vec3 */\nexport interface IVec3 extends Array<number> {\n  0: number;\n  1: number;\n  2: number;\n  length: 3;\n}\n\n/** Explicit Vec4 */\nexport interface IVec4 extends Array<number> {\n  0: number;\n  1: number;\n  2: number;\n  3: number;\n  length: 4;\n}\n\n/** Vector of 1 components */\nexport type Vec1 = [number];\n/** Vector of 2 components */\nexport type Vec2 = [number, number];\n/** Vector of 3 components */\nexport type Vec3 = [number, number, number];\n/** Vector of 4 components */\nexport type Vec4 = [number, number, number, number];\n\n/** This type defines any possible explicit vector */\nexport type IVec = IVec1 | IVec2 | IVec3 | IVec4;\n/** This type defines any possible vector */\nexport type Vec = Vec1 | Vec2 | Vec3 | Vec4;\n\nexport function add1(left: Vec1, right: Vec1): Vec1 {\n  return [left[0] + right[0]];\n}\n\nexport function copy1(vec: Vec1): Vec1 {\n  return [vec[0]];\n}\n\nexport function scale1(vec: Vec1, scale: number): Vec1 {\n  return [vec[0] * scale];\n}\n\nexport function subtract1(left: Vec1, right: Vec1): Vec1 {\n  return [left[0] - right[0]];\n}\n\nexport function multiply1(left: Vec1, right: Vec1): Vec1 {\n  return [left[0] * right[0]];\n}\n\nexport function dot1(left: Vec1, right: Vec1): number {\n  return left[0] * right[0];\n}\n\nexport function linear1(start: Vec1, end: Vec1, t: number): Vec1 {\n  return scale1(add1(subtract1(end, start), start), t);\n}\n\nexport function length1(start: Vec1): number {\n  return sqrt(dot1(start, start));\n}\n\nexport function add2(left: Vec2, right: Vec2): Vec2 {\n  return [left[0] + right[0], left[1] + right[1]];\n}\n\nexport function copy2(vec: Vec2): Vec2 {\n  return [vec[0], vec[1]];\n}\n\nexport function scale2(left: Vec2, scale: number): Vec2 {\n  return [left[0] * scale, left[1] * scale];\n}\n\nexport function subtract2(left: Vec2, right: Vec2): Vec2 {\n  return [left[0] - right[0], left[1] - right[1]];\n}\n\nexport function multiply2(left: Vec2, right: Vec2): Vec2 {\n  return [left[0] * right[0], left[1] * right[1]];\n}\n\nexport function dot2(left: Vec2, right: Vec2): number {\n  return left[0] * right[0] + left[1] * right[1];\n}\n\nexport function linear2(start: Vec2, end: Vec2, t: number): Vec2 {\n  return scale2(add2(subtract2(end, start), start), t);\n}\n\nexport function length2(start: Vec2): number {\n  return sqrt(dot2(start, start));\n}\n\nexport function add3(left: Vec3, right: Vec3): Vec3 {\n  return [left[0] + right[0], left[1] + right[1], left[2] + right[2]];\n}\n\nexport function copy3(vec: Vec3): Vec3 {\n  return [vec[0], vec[1], vec[2]];\n}\n\nexport function scale3(left: Vec3, scale: number): Vec3 {\n  return [left[0] * scale, left[1] * scale, left[2] * scale];\n}\n\nexport function subtract3(left: Vec3, right: Vec3): Vec3 {\n  return [left[0] - right[0], left[1] - right[1], left[2] - right[2]];\n}\n\nexport function multiply3(left: Vec3, right: Vec3): Vec3 {\n  return [left[0] * right[0], left[1] * right[1], left[2] * right[2]];\n}\n\nexport function linear3(start: Vec3, end: Vec3, t: number): Vec3 {\n  return scale3(add3(subtract3(end, start), start), t);\n}\n\nexport function length3(start: Vec3): number {\n  return sqrt(dot3(start, start));\n}\n\nexport function dot3(left: Vec3, right: Vec3): number {\n  return left[0] * right[0] + left[1] * right[1] + left[2] * right[2];\n}\n\nexport function add4(left: Vec4, right: Vec4): Vec4 {\n  return [\n    left[0] + right[0],\n    left[1] + right[1],\n    left[2] + right[2],\n    left[3] + right[3]\n  ];\n}\n\nexport function copy4(vec: Vec4): Vec4 {\n  return [vec[0], vec[1], vec[2], vec[3]];\n}\n\nexport function scale4(left: Vec4, scale: number): Vec4 {\n  return [left[0] * scale, left[1] * scale, left[2] * scale, left[3] * scale];\n}\n\nexport function subtract4(left: Vec4, right: Vec4): Vec4 {\n  return [\n    left[0] - right[0],\n    left[1] - right[1],\n    left[2] - right[2],\n    left[3] - right[3]\n  ];\n}\n\nexport function multiply4(left: Vec4, right: Vec4): Vec4 {\n  return [\n    left[0] * right[0],\n    left[1] * right[1],\n    left[2] * right[2],\n    left[3] * right[3]\n  ];\n}\n\nexport function dot4(left: Vec4, right: Vec4): number {\n  return (\n    left[0] * right[0] +\n    left[1] * right[1] +\n    left[2] * right[2] +\n    left[3] * right[3]\n  );\n}\n\nexport function linear4(start: Vec4, end: Vec4, t: number): Vec4 {\n  return scale4(add4(subtract4(end, start), start), t);\n}\n\nexport function length4(start: Vec4): number {\n  return sqrt(dot4(start, start));\n}\n\nexport type VecMethods<T extends Vec> = {\n  add(left: T, right: T): T;\n  copy(vec: T): T;\n  scale(vec: T, scale: number): T;\n  subtract(left: T, right: T): T;\n  multiply(left: T, right: T): T;\n  dot(left: T, right: T): number;\n  linear(start: T, end: T, t: number): T;\n  length(vec: T): number;\n};\n\nexport const vec1Methods: VecMethods<Vec1> = {\n  add: add1,\n  copy: copy1,\n  dot: dot1,\n  length: length1,\n  linear: linear1,\n  multiply: multiply1,\n  scale: scale1,\n  subtract: subtract1\n};\n\nexport const vec2Methods: VecMethods<Vec2> = {\n  add: add2,\n  copy: copy2,\n  dot: dot2,\n  length: length2,\n  linear: linear2,\n  multiply: multiply2,\n  scale: scale2,\n  subtract: subtract2\n};\n\nexport const vec3Methods: VecMethods<Vec3> = {\n  add: add3,\n  copy: copy3,\n  dot: dot3,\n  length: length3,\n  linear: linear3,\n  multiply: multiply3,\n  scale: scale3,\n  subtract: subtract3\n};\n\nexport const vec4Methods: VecMethods<Vec4> = {\n  add: add4,\n  copy: copy4,\n  dot: dot4,\n  length: length4,\n  linear: linear4,\n  multiply: multiply4,\n  scale: scale4,\n  subtract: subtract4\n};\n\nexport function VecMath<T extends IVec>(vec: T): VecMethods<T> {\n  let methods: VecMethods<T>;\n\n  if (vec.length === 1) {\n    methods = vec1Methods as VecMethods<T>;\n    return methods;\n  } else if (vec.length === 2) {\n    methods = vec2Methods as VecMethods<T>;\n    return methods;\n  } else if (vec.length === 3) {\n    methods = vec3Methods as VecMethods<T>;\n    return methods;\n  }\n\n  methods = vec4Methods as VecMethods<T>;\n\n  return methods;\n}\n","import { Bounds } from \"../primitives\";\nimport { IProjection } from \"../types\";\nimport {\n  IDragMetrics,\n  IMouseInteraction,\n  IWheelMetrics,\n  MouseEventManager\n} from \"./mouse-event-manager\";\nimport { View } from \"./view\";\n\n/**\n * Classes can extend this and override the methods to respond to events.\n */\nexport abstract class EventManager {\n  private mouseManager: MouseEventManager;\n\n  abstract handleMouseDown(e: IMouseInteraction, button: number): void;\n  abstract handleMouseUp(e: IMouseInteraction, button: number): void;\n  abstract handleMouseOver(e: IMouseInteraction): void;\n  abstract handleMouseOut(e: IMouseInteraction): void;\n  abstract handleMouseMove(e: IMouseInteraction): void;\n  abstract handleClick(e: IMouseInteraction, button: number): void;\n  abstract handleDrag(e: IMouseInteraction, drag: IDragMetrics): void;\n  abstract handleWheel(e: IMouseInteraction, wheel: IWheelMetrics): void;\n\n  /**\n   * This retrieves the projections for the view specified by the provided viewId.\n   */\n  getProjection(viewId: string): IProjection | null {\n    return this.mouseManager.getView(viewId);\n  }\n\n  /**\n   * This retrieves the actual view for the view specified by the provided viewId.\n   */\n  getView(viewId: string): View | null {\n    return (this.mouseManager && this.mouseManager.getView(viewId)) || null;\n  }\n\n  /**\n   * This retrieves the screen bounds for the view specified by the provided viewId.\n   */\n  getViewScreenBounds(viewId: string): Bounds | null {\n    const view = this.mouseManager.getView(viewId);\n\n    if (view) {\n      return view.screenBounds;\n    }\n\n    return null;\n  }\n\n  /**\n   * This is used internally which provides the parent MouseEventManager via the param mouseManager for this\n   * EventManager.\n   */\n  setMouseManager(mouseManager: MouseEventManager) {\n    this.mouseManager = mouseManager;\n  }\n}\n","import { IPoint } from \"../primitives/point\";\nimport { DataBounds } from \"../util/data-bounds\";\nimport { eventElementPosition, normalizeWheel } from \"../util/mouse\";\nimport { QuadTree } from \"../util/quad-tree\";\nimport { EventManager } from \"./event-manager\";\nimport { Scene } from \"./scene\";\nimport { View } from \"./view\";\n\n// If a mouse up after a mouse down happens before this many milliseconds, a click gesture will happen\nconst VALID_CLICK_DELAY = 1e3;\n\n/**\n * Theorectically we can have a view be applied to multiple scenes. So to properly qualify a view\n * it must be paired with the scene it is rendering for.\n */\nexport type SceneView = {\n  /** This specifies the order the view is rendered in so we can pick the top most item when needed */\n  depth: number;\n  /** This is the scene the view is rendering for */\n  scene: Scene;\n  /** This is the view itself that our mouse will interact with */\n  view: View;\n  /** Gets the bounds of this view for this particular scene */\n  bounds?: DataBounds<SceneView>;\n};\n\n/**\n * This represents an interaction with the Layer Surface. It provides mouse metrics with how the mouse\n * interacts with the views below it.\n */\nexport interface IMouseInteraction {\n  /** When present indicates any relevant button codes used during a click event */\n  button?: number;\n  /** Metrics of the interaction in screen space */\n  screen: {\n    mouse: IPoint;\n  };\n  /** The View the mouse was 'down' on */\n  start?: {\n    mouse: IPoint;\n    view: View;\n  };\n  /** The View Immediately underneath the mouse */\n  target: {\n    mouse: IPoint;\n    view: View;\n  };\n  /** This is populated with ALL of the views underneath the mouse */\n  viewsUnderMouse: {\n    /** The mouse's location in the views coordinate space */\n    mouse: IPoint;\n    /** The view that is interacted with */\n    view: View;\n  }[];\n}\n\nexport interface IDragMetrics {\n  /** Drag metrics in screen space */\n  screen: {\n    /** The start position of the drag where the mouse down first occurred */\n    start: IPoint;\n    /** The previous position of the mouse last frame */\n    previous: IPoint;\n    /** The current position the mouse is located for this frame */\n    current: IPoint;\n    /** The change in position from last frame to this frame */\n    delta: IPoint;\n  };\n}\n\nexport interface IWheelMetrics {\n  wheel: [number, number];\n}\n\n/**\n * This is metrics measured between two touches\n */\nexport interface ITouchRelation {\n  /** The direction to the other touch */\n  direction: IPoint;\n  /** The current distance to the other touch */\n  distance: number;\n  /** The id of the other touch */\n  id: number;\n}\n\n/**\n * This is the information of a touch for a given frame.\n */\nexport interface ITouchFrame {\n  /** This is the location or delta location of the touch for this frame */\n  location: IPoint;\n  /** This is the direction from the start touch frame */\n  direction: IPoint;\n  /** This is the metrics or delta metrics of the touch relative to the other touches for the frame */\n  relations: Map<number, ITouchRelation>;\n}\n\nexport interface ITouchMetrics {\n  /** The starting metrics of the touch */\n  start: ITouchFrame;\n  /** The delta changes from previous event to the current event */\n  delta: ITouchFrame;\n  /** The current metrics of the touch event */\n  current: ITouchFrame;\n}\n\nfunction sortByDepth(a: DataBounds<SceneView>, b: DataBounds<SceneView>) {\n  return b.data.depth - a.data.depth;\n}\n\nfunction isDefined<T>(val: T | null | undefined): val is T {\n  return Boolean(val);\n}\n\n/**\n * This manages mouse events on the provided canvas and provides some higher level\n * interactions with the surface.\n */\nexport class MouseEventManager {\n  /** This is the canvas context we are rendering to */\n  context: HTMLCanvasElement;\n  /** This is list of Event Managers that receive the events and gestures which perform the nexessary actions */\n  controllers: EventManager[];\n  /** This is the quad tree for finding intersections with the mouse */\n  quadTree: QuadTree<DataBounds<SceneView>>;\n  /** This is the current list of views being managed */\n  views: SceneView[];\n\n  eventCleanup: [string, EventListenerOrEventListenerObject][] = [];\n\n  /**\n   * This flag is set when the system is waiting to render the elements to establish bounds.\n   * No Mouse interations will happen while this is set to true.\n   */\n  private _waitingForRender: boolean = true;\n\n  get waitingForRender() {\n    return this._waitingForRender;\n  }\n\n  set waitingForRender(val: boolean) {\n    this._waitingForRender = val;\n\n    // When we're no longer waiting for render to occur we update all of our views in the quad tree\n    if (!val) {\n      this.quadTree = new QuadTree(0, 0, 0, 0);\n      this.quadTree.addAll(this.views.map(v => v.bounds).filter(isDefined));\n    }\n  }\n\n  constructor(\n    canvas: HTMLCanvasElement,\n    views: SceneView[],\n    controllers: EventManager[],\n    handlesWheelEvents?: boolean\n  ) {\n    this.context = canvas;\n    this.setViews(views);\n    this.setControllers(controllers);\n    this.addContextListeners(handlesWheelEvents);\n  }\n\n  /**\n   * This sets up the DOM events to listen to the events that are broadcasted by the canvas.\n   * These events are set up in such a way as to continue some events when the user\n   * drags the mouse off of the browser or off the canvas without releasing.\n   */\n  addContextListeners(handlesWheelEvents?: boolean) {\n    const element = this.context;\n    let startView: SceneView | undefined;\n    let startPosition: IPoint = { x: 0, y: 0 };\n\n    if (handlesWheelEvents) {\n      const wheelHandler = (event: MouseWheelEvent) => {\n        const mouse = eventElementPosition(event, element);\n        const interaction = this.makeInteraction(\n          mouse,\n          startPosition,\n          startView\n        );\n        const wheel = this.makeWheel(event);\n\n        this.controllers.forEach(controller => {\n          controller.handleWheel(interaction, wheel);\n        });\n\n        event.stopPropagation();\n        event.preventDefault();\n      };\n\n      if (\"onwheel\" in element) {\n        element.onwheel = wheelHandler;\n      }\n\n      if (\"addEventListener\" in element) {\n        element.addEventListener(\"DOMMouseScroll\", wheelHandler);\n        this.eventCleanup.push([\"DOMMouseScroll\", wheelHandler]);\n      }\n    }\n\n    element.onmouseleave = event => {\n      // No interactions while waiting for the render to update\n      if (this.waitingForRender) return;\n\n      const mouse = eventElementPosition(event, element);\n      const interaction = this.makeInteraction(mouse, startPosition, startView);\n\n      this.controllers.forEach(controller => {\n        controller.handleMouseOut(interaction);\n      });\n    };\n\n    element.onmousemove = event => {\n      // No interactions while waiting for the render to update\n      if (this.waitingForRender) return;\n\n      const mouse = eventElementPosition(event, element);\n      const interaction = this.makeInteraction(mouse, startPosition, startView);\n\n      this.controllers.forEach(controller => {\n        controller.handleMouseMove(interaction);\n      });\n    };\n\n    element.onmousedown = (event: MouseEvent) => {\n      // No interactions while waiting for the render to update\n      if (this.waitingForRender) return;\n\n      startPosition = eventElementPosition(event, element);\n      const downViews = this.getViewsUnderMouse(startPosition);\n      // While this is true, when mouse up happens, the click gesture will execute\n      let canClick = true;\n      const clickStartTime = Date.now();\n\n      // If no views under this view, then we just quick exit with no interactions\n      if (downViews.length <= 0) {\n        return;\n      }\n\n      startView = downViews[0].data;\n      if (!startView) return;\n\n      const interaction = this.makeInteraction(\n        startPosition,\n        startPosition,\n        startView\n      );\n      let currentPosition = startPosition;\n\n      this.controllers.forEach(controller => {\n        controller.handleMouseDown(interaction, event.button);\n      });\n\n      event.stopPropagation();\n\n      document.onmousemove = (event: MouseEvent) => {\n        const mouse = eventElementPosition(event, element);\n        const interaction = this.makeInteraction(\n          mouse,\n          startPosition,\n          startView\n        );\n        const delta = {\n          x: mouse.x - currentPosition.x,\n          y: mouse.y - currentPosition.y\n        };\n\n        const drag = this.makeDrag(\n          mouse,\n          startPosition || { x: 0, y: 0 },\n          currentPosition,\n          delta\n        );\n        currentPosition = mouse;\n\n        this.controllers.forEach(controller => {\n          controller.handleDrag(interaction, drag);\n        });\n\n        // If we move after a mouse down, it's no longer a click\n        canClick = false;\n      };\n\n      document.onmouseup = (_event: MouseEvent) => {\n        document.onmousemove = null;\n        document.onmouseup = null;\n        document.onmouseover = null;\n      };\n\n      document.onmouseover = (event: MouseEvent) => {\n        const mouse = eventElementPosition(event, element);\n        const interaction = this.makeInteraction(\n          mouse,\n          startPosition,\n          startView\n        );\n\n        this.controllers.forEach(controller => {\n          controller.handleMouseOver(interaction);\n        });\n\n        event.stopPropagation();\n      };\n\n      element.onmouseup = (event: MouseEvent) => {\n        const mouse = eventElementPosition(event, element);\n        const interaction = this.makeInteraction(\n          mouse,\n          startPosition,\n          startView\n        );\n\n        this.controllers.forEach(controller => {\n          controller.handleMouseUp(interaction, event.button);\n        });\n\n        // If we release the mouse before the valid click delay\n        if (canClick && Date.now() - clickStartTime < VALID_CLICK_DELAY) {\n          this.controllers.forEach(controller => {\n            controller.handleClick(interaction, event.button);\n          });\n        }\n      };\n\n      // Text will not be selected when it is being dragged\n      const experiemental = element as any;\n      if (experiemental.onselectstart !== undefined) {\n        experiemental.onselectstart = function() {\n          return false;\n        };\n      } else {\n        element.addEventListener(\"selectstart\", function() {\n          event.preventDefault();\n        });\n      }\n    };\n\n    // Enable touch support\n    this.addTouchContextListeners();\n  }\n\n  addTouchContextListeners() {\n    const element = this.context;\n\n    element.ontouchstart = _event => {\n      // TODO: This is the start work for the touch events. And this retains sentimental value.\n      // For (let i = 0, end = event.changedTouches.length; i < end; ++i) {\n      // TODO\n      // Const touch = event.changedTouches.item(i);\n      // CurrentTouches.set(touch.identifier, to);\n      // }\n    };\n\n    element.ontouchend = _event => {\n      // TODO\n    };\n\n    element.ontouchmove = _event => {\n      // TODO\n    };\n\n    element.ontouchcancel = _event => {\n      // TODO\n    };\n  }\n\n  /**\n   * Retrieves the view for the provided id\n   */\n  getView(viewId: string): View | null {\n    for (const view of this.views) {\n      if (view.view.id === viewId) {\n        return view.view;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Retrieves the views underneath the mouse with the top most view as\n   * the first view in the list.\n   */\n  getViewsUnderMouse = (mouse: IPoint) => {\n    // Find the views the mouse has interacted with\n    const hitViews = this.quadTree.query(mouse);\n    // Sort them by depth\n    hitViews.sort(sortByDepth);\n\n    return hitViews;\n  };\n\n  /**\n   * This generates the metrics for a drag gesture.\n   */\n  makeDrag(\n    mouse: IPoint,\n    start: IPoint,\n    previous: IPoint,\n    delta: IPoint\n  ): IDragMetrics {\n    return {\n      screen: {\n        current: mouse,\n        delta,\n        previous,\n        start\n      }\n    };\n  }\n\n  /**\n   * This makes the metrics for interactions with the views.\n   */\n  makeInteraction(\n    mouse: IPoint,\n    start?: IPoint,\n    startView?: SceneView\n  ): IMouseInteraction {\n    // Find the views the mouse has interacted with\n    const hitViews = this.getViewsUnderMouse(mouse);\n\n    return {\n      screen: {\n        mouse\n      },\n      start: start &&\n        startView && {\n          mouse: startView.view.screenToView(mouse),\n          view: startView.view\n        },\n      target: {\n        mouse: hitViews[0] && hitViews[0].data.view.screenToView(mouse),\n        view: hitViews[0] && hitViews[0].data.view\n      },\n      viewsUnderMouse: hitViews.map(v => ({\n        mouse: v.data.view.screenToView(mouse),\n        view: v.data.view\n      }))\n    };\n  }\n\n  makeWheel(event: MouseWheelEvent): IWheelMetrics {\n    const wheel = normalizeWheel(event);\n\n    return {\n      wheel: [wheel.x, wheel.y]\n    };\n  }\n\n  /**\n   * When the renderer is resized, we must reform our quad tree\n   */\n  resize = () => {\n    this._waitingForRender = true;\n  };\n\n  /**\n   * Sets the controllers to receive events from this manager.\n   */\n  setControllers(controllers: EventManager[]) {\n    this.controllers = controllers;\n\n    for (const controller of this.controllers) {\n      controller.setMouseManager(this);\n    }\n  }\n\n  /**\n   * Sets the views that gets queried for interactions.\n   */\n  setViews(views: SceneView[]) {\n    this.views = views;\n  }\n\n  destroy() {\n    delete this.quadTree;\n    this.context.onmousedown = null;\n    this.context.onmousemove = null;\n    this.context.onmouseleave = null;\n\n    const experimental = this.context as any;\n\n    if (experimental.onmousewheel) {\n      experimental.onmousewheel = null;\n    }\n\n    this.eventCleanup.forEach(event => {\n      this.context.removeEventListener(event[0], event[1]);\n    });\n  }\n}\n","/**\n * This file is dedicted to the all important step of processing desired inputs from the layer\n * and coming up with automated generated uniforms and attributes that the shader's will need\n * in order to operate with the conveniences the library offers. This includes things such as\n * injecting camera projection uniforms, resource uniforms, animation adjustments etc etc.\n */\nimport { Instance } from \"../../instance-provider/instance\";\nimport {\n  IInstanceAttribute,\n  InstanceAttributeSize,\n  IShaderInitialization,\n  IUniform,\n  IUniformInternal,\n  IVertexAttribute,\n  IVertexAttributeInternal,\n  PickType,\n  ShaderInjectionTarget,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport { Vec } from \"../../util\";\nimport { ILayerProps, Layer } from \"../layer\";\nimport { generateAtlasResourceUniforms } from \"./expand-atlas-attributes\";\nimport { generateEasingAttributes } from \"./expand-easing-attributes\";\nimport { getLayerBufferType, LayerBufferType } from \"./layer-buffer-type\";\nimport { packAttributes } from \"./pack-attributes\";\n\n/**\n * This is a lookup for a test vector for the provided size\n */\nconst testStartVector: { [key: number]: Vec } = {\n  [InstanceAttributeSize.ONE]: [1],\n  [InstanceAttributeSize.TWO]: [1, 2],\n  [InstanceAttributeSize.THREE]: [1, 2, 3],\n  [InstanceAttributeSize.FOUR]: [1, 2, 3, 4]\n};\n\n/**\n * This is a lookup for a test vector for the provided size\n */\nconst testEndVector: { [key: number]: Vec } = {\n  [InstanceAttributeSize.ONE]: [4],\n  [InstanceAttributeSize.TWO]: [4, 3],\n  [InstanceAttributeSize.THREE]: [4, 3, 2],\n  [InstanceAttributeSize.FOUR]: [4, 3, 2, 1]\n};\n\nfunction isInstanceAttribute<T extends Instance>(\n  attr: any\n): attr is IInstanceAttribute<T> {\n  return Boolean(attr);\n}\n\nfunction isVertexAttribute(attr: any): attr is IVertexAttribute {\n  return Boolean(attr);\n}\n\nfunction isUniform(attr: any): attr is IUniform {\n  return Boolean(attr);\n}\n\nfunction toVertexAttributeInternal(\n  attribute: IVertexAttribute\n): IVertexAttributeInternal {\n  return Object.assign({}, attribute, { materialAttribute: null });\n}\n\nfunction toUniformInternal(uniform: IUniform): IUniformInternal {\n  return Object.assign({}, uniform, { materialUniforms: [] });\n}\n\n/**\n * This sorts the attributes such that the attributes that MUST be updated first are put to the top.\n * This is necessary for complex attributes like atlas and easing attributes who have other attributes\n * that have dependent behaviors based on their source attribute.\n */\nfunction sortNeedsUpdateFirstToTop<T extends Instance>(\n  a: IInstanceAttribute<T>,\n  b: IInstanceAttribute<T>\n) {\n  if (a.atlas && !b.atlas) return -1;\n  if (a.easing && !b.easing) return -1;\n  return 1;\n}\n\nfunction generatePickingUniforms<T extends Instance, U extends ILayerProps<T>>(\n  layer: Layer<T, U>\n): IUniform[] {\n  if (layer.picking.type === PickType.SINGLE) {\n    return [\n      {\n        name: \"pickingActive\",\n        shaderInjection: ShaderInjectionTarget.ALL,\n        size: UniformSize.ONE,\n        update: () => [\n          layer.picking.currentPickMode === PickType.SINGLE ? 1.0 : 0.0\n        ]\n      }\n    ];\n  }\n\n  return [];\n}\n\nfunction generatePickingAttributes<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(layer: Layer<T, U>): IInstanceAttribute<T>[] {\n  if (layer.picking.type === PickType.SINGLE) {\n    return [\n      {\n        name: \"_pickingColor\",\n        size: InstanceAttributeSize.FOUR,\n        update: o => {\n          // We start from white and move down so the colors are more visible\n          // For debugging\n          const color = 0xffffff - o.uid;\n\n          // Do bit maths do get float components out of the int color\n          return [\n            (color >> 16) / 255.0,\n            ((color & 0x00ff00) >> 8) / 255.0,\n            (color & 0x0000ff) / 255.0,\n            1\n          ];\n        }\n      }\n    ];\n  }\n\n  return [];\n}\n\nfunction generateBaseUniforms<T extends Instance, U extends ILayerProps<T>>(\n  layer: Layer<T, U>\n): IUniform[] {\n  return [\n    // This injects the projection matrix from the view camera\n    {\n      name: \"projection\",\n      size: UniformSize.MATRIX4,\n      update: () => layer.view.viewCamera.baseCamera.projectionMatrix.elements\n    },\n    // This injects the model view matrix from the view camera\n    {\n      name: \"modelView\",\n      size: UniformSize.MATRIX4,\n      update: () => layer.view.viewCamera.baseCamera.matrix.elements\n    },\n    // This injects the camera offset uniforms that need to be present for projecting in a more\n    // Chart centric style\n    {\n      name: \"cameraOffset\",\n      size: UniformSize.THREE,\n      update: () => layer.view.camera.offset\n    },\n    // This injects the camera scaling uniforms that need to be present for projecting in a more\n    // Chart centric style\n    {\n      name: \"cameraScale\",\n      size: UniformSize.THREE,\n      update: () => layer.view.camera.scale\n    },\n    // This injects the camera scaling uniforms that need to be present for projecting in a more\n    // Chart centric style\n    {\n      name: \"viewSize\",\n      size: UniformSize.TWO,\n      update: () => [layer.view.viewBounds.width, layer.view.viewBounds.height]\n    },\n    // This injects the current layer's pixel ratio so pixel ratio dependent items can react to it\n    // Things like gl_PointSize will need this metric if not working in clip space\n    {\n      name: \"pixelRatio\",\n      size: UniformSize.ONE,\n      update: () => [layer.view.pixelRatio]\n    },\n    // This will be the current frame's current time which is updated in the layer's surface draw call\n    {\n      name: \"currentTime\",\n      size: UniformSize.ONE,\n      update: () => [layer.surface.frameMetrics.currentTime]\n    }\n  ];\n}\n\n/**\n * This creates the base instance attributes that are ALWAYS present\n */\nfunction generateBaseInstanceAttributes<T extends Instance>(\n  layer: Layer<T, any>\n): IInstanceAttribute<T>[] {\n  // This is injected so the system can control when an instance should not be rendered.\n  // This allows for holes to be in the buffer without having to correct them immediately\n  const activeAttribute: IInstanceAttribute<T> = {\n    name: \"_active\",\n    size: InstanceAttributeSize.ONE,\n    update: o => [o.active ? 1 : 0]\n  };\n\n  // Set the active attribute to the layer for quick reference\n  layer.activeAttribute = activeAttribute;\n\n  return [activeAttribute];\n}\n\n/**\n * This creates the base vertex attributes that are ALWAYS present\n */\nfunction generateBaseVertexAttributes<T extends Instance>(\n  layer: Layer<T, any>\n): IVertexAttribute[] {\n  // Only the uniform buffering strategy requires instance information in it's vertex attributes\n  if (layer.bufferType === LayerBufferType.UNIFORM) {\n    return [\n      // We add an inherent instance attribute to our vertices so they can determine the instancing\n      // Data to retrieve.\n      {\n        name: \"instance\",\n        size: VertexAttributeSize.ONE,\n        // We no op this as our geomtry generating routine will establish the values needed here\n        update: () => [0]\n      }\n    ];\n  }\n\n  return [];\n}\n\nfunction compareVec(a: Vec, b: Vec) {\n  if (a.length !== b.length) return false;\n\n  for (let i = 0, end = a.length; i < end; ++i) {\n    if (Math.round(a[i] * 100) / 100 !== Math.round(b[i] * 100) / 100) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction validateInstanceAttributes<T extends Instance>(\n  layer: Layer<T, any>,\n  instanceAttributes: IInstanceAttribute<T>[],\n  vertexAttributes: IVertexAttribute[]\n) {\n  instanceAttributes.forEach(attribute => {\n    if (attribute.name === undefined) {\n      console.warn(\n        \"All instance attributes MUST have a name on Layer:\",\n        layer.id\n      );\n    }\n\n    if (\n      instanceAttributes.find(\n        attr => attr !== attribute && attr.name === attribute.name\n      )\n    ) {\n      console.warn(\n        \"An instance attribute can not have the same name used more than once:\",\n        attribute.name\n      );\n    }\n\n    if (vertexAttributes.find(attr => attr.name === attribute.name)) {\n      console.warn(\n        \"An instance attribute and a vertex attribute in a layer can not share the same name:\",\n        attribute.name\n      );\n    }\n\n    if (attribute.easing && attribute.atlas) {\n      console.warn(\n        \"An instance attribute can not have both easing and atlas properties. Undefined behavior will occur.\"\n      );\n      console.warn(attribute);\n    }\n\n    if (!attribute.atlas) {\n      if (attribute.size === undefined) {\n        console.warn(\"An instance attribute requires the size to be defined.\");\n        console.warn(attribute);\n      }\n    }\n\n    if (attribute.easing) {\n      if (attribute.size !== undefined) {\n        const testStart = testStartVector[attribute.size];\n        const testEnd = testEndVector[attribute.size];\n        const validationRules = attribute.easing.validation || {};\n\n        let test = attribute.easing.cpu(testStart, testEnd, 0);\n        if (!compareVec(test, testStart)) {\n          console.warn(\n            \"Auto Easing Validation Failed: using a time of 0 does not produce the start value\"\n          );\n          console.warn(\"Start:\", testStart, \"End:\", testEnd, \"Result:\", test);\n          console.warn(attribute);\n        }\n\n        test = attribute.easing.cpu(testStart, testEnd, 1);\n        if (\n          !validationRules.ignoreEndValueCheck &&\n          !compareVec(test, testEnd)\n        ) {\n          console.warn(\n            \"Auto Easing Validation Failed: using a time of 1 does not produce the end value\"\n          );\n          console.warn(\"Start:\", testStart, \"End:\", testEnd, \"Result:\", test);\n          console.warn(attribute);\n        }\n\n        test = attribute.easing.cpu(testStart, testEnd, -1);\n        if (!compareVec(test, testStart)) {\n          console.warn(\n            \"Auto Easing Validation Failed: using a time of -1 does not produce the start value\"\n          );\n          console.warn(\"Start:\", testStart, \"End:\", testEnd, \"Result:\", test);\n          console.warn(attribute);\n        }\n\n        test = attribute.easing.cpu(testStart, testEnd, 2);\n        if (\n          !validationRules.ignoreOverTimeCheck &&\n          !compareVec(test, testEnd)\n        ) {\n          console.warn(\n            \"Auto Easing Validation Failed: using a time of 2 does not produce the end value\"\n          );\n          console.warn(\"Start:\", testStart, \"End:\", testEnd, \"Result:\", test);\n          console.warn(attribute);\n        }\n      } else {\n        console.warn(\n          \"An Instance Attribute with easing MUST have a size declared\"\n        );\n      }\n    }\n  });\n}\n\n/**\n * This is the primary method that analyzes all shader IO and determines which elements needs to be automatically injected\n * into the shader.\n */\nexport function injectShaderIO<T extends Instance, U extends ILayerProps<T>>(\n  gl: WebGLRenderingContext,\n  layer: Layer<T, U>,\n  shaderIO: IShaderInitialization<T>\n) {\n  // All of the instance attributes with nulls filtered out\n  const instanceAttributes = (shaderIO.instanceAttributes || []).filter(\n    isInstanceAttribute\n  );\n  // All of the vertex attributes with nulls filtered out\n  const vertexAttributes = (shaderIO.vertexAttributes || []).filter(\n    isVertexAttribute\n  );\n  // All of the uniforms with nulls filtered out\n  const uniforms = (shaderIO.uniforms || []).filter(isUniform);\n  // Do a validation pass of the attributes injected so we can provide feedback as to why things behave odd\n  validateInstanceAttributes(layer, instanceAttributes, vertexAttributes);\n  // Generates all of the attributes needed to make attributes automagically be eased when changed\n  generateEasingAttributes(layer, instanceAttributes);\n  // Get the uniforms needed to facilitate atlas resource requests if any exists\n  let addedUniforms: IUniform[] = uniforms.concat(\n    generateAtlasResourceUniforms(layer, instanceAttributes)\n  );\n  // These are the uniforms that should be present in the shader for basic operation\n  addedUniforms = addedUniforms.concat(generateBaseUniforms(layer));\n  // Add in uniforms for picking\n  addedUniforms = addedUniforms.concat(generatePickingUniforms(layer));\n  // Create the base instance attributes that must be present\n  let addedInstanceAttributes = instanceAttributes.concat(\n    generateBaseInstanceAttributes(layer)\n  );\n  // Add in attributes for picking\n  addedInstanceAttributes = addedInstanceAttributes.concat(\n    generatePickingAttributes(layer)\n  );\n\n  const allUniforms = addedUniforms.map(toUniformInternal);\n\n  const allInstanceAttributes = addedInstanceAttributes.sort(\n    sortNeedsUpdateFirstToTop\n  );\n\n  // Let's pack in our attributes automagically so we can determine block and block indices.\n  packAttributes(allInstanceAttributes);\n  // Before we make the vertex attributes, we must determine the buffering strategy our layer will utilize\n  getLayerBufferType(gl, layer, vertexAttributes, allInstanceAttributes);\n\n  // Create the base vertex attributes that must be present\n  const addedVertexAttributes: IVertexAttribute[] = generateBaseVertexAttributes(\n    layer\n  );\n\n  // Aggregate all of the injected shaderIO with the layer's shaderIO\n  const allVertexAttributes: IVertexAttributeInternal[] = addedVertexAttributes\n    .concat(vertexAttributes || [])\n    .map(toVertexAttributeInternal);\n\n  return {\n    instanceAttributes: allInstanceAttributes,\n    uniforms: allUniforms,\n    vertexAttributes: allVertexAttributes\n  };\n}\n","import * as Three from \"three\";\nimport { IInstancingUniform, IUniform, UniformSize } from \"../../types\";\nimport { Instance } from \"../../util\";\nimport { ILayerProps, Layer } from \"../layer\";\n\nconst UNIFORM_SIZE_TO_MATERIAL_TYPE: { [key: number]: string } = {\n  [UniformSize.ONE]: \"f\",\n  [UniformSize.TWO]: \"v2\",\n  [UniformSize.THREE]: \"v3\",\n  [UniformSize.FOUR]: \"v4\",\n  [UniformSize.MATRIX3]: \"Matrix3fv\",\n  [UniformSize.MATRIX4]: \"Matrix4fv\"\n};\n\nconst DEFAULT_UNIFORM_VALUE: { [key: number]: number[] } = {\n  [UniformSize.ONE]: [0],\n  [UniformSize.TWO]: [0, 0],\n  [UniformSize.THREE]: [0, 0, 0],\n  [UniformSize.FOUR]: [0, 0, 0, 0],\n  [UniformSize.MATRIX3]: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [UniformSize.MATRIX4]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n};\n\nfunction toMaterialUniform(uniform: IUniform) {\n  return {\n    type: UNIFORM_SIZE_TO_MATERIAL_TYPE[uniform.size],\n    value: DEFAULT_UNIFORM_VALUE[uniform.size]\n  };\n}\n\nexport function generateLayerMaterial<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(\n  layer: Layer<T, U>,\n  vs: string,\n  fs: string,\n  layerUniforms: IUniform[],\n  instancingUniforms: IInstancingUniform[]\n): Three.RawShaderMaterial {\n  // We now need to establish the material for the layer\n  const materialParams: Three.ShaderMaterialParameters = layer.getMaterialOptions();\n  materialParams.vertexShader = vs;\n  materialParams.fragmentShader = fs;\n\n  // We must convert all of the uniforms to actual Three material initialization uniforms\n  materialParams.uniforms = {};\n\n  // Convert our non-instancing uniforms to our material uniforms\n  for (let i = 0, end = layerUniforms.length; i < end; ++i) {\n    const uniform = layerUniforms[i];\n    const materialUniform = toMaterialUniform(uniform);\n    materialParams.uniforms[uniform.name] = materialUniform;\n  }\n\n  // Add in the generated instancing uniforms\n  for (let i = 0, end = instancingUniforms.length; i < end; ++i) {\n    const generatedUniform = instancingUniforms[i];\n    materialParams.uniforms[generatedUniform.name] = {\n      type: generatedUniform.type,\n      value: generatedUniform.value\n    };\n  }\n\n  return new Three.RawShaderMaterial(materialParams);\n}\n","import * as Three from \"three\";\nimport { Instance } from \"../../instance-provider/instance\";\nimport {\n  IVertexAttribute,\n  IVertexAttributeInternal,\n  ShaderIOValue\n} from \"../../types\";\nimport { Layer } from \"../layer\";\nimport { LayerBufferType } from \"./layer-buffer-type\";\n\nfunction isNumberCluster(\n  val: ShaderIOValue\n): val is\n  | [number]\n  | [number, number]\n  | [number, number, number]\n  | [number, number, number, number] {\n  return !Array.isArray(val[0]);\n}\n\nexport function generateLayerGeometry<T extends Instance>(\n  layer: Layer<T, any>,\n  maxInstancesPerBuffer: number,\n  vertexAttributes: IVertexAttributeInternal[],\n  vertexCount: number\n): Three.BufferGeometry {\n  // Make the new buffers to be updated\n  const vertexBuffers = [];\n\n  // Certain buffer strategies only need one instance buffered in\n  if (\n    layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE ||\n    layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE_PACKING\n  ) {\n    maxInstancesPerBuffer = 1;\n  }\n\n  for (let i = 0, end = vertexAttributes.length; i < end; ++i) {\n    const attribute = vertexAttributes[i];\n    vertexBuffers.push(\n      new Float32Array(attribute.size * vertexCount * maxInstancesPerBuffer)\n    );\n  }\n\n  // Let's now fill in the baseline geometry with the instances we will be generating\n  // First we ask the layer for a single instance's buffer setup\n  const endk = vertexAttributes.length;\n  let buffer: Float32Array;\n  let attribute: IVertexAttribute;\n  let value: ShaderIOValue;\n  let formatError: boolean = false;\n\n  for (let i = 0, end = vertexCount; i < end; ++i) {\n    for (let k = 0; k < endk; ++k) {\n      attribute = vertexAttributes[k];\n      buffer = vertexBuffers[k];\n      value = attribute.update(i);\n\n      if (isNumberCluster(value)) {\n        for (\n          let j = i * attribute.size, endj = j + attribute.size, index = 0;\n          j < endj;\n          ++j, ++index\n        ) {\n          buffer[j] = value[index];\n        }\n      } else {\n        formatError = true;\n      }\n    }\n  }\n\n  if (formatError) {\n    console.warn(\n      \"A vertex buffer updating method should not use arrays of arrays of numbers.\"\n    );\n  }\n\n  // After getting the geometry for a single instance, we can now copy paste\n  // For subsequent instances using very fast FLoat32 methods\n  // NOTE: This is ONLY for certain buffering strategies. This is essentially a noop when the\n  // maxInstances is set to one.\n  for (let i = 0, end = vertexAttributes.length; i < end; ++i) {\n    const attribute = vertexAttributes[i];\n    const instanceSize = attribute.size * vertexCount;\n\n    // Copy the first buffer set into the rest of the buffer\n    for (let k = 1, endk = maxInstancesPerBuffer; k < endk; ++k) {\n      vertexBuffers[i].copyWithin(instanceSize * k, 0, instanceSize);\n    }\n  }\n\n  // Lastly, we make the instance attribute reflect correctly so each instance\n  // Can have varied information. This is only appropriate for the uniform buffer strategy\n  if (layer.bufferType === LayerBufferType.UNIFORM) {\n    const instancingBuffer = vertexBuffers[0];\n\n    for (let i = 0, end = maxInstancesPerBuffer; i < end; ++i) {\n      const instanceStartIndex = i * vertexCount;\n\n      for (let k = 0; k < vertexCount; ++k) {\n        instancingBuffer[k + instanceStartIndex] = i;\n      }\n    }\n  }\n\n  // Now we can generate the attributes and apply them to a geometry object\n  const geometry = new Three.BufferGeometry();\n\n  for (let i = 0, end = vertexAttributes.length; i < end; ++i) {\n    const attribute = vertexAttributes[i];\n    const materialAttribute = new Three.BufferAttribute(\n      vertexBuffers[i],\n      attribute.size\n    );\n    attribute.materialAttribute = materialAttribute;\n    geometry.addAttribute(attribute.name, materialAttribute);\n  }\n\n  return geometry;\n}\n","import * as Three from \"three\";\nimport { AbsolutePosition } from \"../../primitives/absolute-position\";\nimport { ChartCamera } from \"../../util/chart-camera\";\nimport { ViewCamera } from \"../../util/view-camera\";\nimport { Scene } from \"../scene\";\nimport { View } from \"../view\";\n\nexport interface IDefaultSceneElements {\n  /** Default chartting camera */\n  camera: ChartCamera;\n  /** Default scene for elements to be added into */\n  scene: Scene;\n  /** Default view scenes are rendered with when no other views are specified by the layer or the surface */\n  view: View;\n  /**\n   * The default view projection. Defaults to being an orthographic rendering with the origin at the\n   * top left of the canvas and the y-axis as +y going downward.\n   */\n  viewCamera: ViewCamera;\n  /** The default viewport that encompasses the entire canvas */\n  viewport: AbsolutePosition;\n}\n\n/**\n * This generates all of the cameras/views/scenes necessary for default viewing of elements.\n *\n * These defaults are required to ensure the following:\n *\n * - Orthographic view\n * - top left corner of the canvas is 0,0\n * - y axis is +y downward\n * - entire canvas is the viewport.\n */\nexport function generateDefaultScene(\n  context: WebGLRenderingContext\n): IDefaultSceneElements {\n  // Generate a default view camera that is\n  // - Orthographic\n  // - (0, 0) is the top left of the canvas\n  // - the y axis is +y going downward\n  const height = context.canvas.height;\n  const width = context.canvas.width;\n  const aspectRatio = width / height;\n\n  const viewport = {\n    aspectRatio: aspectRatio,\n    bottom: -height / 2,\n    far: 10000000,\n    left: -width / 2,\n    near: -100,\n    right: width / 2,\n    top: height / 2,\n    viewSize: height\n  };\n\n  const defaultCamera: ViewCamera = new ViewCamera();\n  defaultCamera.baseCamera = new Three.OrthographicCamera(\n    viewport.left,\n    viewport.right,\n    viewport.top,\n    viewport.bottom,\n    viewport.near,\n    viewport.far\n  );\n\n  defaultCamera.baseCamera.scale.set(1.0, -1.0, 1.0);\n  defaultCamera.baseCamera.position.set(0.0, 0.0, -300.0);\n  defaultCamera.baseCamera.updateMatrixWorld(true);\n  defaultCamera.baseCamera.updateMatrix();\n\n  if (defaultCamera.baseCamera instanceof Three.OrthographicCamera) {\n    defaultCamera.baseCamera.updateProjectionMatrix();\n  }\n\n  // Generate a charting camera with all scales set to 1 and no offsets in any direction\n  const defaultChartCamera: ChartCamera = new ChartCamera();\n\n  // This is a viewport that covers the entire context\n  const defaultViewport = {\n    bottom: 0,\n    left: 0,\n    right: 0,\n    top: 0\n  };\n\n  // Make a view using our defaults\n  const defaultView = new View({\n    camera: defaultChartCamera,\n    key: View.DEFAULT_VIEW_ID,\n    viewCamera: defaultCamera,\n    viewport: defaultViewport\n  });\n\n  // Make a scene with our defaults\n  const defaultScene = new Scene({\n    key: Scene.DEFAULT_SCENE_ID,\n    views: []\n  });\n\n  // Make sure the default view is a part of the default scene\n  defaultScene.addView(defaultView);\n\n  return {\n    camera: defaultChartCamera,\n    scene: defaultScene,\n    view: defaultView,\n    viewCamera: defaultCamera,\n    viewport: defaultViewport\n  };\n}\n","import { Bounds } from \"../primitives/bounds\";\n\nexport class DataBounds<T> extends Bounds {\n  data: T;\n\n  static emptyBounds<T>() {\n    return new DataBounds<T>({\n      height: 0,\n      width: 0,\n      x: 0,\n      y: 0\n    });\n  }\n}\n","import { Omit, ShaderInjectionTarget } from \"../../types\";\n\n/** This is the message used when a module unit is attempted to be modified after it has been locked down */\nconst LOCKED_MODULE_UNIT_MESSAGE =\n  \"Once a ShaderModuleUnit has been registered, you CAN NOT modify it! Module ID:\";\n\n/** Options for the constructor for a new ShaderModuleUnit */\nexport type ShaderModuleUnitOptions = Omit<Partial<ShaderModuleUnit>, \"lock\">;\n\n/**\n * This is a module unit that can be registered as a ShaderModule which the system will use to resolve\n * imports within a shader.\n */\nexport class ShaderModuleUnit {\n  private _isLocked: boolean;\n  private _content: string;\n  private _compatibility: ShaderInjectionTarget;\n  private _moduleId: string;\n\n  /** This is the content that replaces shader imports */\n  get content(): string {\n    return this._content;\n  }\n  set content(val: string) {\n    if (this._isLocked) {\n      console.warn(LOCKED_MODULE_UNIT_MESSAGE, this._moduleId);\n      return;\n    }\n\n    this._content = val;\n  }\n  /**\n   * This defines which shader type the content is compatible with. You can only have one content assigned\n   * per each ShaderInjectionTarget type. Thus you can have a module such as 'picking' with two unique implementations\n   * one for Fragment and one for Vertex shaders. Or you can assign it to both.\n   */\n  get compatibility(): ShaderInjectionTarget {\n    return this._compatibility;\n  }\n  set compatibility(val: ShaderInjectionTarget) {\n    if (this._isLocked) {\n      console.warn(LOCKED_MODULE_UNIT_MESSAGE, this._moduleId);\n      return;\n    }\n\n    this._compatibility = val;\n  }\n  /**\n   * Allows a module to prevent overrides by another module using the same moduleId.\n   * Attempted overrides will throw warnings.\n   */\n  isFinal?: boolean;\n  /** This is the string ID a shader must use to include the provided content. */\n  get moduleId(): string {\n    return this._moduleId;\n  }\n  set moduleId(val: string) {\n    if (this._isLocked) {\n      console.warn(LOCKED_MODULE_UNIT_MESSAGE, this._moduleId);\n      return;\n    }\n\n    this._moduleId = val;\n  }\n\n  constructor(options: ShaderModuleUnitOptions) {\n    Object.assign(this, options);\n  }\n\n  /**\n   * Makes this unit unable to be modified in anyway\n   */\n  lock() {\n    this._isLocked = true;\n  }\n}\n","import { ShaderInjectionTarget } from \"../../types\";\nimport { shaderTemplate } from \"../../util\";\nimport {\n  ShaderModuleUnit,\n  ShaderModuleUnitOptions\n} from \"./shader-module-unit\";\n\nconst debug = require(\"debug\")(\"performance\");\nconst debugModuleVS = require(\"debug\")(\"shader-module-vs\");\nconst debugModuleFS = require(\"debug\")(\"shader-module-fs\");\n\n/**\n * This is the results expected from a compile() operation from the ShaderModule.\n */\nexport interface IShaderCompileResults {\n  errors: string[];\n  shader: string | null;\n}\n\n/**\n * The partial token that must be matched to indicate an import statement.\n * (Must be the first non-whitespace word found in the token)\n */\nconst IMPORT_TOKEN = \"import\";\n/**\n * This is a delimiter between the import token and the identifying import id value\n * provided. This must be the next non-whitespace character found after the import token.\n *\n * We allow whitespace between the token and it's delimiter to allow for style preference\n *\n * import: id\n * import:id\n * import : id\n *\n * etc.\n */\nconst IMPORT_DELIMITER = \":\";\n\n/**\n * Tests to see if a ShaderModuleUnit is compatible with a provided Shader Target\n */\nfunction isUnitCompatible(\n  unit: ShaderModuleUnit,\n  target: ShaderInjectionTarget\n) {\n  return (\n    Boolean(unit) &&\n    (unit.compatibility === target ||\n      unit.compatibility === ShaderInjectionTarget.ALL)\n  );\n}\n\n/**\n * This file defines modules for shaders. Shader modules are global to the window context.\n */\nexport class ShaderModule {\n  /** These are all of the currently registered modules for the Shader Modules */\n  static modules = new Map<\n    string,\n    { fs?: ShaderModuleUnit; vs?: ShaderModuleUnit }\n  >();\n\n  /**\n   * This registers a new ShaderModuleUnit. It makes the module available by it's importId within shaders\n   * using this framework.\n   *\n   * If the module is registered with no returned output, the registration was a success. Any returned output\n   * indicates issues encountered while registering the module.\n   */\n  static register(\n    unit: ShaderModuleUnit | ShaderModuleUnitOptions | ShaderModuleUnitOptions[]\n  ): string | null {\n    // If the input is just Shader Module Unit options injected, then we simply handle wrapping\n    // the options into a ShaderModuleUnit and do a registration.\n    if (!(unit instanceof ShaderModuleUnit)) {\n      if (Array.isArray(unit)) {\n        let out = \"\";\n\n        unit.forEach(options => {\n          const output = ShaderModule.register(options);\n          if (output) out += `${output}\\n`;\n        });\n\n        // If there was no output at any time, let's be sure to return a simple null\n        if (!out) {\n          return null;\n        }\n\n        return out;\n      }\n\n      return ShaderModule.register(new ShaderModuleUnit(unit));\n    }\n\n    let current = ShaderModule.modules.get(unit.moduleId);\n\n    if (!current) {\n      current = {};\n      ShaderModule.modules.set(unit.moduleId, current);\n    }\n\n    const fs = current.fs;\n    const vs = current.vs;\n    const isFSCompatible = isUnitCompatible(\n      unit,\n      ShaderInjectionTarget.FRAGMENT\n    );\n    const isVSCompatible = isUnitCompatible(unit, ShaderInjectionTarget.VERTEX);\n\n    if (fs && isFSCompatible) {\n      if (fs.isFinal) {\n        return `Module ID: ${\n          unit.moduleId\n        } Can not override the module's existing Fragment registration as the exisitng module is marked as final`;\n      }\n\n      debug(\n        \"A Shader Module Unit has overridden an existing module for the Fragment Shader Module ID: %o\",\n        unit.moduleId\n      );\n    }\n\n    if (vs && isVSCompatible) {\n      if (vs.isFinal) {\n        return `Module ID: ${\n          unit.moduleId\n        } Can not override the module's existing Vertex registration as the exisitng module is marked as final`;\n      }\n\n      debug(\n        \"A Shader Module Unit has overridden an existing module for the Vertex Shader Module ID: %o\",\n        unit.moduleId\n      );\n    }\n\n    // Register the module as it passed all scrutiny by this point\n    if (isFSCompatible) {\n      current.fs = unit;\n    }\n\n    if (isVSCompatible) {\n      current.vs = unit;\n    }\n\n    // Lock the unit down indicating it can no longer be modified ever again.\n    unit.lock();\n\n    return null;\n  }\n\n  /**\n   * This examines a shader string and replaces all import statements with any existing registered modules.\n   * This will also output any issues such as requested modules that don't exist and detect circular dependencies\n   * and such ilk.\n   *\n   * @param shader The content of the shader to analyze for import statements\n   * @param target The shader target type to consider\n   * @param additionalModules Additional modules to include in the shader regardless if the shader requested it or not\n   */\n  static process(\n    id: string,\n    shader: string,\n    target: ShaderInjectionTarget,\n    additionalModules?: string[]\n  ): IShaderCompileResults {\n    // This stores the module id's that have already been included in the shader\n    const included = new Set<string>();\n    // This stores the import stack that is currently being processed\n    const processing: (string | null)[] = [];\n    // This is all of the processed errors discovered while resolving imports\n    const errors: string[] = [];\n    // Pick a debugging target based on shader target\n    const debugTarget =\n      target === ShaderInjectionTarget.VERTEX ? debugModuleVS : debugModuleFS;\n    debugTarget(\"Processing Shader for id %o:\", id);\n\n    // We place this method as an internal recursive strategy to solving this issue due to the complexities of\n    // the problem at hand. We have shaders that have tokens analyzed that MUST be immediately resolved\n    // to a correct value. Thus we can not use a process queue to remove the need for the recursion. Also, as\n    // this is a static method, this provides some needed properties within the context of the function that we\n    // do not want exposed at all, which is impossible to hide within a static context (private static is not supported).\n    function process(shader: string, id: string | null) {\n      // Debugging for the import id's found along with the current stack\n      debugTarget(\n        \"%o: %o\",\n        id,\n        processing\n          .slice(0)\n          .reverse()\n          .join(\" -> \")\n      );\n      // First look to see if the identifier is already in the processing queue. If it is, we\n      // have a heinous circular dependency.\n      const queueIndex = processing.indexOf(id);\n      // Queue up this id as being processed\n      processing.unshift(id);\n\n      // See if the circular dependency is found.\n      if (queueIndex > -1) {\n        // Since we have a queue of our processing path, we can show the circular dependency path\n        const circularPath = processing.slice(0, queueIndex + 2).reverse();\n        // Spew the blood\n        errors.push(\n          `A Shader has detected a Circular dependency in import requests: ${circularPath.join(\n            \" -> \"\n          )}`\n        );\n        // Remove the id from the queue\n        processing.shift();\n\n        // Return a null flag indicating the process failed.\n        return null;\n      }\n\n      // At this point we need to determine if the id has already been included in the module imports\n      // Each import should only be included once so we prevent duplicate items from showing up\n      if (id && included.has(id)) {\n        // Remove the id from the queue\n        processing.shift();\n\n        // Return empty, but not errored\n        return \"\";\n      }\n\n      // All included modules should appear at the top of the current module so we store included module\n      // output here to be added later.\n      let includedModuleOutput = \"\";\n\n      // Here we process the module contents and look for additional import statements.\n      const template = shaderTemplate({\n        // We do not want any direct replacement options, we will handle token analyzing\n        // via our onToken callback so we can find our special \"import:\" case\n        options: {},\n        // Provide the shader to our template processor\n        shader,\n\n        // We do not want to remove any template macros that do not deal with extension\n        onToken: token => {\n          const trimmedToken = token.trim();\n\n          // See if the token is the first thing to appear\n          if (trimmedToken.indexOf(IMPORT_TOKEN) === 0) {\n            // Analyze the remainder of the token to find the necessary colon to be the NEXT\n            // Non-whitespace character\n            const afterToken = trimmedToken.substr(IMPORT_TOKEN.length).trim();\n\n            // Make sure the character IS a colon\n            if (afterToken[0] === IMPORT_DELIMITER) {\n              // At this point, ANYTHING after the colon is the module id being requested (with white space trimmed)\n              const moduleId = afterToken\n                .substr(IMPORT_DELIMITER.length)\n                .trim();\n\n              // Get the requested module\n              const mod = ShaderModule.modules.get(moduleId);\n\n              // If we found the module, great! We can store the identifier as a module associated with this shader\n              // string thus reducing processing time needed for next processing.\n              if (mod) {\n                let moduleContent;\n\n                if (\n                  target === ShaderInjectionTarget.FRAGMENT ||\n                  target === ShaderInjectionTarget.ALL\n                ) {\n                  if (mod.fs) {\n                    moduleContent = process(mod.fs.content, moduleId);\n                  } else {\n                    errors.push(\n                      `Could not find requested target fragment module for Module ID: ${moduleId} requested by module: ${id}`\n                    );\n                  }\n                }\n\n                if (\n                  target === ShaderInjectionTarget.VERTEX ||\n                  target === ShaderInjectionTarget.ALL\n                ) {\n                  if (mod.vs) {\n                    moduleContent = process(mod.vs.content, moduleId);\n                  } else {\n                    errors.push(\n                      `Could not find requested target vertex module for Module ID: ${moduleId} requested by module: ${id}`\n                    );\n                  }\n                }\n\n                if (!mod.vs && !mod.fs) {\n                  errors.push(\n                    \"Could not find a vertex or fragment shader within exisitng module\"\n                  );\n                }\n\n                if (moduleContent === null) {\n                  errors.push(\n                    `Error Processing module Module ID: ${moduleId} requested by module: ${id}`\n                  );\n                }\n\n                // Include the discovered content in the module content output\n                includedModuleOutput += moduleContent || \"\";\n              } else {\n                errors.push(\n                  `Could not find requested module: ${moduleId} requested by module: ${id}`\n                );\n              }\n\n              // Clear the import token from the body of the shader\n              return \"\";\n            }\n          }\n\n          // Leave any token not processed alone\n          return `$\\{${token}}`;\n        }\n      });\n\n      // Remove the id being processed currently\n      processing.shift();\n      // Add the id to the list of items that have been included\n      included.add(id || \"\");\n\n      // If the shader had no module content, let's just return the shader and reduce empty whitespace\n      if (!includedModuleOutput || includedModuleOutput.length === 0) {\n        return template.shader.trim();\n      }\n\n      // Return the generated shader chunk with it's included module content at the top of the file\n      return `${includedModuleOutput.trim()}\\n\\n${template.shader.trim()}`;\n    }\n\n    // We throw in the additional imports  at the top of the shader being analyzed\n    let modifedShader = shader;\n\n    if (additionalModules) {\n      const imports = additionalModules.map(\n        moduleId => `$\\{import: ${moduleId}}\\n`\n      );\n      modifedShader = imports + shader;\n    }\n\n    // generate the results needed\n    const results = {\n      errors,\n      shader: process(modifedShader, null)\n    };\n\n    return results;\n  }\n}\n","export * from \"./label-layer\";\nexport * from \"./label-instance\";\n","import { Label } from \"../../primitives/label\";\nimport { LabelAtlasResource } from \"./label-atlas-resource\";\n\nlet canvas: CanvasRenderingContext2D;\nconst MAX_FONT_SIZE = 50;\nconst { floor, max, min } = Math;\n\nexport interface ILabelRasterizedMetrics {\n  canvas: HTMLCanvasElement;\n  height: number;\n  width: number;\n}\n\nexport class LabelRasterizer {\n  /**\n   * This loops until our canvas context is available\n   */\n  static async awaitContext() {\n    // Iterate till the browser provides a valid canvas to render elements into\n    while (!canvas) {\n      this.getContext();\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n  }\n\n  /**\n   * This renders our label to a sizeable canvas where we loop over the pixel data to determine\n   * the bounds of the label.\n   *\n   * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n   *                                 the size to be rendered to the texture to the size the label\n   *                                 should be within world space.\n   * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n   */\n  static calculateLabelSize(\n    resource: LabelAtlasResource,\n    sampleScale?: number,\n    calculateTexture?: boolean\n  ) {\n    // If a max width is specified, then we must render and determine the potentially truncated text of the\n    // Label. We can do a binary search for the correct truncated label size.\n    if (calculateTexture) {\n      this.calculateTrucatedText(resource);\n    }\n\n    /** Get the label properties for rasterizing */\n    const label = resource.label;\n    // Get the scaling of the sample base\n    const sampleScaling = sampleScale || resource.sampleScale || 1.0;\n    // Draw our label to a canvas\n    this.drawLabel(label, resource.truncatedText, canvas, sampleScaling);\n    // Measure the contents of the canvas\n    const { minX, minY, maxX, maxY } = this.measureContents(canvas);\n\n    // Make sure the rasterization object is initialized\n    resource.rasterization = resource.rasterization || {\n      texture: { height: 0, width: 0 },\n      world: { height: 0, width: 0 }\n    };\n\n    // When a forced sampling is present, it calculates that as the world space\n    if (!calculateTexture) {\n      // Update the calculated texture size.\n      resource.rasterization.world = {\n        height: maxY - minY,\n        width: maxX - minX\n      };\n    } else {\n      // Otherwise we first calculate the texture rasterization for the label\n      // Update the calculated texture size.\n      resource.rasterization.texture = {\n        height: maxY - minY,\n        width: maxX - minX\n      };\n\n      resource.rasterization.canvas = this.createCroppedCanvas(\n        resource,\n        minY,\n        minX\n      );\n      this.calculateLabelSize(resource, 1.0, false);\n    }\n  }\n\n  /**\n   * This determines what the truncated text of the label will be. If there is no truncation\n   * then the truncated text === the label's text\n   */\n  static calculateTrucatedText(resource: LabelAtlasResource) {\n    const label = resource.label;\n    const maxWidth = label.maxWidth;\n\n    // If the label has no max width, then there will be no truncation\n    if (!maxWidth) {\n      resource.truncatedText = label.text;\n      return;\n    }\n\n    // We now do an initial rendering of the label as it will appear in world space\n    this.drawLabel(label, label.text, canvas, 1);\n    // We measure the contents of the rendered item to see if it violates the maxWidth\n    const firstTest = this.measureContents(canvas);\n\n    // If we're within spec, we do not need to truncate\n    if (firstTest.maxX - firstTest.minX <= maxWidth) {\n      resource.truncatedText = label.text;\n      return;\n    }\n\n    // At this point we need to binary search through chopping off letters to find a string\n    // That will fit within max width\n    const text = label.text;\n    let left = 0;\n    let right = text.length;\n    let cursor = floor((right - left) / 2.0);\n    let safety = 0;\n    const safetyMax = 50;\n\n    // Loop to perform the binary search\n    while (right > left && cursor !== 0 && safety++ < safetyMax) {\n      // Draw and measure\n      this.drawLabel(label, `${text.substr(0, cursor)}...`, canvas, 1);\n      const { minX, maxX } = this.measureContents(canvas);\n\n      // If we pass then we move left to cursor to make the test string longer\n      if (maxX - minX <= maxWidth) {\n        left = cursor;\n      } else {\n        // If we fail, we move right to cursor to make the test string shorter\n        right = cursor;\n      }\n\n      // Get our next cursor position\n      const nextCursor = floor((right - left) / 2.0) + left;\n\n      // If the next cursor is the same as cursor, then we're done searching\n      if (nextCursor === cursor) {\n        break;\n      }\n\n      // Move our cursor\n      cursor = nextCursor;\n    }\n\n    // If cursor is zero, nothing passed and our truncation is just ellipses\n    if (cursor === 0) {\n      resource.truncatedText = \"...\";\n    } else {\n      // Otherwise we get the string that passes and use that as our truncated text\n      resource.truncatedText = `${text.substr(0, cursor)}...`;\n    }\n  }\n\n  /**\n   * This generates a canvas that has the cropped version of the label where the label\n   * fits neatly in the canvas object.\n   */\n  static createCroppedCanvas(\n    resource: LabelAtlasResource,\n    top: number,\n    left: number\n  ) {\n    const cropped = document.createElement(\"canvas\");\n    const context = cropped.getContext(\"2d\");\n\n    if (context) {\n      const texture = resource.rasterization.texture;\n      cropped.width = texture.width;\n      cropped.height = texture.height;\n      context.imageSmoothingEnabled = false;\n\n      // Draw just the region the label appears into the canvas\n      context.drawImage(\n        canvas.canvas,\n        left,\n        top,\n        texture.width,\n        texture.height,\n        0,\n        0,\n        texture.width,\n        texture.height\n      );\n    } else {\n      console.warn(\n        \"Could not create a canvas 2d context to generate a label's cropped image.\"\n      );\n    }\n\n    return cropped;\n  }\n\n  /**\n   * This actually renders a string to a canvas context using a label's settings\n   */\n  static drawLabel(\n    label: Label,\n    text: string,\n    canvas: CanvasRenderingContext2D,\n    sampleScaling: number\n  ) {\n    // Get the font size we will rasterize with\n    const fontSize = this.getLabelRasterizationFontSize(label, sampleScaling);\n    // Set the color of the label to white so we know what color to look for\n    canvas.fillStyle = \"white\";\n    // Set the font to the canvas\n    canvas.font = this.makeCSSFont(label, sampleScaling);\n    // We will use the canvas measuring tool to give us a baseline for how wide\n    // The label will be. We add the font size to the width for the padding needed to ensure\n    // The entirety of the text is placed on the canvas.\n    canvas.canvas.width = canvas.measureText(label.text).width + fontSize;\n    // Make our test area the font size with one extra level of the font size\n    // For padding.\n    canvas.canvas.height = fontSize * 2.0;\n    // After adjusting the canvas dimensions we must re-set the font metrics\n    // Set the color of the label to white so we know what color to look for\n    canvas.fillStyle = \"white\";\n    // Set the font to the canvas\n    canvas.font = this.makeCSSFont(label, sampleScaling);\n    // Render the text into our canvas for calculating\n    canvas.fillText(text, fontSize / 2.0, fontSize / 4.0 + fontSize);\n  }\n\n  /**\n   * Attempts to populate the 'canvas' context for rendering labels offscreen.\n   */\n  static getContext() {\n    if (!canvas) {\n      const potentialCanvas = document.createElement(\"canvas\").getContext(\"2d\");\n\n      if (potentialCanvas) {\n        canvas = potentialCanvas;\n      }\n\n      return potentialCanvas;\n    }\n\n    return canvas;\n  }\n\n  /**\n   * This retrieves the font size that will be used when rasterizing the label. This takes into\n   * account whether the label is requesting super sampling be present for the rendering.\n   */\n  static getLabelRasterizationFontSize(label: Label, sampleScale: number) {\n    return label.fontSize * sampleScale;\n  }\n\n  /**\n   * Generates the CSS font string based on the label's values\n   */\n  static makeCSSFont(label: Label, sampleScale: number) {\n    return `${label.fontWeight} ${this.getLabelRasterizationFontSize(\n      label,\n      sampleScale\n    )}px ${label.fontFamily}`;\n  }\n\n  /**\n   * This measures the contents of what is inside the canvas assumming the rendered values are only white\n   */\n  static measureContents(canvas: CanvasRenderingContext2D) {\n    const { width, height } = canvas.canvas;\n    const imageData = canvas.getImageData(0, 0, width, height).data;\n    let r;\n\n    let minY = Number.MAX_SAFE_INTEGER;\n    let minX = Number.MAX_SAFE_INTEGER;\n    let maxX = Number.MIN_SAFE_INTEGER;\n    let maxY = Number.MIN_SAFE_INTEGER;\n\n    for (let i = 0; i < width; ++i) {\n      for (let k = 0; k < height; ++k) {\n        const redIndex = k * (width * 4) + i * 4;\n        r = imageData[redIndex];\n\n        if (r > 0.0) {\n          minY = min(minY, k);\n          minX = min(minX, i);\n          maxX = max(maxX, i);\n          maxY = max(maxY, k);\n        }\n      }\n    }\n\n    // The identified pixel needs to be encased and not a direct target\n    minY -= 1;\n    maxY += 2;\n    maxX += 2;\n    minX -= 1;\n\n    minY = max(minY, 0);\n    minX = max(minX, 0);\n\n    return { minX, minY, maxX, maxY };\n  }\n\n  /**\n   * Performs the rendering of the label\n   */\n  static async render(\n    resource: LabelAtlasResource\n  ): Promise<LabelAtlasResource> {\n    // Make sure our canvas object is ready for rendering\n    await this.awaitContext();\n\n    // Validate the label's input\n    if (resource.label.fontSize > MAX_FONT_SIZE) {\n      console.warn(\"Labels only support font sizes up to 50\");\n      return resource;\n    }\n\n    // Calculate all of the label metrics and generate a canvas on the label that can\n    // Be rendered to the canvas.\n    this.calculateLabelSize(resource, resource.sampleScale, true);\n\n    return resource;\n  }\n\n  /**\n   * Performs the rendering of the label\n   */\n  static renderSync(resource: LabelAtlasResource): LabelAtlasResource {\n    // Ensure our offscreen canvas is prepped\n    this.getContext();\n\n    if (!canvas) {\n      console.warn(\n        \"Can not render a label synchronously without the canvas context being ready.\"\n      );\n      return resource;\n    }\n\n    // Validate the label's input\n    if (resource.label.fontSize > MAX_FONT_SIZE) {\n      console.warn(\"Labels only support font sizes up to 50\");\n      return resource;\n    }\n\n    // Calculate all of the label metrics and generate a canvas on the label that can\n    // Be rendered to the canvas.\n    this.calculateLabelSize(resource, resource.sampleScale, true);\n\n    return resource;\n  }\n}\n","import { Image } from \"../../primitives/image\";\nimport { BaseAtlasResource } from \"./base-atlas-resource\";\n\nexport class ImageAtlasResource extends BaseAtlasResource {\n  /** This is the image to be loaded into the atlas */\n  image: Image;\n\n  constructor(image: Image) {\n    super();\n    this.image = image;\n  }\n}\n","import { Color } from \"../../primitives/color\";\nimport { ColorAtlasResource } from \"./color-atlas-resource\";\n\n// When ratserized to the image, this determines the size of the square rendered to the atlas.\nconst COLOR_RASTERIZATION_SIZE = 2;\n\n/**\n * Static class for rasterizing a color to a canvas object\n */\nexport class ColorRasterizer {\n  /**\n   * This loops until our canvas context is available\n   */\n  static async awaitContext(canvas: HTMLCanvasElement) {\n    // Iterate till the browser provides a valid canvas to render elements into\n    for (\n      let c = canvas.getContext(\"2d\"), limit = 0;\n      !Boolean(c) && limit < 100;\n      c = canvas.getContext(\"2d\"), ++limit\n    ) {\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n  }\n\n  /**\n   * Generates the CSS string version of the color\n   */\n  static makeCSS(color: Color) {\n    return `rgba(${Math.floor(color.r * 256)}, ${Math.floor(\n      color.g * 256\n    )}, ${Math.floor(color.b * 256)}, ${color.opacity})`;\n  }\n\n  static async render(resource: ColorAtlasResource) {\n    const canvas = document.createElement(\"canvas\");\n    const context = canvas.getContext(\"2d\");\n\n    await this.awaitContext(canvas);\n\n    if (context) {\n      canvas.width = COLOR_RASTERIZATION_SIZE;\n      canvas.height = COLOR_RASTERIZATION_SIZE;\n      context.imageSmoothingEnabled = false;\n      context.fillStyle = this.makeCSS(resource.color);\n\n      // Draw the color to the fill space\n      context.fillRect(\n        0,\n        0,\n        COLOR_RASTERIZATION_SIZE,\n        COLOR_RASTERIZATION_SIZE\n      );\n      // Update the resource with the rasterization\n      resource.rasterization.canvas = canvas;\n    } else {\n      console.warn(\n        \"Could not create a canvas 2d context to generate a color for rasterization.\"\n      );\n    }\n\n    return resource;\n  }\n}\n","import { Color } from \"../../primitives/color\";\nimport { BaseAtlasResource } from \"./base-atlas-resource\";\n\nexport class ColorAtlasResource extends BaseAtlasResource {\n  /** This is the color to be loaded into the atlas */\n  color: Color;\n\n  constructor(color: Color) {\n    super();\n    this.color = color;\n  }\n}\n","import * as Three from \"three\";\nimport { IPoint } from \"../../primitives/point\";\n\n/**\n * Defines a texture that is located on an atlas\n */\nexport class SubTexture {\n  /** Stores the aspect ratio of the image for quick reference */\n  aspectRatio: number = 1.0;\n  /** The id of the atlas this texture is located on */\n  atlasReferenceID: string = \"\";\n  /** This is the actual texture of the atlas this resource is located on */\n  atlasTexture: Three.Texture | null = null;\n  /** This is the top left UV coordinate of the sub texture on the atlas */\n  atlasTL: IPoint = { x: 0, y: 0 };\n  /** This is the top right UV coordinate of the sub texture on the atlas */\n  atlasTR: IPoint = { x: 0, y: 0 };\n  /** This is the bottom left UV coordinate of the sub texture on the atlas */\n  atlasBL: IPoint = { x: 0, y: 0 };\n  /** This is the bottom right UV coordinate of the sub texture on the atlas */\n  atlasBR: IPoint = { x: 0, y: 0 };\n  /** This is the normalized width of the sub texture on the atlas */\n  widthOnAtlas: number = 0;\n  /** This is the normalized height of the sub texture on the atlas */\n  heightOnAtlas: number = 0;\n  /** This flag is set to false when the underlying texture is no longer valid */\n  isValid: boolean = false;\n  /** Width in pixels of the image on the atlas */\n  pixelWidth: number = 0;\n  /** Height in pixels of the image on the atlas */\n  pixelHeight: number = 0;\n}\n","import * as Three from \"three\";\nimport {\n  IdentifyByKey,\n  IdentifyByKeyOptions\n} from \"../../util/identify-by-key\";\nimport { AtlasManager, AtlasResource } from \"./atlas-manager\";\nimport { PackNode } from \"./pack-node\";\nimport { SubTexture } from \"./sub-texture\";\n\n/**\n * These are valid atlas sizes available. We force a power of 2 to be utilized.\n * We do not allow crazy large sizes as browsers have very real caps on resources.\n * This helps implementations be a little smarter about what they are using. Future\n * versions may increase this number as GPUs improve and standards allow greater\n * flexibility.\n */\nexport enum AtlasSize {\n  _2 = 0x01 << 1,\n  _4 = 0x01 << 2,\n  _8 = 0x01 << 3,\n  _16 = 0x01 << 4,\n  _32 = 0x01 << 5,\n  _64 = 0x01 << 6,\n  _128 = 0x01 << 7,\n  _256 = 0x01 << 8,\n  _512 = 0x01 << 9,\n  _1024 = 0x01 << 10,\n  _2048 = 0x01 << 11,\n  _4096 = 0x01 << 12\n}\n\nexport interface IAtlasOptions extends IdentifyByKeyOptions {\n  /** This is the height of the texture */\n  height: AtlasSize;\n  /** This is the width of the atlas */\n  width: AtlasSize;\n  /**\n   * This applies any desired settings to the Threejs texture as desired.\n   * Some noteable defaults this system sets:\n   *  - generateMipMaps is false and\n   *  - premultiply alpha is true.\n   */\n  textureSettings?: Partial<Three.Texture>;\n}\n\n/**\n * This represents a single Texture on the gpu that is composed of several smaller textures\n * as a 'look up'.\n */\nexport class Atlas extends IdentifyByKey {\n  /** Stores the size of the atlas texture */\n  height: AtlasSize;\n  /** This is the parent manager of the atlas */\n  manager: AtlasManager;\n  /** This is the packing of the  */\n  packing: PackNode;\n  /** This is the actual texture object that represents the atlas on the GPU */\n  texture: Three.Texture;\n  /** These are the applied settings to our texture */\n  textureSettings?: Partial<Three.Texture>;\n  /**\n   * This is all of the resources associated with this atlas. The boolean flag indicates if the resource\n   * is flagged for removal. When set to false, the resource is no longer valid and can be removed from\n   * the atlas at any given moment.\n   */\n  validResources = new Set<AtlasResource>();\n  /** Stores the size of the atlas texture */\n  width: AtlasSize;\n\n  constructor(options: IAtlasOptions) {\n    super(options);\n    const canvas = document.createElement(\"canvas\");\n    this.width = canvas.width = options.width;\n    this.height = canvas.height = options.height;\n    this.textureSettings = options.textureSettings;\n\n    // Set up the packing for this atlas\n    this.packing = new PackNode(0, 0, options.width, options.height);\n    // Make sure the texture is started and updated\n    this.updateTexture(canvas);\n  }\n\n  /**\n   * This invalidates the SubTexture of an atlas resource.\n   */\n  private invalidateResource(resource: AtlasResource) {\n    const zero = { x: 0, y: 0 };\n    resource.texture.aspectRatio = 1;\n    resource.texture.atlasBL = zero;\n    resource.texture.atlasBR = zero;\n    resource.texture.atlasTL = zero;\n    resource.texture.atlasTR = zero;\n    resource.texture.atlasReferenceID = \"\";\n    resource.texture.pixelWidth = 0;\n    resource.texture.pixelHeight = 0;\n    resource.texture.isValid = false;\n    resource.texture.atlasTexture = null;\n  }\n\n  /**\n   * Sets the parent manager of this atlas\n   */\n  setManager(manager: AtlasManager) {\n    this.manager = manager;\n  }\n\n  /**\n   * Adds a resource to this atlas AND ensures the resource is flagged valid for use.\n   *\n   * @return {boolean} True if the resource successfully registered\n   */\n  registerResource(resource: AtlasResource) {\n    if (!this.validResources.has(resource)) {\n      if (!resource.texture || !resource.texture.isValid) {\n        if (!resource.texture) {\n          resource.texture = new SubTexture();\n        }\n\n        resource.texture.isValid = true;\n        resource.texture.atlasTexture = this.texture;\n        this.validResources.add(resource);\n\n        return true;\n      } else {\n        console.warn(\n          \"Atlas Error:\",\n          this.id,\n          \"Attempted to add a resource to an Atlas that is already a valid resource on another atlas.\",\n          \"Consider Creating a new resource to be loaded into this particular atlas.\",\n          \"Resource:\",\n          resource\n        );\n      }\n    } else {\n      console.warn(\n        \"Atlas Error:\",\n        this.id,\n        \"A resource was trying to be added to the atlas that has already been added before.\",\n        \"Consider creating a new resource to indicate what you want loaded to the atlas\",\n        \"Resource:\",\n        resource\n      );\n    }\n\n    return false;\n  }\n\n  /**\n   * This flags a resource from removal from an atlas.\n   *\n   * NOTE: This does not immediately clear the resource fromt he atlas, nor does it even guarantee\n   * the resource will be cleared from the atlas for a while. It merely suggests the resource be removed\n   * and makes the SubTexture invalid. It could be a long while before the atlas gets regnerated and repacked\n   * to actually reflect the resource not existing on the atlas.\n   */\n  removeResource(resource: AtlasResource) {\n    if (this.validResources.has(resource)) {\n      this.validResources.delete(resource);\n      this.invalidateResource(resource);\n    } else {\n      console.warn(\n        \"Atlas Error:\",\n        this.id,\n        \"Attempted to remove a resource that does not exist on this atlas.\",\n        \"or the resource was already considered invalidated on this atlas.\",\n        \"Resource:\",\n        resource\n      );\n    }\n  }\n\n  /**\n   * TODO:\n   * This performs the currently best known way to update a texture.\n   *\n   * This is the current best attempt at updating the atlas which is junk as it destroys the old texture\n   * And makes a new one. We REALLY should be just subTexture2D updating the texture, but Three makes that really\n   * Difficult\n   */\n  updateTexture(canvas?: HTMLCanvasElement) {\n    if (this.texture) {\n      const redoneCanvas: HTMLCanvasElement = this.texture.image;\n      this.texture.dispose();\n      this.texture = new Three.Texture(redoneCanvas);\n    } else {\n      this.texture = new Three.Texture(canvas);\n    }\n\n    this.validResources.forEach(resource => {\n      if (resource.texture) {\n        resource.texture.atlasTexture = this.texture;\n      }\n    });\n\n    // Apply any relevant options to the texture desired to be set\n    this.texture.generateMipmaps = true;\n    this.texture.premultiplyAlpha = true;\n    this.textureSettings && Object.assign(this.texture, this.textureSettings);\n    this.texture.needsUpdate = true;\n  }\n\n  /**\n   * This frees up all the resources down to the GPU related to this atlas. It also\n   * loops through every resource and invalidates the texturing information within\n   * them so subsequent accidental renders will appear as a single color rather than\n   * an artifacted element.\n   */\n  destroy() {\n    this.texture.dispose();\n    this.validResources.forEach((_isValid, resource) => {\n      this.invalidateResource(resource);\n    });\n  }\n}\n","export * from \"./image-layer\";\nexport * from \"./image-instance\";\n","import { Instance, InstanceDiff } from \"../../instance-provider\";\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  IBufferLocationGroup\n} from \"./buffer-manager-base\";\nimport { IInstanceDiffManagerTarget } from \"./instance-diff-manager\";\n\n/**\n * Base requirements for handling diffs from a layer.\n */\nexport abstract class BaseDiffProcessor<T extends Instance> {\n  layer: IInstanceDiffManagerTarget<T>;\n  bufferManager: BufferManagerBase<T, IBufferLocation>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>\n  ) {\n    this.layer = layer;\n    this.bufferManager = bufferManager;\n  }\n\n  /** Perform an 'add' operation for the instance's buffer */\n  abstract addInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocation?: IBufferLocation | IBufferLocationGroup<IBufferLocation>\n  ): void;\n  /** Perform a 'change' operation for the instance's buffer */\n  abstract changeInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocation?: IBufferLocation | IBufferLocationGroup<IBufferLocation>\n  ): void;\n  /** Perform a 'remove' operation for the instance's buffer */\n  abstract removeInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocation?: IBufferLocation | IBufferLocationGroup<IBufferLocation>\n  ): void;\n\n  /**\n   * This indicates all changes have been applied, this allows the processor to finalize buffer updates\n   */\n  abstract commit(): void;\n  /**\n   * This will be called with the changes that WILL be processed. This allows this processor to make extra judgement calls on\n   * how it will process the changes and let's it optimize itself before changes are actually processed. An example optimization:\n   *\n   * Buffers have an update range we can adjust so only a piece of the buffer is updated. However, calculating that range causes\n   * overhead to calculate the affected range. So, if we have mass changes happening for major sections of the buffer (number of\n   * changes approaches some large percentage of the instances supported by the buffer), then it would be more efficient just to\n   * update the entire buffer rather than discover the portion needing updating.\n   */\n  abstract incomingChangeList(changes: InstanceDiff<T>[]): void;\n}\n","import * as Three from \"three\";\nimport {\n  IInstancingUniform,\n  IUniform,\n  ShaderInjectionTarget\n} from \"../../types\";\nimport { MetricsProcessing } from \"./metrics-processing\";\n\n/** Converts a size to a shader type */\nconst sizeToType: { [key: number]: string } = {\n  1: \"float\",\n  2: \"vec2\",\n  3: \"vec3\",\n  4: \"vec4\",\n  9: \"mat3\",\n  16: \"mat4\",\n  99: \"sampler2D\"\n};\n\n/**\n * This contains methods centered around processing uniforms and generating the uniform declarations\n * needed to make a shader compatible with a layer.\n */\nexport class UniformProcessing {\n  /** Tracks all of the generated uniforms the system created in order to aid in compatibility */\n  materialUniforms: IInstancingUniform[] = [];\n  /** Provides needed metrics for processing uniform generation */\n  private metricsProcessor: MetricsProcessing;\n\n  constructor(metricsProcessor: MetricsProcessing) {\n    this.metricsProcessor = metricsProcessor;\n  }\n\n  /**\n   * This is the special case where attributes are packed into a uniform buffer instead of into\n   * attributes. This is to maximize compatibility with hard and maximize flexibility in creative approaches\n   * to utilizing shaders that need a lot of input.\n   */\n  generateUniformAttributePacking() {\n    let out = \"\\n// Instance Attributes as a packed Uniform Buffer\";\n\n    // Add the uniform buffer to the shader\n    out += `uniform vec4 ${UniformProcessing.uniformPackingBufferName()}[${\n      this.metricsProcessor.totalInstanceUniformBlocks\n    }];\\n`;\n    // Add the number of blocks an instance utilizes\n    out += `int instanceSize = ${\n      this.metricsProcessor.totalInstanceUniformBlocks\n    };`;\n    // Add the block retrieval method to aid in the Destructuring process\n    out += `vec4 getBlock(int index, int instanceIndex) { return ${UniformProcessing.uniformPackingBufferName()}[(instanceSize * instanceIndex) + index]; }`;\n\n    // Add our extra uniform to the material uniform output so the system can utilize it as needed.\n    this.materialUniforms.push({\n      name: UniformProcessing.uniformPackingBufferName(),\n      type: \"4fv\",\n      value: new Array(this.metricsProcessor.totalInstanceUniformBlocks)\n        .fill(0)\n        .map(() => new Three.Vector4(0, 0, 0, 0))\n    });\n\n    return out;\n  }\n\n  /**\n   * Processes a layer and it's requested uniforms and generates the injections needed to declare the\n   * uniforms.\n   */\n  process(uniforms: IUniform[], injectionType: ShaderInjectionTarget) {\n    let out = \"\";\n    const injection = injectionType || ShaderInjectionTarget.VERTEX;\n\n    uniforms.forEach(uniform => {\n      uniform.shaderInjection =\n        uniform.shaderInjection || ShaderInjectionTarget.VERTEX;\n\n      if (\n        uniform.shaderInjection === injection ||\n        uniform.shaderInjection === ShaderInjectionTarget.ALL\n      ) {\n        out += `uniform ${uniform.qualifier || \"\"}${\n          uniform.qualifier ? \" \" : \"\"\n        }${sizeToType[uniform.size]} ${uniform.name};\\n`;\n      }\n    });\n\n    return out;\n  }\n\n  /**\n   * This is the name of the Uniform Buffer packing strategies name for the Uniform buffer that\n   * all of our attributes get packed into.\n   */\n  static uniformPackingBufferName() {\n    return `instanceData`;\n  }\n}\n","let toEmit: { [key: string]: [Function, number, number] } = {};\n\nexport function emitOnce(\n  id: string,\n  callback: (calledCountBeforeEmit: number, id: string) => void\n) {\n  const emit = toEmit[id] || [callback, -1, 0];\n  toEmit[id] = emit;\n  emit[2]++;\n\n  clearTimeout(emit[1]);\n  emit[1] = window.setTimeout(() => {\n    callback(emit[2], id);\n    delete toEmit[id];\n  }, 1);\n}\n\nexport function flushEmitOnce() {\n  for (const id in toEmit) {\n    const emit = toEmit[id];\n    clearTimeout(emit[1]);\n    emit[0](emit[2], id);\n  }\n\n  toEmit = {};\n}\n","import { Instance } from \"../../instance-provider/instance\";\nimport { IInstanceAttribute } from \"../../types\";\n\nexport function getAttributeShaderName<T extends Instance>(\n  attribute: IInstanceAttribute<T>\n) {\n  if (attribute.easing) {\n    return `_${attribute.name}_end`;\n  } else {\n    return attribute.name;\n  }\n}\n","import * as browser from \"bowser\";\nimport { Vector2 } from \"three\";\nconst debug = require(\"debug\")(\"CommunicationsView:Mouse\");\n\n/** Used to adjust the base whee delta for IE browsers */\nconst IE_ADJUSTMENT = 1 / 30;\n/** Used to adjust the rates for IE 11 */\nconst OLD_IE_ADJUSTMENT = -0.25;\n// This determines how large the delta can grow to in firefox\nconst MAX_FIREFOX_WHEELDELTA = 100;\n/**\n * Create a low pass filter memory bank so we can slow down rapid accelerations and let normal slower accelerations pass\n * Common use case for this is the discrepancy in firefox from mousewheels to trackpad scroll speeds\n */\nconst lowPassY: number[] = [0, 0, 0, 0];\n// These coefficients represent the coefficients of a FIR filter.\n// This FIR filter uses the lowPassY as the memory for the filter and is created for\n// The reasons specified for the lowPassY memory. To edit the coefficients, you simply\n// Ensure the coefficients added together === 1.0. If they do not, you may get an unstable\n// Result that goes to infinity rather quickly. Changing the distribution of these coefficients\n// Alters the rate at which the delta can approach MAX_FIREFOX_WHEELDELTA. Explaining exactly\n// How it affects the rate requires an understanding of FIR filters, so unless this is already\n// Known knowledge, it would be faster to just tweak the coefficients until a desired effect is\n// Attained.\nconst LOW_PASS_U0 = 0.02;\nconst LOW_PASS_U1 = 0.1;\nconst LOW_PASS_U2 = 0.18;\nconst LOW_PASS_U3 = 0.7;\n\nfunction normalizeFirefoxWheel(e: MouseWheelEvent) {\n  const wheel: WheelEvent = e;\n  let deltaX = 0;\n  let deltaY = 0;\n\n  // Reset the filter if the direction changes to prevent lag in directional change\n  if (Math.sign(lowPassY[0]) !== Math.sign(deltaY)) {\n    lowPassY.splice(0, lowPassY.length, 0, 0, 0, 0);\n  }\n\n  deltaX = wheel.deltaX * MAX_FIREFOX_WHEELDELTA;\n\n  // Calculate the next value output from the FIR filter\n  deltaY =\n    wheel.deltaY * MAX_FIREFOX_WHEELDELTA * LOW_PASS_U0 +\n    lowPassY[0] * LOW_PASS_U1 +\n    lowPassY[1] * LOW_PASS_U2 +\n    lowPassY[2] * LOW_PASS_U3;\n  // Store the value of the filter in the FIR memory bank\n  lowPassY.unshift(deltaY);\n  // Keep our FIR memory clean and only the size of the number of coefficients\n  lowPassY.pop();\n\n  return new Vector2(-deltaX, -deltaY);\n}\n\nfunction normalizeChromeWheel(e: MouseWheelEvent) {\n  const wheel: WheelEvent = e;\n\n  return new Vector2(wheel.deltaX, -wheel.deltaY);\n}\n\nfunction normalizeIE11Wheel(e: MouseWheelEvent) {\n  const wheel: WheelEvent = e;\n  let deltaX = wheel.deltaX;\n\n  if (deltaX === undefined) {\n    deltaX =\n      wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n  }\n\n  let deltaY = wheel.deltaY;\n\n  if (deltaY === undefined) {\n    if (wheel.wheelDeltaY !== undefined) {\n      deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n    } else {\n      deltaY = (wheel.wheelDelta || -wheel.detail) * OLD_IE_ADJUSTMENT;\n    }\n  }\n\n  return new Vector2(-deltaX, -deltaY);\n}\n\nfunction normalizeIE12Wheel(e: MouseWheelEvent) {\n  const wheel: WheelEvent = e;\n  let { deltaX, deltaY } = wheel;\n\n  if (deltaX === undefined) {\n    deltaX =\n      wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n  }\n\n  if (deltaY === undefined) {\n    if (wheel.wheelDeltaY !== undefined) {\n      deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n    } else {\n      deltaY = wheel.wheelDelta || -wheel.detail;\n    }\n  }\n\n  const v = new Vector2(deltaX, -deltaY);\n  v.multiplyScalar(0.25);\n\n  return v;\n}\n\n// Determine this browsers version of wheel normalization and apply it\nlet normalizeWheel: (e: MouseWheelEvent) => Vector2;\n\nif (browser.firefox) {\n  debug(\"Using mouse wheel for firefox\");\n  normalizeWheel = normalizeFirefoxWheel;\n} else if (browser.msie && +browser.version >= 11) {\n  debug(\"Using mouse wheel for IE 11\");\n  normalizeWheel = normalizeIE11Wheel;\n} else if (browser.msedge) {\n  debug(\"Using mouse wheel for MS EDGE\");\n  normalizeWheel = normalizeIE12Wheel;\n} else {\n  debug(\"Using mouse wheel for Chrome\");\n  normalizeWheel = normalizeChromeWheel;\n}\n\n/**\n * Analyzes a MouseEvent and calculates the mouse coordinates (relative to the element).\n */\nfunction eventElementPosition(\n  e: any,\n  relative?: HTMLElement\n): { x: number; y: number } {\n  let mouseX: number = 0,\n    mouseY: number = 0,\n    eventX: number = 0,\n    eventY: number = 0,\n    object: any =\n      relative || (e.nativeEvent && e.nativeEvent.target) || e.target;\n\n  // Get mouse position on document crossbrowser\n  if (!e) {\n    e = window.event;\n  }\n\n  if (e.pageX || e.pageY) {\n    mouseX = e.pageX;\n    mouseY = e.pageY;\n  } else if (e.clientX || e.clientY) {\n    let scrollLeft = 0;\n    let scrollTop = 0;\n\n    if (document.documentElement) {\n      scrollLeft = document.documentElement.scrollLeft;\n      scrollTop = document.documentElement.scrollTop;\n    }\n\n    mouseX = e.clientX + document.body.scrollLeft + scrollLeft;\n    mouseY = e.clientY + document.body.scrollTop + scrollTop;\n  }\n\n  // Get parent element position in document\n  if (object.offsetParent) {\n    do {\n      eventX += object.offsetLeft;\n      eventY += object.offsetTop;\n      object = object.offsetParent;\n    } while (object);\n  }\n\n  // Mouse position minus elm position is mouseposition relative to element:\n  return { x: mouseX - eventX, y: mouseY - eventY };\n}\n\nexport { eventElementPosition, normalizeWheel };\n","import { Instance } from \"../../instance-provider/instance\";\nimport { IShaderExtension, IShaderInitialization } from \"../../types\";\nimport {\n  IShaderTemplateRequirements,\n  shaderTemplate\n} from \"../../util/shader-templating\";\nimport { templateVars } from \"../template-vars\";\n\nexport function extendShader<T extends Instance>(\n  shaderIO: IShaderInitialization<T>,\n  vs?: IShaderExtension,\n  fs?: IShaderExtension\n) {\n  const baseVS = shaderIO.vs;\n  const baseFS = shaderIO.fs;\n\n  let extendedVS = { shader: baseVS };\n  let extendedFS = { shader: baseFS };\n\n  // Set the replacements for the extension locations, but also retain the extension modifier to allow for\n  // Further extensions if desired.\n  if (vs) {\n    const options: { [key: string]: string } = {};\n\n    options[templateVars.extendHeader] = vs.header\n      ? `${vs.header}\\n$\\{${templateVars.extendHeader}}`\n      : \"\";\n    options[templateVars.extend] = vs.body\n      ? `${vs.body}\\n$\\{${templateVars.extend}}`\n      : \"\";\n\n    // It is REQUIRED to have both header and body extensions to be a valid extendible shader\n    const required: IShaderTemplateRequirements = {\n      name: \"Extend VS Shader\",\n      values: [templateVars.extendHeader, templateVars.extend]\n    };\n\n    // Generated the extended shader\n    extendedVS = shaderTemplate({\n      options,\n      required,\n      shader: baseVS,\n\n      // We do not want to remove any template macros that do not deal with extension\n      onToken: (token, replace) => {\n        if (\n          token === templateVars.extendHeader ||\n          token === templateVars.extend\n        ) {\n          return replace;\n        }\n\n        return `$\\{${token}}`;\n      }\n    });\n  }\n\n  // Next, extend the fragment shader\n\n  // Set the replacements for the extension locations, but also retain the extension modifier to allow for\n  // Further extensions if desired.\n  if (fs) {\n    const options: { [key: string]: string } = {};\n\n    options[templateVars.extendHeader] = fs.header\n      ? `${fs.header}\\n$\\{${templateVars.extendHeader}}`\n      : \"\";\n    options[templateVars.extend] = fs.body\n      ? `${fs.body}\\n$\\{${templateVars.extend}}`\n      : \"\";\n\n    // It is REQUIRED to have both header and body extensions to be a valid extendible shader\n    const required = {\n      name: \"Extend FS Shader\",\n      values: [templateVars.extendHeader, templateVars.extend]\n    };\n\n    // Generate the extended shader\n    extendedFS = shaderTemplate({\n      options,\n      required,\n      shader: baseFS,\n\n      // We do not want to remove any template macros that do not deal with extension\n      onToken: (token, replace) => {\n        if (\n          token === templateVars.extendHeader ||\n          token === templateVars.extend\n        ) {\n          return replace;\n        }\n\n        return `$\\{${token}}`;\n      }\n    });\n  }\n\n  // Apply the extension to the shader io program\n  return {\n    fs: extendedFS.shader,\n    vs: extendedVS.shader\n  };\n}\n","import { InstanceIOValue } from \"../types\";\nimport { uid } from \"../util/uid\";\nimport { Vec, VecMath } from \"./vector\";\n\nconst { min, max, pow, round, sin, PI } = Math;\nconst GPU_PI = round(PI * 1000) / 1000;\n\nfunction clamp(x: number, minVal: number, maxVal: number) {\n  return min(max(x, minVal), maxVal);\n}\n\nexport enum AutoEasingLoopStyle {\n  /** Time will go from 0 -> 1 then stop at 1 */\n  NONE = 1,\n  /** Time will go from 0 -> infinity */\n  CONTINUOUS = 4,\n  /** Time will continuously go 0 -> 1 then 0 -> 1 then 0 -> 1 etc etc */\n  REPEAT = 2,\n  /** Time will continously go 0 -> 1 then 1 -> 0 then 0 -> 1 then 1 -> 0 etc etc */\n  REFLECT = 3\n}\n\n/**\n * This defines a GPU enabled easing method that will be executed on the GPU to maneuver\n *\n */\nexport interface IAutoEasingMethod<T extends InstanceIOValue> {\n  /** An easing method that should produce IDENTICAL values to the values of the gpu easing method using the exact same parameters */\n  cpu(start: T, end: T, t: number): T;\n  /** This adds a delay to the starting time of an easing change */\n  delay: number;\n  /** This is how long the easing method should last */\n  duration: number;\n  /**\n   * An easing method written in shader language that should produce IDENTICAL\n   * values to the values of the cpu easing method using the exact same parameters.\n   */\n  gpu: string;\n  /**\n   * This defines the looping style of the easing.\n   */\n  loop: AutoEasingLoopStyle;\n  /**\n   * This shall be the name of the easing method as it appears in the spu shader.\n   * BE WARNED: This name is used to dedup the methods created on the shader. So,\n   * if you use the same name as another ease method used on a single layer, you run\n   * the risk of one overriding the other with an undefined chance of who wins.\n   */\n  methodName: string;\n  /**\n   * A unique identifier for the auto easing method.\n   */\n  uid: number;\n\n  /**\n   * This lets you modify some auto easing validation rules.\n   */\n  validation?: {\n    ignoreEndValueCheck?: boolean;\n    ignoreOverTimeCheck?: boolean;\n  };\n}\n\n// GPU easing methods! Written here because it's cleaner to write `` style strings\n// Against the left side of the editor\n\nconst immediateGPU = `\n$\\{easingMethod} {\n  return end;\n}\n`;\n\nconst linearGPU = `\n$\\{easingMethod} {\n  return (end - start) * t + start;\n}\n`;\n\nconst easeInQuadGPU = `\n$\\{easingMethod} {\n  float time = t * t;\n  return (end - start) * time + start;\n}\n`;\n\nconst easeOutQuadGPU = `\n$\\{easingMethod} {\n  float time = t * (2.0 - t);\n  return (end - start) * time + start;\n}\n`;\nconst easeInOutQuadGPU = `\n$\\{easingMethod} {\n  float time = t < 0.5 ? 2.0 * t * t : -1.0 + (4.0 - 2.0 * t) * t;\n  return (end - start) * time + start;\n}\n`;\nconst easeInCubicGPU = `\n$\\{easingMethod} {\n  float time = t * t * t;\n  return (end - start) * time + start;\n}\n`;\nconst easeOutCubicGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float time = t1 * t1 * t1 + 1.0;\n  return (end - start) * time + start;\n}\n`;\nconst easeInOutCubicGPU = `\n$\\{easingMethod} {\n  float time = t < 0.5 ? 4.0 * t * t * t : (t - 1.0) * (2.0 * t - 2.0) * (2.0 * t - 2.0) + 1.0;\n  return (end - start) * time + start;\n}\n`;\nconst easeInQuartGPU = `\n$\\{easingMethod} {\n  float time = t * t * t * t;\n  return (end - start) * time + start;\n}\n`;\nconst easeOutQuartGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float time = 1.0 - t1 * t1 * t1 * t1;\n  return (end - start) * time + start;\n}\n`;\nconst easeInOutQuartGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float time = t < 0.5 ? 8.0 * t * t * t * t : 1.0 - 8.0 * t1 * t1 * t1 * t1;\n  return (end - start) * time + start;\n}\n`;\nconst easeInQuintGPU = `\n$\\{easingMethod} {\n  float time = t * t * t * t * t;\n  return (end - start) * time + start;\n}\n`;\nconst easeOutQuintGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float time = 1.0 + t1 * t1 * t1 * t1 * t1;\n  return (end - start) * time + start;\n}\n`;\nconst easeInOutQuintGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float time = t < 0.5 ? 16.0 * t * t * t * t * t : 1.0 + 16.0 * t1 * t1 * t1 * t1 * t1;\n  return (end - start) * time + start;\n}\n`;\n\nconst easeOutElasticGPU = `\n$\\{easingMethod} {\n  float p = 0.3;\n  float time = pow(2.0, -10.0 * t) * sin((t - p / 4.0) * (2.0 * ${GPU_PI}) / p) + 1.0;\n  return (end - start) * time + start;\n}\n`;\n\nconst easeBackInGPU = `\n$\\{easingMethod} {\n  float time = t * t * t - t * 1.05 * sin(t * ${GPU_PI});\n  return (end - start) * time + start;\n}\n`;\n\nconst easeBackOutGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float a = 1.7;\n  float time = (t1 * t1 * ((a + 1.0) * t1 + a) + 1.0);\n  return (end - start) * time + start;\n}\n`;\n\nconst easeBackInOutGPU = `\n$\\{easingMethod} {\n  float a = 1.4;\n  float a1 = a * 1.525;\n  float t1 = t / 0.5;\n  float t2 = t1 - 2.0;\n  float time =\n    (t1 < 1.0) ? 0.5 * (t1 * t1 * (a1 + 1.0) * t1 - a1) :\n    0.5 * (t2 * t2 * ((a1 + 1.0) * t2 + a1) + 2.0)\n  ;\n\n  return (end - start) * time + start;\n}\n`;\n\nconst continuousSinusoidalGPU = `\n$\\{easingMethod} {\n  $\\{T} direction = end - start;\n  float amplitude = length(direction) * 2.0;\n  return start + direction * sin(t * ${GPU_PI} * 2.0) * amplitude;\n}\n`;\n\n/**\n * Class of base AutoEasingMethods as well as helper constructs for making the methods.\n */\nexport class AutoEasingMethod<T extends InstanceIOValue>\n  implements IAutoEasingMethod<T> {\n  /**\n   * Autoeasing methods for linear easing\n   */\n  static immediate<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (_start: T, end: T, _t: number) => end,\n      delay,\n      duration,\n      gpu: immediateGPU,\n      loop,\n      methodName: \"immediate\"\n    };\n  }\n\n  /**\n   * Autoeasing methods for linear easing\n   */\n  static linear<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        const { add, scale, subtract } = VecMath(start);\n        t = clamp(t, 0, 1);\n        return add(scale(subtract(end, start), t), start);\n      },\n      delay,\n      duration,\n      gpu: linearGPU,\n      loop,\n      methodName: \"linear\"\n    };\n  }\n\n  /**\n   * Auto easing for Accelerating to end\n   */\n  static easeInQuad<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInQuadGPU,\n      loop,\n      methodName: \"easeInQuad\"\n    };\n  }\n\n  /**\n   * Auto easing for decelerating to end\n   */\n  static easeOutQuad<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t * (2 - t);\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeOutQuadGPU,\n      loop,\n      methodName: \"easeOutQuad\"\n    };\n  }\n\n  /**\n   * Auto easing for Accelerate to mid, then decelerate to end\n   */\n  static easeInOutQuad<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInOutQuadGPU,\n      loop,\n      methodName: \"easeInOutQuad\"\n    };\n  }\n\n  /**\n   * Auto easing for Slower acceleration\n   */\n  static easeInCubic<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInCubicGPU,\n      loop,\n      methodName: \"easeInCubic\"\n    };\n  }\n\n  /**\n   * Auto easing for Slower deceleration\n   */\n  static easeOutCubic<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = --t * t * t + 1;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeOutCubicGPU,\n      loop,\n      methodName: \"easeOutCubic\"\n    };\n  }\n\n  /**\n   * Auto easing for Slower acceleration to mid, and slower deceleration to end\n   */\n  static easeInOutCubic<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time =\n          t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInOutCubicGPU,\n      loop,\n      methodName: \"easeInOutCubic\"\n    };\n  }\n\n  /**\n   * Auto easing for even Slower acceleration to end\n   */\n  static easeInQuart<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInQuartGPU,\n      loop,\n      methodName: \"easeInQuart\"\n    };\n  }\n\n  /**\n   * Auto easing for even Slower deceleration to end\n   */\n  static easeOutQuart<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = 1 - --t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeOutQuartGPU,\n      loop,\n      methodName: \"easeOutQuart\"\n    };\n  }\n\n  /**\n   * Auto easing for even Slower acceleration to mid, and even slower deceleration to end\n   */\n  static easeInOutQuart<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInOutQuartGPU,\n      loop,\n      methodName: \"easeInOutQuart\"\n    };\n  }\n\n  /**\n   * Auto easing for super slow accelerating to the end\n   */\n  static easeInQuint<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t * t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInQuintGPU,\n      loop,\n      methodName: \"easeInQuint\"\n    };\n  }\n\n  /**\n   * Auto easing for super slow decelerating to the end\n   */\n  static easeOutQuint<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = 1 + --t * t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeOutQuintGPU,\n      loop,\n      methodName: \"easeOutQuint\"\n    };\n  }\n\n  /**\n   * Auto easing for super slow accelerating to mid and super slow decelerating to the end\n   */\n  static easeInOutQuint<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time =\n          t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInOutQuintGPU,\n      loop,\n      methodName: \"easeInOutQuint\"\n    };\n  }\n\n  /**\n   * Auto easing for elastic effect\n   */\n  static easeOutElastic<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const p = 0.3;\n        const time = pow(2, -10 * t) * sin((t - p / 4) * (2 * PI) / p) + 1;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeOutElasticGPU,\n      loop,\n      methodName: \"easeOutElastic\"\n    };\n  }\n\n  /**\n   * Auto easing for retracting first then shooting to the end\n   */\n  static easeBackIn<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const a = 1.05;\n        const time = t * t * t - t * a * sin(t * PI);\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeBackInGPU,\n      loop,\n      methodName: \"easeBackIn\"\n    };\n  }\n\n  /**\n   * Auto easing for overshooting at the end\n   */\n  static easeBackOut<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const a = 1.7;\n        const t1 = t - 1;\n        const time = t1 * t1 * ((a + 1) * t1 + a) + 1;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeBackOutGPU,\n      loop,\n      methodName: \"easeBackOut\"\n    };\n  }\n\n  /**\n   * Auto easing for overshooting at the end\n   */\n  static easeBackInOut<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const a = 1.7;\n        const a1 = a * 1.525;\n        const t1 = t / 0.5;\n        const t2 = t1 - 2;\n        const time =\n          t1 < 1\n            ? 0.5 * (t1 * t1 * (a1 + 1) * t1 - a1)\n            : 0.5 * (t2 * t2 * ((a1 + 1) * t2 + a1) + 2);\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeBackInOutGPU,\n      loop,\n      methodName: \"easeBackInOut\"\n    };\n  }\n\n  /**\n   * This is an easing method that performs a sinusoidal wave where the amplitude is\n   * (start - end) * 2 and the wave starts at the start value.\n   *\n   * This is intended to work best with the CONTINUOUS loop style.\n   */\n  static continuousSinusoidal<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.CONTINUOUS\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        const { add, length, scale, subtract } = VecMath(start);\n        t = clamp(t, 0, 1);\n        const direction = subtract(end, start);\n        const amplitude = length(direction) * 2.0;\n        return add(start, scale(direction, sin(t * PI * 2) * amplitude));\n      },\n      delay,\n      duration,\n      gpu: continuousSinusoidalGPU,\n      loop,\n      methodName: \"repeatingSinusoidal\",\n\n      // Since this is sinusoidial and operates off of a continuous time structure\n      validation: {\n        // When time = 1 our value will = start and NOT end\n        ignoreEndValueCheck: true,\n        // When the time is > 1 our value will not clamp to the value at 1.\n        ignoreOverTimeCheck: true\n      }\n    };\n  }\n\n  /** A uid for the easing method */\n  uid = uid();\n  /** The easing method for the cpu */\n  cpu: IAutoEasingMethod<T>[\"cpu\"];\n  /** Time before a delay  */\n  delay: number = 0;\n  /** The time in ms is takes to complete the animation */\n  duration: number = 500;\n  /** The easing method on the GPU */\n  gpu: IAutoEasingMethod<T>[\"gpu\"];\n  /** The looping style of the animation */\n  loop = AutoEasingLoopStyle.NONE;\n  /** Method name of the ease function on the gpu */\n  methodName: string;\n\n  constructor(\n    cpu: IAutoEasingMethod<T>[\"cpu\"],\n    gpu: IAutoEasingMethod<T>[\"gpu\"],\n    duration?: number,\n    method?: string\n  ) {\n    this.cpu = cpu;\n    this.gpu = gpu;\n    this.duration = duration || 500;\n    this.methodName = method || \"easingMethod\";\n  }\n}\n","import * as Three from \"three\";\nimport { IMaterialOptions } from \"../types\";\n\nexport class CommonMaterialOptions {\n  static transparentShape: IMaterialOptions = {\n    premultipliedAlpha: false,\n    transparent: true\n  };\n\n  static transparentImage: IMaterialOptions = {\n    blending: Three.CustomBlending,\n    blendSrc: Three.OneFactor,\n    premultipliedAlpha: true,\n    transparent: true\n  };\n}\n","import { IEasingProps } from \"../types\";\nimport { Vec } from \"./vector\";\n\n/**\n * This object represents the data associated with easing. It provides the\n * information needed to make an easing equation execute to completion. It also\n * contains a few methods to aid in properly adjusting the easing values.\n */\nexport class EasingProps implements IEasingProps {\n  delay: number = 0;\n  duration: number;\n  end: Vec;\n  isManualStart = false;\n  isTimeSet = false;\n  start: Vec;\n  startTime: number;\n\n  constructor(options: IEasingProps) {\n    Object.assign(this, options);\n  }\n\n  /**\n   * If you manually set values for the easing properties, then you use this to return\n   * the easing object back to an automated state which is where the start value is\n   * the calculated current position of the output and the delay and duration is determined\n   * by the easing set to the layer's IAutomatedEasingMethod value set to the layer.\n   */\n  setAutomatic() {\n    this.isManualStart = false;\n    this.isTimeSet = false;\n  }\n\n  /**\n   * This controls the start value of the easing. This should be used to force a starting\n   * value of the animation.\n   *\n   * Use setAutomatic() to return to default easing behavior.\n   */\n  setStart(start?: Vec) {\n    if (start) {\n      if (this.start.length !== start.length) {\n        console.warn(\n          \"A manual easing adjustment provided an incompatible value for the easing type.\"\n        );\n      } else {\n        this.start = start;\n        this.isManualStart = true;\n      }\n    }\n  }\n\n  /**\n   * This controls of the timing of the easing equation. This should be used to adjust\n   * when a value is to be adjusted\n   *\n   * Use setAutomatic() to return to default easing behavior.\n   */\n  setTiming(delay?: number, duration?: number) {\n    this.delay = delay === undefined ? this.delay : delay;\n    this.duration = duration === undefined ? this.duration : duration;\n    this.isTimeSet = true;\n  }\n}\n","module.exports = \"lowp vec4 setColor(vec4 color) {\\n  gl_FragColor = color;\\n  return gl_FragColor;\\n}\\n\"","module.exports = \"\\n\"","module.exports = \"// This contains the method required to be used on a fragment shader when a layer desires to use\\n// PickType.SINGLE (color picking).\\nvarying vec4 _picking_color_pass_;\\n\\nlowp vec4 setColor(vec4 color) {\\n  gl_FragColor = mix(color, _picking_color_pass_, pickingActive);\\n\\n  if (color.a == 0.0) {\\n    discard;\\n  }\\n\\n  return gl_FragColor;\\n}\\n\"","module.exports = \"// This is the varying auto generated for the fragment shader that is needed in the vertex shader to pass the\\n// color for the instance through to the fragment shader\\nvarying vec4 _picking_color_pass_;\\n\"","module.exports = \"// These are projection methods utilizing the simpler camera breakdown approach\\n\\nvec3 cameraSpace(vec3 world) {\\n  return (world + cameraOffset) * cameraScale;\\n}\\n\\nvec3 cameraSpaceSize(vec3 worldSize) {\\n  return worldSize * cameraScale;\\n}\\n\\nvec4 clipSpace(vec3 world) {\\n  return vec4(((projection * modelView) * vec4(cameraSpace(world), 1.0)).xyz, 1.0);\\n}\\n\\nvec4 clipSpaceSize(vec3 worldSize) {\\n  return vec4(((projection * modelView) * vec4(cameraSpaceSize(worldSize), 0.0)).xyz, 1.0);\\n}\\n\"","module.exports = \"void main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\n}\"","module.exports = \"void main() {\\n  gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n}\"","export * from \"./shader-module\";\nexport * from \"./shader-module-unit\";\n","import { ShaderInjectionTarget } from \"../../types\";\nimport { ShaderModule } from \"../processing\";\n\nShaderModule.register([\n  {\n    moduleId: \"no-op\",\n    content: require(\"./no-op.vs\"),\n    compatibility: ShaderInjectionTarget.VERTEX\n  },\n  {\n    moduleId: \"no-op\",\n    content: require(\"./no-op.fs\"),\n    compatibility: ShaderInjectionTarget.FRAGMENT\n  },\n  {\n    moduleId: \"projection\",\n    content: require(\"./projection.vs\"),\n    compatibility: ShaderInjectionTarget.ALL\n  },\n  {\n    moduleId: \"picking\",\n    content: require(\"./picking.vs\"),\n    compatibility: ShaderInjectionTarget.VERTEX\n  },\n  {\n    moduleId: \"picking\",\n    content: require(\"./picking.fs\"),\n    compatibility: ShaderInjectionTarget.FRAGMENT\n  },\n  {\n    moduleId: \"no-picking\",\n    content: require(\"./no-picking.vs\"),\n    compatibility: ShaderInjectionTarget.VERTEX\n  },\n  {\n    moduleId: \"no-picking\",\n    content: require(\"./no-picking.fs\"),\n    compatibility: ShaderInjectionTarget.FRAGMENT\n  }\n]);\n","import \"./base-modules\";\nexport * from \"./util/extend-shader\";\n","import * as Three from \"three\";\nimport { Instance } from \"../../instance-provider/instance\";\nimport { InstanceIOValue } from \"../../types\";\nimport { ILayerProps, Layer } from \"../layer\";\nimport { AtlasManager, AtlasResource } from \"./atlas-manager\";\nimport { LabelAtlasResource } from \"./label-atlas-resource\";\nimport { SubTexture } from \"./sub-texture\";\n\nexport interface IAtlasResourceManagerOptions {\n  /** This is the atlas manager that handles operations with our atlas' */\n  atlasManager: AtlasManager;\n}\n\nfunction toInstanceIOValue(texture?: SubTexture): InstanceIOValue {\n  // If the texture is not defined we just output an empty reference\n  if (!texture) {\n    return [0, 0, 0, 0];\n  }\n\n  // Otherwise, we return the atlas information of the texture\n  return [\n    texture.atlasTL.x,\n    texture.atlasTL.y,\n    texture.atlasBR.x,\n    texture.atlasBR.y\n  ];\n}\n\n/**\n * This class is responsible for tracking resources requested to be placed on an Atlas.\n * This makes sure the resource is uploaded and then properly cached so similar requests\n * return already existing resources. This also manages instances waiting for the resource\n * to be made available.\n */\nexport class AtlasResourceManager {\n  /** This is the atlas manager that handles operations with our atlas' */\n  atlasManager: AtlasManager;\n  /** This is the atlas currently targetted by requests */\n  targetAtlas: string = \"\";\n  /** This stores all of the requests awaiting dequeueing */\n  private requestQueue = new Map<string, AtlasResource[]>();\n  /**\n   * This tracks if a resource is already in the request queue. This also stores ALL instances awaiting the resource.\n   */\n  private requestLookup = new Map<\n    string,\n    Map<AtlasResource, [Layer<any, any>, Instance][]>\n  >();\n\n  constructor(options: IAtlasResourceManagerOptions) {\n    this.atlasManager = options.atlasManager;\n  }\n\n  /**\n   * This dequeues all instance requests for a resource and processes the request which will\n   * inevitably make the instance active\n   */\n  async dequeueRequests() {\n    // This flag will be modified to reflect if a dequeue operation has occurred\n    let didDequeue = false;\n\n    for (const [targetAtlas, resources] of Array.from(\n      this.requestQueue.entries()\n    )) {\n      if (resources.length > 0) {\n        // We did dequeue\n        didDequeue = true;\n        // Pull out all of the requests into a new array and empty the existing queue to allow the queue to register\n        // New requests while this dequeue is being processed\n        const requests = resources.slice(0);\n        // Empty the queue to begin taking in new requests as needed\n        resources.length = 0;\n\n        // Tell the atlas manager to update with all of the requested resources\n        await this.atlasManager.updateAtlas(targetAtlas, requests);\n        // Get the requests for the given atlas\n        const atlasRequests = this.requestLookup.get(targetAtlas);\n\n        if (atlasRequests) {\n          // Once the manager has been updated, we can now flag all of the instances waiting for the resources\n          // As active, which should thus trigger an update to the layers to perform a diff for each instance\n          requests.forEach(resource => {\n            const request = atlasRequests.get(resource);\n            atlasRequests.delete(resource);\n\n            if (request) {\n              for (let i = 0, iMax = request.length; i < iMax; ++i) {\n                const [layer, instance] = request[i];\n                // If the instance is still associated with buffer locations, then the instance can be activated. Having\n                // A buffer location is indicative the instance has not been deleted.\n                if (layer.bufferManager.getBufferLocations(instance)) {\n                  // Make sure the instance is active\n                  instance.active = true;\n                }\n              }\n\n              // Do a delay to next frame before we do our resource trigger so we can see any lingering updates get\n              // applied to the instance's rendering\n              requestAnimationFrame(() => {\n                for (let i = 0, iMax = request.length; i < iMax; ++i) {\n                  const instance = request[i][1];\n                  instance.resourceTrigger();\n                }\n              });\n            }\n          });\n        }\n      }\n    }\n\n    return didDequeue;\n  }\n\n  /**\n   * Free ALL resources managed under this resource manager\n   */\n  destroy() {\n    this.atlasManager.destroy();\n  }\n\n  /**\n   * This retrieves the actual atlas texture that should be applied to a uniform's\n   * value.\n   */\n  getAtlasTexture(key: string): Three.Texture | null {\n    const atlas = this.atlasManager.getAtlasTexture(key);\n\n    if (atlas) {\n      return atlas.texture;\n    }\n\n    return null;\n  }\n\n  /**\n   * This is a request for atlas texture resources. It will produce either the coordinates needed to\n   * make valid texture lookups, or it will trigger a loading of resources to an atlas and cause an\n   * automated deactivation and reactivation of the instance.\n   */\n  request<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U>,\n    instance: Instance,\n    resource: AtlasResource\n  ): InstanceIOValue {\n    const texture: SubTexture = resource.texture;\n\n    // If the texture is ready and available, then we simply return the IO values\n    if (texture) {\n      return toInstanceIOValue(texture);\n    }\n\n    if (resource instanceof LabelAtlasResource) {\n      if (!resource.label.text) {\n        return toInstanceIOValue(texture);\n      }\n    }\n\n    // If a request is already made, then we must save the instance making the request for deactivation and\n    // Reactivation but without any additional atlas loading\n    let atlasRequests = this.requestLookup.get(this.targetAtlas);\n\n    if (atlasRequests) {\n      const existingRequests = atlasRequests.get(resource);\n\n      if (existingRequests) {\n        existingRequests.push([layer, instance]);\n        instance.active = false;\n\n        return toInstanceIOValue(texture);\n      }\n    } else {\n      atlasRequests = new Map();\n      this.requestLookup.set(this.targetAtlas, atlasRequests);\n    }\n\n    // If the texture is not available, then we must load the resource, deactivate the instance\n    // And wait for the resource to become available. Once the resource is available, the system\n    // Must activate the instance to render the resource.\n    instance.active = false;\n    let requests = this.requestQueue.get(this.targetAtlas);\n\n    if (!requests) {\n      requests = [];\n      this.requestQueue.set(this.targetAtlas, requests);\n    }\n\n    requests.push(resource);\n    atlasRequests.set(resource, [[layer, instance]]);\n\n    // This returns essentially returns blank values for the resource lookup\n    return toInstanceIOValue(texture);\n  }\n\n  /**\n   * This is used by the system to target the correct atlas for subsequent requests to a resource.\n   */\n  setTargetAtlas(target: string) {\n    this.targetAtlas = target;\n  }\n}\n","import { Bounds } from \"../primitives/bounds\";\nimport { IPoint } from \"../primitives/point\";\n\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nconst maxPopulation: number = 5;\nconst maxDepth: number = 10;\n\nexport interface IQuadItem {\n  area: number;\n  bottom: number;\n  height: number;\n  left: number;\n  mid: IPoint;\n  right: number;\n  top: number;\n  width: number;\n  x: number;\n  y: number;\n\n  containsPoint(point: IPoint): boolean;\n  encapsulate(item: IQuadItem): boolean;\n  fits(item: IQuadItem): 0 | 1 | 2;\n  hitBounds(item: IQuadItem): boolean;\n  isInside(item: IQuadItem): boolean;\n}\n\n/**\n * This filters a quad tree query by type\n *\n * @export\n * @template T\n */\nexport function filterQuery<T extends IQuadItem>(\n  type: Function[],\n  queryValues: IQuadItem[]\n): T[] {\n  const filtered: T[] = [];\n\n  queryValues.forEach((obj: IQuadItem) => {\n    if (type.find(t => obj instanceof t)) {\n      filtered.push(obj as T);\n    }\n  });\n\n  return filtered;\n}\n\n/**\n * Allows typing of a callback argument\n */\nexport interface IVisitFunction<T extends IQuadItem> {\n  /**\n   * A callback to use during add or query\n   *\n   * Called do provide aggregation or filtering like Array.reduce or\n   * Array.filter, but in a QuadTree instead.\n   *\n   * @param node  The node to effect the function upon\n   * @param child The child to add to the node\n   */\n  (node: Node<T>, child?: IQuadItem): void;\n}\n\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n *\n * @class Quadrants\n */\nexport class Quadrants<T extends IQuadItem> {\n  TL: Node<T>;\n  TR: Node<T>;\n  BL: Node<T>;\n  BR: Node<T>;\n\n  /**\n   * Ensures all memory is released for all nodes and all references are removed\n   * to potentially high memory consumption items\n   *\n   * @memberOf Quadrants\n   */\n  destroy() {\n    this.TL.destroy();\n    this.TR.destroy();\n    this.BL.destroy();\n    this.BR.destroy();\n    delete this.TL;\n    delete this.TR;\n    delete this.BL;\n    delete this.BR;\n  }\n\n  /**\n   * Creates an instance of Quadrants.\n   *\n   * @param bounds The bounds this will create quandrants for\n   * @param depth  The child depth of this element\n   *\n   * @memberOf Quadrants\n   */\n  constructor(bounds: IQuadItem, depth: number) {\n    const mid = bounds.mid;\n    this.TL = new Node<T>(bounds.x, mid.x, bounds.y, mid.y, depth);\n    this.TR = new Node<T>(mid.x, bounds.right, bounds.y, mid.y, depth);\n    this.BL = new Node<T>(bounds.x, mid.x, mid.y, bounds.bottom, depth);\n    this.BR = new Node<T>(mid.x, bounds.right, mid.y, bounds.bottom, depth);\n  }\n}\n\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n *\n * @export\n * @class Node\n */\nexport class Node<T extends IQuadItem> {\n  bounds: Bounds;\n  children: T[] = [];\n  depth: number = 0;\n  nodes: Quadrants<T>;\n\n  /**\n   * Destroys this node and ensures all child nodes are destroyed as well.\n   *\n   * @memberOf Node\n   */\n  destroy() {\n    delete this.children;\n    delete this.bounds;\n\n    if (this.nodes) {\n      this.nodes.destroy();\n      delete this.nodes;\n    }\n  }\n\n  /**\n   * Creates an instance of Node.\n   *\n   * @param l     The bounding left wall of the space this node covers\n   * @param r     The bounding right wall of the space this node covers\n   * @param t     The bounding top wall of the space this node covers\n   * @param b     The bounding bottom wall of the space this node covers\n   * @param depth The depth within the quad tree this node resides\n   *\n   * @memberOf Node\n   */\n  constructor(\n    left: number,\n    right: number,\n    top: number,\n    bottom: number,\n    depth?: number\n  ) {\n    // If params insertted\n    if (arguments.length >= 4) {\n      this.bounds = new Bounds({\n        height: top - bottom,\n        width: right - left,\n        x: left,\n        y: top\n      });\n    } else {\n      // Otherwise, make tiny start area\n      this.bounds = new Bounds({\n        height: 1,\n        width: 1,\n        x: 0,\n        y: 0\n      });\n    }\n\n    // Ensure the depth is set\n    this.depth = depth || 0;\n  }\n\n  /**\n   * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n   * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n   * this quad tree spans (and this is the root node), the quad tree will expand to include\n   * the new child.\n   *\n   * @param child The Bounds type object to inject\n   * @param props Properties that can be retrieved with the child object if applicable\n   *\n   * @returns True if the insertion was successful\n   *\n   * @memberOf Node\n   */\n  add(child: T, props: any): boolean {\n    // This is the entry function for adding children, so we must first expand our top node\n    // To cover the area that the child is located.\n    // If we're in bounds, then let's just add the child\n    if (child.isInside(this.bounds)) {\n      return this.doAdd(child);\n    } else {\n      // Otherwise, we need to expand first\n      this.cover(child);\n      return this.add(child, props);\n    }\n  }\n\n  /**\n   * Adds a list of new children to this quad tree. It performs the same operations as\n   * addChild for each child in the list, however, it more efficiently recalculates the\n   * bounds necessary to cover the area the children cover.\n   *\n   * @param children      List of Bounds objects to inject\n   * @param childrenProps List of props to associate with each element\n   *\n   * @memberOf Node\n   */\n  addAll(children: T[], childrenProps?: any[]) {\n    // Ensure the properties are at least defined\n    childrenProps = childrenProps || [];\n\n    // Make sure we cover the entire area of all the children.\n    // We can speed this up a lot if we first calculate the total bounds the new children covers\n    let minX = Number.MAX_VALUE;\n    let minY = Number.MAX_VALUE;\n    let maxX = -Number.MAX_VALUE;\n    let maxY = -Number.MAX_VALUE;\n\n    // Get the dimensions of the new bounds\n    children.forEach(child => {\n      if (child.x < minX) {\n        minX = child.x;\n      }\n      if (child.right > maxX) {\n        maxX = child.right;\n      }\n      if (child.bottom > maxY) {\n        maxY = child.bottom;\n      }\n      if (child.y < minY) {\n        minY = child.y;\n      }\n    });\n\n    // Make sure our bounds includes the specified bounds\n    this.cover(\n      new Bounds({\n        height: maxY - minY,\n        width: maxX - minX,\n        x: minX,\n        y: minY\n      })\n    );\n\n    // Add all of the children into the tree\n    children.forEach(child => this.doAdd(child));\n  }\n\n  /**\n   * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n   * This will cause all children to be re-injected into the tree.\n   *\n   * @param bounds The bounds to include in the tree's coverage\n   *\n   * @memberOf Node\n   */\n  cover(bounds: IQuadItem) {\n    // If we are already covering the area: abort\n    if (bounds.isInside(this.bounds)) {\n      return;\n    }\n\n    // Make our bounds cover the new area\n    this.bounds.encapsulate(bounds);\n    this.bounds.x -= 1;\n    this.bounds.y -= 1;\n    this.bounds.width += 2;\n    this.bounds.height += 4;\n    // Get all of the children underneath this node\n    const allChildren = this.gatherChildren([]);\n\n    // Destroy the split nodes\n    if (this.nodes) {\n      // Completely...destroy...\n      this.nodes.destroy();\n      delete this.nodes;\n    }\n\n    // Reinsert all children with the new dimensions in place\n    allChildren.forEach(child => this.doAdd(child));\n  }\n\n  /**\n   * When adding children, this performs the actual action of injecting the child into the tree\n   * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n   *\n   * @param child The Bounds item to inject into the tree\n   * @param props The props to remain associated with the child\n   *\n   * @returns True if the injection was successful\n   *\n   * @memberOf Node\n   */\n  doAdd(child: T): boolean {\n    // If nodes are present, then we have already exceeded the population of this node\n    if (this.nodes) {\n      if (child.isInside(this.nodes.TL.bounds)) {\n        return this.nodes.TL.doAdd(child);\n      }\n\n      if (child.isInside(this.nodes.TR.bounds)) {\n        return this.nodes.TR.doAdd(child);\n      }\n\n      if (child.isInside(this.nodes.BL.bounds)) {\n        return this.nodes.BL.doAdd(child);\n      }\n\n      if (child.isInside(this.nodes.BR.bounds)) {\n        return this.nodes.BR.doAdd(child);\n      }\n\n      // Otherwise, this is a child overlapping this border\n      this.children.push(child);\n\n      return true;\n    } else if (child.isInside(this.bounds)) {\n      // Otherwise, we have not had a split due to population limits being exceeded\n      this.children.push(child);\n\n      // If we exceeded our population for this quadrant, it is time to split up\n      if (this.children.length > maxPopulation && this.depth < maxDepth) {\n        this.split();\n      }\n\n      return true;\n    }\n\n    // This is when there is something wrong with the insertted child. The bounds\n    // For the quad should have grown without issue, but in this case the bounds\n    // Could not grow to accomodate the child.\n    if (isNaN(child.width + child.height + child.x + child.y)) {\n      console.error(\n        \"Child did not fit into bounds because a dimension is NaN\",\n        child\n      );\n    } else if (child.area === 0) {\n      console.error(\n        \"Child did not fit into bounds because the area is zero\",\n        child\n      );\n    }\n\n    // Don't insert the child and continue\n    return true;\n  }\n\n  /**\n   * Collects all children of all the current and sub nodes into a single list.\n   *\n   * @param list The list we must aggregate children into\n   *\n   * @return The list specified as the list parameter\n   */\n  gatherChildren(list: T[]): T[] {\n    list = list.concat(this.children);\n\n    if (this.nodes) {\n      this.nodes.TL.gatherChildren(list);\n      this.nodes.TR.gatherChildren(list);\n      this.nodes.BL.gatherChildren(list);\n      this.nodes.BR.gatherChildren(list);\n    }\n\n    return list;\n  }\n\n  /**\n   * Entry query for determining query type based on input object\n   *\n   * @param bounds Can be a Bounds or a Point object\n   * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n   *               information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return An array of children that intersects with the query\n   */\n  query(bounds: IQuadItem | IPoint, visit?: IVisitFunction<T>): T[] {\n    // Query a rectangle\n    if (bounds instanceof Bounds) {\n      if (bounds.hitBounds(this.bounds)) {\n        return this.queryBounds(bounds, [], visit);\n      }\n\n      // Return an empty array when nothing is collided with\n      return [];\n    }\n\n    // Query a point\n    if (this.bounds.containsPoint(bounds)) {\n      return this.queryPoint(bounds, [], visit);\n    }\n\n    // Return an empty array when nothing is collided with\n    return [];\n  }\n\n  /**\n   * Queries children for intersection with a bounds object\n   *\n   * @param b     The Bounds to test children against\n   * @param list  The list of children to aggregate into the query\n   * @param visit A callback function that will receive the Node as it is analyzed. This gives\n   *              information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return     Returns the exact same list that was input as the list param\n   */\n  queryBounds(b: IQuadItem, list: T[], visit?: IVisitFunction<T>): T[] {\n    this.children.forEach(c => {\n      if (c.hitBounds(b)) {\n        list.push(c);\n      }\n    });\n\n    if (visit) {\n      visit(this);\n    }\n\n    if (this.nodes) {\n      if (b.hitBounds(this.nodes.TL.bounds)) {\n        this.nodes.TL.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.TR.bounds)) {\n        this.nodes.TR.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.BL.bounds)) {\n        this.nodes.BL.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.BR.bounds)) {\n        this.nodes.BR.queryBounds(b, list, visit);\n      }\n    }\n\n    return list;\n  }\n\n  /**\n   * Queries children for intersection with a point\n   *\n   * @param p     The Point to test children against\n   * @param list  The list of children to aggregate into the query\n   * @param visit A callback function that will receive the Node as it is analyzed. This gives\n   *              information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return      Returns the exact same list that was input as the list param\n   */\n  queryPoint(p: any, list: T[], visit?: IVisitFunction<T>): T[] {\n    this.children.forEach(c => {\n      if (c.containsPoint(p)) {\n        list.push(c);\n      }\n    });\n\n    if (visit) {\n      visit(this);\n    }\n\n    if (this.nodes) {\n      if (this.nodes.TL.bounds.containsPoint(p)) {\n        this.nodes.TL.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.TR.bounds.containsPoint(p)) {\n        this.nodes.TR.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.BL.bounds.containsPoint(p)) {\n        this.nodes.BL.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.BR.bounds.containsPoint(p)) {\n        this.nodes.BR.queryPoint(p, list, visit);\n      }\n    }\n\n    return list;\n  }\n\n  /**\n   * Creates four sub quadrants for this node.\n   */\n  split() {\n    // Gather all items to be handed down\n    const allChildren = this.gatherChildren([]);\n    // Gather all props for the children to be handed down as well\n    this.nodes = new Quadrants<T>(this.bounds, this.depth + 1);\n\n    this.children = [];\n\n    while (allChildren.length > 0) {\n      const child = allChildren.pop();\n      if (child) this.doAdd(child);\n    }\n  }\n\n  /**\n   * Traverses the quad tree returning every quadrant encountered\n   *\n   * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n   */\n  visit(cb: IVisitFunction<T>): void {\n    const finished = Boolean(cb(this));\n\n    if (this.nodes && !finished) {\n      this.nodes.TL.visit(cb);\n      this.nodes.TR.visit(cb);\n      this.nodes.BL.visit(cb);\n      this.nodes.BR.visit(cb);\n    }\n  }\n}\n\nexport class QuadTree<T extends IQuadItem> extends Node<T> {}\n","/**\n * The purpose of this file and processes is to take a layers attributes and\n * instance attributes and optimally pack them into blocks. As it should be known\n * an attribute and a uniform is limited by the hardware in 'blocks'. Each block\n * for webgl 1.0 is 4 floats. If you use a single float and not the rest, you have\n * used an entire block.\n *\n * Thus, we pack down the attributes into appropriate block indices and slots.\n */\n\nimport { IInstanceAttribute, InstanceAttributeSize } from \"../../types\";\nimport { Instance } from \"../../util\";\n\n/**\n * A quick representation of an available block with a convenience method to easily apply\n * metrics to an attribute if it fits.\n */\nclass Block<T extends Instance> {\n  index: number = 0;\n  available: number = 4;\n\n  constructor(blockIndex: number) {\n    this.index = blockIndex;\n  }\n\n  setAttribute(attr: IInstanceAttribute<T>) {\n    if ((attr.size || 0) <= this.available) {\n      attr.block = this.index;\n      attr.blockIndex = 4 - this.available;\n      this.available -= attr.size || 0;\n\n      return true;\n    }\n\n    return false;\n  }\n}\n\n/**\n * This loops through all attributes and ensures each attribute is applied\n */\nfunction ensureSizes<T extends Instance>(attributes: IInstanceAttribute<T>[]) {\n  attributes.forEach(attr => {\n    if (attr.atlas) {\n      attr.size = InstanceAttributeSize.FOUR;\n    }\n\n    // If the size of the attribute is not determiend at this point, we do our best\n    // to find it by whatever means possible\n    if (!attr.size) {\n      try {\n        // We inject a very phoney instance, we don't need accurate data, we will be happy if we get\n        // an array of undefineds which should be in line with the size of the attribute.\n        const check = attr.update(new Instance({}) as T);\n\n        // We see if the output is sane\n        if (check.length > 0 && check.length <= InstanceAttributeSize.FOUR) {\n          attr.size = check.length;\n        }\n      } catch (err) {\n        console.warn(\n          \"The system could not determine the size of the provided attribute. Please provide the size of the attribute:\",\n          attr\n        );\n      }\n    }\n  });\n}\n\n/**\n * This is the packing method that calculates the block and block index best suited for an attribute\n * so a layer developer does not have to worry about it.\n */\nexport function packAttributes<T extends Instance>(\n  attributes: IInstanceAttribute<T>[]\n) {\n  // First make sure each attribute has a size\n  ensureSizes(attributes);\n  // Keep a list of the blocks we have decided needs to be in use\n  const blocks = [new Block(0)];\n\n  // Loop through all attributes and pack em' in\n  attributes.forEach(attr => {\n    // Look for a block that can fit our attribute\n    const block = blocks.find(block => {\n      if (block.setAttribute(attr)) {\n        return Boolean(block);\n      }\n\n      return false;\n    });\n\n    // If our attribute did not fit into any of the existing blocks, then we must create a new block\n    // to stuff our attribute into.\n    if (!block) {\n      const newBlock = new Block(blocks.length);\n      blocks.push(newBlock);\n\n      if (!newBlock.setAttribute(attr)) {\n        console.warn(\n          \"There was a problem packing an attribute into a block. No block would accommodate it:\",\n          attr\n        );\n      }\n    }\n  });\n}\n","import { Instance } from \"../../instance-provider/instance\";\nimport {\n  IEasingInstanceAttribute,\n  IEasingProps,\n  IInstanceAttribute,\n  InstanceAttributeSize\n} from \"../../types\";\nimport { AutoEasingLoopStyle } from \"../../util\";\nimport { EasingProps } from \"../../util/easing-props\";\nimport { ILayerProps, Layer } from \"../layer\";\n\nconst { abs } = Math;\n\nconst BLANK_EASING_PROPS: IEasingProps = {\n  duration: 0,\n  start: [0],\n  end: [0],\n  startTime: 0\n};\n\n/**\n * Tests an attribute to see if it is an easing attribute\n */\nfunction isEasingAttribute<T extends Instance>(\n  attr: any\n): attr is IEasingInstanceAttribute<T> {\n  return Boolean(attr) && attr.easing && attr.size !== undefined;\n}\n\n/**\n * This modifies the instance attributes in a way that produces enough attributes to handle the easing equations\n * being performed on the gpu.\n */\nexport function generateEasingAttributes<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(layer: Layer<T, U>, instanceAttributes: IInstanceAttribute<T>[]) {\n  const usedInstanceAttributes = new Set<number>();\n  const easingAttributes: IEasingInstanceAttribute<T>[] = [];\n\n  // We gather all of the easing attributes first so we can modify the attribute array\n  // On next pass\n  for (const attribute of instanceAttributes) {\n    if (isEasingAttribute(attribute)) {\n      easingAttributes.push(attribute);\n    }\n  }\n\n  const easingIds: { [key: string]: number } = {};\n  layer.easingId = easingIds;\n\n  // Now loop through each easing attribute and generate attributes needed for the easing method\n  for (const attribute of easingAttributes) {\n    const { cpu: easing, loop, uid: providedUID } = attribute.easing;\n    const { name, size, update } = attribute;\n    const easingUID = providedUID;\n\n    // Make our easing ID lookup so instances can access their easing information for higher level\n    // animation control.\n    easingIds[attribute.name] = easingUID;\n\n    // Ensure the AutoEasing method is unique\n    if (usedInstanceAttributes.has(easingUID)) {\n      console.error(\n        \"Undefined behavior occurs if you reuse an IAutoEasingMethod. Please ensure you are using uid() from the util to give the IAutoEasingMethod its uid, or just use the default provided methods\"\n      );\n    }\n\n    // Flag the uid of the easing method as used\n    usedInstanceAttributes.add(easingUID);\n    // We keep this in a scope above the update as we utilize the fact that the attributes will update\n    // In the order they are declared for a single instance. The attributes will all share this information.\n    const attributeDataShare: { values: IEasingProps } = {\n      values: BLANK_EASING_PROPS\n    };\n\n    // Hijack the update from the attribute to a new update method which will\n    // Be able to interact with the values for the easing methodology\n    attribute.update = instance => {\n      // We retrieve properties that we want to be dynamic from the easing equation\n      const {\n        delay: attributeDelay,\n        duration: attributeDuration\n      } = attribute.easing;\n\n      // First get the value that is to be our new destination\n      const end = update(instance);\n      const currentTime = layer.surface.frameMetrics.currentTime;\n\n      // Get the easing values specific to an instance.\n      let values = instance.easing.get(easingUID);\n\n      // If the easing values do not exist yet, make them now\n      if (!values) {\n        values = new EasingProps({\n          duration: attributeDuration,\n          end,\n          start: end,\n          startTime: currentTime\n        });\n\n        // Make sure the instance contains the current easing values\n        instance.easing.set(easingUID, values);\n      }\n\n      // Assign the established values\n      const easingValues = values;\n      let duration = attributeDuration;\n      let delay = attributeDelay;\n\n      if (easingValues.isTimeSet) {\n        duration = easingValues.duration || attributeDuration;\n        delay = easingValues.delay || 0;\n      }\n\n      if (!easingValues.isManualStart) {\n        // Previous position time value\n        let timeValue = 1;\n\n        switch (loop) {\n          // Continuous means we start at 0 and let the time go to infinity\n          case AutoEasingLoopStyle.CONTINUOUS:\n            timeValue = (currentTime - easingValues.startTime) / duration;\n            break;\n\n          // Repeat means going from 0 to 1 then 0 to 1 etc etc\n          case AutoEasingLoopStyle.REPEAT:\n            timeValue = ((currentTime - easingValues.startTime) / duration) % 1;\n            break;\n\n          // Reflect means going from 0 to 1 then 1 to 0 then 0 to 1 etc etc\n          case AutoEasingLoopStyle.REFLECT:\n            const timePassed =\n              (currentTime - easingValues.startTime) / duration;\n            // This is a triangle wave for an input\n            timeValue = abs((timePassed / 2.0) % 1 - 0.5) * 2.0;\n            break;\n\n          // No loop means just linear time\n          case AutoEasingLoopStyle.NONE:\n          default:\n            timeValue = (currentTime - easingValues.startTime) / duration;\n            break;\n        }\n\n        // Now get the value of where our instance currently is located this frame\n        easingValues.start = easing(\n          easingValues.start,\n          easingValues.end,\n          timeValue\n        );\n      }\n\n      // Set the current time as the start time of our animation\n      easingValues.startTime = currentTime + delay;\n      // Set the provided value as our destination\n      easingValues.end = end;\n      // Update the information shared between this attribute and it's children\n      attributeDataShare.values = easingValues;\n\n      /** Set layer's animation end time */\n      layer.animationEndTime = Math.max(\n        layer.animationEndTime,\n        easingValues.startTime + duration\n      );\n\n      return end;\n    };\n\n    // The attribute is going to generate some child attributes\n    attribute.childAttributes = [];\n\n    // Find a slot available for our new start value\n    const startAttr: IInstanceAttribute<T> = {\n      name: `_${name}_start`,\n      parentAttribute: attribute,\n      size,\n      update: _o => attributeDataShare.values.start\n    };\n\n    attribute.childAttributes.push(startAttr);\n    instanceAttributes.push(startAttr);\n\n    // Find a slot available for our new start time\n    const startTimeAttr: IInstanceAttribute<T> = {\n      name: `_${name}_start_time`,\n      parentAttribute: attribute,\n      size: InstanceAttributeSize.ONE,\n      update: _o => [attributeDataShare.values.startTime]\n    };\n\n    attribute.childAttributes.push(startTimeAttr);\n    instanceAttributes.push(startTimeAttr);\n\n    // Find a slot available for our duration\n    const durationAttr: IInstanceAttribute<T> = {\n      name: `_${name}_duration`,\n      parentAttribute: attribute,\n      size: InstanceAttributeSize.ONE,\n      update: _o => [attributeDataShare.values.duration]\n    };\n\n    attribute.childAttributes.push(durationAttr);\n    instanceAttributes.push(durationAttr);\n  }\n}\n","import * as Three from \"three\";\nimport { Instance } from \"../../instance-provider/instance\";\nimport {\n  IAtlasInstanceAttribute,\n  IInstanceAttribute,\n  InstanceAttributeSize,\n  InstanceBlockIndex,\n  IUniform,\n  IValueInstanceAttribute,\n  ShaderInjectionTarget,\n  UniformSize\n} from \"../../types\";\nimport { ILayerProps, Layer } from \"../layer\";\n\nconst emptyTexture = new Three.Texture();\n\nfunction isAtlasAttribute<T extends Instance>(\n  attr: any\n): attr is IAtlasInstanceAttribute<T> {\n  return Boolean(attr) && attr.atlas;\n}\n\n/**\n * This generates any uniforms needed for when a layer is requesting\n */\nexport function generateAtlasResourceUniforms<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(layer: Layer<T, U>, instanceAttributes: IInstanceAttribute<T>[]) {\n  // Retrieve all of the instance attributes that are atlas references\n  const atlasInstanceAttributes: IAtlasInstanceAttribute<T>[] = [];\n  // Key: The atlas uniform name requested\n  const requestedAtlasInjections = new Map<string, [boolean, boolean]>();\n\n  // Get the atlas requests that have unique names. We only need one uniform\n  // For a single unique provided name. We also must merge the requests for\n  // Vertex and fragment injections\n  instanceAttributes.forEach(\n    (attribute: IValueInstanceAttribute<T> | IAtlasInstanceAttribute<T>) => {\n      if (isAtlasAttribute(attribute)) {\n        // Auto set the size of the attribute. Attribute's that are a resource automatically\n        // Consume a size of four\n        attribute.size = InstanceAttributeSize.FOUR;\n        attribute.blockIndex = InstanceBlockIndex.ONE;\n        // Get the atlas resource uniform (sampler2D) injection targets. We default to only the\n        // Fragment shader as it's the most commonly used location for sampler2Ds\n        const injection: number =\n          attribute.atlas.shaderInjection || ShaderInjectionTarget.FRAGMENT;\n        // See if we already have an injection for the given injected uniform name for an atlas resource.\n        const injections = requestedAtlasInjections.get(attribute.atlas.name);\n\n        if (injections) {\n          requestedAtlasInjections.set(attribute.atlas.name, [\n            injections[0] ||\n              injection === ShaderInjectionTarget.VERTEX ||\n              injection === ShaderInjectionTarget.ALL,\n            injections[1] ||\n              injection === ShaderInjectionTarget.FRAGMENT ||\n              injection === ShaderInjectionTarget.ALL\n          ]);\n        } else {\n          atlasInstanceAttributes.push(attribute);\n          requestedAtlasInjections.set(attribute.atlas.name, [\n            injection === ShaderInjectionTarget.VERTEX ||\n              injection === ShaderInjectionTarget.ALL,\n            injection === ShaderInjectionTarget.FRAGMENT ||\n              injection === ShaderInjectionTarget.ALL\n          ]);\n        }\n      }\n    }\n  );\n\n  // Make uniforms for all of the unique atlas requests.\n  const uniforms = atlasInstanceAttributes.map(\n    (instanceAttribute): IUniform[] => {\n      let injection: ShaderInjectionTarget = ShaderInjectionTarget.FRAGMENT;\n\n      if (instanceAttribute.atlas) {\n        const injections = requestedAtlasInjections.get(\n          instanceAttribute.atlas.name\n        );\n\n        if (injections) {\n          injection =\n            (injections[0] && injections[1] && ShaderInjectionTarget.ALL) ||\n            (injections[0] && !injections[1] && ShaderInjectionTarget.VERTEX) ||\n            (!injections[0] &&\n              injections[1] &&\n              ShaderInjectionTarget.FRAGMENT) ||\n            injection;\n        }\n      }\n\n      return [\n        {\n          name: instanceAttribute.atlas.name,\n          shaderInjection: injection,\n          size: UniformSize.ATLAS,\n          update: () =>\n            layer.resource.getAtlasTexture(instanceAttribute.atlas.key) ||\n            emptyTexture\n        },\n        {\n          name: `${instanceAttribute.atlas.name}_size`,\n          shaderInjection: injection,\n          size: UniformSize.TWO,\n          update: () => {\n            const atlas = layer.resource.getAtlasTexture(\n              instanceAttribute.atlas.key\n            );\n\n            if (atlas && atlas.image) {\n              const { width, height } = atlas.image;\n              return [width || 1, height || 1];\n            }\n\n            return [1, 1];\n          }\n        }\n      ];\n    }\n  );\n\n  const flatten: IUniform[] = [];\n  uniforms.forEach(list => list.forEach(uniform => flatten.push(uniform)));\n\n  return flatten;\n}\n","import { DataBounds } from \"../util/data-bounds\";\nimport { Bounds } from \"./bounds\";\n\n/**\n * Anytime this is used to express bounds of an object, it is expected\n * to behave like CSS styling with absolute positioning.\n *\n * Setting a left and a right will auto calculate width (setting width takes precedence)\n *\n * You can set numbers to a %. If no % is present all other characters will be ignored\n * (px, em, and other dimensions will not be supported...just px by default unless %)\n */\nexport type AbsolutePosition = {\n  bottom?: number | string;\n  height?: number | string;\n  left?: number | string;\n  right?: number | string;\n  top?: number | string;\n  width?: number | string;\n};\n\nfunction value(val: number | string, ref: number, scaleRatio: number) {\n  const parse = `${val}`;\n  const num = parseFloat(parse);\n\n  if (isNaN(num)) {\n    return 0;\n  }\n\n  // If this is a percentage use the reference as the num to multiply against\n  if (parse.indexOf(\"%\") > -1) {\n    return num / 100.0 * ref;\n  }\n\n  return num * scaleRatio;\n}\n\n/**\n * This evaluates an absolute position with a reference to produce meaningful bounds.\n *\n * The scaleRatio provided should be available in or for percents to have the same weighting\n * as whole number values.\n */\nexport function getAbsolutePositionBounds<T>(\n  item: AbsolutePosition,\n  reference: Bounds,\n  scaleRatio: number\n): DataBounds<T> {\n  if (reference.width === 0 || reference.height === 0) {\n    console.warn(\n      \"An AbsolutePosition evaluated to invalid dimensions.\",\n      \"Please ensure that the object provided and the reference has valid dimensions\",\n      \"to produce dimensions with width and height that are non-zero.\",\n      \"item:\",\n      item,\n      \"reference:\",\n      reference.toString()\n    );\n  }\n\n  const bounds = DataBounds.emptyBounds<T>();\n  let width;\n  let height;\n\n  // Calculate the horizontal values\n  if (item.width) {\n    bounds.width = value(item.width, reference.width, scaleRatio);\n\n    if (item.left !== undefined) {\n      bounds.x = value(item.left, reference.width, scaleRatio);\n    } else if (item.right !== undefined) {\n      bounds.x =\n        reference.width -\n        value(item.right, reference.width, scaleRatio) -\n        bounds.width;\n    }\n  } else {\n    const left = value(item.left || 0, reference.width, scaleRatio);\n    const right =\n      reference.width - value(item.right || 0, reference.width, scaleRatio);\n    width = right - left;\n\n    if (width < 0) {\n      console.warn(\n        \"An AbsolutePosition evaluated to invalid dimensions.\",\n        \"Please ensure that the object provided and the reference has valid dimensions\",\n        \"to produce dimensions with width and height that are greater than zero.\",\n        \"item:\",\n        item,\n        \"reference:\",\n        reference.toString()\n      );\n    }\n\n    bounds.x = left;\n    bounds.width = width;\n  }\n\n  // Calculate the vertical values\n  if (item.height) {\n    bounds.height = value(item.height, reference.height, scaleRatio);\n\n    if (item.top !== undefined) {\n      bounds.y = value(item.top, reference.height, scaleRatio);\n    } else if (item.bottom !== undefined) {\n      bounds.y =\n        reference.height -\n        value(item.bottom, reference.height, scaleRatio) -\n        bounds.height;\n    }\n  } else {\n    const top = value(item.top || 0, reference.height, scaleRatio);\n    const bottom =\n      reference.height - value(item.bottom || 0, reference.height, scaleRatio);\n    height = bottom - top;\n\n    if (height === undefined || height < 0) {\n      console.warn(\n        \"An AbsolutePosition evaluated to invalid dimensions.\",\n        \"Please ensure that the object provided and the reference has valid dimensions\",\n        \"to produce dimensions with width and height that are greater than zero.\",\n        \"item:\",\n        item,\n        \"reference:\",\n        reference.toString()\n      );\n    }\n\n    bounds.y = top;\n    bounds.height = height;\n  }\n\n  if (\n    bounds.width === 0 ||\n    bounds.height === 0 ||\n    isNaN(bounds.x + bounds.y + bounds.width + bounds.height)\n  ) {\n    bounds.x = 0;\n    bounds.y = 0;\n    bounds.width = reference.width;\n    bounds.height = reference.height;\n  }\n\n  return bounds;\n}\n","import { IPoint } from \"../../primitives/point\";\nimport { IProjection, PickType } from \"../../types\";\nimport { EventManager } from \"../event-manager\";\nimport { Layer } from \"../layer\";\nimport { LayerSurface } from \"../layer-surface\";\nimport {\n  IDragMetrics,\n  IMouseInteraction,\n  SceneView\n} from \"../mouse-event-manager\";\n\nfunction isDefined<T>(val: T | null | undefined): val is T {\n  return Boolean(val);\n}\n\n/**\n * This class is an injected event manager for the surface, it specifically handles taking in mouse events intended for view interactions\n * and broadcasts them to the layers that have picking enabled, thus allowing the layers to respond to\n * mouse view locations and broadcast Instance interactions based on the interaction with the View the layer is a part of\n *\n * In Summary: This is an adapter that takes in interactions to the views and injects those events into the layers associated with\n * the views so that the layers can translate the events to gestures.\n */\nexport class LayerMouseEvents extends EventManager {\n  /** This tracks which views have the mouse over them so we can properly broadcast view is out events */\n  isOver = new Map<SceneView, boolean>();\n  /** This is the surface this manager is aiding with broadcasting events to layers */\n  sceneViews: SceneView[];\n  /**\n   * This is the surface this LayerMouseEvent Controller is operating on behalf of. We use this to trigger,\n   * pre-layer processing items, such as color pick narrowing prior to the Layers receiving the event.\n   */\n  surface: LayerSurface;\n\n  constructor(surface: LayerSurface) {\n    super();\n    this.surface = surface;\n    this.sceneViews = surface.sceneViews;\n  }\n\n  getSceneViewsUnderMouse(e: IMouseInteraction) {\n    const sceneViewByViewId = new Map<string, SceneView>();\n\n    // Map the scene views by the view's identifiers\n    for (const sceneView of this.sceneViews) {\n      sceneViewByViewId.set(sceneView.view.id, sceneView);\n    }\n\n    // Now retrieve and convert each view under the mouse to the scene view it coincides with\n    return e.viewsUnderMouse\n      .map(viewItem => sceneViewByViewId.get(viewItem.view.id))\n      .filter(isDefined);\n  }\n\n  getMouseByViewId(e: IMouseInteraction) {\n    // This is the mouse position for the provided view in view space\n    const viewMouseByViewId = new Map<string, IPoint>();\n\n    for (const viewItem of e.viewsUnderMouse) {\n      viewMouseByViewId.set(viewItem.view.id, viewItem.mouse);\n    }\n\n    return viewMouseByViewId;\n  }\n\n  handleClick(e: IMouseInteraction, button: number) {\n    this.handleInteraction(e, (layer, view, mouse) =>\n      layer.interactions.handleMouseClick(view, mouse, button)\n    );\n  }\n\n  handleDrag(e: IMouseInteraction, _drag: IDragMetrics) {\n    this.handleInteraction(e, (layer, view, mouse) =>\n      layer.interactions.handleMouseDrag(view, mouse)\n    );\n  }\n\n  handleInteraction(\n    e: IMouseInteraction,\n    callback: (layer: Layer<any, any>, view: IProjection, mouse: IPoint) => void\n  ) {\n    // Get all of the scenes under the mouse\n    const sceneViews = this.getSceneViewsUnderMouse(e);\n    // Get a lookup of a view id to the mouse position in the view\n    const viewMouseByViewId = this.getMouseByViewId(e);\n\n    // For every view of every scene, we must tell it's layers it's world space is receiving mouse interactions\n    for (const sceneView of sceneViews) {\n      this.handleSceneView(sceneView, viewMouseByViewId, callback);\n    }\n\n    return sceneViews;\n  }\n\n  handleMouseDown(e: IMouseInteraction, button: number) {\n    this.handleInteraction(e, (layer, view, mouse) =>\n      layer.interactions.handleMouseDown(view, mouse, button)\n    );\n  }\n\n  handleMouseUp(e: IMouseInteraction, button: number) {\n    this.handleInteraction(e, (layer, view, mouse) =>\n      layer.interactions.handleMouseUp(view, mouse, button)\n    );\n  }\n\n  handleMouseOver(_e: IMouseInteraction) {\n    // We let the mouse move event handle the registration of moused over views\n  }\n\n  handleMouseOut(e: IMouseInteraction) {\n    // Get a lookup of a view id to the mouse position in the view\n    const viewMouseByViewId = this.getMouseByViewId(e);\n    const screen = e.screen.mouse;\n\n    // All views that are moused over should no longer be considered over and broadcast a mouse out\n    this.isOver.forEach((_flag, sceneView) => {\n      // Since we are leaving the view we must make the view relative cooridinates fromt he screen space coords\n      viewMouseByViewId.set(\n        sceneView.view.id,\n        sceneView.view.screenToView(screen)\n      );\n\n      this.handleSceneView(sceneView, viewMouseByViewId, (layer, view, mouse) =>\n        layer.interactions.handleMouseOut(view, mouse)\n      );\n    });\n\n    // Nothing is over anymore\n    this.isOver.clear();\n  }\n\n  handleMouseMove(e: IMouseInteraction) {\n    if (this.surface) {\n      this.surface.updateColorPickRange(\n        [e.screen.mouse.x, e.screen.mouse.y],\n        e.viewsUnderMouse.map(v => v.view)\n      );\n    }\n\n    // Get all of the scenes we have interacted with, and broadcast a move event for each\n    const allSceneViews = this.handleInteraction(e, (layer, view, mouse) =>\n      layer.interactions.handleMouseMove(view, mouse)\n    );\n    // Get a lookup of a view id to the mouse position in the view\n    const viewMouseByViewId = this.getMouseByViewId(e);\n    // Get the position of the mouse on the screen\n    const screen = e.screen.mouse;\n\n    // For quick lookups map all of the current SceneViews that are over\n    const currentSceneViews = new Map<SceneView, boolean>();\n    allSceneViews.forEach(v => currentSceneViews.set(v, true));\n\n    // Detect which of the views are newly over\n    currentSceneViews.forEach((_flag, sceneView) => {\n      if (!this.isOver.get(sceneView)) {\n        this.handleSceneView(\n          sceneView,\n          viewMouseByViewId,\n          (layer, view, mouse) =>\n            layer.interactions.handleMouseOver(view, mouse)\n        );\n      }\n    });\n\n    // Detect which of the views are no longer over\n    this.isOver.forEach((_flag, sceneView) => {\n      if (!currentSceneViews.get(sceneView)) {\n        // Since these views were not interacted with, we must create the mouse interaction position\n        viewMouseByViewId.set(\n          sceneView.view.id,\n          sceneView.view.screenToView(screen)\n        );\n\n        this.handleSceneView(\n          sceneView,\n          viewMouseByViewId,\n          (layer, view, mouse) => layer.interactions.handleMouseOut(view, mouse)\n        );\n      }\n    });\n\n    // Update the current views that are over to the currently over views for next event\n    this.isOver = currentSceneViews;\n  }\n\n  handleSceneView(\n    sceneView: SceneView,\n    viewMouseByViewId: Map<string, IPoint>,\n    callback: (layer: Layer<any, any>, view: IProjection, mouse: IPoint) => void\n  ) {\n    const view = sceneView.view;\n    const mouse = viewMouseByViewId.get(view.id);\n\n    if (mouse) {\n      for (const layer of sceneView.scene.layers) {\n        if (layer.picking && layer.picking.type !== PickType.NONE) {\n          callback(layer, view, mouse);\n        }\n      }\n    }\n  }\n\n  handleWheel(_e: IMouseInteraction) {\n    // TODO: This may need to be implemented. As of right now, there is no particular benefit\n  }\n}\n","import { IColorPickingData } from \"../types\";\nimport { Vec2 } from \"./vector\";\n\n/**\n * This analyzes the rendered data for color picking and outputs the metrics and data needed\n * for the operation.\n */\nexport function analyzeColorPickingRendering(\n  mouse: Vec2,\n  data: Uint8Array,\n  width: number,\n  height: number\n) {\n  const pickingData: IColorPickingData = {\n    allColors: [],\n    colorData: data,\n    dataHeight: height,\n    dataWidth: width,\n    mouse,\n    nearestColor: 0\n  };\n\n  const uniqueColors = new Map<number, boolean>();\n  let pixelIndex = 0;\n  const colors: number[][] = [];\n  const mouseX: number = width / 2;\n  const mouseY: number = height / 2;\n\n  let nearestColor = 0x000000;\n  let distance = Number.MAX_SAFE_INTEGER;\n\n  for (let i = 0; i < height; ++i) {\n    const row: number[] = [];\n    colors.push(row);\n\n    for (let k = 0; k < width; ++k) {\n      const r = data[pixelIndex];\n      const g = data[pixelIndex + 1];\n      const b = data[pixelIndex + 2];\n      pixelIndex += 4;\n\n      const color = (r << 16) | (g << 8) | b;\n      uniqueColors.set(color, true);\n      row.push(color);\n\n      // If the color is not black, let's test the distance against currnet nearest color\n      if (color !== 0x000000) {\n        const dx = k - mouseX;\n        const dy = i - mouseY;\n        const testDistance = dx * dx + dy * dy;\n\n        if (testDistance < distance) {\n          distance = testDistance;\n          nearestColor = color;\n        }\n      }\n    }\n  }\n\n  // Apply all o fthe unique colors that were discovered within the rendering\n  pickingData.allColors = Array.from(uniqueColors.keys());\n  // The nearest color will be the element in the middle of the array of colors\n  pickingData.nearestColor = nearestColor;\n\n  return pickingData;\n}\n","import { Instance } from \"../../instance-provider/instance\";\nimport { IInstanceAttribute, IUniform } from \"../../types\";\nimport { WebGLStat } from \"../../util/webgl-stat\";\n\n/**\n * This handles processing some metrics that are commonly needed by other processors.\n */\nexport class MetricsProcessing {\n  /** This is an instance's max listed block */\n  instanceMaxBlock: number;\n  /** This is the number of blocks each instance will use */\n  blocksPerInstance: number;\n  /** This is how many uniform blocks the current device can utilize in a shader */\n  maxUniforms: number;\n  /** This reflects how many uniform blocks are available for instancing */\n  maxUniformsForInstancing: number;\n  /** Get the number of instances the client's system supports */\n  maxInstancesPerBuffer: number;\n  /** This is the total blocks to be used in our uniform buffer for handling instances */\n  totalInstanceUniformBlocks: number;\n\n  /**\n   * This calculates how many uniform blocks are utilized based on the input uniforms\n   */\n  static calculateUniformBlockUseage(uniforms: IUniform[]) {\n    let count = 0;\n\n    for (let i = 0, end = uniforms.length; i < end; ++i) {\n      count += Math.ceil(uniforms[i].size / 4);\n    }\n\n    return count;\n  }\n\n  /**\n   * Calculates all of the metrics that will be needed in this processor.\n   */\n  process<T extends Instance>(\n    instanceAttributes: IInstanceAttribute<T>[],\n    uniforms: IUniform[]\n  ) {\n    this.instanceMaxBlock = 0;\n\n    // First find the max block to be utilized\n    instanceAttributes.forEach(attribute => {\n      this.instanceMaxBlock = Math.max(\n        this.instanceMaxBlock,\n        attribute.block || 0\n      );\n    });\n\n    this.blocksPerInstance = this.instanceMaxBlock + 1;\n    this.maxUniforms = WebGLStat.MAX_VERTEX_UNIFORMS;\n    this.maxUniformsForInstancing =\n      this.maxUniforms -\n      MetricsProcessing.calculateUniformBlockUseage(uniforms);\n    this.maxInstancesPerBuffer = Math.floor(\n      this.maxUniformsForInstancing / this.blocksPerInstance\n    );\n    this.totalInstanceUniformBlocks =\n      this.maxInstancesPerBuffer * this.blocksPerInstance;\n  }\n}\n","import { Instance } from \"../../instance-provider/instance\";\nimport { IInstanceAttribute, InstanceAttributeSize } from \"../../types\";\nimport {\n  IShaderTemplateRequirements,\n  shaderTemplate\n} from \"../../util/shader-templating\";\nimport { templateVars } from \"../template-vars\";\n\n/** Converts a size to a shader type */\nconst sizeToType: { [key: number]: string } = {\n  1: \"float\",\n  2: \"vec2\",\n  3: \"vec3\",\n  4: \"vec4\",\n  9: \"mat3\",\n  16: \"mat4\",\n  99: \"sampler2D\"\n};\n\n/**\n * This processor deals with how easing and AutoEasingMethods work with the shaders.\n */\nexport class EasingProcessing {\n  /**\n   * This generates the methods needed from all of the auto easing methods and makes them\n   * injectable into our shader.\n   */\n  process<T extends Instance>(instanceAttributes: IInstanceAttribute<T>[]) {\n    const methods = new Map<string, Map<InstanceAttributeSize, string>>();\n    let out = \"// Auto Easing Methods specified by the layer\\n\";\n\n    // First dedupe the methods needed by their method name\n    instanceAttributes.forEach(attribute => {\n      if (attribute.easing && attribute.size) {\n        let methodSizes = methods.get(attribute.easing.methodName);\n\n        if (!methodSizes) {\n          methodSizes = new Map<InstanceAttributeSize, string>();\n          methods.set(attribute.easing.methodName, methodSizes);\n        }\n\n        methodSizes.set(attribute.size, attribute.easing.gpu);\n      }\n    });\n\n    if (methods.size === 0) {\n      return \"\";\n    }\n\n    const required: IShaderTemplateRequirements = {\n      name: \"Easing Method Generation\",\n      values: [templateVars.easingMethod]\n    };\n\n    // Now generate the full blown method for each element. We create overloaded methods for\n    // Each method name for each vector size required\n    methods.forEach(\n      (methodSizes: Map<InstanceAttributeSize, string>, methodName: string) => {\n        methodSizes.forEach((method, size) => {\n          const sizeType = sizeToType[size];\n\n          const templateOptions: { [key: string]: string } = {\n            [templateVars.easingMethod]: `${sizeType} ${methodName}(${sizeType} start, ${sizeType} end, float t)`,\n            [templateVars.T]: `${sizeType}`\n          };\n\n          const results = shaderTemplate({\n            options: templateOptions,\n            required,\n            shader: method\n          });\n\n          out += `${results.shader}\\n`;\n        });\n      }\n    );\n\n    return out;\n  }\n}\n","module.exports = \"\\n  // This is a special injected instance attribute. It lets the system\\n  // control specific instances ability to draw, which allows the backend\\n  // system greater control on how it optimizes draw calls and it's buffers.\\n  if (_active == 0.0) {\\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n\\n    // Quick exit to prevent any geometry from arising from the instance\\n    return;\\n  }\\n\"","import { Instance } from \"../../instance-provider/instance\";\nimport { ILayerProps, Layer } from \"../../surface/layer\";\nimport { LayerBufferType } from \"../../surface/layer-processing/layer-buffer-type\";\nimport {\n  IInstanceAttribute,\n  InstanceAttributeSize,\n  IVertexAttribute,\n  PickType\n} from \"../../types\";\nimport { AutoEasingLoopStyle } from \"../../util/auto-easing-method\";\nimport { getAttributeShaderName } from \"./formatting\";\nimport { MetricsProcessing } from \"./metrics-processing\";\nimport { UniformProcessing } from \"./uniform-processing\";\n\n/** Defines the elements for destructuring out of a vector */\nconst VECTOR_COMPONENTS = [\"x\", \"y\", \"z\", \"w\"];\n\n/** Converts a size to a shader type */\nconst sizeToType: { [key: number]: string } = {\n  1: \"float\",\n  2: \"vec2\",\n  3: \"vec3\",\n  4: \"vec4\",\n  9: \"mat3\",\n  16: \"mat4\",\n  /** This is the special case for instance attributes that want an atlas resource */\n  99: \"vec4\"\n};\n\n/**\n * This sorts attributes specific to how they need to be destructured. For example:\n * easing attributes MUST appear AFTER all of the specially integrated attributes that were generated\n * such as start times and durations.\n */\nfunction orderByPriority(\n  a: IInstanceAttribute<any>,\n  b: IInstanceAttribute<any>\n) {\n  if (a.easing && !b.easing) return 1;\n  return -1;\n}\n\n/**\n * This method properly provides a vector's chunk of data based on a swizzle. So a size of 2\n * provides vector.xy and a size of 4 provides vector.xyzw.\n */\nfunction makeVectorSwizzle(start: number, size: number) {\n  return VECTOR_COMPONENTS.slice(start, start + size).join(\"\");\n}\n\n/**\n * This object is responsible for generating how attributes are declared as input to the shader.\n */\nexport class AttributeProcessing {\n  private uniformProcessor: UniformProcessing;\n  private metricsProcessor: MetricsProcessing;\n\n  constructor(\n    uniformProcessor: UniformProcessing,\n    metricsProcessor: MetricsProcessing\n  ) {\n    this.metricsProcessor = metricsProcessor;\n    this.uniformProcessor = uniformProcessor;\n  }\n\n  /**\n   * Produces the chunk of code that establishes how a layer injects information into the shader.\n   */\n  process<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U>,\n    vertexAttributes: IVertexAttribute[],\n    instanceAttributes: IInstanceAttribute<T>[]\n  ) {\n    return {\n      declarations: this.processDeclarations(\n        layer,\n        vertexAttributes,\n        instanceAttributes\n      ),\n      destructuring: this.processDestructuring(layer, instanceAttributes)\n    };\n  }\n\n  /**\n   * This processes the declarations needed to set up the Input for the shader from the layer.\n   */\n  private processDeclarations<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U>,\n    vertexAttributes: IVertexAttribute[],\n    instanceAttributes: IInstanceAttribute<T>[]\n  ) {\n    let out = \"// Shader input\\n\";\n\n    // If we are in a uniform buffer type strategy. Then we generate a uniform buffer that will contain\n    // our instance attribute information along with some extras to help dereference from the buffer.\n    if (\n      layer.bufferType === LayerBufferType.UNIFORM &&\n      instanceAttributes.length > 0\n    ) {\n      out += this.uniformProcessor.generateUniformAttributePacking();\n    }\n\n    // Add in the vertex attributes input\n    out += this.processVertexAttributes(vertexAttributes);\n\n    // If we are in an instance attribute Buffer Type strategy, then we simply list out\n    // the attributes listed in our instance attributes as attributes.\n    if (\n      layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE &&\n      instanceAttributes.length > 0\n    ) {\n      out += this.processInstanceAttributeBufferStrategy(instanceAttributes);\n    }\n\n    // If we are in an instance attribute \"packing\" buffer type strategy, then the layer\n    // is expecting to have attributes that are \"blocks\" instead of explicitally named\n    // attributes. The layer will be utilizing the blocks to efficiently pack in our instance information\n    if (\n      layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE_PACKING &&\n      instanceAttributes.length > 0\n    ) {\n      out += this.processInstanceAttributePackingBufferStrategy(\n        this.metricsProcessor.instanceMaxBlock\n      );\n    }\n\n    return out;\n  }\n\n  /**\n   * This processes the layer and it's attributes to generate a Destructuring chunk that guarantees the attributes\n   * and special properties with the attributes are available based on the instance attributes names provided\n   * by the layer.\n   *\n   * IE- this guarantees an attribute with auto easing linear to be available by name AND it's value will be properly\n   * populated with a linearly eased value based on the system time.\n   */\n  private processDestructuring<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U>,\n    instanceAttributes: IInstanceAttribute<T>[]\n  ) {\n    let out = \"\";\n\n    // Order the attributes such that the easing attributes come last so the needed\n    // info for the easing attribute can be in place\n    const orderedAttributes = instanceAttributes.slice(0).sort(orderByPriority);\n\n    // See which buffer strategy our layer is using and produce a destructuring strategy that suits it\n    switch (layer.bufferType) {\n      case LayerBufferType.INSTANCE_ATTRIBUTE:\n        out = this.processDestructuringInstanceAttribute(orderedAttributes);\n        break;\n\n      case LayerBufferType.INSTANCE_ATTRIBUTE_PACKING:\n        out = this.processDestructuringInstanceAttributePacking(\n          orderedAttributes\n        );\n        break;\n\n      case LayerBufferType.UNIFORM:\n        out = this.processDestructuringUniformBuffer(\n          orderedAttributes,\n          this.metricsProcessor.blocksPerInstance\n        );\n        break;\n    }\n\n    // For now we add in our picking varying assignment should it be needed\n    if (layer.picking.type === PickType.SINGLE) {\n      out +=\n        \"\\n// This portion is where the shader assigns the picking color that gets passed to the fragment shader\\n_picking_color_pass_ = _pickingColor;\\n\";\n    }\n\n    // The final item in the destructuring will always be the active attribute handler to ensure elements\n    // honor the active control\n    out += require(\"../fragments/active-attribute-handler.vs\");\n\n    return out;\n  }\n\n  /**\n   * This generates all Destructuring needs for the Instance Attribute strategy. For this scenario\n   * we only need to dereference AutoEasingMethods so that they will follow the easing values based on the\n   * injected timings by the system.\n   */\n  private processDestructuringInstanceAttribute<T extends Instance>(\n    orderedAttributes: IInstanceAttribute<T>[]\n  ) {\n    let out = \"\";\n\n    orderedAttributes.forEach(attribute => {\n      // If this is the source easing attribute, we must add it in as an eased method along with a calculation for the\n      // Easing interpolation time value based on the current time and the injected start time of the change.\n      if (attribute.easing && attribute.size) {\n        // Make the time calculation for the easing equation\n        out += this.processAutoEasingTiming(attribute);\n\n        out += `  ${sizeToType[attribute.size]} ${attribute.name} = ${\n          attribute.easing.methodName\n        }(_${attribute.name}_start, _${attribute.name}_end, _${\n          attribute.name\n        }_time);\\n`;\n      }\n    });\n\n    return out;\n  }\n\n  /**\n   * This generates all Destructuring needs for the Instance Attribute Packing strategy. For this scenario\n   * attributes are tighly packed into attribute blocks rather than explicitly named attributes, thus the blocks\n   * must be destructured into the proper names of the attributes.\n   *\n   * This will, as well, destructure the auto easing methods.\n   */\n  private processDestructuringInstanceAttributePacking<T extends Instance>(\n    orderedAttributes: IInstanceAttribute<T>[]\n  ) {\n    let out = \"\";\n\n    // The attributes are generated in blocks already. Thus all that need be done for this scenario\n    // is merely perform block destructuring\n    out += this.processDestructureBlocks(orderedAttributes);\n\n    return out;\n  }\n\n  /**\n   * This generates all Destructuring needs for the Uniform Packing strategy. For this scenario\n   * attributes are tighly packed into uniform blocks rather than attributes, thus the blocks\n   * must be destructured into the proper names of the attributes.\n   *\n   * This will, as well, destructure the auto easing methods.\n   */\n  private processDestructuringUniformBuffer<T extends Instance>(\n    orderedAttributes: IInstanceAttribute<T>[],\n    blocksPerInstance: number\n  ) {\n    let out = \"int instanceIndex = int(instance);\";\n\n    // Generate the blocks\n    for (let i = 0; i < blocksPerInstance; ++i) {\n      out += `  vec4 block${i} = getBlock(${i}, instanceIndex);\\n`;\n    }\n\n    // Destructure the blocks\n    out += this.processDestructureBlocks(orderedAttributes);\n\n    return out;\n  }\n\n  /**\n   * This produces the destructuring elements needed to utilize the attribute data stored in blocks with names\n   * like:\n   *\n   * vec4 block0;\n   * vec4 block1;\n   *\n   * etc\n   */\n  private processDestructureBlocks<T extends Instance>(\n    orderedAttributes: IInstanceAttribute<T>[]\n  ) {\n    let out = \"\";\n\n    orderedAttributes.forEach(attribute => {\n      const block = attribute.block;\n\n      // If this is the source easing attribute, we must add it in as an eased method along with a calculation for the\n      // Easing interpolation time value based on the current time and the injected start time of the change.\n      if (attribute.easing && attribute.size) {\n        if (attribute.size === InstanceAttributeSize.FOUR) {\n          out += `  ${sizeToType[attribute.size]} _${\n            attribute.name\n          }_end = block${block};\\n`;\n        } else {\n          out += `  ${sizeToType[attribute.size || 1]} _${\n            attribute.name\n          }_end = block${block}.${makeVectorSwizzle(\n            attribute.blockIndex || 0,\n            attribute.size || 1\n          )};\\n`;\n        }\n\n        // Generate the proper timing calculation for the easing involved\n        out += this.processAutoEasingTiming(attribute);\n\n        out += `  ${sizeToType[attribute.size]} ${attribute.name} = ${\n          attribute.easing.methodName\n        }(_${attribute.name}_start, _${attribute.name}_end, _${\n          attribute.name\n        }_time);\\n`;\n      } else if (attribute.size === InstanceAttributeSize.FOUR) {\n        // If we have a size the size of a block, then don't swizzle the vector\n        out += `  ${sizeToType[attribute.size]} ${\n          attribute.name\n        } = block${block};\\n`;\n      } else if (attribute.atlas) {\n        // If the attribute is an atlas, then we use the special ATLAS size and don't swizzle the vector\n        out += `  ${sizeToType[InstanceAttributeSize.ATLAS]} ${\n          attribute.name\n        } = block${block};\\n`;\n      } else {\n        // Do normal destructuring with any other size and type\n        out += `  ${sizeToType[attribute.size || 1]} ${\n          attribute.name\n        } = block${block}.${makeVectorSwizzle(\n          attribute.blockIndex || 0,\n          attribute.size || 1\n        )};\\n`;\n      }\n    });\n\n    return out;\n  }\n\n  /**\n   * This processes the attribute to generate a timing variable used in the Destructuring of auto easing methods.\n   */\n  private processAutoEasingTiming<T extends Instance>(\n    attribute: IInstanceAttribute<T>\n  ) {\n    if (!attribute.easing) {\n      return;\n    }\n\n    let out = \"\";\n\n    // These are common values across all easing loop styles\n    const time = `_${attribute.name}_time`;\n    const duration = `_${attribute.name}_duration`;\n    const startTime = `_${attribute.name}_start_time`;\n\n    switch (attribute.easing.loop) {\n      // Continuous means letting the time go from 0 to infinity\n      case AutoEasingLoopStyle.CONTINUOUS: {\n        out += `  float ${time} = (currentTime - ${startTime}) / ${duration};\\n`;\n        break;\n      }\n\n      // Repeat means going from 0 to 1 then 0 to 1 etc etc\n      case AutoEasingLoopStyle.REPEAT: {\n        out += `  float ${time} = clamp(fract((currentTime - ${startTime}) / ${duration}), 0.0, 1.0);\\n`;\n        break;\n      }\n\n      // Reflect means going from 0 to 1 then 1 to 0 then 0 to 1 etc etc\n      case AutoEasingLoopStyle.REFLECT: {\n        const timePassed = `_${attribute.name}_timePassed`;\n        const pingPong = `_${attribute.name}_pingPong`;\n\n        // Get the time passed in a linear fashion\n        out += `  float ${timePassed} = (currentTime - ${startTime}) / ${duration};\\n`;\n        // Make a triangle wave from the time passed to ping pong the value\n        out += `  float ${pingPong} = abs((fract(${timePassed} / 2.0)) - 0.5) * 2.0;\\n`;\n        // Ensure we're clamped to the right values\n        out += `  float ${time} = clamp(${pingPong}, 0.0, 1.0);\\n`;\n        break;\n      }\n\n      // No loop means just linear time\n      case AutoEasingLoopStyle.NONE:\n      default: {\n        out += `  float ${time} = clamp((currentTime - ${startTime}) / ${duration}, 0.0, 1.0);\\n`;\n        break;\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Produces attributes that are explicitally named and set by the attribute itself.\n   */\n  private processInstanceAttributeBufferStrategy<T extends Instance>(\n    instanceAttributes: IInstanceAttribute<T>[]\n  ) {\n    let out = \"\\n// Instance Attributes\\n\";\n\n    instanceAttributes.forEach(attribute => {\n      out += `attribute ${\n        sizeToType[attribute.size || 1]\n      } ${attribute.qualifier || \"\"}${(attribute.qualifier && \" \") ||\n        \"\"} ${getAttributeShaderName(attribute)};\\n`;\n    });\n\n    return out;\n  }\n\n  /**\n   * Produces attributes that are blocks instead of individual attributes. The system uses these\n   * blocks to pack attributes tightly together to maximize capabilities.\n   */\n  private processInstanceAttributePackingBufferStrategy(maxBlock: number) {\n    let out = \"\\n// Instance Attributes\\n\";\n\n    // Now print out blocks up to that block\n    for (let i = 0, iMax = maxBlock + 1; i < iMax; ++i) {\n      out += `attribute ${sizeToType[InstanceAttributeSize.FOUR]} block${i};\\n`;\n    }\n\n    return out;\n  }\n\n  /**\n   * Produces the vertex attributes without any bias or modification.\n   */\n  private processVertexAttributes(vertexAttributes: IVertexAttribute[]) {\n    // No matter what, vertex attributes listed are strictly vertex attributes\n    let out = \"// Vertex Attributes\\n\";\n\n    vertexAttributes.forEach(attribute => {\n      out += `attribute ${sizeToType[attribute.size]} ${attribute.qualifier ||\n        \"\"}${(attribute.qualifier && \" \") || \"\"}${attribute.name};\\n`;\n    });\n\n    return out;\n  }\n}\n","import { Instance } from \"../../instance-provider/instance\";\nimport { ILayerProps, Layer } from \"../../surface/layer\";\nimport {\n  IInstanceAttribute,\n  IInstancingUniform,\n  IShaders,\n  IUniform,\n  IVertexAttribute,\n  PickType,\n  ShaderInjectionTarget\n} from \"../../types\";\nimport { shaderTemplate } from \"../../util/shader-templating\";\nimport { templateVars } from \"../template-vars\";\nimport { AttributeProcessing } from \"./attribute-processing\";\nimport { EasingProcessing } from \"./easing-processing\";\nimport { MetricsProcessing } from \"./metrics-processing\";\nimport { ShaderModule } from \"./shader-module\";\nimport { UniformProcessing } from \"./uniform-processing\";\n\n/**\n * This is the expected results from processing the shader and it's layer's attributes.\n */\nexport interface IShaderProcessingResults {\n  fs: string;\n  materialUniforms: IInstancingUniform[];\n  maxInstancesPerBuffer: number;\n  vs: string;\n}\n\n/**\n * The intent of this processor is to analyze a layer's Shader IO elements and produce a functional\n * shader from those elements. This includes supporting a layer's capabilties with the client systems\n * capabilities and matching compatibilities.\n *\n * This inlcudes:\n *\n * Injecting needed module imports based on the layers specifications\n * Resolving Module imports and handling errors\n * Utilizing layer information to create attributes and uniforms based on attribute packing strategies\n * Destructuring attributes based on easing requirements or if attributes were packed\n * Swapping out miscellaneous template variables\n */\nexport class ShaderProcessor {\n  /** The processor that defines easing methods that are to be injected into the shaders */\n  easingProcessing: EasingProcessing = new EasingProcessing();\n  /** Processor that calculates shared metrics across all processors */\n  metricsProcessing: MetricsProcessing = new MetricsProcessing();\n  /** The processor that defines how uniforms are written into the shader */\n  uniformProcessing: UniformProcessing = new UniformProcessing(\n    this.metricsProcessing\n  );\n  /** The processor that defines how attributes are packed into the shader */\n  attributeProcessing: AttributeProcessing = new AttributeProcessing(\n    this.uniformProcessing,\n    this.metricsProcessing\n  );\n\n  /**\n   * This processes a layer, it's Shader IO requirements, and it's shaders to produce a fully functional\n   * shader that is compatible with the client's system.\n   */\n  process<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U>,\n    shaders: IShaders,\n    vertexAttributes: IVertexAttribute[],\n    instanceAttributes: IInstanceAttribute<T>[],\n    uniforms: IUniform[]\n  ): IShaderProcessingResults | null {\n    try {\n      // Reset anything state that needs revertting\n      this.uniformProcessing.materialUniforms = [];\n      // Calculate needed metrics that may be used by any of the processors\n      this.metricsProcessing.process(instanceAttributes, uniforms);\n\n      // First process imports to create a shader complete with the necessary\n      const shadersWithImports = this.processImports(layer, shaders);\n      if (!shadersWithImports) return null;\n\n      // Next generate the attribute packing strategy for the layer. The layer will define how it expects\n      // attributes (instance and vertex) to be handled. This will be written as the input to the shader at\n      // the top of the vertex shader file.\n      const attributeDeclarations = this.attributeProcessing.process(\n        layer,\n        vertexAttributes,\n        instanceAttributes\n      );\n      if (attributeDeclarations === null) return null;\n\n      // Next generate any uniform declarations necessary for the vertex shader\n      const vertexUniformDeclarations = this.uniformProcessing.process(\n        uniforms,\n        ShaderInjectionTarget.VERTEX\n      );\n      if (vertexUniformDeclarations === null) return null;\n\n      // Generate uniform declarations for the fragment shader\n      const fragmentUniformDeclarations = this.uniformProcessing.process(\n        uniforms,\n        ShaderInjectionTarget.FRAGMENT\n      );\n      if (fragmentUniformDeclarations === null) return null;\n\n      // Generate the easing methods the layer specified\n      const easingMethodDeclarations = this.easingProcessing.process(\n        instanceAttributes\n      );\n      if (easingMethodDeclarations === null) return null;\n\n      // Create a default precision modifier for now\n      const precision = \"precision highp float;\\n\\n\";\n\n      // Now we concatenate the shader pieces into one glorious shader of compatibility and happiness\n      const fullShaderVS =\n        precision +\n        attributeDeclarations.declarations +\n        vertexUniformDeclarations +\n        easingMethodDeclarations +\n        shadersWithImports.vs;\n\n      const fullShaderFS =\n        precision + fragmentUniformDeclarations + shadersWithImports.fs;\n\n      // Last we replace any templating variables with their relevant values\n      let templateOptions: { [key: string]: string } = {\n        [templateVars.attributes]: attributeDeclarations.destructuring\n      };\n\n      const processedShaderVS = shaderTemplate({\n        options: templateOptions,\n        required: undefined,\n        shader: fullShaderVS\n      });\n\n      // We process the Fragment shader as well, currently with nothing to replace\n      // aside from removing any superfluous template requests\n      templateOptions = {};\n\n      const processShaderFS = shaderTemplate({\n        options: templateOptions,\n        required: undefined,\n        shader: fullShaderFS\n      });\n\n      const results = {\n        fs: processShaderFS.shader.trim(),\n        materialUniforms: this.uniformProcessing.materialUniforms,\n        maxInstancesPerBuffer: this.metricsProcessing.maxInstancesPerBuffer,\n        vs: processedShaderVS.shader.trim()\n      };\n\n      return results;\n    } catch (err) {\n      console.warn(\n        \"An unknown error occurred while processing the shaders for layer:\",\n        layer.id\n      );\n      console.warn(\"Error:\");\n      console.warn(err && (err.stack || err.message));\n      return null;\n    }\n  }\n\n  /**\n   * This applies the imports for the specified layer and generates the appropriate shaders from the output.\n   * Upon failure, this will just return null.\n   *\n   * This also does some additional work to add in some modules based on the layer's preferences\n   */\n  private processImports<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U>,\n    shaders: IShaders\n  ): IShaders | null {\n    const additionalImports = [];\n\n    if (layer.picking.type === PickType.SINGLE) {\n      additionalImports.push(\"picking\");\n    } else {\n      additionalImports.push(\"no-picking\");\n    }\n\n    // Process imports for the vertex shader\n    const vs = ShaderModule.process(\n      layer.id,\n      shaders.vs,\n      ShaderInjectionTarget.VERTEX,\n      additionalImports\n    );\n\n    if (vs.errors.length > 0) {\n      console.warn(\n        \"Error processing imports for the vertex shader of layer:\",\n        layer.id,\n        \"Errors\",\n        ...vs.errors.reverse()\n      );\n\n      return null;\n    }\n\n    // Process imports for the fragment shader\n    const fs = ShaderModule.process(\n      layer.id,\n      shaders.fs,\n      ShaderInjectionTarget.FRAGMENT,\n      additionalImports\n    );\n\n    if (fs.errors.length > 0) {\n      console.warn(\n        \"Error processing imports for the fragment shader of layer:\",\n        layer.id,\n        \"Errors\",\n        ...fs.errors.reverse()\n      );\n\n      return null;\n    }\n\n    return {\n      fs: fs.shader || \"\",\n      vs: vs.shader || \"\"\n    };\n  }\n}\n","import * as Three from \"three\";\nimport { WebGLRenderTarget } from \"three\";\nimport { ImageInstance } from \"../base-layers/images\";\nimport { LabelInstance } from \"../base-layers/labels\";\nimport { Instance } from \"../instance-provider/instance\";\nimport { Bounds } from \"../primitives/bounds\";\nimport { Box } from \"../primitives/box\";\nimport { ShaderProcessor } from \"../shaders/processing/shader-processor\";\nimport { FrameMetrics } from \"../types\";\nimport { PickType } from \"../types\";\nimport { analyzeColorPickingRendering } from \"../util/color-picking-analysis\";\nimport { DataBounds } from \"../util/data-bounds\";\nimport { Vec2 } from \"../util/vector\";\nimport { EventManager } from \"./event-manager\";\nimport { LayerMouseEvents } from \"./event-managers/layer-mouse-events\";\nimport { ILayerProps, Layer } from \"./layer\";\nimport { generateDefaultScene } from \"./layer-processing/generate-default-scene\";\nimport { generateLayerGeometry } from \"./layer-processing/generate-layer-geometry\";\nimport { generateLayerMaterial } from \"./layer-processing/generate-layer-material\";\nimport { generateLayerModel } from \"./layer-processing/generate-layer-model\";\nimport { injectShaderIO } from \"./layer-processing/inject-shader-io\";\nimport {\n  getLayerBufferType,\n  makeLayerBufferManager\n} from \"./layer-processing/layer-buffer-type\";\nimport { MouseEventManager, SceneView } from \"./mouse-event-manager\";\nimport { ISceneOptions, Scene } from \"./scene\";\nimport { AtlasManager } from \"./texture\";\nimport { IAtlasOptions } from \"./texture/atlas\";\nimport { AtlasResourceManager } from \"./texture/atlas-resource-manager\";\nimport { ClearFlags, View } from \"./view\";\n\nexport interface ILayerSurfaceOptions {\n  /**\n   * These are the atlas resources we want available that our layers can be provided to utilize\n   * for their internal processes.\n   */\n  atlasResources?: IAtlasOptions[];\n  /**\n   * This is the color the canvas will be set to.\n   */\n  background: [number, number, number, number];\n  /**\n   * If this is provided, it will use this context for rendering. If a string is provided\n   * it will search for the canvas context by id.\n   */\n  context?: WebGLRenderingContext | HTMLCanvasElement | string;\n  /**\n   * This is the event managers to respond to the mouse events.\n   */\n  eventManagers?: EventManager[];\n  /**\n   * Set to true to allow this surface to absorb and handle wheel events from the mouse.\n   */\n  handlesWheelEvents?: boolean;\n  /**\n   * This specifies the density of rendering in the surface. The default value is window.devicePixelRatio to match the\n   * monitor for optimal clarity. Using a value of 1 will be acceptable, will not get high density renders, but will\n   * have better performance if needed.\n   */\n  pixelRatio?: number;\n  /**\n   * This sets up the available scenes the surface will have to work with. Layers then can\n   * reference the scene by it's scene property. The order of the scenes here is the drawing\n   * order of the scenes.\n   */\n  scenes: ISceneOptions[];\n}\n\nconst DEFAULT_BACKGROUND_COLOR = new Three.Color(1.0, 1.0, 1.0);\n\nfunction isCanvas(val: any): val is HTMLCanvasElement {\n  return Boolean(val.getContext);\n}\n\nfunction isString(val: any): val is string {\n  return Boolean(val.substr);\n}\n\nfunction isWebGLContext(val: any): val is WebGLRenderingContext {\n  return Boolean(val.canvas);\n}\n\nexport interface ILayerConstructable<T extends Instance> {\n  new (props: ILayerProps<T>): Layer<any, any>;\n}\n\n/**\n * This is a pair of a Class Type and the props to be applied to that class type.\n */\nexport type LayerInitializer = [\n  ILayerConstructable<Instance> & { defaultProps: ILayerProps<Instance> },\n  ILayerProps<Instance>\n];\n\n/**\n * Used for reactive layer generation and updates.\n */\nexport function createLayer<T extends Instance, U extends ILayerProps<T>>(\n  layerClass: ILayerConstructable<T> & { defaultProps: U },\n  props: U\n): LayerInitializer {\n  return [layerClass, props];\n}\n\n/**\n * This is a manager for layers. It will use voidgl layers to intelligently render resources\n * as efficiently as possible. Layers will be rendered in the order they are provided and this\n * surface will provide some basic camera controls by default.\n */\nexport class LayerSurface {\n  /** This is the atlas manager that will help with modifying and tracking atlas' generated for the layers */\n  private atlasManager: AtlasManager = new AtlasManager();\n  /** This is the gl context this surface is rendering to */\n  private context: WebGLRenderingContext;\n  /** This is the current viewport the renderer state is in */\n  currentViewport = new Map<Three.WebGLRenderer, Box>();\n  /**\n   * This is the metrics of the current running frame\n   */\n  frameMetrics: FrameMetrics = {\n    currentFrame: 0,\n    currentTime: Date.now() | 0,\n    previousTime: Date.now() | 0\n  };\n  /**\n   * This is used to help resolve concurrent draws. There are some very async operations that should\n   * not overlap in draw calls.\n   */\n  private isBufferingAtlas = false;\n  /** This is all of the layers in this manager by their id */\n  layers = new Map<string, Layer<Instance, ILayerProps<Instance>>>();\n  /** This manages the mouse events for the current canvas context */\n  private mouseManager: MouseEventManager;\n  /**\n   * This is the renderer that is meant for rendering the picking pass. We have a separate renderer so we can disable\n   * over complicated features like antialiasing which would ruin the picking pass.\n   */\n  pickingRenderer: Three.WebGLRenderer;\n  /** This is a target used to perform rendering our picking pass */\n  pickingTarget: Three.WebGLRenderTarget;\n  /** This is the density the rendering renders for the surface */\n  pixelRatio: number = window.devicePixelRatio;\n  /** This is the THREE render system we use to render scenes with views */\n  renderer: Three.WebGLRenderer;\n  /** This is the resource manager that handles resource requests for instances */\n  resourceManager: AtlasResourceManager;\n  /**\n   * This is all of the available scenes and their views for this surface. Layers reference the IDs\n   * of the scenes and the views to be a part of their rendering state.\n   */\n  scenes = new Map<string, Scene>();\n  /**\n   * This is all of the views currently generated for this surface paired with the scene they render.\n   */\n  sceneViews: SceneView[] = [];\n  /** When set to true, the next render will make sure color picking is updated for layer interactions */\n  updateColorPick?: {\n    mouse: Vec2;\n    views: View[];\n  };\n  /**\n   * This flags all layers by id for disposal at the end of every render. A Layer must be recreated\n   * after each render in order to clear it's disposal flag. This is the trick to making this a\n   * reactive system.\n   */\n  willDisposeLayer = new Map<string, boolean>();\n  /**\n   * This map is a quick look up for a view to determine other views that\n   * would need to be redrawn as a consequence of the source view needing a redraw\n   */\n  private viewDrawDependencies = new Map<View, View[]>();\n  /** This is used to indicate whether the loading is completed */\n  private loadReadyResolve: () => void;\n  loadReady: Promise<void> = new Promise(\n    resolve => (this.loadReadyResolve = resolve)\n  );\n\n  /** Read only getter for the gl context */\n  get gl() {\n    return this.context;\n  }\n\n  /**\n   * This adds a layer to the manager which will manage all of the resource lifecycles of the layer\n   * as well as additional helper injections to aid in instancing and shader i/o.\n   */\n  private addLayer<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U>\n  ): Layer<T, U> | null {\n    if (!layer.id) {\n      console.warn(\"All layers must have an id\");\n      return layer;\n    }\n\n    if (this.layers.get(layer.id)) {\n      console.warn(\"All layer's ids must be unique per layer manager\");\n      return layer;\n    }\n\n    // We add the layer to our management\n    this.layers.set(layer.id, layer);\n\n    // Now we initialize the layer's gl components\n    const layerId = layer.id;\n\n    // Init the layer and see if the initialization is successful\n    if (!this.initLayer(layer)) {\n      this.layers.delete(layerId);\n      return null;\n    }\n\n    return layer;\n  }\n\n  /**\n   * The performs all of the needed updates that layers need to commit to the scene and buffers\n   * to be ready for a draw pass. This is callable outside of the draw loop to allow for specialized\n   * procedures or optimizations to take place, where incremental updates to the buffers would make\n   * the most sense.\n   *\n   * @param time The start time of the given frame\n   * @param frameIncrement When true, the frame count for the frame metrics will increment\n   * @param onViewReady Callback for when all of the layers of a scene view have been committed\n   *                    and are thus potentially ready to be rendered.\n   */\n  async commit(\n    time?: number,\n    frameIncrement?: boolean,\n    onViewReady?: (\n      needsDraw: boolean,\n      scene: Scene,\n      view: View,\n      pickingPass: Layer<any, any>[]\n    ) => void\n  ) {\n    if (!this.gl) return;\n\n    // For now, while certain mysteries remain, we will track only if any view needs to be redrawn.\n    // Any view that needs to be redrawn will trigger a redraw of the entire surface for now until\n    // we can optimize down to only drawing a single view without erasing views that were not redrawn.\n    let needsDraw = false;\n\n    // We are rendering a new frame so increment our frame count\n    if (frameIncrement) this.frameMetrics.currentFrame++;\n    this.frameMetrics.previousTime = this.frameMetrics.currentTime;\n\n    // If no manual time was provided, we shall use Date.now in 32 bit format\n    if (time === undefined) {\n      this.frameMetrics.currentTime = Date.now() | 0;\n    } else {\n      // If this is our first frame and we have a manual time entry, then we first need to sync up\n      // The manual time as our previous timing.\n      if (this.frameMetrics.previousTime === this.frameMetrics.currentTime) {\n        this.frameMetrics.previousTime = time;\n      }\n\n      this.frameMetrics.currentTime = time;\n    }\n\n    // Get the scenes in their added order\n    const scenes = Array.from(this.scenes.values());\n    const validLayers: { [key: string]: Layer<any, any> } = {};\n    const erroredLayers: { [key: string]: [Layer<any, any>, Error] } = {};\n    const pickingPassByView = new Map<View, Layer<any, any>[]>();\n\n    // Loop through scenes\n    for (let i = 0, end = scenes.length; i < end; ++i) {\n      const scene = scenes[i];\n      const views = Array.from(scene.viewById.values());\n      const layers = scene.layers;\n\n      // Make sure the layers are depth sorted\n      scene.sortLayers();\n\n      // Loop through the views\n      for (let k = 0, endk = views.length; k < endk; ++k) {\n        const view = views[k];\n        // When this flags true, a picking pass will be rendered for the provided scene / view\n        const pickingPass: Layer<any, any>[] = [];\n\n        // We must perform any operations necessary to make the view camera fit the viewport\n        // Correctly\n        view.fitViewtoViewport(\n          new Bounds({\n            height: this.context.canvas.height,\n            width: this.context.canvas.width,\n            x: 0,\n            y: 0\n          })\n        );\n\n        // Let the layers update their uniforms before the draw\n        for (let j = 0, endj = layers.length; j < endj; ++j) {\n          // Get the layer to be rendered in the scene\n          const layer = layers[j];\n          // Update the layer with the view it is about to be rendered with\n          layer.view = view;\n          // Make sure the layer is given the opportunity to update all of it's uniforms\n          // To match the view state and update any unresolved diffs internally\n          try {\n            // Update uniforms, resolve diff changes\n            layer.draw();\n            // If any of the layers under the view need a redraw\n            // Then the view needs a redraw\n            if (layer.needsViewDrawn) view.needsDraw = true;\n            // Flag the layer as valid\n            validLayers[layer.id] = layer;\n            // The view's animationEndTime is the largest end time found on one of the view's child layers.\n            view.animationEndTime = Math.max(\n              view.animationEndTime,\n              layer.animationEndTime\n            );\n          } catch (err) {\n            if (!erroredLayers[layer.id]) {\n              erroredLayers[layer.id] = [layer, err];\n            }\n          }\n\n          // If this layer specifies a picking draw pass, then we shall store it in the current draw order\n          // For that next step\n          if (layer.picking.type === PickType.SINGLE) {\n            pickingPass.push(layer);\n          }\n        }\n\n        // Analyze the view's animation end timings and the camera to see if there are view changes\n        // that will trigger a redraw outside of our layer changes\n        if (\n          view.needsDraw ||\n          (time && time < view.animationEndTime) ||\n          view.camera.needsViewDrawn\n        ) {\n          view.needsDraw = true;\n          needsDraw = true;\n\n          // Get all of the dependent views for that view\n          const overlapViews = this.viewDrawDependencies.get(view);\n\n          // And make all of them need a redraw.\n          if (overlapViews) {\n            overlapViews.forEach(view => {\n              view.needsDraw = true;\n            });\n          }\n        }\n\n        // Store the picking pass for the view to use when the view is ready to draw\n        pickingPassByView.set(view, pickingPass);\n      }\n    }\n\n    // If any draw need was detected, redraw the surface\n    for (let i = 0, end = scenes.length; i < end; ++i) {\n      const scene = scenes[i];\n      // Our scene must have a valid container to operate\n      if (!scene.container) continue;\n      const views = Array.from(scene.viewById.values());\n\n      for (let k = 0, endk = views.length; k < endk; ++k) {\n        const view = views[k];\n\n        // Now perform the rendering\n        if (onViewReady) {\n          onViewReady(\n            needsDraw,\n            scene,\n            view,\n            pickingPassByView.get(view) || []\n          );\n        }\n      }\n    }\n\n    // get the layers with errors flagged for them\n    const errors = Object.values(erroredLayers);\n\n    if (errors.length > 0) {\n      const passed = Object.values(validLayers);\n\n      console.warn(\n        \"Some layers errored during their draw update. These layers will be removed. They can be re-added if render() is called again:\",\n        errors.map(err => err[0].id)\n      );\n\n      // Output each layer and why it errored\n      errors.forEach(err => {\n        console.warn(`Layer ${err[0].id} removed for the following error:`);\n        if (err[1]) console.error(err[1].stack || err[1].message);\n      });\n\n      // Re-render but only include non-errored layers\n      this.render(passed.map(layer => layer.initializer));\n    }\n  }\n\n  /**\n   * Free all resources consumed by this surface that gets applied to the GPU.\n   */\n  destroy() {\n    this.layers.forEach(layer => layer.destroy());\n    this.resourceManager.destroy();\n    this.mouseManager.destroy();\n    this.sceneViews.forEach(sceneView => sceneView.scene.destroy());\n    this.renderer.dispose();\n    this.pickingRenderer.dispose();\n    this.currentViewport.clear();\n\n    // TODO: Instances should be implementing destroy for these clean ups.\n    LabelInstance.destroy();\n    ImageInstance.destroy();\n  }\n  /**\n   * This is the draw loop that must be called per frame for updates to take effect and display.\n   *\n   * @param time This is an optional time flag so one can manually control the time flag for the frame.\n   *             This will affect animations and other automated gpu processes.\n   */\n  async draw(time?: number) {\n    if (!this.gl) return;\n\n    // Make the layers commit their changes to the buffers then draw each scene view on\n    // Completion.\n    this.commit(time, true, (needsDraw, scene, view, pickingPass) => {\n      // Our scene must have a valid container to operate\n      if (!scene.container) return;\n\n      if (needsDraw) {\n        // Now perform the rendering\n        this.drawSceneView(scene.container, view);\n      }\n\n      // If a layer needs a picking pass, then perform a picking draw pass only\n      // if a request for the color pick has been made, then we query the pixels rendered to our picking target\n      if (pickingPass.length > 0 && this.updateColorPick) {\n        // Get the requested metrics\n        const mouse = this.updateColorPick.mouse;\n        const views = this.updateColorPick.views;\n\n        // Only if the view is interacted with should we both with rendering\n        if (views.indexOf(view) > -1) {\n          // Picking uses a pixel ratio of 1\n          view.pixelRatio = 1.0;\n          // Get the current flags for the view\n          const flags = view.clearFlags.slice(0);\n          // Set color rendering flasg\n          view.clearFlags = [ClearFlags.COLOR, ClearFlags.DEPTH];\n\n          // We must perform any operations necessary to make the view camera fit the viewport\n          // Correctly with the possibly adjusted pixel ratio\n          view.fitViewtoViewport(\n            new Bounds({\n              height: this.context.canvas.height / this.pixelRatio,\n              width: this.context.canvas.width / this.pixelRatio,\n              x: 0,\n              y: 0\n            })\n          );\n\n          // We must redraw the layers so they will update their uniforms to adapt to a picking pass\n          for (let j = 0, endj = pickingPass.length; j < endj; ++j) {\n            const layer = pickingPass[j];\n            // Adjust the layer to utilize the proper pick mode, thus causing the layer to properly\n            // Set it's uniforms into a pick mode.\n            layer.picking.currentPickMode = PickType.SINGLE;\n\n            // Attempt to update the layer by calling it's draw method\n            try {\n              layer.draw();\n            } catch (err) {\n              /** No-op, the first draw should have output an error for bad draw calls */\n            }\n\n            layer.picking.currentPickMode = PickType.NONE;\n          }\n\n          // Draw the picking container for the scene with our view long with our specialized picking renderer\n          // NOTE: Neat trick, just remove 'this.pickingTarget' from the argument and add\n          // canvas.parentNode.appendChild(this.pickingRenderer.getContext().canvas);\n          // below where the picking Target is created and you will see what is being rendered to the color picking buffer\n          this.drawSceneView(\n            scene.pickingContainer,\n            view,\n            this.pickingRenderer,\n            this.pickingTarget\n          );\n\n          // Make our metrics for how much of the image we wish to analyze\n          const pickWidth = 5;\n          const pickHeight = 5;\n          const numBytesPerColor = 4;\n          const out = new Uint8Array(pickWidth * pickHeight * numBytesPerColor);\n\n          // Read the pixels out\n          // TODO: We need to defer this reading to next frame as the rendering MUST be completed before a readPixels\n          // operation can complete. Thus in complex rendering situations that pushes the GPU, this could be a MAJOR bottleneck.\n          this.pickingRenderer.readRenderTargetPixels(\n            this.pickingTarget,\n            mouse[0] - view.screenBounds.x - pickWidth / 2,\n            view.screenBounds.height -\n              (mouse[1] - view.screenBounds.y) -\n              pickHeight / 2,\n            pickWidth,\n            pickHeight,\n            out\n          );\n\n          // Analyze the rendered color data for the picking routine\n          const pickingData = analyzeColorPickingRendering(\n            [mouse[0] - view.screenBounds.x, mouse[1] - view.screenBounds.y],\n            out,\n            pickWidth,\n            pickHeight\n          );\n\n          // We must redraw the layers so they will update their uniforms to adapt to a picking pass\n          for (let j = 0, endj = pickingPass.length; j < endj; ++j) {\n            const layer = pickingPass[j];\n\n            if (layer.picking.type === PickType.SINGLE) {\n              layer.interactions.colorPicking = pickingData;\n            }\n          }\n\n          // Return the pixel ratio back to the rendered ratio\n          view.pixelRatio = this.pixelRatio;\n          // Return the view's clear flags\n          view.clearFlags = flags;\n\n          // After reverting the pixel ratio, we must return to the state we came from so that mouse interactions\n          // will work properly\n          view.fitViewtoViewport(\n            new Bounds({\n              height: this.context.canvas.height,\n              width: this.context.canvas.width,\n              x: 0,\n              y: 0\n            })\n          );\n        }\n      }\n    });\n\n    // After we have drawn our views of our scenes, we can now ensure all of the bounds\n    // Are updated in the interactions and flag our interactions ready for mouse input\n    if (this.mouseManager.waitingForRender) {\n      this.sceneViews.forEach(sceneView => {\n        sceneView.bounds = new DataBounds(sceneView.view.screenBounds);\n        sceneView.bounds.data = sceneView;\n      });\n\n      this.mouseManager.waitingForRender = false;\n    }\n\n    // Now that all of our layers have performed updates to everything, we can now dequeue\n    // All resource requests\n    // We create this gate in case multiple draw calls flow through before a buffer opertion is completed\n    if (!this.isBufferingAtlas) {\n      this.isBufferingAtlas = true;\n      const didBuffer = await this.resourceManager.dequeueRequests();\n      this.isBufferingAtlas = false;\n\n      // If buffering did occur and completed, then we should be performing a draw to ensure all of the\n      // Changes are committed and pushed out.\n      if (didBuffer) {\n        this.loadReadyResolve();\n        this.loadReady = new Promise(\n          resolve => (this.loadReadyResolve = resolve)\n        );\n        this.draw();\n      }\n    }\n\n    // Clear out the flag requesting a pick pass so we don't perform a pick render pass unless we have\n    // another requested from mouse interactions\n    delete this.updateColorPick;\n\n    // Each frame needs to analyze if draws are needed or not. Thus we reset all draw needs so they will\n    // be considered resolved for the current set of changes.\n    // Set draw needs of cameras and views back to false\n    this.sceneViews.forEach(sceneView => {\n      sceneView.view.needsDraw = false;\n      sceneView.view.camera.resolve();\n    });\n    // Set all layers draw needs back to false\n    this.layers.forEach(layer => (layer.needsViewDrawn = false));\n  }\n\n  /**\n   * This finalizes everything and sets up viewports and clears colors and performs the actual render step\n   */\n  private drawSceneView(\n    scene: Three.Scene,\n    view: View,\n    renderer?: Three.WebGLRenderer,\n    target?: Three.WebGLRenderTarget\n  ) {\n    renderer = renderer || this.renderer;\n    const offset = { x: view.viewBounds.left, y: view.viewBounds.top };\n    const size = view.viewBounds;\n    const rendererSize = renderer.getSize();\n    const pixelRatio = renderer.getPixelRatio();\n    rendererSize.width *= pixelRatio;\n    rendererSize.height *= pixelRatio;\n    const background = view.background;\n    const context = renderer.getContext();\n\n    // Something is up with threejs that does not allow us to set viewport x and y values. So for targets\n    // We simply size the target to the view size and render. Thus scissoring is not required\n    if (!target) {\n      // Set the scissor rectangle.\n      renderer.setScissorTest(true);\n      renderer.setScissor(\n        offset.x / pixelRatio,\n        offset.y / pixelRatio,\n        size.width / pixelRatio,\n        size.height / pixelRatio\n      );\n\n      // If a background is established, we should clear the background color\n      // Specified for this context\n      if (view.background) {\n        // Clear the rect of color and depth so the region is totally it's own\n        context.clearColor(\n          background[0],\n          background[1],\n          background[2],\n          background[3]\n        );\n      }\n    }\n\n    // Get the view's clearing preferences\n    if (view.clearFlags) {\n      // For targets, we must also perform clear operations\n      if (target) {\n        // TODO: This is frustrating. Right now we can't specify and set the viewport for a render target\n        // Possibly with Threejs going away we can actually be more explcit for the render area to a render target\n        // and not cause this overhead of resizing the render target for every picking pass\n        target.setSize(size.width, size.height);\n        renderer.setRenderTarget(target);\n        renderer.clear(\n          view.clearFlags.indexOf(ClearFlags.COLOR) > -1,\n          view.clearFlags.indexOf(ClearFlags.DEPTH) > -1,\n          view.clearFlags.indexOf(ClearFlags.STENCIL) > -1\n        );\n      } else {\n        renderer\n          .getContext()\n          .clear(\n            (view.clearFlags.indexOf(ClearFlags.COLOR) > -1\n              ? context.COLOR_BUFFER_BIT\n              : 0x0) |\n              (view.clearFlags.indexOf(ClearFlags.DEPTH) > -1\n                ? context.DEPTH_BUFFER_BIT\n                : 0x0) |\n              (view.clearFlags.indexOf(ClearFlags.STENCIL) > -1\n                ? context.STENCIL_BUFFER_BIT\n                : 0x0)\n          );\n      }\n    } else {\n      // Default clearing is depth and color\n      // For targets, we must also perform clear operations\n      if (target) {\n        // TODO: This is frustrating. Right now we can't specify and set the viewport for a render target\n        // Possibly with Threejs going away we can actually be more explcit for the render area to a render target\n        // and not cause this overhead of resizing the render target for every picking pass\n        target.setSize(size.width, size.height);\n        renderer.setRenderTarget(target);\n        renderer.clear(true, true);\n      } else {\n        context.clear(context.COLOR_BUFFER_BIT | context.DEPTH_BUFFER_BIT);\n      }\n    }\n\n    // Make sure the viewport is set properly for the next render\n    renderer.setViewport(\n      offset.x / pixelRatio,\n      offset.y / pixelRatio,\n      size.width,\n      size.height\n    );\n\n    // Render the scene with the provided view metrics\n    renderer.render(scene, view.viewCamera.baseCamera, target);\n  }\n\n  /**\n   * This gathers all the overlap views of every view\n   */\n  private gatherViewDrawDependencies() {\n    this.viewDrawDependencies.clear();\n\n    // Fit all views to viewport\n    for (let i = 0, endi = this.sceneViews.length; i < endi; i++) {\n      this.sceneViews[i].view.fitViewtoViewport(\n        new Bounds({\n          height: this.context.canvas.height,\n          width: this.context.canvas.width,\n          x: 0,\n          y: 0\n        })\n      );\n    }\n\n    // Set viewDrawDependencies\n    for (let i = 0, endi = this.sceneViews.length; i < endi; i++) {\n      const sourceView = this.sceneViews[i].view;\n      const overlapViews: View[] = [];\n\n      for (let j = 0, endj = this.sceneViews.length; j < endj; j++) {\n        if (j !== i) {\n          const targetView = this.sceneViews[j].view;\n\n          if (sourceView.viewBounds.hitBounds(targetView.viewBounds)) {\n            overlapViews.push(targetView);\n          }\n        }\n      }\n\n      this.viewDrawDependencies.set(sourceView, overlapViews);\n    }\n  }\n\n  /**\n   * This allows for querying a view's screen bounds. Null is returned if the view id\n   * specified does not exist.\n   */\n  getViewSize(viewId: string): Bounds | null {\n    for (const sceneView of this.sceneViews) {\n      if (sceneView.view.id === viewId) {\n        return sceneView.view.screenBounds;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * This queries a view's window into a world's space.\n   */\n  getViewWorldBounds(viewId: string): Bounds | null {\n    for (const sceneView of this.sceneViews) {\n      if (sceneView.view.id === viewId) {\n        const view = sceneView.view;\n\n        if (view.screenBounds) {\n          const topLeft = view.viewToWorld({ x: 0, y: 0 });\n          const bottomRight = view.screenToWorld({\n            x: view.screenBounds.right,\n            y: view.screenBounds.bottom\n          });\n\n          return new Bounds({\n            bottom: bottomRight.y,\n            left: topLeft.x,\n            right: bottomRight.x,\n            top: topLeft.y\n          });\n        } else {\n          return null;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * This is the beginning of the system. This should be called immediately after the surface is constructed.\n   * We make this mandatory outside of the constructor so we can make it follow an async pattern.\n   */\n  async init(options: ILayerSurfaceOptions) {\n    // Make sure our desired pixel ratio is set up\n    this.pixelRatio = options.pixelRatio || this.pixelRatio;\n\n    if (this.pixelRatio < 1.0) {\n      this.pixelRatio = 1.0;\n    }\n\n    // Make sure we have a gl context to work with\n    this.setContext(options.context);\n\n    if (this.gl) {\n      // Initialize our GL needs that set the basis for rendering\n      this.initGL(options);\n      // Initialize our event manager that handles mouse interactions/gestures with the canvas\n      this.initMouseManager(options);\n      // Initialize any resources requested or needed, such as textures or rendering surfaces\n      await this.initResources(options);\n    } else {\n      console.warn(\n        \"Could not establish a GL context. Layer Surface will be unable to render\"\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * This initializes the Canvas GL contexts needed for rendering.\n   */\n  private initGL(options: ILayerSurfaceOptions) {\n    if (!this.context) {\n      console.error(\n        \"Can not initialize Layer Surface as a valid GL context was not established.\"\n      );\n      return;\n    }\n\n    // Get the canvas of our context to set up our Three settings\n    const canvas = this.context.canvas;\n    // Get the starting width and height so adjustments don't affect it\n    const width = canvas.width;\n    const height = canvas.height;\n\n    // Generate the renderer along with it's properties\n    this.renderer = new Three.WebGLRenderer({\n      // Context supports rendering to an alpha canvas only if the background color has a transparent\n      // Alpha value.\n      alpha: options.background && options.background[3] < 1.0,\n      // Yes to antialias! Make it preeeeetty!\n      antialias: true,\n      // Make three use an existing canvas rather than generate another\n      canvas,\n      // TODO: This should be toggleable. If it's true it allows us to snapshot the rendering in the canvas\n      //       But we dont' always want it as it makes performance drop a bit.\n      preserveDrawingBuffer: true\n    });\n\n    // Generate a renderer for the picking pass\n    this.pickingRenderer = new Three.WebGLRenderer({\n      // Context supports rendering to an alpha canvas only if the background color has a transparent\n      // Alpha value.\n      alpha: false,\n      // Picking shall not\n      antialias: false,\n      // Do not need this for picking\n      preserveDrawingBuffer: true\n    });\n\n    // NOTE: Uncomment this plus remove this.pickingTarget from the drawSceneView of the color picking pass\n    // to view the colors rendered to the color picking buffer. This disables the interactions but helps\n    // debug what's going on with shaders etc\n    // canvas.parentNode.appendChild(this.pickingRenderer.getContext().canvas);\n\n    // We want clearing to be controlled via the layer\n    this.renderer.autoClear = false;\n\n    // This sets the pixel ratio to handle differing pixel densities in screens\n    this.setRendererSize(width, height);\n    // Set the pixel ratio to match the pixel density of the monitor in use\n    this.renderer.setPixelRatio(this.pixelRatio);\n\n    // Applies the background color and establishes whether or not the context supports\n    // Alpha or not\n    if (options.background) {\n      this.renderer.setClearColor(\n        new Three.Color(\n          options.background[0],\n          options.background[1],\n          options.background[2]\n        ),\n        options.background[3]\n      );\n    } else {\n      // If a background color was not established, then we set a default background color\n      this.renderer.setClearColor(DEFAULT_BACKGROUND_COLOR);\n    }\n\n    // We want clearing to be controlled via the layer\n    this.pickingRenderer.autoClear = false;\n    // Picking does not need retina style precision\n    this.pickingRenderer.setPixelRatio(1.0);\n    // Applies the background color and establishes whether or not the context supports\n    // Alpha or not\n    this.pickingRenderer.setClearColor(new Three.Color(0, 0, 0), 1);\n\n    // Make a scene view depth tracker so we can track the order each scene view combo is drawn\n    let sceneViewDepth = 0;\n\n    // Turn on the scissor test to keep the rendering clipped within the\n    // Render region of the context\n    this.context.enable(this.context.SCISSOR_TEST);\n\n    // Add the requested scenes to the surface and apply the necessary defaults\n    if (options.scenes) {\n      options.scenes.forEach(sceneOptions => {\n        // Make us a new scene based on the requested options\n        const newScene = new Scene(sceneOptions);\n        // Use defaultSceneElement to set cameras\n        const defaultSceneElement = generateDefaultScene(this.context);\n        // Generate the views requested for the scene\n        sceneOptions.views.forEach(viewOptions => {\n          const newView = new View(viewOptions);\n          newView.camera = newView.camera || defaultSceneElement.camera;\n          newView.viewCamera =\n            newView.viewCamera || defaultSceneElement.viewCamera;\n          newView.pixelRatio = this.pixelRatio;\n          newScene.addView(newView);\n\n          for (const sceneView of this.sceneViews) {\n            if (sceneView.view.id === newView.id) {\n              console.warn(\n                \"You can NOT have two views with the same id. Please use unique identifiers for every view generated.\"\n              );\n            }\n          }\n\n          this.sceneViews.push({\n            depth: ++sceneViewDepth,\n            scene: newScene,\n            view: newView\n          });\n        });\n\n        this.scenes.set(sceneOptions.key, newScene);\n      });\n\n      this.gatherViewDrawDependencies();\n    }\n  }\n\n  /**\n   * This does special initialization by gathering the layers shader IO, generates a material\n   * and injects special automated uniforms and attributes to make instancing work for the\n   * shader.\n   */\n  private initLayer<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U>\n  ): Layer<T, U> | null {\n    // Set the layer's parent surface here\n    layer.surface = this;\n    // Set the resource manager this surface utilizes to the layer\n    layer.resource = this.resourceManager;\n    // For the sake of initializing uniforms to the correct values, we must first add the layer to it's appropriate\n    // Scene so that the necessary values will be in place for the sahder IO\n    const scene = this.addLayerToScene(layer);\n    if (!scene) return null;\n    // Get the shader metrics the layer desires\n    const shaderIO = layer.initShader();\n    // Clean out nulls provided as a convenience to the layer\n    shaderIO.instanceAttributes = (shaderIO.instanceAttributes || []).filter(\n      Boolean\n    );\n    shaderIO.vertexAttributes = (shaderIO.vertexAttributes || []).filter(\n      Boolean\n    );\n    shaderIO.uniforms = (shaderIO.uniforms || []).filter(Boolean);\n    // Get the injected shader IO attributes and uniforms\n    const { vertexAttributes, instanceAttributes, uniforms } = injectShaderIO(\n      this.gl,\n      layer,\n      shaderIO\n    );\n    // After all of the shader IO is established, let's calculate the appropriate buffering strategy\n    // For the layer.\n    getLayerBufferType(this.gl, layer, vertexAttributes, instanceAttributes);\n\n    // Generate the actual shaders to be used by injecting all of the necessary fragments and injecting\n    // Instancing fragments\n    const shaderMetrics = new ShaderProcessor().process(\n      layer,\n      shaderIO,\n      vertexAttributes,\n      instanceAttributes,\n      uniforms\n    );\n\n    // Check to see if the Shader Processing failed. If so return null as a failure flag.\n    if (!shaderMetrics) return null;\n\n    // Generate the geometry this layer will be utilizing\n    const geometry = generateLayerGeometry(\n      layer,\n      shaderMetrics.maxInstancesPerBuffer,\n      vertexAttributes,\n      shaderIO.vertexCount\n    );\n    // This is the material that is generated for the layer that utilizes all of the generated and\n    // Injected shader IO and shader fragments\n    const material = generateLayerMaterial(\n      layer,\n      shaderMetrics.vs,\n      shaderMetrics.fs,\n      uniforms,\n      shaderMetrics.materialUniforms\n    );\n    // And now we can now generate the mesh that will be added to the scene\n    const model = generateLayerModel(layer, geometry, material);\n\n    // Now that all of the elements of the layer are complete, let us apply them to the layer\n    layer.geometry = geometry;\n    layer.instanceAttributes = instanceAttributes;\n    layer.instanceVertexCount = shaderIO.vertexCount;\n    layer.material = material;\n    layer.maxInstancesPerBuffer = shaderMetrics.maxInstancesPerBuffer;\n    layer.model = model;\n    layer.uniforms = uniforms;\n    layer.vertexAttributes = vertexAttributes;\n\n    // Generate the correct buffering strategy for the layer\n    makeLayerBufferManager(this.gl, layer, scene);\n\n    if (layer.props.printShader) {\n      console.warn(\n        \"A Layer requested its shader be debugged. Do not leave this active for production:\",\n        \"Layer:\",\n        layer.props.key,\n        \"Shader Metrics\",\n        shaderMetrics\n      );\n      console.warn(\"\\n\\nVERTEX SHADER\\n--------------\\n\\n\", shaderMetrics.vs);\n      console.warn(\"\\n\\nFRAGMENT SHADER\\n--------------\\n\\n\", shaderMetrics.fs);\n    }\n\n    return layer;\n  }\n\n  /**\n   * Initializes elements for handling mouse interactions with the canvas.\n   */\n  private initMouseManager(options: ILayerSurfaceOptions) {\n    // We must inject an event manager to broadcast events through the layers themselves\n    const eventManagers: EventManager[] = ([\n      new LayerMouseEvents(this)\n    ] as EventManager[]).concat(options.eventManagers || []);\n\n    // Generate the mouse manager for the layer\n    this.mouseManager = new MouseEventManager(\n      this.context.canvas,\n      this.sceneViews,\n      eventManagers,\n      options.handlesWheelEvents\n    );\n  }\n\n  /**\n   * This initializes resources needed or requested such as textures or render surfaces.\n   */\n  private async initResources(options: ILayerSurfaceOptions) {\n    // Tell our manager to generate all of the atlas' requested for surface\n    if (options.atlasResources) {\n      for (const resource of options.atlasResources) {\n        await this.atlasManager.createAtlas(resource);\n      }\n    }\n\n    // Initialize our resource manager with the atlas manager\n    this.resourceManager = new AtlasResourceManager({\n      atlasManager: this.atlasManager\n    });\n  }\n\n  /**\n   * This finds the scene and view the layer belongs to based on the layer's props. For invalid or not provided\n   * props, the layer gets added to default scenes and views.\n   */\n  private addLayerToScene<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U>\n  ): Scene | undefined {\n    // Get the scene the layer will add itself to\n    const scene = this.scenes.get(layer.props.scene || \"\");\n\n    if (!scene) {\n      console.warn(\n        \"No scene is specified by the layer, or the scene identifier is invalid\"\n      );\n    } else {\n      // Add the layer to the scene for rendering\n      scene.addLayer(layer);\n    }\n\n    return scene;\n  }\n\n  /**\n   * Discontinues a layer's management by this surface. This will invalidate any resources\n   * the layer was using in association with the context. If the layer is re-insertted, it will\n   * be revaluated as though it were a new layer.\n   */\n  private removeLayer<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U> | null\n  ): Layer<T, U> | null {\n    // Make sure we are removing a layer that exists in the system\n    if (!layer) {\n      return null;\n    }\n    if (!this.layers.get(layer && layer.id)) {\n      console.warn(\n        \"Tried to remove a layer that is not in the manager.\",\n        layer\n      );\n      return layer;\n    }\n\n    layer.destroy();\n    this.layers.delete(layer.id);\n\n    return layer;\n  }\n\n  /**\n   * Used for reactive rendering and diffs out the layers for changed layers.\n   */\n  render(layerInitializers: LayerInitializer[]) {\n    if (!this.gl) return;\n\n    // Loop through all of the initializers and properly add and remove layers as needed\n    if (layerInitializers && layerInitializers.length > 0) {\n      layerInitializers.forEach(init => {\n        const layerClass = init[0];\n        const props = init[1];\n        const existingLayer = this.layers.get(props.key);\n\n        if (existingLayer) {\n          existingLayer.willUpdateProps(props);\n\n          // If we have a provider that is about to be newly set to the layer, then the provider\n          // needs to do a full sync in order to have existing\n          if (props.data !== existingLayer.props.data) {\n            props.data.sync();\n          }\n\n          // Check to see if the layer is going to require it's view to be redrawn based on the props for the Layer changing,\n          // or by custom logic of the layer.\n          if (existingLayer.shouldDrawView(existingLayer.props, props)) {\n            existingLayer.needsViewDrawn = true;\n          }\n\n          Object.assign(existingLayer.props, props);\n          existingLayer.initializer[1] = existingLayer.props;\n          existingLayer.didUpdateProps();\n        } else {\n          // Generate the new layer and provide it it's initial props\n          const layer = new layerClass(\n            Object.assign({}, layerClass.defaultProps, props)\n          );\n          // Keep the initializer object that generated the layer for reference and debugging\n          layer.initializer = init;\n          // Sync the data provider applied to the layer in case the provider has existing data\n          // before being applied tot he layer\n          layer.props.data.sync();\n\n          // Add the layer to this surface\n          if (!this.addLayer(layer)) {\n            console.warn(\n              \"Error initializing layer:\",\n              props.key,\n              \"A layer was unable to be added to the surface. See previous warnings (if any) to determine why they could not be instantiated\"\n            );\n\n            return;\n          }\n        }\n\n        this.willDisposeLayer.set(props.key, false);\n      });\n    }\n\n    // Take any layer that retained it's disposal flag and trash it\n    this.willDisposeLayer.forEach((dispose, layerId) => {\n      if (dispose) {\n        const layer = this.layers.get(layerId);\n        if (layer) {\n          this.removeLayer(layer);\n        } else {\n          console.warn(\n            \"this.willDisposeLayer applied to a layer that does not exist in the existing layer check.\"\n          );\n        }\n      }\n    });\n\n    // Resolve that all disposals occurred\n    this.willDisposeLayer.clear();\n\n    // Reflag every layer for removal again so creation of layers will determine\n    // Which layers remain for a reactive pattern\n    this.layers.forEach((_layer, id) => {\n      this.willDisposeLayer.set(id, true);\n    });\n  }\n\n  /**\n   * This must be executed when the canvas changes size so that we can re-calculate the scenes and views\n   * dimensions for handling all of our rendered elements.\n   */\n  fitContainer(_pixelRatio?: number) {\n    const container = this.context.canvas.parentElement;\n\n    if (container) {\n      const canvas = this.context.canvas;\n      canvas.className = \"\";\n      canvas.setAttribute(\"style\", \"\");\n      container.style.position = \"relative\";\n      canvas.style.position = \"absolute\";\n      canvas.style.left = \"0xp\";\n      canvas.style.top = \"0xp\";\n      canvas.style.width = \"100%\";\n      canvas.style.height = \"100%\";\n      canvas.setAttribute(\"width\", \"\");\n      canvas.setAttribute(\"height\", \"\");\n      const containerBox = container.getBoundingClientRect();\n      const box = canvas.getBoundingClientRect();\n\n      this.resize(box.width || 100, containerBox.height || 100);\n    }\n  }\n\n  /**\n   * This resizes the canvas and retains pixel ratios amongst all of the resources involved.\n   */\n  resize(width: number, height: number, pixelRatio?: number) {\n    this.pixelRatio = pixelRatio || this.pixelRatio;\n\n    if (this.pixelRatio < 1.0) {\n      this.pixelRatio = 1.0;\n    }\n\n    this.sceneViews.forEach(\n      sceneView => (sceneView.view.pixelRatio = this.pixelRatio)\n    );\n    this.setRendererSize(width, height);\n    this.renderer.setPixelRatio(this.pixelRatio);\n    this.pickingRenderer.setPixelRatio(1.0);\n    this.mouseManager.resize();\n    this.gatherViewDrawDependencies();\n  }\n\n  /**\n   * This establishes the rendering canvas context for the surface.\n   */\n  private setContext(\n    context?: WebGLRenderingContext | HTMLCanvasElement | string\n  ) {\n    if (!context) {\n      return;\n    }\n\n    if (isWebGLContext(context)) {\n      this.context = context;\n    } else if (isCanvas(context)) {\n      const canvasContext =\n        context.getContext(\"webgl\") || context.getContext(\"experimental-webgl\");\n\n      if (!canvasContext) {\n        console.warn(\n          \"A valid GL context was not found for the context provided to the surface. This surface will not be able to operate.\"\n        );\n      } else {\n        this.context = canvasContext;\n      }\n    } else if (isString(context)) {\n      const element = document.getElementById(context);\n\n      if (isCanvas(element)) {\n        this.setContext(element);\n      }\n    }\n  }\n\n  /**\n   * This applies a new size to the renderer and resizes any additional resources that requires being\n   * sized along with the renderer.\n   */\n  private setRendererSize(width: number, height: number) {\n    width = width || 100;\n    height = height || 100;\n\n    this.renderer.setSize(width, height);\n    this.pickingRenderer.setSize(width, height);\n\n    if (!this.pickingTarget) {\n      this.pickingTarget = new WebGLRenderTarget(width, height, {\n        magFilter: Three.LinearFilter,\n        minFilter: Three.LinearFilter,\n        stencilBuffer: false\n      });\n    }\n\n    this.pickingTarget.setSize(width, height);\n  }\n\n  /**\n   * This triggers an update to all of the layers that perform picking, the pixel data\n   * within the specified mouse range.\n   */\n  updateColorPickRange(mouse: Vec2, views: View[]) {\n    // We will flag the color range as needing an update\n    this.updateColorPick = {\n      mouse,\n      views\n    };\n  }\n}\n","export * from \"./layer-surface\";\nexport * from \"./event-manager\";\nexport * from \"./layer-processing/generate-default-scene\";\nexport * from \"./layer-processing/generate-layer-geometry\";\nexport * from \"./layer-processing/generate-layer-material\";\nexport * from \"./layer-processing/generate-layer-model\";\nexport * from \"./layer-processing/inject-shader-io\";\nexport * from \"./layer\";\nexport * from \"./mouse-event-manager\";\nexport * from \"./scene\";\nexport * from \"./texture\";\nexport * from \"./view\";\n","module.exports = \"precision highp float;\\n\\n${import: projection}\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float borderSize;\\nvarying vec2 pointCoord;\\n${extendHeader}\\n\\nvarying float scale;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  scale = scaleFactor;\\n\\n  vertexColor = color;\\n  float size = radius * scaleFactor;\\n\\n  float ringWidth = mix(2.0 , thickness, float(thickness > 2.0));\\n\\n  borderSize = mix(\\n    (ringWidth) / size,\\n    ((ringWidth * pixelRatio) / size),\\n    float(pixelRatio > 1.0)\\n  );\\n\\n  edgeSharpness = min(0.2 / (ringWidth * scale),  0.1);\\n\\n  pointCoord = (position.xy + vec2(1.0, 1.0)) / 2.0;\\n\\n  // Center within clip space\\n  vec4 clipCenter = clipSpace(vec3(center, depth));\\n  // Center in screen space\\n  vec2 screenCenter = (clipCenter.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Position in screen space\\n  vec2 vertex = (position.xy * size) + screenCenter;\\n  // Position back to clip space\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), clipCenter.zw);\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\n/** This is the color of the ring */\\nvarying vec4 vertexColor;\\n/**\\n * This is how sharp the ring renders. For tiny rings, it's best to have\\n * less sharpness to better convey the shape of a circle. A good starter setting:\\n * edgeSharpness = mix(0.8, 0.01, min(gl_PointSize / 45.0, 1.0));\\n */\\nvarying float edgeSharpness;\\n/**\\n * This should be a value that sets the thickness of the ring in normal space\\n * relative to the PointSize\\n */\\nvarying float borderSize;\\n/**\\n * Since this is now a quad instead of a point sprite, this provides what gl_PointCoord\\n * used to provide.\\n */\\nvarying vec2 pointCoord;\\n\\nvarying float scale;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius,\\n    dot(dist, dist) * 4.0\\n  );\\n\\n}\\n\\n${extendHeader}\\n\\nvoid main() {\\n  float outer_step_factor = circle(pointCoord, 1.0);\\n  float inner_step_factor = circle(pointCoord, 1.0 - borderSize * scale);\\n\\n  setColor(mix(\\n    mix(                        // Select the outer color outside of the inner radius\\n      vec4(0.0, 0.0, 0.0, 0.0),    // Select invisible outside of inner and outer radius\\n      vertexColor,                  // Select outer color outside of inner, but inside outer\\n      outer_step_factor\\n    ),\\n    vec4(0.0, 0.0, 0.0, 0.0),                 // Select inner color inside inner\\n    inner_step_factor\\n  ));\\n\\n  ${extend}\\n}\\n\"","import * as Three from \"three\";\nimport { InstanceProvider } from \"../../instance-provider\";\nimport { Bounds, IPoint } from \"../../primitives\";\nimport { ILayerProps, IModelType, Layer } from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  IProjection,\n  IShaderInitialization,\n  IUniform,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport { CommonMaterialOptions, IAutoEasingMethod, Vec } from \"../../util\";\nimport { RingInstance } from \"./ring-instance\";\nconst { max } = Math;\n\nexport interface IRingLayerProps<T extends RingInstance>\n  extends ILayerProps<T> {\n  /** This sets a scaling factor for the circle's radius */\n  scaleFactor?(): number;\n  animate?: {\n    color?: IAutoEasingMethod<Vec>;\n    center?: IAutoEasingMethod<Vec>;\n    radius?: IAutoEasingMethod<Vec>;\n  };\n}\n\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class RingLayer<\n  T extends RingInstance,\n  U extends IRingLayerProps<T>\n> extends Layer<T, U> {\n  static defaultProps: IRingLayerProps<RingInstance> = {\n    key: \"\",\n    data: new InstanceProvider<RingInstance>(),\n    scene: \"default\"\n  };\n\n  static attributeNames = {\n    center: \"center\",\n    radius: \"radius\",\n    depth: \"depth\",\n    color: \"color\",\n    thickness: \"thickness\"\n  };\n\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods() {\n    return {\n      // Provide the calculated AABB world bounds for a given circle\n      boundsAccessor: (ring: RingInstance) =>\n        new Bounds({\n          height: ring.radius * 2,\n          width: ring.radius * 2,\n          x: ring.center[0] - ring.radius,\n          y: ring.center[1] - ring.radius\n        }),\n\n      // Provide a precise hit test for the ring\n      hitTest: (ring: RingInstance, point: IPoint, view: IProjection) => {\n        const r = ring.radius / max(...view.camera.scale);\n        const delta = [point.x - ring.center[0], point.y - ring.center[1]];\n\n        return delta[0] * delta[0] + delta[1] * delta[1] < r * r;\n      }\n    };\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<RingInstance> {\n    const scaleFactor = this.props.scaleFactor || (() => 1);\n    const animations = this.props.animate || {};\n    const {\n      color: animateColor,\n      center: animateCenter,\n      radius: animateRadius\n    } = animations;\n\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      1: 1,\n      2: -1,\n      3: 1,\n      4: -1,\n      5: -1\n    };\n\n    const vertexToSide: { [key: number]: number } = {\n      0: -1,\n      1: -1,\n      2: -1,\n      3: 1,\n      4: 1,\n      5: 1\n    };\n\n    return {\n      fs: require(\"./ring-layer.fs\"),\n      instanceAttributes: [\n        {\n          easing: animateCenter,\n          name: RingLayer.attributeNames.center,\n          size: InstanceAttributeSize.TWO,\n          update: o => o.center\n        },\n        {\n          easing: animateRadius,\n          name: RingLayer.attributeNames.radius,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.radius]\n        },\n        {\n          name: RingLayer.attributeNames.depth,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth]\n        },\n        {\n          easing: animateColor,\n          name: RingLayer.attributeNames.color,\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.color\n        },\n        {\n          name: RingLayer.attributeNames.thickness,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.thickness]\n        }\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: (_: IUniform) => [scaleFactor()]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexToSide[vertex],\n            0\n          ]\n        }\n      ],\n      vertexCount: 6,\n      vs: require(\"./ring-layer.vs\")\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentShape;\n  }\n}\n","import { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { observable } from \"../../instance-provider/observable\";\nimport { Vec2 } from \"../../util\";\n\nexport interface IRingInstanceOptions extends IInstanceOptions {\n  /** The center of the ring */\n  center?: Vec2;\n  /** The color of this ring */\n  color?: [number, number, number, number];\n  /** The z depth of the ring (for draw ordering) */\n  depth?: number;\n  /** The outer radius of the ring */\n  radius?: number;\n  /** The thickness of the ring */\n  thickness?: number;\n}\n\nexport class RingInstance extends Instance {\n  @observable color: [number, number, number, number] = [1.0, 1.0, 1.0, 1.0];\n  @observable depth: number = 0;\n  @observable radius: number = 0;\n  @observable thickness: number = 1;\n  @observable center: Vec2 = [0, 0];\n\n  constructor(options: IRingInstanceOptions) {\n    super(options);\n\n    this.color = options.color || this.color;\n    this.depth = options.depth || this.depth;\n    this.radius = options.radius || this.radius;\n    this.thickness = options.thickness || this.thickness;\n    this.center = options.center || this.center;\n  }\n\n  get width() {\n    return this.radius * 2;\n  }\n\n  get height() {\n    return this.radius * 2;\n  }\n\n  get innerRadius() {\n    return this.radius - this.thickness;\n  }\n}\n","export * from \"./ring-instance\";\nexport * from \"./ring-layer\";\n","import { observable } from \"../../instance-provider\";\nimport { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { Anchor, AnchorType, ScaleType } from \"../types\";\n\nexport interface IRectangleInstanceOptions extends IInstanceOptions {\n  /**\n   * The point on the rectangle which will be placed in world space via the x, y coords. This is also the point\n   * which the rectangle will be scaled around.\n   */\n  anchor?: Anchor;\n  /** Depth sorting of the rectangle (or the z value of the lable) */\n  depth?: number;\n  /** The height of the rectangle as it is to be rendered in world space */\n  height?: number;\n  /** Sets the way the rectangle scales with the world */\n  scaling?: ScaleType;\n  /** The color the rectangle should render as */\n  color: [number, number, number, number];\n  /** The width of the rectangle as it is to be rendered in world space */\n  width?: number;\n  /** The x coordinate where the rectangle will be anchored to in world space */\n  x?: number;\n  /** The y coordinate where the rectangle will be anchored to in world space */\n  y?: number;\n}\n\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nconst anchorCalculator: {\n  [key: number]: (anchor: Anchor, rectangle: RectangleInstance) => void;\n} = {\n  [AnchorType.TopLeft]: (anchor: Anchor, _rectangle: RectangleInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopMiddle]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width / 2.0;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopRight]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width + anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.MiddleLeft]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = rectangle.height / 2;\n  },\n  [AnchorType.Middle]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width / 2.0;\n    anchor.y = rectangle.height / 2.0;\n  },\n  [AnchorType.MiddleRight]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width + anchor.padding;\n    anchor.y = rectangle.height / 2.0;\n  },\n  [AnchorType.BottomLeft]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = rectangle.height + anchor.padding;\n  },\n  [AnchorType.BottomMiddle]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width / 2.0;\n    anchor.y = rectangle.height + anchor.padding;\n  },\n  [AnchorType.BottomRight]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width + anchor.padding;\n    anchor.y = rectangle.height + anchor.padding;\n  },\n  [AnchorType.Custom]: (anchor: Anchor, _rectangle: RectangleInstance) => {\n    anchor.x = anchor.x || 0;\n    anchor.y = anchor.y || 0;\n  }\n};\n\n/**\n * This generates a new rectangle instance which will render a single line of text for a given layer.\n * There are restrictions surrounding rectangles due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a rectangle via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Rectangles should only be so long.\n * - Multiline is not supported inherently\n * - Once a rectangle is constructed, only SOME properties can be altered thereafter\n *\n * A rectangle that is constructed can only have some properties set upon creating the rectangle and are locked\n * thereafter. The only way to modify them would be to destroy the rectangle, then construct a new rectangle\n * with the modifications. This has to deal with performance regarding rasterizing the rectangle\n */\nexport class RectangleInstance extends Instance {\n  /** This is the rendered color of the rectangle */\n  @observable color: [number, number, number, number] = [0, 0, 0, 1];\n  /** Depth sorting of the rectangle (or the z value of the lable) */\n  @observable depth: number = 0;\n  /** The height of the rectangle as it is to be rendered in world space */\n  @observable height: number = 1;\n  /** When in BOUND_MAX mode, this allows the rectangle to scale up beyond it's max size */\n  @observable maxScale: number = 1;\n  /** Scales the rectangle uniformly */\n  @observable scale: number = 1;\n  /** Sets the way the rectangle scales with the world */\n  @observable scaling: ScaleType = ScaleType.BOUND_MAX;\n  /** The width of the rectangle as it is to be rendered in world space */\n  @observable width: number = 1;\n  /** The x coordinate where the rectangle will be anchored to in world space */\n  @observable x: number = 0;\n  /** The y coordinate where the rectangle will be anchored to in world space */\n  @observable y: number = 0;\n\n  // These are properties that can be altered, but have side effects from being changed\n\n  /** This is the anchor location on the  */\n  @observable\n  private _anchor: Anchor = {\n    padding: 0,\n    type: AnchorType.TopLeft,\n    x: 0,\n    y: 0\n  };\n\n  constructor(options: IRectangleInstanceOptions) {\n    super(options);\n\n    this.depth = options.depth || this.depth;\n    this.color = options.color || this.color;\n    this.scaling = options.scaling || this.scaling;\n    this.x = options.x || this.x;\n    this.y = options.y || this.y;\n    this.width = options.width || 1;\n    this.height = options.height || 1;\n\n    // Make sure the anchor is set to the appropriate location\n    options.anchor && this.setAnchor(options.anchor);\n  }\n\n  get anchor() {\n    return this._anchor;\n  }\n\n  /**\n   * This applies a new anchor to this rectangle and properly determines it's anchor position on the rectangle\n   */\n  setAnchor(anchor: Anchor) {\n    const newAnchor = {\n      padding: anchor.padding || 0,\n      type: anchor.type,\n      x: anchor.x || 0,\n      y: anchor.y || 0\n    };\n\n    // Calculate the new anchors position values\n    anchorCalculator[newAnchor.type](newAnchor, this);\n    // Apply the anchor\n    this._anchor = newAnchor;\n  }\n}\n","module.exports = \"${import: projection}\\n\\nprecision highp float;\\n\\nvarying vec4 vertexColor;\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Determine final screen size of label\\n  vec3 screenSize = cameraSpaceSize(vec3(size * scale / maxScale, 1.0));\\n\\n  // Test whether the label is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y || screenSize.x > size.x;\\n\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n\\n  // Correct aspect ratio. Sufficient fix for most applications.\\n  // Will need another solution in the case of:\\n  // (cameraScale y != cameraScale.x) && (cameraScale.x != 1 && cameraScale.y != 1)\\n\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float(cameraScale.x != cameraScale.y);\\n\\n  vec2 adjustedSize = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  vec2 scaledAnchor = anchor * scale;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + scaledAnchor;\\n\\n  vec2 adjustedAnchor = mix(\\n    scaledAnchor,\\n    (scaledAnchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // Get the position of the current vertex\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * scale * adjustedSize + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the label\\n  float labelScreenScale = mix(\\n    screenSize.y / adjustedSize.y,\\n    screenSize.x / adjustedSize.x,\\n    float((cameraScale.x != 1.0))\\n  );\\n\\n  float currentScale = labelScreenScale * scale;\\n\\n  // If our screen rendering is larger than the size the label is supposed to be, then we automagically\\n  // scale down our label to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / labelScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  // --Texture and Color\\n  // Apply the label's color as a tint to the label (all labels are rendered white to the base texture)\\n  vertexColor = color;\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\n${extendHeader}\\n\\nvoid main() {\\n  setColor(vertexColor);\\n  ${extend}\\n}\\n\"","import * as Three from \"three\";\nimport { InstanceProvider } from \"../../instance-provider\";\nimport { Bounds, IPoint } from \"../../primitives\";\nimport { ILayerProps, IModelType, Layer } from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  IProjection,\n  IShaderInitialization,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport { CommonMaterialOptions } from \"../../util\";\nimport { ScaleType } from \"../types\";\nimport { RectangleInstance } from \"./rectangle-instance\";\n\nconst { min, max } = Math;\n\nexport interface IRectangleLayerProps<T extends RectangleInstance>\n  extends ILayerProps<T> {\n  atlas?: string;\n}\n\n/**\n * This layer displays Rectangles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class RectangleLayer<\n  T extends RectangleInstance,\n  U extends IRectangleLayerProps<T>\n> extends Layer<T, U> {\n  static defaultProps: IRectangleLayerProps<RectangleInstance> = {\n    key: \"\",\n    data: new InstanceProvider<RectangleInstance>(),\n    scene: \"default\"\n  };\n\n  static attributeNames = {\n    anchor: \"anchor\",\n    color: \"color\",\n    depth: \"depth\",\n    location: \"location\",\n    maxScale: \"maxScale\",\n    scale: \"scale\",\n    scaling: \"scaling\",\n    size: \"size\"\n  };\n\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods() {\n    return {\n      // Provide the calculated AABB world bounds for a given rectangle\n      boundsAccessor: (rectangle: RectangleInstance) => {\n        const anchorEffect = [0, 0];\n\n        if (rectangle.anchor) {\n          anchorEffect[0] = rectangle.anchor.x || 0;\n          anchorEffect[1] = rectangle.anchor.y || 0;\n        }\n        const topLeft = [\n          rectangle.x - anchorEffect[0],\n          rectangle.y - anchorEffect[1]\n        ];\n\n        return new Bounds({\n          height: rectangle.height,\n          width: rectangle.width,\n          x: topLeft[0],\n          y: topLeft[1]\n        });\n      },\n\n      // Provide a precise hit test for the circle\n      hitTest: (\n        rectangle: RectangleInstance,\n        point: IPoint,\n        projection: IProjection\n      ) => {\n        // The bounds of the rectangle is in world space, but it does not account for the scale mode of the rectangle.\n        // Here, we will apply the scale mode testing to the rectangle\n        const maxScale = max(...projection.camera.scale);\n        const minScale = min(...projection.camera.scale);\n\n        // If we scale always then the rectangle stays within it's initial world bounds at all times\n        if (rectangle.scaling === ScaleType.ALWAYS) {\n          return true;\n        } else if (rectangle.scaling === ScaleType.BOUND_MAX) {\n          // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n          // Rectangle the same size. If the camera zooms out then the bounds === the world bounds.\n          // We are zooming out. the bounds will stay within the world bounds\n          if (minScale <= 1 && maxScale <= 1) {\n            return true;\n          } else {\n            // We are zooming in. The bounds will shrink to keep the rectangle at max font size\n            // The location is within the world, but we reverse project the anchor spread\n            const anchorEffect = [0, 0];\n\n            if (rectangle.anchor) {\n              anchorEffect[0] = rectangle.anchor.x || 0;\n              anchorEffect[1] = rectangle.anchor.y || 0;\n            }\n\n            const topLeft = [\n              rectangle.x - anchorEffect[0] / maxScale,\n              rectangle.y - anchorEffect[1] / maxScale\n            ];\n\n            // Reverse project the size and we should be within the distorted world coordinates\n            return new Bounds({\n              height: rectangle.height / maxScale,\n              width: rectangle.width / maxScale,\n              x: topLeft[0],\n              y: topLeft[1]\n            }).containsPoint(point);\n          }\n        } else if (rectangle.scaling === ScaleType.NEVER) {\n          // If we never allow the rectangle to scale, then the bounds will grow and shrink to counter the effects\n          // Of the camera zoom\n          // The location is within the world, but we reverse project the anchor spread\n          const anchorEffect = [0, 0];\n\n          if (rectangle.anchor) {\n            anchorEffect[0] = rectangle.anchor.x || 0;\n            anchorEffect[1] = rectangle.anchor.y || 0;\n          }\n\n          const topLeft = projection.worldToScreen({\n            x: rectangle.x - anchorEffect[0] / projection.camera.scale[0],\n            y: rectangle.y - anchorEffect[1] / projection.camera.scale[1]\n          });\n\n          const screenPoint = projection.worldToScreen(point);\n\n          // Reverse project the size and we should be within the distorted world coordinates\n          return new Bounds({\n            height: rectangle.height,\n            width: rectangle.width,\n            x: topLeft.x,\n            y: topLeft.y\n          }).containsPoint(screenPoint);\n        }\n\n        return true;\n      }\n    };\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<RectangleInstance> {\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      1: 1,\n      2: -1,\n      3: 1,\n      4: -1,\n      5: -1\n    };\n\n    const vertexToSide: { [key: number]: number } = {\n      0: 0,\n      1: 0,\n      2: 0,\n      3: 1,\n      4: 1,\n      5: 1\n    };\n\n    return {\n      fs: require(\"./rectangle-layer.fs\"),\n      instanceAttributes: [\n        {\n          name: RectangleLayer.attributeNames.location,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.x, o.y]\n        },\n        {\n          name: RectangleLayer.attributeNames.anchor,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.anchor.x || 0, o.anchor.y || 0]\n        },\n        {\n          name: RectangleLayer.attributeNames.size,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.width, o.height]\n        },\n        {\n          name: RectangleLayer.attributeNames.depth,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth]\n        },\n        {\n          name: RectangleLayer.attributeNames.scaling,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.scaling]\n        },\n        {\n          name: RectangleLayer.attributeNames.color,\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.color\n        },\n        {\n          name: RectangleLayer.attributeNames.scale,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.scale]\n        },\n        {\n          name: RectangleLayer.attributeNames.maxScale,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.maxScale]\n        }\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: _u => [1]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexToSide[vertex],\n            0\n          ]\n        }\n      ],\n      vertexCount: 6,\n      vs: require(\"./rectangle-layer.vs\")\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentShape;\n  }\n}\n","export * from \"./rectangle-layer\";\nexport * from \"./rectangle-instance\";\n","import { observable } from \"../../instance-provider\";\nimport { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { Label } from \"../../primitives/label\";\nimport { LabelAtlasResource, LabelRasterizer } from \"../../surface/texture\";\nimport { Anchor, AnchorType, ScaleType } from \"../types\";\n\nexport interface ILabelInstanceOptions\n  extends IInstanceOptions,\n    Partial<Label> {\n  /**\n   * The point on the label which will be placed in world space via the x, y coords. This is also the point\n   * which the label will be scaled around.\n   */\n  anchor?: Anchor;\n  /** The color the label should render as */\n  color: [number, number, number, number];\n  /** Depth sorting of the label (or the z value of the label) */\n  depth?: number;\n  /** The font of the label */\n  fontFamily?: string;\n  /** The font size of the label in px */\n  fontSize?: number;\n  /** Stylization of the font */\n  fontStyle?: Label[\"fontStyle\"];\n  /** The weight of the font */\n  fontWeight?: Label[\"fontWeight\"];\n  /** When this is set labels will only draw the label up to this size. If below, the label will automatically truncate with ellipses */\n  maxWidth?: number;\n  /** When in BOUND_MAX mode, this allows the label to scale up beyond it's max size */\n  maxScale?: number;\n  /** This allows for control over rasterization to the atlas */\n  rasterization?: {\n    /**\n     * This is the scale of the rasterization on the atlas. Higher numbers increase atlas usage, but can provide\n     * higher quality render outputs to the surface.\n     */\n    scale: number;\n  };\n  /** Sets the way the label scales with the world */\n  scaling?: ScaleType;\n  /** Scales the label uniformly */\n  scale?: number;\n  /** This will be the text that should render with  */\n  text: string;\n  /** The x coordinate where the label will be anchored to in world space */\n  x?: number;\n  /** The y coordinate where the label will be anchored to in world space */\n  y?: number;\n}\n\n/** This is to make a clear type that references label text values */\ntype TextValue = string;\n/** This is to make a clear type that references label css font values */\ntype CSSFont = string;\n/**\n * This is a reference for a rasterization that has reference counting. When the references go to zero,\n * the rasterization should be invalidated and resources freed for the rasterization.\n */\ntype RasterizationReference = {\n  resource: LabelAtlasResource;\n  references: number;\n};\n\n/**\n * This is a lookup to find existing rasterizations for a particularly created label so that every\n * new label does not have to go through the rasterization process.\n */\nconst rasterizationLookUp = new Map<\n  TextValue,\n  Map<CSSFont, RasterizationReference>\n>();\n\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nconst anchorCalculator: {\n  [key: number]: (anchor: Anchor, label: LabelInstance) => void;\n} = {\n  [AnchorType.TopLeft]: (anchor: Anchor, _label: LabelInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopMiddle]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width / 2.0;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopRight]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width + anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.MiddleLeft]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = label.height / 2;\n  },\n  [AnchorType.Middle]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width / 2.0;\n    anchor.y = label.height / 2.0;\n  },\n  [AnchorType.MiddleRight]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width + anchor.padding;\n    anchor.y = label.height / 2.0;\n  },\n  [AnchorType.BottomLeft]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = label.height + anchor.padding;\n  },\n  [AnchorType.BottomMiddle]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width / 2.0;\n    anchor.y = label.height + anchor.padding;\n  },\n  [AnchorType.BottomRight]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width + anchor.padding;\n    anchor.y = label.height + anchor.padding;\n  },\n  [AnchorType.Custom]: (anchor: Anchor, _label: LabelInstance) => {\n    anchor.x = anchor.x || 0;\n    anchor.y = anchor.y || 0;\n  }\n};\n\n/**\n * This generates a new label instance which will render a single line of text for a given layer.\n * There are restrictions surrounding labels due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a label via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Labels should only be so long.\n * - Multiline is not supported inherently\n * - Once a label is constructed, only SOME properties can be altered thereafter\n *\n * A label that is constructed can only have some properties set upon creating the label and are locked\n * thereafter. The only way to modify them would be to destroy the label, then construct a new label\n * with the modifications. This has to deal with performance regarding rasterizing the label\n */\nexport class LabelInstance extends Instance implements Label {\n  /**\n   * TODO: We should be implementing the destroy on LabelInstances to clean this up\n   * Frees up module scoped data.\n   */\n  static destroy() {\n    rasterizationLookUp.clear();\n  }\n\n  /** This is the rendered color of the label */\n  @observable color: [number, number, number, number] = [0, 0, 0, 1];\n  /** Depth sorting of the label (or the z value of the label) */\n  @observable depth: number = 0;\n  /** When in BOUND_MAX mode, this allows the label to scale up beyond it's max size */\n  @observable maxScale: number = 1;\n  /** Sets the way the label scales with the world */\n  @observable scaling: ScaleType = ScaleType.BOUND_MAX;\n  /** Scales the label uniformly */\n  @observable scale: number = 1.0;\n  /** The x coordinate where the label will be anchored to in world space */\n  @observable x: number = 0;\n  /** The y coordinate where the label will be anchored to in world space */\n  @observable y: number = 0;\n\n  // The following properties are properties that are locked in after creating this label\n  // As the properties are completely locked into how the label was rasterized and can not\n  // Nor should not be easily adjusted for performance concerns\n\n  private _cssFont: string = \"\";\n  private _fontFamily: string = \"Arial\";\n  private _fontSize: number = 12;\n  private _fontStyle: Label[\"fontStyle\"] = \"normal\";\n  private _fontWeight: Label[\"fontWeight\"] = 400;\n  private _maxWidth: number = 0;\n  private _text: string = \"\";\n\n  @observable private _width: number = 0;\n\n  @observable private _height: number = 0;\n\n  private _isDestroyed: boolean = false;\n\n  @observable private _rasterization: RasterizationReference;\n\n  // The following are the getters for the locked in parameters of the label so we can read\n  // The properties but not set any of them.\n\n  /**\n   * This is the full css string that represents this label. This + the text of the label is essentially\n   * a unique identifier for the rendering of the label and is used to key the rasterization of the label\n   * so that label rasterization can be shared for similar labels.\n   */\n  get cssFont() {\n    return this._cssFont;\n  }\n  /** This flag indicates if this label is valid anymore */\n  get isDestroyed() {\n    return this._isDestroyed;\n  }\n  /** This is the font family of the label */\n  get fontFamily() {\n    return this._fontFamily;\n  }\n  /**\n   * This is the size of the label in pixels. For Labels, this correlates to the rendering font size.\n   * The true pixel height of the label is calculated and placed into the height property for the label.\n   */\n  get fontSize() {\n    return this._fontSize;\n  }\n  /** This is the style of the font (italic, oblique, etc) */\n  get fontStyle() {\n    return this._fontStyle;\n  }\n  /** This is the font weight specified for the label (bold, normal, etc). */\n  get fontWeight() {\n    return this._fontWeight;\n  }\n  /** This is the max width in pixels this label can fill */\n  get maxWidth() {\n    return this._maxWidth;\n  }\n  /** This gets the atlas resource that is uniquely identified for this label */\n  get resource() {\n    return this._rasterization.resource;\n  }\n  /** This is the label's text. */\n  get text() {\n    return this._text;\n  }\n  /**\n   * If a maxWidth is specified, there is a chance the text will be truncated.\n   * This provides the calculated truncated text.\n   */\n  get truncatedText() {\n    return this._rasterization.resource.truncatedText || this.text;\n  }\n\n  /**\n   * This is the width in world space of the label. If there is no camera distortion,\n   * this would be the width of the label in pixels on the screen.\n   */\n  get width() {\n    return this._width;\n  }\n\n  /**\n   * This is the height in world space of the label. If there is no camera distortion,\n   * this would be the height of the label in pixels on the screen.\n   */\n  get height() {\n    return this._height;\n  }\n\n  // These are properties that can be altered, but have side effects from being changed\n\n  /** This is the anchor location on the  */\n  @observable\n  private _anchor: Anchor = {\n    padding: 0,\n    type: AnchorType.TopLeft,\n    x: 0,\n    y: 0\n  };\n\n  constructor(options: ILabelInstanceOptions) {\n    super(options);\n\n    this.depth = options.depth || this.depth;\n    this.color = options.color || this.color;\n    this.maxScale = options.maxScale || this.maxScale;\n    this.scaling = options.scaling || this.scaling;\n    this.scale = options.scale || this.scale;\n\n    this.x = options.x || this.x;\n    this.y = options.y || this.y;\n\n    this._fontFamily = options.fontFamily || this._fontFamily;\n    this._fontSize = options.fontSize || this._fontSize;\n    this._fontStyle = options.fontStyle || this._fontStyle;\n    this._fontWeight = options.fontWeight || this._fontWeight;\n    this._maxWidth = options.maxWidth || 0;\n    this._text = options.text || this._text;\n\n    // We get the CSS font string for this label so we can uniquely identify the rasterization\n    // Easily.\n    this._cssFont = LabelRasterizer.makeCSSFont(this, 1);\n    // This is css font used to look up rasterizations. This lookup includes the max width of the label\n    // Which the css font does not account for\n    const cssFontLookup = `${this._cssFont}_${this._maxWidth}`;\n    // Look for other same texts that have been rasterized\n    let rasterizations = rasterizationLookUp.get(this._text);\n    let rasterization: RasterizationReference | null | undefined;\n\n    if (rasterizations) {\n      // Look for those texts that have been rasterized in the same fashion that this label is requesting\n      rasterization = rasterizations.get(cssFontLookup);\n\n      // If a rasterization exists, we must increment the use reference\n      if (rasterization) {\n        rasterization.references++;\n      }\n    } else {\n      rasterizations = new Map<CSSFont, RasterizationReference>();\n    }\n\n    // If we have not found an existing rasterization\n    if (!rasterization) {\n      rasterization = {\n        references: 1,\n        resource: new LabelAtlasResource(this)\n      };\n\n      // Look to see if any rasterization options were specified\n      if (options.rasterization) {\n        rasterization.resource.sampleScale = options.rasterization.scale || 1.0;\n      }\n\n      // Ensure the sample scale is set. Defaults to 1.0\n      rasterization.resource.sampleScale =\n        rasterization.resource.sampleScale || 1.0;\n      // Rasterize the resource generated for this label. We need it immediately rasterized so\n      // That we can utilize the dimensions for calculations.\n      LabelRasterizer.renderSync(rasterization.resource);\n      // Now that we have an official rasterization for this text / label combo, we shall store it\n      // For others to look up\n      rasterizationLookUp.set(this._text, rasterizations);\n      rasterizations.set(cssFontLookup, rasterization);\n    }\n\n    this._rasterization = rasterization;\n    this._width = rasterization.resource.rasterization.world.width;\n    this._height = rasterization.resource.rasterization.world.height;\n\n    // Make sure the anchor is set to the appropriate location\n    options.anchor && this.setAnchor(options.anchor);\n  }\n\n  get anchor() {\n    return this._anchor;\n  }\n\n  /**\n   * Labels are a sort of unique case where the use of a label should be destroyed as rasterization\n   * resources are in a way kept alive through reference counting.\n   */\n  destroy() {\n    if (!this._isDestroyed) {\n      this._isDestroyed = true;\n      this._rasterization.references--;\n\n      // If all references are cleared, then the rasterization needs to be eradicated\n      if (this._rasterization.references === 0) {\n        this._rasterization.resource;\n      }\n    }\n  }\n\n  /**\n   * Triggers any attributes waiting on resources\n   */\n  resourceTrigger() {\n    // Trigger the accessed element that the layer utilizes for resource fetching.\n    this._rasterization = this._rasterization;\n    this._width = this._width;\n    // Make sure all public properties that could have changed during the load are triggered\n    // so they properly have updated all of their elements.\n    this.x = this.x;\n    this.y = this.y;\n    this.color = this.color;\n    this.depth = this.depth;\n    this.maxScale = this.maxScale;\n    this.scaling = this.scaling;\n    this.scale = this.scale;\n  }\n\n  /**\n   * This applies a new anchor to this label and properly determines it's anchor position on the label\n   */\n  setAnchor(anchor: Anchor) {\n    const newAnchor = {\n      padding: anchor.padding || 0,\n      type: anchor.type,\n      x: anchor.x || 0,\n      y: anchor.y || 0\n    };\n\n    // Calculate the new anchors position values\n    anchorCalculator[newAnchor.type](newAnchor, this);\n    // Apply the anchor\n    this._anchor = newAnchor;\n  }\n}\n","module.exports = \"precision highp float;\\n\\n${import: projection}\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Determine final screen size of label\\n  vec3 screenSize = cameraSpaceSize(vec3(size * scale / maxScale, 1.0));\\n\\n  // Test whether the label is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y || screenSize.x > size.x;\\n\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n\\n  // Correct aspect ratio.  Sufficient fix for most applications.\\n  // Will need another solution in the case of:\\n  //  (cameraScale y != cameraScale.x) && (cameraScale.x != 1 && cameraScale.y != 1)\\n\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float(cameraScale.x != cameraScale.y);\\n\\n  vec2 adjustedSize = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  vec2 scaledAnchor = anchor * scale;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + scaledAnchor;\\n\\n  vec2 adjustedAnchor = mix(\\n    scaledAnchor,\\n    (scaledAnchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // Get the position of the current vertex\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * scale * adjustedSize + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the label\\n  float labelScreenScale = mix(\\n    screenSize.y / adjustedSize.y,\\n    screenSize.x / adjustedSize.x,\\n    float((cameraScale.x != 1.0))\\n  );\\n\\n  float currentScale = labelScreenScale * scale;\\n\\n  // If our screen rendering is larger than the size the label is supposed to be, then we automagically\\n  // scale down our label to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / labelScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  // --Texture and Color\\n  // Get the tex coord from our inject texture info\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the label's color as a tint to the label (all labels are rendered white to the base texture)\\n  vertexColor = color * color.a;\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n${extendHeader}\\n\\nvoid main() {\\n  gl_FragColor = texture2D(labelAtlas, texCoord) * vertexColor;\\n  setColor(gl_FragColor);\\n  ${extend}\\n}\\n\"","import * as Three from \"three\";\nimport { InstanceProvider } from \"../../instance-provider\";\nimport { Bounds, IPoint } from \"../../primitives\";\nimport { ILayerProps, IModelType, Layer } from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  IProjection,\n  IShaderInitialization,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport {\n  CommonMaterialOptions,\n  IAutoEasingMethod,\n  Vec,\n  Vec2\n} from \"../../util\";\nimport { ScaleType } from \"../types\";\nimport { LabelInstance } from \"./label-instance\";\n\nexport interface ILabelLayerProps<T extends LabelInstance>\n  extends ILayerProps<T> {\n  atlas?: string;\n  animate?: {\n    color?: IAutoEasingMethod<Vec>;\n    location?: IAutoEasingMethod<Vec>;\n    size?: IAutoEasingMethod<Vec>;\n  };\n}\n\nconst { max, min } = Math;\n\n/**\n * This layer displays Labels and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class LabelLayer<\n  T extends LabelInstance,\n  U extends ILabelLayerProps<T>\n> extends Layer<T, U> {\n  static defaultProps: ILabelLayerProps<LabelInstance> = {\n    key: \"\",\n    data: new InstanceProvider<LabelInstance>(),\n    scene: \"default\"\n  };\n\n  static attributeNames = {\n    location: \"location\",\n    anchor: \"anchor\",\n    size: \"size\",\n    depth: \"depth\",\n    scaling: \"scaling\",\n    texture: \"texture\",\n    color: \"color\",\n    scale: \"scale\",\n    maxScale: \"maxScale\"\n  };\n\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods() {\n    return {\n      // Provide the calculated AABB world bounds for a given label\n      boundsAccessor: (label: LabelInstance) => {\n        const anchor: Vec2 = [label.anchor.x || 0, label.anchor.y || 0];\n\n        const topLeft = [label.x - anchor[0], label.y - anchor[1]];\n\n        return new Bounds({\n          height: label.height,\n          width: label.width,\n          x: topLeft[0],\n          y: topLeft[1]\n        });\n      },\n\n      // Provide a precise hit test for the circle\n      hitTest: (label: LabelInstance, point: IPoint, view: IProjection) => {\n        // The bounds of the label is in world space, but it does not account for the scale mode of the label.\n        // Here, we will apply the scale mode testing to the label\n        const maxScale = max(...view.camera.scale);\n        const minScale = min(...view.camera.scale);\n\n        // If we scale always then the label stays within it's initial world bounds at all times\n        if (label.scaling === ScaleType.ALWAYS) {\n          return true;\n        } else if (label.scaling === ScaleType.BOUND_MAX) {\n          // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n          // Label the same size. If the camera zooms out then the bounds === the world bounds.\n          // We are zooming out. the bounds will stay within the world bounds\n          if (minScale <= 1 && maxScale <= 1) {\n            return true;\n          } else {\n            // We are zooming in. The bounds will shrink to keep the label at max font size\n            const anchor: Vec2 = [label.anchor.x || 0, label.anchor.y || 0];\n\n            // The location is within the world, but we reverse project the anchor spread\n            const topLeft = view.worldToScreen({\n              x: label.x - anchor[0] / view.camera.scale[0],\n              y: label.y - anchor[1] / view.camera.scale[1]\n            });\n\n            const screenPoint = view.worldToScreen(point);\n\n            // Reverse project the size and we should be within the distorted world coordinates\n            return new Bounds({\n              height: label.height,\n              width: label.width,\n              x: topLeft.x,\n              y: topLeft.y\n            }).containsPoint(screenPoint);\n          }\n        } else if (label.scaling === ScaleType.NEVER) {\n          // If we never allow the label to scale, then the bounds will grow and shrink to counter the effects\n          // Of the camera zoom\n          const anchor: Vec2 = [label.anchor.x || 0, label.anchor.y || 0];\n\n          // The location is within the world, but we reverse project the anchor spread\n          const topLeft = view.worldToScreen({\n            x: label.x - anchor[0] / view.camera.scale[0],\n            y: label.y - anchor[1] / view.camera.scale[1]\n          });\n\n          const screenPoint = view.worldToScreen(point);\n\n          // Reverse project the size and we should be within the distorted world coordinates\n          return new Bounds({\n            height: label.height,\n            width: label.width,\n            x: topLeft.x,\n            y: topLeft.y\n          }).containsPoint(screenPoint);\n        }\n\n        return true;\n      }\n    };\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<LabelInstance> {\n    const animations = this.props.animate || {};\n    const {\n      color: animateColor,\n      location: animateLocation,\n      size: animateSize\n    } = animations;\n\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      1: 1,\n      2: -1,\n      3: 1,\n      4: -1,\n      5: -1\n    };\n\n    const vertexToSide: { [key: number]: number } = {\n      0: 0,\n      1: 0,\n      2: 0,\n      3: 1,\n      4: 1,\n      5: 1\n    };\n\n    return {\n      fs: require(\"./label-layer.fs\"),\n      instanceAttributes: [\n        {\n          easing: animateLocation,\n          name: LabelLayer.attributeNames.location,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.x, o.y]\n        },\n        {\n          name: LabelLayer.attributeNames.anchor,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.anchor.x || 0, o.anchor.y || 0]\n        },\n        {\n          easing: animateSize,\n          name: LabelLayer.attributeNames.size,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.width, o.height]\n        },\n        {\n          name: LabelLayer.attributeNames.depth,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth]\n        },\n        {\n          name: LabelLayer.attributeNames.scaling,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.scaling]\n        },\n        {\n          atlas: {\n            key: this.props.atlas || \"\",\n            name: \"labelAtlas\"\n          },\n          name: LabelLayer.attributeNames.texture,\n          update: o => this.resource.request(this, o, o.resource)\n        },\n        {\n          easing: animateColor,\n          name: LabelLayer.attributeNames.color,\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.color\n        },\n        {\n          name: LabelLayer.attributeNames.scale,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.scale]\n        },\n        {\n          name: LabelLayer.attributeNames.maxScale,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.maxScale]\n        }\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: _u => [1]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexToSide[vertex],\n            0\n          ]\n        }\n      ],\n      vertexCount: 6,\n      vs: require(\"./label-layer.vs\")\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentImage;\n  }\n}\n","import { ImageAtlasResource } from \"./image-atlas-resource\";\n\nlet canvas: CanvasRenderingContext2D | null;\n\nexport interface IImageRasterizedMetrics {\n  canvas: HTMLCanvasElement;\n  height: number;\n  width: number;\n}\n\nexport class ImageRasterizer {\n  /**\n   * This loops until our canvas context is available\n   */\n  static async awaitContext() {\n    // Iterate till the browser provides a valid canvas to render elements into\n    while (!canvas) {\n      this.getContext();\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n  }\n\n  /**\n   * Attempts to populate the 'canvas' context for rendering images offscreen.\n   */\n  static getContext() {\n    if (!canvas) {\n      canvas = document.createElement(\"canvas\").getContext(\"2d\");\n    }\n\n    return canvas;\n  }\n\n  /**\n   * This renders our image to a sizeable canvas where we loop over the pixel data to determine\n   * the bounds of the image.\n   *\n   * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n   *                                 the size to be rendered to the texture to the size the image\n   *                                 should be within world space.\n   * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n   */\n  static calculateImageSize(\n    resource: ImageAtlasResource,\n    _sampleScale?: number\n  ) {\n    /** Get the image properties for rasterizing */\n    const image = resource.image.element;\n\n    if (!image) {\n      console.warn(\n        \"Image does not exist! Please ensure the resource contains a valid image.\"\n      );\n      return;\n    }\n\n    if (!canvas) {\n      console.warn(\n        \"The Image rasterizer was unable to establish a valid canvas context. Please ensure the system supports contexts and ensure the document is ready first.\"\n      );\n      return;\n    }\n\n    if (image.width === 0 || image.height === 0) {\n      console.warn(\n        \"Images provided shoud have valid dimensions! Please ensure the image is loaded first.\"\n      );\n      return;\n    }\n\n    // Just make sure th canvas is available\n    canvas.canvas.width = 100;\n    canvas.canvas.height = 100;\n    // Render the image into our canvas merely to ensure the image can be rendered\n    // This action often 'warms up' images such as images that have a data URL instead of a path\n    canvas.drawImage(image, 0, 0);\n\n    // Make sure the rasterization object is initialized\n    resource.rasterization = resource.rasterization || {\n      texture: { height: 0, width: 0 },\n      world: { height: 0, width: 0 }\n    };\n\n    // Update the calculated texture size.\n    resource.rasterization.texture = {\n      height: image.height * resource.sampleScale,\n      width: image.width * resource.sampleScale\n    };\n\n    resource.rasterization.world = {\n      height: image.height,\n      width: image.width\n    };\n\n    resource.rasterization.image = image;\n  }\n\n  /**\n   * Performs the rendering of the image\n   */\n  static async render(\n    resource: ImageAtlasResource\n  ): Promise<ImageAtlasResource> {\n    // Make sure our canvas object is ready for rendering\n    await this.awaitContext();\n\n    // Calculate all of the image metrics and ensure the image can be drawn\n    this.calculateImageSize(resource, resource.sampleScale);\n\n    return resource;\n  }\n\n  /**\n   * Performs the rendering of the image\n   */\n  static renderSync(resource: ImageAtlasResource): ImageAtlasResource {\n    // Ensure our offscreen canvas is prepped\n    this.getContext();\n\n    if (!canvas) {\n      console.warn(\n        \"Can not render a image synchronously without the canvas context being ready.\"\n      );\n      return resource;\n    }\n\n    // Calculate all of the image metrics and generate a canvas on the image that can\n    // Be rendered to the canvas.\n    this.calculateImageSize(resource, resource.sampleScale);\n\n    return resource;\n  }\n}\n","import { Bounds } from \"../../primitives/bounds\";\nimport { Atlas, IAtlasOptions } from \"./atlas\";\nimport { ColorAtlasResource } from \"./color-atlas-resource\";\nimport { ColorRasterizer } from \"./color-rasterizer\";\nimport { ImageAtlasResource } from \"./image-atlas-resource\";\nimport { LabelAtlasResource } from \"./label-atlas-resource\";\nimport { LabelRasterizer } from \"./label-rasterizer\";\nimport { ImageDimensions, PackNode } from \"./pack-node\";\nimport { SubTexture } from \"./sub-texture\";\n\nconst debug = require(\"debug\")(\"webgl-surface:Atlas\");\n\nconst ZERO_IMAGE: SubTexture = {\n  aspectRatio: 0,\n  atlasBL: { x: 0, y: 0 },\n  atlasBR: { x: 0, y: 0 },\n  atlasReferenceID: \"\",\n  atlasTexture: null,\n  atlasTL: { x: 0, y: 0 },\n  atlasTR: { x: 0, y: 0 },\n  heightOnAtlas: 0,\n  isValid: false,\n  pixelHeight: 0,\n  pixelWidth: 0,\n  widthOnAtlas: 0\n};\n\nexport type AtlasResource =\n  | ColorAtlasResource\n  | LabelAtlasResource\n  | ImageAtlasResource;\n\n/**\n * Determines if a SubTexture is a valid SubTexture for rendering\n */\nfunction isValidImage(image: SubTexture) {\n  let isValid = false;\n\n  if (image && image.isValid) {\n    if (image.pixelWidth && image.pixelHeight) {\n      isValid = true;\n    }\n  }\n\n  return isValid;\n}\n\n/**\n * Defines a manager of atlas', which includes generating the atlas and producing\n * textures defining those pieces of atlas.\n */\nexport class AtlasManager {\n  /** Stores all of the generated atlas' in a lookup by name */\n  allAtlas = new Map<string, Atlas>();\n\n  /**\n   * Atlas' must be created from scratch to update them. In order to properly\n   * update an existing one, you must destroy it then recreate it again.\n   * This is from not knowing how to update a texture via three js.\n   *\n   * @param resources The images with their image path set to be loaded into the atlas.\n   *               Images that keep an atlas ID of null indicates the image did not load\n   *               correctly\n   *\n   * @return {Texture} The Threejs texture that is created as our atlas. The images injected\n   *                   into the texture will be populated with the atlas'\n   */\n  async createAtlas(options: IAtlasOptions, resources?: AtlasResource[]) {\n    // Create the new Atlas object that tracks all of our atlas' metrics\n    const atlas = new Atlas(options);\n    // Set the manager to the atlas\n    atlas.setManager(this);\n    // Make the atlas identifiable by it's name\n    this.allAtlas.set(atlas.id, atlas);\n\n    // Now we load, pack in, and draw each requested resource\n    if (resources) {\n      await this.updateAtlas(atlas.id, resources);\n    }\n\n    debug(\"Atlas Created-> %o\", atlas);\n\n    return atlas;\n  }\n\n  /**\n   * Free ALL resources under this manager\n   */\n  destroy() {\n    this.allAtlas.forEach(value => value.destroy());\n  }\n\n  /**\n   * Disposes of the resources the atlas held and makes the atlas invalid for use\n   *\n   * @param atlasName\n   */\n  destroyAtlas(atlasName: string) {\n    const atlas = this.allAtlas.get(atlasName);\n\n    if (atlas) {\n      atlas.destroy();\n    }\n  }\n\n  private setDefaultImage(image: SubTexture, atlasName: string) {\n    image = Object.assign(image, ZERO_IMAGE, { atlasReferenceID: atlasName });\n    return image;\n  }\n\n  /**\n   * This loads, packs, and draws the indicated image into the specified canvas\n   * using the metrics that exists for the specified atlas.\n   *\n   * @param resource The image who should have it's image path loaded\n   * @param atlasName The name of the atlas to make the packing work\n   * @param canvas The canvas we will be drawing into to generate the complete image\n   *\n   * @return {Promise<boolean>} Promise that resolves to if the image successfully was drawn or not\n   */\n  private async draw(atlas: Atlas, resource: AtlasResource): Promise<boolean> {\n    const canvas = atlas.texture.image;\n    const atlasName = atlas.id;\n\n    // Register the resource with the atlas\n    if (!atlas.registerResource(resource)) {\n      console.warn(\n        \"Could not draw resource to the atlas as the resource was not properly registered to the atlas first\",\n        atlas,\n        resource\n      );\n      return Promise.resolve(false);\n    }\n\n    // First we must load the image\n    // Make a buffer to hold our new image\n    // Load the image into memory, default to keeping the alpha channel\n    const loadedImage: HTMLImageElement | null = await this.loadImage(resource);\n\n    // Only a non-null image means the image loaded correctly\n    if (loadedImage && isValidImage(resource.texture)) {\n      // Get the sub texture that is going to be applied to the atlas\n      const rasterization = resource.rasterization;\n      const texture = resource.texture;\n      // Now we create a Rectangle to store the image dimensions\n      const rect: Bounds = new Bounds({\n        bottom: rasterization.texture.height,\n        left: 0,\n        right: rasterization.texture.width,\n        top: 0\n      });\n      // Create ImageDimension to insert into our atlas mapper\n      const dimensions: ImageDimensions = {\n        first: texture,\n        second: rect\n      };\n\n      // Auto add a buffer in\n      dimensions.second.width += 1;\n      dimensions.second.height += 1;\n      // Get the atlas map node\n      const packing: PackNode = atlas.packing;\n      // Store the node resulting from the insert operation\n      const insertedNode: PackNode | null = packing.insert(dimensions);\n\n      // If the result was NULL we did not successfully insert the image into any map\n      if (insertedNode) {\n        debug(\"Atlas location determined: %o\", insertedNode);\n\n        // Apply the image to the node\n        insertedNode.nodeImage = texture;\n\n        // Set our image's atlas properties\n        const ux = insertedNode.nodeDimensions.x / atlas.width;\n        const uy = insertedNode.nodeDimensions.y / atlas.height;\n        const uw = insertedNode.nodeDimensions.width / atlas.width;\n        const uh = insertedNode.nodeDimensions.height / atlas.height;\n        const onePixelX = 1 / atlas.width;\n\n        const atlasDimensions: Bounds = new Bounds({\n          bottom: 1.0 - uy,\n          left: ux,\n          right: ux + uw,\n          top: 1.0 - (uy + uh)\n        });\n\n        const bottom = atlasDimensions.bottom;\n        const top = atlasDimensions.y;\n        const left = atlasDimensions.x;\n        const right = atlasDimensions.x + atlasDimensions.width - onePixelX;\n\n        texture.atlasReferenceID = atlasName;\n        texture.atlasTL = { x: left, y: top };\n        texture.atlasBR = { x: right, y: bottom };\n        texture.atlasBL = { x: left, y: bottom };\n        texture.atlasTR = { x: right, y: top };\n        texture.widthOnAtlas = Math.abs(texture.atlasTR.x - texture.atlasTL.x);\n        texture.heightOnAtlas = Math.abs(texture.atlasTR.y - texture.atlasBR.y);\n        texture.pixelWidth = rasterization.texture.width;\n        texture.pixelHeight = rasterization.texture.height;\n\n        // Now draw the image to the indicated canvas\n        canvas\n          .getContext(\"2d\")\n          .drawImage(\n            loadedImage,\n            insertedNode.nodeDimensions.x,\n            insertedNode.nodeDimensions.y\n          );\n\n        // We have finished inserting\n        return true;\n      } else {\n        // Log an error\n        console.error(`Could not fit resource into atlas`, resource);\n        resource.texture = this.setDefaultImage(resource.texture, atlasName);\n        return false;\n      }\n    } else {\n      if (!resource.texture.isValid) {\n        debug(\"Resource was invalidated during load:\", resource);\n      } else {\n        // Log an error and load a default sub texture\n        console.error(`Could not load resource:`, resource);\n      }\n\n      resource.texture = this.setDefaultImage(resource.texture, atlasName);\n      return false;\n    }\n  }\n\n  /**\n   * Retrieves the threejs texture for the atlas\n   *\n   * @param atlasName The identifier of the atlas\n   */\n  getAtlasTexture(atlasName: string): Atlas | undefined {\n    return this.allAtlas.get(atlasName);\n  }\n\n  /**\n   * This takes in any atlas resource and rasterizes it.\n   *\n   * @param {SubTexture} resource This is any atlas resource which will have it's image rasterized\n   *\n   * @return {Promise<HTMLImageElement>} A promise to resolve to the loaded image\n   *                                     or null if there was an error\n   */\n  private async loadImage(\n    resource: AtlasResource\n  ): Promise<HTMLImageElement | null> {\n    let imageSrc: string = \"\";\n\n    const subTexture = resource.texture || new SubTexture();\n    resource.texture = subTexture;\n\n    if (resource.texture.isValid === false) return null;\n\n    if (resource instanceof ImageAtlasResource) {\n      // If the texture was provided an image then we ensure the image is loaded\n      // Then hand it back\n      if (resource.image.element) {\n        if (\n          resource.image.element.width !== 0 &&\n          resource.image.element.height !== 0\n        ) {\n          const image = resource.image.element;\n          subTexture.pixelWidth = image.width;\n          subTexture.pixelHeight = image.height;\n          subTexture.aspectRatio = image.width / image.height;\n\n          return image;\n        }\n\n        const image = await new Promise<HTMLImageElement | null>(resolve => {\n          const image: HTMLImageElement | undefined = resource.image.element;\n\n          if (image) {\n            image.onload = function() {\n              subTexture.pixelWidth = image.width;\n              subTexture.pixelHeight = image.height;\n              subTexture.aspectRatio = image.width / image.height;\n              resolve(image);\n            };\n\n            image.onerror = function() {\n              resolve(null);\n            };\n          } else {\n            resolve(null);\n          }\n        });\n\n        return image;\n      } else if (resource.image.path) {\n        // If a string was returned, we must load the image then return the image\n        imageSrc = resource.image.path;\n      }\n    } else if (resource instanceof LabelAtlasResource) {\n      // Ensure the label has been rasterized to a canvas element\n      if (!resource.rasterization.canvas) {\n        await LabelRasterizer.render(resource);\n      }\n\n      // Make sure the rasterization properly executed\n      if (resource.rasterization.canvas) {\n        debug(\"Rasterized label %o\", resource.rasterization);\n        imageSrc = resource.rasterization.canvas.toDataURL(\"image/png\");\n      } else {\n        console.warn(\"The label was not able to be rasterized\");\n      }\n    } else if (resource instanceof ColorAtlasResource) {\n      // Ensure the color has been rasterized to a canvas element\n      if (!resource.rasterization.canvas) {\n        await ColorRasterizer.render(resource);\n      }\n\n      // Make sure the rasterization properly executed\n      if (resource.rasterization.canvas) {\n        debug(\"Rasterized color %o\", resource.rasterization);\n        imageSrc = resource.rasterization.canvas.toDataURL(\"image/png\");\n      } else {\n        console.warn(\"The color was not able to be rasterized\");\n      }\n    }\n\n    if (imageSrc) {\n      const image = await new Promise<HTMLImageElement | null>(resolve => {\n        const image: HTMLImageElement = new Image();\n\n        image.onload = function() {\n          subTexture.pixelWidth = image.width;\n          subTexture.pixelHeight = image.height;\n          subTexture.aspectRatio = image.width / image.height;\n          resolve(image);\n        };\n\n        image.onerror = function() {\n          resolve(null);\n        };\n\n        image.src = imageSrc;\n      });\n\n      return image;\n    }\n\n    return null;\n  }\n\n  /**\n   * This targets an existing atlas and attempts to update it with the provided atlas resources.\n   *\n   * @param atlasName\n   * @param resources\n   */\n  async updateAtlas(atlasName: string, resources: AtlasResource[]) {\n    const atlas = this.allAtlas.get(atlasName);\n\n    if (atlas) {\n      for (const resource of resources) {\n        await this.draw(atlas, resource);\n      }\n\n      // Perform the best method for updating the underlying texture of the atlas to the latest changes\n      atlas.updateTexture();\n    } else {\n      console.warn(\n        \"Can not update non-existing atlas:\",\n        atlasName,\n        \"These resources will not be loaded:\",\n        resources\n      );\n    }\n  }\n}\n","import { Bounds } from \"../../primitives/bounds\";\nimport { SubTexture } from \"./sub-texture\";\n\n/**\n * Helps us track the bounds of the image being loaded in tied in with the\n * texture it represents\n */\nexport interface ImageDimensions {\n  first: SubTexture;\n  second: Bounds;\n}\n\n/**\n * This is used specifically by the atlas manager to aid in packing\n * in textures within an area. This will guarantee boundaries of textures are\n * not violated and provide proper feedback for where to draw a given image\n */\nexport class PackNode {\n  child: [PackNode | null, PackNode | null] = [null, null];\n  isLeaf: boolean = true;\n  nodeDimensions: Bounds;\n  nodeImage: SubTexture | null = null;\n\n  constructor(x: number, y: number, width: number, height: number) {\n    this.nodeDimensions = new Bounds({\n      height,\n      width,\n      x,\n      y\n    });\n  }\n\n  /**\n   * Deletes all of the sub nodes in this Mapping, thus clearing up memory usage\n   */\n  destroy() {\n    const child0 = this.child[0];\n    const child1 = this.child[1];\n    this.nodeImage = null;\n    if (child0) {\n      child0.destroy();\n    }\n    if (child1) {\n      child1.destroy();\n    }\n    this.child[0] = null;\n    this.child[1] = null;\n  }\n\n  /**\n   * Indicates if there is a child\n   */\n  hasChild(): boolean {\n    const child0 = this.child[0];\n    const child1 = this.child[1];\n    if (child0 && !child0.nodeImage) {\n      return !child0.isLeaf;\n    }\n    if (child1 && !child1.nodeImage) {\n      return !child1.isLeaf;\n    }\n    return false;\n  }\n\n  /**\n   * Inserts images into our mapping, fitting them appropriately\n   */\n  insert(image: ImageDimensions): PackNode | null {\n    let child0 = this.child[0];\n    let child1 = this.child[1];\n\n    if (!this.isLeaf && child0 && child1) {\n      // Try inserting into first child\n      const newNode: PackNode | null = child0.insert(image);\n      if (newNode !== null) {\n        return newNode;\n      }\n      // No room in first so insert into second\n      return child1.insert(image);\n    } else {\n      // If there's already an image here, return\n      if (this.nodeImage) {\n        return null;\n      }\n      // Check the fit status of the image in this nodes rectangle space\n      const fitFlag: number = this.nodeDimensions.fits(image.second);\n      // If we're too small, return null indicating can not fit\n      if (fitFlag === 0) {\n        return null;\n      }\n      // If we're just right, accept\n      if (fitFlag === 1) {\n        return this;\n      }\n\n      // Otherwise, gotta split this node and create some leaves\n      this.isLeaf = false;\n      // Get the image width\n      const imgWidth: number = image.second.width;\n      const imgHeight: number = image.second.height;\n      // Decide which way to split\n      const dWidth: number = this.nodeDimensions.width - imgWidth;\n      const dHeight: number = this.nodeDimensions.height - image.second.height;\n\n      if (dWidth > dHeight) {\n        child0 = this.child[0] = new PackNode(\n          this.nodeDimensions.x,\n          this.nodeDimensions.y,\n          imgWidth,\n          this.nodeDimensions.height\n        );\n        child1 = this.child[1] = new PackNode(\n          this.nodeDimensions.x + imgWidth,\n          this.nodeDimensions.y,\n          dWidth,\n          this.nodeDimensions.height\n        );\n      } else {\n        child0 = this.child[0] = new PackNode(\n          this.nodeDimensions.x,\n          this.nodeDimensions.y,\n          this.nodeDimensions.width,\n          imgHeight\n        );\n        child1 = this.child[1] = new PackNode(\n          this.nodeDimensions.x,\n          this.nodeDimensions.y + imgHeight,\n          this.nodeDimensions.width,\n          dHeight\n        );\n      }\n    }\n\n    // Insert into first child we created\n    return child0.insert(image);\n  }\n\n  /**\n   * Removes the image from the mapping and tries to open up as much space as possible.\n   *\n   * @param {AtlasTexture} image The image to insert into the\n   */\n  remove(image: SubTexture): boolean {\n    const child0 = this.child[0];\n    const child1 = this.child[1];\n\n    if (child1 && child0 && !this.isLeaf) {\n      // Try removing from first child\n      let removed: boolean = child0.remove(image);\n      if (removed) {\n        return true;\n      }\n      // Try remove from second\n      removed = child1.remove(image);\n\n      if (!child0.hasChild()) {\n        if (!child1.hasChild()) {\n          this.child[0] = null;\n          this.child[1] = null;\n        }\n      }\n\n      return removed;\n    } else {\n      if (this.nodeImage === image) {\n        this.nodeImage = null;\n        delete image.atlasReferenceID;\n        image.pixelWidth = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n}\n","import { observable } from \"../../instance-provider\";\nimport { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { Image } from \"../../primitives/image\";\nimport { ImageAtlasResource, ImageRasterizer } from \"../../surface/texture\";\nimport { Anchor, AnchorType, ScaleType } from \"../types\";\n\nconst { max } = Math;\n\nexport interface IImageInstanceOptions extends IInstanceOptions {\n  /**\n   * The point on the image which will be placed in world space via the x, y coords. This is also the point\n   * which the image will be scaled around.\n   */\n  anchor?: Anchor;\n  /** Depth sorting of the image (or the z value of the lable) */\n  depth?: number;\n  /** This is the HTMLImageElement that the image is to render. This element MUST be loaded completely before this instance is created. */\n  element: HTMLImageElement;\n  /** The height of the image as it is to be rendered in world space */\n  height?: number;\n  /** Sets the way the image scales with the world */\n  scaling?: ScaleType;\n  /** The color the image should render as */\n  tint: [number, number, number, number];\n  /** The width of the image as it is to be rendered in world space */\n  width?: number;\n  /** The x coordinate where the image will be anchored to in world space */\n  x?: number;\n  /** The y coordinate where the image will be anchored to in world space */\n  y?: number;\n}\n\n/**\n * This is a reference for a rasterization that has reference counting. When the references go to zero,\n * the rasterization should be invalidated and resources freed for the rasterization.\n */\ntype RasterizationReference = {\n  resource: ImageAtlasResource;\n  references: number;\n};\n\n/**\n * This is a lookup to find existing rasterizations for a particularly created image so that every\n * new image does not have to go through the rasterization process.\n */\nconst rasterizationLookUp = new Map<\n  string | HTMLImageElement,\n  RasterizationReference\n>();\n\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nconst anchorCalculator: {\n  [key: number]: (anchor: Anchor, image: ImageInstance) => void;\n} = {\n  [AnchorType.TopLeft]: (anchor: Anchor, _image: ImageInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopMiddle]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width / 2.0;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopRight]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width + anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.MiddleLeft]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = image.height / 2;\n  },\n  [AnchorType.Middle]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width / 2.0;\n    anchor.y = image.height / 2.0;\n  },\n  [AnchorType.MiddleRight]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width + anchor.padding;\n    anchor.y = image.height / 2.0;\n  },\n  [AnchorType.BottomLeft]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = image.height + anchor.padding;\n  },\n  [AnchorType.BottomMiddle]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width / 2.0;\n    anchor.y = image.height + anchor.padding;\n  },\n  [AnchorType.BottomRight]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width + anchor.padding;\n    anchor.y = image.height + anchor.padding;\n  },\n  [AnchorType.Custom]: (anchor: Anchor, _image: ImageInstance) => {\n    anchor.x = anchor.x || 0;\n    anchor.y = anchor.y || 0;\n  }\n};\n\n/**\n * This generates a new image instance.\n * There are restrictions surrounding images due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a image via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Images should only be so large.\n * - Once a image is constructed, only SOME properties can be altered thereafter\n *\n * An image that is constructed can only have some properties set upon creating the image and are locked\n * thereafter. The only way to modify them would be to destroy the image, then construct a new image\n * with the modifications. This has to deal with performance regarding rasterizing the image.\n */\nexport class ImageInstance extends Instance implements Image {\n  /**\n   * TODO: We should be implementing the destroy on ImageInstances to clean this up\n   * Frees up module scoped data.\n   */\n  static destroy() {\n    rasterizationLookUp.clear();\n  }\n\n  /** This is the rendered color of the image */\n  @observable tint: [number, number, number, number] = [0, 0, 0, 1];\n  /** Depth sorting of the image (or the z value of the lable) */\n  @observable depth: number = 0;\n  /** The height of the image as it is to be rendered in world space */\n  @observable height: number = 1;\n  /** Sets the way the image scales with the world */\n  @observable scaling: ScaleType = ScaleType.BOUND_MAX;\n  /** The width of the image as it is to be rendered in world space */\n  @observable width: number = 1;\n  /** The x coordinate where the image will be anchored to in world space */\n  @observable x: number = 0;\n  /** The y coordinate where the image will be anchored to in world space */\n  @observable y: number = 0;\n\n  get size() {\n    return max(this.width, this.height);\n  }\n  set size(value: number) {\n    const aspect = this.width / this.height;\n    this.width = value * aspect;\n    this.height = value;\n  }\n\n  // The following properties are properties that are locked in after creating this image\n  // As the properties are completely locked into how the image was rasterized and can not\n  // Nor should not be easily adjusted for performance concerns\n\n  private _sourceWidth: number = 0;\n  private _sourceHeight: number = 0;\n  private _isDestroyed: boolean = false;\n  @observable private _rasterization: RasterizationReference;\n  private _path: string;\n  private _element: HTMLImageElement;\n\n  // The following are the getters for the locked in parameters of the image so we can read\n  // The properties but not set any of them.\n\n  /** This is the provided element this image will be rendering */\n  get element() {\n    return this._element;\n  }\n  /** This flag indicates if this image is valid anymore */\n  get isDestroyed() {\n    return this._isDestroyed;\n  }\n  /** This is the path to the image's resource if it's available */\n  get path() {\n    return this._path;\n  }\n  /** This gets the atlas resource that is uniquely idenfied for this image */\n  get resource() {\n    return this._rasterization.resource;\n  }\n\n  /**\n   * This is the width in world space of the image. If there is no camera distortion,\n   * this would be the width of the image in pixels on the screen.\n   */\n  get sourceWidth() {\n    return this._sourceWidth;\n  }\n\n  /**\n   * This is the height in world space of the image. If there is no camera distortion,\n   * this would be the height of the image in pixels on the screen.\n   */\n  get sourceHeight() {\n    return this._sourceHeight;\n  }\n\n  // These are properties that can be altered, but have side effects from being changed\n\n  /** This is the anchor location on the  */\n  @observable\n  private _anchor: Anchor = {\n    padding: 0,\n    type: AnchorType.TopLeft,\n    x: 0,\n    y: 0\n  };\n\n  constructor(options: IImageInstanceOptions) {\n    super(options);\n\n    this.depth = options.depth || this.depth;\n    this.tint = options.tint || this.tint;\n    this.scaling = options.scaling || this.scaling;\n    this.x = options.x || this.x;\n    this.y = options.y || this.y;\n\n    // This is the image that is to be rendered\n    this._element = options.element;\n    // Look for other same texts that have been rasterized\n    let rasterization = rasterizationLookUp.get(this._path || this._element);\n\n    // If a rasterization exists, we must increment the use reference\n    if (rasterization) {\n      rasterization.references++;\n    }\n\n    // If we have not found an existing rasterization\n    if (!rasterization) {\n      rasterization = {\n        references: 1,\n        resource: new ImageAtlasResource(this)\n      };\n\n      // Ensure the sample scale is set. Defaults to 1.0\n      rasterization.resource.sampleScale =\n        rasterization.resource.sampleScale || 1.0;\n      // Rasterize the resource generated for this image. We need it immediately rasterized so\n      // That we can utilize the dimensions for calculations.\n      ImageRasterizer.renderSync(rasterization.resource);\n      // Now that we have an official rasterization for this image, we shall store it\n      // For others to look up\n      rasterizationLookUp.set(this._path || this._element, rasterization);\n    }\n\n    this._rasterization = rasterization;\n    this._sourceWidth = rasterization.resource.rasterization.world.width;\n    this._sourceHeight = rasterization.resource.rasterization.world.height;\n\n    this.width = options.width || this._sourceWidth || 1;\n    this.height = options.height || this._sourceHeight || 1;\n\n    // Make sure the anchor is set to the appropriate location\n    options.anchor && this.setAnchor(options.anchor);\n  }\n\n  get anchor() {\n    return this._anchor;\n  }\n\n  /**\n   * Images are a sort of unique case where the use of a image should be destroyed as rasterization\n   * resources are in a way kept alive through reference counting.\n   */\n  destroy() {\n    if (!this._isDestroyed) {\n      this._isDestroyed = true;\n      this._rasterization.references--;\n\n      // If all references are cleared, then the rasterization needs to be eradicated\n      if (this._rasterization.references === 0) {\n        this._rasterization.resource;\n        console.warn(\"The destroy method still needs completion\");\n      }\n    }\n  }\n\n  resourceTrigger() {\n    // Trigger the accessed element that the layer utilizes for resource fetching.\n    this._rasterization = this._rasterization;\n\n    this.tint = this.tint;\n    this.depth = this.depth;\n    this.height = this.height;\n    this.scaling = this.scaling;\n    this.width = this.width;\n    this.x = this.x;\n    this.y = this.y;\n  }\n\n  /**\n   * This applies a new anchor to this image and properly determines it's anchor position on the image\n   */\n  setAnchor(anchor: Anchor) {\n    const newAnchor = {\n      padding: anchor.padding || 0,\n      type: anchor.type,\n      x: anchor.x || 0,\n      y: anchor.y || 0\n    };\n\n    // Calculate the new anchors position values\n    anchorCalculator[newAnchor.type](newAnchor, this);\n    // Apply the anchor\n    this._anchor = newAnchor;\n  }\n}\n","module.exports = \"precision highp float;\\n\\n${import: projection}\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the image as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the image is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y;\\n\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float(cameraScale.x != cameraScale.y);\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n\\n  // Get the tex coord from our inject texture info\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the image's tint as a tint to the image\\n  vertexColor = tint;\\n\\n  // Correct aspect ratio.\\n  vec2 adjustedSize = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * adjustedSize + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the image\\n  float imageScreenScale = mix(\\n    screenSize.y / adjustedSize.y,\\n    screenSize.x / adjustedSize.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the image is supposed to be, then we automagically\\n  // scale down our image to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / imageScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n${extendHeader}\\n\\nvoid main() {\\n  gl_FragColor = texture2D(imageAtlas, texCoord) * vertexColor;\\n  setColor(gl_FragColor * gl_FragColor.a);\\n  ${extend}\\n}\\n\"","import * as Three from \"three\";\nimport { InstanceProvider } from \"../../instance-provider\";\nimport { Bounds, IPoint } from \"../../primitives\";\nimport { ILayerProps, IModelType, Layer } from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  IProjection,\n  IShaderInitialization,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport { IAutoEasingMethod, Vec } from \"../../util\";\nimport { CommonMaterialOptions } from \"../../util/common-options\";\nimport { ScaleType } from \"../types\";\nimport { ImageInstance } from \"./image-instance\";\n\nconst { min, max } = Math;\n\nexport interface IImageLayerProps<T extends ImageInstance>\n  extends ILayerProps<T> {\n  atlas?: string;\n  animate?: {\n    tint?: IAutoEasingMethod<Vec>;\n    location?: IAutoEasingMethod<Vec>;\n    size?: IAutoEasingMethod<Vec>;\n  };\n}\n\n/**\n * This layer displays Images and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class ImageLayer<\n  T extends ImageInstance,\n  U extends IImageLayerProps<T>\n> extends Layer<T, U> {\n  static defaultProps: IImageLayerProps<any> = {\n    key: \"\",\n    data: new InstanceProvider<ImageInstance>(),\n    scene: \"default\"\n  };\n\n  static attributeNames = {\n    location: \"location\",\n    anchor: \"anchor\",\n    size: \"size\",\n    depth: \"depth\",\n    scaling: \"scaling\",\n    texture: \"texture\",\n    tint: \"tint\"\n  };\n\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods() {\n    return {\n      // Provide the calculated AABB world bounds for a given image\n      boundsAccessor: (image: ImageInstance) => {\n        const anchorEffect = [0, 0];\n\n        if (image.anchor) {\n          anchorEffect[0] = image.anchor.x || 0;\n          anchorEffect[1] = image.anchor.y || 0;\n        }\n\n        const topLeft = [image.x - anchorEffect[0], image.y - anchorEffect[1]];\n\n        return new Bounds({\n          height: image.height,\n          width: image.width,\n          x: topLeft[0],\n          y: topLeft[1]\n        });\n      },\n\n      // Provide a precise hit test for the circle\n      hitTest: (image: ImageInstance, point: IPoint, view: IProjection) => {\n        // The bounds of the image is in world space, but it does not account for the scale mode of the image.\n        // Here, we will apply the scale mode testing to the image\n        const maxScale = max(...view.camera.scale);\n        const minScale = min(...view.camera.scale);\n\n        // If we scale always then the image stays within it's initial world bounds at all times\n        if (image.scaling === ScaleType.ALWAYS) {\n          return true;\n        } else if (image.scaling === ScaleType.BOUND_MAX) {\n          // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n          // Image the same size. If the camera zooms out then the bounds === the world bounds.\n          // We are zooming out. the bounds will stay within the world bounds\n          if (minScale <= 1 && maxScale <= 1) {\n            return true;\n          } else {\n            // We are zooming in. The bounds will shrink to keep the image at max font size\n            // The location is within the world, but we reverse project the anchor spread\n            const anchorEffect = [0, 0];\n\n            if (image.anchor) {\n              anchorEffect[0] = image.anchor.x || 0;\n              anchorEffect[1] = image.anchor.y || 0;\n            }\n\n            const topLeft = view.worldToScreen({\n              x: image.x - anchorEffect[0] / view.camera.scale[0],\n              y: image.y - anchorEffect[1] / view.camera.scale[1]\n            });\n\n            const screenPoint = view.worldToScreen(point);\n\n            // Reverse project the size and we should be within the distorted world coordinates\n            return new Bounds({\n              height: image.height,\n              width: image.width,\n              x: topLeft.x,\n              y: topLeft.y\n            }).containsPoint(screenPoint);\n          }\n        } else if (image.scaling === ScaleType.NEVER) {\n          // If we never allow the image to scale, then the bounds will grow and shrink to counter the effects\n          // Of the camera zoom\n          // The location is within the world, but we reverse project the anchor spread\n          const anchorEffect = [0, 0];\n\n          if (image.anchor) {\n            anchorEffect[0] = image.anchor.x || 0;\n            anchorEffect[1] = image.anchor.y || 0;\n          }\n\n          const topLeft = view.worldToScreen({\n            x: image.x - anchorEffect[0] / view.camera.scale[0],\n            y: image.y - anchorEffect[1] / view.camera.scale[1]\n          });\n\n          const screenPoint = view.worldToScreen(point);\n\n          // Reverse project the size and we should be within the distorted world coordinates\n          return new Bounds({\n            height: image.height,\n            width: image.width,\n            x: topLeft.x,\n            y: topLeft.y\n          }).containsPoint(screenPoint);\n        }\n\n        return true;\n      }\n    };\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<ImageInstance> {\n    const animations = this.props.animate || {};\n    const {\n      tint: animateTint,\n      location: animateLocation,\n      size: animateSize\n    } = animations;\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      1: 1,\n      2: -1,\n      3: 1,\n      4: -1,\n      5: -1\n    };\n\n    const vertexToSide: { [key: number]: number } = {\n      0: 0,\n      1: 0,\n      2: 0,\n      3: 1,\n      4: 1,\n      5: 1\n    };\n\n    return {\n      fs: require(\"./image-layer.fs\"),\n      instanceAttributes: [\n        {\n          easing: animateLocation,\n          name: ImageLayer.attributeNames.location,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.x, o.y]\n        },\n        {\n          name: ImageLayer.attributeNames.anchor,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.anchor.x || 0, o.anchor.y || 0]\n        },\n        {\n          easing: animateSize,\n          name: ImageLayer.attributeNames.size,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.width, o.height]\n        },\n        {\n          name: ImageLayer.attributeNames.depth,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth]\n        },\n        {\n          name: ImageLayer.attributeNames.scaling,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.scaling]\n        },\n        {\n          atlas: {\n            key: this.props.atlas || \"\",\n            name: \"imageAtlas\"\n          },\n          name: ImageLayer.attributeNames.texture,\n          update: o => this.resource.request(this, o, o.resource)\n        },\n        {\n          easing: animateTint,\n          name: ImageLayer.attributeNames.tint,\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.tint\n        }\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: _u => [1]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexToSide[vertex],\n            0\n          ]\n        }\n      ],\n      vertexCount: 6,\n      vs: require(\"./image-layer.vs\")\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentImage;\n  }\n}\n","import { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { observable } from \"../../instance-provider/observable\";\n\nexport interface IEdgeInstanceOptions extends IInstanceOptions {\n  /** The color of this edge at the start point. */\n  colorStart?: [number, number, number, number];\n  /** The color of this edge at the end point. */\n  colorEnd?: [number, number, number, number];\n  /** This is the list of control points  */\n  control?: [number, number][];\n  /** The z depth of the edge (for draw ordering) */\n  depth?: number;\n  /** End point of the edge. */\n  end: [number, number];\n  /** Beginning point of the edge. */\n  start: [number, number];\n  /** Start width of the edge. */\n  widthStart?: number;\n  /** End width of the edge */\n  widthEnd?: number;\n}\n\nexport type EdgeColor = [number, number, number, number];\n\nexport class EdgeInstance extends Instance {\n  @observable colorStart: EdgeColor = [1.0, 1.0, 1.0, 1.0];\n  @observable colorEnd: EdgeColor = [1.0, 1.0, 1.0, 1.0];\n  @observable control: [number, number][] = [[0, 0], [0, 0]];\n  @observable depth: number = 0;\n  @observable end: [number, number] = [0, 0];\n  @observable start: [number, number] = [0, 0];\n  @observable widthStart: number = 1.0;\n  @observable widthEnd: number = 1.0;\n\n  get length() {\n    const delta = [this.end[0] - this.start[0], this.end[1] - this.start[1]];\n\n    return Math.sqrt(delta[0] * delta[0] + delta[1] * delta[1]);\n  }\n\n  /**\n   * Calculates the midpoint of the edge\n   */\n  get midpoint() {\n    return 0;\n  }\n\n  /**\n   * Calculates a perpendicular direction vector to the edge\n   */\n  get perpendicular(): [number, number] {\n    const length = this.length;\n\n    return [\n      (this.end[1] - this.start[1]) / length,\n      -(this.end[0] - this.start[0]) / length\n    ];\n  }\n\n  /**\n   * Applies the edge width to the start and end\n   */\n  setEdgeWidth(width: number) {\n    if (width) {\n      this.widthEnd = width;\n      this.widthStart = width;\n    }\n  }\n\n  /**\n   * Applies the color to the start and end\n   */\n  setColor(color: EdgeColor) {\n    this.colorStart = color;\n    this.colorEnd = color;\n  }\n\n  constructor(options: IEdgeInstanceOptions) {\n    super(options);\n    this.colorStart = options.colorStart || this.colorStart;\n    this.colorEnd = options.colorEnd || this.colorEnd;\n    this.control = options.control || this.control;\n    this.depth = options.depth || this.depth;\n    this.end = options.end || this.end;\n    this.widthStart = options.widthStart || this.widthStart;\n    this.widthEnd = options.widthEnd || this.widthEnd;\n    this.start = options.start || this.start;\n  }\n}\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\n${extendHeader}\\n\\nvoid main() {\\n  setColor(vertexColor);\\n  ${extend}\\n}\\n\"","module.exports = \"/**\\n  This vertex shader calculates edges based in world space to make an edge based on\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nprecision highp float;\\n\\n${import: projection}\\n\\nvarying vec4 vertexColor;\\n\\n// Interpolation type injection\\n${interpolation}\\n\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n\\n  // Convert our world points to screen space\\n  vec4 startClip = clipSpace(vec3(start, depth));\\n  vec4 endClip = clipSpace(vec3(end, depth));\\n  vec2 startScreen = (startClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  vec2 endScreen = (endClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Controls for this mode are screen space deltas from the end points\\n  vec2 control1 = startScreen + vec2(control.x, -control.y) * scaleFactor;\\n  vec2 control2 = endScreen + vec2(control.z, -control.w) * scaleFactor;\\n\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, startScreen, endScreen, control1, control2);\\n  // Calculate the next and previous segment's location on the line\\n  vec2 prePosition = interpolation(interpolationTime - interpolationIncrement, startScreen, endScreen, control1, control2);\\n  vec2 nextPosition = interpolation(interpolationTime + interpolationIncrement, startScreen, endScreen, control1, control2);\\n\\n  vec2 preLine = prePosition - currentPosition;\\n  vec2 nextLine = nextPosition - currentPosition;\\n\\n  // Get a spliced nromal at the joining of two segments to make a crisper curve\\n  vec2 currentNormal = mix(\\n    // Pick this value if we're at the beginning of the line\\n    normalize(vec2(preLine.y, -preLine.x)),\\n    mix(\\n      // Pick this value when we're between the ends\\n      normalize(vec2(preLine.y, -preLine.x) + vec2(-nextLine.y, nextLine.x)),\\n      // Pick this value if we're at the end of the line\\n      normalize(vec2(-nextLine.y, nextLine.x)),\\n      float(position.x >= 1.0)\\n    ),\\n    float(position.x > 0.0)\\n  );\\n\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (-normal * lineThickness * scaleFactor);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor.a *= vertexColor.a * layerOpacity;\\n\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), startClip.zw);\\n  gl_PointSize = 5.0;\\n\\n  ${extend}\\n}\\n\"","module.exports = \"${import: projection}\\n\\nprecision highp float;\\n\\n/**\\n  This vertex shader calculates edges whose curve and width is in screen space where the curve is\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nvarying vec4 vertexColor;\\n\\n// Interpolation type injection\\n${interpolation}\\n\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, start, end, control.xy, control.zw);\\n  // Calculate the next and previous segment's location on the line\\n  vec2 prePosition = interpolation(interpolationTime - interpolationIncrement, start, end, control.xy, control.zw);\\n  vec2 nextPosition = interpolation(interpolationTime + interpolationIncrement, start, end, control.xy, control.zw);\\n\\n  vec2 preLine = prePosition - currentPosition;\\n  vec2 nextLine = nextPosition - currentPosition;\\n\\n  // Get a spliced nromal at the joining of two segments to make a crisper curve\\n  vec2 currentNormal = mix(\\n    // Pick this value if we're at the beginning of the line\\n    normalize(vec2(preLine.y, -preLine.x)),\\n    mix(\\n      // Pick this value when we're between the ends\\n      normalize(vec2(preLine.y, -preLine.x) + vec2(-nextLine.y, nextLine.x)),\\n      // Pick this value if we're at the end of the line\\n      normalize(vec2(-nextLine.y, nextLine.x)),\\n      float(position.x >= 1.0)\\n    ),\\n    float(position.x > 0.0)\\n  );\\n\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (normal * lineThickness);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor.a *= layerOpacity;\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n  gl_PointSize = 5.0;\\n\\n  ${extend}\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  float t1 = 1.0 - t;\\n  return pow(t1, 3.0) * p1 + 3.0 * t * pow(t1, 2.0) * c1 + 3.0 * pow(t, 2.0) * t1 * c2 + pow(t, 3.0) * p2;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return (1.0 - t) * (1.0 - t) * p1 + 2.0 * t * (1.0 - t) * c1 + t * t * p2;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return p1 + (p2 - p1) * t;\\n}\\n\"","/**\n * This file contains the logic for handling edge picking via quad tree and hit tests.\n * The methods involved are fairly robust and would clutter the layer's code file.\n */\nimport { IPoint } from \"../../primitives\";\nimport { Bounds } from \"../../primitives/bounds\";\nimport { IPickingMethods } from \"../../surface/layer\";\nimport { IProjection } from \"../../types\";\nimport {\n  add2,\n  dot2,\n  length2,\n  scale2,\n  subtract2,\n  Vec2\n} from \"../../util/vector\";\nimport { EdgeInstance } from \"./edge-instance\";\nimport { IEdgeLayerProps } from \"./edge-layer\";\nimport { EdgeBroadphase, EdgeScaleType, EdgeType } from \"./types\";\nconst { pow } = Math;\n\ntype InterpolationMethod = (\n  t: number,\n  p1: Vec2,\n  p2: Vec2,\n  c1: Vec2,\n  c2: Vec2\n) => Vec2;\n\n/** This is an interpolation across a line */\nfunction linear(t: number, p1: Vec2, p2: Vec2, _c1: Vec2, _c2: Vec2): Vec2 {\n  return add2(scale2(subtract2(p2, p1), t), p1);\n}\n\n/** This is an interpolation across a bezier curve, single control */\nfunction bezier(t: number, p1: Vec2, p2: Vec2, c1: Vec2, _c2: Vec2): Vec2 {\n  return [\n    (1.0 - t) * (1.0 - t) * p1[0] + 2.0 * t * (1.0 - t) * c1[0] + t * t * p2[0],\n    (1.0 - t) * (1.0 - t) * p1[1] + 2.0 * t * (1.0 - t) * c1[1] + t * t * p2[1]\n  ];\n}\n\n/** This is an interpolation across a bezier curve, double control */\nfunction bezier2(t: number, p1: Vec2, p2: Vec2, c1: Vec2, c2: Vec2): Vec2 {\n  const t1 = 1.0 - t;\n\n  return [\n    pow(t1, 3.0) * p1[0] +\n      3.0 * t * pow(t1, 2.0) * c1[0] +\n      3.0 * pow(t, 2.0) * t1 * c2[0] +\n      pow(t, 3.0) * p2[0],\n    pow(t1, 3.0) * p1[1] +\n      3.0 * t * pow(t1, 2.0) * c1[1] +\n      3.0 * pow(t, 2.0) * t1 * c2[1] +\n      pow(t, 3.0) * p2[1]\n  ];\n}\n\n/** A quick lookup for an interpolation method based on Edge Type */\nconst interpolation: { [key: number]: InterpolationMethod } = {\n  [EdgeType.LINE]: linear,\n  [EdgeType.BEZIER]: bezier,\n  [EdgeType.BEZIER2]: bezier2\n};\n\n/** Converts a point array to a point object */\nfunction toPointObject(point: Vec2): IPoint {\n  return {\n    x: point[0],\n    y: point[1]\n  };\n}\n\n/** Converts a point object to a point array */\nfunction toPointArray(point: IPoint): Vec2 {\n  return [point.x, point.y];\n}\n\n/** Takes two points that forms a line then calculates the nearest distance from that line to the third point */\nfunction distanceTo(start: Vec2, end: Vec2, p: Vec2) {\n  // Make a vector from a line point to the indicated point\n  const vector: Vec2 = subtract2(start, p);\n  const lineDirection: Vec2 = subtract2(end, start);\n  const lineNormal: Vec2 = [lineDirection[1], -lineDirection[0]];\n  const distance: number =\n    Math.abs(dot2(vector, lineNormal)) / length2(lineDirection);\n\n  // The distance is d = |v . r| where v is a unit perpendicular vector to the Line\n  return distance;\n}\n\n// This sets the number of iterations along a curve we sample to test collisions with\nconst TEST_RESOLUTION = 50;\n\n/**\n * This generates the picking methods needed for managing PickType.ALL for the edge layer.\n */\nexport function edgePicking<T extends EdgeInstance>(\n  props: IEdgeLayerProps<T>\n): IPickingMethods<EdgeInstance> {\n  const { broadphase, minPickDistance = 0, scaleType, type } = props;\n  const interpolate = interpolation[props.type];\n\n  const boundsAccessor = (edge: EdgeInstance) => {\n    const edgeWidthStart = edge.widthStart / 2 + minPickDistance;\n    const edgeWidthEnd = edge.widthEnd / 2 + minPickDistance;\n    // Encapsulate the endpoints as they are guaranteed to be included in the shape\n    // Each endpoint will be a box that includes the endpoint thickness\n    const bounds = new Bounds({\n      height: edge.widthStart,\n      width: edge.widthStart,\n      x: edge.start[0] - edgeWidthStart,\n      y: edge.start[1] - edgeWidthStart\n    });\n\n    bounds.encapsulate(\n      new Bounds({\n        height: edge.widthEnd,\n        width: edge.widthEnd,\n        x: edge.end[0] - edgeWidthEnd,\n        y: edge.end[1] - edgeWidthEnd\n      })\n    );\n\n    // Encapsulating the bezier control points is enough of a broadphase for beziers\n    if (props.type === EdgeType.BEZIER) {\n      bounds.encapsulate({\n        x: edge.control[0][0],\n        y: edge.control[0][1]\n      });\n    } else if (props.type === EdgeType.BEZIER2) {\n      // Encapsulating the bezier control points is enough of a broadphase for beziers\n      bounds.encapsulate({\n        x: edge.control[0][0],\n        y: edge.control[0][1]\n      });\n\n      bounds.encapsulate({\n        x: edge.control[1][0],\n        y: edge.control[1][1]\n      });\n    }\n\n    if (broadphase === EdgeBroadphase.PASS_X) {\n      bounds.x = Number.MIN_SAFE_INTEGER / 2;\n      bounds.width = Number.MAX_SAFE_INTEGER;\n    }\n\n    if (broadphase === EdgeBroadphase.PASS_Y) {\n      bounds.y = Number.MIN_SAFE_INTEGER / 2;\n      bounds.height = Number.MAX_SAFE_INTEGER;\n    }\n\n    return bounds;\n  };\n\n  if (scaleType === EdgeScaleType.SCREEN_CURVE) {\n    return {\n      // Provide the calculated AABB world bounds for a given circle\n      boundsAccessor,\n\n      // Provide a precise hit test for the edge. This method performs all of the rendering\n      // And hit tests within screen space as opposed to world space.\n      hitTest: (edge: EdgeInstance, point: IPoint, view: IProjection) => {\n        point = view.worldToScreen(point);\n        const mouse: Vec2 = [point.x, point.y];\n        let closestIndex = 0;\n        let closestDistance = Number.MAX_VALUE;\n        let secondClosestIndex = 0;\n        let secondClosestDistance = Number.MAX_VALUE;\n\n        const start = view.worldToScreen(toPointObject(edge.start));\n        const end = view.worldToScreen(toPointObject(edge.end));\n        let control1: Vec2 = [0, 0];\n        let control2: Vec2 = [0, 0];\n\n        if (type === EdgeType.BEZIER) {\n          control1 = add2(toPointArray(start), edge.control[0]);\n        } else if (type === EdgeType.BEZIER2) {\n          control1 = add2(toPointArray(start), edge.control[0]);\n          control2 = add2(toPointArray(end), edge.control[1]);\n        }\n\n        const startPoint = toPointArray(start);\n        const endPoint = toPointArray(end);\n\n        control1 = edge.control.length > 0 ? control1 : [0, 0];\n        control2 = edge.control.length > 1 ? control2 : [0, 0];\n\n        // Loop through sample points on the line and find one that is closest to the mouse point as possible\n        for (let i = 0; i < TEST_RESOLUTION; ++i) {\n          const linePoint = interpolate(\n            i / TEST_RESOLUTION,\n            startPoint,\n            endPoint,\n            control1,\n            control2\n          );\n          const distance = length2(subtract2(mouse, linePoint));\n\n          if (distance < closestDistance) {\n            secondClosestIndex = closestIndex;\n            secondClosestDistance = closestDistance;\n            closestIndex = i;\n            closestDistance = distance;\n          } else if (distance < secondClosestDistance) {\n            secondClosestIndex = i;\n            closestDistance = distance;\n          }\n        }\n\n        const t = closestIndex / TEST_RESOLUTION;\n        const lineWidth =\n          (edge.widthEnd - edge.widthStart) * t + edge.widthStart;\n\n        if (closestIndex === secondClosestIndex) {\n          return false;\n        }\n\n        const startSegment = interpolate(\n          closestIndex / TEST_RESOLUTION,\n          startPoint,\n          endPoint,\n          control1,\n          control2\n        );\n\n        const endSegment = interpolate(\n          secondClosestIndex / TEST_RESOLUTION,\n          startPoint,\n          endPoint,\n          control1,\n          control2\n        );\n\n        // See how close the mouse is to the line between the two closest points for a more accurate\n        // Test\n        closestDistance = distanceTo(startSegment, endSegment, mouse);\n\n        // This helps determine if the mouse is beyond the end point\n        if (\n          dot2(\n            subtract2(endSegment, startSegment),\n            subtract2(mouse, startSegment)\n          ) < 0\n        ) {\n          return false;\n        }\n\n        return closestDistance < lineWidth / 2.0 + minPickDistance;\n      }\n    };\n  }\n\n  return {\n    // Provide the calculated AABB world bounds for a given circle\n    boundsAccessor,\n\n    // Provide a precise hit test for the edge\n    hitTest: (edge: EdgeInstance, point: IPoint, _view: IProjection) => {\n      const mouse: [number, number] = [point.x, point.y];\n      let closestIndex = 0;\n      let closestDistance = Number.MAX_VALUE;\n\n      // Loop through sample points on the line and find one that is closest to the mouse point as possible\n      for (let i = 0; i < TEST_RESOLUTION; ++i) {\n        const linePoint = interpolate(\n          i / TEST_RESOLUTION,\n          edge.start,\n          edge.end,\n          edge.control.length > 0 ? edge.control[0] : [0, 0],\n          edge.control.length > 1 ? edge.control[1] : [0, 0]\n        );\n        const distance = length2(subtract2(mouse, linePoint));\n\n        if (distance < closestDistance) {\n          closestIndex = i;\n          closestDistance = distance;\n        }\n      }\n\n      const t = closestIndex / TEST_RESOLUTION;\n      const lineWidth = (edge.widthEnd - edge.widthStart) * t + edge.widthStart;\n\n      return closestDistance < lineWidth / 2.0;\n    }\n  };\n}\n","import * as Three from \"three\";\nimport { InstanceProvider } from \"../../instance-provider\";\nimport {\n  ILayerProps,\n  IModelType,\n  IPickingMethods,\n  Layer\n} from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  InstanceIOValue,\n  IShaderInitialization,\n  IUniform,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport {\n  CommonMaterialOptions,\n  IAutoEasingMethod,\n  shaderTemplate,\n  Vec\n} from \"../../util\";\nimport { EdgeInstance } from \"./edge-instance\";\nimport { edgePicking } from \"./edge-picking\";\nimport { EdgeBroadphase, EdgeScaleType, EdgeType } from \"./types\";\n\nexport interface IEdgeLayerProps<T extends EdgeInstance>\n  extends ILayerProps<T> {\n  /** Properties for animating attributes */\n  animate?: {\n    end?: IAutoEasingMethod<Vec>;\n    start?: IAutoEasingMethod<Vec>;\n    colorStart?: IAutoEasingMethod<Vec>;\n    colorEnd?: IAutoEasingMethod<Vec>;\n    control?: IAutoEasingMethod<Vec>;\n  };\n  /** Allows adjustments for broadphase interactions for an edge */\n  broadphase?: EdgeBroadphase;\n  /** Any distance to the mouse from an edge that is less than this distance will be picked */\n  minPickDistance?: number;\n  /** The transparency of the layer as a whole. (Makes for very efficient fading of all elements) */\n  opacity?: number;\n  /** This sets a scaling factor for the edge's line width and curve  */\n  scaleFactor?(): number;\n  /**\n   * If this is set, then the thickness of the line and the curvature of the line exists in screen space\n   * rather than world space.\n   */\n  scaleType?: EdgeScaleType;\n  /** Specifies how the edge is formed */\n  type: EdgeType;\n}\n\nexport interface IEdgeLayerState {}\n\n/** Converts a control list to an IO value */\nfunction toInstanceIOValue(value: [number, number][]): InstanceIOValue {\n  return [value[0][0], value[0][1], value[1][0], value[1][1]];\n}\n\n/** This picks the appropriate shader for the edge type desired */\nconst pickVS = {\n  [EdgeType.LINE]: require(\"./shader/edge-layer-line.vs\"),\n  [EdgeType.BEZIER]: require(\"./shader/edge-layer-bezier.vs\"),\n  [EdgeType.BEZIER2]: require(\"./shader/edge-layer-bezier2.vs\")\n};\n\n/** This is the base edge layer which is a template that can be filled with the needed specifics for a given line type */\nconst baseVS = require(\"./shader/edge-layer.vs\");\nconst screenVS = require(\"./shader/edge-layer-screen-curve.vs\");\nconst edgeFS = require(\"./shader/edge-layer.fs\");\n\n/**\n * This layer displays edges and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class EdgeLayer<\n  T extends EdgeInstance,\n  U extends IEdgeLayerProps<T>\n> extends Layer<T, U> {\n  // Set default props for the layer\n  static defaultProps: IEdgeLayerProps<EdgeInstance> = {\n    broadphase: EdgeBroadphase.ALL,\n    data: new InstanceProvider<EdgeInstance>(),\n    key: \"none\",\n    scaleType: EdgeScaleType.NONE,\n    scene: \"default\",\n    type: EdgeType.LINE\n  };\n\n  static attributeNames = {\n    start: \"start\",\n    end: \"end\",\n    widthStart: \"widthStart\",\n    widthEnd: \"widthEnd\",\n    depth: \"depth\",\n    colorStart: \"colorStart\",\n    colorEnd: \"colorEnd\",\n    control: \"control\"\n  };\n\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods(): IPickingMethods<EdgeInstance> {\n    return edgePicking(this.props);\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<EdgeInstance> {\n    const {\n      animate = {},\n      scaleFactor = () => 1,\n      type,\n      scaleType = EdgeScaleType.NONE\n    } = this.props;\n\n    const {\n      end: animateEnd,\n      start: animateStart,\n      colorStart: animateColorStart,\n      colorEnd: animateColorEnd,\n      control: animateControl\n    } = animate;\n\n    const MAX_SEGMENTS = type === EdgeType.LINE ? 2 : 50;\n\n    // Calculate the normals and interpolations for our vertices\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      [MAX_SEGMENTS * 2 + 2]: -1\n    };\n\n    const vertexInterpolation: { [key: number]: number } = {\n      0: 0,\n      [MAX_SEGMENTS * 2 + 2]: 1\n    };\n\n    let sign = 1;\n    for (let i = 0; i < MAX_SEGMENTS * 2; ++i) {\n      vertexToNormal[i + 1] = sign;\n      vertexInterpolation[i + 1] = Math.floor(i / 2) / (MAX_SEGMENTS - 1);\n      sign *= -1;\n    }\n\n    const templateOptions = {\n      interpolation: pickVS[type]\n    };\n\n    const vs = shaderTemplate({\n      options: templateOptions,\n      required: {\n        name: \"Edge Layer\",\n        values: [\"interpolation\"]\n      },\n      shader: scaleType === EdgeScaleType.NONE ? baseVS : screenVS,\n\n      // We do not want to remove any other templating options present\n      onToken: (token, replace) => {\n        if (!(token in templateOptions)) {\n          return `$\\{${token}}`;\n        }\n\n        return replace;\n      }\n    });\n\n    return {\n      fs: edgeFS,\n      instanceAttributes: [\n        {\n          easing: animateStart,\n          name: EdgeLayer.attributeNames.start,\n          size: InstanceAttributeSize.TWO,\n          update: o => o.start\n        },\n        {\n          easing: animateEnd,\n          name: EdgeLayer.attributeNames.end,\n          size: InstanceAttributeSize.TWO,\n          update: o => o.end\n        },\n        {\n          name: EdgeLayer.attributeNames.widthStart,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.widthStart]\n        },\n        {\n          name: EdgeLayer.attributeNames.widthEnd,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.widthEnd]\n        },\n        {\n          name: EdgeLayer.attributeNames.depth,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth]\n        },\n        {\n          easing: animateColorStart,\n          name: EdgeLayer.attributeNames.colorStart,\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.colorStart\n        },\n        {\n          easing: animateColorEnd,\n          name: EdgeLayer.attributeNames.colorEnd,\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.colorEnd\n        },\n        type === EdgeType.LINE\n          ? {\n              easing: animateControl,\n              name: EdgeLayer.attributeNames.control,\n              size: InstanceAttributeSize.FOUR,\n              update: _o => [0, 0, 0, 0]\n            }\n          : null,\n        type === EdgeType.BEZIER\n          ? {\n              easing: animateControl,\n              name: EdgeLayer.attributeNames.control,\n              size: InstanceAttributeSize.FOUR,\n              update: o => [o.control[0][0], o.control[0][1], 0, 0]\n            }\n          : null,\n        type === EdgeType.BEZIER2\n          ? {\n              easing: animateControl,\n              name: EdgeLayer.attributeNames.control,\n              size: InstanceAttributeSize.FOUR,\n              update: o => toInstanceIOValue(o.control)\n            }\n          : null\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: (_uniform: IUniform) => [scaleFactor()]\n        },\n        {\n          name: \"layerOpacity\",\n          size: UniformSize.ONE,\n          update: (_uniform: IUniform) => [\n            this.props.opacity === undefined ? 1.0 : this.props.opacity\n          ]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexInterpolation[vertex],\n            // The number of vertices\n            MAX_SEGMENTS * 2\n          ]\n        }\n      ],\n      vertexCount: MAX_SEGMENTS * 2 + 2,\n      vs: vs.shader\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentShape;\n  }\n}\n","export * from \"./edge-layer\";\nexport * from \"./edge-instance\";\nexport * from \"./types\";\n","import { observable } from \"../../instance-provider\";\nimport { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { Vec2 } from \"../../util\";\n\nexport interface ICircleInstanceOptions extends IInstanceOptions {\n  /** Center x position of the circle */\n  center: Vec2;\n  /** The radius of the circle */\n  radius: number;\n  /** The color of this circle */\n  color?: [number, number, number, number];\n  /** The z depth of the circle (for draw ordering) */\n  depth?: number;\n}\n\nexport class CircleInstance extends Instance {\n  @observable color: [number, number, number, number] = [1.0, 1.0, 1.0, 1.0];\n  @observable depth: number = 0;\n  @observable radius: number = 0;\n  @observable center: Vec2 = [0, 0];\n\n  constructor(options: ICircleInstanceOptions) {\n    super(options);\n\n    this.color = options.color || this.color;\n    this.radius = options.radius || this.radius;\n    this.center = options.center || this.center;\n    this.depth = options.depth || this.depth;\n  }\n\n  get width() {\n    return this.radius * 2;\n  }\n\n  get height() {\n    return this.radius * 2;\n  }\n}\n","module.exports = \"precision highp float;\\n\\n${import: projection}\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float edgeSharpnessBase;\\nvarying vec2 pointCoord;\\n\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  vertexColor = color;\\n  vertexColor.a *= layerOpacity;\\n  float size = radius * scaleFactor;\\n  edgeSharpness = mix(0.8, 0.0, min((size * 6.0 * pixelRatio) / (45.0 * pixelRatio), 1.0));\\n  edgeSharpnessBase = mix(0.1, 0.0, min((size * 6.0 * pixelRatio) / (45.0 * pixelRatio), 1.0));\\n  pointCoord = (position.xy + vec2(1.0, 1.0)) / 2.0;\\n\\n  // Center within clip space\\n  vec4 clipCenter = clipSpace(vec3(center, depth));\\n  // Center in screen space\\n  vec2 screenCenter = (clipCenter.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Position in screen space\\n  vec2 vertex = (position.xy * size) + screenCenter;\\n  // Position back to clip space\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), clipCenter.zw);\\n\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float edgeSharpnessBase;\\nvarying vec2 pointCoord;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius + (radius * edgeSharpnessBase),\\n    dot(dist, dist) * 4.0\\n  );\\n}\\n\\n${extendHeader}\\n\\nvoid main() {\\n  float step_factor = circle(pointCoord.xy, 1.0);\\n\\n  setColor(mix(\\n    vec4(0.0, 0.0, 0.0, 0.0),\\n    vertexColor,\\n    step_factor\\n  ));\\n\\n  ${extend}\\n}\\n\"","/**\n * Defines a 2d point within a coordinate plane\n */\nexport interface IPoint {\n  x: number;\n  y: number;\n}\n\n/**\n * Calculates the distance between two points, but keeps the distance in dquared form\n * thus performing Math.sqrt() on the output of this distance would provide the true\n * distance between the points.\n *\n * It is often faster and all that is needed to compare squared distances vs real distances\n * thus eliminating multiple Math.sqrt operations\n *\n * NOTE: For vectors this is the same as (pseudo code):\n * let vector3 = vector2.subtract(vector1)\n * return vector3.dot(vector3)\n *\n * @param p1 The point to find the distance from the second point\n * @param p2 The point to find the distance from the first point\n *\n * @return {number} The distance * distance between the two points\n */\nfunction squareDistance(p1: IPoint, p2: IPoint): number {\n  const dx = p1.x - p2.x;\n  const dy = p1.y - p2.y;\n\n  return dx * dx + dy * dy;\n}\n\n/**\n * Contains methods for managing or manipulating points\n *\n * @export\n * @class Point\n */\nexport class Point {\n  /**\n   * Adds two points together\n   *\n   * @static\n   * @param {IPoint} p1\n   * @param {IPoint} p2\n   * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n   *\n   * @return {IPoint} The two points added together\n   */\n  static add(p1: IPoint, p2: IPoint, out?: IPoint): IPoint {\n    if (out) {\n      out.x = p1.x + p2.x;\n      out.y = p1.y + p2.y;\n      return out;\n    }\n\n    return {\n      x: p1.x + p2.x,\n      y: p1.y + p2.y\n    };\n  }\n\n  /**\n   * @static\n   * This analyzes a test point against a list of points and determines which of the points is\n   * the closest to the test point. If there are equi-distant points in the list, this will return\n   * the first found in the list.\n   *\n   * @param {IPoint} testPoint The point to compare against other points\n   * @param {IPoint[]} points The list of points to be compared against\n   *\n   * @return {IPoint} The closest point to the test point\n   */\n  static getClosest(testPoint: IPoint, points: IPoint[]): IPoint {\n    let closestDistance = Number.MAX_VALUE;\n    let closestPoint: IPoint = testPoint;\n    let distance: number;\n\n    const findClosest = function(point: IPoint) {\n      distance = squareDistance(point, testPoint);\n\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestPoint = point;\n      }\n    };\n\n    points.forEach(findClosest);\n\n    return closestPoint;\n  }\n\n  /**\n   * @static\n   * This analyzes a test point against a list of points and determines which of the points is\n   * the closest to the test point. If there are equi-distant points in the list, this will return\n   * the first found in the list.\n   *\n   * This just returns the index of the found point and not the point itself\n   *\n   * @param {IPoint} testPoint The point to compare against other points\n   * @param {IPoint[]} points The list of points to be compared against\n   *\n   * @return {number} The index of the closest point to the test point\n   */\n  static getClosestIndex(testPoint: IPoint, points: IPoint[]): number {\n    let closestDistance = Number.MAX_VALUE;\n    let closestPoint: number = 0;\n    let distance: number;\n\n    const findClosest = function(point: IPoint, i: number) {\n      distance = squareDistance(point, testPoint);\n\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestPoint = i;\n      }\n    };\n\n    points.forEach(findClosest);\n\n    return closestPoint;\n  }\n\n  /**\n   * @static\n   * This will calculate a direction vector between two points that points toward p2\n   *\n   * @param {IPoint} amount The start of the direction\n   * @param {IPoint} from The direction to point the vector towards\n   * @param {boolean} normalize If true, this will make the vector have a magnitude of 1\n   *\n   * @returns {number}\n   */\n  static subtract(\n    amount: IPoint,\n    from: IPoint,\n    normalize: boolean = false\n  ): IPoint {\n    let dx = from.x - amount.x;\n    let dy = from.y - amount.y;\n\n    if (normalize) {\n      const magnitude = Math.sqrt(dx * dx + dy * dy);\n      dx /= magnitude;\n      dy /= magnitude;\n    }\n\n    return {\n      x: dx,\n      y: dy\n    };\n  }\n\n  /**\n   * @static\n   * Gets the distance between two points\n   *\n   * @param {IPoint} p1\n   * @param {IPoint} p2\n   * @param {boolean} squared If set to true, returns the distance * distance (performs faster)\n   *\n   * @returns {number} The real distance between two points\n   */\n  static getDistance(p1: IPoint, p2: IPoint, squared: boolean = false): number {\n    if (squared) {\n      return squareDistance(p1, p2);\n    }\n\n    return Math.sqrt(squareDistance(p1, p2));\n  }\n\n  /**\n   * @static\n   * Gets a point perfectly between two points\n   *\n   * @param {IPoint} p1\n   * @param {IPoint} p2\n   *\n   * @returns {IPoint} The point between the two provided points\n   */\n  static getMidpoint(p1: IPoint, p2: IPoint) {\n    const direction = Point.subtract(p1, p2);\n\n    return {\n      x: direction.x / 2 + p1.x,\n      y: direction.y / 2 + p1.y\n    };\n  }\n\n  static make(x: number, y: number) {\n    return { x, y };\n  }\n\n  /**\n   * Scales a point by a given amount\n   *\n   * @static\n   * @param {IPoint} p1\n   * @param {number} s The amount to scale the point by\n   * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n   *\n   * @memberof Point\n   */\n  static scale(p1: IPoint, s: number, out?: IPoint): IPoint {\n    if (out) {\n      out.x = p1.x * s;\n      out.y = p1.y * s;\n      return out;\n    }\n\n    return {\n      x: p1.x * s,\n      y: p1.y * s\n    };\n  }\n\n  /**\n   * Makes a new point initialized to {0,0}\n   *\n   * @static\n   * @returns {IPoint} A new point object at {0,0}\n   */\n  static zero(): IPoint {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n}\n","import * as Three from \"three\";\nimport { InstanceProvider } from \"../../instance-provider\";\nimport { Bounds, IPoint } from \"../../primitives\";\nimport { ILayerProps, IModelType, Layer } from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  IProjection,\n  IShaderInitialization,\n  IUniform,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport { CommonMaterialOptions, Vec } from \"../../util\";\nimport { IAutoEasingMethod } from \"../../util/auto-easing-method\";\nimport { CircleInstance } from \"./circle-instance\";\n\nexport interface ICircleLayerProps<T extends CircleInstance>\n  extends ILayerProps<T> {\n  /** This sets the  */\n  fadeOutOversized?: number;\n  /** This sets a scaling factor for the circle's radius */\n  scaleFactor?(): number;\n  /** Flags this layer to draw  */\n  disableDepthTest?: boolean;\n  /** Opacity of the layer as a whole */\n  opacity?: number;\n  /**\n   * This is the properties that can toggle on animations.\n   *\n   * NOTE: The more properties declared as animated will reduce the performance of the layer.\n   * if animated properties are created, it can be beneficial to have other layers with no\n   * animations be available for the Instances to 'rest' in when not moving.\n   */\n  animate?: {\n    center?: IAutoEasingMethod<Vec>;\n    radius?: IAutoEasingMethod<Vec>;\n    color?: IAutoEasingMethod<Vec>;\n  };\n}\n\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class CircleLayer<\n  T extends CircleInstance,\n  U extends ICircleLayerProps<T>\n> extends Layer<T, U> {\n  static defaultProps: ICircleLayerProps<CircleInstance> = {\n    data: new InstanceProvider<CircleInstance>(),\n    fadeOutOversized: -1,\n    key: \"\",\n    scaleFactor: () => 1,\n    scene: \"default\"\n  };\n\n  static attributeNames = {\n    center: \"center\",\n    radius: \"radius\",\n    depth: \"depth\",\n    color: \"color\"\n  };\n\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods() {\n    const noScaleFactor = () => 1;\n\n    return {\n      // Provide the calculated AABB world bounds for a given circle\n      boundsAccessor: (circle: CircleInstance) =>\n        new Bounds({\n          height: circle.radius * 2,\n          width: circle.radius * 2,\n          x: circle.center[0] - circle.radius,\n          y: circle.center[1] - circle.radius\n        }),\n\n      // Provide a precise hit test for the circle\n      hitTest: (circle: CircleInstance, point: IPoint, view: IProjection) => {\n        const circleScreenCenter = view.worldToScreen({\n          x: circle.center[0],\n          y: circle.center[1]\n        });\n        const mouseScreen = view.worldToScreen(point);\n        const r = circle.radius * (this.props.scaleFactor || noScaleFactor)();\n\n        const delta = [\n          mouseScreen.x - circleScreenCenter.x,\n          mouseScreen.y - circleScreenCenter.y\n        ];\n\n        return delta[0] * delta[0] + delta[1] * delta[1] < r * r;\n      }\n    };\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<CircleInstance> {\n    const scaleFactor = this.props.scaleFactor || (() => 1);\n    const animations = this.props.animate || {};\n    const {\n      center: animateCenter,\n      radius: animateRadius,\n      color: animateColor\n    } = animations;\n\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      1: 1,\n      2: -1,\n      3: 1,\n      4: -1,\n      5: -1\n    };\n\n    const vertexToSide: { [key: number]: number } = {\n      0: -1,\n      1: -1,\n      2: -1,\n      3: 1,\n      4: 1,\n      5: 1\n    };\n\n    return {\n      fs: require(\"./circle-layer.fs\"),\n      instanceAttributes: [\n        {\n          easing: animateCenter,\n          name: CircleLayer.attributeNames.center,\n          size: InstanceAttributeSize.TWO,\n          update: circle => circle.center\n        },\n        {\n          easing: animateRadius,\n          name: CircleLayer.attributeNames.radius,\n          size: InstanceAttributeSize.ONE,\n          update: circle => [circle.radius]\n        },\n        {\n          name: CircleLayer.attributeNames.depth,\n          size: InstanceAttributeSize.ONE,\n          update: circle => [circle.depth]\n        },\n        {\n          easing: animateColor,\n          name: CircleLayer.attributeNames.color,\n          size: InstanceAttributeSize.FOUR,\n          update: circle => circle.color\n        }\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: (_uniform: IUniform) => [scaleFactor()]\n        },\n        {\n          name: \"layerOpacity\",\n          size: UniformSize.ONE,\n          update: (_uniform: IUniform) => [\n            this.props.opacity === undefined ? 1.0 : this.props.opacity\n          ]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexToSide[vertex],\n            0\n          ]\n        }\n      ],\n      vertexCount: 6,\n      vs: require(\"./circle-layer.vs\")\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentShape;\n  }\n}\n","export * from \"./circle-layer\";\nexport * from \"./circle-instance\";\n","import { observable } from \"../../instance-provider\";\nimport { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { Vec2, Vec4 } from \"../../util\";\n\nexport interface IArcInstanceOptions extends IInstanceOptions {\n  /** The start and end angle of the arc */\n  angle: Vec2;\n  /** The center point where the arc wraps around */\n  center: Vec2;\n  /** This is the end color of the arc */\n  colorEnd: Vec4;\n  /** This is the start color of the arc */\n  colorStart: Vec4;\n  /** Depth sorting of the arc (or the z value of the lable) */\n  depth: number;\n  /** The radius of how far the middle of the arc is from the center point */\n  radius: number;\n  /** The start to end thickness of the arc */\n  thickness: Vec2;\n}\n\n/**\n * This generates a new arc instance. An arc is a shape with a center and an angle that\n * is spans. This effectively can be used for a 'pie slice' or just the edge line on the pie\n * slice.\n */\nexport class ArcInstance extends Instance {\n  /** The start and end angle of the arc */\n  @observable angle: Vec2 = [0, Math.PI];\n  /** This is the end color of the arc */\n  @observable colorEnd: Vec4 = [0, 0, 0, 1];\n  /** This is the start color of the arc */\n  @observable colorStart: Vec4 = [0, 0, 0, 1];\n  /** The center point where the arc wraps around */\n  @observable center: Vec2 = [0, 0];\n  /** Depth sorting of the arc (or the z value of the lable) */\n  @observable depth: number = 0;\n  /** The radius of how far the middle of the arc is from the center point */\n  @observable radius: number = 1;\n  /** The start to end thickness of the arc */\n  @observable thickness: Vec2 = [1, 1];\n\n  constructor(options: IArcInstanceOptions) {\n    super(options);\n\n    this.angle = options.angle || this.angle;\n    this.colorEnd = options.colorEnd || this.colorEnd;\n    this.colorStart = options.colorStart || this.colorStart;\n    this.center = options.center || this.center;\n    this.depth = options.depth || this.depth;\n    this.radius = options.radius || this.radius;\n    this.thickness = options.thickness || this.thickness;\n  }\n}\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\n${extendHeader}\\n\\nvoid main() {\\n  setColor(vertexColor);\\n  gl_FragColor = vertexColor;\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\n/**\\n  This vertex shader calculates edges whose curve and width is in screen space where the curve is\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nvarying vec4 vertexColor;\\n\\nvec2 interpolation(float t, vec2 center, float radius, float start, float end) {\\n  float angle = (end - start) * t + start;\\n  return center + vec2(cos(angle) * radius, sin(angle) * radius);\\n}\\n\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure some of the vec injections\\n  float startAngle = angle.x;\\n  float endAngle = angle.y;\\n  float widthStart = thickness.x;\\n  float widthEnd = thickness.y;\\n\\n  // Convert world points to screen space\\n  vec4 centerClip = clipSpace(vec3(center, depth));\\n  vec2 centerScreen = (centerClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, centerScreen, radius, startAngle, endAngle);\\n  // Get normal with currentPosition and center\\n  vec2 currentNormal = normalize(currentPosition - centerScreen);\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (normal * lineThickness);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a;\\n\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), centerClip.zw);\\n  gl_PointSize = 5.0;\\n\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${import: projection}\\n\\nfloat PI = 3.14159265;\\nfloat PI_2 = 6.2831853;\\n\\n/**\\n * This is an approximation of sin that allows us to bypass hardware precision\\n * limitations for sin.\\n *\\n * http://lab.polygonal.de/2007/07/18/fast-and-accurate-sinecosine-approximation/\\n * This is a GPU adaptation of this method to provide optimal GPU performance for the operation\\n */\\nfloat fsin(float x) {\\n  float sine;\\n\\n  // Always wrap input angle to -PI..PI\\n  x += mix(\\n    mix(\\n      0.0,\\n      -PI_2, float(x > PI)\\n    ),\\n    PI_2, float(x < -PI)\\n  );\\n\\n  // Compute sine\\n  sine = 1.27323954 * x;\\n  sine += mix(-1.0, 1.0, float(x < 0.0)) * 0.405284735 * x * x;\\n  sine = 0.225 * (sine * (mix(1.0, -1.0, float(sine < 0.0)) * sine) - sine) + sine;\\n\\n  return sine;\\n}\\n\\n/**\\n * This is an approximation of cos that allows us to bypass hardware precision\\n * limitations for cos.\\n *\\n * http://lab.polygonal.de/2007/07/18/fast-and-accurate-sinecosine-approximation/\\n * This is a GPU adaptation of this method to provide optimal GPU performance for the operation\\n */\\nfloat fcos(float x) {\\n  float sine;\\n  // Cos is the same as sine but\\n  x += 1.57079632;\\n\\n  // Always wrap input angle to -PI..PI\\n  x += mix(\\n    mix(\\n      0.0,\\n      -PI_2, float(x > PI)\\n    ),\\n    PI_2, float(x < -PI)\\n  );\\n\\n  // Compute sine\\n  sine = 1.27323954 * x;\\n  sine += mix(-1.0, 1.0, float(x < 0.0)) * 0.405284735 * x * x;\\n  sine = 0.225 * (sine * (mix(1.0, -1.0, float(sine < 0.0)) * sine) - sine) + sine;\\n\\n  return sine;\\n}\\n\\n/**\\n  This vertex shader calculates edges whose curve and width is in screen space where the curve is\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nvarying vec4 vertexColor;\\n\\nvec2 interpolation(float t, vec2 center, float radius, float start, float end) {\\n  float angle = (end - start) * t + start;\\n  return center + vec2(fcos(angle) * radius, fsin(angle) * radius);\\n}\\n\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure some of the vec injections\\n  float startAngle = angle.x;\\n  float endAngle = angle.y;\\n  float widthStart = thickness.x;\\n  float widthEnd = thickness.y;\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, center, radius, startAngle, endAngle);\\n  // Get normal with currentPosition and center\\n  vec2 currentNormal = normalize(currentPosition - center);\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (normal * lineThickness);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n\\n  ${extend}\\n}\\n\"","import { Bounds } from \"../primitives\";\nimport { IPoint } from \"../primitives/point\";\nimport {\n  IColorPickingData,\n  InstanceHitTest,\n  IPickInfo,\n  IProjection,\n  PickType\n} from \"../types\";\nimport { Instance, TrackedQuadTree } from \"../util\";\nimport { UniformColorDiffProcessor } from \"./buffer-management/uniform-buffering/uniform-color-diff-processor\";\nimport { ILayerProps, Layer } from \"./layer\";\n\nfunction isColorProcessor<T extends Instance>(\n  val: any\n): val is UniformColorDiffProcessor<T> {\n  return val && val.colorPicking;\n}\n\n/**\n * This manages mouse gestures broadcast to the layer and handles appropriate actions such as determining\n * how to make the interaction translate to picking events for the layer's instances.\n *\n * This class, in summary, takes in the gestures to the view and converts them to gestures to the instances.\n */\nexport class LayerInteractionHandler<\n  T extends Instance,\n  U extends ILayerProps<T>\n> {\n  /** This is the color picking information most recently rendered */\n  colorPicking?: IColorPickingData;\n  /** This tracks the elements that have the mouse currently over them */\n  isMouseOver = new Map<T, boolean>();\n  /** This tracks the elements the mouse was down on */\n  isMouseDown = new Map<T, boolean>();\n  /** This is the layer the interaction handler manages events for */\n  layer: Layer<T, U>;\n\n  constructor(layer: Layer<T, U>) {\n    this.layer = layer;\n  }\n\n  /**\n   * Retrieves the color picking instance determined for the procedure.\n   */\n  getColorPickInstance() {\n    if (\n      this.colorPicking &&\n      isColorProcessor<T>(this.layer.diffManager.processor)\n    ) {\n      return this.layer.diffManager.processor.colorPicking.uidToInstance.get(\n        0xffffff - this.colorPicking.nearestColor\n      );\n    }\n\n    return null;\n  }\n\n  /**\n   * Handles mouse down gestures for a layer within a view\n   */\n  handleMouseOver(_view: IProjection, _mouse: IPoint) {\n    // This is the mouse over for the view itself. We should probably just let the mouse over events handle the interactions\n    // With the instances\n  }\n\n  /**\n   * Handles mouse down gestures for a layer within a view\n   */\n  handleMouseDown(view: IProjection, mouse: IPoint, button: number) {\n    // This handles interactions for PickType ALL layers\n    if (this.layer.picking && this.layer.picking.type !== PickType.NONE) {\n      const { onMouseDown } = this.layer.props;\n\n      // If we have a listener for either event we should continue to process the event in more detail\n      if (onMouseDown) {\n        const world = view.viewToWorld(mouse);\n        let hitTest: InstanceHitTest<T>;\n        let query: TrackedQuadTree<T>[\"query\"];\n        let querySpace;\n        let instances: T[] = [];\n\n        if (this.layer.picking.type === PickType.ALL) {\n          hitTest = this.layer.picking.hitTest;\n          query = this.layer.picking.quadTree.query.bind(\n            this.layer.picking.quadTree\n          );\n          querySpace = (check: Bounds | IPoint) =>\n            query(check).filter(o => hitTest(o, world, view));\n          instances = query(world).filter(o => hitTest(o, world, view));\n        } else if (this.layer.picking.type === PickType.SINGLE) {\n          // Get the instance for the nearest color\n          const instanceForColor = this.getColorPickInstance();\n\n          if (instanceForColor) {\n            instances.push(instanceForColor);\n          }\n        }\n\n        const info: IPickInfo<T> = {\n          button,\n          instances,\n          layer: this.layer.id,\n          projection: view,\n          querySpace,\n          screen: [mouse.x, mouse.y],\n          world: [world.x, world.y]\n        };\n\n        onMouseDown(info);\n\n        // We track all the elements the mouse is currently down on\n        this.isMouseDown.clear();\n        instances.forEach(o => this.isMouseDown.set(o, true));\n      }\n    }\n  }\n\n  /**\n   * Handles mouse out events for a layer within the view\n   */\n  handleMouseOut(view: IProjection, mouse: IPoint) {\n    // This will fire an instance mouse out for any over instances in the queue since we left the view\n    // Thus no instances shall be considered 'over'\n    if (this.layer.picking && this.layer.picking.type !== PickType.NONE) {\n      const { onMouseOut } = this.layer.props;\n\n      if (onMouseOut) {\n        const world = view.viewToWorld(mouse);\n        let hitTest: InstanceHitTest<T>;\n        let query: TrackedQuadTree<T>[\"query\"];\n        let querySpace;\n\n        if (this.layer.picking.type === PickType.ALL) {\n          hitTest = this.layer.picking.hitTest;\n          query = this.layer.picking.quadTree.query.bind(\n            this.layer.picking.quadTree\n          );\n          querySpace = (check: Bounds | IPoint) =>\n            query(check).filter(o => hitTest(o, world, view));\n        }\n\n        const info: IPickInfo<T> = {\n          instances: Array.from(this.isMouseOver.keys()),\n          layer: this.layer.id,\n          projection: view,\n          querySpace,\n          screen: [mouse.x, mouse.y],\n          world: [world.x, world.y]\n        };\n\n        onMouseOut(info);\n      }\n    }\n\n    // We clear as no instances are over anymore\n    this.isMouseOver.clear();\n    // We also clear all down elements as the mouse is no longer in proper context for the instances\n    // But since the mouse was never actually released, we do not fire an up\n    this.isMouseDown.clear();\n  }\n\n  /**\n   * Handles mouse up gestures for the layer within the provided view\n   */\n  handleMouseUp(view: IProjection, mouse: IPoint, button: number) {\n    // This handles interactions for PickType ALL layers\n    if (this.layer.picking && this.layer.picking.type !== PickType.NONE) {\n      const { onMouseUp } = this.layer.props;\n\n      // If we have a listener for either event we should continue to process the event in more detail\n      if (onMouseUp) {\n        const world = view.viewToWorld(mouse);\n        let hitTest: InstanceHitTest<T>;\n        let query: TrackedQuadTree<T>[\"query\"];\n        let querySpace;\n        let instances: T[] = [];\n\n        if (this.layer.picking.type === PickType.ALL) {\n          hitTest = this.layer.picking.hitTest;\n          query = this.layer.picking.quadTree.query.bind(\n            this.layer.picking.quadTree\n          );\n          querySpace = (check: Bounds | IPoint) =>\n            query(check).filter(o => hitTest(o, world, view));\n          instances = query(world).filter(o => hitTest(o, world, view));\n        } else if (this.layer.picking.type === PickType.SINGLE) {\n          // Get the instance for the nearest color\n          const instanceForColor = this.getColorPickInstance();\n\n          if (instanceForColor) {\n            instances.push(instanceForColor);\n          }\n        }\n\n        const info: IPickInfo<T> = {\n          button,\n          instances,\n          layer: this.layer.id,\n          projection: view,\n          querySpace,\n          screen: [mouse.x, mouse.y],\n          world: [world.x, world.y]\n        };\n\n        onMouseUp(info);\n      }\n    }\n  }\n\n  /**\n   * Mouse move events on the layer will detect when instances have their item newly over or just moved on\n   */\n  handleMouseMove(view: IProjection, mouse: IPoint) {\n    // This handles interactions for PickType ALL layers\n    const { onMouseOver, onMouseMove, onMouseOut } = this.layer.props;\n\n    if (this.layer.picking && this.layer.picking.type !== PickType.NONE) {\n      // If we have a listener for either event we should continue to process the event in more detail\n      if (onMouseOver || onMouseMove || onMouseOut) {\n        let info: IPickInfo<T>;\n        const world = view.viewToWorld(mouse);\n        let hitTest: InstanceHitTest<T>;\n        let query: TrackedQuadTree<T>[\"query\"];\n        let querySpace;\n        let instances: T[] = [];\n\n        if (this.layer.picking.type === PickType.ALL) {\n          hitTest = this.layer.picking.hitTest;\n          query = this.layer.picking.quadTree.query.bind(\n            this.layer.picking.quadTree\n          );\n          querySpace = (check: Bounds | IPoint) =>\n            query(check).filter(o => hitTest(o, world, view));\n          instances = query(world).filter(o => hitTest(o, world, view));\n        } else if (this.layer.picking.type === PickType.SINGLE) {\n          // Get the instance for the nearest color\n          const instanceForColor = this.getColorPickInstance();\n\n          if (instanceForColor) {\n            instances.push(instanceForColor);\n          }\n        }\n\n        // Broadcast the picking info for newly over instances to any of the layers listeners if needed\n        if (onMouseOver) {\n          const notOverInstances = instances.filter(\n            o => !this.isMouseOver.get(o)\n          );\n          info = {\n            instances: notOverInstances,\n            layer: this.layer.id,\n            projection: view,\n            querySpace,\n            screen: [mouse.x, mouse.y],\n            world: [world.x, world.y]\n          };\n\n          if (notOverInstances.length > 0) onMouseOver(info);\n        }\n\n        // Broadcast the the picking info for all instances that the mouse moved on\n        if (onMouseMove) {\n          // This is the pick info object we will broadcast from the layer\n          info = {\n            instances,\n            layer: this.layer.id,\n            projection: view,\n            querySpace,\n            screen: [mouse.x, mouse.y],\n            world: [world.x, world.y]\n          };\n\n          onMouseMove(info);\n        }\n\n        // We take the hovered instances\n        const isCurrentlyOver = new Map<T, boolean>();\n        instances.forEach(o => isCurrentlyOver.set(o, true));\n\n        // Broadcast the the picking info for all instances that the mouse moved off of\n        if (onMouseOut) {\n          const noLongerOver = Array.from(this.isMouseOver.keys()).filter(\n            o => !isCurrentlyOver.get(o)\n          );\n\n          // This is the pick info object we will broadcast from the layer\n          info = {\n            instances: noLongerOver,\n            layer: this.layer.id,\n            projection: view,\n            querySpace,\n            screen: [mouse.x, mouse.y],\n            world: [world.x, world.y]\n          };\n\n          if (noLongerOver.length > 0) onMouseOut(info);\n        }\n\n        // We store the current hovered over items as our over item list for next interaction\n        this.isMouseOver = isCurrentlyOver;\n      }\n    }\n  }\n\n  /**\n   * Handles click gestures on the layer within a view\n   */\n  handleMouseClick(view: IProjection, mouse: IPoint, button: number) {\n    // This handles interactions for PickType ALL layers\n    if (this.layer.picking && this.layer.picking.type !== PickType.NONE) {\n      const { onMouseClick } = this.layer.props;\n\n      // If we have a listener for either event we should continue to process the event in more detail\n      if (onMouseClick) {\n        const world = view.viewToWorld(mouse);\n        let hitTest: InstanceHitTest<T>;\n        let query: TrackedQuadTree<T>[\"query\"];\n        let querySpace;\n        let instances: T[] = [];\n\n        if (this.layer.picking.type === PickType.ALL) {\n          hitTest = this.layer.picking.hitTest;\n          query = this.layer.picking.quadTree.query.bind(\n            this.layer.picking.quadTree\n          );\n          querySpace = (check: Bounds | IPoint) =>\n            query(check).filter(o => hitTest(o, world, view));\n          instances = query(world).filter(o => hitTest(o, world, view));\n        } else if (this.layer.picking.type === PickType.SINGLE) {\n          // Get the instance for the nearest color\n          const instanceForColor = this.getColorPickInstance();\n\n          if (instanceForColor) {\n            instances.push(instanceForColor);\n          }\n        }\n\n        const info: IPickInfo<T> = {\n          button,\n          instances,\n          layer: this.layer.id,\n          projection: view,\n          querySpace,\n          screen: [mouse.x, mouse.y],\n          world: [world.x, world.y]\n        };\n\n        onMouseClick(info);\n      }\n    }\n  }\n\n  /**\n   * Handles drag gestures for the layer within the view\n   */\n  handleMouseDrag(_view: IProjection, _mouse: IPoint) {\n    // We probably should not broadcast drag events for the sake of instances. Instance dragging should be handled on\n    // An instance by instance basis rather than coming from the view's gestures\n  }\n}\n","import { Instance } from \"../../../instance-provider\";\nimport { IQuadTreePickingMetrics, PickType } from \"../../../types\";\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  isBufferLocation\n} from \"../buffer-manager-base\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\nimport { IUniformBufferLocation } from \"./uniform-buffer-manager\";\nimport { UniformDiffProcessor } from \"./uniform-diff-processor\";\n\nconst EMPTY: number[] = [];\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class UniformQuadDiffProcessor<\n  T extends Instance\n> extends UniformDiffProcessor<T> {\n  quadPicking: IQuadTreePickingMetrics<T>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>\n  ) {\n    super(layer, bufferManager);\n\n    if (layer.picking.type === PickType.ALL) {\n      this.quadPicking = layer.picking;\n    } else {\n      console.warn(\n        \"Diff Processing Error: A layer has a diff processor requesting Quad Processing but the picking type is not valid.\"\n      );\n    }\n  }\n\n  /**\n   * This processes add operations from changes in the instancing data and manages the layer's quad tree\n   * with the instance as well.\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (uniformCluster) {\n      manager.changeInstance(manager, instance, EMPTY, uniformCluster);\n    } else {\n      // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n      const uniforms = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocation(uniforms)) {\n        instance.active = true;\n        instance.easingId = manager.layer.easingId;\n        manager.updateInstance(manager.layer, instance, uniforms);\n\n        // Ensure the instance has an updated injection in the quad tree\n        manager.quadPicking.quadTree.remove(instance);\n        manager.quadPicking.quadTree.add(instance);\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the uniforms\n    if (uniformCluster) {\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n\n      // Ensure the instance has an updated injection in the quad tree\n      manager.quadPicking.quadTree.remove(instance);\n      manager.quadPicking.quadTree.add(instance);\n    } else {\n      // If we don't have existing uniforms, then we must remove the instance\n      manager.addInstance(manager, instance, EMPTY, uniformCluster);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation\n  ) {\n    if (uniformCluster) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // Remove the easing information the instance gained from being apart of the layer\n      instance.clearEasing();\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n      // Remove the instance from our quad tree\n      manager.quadPicking.quadTree.remove(instance);\n    }\n  }\n}\n","import { Instance } from \"../../../instance-provider\";\nimport { ISinglePickingMetrics, PickType } from \"../../../types\";\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  isBufferLocation\n} from \"../buffer-manager-base\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\nimport { IUniformBufferLocation } from \"./uniform-buffer-manager\";\nimport { UniformDiffProcessor } from \"./uniform-diff-processor\";\n\nconst EMPTY: number[] = [];\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class UniformColorDiffProcessor<\n  T extends Instance\n> extends UniformDiffProcessor<T> {\n  colorPicking: ISinglePickingMetrics<T>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>\n  ) {\n    super(layer, bufferManager);\n\n    if (layer.picking.type === PickType.SINGLE) {\n      this.colorPicking = layer.picking;\n      this.colorPicking.uidToInstance = new Map<number, T>();\n    } else {\n      console.warn(\n        \"Diff Processing Error: A layer has a diff processor requesting Color Processing but the picking type is not valid.\"\n      );\n    }\n  }\n\n  /**\n   * This processes add operations from changes in the instancing data and manages the layer's matching of\n   * color / UID to Instance\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster: IUniformBufferLocation\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (uniformCluster) {\n      manager.changeInstance(manager, instance, EMPTY, uniformCluster);\n    } else {\n      // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n      const uniforms = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocation(uniforms)) {\n        instance.active = true;\n        instance.easingId = manager.layer.easingId;\n        manager.updateInstance(manager.layer, instance, uniforms);\n\n        // Make sure the instance is mapped to it's UID\n        manager.colorPicking.uidToInstance.set(instance.uid, instance);\n      } else {\n        console.warn(\n          \"A data cluster was not provided by the manager to associate an instance with.\"\n        );\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster: IUniformBufferLocation\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the uniforms\n    if (uniformCluster) {\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n    } else {\n      // If we don't have existing uniforms, then we must remove the instance\n      manager.addInstance(manager, instance, EMPTY, uniformCluster);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster: IUniformBufferLocation\n  ) {\n    if (uniformCluster) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // Remove the easing information the instance gained from being apart of the layer\n      instance.clearEasing();\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n      // Remove the instance from our quad tree\n      manager.colorPicking.uidToInstance.delete(instance.uid);\n    }\n  }\n}\n","import { Instance } from \"../../../instance-provider\";\nimport { IQuadTreePickingMetrics, PickType } from \"../../../types\";\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  isBufferLocationGroup\n} from \"../buffer-manager-base\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\nimport { IInstanceAttributeBufferLocationGroup } from \"./instance-attribute-buffer-manager\";\nimport { InstanceAttributeDiffProcessor } from \"./instance-attribute-diff-processor\";\n\nconst EMPTY: number[] = [];\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class InstanceAttributeQuadDiffProcessor<\n  T extends Instance\n> extends InstanceAttributeDiffProcessor<T> {\n  quadPicking: IQuadTreePickingMetrics<T>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>\n  ) {\n    super(layer, bufferManager);\n\n    if (layer.picking.type === PickType.ALL) {\n      this.quadPicking = layer.picking;\n    } else {\n      console.warn(\n        \"Diff Processing Error: A layer has a diff processor requesting Quad Processing but the picking type is not valid.\"\n      );\n    }\n  }\n\n  /**\n   * This processes add operations from changes in the instancing data and manages the layer's quad tree\n   * with the instance as well.\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (bufferLocations) {\n      manager.changeInstance(manager, instance, EMPTY, bufferLocations);\n    } else {\n      // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n      const locations = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocationGroup(locations)) {\n        instance.active = true;\n        instance.easingId = manager.layer.easingId;\n        manager.updateInstance(manager.layer, instance, EMPTY, locations);\n\n        // Ensure the instance has an updated injection in the quad tree\n        manager.quadPicking.quadTree.remove(instance);\n        manager.quadPicking.quadTree.add(instance);\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the uniforms\n    if (bufferLocations) {\n      manager.updateInstance(manager.layer, instance, propIds, bufferLocations);\n\n      // Ensure the instance has an updated injection in the quad tree\n      manager.quadPicking.quadTree.remove(instance);\n      manager.quadPicking.quadTree.add(instance);\n    } else {\n      // If we don't have existing uniforms, then we must remove the instance\n      manager.addInstance(manager, instance, EMPTY, bufferLocations);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    if (bufferLocations) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // Remove the easing information the instance gained from being apart of the layer\n      instance.clearEasing();\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, EMPTY, bufferLocations);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n      // Remove the instance from our quad tree\n      manager.quadPicking.quadTree.remove(instance);\n    }\n  }\n}\n","import { Instance } from \"../../../instance-provider\";\nimport { ISinglePickingMetrics, PickType } from \"../../../types\";\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  isBufferLocationGroup\n} from \"../buffer-manager-base\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\nimport { IInstanceAttributeBufferLocationGroup } from \"./instance-attribute-buffer-manager\";\nimport { InstanceAttributeDiffProcessor } from \"./instance-attribute-diff-processor\";\n\nconst EMPTY: number[] = [];\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class InstanceAttributeColorDiffProcessor<\n  T extends Instance\n> extends InstanceAttributeDiffProcessor<T> {\n  colorPicking: ISinglePickingMetrics<T>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>\n  ) {\n    super(layer, bufferManager);\n\n    if (layer.picking.type === PickType.SINGLE) {\n      this.colorPicking = layer.picking;\n      this.colorPicking.uidToInstance = new Map<number, T>();\n    } else {\n      console.warn(\n        \"Diff Processing Error: A layer has a diff processor requesting Color Processing but the picking type is not valid.\"\n      );\n    }\n  }\n\n  /**\n   * This processes add operations from changes in the instancing data and manages the layer's matching of\n   * color / UID to Instance\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (bufferLocations) {\n      manager.changeInstance(manager, instance, EMPTY, bufferLocations);\n    } else {\n      // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n      const locations = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocationGroup(locations)) {\n        instance.active = true;\n        instance.easingId = manager.layer.easingId;\n        manager.updateInstance(manager.layer, instance, EMPTY, locations);\n\n        // Make sure the instance is mapped to it's UID\n        manager.colorPicking.uidToInstance.set(instance.uid, instance);\n      } else {\n        console.warn(\n          \"A data cluster was not provided by the manager to associate an instance with.\"\n        );\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the uniforms\n    if (bufferLocations) {\n      manager.updateInstance(manager.layer, instance, propIds, bufferLocations);\n    } else {\n      // If we don't have existing uniforms, then we must remove the instance\n      manager.addInstance(manager, instance, EMPTY, bufferLocations);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    if (bufferLocations) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // Remove the easing information the instance gained from being apart of the layer\n      instance.clearEasing();\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, EMPTY, bufferLocations);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n      // Remove the instance from our quad tree\n      manager.colorPicking.uidToInstance.delete(instance.uid);\n    }\n  }\n}\n","import * as Three from \"three\";\nimport { Instance } from \"../../../instance-provider\";\nimport { UniformProcessing } from \"../../../shaders/processing/uniform-processing\";\nimport { IInstanceAttribute, PickType } from \"../../../types\";\nimport { uid, Vec2 } from \"../../../util\";\nimport { Layer } from \"../../layer\";\nimport { generateLayerModel } from \"../../layer-processing/generate-layer-model\";\nimport { Scene } from \"../../scene\";\nimport { BufferManagerBase, IBufferLocation } from \"../buffer-manager-base\";\n\nexport interface IUniformBufferLocation extends IBufferLocation {\n  /** This is the index of the instance as it appears in the buffer */\n  instanceIndex: number;\n  /** This is the instance data uniform */\n  buffer: Three.IUniform;\n  /** This is the instance data range within the instanceData uniform */\n  range: Vec2;\n}\n\nexport interface InstanceUniformBuffer {\n  /** This tracks which instances are active. Helps optimize draw range */\n  activeInstances: boolean[];\n  /** This is all of the clusters within this buffer */\n  clusters: IUniformBufferLocation[];\n  /** The first instance in the draw range */\n  firstInstance: number;\n  /** The unique geometry object for the buffer: Used to set draw range */\n  geometry: Three.BufferGeometry;\n  /** The last instance in the draw range */\n  lastInstance: number;\n  /** The unique material for the buffer: Used to provide a new set of uniforms */\n  material: Three.ShaderMaterial;\n  /** The unique model generated for the buffer: Used to allow the buffer to be rendered by adding to a scene */\n  model: Three.Object3D;\n  /** Threejs can not have duplicate objects across Scenes */\n  pickModel?: Three.Object3D;\n}\n\n/**\n * This is a Buffer Management system that performs instancing via the uniforms available to the hardware.\n * This improves compatibility with instancing for systems DRAMATICALLY as ALL systems WILL support uniforms.\n * This will NOT perform the best against true hardware instancing support, but it will have edge cases where it\n * is needed.\n *\n * When a layer has too many instance + vertex attributes for the hardware, the system will defer to this buffer methodology.\n *\n * This class does a whoooooole lot of making the magical instancing optimization controls possible.\n *\n * Our instancing hackyness comes from the idea that uniforms are fast, and you don't have to commit\n * ALL of them when you touch just a little piece, and you don't have worry about drivers not supporting\n * partial vertex buffer updates.\n *\n * This also is WebGL 1.0 compatible without any extensions that are poorly implemented. And again: does\n * NOT require entire attribute buffer commits.\n *\n * Uniforms are limited for any given draw call. So we have to create multiple materials to support\n * chunks of the instances that need to be drawn. We then have to associate an instance with the set\n * of uniforms that is related to the instance and keep them paired together. If we have too many instances\n * we must generate more buffers to accomodate them.\n *\n * If we remove instances, we must free up the uniform set so that others can use the uniforms. While the uniforms\n * are not in use, the instance should not be rendering.\n */\nexport class UniformBufferManager<T extends Instance> extends BufferManagerBase<\n  T,\n  IUniformBufferLocation\n> {\n  /** The number of uniform blocks an instance requires */\n  private uniformBlocksPerInstance: number;\n  /** The generated buffers by this manager */\n  private buffers: InstanceUniformBuffer[] = [];\n  /** The uniform clusters that are free and can be used by an instance */\n  private availableClusters: IUniformBufferLocation[] = [];\n  /** A lookup of an instance to a cluster of uniforms associated with it */\n  private instanceToCluster: { [key: number]: IUniformBufferLocation } = {};\n  /** A map of a cluster of uniforms to the buffer it comes from */\n  private clusterToBuffer = new Map<\n    IUniformBufferLocation,\n    InstanceUniformBuffer\n  >();\n\n  constructor(layer: Layer<T, any>, scene: Scene) {\n    super(layer, scene);\n\n    let maxUniformBlock: number = 0;\n    layer.instanceAttributes.forEach((attributes: IInstanceAttribute<T>) => {\n      maxUniformBlock = Math.max(attributes.block || 0, maxUniformBlock);\n    });\n\n    this.uniformBlocksPerInstance = maxUniformBlock + 1;\n  }\n\n  /**\n   * This adds an instance to the manager and gives the instance an associative\n   * block of uniforms to work with.\n   */\n  add = function(instance: T) {\n    // If there are no available buffers, we must add a buffer\n    if (this.availableClusters.length <= 0) {\n      this.makeNewBuffer();\n    }\n\n    const cluster = this.availableClusters.pop();\n\n    if (cluster) {\n      this.instanceToCluster[instance.uid] = cluster;\n    } else {\n      console.warn(\n        \"No valid cluster available for instance added to uniform manager.\"\n      );\n    }\n\n    return cluster;\n  };\n\n  /**\n   * Free all resources this manager may be holding onto\n   */\n  destroy() {\n    this.buffers.forEach(buffer => {\n      buffer.geometry.dispose();\n      buffer.material.dispose();\n    });\n  }\n\n  /**\n   * This retireves the uniforms associated with an instance, or returns nothing\n   * if the instance has not been associated yet.\n   */\n  getBufferLocations(instance: T) {\n    return this.instanceToCluster[instance.uid];\n  }\n\n  /**\n   * TODO: The uniform buffer does not need to utilize this yet. it will be more necessary\n   * when this manager updates only changed properties.\n   */\n  getActiveAttributePropertyId() {\n    return -1;\n  }\n\n  /**\n   * TODO: This is irrelevant tot his manager for now.\n   * Number of instances this buffer manages.\n   */\n  getInstanceCount() {\n    return -1;\n  }\n\n  /**\n   * TODO: The uniform buffer updates ALL attributes every change for any property so far.\n   * This should be fixed for performance improvements on the compatibility mode.\n   */\n  getUpdateAllPropertyIdList() {\n    return [];\n  }\n\n  /**\n   * Disassociates an instance with it's group of uniforms and makes the instance\n   * in the buffer no longer drawable.\n   */\n  remove = function(instance: T) {\n    const cluster = this.instanceToCluster[instance.uid];\n\n    // If the instance is associated with a cluster, we can add the cluster back to being available\n    // For another instance.\n    if (cluster) {\n      delete this.instanceToCluster[instance.uid];\n      this.availableClusters.push(cluster);\n    }\n\n    return instance;\n  };\n\n  /**\n   * Clears all elements of this manager from the current scene it was in.\n   */\n  removeFromScene() {\n    const scene = this.scene;\n\n    if (scene.container) {\n      for (let i = 0, end = this.buffers.length; i < end; ++i) {\n        const buffer = this.buffers[i];\n        scene.container.remove(buffer.model);\n        buffer.pickModel &&\n          this.scene.pickingContainer.remove(buffer.pickModel);\n      }\n\n      delete this.scene;\n    }\n  }\n\n  /**\n   * Applies the buffers to the provided scene for rendering.\n   */\n  setScene(scene: Scene) {\n    if (scene.container) {\n      for (let i = 0, end = this.buffers.length; i < end; ++i) {\n        const buffer = this.buffers[i];\n        scene.container.add(buffer.model);\n        buffer.pickModel && scene.pickingContainer.add(buffer.pickModel);\n      }\n\n      this.scene = scene;\n    } else {\n      console.warn(\"Can not set a scene that has an undefined container.\");\n    }\n  }\n\n  /**\n   * This generates a new buffer of uniforms to associate instances with.\n   */\n  makeNewBuffer() {\n    // We generate a new geometry object for the buffer as the geometry\n    // Needs to have it's own unique draw range per buffer for optimal\n    // Performance\n    const newGeometry = new Three.BufferGeometry();\n    this.layer.vertexAttributes.forEach(attribute => {\n      if (attribute.materialAttribute) {\n        newGeometry.addAttribute(attribute.name, attribute.materialAttribute);\n      }\n    });\n\n    // Ensure the draw range covers every instance in the geometry.\n    newGeometry.drawRange.start = 0;\n    newGeometry.drawRange.count =\n      this.layer.maxInstancesPerBuffer * this.layer.instanceVertexCount;\n\n    // This is the material that is generated for the layer that utilizes all of the generated and\n    // Injected shader IO and shader fragments\n    const newMaterial = this.layer.material.clone();\n    // Now make a Model for the buffer so it can be rendered withn the scene\n    const newModel = generateLayerModel(this.layer, newGeometry, newMaterial);\n    // We render junkloads of instances in a buffer. Culling will have to happen\n    // On an instance level.\n    newModel.frustumCulled = false;\n\n    // Make our new buffer which will manage the geometry and everything necessary\n    const buffer: InstanceUniformBuffer = {\n      activeInstances: [],\n      clusters: [],\n      firstInstance: 0,\n      geometry: newGeometry,\n      lastInstance: 0,\n      material: newMaterial,\n      model: newModel,\n      pickModel:\n        this.layer.picking.type === PickType.SINGLE\n          ? newModel.clone()\n          : undefined\n    };\n\n    this.buffers.push(buffer);\n\n    // Now that we have created a new buffer, we have all of it's uniforms\n    // To use to render more instances. We must take the instancing uniforms\n    // And divvy them up into clusters for our available buffer.\n    let uniformIndex = 0;\n    const uniformName = UniformProcessing.uniformPackingBufferName();\n    const instanceData = newMaterial.uniforms[uniformName];\n\n    // We must ensure the vector objects are TOTALLY unique otherwise they'll get shared across buffers\n    instanceData.value = instanceData.value.map(\n      () => new Three.Vector4(0.0, 0.0, 0.0, 0.0)\n    );\n\n    // TODO: This will go away! To satisfy the changing buffer manager interfaces, we make a\n    // fake internal attribute for now\n    const fakeAttribute = Object.assign({}, this.layer.instanceAttributes[0], {\n      bufferAttribute: new Three.InstancedBufferAttribute(\n        new Float32Array(1),\n        1\n      ),\n      uid: uid()\n    });\n\n    for (let i = 0, end = this.layer.maxInstancesPerBuffer; i < end; ++i) {\n      const cluster: IUniformBufferLocation = {\n        attribute: fakeAttribute, // TODO: This is not needed for the uniform method yet. When we break down\n        // the uniform updates into attributes, this will be utilized.\n        buffer: instanceData,\n        instanceIndex: i,\n        range: [uniformIndex, 0]\n      };\n\n      uniformIndex += this.uniformBlocksPerInstance;\n      cluster.range[1] = uniformIndex;\n\n      buffer.clusters.push(cluster);\n      this.availableClusters.push(cluster);\n      this.clusterToBuffer.set(cluster, buffer);\n    }\n\n    // Grab the global uniforms from the material and add it to the uniform's materialUniform list so that\n    // We can keep uniforms consistent across all Instances\n    for (let i = 0, end = this.layer.uniforms.length; i < end; ++i) {\n      const uniform = this.layer.uniforms[i];\n      uniform.materialUniforms.push(newMaterial.uniforms[uniform.name]);\n    }\n\n    // Now that we are ready to utilize the buffer, let's add it to the scene so it may be rendered.\n    // Each new buffer equates to one draw call.\n    if (this.scene && this.scene.container) {\n      this.scene.container.add(buffer.model);\n      buffer.pickModel && this.scene.pickingContainer.add(buffer.pickModel);\n    }\n  }\n}\n","import * as Three from \"three\";\nimport { Instance, ObservableMonitoring } from \"../../../instance-provider\";\nimport {\n  IInstanceAttribute,\n  IInstanceAttributeInternal,\n  PickType\n} from \"../../../types\";\nimport { uid } from \"../../../util\";\nimport { emitOnce, flushEmitOnce } from \"../../../util/emit-once\";\nimport { IModelConstructable, Layer } from \"../../layer\";\nimport { generateLayerModel } from \"../../layer-processing/generate-layer-model\";\nimport { Scene } from \"../../scene\";\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  IBufferLocationGroup\n} from \"../buffer-manager-base\";\n\nconst { max } = Math;\n\n/**\n * This represents the location of data for an instance's property to the piece of attribute buffer\n * it will update when it changes.\n */\nexport interface IInstanceAttributePackingBufferLocation\n  extends IBufferLocation {}\n\n/** Represents the Location Groupings for Instance attribute Buffer locations */\nexport type IInstanceAttributePackingBufferLocationGroup = IBufferLocationGroup<\n  IInstanceAttributePackingBufferLocation\n>;\n\n/**\n * This manages instances in how they associate with buffer data for an instanced attribute strategy that is\n * packed tightly.\n */\nexport class InstanceAttributePackingBufferManager<\n  T extends Instance\n> extends BufferManagerBase<T, IInstanceAttributePackingBufferLocation> {\n  /** This stores an attribute's name to the buffer locations generated for it */\n  private allBufferLocations: { [key: string]: IBufferLocation[] } = {};\n  /** This contains the buffer locations the system will have available */\n  private availableLocations: IInstanceAttributePackingBufferLocationGroup[] = [];\n  /** This is the number of instances the buffer draws currently */\n  currentInstancedCount = 0;\n  /** This is the mapped buffer location to the provided Instance */\n  private instanceToBufferLocation: {\n    [key: number]: IInstanceAttributePackingBufferLocationGroup;\n  } = {};\n  /**\n   * This is the number of times the buffer has grown. This is used to determine how much the buffer will grow\n   * for next growth pass.\n   */\n  private growthCount: number = 0;\n  /** This is the number of instances the buffer currently supports */\n  private maxInstancedCount: number = 1000;\n\n  // These are the only Three objects that must be monitored for disposal\n  private geometry?: Three.InstancedBufferGeometry;\n  private material?: Three.ShaderMaterial;\n  private model?: IModelConstructable & Three.Object3D;\n  private pickModel?: IModelConstructable & Three.Object3D | undefined;\n  private attributes?: IInstanceAttributeInternal<T>[];\n  private blockAttributes?: IInstanceAttributeInternal<T>[];\n  private blockSubAttributesLookup = new Map<number, IInstanceAttribute<T>[]>();\n\n  /** This is a mapping of all attributes to their associated property ids that, when the property changes, the attribute will be updated */\n  private attributeToPropertyIds = new Map<IInstanceAttribute<T>, number[]>();\n  /**\n   * This is a trimmed listing of minimum property ids needed to trigger an update on all properties.\n   * This is used by the diffing process mostly to handle adding a new instance.\n   */\n  private updateAllPropertyIdList: number[] = [];\n  /**\n   * This is the discovered property id of the active attribute for the instance type this manager manages.\n   * This is used by the diffing process to target updates related to deactivating an instance.\n   */\n  private activePropertyId: number = -1;\n\n  constructor(layer: Layer<T, any>, scene: Scene) {\n    super(layer, scene);\n    // Start our add method as a registration step.\n    this.add = this.doAddWithRegistration;\n  }\n\n  /**\n   * First instance to be added to this manager will be heavily analyzed for used observables per attribute.\n   */\n  private doAddWithRegistration(instance: T) {\n    // We need to find out how an instance interacts with the attributes, so we will\n    // loop through the instances, call their updates and get feedback\n    this.layer.instanceAttributes.forEach(attribute => {\n      // We don't need to register child attributes as they get updated as a consequence to parent attributes\n      if (attribute.parentAttribute) return;\n      // Activate monitoring of ids, this also resets the monitor's list\n      ObservableMonitoring.setObservableMonitor(true);\n      // Access the update which accesses an instance's properties (usually)\n      attribute.update(instance);\n      // We now have all of the ids of the properties that were used in updating the attributes\n      const propertyIdsForAttribute = ObservableMonitoring.getObservableMonitorIds(\n        true\n      );\n      // Store the mapping of the property ids\n      this.attributeToPropertyIds.set(attribute, propertyIdsForAttribute);\n\n      // If this is the active attribute, then we track the property id that modifies it\n      // for handling internal instance management.\n      if (attribute === this.layer.activeAttribute) {\n        this.activePropertyId = propertyIdsForAttribute[0];\n      }\n    });\n\n    // SUPER IMPORTANT to deactivate this here. Leaving this turned on causes memory to be chewed up\n    // for every property getter.\n    ObservableMonitoring.setObservableMonitor(false);\n    // This analyzes the properties and how they affect the attributes. It determines the smallest\n    // list possible of property ids needed to trigger an update on all of the attributes.\n    this.makeUpdateAllPropertyIdList();\n    // Do the first resize which creates the buffer and makes all of the initial buffer locations\n    const locationInfo = this.resizeBuffer();\n    // After all of the property id to attribute associations are made, we must break down the buffers\n    // into locations and then group those locations which will become our instance to buffer location\n    // slots\n    this.gatherLocationsIntoGroups(\n      locationInfo.newLocations,\n      locationInfo.growth\n    );\n    // After the first registration add, we gear shift to a more efficient add method.\n    this.add = this.doAdd;\n\n    // Perform the add after all of the registration process is complete\n    return this.doAdd(instance);\n  }\n\n  /**\n   * After the registration add happens, we gear shift over to this add method which will only pair instances\n   * with their appropriate buffer location.\n   */\n  private doAdd(instance: T) {\n    // Ensure we have buffer locations available\n    if (this.availableLocations.length <= 0) {\n      // Resice the buffer to accommodate more instances\n      const locationInfo = this.resizeBuffer();\n      // Break down the newly generated buffers into property groupings for the instances\n      this.gatherLocationsIntoGroups(\n        locationInfo.newLocations,\n        locationInfo.growth\n      );\n    }\n\n    // Get the next available location\n    const bufferLocations = this.availableLocations.shift();\n\n    // Pair up the instance with it's buffer location\n    if (bufferLocations && this.geometry) {\n      this.instanceToBufferLocation[instance.uid] = bufferLocations;\n      this.currentInstancedCount = this.geometry.maxInstancedCount = max(\n        this.currentInstancedCount,\n        // Instance index + 1 because the indices are zero indexed and the maxInstancedCount is a count value\n        bufferLocations.instanceIndex + 1\n      );\n      this.geometry.drawRange = {\n        count: this.currentInstancedCount * this.layer.instanceVertexCount,\n        start: 0\n      };\n    } else {\n      console.error(\n        \"Add Error: Instance Attribute Buffer Manager failed to pair an instance with a buffer location\"\n      );\n    }\n\n    return bufferLocations;\n  }\n\n  /**\n   * Destroy this manager and clear out all elements utilized within the scene.\n   */\n  destroy() {\n    if (this.geometry) this.geometry.dispose();\n    if (this.material) this.material.dispose();\n\n    if (this.scene && this.scene.container && this.model) {\n      this.scene.container.remove(this.model);\n    }\n  }\n\n  /**\n   * This retireves the buffer locations associated with an instance, or returns nothing\n   * if the instance has not been associated yet.\n   */\n  getBufferLocations(instance: T) {\n    return this.instanceToBufferLocation[instance.uid];\n  }\n\n  /**\n   * This is the property id of the active attribute.\n   */\n  getActiveAttributePropertyId() {\n    return this.activePropertyId;\n  }\n\n  /**\n   * This is the bare minimum property ids that, when triggered for update, will update ALL of the attribute buffers\n   * for the managed layer.\n   */\n  getUpdateAllPropertyIdList() {\n    return this.updateAllPropertyIdList;\n  }\n\n  /**\n   * Analyzes the list of attributes to the property ids that affects them. This populates the list\n   * of minimal property ids needed to trigger updates on all of the attributes.\n   */\n  private makeUpdateAllPropertyIdList() {\n    // Make a deduping list of ids\n    const updateAllPropertyIdList: { [key: number]: number } = {};\n\n    // Get unique ids that will target all attributes\n    this.attributeToPropertyIds.forEach(ids => {\n      updateAllPropertyIdList[ids[0]] = ids[0];\n    });\n\n    // Store the list for the diffing process to utilize\n    this.updateAllPropertyIdList = Object.values(\n      updateAllPropertyIdList\n    ).filter(Boolean);\n  }\n\n  /**\n   * Disassociates an instance with a buffer\n   */\n  remove = (instance: T) => {\n    const location = this.instanceToBufferLocation[instance.uid];\n\n    if (location) {\n      delete this.instanceToBufferLocation[instance.uid];\n      this.availableLocations.push(location);\n    }\n\n    return instance;\n  };\n\n  /**\n   * Clears all elements of this manager from the current scene it was in.\n   */\n  removeFromScene() {\n    if (this.scene && this.scene.container && this.model) {\n      this.scene.container.remove(this.model);\n    }\n\n    this.pickModel && this.scene.pickingContainer.remove(this.pickModel);\n    delete this.scene;\n  }\n\n  /**\n   * This generates a new buffer of attributes to associate instances with.\n   *\n   * This method for the attribute packing strategy creates a vertex attribute for each block required.\n   * The individual properties are then packed into each of these blocks.\n   */\n  private resizeBuffer() {\n    let growth = 0;\n    // Each attribute will generate lists of new buffer locations after being created or expanded\n    const attributeToNewBufferLocations = new Map<\n      string,\n      IInstanceAttributePackingBufferLocation[]\n    >();\n\n    // If our geometry is not created yet, then it need be made\n    if (!this.geometry) {\n      // The buffer grows from 0 to our initial instance count\n      growth = this.maxInstancedCount;\n      // We generate a new geometry object for the buffer as the geometry\n      // Needs to have it's own unique draw range per buffer for optimal\n      // Performance.\n      this.geometry = new Three.InstancedBufferGeometry();\n\n      // The geometry needs the vertex information (which should be shared amongst all instances of the layer)\n      // These are static non-dynamic buffers for the instance.\n      for (const attribute of this.layer.vertexAttributes) {\n        if (attribute.materialAttribute) {\n          this.geometry.addAttribute(\n            attribute.name,\n            attribute.materialAttribute\n          );\n        }\n      }\n\n      this.attributes = [];\n      this.blockAttributes = [];\n\n      // We have to determine how many blocks will be used to cram all of our instance properties into.\n      // So we calculate how big each block will be. The number of sizes calculated will be how manyblocks\n      // need to be generated.\n      const blockSizes = new Map<number, number>();\n      const blockSubAttributesLookup = new Map<\n        number,\n        IInstanceAttribute<T>[]\n      >();\n      this.blockSubAttributesLookup = blockSubAttributesLookup;\n\n      for (\n        let i = 0, iMax = this.layer.instanceAttributes.length;\n        i < iMax;\n        ++i\n      ) {\n        const attribute = this.layer.instanceAttributes[i];\n        const block = attribute.block || 0;\n        let blockSize = blockSizes.get(block) || 0;\n        // Determine the bigger of the block sizes (incoming attribute or previously checked attribute)\n        blockSize = Math.max(\n          blockSize,\n          (attribute.blockIndex || 0) + (attribute.size || 0)\n        );\n        // Store the larger size for the block\n        blockSizes.set(block, blockSize);\n        // We need to store all of the attributes associated with a block\n        let blockAttributes = blockSubAttributesLookup.get(block);\n\n        if (!blockAttributes) {\n          blockAttributes = [];\n          blockSubAttributesLookup.set(block, blockAttributes);\n        }\n\n        blockAttributes.push(attribute);\n      }\n\n      // Let's sort all of the attributes associated with each block by their index in the block\n      // so from here on out we can assume they are in ascending order\n      blockSubAttributesLookup.forEach(attributes =>\n        attributes.sort((a, b) => (a.blockIndex || 0) - (b.blockIndex || 0))\n      );\n\n      // Now that we have the blocks that will be needed to accommodate the attributes, we will\n      // create these blocks as attributes attached to the geometry.\n      for (let block = 0, iMax = blockSizes.size; block < iMax; ++block) {\n        // Get the size each attribute will be for the block\n        const blockSize: number = blockSizes.get(block) || 0;\n        // This is an interesting case, the attributes that are generated are packed into other attributes\n        // for optimal use of the vertex attributes allotted for a systems resources.\n        const blockAttributeUID = uid();\n\n        if (!blockSize) {\n          console.warn(\n            \"Instance Attribute Packing Error: The system tried to build an attribute with a size of zero.\",\n            \"These are the attributes used:\",\n            this.layer.instanceAttributes,\n            \"These are the block sizes calculated\",\n            blockSizes,\n            \"This is the block to attribute lookup generated\",\n            blockSubAttributesLookup\n          );\n        }\n\n        // Make our attribute buffer to accommodate all of the instances to be rendered.\n        const buffer = new Float32Array(blockSize * this.maxInstancedCount);\n        // Make an instanced buffer to take advantage of hardware instancing\n        const bufferAttribute = new Three.InstancedBufferAttribute(\n          buffer,\n          blockSize\n        );\n        bufferAttribute.setDynamic(true);\n\n        // Add the attribute to our geometry labeled as a block like the uniform block packing strategy\n        this.geometry.addAttribute(`block${block}`, bufferAttribute);\n\n        // Get all of the attributes that will be applied to this block\n        const blockSubAttributes = blockSubAttributesLookup.get(block);\n\n        if (blockSubAttributes) {\n          for (let k = 0, kMax = blockSubAttributes.length; k < kMax; ++k) {\n            const attribute = blockSubAttributes[k];\n\n            let newBufferLocations = attributeToNewBufferLocations.get(\n              attribute.name\n            );\n\n            if (!newBufferLocations) {\n              newBufferLocations = [];\n              attributeToNewBufferLocations.set(\n                attribute.name,\n                newBufferLocations\n              );\n            }\n\n            const allLocations = this.allBufferLocations[attribute.name] || [];\n            this.allBufferLocations[attribute.name] = allLocations;\n\n            const internalAttribute: IInstanceAttributeInternal<\n              T\n            > = Object.assign({}, attribute, {\n              uid: block,\n              packUID: blockAttributeUID,\n              bufferAttribute,\n              size: blockSize\n            });\n\n            const startAttributeIndex = attribute.blockIndex || 0;\n            const attributeSize = attribute.size || 1;\n\n            for (let i = 0; i < this.maxInstancedCount; ++i) {\n              const newLocation: IBufferLocation = {\n                attribute: internalAttribute,\n                block,\n                buffer: {\n                  value: buffer\n                },\n                instanceIndex: i,\n                range: [\n                  i * blockSize + startAttributeIndex,\n                  i * blockSize + startAttributeIndex + attributeSize\n                ]\n              };\n\n              newBufferLocations.push(newLocation);\n              allLocations.push(newLocation);\n            }\n\n            this.attributes.push(internalAttribute);\n          }\n\n          // Make an internal instance attribute for tracking\n          this.blockAttributes.push({\n            uid: uid(),\n            packUID: blockAttributeUID,\n            bufferAttribute,\n            name: `block${block}`,\n            update: () => [0]\n          });\n        } else {\n          console.warn(\n            \"Instance Attribute Packing Buffer Error: Somehow there are no attributes associated with a block.\",\n            \"These are the attributes used:\",\n            this.layer.instanceAttributes,\n            \"These are the block sizes calculated\",\n            blockSizes,\n            \"This is the block to attribute lookup generated\",\n            blockSubAttributesLookup\n          );\n        }\n      }\n\n      // Ensure the draw range covers every instance in the geometry.\n      this.geometry.maxInstancedCount = 0;\n      // This is the material that is generated for the layer that utilizes all of the generated and\n      // Injected shader IO and shader fragments\n      this.material = this.layer.material.clone();\n\n      // Grab the global uniforms from the material and add it to the uniform's materialUniform list so that\n      // We can keep uniforms consistent across all Instances\n      for (let i = 0, end = this.layer.uniforms.length; i < end; ++i) {\n        const uniform = this.layer.uniforms[i];\n        uniform.materialUniforms.push(this.material.uniforms[uniform.name]);\n      }\n    } else {\n      // If the geometry is already created, then we will expand each instanced attribute to the next growth\n      // level and generate the new buffer locations based on the expansion\n      // Since were are resizing the buffer, let's destroy the old buffer and make one anew\n      this.geometry.dispose();\n      this.geometry = new Three.InstancedBufferGeometry();\n      const previousInstanceAmount = this.maxInstancedCount;\n\n      // The geometry needs the vertex information (which should be shared amongst all instances of the layer)\n      for (const attribute of this.layer.vertexAttributes) {\n        if (attribute.materialAttribute) {\n          this.geometry.addAttribute(\n            attribute.name,\n            attribute.materialAttribute\n          );\n        }\n      }\n\n      // We grow our buffer by magnitudes of 10 * 1024\n      // First growth: 1000\n      // Next: 10000\n      // Next: 10000\n      // Next: 10000\n      // Next: 10000\n      // We cap at growth of 1 million to prevent a mass unused RAM void.\n      this.growthCount = Math.min(1, this.growthCount + 1);\n      growth = Math.pow(10, this.growthCount) * 1000;\n      this.maxInstancedCount += growth;\n\n      // Ensure attributes is still defined\n      this.attributes = this.attributes || [];\n      this.blockAttributes = this.blockAttributes || [];\n\n      for (\n        let block = 0, iMax = this.blockAttributes.length;\n        block < iMax;\n        ++block\n      ) {\n        const attribute = this.blockAttributes[block];\n        let bufferAttribute = attribute.bufferAttribute;\n        const size: number = attribute.size || 0;\n\n        if (bufferAttribute.array instanceof Float32Array) {\n          // Make a new buffer that is the proper size\n          const buffer: Float32Array = new Float32Array(\n            this.maxInstancedCount * size\n          );\n          // Retain all of the information in the previous buffer\n          buffer.set(bufferAttribute.array, 0);\n          // Make our new attribute based on the grown buffer\n          const newAttribute = new Three.InstancedBufferAttribute(buffer, size);\n          // Set the attribute to dynamic so we can update ranges within it\n          newAttribute.setDynamic(true);\n          // Make sure our attribute is updated with the newly made attribute\n          attribute.bufferAttribute = bufferAttribute = newAttribute;\n          // Add the new attribute to our new geometry object\n          this.geometry.addAttribute(attribute.name, newAttribute);\n\n          // Since we have a new buffer object we are working with, we must update all of the existing buffer\n          // locations to utilize this new buffer. The locations keep everything else the same, but the buffer\n          // object itself should be updated\n          // Get all of the attributes that will be applied to this block\n          const blockSubAttributes = this.blockSubAttributesLookup.get(block);\n          const blockSize = attribute.size || 0;\n\n          if (blockSubAttributes) {\n            for (let k = 0, kMax = blockSubAttributes.length; k < kMax; ++k) {\n              const subAttribute = blockSubAttributes[k];\n\n              let newBufferLocations = attributeToNewBufferLocations.get(\n                subAttribute.name\n              );\n\n              if (!newBufferLocations) {\n                newBufferLocations = [];\n                attributeToNewBufferLocations.set(\n                  subAttribute.name,\n                  newBufferLocations\n                );\n              }\n\n              const allLocations =\n                this.allBufferLocations[subAttribute.name] || [];\n              this.allBufferLocations[subAttribute.name] = allLocations;\n\n              const internalAttribute: IInstanceAttributeInternal<\n                T\n              > = Object.assign({}, subAttribute, {\n                uid: uid(),\n                packUID: attribute.packUID,\n                bufferAttribute\n              });\n\n              const startAttributeIndex = subAttribute.blockIndex || 0;\n              const attributeSize = subAttribute.size || 1;\n\n              // Update all existing attribute locations with the new internal attribute\n              for (let j = 0, jMax = allLocations.length; j < jMax; ++j) {\n                const location = allLocations[j];\n                location.attribute = internalAttribute;\n              }\n\n              // Create new locations for each new instance we will cover\n              for (\n                let i = previousInstanceAmount;\n                i < this.maxInstancedCount;\n                ++i\n              ) {\n                const newLocation: IBufferLocation = {\n                  attribute: internalAttribute,\n                  block,\n                  buffer: {\n                    value: buffer\n                  },\n                  instanceIndex: i,\n                  range: [\n                    i * blockSize + startAttributeIndex,\n                    i * blockSize + startAttributeIndex + attributeSize\n                  ]\n                };\n\n                newBufferLocations.push(newLocation);\n                allLocations.push(newLocation);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // Remove any existing model\n    if (this.scene && this.model && this.scene.container) {\n      this.scene.container.remove(this.model);\n    }\n\n    // Make sure the picking element is removed as well\n    if (this.scene && this.scene.pickingContainer && this.pickModel) {\n      this.scene.pickingContainer.remove(this.pickModel);\n    }\n\n    // Ensure material is defined\n    this.material = this.material || this.layer.material.clone();\n    // Remake the model with the generated geometry\n    this.model = generateLayerModel(this.layer, this.geometry, this.material);\n    // We render junkloads of instances for a given buffer. Culling will have to happen\n    // On an instance level.\n    this.model.frustumCulled = false;\n    // Make a picking model if we need it so we can render the model with a different uniform set\n    // for the picking procedure.\n    this.pickModel =\n      this.layer.picking.type === PickType.SINGLE\n        ? this.model.clone()\n        : undefined;\n\n    // Now that we are ready to utilize the buffer, let's add it to the scene so it may be rendered.\n    // Each new buffer equates to one draw call.\n    if (this.scene && this.scene.container) {\n      this.scene.container.add(this.model);\n\n      if (this.pickModel) {\n        this.scene.pickingContainer.add(this.pickModel);\n      }\n    }\n\n    return {\n      growth,\n      newLocations: attributeToNewBufferLocations\n    };\n  }\n\n  /**\n   * This takes newly created buffer locations and groups them by the property ids identified by the\n   * registration phase.\n   */\n  private gatherLocationsIntoGroups(\n    attributeToNewBufferLocations: Map<\n      string,\n      IInstanceAttributePackingBufferLocation[]\n    >,\n    totalNewInstances: number\n  ) {\n    if (this.attributeToPropertyIds.size === 0) return;\n\n    // Optimize inner loops by pre-fetching lookups by names\n    const attributesBufferLocations: {\n      attribute: IInstanceAttribute<T>;\n      bufferLocationsForAttribute: IInstanceAttributePackingBufferLocation[];\n      childBufferLocations: IInstanceAttributePackingBufferLocation[][];\n      ids: number[];\n    }[] = [];\n\n    this.attributeToPropertyIds.forEach((ids, attribute) => {\n      attributesBufferLocations.push({\n        attribute,\n        bufferLocationsForAttribute:\n          attributeToNewBufferLocations.get(attribute.name) || [],\n        childBufferLocations: (attribute.childAttributes || []).map(\n          attr => attributeToNewBufferLocations.get(attr.name) || []\n        ),\n        ids\n      });\n    });\n\n    // Loop through all of the new instances available and gather all of the buffer locations\n    for (let i = 0; i < totalNewInstances; ++i) {\n      const group: IInstanceAttributePackingBufferLocationGroup = {\n        instanceIndex: -1,\n        propertyToBufferLocation: {}\n      };\n\n      // Loop through all of the property ids that affect specific attributes. Each of these ids\n      // needs an association with the buffer location they modify.\n      for (let j = 0, endj = attributesBufferLocations.length; j < endj; ++j) {\n        const allLocations = attributesBufferLocations[j];\n        const attribute = allLocations.attribute;\n        const ids = allLocations.ids;\n        const bufferLocationsForAttribute =\n          allLocations.bufferLocationsForAttribute;\n\n        if (!bufferLocationsForAttribute) {\n          emitOnce(\n            \"Instance Attribute Buffer Error\",\n            (count: number, id: string) => {\n              console.warn(\n                `${id}: There is an error in forming buffer location groups in InstanceAttributePackingBufferManager. Error count: ${count}`\n              );\n            }\n          );\n          continue;\n        }\n\n        const bufferLocation = bufferLocationsForAttribute.shift();\n\n        if (!bufferLocation) {\n          emitOnce(\n            \"Instance Attribute Buffer Error\",\n            (count: number, id: string) => {\n              console.warn(\n                `${id}: There is an error in forming buffer location groups in InstanceAttributePackingBufferManager. Error count: ${count}`\n              );\n            }\n          );\n          continue;\n        }\n\n        if (group.instanceIndex === -1) {\n          group.instanceIndex = bufferLocation.instanceIndex;\n        } else if (bufferLocation.instanceIndex !== group.instanceIndex) {\n          emitOnce(\n            \"Instance Attribute Parallelism Error\",\n            (count: number, id: string) => {\n              console.warn(\n                `${id}: A buffer location does not have a matching instance index which means the buffer locations are not in parallel with each other somehow. Error count: ${count}`\n              );\n              console.warn(attribute.name, bufferLocation);\n            }\n          );\n          continue;\n        }\n\n        // If the attribute has children attributes. Then when the attribute is updated, the child attributes should\n        // be updated as well. Thus the buffer location needs the child attribute buffer locations.\n        if (attribute.childAttributes) {\n          const childLocations = [];\n\n          for (\n            let k = 0, endk = attribute.childAttributes.length;\n            k < endk;\n            ++k\n          ) {\n            const childAttribute = attribute.childAttributes[k];\n            const bufferLocationsForChildAttribute =\n              allLocations.childBufferLocations[k];\n\n            if (bufferLocationsForChildAttribute) {\n              const childBufferLocation = bufferLocationsForChildAttribute.shift();\n              if (childBufferLocation) {\n                childLocations.push(childBufferLocation);\n              } else {\n                emitOnce(\n                  \"Instance Attribute Child Attribute Error\",\n                  (count: number, id: string) => {\n                    console.warn(\n                      `${id}: A child attribute does not have a buffer location available. Error count: ${count}`\n                    );\n                    console.warn(\n                      `Parent Attribute: ${attribute.name} Child Attribute: ${\n                        childAttribute.name\n                      }`\n                    );\n                  }\n                );\n              }\n            }\n          }\n\n          bufferLocation.childLocations = childLocations;\n        }\n\n        // In the group, associate the property ids that affect a buffer location WITH the buffer location they affect\n        for (let k = 0, endk = ids.length; k < endk; ++k) {\n          const id = ids[k];\n          group.propertyToBufferLocation[id] = bufferLocation;\n        }\n      }\n\n      // Store this group as a group that is ready to be associated with an instance\n      this.availableLocations.push(group);\n    }\n\n    // This helps ensure errors get reported in a timely fashion in case this triggers some massive looping\n    flushEmitOnce();\n  }\n\n  /**\n   * Returns the total instances this buffer manages.\n   */\n  getInstanceCount() {\n    return this.maxInstancedCount;\n  }\n}\n","import * as Three from \"three\";\nimport { Instance, ObservableMonitoring } from \"../../../instance-provider\";\nimport { getAttributeShaderName } from \"../../../shaders/processing/formatting\";\nimport {\n  IInstanceAttribute,\n  IInstanceAttributeInternal,\n  PickType\n} from \"../../../types\";\nimport { emitOnce, flushEmitOnce } from \"../../../util/emit-once\";\nimport { uid } from \"../../../util/uid\";\nimport { IModelConstructable, Layer } from \"../../layer\";\nimport { generateLayerModel } from \"../../layer-processing/generate-layer-model\";\nimport { Scene } from \"../../scene\";\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  IBufferLocationGroup\n} from \"../buffer-manager-base\";\n\nconst { max } = Math;\n\n/**\n * This represents the location of data for an instance's property to the piece of attribute buffer\n * it will update when it changes.\n */\nexport interface IInstanceAttributeBufferLocation extends IBufferLocation {}\n\n/** Represents the Location Groupings for Instance attribute Buffer locations */\nexport type IInstanceAttributeBufferLocationGroup = IBufferLocationGroup<\n  IInstanceAttributeBufferLocation\n>;\n\n/**\n * This manages instances in how they associate with buffer data for an instanced attribute strategy.\n */\nexport class InstanceAttributeBufferManager<\n  T extends Instance\n> extends BufferManagerBase<T, IInstanceAttributeBufferLocation> {\n  /** This stores an attribute's name to the buffer locations generated for it */\n  private allBufferLocations: { [key: string]: IBufferLocation[] } = {};\n  /** This contains the buffer locations the system will have available */\n  private availableLocations: IInstanceAttributeBufferLocationGroup[] = [];\n  /** This is the number of instances the buffer draws currently */\n  currentInstancedCount = 0;\n  /** This is the mapped buffer location to the provided Instance */\n  private instanceToBufferLocation: {\n    [key: number]: IInstanceAttributeBufferLocationGroup;\n  } = {};\n  /**\n   * This is the number of times the buffer has grown. This is used to determine how much the buffer will grow\n   * for next growth pass.\n   */\n  private growthCount: number = 0;\n  /** This is the number of instances the buffer currently supports */\n  private maxInstancedCount: number = 1000;\n\n  // These are the only Three objects that must be monitored for disposal\n  private geometry?: Three.InstancedBufferGeometry;\n  private material?: Three.ShaderMaterial;\n  private model?: IModelConstructable & Three.Object3D;\n  private pickModel?: IModelConstructable & Three.Object3D | undefined;\n  private attributes?: IInstanceAttributeInternal<T>[];\n\n  /** This is a mapping of all attributes to their associated property ids that, when the property changes, the attribute will be updated */\n  private attributeToPropertyIds = new Map<IInstanceAttribute<T>, number[]>();\n  /**\n   * This is a trimmed listing of minimum property ids needed to trigger an update on all properties.\n   * This is used by the diffing process mostly to handle adding a new instance.\n   */\n  private updateAllPropertyIdList: number[] = [];\n  /**\n   * This is the discovered property id of the active attribute for the instance type this manager manages.\n   * This is used by the diffing process to target updates related to deactivating an instance.\n   */\n  private activePropertyId: number = -1;\n\n  constructor(layer: Layer<T, any>, scene: Scene) {\n    super(layer, scene);\n    // Start our add method as a registration step.\n    this.add = this.doAddWithRegistration;\n  }\n\n  /**\n   * First instance to be added to this manager will be heavily analyzed for used observables per attribute.\n   */\n  private doAddWithRegistration(instance: T) {\n    // We need to find out how an instance interacts with the attributes, so we will\n    // loop through the instances, call their updates and get feedback\n    this.layer.instanceAttributes.forEach(attribute => {\n      // We don't need to register child attributes as they get updated as a consequence to parent attributes\n      if (attribute.parentAttribute) return;\n      // Activate monitoring of ids, this also resets the monitor's list\n      ObservableMonitoring.setObservableMonitor(true);\n      // Access the update which accesses an instances properties (usually)\n      attribute.update(instance);\n      // We now have all of the ids of the properties that were used in updating the attributes\n      const propertyIdsForAttribute = ObservableMonitoring.getObservableMonitorIds(\n        true\n      );\n      // Store the mapping of the property ids\n      this.attributeToPropertyIds.set(attribute, propertyIdsForAttribute);\n\n      // If this is the active attribute, then we track the property id that modifies it\n      // for handling internal instance management.\n      if (attribute === this.layer.activeAttribute) {\n        this.activePropertyId = propertyIdsForAttribute[0];\n      }\n    });\n\n    // SUPER IMPORTANT to deactivate this here. Leaving this turned on causes memory to be chewed up\n    // for every property getter.\n    ObservableMonitoring.setObservableMonitor(false);\n    // This analyzes the properties and how they affect the attributes. It determines the smallest\n    // list possible of property ids needed to trigger an update on all of the attributes.\n    this.makeUpdateAllPropertyIdList();\n    // Do the first resize which creates the buffer and makes all of the initial buffer locations\n    const locationInfo = this.resizeBuffer();\n    // After all of the property id to attribute associations are made, we must break down the buffers\n    // into locations and then group those locations which will become our instance to buffer location\n    // slots\n    this.gatherLocationsIntoGroups(\n      locationInfo.newLocations,\n      locationInfo.growth\n    );\n    // After the first registration add, we gear shift to a more efficient add method.\n    this.add = this.doAdd;\n\n    // Perform the add after all of the registration process is complete\n    return this.doAdd(instance);\n  }\n\n  /**\n   * After the registration add happens, we gear shift over to this add method which will only pair instances\n   * with their appropriate buffer location.\n   */\n  private doAdd(instance: T) {\n    // Ensure we have buffer locations available\n    if (this.availableLocations.length <= 0) {\n      // Resice the buffer to accommodate more instances\n      const locationInfo = this.resizeBuffer();\n      // Break down the newly generated buffers into property groupings for the instances\n      this.gatherLocationsIntoGroups(\n        locationInfo.newLocations,\n        locationInfo.growth\n      );\n    }\n\n    // Get the next available location\n    const bufferLocations = this.availableLocations.shift();\n\n    // Pair up the instance with it's buffer location\n    if (bufferLocations && this.geometry) {\n      this.instanceToBufferLocation[instance.uid] = bufferLocations;\n      this.currentInstancedCount = this.geometry.maxInstancedCount = max(\n        this.currentInstancedCount,\n        // Instance index + 1 because the indices are zero indexed and the maxInstancedCount is a count value\n        bufferLocations.instanceIndex + 1\n      );\n      this.geometry.drawRange = {\n        count: this.currentInstancedCount * this.layer.instanceVertexCount,\n        start: 0\n      };\n    } else {\n      console.error(\n        \"Add Error: Instance Attribute Buffer Manager failed to pair an instance with a buffer location\"\n      );\n    }\n\n    return bufferLocations;\n  }\n\n  destroy() {\n    if (this.geometry) this.geometry.dispose();\n    if (this.material) this.material.dispose();\n\n    if (this.scene && this.scene.container && this.model) {\n      this.scene.container.remove(this.model);\n    }\n  }\n\n  /**\n   * This retireves the buffer locations associated with an instance, or returns nothing\n   * if the instance has not been associated yet.\n   */\n  getBufferLocations(instance: T) {\n    return this.instanceToBufferLocation[instance.uid];\n  }\n\n  /**\n   * This is the property id of the active attribute.\n   */\n  getActiveAttributePropertyId() {\n    return this.activePropertyId;\n  }\n\n  /**\n   * This is the bare minimum property ids that, when triggered for update, will update ALL of the attribute buffers\n   * for the managed layer.\n   */\n  getUpdateAllPropertyIdList() {\n    return this.updateAllPropertyIdList;\n  }\n\n  /**\n   * Analyzes the list of attributes to the property ids that affects them. This populates the list\n   * of minimal property ids needed to trigger updates on all of the attributes.\n   */\n  private makeUpdateAllPropertyIdList() {\n    // Make a deduping list of ids\n    const updateAllPropertyIdList: { [key: number]: number } = {};\n\n    // Get unique ids that will target all attributes\n    this.attributeToPropertyIds.forEach(ids => {\n      updateAllPropertyIdList[ids[0]] = ids[0];\n    });\n\n    // Store the list for the diffing process to utilize\n    this.updateAllPropertyIdList = Object.values(\n      updateAllPropertyIdList\n    ).filter(Boolean);\n  }\n\n  /**\n   * Disassociates an instance with a buffer\n   */\n  remove = (instance: T) => {\n    const location = this.instanceToBufferLocation[instance.uid];\n\n    if (location) {\n      delete this.instanceToBufferLocation[instance.uid];\n      this.availableLocations.push(location);\n    }\n\n    return instance;\n  };\n\n  /**\n   * Clears all elements of this manager from the current scene it was in.\n   */\n  removeFromScene() {\n    if (this.scene && this.scene.container && this.model) {\n      this.scene.container.remove(this.model);\n    }\n    this.pickModel && this.scene.pickingContainer.remove(this.pickModel);\n    delete this.scene;\n  }\n\n  /**\n   * This generates a new buffer of uniforms to associate instances with.\n   */\n  private resizeBuffer() {\n    let growth = 0;\n    // Each attribute will generate lists of new buffer locations after being created or expanded\n    const attributeToNewBufferLocations = new Map<\n      string,\n      IInstanceAttributeBufferLocation[]\n    >();\n\n    // If our geometry is not created yet, then it need be made\n    if (!this.geometry) {\n      // The buffer grows from 0 to our initial instance count\n      growth = this.maxInstancedCount;\n      // We generate a new geometry object for the buffer as the geometry\n      // Needs to have it's own unique draw range per buffer for optimal\n      // Performance.\n      this.geometry = new Three.InstancedBufferGeometry();\n\n      // The geometry needs the vertex information (which should be shared amongst all instances of the layer)\n      for (const attribute of this.layer.vertexAttributes) {\n        if (attribute.materialAttribute) {\n          this.geometry.addAttribute(\n            attribute.name,\n            attribute.materialAttribute\n          );\n        }\n      }\n\n      this.attributes = [];\n\n      // We now take the instance attributes and add them as Instanced Attributes to our geometry\n      for (const attribute of this.layer.instanceAttributes) {\n        // We start with enough data in the buffer to accommodate 1024 instances\n        const size: number = attribute.size || 0;\n        const buffer = new Float32Array(size * this.maxInstancedCount);\n        const bufferAttribute = new Three.InstancedBufferAttribute(\n          buffer,\n          size\n        );\n        bufferAttribute.setDynamic(true);\n        this.geometry.addAttribute(\n          getAttributeShaderName(attribute),\n          bufferAttribute\n        );\n        let newBufferLocations = attributeToNewBufferLocations.get(\n          attribute.name\n        );\n\n        if (!newBufferLocations) {\n          newBufferLocations = [];\n          attributeToNewBufferLocations.set(attribute.name, newBufferLocations);\n        }\n\n        const allLocations = this.allBufferLocations[attribute.name] || [];\n        this.allBufferLocations[attribute.name] = allLocations;\n\n        const internalAttribute: IInstanceAttributeInternal<T> = Object.assign(\n          {},\n          attribute,\n          { uid: uid(), bufferAttribute: bufferAttribute }\n        );\n\n        for (let i = 0; i < this.maxInstancedCount; ++i) {\n          const newLocation: IBufferLocation = {\n            attribute: internalAttribute,\n            buffer: {\n              value: buffer\n            },\n            instanceIndex: i,\n            range: [i * size, i * size + size]\n          };\n\n          newBufferLocations.push(newLocation);\n          allLocations.push(newLocation);\n        }\n\n        // Make an internal instance attribute for tracking\n        this.attributes.push(internalAttribute);\n      }\n\n      // Ensure the draw range covers every instance in the geometry.\n      this.geometry.maxInstancedCount = 0;\n      // This is the material that is generated for the layer that utilizes all of the generated and\n      // Injected shader IO and shader fragments\n      this.material = this.layer.material.clone();\n\n      // Grab the global uniforms from the material and add it to the uniform's materialUniform list so that\n      // We can keep uniforms consistent across all Instances\n      for (let i = 0, end = this.layer.uniforms.length; i < end; ++i) {\n        const uniform = this.layer.uniforms[i];\n        uniform.materialUniforms.push(this.material.uniforms[uniform.name]);\n      }\n    } else {\n      // If the geometry is already created, then we will expand each instanced attribute to the next growth\n      // level and generate the new buffer locations based on the expansion\n      // Since were are resizing the buffer, let's destroy the old buffer and make one anew\n      this.geometry.dispose();\n      this.geometry = new Three.InstancedBufferGeometry();\n      const previousInstanceAmount = this.maxInstancedCount;\n\n      // The geometry needs the vertex information (which should be shared amongst all instances of the layer)\n      for (const attribute of this.layer.vertexAttributes) {\n        if (attribute.materialAttribute) {\n          this.geometry.addAttribute(\n            attribute.name,\n            attribute.materialAttribute\n          );\n        }\n      }\n\n      // We grow our buffer by magnitudes of 10 * 1024\n      // First growth: 1000\n      // Next: 10000\n      // Next: 10000\n      // Next: 10000\n      // Next: 10000\n      // We cap at growth of 1 million to prevent a mass unused RAM void.\n      this.growthCount = Math.min(1, this.growthCount + 1);\n      growth = Math.pow(10, this.growthCount) * 1000;\n      this.maxInstancedCount += growth;\n\n      // Ensure attributes is still defined\n      this.attributes = this.attributes || [];\n\n      for (const attribute of this.attributes) {\n        const bufferAttribute = attribute.bufferAttribute;\n        const size: number = attribute.size || 0;\n\n        if (bufferAttribute.array instanceof Float32Array) {\n          // Make a new buffer that is the proper size\n          const buffer: Float32Array = new Float32Array(\n            this.maxInstancedCount * size\n          );\n          // Retain all of the information in the previous buffer\n          buffer.set(bufferAttribute.array, 0);\n          // Make our new attribute based on the grown buffer\n          const newAttribute = new Three.InstancedBufferAttribute(buffer, size);\n          // Set the attribute to dynamic so we can update ranges within it\n          newAttribute.setDynamic(true);\n          // Make sure our attribute is updated with the newly made attribute\n          attribute.bufferAttribute = newAttribute;\n          // Add the new attribute to our new geometry object\n          this.geometry.addAttribute(\n            getAttributeShaderName(attribute),\n            newAttribute\n          );\n          // Get the temp storage for new buffer locations\n          let newBufferLocations = attributeToNewBufferLocations.get(\n            attribute.name\n          );\n\n          // Since we have a new buffer object we are working with, we must update all of the existing buffer\n          // locations to utilize this new buffer. The locations keep everything else the same, but the buffer\n          // object itself should be updated\n          const allLocations = this.allBufferLocations[attribute.name] || [];\n          this.allBufferLocations[attribute.name] = allLocations;\n\n          for (let k = 0, endk = allLocations.length; k < endk; ++k) {\n            allLocations[k].buffer.value = buffer;\n          }\n\n          if (!newBufferLocations) {\n            newBufferLocations = [];\n            attributeToNewBufferLocations.set(\n              attribute.name,\n              newBufferLocations\n            );\n          }\n\n          for (\n            let i = previousInstanceAmount, end = this.maxInstancedCount;\n            i < end;\n            ++i\n          ) {\n            const newLocation: IBufferLocation = {\n              attribute,\n              buffer: {\n                value: buffer\n              },\n              instanceIndex: i,\n              range: [i * size, i * size + size]\n            };\n\n            newBufferLocations.push(newLocation);\n            allLocations.push(newLocation);\n          }\n        }\n      }\n\n      if (this.scene.container && this.model) {\n        this.scene.container.remove(this.model);\n      }\n    }\n\n    if (this.scene && this.model && this.scene.container) {\n      this.scene.container.remove(this.model);\n    }\n\n    if (this.scene && this.scene.pickingContainer && this.pickModel) {\n      this.scene.pickingContainer.remove(this.pickModel);\n    }\n\n    // Ensure material is defined\n    this.material = this.material || this.layer.material.clone();\n    // Remake the model with the generated geometry\n    this.model = generateLayerModel(this.layer, this.geometry, this.material);\n    // We render junkloads of instances for a given buffer. Culling will have to happen\n    // On an instance level.\n    this.model.frustumCulled = false;\n    // Make a picking model if we need it so we can render the model with a different uniform set\n    // for the picking procedure.\n    this.pickModel =\n      this.layer.picking.type === PickType.SINGLE\n        ? this.model.clone()\n        : undefined;\n\n    // Now that we are ready to utilize the buffer, let's add it to the scene so it may be rendered.\n    // Each new buffer equates to one draw call.\n    if (this.scene && this.scene.container) {\n      this.scene.container.add(this.model);\n\n      if (this.pickModel) {\n        this.scene.pickingContainer.add(this.pickModel);\n      }\n    }\n\n    return {\n      growth,\n      newLocations: attributeToNewBufferLocations\n    };\n  }\n\n  /**\n   * This takes newly created buffer locations and groups them by the property ids identified by the\n   * registration phase.\n   */\n  private gatherLocationsIntoGroups(\n    attributeToNewBufferLocations: Map<\n      string,\n      IInstanceAttributeBufferLocation[]\n    >,\n    totalNewInstances: number\n  ) {\n    if (this.attributeToPropertyIds.size === 0) return;\n\n    // Optimize inner loops by pre-fetching lookups by names\n    const attributesBufferLocations: {\n      attribute: IInstanceAttribute<T>;\n      bufferLocationsForAttribute: IInstanceAttributeBufferLocation[];\n      childBufferLocations: IInstanceAttributeBufferLocation[][];\n      ids: number[];\n    }[] = [];\n\n    this.attributeToPropertyIds.forEach((ids, attribute) => {\n      attributesBufferLocations.push({\n        attribute,\n        bufferLocationsForAttribute:\n          attributeToNewBufferLocations.get(attribute.name) || [],\n        childBufferLocations: (attribute.childAttributes || []).map(\n          attr => attributeToNewBufferLocations.get(attr.name) || []\n        ),\n        ids\n      });\n    });\n\n    // Loop through all of the new instances available and gather all of the buffer locations\n    for (let i = 0; i < totalNewInstances; ++i) {\n      const group: IInstanceAttributeBufferLocationGroup = {\n        instanceIndex: -1,\n        propertyToBufferLocation: {}\n      };\n\n      // Loop through all of the property ids that affect specific attributes. Each of these ids\n      // needs an association with the buffer location they modify.\n      for (let j = 0, endj = attributesBufferLocations.length; j < endj; ++j) {\n        const allLocations = attributesBufferLocations[j];\n        const attribute = allLocations.attribute;\n        const ids = allLocations.ids;\n        const bufferLocationsForAttribute =\n          allLocations.bufferLocationsForAttribute;\n\n        if (!bufferLocationsForAttribute) {\n          emitOnce(\n            \"Instance Attribute Buffer Error\",\n            (count: number, id: string) => {\n              console.warn(\n                `${id}: There is an error in forming buffer location groups in InstanceAttributeBufferManager. Error count: ${count}`\n              );\n            }\n          );\n          continue;\n        }\n\n        const bufferLocation = bufferLocationsForAttribute.shift();\n\n        if (!bufferLocation) {\n          emitOnce(\n            \"Instance Attribute Buffer Error\",\n            (count: number, id: string) => {\n              console.warn(\n                `${id}: There is an error in forming buffer location groups in InstanceAttributeBufferManager. Error count: ${count}`\n              );\n            }\n          );\n          continue;\n        }\n\n        if (group.instanceIndex === -1) {\n          group.instanceIndex = bufferLocation.instanceIndex;\n        } else if (bufferLocation.instanceIndex !== group.instanceIndex) {\n          emitOnce(\n            \"Instance Attribute Parallelism Error\",\n            (count: number, id: string) => {\n              console.warn(\n                `${id}: A buffer location does not have a matching instance index which means the buffer locations are not in parallel with each other somehow. Error count: ${count}`\n              );\n              console.warn(attribute.name, bufferLocation);\n            }\n          );\n          continue;\n        }\n\n        // If the attribute has children attributes. Then when the attribute is updated, the child attributes should\n        // be updated as well. Thus the buffer location needs the child attribute buffer locations.\n        if (attribute.childAttributes) {\n          const childLocations = [];\n\n          for (\n            let k = 0, endk = attribute.childAttributes.length;\n            k < endk;\n            ++k\n          ) {\n            const childAttribute = attribute.childAttributes[k];\n            const bufferLocationsForChildAttribute =\n              allLocations.childBufferLocations[k];\n\n            if (bufferLocationsForChildAttribute) {\n              const childBufferLocation = bufferLocationsForChildAttribute.shift();\n              if (childBufferLocation) {\n                childLocations.push(childBufferLocation);\n              } else {\n                emitOnce(\n                  \"Instance Attribute Child Attribute Error\",\n                  (count: number, id: string) => {\n                    console.warn(\n                      `${id}: A child attribute does not have a buffer location available. Error count: ${count}`\n                    );\n                    console.warn(\n                      `Parent Attribute: ${attribute.name} Child Attribute: ${\n                        childAttribute.name\n                      }`\n                    );\n                  }\n                );\n              }\n            }\n          }\n\n          bufferLocation.childLocations = childLocations;\n        }\n\n        // In the group, associate the property ids that affect a buffer location WITH the buffer location they affect\n        for (let k = 0, endk = ids.length; k < endk; ++k) {\n          const id = ids[k];\n          group.propertyToBufferLocation[id] = bufferLocation;\n        }\n      }\n\n      // Store this group as a group that is ready to be associated with an instance\n      this.availableLocations.push(group);\n    }\n\n    // This helps ensure errors get reported in a timely fashion in case this triggers some massive looping\n    flushEmitOnce();\n  }\n\n  /**\n   * Returns the total instances this buffer manages.\n   */\n  getInstanceCount() {\n    return this.maxInstancedCount;\n  }\n}\n","import { Instance } from \"../../instance-provider/instance\";\nimport {\n  IInstanceAttribute,\n  INonePickingMetrics,\n  IQuadTreePickingMetrics,\n  ISinglePickingMetrics,\n  PickType\n} from \"../../types\";\nimport { LayerBufferType } from \"../layer-processing/layer-buffer-type\";\nimport { AtlasResourceManager } from \"../texture/atlas-resource-manager\";\nimport { BaseDiffProcessor } from \"./base-diff-processor\";\nimport { IBufferLocationGroup } from \"./buffer-manager-base\";\nimport { BufferManagerBase, IBufferLocation } from \"./buffer-manager-base\";\nimport { InstanceAttributeColorDiffProcessor } from \"./instance-attribute-buffering/instance-attribute-color-diff-processor\";\nimport { InstanceAttributeDiffProcessor } from \"./instance-attribute-buffering/instance-attribute-diff-processor\";\nimport { InstanceAttributeQuadDiffProcessor } from \"./instance-attribute-buffering/instance-attribute-quad-diff-processor\";\nimport { UniformColorDiffProcessor } from \"./uniform-buffering/uniform-color-diff-processor\";\nimport { UniformDiffProcessor } from \"./uniform-buffering/uniform-diff-processor\";\nimport { UniformQuadDiffProcessor } from \"./uniform-buffering/uniform-quad-diff-processor\";\n\n/** Signature of a method that handles a diff */\nexport type DiffHandler<T extends Instance> = (\n  manager: BaseDiffProcessor<T>,\n  instance: T,\n  propIds: number[],\n  bufferLocations?: IBufferLocation | IBufferLocationGroup<IBufferLocation>\n) => void;\n/** A set of diff handling methods in this order [change, add, remove] */\nexport type DiffLookup<T extends Instance> = DiffHandler<T>[];\n\n/**\n * This interface is the bare minimum properties needed for this diff manager to map instance updates to\n * uniform changes. We don't use a Layer as a target explicitly to avoid circular/hard dependencies\n */\nexport interface IInstanceDiffManagerTarget<T extends Instance> {\n  /** This is the attribute for the target that represents the _active injected value */\n  activeAttribute: IInstanceAttribute<T>;\n  /** This is used by the automated easing system and is the easing Ids used by the layer for given attributes */\n  easingId: { [key: string]: number };\n  /** This is all of the instance attributes applied to the target */\n  instanceAttributes: IInstanceAttribute<T>[];\n  /** This is the picking metrics for how Instances are picked with the mouse */\n  picking:\n    | IQuadTreePickingMetrics<T>\n    | ISinglePickingMetrics<T>\n    | INonePickingMetrics;\n  /** This is the resource manager for the target which let's us fetch information from an atlas for an instance */\n  resource: AtlasResourceManager;\n  /** This is the manager that links an instance to it's uniform cluster for populating the uniform buffer */\n  bufferManager: BufferManagerBase<T, IBufferLocation>;\n  /** This is the buffering strategy being used */\n  bufferType: LayerBufferType;\n}\n\n/**\n * This class manages the process of taking the diffs of a layer and executing methods on those diffs to perform\n * updates to the uniforms that control those instances.\n */\nexport class InstanceDiffManager<T extends Instance> {\n  bufferManager: BufferManagerBase<T, IBufferLocation>;\n  processor: BaseDiffProcessor<T>;\n  processing: DiffLookup<T>;\n  layer: IInstanceDiffManagerTarget<T>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>\n  ) {\n    this.layer = layer;\n    this.bufferManager = bufferManager;\n  }\n\n  /**\n   * This returns the proper diff processor for handling diffs\n   */\n  makeProcessor(): DiffLookup<T> {\n    // If this manager has already figured out which processor to use. Just return that processor.\n    if (this.processing) return this.processing;\n\n    if (\n      this.layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE ||\n      this.layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE_PACKING\n    ) {\n      // Now we look at the state of the layer to determine the best diff processor strategy\n      if (this.layer.picking) {\n        if (this.layer.picking.type === PickType.SINGLE) {\n          this.processor = new InstanceAttributeColorDiffProcessor(\n            this.layer,\n            this.bufferManager\n          );\n        } else if (this.layer.picking.type === PickType.ALL) {\n          this.processor = new InstanceAttributeQuadDiffProcessor(\n            this.layer,\n            this.bufferManager\n          );\n        }\n      }\n\n      if (!this.processor) {\n        this.processor = new InstanceAttributeDiffProcessor(\n          this.layer,\n          this.bufferManager\n        );\n      }\n    } else {\n      // Now we look at the state of the layer to determine the best diff processor strategy\n      if (this.layer.picking) {\n        if (this.layer.picking.type === PickType.ALL) {\n          this.processor = new UniformQuadDiffProcessor(\n            this.layer,\n            this.bufferManager\n          );\n        } else if (this.layer.picking.type === PickType.SINGLE) {\n          this.processor = new UniformColorDiffProcessor(\n            this.layer,\n            this.bufferManager\n          );\n        }\n      }\n\n      if (!this.processor) {\n        this.processor = new UniformDiffProcessor(\n          this.layer,\n          this.bufferManager\n        );\n      }\n    }\n\n    this.processing = [\n      this.processor.changeInstance,\n      this.processor.addInstance,\n      this.processor.removeInstance\n    ];\n\n    return this.processing;\n  }\n}\n","import { IInstanceProvider } from \"../surface/layer\";\nimport { InstanceDiffType } from \"../types\";\nimport { Instance } from \"./instance\";\n\n/**\n * This is an entry within the change list of the provider. It represents the type of change\n * and stores the property id's of the properties on the instance that have changed.\n */\nexport type InstanceDiff<T extends Instance> = [\n  T,\n  InstanceDiffType,\n  { [key: number]: number }\n];\n\ntype InstanceDisposer<T extends Instance> = [T, Function];\n\n/**\n * This is an optimized provider, that can provide instances that use the internal observable system\n * to deliver updates to the framework.\n */\nexport class InstanceProvider<T extends Instance>\n  implements IInstanceProvider<T> {\n  /** Stores the disposers that are called when the instance is no longer listened to */\n  private cleanObservation = new Map<number, InstanceDisposer<T>>();\n  /** This stores the changes to the instances themselves */\n  private instanceChanges = new Map<number, InstanceDiff<T>>();\n  /** This flag is true when resolving changes when the change list is retrieved. it blocks changes until the current list is resolved */\n  private allowChanges = true;\n\n  /**\n   * Retrieve all of the changes applied to instances\n   */\n  get changeList(): InstanceDiff<T>[] {\n    this.allowChanges = false;\n    const changes = Array.from(this.instanceChanges.values());\n\n    return changes;\n  }\n\n  /**\n   * Adds an instance to the provider which will stream observable changes of the instance to\n   * the framework.\n   */\n  add(instance: T) {\n    // No need to duplicate the addition\n    if (this.cleanObservation.get(instance.uid)) {\n      return instance;\n    }\n\n    if (this.allowChanges) {\n      instance.observer = this;\n      const disposer: Function = instance.observableDisposer;\n      // Store the disposers so we can clean up the observable properties\n      this.cleanObservation.set(instance.uid, [instance, disposer]);\n      // Indicate we have a new instance\n      this.instanceChanges.set(instance.uid, [\n        instance,\n        InstanceDiffType.INSERT,\n        instance.changes\n      ]);\n    }\n\n    return instance;\n  }\n\n  /**\n   * Removes all instances from this provider\n   */\n  clear() {\n    this.cleanObservation.forEach(values => {\n      this.remove(values[0]);\n    });\n  }\n\n  /**\n   * Clear all resources held by this provider. It IS valid to lose reference to all instances\n   * and to this object, which would effectively cause this object to get GC'ed. But if you\n   * desire to hang onto the instance objects, then this should be called.\n   */\n  destroy() {\n    this.cleanObservation.forEach(values => {\n      values[1]();\n    });\n\n    this.cleanObservation.clear();\n    this.instanceChanges.clear();\n  }\n\n  /**\n   * This is called from observables to indicate it's parent has been updated\n   */\n  instanceUpdated(instance: T) {\n    if (this.allowChanges) {\n      // Flag the instance as having a property changed\n      this.instanceChanges.set(instance.uid, [\n        instance,\n        InstanceDiffType.CHANGE,\n        instance.changes\n      ]);\n    }\n  }\n\n  /**\n   * Removes the instance from being advertised changes and from providing the changes\n   * for the instance.\n   */\n  remove(instance: T) {\n    if (this.allowChanges) {\n      const disposer = this.cleanObservation.get(instance.uid);\n\n      if (disposer) {\n        disposer[1]();\n        this.cleanObservation.delete(instance.uid);\n        this.instanceChanges.set(instance.uid, [\n          instance,\n          InstanceDiffType.REMOVE,\n          {}\n        ]);\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Flagged all changes as dealt with\n   */\n  resolve() {\n    this.allowChanges = true;\n    this.instanceChanges.clear();\n  }\n\n  /**\n   * This performs an operation that forces all of the instances to be flagged as an\n   * 'add' change. This allows a layer listening to this provider to ensure it has added\n   * all currently existing instances monitored by the provider.\n   *\n   * NOTE: This is a VERY poor performing method and should probably be used by the framework\n   * and not manually.\n   */\n  sync() {\n    const emptyPropertyChanges: number[] = [];\n\n    // Loop through all registered instances (which is only stored in the disposer list kept by this provider)\n    this.cleanObservation.forEach(disposer => {\n      const [instance] = disposer;\n      // Flag the instance as having a property changed\n      this.instanceChanges.set(instance.uid, [\n        instance,\n        InstanceDiffType.INSERT,\n        emptyPropertyChanges\n      ]);\n    });\n  }\n}\n","import * as Three from \"three\";\nimport { InstanceProvider } from \"../../instance-provider\";\nimport { ILayerProps, IModelType, Layer } from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  IShaderInitialization,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport { CommonMaterialOptions, IAutoEasingMethod, Vec } from \"../../util\";\nimport { ArcInstance } from \"./arc-instance\";\n\nexport enum ArcScaleType {\n  /** All dimensions are within world space */\n  NONE,\n  /**\n   * The thickness of the arc is in screen space. Thus, camera zoom changes will not affect it and\n   * must be controlled by scaleFactor alone.\n   */\n  SCREEN_CURVE\n}\n\nexport interface IArcLayerProps<T extends ArcInstance> extends ILayerProps<T> {\n  scaleType?: ArcScaleType;\n  animate?: {\n    angle?: IAutoEasingMethod<Vec>;\n    center?: IAutoEasingMethod<Vec>;\n    colorEnd?: IAutoEasingMethod<Vec>;\n    colorStart?: IAutoEasingMethod<Vec>;\n    radius?: IAutoEasingMethod<Vec>;\n    thickness?: IAutoEasingMethod<Vec>;\n  };\n}\n\n/**\n * This layer displays Arcs and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class ArcLayer<\n  T extends ArcInstance,\n  U extends IArcLayerProps<T>\n> extends Layer<T, U> {\n  static defaultProps: IArcLayerProps<ArcInstance> = {\n    data: new InstanceProvider<ArcInstance>(),\n    key: \"\",\n    scaleType: ArcScaleType.NONE,\n    scene: \"default\"\n  };\n\n  /** Easy lookup of all attribute names for the layer */\n  static attributeNames = {\n    angle: \"angle\",\n    center: \"center\",\n    colorEnd: \"colorEnd\",\n    colorStart: \"colorStart\",\n    depth: \"depth\",\n    radius: \"radius\",\n    thickness: \"thickness\"\n  };\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<ArcInstance> {\n    const { scaleType } = this.props;\n    const animations = this.props.animate || {};\n    const {\n      angle: animateAngle,\n      center: animateCenter,\n      radius: animateRadius,\n      thickness: animateThickness,\n      colorStart: animateColorStart,\n      colorEnd: animateColorEnd\n    } = animations;\n\n    const MAX_SEGMENTS = 150;\n\n    // Calculate the normals and interpolations for our vertices\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      [MAX_SEGMENTS * 2 + 2]: -1\n    };\n\n    const vertexInterpolation: { [key: number]: number } = {\n      0: 0,\n      [MAX_SEGMENTS * 2 + 2]: 1\n    };\n\n    let sign = 1;\n    for (let i = 0; i < MAX_SEGMENTS * 2; ++i) {\n      vertexToNormal[i + 1] = sign;\n      vertexInterpolation[i + 1] = Math.floor(i / 2) / (MAX_SEGMENTS - 1);\n      sign *= -1;\n    }\n\n    const vs =\n      scaleType === ArcScaleType.NONE\n        ? require(\"./arc-layer.vs\")\n        : require(\"./arc-layer-screen-space.vs\");\n\n    return {\n      fs: require(\"./arc-layer.fs\"),\n      instanceAttributes: [\n        {\n          easing: animateCenter,\n          name: ArcLayer.attributeNames.center,\n          size: InstanceAttributeSize.TWO,\n          update: o => o.center\n        },\n        {\n          easing: animateRadius,\n          name: ArcLayer.attributeNames.radius,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.radius]\n        },\n        {\n          name: ArcLayer.attributeNames.depth,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth]\n        },\n        {\n          easing: animateThickness,\n          name: ArcLayer.attributeNames.thickness,\n          size: InstanceAttributeSize.TWO,\n          update: o => o.thickness\n        },\n        {\n          easing: animateAngle,\n          name: ArcLayer.attributeNames.angle,\n          size: InstanceAttributeSize.TWO,\n          update: o => o.angle\n        },\n        {\n          easing: animateColorStart,\n          name: ArcLayer.attributeNames.colorStart,\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.colorStart\n        },\n        {\n          easing: animateColorEnd,\n          name: ArcLayer.attributeNames.colorEnd,\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.colorEnd\n        }\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: _u => [1]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexInterpolation[vertex],\n            // The number of vertices\n            MAX_SEGMENTS * 2\n          ]\n        }\n      ],\n      vertexCount: MAX_SEGMENTS * 2 + 2,\n      vs\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return Object.assign({}, CommonMaterialOptions.transparentShape, {\n      side: Three.DoubleSide\n    } as IMaterialOptions);\n  }\n}\n","export * from \"./arc-layer\";\nexport * from \"./arc-instance\";\n","export * from \"./arcs\";\nexport * from \"./circles\";\nexport * from \"./edges\";\nexport * from \"./images\";\nexport * from \"./labels\";\nexport * from \"./rectangle\";\nexport * from \"./rings\";\nexport * from \"./types\";\n","import { Instance } from \"../instance-provider/instance\";\nimport { Bounds } from \"../primitives/bounds\";\nimport { IPoint } from \"../primitives/point\";\n\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nconst maxPopulation: number = 5;\nconst maxDepth: number = 10;\n\nexport type BoundsAccessor<T extends Instance> = (o: T) => Bounds | null;\n\n/**\n * Allows typing of a callback argument\n */\nexport interface IVisitFunction<T extends Instance> {\n  /**\n   * A callback to use during add or query\n   *\n   * Called do provide aggregation or filtering like Array.reduce or\n   * Array.filter, but in a QuadTree instead.\n   *\n   * @param node  The node to effect the function upon\n   * @param child The child to add to the node\n   */\n  (node: Node<T>, child?: Bounds): void;\n}\n\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n */\nexport class Quadrants<T extends Instance> {\n  TL: Node<T>;\n  TR: Node<T>;\n  BL: Node<T>;\n  BR: Node<T>;\n\n  /**\n   * Ensures all memory is released for all nodes and all references are removed\n   * to potentially high memory consumption items\n   */\n  destroy() {\n    this.TL.destroy();\n    this.TR.destroy();\n    this.BL.destroy();\n    this.BR.destroy();\n    delete this.TL;\n    delete this.TR;\n    delete this.BL;\n    delete this.BR;\n  }\n\n  /**\n   * Creates an instance of Quadrants.\n   *\n   * @param bounds The bounds this will create quandrants for\n   * @param depth  The child depth of this element\n   */\n  constructor(\n    bounds: Bounds,\n    depth: number,\n    getBounds: BoundsAccessor<T>,\n    childToNode: Map<T, Node<T>>,\n    childToBounds: Map<T, Bounds | null>\n  ) {\n    const mid = bounds.mid;\n    this.TL = new Node<T>(bounds.x, mid.x, bounds.y, mid.y, getBounds, depth);\n    this.TR = new Node<T>(\n      mid.x,\n      bounds.right,\n      bounds.y,\n      mid.y,\n      getBounds,\n      depth\n    );\n    this.BL = new Node<T>(\n      bounds.x,\n      mid.x,\n      mid.y,\n      bounds.bottom,\n      getBounds,\n      depth\n    );\n    this.BR = new Node<T>(\n      mid.x,\n      bounds.right,\n      mid.y,\n      bounds.bottom,\n      getBounds,\n      depth\n    );\n    this.TL.childToNode = childToNode;\n    this.TR.childToNode = childToNode;\n    this.BL.childToNode = childToNode;\n    this.BR.childToNode = childToNode;\n    this.TL.childToBounds = childToBounds;\n    this.TR.childToBounds = childToBounds;\n    this.BL.childToBounds = childToBounds;\n    this.BR.childToBounds = childToBounds;\n  }\n}\n\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n */\nexport class Node<T extends Instance> {\n  /** This is the amount of space this node covers */\n  bounds: Bounds;\n  /** These are the child Instances of the node. */\n  children: T[] = [];\n  /**\n   * This tracks a quick lookup of a child to it's parent node. This is used so the child can\n   * be removed with ease and not require a traversal of the tree.\n   */\n  childToNode: Map<T, Node<T>>;\n  /** This tracks the bounds calcuated for the given instance */\n  childToBounds: Map<T, Bounds | null>;\n  /** This is how deep the node is within the tree */\n  depth: number = 0;\n  /** This is the accessor method that retrieves the bounds for an injected instance */\n  getBounds: BoundsAccessor<T>;\n  /** These are the child nodes of this quad node when this node is split. It is null if the node is not split yet */\n  nodes: Quadrants<T> | null = null;\n  /**\n   * These are children with null bounds that do not affect the splitting and ALWAYS get checked every query.\n   * They should only reside on the top node.\n   */\n  nullBounded: T[];\n\n  /**\n   * Destroys this node and ensures all child nodes are destroyed as well.\n   */\n  destroy() {\n    delete this.children;\n    delete this.bounds;\n\n    if (this.nodes) {\n      this.nodes.destroy();\n      this.nodes = null;\n    }\n  }\n\n  /**\n   * Creates an instance of Node.\n   */\n  constructor(\n    left: number,\n    right: number,\n    top: number,\n    bottom: number,\n    getBounds: BoundsAccessor<T>,\n    depth: number = 0\n  ) {\n    // If params insertted\n    if (arguments.length >= 4) {\n      this.bounds = new Bounds({ left, right, top, bottom });\n    } else {\n      // Otherwise, make tiny start area\n      this.bounds = new Bounds({ left: 0, right: 1, top: 1, bottom: 0 });\n    }\n\n    // Ensure the depth is set\n    this.depth = depth;\n    // Apply the bounds accessor method for instances\n    this.getBounds = getBounds;\n\n    // If this is the top level node, we need to instantiate the lookup that will be used\n    // Across all nodes.\n    if (this.depth === 0) {\n      this.nullBounded = [];\n      this.childToNode = new Map<T, Node<T>>();\n      this.childToBounds = new Map<T, Bounds>();\n    }\n  }\n\n  /**\n   * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n   * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n   * this quad tree spans (and this is the root node), the quad tree will expand to include\n   * the new child.\n   *\n   * @param child The Bounds type object to inject\n   * @param props Properties that can be retrieved with the child object if applicable\n   *\n   * @returns True if the insertion was successful\n   */\n  add(child: T): boolean {\n    let bounds = this.childToBounds.get(child);\n\n    if (!bounds) {\n      // First we access the bounds of the child and store it\n      bounds = this.getBounds(child);\n      this.childToBounds.set(child, bounds);\n    }\n\n    // This is the entry function for adding children, so we must first expand our top node\n    // To cover the area that the child is located.\n    // If we're in bounds, then let's just add the child\n    if (!bounds || bounds.isInside(this.bounds)) {\n      return this.doAdd(child, bounds);\n    } else {\n      // Otherwise, we need to expand first\n      this.cover(bounds);\n      return this.add(child);\n    }\n  }\n\n  /**\n   * Adds a list of new children to this quad tree. It performs the same operations as\n   * addChild for each child in the list, however, it more efficiently recalculates the\n   * bounds necessary to cover the area the children cover.\n   *\n   * @param children      List of Bounds objects to inject\n   */\n  addAll(children: T[]) {\n    // Make sure we cover the entire area of all the children.\n    // We can speed this up a lot if we first calculate the total bounds the new children covers\n    let minX = Number.MAX_VALUE;\n    let minY = Number.MAX_VALUE;\n    let maxX = -Number.MAX_VALUE;\n    let maxY = -Number.MAX_VALUE;\n\n    // Get the dimensions of the new bounds\n    children.forEach(child => {\n      const bounds = this.getBounds(child);\n      this.childToBounds.set(child, bounds);\n      if (!bounds) return;\n\n      if (bounds.x < minX) {\n        minX = bounds.x;\n      }\n      if (bounds.right > maxX) {\n        maxX = bounds.right;\n      }\n      if (bounds.bottom > maxY) {\n        maxY = bounds.bottom;\n      }\n      if (bounds.y < minY) {\n        minY = bounds.y;\n      }\n    });\n\n    // Ensure a valid cover dimension was established. If no valid dimension is established\n    // Then we don't cover, but we can still add the children as that have null Bounds which\n    // Means injecting at the top level.\n    if (\n      minX !== Number.MAX_VALUE &&\n      minY !== Number.MAX_VALUE &&\n      maxX !== -Number.MAX_VALUE &&\n      maxY !== -Number.MAX_VALUE\n    ) {\n      // Make sure our bounds includes the specified bounds\n      this.cover(\n        new Bounds({ left: minX, right: maxX, bottom: maxY, top: minY })\n      );\n    }\n\n    // Add all of the children into the tree.\n    children.forEach(child =>\n      this.doAdd(child, this.childToBounds.get(child) || null, true)\n    );\n  }\n\n  /**\n   * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n   * This will cause all children to be re-injected into the tree.\n   *\n   * @param bounds The bounds to include in the tree's coverage\n   */\n  cover(bounds: Bounds) {\n    // If we are already covering the area: abort\n    if (bounds.isInside(this.bounds)) {\n      return;\n    }\n\n    // Make our bounds cover the new area\n    this.bounds.encapsulate(bounds);\n    this.bounds.x -= 1;\n    this.bounds.y -= 1;\n    this.bounds.width += 2;\n    this.bounds.height += 2;\n    // Get all of the children underneath this node\n    const allChildren = this.gatherChildren([]);\n    this.children = [];\n\n    // Destroy the split nodes\n    if (this.nodes) {\n      // Completely...destroy...\n      this.nodes.destroy();\n      this.nodes = null;\n    }\n\n    // Clear out the child to node relations\n    this.childToNode.clear();\n    // Reinsert all children with the new dimensions in place\n    allChildren.forEach(child =>\n      this.doAdd(child, this.childToBounds.get(child) || null)\n    );\n  }\n\n  /**\n   * When adding children, this performs the actual action of injecting the child into the tree\n   * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n   *\n   * @param child The Bounds item to inject into the tree\n   * @param props The props to remain associated with the child\n   *\n   * @returns True if the injection was successful\n   */\n  private doAdd(child: T, bounds: Bounds | null, fromSplit?: boolean): boolean {\n    // If this is the top level node and the bounds are null, then we add to the null list\n    if (!bounds && this.depth === 0) {\n      this.nullBounded.push(child);\n      this.childToNode.set(child, this);\n\n      return true;\n    }\n\n    // If no bounds is available at this point, something went terribly wrong\n    if (!bounds) {\n      console.warn(\n        \"A null bounds was added to a Quad Tree node below the top node, which is invalid.\"\n      );\n      return false;\n    }\n\n    // If bounds are null, then just immediately add\n    // If nodes are present, then we have already exceeded the population of this node\n    if (this.nodes) {\n      if (bounds.isInside(this.nodes.TL.bounds)) {\n        return this.nodes.TL.doAdd(child, bounds, fromSplit);\n      }\n\n      if (bounds.isInside(this.nodes.TR.bounds)) {\n        return this.nodes.TR.doAdd(child, bounds, fromSplit);\n      }\n\n      if (bounds.isInside(this.nodes.BL.bounds)) {\n        return this.nodes.BL.doAdd(child, bounds, fromSplit);\n      }\n\n      if (bounds.isInside(this.nodes.BR.bounds)) {\n        return this.nodes.BR.doAdd(child, bounds, fromSplit);\n      }\n\n      // Otherwise, this is a child overlapping this border\n      this.children.push(child);\n      this.childToNode.set(child, this);\n\n      return true;\n    } else if (bounds.isInside(this.bounds)) {\n      // Otherwise, we have not had a split due to population limits being exceeded\n      this.children.push(child);\n      this.childToNode.set(child, this);\n\n      // If we exceeded our population for this quadrant, it is time to split up\n      if (this.children.length > maxPopulation && this.depth < maxDepth) {\n        this.split();\n      }\n\n      return true;\n    }\n\n    // This is when there is something wrong with the insertted child. The bounds\n    // For the quad should have grown without issue, but in this case the bounds\n    // Could not grow to accomodate the child.\n    if (isNaN(bounds.width + bounds.height + bounds.x + bounds.y)) {\n      console.error(\n        \"Child did not fit into bounds because a dimension is NaN\",\n        child,\n        bounds\n      );\n    } else if (bounds.area === 0) {\n      console.error(\n        \"Child did not fit into bounds because the area is zero\",\n        child,\n        bounds\n      );\n    } else {\n      console.error(\n        \"Child did not get insertted.\",\n        \"Parent:\",\n        this.bounds.toString(),\n        \"Child:\",\n        bounds.toString(),\n        \"Inside Checks:\",\n        bounds.x >= this.bounds.x,\n        bounds.right <= this.bounds.right,\n        bounds.y >= this.bounds.y,\n        bounds.bottom <= this.bounds.bottom\n      );\n    }\n\n    // Don't insert the child and continue\n    return true;\n  }\n\n  private doRemove(child: T) {\n    const index = this.children.indexOf(child);\n\n    if (index > -1) {\n      this.children.splice(index, 1);\n      this.childToNode.delete(child);\n      this.childToBounds.delete(child);\n    }\n  }\n\n  /**\n   * Collects all children of all the current and sub nodes into a single list.\n   *\n   * @param list The list we must aggregate children into\n   *\n   * @return The list specified as the list parameter\n   */\n  gatherChildren(list: T[]): T[] {\n    this.children.forEach(child => list.push(child));\n\n    if (this.nodes) {\n      this.nodes.TL.gatherChildren(list);\n      this.nodes.TR.gatherChildren(list);\n      this.nodes.BL.gatherChildren(list);\n      this.nodes.BR.gatherChildren(list);\n    }\n\n    return list;\n  }\n\n  /**\n   * Entry query for determining query type based on input object\n   *\n   * @param bounds Can be a Bounds or a Point object\n   * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n   *               information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return An array of children that intersects with the query\n   */\n  query(bounds: Bounds | IPoint, visit?: IVisitFunction<T>): T[] {\n    // This stores all of the found Instances when querying by bounds or point\n    let found: T[] = [];\n\n    // If this is the top level node then add in the null bunded items as the start\n    if (this.depth === 0) {\n      found = this.nullBounded.slice(0);\n    }\n\n    // Query a rectangle\n    if (bounds instanceof Bounds) {\n      if (bounds.hitBounds(this.bounds)) {\n        return this.queryBounds(bounds, found, visit);\n      }\n    }\n\n    // Query a point\n    if (this.bounds.containsPoint(bounds)) {\n      return this.queryPoint(bounds, found, visit);\n    }\n\n    // Return an empty array when nothing is collided with\n    return found;\n  }\n\n  /**\n   * Queries children for intersection with a bounds object\n   *\n   * @param b     The Bounds to test children against\n   * @param list  The list of children to aggregate into the query\n   * @param visit A callback function that will receive the Node as it is analyzed. This gives\n   *              information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return     Returns the exact same list that was input as the list param\n   */\n  queryBounds(b: Bounds, list: T[], visit?: IVisitFunction<T>): T[] {\n    this.children.forEach(c => {\n      const bounds = this.childToBounds.get(c);\n\n      if (bounds && bounds.hitBounds(b)) {\n        list.push(c);\n      }\n    });\n\n    if (visit) {\n      visit(this);\n    }\n\n    if (this.nodes) {\n      if (b.hitBounds(this.nodes.TL.bounds)) {\n        this.nodes.TL.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.TR.bounds)) {\n        this.nodes.TR.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.BL.bounds)) {\n        this.nodes.BL.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.BR.bounds)) {\n        this.nodes.BR.queryBounds(b, list, visit);\n      }\n    }\n\n    return list;\n  }\n\n  /**\n   * Queries children for intersection with a point\n   *\n   * @param p     The Point to test children against\n   * @param list  The list of children to aggregate into the query\n   * @param visit A callback function that will receive the Node as it is analyzed. This gives\n   *              information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return      Returns the exact same list that was input as the list param\n   */\n  queryPoint(p: any, list: T[], visit?: IVisitFunction<T>): T[] {\n    this.children.forEach(c => {\n      const bounds = this.childToBounds.get(c);\n\n      if (bounds && bounds.containsPoint(p)) {\n        list.push(c);\n      }\n    });\n\n    if (visit) {\n      visit(this);\n    }\n\n    if (this.nodes) {\n      if (this.nodes.TL.bounds.containsPoint(p)) {\n        this.nodes.TL.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.TR.bounds.containsPoint(p)) {\n        this.nodes.TR.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.BL.bounds.containsPoint(p)) {\n        this.nodes.BL.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.BR.bounds.containsPoint(p)) {\n        this.nodes.BR.queryPoint(p, list, visit);\n      }\n    }\n\n    return list;\n  }\n\n  /**\n   * Remove the provided item from the tree.\n   */\n  remove(child: T) {\n    if (this.childToNode) {\n      const node = this.childToNode.get(child);\n\n      // If the node is getting removed from the top level node, then it MAY be a null bounded item\n      // Which gets removed from the list\n      if (node && node.depth === 0) {\n        const index = node.nullBounded.indexOf(child);\n\n        if (index > -1) {\n          node.nullBounded.splice(index);\n          this.childToNode.delete(child);\n          this.childToBounds.delete(child);\n\n          return;\n        }\n      }\n\n      // Otherwise, just remove the node normally\n      if (node) {\n        node.doRemove(child);\n      }\n    }\n  }\n\n  /**\n   * Creates four sub quadrants for this node.\n   */\n  split() {\n    // Gather all items to be handed down\n    const allChildren = this.gatherChildren([]);\n    // Gather all props for the children to be handed down as well\n    this.nodes = new Quadrants<T>(\n      this.bounds,\n      this.depth + 1,\n      this.getBounds,\n      this.childToNode,\n      this.childToBounds\n    );\n    // Empty out the children as they are being re-injected\n    this.children = [];\n\n    for (let i = 0, end = allChildren.length; i < end; ++i) {\n      const child = allChildren[i];\n      this.doAdd(child, this.childToBounds.get(child) || null, true);\n    }\n  }\n\n  /**\n   * Traverses the quad tree returning every quadrant encountered\n   *\n   * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n   */\n  visit(cb: IVisitFunction<T>): void {\n    const finished = Boolean(cb(this));\n\n    if (this.nodes && !finished) {\n      this.nodes.TL.visit(cb);\n      this.nodes.TR.visit(cb);\n      this.nodes.BL.visit(cb);\n      this.nodes.BR.visit(cb);\n    }\n  }\n}\n\nexport class TrackedQuadTree<T extends Instance> extends Node<T> {}\n","import { ChartCamera } from \"./chart-camera\";\n\nexport interface IReferenceCameraOptions {\n  /** This is the base camera to monitor */\n  base: ChartCamera;\n  /**\n   * This is a filter applied to the offset that comes from the chart camera.\n   */\n  offsetFilter?(offset: [number, number, number]): [number, number, number];\n  /**\n   * This is a filter applied to the scale that comes from the chart camera.\n   */\n  scaleFilter?(scale: [number, number, number]): [number, number, number];\n}\n\n/**\n * This is a camera that is based on another camera. This can apply filters\n * to the information provided from the base camera.\n *\n * Useful for situations such as a chart having a chart area and a list on the\n * left. This can use the same camera the chart area uses, but filter the response\n * to only track the y offset of the base camera.\n *\n * That would allow easy tracking of the left list to track with elements in the\n * chart and only manipulate a single camera instead of managing many cameras and\n * tie them together with lots of events.\n */\nexport class ReferenceCamera extends ChartCamera {\n  private base: ChartCamera;\n  private offsetFilter = (offset: [number, number, number]) => offset;\n  private scaleFilter = (scale: [number, number, number]) => scale;\n\n  set offset(_val: any) {\n    /** no-op */\n  }\n\n  get offset() {\n    return this.offsetFilter(this.base.offset);\n  }\n\n  set scale(_val: any) {\n    /** no-op */\n  }\n\n  get scale() {\n    return this.scaleFilter(this.base.scale);\n  }\n\n  constructor(options: IReferenceCameraOptions) {\n    super();\n    Object.assign(this, options);\n  }\n}\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * Active `debug` instances.\n */\nexports.instances = [];\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  var prevTime;\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n  debug.destroy = destroy;\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  exports.instances.push(debug);\n\n  return debug;\n}\n\nfunction destroy () {\n  var index = exports.instances.indexOf(this);\n  if (index !== -1) {\n    exports.instances.splice(index, 1);\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var i;\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n\n  for (i = 0; i < exports.instances.length; i++) {\n    var instance = exports.instances[i];\n    instance.enabled = exports.enabled(instance.namespace);\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  if (name[name.length - 1] === '*') {\n    return true;\n  }\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__140__;","import { Instance } from \"../instance-provider/instance\";\nimport { extendShader } from \"../shaders/util/extend-shader\";\nimport { IShaderInitialization, IShaderIOExtension } from \"../types\";\n\nexport function extendShaderInitialization<T extends Instance>(\n  shaderIO: IShaderInitialization<T>,\n  extend: IShaderIOExtension<T>\n): IShaderInitialization<T> {\n  const extendedShaders = extendShader(shaderIO, extend.vs, extend.fs);\n\n  return {\n    fs: extendedShaders.fs,\n    instanceAttributes: (shaderIO.instanceAttributes || []).concat(\n      extend.instanceAttributes || []\n    ),\n    uniforms: (shaderIO.uniforms || []).concat(extend.uniforms || []),\n    vertexAttributes: (shaderIO.vertexAttributes || []).concat(\n      extend.vertexAttributes || []\n    ),\n    vertexCount: shaderIO.vertexCount,\n    vs: extendedShaders.vs\n  };\n}\n","import { LayerSurface } from \"../surface\";\nimport { IAutoEasingMethod } from \"./auto-easing-method\";\nimport { Vec } from \"./vector\";\n\nexport type AnimationDelayAccessor = (\n  groupIndex: number,\n  currentDelay: number\n) => number;\nexport type AnimationInstanceModificationCallback = (\n  groupIndex: number\n) => void;\n\nfunction isNumber(val: any): val is number {\n  return !isNaN(val);\n}\n\n/**\n * This provides some methods that aids in more complicated animation tasks, such as\n * adjusting gpu animated properties with differing time delay values for each change.\n */\nexport class AnimationHelper {\n  surface: LayerSurface;\n\n  constructor(surface: LayerSurface) {\n    this.surface = surface;\n  }\n\n  /**\n   * When you want to animate properties of instances but you want them to start at differing times,\n   * use this method to ensure the timings starting between the elements is correct.\n   *\n   * @param easingMethod This is the easing method used for the layer's property to animate\n   * @param groupCount This is the number of animations desired for a given delay level\n   * @param delayGap This is the amount of delay between each group. This can be a static value or\n   *                 can be a dynamic callback\n   */\n  groupAnimation(\n    easingMethod: IAutoEasingMethod<Vec>,\n    groupCount: number,\n    baseDelay: number,\n    delayGap: number | AnimationDelayAccessor,\n    modifyInstances: AnimationInstanceModificationCallback\n  ) {\n    // Get the time of the current frame as our timing basis\n    const startFrameTime = this.surface.frameMetrics.currentTime;\n    // Do an initial commit to ensure all previous animated properties are committed based on the\n    // Delay specified for them\n    this.surface.commit(startFrameTime);\n\n    // Loop through the the number of grouped animations to work with\n    for (let i = 0; i < groupCount; ++i) {\n      // Determine how much extra delay is applied for the provided group\n      const gap = isNumber(delayGap)\n        ? delayGap\n        : delayGap(i, easingMethod.delay);\n      // Apply the delay\n      easingMethod.delay = baseDelay + gap * i;\n      // Make the instance modifications\n      modifyInstances(i);\n      // Commit the instance modifications based on the current delay settings\n      this.surface.commit(startFrameTime);\n    }\n  }\n}\n","import { Bounds } from \"../primitives/bounds\";\nimport { EventManager } from \"../surface/event-manager\";\nimport {\n  IDragMetrics,\n  IMouseInteraction,\n  IWheelMetrics\n} from \"../surface/mouse-event-manager\";\nimport { View } from \"../surface/view\";\nimport { add3, subtract3, Vec3 } from \"../util\";\nimport { ChartCamera } from \"../util/chart-camera\";\nexport enum CameraBoundsAnchor {\n  TOP_LEFT,\n  TOP_MIDDLE,\n  TOP_RIGHT,\n  MIDDLE_LEFT,\n  MIDDLE,\n  MIDDLE_RIGHT,\n  BOTTOM_LEFT,\n  BOTTOM_MIDDLE,\n  BOTTOM_RIGHT\n}\n\nconst { max, min } = Math;\n\n/**\n * This represents how the camera should be bounded in the world space. This gives enough information\n * to handle all cases of bounding, including screen padding and anchoring for cases where the viewed space\n * is smaller than the view.\n */\nexport interface ICameraBoundsOptions {\n  /** How the bounded world space should anchor itself within the view when the projected world space to the screen is smaller than the view */\n  anchor: CameraBoundsAnchor;\n  /** Minimum settings the camera can scale to */\n  scaleMin?: Vec3;\n  /** Maximum settings the camera can scale to */\n  scaleMax?: Vec3;\n  /** The actual screen pixels the bounds can exceed when the camera's view has reached the bounds of the world */\n  screenPadding: { left: number; right: number; top: number; bottom: number };\n  /** This is the view for which the bounds applies towards */\n  view: string;\n  /** The area the camera is bound inside */\n  worldBounds: Bounds;\n}\n\nexport interface IBasicCameraControllerOptions {\n  /** Takes in the options to be used for creating a new ViewBounds object on this controller. */\n  bounds?: ICameraBoundsOptions;\n  /** This is the camera this controller will manipulate */\n  camera: ChartCamera;\n  /** When this is set to true, the start view can be targetted even when behind other views */\n  ignoreCoverViews?: boolean;\n  /**\n   * This provides a control to filter panning that will be applied to the camera. The input and\n   * output of this will be the delta value to be applied.\n   */\n  panFilter?(\n    offset: [number, number, number],\n    view: View,\n    allViews: View[]\n  ): [number, number, number];\n  /**\n   * This adjusts how fast scaling is applied from the mouse wheel\n   */\n  scaleFactor?: number;\n  /**\n   * This provides a control to filter scaling that will be applied to the camera. The input and\n   * output of this will be the delta value to be applied.\n   */\n  scaleFilter?(\n    scale: [number, number, number],\n    view: View,\n    allViews: View[]\n  ): [number, number, number];\n  /**\n   * This is the view that MUST be the start view from the events.\n   * If not provided, then dragging anywhere will adjust the camera\n   */\n  startView?: string | string[];\n\n  /**\n   * This is a handler for when the camera has applied changes to the visible range of what is seen.\n   * Which most likely means offset or scale has been altered.\n   */\n  onRangeChanged?(camera: ChartCamera, targetView: View): void;\n}\n\n/**\n * This provides some very basic common needs for a camera control system. This is not a total solution\n * very every scenario. This should just often handle most basic needs.\n */\nexport class BasicCameraController extends EventManager {\n  /**\n   * If total bounds of worldbounds + screenpadding is smaller\n   * than width or height of view, anchor dictates placement.\n   */\n  bounds?: ICameraBoundsOptions;\n  /** This is the camera that this controller will manipulate */\n  camera: ChartCamera;\n  /** When this is set to true, the start view can be targetted even when behind other views */\n  ignoreCoverViews?: boolean;\n  /** Informative property indicating the controller is panning the chart or not */\n  isPanning: boolean = false;\n  /** This is the filter applied to panning operations */\n  private panFilter = (\n    offset: [number, number, number],\n    _view: View,\n    _allViews: View[]\n  ) => offset;\n  /** The rate scale is adjusted with the mouse wheel */\n  scaleFactor: number;\n  /** THis is the filter applied to tscaling operations */\n  private scaleFilter = (\n    scale: [number, number, number],\n    _view: View,\n    _allViews: View[]\n  ) => scale;\n  /** The view that must be the start or focus of the interactions in order for the interactions to occur */\n  startViews: string[] = [];\n\n  /**\n   * If an unconvered start view is not available, this is the next available covered view, if present\n   */\n  private coveredStartView: View;\n  /**\n   * Callback for when the range has changed for the camera in a view\n   */\n  private onRangeChanged = (_camera: ChartCamera, _targetView: View) => {\n    /* no-op */\n  };\n  /**\n   * This flag is set to true when a start view is targetted on mouse down even if it is not\n   * the top most view.\n   */\n  private startViewDidStart: boolean = false;\n\n  constructor(options: IBasicCameraControllerOptions) {\n    super();\n    if (options.bounds) {\n      this.setBounds(options.bounds);\n    }\n    this.camera = options.camera;\n    this.scaleFactor = options.scaleFactor || 1000.0;\n    this.ignoreCoverViews = options.ignoreCoverViews || false;\n\n    if (options.startView) {\n      this.startViews = Array.isArray(options.startView)\n        ? options.startView\n        : [options.startView];\n    }\n\n    this.panFilter = options.panFilter || this.panFilter;\n    this.scaleFilter = options.scaleFilter || this.scaleFilter;\n    this.onRangeChanged = options.onRangeChanged || this.onRangeChanged;\n  }\n\n  /**\n   * Corrects camera offset to respect current bounds and anchor.\n   */\n  applyBounds = () => {\n    if (this.bounds && this.camera) {\n      const targetView = this.getView(this.bounds.view);\n      this.applyScaleBounds();\n\n      // Next bound the positioning\n      if (targetView) {\n        this.camera.offset[0] = this.boundsHorizontalOffset(\n          targetView,\n          this.bounds\n        );\n        this.camera.offset[1] = this.boundsVerticalOffset(\n          targetView,\n          this.bounds\n        );\n      }\n    }\n  };\n\n  applyScaleBounds = () => {\n    if (this.camera && this.bounds) {\n      // First bound the scaling\n      if (this.bounds.scaleMin) {\n        this.camera.setScale([\n          max(this.camera.scale[0], this.bounds.scaleMin[0]),\n          max(this.camera.scale[1], this.bounds.scaleMin[1]),\n          max(this.camera.scale[2], this.bounds.scaleMin[2])\n        ]);\n      }\n\n      if (this.bounds.scaleMax) {\n        this.camera.setScale([\n          min(this.camera.scale[0], this.bounds.scaleMax[0]),\n          min(this.camera.scale[1], this.bounds.scaleMax[1]),\n          min(this.camera.scale[2], this.bounds.scaleMax[2])\n        ]);\n      }\n    }\n  };\n\n  /**\n   * Calculation for adhering to an anchor - x-axis offset only.\n   */\n  anchoredByBoundsHorizontal(targetView: View, bounds: ICameraBoundsOptions) {\n    switch (bounds.anchor) {\n      case CameraBoundsAnchor.TOP_LEFT:\n      case CameraBoundsAnchor.MIDDLE_LEFT:\n      case CameraBoundsAnchor.BOTTOM_LEFT:\n        return -(\n          bounds.worldBounds.left -\n          bounds.screenPadding.left / this.camera.scale[0]\n        );\n\n      case CameraBoundsAnchor.TOP_MIDDLE:\n      case CameraBoundsAnchor.MIDDLE:\n      case CameraBoundsAnchor.BOTTOM_MIDDLE:\n        return -(\n          bounds.worldBounds.right -\n          bounds.worldBounds.width / 2 -\n          0.5 *\n            ((targetView.screenBounds.width + bounds.screenPadding.right) /\n              this.camera.scale[0])\n        );\n\n      case CameraBoundsAnchor.TOP_RIGHT:\n      case CameraBoundsAnchor.MIDDLE_RIGHT:\n      case CameraBoundsAnchor.BOTTOM_RIGHT:\n        return -(\n          bounds.worldBounds.right -\n          (targetView.screenBounds.width - bounds.screenPadding.right) /\n            this.camera.scale[0]\n        );\n    }\n  }\n\n  /**\n   * Calculation for adhering to an anchor - y-axis offset only.\n   */\n  anchoredByBoundsVertical(targetView: View, bounds: ICameraBoundsOptions) {\n    switch (bounds.anchor) {\n      case CameraBoundsAnchor.TOP_LEFT:\n      case CameraBoundsAnchor.TOP_MIDDLE:\n      case CameraBoundsAnchor.TOP_RIGHT:\n        return (\n          -bounds.worldBounds.top - -bounds.screenPadding.top / this.scale[1]\n        );\n\n      case CameraBoundsAnchor.MIDDLE_LEFT:\n      case CameraBoundsAnchor.MIDDLE:\n      case CameraBoundsAnchor.MIDDLE_RIGHT:\n        return (\n          -(bounds.worldBounds.bottom - bounds.worldBounds.height / 2) +\n          0.5 *\n            (targetView.screenBounds.height - bounds.screenPadding.bottom) /\n            this.scale[1]\n        );\n\n      case CameraBoundsAnchor.BOTTOM_LEFT:\n      case CameraBoundsAnchor.BOTTOM_MIDDLE:\n      case CameraBoundsAnchor.BOTTOM_RIGHT:\n        return -(\n          bounds.worldBounds.bottom -\n          (targetView.screenBounds.height - bounds.screenPadding.bottom) /\n            this.scale[1]\n        );\n    }\n  }\n\n  /**\n   * Returns offset on x-axis due to current bounds and anchor.\n   */\n  boundsHorizontalOffset(targetView: View, bounds: ICameraBoundsOptions) {\n    const worldTLinScreenSpace = targetView.worldToScreen({\n      x: bounds.worldBounds.left,\n      y: bounds.worldBounds.top\n    });\n    const worldBRinScreenSpace = targetView.worldToScreen({\n      x: bounds.worldBounds.right,\n      y: bounds.worldBounds.bottom\n    });\n\n    const widthDifference =\n      worldBRinScreenSpace.x -\n      worldTLinScreenSpace.x +\n      bounds.screenPadding.left +\n      bounds.screenPadding.right -\n      targetView.screenBounds.width;\n\n    // If the worldBounds are smaller than the screenBounds,\n    // We offset according to the anchoring\n    if (widthDifference < 0) {\n      return this.anchoredByBoundsHorizontal(targetView, bounds);\n    }\n\n    if (\n      worldBRinScreenSpace.x <\n      targetView.screenBounds.right - bounds.screenPadding.right\n    ) {\n      return (\n        -bounds.worldBounds.right +\n        (targetView.screenBounds.width - bounds.screenPadding.right) /\n          this.camera.scale[0]\n      );\n    }\n\n    if (\n      worldTLinScreenSpace.x >\n      targetView.screenBounds.left + bounds.screenPadding.left\n    ) {\n      return (\n        -bounds.worldBounds.left +\n        bounds.screenPadding.left / this.camera.scale[0]\n      );\n    }\n\n    return this.camera.offset[0];\n  }\n\n  /**\n   * Returns offset on y-axis due to current bounds and anchor.\n   */\n  boundsVerticalOffset(targetView: View, bounds: ICameraBoundsOptions) {\n    const worldTLinScreenSpace = targetView.worldToScreen({\n      x: bounds.worldBounds.left,\n      y: bounds.worldBounds.top\n    });\n    const worldBRinScreenSpace = targetView.worldToScreen({\n      x: bounds.worldBounds.right,\n      y: bounds.worldBounds.bottom\n    });\n\n    const heightDifference =\n      worldBRinScreenSpace.y -\n      worldTLinScreenSpace.y +\n      bounds.screenPadding.top +\n      bounds.screenPadding.bottom -\n      targetView.screenBounds.height;\n\n    // If the viewBounds are larger than the screenBounds,\n    // We offset according to the anchoring\n    if (heightDifference < 0) {\n      return this.anchoredByBoundsVertical(targetView, bounds);\n    }\n\n    if (\n      worldTLinScreenSpace.y >\n      targetView.screenBounds.top - bounds.screenPadding.top\n    ) {\n      return -(\n        bounds.worldBounds.top -\n        bounds.screenPadding.top / this.camera.scale[1]\n      );\n    }\n\n    if (\n      worldBRinScreenSpace.y <\n      targetView.screenBounds.bottom + bounds.screenPadding.bottom\n    ) {\n      return -(\n        bounds.worldBounds.bottom +\n        (-targetView.screenBounds.height + bounds.screenPadding.bottom) /\n          this.camera.scale[1]\n      );\n    }\n\n    return this.camera.offset[1];\n  }\n\n  private canStart(viewId: string) {\n    return (\n      this.startViews.length === 0 ||\n      (this.startViews && this.startViews.indexOf(viewId) > -1) ||\n      (this.startViewDidStart && this.ignoreCoverViews)\n    );\n  }\n\n  private findCoveredStartView(e: IMouseInteraction) {\n    const found = e.viewsUnderMouse.find(\n      under => this.startViews.indexOf(under.view.id) > -1\n    );\n    this.startViewDidStart = Boolean(found);\n\n    if (found) {\n      this.coveredStartView = found.view;\n    }\n  }\n\n  private getTargetView(e: IMouseInteraction) {\n    // If we have a start view and we do not ignore covering views,\n    // Then our target view is the view we started with\n    if (this.startViews && !this.ignoreCoverViews) {\n      return e.target.view;\n    } else {\n      // Otherwise, we use the covered start view\n      return this.coveredStartView;\n    }\n  }\n\n  /**\n   * Used to aid in handling the pan effect and determine the contextual view targetted.\n   */\n  handleMouseDown(e: IMouseInteraction, _button: number) {\n    if (this.startViews) {\n      // We look for valid covered views on mouse down so dragging will work\n      this.findCoveredStartView(e);\n      // If this is a valid start view, then we enter a panning state with the mouse down\n      if (e.start) {\n        this.isPanning = this.canStart(e.start.view.id) || this.isPanning;\n      }\n    }\n  }\n\n  /**\n   * Used to aid in handling the pan effect\n   */\n  handleMouseUp(_e: IMouseInteraction) {\n    this.startViewDidStart = false;\n    this.isPanning = false;\n  }\n\n  /**\n   * Applies a panning effect by adjusting the camera's offset.\n   */\n  handleDrag(e: IMouseInteraction, drag: IDragMetrics) {\n    if (e.start) {\n      if (this.canStart(e.start.view.id)) {\n        let pan: [number, number, number] = [\n          drag.screen.delta.x / this.camera.scale[0],\n          drag.screen.delta.y / this.camera.scale[1],\n          0\n        ];\n\n        if (this.panFilter) {\n          pan = this.panFilter(\n            pan,\n            e.start.view,\n            e.viewsUnderMouse.map(v => v.view)\n          );\n        }\n\n        this.camera.offset[0] += pan[0];\n        this.camera.offset[1] += pan[1];\n        this.camera.update();\n\n        // Add additional correction for bounds\n        this.applyBounds();\n        // Broadcast the change occurred\n        this.onRangeChanged(this.camera, e.start.view);\n        // Add additional correction for bounds\n        this.applyBounds();\n      }\n    }\n  }\n\n  /**\n   * Applies a scaling effect to the camera for mouse wheel events\n   */\n  handleWheel(e: IMouseInteraction, wheelMetrics: IWheelMetrics) {\n    // Every mouse wheel event must look to see if it's over a valid covered start view\n    this.findCoveredStartView(e);\n\n    if (this.canStart(e.target.view.id)) {\n      const targetView = this.getTargetView(e);\n      const beforeZoom = targetView.screenToWorld(e.screen.mouse);\n\n      const currentZoomX = this.camera.scale[0] || 1.0;\n      const currentZoomY = this.camera.scale[1] || 1.0;\n\n      let deltaScale: [number, number, number] = [\n        wheelMetrics.wheel[1] / this.scaleFactor * currentZoomX,\n        wheelMetrics.wheel[1] / this.scaleFactor * currentZoomY,\n        1\n      ];\n\n      if (this.scaleFilter) {\n        deltaScale = this.scaleFilter(\n          deltaScale,\n          targetView,\n          e.viewsUnderMouse.map(v => v.view)\n        );\n      }\n\n      this.camera.scale[0] = currentZoomX + deltaScale[0];\n      this.camera.scale[1] = currentZoomY + deltaScale[1];\n\n      // Ensure the new scale values are within bounds before attempting to correct offsets\n      this.applyScaleBounds();\n\n      const afterZoom = targetView.screenToWorld(e.screen.mouse);\n      this.camera.offset[0] -= beforeZoom.x - afterZoom.x;\n      this.camera.offset[1] -= beforeZoom.y - afterZoom.y;\n\n      // Add additional correction for bounds\n      this.applyBounds();\n      // Broadcast the change occurred\n      this.onRangeChanged(this.camera, targetView);\n      // Add additional correction for bounds\n      this.applyBounds();\n\n      // Make sure the camera updates\n      this.camera.update();\n    }\n  }\n\n  // These are the currently Unused responses for this controller\n  handleMouseOut(_e: IMouseInteraction) {\n    /*no-op*/\n  }\n  handleClick(_e: IMouseInteraction) {\n    /*no-op*/\n  }\n  handleMouseMove(_e: IMouseInteraction) {\n    /*no-op*/\n  }\n  handleMouseOver(_e: IMouseInteraction) {\n    /*no-op*/\n  }\n\n  /**\n   * Evaluates the world bounds the specified view is observing\n   *\n   * @param viewId The id of the view when the view was generated when the surface was made\n   */\n  getRange(viewId: string): Bounds {\n    /** Get the projections for the provided view */\n    const projection = this.getProjection(viewId);\n    /** Get the bounds on the screen for the indicated view */\n    const screenBounds = this.getViewScreenBounds(viewId);\n\n    // Make sure we have a valid projection and screen bounds to make the adjustment\n    if (projection && screenBounds) {\n      /** Get the current viewed world bounds of the view */\n      const topLeft = projection.screenToWorld(screenBounds);\n      const bottomRight = projection.screenToWorld({\n        x: screenBounds.right,\n        y: screenBounds.bottom\n      });\n\n      return new Bounds({\n        height: bottomRight.y - topLeft.y,\n        width: bottomRight.x - topLeft.x,\n        x: topLeft.x,\n        y: topLeft.y\n      });\n    }\n\n    return new Bounds({ x: 0, y: 0, width: 1, height: 1 });\n  }\n\n  /**\n   * Retrieves the current pan of the controlled camera\n   */\n  get pan(): Vec3 {\n    return this.camera.offset;\n  }\n\n  /**\n   * Sets bounds applicable to the supplied view.\n   * If no view is supplied, it uses the first in the startViews array\n   */\n  setBounds(bounds: ICameraBoundsOptions) {\n    this.bounds = bounds;\n    this.applyBounds();\n  }\n\n  /**\n   * Retrieves the current scale of the camera\n   */\n  get scale(): Vec3 {\n    return this.camera.scale;\n  }\n\n  /**\n   * This lets you set the visible range of a view based on the view's camera. This will probably not work\n   * as expected if the view indicated and this controller do not share the same camera.\n   *\n   * @param viewId The id of the view when the view was generated when the surface was made\n   */\n  setRange(newWorld: Bounds, viewId: string) {\n    /** Get the projections for the provided view */\n    const projection = this.getProjection(viewId);\n    /** Get the bounds on the screen for the indicated view */\n    const screenBounds = this.getViewScreenBounds(viewId);\n    /** Get the view the range is being applied towards */\n    const view = this.getView(viewId);\n\n    // Make sure we have a valid projection and screen bounds to make the adjustment\n    if (projection && screenBounds && view) {\n      const deltaScale = subtract3(\n        [\n          screenBounds.width / newWorld.width,\n          screenBounds.height / newWorld.height,\n          1\n        ],\n        this.camera.scale\n      );\n\n      this.camera.setScale(\n        add3(this.camera.scale, this.scaleFilter(deltaScale, view, [view]))\n      );\n\n      const deltaPan = subtract3(\n        [-newWorld.x, -newWorld.y, 0],\n        this.camera.offset\n      );\n\n      this.camera.setOffset(\n        add3(this.camera.offset, this.scaleFilter(deltaPan, view, [view]))\n      );\n\n      // Bound the camera to the specified bounding range\n      this.applyBounds();\n      // Broadcast the change occurred\n      this.onRangeChanged(this.camera, view);\n      // Bound the camera to the specified bounding range\n      this.applyBounds();\n    }\n  }\n}\n","export * from \"./basic-camera-controller\";\n","export * from \"./base-event-managers\";\nexport * from \"./base-layers\";\nexport * from \"./instance-provider\";\nexport * from \"./primitives\";\nexport * from \"./surface\";\nexport * from \"./types\";\nexport * from \"./util\";\nexport * from \"./shaders\";\n","export * from \"./voidgl\";\n"],"sourceRoot":""}