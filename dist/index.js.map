{"version":3,"sources":["webpack://voidgl/webpack/universalModuleDefinition","webpack://voidgl/webpack/bootstrap","webpack://voidgl/external \"three\"","webpack://voidgl/./src/voidgl/types.ts","webpack://voidgl/./src/voidgl/primitives/bounds.ts","webpack://voidgl/./src/voidgl/base-layers/types.ts","webpack://voidgl/./src/voidgl/surface/layer.ts","webpack://voidgl/./src/voidgl/instance-provider/instance.ts","webpack://voidgl/./src/voidgl/instance-provider/index.ts","webpack://voidgl/./src/voidgl/primitives/index.ts","webpack://voidgl/./src/voidgl/util/index.ts","webpack://voidgl/./src/voidgl/surface/texture/index.ts","webpack://voidgl/./src/voidgl/util/identify-by-key.ts","webpack://voidgl/./src/voidgl/instance-provider/observable.ts","webpack://voidgl/./src/voidgl/surface/generate-layer-model.ts","webpack://voidgl/./src/voidgl/surface/view.ts","webpack://voidgl/./src/voidgl/surface/scene.ts","webpack://voidgl/./src/voidgl/surface/texture/label-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/base-atlas-resource.ts","webpack://voidgl/./src/voidgl/base-layers/edges/types.ts","webpack://voidgl/./src/voidgl/util/view-camera.ts","webpack://voidgl/./src/voidgl/util/shader-templating.ts","webpack://voidgl/./src/voidgl/util/chart-camera.ts","webpack://voidgl/./src/voidgl/util/vector.ts","webpack://voidgl/./src/voidgl/util/auto-easing-method.ts","webpack://voidgl/./src/voidgl/surface/event-manager.ts","webpack://voidgl/./src/voidgl/surface/mouse-event-manager.ts","webpack://voidgl/./src/voidgl/surface/inject-shader-io.ts","webpack://voidgl/./src/voidgl/surface/generate-layer-material.ts","webpack://voidgl/./src/voidgl/surface/generate-layer-geometry.ts","webpack://voidgl/./src/voidgl/util/data-bounds.ts","webpack://voidgl/./src/voidgl/surface/generate-default-scene.ts","webpack://voidgl/./src/voidgl/util/make-instance-uniform-name.ts","webpack://voidgl/./src/voidgl/shaders/fragments/template-vars.ts","webpack://voidgl/./src/voidgl/base-layers/labels/index.ts","webpack://voidgl/./src/voidgl/surface/texture/label-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/image-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/color-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/color-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/sub-texture.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas.ts","webpack://voidgl/./src/voidgl/base-layers/images/index.ts","webpack://voidgl/./src/voidgl/util/webgl-stat.ts","webpack://voidgl/./src/voidgl/util/uid.ts","webpack://voidgl/./node_modules/debug/src/browser.js","webpack://voidgl/./src/voidgl/util/mouse.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas-resource-manager.ts","webpack://voidgl/./src/voidgl/surface/event-managers/layer-mouse-events.ts","webpack://voidgl/./src/voidgl/util/instance-uniform-manager.ts","webpack://voidgl/./src/voidgl/util/color-picking-analysis.ts","webpack://voidgl/./src/voidgl/util/quad-tree.ts","webpack://voidgl/./src/voidgl/primitives/absolute-position.ts","webpack://voidgl/./src/voidgl/shaders/fragments/color-picking-assignment.vs","webpack://voidgl/./src/voidgl/shaders/fragments/color-picking-disabled.fs","webpack://voidgl/./src/voidgl/shaders/fragments/color-picking-method.fs","webpack://voidgl/./src/voidgl/shaders/fragments/color-picking-vertex-header.vs","webpack://voidgl/./src/voidgl/shaders/fragments/projection-methods.vs","webpack://voidgl/./src/voidgl/shaders/fragments/shader-input.vs","webpack://voidgl/./src/voidgl/shaders/fragments/instance-destructuring-array.vs","webpack://voidgl/./src/voidgl/shaders/fragments/fragment-shader-composition.fs","webpack://voidgl/./src/voidgl/shaders/fragments/vertex-shader-composition.vs","webpack://voidgl/./src/voidgl/shaders/fragments/instance-retrieval-array.vs","webpack://voidgl/./src/voidgl/shaders/util/uniform-instance-block-array.ts","webpack://voidgl/./src/voidgl/shaders/util/attribute-generation.ts","webpack://voidgl/./src/voidgl/surface/layer-surface.ts","webpack://voidgl/./src/voidgl/surface/index.ts","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.vs","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.fs","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.ts","webpack://voidgl/./src/voidgl/base-layers/rings/ring-instance.ts","webpack://voidgl/./src/voidgl/base-layers/rings/index.ts","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-instance.ts","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-layer.vs","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-layer.fs","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-layer.ts","webpack://voidgl/./src/voidgl/base-layers/rectangle/index.ts","webpack://voidgl/./src/voidgl/base-layers/labels/label-instance.ts","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.vs","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.fs","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.ts","webpack://voidgl/./src/voidgl/surface/texture/image-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas-manager.ts","webpack://voidgl/./src/voidgl/surface/texture/pack-node.ts","webpack://voidgl/./src/voidgl/base-layers/images/image-instance.ts","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.vs","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.fs","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.ts","webpack://voidgl/./src/voidgl/base-layers/edges/edge-instance.ts","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer.fs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-screen-curve.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-bezier2.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-bezier.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-line.vs","webpack://voidgl/./src/voidgl/base-layers/edges/edge-picking.ts","webpack://voidgl/./src/voidgl/base-layers/edges/edge-layer.ts","webpack://voidgl/./src/voidgl/base-layers/edges/index.ts","webpack://voidgl/./src/voidgl/base-layers/circles/circle-instance.ts","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.vs","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.fs","webpack://voidgl/./src/voidgl/shaders/base/no-op.vs","webpack://voidgl/./src/voidgl/shaders/base/no-op.fs","webpack://voidgl/./src/voidgl/surface/layer-interaction-handler.ts","webpack://voidgl/./src/voidgl/surface/instance-diff-manager.ts","webpack://voidgl/./src/voidgl/primitives/point.ts","webpack://voidgl/./src/voidgl/instance-provider/instance-provider.ts","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.ts","webpack://voidgl/./src/voidgl/base-layers/circles/index.ts","webpack://voidgl/./src/voidgl/base-layers/index.ts","webpack://voidgl/./src/voidgl/util/tracked-quad-tree.ts","webpack://voidgl/./src/voidgl/util/reference-camera.ts","webpack://voidgl/./node_modules/ms/index.js","webpack://voidgl/./node_modules/debug/src/debug.js","webpack://voidgl/./node_modules/process/browser.js","webpack://voidgl/external \"bowser\"","webpack://voidgl/./src/voidgl/util/animation-helper.ts","webpack://voidgl/./src/voidgl/base-event-managers/basic-camera-controller.ts","webpack://voidgl/./src/voidgl/base-event-managers/index.ts","webpack://voidgl/./src/voidgl/index.ts","webpack://voidgl/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__112__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","InstanceBlockIndex","InstanceAttributeSize","UniformSize","VertexAttributeSize","ShaderInjectionTarget","PickType","InstanceDiffType","Bounds","options","this","x","y","width","height","left","top","bottom","right","emptyBounds","containsPoint","point","encapsulate","item","Math","abs","fits","bounds","hitBounds","isInside","toString","AnchorType","ScaleType","__extends","extendStatics","setPrototypeOf","__proto__","Array","b","__","constructor","create","Three","types_1","util_1","identify_by_key_1","instance_diff_manager_1","layer_interaction_handler_1","Layer","_super","props","_this","depth","instanceById","Map","instanceVertexCount","assign","defaultProps","_a","picking","NONE","ALL","pickingMethods","getInstancePickingMethods","currentPickMode","hitTest","quadTree","TrackedQuadTree","boundsAccessor","type","SINGLE","uidToInstance","diffManager","InstanceDiffManager","diffProcessor","getDiffProcessor","interactions","LayerInteractionHandler","destroy","uniformManager","didUpdateProps","draw","uniform","change","instance","uniforms","changeList","data","end","length","getUniforms","changes","resolve","update","materialUniforms","forEach","materialUniform","Error","getModelType","drawMode","TrianglesDrawMode","modelType","Mesh","getMaterialOptions","initShader","fs","instanceAttributes","vertexAttributes","vertexCount","vs","makeInstanceAttribute","block","blockIndex","size","atlas","makeUniform","shaderInjection","qualifier","willUpdateInstances","willUpdateProps","newProps","didUpdate","IdentifyByKey","__decorate","decorators","target","key","desc","arguments","getOwnPropertyDescriptor","Reflect","decorate","observable_1","instanceUID","Instance","_easing","observableStorage","_uid","newUID","_id","id","active","_observer","set","val","oldObserver","remove","resourceTrigger","observable","__export","uid_1","ObservableMonitoring","setObservableMonitor","enabled","gatherIds","observableIds","getObservableMonitorIds","clear","values","slice","observableNamesToUID","propertyUID","uid","push","newVal","observer","instanceUpdated","generateLayerModel","layer","geometry","material","modelInfo","model","Boolean","isMesh","undefined","TriangleStripDrawMode","absolute_position_1","bounds_1","view_camera_1","isOrthographic","ClearFlags","View","pixelRatio","devicePixelRatio","screenToPixelSpace","out","pixelSpaceToScreen","screenToView","viewBounds","viewToScreen","screenToWorld","view","world","camera","offset","scale","viewCamera","ViewCameraType","CUSTOM","console","warn","worldToScreen","screen","viewToWorld","worldToView","fitViewtoViewport","surfaceDimensions","CONTROLLED","baseCamera","getAbsolutePositionBounds","viewport","far","near","position","z","updateMatrix","updateMatrixWorld","updateProjectionMatrix","screenBounds","DEFAULT_VIEW_ID","sortByDepth","a","Scene","container","pickingContainer","layers","sortIsDirty","viewById","frustumCulled","autoUpdate","addLayer","addView","removeLayer","index","indexOf","splice","sortLayers","sort","DEFAULT_SCENE_ID","LabelAtlasResource","label","BaseAtlasResource","sampleScale","EdgeScaleType","EdgeType","EdgeBroadphase","ViewCamera","shaderTemplate","shader","required","matched","noValueProvided","notFound","shaderOptions","shaderResults","replace","match","keys","option","results","resolvedShaderOptions","shaderProvidedOptions","unresolvedProvidedOptions","unresolvedShaderOptions","error","chartCameraUID","applyArray","source","apply","concat","ChartCamera","location","sqrt","add1","scale1","vec","subtract1","multiply1","dot1","linear1","start","t","length1","add2","scale2","subtract2","multiply2","dot2","linear2","length2","add3","scale3","subtract3","multiply3","linear3","length3","dot3","add4","scale4","subtract4","multiply4","dot4","linear4","length4","VecMath","add","dot","linear","multiply","subtract","AutoEasingLoopStyle","vector_1","min","max","pow","round","sin","PI","GPU_PI","clamp","minVal","maxVal","easeOutElasticGPU","easeBackInGPU","AutoEasingMethod","cpu","gpu","duration","method","delay","loop","methodName","immediate","easeInQuad","time","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeOutElastic","easeBackIn","easeBackOut","t1","easeBackInOut","a1","t2","EventManager","getProjection","viewId","mouseManager","getView","getViewScreenBounds","setMouseManager","mouse_1","quad_tree_1","isDefined","MouseEventManager","canvas","views","controllers","handlesWheelEvents","eventCleanup","_waitingForRender","getViewsUnderMouse","mouse","hitViews","query","resize","context","setViews","setControllers","addContextListeners","QuadTree","addAll","map","v","filter","startView","startPosition","element","wheelHandler","event","eventElementPosition","interaction","makeInteraction","wheel","makeWheel","controller","handleWheel","stopPropagation","preventDefault","onwheel","addEventListener","onmouseleave","waitingForRender","handleMouseOut","onmousemove","handleMouseMove","onmousedown","downViews","canClick","clickStartTime","Date","now","currentPosition","handleMouseDown","button","document","delta","drag","makeDrag","handleDrag","onmouseup","onmouseover","handleMouseOver","handleMouseUp","handleClick","onselectstart","addTouchContextListeners","ontouchstart","ontouchend","ontouchmove","ontouchcancel","_i","previous","current","viewsUnderMouse","normalizeWheel","onmousewheel","removeEventListener","_b","auto_easing_method_1","testStartVector","ONE","TWO","THREE","FOUR","testEndVector","emptyTexture","Texture","isEasingAttribute","attr","easing","isInstanceAttribute","isVertexAttribute","isUniform","toVertexAttributeInternal","attribute","materialAttribute","toUniformInternal","findEmptyBlock","attributes","seekingSize","usedBlocks","maxBlock","instanceAttribute","ind","breadth","sortNeedsUpdateFirstToTop","generateAtlasResourceUniforms","atlasInstanceAttributes","requestedAtlasInjections","isAtlasAttribute","injection","FRAGMENT","injections","VERTEX","ATLAS","resource","getAtlasTexture","compareVec","injectShaderIO","shaderIO","testStart","testEnd","test","validateInstanceAttributes","easingAttributes","instanceAttributes_1","_loop_1","easingValues","name_1","easingUID","currentTime","surface","frameMetrics","startTime","timeValue","REPEAT","REFLECT","timePassed","slot","startAttr","startTimeAttr","durationAttr","easingAttributes_1","generateEasingAttributes","addedUniforms","MATRIX4","projectionMatrix","elements","matrix","generateBaseUniforms","generatePickingUniforms","addedInstanceAttributes","fillBlock","generateBaseInstanceAttributes","emptyFillBlock","color","generatePickingAttributes","addedVertexAttributes","activeAttribute","allVertexAttributes","allUniforms","UNIFORM_SIZE_TO_MATERIAL_TYPE","MATRIX3","DEFAULT_UNIFORM_VALUE","toMaterialUniform","generateLayerMaterial","layerUniforms","instancingUniforms","materialParams","vertexShader","fragmentShader","generatedUniform","RawShaderMaterial","isNumberCluster","isArray","generateLayerGeometry","maxInstancesPerBuffer","vertexBuffers","attribute_1","Float32Array","buffer","endk","formatError","k","j","endj","instanceSize","endk_1","copyWithin","instancingBuffer","instanceStartIndex","BufferGeometry","attribute_3","BufferAttribute","addAttribute","DataBounds","chart_camera_1","scene_1","view_1","generateDefaultScene","aspectRatio","viewSize","defaultCamera","OrthographicCamera","defaultChartCamera","defaultViewport","defaultView","defaultScene","scene","INSTANCE_UNIFORM_ATTRIBUTE_PREFIX","makeInstanceUniformNameArray","makeInstanceUniformNameTree","templateVars","attributeFragments","blocksPerInstance","easingMethod","easingMethods","instanceBlockCount","instanceDataBinaryTree","instanceDataRetrieval","instanceDestructuring","instanceFragments","instanceUniformDeclarations","projectionMethods","shaderInput","__awaiter","thisArg","_arguments","P","generator","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","__generator","body","f","g","_","sent","trys","ops","verb","throw","return","Symbol","iterator","op","TypeError","pop","floor","LabelRasterizer","awaitContext","getContext","setTimeout","calculateLabelSize","calculateTexture","calculateTrucatedText","sampleScaling","drawLabel","truncatedText","measureContents","minX","minY","maxX","maxY","rasterization","texture","createCroppedCanvas","maxWidth","text","firstTest","cursor","safety","substr","nextCursor","cropped","createElement","imageSmoothingEnabled","drawImage","fontSize","getLabelRasterizationFontSize","fillStyle","font","makeCSSFont","measureText","fillText","potentialCanvas","fontWeight","fontFamily","imageData","getImageData","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","render","renderSync","ImageAtlasResource","image","ColorRasterizer","limit","makeCSS","opacity","fillRect","ColorAtlasResource","SubTexture","atlasReferenceID","atlasTexture","atlasTL","atlasTR","atlasBL","atlasBR","widthOnAtlas","heightOnAtlas","isValid","pixelWidth","pixelHeight","pack_node_1","sub_texture_1","AtlasSize","Atlas","validResources","textureSettings","packing","PackNode","updateTexture","invalidateResource","zero","setManager","manager","registerResource","removeResource","redoneCanvas","dispose","generateMipmaps","premultiplyAlpha","needsUpdate","getProgramInfo","gl","program","attributeCount","uniformCount","activeUniforms","getProgramParameter","ACTIVE_UNIFORMS","activeAttributes","ACTIVE_ATTRIBUTES","enums","35664","35665","35666","35667","35668","35669","35670","35671","35672","35673","35674","35675","35676","35678","35680","5120","5121","5122","5123","5124","5125","5126","blocks","getActiveUniform","typeName","getActiveAttrib","WebGLStat","MAX_VERTEX_UNIFORMS","MAX_FRAGMENT_UNIFORMS","MAX_ATTRIBUTES","WEBGL_SUPPORTED","MAX_TEXTURE_SIZE","WebGLRenderingContext","getAContext","getParameter","MAX_VERTEX_UNIFORM_VECTORS","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_VERTEX_ATTRIBS","initStats","UID","CUID","colorUID","process","load","storage","debug","env","DEBUG","log","Function","formatArgs","args","useColors","namespace","humanize","diff","lastC","save","namespaces","removeItem","navigator","userAgent","toLowerCase","documentElement","style","WebkitAppearance","firebug","exception","table","parseInt","RegExp","$1","chrome","local","localStorage","localstorage","colors","formatters","JSON","stringify","err","message","enable","browser","three_1","IE_ADJUSTMENT","OLD_IE_ADJUSTMENT","MAX_FIREFOX_WHEELDELTA","lowPassY","LOW_PASS_U0","LOW_PASS_U1","LOW_PASS_U2","LOW_PASS_U3","firefox","deltaX","deltaY","sign","unshift","Vector2","msie","version","wheelDeltaX","wheelDeltaY","wheelDelta","detail","msedge","multiplyScalar","relative","mouseX","mouseY","eventX","eventY","nativeEvent","pageX","pageY","clientX","clientY","scrollLeft","scrollTop","offsetParent","offsetLeft","offsetTop","label_atlas_resource_1","toInstanceIOValue","AtlasResourceManager","targetAtlas","requestQueue","requestLookup","atlasManager","dequeueRequests","didDequeue","this_1","resources","_c","requests","atlasRequests_1","updateAtlas","request","delete","request_1","from","entries","atlasRequests","existingRequests","setTargetAtlas","LayerMouseEvents","isOver","sceneViews","getSceneViewsUnderMouse","sceneViewByViewId","sceneView","viewItem","getMouseByViewId","viewMouseByViewId","handleInteraction","handleMouseClick","handleMouseDrag","callback","sceneViews_1","handleSceneView","flag","updateColorPickRange","allSceneViews","currentSceneViews","generate_layer_model_1","make_instance_uniform_name_1","InstanceUniformManager","buffers","availableClusters","instanceToCluster","clusterToBuffer","maxUniformBlock","uniformBlocksPerInstance","makeNewBuffer","cluster","removeFromScene","pickModel","setScene","newGeometry","drawRange","count","newMaterial","clone","newModel","activeInstances","clusters","firstInstance","lastInstance","uniformIndex","uniformName","instanceData","Vector4","instanceIndex","uniformRange","analyzeColorPickingRendering","pickingData","allColors","colorData","dataHeight","dataWidth","nearestColor","uniqueColors","pixelIndex","distance","row","dx","dy","testDistance","filterQuery","queryValues","filtered","obj","find","Quadrants","mid","TL","Node","TR","BL","BR","children","nodes","child","doAdd","cover","childrenProps","MAX_VALUE","allChildren","gatherChildren","split","isNaN","area","list","visit","queryBounds","queryPoint","cb","finished","data_bounds_1","ref","scaleRatio","parse","num","parseFloat","reference","top_1","shader_templating_1","template_vars_1","instanceRetrievalArrayFragment","VECTOR_COMPONENTS","sizeToType","1","2","3","4","9","16","99","orderByPriority","makeVectorSwizzle","join","makeUniformArrayDeclaration","totalBlocks","fragment","fill","makeInstanceRetrievalArray","templateOptions","makeInstanceDestructuringArray","orderedAttributes","webgl_stat_1","uniform_instance_block_array_1","vertexShaderComposition","fragmentShaderComposition","instanceDestructuringArray","MAX_USE_PER_BLOCK","generateUniforms","injectionType","injectFragments","shaders","shaderInputMetrics","instancingInfo","instanceUniformBlockCount","ceil","calculateUniformBlockUseage","sortedInstanceAttributes","currentBlock","trueBlockIndex","blockUseage","innerBlockUseage","attributeSize","oldUseage","newUseage","innerUseage","instances","uniformMetrics","blockQualifierDedup","qualifiers","blockQualifiers","qualifierList","allQualifiers","declaration","makeInstanceUniformDeclaration","makeUniformInstanceDataOptions","metrics","generateInstanceDataLookupOptions","additionalOptions","generateVertexAttributes","methods","methodSizes","sizeType","generateEasingMethods","generateShaderInputs","generateVertexPicking","makeInstanceDestructuring","makePickingDestructuring","makeInstanceAttributeReferences","generateVertexShader","vertexShaderResults","generateFragmentShader","generateFragmentPickingMethod","images_1","labels_1","attribute_generation_1","generate_default_scene_1","generate_layer_geometry_1","generate_layer_material_1","inject_shader_io_1","mouse_event_manager_1","color_picking_analysis_1","instance_uniform_manager_1","layer_mouse_events_1","texture_1","atlas_resource_manager_1","DEFAULT_BACKGROUND_COLOR","Color","isCanvas","createLayer","layerClass","LayerSurface","AtlasManager","currentViewport","currentFrame","previousTime","isBufferingAtlas","scenes","willDisposeLayer","initLayer","commit","frameIncrement","onViewReady","pickingPass","resourceManager","renderer","pickingRenderer","LabelInstance","ImageInstance","didBuffer","drawSceneView","updateColorPick","defaultSceneElements","flags","clearFlags","COLOR","DEPTH","pickingTarget","Uint8Array","pickWidth","readRenderTargetPixels","pickHeight","colorPicking","rendererSize","getSize","getPixelRatio","background","SCISSOR_TEST","scissor","clearColor","setSize","setRenderTarget","STENCIL","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","setViewport","getViewSize","getViewWorldBounds","topLeft","bottomRight","init","setContext","initGL","initMouseManager","initResources","WebGLRenderer","alpha","antialias","preserveDrawingBuffer","autoClear","setFaceCulling","CullFaceNone","setRendererSize","setPixelRatio","setClearColor","sceneViewDepth","sceneOptions","newScene","viewOptions","newView","addLayerToScene","shaderMetrics","eventManagers","atlasResources","createAtlas","layerInitializers","existingLayer","layerId","fitContainer","parentElement","className","setAttribute","containerBox","getBoundingClientRect","box","isWebGLContext","canvasContext","isString","getElementById","WebGLRenderTarget","magFilter","LinearFilter","minFilter","stencilBuffer","primitives_1","layer_1","RingLayer","ring","radius","scaleFactor","vertexToNormal","0","5","vertexToSide","thickness","vertex","premultipliedAlpha","transparent","instance_1","RingInstance","instance_provider_1","anchorCalculator","TopLeft","anchor","rectangle","padding","TopMiddle","TopRight","MiddleLeft","Middle","MiddleRight","BottomLeft","BottomMiddle","BottomRight","Custom","RectangleInstance","scaling","BOUND_MAX","_anchor","setAnchor","newAnchor","types_2","RectangleLayer","anchorEffect","projection","maxScale","minScale","ALWAYS","NEVER","screenPoint","u","blending","CustomBlending","blendSrc","OneFactor","rasterizationLookUp","_cssFont","_fontFamily","_fontSize","_fontStyle","_fontWeight","_maxWidth","_text","_width","_height","_isDestroyed","fontStyle","cssFontLookup","rasterizations","references","_rasterization","LabelLayer","ImageRasterizer","calculateImageSize","atlas_1","color_atlas_resource_1","color_rasterizer_1","image_atlas_resource_1","label_rasterizer_1","ZERO_IMAGE","allAtlas","destroyAtlas","atlasName","setDefaultImage","loadedImage","rect","dimensions","insertedNode","ux","uy","uw","uh","onePixelX","atlasDimensions","loadImage","isValidImage","first","second","insert","nodeImage","nodeDimensions","imageSrc","subTexture","image_1","onload","onerror","path","toDataURL","Image","src","resources_1","isLeaf","child0","child1","hasChild","newNode","fitFlag","imgWidth","imgHeight","dWidth","dHeight","removed","tint","_sourceWidth","_sourceHeight","_element","_path","aspect","ImageLayer","EdgeInstance","colorStart","colorEnd","control","widthStart","widthEnd","setEdgeWidth","setColor","interpolation","LINE","p1","p2","c1","c2","BEZIER","BEZIER2","toPointObject","toPointArray","TEST_RESOLUTION","edgePicking","broadphase","minPickDistance","scaleType","interpolate","edge","edgeWidthStart","edgeWidthEnd","PASS_X","PASS_Y","SCREEN_CURVE","closestIndex","closestDistance","secondClosestIndex","secondClosestDistance","control1","control2","startPoint","endPoint","linePoint","lineWidth","startSegment","endSegment","vector","lineDirection","lineNormal","distanceTo","edge_picking_1","pickVS","baseVS","screenVS","edgeFS","EdgeLayer","MAX_SEGMENTS","_d","vertexInterpolation","_e","InstanceProvider","CircleInstance","isMouseOver","isMouseDown","getColorPickInstance","onMouseDown","hitTest_1","query_1","world_1","querySpace","check","bind","instanceForColor","onMouseOut","hitTest_2","query_2","world_2","onMouseUp","hitTest_3","query_3","world_3","onMouseOver","onMouseMove","hitTest_4","query_4","info","world_4","notOverInstances","isCurrentlyOver_1","noLongerOver","onMouseClick","hitTest_5","query_5","world_5","VECTOR_ACCESSORS","quadPicking","changeInstanceQuad","addInstanceQuad","removeInstanceQuad","changeInstanceColorPick","addInstanceColorPick","removeInstanceColorPick","changeInstance","addInstance","removeInstance","uniformCluster","updateInstance","uniformRangeStart","instanceUniform","squareDistance","Point","getClosest","testPoint","points","closestPoint","getClosestIndex","amount","normalize","magnitude","getDistance","squared","getMidpoint","direction","make","cleanObservation","instanceChanges","allowChanges","disposer","observableDisposer","INSERT","CHANGE","REMOVE","CircleLayer","circle","circleScreenCenter","mouseScreen","animations","animate","animateCenter","center","animateRadius","animateColor","fadeOutOversized","getBounds","childToNode","childToBounds","nullBounded","fromSplit","doRemove","found","node","ReferenceCamera","offsetFilter","scaleFilter","base","h","plural","ms","str","String","exec","long","fmtLong","fmtShort","createDebug","prevTime","self","curr","prev","coerce","format","formatter","hash","charCodeAt","selectColor","stack","disable","names","skips","len","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","array","noop","nextTick","title","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","isNumber","AnimationHelper","groupAnimation","groupCount","baseDelay","delayGap","modifyInstances","startFrameTime","gap","CameraBoundsAnchor","event_manager_1","BasicCameraController","isPanning","panFilter","allViews","startViews","onRangeChanged","targetView","startViewDidStart","applyBounds","applyScaleBounds","boundsHorizontalOffset","boundsVerticalOffset","scaleMin","scaleMax","setBounds","ignoreCoverViews","anchoredByBoundsHorizontal","TOP_LEFT","MIDDLE_LEFT","BOTTOM_LEFT","worldBounds","screenPadding","TOP_MIDDLE","MIDDLE","BOTTOM_MIDDLE","TOP_RIGHT","MIDDLE_RIGHT","BOTTOM_RIGHT","anchoredByBoundsVertical","worldTLinScreenSpace","worldBRinScreenSpace","canStart","findCoveredStartView","under","coveredStartView","getTargetView","pan","wheelMetrics","beforeZoom","currentZoomX","currentZoomY","afterZoom","getRange","setRange","newWorld","deltaScale","deltaPan"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"three\"), require(\"bowser\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"three\", \"bowser\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"voidgl\"] = factory(require(\"three\"), require(\"bowser\"));\n\telse\n\t\troot[\"voidgl\"] = factory(root[\"three\"], root[\"bowser\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__112__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 117);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar InstanceBlockIndex;\n(function (InstanceBlockIndex) {\n    InstanceBlockIndex[InstanceBlockIndex[\"ONE\"] = 1] = \"ONE\";\n    InstanceBlockIndex[InstanceBlockIndex[\"TWO\"] = 2] = \"TWO\";\n    InstanceBlockIndex[InstanceBlockIndex[\"THREE\"] = 3] = \"THREE\";\n    InstanceBlockIndex[InstanceBlockIndex[\"FOUR\"] = 4] = \"FOUR\";\n})(InstanceBlockIndex = exports.InstanceBlockIndex || (exports.InstanceBlockIndex = {}));\nvar InstanceAttributeSize;\n(function (InstanceAttributeSize) {\n    InstanceAttributeSize[InstanceAttributeSize[\"ONE\"] = 1] = \"ONE\";\n    InstanceAttributeSize[InstanceAttributeSize[\"TWO\"] = 2] = \"TWO\";\n    InstanceAttributeSize[InstanceAttributeSize[\"THREE\"] = 3] = \"THREE\";\n    InstanceAttributeSize[InstanceAttributeSize[\"FOUR\"] = 4] = \"FOUR\";\n    /** Special case for making instance attributes that can target Atlas resources */\n    InstanceAttributeSize[InstanceAttributeSize[\"ATLAS\"] = 99] = \"ATLAS\";\n})(InstanceAttributeSize = exports.InstanceAttributeSize || (exports.InstanceAttributeSize = {}));\nvar UniformSize;\n(function (UniformSize) {\n    UniformSize[UniformSize[\"ONE\"] = 1] = \"ONE\";\n    UniformSize[UniformSize[\"TWO\"] = 2] = \"TWO\";\n    UniformSize[UniformSize[\"THREE\"] = 3] = \"THREE\";\n    UniformSize[UniformSize[\"FOUR\"] = 4] = \"FOUR\";\n    UniformSize[UniformSize[\"MATRIX3\"] = 9] = \"MATRIX3\";\n    UniformSize[UniformSize[\"MATRIX4\"] = 16] = \"MATRIX4\";\n    UniformSize[UniformSize[\"ATLAS\"] = 99] = \"ATLAS\";\n})(UniformSize = exports.UniformSize || (exports.UniformSize = {}));\nvar VertexAttributeSize;\n(function (VertexAttributeSize) {\n    VertexAttributeSize[VertexAttributeSize[\"ONE\"] = 1] = \"ONE\";\n    VertexAttributeSize[VertexAttributeSize[\"TWO\"] = 2] = \"TWO\";\n    VertexAttributeSize[VertexAttributeSize[\"THREE\"] = 3] = \"THREE\";\n    VertexAttributeSize[VertexAttributeSize[\"FOUR\"] = 4] = \"FOUR\";\n})(VertexAttributeSize = exports.VertexAttributeSize || (exports.VertexAttributeSize = {}));\n/** These are flags for indicating which shaders receive certain injection elements */\nvar ShaderInjectionTarget;\n(function (ShaderInjectionTarget) {\n    /** ONLY the vertex shader will receive the injection */\n    ShaderInjectionTarget[ShaderInjectionTarget[\"VERTEX\"] = 1] = \"VERTEX\";\n    /** ONLY the fragment shader will receive the injection */\n    ShaderInjectionTarget[ShaderInjectionTarget[\"FRAGMENT\"] = 2] = \"FRAGMENT\";\n    /** Both the fragment and vertex shader will receive the injection */\n    ShaderInjectionTarget[ShaderInjectionTarget[\"ALL\"] = 3] = \"ALL\";\n})(ShaderInjectionTarget = exports.ShaderInjectionTarget || (exports.ShaderInjectionTarget = {}));\n/**\n * This is the type of picking assigned to a layer. Each mode has performance and functionality\n * tradeoffs.\n */\nvar PickType;\n(function (PickType) {\n    /** Disable any picking methodology */\n    PickType[PickType[\"NONE\"] = 0] = \"NONE\";\n    /** Pick all instances found underneath the mouse. The Layer must explicitly support this feature. */\n    PickType[PickType[\"ALL\"] = 1] = \"ALL\";\n    /**\n     * NOTE: NOT IMPLEMENTED YET\n     *\n     * Uses highly efficient color rendering method to detect an instance on a pixel by pixel check. Since it is\n     * based on rendering, it will only select the 'visually' top most rendered instance. This means instances can be occluded\n     * by other instances is an instance renders behind another.\n     *\n     * This is vastly more efficient and accurate than ALL. This also will be more readily supported than ALL.\n     */\n    PickType[PickType[\"SINGLE\"] = 2] = \"SINGLE\";\n})(PickType = exports.PickType || (exports.PickType = {}));\n/**\n * Diff types that an instance can go through. Used to help the system consume the diff\n * and apply it to the GL framework.\n */\nvar InstanceDiffType;\n(function (InstanceDiffType) {\n    InstanceDiffType[InstanceDiffType[\"CHANGE\"] = 0] = \"CHANGE\";\n    InstanceDiffType[InstanceDiffType[\"INSERT\"] = 1] = \"INSERT\";\n    InstanceDiffType[InstanceDiffType[\"REMOVE\"] = 2] = \"REMOVE\";\n})(InstanceDiffType = exports.InstanceDiffType || (exports.InstanceDiffType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Class to manage the x, y, width, and height of an object\n *\n * @template T This specifies the data type associated with this shape and is accessible\n *             via the property 'd'\n */\nvar Bounds = /** @class */ (function () {\n    /**\n     * Create a new instance\n     *\n     * @param left  The left side (x coordinate) of the instance\n     * @param right The right side of the instance\n     * @param top The top (y coordinate) of the instance\n     * @param bottom The bottom of the instance\n     */\n    function Bounds(options) {\n        this.x = 0;\n        this.y = 0;\n        this.width = 0;\n        this.height = 0;\n        this.x = options.x || options.left || 0;\n        this.y = options.y || options.top || 0;\n        this.height = options.height || ((options.bottom || 0) - this.y) || 0;\n        this.width = options.width || ((options.right || 0) - this.x) || 0;\n    }\n    Object.defineProperty(Bounds.prototype, \"area\", {\n        get: function () {\n            return this.width * this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"bottom\", {\n        get: function () {\n            return this.y + this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"left\", {\n        get: function () {\n            return this.x;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"mid\", {\n        get: function () {\n            return {\n                x: this.x + this.width / 2.0,\n                y: this.y + this.height / 2.0,\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"right\", {\n        get: function () {\n            return this.x + this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"top\", {\n        get: function () {\n            return this.y;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Bounds.emptyBounds = function () {\n        return new Bounds({\n            height: 0,\n            width: 0,\n            x: 0,\n            y: 0,\n        });\n    };\n    /**\n     * Checks to see if a point is within this bounds object.\n     *\n     * @param point\n     */\n    Bounds.prototype.containsPoint = function (point) {\n        return !(point.x < this.x || point.y < this.y || point.x > this.right || point.y > this.bottom);\n    };\n    /**\n     * Grows this bounds object to cover the space of the provided bounds object\n     *\n     * @param item\n     */\n    Bounds.prototype.encapsulate = function (item) {\n        if (item instanceof Bounds) {\n            if (item.x < this.x) {\n                this.width += Math.abs(item.x - this.x);\n                this.x = item.x;\n            }\n            if (item.y < this.y) {\n                this.height += Math.abs(item.y - this.y);\n                this.y = item.y;\n            }\n            if (this.right < item.right) {\n                this.width += item.right - this.right;\n            }\n            if (this.bottom < item.bottom) {\n                this.height += item.bottom - this.bottom;\n            }\n            return true;\n        }\n        else {\n            if (item.x < this.x) {\n                this.width += this.x - item.x;\n                this.x = item.x;\n            }\n            if (item.x > this.right) {\n                this.width += item.x - this.x;\n            }\n            if (item.y < this.y) {\n                this.height += this.y - item.y;\n                this.y = item.y;\n            }\n            if (item.y > this.bottom) {\n                this.height += item.y - this.y;\n            }\n            return true;\n        }\n    };\n    /**\n     * Checks to see if the provided bounds object could fit within the dimensions of this bounds object\n     * This ignores position and just checks width and height.\n     *\n     * @param bounds\n     *\n     * @return {number} 0 if it doesn't fit. 1 if it fits perfectly. 2 if it just fits.\n     */\n    Bounds.prototype.fits = function (bounds) {\n        // If the same, the bounds fits exactly into this bounds\n        if (this.width === bounds.width && this.height === bounds.height) {\n            return 1;\n        }\n        // The bounds can fit within this, then it just fits\n        if (this.width >= bounds.width && this.height >= bounds.height) {\n            return 2;\n        }\n        // Otherwise, the bounds does not fit within this bounds\n        return 0;\n    };\n    /**\n     * Checks if a bounds object intersects another bounds object.\n     *\n     * @param bounds\n     */\n    Bounds.prototype.hitBounds = function (bounds) {\n        return !(this.right < bounds.x || this.x > bounds.right || this.bottom < bounds.y || this.y > bounds.height);\n    };\n    /**\n     * Sees if the provided bounds is completely within this bounds object. Unlike fits() this takes\n     * position into account.\n     *\n     * @param bounds\n     */\n    Bounds.prototype.isInside = function (bounds) {\n        return this.x >= bounds.x && this.right <= bounds.right && this.y >= bounds.y && this.bottom <= bounds.bottom;\n    };\n    /**\n     * Easy readout of this Bounds object.\n     */\n    Bounds.prototype.toString = function () {\n        return \"{x: \" + this.x + \" y:\" + this.y + \" w:\" + this.width + \" h:\" + this.height + \"}\";\n    };\n    return Bounds;\n}());\nexports.Bounds = Bounds;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AnchorType;\n(function (AnchorType) {\n    AnchorType[AnchorType[\"BottomLeft\"] = 0] = \"BottomLeft\";\n    AnchorType[AnchorType[\"BottomMiddle\"] = 1] = \"BottomMiddle\";\n    AnchorType[AnchorType[\"BottomRight\"] = 2] = \"BottomRight\";\n    AnchorType[AnchorType[\"Custom\"] = 3] = \"Custom\";\n    AnchorType[AnchorType[\"Middle\"] = 4] = \"Middle\";\n    AnchorType[AnchorType[\"MiddleLeft\"] = 5] = \"MiddleLeft\";\n    AnchorType[AnchorType[\"MiddleRight\"] = 6] = \"MiddleRight\";\n    AnchorType[AnchorType[\"TopLeft\"] = 7] = \"TopLeft\";\n    AnchorType[AnchorType[\"TopMiddle\"] = 8] = \"TopMiddle\";\n    AnchorType[AnchorType[\"TopRight\"] = 9] = \"TopRight\";\n})(AnchorType = exports.AnchorType || (exports.AnchorType = {}));\nvar ScaleType;\n(function (ScaleType) {\n    /** The size of the image will be tied to world space */\n    ScaleType[ScaleType[\"ALWAYS\"] = 1] = \"ALWAYS\";\n    /** The image will scale to it's font size then stop growing */\n    ScaleType[ScaleType[\"BOUND_MAX\"] = 2] = \"BOUND_MAX\";\n    /** The image will alwyas retain it's font size on screen */\n    ScaleType[ScaleType[\"NEVER\"] = 3] = \"NEVER\";\n})(ScaleType = exports.ScaleType || (exports.ScaleType = {}));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar types_1 = require(\"../types\");\nvar util_1 = require(\"../util\");\nvar identify_by_key_1 = require(\"../util/identify-by-key\");\nvar instance_diff_manager_1 = require(\"./instance-diff-manager\");\nvar layer_interaction_handler_1 = require(\"./layer-interaction-handler\");\n/**\n * A base class for generating drawable content\n */\nvar Layer = /** @class */ (function (_super) {\n    __extends(Layer, _super);\n    function Layer(props) {\n        var _this = \n        // We do not establish bounds in the layer. The surface manager will take care of that for us\n        // After associating the layer with the view it is a part of.\n        _super.call(this, props) || this;\n        /** This determines the drawing order of the layer within it's scene */\n        _this.depth = 0;\n        /** A lookup fo an instance by it's ID */\n        _this.instanceById = new Map();\n        /** Provides the number of vertices a single instance spans */\n        _this.instanceVertexCount = 0;\n        // Keep our props within the layer\n        _this.props = Object.assign({}, Layer.defaultProps || {}, props);\n        // Set up the pick type for the layer\n        var _a = _this.props.picking, picking = _a === void 0 ? types_1.PickType.NONE : _a;\n        // If ALL is specified we set up QUAD tree picking for our instances\n        if (picking === types_1.PickType.ALL) {\n            var pickingMethods = _this.getInstancePickingMethods();\n            _this.picking = {\n                currentPickMode: types_1.PickType.NONE,\n                hitTest: pickingMethods.hitTest,\n                quadTree: new util_1.TrackedQuadTree(0, 1, 0, 1, pickingMethods.boundsAccessor),\n                type: types_1.PickType.ALL,\n            };\n        }\n        else if (picking === types_1.PickType.SINGLE) {\n            _this.picking = {\n                currentPickMode: types_1.PickType.NONE,\n                type: types_1.PickType.SINGLE,\n                uidToInstance: new Map(),\n            };\n        }\n        else {\n            _this.picking = {\n                currentPickMode: types_1.PickType.NONE,\n                type: types_1.PickType.NONE,\n            };\n        }\n        _this.diffManager = new instance_diff_manager_1.InstanceDiffManager(_this);\n        _this.diffProcessor = _this.diffManager.getDiffProcessor();\n        _this.interactions = new layer_interaction_handler_1.LayerInteractionHandler(_this);\n        return _this;\n    }\n    /**\n     * Invalidate and free all resources assocated with this layer.\n     */\n    Layer.prototype.destroy = function () {\n        this.uniformManager.destroy();\n    };\n    Layer.prototype.didUpdateProps = function () {\n        /** LIFECYCLE */\n    };\n    /**\n     * This is where global uniforms should update their values. Executes every frame.\n     */\n    Layer.prototype.draw = function () {\n        var uniform;\n        var value;\n        // Consume the diffs for the instances to update each element\n        var changeList = this.props.data.changeList;\n        // Make some holder variables to prevent declaration within the loop\n        var change, instance, uniforms;\n        // Fast ref to the processor and manager\n        var diffProcessor = this.diffProcessor;\n        var diffManager = this.diffManager;\n        for (var i = 0, end = changeList.length; i < end; ++i) {\n            change = changeList[i];\n            instance = change[0];\n            uniforms = this.uniformManager.getUniforms(instance);\n            // The diff type is change[1] which we use to find the diff processing method to use\n            diffProcessor[change[1]](diffManager, instance, uniforms);\n            // Clear the instance changes recorded\n            instance.changes = {};\n        }\n        // Indicate the diffs are consumed\n        this.props.data.resolve();\n        // Loop through the uniforms that are across all instances\n        for (var i = 0, end = this.uniforms.length; i < end; ++i) {\n            uniform = this.uniforms[i];\n            value = uniform.update(uniform);\n            uniform.materialUniforms.forEach(function (materialUniform) { return materialUniform.value = value; });\n        }\n    };\n    /**\n     * This method is for layers to implement to specify how the bounds for an instance are retrieved or\n     * calculated and how the Instance interacts with a point. This is REQUIRED to support PickType.ALL on the layer.\n     */\n    Layer.prototype.getInstancePickingMethods = function () {\n        throw new Error('When picking is set to PickType.ALL, the layer MUST have this method implemented; otherwise, the layer is incompatible with this picking mode.');\n    };\n    /**\n     * The type of Three model as well as the preferred draw mode associated with it.\n     */\n    Layer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TrianglesDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    /**\n     * The options for a three material without uniforms.\n     */\n    Layer.prototype.getMaterialOptions = function () {\n        return {};\n    };\n    /**\n     * This sets up all of the data bindings that will transport data from the CPU\n     * to the Shader on the GPU.\n     *\n     * Instance Attributes: These are very frequently changing attributes\n     * Vertex Attributes: These are attributes that should be static on a vertex. Conisder it very costly to update.\n     *                    The only time making these modifieable is in the event of GL_POINTS.\n     * Uniforms: These set up the uniforms for the layer, thus having all normal implications of a uniform. Global\n     *           across the fragment and vertex shaders and can be modified with little consequence.\n     */\n    Layer.prototype.initShader = function () {\n        return {\n            fs: require('../shaders/base/no-op.fs'),\n            instanceAttributes: [],\n            uniforms: [],\n            vertexAttributes: [],\n            vertexCount: 0,\n            vs: require('../shaders/base/no-op.vs'),\n        };\n    };\n    /**\n     * Helper method for making an instance attribute. Depending on set up, this makes creating elements\n     * have better documentation when typing out the elements.\n     */\n    Layer.prototype.makeInstanceAttribute = function (block, blockIndex, name, size, update, atlas) {\n        return {\n            atlas: atlas,\n            block: block,\n            blockIndex: blockIndex,\n            name: name,\n            size: size,\n            update: update,\n        };\n    };\n    /**\n     * Helper method for making a uniform type. Depending on set up, this makes creating elements\n     * have better documentation when typing out the elements.\n     */\n    Layer.prototype.makeUniform = function (name, size, update, shaderInjection, qualifier) {\n        return {\n            name: name,\n            qualifier: qualifier,\n            shaderInjection: shaderInjection,\n            size: size,\n            update: update,\n        };\n    };\n    Layer.prototype.willUpdateInstances = function (changes) {\n        // HOOK: Simple hook so a class can review all of it's changed instances before\n        //       Getting applied to the Shader IO\n    };\n    Layer.prototype.willUpdateProps = function (newProps) {\n        /** LIFECYCLE */\n    };\n    Layer.prototype.didUpdate = function () {\n        this.props.data.resolve();\n    };\n    Layer.defaultProps = {};\n    return Layer;\n}(identify_by_key_1.IdentifyByKey));\nexports.Layer = Layer;\n","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar observable_1 = require(\"./observable\");\nvar instanceUID = 0;\nvar Instance = /** @class */ (function () {\n    function Instance(options) {\n        /** This is an internal easing object to track properties for automated easing */\n        this._easing = new Map();\n        /** This is where observables store their data for the instance */\n        this.observableStorage = [];\n        /** A numerical look up for the instance. Numerical identifiers run faster than objects or strings */\n        this._uid = Instance.newUID;\n        /** The property changes on the instance */\n        this.changes = {};\n        this._id = options.id || '';\n        this.active = options.active || this.active;\n    }\n    Object.defineProperty(Instance, \"newUID\", {\n        get: function () {\n            return (instanceUID = ++instanceUID % 0xffffff);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * The system will call this on the instance when it believes the instance may be\n     * harboring resources that are not released.\n     */\n    Instance.prototype.destroy = function () {\n        // Generally a No-op\n    };\n    Object.defineProperty(Instance.prototype, \"observableDisposer\", {\n        get: function () {\n            var _this = this;\n            return function () { return delete _this._observer; };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Instance.prototype, \"observer\", {\n        get: function () {\n            return this._observer || null;\n        },\n        set: function (val) {\n            // If an observer already is present, we should inform it, that it is being removed\n            // in favor of a new observer\n            var oldObserver = this._observer;\n            if (oldObserver && oldObserver !== val) {\n                oldObserver.remove(this);\n            }\n            // Apply the new observer as the current observer\n            this._observer = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Instance.prototype, \"easing\", {\n        get: function () {\n            return this._easing;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Instance.prototype, \"id\", {\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Instance.prototype, \"uid\", {\n        get: function () {\n            return this._uid;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This method is utilized internally to indicate when requested resources are ready.\n     * If you have a property that will be requesting a resource, you should implement this method\n     * to cause a trigger for the property to activate such that the property will update it's buffer.\n     */\n    Instance.prototype.resourceTrigger = function () {\n        // For subclasses\n    };\n    __decorate([\n        observable_1.observable\n    ], Instance.prototype, \"active\", void 0);\n    return Instance;\n}());\nexports.Instance = Instance;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./observable\"));\n__export(require(\"./instance-provider\"));\n__export(require(\"./instance\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./bounds\"));\n__export(require(\"./point\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./animation-helper\"));\n__export(require(\"./auto-easing-method\"));\n__export(require(\"./chart-camera\"));\n__export(require(\"./mouse\"));\n__export(require(\"./reference-camera\"));\n__export(require(\"./shader-templating\"));\n__export(require(\"./tracked-quad-tree\"));\n__export(require(\"./uid\"));\n__export(require(\"./vector\"));\n__export(require(\"./view-camera\"));\n__export(require(\"./webgl-stat\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./atlas\"));\n__export(require(\"./atlas-manager\"));\n__export(require(\"./color-atlas-resource\"));\n__export(require(\"./color-rasterizer\"));\n__export(require(\"./image-atlas-resource\"));\n__export(require(\"./image-rasterizer\"));\n__export(require(\"./label-atlas-resource\"));\n__export(require(\"./label-rasterizer\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This is an object that specifically is generated with a 'key' option that can never\n * be modified on the object and is identified henceforth with the key applied as the\n * 'id' of the object.\n */\nvar IdentifyByKey = /** @class */ (function () {\n    function IdentifyByKey(options) {\n        this.key = options.key;\n    }\n    Object.defineProperty(IdentifyByKey.prototype, \"id\", {\n        /** READONLY id of the object. */\n        get: function () {\n            return this.key;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IdentifyByKey;\n}());\nexports.IdentifyByKey = IdentifyByKey;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar uid_1 = require(\"../util/uid\");\nvar ObservableMonitoring = /** @class */ (function () {\n    function ObservableMonitoring() {\n    }\n    /**\n     * This activates all observables to gather their UIDs when they are retrieved via their getter.\n     * All of the ID's gathered can be accessed via getObservableMonitorIds. It is REQUIRED that this\n     * is disabled again to prevent a MASSIVE memory leak.\n     */\n    ObservableMonitoring.setObservableMonitor = function (enabled) {\n        ObservableMonitoring.gatherIds = enabled;\n        ObservableMonitoring.observableIds = [];\n    };\n    /**\n     * This retrieves the observables montiored IDs that were gathered when setObservableMonitor was\n     * enabled.\n     */\n    ObservableMonitoring.getObservableMonitorIds = function (clear) {\n        var values = ObservableMonitoring.observableIds.slice(0);\n        if (clear)\n            ObservableMonitoring.observableIds = [];\n        return values;\n    };\n    ObservableMonitoring.gatherIds = false;\n    ObservableMonitoring.observableIds = [];\n    ObservableMonitoring.observableNamesToUID = new Map();\n    return ObservableMonitoring;\n}());\nexports.ObservableMonitoring = ObservableMonitoring;\n/**\n * This is a custom decorator intended for single properties on Instances only! It will\n * facilitate automatic updates and stream the updates through an InstanceProvider to properly\n * update the Instances values in the appropriate and corresponding buffers that will get committed\n * to the GPU.\n */\nfunction observable(target, key) {\n    // Here we store the name of the observable to a UID. This mapping allows us to have a UID\n    // per NAME of an observable. A UID for a name can produce MUCH faster lookups than the name itself.\n    // Matching against the name allows us to have instances with their own property sets but have matching\n    // name mappings to improve compatibility of Instances with varying Layers.\n    var propertyUID = ObservableMonitoring.observableNamesToUID.get(key) || 0;\n    if (!propertyUID) {\n        propertyUID = uid_1.uid();\n        ObservableMonitoring.observableNamesToUID.set(key, propertyUID);\n    }\n    /**\n     * New property getter to get the property's alternative storage since we overrode\n     * the initial storage with a custom getter and setter.\n     */\n    function getter() {\n        if (ObservableMonitoring.gatherIds) {\n            ObservableMonitoring.observableIds.push(propertyUID);\n        }\n        return this.observableStorage[propertyUID];\n    }\n    /**\n     * New property setter to replace the property marked as observable. This allows\n     * us to broadcast a change to our current observer.\n     */\n    function setter(newVal) {\n        // Update the privatized value\n        this.observableStorage[propertyUID] = newVal;\n        // Broadcast change\n        this.changes[propertyUID] = propertyUID;\n        this.observer && this.observer.instanceUpdated(this, propertyUID);\n    }\n    /**\n     * Make sure the desired property is declared on the class with our custom getter and\n     * setter.\n     */\n    Object.defineProperty(target, key, {\n        configurable: true,\n        enumerable: true,\n        get: getter,\n        set: setter,\n    });\n}\nexports.observable = observable;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nfunction isMesh(val) {\n    return Boolean(val.isMesh);\n}\nfunction generateLayerModel(layer, geometry, material) {\n    var modelInfo = layer.getModelType();\n    var model = new modelInfo.modelType(geometry, material);\n    if (isMesh(model)) {\n        model.drawMode = modelInfo.drawMode === undefined ? Three.TriangleStripDrawMode : modelInfo.drawMode;\n    }\n    return model;\n}\nexports.generateLayerModel = generateLayerModel;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar absolute_position_1 = require(\"../primitives/absolute-position\");\nvar bounds_1 = require(\"../primitives/bounds\");\nvar identify_by_key_1 = require(\"../util/identify-by-key\");\nvar view_camera_1 = require(\"../util/view-camera\");\nvar ClearFlags;\n(function (ClearFlags) {\n    ClearFlags[ClearFlags[\"COLOR\"] = 1] = \"COLOR\";\n    ClearFlags[ClearFlags[\"DEPTH\"] = 2] = \"DEPTH\";\n    ClearFlags[ClearFlags[\"STENCIL\"] = 4] = \"STENCIL\";\n})(ClearFlags = exports.ClearFlags || (exports.ClearFlags = {}));\nfunction isOrthographic(val) {\n    return 'left' in val;\n}\n/**\n * This defines a view of a scene\n */\nvar View = /** @class */ (function (_super) {\n    __extends(View, _super);\n    function View(options) {\n        var _this = _super.call(this, options) || this;\n        /**\n         * This is the depth of the view. The higher the depth represents which layer is on top.\n         * Zero always represents the default view.\n         */\n        _this.depth = 0;\n        /** This is set to ensure the projections that happen properly translates the pixel ratio to normal Web coordinates */\n        _this.pixelRatio = window.devicePixelRatio;\n        Object.assign(_this, options);\n        return _this;\n    }\n    View.prototype.screenToPixelSpace = function (point, out) {\n        var p = out || { x: 0, y: 0 };\n        p.x = point.x * this.pixelRatio;\n        p.y = point.y * this.pixelRatio;\n        return p;\n    };\n    View.prototype.pixelSpaceToScreen = function (point, out) {\n        var p = out || { x: 0, y: 0 };\n        p.x = point.x / this.pixelRatio;\n        p.y = point.y / this.pixelRatio;\n        return p;\n    };\n    View.prototype.screenToView = function (point, out) {\n        var p = this.screenToPixelSpace(point, out);\n        p.x = p.x - this.viewBounds.x;\n        p.y = p.y - this.viewBounds.y;\n        return p;\n    };\n    View.prototype.viewToScreen = function (point, out) {\n        var p = { x: 0, y: 0 };\n        p.x = point.x + this.viewBounds.x;\n        p.y = point.y + this.viewBounds.y;\n        return this.pixelSpaceToScreen(p, out);\n    };\n    View.prototype.screenToWorld = function (point, out) {\n        var view = this.pixelSpaceToScreen(this.screenToView(point));\n        var world = out || { x: 0, y: 0 };\n        world.x = (view.x - (this.camera.offset[0] * this.camera.scale[0])) / this.camera.scale[0];\n        world.y = (view.y - (this.camera.offset[1] * this.camera.scale[1])) / this.camera.scale[1];\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        return world;\n    };\n    View.prototype.worldToScreen = function (point, out) {\n        var screen = { x: 0, y: 0 };\n        // Calculate from the camera to view space\n        screen.x = ((point.x * this.camera.scale[0]) + (this.camera.offset[0] * this.camera.scale[0])) * this.pixelRatio;\n        screen.y = ((point.y * this.camera.scale[1]) + (this.camera.offset[1] * this.camera.scale[1])) * this.pixelRatio;\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        // Convert from view to screen space\n        return this.viewToScreen(screen, out);\n    };\n    View.prototype.viewToWorld = function (point, out) {\n        var world = out || { x: 0, y: 0 };\n        var screen = this.pixelSpaceToScreen(point);\n        world.x = (screen.x - (this.camera.offset[0] * this.camera.scale[0])) / this.camera.scale[0];\n        world.y = (screen.y - (this.camera.offset[1] * this.camera.scale[1])) / this.camera.scale[1];\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        return world;\n    };\n    View.prototype.worldToView = function (point, out) {\n        var screen = out || { x: 0, y: 0 };\n        // Calculate from the camera to view space\n        screen.x = (point.x * this.camera.scale[0]) + (this.camera.offset[0] * this.camera.scale[0]);\n        screen.y = (point.y * this.camera.scale[1]) + (this.camera.offset[1] * this.camera.scale[1]);\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        return screen;\n    };\n    /**\n     * This operation makes sure we have the view camera adjusted to the new viewport's needs.\n     * For default behavior this ensures that the coordinate system has no distortion, orthographic,\n     * top left as 0,0 with +y axis pointing down.\n     */\n    View.prototype.fitViewtoViewport = function (surfaceDimensions) {\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CONTROLLED && isOrthographic(this.viewCamera.baseCamera)) {\n            var viewBounds = absolute_position_1.getAbsolutePositionBounds(this.viewport, surfaceDimensions, this.pixelRatio);\n            var width = viewBounds.width;\n            var height = viewBounds.height;\n            var viewport = {\n                bottom: -height / 2,\n                far: 10000000,\n                left: -width / 2,\n                near: -100,\n                right: width / 2,\n                top: height / 2,\n            };\n            var scaleX = 1;\n            var scaleY = 1;\n            var camera = this.viewCamera.baseCamera;\n            Object.assign(camera, viewport);\n            camera.position.set(-viewBounds.width / 2.0 * scaleX, viewBounds.height / 2.0 * scaleY, camera.position.z);\n            camera.scale.set(scaleX, -scaleY, 1.0);\n            camera.updateMatrix();\n            camera.updateMatrixWorld(true);\n            camera.updateProjectionMatrix();\n            this.viewBounds = viewBounds;\n            this.viewBounds.data = this;\n            this.screenBounds = new bounds_1.Bounds({\n                height: this.viewBounds.height / this.pixelRatio,\n                width: this.viewBounds.width / this.pixelRatio,\n                x: this.viewBounds.x / this.pixelRatio,\n                y: this.viewBounds.y / this.pixelRatio,\n            });\n        }\n        else if (!isOrthographic(this.viewCamera.baseCamera)) {\n            console.warn('Fit to viewport does not support non-orthographic cameras as a default behavior.');\n        }\n    };\n    View.DEFAULT_VIEW_ID = '__default__';\n    return View;\n}(identify_by_key_1.IdentifyByKey));\nexports.View = View;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar identify_by_key_1 = require(\"../util/identify-by-key\");\nfunction sortByDepth(a, b) {\n    return a.depth - b.depth;\n}\n/**\n * This defines a scene to which layers are added to. It also tracks the views that this scene\n * is rendered with.\n */\nvar Scene = /** @class */ (function (_super) {\n    __extends(Scene, _super);\n    function Scene(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the three scene which actually sets up the rendering objects */\n        _this.container = new Three.Scene();\n        // TODO: This 'could' be smarter when Three is gone. The pipeline could IMMEDIATELY render\n        /** We make a picking container specifically for the cases where objects must be rendered for picking */\n        _this.pickingContainer = new Three.Scene();\n        /** This is all of the layers tracked to the scene */\n        _this.layers = [];\n        /** This indicates the sort is dirty for a set of layers */\n        _this.sortIsDirty = false;\n        /** This is the view */\n        _this.viewById = new Map();\n        _this.container.frustumCulled = false;\n        _this.container.autoUpdate = false;\n        return _this;\n    }\n    /**\n     * Adds a layer to the scene with the current view setting the layer contains.\n     * The layer can not jump between views or scenes. You must destroy and reconstruct\n     * the layer.\n     */\n    Scene.prototype.addLayer = function (layer) {\n        // Add the layer to the list of layers under the view\n        this.layers.push(layer);\n        this.sortIsDirty = true;\n    };\n    /**\n     * This adds a view to this scene to be used by the scene\n     */\n    Scene.prototype.addView = function (view) {\n        this.viewById.set(view.id, view);\n    };\n    /**\n     * Release any resources this may be hanging onto\n     */\n    Scene.prototype.destroy = function () {\n        delete this.container;\n    };\n    /**\n     * Removes a layer from the scene. No resort is needed as remove operations\n     * do not adjust the sorting order.\n     */\n    Scene.prototype.removeLayer = function (layer) {\n        if (this.layers) {\n            var index = this.layers.indexOf(layer);\n            if (index >= 0) {\n                this.layers.splice(index, 1);\n                return;\n            }\n        }\n        console.warn('Could not remove a layer from the scene as the layer was not a part of the scene to start. Scene:', this.id, 'Layer:', layer.id);\n    };\n    Scene.prototype.sortLayers = function () {\n        if (this.sortIsDirty) {\n            this.layers.sort(sortByDepth);\n        }\n    };\n    Scene.DEFAULT_SCENE_ID = '__default__';\n    return Scene;\n}(identify_by_key_1.IdentifyByKey));\nexports.Scene = Scene;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_atlas_resource_1 = require(\"./base-atlas-resource\");\nvar LabelAtlasResource = /** @class */ (function (_super) {\n    __extends(LabelAtlasResource, _super);\n    function LabelAtlasResource(label) {\n        var _this = _super.call(this) || this;\n        _this.label = label;\n        return _this;\n    }\n    return LabelAtlasResource;\n}(base_atlas_resource_1.BaseAtlasResource));\nexports.LabelAtlasResource = LabelAtlasResource;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BaseAtlasResource = /** @class */ (function () {\n    function BaseAtlasResource() {\n        /**\n         * This sets the ratserization to be a larger value on the texture than is rendered within\n         * the world space. This allows for techniques to be applied in the shaders to incorporate super sampling\n         * or other processes which require higher levels of resolution.\n         *\n         * The default is 1 for a 1 to 1 sample scaling to world space rendering\n         */\n        this.sampleScale = 1;\n    }\n    return BaseAtlasResource;\n}());\nexports.BaseAtlasResource = BaseAtlasResource;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EdgeScaleType;\n(function (EdgeScaleType) {\n    /** All dimensions are within world space */\n    EdgeScaleType[EdgeScaleType[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * The control points are a delta from the end points within screen space, and the line thickness is within\n     * screen space as well all measured in pixels. The scaleFactor scales both thickness and control delta values.\n     * The endpoints remain in world space\n     */\n    EdgeScaleType[EdgeScaleType[\"SCREEN_CURVE\"] = 1] = \"SCREEN_CURVE\";\n})(EdgeScaleType = exports.EdgeScaleType || (exports.EdgeScaleType = {}));\nvar EdgeType;\n(function (EdgeType) {\n    /** Makes a straight edge with no curve */\n    EdgeType[EdgeType[\"LINE\"] = 0] = \"LINE\";\n    /** Makes a single control point Bezier curve */\n    EdgeType[EdgeType[\"BEZIER\"] = 1] = \"BEZIER\";\n    /** Makes a two control point bezier curve */\n    EdgeType[EdgeType[\"BEZIER2\"] = 2] = \"BEZIER2\";\n})(EdgeType = exports.EdgeType || (exports.EdgeType = {}));\n/**\n * This is the broadphase control for edges to help handle quad tree adjustments for picking. If the edge scale type\n * is NONE, you don't need to utilize this. If you use screen space and have camera distortions along an axis, this\n * can help greatly.\n */\nvar EdgeBroadphase;\n(function (EdgeBroadphase) {\n    /** Use this if the broad phase detection should use both width and height of the edge's bounds */\n    EdgeBroadphase[EdgeBroadphase[\"ALL\"] = 0] = \"ALL\";\n    /** Use this to ensure a test against the edge is performed if the mouse aligns with it on the x-axis */\n    EdgeBroadphase[EdgeBroadphase[\"PASS_Y\"] = 1] = \"PASS_Y\";\n    /** Use this to ensure a test against the edge is performed if the mouse aligns with it on the y axis */\n    EdgeBroadphase[EdgeBroadphase[\"PASS_X\"] = 2] = \"PASS_X\";\n})(EdgeBroadphase = exports.EdgeBroadphase || (exports.EdgeBroadphase = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ViewCameraType;\n(function (ViewCameraType) {\n    /**\n     * Indicates a camera that is forced by the system to follow:\n     * - Match width and height of the view port\n     * - +y axis points downward\n     * - gl origin is at the top left of the screen\n     */\n    ViewCameraType[ViewCameraType[\"CONTROLLED\"] = 0] = \"CONTROLLED\";\n    /**\n     * This allows a custom view camera to be applied to the scene.\n     */\n    ViewCameraType[ViewCameraType[\"CUSTOM\"] = 1] = \"CUSTOM\";\n})(ViewCameraType = exports.ViewCameraType || (exports.ViewCameraType = {}));\n/**\n * This is a camera that controls the view projection matrix. This is a much more\n * complicated way to handle views that is better suited for handling 3D applications\n * and is very overkill for most 2D charting systems. If you are working purely with\n * 2D components, it's recommended to leave this as a CONTROLLED camera and utilize\n * the ChartCamera for most of your needs.\n */\nvar ViewCamera = /** @class */ (function () {\n    function ViewCamera() {\n        this.type = ViewCameraType.CONTROLLED;\n    }\n    return ViewCamera;\n}());\nexports.ViewCamera = ViewCamera;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction shaderTemplate(shader, options, required) {\n    var matched = new Map();\n    var noValueProvided = new Map();\n    var notFound = new Map();\n    var shaderOptions = new Map();\n    var shaderResults = shader.replace(/\\$\\{(\\w+)\\}/g, function (x, match) {\n        shaderOptions.set(match, (shaderOptions.get(match) || 0) + 1);\n        if (match in options) {\n            matched.set(match, (matched.get(match) || 0) + 1);\n            return options[match];\n        }\n        noValueProvided.set(match, (noValueProvided.get(match) || 0) + 1);\n        return '';\n    });\n    Object.keys(options).forEach(function (option) {\n        if (!matched.get(option)) {\n            notFound.set(option, (notFound.get(option) || 0) + 1);\n        }\n    });\n    // Provide metrics\n    var results = {\n        resolvedShaderOptions: matched,\n        shader: shaderResults,\n        shaderProvidedOptions: shaderOptions,\n        unresolvedProvidedOptions: notFound,\n        unresolvedShaderOptions: noValueProvided,\n    };\n    if (required) {\n        // This will ensure that BOTH the parameter input AND the shader provided the required options.\n        required.values.forEach(function (require) {\n            if (results.unresolvedProvidedOptions.get(require)) {\n                console.error(required.name + \": Could not resolve all the required inputs. Input:\", require);\n            }\n            else if (results.unresolvedShaderOptions.get(require)) {\n                console.error(required.name + \": A required option was not provided in the options parameter. Option:\", require);\n            }\n            else if (!results.resolvedShaderOptions.get(require)) {\n                console.error(required.name + \": A required option was not provided in the options parameter. Option:\", require);\n            }\n        });\n    }\n    return results;\n}\nexports.shaderTemplate = shaderTemplate;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chartCameraUID = 0;\n/**\n * Quick method for applying a source array to a target array. This\n * ensures the arrays both are valid and applies the values without just making\n * a copy of the source.\n */\nfunction applyArray(target, source) {\n    target && source && target.splice.apply(target, [0, source.length].concat(source));\n}\nvar ChartCamera = /** @class */ (function () {\n    function ChartCamera(options) {\n        /** Internally set id */\n        this._id = chartCameraUID++;\n        /** Represents how much an element should be offset in world space */\n        this.offset = [0, 0, 0];\n        /** Represents how scaled each axis should be in world space */\n        this.scale = [1, 1, 1];\n        if (options) {\n            applyArray(this.offset, options.offset);\n            applyArray(this.scale, options.scale);\n        }\n    }\n    Object.defineProperty(ChartCamera.prototype, \"id\", {\n        /** Keep id as readonly */\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the location of the camera by adjusting the offsets to match.\n     */\n    ChartCamera.prototype.position = function (location) {\n        this.offset = location.slice(0);\n    };\n    return ChartCamera;\n}());\nexports.ChartCamera = ChartCamera;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar sqrt = Math.sqrt;\nfunction add1(left, right) {\n    return [\n        left[0] + right[0],\n    ];\n}\nexports.add1 = add1;\nfunction scale1(vec, scale) {\n    return [\n        vec[0] * scale,\n    ];\n}\nexports.scale1 = scale1;\nfunction subtract1(left, right) {\n    return [\n        left[0] - right[0],\n    ];\n}\nexports.subtract1 = subtract1;\nfunction multiply1(left, right) {\n    return [\n        left[0] * right[0],\n    ];\n}\nexports.multiply1 = multiply1;\nfunction dot1(left, right) {\n    return (left[0] * right[0]);\n}\nexports.dot1 = dot1;\nfunction linear1(start, end, t) {\n    return scale1(add1(subtract1(end, start), start), t);\n}\nexports.linear1 = linear1;\nfunction length1(start) {\n    return sqrt(dot1(start, start));\n}\nexports.length1 = length1;\nfunction add2(left, right) {\n    return [\n        left[0] + right[0],\n        left[1] + right[1],\n    ];\n}\nexports.add2 = add2;\nfunction scale2(left, scale) {\n    return [\n        left[0] * scale,\n        left[1] * scale,\n    ];\n}\nexports.scale2 = scale2;\nfunction subtract2(left, right) {\n    return [\n        left[0] - right[0],\n        left[1] - right[1],\n    ];\n}\nexports.subtract2 = subtract2;\nfunction multiply2(left, right) {\n    return [\n        left[0] * right[0],\n        left[1] * right[1],\n    ];\n}\nexports.multiply2 = multiply2;\nfunction dot2(left, right) {\n    return (left[0] * right[0] +\n        left[1] * right[1]);\n}\nexports.dot2 = dot2;\nfunction linear2(start, end, t) {\n    return scale2(add2(subtract2(end, start), start), t);\n}\nexports.linear2 = linear2;\nfunction length2(start) {\n    return sqrt(dot2(start, start));\n}\nexports.length2 = length2;\nfunction add3(left, right) {\n    return [\n        left[0] + right[0],\n        left[1] + right[1],\n        left[2] + right[2],\n    ];\n}\nexports.add3 = add3;\nfunction scale3(left, scale) {\n    return [\n        left[0] * scale,\n        left[1] * scale,\n        left[2] * scale,\n    ];\n}\nexports.scale3 = scale3;\nfunction subtract3(left, right) {\n    return [\n        left[0] - right[0],\n        left[1] - right[1],\n        left[2] - right[2],\n    ];\n}\nexports.subtract3 = subtract3;\nfunction multiply3(left, right) {\n    return [\n        left[0] * right[0],\n        left[1] * right[1],\n        left[2] * right[2],\n    ];\n}\nexports.multiply3 = multiply3;\nfunction linear3(start, end, t) {\n    return scale3(add3(subtract3(end, start), start), t);\n}\nexports.linear3 = linear3;\nfunction length3(start) {\n    return sqrt(dot3(start, start));\n}\nexports.length3 = length3;\nfunction dot3(left, right) {\n    return (left[0] * right[0] +\n        left[1] * right[1] +\n        left[2] * right[2]);\n}\nexports.dot3 = dot3;\nfunction add4(left, right) {\n    return [\n        left[0] + right[0],\n        left[1] + right[1],\n        left[2] + right[2],\n        left[3] + right[3],\n    ];\n}\nexports.add4 = add4;\nfunction scale4(left, scale) {\n    return [\n        left[0] * scale,\n        left[1] * scale,\n        left[2] * scale,\n        left[3] * scale,\n    ];\n}\nexports.scale4 = scale4;\nfunction subtract4(left, right) {\n    return [\n        left[0] - right[0],\n        left[1] - right[1],\n        left[2] - right[2],\n        left[3] - right[3],\n    ];\n}\nexports.subtract4 = subtract4;\nfunction multiply4(left, right) {\n    return [\n        left[0] * right[0],\n        left[1] * right[1],\n        left[2] * right[2],\n        left[3] * right[3],\n    ];\n}\nexports.multiply4 = multiply4;\nfunction dot4(left, right) {\n    return (left[0] * right[0] +\n        left[1] * right[1] +\n        left[2] * right[2] +\n        left[3] * right[3]);\n}\nexports.dot4 = dot4;\nfunction linear4(start, end, t) {\n    return scale4(add4(subtract4(end, start), start), t);\n}\nexports.linear4 = linear4;\nfunction length4(start) {\n    return sqrt(dot4(start, start));\n}\nexports.length4 = length4;\nfunction VecMath(vec) {\n    var methods;\n    if (vec.length === 1) {\n        methods = {\n            add: add1,\n            dot: dot1,\n            length: length1,\n            linear: linear1,\n            multiply: multiply1,\n            scale: scale1,\n            subtract: subtract1,\n        };\n        return methods;\n    }\n    else if (vec.length === 2) {\n        methods = {\n            add: add2,\n            dot: dot2,\n            length: length2,\n            linear: linear2,\n            multiply: multiply2,\n            scale: scale2,\n            subtract: subtract2,\n        };\n        return methods;\n    }\n    else if (vec.length === 3) {\n        methods = {\n            add: add3,\n            dot: dot3,\n            length: length3,\n            linear: linear3,\n            multiply: multiply3,\n            scale: scale3,\n            subtract: subtract3,\n        };\n        return methods;\n    }\n    methods = {\n        add: add4,\n        dot: dot4,\n        length: length4,\n        linear: linear4,\n        multiply: multiply4,\n        scale: scale4,\n        subtract: subtract4,\n    };\n    return methods;\n}\nexports.VecMath = VecMath;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar vector_1 = require(\"./vector\");\nvar min = Math.min, max = Math.max, pow = Math.pow, round = Math.round, sin = Math.sin, PI = Math.PI;\nvar GPU_PI = round(PI * 1000) / 1000;\nfunction clamp(x, minVal, maxVal) {\n    return min(max(x, minVal), maxVal);\n}\nvar AutoEasingLoopStyle;\n(function (AutoEasingLoopStyle) {\n    /** Time will go from 0 -> 1 then stop at 1 */\n    AutoEasingLoopStyle[AutoEasingLoopStyle[\"NONE\"] = 1] = \"NONE\";\n    /** Time will continuously go 0 -> 1 then 0 -> 1 then 0 -> 1 etc etc */\n    AutoEasingLoopStyle[AutoEasingLoopStyle[\"REPEAT\"] = 2] = \"REPEAT\";\n    /** Time will continously go 0 -> 1 then 1 -> 0 then 0 -> 1 then 1 -> 0 etc etc */\n    AutoEasingLoopStyle[AutoEasingLoopStyle[\"REFLECT\"] = 3] = \"REFLECT\";\n})(AutoEasingLoopStyle = exports.AutoEasingLoopStyle || (exports.AutoEasingLoopStyle = {}));\n// GPU easing methods! Written here because it's cleaner to write `` style strings\n// Against the left side of the editor\nvar immediateGPU = \"\\n${easingMethod} {\\n  return end;\\n}\\n\";\nvar linearGPU = \"\\n${easingMethod} {\\n  return (end - start) * t + start;\\n}\\n\";\nvar easeInQuadGPU = \"\\n${easingMethod} {\\n  float time = t * t;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeOutQuadGPU = \"\\n${easingMethod} {\\n  float time = t * (2.0 - t);\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeInOutQuadGPU = \"\\n${easingMethod} {\\n  float time = t < 0.5 ? 2.0 * t * t : -1.0 + (4.0 - 2.0 * t) * t;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeInCubicGPU = \"\\n${easingMethod} {\\n  float time = t * t * t;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeOutCubicGPU = \"\\n${easingMethod} {\\n  float t1 = t - 1.0;\\n  float time = t1 * t1 * t1 + 1.0;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeInOutCubicGPU = \"\\n${easingMethod} {\\n  float time = t < 0.5 ? 4.0 * t * t * t : (t - 1.0) * (2.0 * t - 2.0) * (2.0 * t - 2.0) + 1.0;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeInQuartGPU = \"\\n${easingMethod} {\\n  float time = t * t * t * t;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeOutQuartGPU = \"\\n${easingMethod} {\\n  float t1 = t - 1.0;\\n  float time = 1.0 - t1 * t1 * t1 * t1;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeInOutQuartGPU = \"\\n${easingMethod} {\\n  float t1 = t - 1.0;\\n  float time = t < 0.5 ? 8.0 * t * t * t * t : 1.0 - 8.0 * t1 * t1 * t1 * t1;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeInQuintGPU = \"\\n${easingMethod} {\\n  float time = t * t * t * t * t;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeOutQuintGPU = \"\\n${easingMethod} {\\n  float t1 = t - 1.0;\\n  float time = 1.0 + t1 * t1 * t1 * t1 * t1;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeInOutQuintGPU = \"\\n${easingMethod} {\\n  float t1 = t - 1.0;\\n  float time = t < 0.5 ? 16.0 * t * t * t * t * t : 1.0 + 16.0 * t1 * t1 * t1 * t1 * t1;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeOutElasticGPU = \"\\n${easingMethod} {\\n  float p = 0.3;\\n  float time = pow(2.0, -10.0 * t) * sin((t - p / 4.0) * (2.0 * \" + GPU_PI + \") / p) + 1.0;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeBackInGPU = \"\\n${easingMethod} {\\n  float time = t * t * t - t * 1.05 * sin(t * \" + GPU_PI + \");\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeBackOutGPU = \"\\n${easingMethod} {\\n  float t1 = t - 1.0;\\n  float a = 1.7;\\n  float time = (t1 * t1 * ((a + 1.0) * t1 + a) + 1.0);\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeBackInOutGPU = \"\\n${easingMethod} {\\n  float a = 1.4;\\n  float a1 = a * 1.525;\\n  float t1 = t / 0.5;\\n  float t2 = t1 - 2.0;\\n  float time =\\n    (t1 < 1.0) ? 0.5 * (t1 * t1 * (a1 + 1.0) * t1 - a1) :\\n    0.5 * (t2 * t2 * ((a1 + 1.0) * t2 + a1) + 2.0)\\n  ;\\n\\n  return (end - start) * time + start;\\n}\\n\";\n/**\n * Class of base AutoEasingMethods as well as helper constructs for making the methods.\n */\nvar AutoEasingMethod = /** @class */ (function () {\n    function AutoEasingMethod(cpu, gpu, duration, method) {\n        /** Time before a delay  */\n        this.delay = 0;\n        /** The time in ms is takes to complete the animation */\n        this.duration = 500;\n        /** The looping style of the animation */\n        this.loop = AutoEasingLoopStyle.NONE;\n        this.cpu = cpu;\n        this.gpu = gpu;\n        this.duration = duration || 500;\n        this.methodName = method || 'easingMethod';\n    }\n    /**\n     * Autoeasing methods for linear easing\n     */\n    AutoEasingMethod.immediate = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) { return end; },\n            delay: delay,\n            duration: duration,\n            gpu: immediateGPU,\n            loop: loop,\n            methodName: 'immediate',\n        };\n    };\n    /**\n     * Autoeasing methods for linear easing\n     */\n    AutoEasingMethod.linear = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                t = clamp(t, 0, 1);\n                return add(scale(subtract(end, start), t), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: linearGPU,\n            loop: loop,\n            methodName: 'linear',\n        };\n    };\n    /**\n     * Auto easing for Accelerating to end\n     */\n    AutoEasingMethod.easeInQuad = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeInQuadGPU,\n            loop: loop,\n            methodName: 'easeInQuad',\n        };\n    };\n    /**\n     * Auto easing for decelerating to end\n     */\n    AutoEasingMethod.easeOutQuad = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t * (2 - t);\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeOutQuadGPU,\n            loop: loop,\n            methodName: 'easeOutQuad',\n        };\n    };\n    /**\n     * Auto easing for Accelerate to mid, then decelerate to end\n     */\n    AutoEasingMethod.easeInOutQuad = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeInOutQuadGPU,\n            loop: loop,\n            methodName: 'easeInOutQuad',\n        };\n    };\n    /**\n     * Auto easing for Slower acceleration\n     */\n    AutoEasingMethod.easeInCubic = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t * t * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeInCubicGPU,\n            loop: loop,\n            methodName: 'easeInCubic',\n        };\n    };\n    /**\n     * Auto easing for Slower deceleration\n     */\n    AutoEasingMethod.easeOutCubic = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = (--t) * t * t + 1;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeOutCubicGPU,\n            loop: loop,\n            methodName: 'easeOutCubic',\n        };\n    };\n    /**\n     * Auto easing for Slower acceleration to mid, and slower deceleration to end\n     */\n    AutoEasingMethod.easeInOutCubic = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeInOutCubicGPU,\n            loop: loop,\n            methodName: 'easeInOutCubic',\n        };\n    };\n    /**\n     * Auto easing for even Slower acceleration to end\n     */\n    AutoEasingMethod.easeInQuart = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t * t * t * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeInQuartGPU,\n            loop: loop,\n            methodName: 'easeInQuart',\n        };\n    };\n    /**\n     * Auto easing for even Slower deceleration to end\n     */\n    AutoEasingMethod.easeOutQuart = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = 1 - (--t) * t * t * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeOutQuartGPU,\n            loop: loop,\n            methodName: 'easeOutQuart',\n        };\n    };\n    /**\n     * Auto easing for even Slower acceleration to mid, and even slower deceleration to end\n     */\n    AutoEasingMethod.easeInOutQuart = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t < 0.5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeInOutQuartGPU,\n            loop: loop,\n            methodName: 'easeInOutQuart',\n        };\n    };\n    /**\n     * Auto easing for super slow accelerating to the end\n     */\n    AutoEasingMethod.easeInQuint = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t * t * t * t * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeInQuintGPU,\n            loop: loop,\n            methodName: 'easeInQuint',\n        };\n    };\n    /**\n     * Auto easing for super slow decelerating to the end\n     */\n    AutoEasingMethod.easeOutQuint = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = 1 + (--t) * t * t * t * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeOutQuintGPU,\n            loop: loop,\n            methodName: 'easeOutQuint',\n        };\n    };\n    /**\n     * Auto easing for super slow accelerating to mid and super slow decelerating to the end\n     */\n    AutoEasingMethod.easeInOutQuint = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeInOutQuintGPU,\n            loop: loop,\n            methodName: 'easeInOutQuint',\n        };\n    };\n    /**\n     * Auto easing for elastic effect\n     */\n    AutoEasingMethod.easeOutElastic = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var p = 0.3;\n                var time = pow(2, -10 * t) * sin((t - p / 4) * (2 * PI) / p) + 1;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeOutElasticGPU,\n            loop: loop,\n            methodName: 'easeOutElastic',\n        };\n    };\n    /**\n     * Auto easing for retracting first then shooting to the end\n     */\n    AutoEasingMethod.easeBackIn = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var a = 1.05;\n                var time = t * t * t - t * a * sin(t * PI);\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeBackInGPU,\n            loop: loop,\n            methodName: 'easeBackIn',\n        };\n    };\n    /**\n     * Auto easing for overshooting at the end\n     */\n    AutoEasingMethod.easeBackOut = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var a = 1.7;\n                var t1 = t - 1;\n                var time = t1 * t1 * ((a + 1) * t1 + a) + 1;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeBackOutGPU,\n            loop: loop,\n            methodName: 'easeBackOut',\n        };\n    };\n    /**\n     * Auto easing for overshooting at the end\n     */\n    AutoEasingMethod.easeBackInOut = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var a = 1.7;\n                var a1 = a * 1.525;\n                var t1 = t / 0.5;\n                var t2 = t1 - 2;\n                var time = (t1 < 1) ? 0.5 * (t1 * t1 * (a1 + 1) * t1 - a1) :\n                    0.5 * (t2 * t2 * ((a1 + 1) * t2 + a1) + 2);\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeBackInOutGPU,\n            loop: loop,\n            methodName: 'easeBackInOut',\n        };\n    };\n    return AutoEasingMethod;\n}());\nexports.AutoEasingMethod = AutoEasingMethod;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Classes can extend this and override the methods to respond to events.\n */\nvar EventManager = /** @class */ (function () {\n    function EventManager() {\n    }\n    /**\n     * This retrieves the projections for the view specified by the provided viewId.\n     */\n    EventManager.prototype.getProjection = function (viewId) {\n        return this.mouseManager.getView(viewId);\n    };\n    /**\n     * This retrieves the actual view for the view specified by the provided viewId.\n     */\n    EventManager.prototype.getView = function (viewId) {\n        return (this.mouseManager && this.mouseManager.getView(viewId)) || null;\n    };\n    /**\n     * This retrieves the screen bounds for the view specified by the provided viewId.\n     */\n    EventManager.prototype.getViewScreenBounds = function (viewId) {\n        var view = this.mouseManager.getView(viewId);\n        if (view) {\n            return view.screenBounds;\n        }\n        return null;\n    };\n    /**\n     * This is used internally which provides the parent MouseEventManager via the param mouseManager for this\n     * EventManager.\n     */\n    EventManager.prototype.setMouseManager = function (mouseManager) {\n        this.mouseManager = mouseManager;\n    };\n    return EventManager;\n}());\nexports.EventManager = EventManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mouse_1 = require(\"../util/mouse\");\nvar quad_tree_1 = require(\"../util/quad-tree\");\n// If a mouse up after a mouse down happens before this many milliseconds, a click gesture will happen\nvar VALID_CLICK_DELAY = 1E3;\nfunction sortByDepth(a, b) {\n    return b.data.depth - a.data.depth;\n}\nfunction isDefined(val) {\n    return Boolean(val);\n}\n/**\n * This manages mouse events on the provided canvas and provides some higher level\n * interactions with the surface.\n */\nvar MouseEventManager = /** @class */ (function () {\n    function MouseEventManager(canvas, views, controllers, handlesWheelEvents) {\n        var _this = this;\n        this.eventCleanup = [];\n        /**\n         * This flag is set when the system is waiting to render the elements to establish bounds.\n         * No Mouse interations will happen while this is set to true.\n         */\n        this._waitingForRender = true;\n        /**\n         * Retrieves the views underneath the mouse with the top most view as\n         * the first view in the list.\n         */\n        this.getViewsUnderMouse = function (mouse) {\n            // Find the views the mouse has interacted with\n            var hitViews = _this.quadTree.query(mouse);\n            // Sort them by depth\n            hitViews.sort(sortByDepth);\n            return hitViews;\n        };\n        /**\n         * When the renderer is resized, we must reform our quad tree\n         */\n        this.resize = function () {\n            _this._waitingForRender = true;\n        };\n        this.context = canvas;\n        this.setViews(views);\n        this.setControllers(controllers);\n        this.addContextListeners(handlesWheelEvents);\n    }\n    Object.defineProperty(MouseEventManager.prototype, \"waitingForRender\", {\n        get: function () {\n            return this._waitingForRender;\n        },\n        set: function (val) {\n            this._waitingForRender = val;\n            // When we're no longer waiting for render to occur we update all of our views in the quad tree\n            if (!val) {\n                this.quadTree = new quad_tree_1.QuadTree(0, 0, 0, 0);\n                this.quadTree.addAll(this.views.map(function (v) { return v.bounds; }).filter(isDefined));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This sets up the DOM events to listen to the events that are broadcasted by the canvas.\n     * These events are set up in such a way as to continue some events when the user\n     * drags the mouse off of the browser or off the canvas without releasing.\n     */\n    MouseEventManager.prototype.addContextListeners = function (handlesWheelEvents) {\n        var _this = this;\n        var element = this.context;\n        var startView;\n        var startPosition;\n        if (handlesWheelEvents) {\n            var wheelHandler = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                var wheel = _this.makeWheel(event);\n                _this.controllers.forEach(function (controller) {\n                    controller.handleWheel(interaction, wheel);\n                });\n                event.stopPropagation();\n                event.preventDefault();\n            };\n            if ('onwheel' in element) {\n                element.onwheel = wheelHandler;\n            }\n            if ('addEventListener' in element) {\n                element.addEventListener('DOMMouseScroll', wheelHandler);\n                this.eventCleanup.push(['DOMMouseScroll', wheelHandler]);\n            }\n        }\n        element.onmouseleave = function (event) {\n            // No interactions while waiting for the render to update\n            if (_this.waitingForRender)\n                return;\n            var mouse = mouse_1.eventElementPosition(event, element);\n            var interaction = _this.makeInteraction(mouse, startPosition, startView);\n            _this.controllers.forEach(function (controller) {\n                controller.handleMouseOut(interaction);\n            });\n        };\n        element.onmousemove = function (event) {\n            // No interactions while waiting for the render to update\n            if (_this.waitingForRender)\n                return;\n            var mouse = mouse_1.eventElementPosition(event, element);\n            var interaction = _this.makeInteraction(mouse, startPosition, startView);\n            _this.controllers.forEach(function (controller) {\n                controller.handleMouseMove(interaction);\n            });\n        };\n        element.onmousedown = function (event) {\n            // No interactions while waiting for the render to update\n            if (_this.waitingForRender)\n                return;\n            startPosition = mouse_1.eventElementPosition(event, element);\n            var downViews = _this.getViewsUnderMouse(startPosition);\n            // While this is true, when mouse up happens, the click gesture will execute\n            var canClick = true;\n            var clickStartTime = Date.now();\n            // If no views under this view, then we just quick exit with no interactions\n            if (downViews.length <= 0) {\n                return;\n            }\n            startView = downViews[0].data;\n            var interaction = _this.makeInteraction(startPosition, startPosition, startView);\n            var currentPosition = startPosition;\n            _this.controllers.forEach(function (controller) {\n                controller.handleMouseDown(interaction, event.button);\n            });\n            event.stopPropagation();\n            document.onmousemove = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                var delta = {\n                    x: mouse.x - currentPosition.x,\n                    y: mouse.y - currentPosition.y,\n                };\n                var drag = _this.makeDrag(mouse, startPosition || { x: 0, y: 0 }, currentPosition, delta);\n                currentPosition = mouse;\n                _this.controllers.forEach(function (controller) {\n                    controller.handleDrag(interaction, drag);\n                });\n                // If we move after a mouse down, it's no longer a click\n                canClick = false;\n            };\n            document.onmouseup = function (event) {\n                document.onmousemove = null;\n                document.onmouseup = null;\n                document.onmouseover = null;\n            };\n            document.onmouseover = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                _this.controllers.forEach(function (controller) {\n                    controller.handleMouseOver(interaction);\n                });\n                event.stopPropagation();\n            };\n            element.onmouseup = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                _this.controllers.forEach(function (controller) {\n                    controller.handleMouseUp(interaction, event.button);\n                });\n                // If we release the mouse before the valid click delay\n                if (canClick && Date.now() - clickStartTime < VALID_CLICK_DELAY) {\n                    _this.controllers.forEach(function (controller) {\n                        controller.handleClick(interaction, event.button);\n                    });\n                }\n            };\n            // Text will not be selected when it is being dragged\n            element.onselectstart = function () {\n                return false;\n            };\n        };\n        // Enable touch support\n        this.addTouchContextListeners();\n    };\n    MouseEventManager.prototype.addTouchContextListeners = function () {\n        var element = this.context;\n        element.ontouchstart = function (event) {\n            // TODO: This is the start work for the touch events. And this retains sentimental value.\n            // For (let i = 0, end = event.changedTouches.length; i < end; ++i) {\n            // TODO\n            // Const touch = event.changedTouches.item(i);\n            // CurrentTouches.set(touch.identifier, to);\n            // }\n        };\n        element.ontouchend = function (event) {\n            // TODO\n        };\n        element.ontouchmove = function (event) {\n            // TODO\n        };\n        element.ontouchcancel = function (event) {\n            // TODO\n        };\n    };\n    /**\n     * Retrieves the view for the provided id\n     */\n    MouseEventManager.prototype.getView = function (viewId) {\n        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n            var view = _a[_i];\n            if (view.view.id === viewId) {\n                return view.view;\n            }\n        }\n        return null;\n    };\n    /**\n     * This generates the metrics for a drag gesture.\n     */\n    MouseEventManager.prototype.makeDrag = function (mouse, start, previous, delta) {\n        return {\n            screen: {\n                current: mouse,\n                delta: delta,\n                previous: previous,\n                start: start,\n            },\n        };\n    };\n    /**\n     * This makes the metrics for interactions with the views.\n     */\n    MouseEventManager.prototype.makeInteraction = function (mouse, start, startView) {\n        // Find the views the mouse has interacted with\n        var hitViews = this.getViewsUnderMouse(mouse);\n        return {\n            screen: {\n                mouse: mouse,\n            },\n            start: start && startView && {\n                mouse: startView.view.screenToView(mouse),\n                view: startView.view,\n            },\n            target: {\n                mouse: hitViews[0] && hitViews[0].data.view.screenToView(mouse),\n                view: hitViews[0] && hitViews[0].data.view,\n            },\n            viewsUnderMouse: hitViews.map(function (v) { return ({\n                mouse: v.data.view.screenToView(mouse),\n                view: v.data.view,\n            }); }),\n        };\n    };\n    MouseEventManager.prototype.makeWheel = function (event) {\n        var wheel = mouse_1.normalizeWheel(event);\n        return {\n            wheel: [wheel.x, wheel.y],\n        };\n    };\n    /**\n     * Sets the controllers to receive events from this manager.\n     */\n    MouseEventManager.prototype.setControllers = function (controllers) {\n        this.controllers = controllers;\n        for (var _i = 0, _a = this.controllers; _i < _a.length; _i++) {\n            var controller = _a[_i];\n            controller.setMouseManager(this);\n        }\n    };\n    /**\n     * Sets the views that gets queried for interactions.\n     */\n    MouseEventManager.prototype.setViews = function (views) {\n        this.views = views;\n    };\n    MouseEventManager.prototype.destroy = function () {\n        var _this = this;\n        delete this.quadTree;\n        this.context.onmousedown = null;\n        this.context.onmousemove = null;\n        this.context.onmouseleave = null;\n        this.context.onmousewheel = null;\n        this.eventCleanup.forEach(function (event) {\n            _this.context.removeEventListener(event[0], event[1]);\n        });\n    };\n    return MouseEventManager;\n}());\nexports.MouseEventManager = MouseEventManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This file is dedicted to the all important step of processing desired inputs from the layer\n * and coming up with automated generated uniforms and attributes that the shader's will need\n * in order to operate with the conveniences the library offers. This includes things such as\n * injecting camera projection uniforms, resource uniforms, animation adjustments etc etc.\n */\nvar Three = require(\"three\");\nvar types_1 = require(\"../types\");\nvar util_1 = require(\"../util\");\nvar auto_easing_method_1 = require(\"../util/auto-easing-method\");\nvar abs = Math.abs;\n/**\n * This is a lookup for a test vector for the provided size\n */\nvar testStartVector = (_a = {},\n    _a[types_1.InstanceAttributeSize.ONE] = [1],\n    _a[types_1.InstanceAttributeSize.TWO] = [1, 2],\n    _a[types_1.InstanceAttributeSize.THREE] = [1, 2, 3],\n    _a[types_1.InstanceAttributeSize.FOUR] = [1, 2, 3, 4],\n    _a);\n/**\n * This is a lookup for a test vector for the provided size\n */\nvar testEndVector = (_b = {},\n    _b[types_1.InstanceAttributeSize.ONE] = [4],\n    _b[types_1.InstanceAttributeSize.TWO] = [4, 3],\n    _b[types_1.InstanceAttributeSize.THREE] = [4, 3, 2],\n    _b[types_1.InstanceAttributeSize.FOUR] = [4, 3, 2, 1],\n    _b);\nvar emptyTexture = new Three.Texture();\nfunction isAtlasAttribute(attr) {\n    return Boolean(attr) && attr.atlas;\n}\nfunction isEasingAttribute(attr) {\n    return Boolean(attr) && attr.easing && attr.size !== undefined;\n}\nfunction isInstanceAttribute(attr) {\n    return Boolean(attr);\n}\nfunction isVertexAttribute(attr) {\n    return Boolean(attr);\n}\nfunction isUniform(attr) {\n    return Boolean(attr);\n}\nfunction toVertexAttributeInternal(attribute) {\n    return Object.assign({}, attribute, { materialAttribute: null });\n}\nfunction toUniformInternal(uniform) {\n    return Object.assign({}, uniform, { materialUniforms: [] });\n}\n/**\n * This finds a block and an index that can accomodate a provided size\n * @param attributes\n * @param seekingSize\n */\nfunction findEmptyBlock(attributes, seekingSize) {\n    var usedBlocks = [];\n    var maxBlock = 0;\n    if (seekingSize === undefined) {\n        seekingSize = 1;\n    }\n    attributes.forEach(function (instanceAttribute) {\n        var block = instanceAttribute.block;\n        var index = instanceAttribute.blockIndex === undefined ? 0 : instanceAttribute.blockIndex;\n        var size = instanceAttribute.size === undefined ? 0 : instanceAttribute.size;\n        maxBlock = Math.max(block, maxBlock);\n        while (usedBlocks.length - 1 < block) {\n            usedBlocks.push([false, false, false, false]);\n        }\n        for (var i = index - 1, end = index - 1 + size; i < end; ++i) {\n            usedBlocks[block][i] = true;\n        }\n    });\n    for (var x = 0; x < usedBlocks.length; x++) {\n        for (var ind = 0; ind < 4; ind++) {\n            if (usedBlocks[x][ind]) {\n                continue;\n            }\n            else {\n                for (var breadth = ind; breadth < 4; breadth++) {\n                    if (!usedBlocks[x][breadth]) {\n                        if ((breadth - ind + 1) === seekingSize) {\n                            return [x, ind + 1];\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // If no block was ever found, then we take the max block detected and make\n    // A new block after it\n    return [maxBlock + 1, types_1.InstanceBlockIndex.ONE];\n}\n/**\n * This sorts the attributes such that the attributes that MUST be updated first are put to the top.\n * This is necessary for complex attributes like atlas and easing attributes who have other attributes\n * that have dependent behaviors based on their source attribute.\n */\nfunction sortNeedsUpdateFirstToTop(a, b) {\n    if (a.atlas && !b.atlas)\n        return -1;\n    if (a.easing && !b.easing)\n        return -1;\n    return 1;\n}\n/**\n * This generates any uniforms needed for when a layer is requesting\n */\nfunction generateAtlasResourceUniforms(layer, instanceAttributes) {\n    // Retrieve all of the instance attributes that are atlas references\n    var atlasInstanceAttributes = [];\n    // Key: The atlas uniform name requested\n    var requestedAtlasInjections = new Map();\n    // Get the atlas requests that have unique names. We only need one uniform\n    // For a single unique provided name. We also must merge the requests for\n    // Vertex and fragment injections\n    instanceAttributes.forEach(function (attribute) {\n        if (isAtlasAttribute(attribute)) {\n            // Auto set the size of the attribute. Attribute's that are a resource automatically\n            // Consume a size of four\n            attribute.size = types_1.InstanceAttributeSize.FOUR;\n            attribute.blockIndex = types_1.InstanceBlockIndex.ONE;\n            // Get the atlas resource uniform (sampler2D) injection targets. We default to only the\n            // Fragment shader as it's the most commonly used location for sampler2Ds\n            var injection = attribute.atlas.shaderInjection || types_1.ShaderInjectionTarget.FRAGMENT;\n            // See if we already have an injection for the given injected uniform name for an atlas resource.\n            var injections = requestedAtlasInjections.get(attribute.atlas.name);\n            if (injections) {\n                requestedAtlasInjections.set(attribute.atlas.name, [\n                    injections[0] ||\n                        injection === types_1.ShaderInjectionTarget.VERTEX ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                    injections[1] ||\n                        injection === types_1.ShaderInjectionTarget.FRAGMENT ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                ]);\n            }\n            else {\n                atlasInstanceAttributes.push(attribute);\n                requestedAtlasInjections.set(attribute.atlas.name, [\n                    injection === types_1.ShaderInjectionTarget.VERTEX ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                    injection === types_1.ShaderInjectionTarget.FRAGMENT ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                ]);\n            }\n        }\n    });\n    // Make uniforms for all of the unique atlas requests.\n    return atlasInstanceAttributes.map(function (instanceAttribute) {\n        var injection = types_1.ShaderInjectionTarget.FRAGMENT;\n        if (instanceAttribute.atlas) {\n            var injections = requestedAtlasInjections.get(instanceAttribute.atlas.name);\n            if (injections) {\n                injection =\n                    (injections[0] && injections[1] && types_1.ShaderInjectionTarget.ALL) ||\n                        (injections[0] && !injections[1] && types_1.ShaderInjectionTarget.VERTEX) ||\n                        (!injections[0] && injections[1] && types_1.ShaderInjectionTarget.FRAGMENT) ||\n                        injection;\n            }\n        }\n        return {\n            name: instanceAttribute.atlas.name,\n            shaderInjection: injection,\n            size: types_1.UniformSize.ATLAS,\n            update: function () { return layer.resource.getAtlasTexture(instanceAttribute.atlas.key) || emptyTexture; },\n        };\n    });\n}\n/**\n * This modifies the instance attributes in a way that produces enough attributes to handle the easing equations\n * being performed on the gpu.\n */\nfunction generateEasingAttributes(layer, instanceAttributes) {\n    var easingAttributes = [];\n    // We gather all of the easing attributes first so we can modify the attribute array\n    // On next pass\n    for (var _i = 0, instanceAttributes_1 = instanceAttributes; _i < instanceAttributes_1.length; _i++) {\n        var attribute = instanceAttributes_1[_i];\n        if (isEasingAttribute(attribute)) {\n            easingAttributes.push(attribute);\n        }\n    }\n    var _loop_1 = function (attribute) {\n        var _a = attribute.easing, easing = _a.cpu, loop = _a.loop;\n        var name_1 = attribute.name, size = attribute.size, update = attribute.update;\n        var easingUID = util_1.uid();\n        // We keep this in a scope above the update as we utilize the fact that the attributes will update\n        // In order for a single instance to our advantage.\n        var easingValues;\n        // Hijack the update from the attribute to a new update method which will\n        // Be able to interact with the values for the easing methodology\n        attribute.update = function (o) {\n            // We retrieve properties that we want to be dynamic from the easing equation\n            var _a = attribute.easing, delay = _a.delay, duration = _a.duration;\n            // First get the value that is to be our new destination\n            var end = update(o);\n            var currentTime = layer.surface.frameMetrics.currentTime;\n            // Get the easing values specific to an instance\n            easingValues = o.easing.get(easingUID) || {\n                duration: duration,\n                end: end,\n                start: end,\n                startTime: currentTime,\n            };\n            // Previous position time value\n            var timeValue = 1;\n            switch (loop) {\n                // Repeat means going from 0 to 1 then 0 to 1 etc etc\n                case auto_easing_method_1.AutoEasingLoopStyle.REPEAT:\n                    timeValue = ((currentTime - easingValues.startTime) / duration) % 1;\n                    break;\n                // Reflect means going from 0 to 1 then 1 to 0 then 0 to 1 etc etc\n                case auto_easing_method_1.AutoEasingLoopStyle.REFLECT:\n                    var timePassed = ((currentTime - easingValues.startTime) / duration);\n                    // This is a triangle wave for an input\n                    timeValue = abs(((timePassed / 2.0) % 1) - 0.5) * 2.0;\n                    break;\n                // No loop means just linear time\n                case auto_easing_method_1.AutoEasingLoopStyle.NONE:\n                default:\n                    timeValue = (currentTime - easingValues.startTime) / duration;\n                    break;\n            }\n            // Now get the value of where our instance currently is located this frame\n            easingValues.start = easing(easingValues.start, easingValues.end, timeValue);\n            // Set the current time as the start time of our animation\n            easingValues.startTime = currentTime + delay;\n            // Set the provided value as our destination\n            easingValues.end = end;\n            // Make sure the instance contains the current easing values\n            o.easing.set(easingUID, easingValues);\n            return end;\n        };\n        // Find a slot available for our new start value\n        var slot = findEmptyBlock(instanceAttributes, size);\n        var startAttr = {\n            block: slot[0],\n            blockIndex: slot[1],\n            name: \"_\" + name_1 + \"_start\",\n            size: size,\n            update: function (o) { return easingValues.start; },\n        };\n        instanceAttributes.push(startAttr);\n        // Find a slot available for our new start time\n        slot = findEmptyBlock(instanceAttributes, types_1.InstanceAttributeSize.ONE);\n        var startTimeAttr = {\n            block: slot[0],\n            blockIndex: slot[1],\n            name: \"_\" + name_1 + \"_start_time\",\n            size: types_1.InstanceAttributeSize.ONE,\n            update: function (o) { return [easingValues.startTime]; },\n        };\n        instanceAttributes.push(startTimeAttr);\n        // Find a slot available for our duration\n        slot = findEmptyBlock(instanceAttributes, types_1.InstanceAttributeSize.ONE);\n        var durationAttr = {\n            block: slot[0],\n            blockIndex: slot[1],\n            name: \"_\" + name_1 + \"_duration\",\n            size: types_1.InstanceAttributeSize.ONE,\n            update: function (o) { return [easingValues.duration]; },\n        };\n        instanceAttributes.push(durationAttr);\n    };\n    // Now loop through each easing attribute and generate attributes needed for the easing method\n    for (var _a = 0, easingAttributes_1 = easingAttributes; _a < easingAttributes_1.length; _a++) {\n        var attribute = easingAttributes_1[_a];\n        _loop_1(attribute);\n    }\n}\nfunction generatePickingUniforms(layer) {\n    if (layer.picking.type === types_1.PickType.SINGLE) {\n        return [{\n                name: 'pickingActive',\n                shaderInjection: types_1.ShaderInjectionTarget.ALL,\n                size: types_1.UniformSize.ONE,\n                update: function () { return [layer.picking.currentPickMode === types_1.PickType.SINGLE ? 1.0 : 0.0]; },\n            }];\n    }\n    return [];\n}\nfunction generatePickingAttributes(layer, instanceAttributes) {\n    if (layer.picking.type === types_1.PickType.SINGLE) {\n        // Find a compltely empty block within all instance attributes provided and injected\n        var emptyFillBlock = findEmptyBlock(instanceAttributes, types_1.InstanceAttributeSize.FOUR);\n        return [{\n                block: emptyFillBlock[0],\n                blockIndex: emptyFillBlock[1],\n                name: '_pickingColor',\n                size: types_1.InstanceAttributeSize.FOUR,\n                update: function (o) {\n                    // We start from white and move down so the colors are more visible\n                    // For debugging\n                    var color = 0xFFFFFF - o.uid;\n                    // Do bit maths do get float components out of the int color\n                    return [\n                        (color >> 16) / 255.0,\n                        ((color & 0x00FF00) >> 8) / 255.0,\n                        (color & 0x0000FF) / 255.0,\n                        1,\n                    ];\n                },\n            }];\n    }\n    return [];\n}\nfunction generateBaseUniforms(layer) {\n    return [\n        // This injects the projection matrix from the view camera\n        {\n            name: 'projection',\n            size: types_1.UniformSize.MATRIX4,\n            update: function () { return layer.view.viewCamera.baseCamera.projectionMatrix.elements; },\n        },\n        // This injects the model view matrix from the view camera\n        {\n            name: 'modelView',\n            size: types_1.UniformSize.MATRIX4,\n            update: function () { return layer.view.viewCamera.baseCamera.matrix.elements; },\n        },\n        // This injects the camera offset uniforms that need to be present for projecting in a more\n        // Chart centric style\n        {\n            name: 'cameraOffset',\n            size: types_1.UniformSize.THREE,\n            update: function () { return layer.view.camera.offset; },\n        },\n        // This injects the camera scaling uniforms that need to be present for projecting in a more\n        // Chart centric style\n        {\n            name: 'cameraScale',\n            size: types_1.UniformSize.THREE,\n            update: function () { return layer.view.camera.scale; },\n        },\n        // This injects the camera scaling uniforms that need to be present for projecting in a more\n        // Chart centric style\n        {\n            name: 'viewSize',\n            size: types_1.UniformSize.TWO,\n            update: function () { return [layer.view.viewBounds.width, layer.view.viewBounds.height]; },\n        },\n        // This injects the current layer's pixel ratio so pixel ratio dependent items can react to it\n        // Things like gl_PointSize will need this metric if not working in clip space\n        {\n            name: 'pixelRatio',\n            size: types_1.UniformSize.ONE,\n            update: function () { return [layer.view.pixelRatio]; },\n        },\n        // This will be the current frame's current time which is updated in the layer's surface draw call\n        {\n            name: 'currentTime',\n            size: types_1.UniformSize.ONE,\n            update: function () { return [layer.surface.frameMetrics.currentTime]; },\n        },\n    ];\n}\n/**\n * This creates the base instance attributes that are ALWAYS present\n */\nfunction generateBaseInstanceAttributes(instanceAttributes) {\n    var fillBlock = findEmptyBlock(instanceAttributes, types_1.InstanceAttributeSize.ONE);\n    return [\n        // This is injected so the system can control when an instance should not be rendered.\n        // This allows for holes to be in the buffer without having to correct them immediately\n        {\n            block: fillBlock[0],\n            blockIndex: fillBlock[1],\n            name: '_active',\n            size: types_1.InstanceAttributeSize.ONE,\n            update: function (o) { return [o.active ? 1 : 0]; },\n        },\n    ];\n}\n/**\n * This creates the base vertex attributes that are ALWAYS present\n */\nfunction generateBaseVertexAttributes() {\n    return [\n        // We add an inherent instance attribute to our vertices so they can determine the instancing\n        // Data to retrieve.\n        {\n            name: 'instance',\n            size: types_1.VertexAttributeSize.ONE,\n            // We no op this as our geomtry generating routine will establish the values needed here\n            update: function () { return [0]; },\n        },\n    ];\n}\nfunction compareVec(a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (var i = 0, end = a.length; i < end; ++i) {\n        if (Math.round(a[i] * 100) / 100 !== Math.round(b[i] * 100) / 100)\n            return false;\n    }\n    return true;\n}\nfunction validateInstanceAttributes(instanceAttributes) {\n    instanceAttributes.forEach(function (attribute) {\n        if (attribute.easing && attribute.atlas) {\n            console.warn('An instance attribute can not have both easing and atlas properties. Undefined behavior will occur.');\n            console.warn(attribute);\n        }\n        if (!attribute.atlas) {\n            if (attribute.size === undefined) {\n                console.warn('An instance attribute requires the size to be defined.');\n                console.warn(attribute);\n            }\n        }\n        if (attribute.easing) {\n            if (attribute.size !== undefined) {\n                var testStart = testStartVector[attribute.size];\n                var testEnd = testEndVector[attribute.size];\n                var test = attribute.easing.cpu(testStart, testEnd, 0);\n                if (!compareVec(test, testStart)) {\n                    console.warn('Auto Easing Validation Failed: using a time of 0 does not produce the start value');\n                    console.warn('Start:', testStart, 'End:', testEnd, 'Result:', test);\n                    console.warn(attribute);\n                }\n                test = attribute.easing.cpu(testStart, testEnd, 1);\n                if (!compareVec(test, testEnd)) {\n                    console.warn('Auto Easing Validation Failed: using a time of 1 does not produce the end value');\n                    console.warn('Start:', testStart, 'End:', testEnd, 'Result:', test);\n                    console.warn(attribute);\n                }\n                test = attribute.easing.cpu(testStart, testEnd, -1);\n                if (!compareVec(test, testStart)) {\n                    console.warn('Auto Easing Validation Failed: using a time of -1 does not produce the start value');\n                    console.warn('Start:', testStart, 'End:', testEnd, 'Result:', test);\n                    console.warn(attribute);\n                }\n                test = attribute.easing.cpu(testStart, testEnd, 2);\n                if (!compareVec(test, testEnd)) {\n                    console.warn('Auto Easing Validation Failed: using a time of 2 does not produce the end value');\n                    console.warn('Start:', testStart, 'End:', testEnd, 'Result:', test);\n                    console.warn(attribute);\n                }\n            }\n            else {\n                console.warn('An Instance Attribute with easing MUST have a size declared');\n            }\n        }\n    });\n}\n/**\n * This is the primary method that analyzes all shader IO and determines which elements needs to be automatically injected\n * into the shader.\n */\nfunction injectShaderIO(layer, shaderIO) {\n    // All of the instance attributes with nulls filtered out\n    var instanceAttributes = (shaderIO.instanceAttributes || []).filter(isInstanceAttribute);\n    // All of the vertex attributes with nulls filtered out\n    var vertexAttributes = (shaderIO.vertexAttributes || []).filter(isVertexAttribute);\n    // All of the uniforms with nulls filtered out\n    var uniforms = (shaderIO.uniforms || []).filter(isUniform);\n    // Do a validation pass of the attributes injected so we can provide feedback as to why things behave odd\n    validateInstanceAttributes(instanceAttributes);\n    // Generates all of the attributes needed to make attributes automagically be eased when changed\n    generateEasingAttributes(layer, instanceAttributes);\n    // Get the uniforms needed to facilitate atlas resource requests if any exists\n    var addedUniforms = uniforms.concat(generateAtlasResourceUniforms(layer, instanceAttributes));\n    // These are the uniforms that should be present in the shader for basic operation\n    addedUniforms = addedUniforms.concat(generateBaseUniforms(layer));\n    // Add in uniforms for picking\n    addedUniforms = addedUniforms.concat(generatePickingUniforms(layer));\n    // Create the base instance attributes that must be present\n    var addedInstanceAttributes = instanceAttributes\n        .concat(generateBaseInstanceAttributes(instanceAttributes));\n    // Add in attributes for picking\n    addedInstanceAttributes = addedInstanceAttributes.concat(generatePickingAttributes(layer, addedInstanceAttributes));\n    // Create the base vertex attributes that must be present\n    var addedVertexAttributes = generateBaseVertexAttributes();\n    // Set the active attribute to the layer for quick reference\n    layer.activeAttribute = addedInstanceAttributes[0];\n    // Aggregate all of the injected shaderIO with the layer's shaderIO\n    var allVertexAttributes = addedVertexAttributes\n        .concat(vertexAttributes || [])\n        .map(toVertexAttributeInternal);\n    var allUniforms = addedUniforms\n        .map(toUniformInternal);\n    var allInstanceAttributes = addedInstanceAttributes\n        .sort(sortNeedsUpdateFirstToTop);\n    return {\n        instanceAttributes: allInstanceAttributes,\n        uniforms: allUniforms,\n        vertexAttributes: allVertexAttributes,\n    };\n}\nexports.injectShaderIO = injectShaderIO;\nvar _a, _b;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar types_1 = require(\"../types\");\nvar UNIFORM_SIZE_TO_MATERIAL_TYPE = (_a = {},\n    _a[types_1.UniformSize.ONE] = 'f',\n    _a[types_1.UniformSize.TWO] = 'v2',\n    _a[types_1.UniformSize.THREE] = 'v3',\n    _a[types_1.UniformSize.FOUR] = 'v4',\n    _a[types_1.UniformSize.MATRIX3] = 'Matrix3fv',\n    _a[types_1.UniformSize.MATRIX4] = 'Matrix4fv',\n    _a);\nvar DEFAULT_UNIFORM_VALUE = (_b = {},\n    _b[types_1.UniformSize.ONE] = [0],\n    _b[types_1.UniformSize.TWO] = [0, 0],\n    _b[types_1.UniformSize.THREE] = [0, 0, 0],\n    _b[types_1.UniformSize.FOUR] = [0, 0, 0, 0],\n    _b[types_1.UniformSize.MATRIX3] = [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    _b[types_1.UniformSize.MATRIX4] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    _b);\nfunction toMaterialUniform(uniform) {\n    return {\n        type: UNIFORM_SIZE_TO_MATERIAL_TYPE[uniform.size],\n        value: DEFAULT_UNIFORM_VALUE[uniform.size],\n    };\n}\nfunction generateLayerMaterial(layer, vs, fs, layerUniforms, instancingUniforms) {\n    // We now need to establish the material for the layer\n    var materialParams = layer.getMaterialOptions();\n    materialParams.vertexShader = vs;\n    materialParams.fragmentShader = fs;\n    // We must convert all of the uniforms to actual Three material initialization uniforms\n    materialParams.uniforms = {};\n    // Convert our non-instancing uniforms to our material uniforms\n    for (var i = 0, end = layerUniforms.length; i < end; ++i) {\n        var uniform = layerUniforms[i];\n        var materialUniform = toMaterialUniform(uniform);\n        materialParams.uniforms[uniform.name] = materialUniform;\n    }\n    // Add in the generated instancing uniforms\n    for (var i = 0, end = instancingUniforms.length; i < end; ++i) {\n        var generatedUniform = instancingUniforms[i];\n        materialParams.uniforms[generatedUniform.name] = {\n            type: generatedUniform.type,\n            value: generatedUniform.value,\n        };\n    }\n    return new Three.RawShaderMaterial(materialParams);\n}\nexports.generateLayerMaterial = generateLayerMaterial;\nvar _a, _b;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nfunction isNumberCluster(val) {\n    return !Array.isArray(val[0]);\n}\nfunction generateLayerGeometry(maxInstancesPerBuffer, vertexAttributes, vertexCount) {\n    // Make the new buffers to be updated\n    var vertexBuffers = [];\n    for (var i = 0, end = vertexAttributes.length; i < end; ++i) {\n        var attribute_1 = vertexAttributes[i];\n        vertexBuffers.push(new Float32Array((attribute_1.size) * vertexCount * maxInstancesPerBuffer));\n    }\n    // Let's now fill in the baseline geometry with the instances we will be generating\n    // First we ask the layer for a single instance's buffer setup\n    var endk = vertexAttributes.length;\n    var buffer;\n    var attribute;\n    var value;\n    var formatError = false;\n    for (var i = 0, end = vertexCount; i < end; ++i) {\n        for (var k = 0; k < endk; ++k) {\n            attribute = vertexAttributes[k];\n            buffer = vertexBuffers[k];\n            value = attribute.update(i);\n            if (isNumberCluster(value)) {\n                for (var j = i * attribute.size, endj = j + attribute.size, index = 0; j < endj; ++j, ++index) {\n                    buffer[j] = value[index];\n                }\n            }\n            else {\n                formatError = true;\n            }\n        }\n    }\n    if (formatError) {\n        console.warn('A vertex buffer updating method should not use arrays of arrays of numbers.');\n    }\n    // After getting the geometry for a single instance, we can now copy paste\n    // For subsequent instances using very fast FLoat32 methods\n    for (var i = 0, end = vertexAttributes.length; i < end; ++i) {\n        var attribute_2 = vertexAttributes[i];\n        var instanceSize = (attribute_2.size) * vertexCount;\n        // Copy the first buffer set into the rest of the buffer\n        for (var k = 1, endk_1 = maxInstancesPerBuffer; k < endk_1; ++k) {\n            vertexBuffers[i].copyWithin(instanceSize * k, 0, instanceSize);\n        }\n    }\n    // Lastly, we make the instance attribute reflect correctly so each instance\n    // Can have varied information\n    var instancingBuffer = vertexBuffers[0];\n    for (var i = 0, end = maxInstancesPerBuffer; i < end; ++i) {\n        var instanceStartIndex = i * vertexCount;\n        for (var k = 0; k < vertexCount; ++k) {\n            instancingBuffer[k + instanceStartIndex] = i;\n        }\n    }\n    // Now we can generate the attributes and apply them to a geometry object\n    var geometry = new Three.BufferGeometry();\n    for (var i = 0, end = vertexAttributes.length; i < end; ++i) {\n        var attribute_3 = vertexAttributes[i];\n        var materialAttribute = new Three.BufferAttribute(vertexBuffers[i], attribute_3.size);\n        attribute_3.materialAttribute = materialAttribute;\n        geometry.addAttribute(attribute_3.name, materialAttribute);\n    }\n    return geometry;\n}\nexports.generateLayerGeometry = generateLayerGeometry;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\nvar DataBounds = /** @class */ (function (_super) {\n    __extends(DataBounds, _super);\n    function DataBounds() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DataBounds.emptyBounds = function () {\n        return new DataBounds({\n            height: 0,\n            width: 0,\n            x: 0,\n            y: 0,\n        });\n    };\n    return DataBounds;\n}(bounds_1.Bounds));\nexports.DataBounds = DataBounds;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar chart_camera_1 = require(\"../util/chart-camera\");\nvar view_camera_1 = require(\"../util/view-camera\");\nvar scene_1 = require(\"./scene\");\nvar view_1 = require(\"./view\");\n/**\n * This generates all of the cameras/views/scenes necessary for default viewing of elements.\n *\n * These defaults are required to ensure the following:\n *\n * - Orthographic view\n * - top left corner of the canvas is 0,0\n * - y axis is +y downward\n * - entire canvas is the viewport.\n */\nfunction generateDefaultScene(context) {\n    // Generate a default view camera that is\n    // - Orthographic\n    // - (0, 0) is the top left of the canvas\n    // - the y axis is +y going downward\n    var height = context.canvas.height;\n    var width = context.canvas.width;\n    var aspectRatio = width / height;\n    var viewport = {\n        aspectRatio: aspectRatio,\n        bottom: -height / 2,\n        far: 10000000,\n        left: -width / 2,\n        near: -100,\n        right: width / 2,\n        top: height / 2,\n        viewSize: height,\n    };\n    var defaultCamera = new view_camera_1.ViewCamera();\n    defaultCamera.baseCamera = new Three.OrthographicCamera(viewport.left, viewport.right, viewport.top, viewport.bottom, viewport.near, viewport.far);\n    defaultCamera.baseCamera.scale.set(1.0, -1.0, 1.0);\n    defaultCamera.baseCamera.position.set(0.0, 0.0, -300.0);\n    defaultCamera.baseCamera.updateMatrixWorld(true);\n    defaultCamera.baseCamera.updateMatrix();\n    if (defaultCamera.baseCamera instanceof Three.OrthographicCamera) {\n        defaultCamera.baseCamera.updateProjectionMatrix();\n    }\n    // Generate a charting camera with all scales set to 1 and no offsets in any direction\n    var defaultChartCamera = new chart_camera_1.ChartCamera();\n    // This is a viewport that covers the entire context\n    var defaultViewport = {\n        bottom: 0,\n        left: 0,\n        right: 0,\n        top: 0,\n    };\n    // Make a view using our defaults\n    var defaultView = new view_1.View({\n        camera: defaultChartCamera,\n        key: view_1.View.DEFAULT_VIEW_ID,\n        viewCamera: defaultCamera,\n        viewport: defaultViewport,\n    });\n    // Make a scene with our defaults\n    var defaultScene = new scene_1.Scene({\n        key: scene_1.Scene.DEFAULT_SCENE_ID,\n        views: [],\n    });\n    // Make sure the default view is a part of the default scene\n    defaultScene.addView(defaultView);\n    return {\n        camera: defaultChartCamera,\n        scene: defaultScene,\n        view: defaultView,\n        viewCamera: defaultCamera,\n        viewport: defaultViewport,\n    };\n}\nexports.generateDefaultScene = generateDefaultScene;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar INSTANCE_UNIFORM_ATTRIBUTE_PREFIX = 'u';\nfunction makeInstanceUniformNameArray() {\n    return \"instanceData\";\n}\nexports.makeInstanceUniformNameArray = makeInstanceUniformNameArray;\nfunction makeInstanceUniformNameTree(index) {\n    return \"\" + INSTANCE_UNIFORM_ATTRIBUTE_PREFIX + index.toString(31);\n}\nexports.makeInstanceUniformNameTree = makeInstanceUniformNameTree;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.templateVars = {\n    attributeFragments: 'attributeFragments',\n    attributes: 'attributes',\n    blocksPerInstance: 'blocksPerInstance',\n    easingMethod: 'easingMethod',\n    easingMethods: 'easingMethods',\n    instanceBlockCount: 'instanceBlockCount',\n    instanceDataBinaryTree: 'instanceDataBinaryTree',\n    instanceDataRetrieval: 'instanceDataRetrieval',\n    instanceDestructuring: 'instanceDestructuring',\n    instanceFragments: 'instanceFragments',\n    instanceUniformDeclarations: 'instanceUniformDeclarations',\n    layerUniforms: 'layerUniforms',\n    picking: 'picking',\n    projectionMethods: 'projectionMethods',\n    shader: 'shader',\n    shaderInput: 'shaderInput',\n    vertexAttributes: 'vertexAttributes',\n};\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./label-layer\"));\n__export(require(\"./label-instance\"));\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar canvas;\nvar MAX_FONT_SIZE = 50;\nvar floor = Math.floor, max = Math.max, min = Math.min;\nvar LabelRasterizer = /** @class */ (function () {\n    function LabelRasterizer() {\n    }\n    /**\n     * This loops until our canvas context is available\n     */\n    LabelRasterizer.awaitContext = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!canvas) return [3 /*break*/, 2];\n                        this.getContext();\n                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 0];\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This renders our label to a sizeable canvas where we loop over the pixel data to determine\n     * the bounds of the label.\n     *\n     * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n     *                                 the size to be rendered to the texture to the size the label\n     *                                 should be within world space.\n     * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n     */\n    LabelRasterizer.calculateLabelSize = function (resource, sampleScale, calculateTexture) {\n        // If a max width is specified, then we must render and determine the potentially truncated text of the\n        // Label. We can do a binary search for the correct truncated label size.\n        if (calculateTexture) {\n            this.calculateTrucatedText(resource);\n        }\n        /** Get the label properties for rasterizing */\n        var label = resource.label;\n        // Get the scaling of the sample base\n        var sampleScaling = sampleScale || resource.sampleScale || 1.0;\n        // Draw our label to a canvas\n        this.drawLabel(label, resource.truncatedText, canvas, sampleScaling);\n        // Measure the contents of the canvas\n        var _a = this.measureContents(canvas), minX = _a.minX, minY = _a.minY, maxX = _a.maxX, maxY = _a.maxY;\n        // Make sure the rasterization object is initialized\n        resource.rasterization = resource.rasterization || {\n            texture: { height: 0, width: 0 },\n            world: { height: 0, width: 0 },\n        };\n        // When a forced sampling is present, it calculates that as the world space\n        if (!calculateTexture) {\n            // Update the calculated texture size.\n            resource.rasterization.world = {\n                height: maxY - minY,\n                width: maxX - minX,\n            };\n        }\n        // Otherwise we first calculate the texture rasterization for the label\n        else {\n            // Update the calculated texture size.\n            resource.rasterization.texture = {\n                height: maxY - minY,\n                width: maxX - minX,\n            };\n            resource.rasterization.canvas = this.createCroppedCanvas(resource, minY, minX);\n            this.calculateLabelSize(resource, 1.0, false);\n        }\n    };\n    /**\n     * This determines what the truncated text of the label will be. If there is no truncation\n     * then the truncated text === the label's text\n     */\n    LabelRasterizer.calculateTrucatedText = function (resource) {\n        var label = resource.label;\n        var maxWidth = label.maxWidth;\n        // If the label has no max width, then there will be no truncation\n        if (!maxWidth) {\n            resource.truncatedText = label.text;\n            return;\n        }\n        // We now do an initial rendering of the label as it will appear in world space\n        this.drawLabel(label, label.text, canvas, 1);\n        // We measure the contents of the rendered item to see if it violates the maxWidth\n        var firstTest = this.measureContents(canvas);\n        // If we're within spec, we do not need to truncate\n        if (firstTest.maxX - firstTest.minX <= maxWidth) {\n            resource.truncatedText = label.text;\n            return;\n        }\n        // At this point we need to binary search through chopping off letters to find a string\n        // That will fit within max width\n        var text = label.text;\n        var left = 0;\n        var right = text.length;\n        var cursor = floor((right - left) / 2.0);\n        var safety = 0;\n        var safetyMax = 50;\n        // Loop to perform the binary search\n        while (right > left && cursor !== 0 && safety++ < safetyMax) {\n            // Draw and measure\n            this.drawLabel(label, text.substr(0, cursor) + \"...\", canvas, 1);\n            var _a = this.measureContents(canvas), minX = _a.minX, maxX = _a.maxX;\n            // If we pass then we move left to cursor to make the test string longer\n            if (maxX - minX <= maxWidth) {\n                left = cursor;\n            }\n            // If we fail, we move right to cursor to make the test string shorter\n            else {\n                right = cursor;\n            }\n            // Get our next cursor position\n            var nextCursor = floor((right - left) / 2.0) + left;\n            // If the next cursor is the same as cursor, then we're done searching\n            if (nextCursor === cursor) {\n                break;\n            }\n            // Move our cursor\n            cursor = nextCursor;\n        }\n        // If cursor is zero, nothing passed and our truncation is just ellipses\n        if (cursor === 0) {\n            resource.truncatedText = '...';\n        }\n        // Otherwise we get the string that passes and use that as our truncated text\n        else {\n            resource.truncatedText = text.substr(0, cursor) + \"...\";\n        }\n    };\n    /**\n     * This generates a canvas that has the cropped version of the label where the label\n     * fits neatly in the canvas object.\n     */\n    LabelRasterizer.createCroppedCanvas = function (resource, top, left) {\n        var cropped = document.createElement('canvas');\n        var context = cropped.getContext('2d');\n        if (context) {\n            var texture = resource.rasterization.texture;\n            cropped.width = texture.width;\n            cropped.height = texture.height;\n            context.imageSmoothingEnabled = false;\n            // Draw just the region the label appears into the canvas\n            context.drawImage(canvas.canvas, left, top, texture.width, texture.height, 0, 0, texture.width, texture.height);\n        }\n        else {\n            console.warn('Could not create a canvas 2d context to generate a label\\'s cropped image.');\n        }\n        return cropped;\n    };\n    /**\n     * This actually renders a string to a canvas context using a label's settings\n     */\n    LabelRasterizer.drawLabel = function (label, text, canvas, sampleScaling) {\n        // Get the font size we will rasterize with\n        var fontSize = this.getLabelRasterizationFontSize(label, sampleScaling);\n        // Set the color of the label to white so we know what color to look for\n        canvas.fillStyle = 'white';\n        // Set the font to the canvas\n        canvas.font = this.makeCSSFont(label, sampleScaling);\n        // We will use the canvas measuring tool to give us a baseline for how wide\n        // The label will be. We add the font size to the width for the padding needed to ensure\n        // The entirety of the text is placed on the canvas.\n        canvas.canvas.width = canvas.measureText(label.text).width + fontSize;\n        // Make our test area the font size with one extra level of the font size\n        // For padding.\n        canvas.canvas.height = fontSize * 2.0;\n        // After adjusting the canvas dimensions we must re-set the font metrics\n        // Set the color of the label to white so we know what color to look for\n        canvas.fillStyle = 'white';\n        // Set the font to the canvas\n        canvas.font = this.makeCSSFont(label, sampleScaling);\n        // Render the text into our canvas for calculating\n        canvas.fillText(text, fontSize / 2.0, fontSize / 4.0 + fontSize);\n    };\n    /**\n     * Attempts to populate the 'canvas' context for rendering labels offscreen.\n     */\n    LabelRasterizer.getContext = function () {\n        if (!canvas) {\n            var potentialCanvas = document.createElement('canvas').getContext('2d');\n            if (potentialCanvas) {\n                canvas = potentialCanvas;\n            }\n            return potentialCanvas;\n        }\n        return canvas;\n    };\n    /**\n     * This retrieves the font size that will be used when rasterizing the label. This takes into\n     * account whether the label is requesting super sampling be present for the rendering.\n     */\n    LabelRasterizer.getLabelRasterizationFontSize = function (label, sampleScale) {\n        return label.fontSize * sampleScale;\n    };\n    /**\n     * Generates the CSS font string based on the label's values\n     */\n    LabelRasterizer.makeCSSFont = function (label, sampleScale) {\n        return label.fontWeight + \" \" + this.getLabelRasterizationFontSize(label, sampleScale) + \"px \" + label.fontFamily;\n    };\n    /**\n     * This measures the contents of what is inside the canvas assumming the rendered values are only white\n     */\n    LabelRasterizer.measureContents = function (canvas) {\n        var _a = canvas.canvas, width = _a.width, height = _a.height;\n        var imageData = canvas.getImageData(0, 0, width, height).data;\n        var r;\n        var minY = Number.MAX_SAFE_INTEGER;\n        var minX = Number.MAX_SAFE_INTEGER;\n        var maxX = Number.MIN_SAFE_INTEGER;\n        var maxY = Number.MIN_SAFE_INTEGER;\n        for (var i = 0; i < width; ++i) {\n            for (var k = 0; k < height; ++k) {\n                var redIndex = k * (width * 4) + i * 4;\n                r = imageData[redIndex];\n                if (r > 0.0) {\n                    minY = min(minY, k);\n                    minX = min(minX, i);\n                    maxX = max(maxX, i);\n                    maxY = max(maxY, k);\n                }\n            }\n        }\n        // The identified pixel needs to be encased and not a direct target\n        minY -= 1;\n        maxY += 2;\n        maxX += 2;\n        minX -= 1;\n        minY = max(minY, 0);\n        minX = max(minX, 0);\n        return { minX: minX, minY: minY, maxX: maxX, maxY: maxY };\n    };\n    /**\n     * Performs the rendering of the label\n     */\n    LabelRasterizer.render = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // Make sure our canvas object is ready for rendering\n                    return [4 /*yield*/, this.awaitContext()];\n                    case 1:\n                        // Make sure our canvas object is ready for rendering\n                        _a.sent();\n                        // Validate the label's input\n                        if (resource.label.fontSize > MAX_FONT_SIZE) {\n                            console.warn('Labels only support font sizes up to 50');\n                            return [2 /*return*/, resource];\n                        }\n                        // Calculate all of the label metrics and generate a canvas on the label that can\n                        // Be rendered to the canvas.\n                        this.calculateLabelSize(resource, resource.sampleScale, true);\n                        return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    /**\n     * Performs the rendering of the label\n     */\n    LabelRasterizer.renderSync = function (resource) {\n        // Ensure our offscreen canvas is prepped\n        this.getContext();\n        if (!canvas) {\n            console.warn('Can not render a label synchronously without the canvas context being ready.');\n            return resource;\n        }\n        // Validate the label's input\n        if (resource.label.fontSize > MAX_FONT_SIZE) {\n            console.warn('Labels only support font sizes up to 50');\n            return resource;\n        }\n        // Calculate all of the label metrics and generate a canvas on the label that can\n        // Be rendered to the canvas.\n        this.calculateLabelSize(resource, resource.sampleScale, true);\n        return resource;\n    };\n    return LabelRasterizer;\n}());\nexports.LabelRasterizer = LabelRasterizer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_atlas_resource_1 = require(\"./base-atlas-resource\");\nvar ImageAtlasResource = /** @class */ (function (_super) {\n    __extends(ImageAtlasResource, _super);\n    function ImageAtlasResource(image) {\n        var _this = _super.call(this) || this;\n        _this.image = image;\n        return _this;\n    }\n    return ImageAtlasResource;\n}(base_atlas_resource_1.BaseAtlasResource));\nexports.ImageAtlasResource = ImageAtlasResource;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// When ratserized to the image, this determines the size of the square rendered to the atlas.\nvar COLOR_RASTERIZATION_SIZE = 2;\n/**\n * Static class for rasterizing a color to a canvas object\n */\nvar ColorRasterizer = /** @class */ (function () {\n    function ColorRasterizer() {\n    }\n    /**\n     * This loops until our canvas context is available\n     */\n    ColorRasterizer.awaitContext = function (canvas) {\n        return __awaiter(this, void 0, void 0, function () {\n            var c, limit;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        c = canvas.getContext('2d'), limit = 0;\n                        _a.label = 1;\n                    case 1:\n                        if (!(!Boolean(c) && limit < 100)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        c = canvas.getContext('2d'), ++limit;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Generates the CSS string version of the color\n     */\n    ColorRasterizer.makeCSS = function (color) {\n        return \"rgba(\" + Math.floor(color.r * 256) + \", \" + Math.floor(color.g * 256) + \", \" + Math.floor(color.b * 256) + \", \" + color.opacity + \")\";\n    };\n    ColorRasterizer.render = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var canvas, context;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        canvas = document.createElement('canvas');\n                        context = canvas.getContext('2d');\n                        return [4 /*yield*/, this.awaitContext(canvas)];\n                    case 1:\n                        _a.sent();\n                        if (context) {\n                            canvas.width = COLOR_RASTERIZATION_SIZE;\n                            canvas.height = COLOR_RASTERIZATION_SIZE;\n                            context.imageSmoothingEnabled = false;\n                            context.fillStyle = this.makeCSS(resource.color);\n                            // Draw the color to the fill space\n                            context.fillRect(0, 0, COLOR_RASTERIZATION_SIZE, COLOR_RASTERIZATION_SIZE);\n                            // Update the resource with the rasterization\n                            resource.rasterization.canvas = canvas;\n                        }\n                        else {\n                            console.warn('Could not create a canvas 2d context to generate a color for rasterization.');\n                        }\n                        return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    return ColorRasterizer;\n}());\nexports.ColorRasterizer = ColorRasterizer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_atlas_resource_1 = require(\"./base-atlas-resource\");\nvar ColorAtlasResource = /** @class */ (function (_super) {\n    __extends(ColorAtlasResource, _super);\n    function ColorAtlasResource(color) {\n        var _this = _super.call(this) || this;\n        _this.color = color;\n        return _this;\n    }\n    return ColorAtlasResource;\n}(base_atlas_resource_1.BaseAtlasResource));\nexports.ColorAtlasResource = ColorAtlasResource;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Defines a texture that is located on an atlas\n */\nvar SubTexture = /** @class */ (function () {\n    function SubTexture() {\n        /** Stores the aspect ratio of the image for quick reference */\n        this.aspectRatio = 1.0;\n        /** The id of the atlas this texture is located on */\n        this.atlasReferenceID = '';\n        /** This is the actual texture of the atlas this resource is located on */\n        this.atlasTexture = null;\n        /** This is the top left UV coordinate of the sub texture on the atlas */\n        this.atlasTL = { x: 0, y: 0 };\n        /** This is the top right UV coordinate of the sub texture on the atlas */\n        this.atlasTR = { x: 0, y: 0 };\n        /** This is the bottom left UV coordinate of the sub texture on the atlas */\n        this.atlasBL = { x: 0, y: 0 };\n        /** This is the bottom right UV coordinate of the sub texture on the atlas */\n        this.atlasBR = { x: 0, y: 0 };\n        /** This is the normalized width of the sub texture on the atlas */\n        this.widthOnAtlas = 0;\n        /** This is the normalized height of the sub texture on the atlas */\n        this.heightOnAtlas = 0;\n        /** This flag is set to false when the underlying texture is no longer valid */\n        this.isValid = false;\n        /** Width in pixels of the image on the atlas */\n        this.pixelWidth = 0;\n        /** Height in pixels of the image on the atlas */\n        this.pixelHeight = 0;\n    }\n    return SubTexture;\n}());\nexports.SubTexture = SubTexture;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar identify_by_key_1 = require(\"../../util/identify-by-key\");\nvar pack_node_1 = require(\"./pack-node\");\nvar sub_texture_1 = require(\"./sub-texture\");\n/**\n * These are valid atlas sizes available. We force a power of 2 to be utilized.\n * We do not allow crazy large sizes as browsers have very real caps on resources.\n * This helps implementations be a little smarter about what they are using. Future\n * versions may increase this number as GPUs improve and standards allow greater\n * flexibility.\n */\nvar AtlasSize;\n(function (AtlasSize) {\n    AtlasSize[AtlasSize[\"_2\"] = 2] = \"_2\";\n    AtlasSize[AtlasSize[\"_4\"] = 4] = \"_4\";\n    AtlasSize[AtlasSize[\"_8\"] = 8] = \"_8\";\n    AtlasSize[AtlasSize[\"_16\"] = 16] = \"_16\";\n    AtlasSize[AtlasSize[\"_32\"] = 32] = \"_32\";\n    AtlasSize[AtlasSize[\"_64\"] = 64] = \"_64\";\n    AtlasSize[AtlasSize[\"_128\"] = 128] = \"_128\";\n    AtlasSize[AtlasSize[\"_256\"] = 256] = \"_256\";\n    AtlasSize[AtlasSize[\"_512\"] = 512] = \"_512\";\n    AtlasSize[AtlasSize[\"_1024\"] = 1024] = \"_1024\";\n    AtlasSize[AtlasSize[\"_2048\"] = 2048] = \"_2048\";\n    AtlasSize[AtlasSize[\"_4096\"] = 4096] = \"_4096\";\n})(AtlasSize = exports.AtlasSize || (exports.AtlasSize = {}));\n/**\n * This represents a single Texture on the gpu that is composed of several smaller textures\n * as a 'look up'.\n */\nvar Atlas = /** @class */ (function (_super) {\n    __extends(Atlas, _super);\n    function Atlas(options) {\n        var _this = _super.call(this, options) || this;\n        /**\n         * This is all of the resources associated with this atlas. The boolean flag indicates if the resource\n         * is flagged for removal. When set to false, the resource is no longer valid and can be removed from\n         * the atlas at any given moment.\n         */\n        _this.validResources = new Map();\n        var canvas = document.createElement('canvas');\n        _this.width = canvas.width = options.width;\n        _this.height = canvas.height = options.height;\n        _this.textureSettings = options.textureSettings;\n        // Set up the packing for this atlas\n        _this.packing = new pack_node_1.PackNode(0, 0, options.width, options.height);\n        // Make sure the texture is started and updated\n        _this.updateTexture(canvas);\n        return _this;\n    }\n    /**\n     * This invalidates the SubTexture of an atlas resource.\n     */\n    Atlas.prototype.invalidateResource = function (resource) {\n        var zero = { x: 0, y: 0 };\n        resource.texture.aspectRatio = 1;\n        resource.texture.atlasBL = zero;\n        resource.texture.atlasBR = zero;\n        resource.texture.atlasTL = zero;\n        resource.texture.atlasTR = zero;\n        resource.texture.atlasReferenceID = '';\n        resource.texture.pixelWidth = 0;\n        resource.texture.pixelHeight = 0;\n        resource.texture.isValid = false;\n    };\n    /**\n     * Sets the parent manager of this atlas\n     */\n    Atlas.prototype.setManager = function (manager) {\n        this.manager = manager;\n    };\n    /**\n     * Adds a resource to this atlas AND ensures the resource is flagged valid for use.\n     *\n     * @return {boolean} True if the resource successfully registered\n     */\n    Atlas.prototype.registerResource = function (resource) {\n        if (this.validResources.get(resource) === undefined) {\n            if (!resource.texture || !resource.texture.isValid) {\n                if (!resource.texture) {\n                    resource.texture = new sub_texture_1.SubTexture();\n                }\n                resource.texture.isValid = true;\n                this.validResources.set(resource, true);\n                return true;\n            }\n            else {\n                console.warn('Atlas Error:', this.id, 'Attempted to add a resource to an Atlas that is already a valid resource on another atlas.', 'Consider Creating a new resource to be loaded into this particular atlas.', 'Resource:', resource);\n            }\n        }\n        else {\n            console.warn('Atlas Error:', this.id, 'A resource was trying to be added to the atlas that has already been added before.', 'Consider creating a new resource to indicate what you want loaded to the atlas', 'Resource:', resource);\n        }\n        return false;\n    };\n    /**\n     * This flags a resource from removal from an atlas.\n     *\n     * NOTE: This does not immediately clear the resource fromt he atlas, nor does it even guarantee\n     * the resource will be cleared from the atlas for a while. It merely suggests the resource be removed\n     * and makes the SubTexture invalid. It could be a long while before the atlas gets regnerated and repacked\n     * to actually reflect the resource not existing on the atlas.\n     */\n    Atlas.prototype.removeResource = function (resource) {\n        if (this.validResources.get(resource)) {\n            this.validResources.set(resource, false);\n            this.invalidateResource(resource);\n        }\n        else {\n            console.warn('Atlas Error:', this.id, 'Attempted to remove a resource that does not exist on this atlas.', 'or the resource was already considered invalidated on this atlas.', 'Resource:', resource);\n        }\n    };\n    /**\n     * TODO:\n     * This performs the currently best known way to update a texture.\n     *\n     * This is the current best attempt at updating the atlas which is junk as it destroys the old texture\n     * And makes a new one. We REALLY should be just subTexture2D updating the texture, but Three makes that really\n     * Difficult\n     */\n    Atlas.prototype.updateTexture = function (canvas) {\n        if (this.texture) {\n            var redoneCanvas = this.texture.image;\n            this.texture.dispose();\n            this.texture = new Three.Texture(redoneCanvas);\n        }\n        else {\n            this.texture = new Three.Texture(canvas);\n        }\n        // Apply any relevant options to the texture desired to be set\n        this.texture.generateMipmaps = true;\n        this.texture.premultiplyAlpha = true;\n        this.textureSettings && Object.assign(this.texture, this.textureSettings);\n        this.texture.needsUpdate = true;\n    };\n    /**\n     * This frees up all the resources down to the GPU related to this atlas. It also\n     * loops through every resource and invalidates the texturing information within\n     * them so subsequent accidental renders will appear as a single color rather than\n     * an artifacted element.\n     */\n    Atlas.prototype.destroy = function () {\n        var _this = this;\n        this.texture.dispose();\n        this.validResources.forEach(function (isValid, resource) {\n            _this.invalidateResource(resource);\n        });\n    };\n    return Atlas;\n}(identify_by_key_1.IdentifyByKey));\nexports.Atlas = Atlas;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./image-layer\"));\n__export(require(\"./image-instance\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getProgramInfo(gl, program) {\n    var result = {\n        attributeCount: 0,\n        attributes: new Array(),\n        uniformCount: 0,\n        uniforms: new Array(),\n    }, activeUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS), activeAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    // Taken from the WebGl spec:\n    // Http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14\n    var enums = {\n        0x8B50: 'FLOAT_VEC2',\n        0x8B51: 'FLOAT_VEC3',\n        0x8B52: 'FLOAT_VEC4',\n        0x8B53: 'INT_VEC2',\n        0x8B54: 'INT_VEC3',\n        0x8B55: 'INT_VEC4',\n        0x8B56: 'BOOL',\n        0x8B57: 'BOOL_VEC2',\n        0x8B58: 'BOOL_VEC3',\n        0x8B59: 'BOOL_VEC4',\n        0x8B5A: 'FLOAT_MAT2',\n        0x8B5B: 'FLOAT_MAT3',\n        0x8B5C: 'FLOAT_MAT4',\n        0x8B5E: 'SAMPLER_2D',\n        0x8B60: 'SAMPLER_CUBE',\n        0x1400: 'BYTE',\n        0x1401: 'UNSIGNED_BYTE',\n        0x1402: 'SHORT',\n        0x1403: 'UNSIGNED_SHORT',\n        0x1404: 'INT',\n        0x1405: 'UNSIGNED_INT',\n        0x1406: 'FLOAT',\n    };\n    var blocks = {\n        0x8B50: 1,\n        0x8B51: 1,\n        0x8B52: 1,\n        0x8B53: 1,\n        0x8B54: 1,\n        0x8B55: 1,\n        0x8B56: 1,\n        0x8B57: 1,\n        0x8B58: 1,\n        0x8B59: 1,\n        0x8B5A: 1,\n        0x8B5B: 3,\n        0x8B5C: 4,\n        0x8B5E: 1,\n        0x8B60: 1,\n        0x1400: 1,\n        0x1401: 1,\n        0x1402: 1,\n        0x1403: 1,\n        0x1404: 1,\n        0x1405: 1,\n        0x1406: 1,\n    };\n    // Loop through active uniforms\n    for (var i = 0; i < activeUniforms; ++i) {\n        var uniform = gl.getActiveUniform(program, i);\n        uniform.typeName = enums[uniform.type];\n        result.uniforms.push(uniform);\n        result.uniformCount += uniform.size;\n        uniform.size = uniform.size * blocks[uniform.type];\n    }\n    // Loop through active attributes\n    for (var i = 0; i < activeAttributes; i++) {\n        var attribute = gl.getActiveAttrib(program, i);\n        attribute.typeName = enums[attribute.type];\n        result.attributes.push(attribute);\n        result.attributeCount += attribute.size;\n    }\n    return result;\n}\nexports.getProgramInfo = getProgramInfo;\nvar WebGLStat = /** @class */ (function () {\n    function WebGLStat() {\n    }\n    WebGLStat.MAX_VERTEX_UNIFORMS = 0;\n    WebGLStat.MAX_FRAGMENT_UNIFORMS = 0;\n    WebGLStat.MAX_ATTRIBUTES = 0;\n    WebGLStat.WEBGL_SUPPORTED = false;\n    WebGLStat.MAX_TEXTURE_SIZE = 0;\n    return WebGLStat;\n}());\nexports.WebGLStat = WebGLStat;\nfunction initStats() {\n    // Let's perform some immediate operations to do some gl querying for useful information\n    function getAContext() {\n        try {\n            var canvas = document.createElement('canvas');\n            return window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    // Attempt to retrieve a context for webgl\n    var gl = getAContext();\n    // If the context exists, then we know gl is supported and we can fill in some metrics\n    if (gl) {\n        WebGLStat.WEBGL_SUPPORTED = true;\n        WebGLStat.MAX_VERTEX_UNIFORMS = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n        WebGLStat.MAX_FRAGMENT_UNIFORMS = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n        WebGLStat.MAX_ATTRIBUTES = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n        WebGLStat.MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    }\n}\ninitStats();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar UID = 0;\n/**\n * Provides a 64 bit UID.\n *\n * Note: all uids generated with uid() are unique amongst uid() calls and NOT unique amongst\n * other types of uid calls.\n */\nfunction uid() {\n    return ++UID;\n}\nexports.uid = uid;\nvar CUID = 0;\n/**\n * Provides a 24 bit UID (keeps the UID within non-alpha color ranges)\n *\n * Note: all uids generated with colorUID() are unique amongst colorUID() calls and NOT unique amongst\n * other types of uid calls.\n */\nfunction colorUID() {\n    return (++CUID) % 0xFFFFFF;\n}\nexports.colorUID = colorUID;\n","/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',\n  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',\n  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',\n  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',\n  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',\n  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',\n  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',\n  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',\n  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',\n  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',\n  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // Internet Explorer and Edge do not support colors.\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n    return false;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar browser = require(\"bowser\");\nvar three_1 = require(\"three\");\nvar debug = require('debug')('CommunicationsView:Mouse');\n/** Used to adjust the base whee delta for IE browsers */\nvar IE_ADJUSTMENT = 1 / 30;\n/** Used to adjust the rates for IE 11 */\nvar OLD_IE_ADJUSTMENT = -0.25;\n// This determines how large the delta can grow to in firefox\nvar MAX_FIREFOX_WHEELDELTA = 100;\n/**\n * Create a low pass filter memory bank so we can slow down rapid accelerations and let normal slower accelerations pass\n * Common use case for this is the discrepancy in firefox from mousewheels to trackpad scroll speeds\n */\nvar lowPassY = [0, 0, 0, 0];\n// These coefficients represent the coefficients of a FIR filter.\n// This FIR filter uses the lowPassY as the memory for the filter and is created for\n// The reasons specified for the lowPassY memory. To edit the coefficients, you simply\n// Ensure the coefficients added together === 1.0. If they do not, you may get an unstable\n// Result that goes to infinity rather quickly. Changing the distribution of these coefficients\n// Alters the rate at which the delta can approach MAX_FIREFOX_WHEELDELTA. Explaining exactly\n// How it affects the rate requires an understanding of FIR filters, so unless this is already\n// Known knowledge, it would be faster to just tweak the coefficients until a desired effect is\n// Attained.\nvar LOW_PASS_U0 = 0.02;\nvar LOW_PASS_U1 = 0.1;\nvar LOW_PASS_U2 = 0.18;\nvar LOW_PASS_U3 = 0.7;\nfunction normalizeFirefoxWheel(e) {\n    var wheel = e;\n    var deltaX = 0;\n    var deltaY = 0;\n    // Reset the filter if the direction changes to prevent lag in directional change\n    if (Math.sign(lowPassY[0]) !== Math.sign(deltaY)) {\n        lowPassY.splice(0, lowPassY.length, 0, 0, 0, 0);\n    }\n    deltaX = wheel.deltaX * MAX_FIREFOX_WHEELDELTA;\n    // Calculate the next value output from the FIR filter\n    deltaY = (wheel.deltaY * MAX_FIREFOX_WHEELDELTA) * LOW_PASS_U0 + lowPassY[0] * LOW_PASS_U1 + lowPassY[1] * LOW_PASS_U2 + lowPassY[2] * LOW_PASS_U3;\n    // Store the value of the filter in the FIR memory bank\n    lowPassY.unshift(deltaY);\n    // Keep our FIR memory clean and only the size of the number of coefficients\n    lowPassY.pop();\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeChromeWheel(e) {\n    var wheel = e;\n    return new three_1.Vector2(wheel.deltaX, -wheel.deltaY);\n}\nfunction normalizeIE11Wheel(e) {\n    var wheel = e;\n    var deltaX = wheel.deltaX;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    var deltaY = wheel.deltaY;\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = (wheel.wheelDelta || -wheel.detail) * OLD_IE_ADJUSTMENT;\n        }\n    }\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeIE12Wheel(e) {\n    var wheel = e;\n    var deltaX = wheel.deltaX, deltaY = wheel.deltaY;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = wheel.wheelDelta || -wheel.detail;\n        }\n    }\n    var v = new three_1.Vector2(deltaX, -deltaY);\n    v.multiplyScalar(0.25);\n    return v;\n}\n// Determine this browsers version of wheel normalization and apply it\nvar normalizeWheel;\nexports.normalizeWheel = normalizeWheel;\nif (browser.firefox) {\n    debug('Using mouse wheel for firefox');\n    exports.normalizeWheel = normalizeWheel = normalizeFirefoxWheel;\n}\nelse if (browser.msie && +browser.version >= 11) {\n    debug('Using mouse wheel for IE 11');\n    exports.normalizeWheel = normalizeWheel = normalizeIE11Wheel;\n}\nelse if (browser.msedge) {\n    debug('Using mouse wheel for MS EDGE');\n    exports.normalizeWheel = normalizeWheel = normalizeIE12Wheel;\n}\nelse {\n    debug('Using mouse wheel for Chrome');\n    exports.normalizeWheel = normalizeWheel = normalizeChromeWheel;\n}\n/**\n * Analyzes a MouseEvent and calculates the mouse coordinates (relative to the element).\n */\nfunction eventElementPosition(e, relative) {\n    var mouseX = 0, mouseY = 0, eventX = 0, eventY = 0, object = relative || (e.nativeEvent && e.nativeEvent.target) || e.target;\n    // Get mouse position on document crossbrowser\n    if (!e) {\n        e = window.event;\n    }\n    if (e.pageX || e.pageY) {\n        mouseX = e.pageX;\n        mouseY = e.pageY;\n    }\n    else if (e.clientX || e.clientY) {\n        mouseX = e.clientX + document.body.scrollLeft\n            + document.documentElement.scrollLeft;\n        mouseY = e.clientY + document.body.scrollTop\n            + document.documentElement.scrollTop;\n    }\n    // Get parent element position in document\n    if (object.offsetParent) {\n        do {\n            eventX += object.offsetLeft;\n            eventY += object.offsetTop;\n            object = object.offsetParent;\n        } while (object);\n    }\n    // Mouse position minus elm position is mouseposition relative to element:\n    return { x: mouseX - eventX, y: mouseY - eventY };\n}\nexports.eventElementPosition = eventElementPosition;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar label_atlas_resource_1 = require(\"./label-atlas-resource\");\nfunction toInstanceIOValue(texture) {\n    // If the texture is not defined we just output an empty reference\n    if (!texture) {\n        return [0, 0, 0, 0];\n    }\n    // Otherwise, we return the atlas information of the texture\n    return [\n        texture.atlasTL.x,\n        texture.atlasTL.y,\n        texture.atlasBR.x,\n        texture.atlasBR.y,\n    ];\n}\n/**\n * This class is responsible for tracking resources requested to be placed on an Atlas.\n * This makes sure the resource is uploaded and then properly cached so similar requests\n * return already existing resources. This also manages instances waiting for the resource\n * to be made available.\n */\nvar AtlasResourceManager = /** @class */ (function () {\n    function AtlasResourceManager(options) {\n        /** This is the atlas currently targetted by requests */\n        this.targetAtlas = '';\n        /** This stores all of the requests awaiting dequeueing */\n        this.requestQueue = new Map();\n        /**\n         * This tracks if a resource is already in the request queue. This also stores ALL instances awaiting the resource.\n         */\n        this.requestLookup = new Map();\n        this.atlasManager = options.atlasManager;\n    }\n    /**\n     * This dequeues all instance requests for a resource and processes the request which will\n     * inevitably make the instance active\n     */\n    AtlasResourceManager.prototype.dequeueRequests = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var didDequeue, _loop_1, this_1, _i, _a, _b, targetAtlas, resources;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        didDequeue = false;\n                        _loop_1 = function (targetAtlas, resources) {\n                            var requests, atlasRequests_1;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        if (!(resources.length > 0)) return [3 /*break*/, 2];\n                                        // We did dequeue\n                                        didDequeue = true;\n                                        requests = resources.slice(0);\n                                        // Empty the queue to begin taking in new requests as needed\n                                        resources.length = 0;\n                                        // Tell the atlas manager to update with all of the requested resources\n                                        return [4 /*yield*/, this_1.atlasManager.updateAtlas(targetAtlas, requests)];\n                                    case 1:\n                                        // Tell the atlas manager to update with all of the requested resources\n                                        _a.sent();\n                                        atlasRequests_1 = this_1.requestLookup.get(targetAtlas);\n                                        if (atlasRequests_1) {\n                                            // Once the manager has been updated, we can now flag all of the instances waiting for the resources\n                                            // As active, which should thus trigger an update to the layers to perform a diff for each instance\n                                            requests.forEach(function (resource) {\n                                                var request = atlasRequests_1.get(resource);\n                                                atlasRequests_1.delete(resource);\n                                                if (request) {\n                                                    for (var _i = 0, request_1 = request; _i < request_1.length; _i++) {\n                                                        var _a = request_1[_i], layer = _a[0], instance = _a[1];\n                                                        // If the instance is still associated with a cluster, then the instance can be activated. Having\n                                                        // A cluster is indicative the instance has not been deleted.\n                                                        if (layer.uniformManager.getUniforms(instance)) {\n                                                            instance.active = true;\n                                                        }\n                                                    }\n                                                }\n                                            });\n                                        }\n                                        _a.label = 2;\n                                    case 2: return [2 /*return*/];\n                                }\n                            });\n                        };\n                        this_1 = this;\n                        _i = 0, _a = Array.from(this.requestQueue.entries());\n                        _c.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3 /*break*/, 4];\n                        _b = _a[_i], targetAtlas = _b[0], resources = _b[1];\n                        return [5 /*yield**/, _loop_1(targetAtlas, resources)];\n                    case 2:\n                        _c.sent();\n                        _c.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/, didDequeue];\n                }\n            });\n        });\n    };\n    /**\n     * Free ALL resources managed under this resource manager\n     */\n    AtlasResourceManager.prototype.destroy = function () {\n        this.atlasManager.destroy();\n    };\n    /**\n     * This retrieves the actual atlas texture that should be applied to a uniform's\n     * value.\n     */\n    AtlasResourceManager.prototype.getAtlasTexture = function (key) {\n        var atlas = this.atlasManager.getAtlasTexture(key);\n        if (atlas) {\n            return atlas.texture;\n        }\n        return null;\n    };\n    /**\n     * This is a request for atlas texture resources. It will produce either the coordinates needed to\n     * make valid texture lookups, or it will trigger a loading of resources to an atlas and cause an\n     * automated deactivation and reactivation of the instance.\n     */\n    AtlasResourceManager.prototype.request = function (layer, instance, resource) {\n        var texture = resource.texture;\n        // If the texture is ready and available, then we simply return the IO values\n        if (texture) {\n            return toInstanceIOValue(texture);\n        }\n        if (resource instanceof label_atlas_resource_1.LabelAtlasResource) {\n            if (!resource.label.text) {\n                return toInstanceIOValue(texture);\n            }\n        }\n        // If a request is already made, then we must save the instance making the request for deactivation and\n        // Reactivation but without any additional atlas loading\n        var atlasRequests = this.requestLookup.get(this.targetAtlas);\n        if (atlasRequests) {\n            var existingRequests = atlasRequests.get(resource);\n            if (existingRequests) {\n                existingRequests.push([layer, instance]);\n                instance.active = false;\n                return toInstanceIOValue(texture);\n            }\n        }\n        else {\n            atlasRequests = new Map();\n            this.requestLookup.set(this.targetAtlas, atlasRequests);\n        }\n        // If the texture is not available, then we must load the resource, deactivate the instance\n        // And wait for the resource to become available. Once the resource is available, the system\n        // Must activate the instance to render the resource.\n        instance.active = false;\n        var requests = this.requestQueue.get(this.targetAtlas);\n        if (!requests) {\n            requests = [];\n            this.requestQueue.set(this.targetAtlas, requests);\n        }\n        requests.push(resource);\n        atlasRequests.set(resource, [[layer, instance]]);\n        // This returns essentially returns blank values for the resource lookup\n        return toInstanceIOValue(texture);\n    };\n    /**\n     * This is used by the system to target the correct atlas for subsequent requests to a resource.\n     */\n    AtlasResourceManager.prototype.setTargetAtlas = function (target) {\n        this.targetAtlas = target;\n    };\n    return AtlasResourceManager;\n}());\nexports.AtlasResourceManager = AtlasResourceManager;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../../types\");\nvar event_manager_1 = require(\"../event-manager\");\nfunction isDefined(val) {\n    return Boolean(val);\n}\n/**\n * This class is an injected event manager for the surface, it specifically handles taking in mouse events intended for view interactions\n * and broadcasts them to the layers that have picking enabled, thus allowing the layers to respond to\n * mouse view locations and broadcast Instance interactions based on the interaction with the View the layer is a part of\n *\n * In Summary: This is an adapter that takes in interactions to the views and injects those events into the layers associated with\n * the views so that the layers can translate the events to gestures.\n */\nvar LayerMouseEvents = /** @class */ (function (_super) {\n    __extends(LayerMouseEvents, _super);\n    function LayerMouseEvents(surface) {\n        var _this = _super.call(this) || this;\n        /** This tracks which views have the mouse over them so we can properly broadcast view is out events */\n        _this.isOver = new Map();\n        _this.surface = surface;\n        _this.sceneViews = surface.sceneViews;\n        return _this;\n    }\n    LayerMouseEvents.prototype.getSceneViewsUnderMouse = function (e) {\n        var sceneViewByViewId = new Map();\n        // Map the scene views by the view's identifiers\n        for (var _i = 0, _a = this.sceneViews; _i < _a.length; _i++) {\n            var sceneView = _a[_i];\n            sceneViewByViewId.set(sceneView.view.id, sceneView);\n        }\n        // Now retrieve and convert each view under the mouse to the scene view it coincides with\n        return e.viewsUnderMouse.map(function (viewItem) { return sceneViewByViewId.get(viewItem.view.id); }).filter(isDefined);\n    };\n    LayerMouseEvents.prototype.getMouseByViewId = function (e) {\n        // This is the mouse position for the provided view in view space\n        var viewMouseByViewId = new Map();\n        for (var _i = 0, _a = e.viewsUnderMouse; _i < _a.length; _i++) {\n            var viewItem = _a[_i];\n            viewMouseByViewId.set(viewItem.view.id, viewItem.mouse);\n        }\n        return viewMouseByViewId;\n    };\n    LayerMouseEvents.prototype.handleClick = function (e, button) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseClick(view, mouse, button); });\n    };\n    LayerMouseEvents.prototype.handleDrag = function (e, drag) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseDrag(view, mouse); });\n    };\n    LayerMouseEvents.prototype.handleInteraction = function (e, callback) {\n        // Get all of the scenes under the mouse\n        var sceneViews = this.getSceneViewsUnderMouse(e);\n        // Get a lookup of a view id to the mouse position in the view\n        var viewMouseByViewId = this.getMouseByViewId(e);\n        // For every view of every scene, we must tell it's layers it's world space is receiving mouse interactions\n        for (var _i = 0, sceneViews_1 = sceneViews; _i < sceneViews_1.length; _i++) {\n            var sceneView = sceneViews_1[_i];\n            this.handleSceneView(sceneView, viewMouseByViewId, callback);\n        }\n        return sceneViews;\n    };\n    LayerMouseEvents.prototype.handleMouseDown = function (e, button) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseDown(view, mouse, button); });\n    };\n    LayerMouseEvents.prototype.handleMouseUp = function (e, button) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseUp(view, mouse, button); });\n    };\n    LayerMouseEvents.prototype.handleMouseOver = function (e) {\n        // We let the mouse move event handle the registration of moused over views\n    };\n    LayerMouseEvents.prototype.handleMouseOut = function (e) {\n        var _this = this;\n        // Get a lookup of a view id to the mouse position in the view\n        var viewMouseByViewId = this.getMouseByViewId(e);\n        var screen = e.screen.mouse;\n        // All views that are moused over should no longer be considered over and broadcast a mouse out\n        this.isOver.forEach(function (flag, sceneView) {\n            // Since we are leaving the view we must make the view relative cooridinates fromt he screen space coords\n            viewMouseByViewId.set(sceneView.view.id, sceneView.view.screenToView(screen));\n            _this.handleSceneView(sceneView, viewMouseByViewId, function (layer, view, mouse) { return layer.interactions.handleMouseOut(view, mouse); });\n        });\n        // Nothing is over anymore\n        this.isOver.clear();\n    };\n    LayerMouseEvents.prototype.handleMouseMove = function (e) {\n        var _this = this;\n        if (this.surface) {\n            this.surface.updateColorPickRange([e.screen.mouse.x, e.screen.mouse.y], e.viewsUnderMouse.map(function (v) { return v.view; }));\n        }\n        // Get all of the scenes we have interacted with, and broadcast a move event for each\n        var allSceneViews = this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseMove(view, mouse); });\n        // Get a lookup of a view id to the mouse position in the view\n        var viewMouseByViewId = this.getMouseByViewId(e);\n        // Get the position of the mouse on the screen\n        var screen = e.screen.mouse;\n        // For quick lookups map all of the current SceneViews that are over\n        var currentSceneViews = new Map();\n        allSceneViews.forEach(function (v) { return currentSceneViews.set(v, true); });\n        // Detect which of the views are newly over\n        currentSceneViews.forEach(function (flag, sceneView) {\n            if (!_this.isOver.get(sceneView)) {\n                _this.handleSceneView(sceneView, viewMouseByViewId, function (layer, view, mouse) { return layer.interactions.handleMouseOver(view, mouse); });\n            }\n        });\n        // Detect which of the views are no longer over\n        this.isOver.forEach(function (flag, sceneView) {\n            if (!currentSceneViews.get(sceneView)) {\n                // Since these views were not interacted with, we must create the mouse interaction position\n                viewMouseByViewId.set(sceneView.view.id, sceneView.view.screenToView(screen));\n                _this.handleSceneView(sceneView, viewMouseByViewId, function (layer, view, mouse) { return layer.interactions.handleMouseOut(view, mouse); });\n            }\n        });\n        // Update the current views that are over to the currently over views for next event\n        this.isOver = currentSceneViews;\n    };\n    LayerMouseEvents.prototype.handleSceneView = function (sceneView, viewMouseByViewId, callback) {\n        var view = sceneView.view;\n        var mouse = viewMouseByViewId.get(view.id);\n        if (mouse) {\n            for (var _i = 0, _a = sceneView.scene.layers; _i < _a.length; _i++) {\n                var layer = _a[_i];\n                if (layer.picking && layer.picking.type !== types_1.PickType.NONE) {\n                    callback(layer, view, mouse);\n                }\n            }\n        }\n    };\n    LayerMouseEvents.prototype.handleWheel = function (e) {\n        // TODO: This may need to be implemented. As of right now, there is no particular benefit\n    };\n    return LayerMouseEvents;\n}(event_manager_1.EventManager));\nexports.LayerMouseEvents = LayerMouseEvents;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar generate_layer_model_1 = require(\"../surface/generate-layer-model\");\nvar types_1 = require(\"../types\");\nvar make_instance_uniform_name_1 = require(\"./make-instance-uniform-name\");\n/**\n * This class does a whoooooole lot of making the magical instancing optimization controls possible.\n *\n * Our instancing hackyness comes from the idea that uniforms are fast, and you don't have to commit\n * ALL of them when you touch just a little piece, and you don't have worry about drivers not supporting\n * partial vertex buffer updates.\n *\n * This also is WebGL 1.0 compatible without any extensions that are poorly implemented. And again: does\n * NOT require entire attribute buffer commits.\n *\n * Uniforms are limited for any given draw call. So we have to create multiple materials to support\n * chunks of the instances that need to be drawn. We then have to associate an instance with the set\n * of uniforms that is related to the instance and keep them paired together. If we have too many instances\n * we must generate more buffers to accomodate them.\n *\n * If we remove instances, we must free up the uniform set so that others can use the uniforms. While the uniforms\n * are not in use, the instance should not be rendering.\n */\nvar InstanceUniformManager = /** @class */ (function () {\n    function InstanceUniformManager(layer, scene) {\n        /** The generated buffers by this manager */\n        this.buffers = [];\n        /** The uniform clusters that are free and can be used by an instance */\n        this.availableClusters = [];\n        /** A lookup of an instance to a cluster of uniforms associated with it */\n        this.instanceToCluster = new Map();\n        /** A map of a cluster of uniforms to the buffer it comes from */\n        this.clusterToBuffer = new Map();\n        this.layer = layer;\n        var maxUniformBlock = 0;\n        layer.instanceAttributes.forEach(function (attributes) {\n            maxUniformBlock = Math.max(attributes.block, maxUniformBlock);\n        });\n        this.uniformBlocksPerInstance = maxUniformBlock + 1;\n        this.scene = scene;\n    }\n    /**\n     * This adds an instance to the manager and gives the instance an associative\n     * block of uniforms to work with.\n     */\n    InstanceUniformManager.prototype.add = function (instance) {\n        // If there are no available buffers, we must add a buffer\n        if (this.availableClusters.length <= 0) {\n            this.makeNewBuffer();\n        }\n        var cluster = this.availableClusters.pop();\n        if (cluster) {\n            this.instanceToCluster.set(instance.uid, cluster);\n        }\n        else {\n            console.warn('No valid cluster available for instance added to uniform manager.');\n        }\n        return cluster;\n    };\n    /**\n     * Free all resources this manager may be holding onto\n     */\n    InstanceUniformManager.prototype.destroy = function () {\n        this.buffers.forEach(function (buffer) {\n            buffer.geometry.dispose();\n            buffer.material.dispose();\n        });\n    };\n    /**\n     * This retireves the uniforms associated with an instance, or returns nothing\n     * if the instance has not been associated yet.\n     */\n    InstanceUniformManager.prototype.getUniforms = function (instance) {\n        return this.instanceToCluster.get(instance.uid);\n    };\n    /**\n     * Disassociates an instance with it's group of uniforms and makes the instance\n     * in the buffer no longer drawable.\n     */\n    InstanceUniformManager.prototype.remove = function (instance) {\n        var cluster = this.instanceToCluster.get(instance.uid);\n        // If the instance is associated with a cluster, we can add the cluster back to being available\n        // For another instance.\n        if (cluster) {\n            this.instanceToCluster.delete(instance.uid);\n            this.availableClusters.push(cluster);\n        }\n        return cluster;\n    };\n    /**\n     * Clears all elements of this manager from the current scene it was in.\n     */\n    InstanceUniformManager.prototype.removeFromScene = function () {\n        var _this = this;\n        this.buffers.forEach(function (buffer, index) {\n            _this.scene.container.remove(buffer.model);\n            buffer.pickModel && _this.scene.pickingContainer.remove(buffer.pickModel);\n        });\n        delete this.scene;\n    };\n    /**\n     * Applies the buffers to the provided scene for rendering.\n     */\n    InstanceUniformManager.prototype.setScene = function (scene) {\n        var _this = this;\n        this.buffers.forEach(function (buffer, index) {\n            _this.scene.container.add(buffer.model);\n            buffer.pickModel && _this.scene.pickingContainer.add(buffer.pickModel);\n        });\n        this.scene = scene;\n    };\n    /**\n     * This generates a new buffer of uniforms to associate instances with.\n     */\n    InstanceUniformManager.prototype.makeNewBuffer = function () {\n        // We generate a new geometry object for the buffer as the geometry\n        // Needs to have it's own unique draw range per buffer for optimal\n        // Performance\n        var newGeometry = new Three.BufferGeometry();\n        this.layer.vertexAttributes.forEach(function (attribute) {\n            if (attribute.materialAttribute) {\n                newGeometry.addAttribute(attribute.name, attribute.materialAttribute);\n            }\n        });\n        // Ensure the draw range covers every instance in the geometry.\n        newGeometry.drawRange.start = 0;\n        newGeometry.drawRange.count = this.layer.maxInstancesPerBuffer * this.layer.instanceVertexCount;\n        // This is the material that is generated for the layer that utilizes all of the generated and\n        // Injected shader IO and shader fragments\n        var newMaterial = this.layer.material.clone();\n        // Now make a Model for the buffer so it can be rendered withn the scene\n        var newModel = generate_layer_model_1.generateLayerModel(this.layer, newGeometry, newMaterial);\n        // We render junkloads of instances in a buffer. Culling will have to happen\n        // On an instance level.\n        newModel.frustumCulled = false;\n        // Make our new buffer which will manage the geometry and everything necessary\n        var buffer = {\n            activeInstances: [],\n            clusters: [],\n            firstInstance: 0,\n            geometry: newGeometry,\n            lastInstance: 0,\n            material: newMaterial,\n            model: newModel,\n            pickModel: this.layer.picking.type === types_1.PickType.SINGLE ? newModel.clone() : undefined,\n        };\n        this.buffers.push(buffer);\n        // Now that we have created a new buffer, we have all of it's uniforms\n        // To use to render more instances. We must take the instancing uniforms\n        // And divvy them up into clusters for our available buffer.\n        var uniformIndex = 0;\n        var uniformName = make_instance_uniform_name_1.makeInstanceUniformNameArray();\n        var instanceData = newMaterial.uniforms[uniformName];\n        // We must ensure the vector objects are TOTALLY unique otherwise they'll get shared across buffers\n        instanceData.value = instanceData.value.map(function () { return new Three.Vector4(0.0, 0.0, 0.0, 0.0); });\n        for (var i = 0, end = this.layer.maxInstancesPerBuffer; i < end; ++i) {\n            var cluster = {\n                instanceIndex: i,\n                uniform: instanceData,\n                uniformRange: [uniformIndex, 0],\n            };\n            uniformIndex += this.uniformBlocksPerInstance;\n            cluster.uniformRange[1] = uniformIndex;\n            buffer.clusters.push(cluster);\n            this.availableClusters.push(cluster);\n            this.clusterToBuffer.set(cluster, buffer);\n        }\n        // Grab the global uniforms from the material and add it to the uniform's materialUniform list so that\n        // We can keep uniforms consistent across all Instances\n        for (var i = 0, end = this.layer.uniforms.length; i < end; ++i) {\n            var uniform = this.layer.uniforms[i];\n            uniform.materialUniforms.push(newMaterial.uniforms[uniform.name]);\n        }\n        // Now that we are ready to utilize the buffer, let's add it to the scene so it may be rendered.\n        // Each new buffer equates to one draw call.\n        if (this.scene) {\n            this.scene.container.add(buffer.model);\n            buffer.pickModel && this.scene.pickingContainer.add(buffer.pickModel);\n        }\n    };\n    return InstanceUniformManager;\n}());\nexports.InstanceUniformManager = InstanceUniformManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This analyzes the rendered data for color picking and outputs the metrics and data needed\n * for the operation.\n */\nfunction analyzeColorPickingRendering(mouse, data, width, height) {\n    var pickingData = {\n        allColors: [],\n        colorData: data,\n        dataHeight: height,\n        dataWidth: width,\n        mouse: mouse,\n        nearestColor: 0,\n    };\n    var uniqueColors = new Map();\n    var pixelIndex = 0;\n    var colors = [];\n    var mouseX = width / 2;\n    var mouseY = height / 2;\n    var nearestColor = 0x000000;\n    var distance = Number.MAX_SAFE_INTEGER;\n    for (var i = 0; i < height; ++i) {\n        var row = [];\n        colors.push(row);\n        for (var k = 0; k < width; ++k) {\n            var r = data[pixelIndex];\n            var g = data[pixelIndex + 1];\n            var b = data[pixelIndex + 2];\n            pixelIndex += 4;\n            var color = r << 16 | g << 8 | b;\n            uniqueColors.set(color, true);\n            row.push(color);\n            // If the color is not black, let's test the distance against currnet nearest color\n            if (color !== 0x000000) {\n                var dx = k - mouseX;\n                var dy = i - mouseY;\n                var testDistance = dx * dx + dy * dy;\n                if (testDistance < distance) {\n                    distance = testDistance;\n                    nearestColor = color;\n                }\n            }\n        }\n    }\n    // Apply all o fthe unique colors that were discovered within the rendering\n    pickingData.allColors = Array.from(uniqueColors.keys());\n    // The nearest color will be the element in the middle of the array of colors\n    pickingData.nearestColor = nearestColor;\n    return pickingData;\n}\nexports.analyzeColorPickingRendering = analyzeColorPickingRendering;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nvar maxPopulation = 5;\nvar maxDepth = 10;\n/**\n * This filters a quad tree query by type\n *\n * @export\n * @template T\n */\nfunction filterQuery(type, queryValues) {\n    var filtered = [];\n    queryValues.forEach(function (obj) {\n        if (type.find(function (t) { return obj instanceof t; })) {\n            filtered.push(obj);\n        }\n    });\n    return filtered;\n}\nexports.filterQuery = filterQuery;\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n *\n * @class Quadrants\n */\nvar Quadrants = /** @class */ (function () {\n    /**\n     * Creates an instance of Quadrants.\n     *\n     * @param bounds The bounds this will create quandrants for\n     * @param depth  The child depth of this element\n     *\n     * @memberOf Quadrants\n     */\n    function Quadrants(bounds, depth) {\n        var mid = bounds.mid;\n        this.TL = new Node(bounds.x, mid.x, bounds.y, mid.y, depth);\n        this.TR = new Node(mid.x, bounds.right, bounds.y, mid.y, depth);\n        this.BL = new Node(bounds.x, mid.x, mid.y, bounds.bottom, depth);\n        this.BR = new Node(mid.x, bounds.right, mid.y, bounds.bottom, depth);\n    }\n    /**\n     * Ensures all memory is released for all nodes and all references are removed\n     * to potentially high memory consumption items\n     *\n     * @memberOf Quadrants\n     */\n    Quadrants.prototype.destroy = function () {\n        this.TL.destroy();\n        this.TR.destroy();\n        this.BL.destroy();\n        this.BR.destroy();\n        delete this.TL;\n        delete this.TR;\n        delete this.BL;\n        delete this.BR;\n    };\n    return Quadrants;\n}());\nexports.Quadrants = Quadrants;\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n *\n * @export\n * @class Node\n */\nvar Node = /** @class */ (function () {\n    /**\n     * Creates an instance of Node.\n     *\n     * @param l     The bounding left wall of the space this node covers\n     * @param r     The bounding right wall of the space this node covers\n     * @param t     The bounding top wall of the space this node covers\n     * @param b     The bounding bottom wall of the space this node covers\n     * @param depth The depth within the quad tree this node resides\n     *\n     * @memberOf Node\n     */\n    function Node(left, right, top, bottom, depth) {\n        this.children = [];\n        this.depth = 0;\n        // If params insertted\n        if (arguments.length >= 4) {\n            this.bounds = new bounds_1.Bounds({\n                height: top - bottom,\n                width: right - left,\n                x: left,\n                y: top,\n            });\n        }\n        // Otherwise, make tiny start area\n        else {\n            this.bounds = new bounds_1.Bounds({\n                height: 1,\n                width: 1,\n                x: 0,\n                y: 0,\n            });\n        }\n        // Ensure the depth is set\n        this.depth = depth || 0;\n    }\n    /**\n     * Destroys this node and ensures all child nodes are destroyed as well.\n     *\n     * @memberOf Node\n     */\n    Node.prototype.destroy = function () {\n        delete this.children;\n        delete this.bounds;\n        if (this.nodes) {\n            this.nodes.destroy();\n            delete this.nodes;\n        }\n    };\n    /**\n     * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n     * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n     * this quad tree spans (and this is the root node), the quad tree will expand to include\n     * the new child.\n     *\n     * @param child The Bounds type object to inject\n     * @param props Properties that can be retrieved with the child object if applicable\n     *\n     * @returns True if the insertion was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.add = function (child, props) {\n        // This is the entry function for adding children, so we must first expand our top node\n        // To cover the area that the child is located.\n        // If we're in bounds, then let's just add the child\n        if (child.isInside(this.bounds)) {\n            return this.doAdd(child);\n        }\n        // Otherwise, we need to expand first\n        else {\n            this.cover(child);\n            return this.add(child, props);\n        }\n    };\n    /**\n     * Adds a list of new children to this quad tree. It performs the same operations as\n     * addChild for each child in the list, however, it more efficiently recalculates the\n     * bounds necessary to cover the area the children cover.\n     *\n     * @param children      List of Bounds objects to inject\n     * @param childrenProps List of props to associate with each element\n     *\n     * @memberOf Node\n     */\n    Node.prototype.addAll = function (children, childrenProps) {\n        var _this = this;\n        // Ensure the properties are at least defined\n        childrenProps = childrenProps || [];\n        // Make sure we cover the entire area of all the children.\n        // We can speed this up a lot if we first calculate the total bounds the new children covers\n        var minX = Number.MAX_VALUE;\n        var minY = Number.MAX_VALUE;\n        var maxX = -Number.MAX_VALUE;\n        var maxY = -Number.MAX_VALUE;\n        // Get the dimensions of the new bounds\n        children.forEach(function (child) {\n            if (child.x < minX) {\n                minX = child.x;\n            }\n            if (child.right > maxX) {\n                maxX = child.right;\n            }\n            if (child.bottom > maxY) {\n                maxY = child.bottom;\n            }\n            if (child.y < minY) {\n                minY = child.y;\n            }\n        });\n        // Make sure our bounds includes the specified bounds\n        this.cover(new bounds_1.Bounds({\n            height: maxY - minY,\n            width: maxX - minX,\n            x: minX,\n            y: minY,\n        }));\n        // Add all of the children into the tree\n        children.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n     * This will cause all children to be re-injected into the tree.\n     *\n     * @param bounds The bounds to include in the tree's coverage\n     *\n     * @memberOf Node\n     */\n    Node.prototype.cover = function (bounds) {\n        var _this = this;\n        // If we are already covering the area: abort\n        if (bounds.isInside(this.bounds)) {\n            return;\n        }\n        // Make our bounds cover the new area\n        this.bounds.encapsulate(bounds);\n        this.bounds.x -= 1;\n        this.bounds.y -= 1;\n        this.bounds.width += 2;\n        this.bounds.height += 4;\n        // Get all of the children underneath this node\n        var allChildren = this.gatherChildren([]);\n        // Destroy the split nodes\n        if (this.nodes) {\n            // Completely...destroy...\n            this.nodes.destroy();\n            delete this.nodes;\n        }\n        // Reinsert all children with the new dimensions in place\n        allChildren.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * When adding children, this performs the actual action of injecting the child into the tree\n     * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n     *\n     * @param child The Bounds item to inject into the tree\n     * @param props The props to remain associated with the child\n     *\n     * @returns True if the injection was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.doAdd = function (child) {\n        // If nodes are present, then we have already exceeded the population of this node\n        if (this.nodes) {\n            if (child.isInside(this.nodes.TL.bounds)) {\n                return this.nodes.TL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.TR.bounds)) {\n                return this.nodes.TR.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BL.bounds)) {\n                return this.nodes.BL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BR.bounds)) {\n                return this.nodes.BR.doAdd(child);\n            }\n            // Otherwise, this is a child overlapping this border\n            this.children.push(child);\n            return true;\n        }\n        // Otherwise, we have not had a split due to population limits being exceeded\n        else if (child.isInside(this.bounds)) {\n            this.children.push(child);\n            // If we exceeded our population for this quadrant, it is time to split up\n            if (this.children.length > maxPopulation && this.depth < maxDepth) {\n                this.split();\n            }\n            return true;\n        }\n        // This is when there is something wrong with the insertted child. The bounds\n        // For the quad should have grown without issue, but in this case the bounds\n        // Could not grow to accomodate the child.\n        if (isNaN(child.width + child.height + child.x + child.y)) {\n            console.error('Child did not fit into bounds because a dimension is NaN', child);\n        }\n        else if (child.area === 0) {\n            console.error('Child did not fit into bounds because the area is zero', child);\n        }\n        // Don't insert the child and continue\n        return true;\n    };\n    /**\n     * Collects all children of all the current and sub nodes into a single list.\n     *\n     * @param list The list we must aggregate children into\n     *\n     * @return The list specified as the list parameter\n     */\n    Node.prototype.gatherChildren = function (list) {\n        list = list.concat(this.children);\n        if (this.nodes) {\n            this.nodes.TL.gatherChildren(list);\n            this.nodes.TR.gatherChildren(list);\n            this.nodes.BL.gatherChildren(list);\n            this.nodes.BR.gatherChildren(list);\n        }\n        return list;\n    };\n    /**\n     * Entry query for determining query type based on input object\n     *\n     * @param bounds Can be a Bounds or a Point object\n     * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n     *               information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return An array of children that intersects with the query\n     */\n    Node.prototype.query = function (bounds, visit) {\n        // Query a rectangle\n        if (bounds instanceof bounds_1.Bounds) {\n            if (bounds.hitBounds(this.bounds)) {\n                return this.queryBounds(bounds, [], visit);\n            }\n            // Return an empty array when nothing is collided with\n            return [];\n        }\n        // Query a point\n        if (this.bounds.containsPoint(bounds)) {\n            return this.queryPoint(bounds, [], visit);\n        }\n        // Return an empty array when nothing is collided with\n        return [];\n    };\n    /**\n     * Queries children for intersection with a bounds object\n     *\n     * @param b     The Bounds to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return     Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryBounds = function (b, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.hitBounds(b)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (b.hitBounds(this.nodes.TL.bounds)) {\n                this.nodes.TL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.TR.bounds)) {\n                this.nodes.TR.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BL.bounds)) {\n                this.nodes.BL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BR.bounds)) {\n                this.nodes.BR.queryBounds(b, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Queries children for intersection with a point\n     *\n     * @param p     The Point to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return      Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryPoint = function (p, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.containsPoint(p)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (this.nodes.TL.bounds.containsPoint(p)) {\n                this.nodes.TL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.TR.bounds.containsPoint(p)) {\n                this.nodes.TR.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BL.bounds.containsPoint(p)) {\n                this.nodes.BL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BR.bounds.containsPoint(p)) {\n                this.nodes.BR.queryPoint(p, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Creates four sub quadrants for this node.\n     */\n    Node.prototype.split = function () {\n        // Gather all items to be handed down\n        var allChildren = this.gatherChildren([]);\n        // Gather all props for the children to be handed down as well\n        this.nodes = new Quadrants(this.bounds, this.depth + 1);\n        this.children = [];\n        while (allChildren.length > 0) {\n            var child = allChildren.pop();\n            if (child)\n                this.doAdd(child);\n        }\n    };\n    /**\n     * Traverses the quad tree returning every quadrant encountered\n     *\n     * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n     */\n    Node.prototype.visit = function (cb) {\n        var finished = Boolean(cb(this));\n        if (this.nodes && !finished) {\n            this.nodes.TL.visit(cb);\n            this.nodes.TR.visit(cb);\n            this.nodes.BL.visit(cb);\n            this.nodes.BR.visit(cb);\n        }\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar QuadTree = /** @class */ (function (_super) {\n    __extends(QuadTree, _super);\n    function QuadTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return QuadTree;\n}(Node));\nexports.QuadTree = QuadTree;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar data_bounds_1 = require(\"../util/data-bounds\");\nfunction value(val, ref, scaleRatio) {\n    var parse = \"\" + val;\n    var num = parseFloat(parse);\n    if (isNaN(num)) {\n        return 0;\n    }\n    // If this is a percentage use the reference as the num to multiply against\n    if (parse.indexOf('%') > -1) {\n        return (num / 100.0) * ref;\n    }\n    return num * scaleRatio;\n}\n/**\n * This evaluates an absolute position with a reference to produce meaningful bounds.\n *\n * The scaleRatio provided should be available in or for percents to have the same weighting\n * as whole number values.\n */\nfunction getAbsolutePositionBounds(item, reference, scaleRatio) {\n    if (reference.width === 0 || reference.height === 0) {\n        console.warn('An AbsolutePosition evaluated to invalid dimensions.', 'Please ensure that the object provided and the reference has valid dimensions', 'to produce dimensions with width and height that are non-zero.', 'item:', item, 'reference:', reference.toString());\n    }\n    var bounds = data_bounds_1.DataBounds.emptyBounds();\n    var width;\n    var height;\n    // Calculate the horizontal values\n    if (item.width) {\n        bounds.width = value(item.width, reference.width, scaleRatio);\n        if (item.left !== undefined) {\n            bounds.x = value(item.left, reference.width, scaleRatio);\n        }\n        else if (item.right !== undefined) {\n            bounds.x = reference.width - value(item.right, reference.width, scaleRatio) - bounds.width;\n        }\n    }\n    else {\n        var left = value(item.left || 0, reference.width, scaleRatio);\n        var right = reference.width - value(item.right || 0, reference.width, scaleRatio);\n        width = right - left;\n        if (width < 0) {\n            console.warn('An AbsolutePosition evaluated to invalid dimensions.', 'Please ensure that the object provided and the reference has valid dimensions', 'to produce dimensions with width and height that are greater than zero.', 'item:', item, 'reference:', reference.toString());\n        }\n        bounds.x = left;\n        bounds.width = width;\n    }\n    // Calculate the vertical values\n    if (item.height) {\n        bounds.height = value(item.height, reference.height, scaleRatio);\n        if (item.top !== undefined) {\n            bounds.y = value(item.top, reference.height, scaleRatio);\n        }\n        else if (item.bottom !== undefined) {\n            bounds.y = reference.height - value(item.bottom, reference.height, scaleRatio) - bounds.height;\n        }\n    }\n    else {\n        var top_1 = value(item.top || 0, reference.height, scaleRatio);\n        var bottom = reference.height - value(item.bottom || 0, reference.height, scaleRatio);\n        height = bottom - top_1;\n        if (height === undefined || height < 0) {\n            console.warn('An AbsolutePosition evaluated to invalid dimensions.', 'Please ensure that the object provided and the reference has valid dimensions', 'to produce dimensions with width and height that are greater than zero.', 'item:', item, 'reference:', reference.toString());\n        }\n        bounds.y = top_1;\n        bounds.height = height;\n    }\n    if (bounds.width === 0 || bounds.height === 0 || isNaN(bounds.x + bounds.y + bounds.width + bounds.height)) {\n        bounds.x = 0;\n        bounds.y = 0;\n        bounds.width = reference.width;\n        bounds.height = reference.height;\n    }\n    return bounds;\n}\nexports.getAbsolutePositionBounds = getAbsolutePositionBounds;\n","module.exports = \"// This portion is where the shader assigns the picking color that gets passed to the fragment shader\\n  _picking_color_pass_ = _pickingColor;\\n\"","module.exports = \"lowp vec4 setColor(vec4 color) {\\n  gl_FragColor = color;\\n  return gl_FragColor;\\n}\\n\"","module.exports = \"precision lowp float;\\n\\n// This contains the method required to be used on a fragment shader when a layer desires to use\\n// PickType.SINGLE (color picking).\\nvarying vec4 _picking_color_pass_;\\n\\nvec4 setColor(vec4 color) {\\n  gl_FragColor = mix(color, _picking_color_pass_, pickingActive);\\n\\n  if (color.a == 0.0) {\\n    discard;\\n  }\\n\\n  return gl_FragColor;\\n}\\n\"","module.exports = \"// This is the varying auto generated for the fragment shader that is needed in the vertex shader to pass the\\n// color for the instance through to the fragment shader\\nvarying vec4 _picking_color_pass_;\\n\"","module.exports = \"// These are projection methods utilizing the simpler camera breakdown approach\\n\\nvec3 cameraSpace(vec3 world) {\\n  return (world + cameraOffset) * cameraScale;\\n}\\n\\nvec3 cameraSpaceSize(vec3 worldSize) {\\n  return worldSize * cameraScale;\\n}\\n\\nvec4 clipSpace(vec3 world) {\\n  return vec4(((projection * modelView) * vec4(cameraSpace(world), 1.0)).xyz, 1.0);\\n}\\n\\nvec4 clipSpaceSize(vec3 worldSize) {\\n  return vec4(((projection * modelView) * vec4(cameraSpaceSize(worldSize), 0.0)).xyz, 1.0);\\n}\\n\"","module.exports = \"// When instancing is enabled, it causes a major list of uniforms to be generated\\n// it also generates a massive search tree to retrieve the correct unforms in question.\\n${instanceUniformDeclarations}\\n\\n// This is the uniforms provided by the system along with the uniforms created by the layer\\n${layerUniforms}\\n\\n// This is the attributes generated for vertex attributes\\n${vertexAttributes}\\n\\n// This is the methods and set up needed to retrieve a block of data for an instance\\n${instanceDataRetrieval}\\n\\n// This is the methods generated for the automated easing of attributes\\n${easingMethods}\\n\"","module.exports = \"// This is the injected dereferencing of the instance attributes\\n  int instanceIndex = int(instance);\\n  ${instanceDestructuring}\\n\\n  // This is a special injected instance attribute. It lets the system\\n  // control specific instances ability to draw, which allows the backend\\n  // system greater control on how it optimizes draw calls and it's buffers.\\n  if (_active == 0.0) {\\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n\\n    // Quick exit to prevent any geometry from arising from the instance\\n    return;\\n  }\\n\\n  ${picking}\\n\"","module.exports = \"precision highp float;\\n\\n// This is the fragment shader generated by the system\\n${layerUniforms}\\n\\n${picking}\\n\\n// --------------- The fragment shader provided by the layer ------------------\\n${shader}\\n\"","module.exports = \"// This is the vertex shader generated by the system\\n${shaderInput}\\n${projectionMethods}\\n${picking}\\n// --------------- Vertex shader provided by the layer -----------------\\n${shader}\\n\"","module.exports = \"int instanceSize = ${instanceBlockCount};\\n\\nvec4 getBlock(int index, int instanceIndex) {\\n  return instanceData[(instanceSize * instanceIndex) + index];\\n}\\n\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar types_1 = require(\"../../types\");\nvar auto_easing_method_1 = require(\"../../util/auto-easing-method\");\nvar make_instance_uniform_name_1 = require(\"../../util/make-instance-uniform-name\");\nvar shader_templating_1 = require(\"../../util/shader-templating\");\nvar template_vars_1 = require(\"../fragments/template-vars\");\nvar instanceRetrievalArrayFragment = require('../fragments/instance-retrieval-array.vs');\n/** Defines the elements for destructuring out of a vector */\nvar VECTOR_COMPONENTS = ['x', 'y', 'z', 'w'];\n/** Converts a size to a shader type */\nvar sizeToType = {\n    1: 'float',\n    2: 'vec2',\n    3: 'vec3',\n    4: 'vec4',\n    9: 'mat3',\n    16: 'mat4',\n    /** This is the special case for instance attributes that want an atlas resource */\n    99: 'vec4',\n};\n/**\n * This sorts attributes specific to how they need to be destructured. For example:\n * easing attributes MUST appear AFTER all of the specially integrated attributes that were generated\n * such as start times and durations.\n */\nfunction orderByPriority(a, b) {\n    if (a.easing && !b.easing)\n        return 1;\n    return -1;\n}\nfunction makeUniformArrayDeclaration(totalBlocks) {\n    return {\n        fragment: \"uniform vec4 \" + make_instance_uniform_name_1.makeInstanceUniformNameArray() + \"[\" + totalBlocks + \"];\",\n        materialUniforms: [\n            {\n                name: make_instance_uniform_name_1.makeInstanceUniformNameArray(),\n                type: '4fv',\n                value: new Array(totalBlocks)\n                    .fill(0)\n                    .map(function () { return new Three.Vector4(0, 0, 0, 0); }),\n            },\n        ],\n    };\n}\nexports.makeUniformArrayDeclaration = makeUniformArrayDeclaration;\nfunction makeInstanceRetrievalArray(blocksPerInstance) {\n    var templateOptions = {};\n    templateOptions[template_vars_1.templateVars.instanceBlockCount] = \"\" + blocksPerInstance;\n    var required = {\n        name: 'makeInstanceRetrievalArray',\n        values: [\n            template_vars_1.templateVars.instanceBlockCount,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(instanceRetrievalArrayFragment, templateOptions, required);\n    return results.shader;\n}\nexports.makeInstanceRetrievalArray = makeInstanceRetrievalArray;\nfunction makeInstanceDestructuringArray(instanceAttributes, blocksPerInstance) {\n    var out = '';\n    var orderedAttributes = instanceAttributes.slice(0).sort(orderByPriority);\n    // Generate the blocks\n    for (var i = 0; i < blocksPerInstance; ++i) {\n        out += \"  vec4 block\" + i + \" = getBlock(\" + i + \", instanceIndex);\\n\";\n    }\n    orderedAttributes.forEach(function (attribute) {\n        var block = attribute.block;\n        // If this is the source easing attribute, we must add it in as an eased method along with a calculation for the\n        // Easing interpolation time value based on the current time and the injected start time of the change.\n        if (attribute.easing && attribute.size) {\n            if (attribute.size === types_1.InstanceAttributeSize.FOUR) {\n                out += \"  \" + sizeToType[attribute.size] + \" _\" + attribute.name + \"_end = block\" + block + \";\\n\";\n            }\n            else {\n                out += \"  \" + sizeToType[attribute.size || 1] + \" _\" + attribute.name + \"_end = block\" + block + \".\" + makeVectorSwizzle(attribute.blockIndex || 0, attribute.size || 1) + \";\\n\";\n            }\n            switch (attribute.easing.loop) {\n                // Repeat means going from 0 to 1 then 0 to 1 etc etc\n                case auto_easing_method_1.AutoEasingLoopStyle.REPEAT:\n                    out += \"  float _\" + attribute.name + \"_time = clamp(fract((currentTime - _\" + attribute.name + \"_start_time) / _\" + attribute.name + \"_duration), 0.0, 1.0);\\n\";\n                    break;\n                // Reflect means going from 0 to 1 then 1 to 0 then 0 to 1 etc etc\n                case auto_easing_method_1.AutoEasingLoopStyle.REFLECT:\n                    // Get the time passed in a linear fashion\n                    out += \"  float _\" + attribute.name + \"_timePassed = (currentTime - _\" + attribute.name + \"_start_time) / _\" + attribute.name + \"_duration;\\n\";\n                    // Make a triangle wave from the time passed to ping pong the value\n                    out += \"  float _\" + attribute.name + \"_pingPong = abs((fract(_\" + attribute.name + \"_timePassed / 2.0)) - 0.5) * 2.0;\\n\";\n                    // Ensure we're clamped to the right values\n                    out += \"  float _\" + attribute.name + \"_time = clamp(_\" + attribute.name + \"_pingPong, 0.0, 1.0);\\n\";\n                    break;\n                // No loop means just linear time\n                case auto_easing_method_1.AutoEasingLoopStyle.NONE:\n                default:\n                    out += \"  float _\" + attribute.name + \"_time = clamp((currentTime - _\" + attribute.name + \"_start_time) / _\" + attribute.name + \"_duration, 0.0, 1.0);\\n\";\n                    break;\n            }\n            out += \"  \" + sizeToType[attribute.size] + \" \" + attribute.name + \" = \" + attribute.easing.methodName + \"(_\" + attribute.name + \"_start, _\" + attribute.name + \"_end, _\" + attribute.name + \"_time);\\n\";\n        }\n        // If we have a size the size of a block, then don't swizzle the vector\n        else if (attribute.size === types_1.InstanceAttributeSize.FOUR) {\n            out += \"  \" + sizeToType[attribute.size] + \" \" + attribute.name + \" = block\" + block + \";\\n\";\n        }\n        // If the attribute is an atlas, then we use the special ATLAS size and don't swizzle the vector\n        else if (attribute.atlas) {\n            out += \"  \" + sizeToType[types_1.InstanceAttributeSize.ATLAS] + \" \" + attribute.name + \" = block\" + block + \";\\n\";\n        }\n        // Do normal destructuring with any other size and type\n        else {\n            out += \"  \" + sizeToType[attribute.size || 1] + \" \" + attribute.name + \" = block\" + block + \".\" + makeVectorSwizzle(attribute.blockIndex || 0, attribute.size || 1) + \";\\n\";\n        }\n    });\n    return out;\n}\nexports.makeInstanceDestructuringArray = makeInstanceDestructuringArray;\nfunction makeVectorSwizzle(start, size) {\n    return VECTOR_COMPONENTS.slice(start, start + size).join('');\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../../types\");\nvar shader_templating_1 = require(\"../../util/shader-templating\");\nvar webgl_stat_1 = require(\"../../util/webgl-stat\");\nvar template_vars_1 = require(\"../fragments/template-vars\");\nvar uniform_instance_block_array_1 = require(\"./uniform-instance-block-array\");\n// These are all of the necessary fragments that will comprise our shader that is generated\nvar vertexShaderComposition = require('../fragments/vertex-shader-composition.vs');\nvar fragmentShaderComposition = require('../fragments/fragment-shader-composition.fs');\nvar instanceDestructuringArray = require('../fragments/instance-destructuring-array.vs');\nvar shaderInput = require('../fragments/shader-input.vs');\nvar projectionMethods = require('../fragments/projection-methods.vs');\n// Constants\n/**\n * Defines how many floats are available in a uniform block\n * What is a uniform block you ask? Why let me tell you! It is how opengl stores and communicates uniforms\n * to the GPU. Whenever you declare a uniform, it will use a hunk of memory. You can see how many uniforms\n * a GPU can have via the paramter MAX_VERTEX_UNIFORM_VECTORS. The number returned is the number of blocks\n * we can use for uniforms in the vertex shader. A BLOCK is an entire vec4.\n *\n * When you declare a uniform in your shader, it will use an entire BLOCK at the MINIMUM.\n *\n * A uniform float uses 1 block. vec2 uses 1 block. vec3 uses one block. vec4 uses one block.\n * mat4 uses 4 blocks. mat3 uses 3 blocks.\n *\n * etc etc.\n */\nvar MAX_USE_PER_BLOCK = 4;\n/** Converts a size to a shader type */\nvar sizeToType = {\n    1: 'float',\n    2: 'vec2',\n    3: 'vec3',\n    4: 'vec4',\n    9: 'mat3',\n    16: 'mat4',\n    99: 'sampler2D',\n};\nfunction calculateUniformBlockUseage(uniforms) {\n    var count = 0;\n    for (var i = 0, end = uniforms.length; i < end; ++i) {\n        count += Math.ceil(uniforms[i].size / 4);\n    }\n    return count;\n}\n/**\n * This method is the main algorithm for piecing together all of the attributes necessary\n * and injecting them into the shaders.\n *\n * @param shaders\n * @param vertexAttributes\n * @param instanceAttributes\n */\nfunction injectFragments(layer, shaders, vertexAttributes, instanceAttributes, uniforms) {\n    var shaderInputMetrics = generateShaderInputs(layer, vertexAttributes, instanceAttributes, uniforms);\n    var templateOptions = (_a = {},\n        _a[template_vars_1.templateVars.projectionMethods] = generateProjectionMethods(),\n        _a[template_vars_1.templateVars.picking] = generateVertexPicking(layer),\n        _a[template_vars_1.templateVars.shaderInput] = shaderInputMetrics.fragment,\n        _a[template_vars_1.templateVars.shader] = generateVertexShader(layer, shaders, instanceAttributes, shaderInputMetrics.metrics.maxInstancesPerBuffer, shaderInputMetrics.metrics.blocksPerInstance),\n        _a);\n    var required = {\n        name: 'vertex shader composition',\n        values: [\n            template_vars_1.templateVars.projectionMethods,\n            template_vars_1.templateVars.shaderInput,\n            template_vars_1.templateVars.shader,\n        ],\n    };\n    // If our layer is using color picking, then we must require the shader to include the ${picking} annotation\n    // To receive the fragment picking method\n    if (layer.picking.type === types_1.PickType.SINGLE) {\n        required.values.push(template_vars_1.templateVars.picking);\n    }\n    var vertexShaderResults = shader_templating_1.shaderTemplate(vertexShaderComposition, templateOptions, required);\n    templateOptions = (_b = {},\n        _b[template_vars_1.templateVars.layerUniforms] = generateUniforms(uniforms, types_1.ShaderInjectionTarget.FRAGMENT),\n        _b[template_vars_1.templateVars.shader] = generateFragmentShader(shaders),\n        _b[template_vars_1.templateVars.picking] = generateFragmentPickingMethod(layer),\n        _b);\n    required = {\n        name: 'fragment shader composition',\n        values: [\n            template_vars_1.templateVars.layerUniforms,\n            template_vars_1.templateVars.shader,\n        ],\n    };\n    // If our layer is using color picking, then we must require the shader to include the ${picking} annotation\n    // To receive the fragment picking method\n    if (layer.picking.type === types_1.PickType.SINGLE) {\n        required.values.push(template_vars_1.templateVars.picking);\n    }\n    var fragmentShaderResults = shader_templating_1.shaderTemplate(fragmentShaderComposition, templateOptions, required);\n    return {\n        fs: fragmentShaderResults.shader,\n        materialUniforms: shaderInputMetrics.materialUniforms,\n        maxInstancesPerBuffer: shaderInputMetrics.metrics.maxInstancesPerBuffer,\n        vs: vertexShaderResults.shader,\n    };\n    var _a, _b;\n}\nexports.injectFragments = injectFragments;\n/**\n * Creates the projection method fragment\n */\nfunction generateProjectionMethods() {\n    var templateOptions = {};\n    var required = {\n        name: 'projection methods',\n        values: [],\n    };\n    var results = shader_templating_1.shaderTemplate(projectionMethods, templateOptions, required);\n    return results.shader;\n}\n/**\n * Generates the fragments for shader IO such as vertex and instance attributes\n */\nfunction generateShaderInputs(layer, vertexAttributes, instanceAttributes, uniforms) {\n    var templateOptions = {};\n    var instancingInfo = generateInstanceDataLookupOptions(layer, templateOptions, instanceAttributes, uniforms);\n    var additionalOptions = (_a = {},\n        _a[template_vars_1.templateVars.layerUniforms] = generateUniforms(uniforms, types_1.ShaderInjectionTarget.VERTEX),\n        _a[template_vars_1.templateVars.vertexAttributes] = generateVertexAttributes(vertexAttributes),\n        _a[template_vars_1.templateVars.easingMethods] = generateEasingMethods(instanceAttributes),\n        _a);\n    Object.assign(templateOptions, additionalOptions);\n    var required = {\n        name: 'shader input',\n        values: [\n            template_vars_1.templateVars.instanceDataRetrieval,\n            template_vars_1.templateVars.instanceUniformDeclarations,\n            template_vars_1.templateVars.layerUniforms,\n            template_vars_1.templateVars.vertexAttributes,\n            template_vars_1.templateVars.easingMethods,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(shaderInput, templateOptions, required);\n    return {\n        fragment: results.shader,\n        materialUniforms: instancingInfo.materialUniforms,\n        metrics: instancingInfo.metrics,\n    };\n    var _a;\n}\n/**\n * Generates the easing methods for the Shader specified by each attribute\n */\nfunction generateEasingMethods(instanceAttributes) {\n    var methods = new Map();\n    var out = '';\n    // First dedupe the methods needed by their method name\n    instanceAttributes.forEach(function (attribute) {\n        if (attribute.easing && attribute.size) {\n            var methodSizes = methods.get(attribute.easing.methodName);\n            if (!methodSizes) {\n                methodSizes = new Map();\n                methods.set(attribute.easing.methodName, methodSizes);\n            }\n            methodSizes.set(attribute.size, attribute.easing.gpu);\n        }\n    });\n    var required = {\n        name: 'Easing Method Generation',\n        values: [\n            template_vars_1.templateVars.easingMethod,\n        ],\n    };\n    // Now generate the full blown method for each element. We create overloaded methods for\n    // Each method name for each vector size required\n    methods.forEach(function (methodSizes, methodName) {\n        methodSizes.forEach(function (method, size) {\n            var sizeType = sizeToType[size];\n            var templateOptions = (_a = {},\n                _a[template_vars_1.templateVars.easingMethod] = sizeType + \" \" + methodName + \"(\" + sizeType + \" start, \" + sizeType + \" end, float t)\",\n                _a);\n            var results = shader_templating_1.shaderTemplate(method, templateOptions, required);\n            out += results.shader + \"\\n\";\n            var _a;\n        });\n    });\n    return out;\n}\n/**\n * Generates all of the uniforms that are provided by the shader IO.\n */\nfunction generateUniforms(uniforms, injectionType) {\n    var out = '';\n    var injection = injectionType || types_1.ShaderInjectionTarget.VERTEX;\n    uniforms.forEach(function (uniform) {\n        uniform.shaderInjection = uniform.shaderInjection || types_1.ShaderInjectionTarget.VERTEX;\n        if (uniform.shaderInjection === injection || uniform.shaderInjection === types_1.ShaderInjectionTarget.ALL) {\n            out += \"uniform \" + (uniform.qualifier || '') + (uniform.qualifier ? ' ' : '') + sizeToType[uniform.size] + \" \" + uniform.name + \";\\n\";\n        }\n    });\n    return out;\n}\n/**\n * This takes in the layer's vertex shader and transforms any required templating within the\n * shader.\n */\nfunction generateVertexShader(layer, shaders, instanceAttributes, maxInstancesPerBuffer, blocksPerInstance) {\n    var templateOptions = (_a = {},\n        _a[template_vars_1.templateVars.attributes] = makeInstanceAttributeReferences(layer, instanceAttributes, blocksPerInstance),\n        _a);\n    var required = {\n        name: 'layer vertex shader',\n        values: [\n            template_vars_1.templateVars.attributes,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(shaders.vs, templateOptions, required);\n    return results.shader;\n    var _a;\n}\n/**\n * This generates the header portion required for vertex picking to work\n */\nfunction generateVertexPicking(layer) {\n    if (layer.picking.type === types_1.PickType.SINGLE) {\n        return require('../fragments/color-picking-vertex-header.vs');\n    }\n    return '';\n}\n/**\n * This generates the fragment that defines the picking methods\n */\nfunction generateFragmentPickingMethod(layer) {\n    if (layer.picking.type === types_1.PickType.SINGLE) {\n        return require('../fragments/color-picking-method.fs');\n    }\n    return require('../fragments/color-picking-disabled.fs');\n}\nfunction generateFragmentShader(shaders) {\n    var templateOptions = {};\n    var required = {\n        name: 'layer fragment shader',\n        values: [],\n    };\n    var results = shader_templating_1.shaderTemplate(shaders.fs, templateOptions, required);\n    return results.shader;\n}\n/**\n * This generates the inline attribute references needed to be able to reference instance attribute\n * vars.\n */\nfunction makeInstanceAttributeReferences(layer, instanceAttributes, blocksPerInstance) {\n    var templateOptions = {};\n    templateOptions[template_vars_1.templateVars.blocksPerInstance] = \"\" + blocksPerInstance;\n    templateOptions[template_vars_1.templateVars.instanceDestructuring] = makeInstanceDestructuring(instanceAttributes, blocksPerInstance);\n    templateOptions[template_vars_1.templateVars.picking] = makePickingDestructuring(layer);\n    var required = {\n        name: 'instance attributes fragment',\n        values: [\n            template_vars_1.templateVars.instanceDestructuring,\n        ],\n    };\n    // If picking is enabled, then we require the picking set up that we inject into the destructuring portion\n    // Of the shader\n    if (layer.picking.type === types_1.PickType.SINGLE) {\n        required.values.push(template_vars_1.templateVars.picking);\n    }\n    var results = shader_templating_1.shaderTemplate(instanceDestructuringArray, templateOptions, required);\n    return results.shader;\n}\n/**\n * This generates an in method destructuring pattern to make instance attributes available within a method.\n */\nfunction makeInstanceDestructuring(instanceAttributes, blocksPerInstance) {\n    return uniform_instance_block_array_1.makeInstanceDestructuringArray(instanceAttributes, blocksPerInstance);\n}\n/**\n * This generates the portion of picking logic that is injected into the destructuring portion of the shader\n */\nfunction makePickingDestructuring(layer) {\n    if (layer.picking.type === types_1.PickType.SINGLE) {\n        return require('../fragments/color-picking-assignment.vs');\n    }\n    return '';\n}\n/**\n * This generates the model attribute declarations\n */\nfunction generateVertexAttributes(vertexAttributes) {\n    var out = '';\n    vertexAttributes.forEach(function (attribute) {\n        out += \"attribute \" + sizeToType[attribute.size] + \" \" + (attribute.qualifier || '') + ((attribute.qualifier && ' ') || '') + attribute.name + \";\\n\";\n    });\n    return out;\n}\n/**\n * This method generates the chunk of shader that is responsible for providing\n */\nfunction generateInstanceDataLookupOptions(layer, templateOptions, instanceAttributes, uniforms) {\n    // This is how many uniform blocks the current device can utilize in a shader\n    var maxUniforms = webgl_stat_1.WebGLStat.MAX_VERTEX_UNIFORMS;\n    // This reflects how many uniform blocks are available for instancing\n    var instanceUniformBlockCount = maxUniforms - calculateUniformBlockUseage(uniforms);\n    // Go through the attributes provided and calculate the number of blocks requested\n    // Also sort the attributes by block and pack the block useage down.\n    var sortedInstanceAttributes = instanceAttributes.slice(0).sort(function (a, b) { return a.block - b.block; });\n    var currentBlock = sortedInstanceAttributes[0].block;\n    var trueBlockIndex = 0;\n    // This tracks how much a block is used\n    var blockUseage = new Map();\n    var innerBlockUseage = new Map();\n    sortedInstanceAttributes.forEach(function (attribute) {\n        if (attribute.block !== currentBlock) {\n            currentBlock = attribute.block;\n            trueBlockIndex++;\n        }\n        var attributeSize = attribute.size || 1;\n        var oldUseage = blockUseage.get(trueBlockIndex) || 0;\n        var newUseage = oldUseage + attributeSize;\n        // Make sure the block isn't over used thus losing attribute information\n        if (newUseage > MAX_USE_PER_BLOCK) {\n            console.error(\"An instance attribute was specified that over fills the maximum allowed useage for a block.\", \"\\nSource Layer: \" + layer.id, \"\\nMax Allowed per block \" + MAX_USE_PER_BLOCK, \"\\nAttribute: \" + attribute.name + \" Block Specified: \" + attribute.block, \"\\nTotal blocks used with this attribute: \" + newUseage);\n            return;\n        }\n        // Store how much of the block is utilized\n        blockUseage.set(trueBlockIndex, newUseage);\n        // We can now auto specify the inner index of where the attribute lines up within the block\n        attribute.blockIndex = oldUseage;\n        // Now we examine the attributes request of use inside the block and make sure there is no\n        // Overlap\n        var innerUseage = innerBlockUseage.get(trueBlockIndex) || new Map();\n        if (attribute.blockIndex + attributeSize > MAX_USE_PER_BLOCK) {\n            console.error(\"An instance attribute was specified that would fill indices greater than the block allows.\", \"\\nMax index per block \" + MAX_USE_PER_BLOCK, \"\\nAttribute: \" + attribute.name + \" Block Index: \" + attribute.blockIndex + \" Size: \" + attribute.size + \" Block Index + Size: \" + (attribute.blockIndex + (attribute.size || 1)));\n            return;\n        }\n        for (var i = attribute.blockIndex; i < attribute.blockIndex + attributeSize; ++i) {\n            if (innerUseage.get(i)) {\n                console.error(\"An instance attribute was specified who's block index overaps another attributes useage\", \"\\nMax index per block \" + MAX_USE_PER_BLOCK, \"\\nAttribute: \" + attribute.name + \" Block Index: \" + attribute.blockIndex + \" Size: \" + attribute.size + \" Block Index + Size: \" + (attribute.blockIndex + (attribute.size || 1)));\n                return;\n            }\n        }\n        // Adjust the attribute to reflect the actual bock it is using\n        attribute.block = trueBlockIndex;\n    });\n    var blocksPerInstance = trueBlockIndex + 1;\n    // This determines how many instances our allowed uniforms will allow for a single draw call\n    var maxInstancesPerBuffer = Math.floor(instanceUniformBlockCount / blocksPerInstance);\n    // Generate the decision tree and uniform declarations\n    var instancingMetrics = makeUniformInstanceDataOptions(templateOptions, maxInstancesPerBuffer, blocksPerInstance, sortedInstanceAttributes);\n    return {\n        materialUniforms: instancingMetrics.materialUniforms,\n        metrics: {\n            blocksPerInstance: blocksPerInstance,\n            maxInstancesPerBuffer: maxInstancesPerBuffer,\n        },\n    };\n}\n/**\n * This generates all of the necessary templating information from uniform-instance-data\n * in order to provide an instance data getter for the application.\n */\nfunction makeUniformInstanceDataOptions(templateOptions, maxInstancesPerBuffer, blocksPerInstance, instanceAttributes) {\n    // Make a list containing all instance indicies that will be utilized and will be split\n    // Out into the decision tree\n    var instances = [];\n    for (var i = 0; i < maxInstancesPerBuffer; ++i) {\n        instances.push(i);\n    }\n    // Make the uniform declaration. Uniform declaration simultaneously gives us the material uniforms necessary\n    // To apply to our three material.\n    var uniformMetrics = makeInstanceUniformDeclaration(maxInstancesPerBuffer * blocksPerInstance, instanceAttributes);\n    templateOptions[template_vars_1.templateVars.instanceUniformDeclarations] = uniformMetrics.fragment;\n    templateOptions[template_vars_1.templateVars.instanceBlockCount] = \"\" + blocksPerInstance;\n    // This method produces the data retrieval method for array instancing\n    templateOptions[template_vars_1.templateVars.instanceDataRetrieval] = uniform_instance_block_array_1.makeInstanceRetrievalArray(blocksPerInstance);\n    return {\n        materialUniforms: uniformMetrics.materialUniforms,\n    };\n}\n/**\n * This generates the declaration of all of the individual uniform registers for instancing.\n */\nfunction makeInstanceUniformDeclaration(instanceUniformBlockCount, attributes) {\n    var out = '';\n    var blockQualifierDedup = new Map();\n    var maxBlock = 0;\n    // Dedup the attributes specified for the\n    attributes.forEach(function (attribute) {\n        var qualifiers = blockQualifierDedup.get(attribute.block) || new Map();\n        // Make sure the qualifier is added for the block!\n        if (attribute.qualifier) {\n            qualifiers.set(attribute.qualifier, true);\n        }\n        // Get the max block in use\n        maxBlock = Math.max(maxBlock, attribute.block);\n    });\n    // Generate the full string for the specified qualifiers\n    var blockQualifiers = new Map();\n    blockQualifierDedup.forEach(function (qualifierList, block) {\n        var allQualifiers = Array.from(qualifierList.keys());\n        blockQualifiers.set(block, allQualifiers.join(' ') + \" \");\n    });\n    // Generate our uniform declarations\n    // Const blockCount = maxBlock + 1;\n    // This method produces the instancing declaration for a search tree.\n    // *out += makeUniformDecisionTreeDeclarations(instanceUniformBlockCount, blockCount, blockQualifiers, materialUniforms);\n    // This method produces the instancing declaration for an instancing array\n    var declaration = uniform_instance_block_array_1.makeUniformArrayDeclaration(instanceUniformBlockCount);\n    out += declaration.fragment;\n    out += \"\\n\";\n    return {\n        fragment: out,\n        materialUniforms: declaration.materialUniforms,\n    };\n}\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar three_1 = require(\"three\");\nvar images_1 = require(\"../base-layers/images\");\nvar labels_1 = require(\"../base-layers/labels\");\nvar bounds_1 = require(\"../primitives/bounds\");\nvar attribute_generation_1 = require(\"../shaders/util/attribute-generation\");\nvar generate_default_scene_1 = require(\"../surface/generate-default-scene\");\nvar generate_layer_geometry_1 = require(\"../surface/generate-layer-geometry\");\nvar generate_layer_material_1 = require(\"../surface/generate-layer-material\");\nvar generate_layer_model_1 = require(\"../surface/generate-layer-model\");\nvar inject_shader_io_1 = require(\"../surface/inject-shader-io\");\nvar mouse_event_manager_1 = require(\"../surface/mouse-event-manager\");\nvar scene_1 = require(\"../surface/scene\");\nvar view_1 = require(\"../surface/view\");\nvar types_1 = require(\"../types\");\nvar color_picking_analysis_1 = require(\"../util/color-picking-analysis\");\nvar data_bounds_1 = require(\"../util/data-bounds\");\nvar instance_uniform_manager_1 = require(\"../util/instance-uniform-manager\");\nvar layer_mouse_events_1 = require(\"./event-managers/layer-mouse-events\");\nvar texture_1 = require(\"./texture\");\nvar atlas_resource_manager_1 = require(\"./texture/atlas-resource-manager\");\nvar DEFAULT_BACKGROUND_COLOR = new Three.Color(1.0, 1.0, 1.0);\nfunction isCanvas(val) {\n    return Boolean(val.getContext);\n}\nfunction isString(val) {\n    return Boolean(val.substr);\n}\nfunction isWebGLContext(val) {\n    return Boolean(val.canvas);\n}\n/**\n * Used for reactive layer generation and updates.\n */\nfunction createLayer(layerClass, props) {\n    return [layerClass, props];\n}\nexports.createLayer = createLayer;\n/**\n * This is a manager for layers. It will use voidgl layers to intelligently render resources\n * as efficiently as possible. Layers will be rendered in the order they are provided and this\n * surface will provide some basic camera controls by default.\n */\nvar LayerSurface = /** @class */ (function () {\n    function LayerSurface() {\n        /** This is the atlas manager that will help with modifying and tracking atlas' generated for the layers */\n        this.atlasManager = new texture_1.AtlasManager();\n        /** This is the current viewport the renderer state is in */\n        this.currentViewport = new Map();\n        /**\n         * This is the metrics of the current running frame\n         */\n        this.frameMetrics = {\n            currentFrame: 0,\n            currentTime: Date.now() | 0,\n            previousTime: Date.now() | 0,\n        };\n        /**\n         * This is used to help resolve concurrent draws. There are some very async operations that should\n         * not overlap in draw calls.\n         */\n        this.isBufferingAtlas = false;\n        /** This is all of the layers in this manager by their id */\n        this.layers = new Map();\n        /** This is the density the rendering renders for the surface */\n        this.pixelRatio = window.devicePixelRatio;\n        /**\n         * This is all of the available scenes and their views for this surface. Layers reference the IDs\n         * of the scenes and the views to be a part of their rendering state.\n         */\n        this.scenes = new Map();\n        /**\n         * This is all of the views currently generated for this surface paired with the scene they render.\n         */\n        this.sceneViews = [];\n        /**\n         * This flags all layers by id for disposal at the end of every render. A Layer must be recreated\n         * after each render in order to clear it's disposal flag. This is the trick to making this a\n         * reactive system.\n         */\n        this.willDisposeLayer = new Map();\n    }\n    Object.defineProperty(LayerSurface.prototype, \"gl\", {\n        /** Read only getter for the gl context */\n        get: function () {\n            return this.context;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This adds a layer to the manager which will manage all of the resource lifecycles of the layer\n     * as well as additional helper injections to aid in instancing and shader i/o.\n     */\n    LayerSurface.prototype.addLayer = function (layer) {\n        if (!layer.id) {\n            console.warn('All layers must have an id');\n            return layer;\n        }\n        if (this.layers.get(layer.id)) {\n            console.warn('All layer\\'s ids must be unique per layer manager');\n            return layer;\n        }\n        // We add the layer to our management\n        this.layers.set(layer.id, layer);\n        // Now we initialize the layer's gl components\n        this.initLayer(layer);\n        return layer;\n    };\n    /**\n     * The performs all of the needed updates that layers need to commit to the scene and buffers\n     * to be ready for a draw pass. This is callable outside of the draw loop to allow for specialized\n     * procedures or optimizations to take place, where incremental updates to the buffers would make\n     * the most sense.\n     *\n     * @param time The start time of the given frame\n     * @param frameIncrement When true, the frame count for the frame metrics will increment\n     * @param onViewReady Callback for when all of the layers of a scene view have been committed\n     *                    and are thus potentially ready to be rendered.\n     */\n    LayerSurface.prototype.commit = function (time, frameIncrement, onViewReady) {\n        return __awaiter(this, void 0, void 0, function () {\n            var scenes, i, end, scene, views, layers, k, endk, view, pickingPass, j, endj, layer;\n            return __generator(this, function (_a) {\n                if (!this.gl)\n                    return [2 /*return*/];\n                // We are rendering a new frame so increment our frame count\n                if (frameIncrement)\n                    this.frameMetrics.currentFrame++;\n                this.frameMetrics.previousTime = this.frameMetrics.currentTime;\n                // If no manual time was provided, we shall use Date.now in 32 bit format\n                if (time === undefined) {\n                    this.frameMetrics.currentTime = Date.now() | 0;\n                }\n                else {\n                    // If this is our first frame and we have a manual time entry, then we first need to sync up\n                    // The manual time as our previous timing.\n                    if (this.frameMetrics.previousTime === this.frameMetrics.currentTime) {\n                        this.frameMetrics.previousTime = time;\n                    }\n                    this.frameMetrics.currentTime = time;\n                }\n                scenes = Array.from(this.scenes.values());\n                // Loop through scenes\n                for (i = 0, end = scenes.length; i < end; ++i) {\n                    scene = scenes[i];\n                    views = Array.from(scene.viewById.values());\n                    layers = scene.layers;\n                    // Make sure the layers are depth sorted\n                    scene.sortLayers();\n                    // Loop through the views\n                    for (k = 0, endk = views.length; k < endk; ++k) {\n                        view = views[k];\n                        pickingPass = [];\n                        // We must perform any operations necessary to make the view camera fit the viewport\n                        // Correctly\n                        view.fitViewtoViewport(new bounds_1.Bounds({\n                            height: this.context.canvas.height,\n                            width: this.context.canvas.width,\n                            x: 0,\n                            y: 0,\n                        }));\n                        // Let the layers update their uniforms before the draw\n                        for (j = 0, endj = layers.length; j < endj; ++j) {\n                            layer = layers[j];\n                            // Update the layer with the view it is about to be rendered with\n                            layer.view = view;\n                            // Make sure the layer is given the opportunity to update all of it's uniforms\n                            // To match the view state and update any unresolved diffs internally\n                            layer.draw();\n                            // If this layer specifies a picking draw pass, then we shall store it in the current draw order\n                            // For that next step\n                            if (layer.picking.type === types_1.PickType.SINGLE) {\n                                pickingPass.push(layer);\n                            }\n                        }\n                        if (onViewReady) {\n                            onViewReady(scene, view, pickingPass);\n                        }\n                    }\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Free all resources consumed by this surface that gets applied to the GPU.\n     */\n    LayerSurface.prototype.destroy = function () {\n        this.layers.forEach(function (layer) { return layer.destroy(); });\n        this.resourceManager.destroy();\n        this.mouseManager.destroy();\n        this.sceneViews.forEach(function (sceneView) { return sceneView.scene.destroy(); });\n        this.renderer.dispose();\n        this.pickingRenderer.dispose();\n        this.currentViewport.clear();\n        // TODO: Instances should be implementing destroy for these clean ups.\n        labels_1.LabelInstance.destroy();\n        images_1.ImageInstance.destroy();\n    };\n    /**\n     * This is the draw loop that must be called per frame for updates to take effect and display.\n     *\n     * @param time This is an optional time flag so one can manually control the time flag for the frame.\n     *             This will affect animations and other automated gpu processes.\n     */\n    LayerSurface.prototype.draw = function (time) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var didBuffer;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.gl)\n                            return [2 /*return*/];\n                        // Make the layers commit their changes to the buffers then draw each scene view on\n                        // Completion.\n                        this.commit(time, true, function (scene, view, pickingPass) {\n                            // Now perform the rendering\n                            _this.drawSceneView(scene.container, view);\n                            // If a layer needs a picking pass, then perform a picking draw pass only\n                            // if a request for the color pick has been made, then we query the pixels rendered to our picking target\n                            if (pickingPass.length > 0 && _this.updateColorPick) {\n                                // Get the requested metrics\n                                var mouse = _this.updateColorPick.mouse;\n                                var views = _this.updateColorPick.views;\n                                // Only if the view is interacted with should we both with rendering\n                                if (view.id !== _this.defaultSceneElements.view.id && views.indexOf(view) > -1) {\n                                    // Picking uses a pixel ratio of 1\n                                    view.pixelRatio = 1.0;\n                                    // Get the current flags for the view\n                                    var flags = view.clearFlags.slice(0);\n                                    // Set color rendering flasg\n                                    view.clearFlags = [view_1.ClearFlags.COLOR, view_1.ClearFlags.DEPTH];\n                                    // We must perform any operations necessary to make the view camera fit the viewport\n                                    // Correctly with the possibly adjusted pixel ratio\n                                    view.fitViewtoViewport(new bounds_1.Bounds({\n                                        height: _this.context.canvas.height / _this.pixelRatio,\n                                        width: _this.context.canvas.width / _this.pixelRatio,\n                                        x: 0,\n                                        y: 0,\n                                    }));\n                                    // We must redraw the layers so they will update their uniforms to adapt to a picking pass\n                                    for (var j = 0, endj = pickingPass.length; j < endj; ++j) {\n                                        var layer = pickingPass[j];\n                                        layer.picking.currentPickMode = types_1.PickType.SINGLE;\n                                        layer.draw();\n                                        layer.picking.currentPickMode = types_1.PickType.NONE;\n                                    }\n                                    // Draw the picking container for the scene with our view long with our specialized picking renderer\n                                    // NOTE: Neat trick, just remove 'this.pickingTarget' from the argument and add\n                                    // canvas.parentNode.appendChild(this.pickingRenderer.getContext().canvas);\n                                    // below where the picking Target is created and you will see what is being rendered to the color picking buffer\n                                    _this.drawSceneView(scene.pickingContainer, view, _this.pickingRenderer, _this.pickingTarget);\n                                    // Make our metrics for how much of the image we wish to analyze\n                                    var pickWidth = 5;\n                                    var pickHeight = 5;\n                                    var numBytesPerColor = 4;\n                                    var out = new Uint8Array(pickWidth * pickHeight * numBytesPerColor);\n                                    // Read the pixels out\n                                    // TODO: We need to defer this reading to next frame as the rendering MUST be completed before a readPixels\n                                    // operation can complete. Thus in complex rendering situations that pushes the GPU, this could be a MAJOR bottleneck.\n                                    _this.pickingRenderer.readRenderTargetPixels(_this.pickingTarget, mouse[0] - view.screenBounds.x - pickWidth / 2, view.screenBounds.height - (mouse[1] - view.screenBounds.y) - pickHeight / 2, pickWidth, pickHeight, out);\n                                    // Analyze the rendered color data for the picking routine\n                                    var pickingData = color_picking_analysis_1.analyzeColorPickingRendering(mouse, out, pickWidth, pickHeight);\n                                    // We must redraw the layers so they will update their uniforms to adapt to a picking pass\n                                    for (var j = 0, endj = pickingPass.length; j < endj; ++j) {\n                                        var layer = pickingPass[j];\n                                        if (layer.picking.type === types_1.PickType.SINGLE) {\n                                            layer.interactions.colorPicking = pickingData;\n                                        }\n                                    }\n                                    // Return the pixel ratio back to the rendered ratio\n                                    view.pixelRatio = _this.pixelRatio;\n                                    // Return the view's clear flags\n                                    view.clearFlags = flags;\n                                    // After reverting the pixel ratio, we must return to the state we came from so that mouse interactions\n                                    // will work properly\n                                    view.fitViewtoViewport(new bounds_1.Bounds({\n                                        height: _this.context.canvas.height,\n                                        width: _this.context.canvas.width,\n                                        x: 0,\n                                        y: 0,\n                                    }));\n                                }\n                            }\n                        });\n                        // After we have drawn our views of our scenes, we can now ensure all of the bounds\n                        // Are updated in the interactions and flag our interactions ready for mouse input\n                        if (this.mouseManager.waitingForRender) {\n                            this.sceneViews.forEach(function (sceneView) {\n                                sceneView.bounds = new data_bounds_1.DataBounds(sceneView.view.screenBounds);\n                                sceneView.bounds.data = sceneView;\n                            });\n                            this.mouseManager.waitingForRender = false;\n                        }\n                        if (!!this.isBufferingAtlas) return [3 /*break*/, 2];\n                        this.isBufferingAtlas = true;\n                        return [4 /*yield*/, this.resourceManager.dequeueRequests()];\n                    case 1:\n                        didBuffer = _a.sent();\n                        this.isBufferingAtlas = false;\n                        // If buffering did occur and completed, then we should be performing a draw to ensure all of the\n                        // Changes are committed and pushed out.\n                        if (didBuffer)\n                            this.draw();\n                        _a.label = 2;\n                    case 2:\n                        // Clear out the flag requesting a pick pass so we don't perform a pick render pass unless we have\n                        // another requested from mouse interactions\n                        delete this.updateColorPick;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This finalizes everything and sets up viewports and clears colors and performs the actual render step\n     */\n    LayerSurface.prototype.drawSceneView = function (scene, view, renderer, target) {\n        renderer = renderer || this.renderer;\n        var offset = { x: view.viewBounds.left, y: view.viewBounds.top };\n        var size = view.viewBounds;\n        var rendererSize = renderer.getSize();\n        var pixelRatio = renderer.getPixelRatio();\n        rendererSize.width *= pixelRatio;\n        rendererSize.height *= pixelRatio;\n        var background = view.background;\n        var context = renderer.getContext();\n        // Something is up with threejs that does not allow us to set viewport x and y values. So for targets\n        // We simply size the target to the view size and render. Thus scissoring is not required\n        if (!target) {\n            // Set the scissor rectangle.\n            context.enable(context.SCISSOR_TEST);\n            context.scissor(offset.x, rendererSize.height - offset.y - size.height, size.width, size.height);\n            // If a background is established, we should clear the background color\n            // Specified for this context\n            if (view.background) {\n                // Clear the rect of color and depth so the region is totally it's own\n                context.clearColor(background[0], background[1], background[2], background[3]);\n            }\n        }\n        // Get the view's clearing preferences\n        if (view.clearFlags) {\n            // For targets, we must also perform clear operations\n            if (target) {\n                // TODO: This is frustrating. Right now we can't specify and set the viewport for a render target\n                // Possibly with Threejs going away we can actually be more explcit for the render area to a render target\n                // and not cause this overhead of resizing the render target for every picking pass\n                target.setSize(size.width, size.height);\n                renderer.setRenderTarget(target);\n                renderer.clear(view.clearFlags.indexOf(view_1.ClearFlags.COLOR) > -1, view.clearFlags.indexOf(view_1.ClearFlags.DEPTH) > -1, view.clearFlags.indexOf(view_1.ClearFlags.STENCIL) > -1);\n            }\n            else {\n                renderer.getContext().clear((view.clearFlags.indexOf(view_1.ClearFlags.COLOR) > -1 ? context.COLOR_BUFFER_BIT : 0x0) |\n                    (view.clearFlags.indexOf(view_1.ClearFlags.DEPTH) > -1 ? context.DEPTH_BUFFER_BIT : 0x0) |\n                    (view.clearFlags.indexOf(view_1.ClearFlags.STENCIL) > -1 ? context.STENCIL_BUFFER_BIT : 0x0));\n            }\n        }\n        // Default clearing is depth and color\n        else {\n            // For targets, we must also perform clear operations\n            if (target) {\n                // TODO: This is frustrating. Right now we can't specify and set the viewport for a render target\n                // Possibly with Threejs going away we can actually be more explcit for the render area to a render target\n                // and not cause this overhead of resizing the render target for every picking pass\n                target.setSize(size.width, size.height);\n                renderer.setRenderTarget(target);\n                renderer.clear(true, true);\n            }\n            else {\n                context.clear(context.COLOR_BUFFER_BIT | context.DEPTH_BUFFER_BIT);\n            }\n        }\n        // Make sure the viewport is set properly for the next render\n        renderer.setViewport(offset.x / pixelRatio, offset.y / pixelRatio, size.width, size.height);\n        // Render the scene with the provided view metrics\n        renderer.render(scene, view.viewCamera.baseCamera, target);\n    };\n    /**\n     * This allows for querying a view's screen bounds. Null is returned if the view id\n     * specified does not exist.\n     */\n    LayerSurface.prototype.getViewSize = function (viewId) {\n        for (var _i = 0, _a = this.sceneViews; _i < _a.length; _i++) {\n            var sceneView = _a[_i];\n            if (sceneView.view.id === viewId) {\n                return sceneView.view.screenBounds;\n            }\n        }\n        return null;\n    };\n    /**\n     * This queries a view's window into a world's space.\n     */\n    LayerSurface.prototype.getViewWorldBounds = function (viewId) {\n        for (var _i = 0, _a = this.sceneViews; _i < _a.length; _i++) {\n            var sceneView = _a[_i];\n            if (sceneView.view.id === viewId) {\n                var view = sceneView.view;\n                if (view.screenBounds) {\n                    var topLeft = view.viewToWorld({ x: 0, y: 0 });\n                    var bottomRight = view.screenToWorld({ x: view.screenBounds.right, y: view.screenBounds.bottom });\n                    return new bounds_1.Bounds({\n                        bottom: bottomRight.y,\n                        left: topLeft.x,\n                        right: bottomRight.x,\n                        top: topLeft.y,\n                    });\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n        return null;\n    };\n    /**\n     * This is the beginning of the system. This should be called immediately after the surface is constructed.\n     * We make this mandatory outside of the constructor so we can make it follow an async pattern.\n     */\n    LayerSurface.prototype.init = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Make sure our desired pixel ratio is set up\n                        this.pixelRatio = options.pixelRatio || this.pixelRatio;\n                        // Make sure we have a gl context to work with\n                        this.setContext(options.context);\n                        if (!this.gl) return [3 /*break*/, 2];\n                        // Initialize our GL needs that set the basis for rendering\n                        this.initGL(options);\n                        // Initialize our event manager that handles mouse interactions/gestures with the canvas\n                        this.initMouseManager(options);\n                        // Initialize any resources requested or needed, such as textures or rendering surfaces\n                        return [4 /*yield*/, this.initResources(options)];\n                    case 1:\n                        // Initialize any resources requested or needed, such as textures or rendering surfaces\n                        _a.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        console.warn('Could not establish a GL context. Layer Surface will be unable to render');\n                        _a.label = 3;\n                    case 3: return [2 /*return*/, this];\n                }\n            });\n        });\n    };\n    /**\n     * This initializes the Canvas GL contexts needed for rendering.\n     */\n    LayerSurface.prototype.initGL = function (options) {\n        var _this = this;\n        if (!this.context) {\n            console.error('Can not initialize Layer Surface as a valid GL context was not established.');\n            return;\n        }\n        // Get the canvas of our context to set up our Three settings\n        var canvas = this.context.canvas;\n        // Get the starting width and height so adjustments don't affect it\n        var width = canvas.width;\n        var height = canvas.height;\n        // Generate the renderer along with it's properties\n        this.renderer = new Three.WebGLRenderer({\n            // Context supports rendering to an alpha canvas only if the background color has a transparent\n            // Alpha value.\n            alpha: options.background && (options.background[3] < 1.0),\n            // Yes to antialias! Make it preeeeetty!\n            antialias: true,\n            // Make three use an existing canvas rather than generate another\n            canvas: canvas,\n            // TODO: This should be toggleable. If it's true it allows us to snapshot the rendering in the canvas\n            //       But we dont' always want it as it makes performance drop a bit.\n            preserveDrawingBuffer: true,\n        });\n        // Generate a renderer for the picking pass\n        this.pickingRenderer = new Three.WebGLRenderer({\n            // Context supports rendering to an alpha canvas only if the background color has a transparent\n            // Alpha value.\n            alpha: false,\n            // Picking shall not\n            antialias: false,\n            // Do not need this for picking\n            preserveDrawingBuffer: true,\n        });\n        // NOTE: Uncomment this plus remove this.pickingTarget from the drawSceneView of the color picking pass\n        // to view the colors rendered to the color picking buffer. This disables the interactions but helps\n        // debug what's going on with shaders etc\n        // canvas.parentNode.appendChild(this.pickingRenderer.getContext().canvas);\n        // We want clearing to be controlled via the layer\n        this.renderer.autoClear = false;\n        // Charts don't really have face culling. Just 2D shapes\n        this.renderer.setFaceCulling(Three.CullFaceNone);\n        // This sets the pixel ratio to handle differing pixel densities in screens\n        this.setRendererSize(width, height);\n        // Set the pixel ratio to match the pixel density of the monitor in use\n        this.renderer.setPixelRatio(this.pixelRatio);\n        // Applies the background color and establishes whether or not the context supports\n        // Alpha or not\n        if (options.background) {\n            this.renderer.setClearColor(new Three.Color(options.background[0], options.background[1], options.background[2]), options.background[3]);\n        }\n        // If a background color was not established, then we set a default background color\n        else {\n            this.renderer.setClearColor(DEFAULT_BACKGROUND_COLOR);\n        }\n        // We want clearing to be controlled via the layer\n        this.pickingRenderer.autoClear = false;\n        // Charts don't really have face culling. Just 2D shapes\n        this.pickingRenderer.setFaceCulling(Three.CullFaceNone);\n        // Picking does not need retina style precision\n        this.pickingRenderer.setPixelRatio(1.0);\n        // Applies the background color and establishes whether or not the context supports\n        // Alpha or not\n        this.pickingRenderer.setClearColor(new Three.Color(0, 0, 0), 1);\n        // Once we have made our renderer we now make us a default scene to which we can add objects\n        this.defaultSceneElements = generate_default_scene_1.generateDefaultScene(this.context);\n        this.defaultSceneElements.view.background = options.background;\n        // Set the default scene\n        this.scenes.set(this.defaultSceneElements.scene.id, this.defaultSceneElements.scene);\n        // Make a scene view depth tracker so we can track the order each scene view combo is drawn\n        var sceneViewDepth = 0;\n        // Make a SceneView for the default scene and view for mouse interactions\n        this.sceneViews.push({\n            depth: ++sceneViewDepth,\n            scene: this.defaultSceneElements.scene,\n            view: this.defaultSceneElements.view,\n        });\n        // Turn on the scissor test to keep the rendering clipped within the\n        // Render region of the context\n        this.context.enable(this.context.SCISSOR_TEST);\n        // Add the requested scenes to the surface and apply the necessary defaults\n        if (options.scenes) {\n            options.scenes.forEach(function (sceneOptions) {\n                // Make us a new scene based on the requested options\n                var newScene = new scene_1.Scene(sceneOptions);\n                // Make sure the default view is available for each scene\n                // IFF no view is provided for the scene\n                if (sceneOptions.views.length === 0) {\n                    newScene.addView(_this.defaultSceneElements.view);\n                    _this.sceneViews.push({\n                        depth: ++sceneViewDepth,\n                        scene: newScene,\n                        view: _this.defaultSceneElements.view,\n                    });\n                }\n                // Generate the views requested for the scene\n                sceneOptions.views.forEach(function (viewOptions) {\n                    var newView = new view_1.View(viewOptions);\n                    newView.camera = newView.camera || _this.defaultSceneElements.camera;\n                    newView.viewCamera = newView.viewCamera || _this.defaultSceneElements.viewCamera;\n                    newView.viewport = newView.viewport || _this.defaultSceneElements.viewport;\n                    newView.pixelRatio = _this.pixelRatio;\n                    newScene.addView(newView);\n                    for (var _i = 0, _a = _this.sceneViews; _i < _a.length; _i++) {\n                        var sceneView = _a[_i];\n                        if (sceneView.view.id === newView.id) {\n                            console.warn('You can NOT have two views with the same id. Please use unique identifiers for every view generated.');\n                        }\n                    }\n                    _this.sceneViews.push({\n                        depth: ++sceneViewDepth,\n                        scene: newScene,\n                        view: newView,\n                    });\n                });\n                _this.scenes.set(sceneOptions.key, newScene);\n            });\n        }\n    };\n    /**\n     * This does special initialization by gathering the layers shader IO, generates a material\n     * and injects special automated uniforms and attributes to make instancing work for the\n     * shader.\n     */\n    LayerSurface.prototype.initLayer = function (layer) {\n        // Set the layer's parent surface here\n        layer.surface = this;\n        // Set the resource manager this surface utilizes to the layer\n        layer.resource = this.resourceManager;\n        // For the sake of initializing uniforms to the correct values, we must first add the layer to it's appropriate\n        // Scene so that the necessary values will be in place for the sahder IO\n        var scene = this.addLayerToScene(layer);\n        // Get the shader metrics the layer desires\n        var shaderIO = layer.initShader();\n        // Clean out nulls provided as a convenience to the layer\n        shaderIO.instanceAttributes = (shaderIO.instanceAttributes || []).filter(Boolean);\n        shaderIO.vertexAttributes = (shaderIO.vertexAttributes || []).filter(Boolean);\n        shaderIO.uniforms = (shaderIO.uniforms || []).filter(Boolean);\n        // Get the injected shader IO attributes and uniforms\n        var _a = inject_shader_io_1.injectShaderIO(layer, shaderIO), vertexAttributes = _a.vertexAttributes, instanceAttributes = _a.instanceAttributes, uniforms = _a.uniforms;\n        // Generate the actual shaders to be used by injecting all of the necessary fragments and injecting\n        // Instancing fragments\n        var shaderMetrics = attribute_generation_1.injectFragments(layer, shaderIO, vertexAttributes, instanceAttributes, uniforms);\n        // Generate the geometry this layer will be utilizing\n        var geometry = generate_layer_geometry_1.generateLayerGeometry(shaderMetrics.maxInstancesPerBuffer, vertexAttributes, shaderIO.vertexCount);\n        // This is the material that is generated for the layer that utilizes all of the generated and\n        // Injected shader IO and shader fragments\n        var material = generate_layer_material_1.generateLayerMaterial(layer, shaderMetrics.vs, shaderMetrics.fs, uniforms, shaderMetrics.materialUniforms);\n        // And now we can now generate the mesh that will be added to the scene\n        var model = generate_layer_model_1.generateLayerModel(layer, geometry, material);\n        // Now that all of the elements of the layer are complete, let us apply them to the layer\n        layer.geometry = geometry;\n        layer.instanceAttributes = instanceAttributes;\n        layer.instanceVertexCount = shaderIO.vertexCount;\n        layer.material = material;\n        layer.maxInstancesPerBuffer = shaderMetrics.maxInstancesPerBuffer;\n        layer.model = model;\n        layer.uniforms = uniforms;\n        layer.vertexAttributes = vertexAttributes;\n        // The layer now needs a specialized uniform manager to provide instances with an appropriate set of uniforms\n        // To be able to render.\n        layer.uniformManager = new instance_uniform_manager_1.InstanceUniformManager(layer, scene);\n        return layer;\n    };\n    /**\n     * Initializes elements for handling mouse interactions with the canvas.\n     */\n    LayerSurface.prototype.initMouseManager = function (options) {\n        // We must inject an event manager to broadcast events through the layers themselves\n        var eventManagers = [\n            new layer_mouse_events_1.LayerMouseEvents(this),\n        ].concat(options.eventManagers || []);\n        // Generate the mouse manager for the layer\n        this.mouseManager = new mouse_event_manager_1.MouseEventManager(this.context.canvas, this.sceneViews, eventManagers, options.handlesWheelEvents);\n    };\n    /**\n     * This initializes resources needed or requested such as textures or render surfaces.\n     */\n    LayerSurface.prototype.initResources = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _i, _a, resource;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!options.atlasResources) return [3 /*break*/, 4];\n                        _i = 0, _a = options.atlasResources;\n                        _b.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3 /*break*/, 4];\n                        resource = _a[_i];\n                        return [4 /*yield*/, this.atlasManager.createAtlas(resource)];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        // Initialize our resource manager with the atlas manager\n                        this.resourceManager = new atlas_resource_manager_1.AtlasResourceManager({\n                            atlasManager: this.atlasManager,\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This finds the scene and view the layer belongs to based on the layer's props. For invalid or not provided\n     * props, the layer gets added to default scenes and views.\n     */\n    LayerSurface.prototype.addLayerToScene = function (layer) {\n        // Get the scene the layer will add itself to\n        var scene = this.scenes.get(layer.props.scene || '');\n        if (!scene) {\n            // If no scene is specified by the layer, or the scene identifier is invalid, then we add the layer\n            // To the default scene.\n            scene = this.defaultSceneElements.scene;\n            if (layer.props.scene) {\n                console.warn('Layer specified a scene that is not within the layer surface manager. Layer will be added to the default scene.');\n            }\n        }\n        // Add the layer to the scene for rendering\n        scene.addLayer(layer);\n        return scene;\n    };\n    /**\n     * Discontinues a layer's management by this surface. This will invalidate any resources\n     * the layer was using in association with the context. If the layer is re-insertted, it will\n     * be revaluated as though it were a new layer.\n     */\n    LayerSurface.prototype.removeLayer = function (layer) {\n        // Make sure we are removing a layer that exists in the system\n        if (!layer) {\n            return null;\n        }\n        if (!this.layers.get(layer && layer.id)) {\n            console.warn('Tried to remove a layer that is not in the manager.', layer);\n            return layer;\n        }\n        layer.uniformManager.removeFromScene();\n        layer.destroy();\n        this.layers.delete(layer.id);\n        return layer;\n    };\n    /**\n     * Used for reactive rendering and diffs out the layers for changed layers.\n     */\n    LayerSurface.prototype.render = function (layerInitializers) {\n        var _this = this;\n        if (!this.gl)\n            return;\n        // Loop through all of the initializers and properly add and remove layers as needed\n        if (layerInitializers && layerInitializers.length > 0) {\n            layerInitializers.forEach(function (init) {\n                var layerClass = init[0];\n                var props = init[1];\n                var existingLayer = _this.layers.get(props.key);\n                if (existingLayer) {\n                    existingLayer.willUpdateProps(props);\n                    Object.assign(existingLayer.props, props);\n                    existingLayer.didUpdateProps();\n                }\n                else {\n                    _this.addLayer(new layerClass(Object.assign({}, layerClass.defaultProps, props)));\n                }\n                _this.willDisposeLayer.set(props.key, false);\n            });\n        }\n        // Take any layer that retained it's disposal flag and trash it\n        this.willDisposeLayer.forEach(function (dispose, layerId) {\n            if (dispose) {\n                var layer = _this.layers.get(layerId);\n                if (layer) {\n                    _this.removeLayer(layer);\n                }\n                else {\n                    console.warn('this.willDisposeLayer called on non-gettable layer.');\n                }\n            }\n        });\n        // Resolve that all disposals occurred\n        this.willDisposeLayer.clear();\n        // Reflag every layer for removal again so creation of layers will determine\n        // Which layers remain for a reactive pattern\n        this.layers.forEach(function (layer, id) {\n            _this.willDisposeLayer.set(id, true);\n        });\n    };\n    /**\n     * This must be executed when the canvas changes size so that we can re-calculate the scenes and views\n     * dimensions for handling all of our rendered elements.\n     */\n    LayerSurface.prototype.fitContainer = function (pixelRatio) {\n        var container = this.context.canvas.parentElement;\n        if (container) {\n            var canvas = this.context.canvas;\n            canvas.className = '';\n            canvas.setAttribute('style', '');\n            container.style.position = 'relative';\n            canvas.style.position = 'absolute';\n            canvas.style.left = '0xp';\n            canvas.style.top = '0xp';\n            canvas.style.width = '100%';\n            canvas.style.height = '100%';\n            canvas.setAttribute('width', '');\n            canvas.setAttribute('height', '');\n            var containerBox = container.getBoundingClientRect();\n            var box = canvas.getBoundingClientRect();\n            this.resize(box.width || 100, containerBox.height || 100);\n        }\n    };\n    /**\n     * This resizes the canvas and retains pixel ratios amongst all of the resources involved.\n     */\n    LayerSurface.prototype.resize = function (width, height, pixelRatio) {\n        var _this = this;\n        this.pixelRatio = pixelRatio || this.pixelRatio;\n        this.sceneViews.forEach(function (sceneView) { return sceneView.view.pixelRatio = _this.pixelRatio; });\n        this.setRendererSize(width, height);\n        this.renderer.setPixelRatio(this.pixelRatio);\n        this.pickingRenderer.setPixelRatio(1.0);\n        this.mouseManager.resize();\n    };\n    /**\n     * This establishes the rendering canvas context for the surface.\n     */\n    LayerSurface.prototype.setContext = function (context) {\n        if (!context) {\n            return;\n        }\n        if (isWebGLContext(context)) {\n            this.context = context;\n        }\n        else if (isCanvas(context)) {\n            var canvasContext = context.getContext('webgl') || context.getContext('experimental-webgl');\n            if (!canvasContext) {\n                console.warn('A valid GL context was not found for the context provided to the surface. This surface will not be able to operate.');\n            }\n            else {\n                this.context = canvasContext;\n            }\n        }\n        else if (isString(context)) {\n            var element = document.getElementById(context);\n            if (isCanvas(element)) {\n                this.setContext(element);\n            }\n        }\n    };\n    /**\n     * This applies a new size to the renderer and resizes any additional resources that requires being\n     * sized along with the renderer.\n     */\n    LayerSurface.prototype.setRendererSize = function (width, height) {\n        width = width || 100;\n        height = height || 100;\n        this.renderer.setSize(width, height);\n        this.pickingRenderer.setSize(width, height);\n        if (!this.pickingTarget) {\n            this.pickingTarget = new three_1.WebGLRenderTarget(width, height, {\n                magFilter: Three.LinearFilter,\n                minFilter: Three.LinearFilter,\n                stencilBuffer: false,\n            });\n        }\n        this.pickingTarget.setSize(width, height);\n    };\n    /**\n     * This triggers an update to all of the layers that perform picking, the pixel data\n     * within the specified mouse range.\n     */\n    LayerSurface.prototype.updateColorPickRange = function (mouse, views) {\n        // We will flag the color range as needing an update\n        this.updateColorPick = {\n            mouse: mouse,\n            views: views,\n        };\n    };\n    return LayerSurface;\n}());\nexports.LayerSurface = LayerSurface;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./layer-surface\"));\n__export(require(\"./event-manager\"));\n__export(require(\"./generate-default-scene\"));\n__export(require(\"./generate-layer-geometry\"));\n__export(require(\"./generate-layer-material\"));\n__export(require(\"./generate-layer-model\"));\n__export(require(\"./inject-shader-io\"));\n__export(require(\"./layer\"));\n__export(require(\"./mouse-event-manager\"));\n__export(require(\"./scene\"));\n__export(require(\"./texture\"));\n__export(require(\"./view\"));\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float borderSize;\\nvarying vec2 pointCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  vertexColor = color * color.a;\\n  float size = radius * scaleFactor;\\n  borderSize = mix(\\n    (thickness + 1.5) / size,\\n    ((thickness * pixelRatio) / size),\\n    float(pixelRatio > 1.0)\\n  );\\n  edgeSharpness = mix(0.8, 0.01, min((size * 3.0 * pixelRatio) / (45.0 * pixelRatio), 1.0));\\n  pointCoord = (position.xy + vec2(1.0, 1.0)) / 2.0;\\n\\n  // Center within clip space\\n  vec4 clipCenter = clipSpace(vec3(center, depth));\\n  // Center in screen space\\n  vec2 screenCenter = (clipCenter.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Position in screen space\\n  vec2 vertex = (position.xy * size) + screenCenter;\\n  // Position back to clip space\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), clipCenter.zw);\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\n\\n/** This is the color of the ring */\\nvarying vec4 vertexColor;\\n/**\\n * This is how sharp the ring renders. For tiny rings, it's best to have\\n * less sharpness to better convey the shape of a circle. A good starter setting:\\n * edgeSharpness = mix(0.8, 0.01, min(gl_PointSize / 45.0, 1.0));\\n */\\nvarying float edgeSharpness;\\n/**\\n * This should be a value that sets the thickness of the ring in normal space\\n * relative to the PointSize\\n */\\nvarying float borderSize;\\n/**\\n * Since this is now a quad instead of a point sprite, this provides what gl_PointCoord\\n * used to provide.\\n */\\nvarying vec2 pointCoord;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius + (radius * 0.01),\\n    dot(dist, dist) * 4.0\\n  );\\n}\\n\\nvoid main() {\\n  float outer_step_factor = circle(pointCoord, 1.0);\\n  float inner_step_factor = circle(pointCoord, 1.0 - borderSize);\\n\\n  setColor(mix(\\n    mix(                        // Select the outer color outside of the inner radius\\n      vec4(0.0, 0.0, 0.0, 0.0),    // Select invisible outside of inner and outer radius\\n      vertexColor,                  // Select outer color outside of inner, but inside outer\\n      outer_step_factor\\n    ),\\n    vec4(0.0, 0.0, 0.0, 0.0),                 // Select inner color inside inner\\n    inner_step_factor\\n  ));\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar max = Math.max;\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar RingLayer = /** @class */ (function (_super) {\n    __extends(RingLayer, _super);\n    function RingLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    RingLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given circle\n            boundsAccessor: function (ring) { return new primitives_1.Bounds({\n                height: ring.radius * 2,\n                width: ring.radius * 2,\n                x: ring.x - ring.radius,\n                y: ring.y - ring.radius,\n            }); },\n            // Provide a precise hit test for the ring\n            hitTest: function (ring, point, view) {\n                var r = ring.radius / max.apply(void 0, view.camera.scale);\n                var delta = [\n                    point.x - ring.x,\n                    point.y - ring.y,\n                ];\n                return (delta[0] * delta[0] + delta[1] * delta[1]) < (r * r);\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    RingLayer.prototype.initShader = function () {\n        var scaleFactor = this.props.scaleFactor || (function () { return 1; });\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: -1,\n            1: -1,\n            2: -1,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./ring-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'center',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'radius',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.radius]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.color; },\n                },\n                {\n                    block: 2,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'thickness',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.thickness]; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (_) { return [scaleFactor()]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./ring-layer.vs'),\n        };\n    };\n    RingLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    RingLayer.prototype.getMaterialOptions = function () {\n        return {\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return RingLayer;\n}(layer_1.Layer));\nexports.RingLayer = RingLayer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_1 = require(\"../../instance-provider/instance\");\nvar observable_1 = require(\"../../instance-provider/observable\");\nvar RingInstance = /** @class */ (function (_super) {\n    __extends(RingInstance, _super);\n    function RingInstance(options) {\n        var _this = _super.call(this, options) || this;\n        _this.color = [1.0, 1.0, 1.0, 1.0];\n        _this.depth = 0;\n        _this.radius = 0;\n        _this.thickness = 1;\n        _this.x = 0;\n        _this.y = 0;\n        _this.color = options.color || [1, 1, 1, 1];\n        _this.depth = options.depth || 0;\n        _this.radius = options.radius;\n        _this.thickness = options.thickness || _this.thickness;\n        _this.x = options.x;\n        _this.y = options.y;\n        return _this;\n    }\n    Object.defineProperty(RingInstance.prototype, \"width\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RingInstance.prototype, \"height\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RingInstance.prototype, \"innerRadius\", {\n        get: function () {\n            return this.radius - this.thickness;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        observable_1.observable\n    ], RingInstance.prototype, \"color\", void 0);\n    __decorate([\n        observable_1.observable\n    ], RingInstance.prototype, \"depth\", void 0);\n    __decorate([\n        observable_1.observable\n    ], RingInstance.prototype, \"radius\", void 0);\n    __decorate([\n        observable_1.observable\n    ], RingInstance.prototype, \"thickness\", void 0);\n    __decorate([\n        observable_1.observable\n    ], RingInstance.prototype, \"x\", void 0);\n    __decorate([\n        observable_1.observable\n    ], RingInstance.prototype, \"y\", void 0);\n    return RingInstance;\n}(instance_1.Instance));\nexports.RingInstance = RingInstance;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./ring-instance\"));\n__export(require(\"./ring-layer\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar instance_1 = require(\"../../instance-provider/instance\");\nvar types_1 = require(\"../types\");\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nvar anchorCalculator = (_a = {},\n    _a[types_1.AnchorType.TopLeft] = function (anchor, rectangle) {\n        anchor.x = -anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopMiddle] = function (anchor, rectangle) {\n        anchor.x = rectangle.width / 2.0;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopRight] = function (anchor, rectangle) {\n        anchor.x = rectangle.width + anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.MiddleLeft] = function (anchor, rectangle) {\n        anchor.x = -anchor.padding;\n        anchor.y = rectangle.height / 2;\n    },\n    _a[types_1.AnchorType.Middle] = function (anchor, rectangle) {\n        anchor.x = rectangle.width / 2.0;\n        anchor.y = rectangle.height / 2.0;\n    },\n    _a[types_1.AnchorType.MiddleRight] = function (anchor, rectangle) {\n        anchor.x = rectangle.width + anchor.padding;\n        anchor.y = rectangle.height / 2.0;\n    },\n    _a[types_1.AnchorType.BottomLeft] = function (anchor, rectangle) {\n        anchor.x = -anchor.padding;\n        anchor.y = rectangle.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomMiddle] = function (anchor, rectangle) {\n        anchor.x = rectangle.width / 2.0;\n        anchor.y = rectangle.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomRight] = function (anchor, rectangle) {\n        anchor.x = rectangle.width + anchor.padding;\n        anchor.y = rectangle.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.Custom] = function (anchor, rectangle) {\n        anchor.x = anchor.x || 0;\n        anchor.y = anchor.y || 0;\n    },\n    _a);\n/**\n * This generates a new rectangle instance which will render a single line of text for a given layer.\n * There are restrictions surrounding rectangles due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a rectangle via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Rectangles should only be so long.\n * - Multiline is not supported inherently\n * - Once a rectangle is constructed, only SOME properties can be altered thereafter\n *\n * A rectangle that is constructed can only have some properties set upon creating the rectangle and are locked\n * thereafter. The only way to modify them would be to destroy the rectangle, then construct a new rectangle\n * with the modifications. This has to deal with performance regarding rasterizing the rectangle\n */\nvar RectangleInstance = /** @class */ (function (_super) {\n    __extends(RectangleInstance, _super);\n    function RectangleInstance(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the rendered color of the rectangle */\n        _this.color = [0, 0, 0, 1];\n        /** Depth sorting of the rectangle (or the z value of the lable) */\n        _this.depth = 0;\n        /** The height of the rectangle as it is to be rendered in world space */\n        _this.height = 1;\n        /** Sets the way the rectangle scales with the world */\n        _this.scaling = types_1.ScaleType.BOUND_MAX;\n        /** The width of the rectangle as it is to be rendered in world space */\n        _this.width = 1;\n        /** The x coordinate where the rectangle will be anchored to in world space */\n        _this.x = 0;\n        /** The y coordinate where the rectangle will be anchored to in world space */\n        _this.y = 0;\n        // These are properties that can be altered, but have side effects from being changed\n        /** This is the anchor location on the  */\n        _this._anchor = {\n            padding: 0,\n            type: types_1.AnchorType.TopLeft,\n            x: 0,\n            y: 0,\n        };\n        _this.depth = options.depth || _this.depth;\n        _this.color = options.color || _this.color;\n        _this.scaling = options.scaling || _this.scaling;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        _this.width = options.width || 1;\n        _this.height = options.height || 1;\n        // Make sure the anchor is set to the appropriate location\n        options.anchor && _this.setAnchor(options.anchor);\n        return _this;\n    }\n    Object.defineProperty(RectangleInstance.prototype, \"anchor\", {\n        get: function () {\n            return this._anchor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This applies a new anchor to this rectangle and properly determines it's anchor position on the rectangle\n     */\n    RectangleInstance.prototype.setAnchor = function (anchor) {\n        var newAnchor = {\n            padding: anchor.padding || 0,\n            type: anchor.type,\n            x: anchor.x || 0,\n            y: anchor.y || 0,\n        };\n        // Calculate the new anchors position values\n        anchorCalculator[newAnchor.type](newAnchor, this);\n        // Apply the anchor\n        this._anchor = newAnchor;\n    };\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"color\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"depth\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"height\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"scaling\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"width\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"x\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"y\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"_anchor\", void 0);\n    return RectangleInstance;\n}(instance_1.Instance));\nexports.RectangleInstance = RectangleInstance;\nvar _a;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the image as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the image is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y;\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float((cameraScale.x > cameraScale.y || cameraScale.y > cameraScale.x) && useScaleMode != 0.0);\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n  // Apply the image's tint as a tint to the image\\n  vertexColor = color * color.a;\\n\\n  // Correct aspect ratio.\\n  size = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * size + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the image\\n  float imageScreenScale = mix(\\n    screenSize.y / size.y,\\n    screenSize.x / size.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the image is supposed to be, then we automagically\\n  // scale down our image to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / imageScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\n\\nvoid main() {\\n  setColor(vertexColor);\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar types_2 = require(\"../types\");\nvar min = Math.min, max = Math.max;\n/**\n * This layer displays Rectangles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar RectangleLayer = /** @class */ (function (_super) {\n    __extends(RectangleLayer, _super);\n    function RectangleLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    RectangleLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given rectangle\n            boundsAccessor: function (rectangle) {\n                var anchorEffect = [0, 0];\n                if (rectangle.anchor) {\n                    anchorEffect[0] = rectangle.anchor.x || 0;\n                    anchorEffect[1] = rectangle.anchor.y || 0;\n                }\n                var topLeft = [\n                    rectangle.x - anchorEffect[0],\n                    rectangle.y - anchorEffect[1],\n                ];\n                return new primitives_1.Bounds({\n                    height: rectangle.height,\n                    width: rectangle.width,\n                    x: topLeft[0],\n                    y: topLeft[1],\n                });\n            },\n            // Provide a precise hit test for the circle\n            hitTest: function (rectangle, point, projection) {\n                // The bounds of the rectangle is in world space, but it does not account for the scale mode of the rectangle.\n                // Here, we will apply the scale mode testing to the rectangle\n                var maxScale = max.apply(void 0, projection.camera.scale);\n                var minScale = min.apply(void 0, projection.camera.scale);\n                // If we scale always then the rectangle stays within it's initial world bounds at all times\n                if (rectangle.scaling === types_2.ScaleType.ALWAYS) {\n                    return true;\n                }\n                // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n                // Rectangle the same size. If the camera zooms out then the bounds === the world bounds.\n                else if (rectangle.scaling === types_2.ScaleType.BOUND_MAX) {\n                    // We are zooming out. the bounds will stay within the world bounds\n                    if (minScale <= 1 && maxScale <= 1) {\n                        return true;\n                    }\n                    // We are zooming in. The bounds will shrink to keep the rectangle at max font size\n                    else {\n                        // The location is within the world, but we reverse project the anchor spread\n                        var anchorEffect = [0, 0];\n                        if (rectangle.anchor) {\n                            anchorEffect[0] = rectangle.anchor.x || 0;\n                            anchorEffect[1] = rectangle.anchor.y || 0;\n                        }\n                        var topLeft = [\n                            rectangle.x - (anchorEffect[0] / maxScale),\n                            rectangle.y - (anchorEffect[1] / maxScale),\n                        ];\n                        // Reverse project the size and we should be within the distorted world coordinates\n                        return new primitives_1.Bounds({\n                            height: rectangle.height / maxScale,\n                            width: rectangle.width / maxScale,\n                            x: topLeft[0],\n                            y: topLeft[1],\n                        }).containsPoint(point);\n                    }\n                }\n                // If we never allow the rectangle to scale, then the bounds will grow and shrink to counter the effects\n                // Of the camera zoom\n                else if (rectangle.scaling === types_2.ScaleType.NEVER) {\n                    // The location is within the world, but we reverse project the anchor spread\n                    var anchorEffect = [0, 0];\n                    if (rectangle.anchor) {\n                        anchorEffect[0] = rectangle.anchor.x || 0;\n                        anchorEffect[1] = rectangle.anchor.y || 0;\n                    }\n                    var topLeft = projection.worldToScreen({\n                        x: rectangle.x - (anchorEffect[0] / projection.camera.scale[0]),\n                        y: rectangle.y - (anchorEffect[1] / projection.camera.scale[1]),\n                    });\n                    var screenPoint = projection.worldToScreen(point);\n                    // Reverse project the size and we should be within the distorted world coordinates\n                    return new primitives_1.Bounds({\n                        height: rectangle.height,\n                        width: rectangle.width,\n                        x: topLeft.x,\n                        y: topLeft.y,\n                    }).containsPoint(screenPoint);\n                }\n                return true;\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    RectangleLayer.prototype.initShader = function () {\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: 0,\n            1: 0,\n            2: 0,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./rectangle-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'location',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'anchor',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.anchor.x || 0, o.anchor.y || 0]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'size',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.width, o.height]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'scaling',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scaling]; },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.color; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (u) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./rectangle-layer.vs'),\n        };\n    };\n    RectangleLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    RectangleLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return RectangleLayer;\n}(layer_1.Layer));\nexports.RectangleLayer = RectangleLayer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./rectangle-layer\"));\n__export(require(\"./rectangle-instance\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar instance_1 = require(\"../../instance-provider/instance\");\nvar texture_1 = require(\"../../surface/texture\");\nvar types_1 = require(\"../types\");\n/**\n * This is a lookup to find existing rasterizations for a particularly created label so that every\n * new label does not have to go through the rasterization process.\n */\nvar rasterizationLookUp = new Map();\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nvar anchorCalculator = (_a = {},\n    _a[types_1.AnchorType.TopLeft] = function (anchor, label) {\n        anchor.x = -anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopMiddle] = function (anchor, label) {\n        anchor.x = label.width / 2.0;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopRight] = function (anchor, label) {\n        anchor.x = label.width + anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.MiddleLeft] = function (anchor, label) {\n        anchor.x = -anchor.padding;\n        anchor.y = label.height / 2;\n    },\n    _a[types_1.AnchorType.Middle] = function (anchor, label) {\n        anchor.x = label.width / 2.0;\n        anchor.y = label.height / 2.0;\n    },\n    _a[types_1.AnchorType.MiddleRight] = function (anchor, label) {\n        anchor.x = label.width + anchor.padding;\n        anchor.y = label.height / 2.0;\n    },\n    _a[types_1.AnchorType.BottomLeft] = function (anchor, label) {\n        anchor.x = -anchor.padding;\n        anchor.y = label.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomMiddle] = function (anchor, label) {\n        anchor.x = label.width / 2.0;\n        anchor.y = label.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomRight] = function (anchor, label) {\n        anchor.x = label.width + anchor.padding;\n        anchor.y = label.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.Custom] = function (anchor, label) {\n        anchor.x = anchor.x || 0;\n        anchor.y = anchor.y || 0;\n    },\n    _a);\n/**\n * This generates a new label instance which will render a single line of text for a given layer.\n * There are restrictions surrounding labels due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a label via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Labels should only be so long.\n * - Multiline is not supported inherently\n * - Once a label is constructed, only SOME properties can be altered thereafter\n *\n * A label that is constructed can only have some properties set upon creating the label and are locked\n * thereafter. The only way to modify them would be to destroy the label, then construct a new label\n * with the modifications. This has to deal with performance regarding rasterizing the label\n */\nvar LabelInstance = /** @class */ (function (_super) {\n    __extends(LabelInstance, _super);\n    function LabelInstance(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the rendered color of the label */\n        _this.color = [0, 0, 0, 1];\n        /** Depth sorting of the label (or the z value of the label) */\n        _this.depth = 0;\n        /** When in BOUND_MAX mode, this allows the label to scale up beyond it's max size */\n        _this.maxScale = 1;\n        /** Sets the way the label scales with the world */\n        _this.scaling = types_1.ScaleType.BOUND_MAX;\n        /** Scales the label uniformly */\n        _this.scale = 1.0;\n        /** The x coordinate where the label will be anchored to in world space */\n        _this.x = 0;\n        /** The y coordinate where the label will be anchored to in world space */\n        _this.y = 0;\n        // The following properties are properties that are locked in after creating this label\n        // As the properties are completely locked into how the label was rasterized and can not\n        // Nor should not be easily adjusted for performance concerns\n        _this._cssFont = '';\n        _this._fontFamily = 'Arial';\n        _this._fontSize = 12;\n        _this._fontStyle = 'normal';\n        _this._fontWeight = 400;\n        _this._maxWidth = 0;\n        _this._text = '';\n        _this._width = 0;\n        _this._height = 0;\n        _this._isDestroyed = false;\n        // These are properties that can be altered, but have side effects from being changed\n        /** This is the anchor location on the  */\n        _this._anchor = {\n            padding: 0,\n            type: types_1.AnchorType.TopLeft,\n            x: 0,\n            y: 0,\n        };\n        _this.depth = options.depth || _this.depth;\n        _this.color = options.color || _this.color;\n        _this.maxScale = options.maxScale || _this.maxScale;\n        _this.scaling = options.scaling || _this.scaling;\n        _this.scale = options.scale || _this.scale;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        _this._fontFamily = options.fontFamily || _this._fontFamily;\n        _this._fontSize = options.fontSize || _this._fontSize;\n        _this._fontStyle = options.fontStyle || _this._fontStyle;\n        _this._fontWeight = options.fontWeight || _this._fontWeight;\n        _this._maxWidth = options.maxWidth || 0;\n        _this._text = options.text || _this._text;\n        // We get the CSS font string for this label so we can uniquely identify the rasterization\n        // Easily.\n        _this._cssFont = texture_1.LabelRasterizer.makeCSSFont(_this, 1);\n        // This is css font used to look up rasterizations. This lookup includes the max width of the label\n        // Which the css font does not account for\n        var cssFontLookup = _this._cssFont + \"_\" + _this._maxWidth;\n        // Look for other same texts that have been rasterized\n        var rasterizations = rasterizationLookUp.get(_this._text);\n        var rasterization;\n        if (rasterizations) {\n            // Look for those texts that have been rasterized in the same fashion that this label is requesting\n            rasterization = rasterizations.get(cssFontLookup);\n            // If a rasterization exists, we must increment the use reference\n            if (rasterization) {\n                rasterization.references++;\n            }\n        }\n        else {\n            rasterizations = new Map();\n        }\n        // If we have not found an existing rasterization\n        if (!rasterization) {\n            rasterization = {\n                references: 1,\n                resource: new texture_1.LabelAtlasResource(_this),\n            };\n            // Look to see if any rasterization options were specified\n            if (options.rasterization) {\n                rasterization.resource.sampleScale = options.rasterization.scale || 1.0;\n            }\n            // Ensure the sample scale is set. Defaults to 1.0\n            rasterization.resource.sampleScale = rasterization.resource.sampleScale || 1.0;\n            // Rasterize the resource generated for this label. We need it immediately rasterized so\n            // That we can utilize the dimensions for calculations.\n            texture_1.LabelRasterizer.renderSync(rasterization.resource);\n            // Now that we have an official rasterization for this text / label combo, we shall store it\n            // For others to look up\n            rasterizationLookUp.set(_this._text, rasterizations);\n            rasterizations.set(cssFontLookup, rasterization);\n        }\n        _this._rasterization = rasterization;\n        _this._width = rasterization.resource.rasterization.world.width;\n        _this._height = rasterization.resource.rasterization.world.height;\n        // Make sure the anchor is set to the appropriate location\n        options.anchor && _this.setAnchor(options.anchor);\n        return _this;\n    }\n    /**\n     * TODO: We should be implementing the destroy on LabelInstances to clean this up\n     * Frees up module scoped data.\n     */\n    LabelInstance.destroy = function () {\n        rasterizationLookUp.clear();\n    };\n    Object.defineProperty(LabelInstance.prototype, \"cssFont\", {\n        // The following are the getters for the locked in parameters of the label so we can read\n        // The properties but not set any of them.\n        /**\n         * This is the full css string that represents this label. This + the text of the label is essentially\n         * a unique identifier for the rendering of the label and is used to key the rasterization of the label\n         * so that label rasterization can be shared for similar labels.\n         */\n        get: function () { return this._cssFont; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"isDestroyed\", {\n        /** This flag indicates if this label is valid anymore */\n        get: function () { return this._isDestroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontFamily\", {\n        /** This is the font family of the label */\n        get: function () { return this._fontFamily; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontSize\", {\n        /**\n         * This is the size of the label in pixels. For Labels, this correlates to the rendering font size.\n         * The true pixel height of the label is calculated and placed into the height property for the label.\n         */\n        get: function () { return this._fontSize; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontStyle\", {\n        /** This is the style of the font (italic, oblique, etc) */\n        get: function () { return this._fontStyle; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontWeight\", {\n        /** This is the font weight specified for the label (bold, normal, etc). */\n        get: function () { return this._fontWeight; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"maxWidth\", {\n        /** This is the max width in pixels this label can fill */\n        get: function () { return this._maxWidth; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"resource\", {\n        /** This gets the atlas resource that is uniquely identified for this label */\n        get: function () { return this._rasterization.resource; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"text\", {\n        /** This is the label's text. */\n        get: function () { return this._text; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"truncatedText\", {\n        /**\n         * If a maxWidth is specified, there is a chance the text will be truncated.\n         * This provides the calculated truncated text.\n         */\n        get: function () { return this._rasterization.resource.truncatedText || this.text; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"width\", {\n        /**\n         * This is the width in world space of the label. If there is no camera distortion,\n         * this would be the width of the label in pixels on the screen.\n         */\n        get: function () {\n            return this._width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"height\", {\n        /**\n         * This is the height in world space of the label. If there is no camera distortion,\n         * this would be the height of the label in pixels on the screen.\n         */\n        get: function () {\n            return this._height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Labels are a sort of unique case where the use of a label should be destroyed as rasterization\n     * resources are in a way kept alive through reference counting.\n     */\n    LabelInstance.prototype.destroy = function () {\n        if (!this._isDestroyed) {\n            this._isDestroyed = true;\n            this._rasterization.references--;\n            // If all references are cleared, then the rasterization needs to be eradicated\n            if (this._rasterization.references === 0) {\n                this._rasterization.resource;\n            }\n        }\n    };\n    Object.defineProperty(LabelInstance.prototype, \"anchor\", {\n        get: function () {\n            return this._anchor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This applies a new anchor to this label and properly determines it's anchor position on the label\n     */\n    LabelInstance.prototype.setAnchor = function (anchor) {\n        var newAnchor = {\n            padding: anchor.padding || 0,\n            type: anchor.type,\n            x: anchor.x || 0,\n            y: anchor.y || 0,\n        };\n        // Calculate the new anchors position values\n        anchorCalculator[newAnchor.type](newAnchor, this);\n        // Apply the anchor\n        this._anchor = newAnchor;\n    };\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"color\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"depth\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"maxScale\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"scaling\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"scale\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"x\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"y\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"_anchor\", void 0);\n    return LabelInstance;\n}(instance_1.Instance));\nexports.LabelInstance = LabelInstance;\nvar _a;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Determine final screen size of label\\n  vec3 screenSize = cameraSpaceSize(vec3(size * scale / maxScale, 1.0));\\n\\n  // Test whether the label is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y || screenSize.x > size.x;\\n\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n\\n  // Correct aspect ratio.  Sufficient fix for most applications.\\n  // Will need another solution in the case of:\\n  //  (cameraScale y != cameraScale.x) && (cameraScale.x != 1 && cameraScale.y != 1)\\n\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float(cameraScale.x != cameraScale.y);\\n\\n  size = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  vec2 scaledAnchor = anchor * scale;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + scaledAnchor;\\n\\n  vec2 adjustedAnchor = mix(\\n    scaledAnchor,\\n    (scaledAnchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // Get the position of the current vertex\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * scale * size + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the label\\n  float labelScreenScale = mix(\\n    screenSize.y / size.y,\\n    screenSize.x / size.x,\\n    float((cameraScale.x != 1.0))\\n  );\\n\\n  float currentScale = labelScreenScale * scale;\\n\\n  // If our screen rendering is larger than the size the label is supposed to be, then we automagically\\n  // scale down our label to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / labelScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  // --Texture and Color\\n  // Get the tex coord from our inject texture info\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the label's color as a tint to the label (all labels are rendered white to the base texture)\\n  vertexColor = color;\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  gl_FragColor = texture2D(labelAtlas, texCoord) * vertexColor;\\n  setColor(gl_FragColor * gl_FragColor.a);\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar types_2 = require(\"../types\");\nvar max = Math.max, min = Math.min;\n/**\n * This layer displays Labels and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar LabelLayer = /** @class */ (function (_super) {\n    __extends(LabelLayer, _super);\n    function LabelLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    LabelLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given label\n            boundsAccessor: function (label) {\n                var anchor = [label.anchor.x || 0, label.anchor.y || 0];\n                var topLeft = [\n                    label.x - anchor[0],\n                    label.y - anchor[1],\n                ];\n                return new primitives_1.Bounds({\n                    height: label.height,\n                    width: label.width,\n                    x: topLeft[0],\n                    y: topLeft[1],\n                });\n            },\n            // Provide a precise hit test for the circle\n            hitTest: function (label, point, view) {\n                // The bounds of the label is in world space, but it does not account for the scale mode of the label.\n                // Here, we will apply the scale mode testing to the label\n                var maxScale = max.apply(void 0, view.camera.scale);\n                var minScale = min.apply(void 0, view.camera.scale);\n                // If we scale always then the label stays within it's initial world bounds at all times\n                if (label.scaling === types_2.ScaleType.ALWAYS) {\n                    return true;\n                }\n                // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n                // Label the same size. If the camera zooms out then the bounds === the world bounds.\n                else if (label.scaling === types_2.ScaleType.BOUND_MAX) {\n                    // We are zooming out. the bounds will stay within the world bounds\n                    if (minScale <= 1 && maxScale <= 1) {\n                        return true;\n                    }\n                    // We are zooming in. The bounds will shrink to keep the label at max font size\n                    else {\n                        var anchor = [label.anchor.x || 0, label.anchor.y || 0];\n                        // The location is within the world, but we reverse project the anchor spread\n                        var topLeft = view.worldToScreen({\n                            x: label.x - (anchor[0] / view.camera.scale[0]),\n                            y: label.y - (anchor[1] / view.camera.scale[1]),\n                        });\n                        var screenPoint = view.worldToScreen(point);\n                        // Reverse project the size and we should be within the distorted world coordinates\n                        return new primitives_1.Bounds({\n                            height: label.height,\n                            width: label.width,\n                            x: topLeft.x,\n                            y: topLeft.y,\n                        }).containsPoint(screenPoint);\n                    }\n                }\n                // If we never allow the label to scale, then the bounds will grow and shrink to counter the effects\n                // Of the camera zoom\n                else if (label.scaling === types_2.ScaleType.NEVER) {\n                    var anchor = [label.anchor.x || 0, label.anchor.y || 0];\n                    // The location is within the world, but we reverse project the anchor spread\n                    var topLeft = view.worldToScreen({\n                        x: label.x - (anchor[0] / view.camera.scale[0]),\n                        y: label.y - (anchor[1] / view.camera.scale[1]),\n                    });\n                    var screenPoint = view.worldToScreen(point);\n                    // Reverse project the size and we should be within the distorted world coordinates\n                    return new primitives_1.Bounds({\n                        height: label.height,\n                        width: label.width,\n                        x: topLeft.x,\n                        y: topLeft.y,\n                    }).containsPoint(screenPoint);\n                }\n                return true;\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    LabelLayer.prototype.initShader = function () {\n        var _this = this;\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: 0,\n            1: 0,\n            2: 0,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./label-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'location',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'anchor',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.anchor.x || 0, o.anchor.y || 0]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'size',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.width, o.height]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'scaling',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scaling]; },\n                },\n                {\n                    atlas: {\n                        key: this.props.atlas || '',\n                        name: 'labelAtlas',\n                    },\n                    block: 2,\n                    name: 'texture',\n                    update: function (o) { return _this.resource.request(_this, o, o.resource); },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.color; },\n                },\n                {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'scale',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scale]; },\n                },\n                {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.TWO,\n                    name: 'maxScale',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.maxScale]; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (u) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./label-layer.vs'),\n        };\n    };\n    LabelLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    LabelLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return LabelLayer;\n}(layer_1.Layer));\nexports.LabelLayer = LabelLayer;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar canvas;\nvar ImageRasterizer = /** @class */ (function () {\n    function ImageRasterizer() {\n    }\n    /**\n     * This loops until our canvas context is available\n     */\n    ImageRasterizer.awaitContext = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!canvas) return [3 /*break*/, 2];\n                        this.getContext();\n                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 0];\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Attempts to populate the 'canvas' context for rendering images offscreen.\n     */\n    ImageRasterizer.getContext = function () {\n        if (!canvas) {\n            canvas = document.createElement('canvas').getContext('2d');\n        }\n        return canvas;\n    };\n    /**\n     * This renders our image to a sizeable canvas where we loop over the pixel data to determine\n     * the bounds of the image.\n     *\n     * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n     *                                 the size to be rendered to the texture to the size the image\n     *                                 should be within world space.\n     * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n     */\n    ImageRasterizer.calculateImageSize = function (resource, sampleScale) {\n        /** Get the image properties for rasterizing */\n        var image = resource.image.element;\n        if (!image) {\n            console.warn('Image does not exist! Please ensure the resource contains a valid image.');\n            return;\n        }\n        if (!canvas) {\n            console.warn('The Image rasterizer was unable to establish a valid canvas context. Please ensure the system supports contexts and ensure the document is ready first.');\n            return;\n        }\n        if (image.width === 0 || image.height === 0) {\n            console.warn('Images provided shoud have valid dimensions! Please ensure the image is loaded first.');\n            return;\n        }\n        // Just make sure th canvas is available\n        canvas.canvas.width = 100;\n        canvas.canvas.height = 100;\n        // Render the image into our canvas merely to ensure the image can be rendered\n        // This action often 'warms up' images such as images that have a data URL instead of a path\n        canvas.drawImage(image, 0, 0);\n        // Make sure the rasterization object is initialized\n        resource.rasterization = resource.rasterization || {\n            texture: { height: 0, width: 0 },\n            world: { height: 0, width: 0 },\n        };\n        // Update the calculated texture size.\n        resource.rasterization.texture = {\n            height: image.height * resource.sampleScale,\n            width: image.width * resource.sampleScale,\n        };\n        resource.rasterization.world = {\n            height: image.height,\n            width: image.width,\n        };\n        resource.rasterization.image = image;\n    };\n    /**\n     * Performs the rendering of the image\n     */\n    ImageRasterizer.render = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // Make sure our canvas object is ready for rendering\n                    return [4 /*yield*/, this.awaitContext()];\n                    case 1:\n                        // Make sure our canvas object is ready for rendering\n                        _a.sent();\n                        // Calculate all of the image metrics and ensure the image can be drawn\n                        this.calculateImageSize(resource, resource.sampleScale);\n                        return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    /**\n     * Performs the rendering of the image\n     */\n    ImageRasterizer.renderSync = function (resource) {\n        // Ensure our offscreen canvas is prepped\n        this.getContext();\n        if (!canvas) {\n            console.warn('Can not render a image synchronously without the canvas context being ready.');\n            return resource;\n        }\n        // Calculate all of the image metrics and generate a canvas on the image that can\n        // Be rendered to the canvas.\n        this.calculateImageSize(resource, resource.sampleScale);\n        return resource;\n    };\n    return ImageRasterizer;\n}());\nexports.ImageRasterizer = ImageRasterizer;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\nvar atlas_1 = require(\"./atlas\");\nvar color_atlas_resource_1 = require(\"./color-atlas-resource\");\nvar color_rasterizer_1 = require(\"./color-rasterizer\");\nvar image_atlas_resource_1 = require(\"./image-atlas-resource\");\nvar label_atlas_resource_1 = require(\"./label-atlas-resource\");\nvar label_rasterizer_1 = require(\"./label-rasterizer\");\nvar sub_texture_1 = require(\"./sub-texture\");\nvar debug = require('debug')('webgl-surface:Atlas');\nvar ZERO_IMAGE = {\n    aspectRatio: 0,\n    atlasBL: { x: 0, y: 0 },\n    atlasBR: { x: 0, y: 0 },\n    atlasReferenceID: '',\n    atlasTexture: null,\n    atlasTL: { x: 0, y: 0 },\n    atlasTR: { x: 0, y: 0 },\n    heightOnAtlas: 0,\n    isValid: false,\n    pixelHeight: 0,\n    pixelWidth: 0,\n    widthOnAtlas: 0,\n};\n/**\n * Determines if a SubTexture is a valid SubTexture for rendering\n */\nfunction isValidImage(image) {\n    var isValid = false;\n    if (image && image.isValid) {\n        if (image.pixelWidth && image.pixelHeight) {\n            isValid = true;\n        }\n    }\n    return isValid;\n}\n/**\n * Defines a manager of atlas', which includes generating the atlas and producing\n * textures defining those pieces of atlas.\n */\nvar AtlasManager = /** @class */ (function () {\n    function AtlasManager() {\n        /** Stores all of the generated atlas' in a lookup by name */\n        this.allAtlas = new Map();\n    }\n    /**\n     * Atlas' must be created from scratch to update them. In order to properly\n     * update an existing one, you must destroy it then recreate it again.\n     * This is from not knowing how to update a texture via three js.\n     *\n     * @param resources The images with their image path set to be loaded into the atlas.\n     *               Images that keep an atlas ID of null indicates the image did not load\n     *               correctly\n     *\n     * @return {Texture} The Threejs texture that is created as our atlas. The images injected\n     *                   into the texture will be populated with the atlas'\n     */\n    AtlasManager.prototype.createAtlas = function (options, resources) {\n        return __awaiter(this, void 0, void 0, function () {\n            var atlas;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        atlas = new atlas_1.Atlas(options);\n                        // Set the manager to the atlas\n                        atlas.setManager(this);\n                        // Make the atlas identifiable by it's name\n                        this.allAtlas.set(atlas.id, atlas);\n                        if (!resources) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.updateAtlas(atlas.id, resources)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        debug('Atlas Created-> %o', atlas);\n                        return [2 /*return*/, atlas];\n                }\n            });\n        });\n    };\n    /**\n     * Free ALL resources under this manager\n     */\n    AtlasManager.prototype.destroy = function () {\n        this.allAtlas.forEach(function (value) { return value.destroy(); });\n    };\n    /**\n     * Disposes of the resources the atlas held and makes the atlas invalid for use\n     *\n     * @param atlasName\n     */\n    AtlasManager.prototype.destroyAtlas = function (atlasName) {\n        var atlas = this.allAtlas.get(atlasName);\n        if (atlas) {\n            atlas.destroy();\n        }\n    };\n    AtlasManager.prototype.setDefaultImage = function (image, atlasName) {\n        image = Object.assign(image, ZERO_IMAGE, { atlasReferenceID: atlasName });\n        return image;\n    };\n    /**\n     * This loads, packs, and draws the indicated image into the specified canvas\n     * using the metrics that exists for the specified atlas.\n     *\n     * @param resource The image who should have it's image path loaded\n     * @param atlasName The name of the atlas to make the packing work\n     * @param canvas The canvas we will be drawing into to generate the complete image\n     *\n     * @return {Promise<boolean>} Promise that resolves to if the image successfully was drawn or not\n     */\n    AtlasManager.prototype.draw = function (atlas, resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var canvas, atlasName, loadedImage, rasterization, texture, rect, dimensions, packing, insertedNode, ux, uy, uw, uh, onePixelX, atlasDimensions, bottom, top_1, left, right;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        canvas = atlas.texture.image;\n                        atlasName = atlas.id;\n                        // Register the resource with the atlas\n                        if (!atlas.registerResource(resource)) {\n                            console.warn('Could not draw resource to the atlas as the resource was not properly registered to the atlas first', atlas, resource);\n                            return [2 /*return*/, Promise.resolve(false)];\n                        }\n                        return [4 /*yield*/, this.loadImage(resource)];\n                    case 1:\n                        loadedImage = _a.sent();\n                        // Only a non-null image means the image loaded correctly\n                        if (loadedImage && isValidImage(resource.texture)) {\n                            rasterization = resource.rasterization;\n                            texture = resource.texture;\n                            rect = new bounds_1.Bounds({ left: 0, right: rasterization.texture.width, top: 0, bottom: rasterization.texture.height });\n                            dimensions = {\n                                first: texture,\n                                second: rect,\n                            };\n                            // Auto add a buffer in\n                            dimensions.second.width += 1;\n                            dimensions.second.height += 1;\n                            packing = atlas.packing;\n                            insertedNode = packing.insert(dimensions);\n                            // If the result was NULL we did not successfully insert the image into any map\n                            if (insertedNode) {\n                                debug('Atlas location determined: %o', insertedNode);\n                                // Apply the image to the node\n                                insertedNode.nodeImage = texture;\n                                ux = insertedNode.nodeDimensions.x / atlas.width;\n                                uy = insertedNode.nodeDimensions.y / atlas.height;\n                                uw = insertedNode.nodeDimensions.width / atlas.width;\n                                uh = insertedNode.nodeDimensions.height / atlas.height;\n                                onePixelX = 1 / atlas.width;\n                                atlasDimensions = new bounds_1.Bounds({\n                                    bottom: 1.0 - uy,\n                                    left: ux,\n                                    right: ux + uw,\n                                    top: 1.0 - (uy + uh),\n                                });\n                                bottom = atlasDimensions.bottom;\n                                top_1 = atlasDimensions.y;\n                                left = atlasDimensions.x;\n                                right = atlasDimensions.x + atlasDimensions.width - onePixelX;\n                                texture.atlasReferenceID = atlasName;\n                                texture.atlasTL = { x: left, y: top_1 };\n                                texture.atlasBR = { x: right, y: bottom };\n                                texture.atlasBL = { x: left, y: bottom };\n                                texture.atlasTR = { x: right, y: top_1 };\n                                texture.widthOnAtlas = Math.abs(texture.atlasTR.x - texture.atlasTL.x);\n                                texture.heightOnAtlas = Math.abs(texture.atlasTR.y - texture.atlasBR.y);\n                                texture.pixelWidth = rasterization.texture.width;\n                                texture.pixelHeight = rasterization.texture.height;\n                                // Now draw the image to the indicated canvas\n                                canvas.getContext('2d').drawImage(loadedImage, insertedNode.nodeDimensions.x, insertedNode.nodeDimensions.y);\n                                // We have finished inserting\n                                return [2 /*return*/, true];\n                            }\n                            else {\n                                // Log an error\n                                console.error(\"Could not fit resource into atlas\", resource);\n                                resource.texture = this.setDefaultImage(resource.texture, atlasName);\n                                return [2 /*return*/, false];\n                            }\n                        }\n                        else {\n                            // Log an error and load a default sub texture\n                            console.error(\"Could not load resource:\", resource);\n                            resource.texture = this.setDefaultImage(resource.texture, atlasName);\n                            return [2 /*return*/, false];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Retrieves the threejs texture for the atlas\n     *\n     * @param atlasName The identifier of the atlas\n     */\n    AtlasManager.prototype.getAtlasTexture = function (atlasName) {\n        return this.allAtlas.get(atlasName);\n    };\n    /**\n     * This takes in any atlas resource and rasterizes it.\n     *\n     * @param {SubTexture} resource This is any atlas resource which will have it's image rasterized\n     *\n     * @return {Promise<HTMLImageElement>} A promise to resolve to the loaded image\n     *                                     or null if there was an error\n     */\n    AtlasManager.prototype.loadImage = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var imageSrc, subTexture, image_1, image, image;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        imageSrc = '';\n                        subTexture = resource.texture || new sub_texture_1.SubTexture();\n                        resource.texture = subTexture;\n                        if (!(resource instanceof image_atlas_resource_1.ImageAtlasResource)) return [3 /*break*/, 4];\n                        if (!resource.image.element) return [3 /*break*/, 2];\n                        if (resource.image.element.width !== 0 && resource.image.element.height !== 0) {\n                            image_1 = resource.image.element;\n                            subTexture.pixelWidth = image_1.width;\n                            subTexture.pixelHeight = image_1.height;\n                            subTexture.aspectRatio = image_1.width / image_1.height;\n                            return [2 /*return*/, image_1];\n                        }\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                var image = resource.image.element;\n                                if (image) {\n                                    image.onload = function () {\n                                        subTexture.pixelWidth = image.width;\n                                        subTexture.pixelHeight = image.height;\n                                        subTexture.aspectRatio = image.width / image.height;\n                                        resolve(image);\n                                    };\n                                    image.onerror = function () {\n                                        resolve(null);\n                                    };\n                                }\n                                else {\n                                    resolve(null);\n                                }\n                            })];\n                    case 1:\n                        image = _a.sent();\n                        return [2 /*return*/, image];\n                    case 2:\n                        if (resource.image.path) {\n                            imageSrc = resource.image.path;\n                        }\n                        _a.label = 3;\n                    case 3: return [3 /*break*/, 10];\n                    case 4:\n                        if (!(resource instanceof label_atlas_resource_1.LabelAtlasResource)) return [3 /*break*/, 7];\n                        if (!!resource.rasterization.canvas) return [3 /*break*/, 6];\n                        return [4 /*yield*/, label_rasterizer_1.LabelRasterizer.render(resource)];\n                    case 5:\n                        _a.sent();\n                        _a.label = 6;\n                    case 6:\n                        // Make sure the rasterization properly executed\n                        if (resource.rasterization.canvas) {\n                            debug('Rasterized label %o', resource.rasterization);\n                            imageSrc = resource.rasterization.canvas.toDataURL('image/png');\n                        }\n                        else {\n                            console.warn('The label was not able to be rasterized');\n                        }\n                        return [3 /*break*/, 10];\n                    case 7:\n                        if (!(resource instanceof color_atlas_resource_1.ColorAtlasResource)) return [3 /*break*/, 10];\n                        if (!!resource.rasterization.canvas) return [3 /*break*/, 9];\n                        return [4 /*yield*/, color_rasterizer_1.ColorRasterizer.render(resource)];\n                    case 8:\n                        _a.sent();\n                        _a.label = 9;\n                    case 9:\n                        // Make sure the rasterization properly executed\n                        if (resource.rasterization.canvas) {\n                            debug('Rasterized color %o', resource.rasterization);\n                            imageSrc = resource.rasterization.canvas.toDataURL('image/png');\n                        }\n                        else {\n                            console.warn('The color was not able to be rasterized');\n                        }\n                        _a.label = 10;\n                    case 10:\n                        if (!imageSrc) return [3 /*break*/, 12];\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                var image = new Image();\n                                image.onload = function () {\n                                    subTexture.pixelWidth = image.width;\n                                    subTexture.pixelHeight = image.height;\n                                    subTexture.aspectRatio = image.width / image.height;\n                                    resolve(image);\n                                };\n                                image.onerror = function () {\n                                    resolve(null);\n                                };\n                                image.src = imageSrc;\n                            })];\n                    case 11:\n                        image = _a.sent();\n                        return [2 /*return*/, image];\n                    case 12: return [2 /*return*/, null];\n                }\n            });\n        });\n    };\n    /**\n     * This targets an existing atlas and attempts to update it with the provided atlas resources.\n     *\n     * @param atlasName\n     * @param resources\n     */\n    AtlasManager.prototype.updateAtlas = function (atlasName, resources) {\n        return __awaiter(this, void 0, void 0, function () {\n            var atlas, _i, resources_1, resource;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        atlas = this.allAtlas.get(atlasName);\n                        if (!atlas) return [3 /*break*/, 5];\n                        _i = 0, resources_1 = resources;\n                        _a.label = 1;\n                    case 1:\n                        if (!(_i < resources_1.length)) return [3 /*break*/, 4];\n                        resource = resources_1[_i];\n                        return [4 /*yield*/, this.draw(atlas, resource)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        // Perform the best method for updating the underlying texture of the atlas to the latest changes\n                        atlas.updateTexture();\n                        return [3 /*break*/, 6];\n                    case 5:\n                        console.warn('Can not update non-existing atlas:', atlasName, 'These resources will not be loaded:', resources);\n                        _a.label = 6;\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return AtlasManager;\n}());\nexports.AtlasManager = AtlasManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\n/**\n * This is used specifically by the atlas manager to aid in packing\n * in textures within an area. This will guarantee boundaries of textures are\n * not violated and provide proper feedback for where to draw a given image\n */\nvar PackNode = /** @class */ (function () {\n    function PackNode(x, y, width, height) {\n        this.child = [null, null];\n        this.isLeaf = true;\n        this.nodeImage = null;\n        this.nodeDimensions = new bounds_1.Bounds({\n            height: height,\n            width: width,\n            x: x,\n            y: y,\n        });\n    }\n    /**\n     * Deletes all of the sub nodes in this Mapping, thus clearing up memory usage\n     */\n    PackNode.prototype.destroy = function () {\n        var child0 = this.child[0];\n        var child1 = this.child[1];\n        this.nodeImage = null;\n        if (child0) {\n            child0.destroy();\n        }\n        if (child1) {\n            child1.destroy();\n        }\n        this.child[0] = null;\n        this.child[1] = null;\n    };\n    /**\n     * Indicates if there is a child\n     */\n    PackNode.prototype.hasChild = function () {\n        var child0 = this.child[0];\n        var child1 = this.child[1];\n        if (child0 && !child0.nodeImage) {\n            return !child0.isLeaf;\n        }\n        if (child1 && !child1.nodeImage) {\n            return !child1.isLeaf;\n        }\n        return false;\n    };\n    /**\n     * Inserts images into our mapping, fitting them appropriately\n     */\n    PackNode.prototype.insert = function (image) {\n        var child0 = this.child[0];\n        var child1 = this.child[1];\n        if (!this.isLeaf && child0 && child1) {\n            // Try inserting into first child\n            var newNode = child0.insert(image);\n            if (newNode !== null) {\n                return newNode;\n            }\n            // No room in first so insert into second\n            return child1.insert(image);\n        }\n        else {\n            // If there's already an image here, return\n            if (this.nodeImage) {\n                return null;\n            }\n            // Check the fit status of the image in this nodes rectangle space\n            var fitFlag = this.nodeDimensions.fits(image.second);\n            // If we're too small, return null indicating can not fit\n            if (fitFlag === 0) {\n                return null;\n            }\n            // If we're just right, accept\n            if (fitFlag === 1) {\n                return this;\n            }\n            // Otherwise, gotta split this node and create some leaves\n            this.isLeaf = false;\n            // Get the image width\n            var imgWidth = image.second.width;\n            var imgHeight = image.second.height;\n            // Decide which way to split\n            var dWidth = this.nodeDimensions.width - imgWidth;\n            var dHeight = this.nodeDimensions.height - image.second.height;\n            if (dWidth > dHeight) {\n                child0 = this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, imgWidth, this.nodeDimensions.height);\n                child1 = this.child[1] = new PackNode(this.nodeDimensions.x + imgWidth, this.nodeDimensions.y, dWidth, this.nodeDimensions.height);\n            }\n            else {\n                child0 = this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, this.nodeDimensions.width, imgHeight);\n                child1 = this.child[1] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y + imgHeight, this.nodeDimensions.width, dHeight);\n            }\n        }\n        // Insert into first child we created\n        return child0.insert(image);\n    };\n    /**\n     * Removes the image from the mapping and tries to open up as much space as possible.\n     *\n     * @param {AtlasTexture} image The image to insert into the\n     */\n    PackNode.prototype.remove = function (image) {\n        var child0 = this.child[0];\n        var child1 = this.child[1];\n        if (child1 && child0 && !this.isLeaf) {\n            // Try removing from first child\n            var removed = child0.remove(image);\n            if (removed) {\n                return true;\n            }\n            // Try remove from second\n            removed = child1.remove(image);\n            if (!child0.hasChild()) {\n                if (!child1.hasChild()) {\n                    this.child[0] = null;\n                    this.child[1] = null;\n                }\n            }\n            return removed;\n        }\n        else {\n            if (this.nodeImage === image) {\n                this.nodeImage = null;\n                delete image.atlasReferenceID;\n                image.pixelWidth = 0;\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n    };\n    return PackNode;\n}());\nexports.PackNode = PackNode;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar instance_1 = require(\"../../instance-provider/instance\");\nvar texture_1 = require(\"../../surface/texture\");\nvar types_1 = require(\"../types\");\nvar max = Math.max;\n/**\n * This is a lookup to find existing rasterizations for a particularly created image so that every\n * new image does not have to go through the rasterization process.\n */\nvar rasterizationLookUp = new Map();\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nvar anchorCalculator = (_a = {},\n    _a[types_1.AnchorType.TopLeft] = function (anchor, image) {\n        anchor.x = -anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopMiddle] = function (anchor, image) {\n        anchor.x = image.width / 2.0;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopRight] = function (anchor, image) {\n        anchor.x = image.width + anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.MiddleLeft] = function (anchor, image) {\n        anchor.x = -anchor.padding;\n        anchor.y = image.height / 2;\n    },\n    _a[types_1.AnchorType.Middle] = function (anchor, image) {\n        anchor.x = image.width / 2.0;\n        anchor.y = image.height / 2.0;\n    },\n    _a[types_1.AnchorType.MiddleRight] = function (anchor, image) {\n        anchor.x = image.width + anchor.padding;\n        anchor.y = image.height / 2.0;\n    },\n    _a[types_1.AnchorType.BottomLeft] = function (anchor, image) {\n        anchor.x = -anchor.padding;\n        anchor.y = image.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomMiddle] = function (anchor, image) {\n        anchor.x = image.width / 2.0;\n        anchor.y = image.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomRight] = function (anchor, image) {\n        anchor.x = image.width + anchor.padding;\n        anchor.y = image.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.Custom] = function (anchor, image) {\n        anchor.x = anchor.x || 0;\n        anchor.y = anchor.y || 0;\n    },\n    _a);\n/**\n * This generates a new image instance which will render a single line of text for a given layer.\n * There are restrictions surrounding images due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a image via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Images should only be so long.\n * - Multiline is not supported inherently\n * - Once a image is constructed, only SOME properties can be altered thereafter\n *\n * A image that is constructed can only have some properties set upon creating the image and are locked\n * thereafter. The only way to modify them would be to destroy the image, then construct a new image\n * with the modifications. This has to deal with performance regarding rasterizing the image\n */\nvar ImageInstance = /** @class */ (function (_super) {\n    __extends(ImageInstance, _super);\n    function ImageInstance(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the rendered color of the image */\n        _this.tint = [0, 0, 0, 1];\n        /** Depth sorting of the image (or the z value of the lable) */\n        _this.depth = 0;\n        /** The height of the image as it is to be rendered in world space */\n        _this.height = 1;\n        /** Sets the way the image scales with the world */\n        _this.scaling = types_1.ScaleType.BOUND_MAX;\n        /** The width of the image as it is to be rendered in world space */\n        _this.width = 1;\n        /** The x coordinate where the image will be anchored to in world space */\n        _this.x = 0;\n        /** The y coordinate where the image will be anchored to in world space */\n        _this.y = 0;\n        // The following properties are properties that are locked in after creating this image\n        // As the properties are completely locked into how the image was rasterized and can not\n        // Nor should not be easily adjusted for performance concerns\n        _this._sourceWidth = 0;\n        _this._sourceHeight = 0;\n        _this._isDestroyed = false;\n        // These are properties that can be altered, but have side effects from being changed\n        /** This is the anchor location on the  */\n        _this._anchor = {\n            padding: 0,\n            type: types_1.AnchorType.TopLeft,\n            x: 0,\n            y: 0,\n        };\n        _this.depth = options.depth || _this.depth;\n        _this.tint = options.tint || _this.tint;\n        _this.scaling = options.scaling || _this.scaling;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        // This is the image that is to be rendered\n        _this._element = options.element;\n        // Look for other same texts that have been rasterized\n        var rasterization = rasterizationLookUp.get(_this._path || _this._element);\n        // If a rasterization exists, we must increment the use reference\n        if (rasterization) {\n            rasterization.references++;\n        }\n        // If we have not found an existing rasterization\n        if (!rasterization) {\n            rasterization = {\n                references: 1,\n                resource: new texture_1.ImageAtlasResource(_this),\n            };\n            // Ensure the sample scale is set. Defaults to 1.0\n            rasterization.resource.sampleScale = rasterization.resource.sampleScale || 1.0;\n            // Rasterize the resource generated for this image. We need it immediately rasterized so\n            // That we can utilize the dimensions for calculations.\n            texture_1.ImageRasterizer.renderSync(rasterization.resource);\n            // Now that we have an official rasterization for this image, we shall store it\n            // For others to look up\n            rasterizationLookUp.set(_this._path || _this._element, rasterization);\n        }\n        _this._rasterization = rasterization;\n        _this._sourceWidth = rasterization.resource.rasterization.world.width;\n        _this._sourceHeight = rasterization.resource.rasterization.world.height;\n        _this.width = options.width || _this._sourceWidth || 1;\n        _this.height = options.height || _this._sourceHeight || 1;\n        // Make sure the anchor is set to the appropriate location\n        options.anchor && _this.setAnchor(options.anchor);\n        return _this;\n    }\n    /**\n     * TODO: We should be implementing the destroy on ImageInstances to clean this up\n     * Frees up module scoped data.\n     */\n    ImageInstance.destroy = function () {\n        rasterizationLookUp.clear();\n    };\n    Object.defineProperty(ImageInstance.prototype, \"size\", {\n        get: function () { return max(this.width, this.height); },\n        set: function (value) {\n            var aspect = this.width / this.height;\n            this.width = value * aspect;\n            this.height = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"element\", {\n        // The following are the getters for the locked in parameters of the image so we can read\n        // The properties but not set any of them.\n        /** This is the provided element this image will be rendering */\n        get: function () { return this._element; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"isDestroyed\", {\n        /** This flag indicates if this image is valid anymore */\n        get: function () { return this._isDestroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"path\", {\n        /** This is the path to the image's resource if it's available */\n        get: function () { return this._path; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"resource\", {\n        /** This gets the atlas resource that is uniquely idenfied for this image */\n        get: function () { return this._rasterization.resource; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"sourceWidth\", {\n        /**\n         * This is the width in world space of the image. If there is no camera distortion,\n         * this would be the width of the image in pixels on the screen.\n         */\n        get: function () {\n            return this._sourceWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"sourceHeight\", {\n        /**\n         * This is the height in world space of the image. If there is no camera distortion,\n         * this would be the height of the image in pixels on the screen.\n         */\n        get: function () {\n            return this._sourceHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Images are a sort of unique case where the use of a image should be destroyed as rasterization\n     * resources are in a way kept alive through reference counting.\n     */\n    ImageInstance.prototype.destroy = function () {\n        if (!this._isDestroyed) {\n            this._isDestroyed = true;\n            this._rasterization.references--;\n            // If all references are cleared, then the rasterization needs to be eradicated\n            if (this._rasterization.references === 0) {\n                this._rasterization.resource;\n                console.warn('The destroy method still needs completion');\n            }\n        }\n    };\n    Object.defineProperty(ImageInstance.prototype, \"anchor\", {\n        get: function () {\n            return this._anchor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This applies a new anchor to this image and properly determines it's anchor position on the image\n     */\n    ImageInstance.prototype.setAnchor = function (anchor) {\n        var newAnchor = {\n            padding: anchor.padding || 0,\n            type: anchor.type,\n            x: anchor.x || 0,\n            y: anchor.y || 0,\n        };\n        // Calculate the new anchors position values\n        anchorCalculator[newAnchor.type](newAnchor, this);\n        // Apply the anchor\n        this._anchor = newAnchor;\n    };\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"tint\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"depth\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"height\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"scaling\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"width\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"x\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"y\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"_anchor\", void 0);\n    return ImageInstance;\n}(instance_1.Instance));\nexports.ImageInstance = ImageInstance;\nvar _a;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the image as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the image is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y;\\n\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float(cameraScale.x != cameraScale.y);\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n\\n  // Get the tex coord from our inject texture info\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the image's tint as a tint to the image\\n  vertexColor = tint;\\n\\n  // Correct aspect ratio.\\n  size = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * size + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the image\\n  float imageScreenScale = mix(\\n    screenSize.y / size.y,\\n    screenSize.x / size.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the image is supposed to be, then we automagically\\n  // scale down our image to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / imageScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  gl_FragColor = texture2D(imageAtlas, texCoord) * vertexColor;\\n  setColor(gl_FragColor * gl_FragColor.a);\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar types_2 = require(\"../types\");\nvar min = Math.min, max = Math.max;\n/**\n * This layer displays Images and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar ImageLayer = /** @class */ (function (_super) {\n    __extends(ImageLayer, _super);\n    function ImageLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    ImageLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given image\n            boundsAccessor: function (image) {\n                var anchorEffect = [0, 0];\n                if (image.anchor) {\n                    anchorEffect[0] = image.anchor.x || 0;\n                    anchorEffect[1] = image.anchor.y || 0;\n                }\n                var topLeft = [\n                    image.x - anchorEffect[0],\n                    image.y - anchorEffect[1],\n                ];\n                return new primitives_1.Bounds({\n                    height: image.height,\n                    width: image.width,\n                    x: topLeft[0],\n                    y: topLeft[1],\n                });\n            },\n            // Provide a precise hit test for the circle\n            hitTest: function (image, point, view) {\n                // The bounds of the image is in world space, but it does not account for the scale mode of the image.\n                // Here, we will apply the scale mode testing to the image\n                var maxScale = max.apply(void 0, view.camera.scale);\n                var minScale = min.apply(void 0, view.camera.scale);\n                // If we scale always then the image stays within it's initial world bounds at all times\n                if (image.scaling === types_2.ScaleType.ALWAYS) {\n                    return true;\n                }\n                // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n                // Image the same size. If the camera zooms out then the bounds === the world bounds.\n                else if (image.scaling === types_2.ScaleType.BOUND_MAX) {\n                    // We are zooming out. the bounds will stay within the world bounds\n                    if (minScale <= 1 && maxScale <= 1) {\n                        return true;\n                    }\n                    // We are zooming in. The bounds will shrink to keep the image at max font size\n                    else {\n                        // The location is within the world, but we reverse project the anchor spread\n                        var anchorEffect = [0, 0];\n                        if (image.anchor) {\n                            anchorEffect[0] = image.anchor.x || 0;\n                            anchorEffect[1] = image.anchor.y || 0;\n                        }\n                        var topLeft = view.worldToScreen({\n                            x: image.x - (anchorEffect[0] / view.camera.scale[0]),\n                            y: image.y - (anchorEffect[1] / view.camera.scale[1]),\n                        });\n                        var screenPoint = view.worldToScreen(point);\n                        // Reverse project the size and we should be within the distorted world coordinates\n                        return new primitives_1.Bounds({\n                            height: image.height,\n                            width: image.width,\n                            x: topLeft.x,\n                            y: topLeft.y,\n                        }).containsPoint(screenPoint);\n                    }\n                }\n                // If we never allow the image to scale, then the bounds will grow and shrink to counter the effects\n                // Of the camera zoom\n                else if (image.scaling === types_2.ScaleType.NEVER) {\n                    // The location is within the world, but we reverse project the anchor spread\n                    var anchorEffect = [0, 0];\n                    if (image.anchor) {\n                        anchorEffect[0] = image.anchor.x || 0;\n                        anchorEffect[1] = image.anchor.y || 0;\n                    }\n                    var topLeft = view.worldToScreen({\n                        x: image.x - (anchorEffect[0] / view.camera.scale[0]),\n                        y: image.y - (anchorEffect[1] / view.camera.scale[1]),\n                    });\n                    var screenPoint = view.worldToScreen(point);\n                    // Reverse project the size and we should be within the distorted world coordinates\n                    return new primitives_1.Bounds({\n                        height: image.height,\n                        width: image.width,\n                        x: topLeft.x,\n                        y: topLeft.y,\n                    }).containsPoint(screenPoint);\n                }\n                return true;\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    ImageLayer.prototype.initShader = function () {\n        var _this = this;\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: 0,\n            1: 0,\n            2: 0,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./image-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'location',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'anchor',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.anchor.x || 0, o.anchor.y || 0]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'size',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.width, o.height]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'scaling',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scaling]; },\n                },\n                {\n                    atlas: {\n                        key: this.props.atlas || '',\n                        name: 'imageAtlas',\n                    },\n                    block: 2,\n                    name: 'texture',\n                    update: function (o) { return _this.resource.request(_this, o, o.resource); },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'tint',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.tint; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (u) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./image-layer.vs'),\n        };\n    };\n    ImageLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    ImageLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return ImageLayer;\n}(layer_1.Layer));\nexports.ImageLayer = ImageLayer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_1 = require(\"../../instance-provider/instance\");\nvar observable_1 = require(\"../../instance-provider/observable\");\nvar EdgeInstance = /** @class */ (function (_super) {\n    __extends(EdgeInstance, _super);\n    function EdgeInstance(options) {\n        var _this = _super.call(this, options) || this;\n        _this.colorStart = [1.0, 1.0, 1.0, 1.0];\n        _this.colorEnd = [1.0, 1.0, 1.0, 1.0];\n        _this.control = [[0, 0], [0, 0]];\n        _this.depth = 0;\n        _this.end = [0, 0];\n        _this.start = [0, 0];\n        _this.widthStart = 1.0;\n        _this.widthEnd = 1.0;\n        _this.colorStart = options.colorStart || _this.colorStart;\n        _this.colorEnd = options.colorEnd || _this.colorEnd;\n        _this.control = options.control || _this.control;\n        _this.depth = options.depth || _this.depth;\n        _this.end = options.end || _this.end;\n        _this.widthStart = options.widthStart || _this.widthStart;\n        _this.widthEnd = options.widthEnd || _this.widthEnd;\n        _this.start = options.start || _this.start;\n        return _this;\n    }\n    Object.defineProperty(EdgeInstance.prototype, \"length\", {\n        get: function () {\n            var delta = [\n                this.end[0] - this.start[0],\n                this.end[1] - this.start[1],\n            ];\n            return Math.sqrt(delta[0] * delta[0] + delta[1] * delta[1]);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EdgeInstance.prototype, \"midpoint\", {\n        /**\n         * Calculates the midpoint of the edge\n         */\n        get: function () {\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EdgeInstance.prototype, \"perpendicular\", {\n        /**\n         * Calculates a perpendicular direction vector to the edge\n         */\n        get: function () {\n            var length = this.length;\n            return [\n                (this.end[1] - this.start[1]) / length,\n                -(this.end[0] - this.start[0]) / length,\n            ];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Applies the edge width to the start and end\n     */\n    EdgeInstance.prototype.setEdgeWidth = function (width) {\n        if (width) {\n            this.widthEnd = width;\n            this.widthStart = width;\n        }\n    };\n    /**\n     * Applies the color to the start and end\n     */\n    EdgeInstance.prototype.setColor = function (color) {\n        this.colorStart = color;\n        this.colorEnd = color;\n    };\n    __decorate([\n        observable_1.observable\n    ], EdgeInstance.prototype, \"colorStart\", void 0);\n    __decorate([\n        observable_1.observable\n    ], EdgeInstance.prototype, \"colorEnd\", void 0);\n    __decorate([\n        observable_1.observable\n    ], EdgeInstance.prototype, \"control\", void 0);\n    __decorate([\n        observable_1.observable\n    ], EdgeInstance.prototype, \"depth\", void 0);\n    __decorate([\n        observable_1.observable\n    ], EdgeInstance.prototype, \"end\", void 0);\n    __decorate([\n        observable_1.observable\n    ], EdgeInstance.prototype, \"start\", void 0);\n    __decorate([\n        observable_1.observable\n    ], EdgeInstance.prototype, \"widthStart\", void 0);\n    __decorate([\n        observable_1.observable\n    ], EdgeInstance.prototype, \"widthEnd\", void 0);\n    return EdgeInstance;\n}(instance_1.Instance));\nexports.EdgeInstance = EdgeInstance;\n","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\n\\nvoid main() {\\n  setColor(vertexColor);\\n}\\n\"","module.exports = \"/**\\n  This vertex shader calculates edges based in world space to make an edge based on\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nprecision highp float;\\n\\nvarying vec4 vertexColor;\\n\\n// Interpolation type injection\\n${interpolation}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n\\n  // Convert our world points to screen space\\n  vec4 startClip = clipSpace(vec3(start, depth));\\n  vec4 endClip = clipSpace(vec3(end, depth));\\n  vec2 startScreen = (startClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  vec2 endScreen = (endClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Controls for this mode are screen space deltas from the end points\\n  vec2 control1 = startScreen + vec2(control.x, -control.y) * scaleFactor;\\n  vec2 control2 = endScreen + vec2(control.z, -control.w) * scaleFactor;\\n\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, startScreen, endScreen, control1, control2);\\n  // Calculate the next and previous segment's location on the line\\n  vec2 prePosition = interpolation(interpolationTime - interpolationIncrement, startScreen, endScreen, control1, control2);\\n  vec2 nextPosition = interpolation(interpolationTime + interpolationIncrement, startScreen, endScreen, control1, control2);\\n\\n  vec2 preLine = prePosition - currentPosition;\\n  vec2 nextLine = nextPosition - currentPosition;\\n\\n  // Get a spliced nromal at the joining of two segments to make a crisper curve\\n  vec2 currentNormal = mix(\\n    // Pick this value if we're at the beginning of the line\\n    normalize(vec2(preLine.y, -preLine.x)),\\n    mix(\\n      // Pick this value when we're between the ends\\n      normalize(vec2(preLine.y, -preLine.x) + vec2(-nextLine.y, nextLine.x)),\\n      // Pick this value if we're at the end of the line\\n      normalize(vec2(-nextLine.y, nextLine.x)),\\n      float(position.x >= 1.0)\\n    ),\\n    float(position.x > 0.0)\\n  );\\n\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (-normal * lineThickness * scaleFactor);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a;\\n\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), startClip.zw);\\n  gl_PointSize = 5.0;\\n}\\n\"","module.exports = \"precision highp float;\\n\\n/**\\n  This vertex shader calculates edges whose curve and width is in screen space where the curve is\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nvarying vec4 vertexColor;\\n\\n// Interpolation type injection\\n${interpolation}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, start, end, control.xy, control.zw);\\n  // Calculate the next and previous segment's location on the line\\n  vec2 prePosition = interpolation(interpolationTime - interpolationIncrement, start, end, control.xy, control.zw);\\n  vec2 nextPosition = interpolation(interpolationTime + interpolationIncrement, start, end, control.xy, control.zw);\\n\\n  vec2 preLine = prePosition - currentPosition;\\n  vec2 nextLine = nextPosition - currentPosition;\\n\\n  // Get a spliced nromal at the joining of two segments to make a crisper curve\\n  vec2 currentNormal = mix(\\n    // Pick this value if we're at the beginning of the line\\n    normalize(vec2(preLine.y, -preLine.x)),\\n    mix(\\n      // Pick this value when we're between the ends\\n      normalize(vec2(preLine.y, -preLine.x) + vec2(-nextLine.y, nextLine.x)),\\n      // Pick this value if we're at the end of the line\\n      normalize(vec2(-nextLine.y, nextLine.x)),\\n      float(position.x >= 1.0)\\n    ),\\n    float(position.x > 0.0)\\n  );\\n\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (normal * lineThickness);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a;\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n  gl_PointSize = 5.0;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  float t1 = 1.0 - t;\\n  return pow(t1, 3.0) * p1 + 3.0 * t * pow(t1, 2.0) * c1 + 3.0 * pow(t, 2.0) * t1 * c2 + pow(t, 3.0) * p2;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return (1.0 - t) * (1.0 - t) * p1 + 2.0 * t * (1.0 - t) * c1 + t * t * p2;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return p1 + (p2 - p1) * t;\\n}\\n\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\nvar vector_1 = require(\"../../util/vector\");\nvar types_1 = require(\"./types\");\nvar pow = Math.pow;\n/** This is an interpolation across a line */\nfunction linear(t, p1, p2, c1, c2) {\n    return vector_1.add2(vector_1.scale2(vector_1.subtract2(p2, p1), t), p1);\n}\n/** This is an interpolation across a bezier curve, single control */\nfunction bezier(t, p1, p2, c1, c2) {\n    return [\n        (1.0 - t) * (1.0 - t) * p1[0] + 2.0 * t * (1.0 - t) * c1[0] + t * t * p2[0],\n        (1.0 - t) * (1.0 - t) * p1[1] + 2.0 * t * (1.0 - t) * c1[1] + t * t * p2[1],\n    ];\n}\n/** This is an interpolation across a bezier curve, double control */\nfunction bezier2(t, p1, p2, c1, c2) {\n    var t1 = 1.0 - t;\n    return [\n        (pow(t1, 3.0) * p1[0]) + (3.0 * t * pow(t1, 2.0) * c1[0]) + (3.0 * pow(t, 2.0) * t1 * c2[0]) + (pow(t, 3.0) * p2[0]),\n        (pow(t1, 3.0) * p1[1]) + (3.0 * t * pow(t1, 2.0) * c1[1]) + (3.0 * pow(t, 2.0) * t1 * c2[1]) + (pow(t, 3.0) * p2[1]),\n    ];\n}\n/** A quick lookup for an interpolation method based on Edge Type */\nvar interpolation = (_a = {},\n    _a[types_1.EdgeType.LINE] = linear,\n    _a[types_1.EdgeType.BEZIER] = bezier,\n    _a[types_1.EdgeType.BEZIER2] = bezier2,\n    _a);\n/** Converts a point array to a point object */\nfunction toPointObject(point) {\n    return {\n        x: point[0],\n        y: point[1],\n    };\n}\n/** Converts a point object to a point array */\nfunction toPointArray(point) {\n    return [\n        point.x,\n        point.y,\n    ];\n}\n/** Takes two points that forms a line then calculates the nearest distance from that line to the third point */\nfunction distanceTo(start, end, p) {\n    // Make a vector from a line point to the indicated point\n    var vector = vector_1.subtract2(start, p);\n    var lineDirection = vector_1.subtract2(end, start);\n    var lineNormal = [lineDirection[1], -lineDirection[0]];\n    var distance = Math.abs(vector_1.dot2(vector, lineNormal)) / vector_1.length2(lineDirection);\n    // The distance is d = |v . r| where v is a unit perpendicular vector to the Line\n    return distance;\n}\n// This sets the number of iterations along a curve we sample to test collisions with\nvar TEST_RESOLUTION = 50;\n/**\n * This generates the picking methods needed for managing PickType.ALL for the edge layer.\n */\nfunction edgePicking(props) {\n    var broadphase = props.broadphase, _a = props.minPickDistance, minPickDistance = _a === void 0 ? 0 : _a, scaleType = props.scaleType, type = props.type;\n    var interpolate = interpolation[props.type];\n    var boundsAccessor = function (edge) {\n        var edgeWidthStart = edge.widthStart / 2 + minPickDistance;\n        var edgeWidthEnd = edge.widthEnd / 2 + minPickDistance;\n        // Encapsulate the endpoints as they are guaranteed to be included in the shape\n        // Each endpoint will be a box that includes the endpoint thickness\n        var bounds = new bounds_1.Bounds({\n            height: edge.widthStart,\n            width: edge.widthStart,\n            x: edge.start[0] - edgeWidthStart,\n            y: edge.start[1] - edgeWidthStart,\n        });\n        bounds.encapsulate(new bounds_1.Bounds({\n            height: edge.widthEnd,\n            width: edge.widthEnd,\n            x: edge.end[0] - edgeWidthEnd,\n            y: edge.end[1] - edgeWidthEnd,\n        }));\n        // Encapsulating the bezier control points is enough of a broadphase for beziers\n        if (props.type === types_1.EdgeType.BEZIER) {\n            bounds.encapsulate({\n                x: edge.control[0][0],\n                y: edge.control[0][1],\n            });\n        }\n        // Encapsulating the bezier control points is enough of a broadphase for beziers\n        else if (props.type === types_1.EdgeType.BEZIER2) {\n            bounds.encapsulate({\n                x: edge.control[0][0],\n                y: edge.control[0][1],\n            });\n            bounds.encapsulate({\n                x: edge.control[1][0],\n                y: edge.control[1][1],\n            });\n        }\n        if (broadphase === types_1.EdgeBroadphase.PASS_X) {\n            bounds.x = Number.MIN_SAFE_INTEGER / 2;\n            bounds.width = Number.MAX_SAFE_INTEGER;\n        }\n        if (broadphase === types_1.EdgeBroadphase.PASS_Y) {\n            bounds.y = Number.MIN_SAFE_INTEGER / 2;\n            bounds.height = Number.MAX_SAFE_INTEGER;\n        }\n        return bounds;\n    };\n    if (scaleType === types_1.EdgeScaleType.SCREEN_CURVE) {\n        return {\n            // Provide the calculated AABB world bounds for a given circle\n            boundsAccessor: boundsAccessor,\n            // Provide a precise hit test for the edge. This method performs all of the rendering\n            // And hit tests within screen space as opposed to world space.\n            hitTest: function (edge, point, view) {\n                point = view.worldToScreen(point);\n                var mouse = [point.x, point.y];\n                var closestIndex = 0;\n                var closestDistance = Number.MAX_VALUE;\n                var secondClosestIndex = 0;\n                var secondClosestDistance = Number.MAX_VALUE;\n                var start = view.worldToScreen(toPointObject(edge.start));\n                var end = view.worldToScreen(toPointObject(edge.end));\n                var control1 = [0, 0];\n                var control2 = [0, 0];\n                if (type === types_1.EdgeType.BEZIER) {\n                    control1 = vector_1.add2(toPointArray(start), edge.control[0]);\n                }\n                else if (type === types_1.EdgeType.BEZIER2) {\n                    control1 = vector_1.add2(toPointArray(start), edge.control[0]);\n                    control2 = vector_1.add2(toPointArray(end), edge.control[1]);\n                }\n                var startPoint = toPointArray(start);\n                var endPoint = toPointArray(end);\n                control1 = edge.control.length > 0 ? control1 : [0, 0];\n                control2 = edge.control.length > 1 ? control2 : [0, 0];\n                // Loop through sample points on the line and find one that is closest to the mouse point as possible\n                for (var i = 0; i < TEST_RESOLUTION; ++i) {\n                    var linePoint = interpolate(i / TEST_RESOLUTION, startPoint, endPoint, control1, control2);\n                    var distance = vector_1.length2(vector_1.subtract2(mouse, linePoint));\n                    if (distance < closestDistance) {\n                        secondClosestIndex = closestIndex;\n                        secondClosestDistance = closestDistance;\n                        closestIndex = i;\n                        closestDistance = distance;\n                    }\n                    else if (distance < secondClosestDistance) {\n                        secondClosestIndex = i;\n                        closestDistance = distance;\n                    }\n                }\n                var t = closestIndex / TEST_RESOLUTION;\n                var lineWidth = (edge.widthEnd - edge.widthStart) * t + edge.widthStart;\n                if (closestIndex === secondClosestIndex) {\n                    return false;\n                }\n                var startSegment = interpolate(closestIndex / TEST_RESOLUTION, startPoint, endPoint, control1, control2);\n                var endSegment = interpolate(secondClosestIndex / TEST_RESOLUTION, startPoint, endPoint, control1, control2);\n                // See how close the mouse is to the line between the two closest points for a more accurate\n                // Test\n                closestDistance = distanceTo(startSegment, endSegment, mouse);\n                // This helps determine if the mouse is beyond the end point\n                if (vector_1.dot2(vector_1.subtract2(endSegment, startSegment), vector_1.subtract2(mouse, startSegment)) < 0) {\n                    return false;\n                }\n                return closestDistance < ((lineWidth / 2.0) + minPickDistance);\n            },\n        };\n    }\n    return {\n        // Provide the calculated AABB world bounds for a given circle\n        boundsAccessor: boundsAccessor,\n        // Provide a precise hit test for the edge\n        hitTest: function (edge, point, view) {\n            var mouse = [point.x, point.y];\n            var closestIndex = 0;\n            var closestDistance = Number.MAX_VALUE;\n            // Loop through sample points on the line and find one that is closest to the mouse point as possible\n            for (var i = 0; i < TEST_RESOLUTION; ++i) {\n                var linePoint = interpolate(i / TEST_RESOLUTION, edge.start, edge.end, edge.control.length > 0 ? edge.control[0] : [0, 0], edge.control.length > 1 ? edge.control[1] : [0, 0]);\n                var distance = vector_1.length2(vector_1.subtract2(mouse, linePoint));\n                if (distance < closestDistance) {\n                    closestIndex = i;\n                    closestDistance = distance;\n                }\n            }\n            var t = closestIndex / TEST_RESOLUTION;\n            var lineWidth = (edge.widthEnd - edge.widthStart) * t + edge.widthStart;\n            return closestDistance < (lineWidth / 2.0);\n        },\n    };\n}\nexports.edgePicking = edgePicking;\nvar _a;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar util_1 = require(\"../../util\");\nvar edge_picking_1 = require(\"./edge-picking\");\nvar types_2 = require(\"./types\");\n/** Converts a control list to an IO value */\nfunction toInstanceIOValue(value) {\n    return [\n        value[0][0],\n        value[0][1],\n        value[1][0],\n        value[1][1],\n    ];\n}\n/** This picks the appropriate shader for the edge type desired */\nvar pickVS = (_a = {},\n    _a[types_2.EdgeType.LINE] = require('./shader/edge-layer-line.vs'),\n    _a[types_2.EdgeType.BEZIER] = require('./shader/edge-layer-bezier.vs'),\n    _a[types_2.EdgeType.BEZIER2] = require('./shader/edge-layer-bezier2.vs'),\n    _a);\n/** This is the base edge layer which is a template that can be filled with the needed specifics for a given line type */\nvar baseVS = require('./shader/edge-layer.vs');\nvar screenVS = require('./shader/edge-layer-screen-curve.vs');\nvar edgeFS = require('./shader/edge-layer.fs');\n/**\n * This layer displays edges and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar EdgeLayer = /** @class */ (function (_super) {\n    __extends(EdgeLayer, _super);\n    function EdgeLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    EdgeLayer.prototype.getInstancePickingMethods = function () {\n        return edge_picking_1.edgePicking(this.props);\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    EdgeLayer.prototype.initShader = function () {\n        var _a = this.props, _b = _a.scaleFactor, scaleFactor = _b === void 0 ? function () { return 1; } : _b, type = _a.type, _c = _a.scaleType, scaleType = _c === void 0 ? types_2.EdgeScaleType.NONE : _c;\n        var MAX_SEGMENTS = type === types_2.EdgeType.LINE ? 2 : 50;\n        // Calculate the normals and interpolations for our vertices\n        var vertexToNormal = (_d = {\n                0: 1\n            },\n            _d[MAX_SEGMENTS * 2 + 2] = -1,\n            _d);\n        var vertexInterpolation = (_e = {\n                0: 0\n            },\n            _e[MAX_SEGMENTS * 2 + 2] = 1,\n            _e);\n        var sign = 1;\n        for (var i = 0; i < MAX_SEGMENTS * 2; ++i) {\n            vertexToNormal[i + 1] = sign;\n            vertexInterpolation[i + 1] = Math.floor(i / 2) / (MAX_SEGMENTS - 1);\n            sign *= -1;\n        }\n        var vs = util_1.shaderTemplate(scaleType === types_2.EdgeScaleType.NONE ? baseVS : screenVS, {\n            // Retain the attributes injection\n            attributes: '${attributes}',\n            // Inject the proper interpolation method\n            interpolation: pickVS[type],\n        }, {\n            name: 'Edge Layer',\n            values: [\n                'interpolation',\n            ],\n        });\n        return {\n            fs: edgeFS,\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'start',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return o.start; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'end',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return o.end; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'widthStart',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.widthStart]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.TWO,\n                    name: 'widthEnd',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.widthEnd]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 2,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'colorStart',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.colorStart; },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'colorEnd',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.colorEnd; },\n                },\n                type === types_2.EdgeType.LINE ? {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'control',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return [0, 0, 0, 0]; },\n                } : null,\n                type === types_2.EdgeType.BEZIER ? {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'control',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return [o.control[0][0], o.control[0][1], 0, 0]; },\n                } : null,\n                type === types_2.EdgeType.BEZIER2 ? {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'control',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return toInstanceIOValue(o.control); },\n                } : null,\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (uniform) { return [scaleFactor()]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexInterpolation[vertex],\n                        // The number of vertices\n                        MAX_SEGMENTS * 2,\n                    ]; },\n                },\n            ],\n            vertexCount: MAX_SEGMENTS * 2 + 2,\n            vs: vs.shader,\n        };\n        var _d, _e;\n    };\n    EdgeLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    EdgeLayer.prototype.getMaterialOptions = function () {\n        return {\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    // Set default props for the layer\n    EdgeLayer.defaultProps = {\n        broadphase: types_2.EdgeBroadphase.ALL,\n        data: new instance_provider_1.InstanceProvider(),\n        key: 'none',\n        scaleType: types_2.EdgeScaleType.NONE,\n        type: types_2.EdgeType.LINE,\n    };\n    return EdgeLayer;\n}(layer_1.Layer));\nexports.EdgeLayer = EdgeLayer;\nvar _a;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./edge-layer\"));\n__export(require(\"./edge-instance\"));\n__export(require(\"./types\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar instance_1 = require(\"../../instance-provider/instance\");\nvar CircleInstance = /** @class */ (function (_super) {\n    __extends(CircleInstance, _super);\n    function CircleInstance(options) {\n        var _this = _super.call(this, options) || this;\n        _this.color = [1.0, 1.0, 1.0, 1.0];\n        _this.depth = 0;\n        _this.radius = 0;\n        _this.x = 0;\n        _this.y = 0;\n        _this.color = options.color || _this.color;\n        _this.radius = options.radius || _this.radius;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        _this.depth = options.depth || _this.depth;\n        return _this;\n    }\n    Object.defineProperty(CircleInstance.prototype, \"width\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CircleInstance.prototype, \"height\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        instance_provider_1.observable\n    ], CircleInstance.prototype, \"color\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], CircleInstance.prototype, \"depth\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], CircleInstance.prototype, \"radius\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], CircleInstance.prototype, \"x\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], CircleInstance.prototype, \"y\", void 0);\n    return CircleInstance;\n}(instance_1.Instance));\nexports.CircleInstance = CircleInstance;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float edgeSharpnessBase;\\nvarying vec2 pointCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  vertexColor = color * color.a;\\n  float size = radius * scaleFactor;\\n  edgeSharpness = mix(0.8, 0.0, min((size * 6.0 * pixelRatio) / (45.0 * pixelRatio), 1.0));\\n  edgeSharpnessBase = mix(0.1, 0.0, min((size * 6.0 * pixelRatio) / (45.0 * pixelRatio), 1.0));\\n  pointCoord = (position.xy + vec2(1.0, 1.0)) / 2.0;\\n\\n  // Center within clip space\\n  vec4 clipCenter = clipSpace(vec3(center, depth));\\n  // Center in screen space\\n  vec2 screenCenter = (clipCenter.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Position in screen space\\n  vec2 vertex = (position.xy * size) + screenCenter;\\n  // Position back to clip space\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), clipCenter.zw);\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float edgeSharpnessBase;\\nvarying vec2 pointCoord;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius + (radius * edgeSharpnessBase),\\n    dot(dist, dist) * 4.0\\n  );\\n}\\n\\nvoid main() {\\n  float step_factor = circle(pointCoord.xy, 1.0);\\n\\n  setColor(mix(\\n    vec4(0.0, 0.0, 0.0, 0.0),\\n    vertexColor,\\n    step_factor\\n  ));\\n}\\n\"","module.exports = \"void main() {\\n  gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n}\"","module.exports = \"\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\n/**\n * This manages mouse gestures broadcast to the layer and handles appropriate actions such as determining\n * how to make the interaction translate to picking events for the layer's instances.\n *\n * This class, in summary, takes in the gestures to the view and converts them to gestures to the instances.\n */\nvar LayerInteractionHandler = /** @class */ (function () {\n    function LayerInteractionHandler(layer) {\n        /** This tracks the elements that have the mouse currently over them */\n        this.isMouseOver = new Map();\n        /** This tracks the elements the mouse was down on */\n        this.isMouseDown = new Map();\n        this.layer = layer;\n    }\n    /**\n     * Retrieves the color picking instance determined for the procedure.\n     */\n    LayerInteractionHandler.prototype.getColorPickInstance = function () {\n        if (this.colorPicking) {\n            return this.layer.diffManager.colorPicking.uidToInstance.get(0xFFFFFF - this.colorPicking.nearestColor);\n        }\n        return null;\n    };\n    /**\n     * Handles mouse down gestures for a layer within a view\n     */\n    LayerInteractionHandler.prototype.handleMouseOver = function (view, mouse) {\n        // This is the mouse over for the view itself. We should probably just let the mouse move events handle the interactions\n        // With the instances\n    };\n    /**\n     * Handles mouse down gestures for a layer within a view\n     */\n    LayerInteractionHandler.prototype.handleMouseDown = function (view, mouse, button) {\n        var _this = this;\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type !== types_1.PickType.NONE) {\n            var onMouseDown = this.layer.props.onMouseDown;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseDown) {\n                var world_1 = view.viewToWorld(mouse);\n                var hitTest_1;\n                var query_1;\n                var querySpace = void 0;\n                var instances = [];\n                if (this.layer.picking.type === types_1.PickType.ALL) {\n                    hitTest_1 = this.layer.picking.hitTest;\n                    query_1 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                    querySpace = function (check) { return query_1(check).filter(function (o) { return hitTest_1(o, world_1, view); }); };\n                    instances = query_1(world_1).filter(function (o) { return hitTest_1(o, world_1, view); });\n                }\n                else if (this.layer.picking.type === types_1.PickType.SINGLE) {\n                    // Get the instance for the nearest color\n                    var instanceForColor = this.getColorPickInstance();\n                    if (instanceForColor) {\n                        instances.push(instanceForColor);\n                    }\n                }\n                var info = {\n                    button: button,\n                    instances: instances,\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: querySpace,\n                    screen: [mouse.x, mouse.y],\n                    world: [world_1.x, world_1.y],\n                };\n                onMouseDown(info);\n                // We track all the elements the mouse is currently down on\n                this.isMouseDown.clear();\n                instances.forEach(function (o) { return _this.isMouseDown.set(o, true); });\n            }\n        }\n    };\n    /**\n     * Handles mouse out events for a layer within the view\n     */\n    LayerInteractionHandler.prototype.handleMouseOut = function (view, mouse) {\n        // This will fire an instance mouse out for any over instances in the queue since we left the view\n        // Thus no instances shall be considered 'over'\n        if (this.layer.picking && this.layer.picking.type !== types_1.PickType.NONE) {\n            var onMouseOut = this.layer.props.onMouseOut;\n            if (onMouseOut) {\n                var world_2 = view.viewToWorld(mouse);\n                var hitTest_2;\n                var query_2;\n                var querySpace = void 0;\n                if (this.layer.picking.type === types_1.PickType.ALL) {\n                    hitTest_2 = this.layer.picking.hitTest;\n                    query_2 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                    querySpace = function (check) { return query_2(check).filter(function (o) { return hitTest_2(o, world_2, view); }); };\n                }\n                var info = {\n                    instances: Array.from(this.isMouseOver.keys()),\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: querySpace,\n                    screen: [mouse.x, mouse.y],\n                    world: [world_2.x, world_2.y],\n                };\n                onMouseOut(info);\n            }\n        }\n        // We clear as no instances are over anymore\n        this.isMouseOver.clear();\n        // We also clear all down elements as the mouse is no longer in proper context for the instances\n        // But since the mouse was never actually released, we do not fire an up\n        this.isMouseDown.clear();\n    };\n    /**\n     * Handles mouse up gestures for the layer within the provided view\n     */\n    LayerInteractionHandler.prototype.handleMouseUp = function (view, mouse, button) {\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type !== types_1.PickType.NONE) {\n            var onMouseUp = this.layer.props.onMouseUp;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseUp) {\n                var world_3 = view.viewToWorld(mouse);\n                var hitTest_3;\n                var query_3;\n                var querySpace = void 0;\n                var instances = [];\n                if (this.layer.picking.type === types_1.PickType.ALL) {\n                    hitTest_3 = this.layer.picking.hitTest;\n                    query_3 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                    querySpace = function (check) { return query_3(check).filter(function (o) { return hitTest_3(o, world_3, view); }); };\n                    instances = query_3(world_3).filter(function (o) { return hitTest_3(o, world_3, view); });\n                }\n                else if (this.layer.picking.type === types_1.PickType.SINGLE) {\n                    // Get the instance for the nearest color\n                    var instanceForColor = this.getColorPickInstance();\n                    if (instanceForColor) {\n                        instances.push(instanceForColor);\n                    }\n                }\n                var info = {\n                    button: button,\n                    instances: instances,\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: querySpace,\n                    screen: [mouse.x, mouse.y],\n                    world: [world_3.x, world_3.y],\n                };\n                onMouseUp(info);\n            }\n        }\n    };\n    /**\n     * Mouse move events on the layer will detect when instances have their item newly over or just moved on\n     */\n    LayerInteractionHandler.prototype.handleMouseMove = function (view, mouse) {\n        var _this = this;\n        // This handles interactions for PickType ALL layers\n        var _a = this.layer.props, onMouseOver = _a.onMouseOver, onMouseMove = _a.onMouseMove, onMouseOut = _a.onMouseOut;\n        if (this.layer.picking && this.layer.picking.type !== types_1.PickType.NONE) {\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseOver || onMouseMove || onMouseOut) {\n                var info = void 0;\n                var world_4 = view.viewToWorld(mouse);\n                var hitTest_4;\n                var query_4;\n                var querySpace = void 0;\n                var instances = [];\n                if (this.layer.picking.type === types_1.PickType.ALL) {\n                    hitTest_4 = this.layer.picking.hitTest;\n                    query_4 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                    querySpace = function (check) { return query_4(check).filter(function (o) { return hitTest_4(o, world_4, view); }); };\n                    instances = query_4(world_4).filter(function (o) { return hitTest_4(o, world_4, view); });\n                }\n                else if (this.layer.picking.type === types_1.PickType.SINGLE) {\n                    // Get the instance for the nearest color\n                    var instanceForColor = this.getColorPickInstance();\n                    if (instanceForColor) {\n                        instances.push(instanceForColor);\n                    }\n                }\n                // Broadcast the picking info for newly over instances to any of the layers listeners if needed\n                if (onMouseOver) {\n                    var notOverInstances = instances.filter(function (o) { return !_this.isMouseOver.get(o); });\n                    info = {\n                        instances: notOverInstances,\n                        layer: this.layer.id,\n                        projection: view,\n                        querySpace: querySpace,\n                        screen: [mouse.x, mouse.y],\n                        world: [world_4.x, world_4.y],\n                    };\n                    if (notOverInstances.length > 0)\n                        onMouseOver(info);\n                }\n                // Broadcast the the picking info for all instances that the mouse moved on\n                if (onMouseMove) {\n                    // This is the pick info object we will broadcast from the layer\n                    info = {\n                        instances: instances,\n                        layer: this.layer.id,\n                        projection: view,\n                        querySpace: querySpace,\n                        screen: [mouse.x, mouse.y],\n                        world: [world_4.x, world_4.y],\n                    };\n                    onMouseMove(info);\n                }\n                // We take the hovered instances\n                var isCurrentlyOver_1 = new Map();\n                instances.forEach(function (o) { return isCurrentlyOver_1.set(o, true); });\n                // Broadcast the the picking info for all instances that the mouse moved off of\n                if (onMouseOut) {\n                    var noLongerOver = Array.from(this.isMouseOver.keys()).filter(function (o) { return !isCurrentlyOver_1.get(o); });\n                    // This is the pick info object we will broadcast from the layer\n                    info = {\n                        instances: noLongerOver,\n                        layer: this.layer.id,\n                        projection: view,\n                        querySpace: querySpace,\n                        screen: [mouse.x, mouse.y],\n                        world: [world_4.x, world_4.y],\n                    };\n                    if (noLongerOver.length > 0)\n                        onMouseOut(info);\n                }\n                // We store the current hovered over items as our over item list for next interaction\n                this.isMouseOver = isCurrentlyOver_1;\n            }\n        }\n    };\n    /**\n     * Handles click gestures on the layer within a view\n     */\n    LayerInteractionHandler.prototype.handleMouseClick = function (view, mouse, button) {\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type !== types_1.PickType.NONE) {\n            var onMouseClick = this.layer.props.onMouseClick;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseClick) {\n                var world_5 = view.viewToWorld(mouse);\n                var hitTest_5;\n                var query_5;\n                var querySpace = void 0;\n                var instances = [];\n                if (this.layer.picking.type === types_1.PickType.ALL) {\n                    hitTest_5 = this.layer.picking.hitTest;\n                    query_5 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                    querySpace = function (check) { return query_5(check).filter(function (o) { return hitTest_5(o, world_5, view); }); };\n                    instances = query_5(world_5).filter(function (o) { return hitTest_5(o, world_5, view); });\n                }\n                else if (this.layer.picking.type === types_1.PickType.SINGLE) {\n                    // Get the instance for the nearest color\n                    var instanceForColor = this.getColorPickInstance();\n                    if (instanceForColor) {\n                        instances.push(instanceForColor);\n                    }\n                }\n                var info = {\n                    button: button,\n                    instances: instances,\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: querySpace,\n                    screen: [mouse.x, mouse.y],\n                    world: [world_5.x, world_5.y],\n                };\n                onMouseClick(info);\n            }\n        }\n    };\n    /**\n     * Handles drag gestures for the layer within the view\n     */\n    LayerInteractionHandler.prototype.handleMouseDrag = function (view, mouse) {\n        // We probably should not broadcast drag events for the sake of instances. Instance dragging should be handled on\n        // An instance by instance basis rather than coming from the view's gestures\n    };\n    return LayerInteractionHandler;\n}());\nexports.LayerInteractionHandler = LayerInteractionHandler;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\n// This is a mapping of the vector properties as they relate to an array order\nvar VECTOR_ACCESSORS = ['x', 'y', 'z', 'w'];\n/**\n * This class manages the process of taking the diffs of a layer and executing methods on those diffs to perform\n * updates to the uniforms that control those instances.\n */\nvar InstanceDiffManager = /** @class */ (function () {\n    function InstanceDiffManager(layer) {\n        this.layer = layer;\n    }\n    /**\n     * This returns the proper diff processor for handling diffs\n     */\n    InstanceDiffManager.prototype.getDiffProcessor = function () {\n        if (this.layer.picking) {\n            if (this.layer.picking.type === types_1.PickType.ALL) {\n                this.quadPicking = this.layer.picking;\n                return [\n                    this.changeInstanceQuad,\n                    this.addInstanceQuad,\n                    this.removeInstanceQuad,\n                ];\n            }\n            else if (this.layer.picking.type === types_1.PickType.SINGLE) {\n                this.colorPicking = this.layer.picking;\n                this.colorPicking.uidToInstance = new Map();\n                return [\n                    this.changeInstanceColorPick,\n                    this.addInstanceColorPick,\n                    this.removeInstanceColorPick,\n                ];\n            }\n        }\n        return [\n            this.changeInstance,\n            this.addInstance,\n            this.removeInstance,\n        ];\n    };\n    /**\n     * This processes add operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.addInstance = function (manager, instance, uniformCluster) {\n        // If the uniform cluster already exists, then we swap over to a change update\n        if (uniformCluster) {\n            manager.changeInstance(manager, instance, uniformCluster);\n        }\n        // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n        else {\n            var uniforms = manager.layer.uniformManager.add(instance);\n            if (uniforms) {\n                instance.active = true;\n                manager.updateInstance(instance, uniforms);\n            }\n        }\n    };\n    /**\n     * This processes add operations from changes in the instancing data and manages the layer's quad tree\n     * with the instance as well.\n     */\n    InstanceDiffManager.prototype.addInstanceQuad = function (manager, instance, uniformCluster) {\n        // If the uniform cluster already exists, then we swap over to a change update\n        if (uniformCluster) {\n            manager.changeInstanceQuad(manager, instance, uniformCluster);\n        }\n        // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n        else {\n            var uniforms = manager.layer.uniformManager.add(instance);\n            if (uniforms) {\n                instance.active = true;\n                manager.updateInstance(instance, uniforms);\n                // Ensure the instance has an updated injection in the quad tree\n                manager.quadPicking.quadTree.remove(instance);\n                manager.quadPicking.quadTree.add(instance);\n            }\n        }\n    };\n    /**\n     * This processes add operations from changes in the instancing data and manages the layer's matching of\n     * color / UID to Instance\n     */\n    InstanceDiffManager.prototype.addInstanceColorPick = function (manager, instance, uniformCluster) {\n        // If the uniform cluster already exists, then we swap over to a change update\n        if (uniformCluster) {\n            manager.changeInstanceColorPick(manager, instance, uniformCluster);\n        }\n        // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n        else {\n            var uniforms = manager.layer.uniformManager.add(instance);\n            if (uniforms) {\n                instance.active = true;\n                manager.updateInstance(instance, uniforms);\n                // Make sure the instance is mapped to it's UID\n                manager.colorPicking.uidToInstance.set(instance.uid, instance);\n            }\n            else {\n                console.warn('A data cluster was not provided by the manager to associate an instance with.');\n            }\n        }\n    };\n    /**\n     * This processes change operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.changeInstance = function (manager, instance, uniformCluster) {\n        // If there is an existing uniform cluster for this instance, then we can update the uniforms\n        if (uniformCluster) {\n            manager.updateInstance(instance, uniformCluster);\n        }\n        // If we don't have existing uniforms, then we must remove the instance\n        else {\n            manager.addInstance(manager, instance, uniformCluster);\n        }\n    };\n    /**\n     * This processes change operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.changeInstanceQuad = function (manager, instance, uniformCluster) {\n        // If there is an existing uniform cluster for this instance, then we can update the uniforms\n        if (uniformCluster) {\n            manager.updateInstance(instance, uniformCluster);\n            // Ensure the instance has an updated injection in the quad tree\n            manager.quadPicking.quadTree.remove(instance);\n            manager.quadPicking.quadTree.add(instance);\n        }\n        // If we don't have existing uniforms, then we must remove the instance\n        else {\n            manager.addInstanceQuad(manager, instance, uniformCluster);\n        }\n    };\n    /**\n     * This processes change operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.changeInstanceColorPick = function (manager, instance, uniformCluster) {\n        // If there is an existing uniform cluster for this instance, then we can update the uniforms\n        if (uniformCluster) {\n            manager.updateInstance(instance, uniformCluster);\n        }\n        // If we don't have existing uniforms, then we must remove the instance\n        else {\n            manager.addInstanceColorPick(manager, instance, uniformCluster);\n        }\n    };\n    /**\n     * This processes remove operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.removeInstance = function (manager, instance, uniformCluster) {\n        if (uniformCluster) {\n            // We deactivate the instance so it does not render anymore\n            instance.active = false;\n            // We do one last update on the instance to update to it's deactivated state\n            manager.updateInstance(instance, uniformCluster);\n            // Unlink the instance from the uniform cluster\n            manager.layer.uniformManager.remove(instance);\n        }\n    };\n    /**\n     * This processes remove operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.removeInstanceQuad = function (manager, instance, uniformCluster) {\n        if (uniformCluster) {\n            // We deactivate the instance so it does not render anymore\n            instance.active = false;\n            // We do one last update on the instance to update to it's deactivated state\n            manager.updateInstance(instance, uniformCluster);\n            // Unlink the instance from the uniform cluster\n            manager.layer.uniformManager.remove(instance);\n            // Remove the instance from our quad tree\n            manager.quadPicking.quadTree.remove(instance);\n        }\n    };\n    /**\n     * This processes remove operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.removeInstanceColorPick = function (manager, instance, uniformCluster) {\n        if (uniformCluster) {\n            // We deactivate the instance so it does not render anymore\n            instance.active = false;\n            // We do one last update on the instance to update to it's deactivated state\n            manager.updateInstance(instance, uniformCluster);\n            // Unlink the instance from the uniform cluster\n            manager.layer.uniformManager.remove(instance);\n            // Remove the instance from our quad tree\n            manager.colorPicking.uidToInstance.delete(instance.uid);\n        }\n    };\n    InstanceDiffManager.prototype.updateInstance = function (instance, uniformCluster) {\n        if (instance.active) {\n            var uniforms = uniformCluster.uniform;\n            var uniformRangeStart = uniformCluster.uniformRange[0];\n            var instanceData = uniforms.value;\n            var instanceUniform = void 0, value = void 0, block = void 0, start = void 0;\n            var k = void 0, endk = void 0;\n            // Loop through the instance attributes and update the uniform cluster with the valaues\n            // Calculated for the instance\n            for (var i = 0, end = this.layer.instanceAttributes.length; i < end; ++i) {\n                instanceUniform = this.layer.instanceAttributes[i];\n                value = instanceUniform.update(instance);\n                block = instanceData[uniformRangeStart + instanceUniform.block];\n                instanceUniform.atlas && this.layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n                start = instanceUniform.blockIndex;\n                if (start === undefined) {\n                    continue;\n                }\n                // Hyper optimized vector filling routine. It uses properties that are globally scoped\n                // To greatly reduce overhead\n                for (k = start, endk = value.length + start; k < endk; ++k) {\n                    block[VECTOR_ACCESSORS[k]] = value[k - start];\n                }\n            }\n            uniforms.value = instanceData;\n        }\n        else {\n            var uniforms = uniformCluster.uniform;\n            var uniformRangeStart = uniformCluster.uniformRange[0];\n            var instanceData = uniforms.value;\n            var instanceUniform = void 0, value = void 0, block = void 0, start = void 0;\n            // Only update the _active attribute to ensure it is false. When it is false, there is no\n            // Point to updating any other uniform\n            instanceUniform = this.layer.activeAttribute;\n            value = instanceUniform.update(instance);\n            block = instanceData[uniformRangeStart + instanceUniform.block];\n            instanceUniform.atlas && this.layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n            start = instanceUniform.blockIndex;\n            if (start !== undefined) {\n                // Hyper optimized vector filling routine. It uses properties that are globally scoped\n                // To greatly reduce overhead\n                for (var k = start, endk = value.length + start; k < endk; ++k) {\n                    block[VECTOR_ACCESSORS[k]] = value[k - start];\n                }\n            }\n            uniforms.value = instanceData;\n        }\n    };\n    return InstanceDiffManager;\n}());\nexports.InstanceDiffManager = InstanceDiffManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Calculates the distance between two points, but keeps the distance in dquared form\n * thus performing Math.sqrt() on the output of this distance would provide the true\n * distance between the points.\n *\n * It is often faster and all that is needed to compare squared distances vs real distances\n * thus eliminating multiple Math.sqrt operations\n *\n * NOTE: For vectors this is the same as (pseudo code):\n * let vector3 = vector2.subtract(vector1)\n * return vector3.dot(vector3)\n *\n * @param p1 The point to find the distance from the second point\n * @param p2 The point to find the distance from the first point\n *\n * @return {number} The distance * distance between the two points\n */\nfunction squareDistance(p1, p2) {\n    var dx = p1.x - p2.x;\n    var dy = p1.y - p2.y;\n    return dx * dx + dy * dy;\n}\n/**\n * Contains methods for managing or manipulating points\n *\n * @export\n * @class Point\n */\nvar Point = /** @class */ (function () {\n    function Point() {\n    }\n    /**\n     * Adds two points together\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @return {IPoint} The two points added together\n     */\n    Point.add = function (p1, p2, out) {\n        if (out) {\n            out.x = p1.x + p2.x;\n            out.y = p1.y + p2.y;\n            return out;\n        }\n        return {\n            x: p1.x + p2.x,\n            y: p1.y + p2.y,\n        };\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {IPoint} The closest point to the test point\n     */\n    Point.getClosest = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = testPoint;\n        var distance;\n        var findClosest = function (point) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = point;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * This just returns the index of the found point and not the point itself\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {number} The index of the closest point to the test point\n     */\n    Point.getClosestIndex = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = 0;\n        var distance;\n        var findClosest = function (point, i) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = i;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This will calculate a direction vector between two points that points toward p2\n     *\n     * @param {IPoint} amount The start of the direction\n     * @param {IPoint} from The direction to point the vector towards\n     * @param {boolean} normalize If true, this will make the vector have a magnitude of 1\n     *\n     * @returns {number}\n     */\n    Point.subtract = function (amount, from, normalize) {\n        if (normalize === void 0) { normalize = false; }\n        var dx = from.x - amount.x;\n        var dy = from.y - amount.y;\n        if (normalize) {\n            var magnitude = Math.sqrt(dx * dx + dy * dy);\n            dx /= magnitude;\n            dy /= magnitude;\n        }\n        return {\n            x: dx,\n            y: dy,\n        };\n    };\n    /**\n     * @static\n     * Gets the distance between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {boolean} squared If set to true, returns the distance * distance (performs faster)\n     *\n     * @returns {number} The real distance between two points\n     */\n    Point.getDistance = function (p1, p2, squared) {\n        if (squared === void 0) { squared = false; }\n        if (squared) {\n            return squareDistance(p1, p2);\n        }\n        return Math.sqrt(squareDistance(p1, p2));\n    };\n    /**\n     * @static\n     * Gets a point perfectly between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     *\n     * @returns {IPoint} The point between the two provided points\n     */\n    Point.getMidpoint = function (p1, p2) {\n        var direction = Point.subtract(p1, p2);\n        return {\n            x: direction.x / 2 + p1.x,\n            y: direction.y / 2 + p1.y,\n        };\n    };\n    Point.make = function (x, y) {\n        return { x: x, y: y };\n    };\n    /**\n     * Scales a point by a given amount\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {number} s The amount to scale the point by\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @memberof Point\n     */\n    Point.scale = function (p1, s, out) {\n        if (out) {\n            out.x = p1.x * s;\n            out.y = p1.y * s;\n            return out;\n        }\n        return {\n            x: p1.x * s,\n            y: p1.y * s,\n        };\n    };\n    /**\n     * Makes a new point initialized to {0,0}\n     *\n     * @static\n     * @returns {IPoint} A new point object at {0,0}\n     */\n    Point.zero = function () {\n        return {\n            x: 0,\n            y: 0,\n        };\n    };\n    return Point;\n}());\nexports.Point = Point;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\n/**\n * This is an optimized provider, that can provide instances that use the internal observable system\n * to deliver updates to the framework.\n */\nvar InstanceProvider = /** @class */ (function () {\n    function InstanceProvider() {\n        /** Stores the disposers that are called when the instance is no longer listened to */\n        this.cleanObservation = {};\n        /** This stores the changes to the instances themselves */\n        this.instanceChanges = new Map();\n        /** This flag is true when resolving changes when the change list is retrieved. it blocks changes until the current list is resolved */\n        this.allowChanges = true;\n    }\n    Object.defineProperty(InstanceProvider.prototype, \"changeList\", {\n        /**\n         * Retrieve all of the changes applied to instances\n         */\n        get: function () {\n            this.allowChanges = false;\n            var changes = Array.from(this.instanceChanges.values());\n            return changes;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Adds an instance to the provider which will stream observable changes of the instance to\n     * the framework.\n     */\n    InstanceProvider.prototype.add = function (instance) {\n        // No need to duplicate the addition\n        if (this.cleanObservation[instance.uid]) {\n            return instance;\n        }\n        if (this.allowChanges) {\n            instance.observer = this;\n            var disposer = instance.observableDisposer;\n            // Store the disposers so we can clean up the observable properties\n            this.cleanObservation[instance.uid] = [instance, disposer];\n            // Indicate we have a new instance\n            this.instanceChanges.set(instance.uid, [\n                instance,\n                types_1.InstanceDiffType.INSERT,\n                instance.changes,\n            ]);\n        }\n        return instance;\n    };\n    /**\n     * Removes all instances from this provider\n     */\n    InstanceProvider.prototype.clear = function () {\n        var values = Object.values(this.cleanObservation);\n        for (var i = 0, end = values.length; i < end; ++i) {\n            this.remove(values[i][0]);\n        }\n    };\n    /**\n     * Clear all resources held by this provider. It IS valid to lose reference to all instances\n     * and to this object, which would effectively cause this object to get GC'ed. But if you\n     * desire to hang onto the instance objects, then this should be called.\n     */\n    InstanceProvider.prototype.destroy = function () {\n        var values = Object.values(this.cleanObservation);\n        for (var i = 0, end = values.length; i < end; ++i) {\n            values[i][1]();\n        }\n        this.cleanObservation = {};\n        this.instanceChanges.clear();\n    };\n    /**\n     * This is called from observables to indicate it's parent has been updated\n     */\n    InstanceProvider.prototype.instanceUpdated = function (instance, property) {\n        if (this.allowChanges) {\n            // Flag the instance as having a property changed\n            this.instanceChanges.set(instance.uid, [instance, types_1.InstanceDiffType.CHANGE, instance.changes]);\n        }\n    };\n    /**\n     * Removes the instance from being advertised changes and from providing the changes\n     * for the instance.\n     */\n    InstanceProvider.prototype.remove = function (instance) {\n        if (this.allowChanges) {\n            var disposer = this.cleanObservation[instance.uid];\n            if (disposer) {\n                disposer[1]();\n                delete this.cleanObservation[instance.uid];\n                this.instanceChanges.set(instance.uid, [\n                    instance,\n                    types_1.InstanceDiffType.REMOVE,\n                    {},\n                ]);\n            }\n        }\n        return false;\n    };\n    /**\n     * Flagged all changes as dealt with\n     */\n    InstanceProvider.prototype.resolve = function () {\n        this.allowChanges = true;\n        this.instanceChanges.clear();\n    };\n    return InstanceProvider;\n}());\nexports.InstanceProvider = InstanceProvider;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar CircleLayer = /** @class */ (function (_super) {\n    __extends(CircleLayer, _super);\n    function CircleLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    CircleLayer.prototype.getInstancePickingMethods = function () {\n        var _this = this;\n        var noScaleFactor = function () { return 1; };\n        return {\n            // Provide the calculated AABB world bounds for a given circle\n            boundsAccessor: function (circle) { return new primitives_1.Bounds({\n                height: circle.radius * 2,\n                width: circle.radius * 2,\n                x: circle.x - circle.radius,\n                y: circle.y - circle.radius,\n            }); },\n            // Provide a precise hit test for the circle\n            hitTest: function (circle, point, view) {\n                var circleScreenCenter = view.worldToScreen(circle);\n                var mouseScreen = view.worldToScreen(point);\n                var r = circle.radius * (_this.props.scaleFactor || noScaleFactor)();\n                var delta = [\n                    mouseScreen.x - circleScreenCenter.x,\n                    mouseScreen.y - circleScreenCenter.y,\n                ];\n                return (delta[0] * delta[0] + delta[1] * delta[1]) < (r * r);\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    CircleLayer.prototype.initShader = function () {\n        var scaleFactor = this.props.scaleFactor || (function () { return 1; });\n        var animations = this.props.animate || {};\n        var animateCenter = animations.center, animateRadius = animations.radius, animateColor = animations.color;\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: -1,\n            1: -1,\n            2: -1,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./circle-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    easing: animateCenter,\n                    name: 'center',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (circle) { return [circle.x, circle.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    easing: animateRadius,\n                    name: 'radius',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (circle) { return [circle.radius]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (circle) { return [circle.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    easing: animateColor,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (circle) { return circle.color; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (uniform) { return [scaleFactor()]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./circle-layer.vs'),\n        };\n    };\n    CircleLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    CircleLayer.prototype.getMaterialOptions = function () {\n        return {\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    CircleLayer.defaultProps = {\n        data: new instance_provider_1.InstanceProvider(),\n        fadeOutOversized: -1,\n        key: '',\n        scaleFactor: function () { return 1; },\n    };\n    return CircleLayer;\n}(layer_1.Layer));\nexports.CircleLayer = CircleLayer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./circle-layer\"));\n__export(require(\"./circle-instance\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./circles\"));\n__export(require(\"./edges\"));\n__export(require(\"./images\"));\n__export(require(\"./labels\"));\n__export(require(\"./rectangle\"));\n__export(require(\"./rings\"));\n__export(require(\"./types\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nvar maxPopulation = 5;\nvar maxDepth = 10;\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n */\nvar Quadrants = /** @class */ (function () {\n    /**\n     * Creates an instance of Quadrants.\n     *\n     * @param bounds The bounds this will create quandrants for\n     * @param depth  The child depth of this element\n     */\n    function Quadrants(bounds, depth, getBounds, childToNode, childToBounds) {\n        var mid = bounds.mid;\n        this.TL = new Node(bounds.x, mid.x, bounds.y, mid.y, getBounds, depth);\n        this.TR = new Node(mid.x, bounds.right, bounds.y, mid.y, getBounds, depth);\n        this.BL = new Node(bounds.x, mid.x, mid.y, bounds.bottom, getBounds, depth);\n        this.BR = new Node(mid.x, bounds.right, mid.y, bounds.bottom, getBounds, depth);\n        this.TL.childToNode = childToNode;\n        this.TR.childToNode = childToNode;\n        this.BL.childToNode = childToNode;\n        this.BR.childToNode = childToNode;\n        this.TL.childToBounds = childToBounds;\n        this.TR.childToBounds = childToBounds;\n        this.BL.childToBounds = childToBounds;\n        this.BR.childToBounds = childToBounds;\n    }\n    /**\n     * Ensures all memory is released for all nodes and all references are removed\n     * to potentially high memory consumption items\n     */\n    Quadrants.prototype.destroy = function () {\n        this.TL.destroy();\n        this.TR.destroy();\n        this.BL.destroy();\n        this.BR.destroy();\n        delete this.TL;\n        delete this.TR;\n        delete this.BL;\n        delete this.BR;\n    };\n    return Quadrants;\n}());\nexports.Quadrants = Quadrants;\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n */\nvar Node = /** @class */ (function () {\n    /**\n     * Creates an instance of Node.\n     */\n    function Node(left, right, top, bottom, getBounds, depth) {\n        if (depth === void 0) { depth = 0; }\n        /** These are the child Instances of the node. */\n        this.children = [];\n        /** This is how deep the node is within the tree */\n        this.depth = 0;\n        /** These are the child nodes of this quad node when this node is split. It is null if the node is not split yet */\n        this.nodes = null;\n        // If params insertted\n        if (arguments.length >= 4) {\n            this.bounds = new bounds_1.Bounds({ left: left, right: right, top: top, bottom: bottom });\n        }\n        else {\n            // Otherwise, make tiny start area\n            this.bounds = new bounds_1.Bounds({ left: 0, right: 1, top: 1, bottom: 0 });\n        }\n        // Ensure the depth is set\n        this.depth = depth;\n        // Apply the bounds accessor method for instances\n        this.getBounds = getBounds;\n        // If this is the top level node, we need to instantiate the lookup that will be used\n        // Across all nodes.\n        if (this.depth === 0) {\n            this.nullBounded = [];\n            this.childToNode = new Map();\n            this.childToBounds = new Map();\n        }\n    }\n    /**\n     * Destroys this node and ensures all child nodes are destroyed as well.\n     */\n    Node.prototype.destroy = function () {\n        delete this.children;\n        delete this.bounds;\n        if (this.nodes) {\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n    };\n    /**\n     * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n     * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n     * this quad tree spans (and this is the root node), the quad tree will expand to include\n     * the new child.\n     *\n     * @param child The Bounds type object to inject\n     * @param props Properties that can be retrieved with the child object if applicable\n     *\n     * @returns True if the insertion was successful\n     */\n    Node.prototype.add = function (child) {\n        var bounds = this.childToBounds.get(child);\n        if (!bounds) {\n            // First we access the bounds of the child and store it\n            bounds = this.getBounds(child);\n            this.childToBounds.set(child, bounds);\n        }\n        // This is the entry function for adding children, so we must first expand our top node\n        // To cover the area that the child is located.\n        // If we're in bounds, then let's just add the child\n        if (!bounds || bounds.isInside(this.bounds)) {\n            return this.doAdd(child, bounds);\n        }\n        else {\n            // Otherwise, we need to expand first\n            this.cover(bounds);\n            return this.add(child);\n        }\n    };\n    /**\n     * Adds a list of new children to this quad tree. It performs the same operations as\n     * addChild for each child in the list, however, it more efficiently recalculates the\n     * bounds necessary to cover the area the children cover.\n     *\n     * @param children      List of Bounds objects to inject\n     */\n    Node.prototype.addAll = function (children) {\n        var _this = this;\n        // Make sure we cover the entire area of all the children.\n        // We can speed this up a lot if we first calculate the total bounds the new children covers\n        var minX = Number.MAX_VALUE;\n        var minY = Number.MAX_VALUE;\n        var maxX = -Number.MAX_VALUE;\n        var maxY = -Number.MAX_VALUE;\n        // Get the dimensions of the new bounds\n        children.forEach(function (child) {\n            var bounds = _this.getBounds(child);\n            _this.childToBounds.set(child, bounds);\n            if (!bounds)\n                return;\n            if (bounds.x < minX) {\n                minX = bounds.x;\n            }\n            if (bounds.right > maxX) {\n                maxX = bounds.right;\n            }\n            if (bounds.bottom > maxY) {\n                maxY = bounds.bottom;\n            }\n            if (bounds.y < minY) {\n                minY = bounds.y;\n            }\n        });\n        // Ensure a valid cover dimension was established. If no valid dimension is established\n        // Then we don't cover, but we can still add the children as that have null Bounds which\n        // Means injecting at the top level.\n        if (minX !== Number.MAX_VALUE &&\n            minY !== Number.MAX_VALUE &&\n            maxX !== -Number.MAX_VALUE &&\n            maxY !== -Number.MAX_VALUE) {\n            // Make sure our bounds includes the specified bounds\n            this.cover(new bounds_1.Bounds({ left: minX, right: maxX, bottom: maxY, top: minY }));\n        }\n        // Add all of the children into the tree.\n        children.forEach(function (child, index) { return _this.doAdd(child, _this.childToBounds.get(child) || null, true); });\n    };\n    /**\n     * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n     * This will cause all children to be re-injected into the tree.\n     *\n     * @param bounds The bounds to include in the tree's coverage\n     */\n    Node.prototype.cover = function (bounds) {\n        var _this = this;\n        // If we are already covering the area: abort\n        if (bounds.isInside(this.bounds)) {\n            return;\n        }\n        // Make our bounds cover the new area\n        this.bounds.encapsulate(bounds);\n        this.bounds.x -= 1;\n        this.bounds.y -= 1;\n        this.bounds.width += 2;\n        this.bounds.height += 2;\n        // Get all of the children underneath this node\n        var allChildren = this.gatherChildren([]);\n        this.children = [];\n        // Destroy the split nodes\n        if (this.nodes) {\n            // Completely...destroy...\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n        // Clear out the child to node relations\n        this.childToNode.clear();\n        // Reinsert all children with the new dimensions in place\n        allChildren.forEach(function (child, index) { return _this.doAdd(child, _this.childToBounds.get(child) || null); });\n    };\n    /**\n     * When adding children, this performs the actual action of injecting the child into the tree\n     * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n     *\n     * @param child The Bounds item to inject into the tree\n     * @param props The props to remain associated with the child\n     *\n     * @returns True if the injection was successful\n     */\n    Node.prototype.doAdd = function (child, bounds, fromSplit) {\n        // If this is the top level node and the bounds are null, then we add to the null list\n        if (!bounds && this.depth === 0) {\n            this.nullBounded.push(child);\n            this.childToNode.set(child, this);\n            return true;\n        }\n        // If no bounds is available at this point, something went terribly wrong\n        if (!bounds) {\n            console.warn('A null bounds was added to a Quad Tree node below the top node, which is invalid.');\n            return false;\n        }\n        // If bounds are null, then just immediately add\n        // If nodes are present, then we have already exceeded the population of this node\n        if (this.nodes) {\n            if (bounds.isInside(this.nodes.TL.bounds)) {\n                return this.nodes.TL.doAdd(child, bounds, fromSplit);\n            }\n            if (bounds.isInside(this.nodes.TR.bounds)) {\n                return this.nodes.TR.doAdd(child, bounds, fromSplit);\n            }\n            if (bounds.isInside(this.nodes.BL.bounds)) {\n                return this.nodes.BL.doAdd(child, bounds, fromSplit);\n            }\n            if (bounds.isInside(this.nodes.BR.bounds)) {\n                return this.nodes.BR.doAdd(child, bounds, fromSplit);\n            }\n            // Otherwise, this is a child overlapping this border\n            this.children.push(child);\n            this.childToNode.set(child, this);\n            return true;\n        }\n        else if (bounds.isInside(this.bounds)) {\n            // Otherwise, we have not had a split due to population limits being exceeded\n            this.children.push(child);\n            this.childToNode.set(child, this);\n            // If we exceeded our population for this quadrant, it is time to split up\n            if (this.children.length > maxPopulation && this.depth < maxDepth) {\n                this.split();\n            }\n            return true;\n        }\n        // This is when there is something wrong with the insertted child. The bounds\n        // For the quad should have grown without issue, but in this case the bounds\n        // Could not grow to accomodate the child.\n        if (isNaN(bounds.width + bounds.height + bounds.x + bounds.y)) {\n            console.error('Child did not fit into bounds because a dimension is NaN', child, bounds);\n        }\n        else if (bounds.area === 0) {\n            console.error('Child did not fit into bounds because the area is zero', child, bounds);\n        }\n        else {\n            console.error('Child did not get insertted.', 'Parent:', this.bounds.toString(), 'Child:', bounds.toString(), 'Inside Checks:', bounds.x >= this.bounds.x, bounds.right <= this.bounds.right, bounds.y >= this.bounds.y, bounds.bottom <= this.bounds.bottom);\n        }\n        // Don't insert the child and continue\n        return true;\n    };\n    Node.prototype.doRemove = function (child) {\n        var index = this.children.indexOf(child);\n        if (index > -1) {\n            this.children.splice(index, 1);\n            this.childToNode.delete(child);\n            this.childToBounds.delete(child);\n        }\n    };\n    /**\n     * Collects all children of all the current and sub nodes into a single list.\n     *\n     * @param list The list we must aggregate children into\n     *\n     * @return The list specified as the list parameter\n     */\n    Node.prototype.gatherChildren = function (list) {\n        this.children.forEach(function (child) { return list.push(child); });\n        if (this.nodes) {\n            this.nodes.TL.gatherChildren(list);\n            this.nodes.TR.gatherChildren(list);\n            this.nodes.BL.gatherChildren(list);\n            this.nodes.BR.gatherChildren(list);\n        }\n        return list;\n    };\n    /**\n     * Entry query for determining query type based on input object\n     *\n     * @param bounds Can be a Bounds or a Point object\n     * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n     *               information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return An array of children that intersects with the query\n     */\n    Node.prototype.query = function (bounds, visit) {\n        // This stores all of the found Instances when querying by bounds or point\n        var found = [];\n        // If this is the top level node then add in the null bunded items as the start\n        if (this.depth === 0) {\n            found = this.nullBounded.slice(0);\n        }\n        // Query a rectangle\n        if (bounds instanceof bounds_1.Bounds) {\n            if (bounds.hitBounds(this.bounds)) {\n                return this.queryBounds(bounds, found, visit);\n            }\n        }\n        // Query a point\n        if (this.bounds.containsPoint(bounds)) {\n            return this.queryPoint(bounds, found, visit);\n        }\n        // Return an empty array when nothing is collided with\n        return found;\n    };\n    /**\n     * Queries children for intersection with a bounds object\n     *\n     * @param b     The Bounds to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return     Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryBounds = function (b, list, visit) {\n        var _this = this;\n        this.children.forEach(function (c) {\n            var bounds = _this.childToBounds.get(c);\n            if (bounds && bounds.hitBounds(b)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (b.hitBounds(this.nodes.TL.bounds)) {\n                this.nodes.TL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.TR.bounds)) {\n                this.nodes.TR.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BL.bounds)) {\n                this.nodes.BL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BR.bounds)) {\n                this.nodes.BR.queryBounds(b, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Queries children for intersection with a point\n     *\n     * @param p     The Point to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return      Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryPoint = function (p, list, visit) {\n        var _this = this;\n        this.children.forEach(function (c) {\n            var bounds = _this.childToBounds.get(c);\n            if (bounds && bounds.containsPoint(p)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (this.nodes.TL.bounds.containsPoint(p)) {\n                this.nodes.TL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.TR.bounds.containsPoint(p)) {\n                this.nodes.TR.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BL.bounds.containsPoint(p)) {\n                this.nodes.BL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BR.bounds.containsPoint(p)) {\n                this.nodes.BR.queryPoint(p, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Remove the provided item from the tree.\n     */\n    Node.prototype.remove = function (child) {\n        if (this.childToNode) {\n            var node = this.childToNode.get(child);\n            // If the node is getting removed from the top level node, then it MAY be a null bounded item\n            // Which gets removed from the list\n            if (node && node.depth === 0) {\n                var index = node.nullBounded.indexOf(child);\n                if (index > -1) {\n                    node.nullBounded.splice(index);\n                    this.childToNode.delete(child);\n                    this.childToBounds.delete(child);\n                    return;\n                }\n            }\n            // Otherwise, just remove the node normally\n            if (node) {\n                node.doRemove(child);\n            }\n        }\n    };\n    /**\n     * Creates four sub quadrants for this node.\n     */\n    Node.prototype.split = function () {\n        // Gather all items to be handed down\n        var allChildren = this.gatherChildren([]);\n        // Gather all props for the children to be handed down as well\n        this.nodes = new Quadrants(this.bounds, this.depth + 1, this.getBounds, this.childToNode, this.childToBounds);\n        // Empty out the children as they are being re-injected\n        this.children = [];\n        for (var i = 0, end = allChildren.length; i < end; ++i) {\n            var child = allChildren[i];\n            this.doAdd(child, this.childToBounds.get(child) || null, true);\n        }\n    };\n    /**\n     * Traverses the quad tree returning every quadrant encountered\n     *\n     * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n     */\n    Node.prototype.visit = function (cb) {\n        var finished = Boolean(cb(this));\n        if (this.nodes && !finished) {\n            this.nodes.TL.visit(cb);\n            this.nodes.TR.visit(cb);\n            this.nodes.BL.visit(cb);\n            this.nodes.BR.visit(cb);\n        }\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar TrackedQuadTree = /** @class */ (function (_super) {\n    __extends(TrackedQuadTree, _super);\n    function TrackedQuadTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return TrackedQuadTree;\n}(Node));\nexports.TrackedQuadTree = TrackedQuadTree;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chart_camera_1 = require(\"./chart-camera\");\n/**\n * This is a camera that is based on another camera. This can apply filters\n * to the information provided from the base camera.\n *\n * Useful for situations such as a chart having a chart area and a list on the\n * left. This can use the same camera the chart area uses, but filter the response\n * to only track the y offset of the base camera.\n *\n * That would allow easy tracking of the left list to track with elements in the\n * chart and only manipulate a single camera instead of managing many cameras and\n * tie them together with lots of events.\n */\nvar ReferenceCamera = /** @class */ (function (_super) {\n    __extends(ReferenceCamera, _super);\n    function ReferenceCamera(options) {\n        var _this = _super.call(this) || this;\n        _this.offsetFilter = function (offset) { return offset; };\n        _this.scaleFilter = function (scale) { return scale; };\n        Object.assign(_this, options);\n        return _this;\n    }\n    Object.defineProperty(ReferenceCamera.prototype, \"offset\", {\n        get: function () {\n            return this.offsetFilter(this.base.offset);\n        },\n        set: function (val) {\n            /** no-op */\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ReferenceCamera.prototype, \"scale\", {\n        get: function () {\n            return this.scaleFilter(this.base.scale);\n        },\n        set: function (val) {\n            /** no-op */\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ReferenceCamera;\n}(chart_camera_1.ChartCamera));\nexports.ReferenceCamera = ReferenceCamera;\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * Active `debug` instances.\n */\nexports.instances = [];\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  var prevTime;\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n  debug.destroy = destroy;\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  exports.instances.push(debug);\n\n  return debug;\n}\n\nfunction destroy () {\n  var index = exports.instances.indexOf(this);\n  if (index !== -1) {\n    exports.instances.splice(index, 1);\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var i;\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n\n  for (i = 0; i < exports.instances.length; i++) {\n    var instance = exports.instances[i];\n    instance.enabled = exports.enabled(instance.namespace);\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  if (name[name.length - 1] === '*') {\n    return true;\n  }\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__112__;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isNumber(val) {\n    return !isNaN(val);\n}\n/**\n * This provides some methods that aids in more complicated animation tasks, such as\n * adjusting gpu animated properties with differing time delay values for each change.\n */\nvar AnimationHelper = /** @class */ (function () {\n    function AnimationHelper(surface) {\n        this.surface = surface;\n    }\n    /**\n     * When you want to animate properties of instances but you want them to start at differing times,\n     * use this method to ensure the timings starting between the elements is correct.\n     *\n     * @param easingMethod This is the easing method used for the layer's property to animate\n     * @param groupCount This is the number of animations desired for a given delay level\n     * @param delayGap This is the amount of delay between each group. This can be a static value or\n     *                 can be a dynamic callback\n     */\n    AnimationHelper.prototype.groupAnimation = function (easingMethod, groupCount, baseDelay, delayGap, modifyInstances) {\n        // Get the time of the current frame as our timing basis\n        var startFrameTime = this.surface.frameMetrics.currentTime;\n        // Do an initial commit to ensure all previous animated properties are committed based on the\n        // Delay specified for them\n        this.surface.commit(startFrameTime);\n        // Loop through the the number of grouped animations to work with\n        for (var i = 0; i < groupCount; ++i) {\n            // Determine how much extra delay is applied for the provided group\n            var gap = isNumber(delayGap) ? delayGap : delayGap(i, easingMethod.delay);\n            // Apply the delay\n            easingMethod.delay = baseDelay + gap * i;\n            // Make the instance modifications\n            modifyInstances(i);\n            // Commit the instance modifications based on the current delay settings\n            this.surface.commit(startFrameTime);\n        }\n    };\n    return AnimationHelper;\n}());\nexports.AnimationHelper = AnimationHelper;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\nvar event_manager_1 = require(\"../surface/event-manager\");\nvar util_1 = require(\"../util\");\nvar CameraBoundsAnchor;\n(function (CameraBoundsAnchor) {\n    CameraBoundsAnchor[CameraBoundsAnchor[\"TOP_LEFT\"] = 0] = \"TOP_LEFT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"TOP_MIDDLE\"] = 1] = \"TOP_MIDDLE\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"TOP_RIGHT\"] = 2] = \"TOP_RIGHT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"MIDDLE_LEFT\"] = 3] = \"MIDDLE_LEFT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"MIDDLE\"] = 4] = \"MIDDLE\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"MIDDLE_RIGHT\"] = 5] = \"MIDDLE_RIGHT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"BOTTOM_LEFT\"] = 6] = \"BOTTOM_LEFT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"BOTTOM_MIDDLE\"] = 7] = \"BOTTOM_MIDDLE\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"BOTTOM_RIGHT\"] = 8] = \"BOTTOM_RIGHT\";\n})(CameraBoundsAnchor = exports.CameraBoundsAnchor || (exports.CameraBoundsAnchor = {}));\nvar max = Math.max, min = Math.min;\n/**\n * This provides some very basic common needs for a camera control system. This is not a total solution\n * very every scenario. This should just often handle most basic needs.\n */\nvar BasicCameraController = /** @class */ (function (_super) {\n    __extends(BasicCameraController, _super);\n    function BasicCameraController(options) {\n        var _this = _super.call(this) || this;\n        /** Informative property indicating the controller is panning the chart or not */\n        _this.isPanning = false;\n        /** This is the filter applied to panning operations */\n        _this.panFilter = function (offset, view, allViews) { return offset; };\n        /** THis is the filter applied to tscaling operations */\n        _this.scaleFilter = function (scale, view, allViews) { return scale; };\n        /** The view that must be the start or focus of the interactions in order for the interactions to occur */\n        _this.startViews = [];\n        /**\n         * Callback for when the range has changed for the camera in a view\n         */\n        _this.onRangeChanged = function (camera, targetView) { };\n        /**\n         * This flag is set to true when a start view is targetted on mouse down even if it is not\n         * the top most view.\n         */\n        _this.startViewDidStart = false;\n        /**\n         * Corrects camera offset to respect current bounds and anchor.\n         */\n        _this.applyBounds = function () {\n            if (_this.bounds && _this.camera) {\n                var targetView = _this.getView(_this.bounds.view);\n                _this.applyScaleBounds();\n                // Next bound the positioning\n                if (targetView) {\n                    _this.camera.offset[0] = _this.boundsHorizontalOffset(targetView, _this.bounds);\n                    _this.camera.offset[1] = _this.boundsVerticalOffset(targetView, _this.bounds);\n                }\n            }\n        };\n        _this.applyScaleBounds = function () {\n            if (_this.camera && _this.bounds) {\n                // First bound the scaling\n                if (_this.bounds.scaleMin) {\n                    _this.camera.scale = [\n                        max(_this.camera.scale[0], _this.bounds.scaleMin[0]),\n                        max(_this.camera.scale[1], _this.bounds.scaleMin[1]),\n                        max(_this.camera.scale[2], _this.bounds.scaleMin[2]),\n                    ];\n                }\n                if (_this.bounds.scaleMax) {\n                    _this.camera.scale = [\n                        min(_this.camera.scale[0], _this.bounds.scaleMax[0]),\n                        min(_this.camera.scale[1], _this.bounds.scaleMax[1]),\n                        min(_this.camera.scale[2], _this.bounds.scaleMax[2]),\n                    ];\n                }\n            }\n        };\n        if (options.bounds) {\n            _this.setBounds(options.bounds);\n        }\n        _this.camera = options.camera;\n        _this.scaleFactor = options.scaleFactor || 1000.0;\n        _this.ignoreCoverViews = options.ignoreCoverViews || false;\n        if (options.startView) {\n            _this.startViews = Array.isArray(options.startView) ? options.startView : [options.startView];\n        }\n        _this.panFilter = options.panFilter || _this.panFilter;\n        _this.scaleFilter = options.scaleFilter || _this.scaleFilter;\n        _this.onRangeChanged = options.onRangeChanged || _this.onRangeChanged;\n        return _this;\n    }\n    /**\n     * Calculation for adhering to an anchor - x-axis offset only.\n     */\n    BasicCameraController.prototype.anchoredByBoundsHorizontal = function (targetView, bounds) {\n        switch (bounds.anchor) {\n            case CameraBoundsAnchor.TOP_LEFT:\n            case CameraBoundsAnchor.MIDDLE_LEFT:\n            case CameraBoundsAnchor.BOTTOM_LEFT:\n                return -(bounds.worldBounds.left -\n                    bounds.screenPadding.left / this.camera.scale[0]);\n            case CameraBoundsAnchor.TOP_MIDDLE:\n            case CameraBoundsAnchor.MIDDLE:\n            case CameraBoundsAnchor.BOTTOM_MIDDLE:\n                return -(bounds.worldBounds.right - (bounds.worldBounds.width / 2) -\n                    (0.5 * ((targetView.screenBounds.width + bounds.screenPadding.right) / this.camera.scale[0])));\n            case CameraBoundsAnchor.TOP_RIGHT:\n            case CameraBoundsAnchor.MIDDLE_RIGHT:\n            case CameraBoundsAnchor.BOTTOM_RIGHT:\n                return -(bounds.worldBounds.right - ((targetView.screenBounds.width - bounds.screenPadding.right) / this.camera.scale[0]));\n        }\n    };\n    /**\n     * Calculation for adhering to an anchor - y-axis offset only.\n     */\n    BasicCameraController.prototype.anchoredByBoundsVertical = function (targetView, bounds) {\n        switch (bounds.anchor) {\n            case CameraBoundsAnchor.TOP_LEFT:\n            case CameraBoundsAnchor.TOP_MIDDLE:\n            case CameraBoundsAnchor.TOP_RIGHT:\n                return -(bounds.worldBounds.top) -\n                    (-bounds.screenPadding.top / this.scale[1]);\n            case CameraBoundsAnchor.MIDDLE_LEFT:\n            case CameraBoundsAnchor.MIDDLE:\n            case CameraBoundsAnchor.MIDDLE_RIGHT:\n                return -(bounds.worldBounds.bottom - (bounds.worldBounds.height / 2)) +\n                    ((0.5 * (targetView.screenBounds.height - bounds.screenPadding.bottom) / this.scale[1]));\n            case CameraBoundsAnchor.BOTTOM_LEFT:\n            case CameraBoundsAnchor.BOTTOM_MIDDLE:\n            case CameraBoundsAnchor.BOTTOM_RIGHT:\n                return -(bounds.worldBounds.bottom -\n                    (targetView.screenBounds.height - bounds.screenPadding.bottom) / this.scale[1]);\n        }\n    };\n    /**\n     * Returns offset on x-axis due to current bounds and anchor.\n     */\n    BasicCameraController.prototype.boundsHorizontalOffset = function (targetView, bounds) {\n        var worldTLinScreenSpace = targetView.worldToScreen({ x: bounds.worldBounds.left, y: bounds.worldBounds.top });\n        var worldBRinScreenSpace = targetView.worldToScreen({ x: bounds.worldBounds.right, y: bounds.worldBounds.bottom });\n        var widthDifference = (worldBRinScreenSpace.x - worldTLinScreenSpace.x) +\n            bounds.screenPadding.left +\n            bounds.screenPadding.right -\n            targetView.screenBounds.width;\n        // If the worldBounds are smaller than the screenBounds,\n        // We offset according to the anchoring\n        if (widthDifference < 0) {\n            return this.anchoredByBoundsHorizontal(targetView, bounds);\n        }\n        if (worldBRinScreenSpace.x < (targetView.screenBounds.right - bounds.screenPadding.right)) {\n            return (-bounds.worldBounds.right + (targetView.screenBounds.width - bounds.screenPadding.right) / this.camera.scale[0]);\n        }\n        if (worldTLinScreenSpace.x > (targetView.screenBounds.left + bounds.screenPadding.left)) {\n            return (-bounds.worldBounds.left + (bounds.screenPadding.left / this.camera.scale[0]));\n        }\n        return this.camera.offset[0];\n    };\n    /**\n     * Returns offset on y-axis due to current bounds and anchor.\n     */\n    BasicCameraController.prototype.boundsVerticalOffset = function (targetView, bounds) {\n        var worldTLinScreenSpace = targetView.worldToScreen({ x: bounds.worldBounds.left, y: bounds.worldBounds.top });\n        var worldBRinScreenSpace = targetView.worldToScreen({ x: bounds.worldBounds.right, y: bounds.worldBounds.bottom });\n        var heightDifference = (worldBRinScreenSpace.y - worldTLinScreenSpace.y) +\n            bounds.screenPadding.top +\n            bounds.screenPadding.bottom -\n            targetView.screenBounds.height;\n        // If the viewBounds are larger than the screenBounds,\n        // We offset according to the anchoring\n        if (heightDifference < 0) {\n            return this.anchoredByBoundsVertical(targetView, bounds);\n        }\n        if (worldTLinScreenSpace.y > targetView.screenBounds.top - bounds.screenPadding.top) {\n            return (-(bounds.worldBounds.top - (bounds.screenPadding.top / this.camera.scale[1])));\n        }\n        if (worldBRinScreenSpace.y < targetView.screenBounds.bottom + bounds.screenPadding.bottom) {\n            return (-(bounds.worldBounds.bottom + ((-targetView.screenBounds.height + bounds.screenPadding.bottom) / this.camera.scale[1])));\n        }\n        return this.camera.offset[1];\n    };\n    BasicCameraController.prototype.canStart = function (viewId) {\n        return (this.startViews.length === 0 ||\n            (this.startViews && this.startViews.indexOf(viewId) > -1) ||\n            this.startViewDidStart && this.ignoreCoverViews);\n    };\n    BasicCameraController.prototype.findCoveredStartView = function (e) {\n        var _this = this;\n        var found = e.viewsUnderMouse.find(function (under) { return _this.startViews.indexOf(under.view.id) > -1; });\n        this.startViewDidStart = Boolean(found);\n        if (found) {\n            this.coveredStartView = found.view;\n        }\n    };\n    BasicCameraController.prototype.getTargetView = function (e) {\n        // If we have a start view and we do not ignore covering views,\n        // Then our target view is the view we started with\n        if (this.startViews && !this.ignoreCoverViews) {\n            return e.target.view;\n        }\n        // Otherwise, we use the covered start view\n        else {\n            return this.coveredStartView;\n        }\n    };\n    /**\n     * Used to aid in handling the pan effect and determine the contextual view targetted.\n     */\n    BasicCameraController.prototype.handleMouseDown = function (e, button) {\n        if (this.startViews) {\n            // We look for valid covered views on mouse down so dragging will work\n            this.findCoveredStartView(e);\n            // If this is a valid start view, then we enter a panning state with the mouse down\n            if (e.start) {\n                this.isPanning = (this.canStart(e.start.view.id) || this.isPanning);\n            }\n        }\n    };\n    /**\n     * Used to aid in handling the pan effect\n     */\n    BasicCameraController.prototype.handleMouseUp = function (e) {\n        this.startViewDidStart = false;\n        this.isPanning = false;\n    };\n    /**\n     * Applies a panning effect by adjusting the camera's offset.\n     */\n    BasicCameraController.prototype.handleDrag = function (e, drag) {\n        if (e.start) {\n            if (this.canStart(e.start.view.id)) {\n                var pan = [(drag.screen.delta.x / this.camera.scale[0]),\n                    (drag.screen.delta.y / this.camera.scale[1]),\n                    0];\n                if (this.panFilter) {\n                    pan = this.panFilter(pan, e.start.view, e.viewsUnderMouse.map(function (v) { return v.view; }));\n                }\n                this.camera.offset[0] += pan[0];\n                this.camera.offset[1] += pan[1];\n                // Add additional correction for bounds\n                this.applyBounds();\n                // Broadcast the change occurred\n                this.onRangeChanged(this.camera, e.start.view);\n                // Add additional correction for bounds\n                this.applyBounds();\n            }\n        }\n    };\n    /**\n     * Applies a scaling effect to the camera for mouse wheel events\n     */\n    BasicCameraController.prototype.handleWheel = function (e, wheelMetrics) {\n        // Every mouse wheel event must look to see if it's over a valid covered start view\n        this.findCoveredStartView(e);\n        if (this.canStart(e.target.view.id)) {\n            var targetView = this.getTargetView(e);\n            var beforeZoom = targetView.screenToWorld(e.screen.mouse);\n            var currentZoomX = this.camera.scale[0] || 1.0;\n            var currentZoomY = this.camera.scale[1] || 1.0;\n            var scale = [wheelMetrics.wheel[1] / this.scaleFactor *\n                    currentZoomX, wheelMetrics.wheel[1] / this.scaleFactor * currentZoomY, 1];\n            if (this.scaleFilter) {\n                scale = this.scaleFilter(scale, targetView, e.viewsUnderMouse.map(function (v) { return v.view; }));\n            }\n            this.camera.scale[0] = currentZoomX + scale[0];\n            this.camera.scale[1] = currentZoomY + scale[1];\n            // Ensure the new scale values are within bounds before attempting to correct offsets\n            this.applyScaleBounds();\n            var afterZoom = targetView.screenToWorld(e.screen.mouse);\n            this.camera.offset[0] -= (beforeZoom.x - afterZoom.x);\n            this.camera.offset[1] -= (beforeZoom.y - afterZoom.y);\n            // Add additional correction for bounds\n            this.applyBounds();\n            // Broadcast the change occurred\n            this.onRangeChanged(this.camera, targetView);\n            // Add additional correction for bounds\n            this.applyBounds();\n        }\n    };\n    // These are the currently Unused responses for this controller\n    BasicCameraController.prototype.handleMouseOut = function (e) { };\n    BasicCameraController.prototype.handleClick = function (e) { };\n    BasicCameraController.prototype.handleMouseMove = function (e) { };\n    BasicCameraController.prototype.handleMouseOver = function (e) { };\n    /**\n     * Evaluates the world bounds the specified view is observing\n     *\n     * @param viewId The id of the view when the view was generated when the surface was made\n     */\n    BasicCameraController.prototype.getRange = function (viewId) {\n        /** Get the projections for the provided view */\n        var projection = this.getProjection(viewId);\n        /** Get the bounds on the screen for the indicated view */\n        var screenBounds = this.getViewScreenBounds(viewId);\n        // Make sure we have a valid projection and screen bounds to make the adjustment\n        if (projection && screenBounds) {\n            /** Get the current viewed world bounds of the view */\n            var topLeft = projection.screenToWorld(screenBounds);\n            var bottomRight = projection.screenToWorld({ x: screenBounds.right, y: screenBounds.bottom });\n            return new bounds_1.Bounds({\n                height: bottomRight.y - topLeft.y,\n                width: bottomRight.x - topLeft.x,\n                x: topLeft.x,\n                y: topLeft.y,\n            });\n        }\n        return new bounds_1.Bounds({ x: 0, y: 0, width: 1, height: 1 });\n    };\n    Object.defineProperty(BasicCameraController.prototype, \"pan\", {\n        /**\n         * Retrieves the current pan of the controlled camera\n         */\n        get: function () {\n            return this.camera.offset;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets bounds applicable to the supplied view.\n     * If no view is supplied, it uses the first in the startViews array\n     */\n    BasicCameraController.prototype.setBounds = function (bounds) {\n        this.bounds = bounds;\n        this.applyBounds();\n    };\n    Object.defineProperty(BasicCameraController.prototype, \"scale\", {\n        /**\n         * Retrieves the current scale of the camera\n         */\n        get: function () {\n            return this.camera.scale;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This lets you set the visible range of a view based on the view's camera. This will probably not work\n     * as expected if the view indicated and this controller do not share the same camera.\n     *\n     * @param viewId The id of the view when the view was generated when the surface was made\n     */\n    BasicCameraController.prototype.setRange = function (newWorld, viewId) {\n        /** Get the projections for the provided view */\n        var projection = this.getProjection(viewId);\n        /** Get the bounds on the screen for the indicated view */\n        var screenBounds = this.getViewScreenBounds(viewId);\n        /** Get the view the range is being applied towards */\n        var view = this.getView(viewId);\n        // Make sure we have a valid projection and screen bounds to make the adjustment\n        if (projection && screenBounds && view) {\n            var deltaScale = util_1.subtract3([\n                screenBounds.width / newWorld.width,\n                screenBounds.height / newWorld.height,\n                1,\n            ], this.camera.scale);\n            this.camera.scale = util_1.add3(this.camera.scale, this.scaleFilter(deltaScale, view, [view]));\n            var deltaPan = util_1.subtract3([\n                -newWorld.x,\n                -newWorld.y,\n                0,\n            ], this.camera.offset);\n            this.camera.offset = util_1.add3(this.camera.offset, this.scaleFilter(deltaPan, view, [view]));\n            // Bound the camera to the specified bounding range\n            this.applyBounds();\n            // Broadcast the change occurred\n            this.onRangeChanged(this.camera, view);\n            // Bound the camera to the specified bounding range\n            this.applyBounds();\n        }\n    };\n    return BasicCameraController;\n}(event_manager_1.EventManager));\nexports.BasicCameraController = BasicCameraController;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./basic-camera-controller\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./base-event-managers\"));\n__export(require(\"./base-layers\"));\n__export(require(\"./instance-provider\"));\n__export(require(\"./primitives\"));\n__export(require(\"./surface\"));\n__export(require(\"./types\"));\n__export(require(\"./util\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./voidgl\"));\n"],"sourceRoot":""}