{"version":3,"sources":["webpack://voidgl/webpack/universalModuleDefinition","webpack://voidgl/webpack/bootstrap","webpack://voidgl/./src/voidgl/types.ts","webpack://voidgl/external \"three\"","webpack://voidgl/./src/voidgl/primitives/bounds.ts","webpack://voidgl/./src/voidgl/instance-provider/index.ts","webpack://voidgl/./src/voidgl/base-layers/types.ts","webpack://voidgl/./src/voidgl/surface/layer.ts","webpack://voidgl/./src/voidgl/primitives/index.ts","webpack://voidgl/./src/voidgl/util/instance.ts","webpack://voidgl/./src/voidgl/util/index.ts","webpack://voidgl/./src/voidgl/surface/texture/index.ts","webpack://voidgl/./src/voidgl/util/identify-by-key.ts","webpack://voidgl/./src/voidgl/surface/generate-layer-model.ts","webpack://voidgl/./src/voidgl/surface/view.ts","webpack://voidgl/./src/voidgl/surface/scene.ts","webpack://voidgl/./src/voidgl/surface/texture/label-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/base-atlas-resource.ts","webpack://voidgl/./src/voidgl/base-layers/edges/types.ts","webpack://voidgl/./src/voidgl/util/view-camera.ts","webpack://voidgl/./src/voidgl/util/shader-templating.ts","webpack://voidgl/./src/voidgl/util/chart-camera.ts","webpack://voidgl/./src/voidgl/surface/event-manager.ts","webpack://voidgl/./src/voidgl/surface/mouse-event-manager.ts","webpack://voidgl/./src/voidgl/surface/inject-shader-io.ts","webpack://voidgl/./src/voidgl/surface/generate-layer-material.ts","webpack://voidgl/./src/voidgl/surface/generate-layer-geometry.ts","webpack://voidgl/./src/voidgl/util/data-bounds.ts","webpack://voidgl/./src/voidgl/surface/generate-default-scene.ts","webpack://voidgl/./src/voidgl/util/make-instance-uniform-name.ts","webpack://voidgl/./src/voidgl/shaders/fragments/template-vars.ts","webpack://voidgl/./src/voidgl/base-layers/labels/index.ts","webpack://voidgl/./src/voidgl/surface/texture/label-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/image-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/color-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/color-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/sub-texture.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas.ts","webpack://voidgl/./src/voidgl/base-layers/images/index.ts","webpack://voidgl/./node_modules/debug/src/browser.js","webpack://voidgl/./src/voidgl/util/mouse.ts","webpack://voidgl/./src/voidgl/util/webgl-stat.ts","webpack://voidgl/./src/voidgl/util/vector.ts","webpack://voidgl/./src/voidgl/instance-provider/observable-manager.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas-resource-manager.ts","webpack://voidgl/./src/voidgl/surface/event-managers/layer-mouse-events.ts","webpack://voidgl/./src/voidgl/util/instance-uniform-manager.ts","webpack://voidgl/./src/voidgl/util/quad-tree.ts","webpack://voidgl/./src/voidgl/primitives/absolute-position.ts","webpack://voidgl/./src/voidgl/shaders/fragments/projection-methods.vs","webpack://voidgl/./src/voidgl/shaders/fragments/shader-input.vs","webpack://voidgl/./src/voidgl/shaders/fragments/instance-destructuring-array.vs","webpack://voidgl/./src/voidgl/shaders/fragments/fragment-shader-composition.fs","webpack://voidgl/./src/voidgl/shaders/fragments/vertex-shader-composition.vs","webpack://voidgl/./src/voidgl/shaders/fragments/instance-retrieval-array.vs","webpack://voidgl/./src/voidgl/shaders/util/uniform-instance-block-array.ts","webpack://voidgl/./src/voidgl/shaders/util/attribute-generation.ts","webpack://voidgl/./src/voidgl/surface/layer-surface.ts","webpack://voidgl/./src/voidgl/surface/index.ts","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.vs","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.fs","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.ts","webpack://voidgl/./src/voidgl/base-layers/rings/ring-instance.ts","webpack://voidgl/./src/voidgl/base-layers/rings/index.ts","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-instance.ts","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-layer.vs","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-layer.fs","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-layer.ts","webpack://voidgl/./src/voidgl/base-layers/rectangle/index.ts","webpack://voidgl/./src/voidgl/base-layers/labels/label-instance.ts","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.vs","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.fs","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.ts","webpack://voidgl/./src/voidgl/surface/texture/image-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas-manager.ts","webpack://voidgl/./src/voidgl/surface/texture/pack-node.ts","webpack://voidgl/./src/voidgl/base-layers/images/image-instance.ts","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.vs","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.fs","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.ts","webpack://voidgl/./src/voidgl/base-layers/edges/edge-instance.ts","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer.fs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-screen-curve.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-bezier2.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-bezier.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-line.vs","webpack://voidgl/./src/voidgl/base-layers/edges/edge-picking.ts","webpack://voidgl/./src/voidgl/base-layers/edges/edge-layer.ts","webpack://voidgl/./src/voidgl/base-layers/edges/index.ts","webpack://voidgl/./src/voidgl/base-layers/circles/circle-instance.ts","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.vs","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.fs","webpack://voidgl/./src/voidgl/shaders/base/no-op.vs","webpack://voidgl/./src/voidgl/shaders/base/no-op.fs","webpack://voidgl/./src/voidgl/surface/layer-interaction-handler.ts","webpack://voidgl/./src/voidgl/surface/instance-diff-manager.ts","webpack://voidgl/./src/voidgl/primitives/point.ts","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.ts","webpack://voidgl/./src/voidgl/base-layers/circles/index.ts","webpack://voidgl/./src/voidgl/base-layers/index.ts","webpack://voidgl/./node_modules/ms/index.js","webpack://voidgl/./node_modules/debug/src/debug.js","webpack://voidgl/./node_modules/process/browser.js","webpack://voidgl/external \"bowser\"","webpack://voidgl/./src/voidgl/util/tracked-quad-tree.ts","webpack://voidgl/./src/voidgl/util/reference-camera.ts","webpack://voidgl/./src/voidgl/instance-provider/instance-provider.ts","webpack://voidgl/./src/voidgl/instance-provider/observable.ts","webpack://voidgl/external \"mobx\"","webpack://voidgl/./src/voidgl/util/data-provider.ts","webpack://voidgl/./src/voidgl/base-event-managers/basic-camera-controller.ts","webpack://voidgl/./src/voidgl/base-event-managers/index.ts","webpack://voidgl/./src/voidgl/index.ts","webpack://voidgl/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__102__","__WEBPACK_EXTERNAL_MODULE__107__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","InstanceBlockIndex","InstanceAttributeSize","UniformSize","VertexAttributeSize","ShaderInjectionTarget","PickType","InstanceDiffType","Bounds","options","this","x","y","width","height","left","top","bottom","right","emptyBounds","containsPoint","point","encapsulate","item","Math","abs","fits","bounds","hitBounds","isInside","toString","__export","AnchorType","ScaleType","extendStatics","__extends","setPrototypeOf","__proto__","Array","b","__","constructor","create","Three","types_1","util_1","identify_by_key_1","instance_diff_manager_1","layer_interaction_handler_1","Layer","_super","props","_this","depth","instanceById","Map","instanceVertexCount","assign","defaultProps","_a","picking","NONE","ALL","pickingMethods","getInstancePickingMethods","hitTest","quadTree","TrackedQuadTree","boundsAccessor","type","diffManager","InstanceDiffManager","diffProcessor","getDiffProcessor","interactions","LayerInteractionHandler","destroy","uniformManager","didUpdateProps","draw","uniform","change","instance","uniforms","changeList","data","end","length","getUniforms","resolve","update","materialUniforms","forEach","materialUniform","Error","getModelType","drawMode","TrianglesDrawMode","modelType","Mesh","getMaterialOptions","initShader","fs","instanceAttributes","vertexAttributes","vertexCount","vs","makeInstanceAttribute","block","blockIndex","size","atlas","makeUniform","shaderInjection","qualifier","willUpdateInstances","changes","willUpdateProps","newProps","didUpdate","IdentifyByKey","__decorate","decorators","target","key","desc","arguments","getOwnPropertyDescriptor","Reflect","decorate","instance_provider_1","instanceUID","Instance","_uid","_id","id","active","observable","generateLayerModel","layer","geometry","material","modelInfo","model","Boolean","isMesh","absolute_position_1","bounds_1","view_camera_1","isOrthographic","val","ClearFlags","View","pixelRatio","devicePixelRatio","screenToPixelSpace","out","pixelSpaceToScreen","screenToView","viewBounds","viewToScreen","screenToWorld","view","world","camera","offset","scale","viewCamera","ViewCameraType","CUSTOM","console","warn","worldToScreen","screen","viewToWorld","worldToView","fitViewtoViewport","surfaceDimensions","CONTROLLED","baseCamera","getAbsolutePositionBounds","viewport","far","near","position","set","z","updateMatrix","updateMatrixWorld","updateProjectionMatrix","screenBounds","DEFAULT_VIEW_ID","sortByDepth","a","Scene","container","layers","sortIsDirty","viewById","frustumCulled","autoUpdate","addLayer","push","addView","removeLayer","index","indexOf","splice","sortLayers","sort","DEFAULT_SCENE_ID","LabelAtlasResource","label","BaseAtlasResource","sampleScale","EdgeScaleType","EdgeType","EdgeBroadphase","ViewCamera","shaderTemplate","shader","required","matched","noValueProvided","notFound","shaderOptions","shaderResults","replace","match","keys","option","results","resolvedShaderOptions","shaderProvidedOptions","unresolvedProvidedOptions","unresolvedShaderOptions","values","error","chartCameraUID","applyArray","source","apply","concat","ChartCamera","location","slice","EventManager","getProjection","viewId","mouseManager","getView","getViewScreenBounds","setMouseManager","mouse_1","quad_tree_1","MouseEventManager","canvas","views","controllers","handlesWheelEvents","_waitingForRender","getViewsUnderMouse","mouse","hitViews","query","resize","context","setViews","setControllers","addContextListeners","QuadTree","addAll","map","v","filter","element","startView","startPosition","onmousewheel","event","eventElementPosition","interaction","makeInteraction","wheel","makeWheel","controller","handleWheel","stopPropagation","preventDefault","onmouseleave","waitingForRender","handleMouseOut","onmousemove","handleMouseMove","onmousedown","downViews","canClick","clickStartTime","Date","now","currentPosition","handleMouseDown","button","document","delta","drag","makeDrag","handleDrag","onmouseup","onmouseover","handleMouseOver","handleMouseUp","handleClick","onselectstart","addTouchContextListeners","ontouchstart","ontouchend","ontouchmove","ontouchcancel","_i","start","previous","current","viewsUnderMouse","normalizeWheel","toVertexAttributeInternal","attribute","materialAttribute","toUniformInternal","sortByResourceAttributes","injectShaderIO","shaderIO","atlasInstanceAttributes","requestedAtlasInjections","FOUR","ONE","injection","FRAGMENT","injections","VERTEX","attributes","blocks","found","maxBlock","addedUniforms","instanceAttribute","ATLAS","resource","getAtlasTexture","MATRIX4","projectionMatrix","elements","matrix","THREE","TWO","fillBlock","usedBlocks","max","addedInstanceAttributes","activeAttribute","_b","UNIFORM_SIZE_TO_MATERIAL_TYPE","MATRIX3","DEFAULT_UNIFORM_VALUE","toMaterialUniform","generateLayerMaterial","layerUniforms","instancingUniforms","materialParams","vertexShader","fragmentShader","generatedUniform","RawShaderMaterial","generateLayerGeometry","maxInstancesPerBuffer","vertexBuffers","attribute_1","Float32Array","buffer","formatError","endk","k","isArray","j","endj","instanceSize","endk_1","copyWithin","instancingBuffer","instanceStartIndex","BufferGeometry","attribute_3","BufferAttribute","addAttribute","DataBounds","chart_camera_1","scene_1","view_1","generateDefaultScene","aspectRatio","viewSize","defaultCamera","OrthographicCamera","defaultChartCamera","defaultViewport","defaultView","defaultScene","scene","INSTANCE_UNIFORM_ATTRIBUTE_PREFIX","makeInstanceUniformNameArray","makeInstanceUniformNameTree","templateVars","attributeFragments","blocksPerInstance","instanceBlockCount","instanceDataBinaryTree","instanceDataRetrieval","instanceDestructuring","instanceFragments","instanceUniformDeclarations","projectionMethods","shaderInput","__awaiter","thisArg","_arguments","P","generator","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","__generator","body","f","t","g","_","sent","trys","ops","verb","throw","return","Symbol","iterator","op","TypeError","pop","floor","min","LabelRasterizer","awaitContext","getContext","setTimeout","calculateLabelSize","calculateTexture","calculateTrucatedText","sampleScaling","drawLabel","truncatedText","measureContents","minX","minY","maxX","maxY","rasterization","texture","createCroppedCanvas","maxWidth","text","firstTest","cursor","safety","substr","nextCursor","cropped","createElement","imageSmoothingEnabled","drawImage","fontSize","getLabelRasterizationFontSize","fillStyle","font","makeCSSFont","measureText","fillText","fontWeight","fontFamily","imageData","getImageData","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","render","renderSync","ImageAtlasResource","image","ColorRasterizer","limit","makeCSS","color","opacity","fillRect","ColorAtlasResource","SubTexture","atlasReferenceID","atlasTexture","atlasTL","atlasTR","atlasBL","atlasBR","widthOnAtlas","heightOnAtlas","isValid","pixelWidth","pixelHeight","pack_node_1","sub_texture_1","AtlasSize","Atlas","validResources","textureSettings","packing","PackNode","updateTexture","invalidateResource","zero","setManager","manager","registerResource","undefined","removeResource","redoneCanvas","dispose","Texture","generateMipmaps","premultiplyAlpha","needsUpdate","process","load","storage","debug","env","DEBUG","log","Function","formatArgs","args","useColors","namespace","humanize","diff","lastC","save","namespaces","removeItem","navigator","userAgent","toLowerCase","documentElement","style","WebkitAppearance","firebug","exception","table","parseInt","RegExp","$1","chrome","local","localStorage","localstorage","colors","formatters","JSON","stringify","err","message","enable","browser","three_1","IE_ADJUSTMENT","OLD_IE_ADJUSTMENT","MAX_FIREFOX_WHEELDELTA","lowPassY","LOW_PASS_U0","LOW_PASS_U1","LOW_PASS_U2","LOW_PASS_U3","firefox","deltaX","deltaY","sign","unshift","Vector2","msie","version","wheelDeltaX","wheelDeltaY","wheelDelta","detail","msedge","multiplyScalar","relative","mouseX","mouseY","eventX","eventY","nativeEvent","pageX","pageY","clientX","clientY","scrollLeft","scrollTop","offsetParent","offsetLeft","offsetTop","getProgramInfo","gl","program","attributeCount","uniformCount","activeUniforms","getProgramParameter","ACTIVE_UNIFORMS","activeAttributes","ACTIVE_ATTRIBUTES","enums","35664","35665","35666","35667","35668","35669","35670","35671","35672","35673","35674","35675","35676","35678","35680","5120","5121","5122","5123","5124","5125","5126","getActiveUniform","typeName","getActiveAttrib","WebGLStat","MAX_VERTEX_UNIFORMS","MAX_FRAGMENT_UNIFORMS","MAX_ATTRIBUTES","WEBGL_SUPPORTED","MAX_TEXTURE_SIZE","WebGLRenderingContext","getAContext","getParameter","MAX_VERTEX_UNIFORM_VECTORS","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_VERTEX_ATTRIBS","sqrt","add2","scale2","subtract2","dot2","add3","scale3","subtract3","dot3","add4","scale4","subtract4","dot4","multiply2","linear2","length2","multiply3","linear3","length3","multiply4","linear4","length4","ObservableManagerMode","ObservableManager","mode","BROADCAST","label_atlas_resource_1","toInstanceIOValue","AtlasResourceManager","targetAtlas","requestQueue","requestLookup","atlasManager","dequeueRequests","didDequeue","_loop_1","this_1","resources","_c","requests","atlasRequests_1","updateAtlas","request","delete","request_1","from","entries","atlasRequests","existingRequests","setTargetAtlas","LayerMouseEvents","sceneViews","isOver","getSceneViewsUnderMouse","sceneViewByViewId","sceneView","viewItem","getMouseByViewId","viewMouseByViewId","handleInteraction","handleMouseClick","handleMouseDrag","callback","sceneViews_1","handleSceneView","flag","clear","allSceneViews","currentSceneViews","generate_layer_model_1","make_instance_uniform_name_1","InstanceUniformManager","buffers","availableClusters","instanceToCluster","clusterToBuffer","maxUniformBlock","uniformBlocksPerInstance","add","makeNewBuffer","cluster","uid","remove","removeFromScene","setScene","newGeometry","drawRange","count","newMaterial","clone","newModel","activeInstances","clusters","firstInstance","lastInstance","uniformIndex","uniformName","instanceData","Vector4","instanceIndex","uniformRange","filterQuery","queryValues","filtered","obj","find","Quadrants","mid","TL","Node","TR","BL","BR","children","nodes","child","doAdd","cover","childrenProps","MAX_VALUE","allChildren","gatherChildren","split","isNaN","area","list","visit","queryBounds","queryPoint","cb","finished","data_bounds_1","ref","scaleRatio","parse","num","parseFloat","reference","top_1","shader_templating_1","template_vars_1","instanceRetrievalArrayFragment","VECTOR_COMPONENTS","sizeToType","1","2","3","4","9","16","99","makeUniformArrayDeclaration","totalBlocks","fragment","fill","makeInstanceRetrievalArray","templateOptions","makeInstanceDestructuringArray","join","webgl_stat_1","uniform_instance_block_array_1","vertexShaderComposition","fragmentShaderComposition","instanceDestructuringArray","MAX_USE_PER_BLOCK","generateUniforms","injectionType","injectFragments","shaders","shaderInputMetrics","instancingInfo","instanceUniformBlockCount","ceil","calculateUniformBlockUseage","sortedInstanceAttributes","currentBlock","trueBlockIndex","blockUseage","innerBlockUseage","attributeSize","oldUseage","newUseage","innerUseage","branchesPerLevel","instances","uniformMetrics","blockQualifierDedup","qualifiers","blockQualifiers","qualifierList","allQualifiers","declaration","makeInstanceUniformDeclaration","makeUniformInstanceDataOptions","metrics","generateInstanceDataLookupOptions","additionalOptions","generateVertexAttributes","generateShaderInputs","makeInstanceDestructuring","makeInstanceAttributeReferences","generateVertexShader","vertexShaderResults","generateFragmentShader","images_1","labels_1","attribute_generation_1","generate_default_scene_1","generate_layer_geometry_1","generate_layer_material_1","inject_shader_io_1","mouse_event_manager_1","instance_uniform_manager_1","layer_mouse_events_1","texture_1","atlas_resource_manager_1","DEFAULT_BACKGROUND_COLOR","Color","isCanvas","createLayer","layerClass","LayerSurface","AtlasManager","scenes","willDisposeLayer","isBufferingAtlas","initLayer","resourceManager","renderer","LabelInstance","ImageInstance","didBuffer","drawSceneView","rendererSize","getSize","getPixelRatio","background","SCISSOR_TEST","scissor","clearColor","clearFlags","COLOR","COLOR_BUFFER_BIT","DEPTH","DEPTH_BUFFER_BIT","STENCIL","STENCIL_BUFFER_BIT","box","currentViewport","setViewport","getViewSize","getViewWorldBounds","topLeft","bottomRight","init","setContext","initGL","initMouseManager","initResources","WebGLRenderer","alpha","antialias","preserveDrawingBuffer","autoClear","setFaceCulling","CullFaceNone","setSize","setPixelRatio","setClearColor","defaultSceneElements","sceneViewDepth","sceneOptions","newScene","viewOptions","newView","addLayerToScene","shaderMetrics","eventManagers","atlasResources","createAtlas","layerInitializers","existingLayer","layerId","fitContainer","parentElement","className","setAttribute","containerBox","getBoundingClientRect","isString","getElementById","primitives_1","layer_1","RingLayer","ring","radius","thickness","defaults","Points","blending","CustomBlending","blendSrc","OneFactor","premultipliedAlpha","transparent","RingInstance","instance_1","anchorCalculator","TopLeft","anchor","rectangle","padding","TopMiddle","TopRight","MiddleLeft","Middle","MiddleRight","BottomLeft","BottomMiddle","BottomRight","Custom","RectangleInstance","scaling","BOUND_MAX","_anchor","setAnchor","newAnchor","types_2","RectangleLayer","projection","maxScale","minScale","ALWAYS","NEVER","screenPoint","vertexToNormal","0","5","vertexToSide","u","vertex","TriangleStripDrawMode","rasterizationLookUp","_cssFont","_fontFamily","_fontSize","_fontStyle","_fontWeight","_maxWidth","_text","_width","_height","_isDestroyed","fontStyle","cssFontLookup","rasterizations","references","_rasterization","LabelLayer","ImageRasterizer","calculateImageSize","atlas_1","color_atlas_resource_1","color_rasterizer_1","image_atlas_resource_1","label_rasterizer_1","ZERO_IMAGE","allAtlas","destroyAtlas","atlasName","setDefaultImage","loadedImage","rect","dimensions","insertedNode","ux","uy","uw","uh","onePixelX","atlasDimensions","loadImage","first","second","insert","nodeImage","nodeDimensions","imageSrc","subTexture","image_1","onload","onerror","path","toDataURL","Image","src","resources_1","isLeaf","child0","child1","hasChild","newNode","fitFlag","imgWidth","imgHeight","dWidth","dHeight","removed","tint","_sourceWidth","_sourceHeight","_element","_path","ImageLayer","EdgeInstance","colorStart","colorEnd","control","widthStart","widthEnd","setEdgeWidth","setColor","vector_1","pow","interpolation","LINE","p1","p2","c1","c2","BEZIER","BEZIER2","t1","toPointObject","toPointArray","TEST_RESOLUTION","edgePicking","broadphase","minPickDistance","scaleType","interpolate","edge","edgeWidthStart","edgeWidthEnd","PASS_X","PASS_Y","SCREEN_CURVE","control1","control2","closestIndex","closestDistance","secondClosestIndex","secondClosestDistance","startPoint","endPoint","linePoint","distance","lineWidth","startSegment","endSegment","vector","lineDirection","lineNormal","distanceTo","edge_picking_1","pickVS","baseVS","screenVS","edgeFS","EdgeLayer","scaleFactor","MAX_SEGMENTS","_d","vertexInterpolation","_e","CircleInstance","isMouseOver","isMouseDown","onMouseDown","world_1","hitTest_1","query_1","bind","querySpace","check","onMouseOut","world_2","query_2","hitTest_2","onMouseUp","world_3","hitTest_3","query_3","onMouseOver","onMouseMove","info","world_4","hitTest_4","query_4","notOverInstances","isCurrentlyOver_1","noLongerOver","onMouseClick","world_5","hitTest_5","query_5","VECTOR_ACCESSORS","quadPicking","changeInstanceQuad","addInstanceQuad","removeInstanceQuad","changeInstance","addInstance","removeInstance","uniformCluster","updateInstance","uniformRangeStart","instanceUniform","squareDistance","dx","dy","Point","getClosest","testPoint","points","closestPoint","getClosestIndex","subtract","amount","normalize","magnitude","getDistance","squared","getMidpoint","direction","make","CircleLayer","circle","circleScreenCenter","mouseScreen","depthTest","disableDepthTest","h","plural","ms","str","String","exec","long","round","fmtShort","createDebug","prevTime","enabled","self","curr","prev","coerce","format","formatter","hash","charCodeAt","selectColor","stack","disable","names","skips","len","test","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","array","noop","nextTick","title","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","getBounds","childToNode","childToBounds","nullBounded","fromSplit","doRemove","node","ReferenceCamera","offsetFilter","scaleFilter","base","observable_manager_1","InstanceProvider","cleanObservation","instanceChanges","allowChanges","GATHER_OBSERVABLES","observer","disposer","$$register","INSERT","instanceUpdated","CHANGE","$$dispose","REMOVE","observerKey","newVal","mobx_1","UPDATE_FLAG","DataProvider","instanceDisposers","isChanged","_changeList","monitorItem","_instances","observe","listDisposer","intercept","monitorList","changes_1","changeType","lookUp","disposers","removedCount","added","CameraBoundsAnchor","event_manager_1","BasicCameraController","isPanning","panFilter","allViews","onRangeChanged","targetView","startViewDidStart","applyBounds","applyScaleBounds","boundsHorizontalOffset","boundsVerticalOffset","scaleMin","scaleMax","setBounds","ignoreCoverViews","startViews","anchoredByBoundsHorizontal","TOP_LEFT","MIDDLE_LEFT","BOTTOM_LEFT","worldBounds","screenPadding","TOP_MIDDLE","MIDDLE","BOTTOM_MIDDLE","TOP_RIGHT","MIDDLE_RIGHT","BOTTOM_RIGHT","anchoredByBoundsVertical","worldTLinScreenSpace","worldBRinScreenSpace","canStart","findCoveredStartView","under","coveredStartView","getTargetView","pan","wheelMetrics","beforeZoom","currentZoomX","currentZoomY","afterZoom","getRange","setRange","newWorld","deltaScale","deltaPan"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"three\"), require(\"bowser\"), require(\"mobx\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"three\", \"bowser\", \"mobx\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"voidgl\"] = factory(require(\"three\"), require(\"bowser\"), require(\"mobx\"));\n\telse\n\t\troot[\"voidgl\"] = factory(root[\"three\"], root[\"bowser\"], root[\"mobx\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__102__, __WEBPACK_EXTERNAL_MODULE__107__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 112);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar InstanceBlockIndex;\n(function (InstanceBlockIndex) {\n    InstanceBlockIndex[InstanceBlockIndex[\"ONE\"] = 1] = \"ONE\";\n    InstanceBlockIndex[InstanceBlockIndex[\"TWO\"] = 2] = \"TWO\";\n    InstanceBlockIndex[InstanceBlockIndex[\"THREE\"] = 3] = \"THREE\";\n    InstanceBlockIndex[InstanceBlockIndex[\"FOUR\"] = 4] = \"FOUR\";\n})(InstanceBlockIndex = exports.InstanceBlockIndex || (exports.InstanceBlockIndex = {}));\nvar InstanceAttributeSize;\n(function (InstanceAttributeSize) {\n    InstanceAttributeSize[InstanceAttributeSize[\"ONE\"] = 1] = \"ONE\";\n    InstanceAttributeSize[InstanceAttributeSize[\"TWO\"] = 2] = \"TWO\";\n    InstanceAttributeSize[InstanceAttributeSize[\"THREE\"] = 3] = \"THREE\";\n    InstanceAttributeSize[InstanceAttributeSize[\"FOUR\"] = 4] = \"FOUR\";\n    /** Special case for making instance attributes that can target Atlas resources */\n    InstanceAttributeSize[InstanceAttributeSize[\"ATLAS\"] = 99] = \"ATLAS\";\n})(InstanceAttributeSize = exports.InstanceAttributeSize || (exports.InstanceAttributeSize = {}));\nvar UniformSize;\n(function (UniformSize) {\n    UniformSize[UniformSize[\"ONE\"] = 1] = \"ONE\";\n    UniformSize[UniformSize[\"TWO\"] = 2] = \"TWO\";\n    UniformSize[UniformSize[\"THREE\"] = 3] = \"THREE\";\n    UniformSize[UniformSize[\"FOUR\"] = 4] = \"FOUR\";\n    UniformSize[UniformSize[\"MATRIX3\"] = 9] = \"MATRIX3\";\n    UniformSize[UniformSize[\"MATRIX4\"] = 16] = \"MATRIX4\";\n    UniformSize[UniformSize[\"ATLAS\"] = 99] = \"ATLAS\";\n})(UniformSize = exports.UniformSize || (exports.UniformSize = {}));\nvar VertexAttributeSize;\n(function (VertexAttributeSize) {\n    VertexAttributeSize[VertexAttributeSize[\"ONE\"] = 1] = \"ONE\";\n    VertexAttributeSize[VertexAttributeSize[\"TWO\"] = 2] = \"TWO\";\n    VertexAttributeSize[VertexAttributeSize[\"THREE\"] = 3] = \"THREE\";\n    VertexAttributeSize[VertexAttributeSize[\"FOUR\"] = 4] = \"FOUR\";\n})(VertexAttributeSize = exports.VertexAttributeSize || (exports.VertexAttributeSize = {}));\n/** These are flags for indicating which shaders receive certain injection elements */\nvar ShaderInjectionTarget;\n(function (ShaderInjectionTarget) {\n    /** ONLY the vertex shader will receive the injection */\n    ShaderInjectionTarget[ShaderInjectionTarget[\"VERTEX\"] = 0] = \"VERTEX\";\n    /** ONLY the fragment shader will receive the injection */\n    ShaderInjectionTarget[ShaderInjectionTarget[\"FRAGMENT\"] = 1] = \"FRAGMENT\";\n    /** Both the fragment and vertex shader will receive the injection */\n    ShaderInjectionTarget[ShaderInjectionTarget[\"ALL\"] = 2] = \"ALL\";\n})(ShaderInjectionTarget = exports.ShaderInjectionTarget || (exports.ShaderInjectionTarget = {}));\n/**\n * This is the type of picking assigned to a layer. Each mode has performance and functionality\n * tradeoffs.\n */\nvar PickType;\n(function (PickType) {\n    /** Disable any picking methodology */\n    PickType[PickType[\"NONE\"] = 0] = \"NONE\";\n    /** Pick all instances found underneath the mouse. The Layer must explicitly support this feature. */\n    PickType[PickType[\"ALL\"] = 1] = \"ALL\";\n    /**\n     * NOTE: NOT IMPLEMENTED YET\n     *\n     * Uses highly efficient color rendering method to detect an instance on a pixel by pixel check. Since it is\n     * based on rendering, it will only select the 'visually' top most rendered instance. This means instances can be occluded\n     * by other instances is an instance renders behind another.\n     *\n     * This is vastly more efficient and accurate than ALL. This also will be more readily supported than ALL.\n     */\n    PickType[PickType[\"SINGLE\"] = 2] = \"SINGLE\";\n})(PickType = exports.PickType || (exports.PickType = {}));\n/**\n * Diff types that an instance can go through. Used to help the system consume the diff\n * and apply it to the GL framework.\n */\nvar InstanceDiffType;\n(function (InstanceDiffType) {\n    InstanceDiffType[InstanceDiffType[\"CHANGE\"] = 0] = \"CHANGE\";\n    InstanceDiffType[InstanceDiffType[\"INSERT\"] = 1] = \"INSERT\";\n    InstanceDiffType[InstanceDiffType[\"REMOVE\"] = 2] = \"REMOVE\";\n})(InstanceDiffType = exports.InstanceDiffType || (exports.InstanceDiffType = {}));\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Class to manage the x, y, width, and height of an object\n *\n * @template T This specifies the data type associated with this shape and is accessible\n *             via the property 'd'\n */\nvar Bounds = /** @class */ (function () {\n    /**\n     * Create a new instance\n     *\n     * @param left  The left side (x coordinate) of the instance\n     * @param right The right side of the instance\n     * @param top The top (y coordinate) of the instance\n     * @param bottom The bottom of the instance\n     */\n    function Bounds(options) {\n        this.x = 0;\n        this.y = 0;\n        this.width = 0;\n        this.height = 0;\n        this.x = options.x || options.left || 0;\n        this.y = options.y || options.top || 0;\n        this.height = options.height || (options.bottom - this.y) || 0;\n        this.width = options.width || (options.right - this.x) || 0;\n    }\n    Object.defineProperty(Bounds.prototype, \"area\", {\n        get: function () {\n            return this.width * this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"bottom\", {\n        get: function () {\n            return this.y + this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"left\", {\n        get: function () {\n            return this.x;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"mid\", {\n        get: function () {\n            return {\n                x: this.x + this.width / 2.0,\n                y: this.y + this.height / 2.0,\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"right\", {\n        get: function () {\n            return this.x + this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"top\", {\n        get: function () {\n            return this.y;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Bounds.emptyBounds = function () {\n        return new Bounds({\n            height: 0,\n            width: 0,\n            x: 0,\n            y: 0,\n        });\n    };\n    /**\n     * Checks to see if a point is within this bounds object.\n     *\n     * @param point\n     */\n    Bounds.prototype.containsPoint = function (point) {\n        return !(point.x < this.x || point.y < this.y || point.x > this.right || point.y > this.bottom);\n    };\n    /**\n     * Grows this bounds object to cover the space of the provided bounds object\n     *\n     * @param item\n     */\n    Bounds.prototype.encapsulate = function (item) {\n        if (item instanceof Bounds) {\n            if (item.x < this.x) {\n                this.width += Math.abs(item.x - this.x);\n                this.x = item.x;\n            }\n            if (item.y < this.y) {\n                this.height += Math.abs(item.y - this.y);\n                this.y = item.y;\n            }\n            if (this.right < item.right) {\n                this.width += item.right - this.right;\n            }\n            if (this.bottom < item.bottom) {\n                this.height += item.bottom - this.bottom;\n            }\n            return true;\n        }\n        else {\n            if (item.x < this.x) {\n                this.width += this.x - item.x;\n                this.x = item.x;\n            }\n            if (item.x > this.right) {\n                this.width += item.x - this.x;\n            }\n            if (item.y < this.y) {\n                this.height += this.y - item.y;\n                this.y = item.y;\n            }\n            if (item.y > this.bottom) {\n                this.height += item.y - this.y;\n            }\n            return true;\n        }\n    };\n    /**\n     * Checks to see if the provided bounds object could fit within the dimensions of this bounds object\n     * This ignores position and just checks width and height.\n     *\n     * @param bounds\n     *\n     * @return {number} 0 if it doesn't fit. 1 if it fits perfectly. 2 if it just fits.\n     */\n    Bounds.prototype.fits = function (bounds) {\n        // If the same, the bounds fits exactly into this bounds\n        if (this.width === bounds.width && this.height === bounds.height) {\n            return 1;\n        }\n        // The bounds can fit within this, then it just fits\n        if (this.width >= bounds.width && this.height >= bounds.height) {\n            return 2;\n        }\n        // Otherwise, the bounds does not fit within this bounds\n        return 0;\n    };\n    /**\n     * Checks if a bounds object intersects another bounds object.\n     *\n     * @param bounds\n     */\n    Bounds.prototype.hitBounds = function (bounds) {\n        return !(this.right < bounds.x || this.x > bounds.right || this.bottom < bounds.y || this.y > bounds.height);\n    };\n    /**\n     * Sees if the provided bounds is completely within this bounds object. Unlike fits() this takes\n     * position into account.\n     *\n     * @param bounds\n     */\n    Bounds.prototype.isInside = function (bounds) {\n        return this.x >= bounds.x && this.right <= bounds.right && this.y >= bounds.y && this.bottom <= bounds.bottom;\n    };\n    /**\n     * Easy readout of this Bounds object.\n     */\n    Bounds.prototype.toString = function () {\n        return \"{x: \" + this.x + \" y:\" + this.y + \" w:\" + this.width + \" h:\" + this.height + \"}\";\n    };\n    return Bounds;\n}());\nexports.Bounds = Bounds;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./observable\"));\n__export(require(\"./instance-provider\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AnchorType;\n(function (AnchorType) {\n    AnchorType[AnchorType[\"BottomLeft\"] = 0] = \"BottomLeft\";\n    AnchorType[AnchorType[\"BottomMiddle\"] = 1] = \"BottomMiddle\";\n    AnchorType[AnchorType[\"BottomRight\"] = 2] = \"BottomRight\";\n    AnchorType[AnchorType[\"Custom\"] = 3] = \"Custom\";\n    AnchorType[AnchorType[\"Middle\"] = 4] = \"Middle\";\n    AnchorType[AnchorType[\"MiddleLeft\"] = 5] = \"MiddleLeft\";\n    AnchorType[AnchorType[\"MiddleRight\"] = 6] = \"MiddleRight\";\n    AnchorType[AnchorType[\"TopLeft\"] = 7] = \"TopLeft\";\n    AnchorType[AnchorType[\"TopMiddle\"] = 8] = \"TopMiddle\";\n    AnchorType[AnchorType[\"TopRight\"] = 9] = \"TopRight\";\n})(AnchorType = exports.AnchorType || (exports.AnchorType = {}));\nvar ScaleType;\n(function (ScaleType) {\n    /** The size of the image will be tied to world space */\n    ScaleType[ScaleType[\"ALWAYS\"] = 1] = \"ALWAYS\";\n    /** The image will scale to it's font size then stop growing */\n    ScaleType[ScaleType[\"BOUND_MAX\"] = 2] = \"BOUND_MAX\";\n    /** The image will alwyas retain it's font size on screen */\n    ScaleType[ScaleType[\"NEVER\"] = 3] = \"NEVER\";\n})(ScaleType = exports.ScaleType || (exports.ScaleType = {}));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar types_1 = require(\"../types\");\nvar util_1 = require(\"../util\");\nvar identify_by_key_1 = require(\"../util/identify-by-key\");\nvar instance_diff_manager_1 = require(\"./instance-diff-manager\");\nvar layer_interaction_handler_1 = require(\"./layer-interaction-handler\");\n/**\n * A base class for generating drawable content\n */\nvar Layer = /** @class */ (function (_super) {\n    __extends(Layer, _super);\n    function Layer(props) {\n        var _this = \n        // We do not establish bounds in the layer. The surface manager will take care of that for us\n        // After associating the layer with the view it is a part of.\n        _super.call(this, props) || this;\n        /** This determines the drawing order of the layer within it's scene */\n        _this.depth = 0;\n        /** A lookup fo an instance by it's ID */\n        _this.instanceById = new Map();\n        /** Provides the number of vertices a single instance spans */\n        _this.instanceVertexCount = 0;\n        // Keep our props within the layer\n        _this.props = Object.assign({}, Layer.defaultProps || {}, props);\n        // Set up the pick type for the layer\n        var _a = _this.props.picking, picking = _a === void 0 ? types_1.PickType.NONE : _a;\n        // If ALL is specified we set up QUAD tree picking for our instances\n        if (picking === types_1.PickType.ALL) {\n            var pickingMethods = _this.getInstancePickingMethods();\n            _this.picking = {\n                hitTest: pickingMethods.hitTest,\n                quadTree: new util_1.TrackedQuadTree(0, 1, 0, 1, pickingMethods.boundsAccessor),\n                type: types_1.PickType.ALL,\n            };\n        }\n        _this.diffManager = new instance_diff_manager_1.InstanceDiffManager(_this);\n        _this.diffProcessor = _this.diffManager.getDiffProcessor();\n        _this.interactions = new layer_interaction_handler_1.LayerInteractionHandler(_this);\n        return _this;\n    }\n    /**\n     * Invalidate and free all resources assocated with this layer.\n     */\n    Layer.prototype.destroy = function () {\n        this.uniformManager.destroy();\n    };\n    Layer.prototype.didUpdateProps = function () {\n        /** LIFECYCLE */\n    };\n    /**\n     * This is where global uniforms should update their values. Executes every frame.\n     */\n    Layer.prototype.draw = function () {\n        var uniform;\n        var value;\n        // Consume the diffs for the instances to update each element\n        var changeList = this.props.data.changeList;\n        // Make some holder variables to prevent declaration within the loop\n        var change, instance, uniforms;\n        // Fast ref to the processor and manager\n        var diffProcessor = this.diffProcessor;\n        var diffManager = this.diffManager;\n        for (var i = 0, end = changeList.length; i < end; ++i) {\n            change = changeList[i];\n            instance = change[0];\n            uniforms = this.uniformManager.getUniforms(instance);\n            // The diff type is change[1] which we use to find the diff processing method to use\n            diffProcessor[change[1]](diffManager, instance, uniforms);\n        }\n        // Indicate the diffs are consumed\n        this.props.data.resolve();\n        // Loop through the uniforms that are across all instances\n        for (var i = 0, end = this.uniforms.length; i < end; ++i) {\n            uniform = this.uniforms[i];\n            value = uniform.update(uniform);\n            uniform.materialUniforms.forEach(function (materialUniform) { return materialUniform.value = value; });\n        }\n    };\n    /**\n     * This method is for layers to implement to specify how the bounds for an instance are retrieved or\n     * calculated and how the Instance interacts with a point. This is REQUIRED to support PickType.ALL on the layer.\n     */\n    Layer.prototype.getInstancePickingMethods = function () {\n        throw new Error('When picking is set to PickType.ALL, the layer MUST have this method implemented; otherwise, the layer is incompatible with this picking mode.');\n    };\n    /**\n     * The type of Three model as well as the preferred draw mode associated with it.\n     */\n    Layer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TrianglesDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    /**\n     * The options for a three material without uniforms.\n     */\n    Layer.prototype.getMaterialOptions = function () {\n        return {};\n    };\n    /**\n     * This sets up all of the data bindings that will transport data from the CPU\n     * to the Shader on the GPU.\n     *\n     * Instance Attributes: These are very frequently changing attributes\n     * Vertex Attributes: These are attributes that should be static on a vertex. Conisder it very costly to update.\n     *                    The only time making these modifieable is in the event of GL_POINTS.\n     * Uniforms: These set up the uniforms for the layer, thus having all normal implications of a uniform. Global\n     *           across the fragment and vertex shaders and can be modified with little consequence.\n     */\n    Layer.prototype.initShader = function () {\n        return {\n            fs: require('../shaders/base/no-op.fs'),\n            instanceAttributes: [],\n            uniforms: [],\n            vertexAttributes: [],\n            vertexCount: 0,\n            vs: require('../shaders/base/no-op.vs'),\n        };\n    };\n    /**\n     * Helper method for making an instance attribute. Depending on set up, this makes creating elements\n     * have better documentation when typing out the elements.\n     */\n    Layer.prototype.makeInstanceAttribute = function (block, blockIndex, name, size, update, atlas) {\n        return {\n            atlas: atlas,\n            block: block,\n            blockIndex: blockIndex,\n            name: name,\n            size: size,\n            update: update,\n        };\n    };\n    /**\n     * Helper method for making a uniform type. Depending on set up, this makes creating elements\n     * have better documentation when typing out the elements.\n     */\n    Layer.prototype.makeUniform = function (name, size, update, shaderInjection, qualifier) {\n        return {\n            name: name,\n            qualifier: qualifier,\n            shaderInjection: shaderInjection,\n            size: size,\n            update: update,\n        };\n    };\n    Layer.prototype.willUpdateInstances = function (changes) {\n        // HOOK: Simple hook so a class can review all of it's changed instances before\n        //       Getting applied to the Shader IO\n    };\n    Layer.prototype.willUpdateProps = function (newProps) {\n        /** LIFECYCLE */\n    };\n    Layer.prototype.didUpdate = function () {\n        this.props.data.resolve();\n    };\n    Layer.defaultProps = {};\n    return Layer;\n}(identify_by_key_1.IdentifyByKey));\nexports.Layer = Layer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./bounds\"));\n__export(require(\"./point\"));\n","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_provider_1 = require(\"../instance-provider\");\nvar instanceUID = 0;\nvar Instance = /** @class */ (function () {\n    function Instance(options) {\n        /** A numerical look up for the instance. Numerical identifiers run faster than objects or strings */\n        this._uid = instanceUID++;\n        this._id = options.id;\n        this.active = options.active;\n    }\n    /**\n     * The system will call this on the instance when it believes the instance may be\n     * harboring resources that are not released.\n     */\n    Instance.prototype.destroy = function () {\n        // Generally a No-op\n    };\n    Object.defineProperty(Instance.prototype, \"id\", {\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Instance.prototype, \"uid\", {\n        get: function () {\n            return this._uid;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        instance_provider_1.observable\n    ], Instance.prototype, \"active\", void 0);\n    return Instance;\n}());\nexports.Instance = Instance;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./chart-camera\"));\n__export(require(\"./data-provider\"));\n__export(require(\"./instance\"));\n__export(require(\"./reference-camera\"));\n__export(require(\"./shader-templating\"));\n__export(require(\"./tracked-quad-tree\"));\n__export(require(\"./vector\"));\n__export(require(\"./view-camera\"));\n__export(require(\"./webgl-stat\"));\n__export(require(\"./mouse\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./atlas\"));\n__export(require(\"./atlas-manager\"));\n__export(require(\"./color-atlas-resource\"));\n__export(require(\"./color-rasterizer\"));\n__export(require(\"./image-atlas-resource\"));\n__export(require(\"./image-rasterizer\"));\n__export(require(\"./label-atlas-resource\"));\n__export(require(\"./label-rasterizer\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This is an object that specifically is generated with a 'key' option that can never\n * be modified on the object and is identified henceforth with the key applied as the\n * 'id' of the object.\n */\nvar IdentifyByKey = /** @class */ (function () {\n    function IdentifyByKey(options) {\n        this.key = options.key;\n    }\n    Object.defineProperty(IdentifyByKey.prototype, \"id\", {\n        /** READONLY id of the object. */\n        get: function () {\n            return this.key;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IdentifyByKey;\n}());\nexports.IdentifyByKey = IdentifyByKey;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isMesh(val) {\n    return Boolean(val.isMesh);\n}\nfunction generateLayerModel(layer, geometry, material) {\n    var modelInfo = layer.getModelType();\n    var model = new modelInfo.modelType(geometry, material);\n    if (isMesh(model)) {\n        model.drawMode = modelInfo.drawMode;\n    }\n    return model;\n}\nexports.generateLayerModel = generateLayerModel;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar absolute_position_1 = require(\"../primitives/absolute-position\");\nvar bounds_1 = require(\"../primitives/bounds\");\nvar identify_by_key_1 = require(\"../util/identify-by-key\");\nvar view_camera_1 = require(\"../util/view-camera\");\nvar ClearFlags;\n(function (ClearFlags) {\n    ClearFlags[ClearFlags[\"COLOR\"] = 1] = \"COLOR\";\n    ClearFlags[ClearFlags[\"DEPTH\"] = 2] = \"DEPTH\";\n    ClearFlags[ClearFlags[\"STENCIL\"] = 4] = \"STENCIL\";\n})(ClearFlags = exports.ClearFlags || (exports.ClearFlags = {}));\nfunction isOrthographic(val) {\n    return 'left' in val;\n}\n/**\n * This defines a view of a scene\n */\nvar View = /** @class */ (function (_super) {\n    __extends(View, _super);\n    function View(options) {\n        var _this = _super.call(this, options) || this;\n        /**\n         * This is the depth of the view. The higher the depth represents which layer is on top.\n         * Zero always represents the default view.\n         */\n        _this.depth = 0;\n        /** This is set to ensure the projections that happen properly translates the pixel ratio to normal Web coordinates */\n        _this.pixelRatio = window.devicePixelRatio;\n        Object.assign(_this, options);\n        return _this;\n    }\n    View.prototype.screenToPixelSpace = function (point, out) {\n        var p = out || { x: 0, y: 0 };\n        p.x = point.x * this.pixelRatio;\n        p.y = point.y * this.pixelRatio;\n        return p;\n    };\n    View.prototype.pixelSpaceToScreen = function (point, out) {\n        var p = out || { x: 0, y: 0 };\n        p.x = point.x / this.pixelRatio;\n        p.y = point.y / this.pixelRatio;\n        return p;\n    };\n    View.prototype.screenToView = function (point, out) {\n        var p = this.screenToPixelSpace(point, out);\n        p.x = p.x - this.viewBounds.x;\n        p.y = p.y - this.viewBounds.y;\n        return p;\n    };\n    View.prototype.viewToScreen = function (point, out) {\n        var p = { x: 0, y: 0 };\n        p.x = point.x + this.viewBounds.x;\n        p.y = point.y + this.viewBounds.y;\n        return this.pixelSpaceToScreen(p, out);\n    };\n    View.prototype.screenToWorld = function (point, out) {\n        var view = this.pixelSpaceToScreen(this.screenToView(point));\n        var world = out || { x: 0, y: 0 };\n        world.x = (view.x - (this.camera.offset[0] * this.camera.scale[0])) / this.camera.scale[0];\n        world.y = (view.y - (this.camera.offset[1] * this.camera.scale[1])) / this.camera.scale[1];\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        return world;\n    };\n    View.prototype.worldToScreen = function (point, out) {\n        var screen = { x: 0, y: 0 };\n        // Calculate from the camera to view space\n        screen.x = ((point.x * this.camera.scale[0]) + (this.camera.offset[0] * this.camera.scale[0])) * this.pixelRatio;\n        screen.y = ((point.y * this.camera.scale[1]) + (this.camera.offset[1] * this.camera.scale[1])) * this.pixelRatio;\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        // Convert from view to screen space\n        return this.viewToScreen(screen, out);\n    };\n    View.prototype.viewToWorld = function (point, out) {\n        var world = out || { x: 0, y: 0 };\n        var screen = this.pixelSpaceToScreen(point);\n        world.x = (screen.x - (this.camera.offset[0] * this.camera.scale[0])) / this.camera.scale[0];\n        world.y = (screen.y - (this.camera.offset[1] * this.camera.scale[1])) / this.camera.scale[1];\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        return world;\n    };\n    View.prototype.worldToView = function (point, out) {\n        var screen = out || { x: 0, y: 0 };\n        // Calculate from the camera to view space\n        screen.x = (point.x * this.camera.scale[0]) + (this.camera.offset[0] * this.camera.scale[0]);\n        screen.y = (point.y * this.camera.scale[1]) + (this.camera.offset[1] * this.camera.scale[1]);\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        return screen;\n    };\n    /**\n     * This operation makes sure we have the view camera adjusted to the new viewport's needs.\n     * For default behavior this ensures that the coordinate system has no distortion, orthographic,\n     * top left as 0,0 with +y axis pointing down.\n     */\n    View.prototype.fitViewtoViewport = function (surfaceDimensions) {\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CONTROLLED && isOrthographic(this.viewCamera.baseCamera)) {\n            var viewBounds = absolute_position_1.getAbsolutePositionBounds(this.viewport, surfaceDimensions, this.pixelRatio);\n            var width = viewBounds.width;\n            var height = viewBounds.height;\n            var viewport = {\n                bottom: -height / 2,\n                far: 10000000,\n                left: -width / 2,\n                near: -100,\n                right: width / 2,\n                top: height / 2,\n            };\n            var scaleX = 1;\n            var scaleY = 1;\n            var camera = this.viewCamera.baseCamera;\n            Object.assign(camera, viewport);\n            camera.position.set(-viewBounds.width / 2.0 * scaleX, viewBounds.height / 2.0 * scaleY, camera.position.z);\n            camera.scale.set(scaleX, -scaleY, 1.0);\n            camera.updateMatrix();\n            camera.updateMatrixWorld(true);\n            camera.updateProjectionMatrix();\n            this.viewBounds = viewBounds;\n            this.viewBounds.data = this;\n            this.screenBounds = new bounds_1.Bounds({\n                height: this.viewBounds.height / this.pixelRatio,\n                width: this.viewBounds.width / this.pixelRatio,\n                x: this.viewBounds.x / this.pixelRatio,\n                y: this.viewBounds.y / this.pixelRatio,\n            });\n        }\n        else if (!isOrthographic(this.viewCamera.baseCamera)) {\n            console.warn('Fit to viewport does not support non-orthographic cameras as a default behavior.');\n        }\n    };\n    View.DEFAULT_VIEW_ID = '__default__';\n    return View;\n}(identify_by_key_1.IdentifyByKey));\nexports.View = View;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar identify_by_key_1 = require(\"../util/identify-by-key\");\nfunction sortByDepth(a, b) {\n    return a.depth - b.depth;\n}\n/**\n * This defines a scene to which layers are added to. It also tracks the views that this scene\n * is rendered with.\n */\nvar Scene = /** @class */ (function (_super) {\n    __extends(Scene, _super);\n    function Scene(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the three scene which actually sets up the rendering objects */\n        _this.container = new Three.Scene();\n        /** This is all of the layers tracked to the scene */\n        _this.layers = [];\n        /** This indicates the sort is dirty for a set of layers */\n        _this.sortIsDirty = false;\n        /** This is the view */\n        _this.viewById = new Map();\n        _this.container.frustumCulled = false;\n        _this.container.autoUpdate = false;\n        return _this;\n    }\n    /**\n     * Adds a layer to the scene with the current view setting the layer contains.\n     * The layer can not jump between views or scenes. You must destroy and reconstruct\n     * the layer.\n     */\n    Scene.prototype.addLayer = function (layer) {\n        // Add the layer to the list of layers under the view\n        this.layers.push(layer);\n        this.sortIsDirty = true;\n    };\n    /**\n     * This adds a view to this scene to be used by the scene\n     */\n    Scene.prototype.addView = function (view) {\n        this.viewById.set(view.id, view);\n    };\n    /**\n     * Release any resources this may be hanging onto\n     */\n    Scene.prototype.destroy = function () {\n        this.container = null;\n    };\n    /**\n     * Removes a layer from the scene. No resort is needed as remove operations\n     * do not adjust the sorting order.\n     */\n    Scene.prototype.removeLayer = function (layer) {\n        if (this.layers) {\n            var index = this.layers.indexOf(layer);\n            if (index >= 0) {\n                this.layers.splice(index, 1);\n                return;\n            }\n        }\n        console.warn('Could not remove a layer from the scene as the layer was not a part of the scene to start. Scene:', this.id, 'Layer:', layer.id);\n    };\n    Scene.prototype.sortLayers = function () {\n        if (this.sortIsDirty) {\n            this.layers.sort(sortByDepth);\n        }\n    };\n    Scene.DEFAULT_SCENE_ID = '__default__';\n    return Scene;\n}(identify_by_key_1.IdentifyByKey));\nexports.Scene = Scene;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_atlas_resource_1 = require(\"./base-atlas-resource\");\nvar LabelAtlasResource = /** @class */ (function (_super) {\n    __extends(LabelAtlasResource, _super);\n    function LabelAtlasResource(label) {\n        var _this = _super.call(this) || this;\n        _this.label = label;\n        return _this;\n    }\n    return LabelAtlasResource;\n}(base_atlas_resource_1.BaseAtlasResource));\nexports.LabelAtlasResource = LabelAtlasResource;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BaseAtlasResource = /** @class */ (function () {\n    function BaseAtlasResource() {\n        /**\n         * This sets the ratserization to be a larger value on the texture than is rendered within\n         * the world space. This allows for techniques to be applied in the shaders to incorporate super sampling\n         * or other processes which require higher levels of resolution.\n         *\n         * The default is 1 for a 1 to 1 sample scaling to world space rendering\n         */\n        this.sampleScale = 1;\n    }\n    return BaseAtlasResource;\n}());\nexports.BaseAtlasResource = BaseAtlasResource;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EdgeScaleType;\n(function (EdgeScaleType) {\n    /** All dimensions are within world space */\n    EdgeScaleType[EdgeScaleType[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * The control points are a delta from the end points within screen space, and the line thickness is within\n     * screen space as well all measured in pixels. The scaleFactor scales both thickness and control delta values.\n     * The endpoints remain in world space\n     */\n    EdgeScaleType[EdgeScaleType[\"SCREEN_CURVE\"] = 1] = \"SCREEN_CURVE\";\n})(EdgeScaleType = exports.EdgeScaleType || (exports.EdgeScaleType = {}));\nvar EdgeType;\n(function (EdgeType) {\n    /** Makes a straight edge with no curve */\n    EdgeType[EdgeType[\"LINE\"] = 0] = \"LINE\";\n    /** Makes a single control point Bezier curve */\n    EdgeType[EdgeType[\"BEZIER\"] = 1] = \"BEZIER\";\n    /** Makes a two control point bezier curve */\n    EdgeType[EdgeType[\"BEZIER2\"] = 2] = \"BEZIER2\";\n})(EdgeType = exports.EdgeType || (exports.EdgeType = {}));\n/**\n * This is the broadphase control for edges to help handle quad tree adjustments for picking. If the edge scale type\n * is NONE, you don't need to utilize this. If you use screen space and have camera distortions along an axis, this\n * can help greatly.\n */\nvar EdgeBroadphase;\n(function (EdgeBroadphase) {\n    /** Use this if the broad phase detection should use both width and height of the edge's bounds */\n    EdgeBroadphase[EdgeBroadphase[\"ALL\"] = 0] = \"ALL\";\n    /** Use this to ensure a test against the edge is performed if the mouse aligns with it on the x-axis */\n    EdgeBroadphase[EdgeBroadphase[\"PASS_Y\"] = 1] = \"PASS_Y\";\n    /** Use this to ensure a test against the edge is performed if the mouse aligns with it on the y axis */\n    EdgeBroadphase[EdgeBroadphase[\"PASS_X\"] = 2] = \"PASS_X\";\n})(EdgeBroadphase = exports.EdgeBroadphase || (exports.EdgeBroadphase = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ViewCameraType;\n(function (ViewCameraType) {\n    /**\n     * Indicates a camera that is forced by the system to follow:\n     * - Match width and height of the view port\n     * - +y axis points downward\n     * - gl origin is at the top left of the screen\n     */\n    ViewCameraType[ViewCameraType[\"CONTROLLED\"] = 0] = \"CONTROLLED\";\n    /**\n     * This allows a custom view camera to be applied to the scene.\n     */\n    ViewCameraType[ViewCameraType[\"CUSTOM\"] = 1] = \"CUSTOM\";\n})(ViewCameraType = exports.ViewCameraType || (exports.ViewCameraType = {}));\n/**\n * This is a camera that controls the view projection matrix. This is a much more\n * complicated way to handle views that is better suited for handling 3D applications\n * and is very overkill for most 2D charting systems. If you are working purely with\n * 2D components, it's recommended to leave this as a CONTROLLED camera and utilize\n * the ChartCamera for most of your needs.\n */\nvar ViewCamera = /** @class */ (function () {\n    function ViewCamera() {\n        this.type = ViewCameraType.CONTROLLED;\n    }\n    return ViewCamera;\n}());\nexports.ViewCamera = ViewCamera;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction shaderTemplate(shader, options, required) {\n    var matched = new Map();\n    var noValueProvided = new Map();\n    var notFound = new Map();\n    var shaderOptions = new Map();\n    var shaderResults = shader.replace(/\\$\\{(\\w+)\\}/g, function (x, match) {\n        shaderOptions.set(match, (shaderOptions.get(match) || 0) + 1);\n        if (match in options) {\n            matched.set(match, (matched.get(match) || 0) + 1);\n            return options[match];\n        }\n        noValueProvided.set(match, (noValueProvided.get(match) || 0) + 1);\n        return '';\n    });\n    Object.keys(options).forEach(function (option) {\n        if (!matched.get(option)) {\n            notFound.set(option, (notFound.get(option) || 0) + 1);\n        }\n    });\n    // Provide metrics\n    var results = {\n        resolvedShaderOptions: matched,\n        shader: shaderResults,\n        shaderProvidedOptions: shaderOptions,\n        unresolvedProvidedOptions: notFound,\n        unresolvedShaderOptions: noValueProvided,\n    };\n    if (required) {\n        // This will ensure that BOTH the parameter input AND the shader provided the required options.\n        required.values.forEach(function (require) {\n            if (results.unresolvedProvidedOptions.get(require)) {\n                console.error(required.name + \": Could not resolve all the required inputs. Input:\", require);\n            }\n            else if (results.unresolvedShaderOptions.get(require)) {\n                console.error(required.name + \": A required option was not provided in the options parameter. Option:\", require);\n            }\n            else if (!results.resolvedShaderOptions.get(require)) {\n                console.error(required.name + \": A required option was not provided in the options parameter. Option:\", require);\n            }\n        });\n    }\n    return results;\n}\nexports.shaderTemplate = shaderTemplate;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chartCameraUID = 0;\n/**\n * Quick method for applying a source array to a target array. This\n * ensures the arrays both are valid and applies the values without just making\n * a copy of the source.\n */\nfunction applyArray(target, source) {\n    target && source && target.splice.apply(target, [0, source.length].concat(source));\n}\nvar ChartCamera = /** @class */ (function () {\n    function ChartCamera(options) {\n        /** Internally set id */\n        this._id = chartCameraUID++;\n        /** Represents how much an element should be offset in world space */\n        this.offset = [0, 0, 0];\n        /** Represents how scaled each axis should be in world space */\n        this.scale = [1, 1, 1];\n        if (options) {\n            applyArray(this.offset, options.offset);\n            applyArray(this.scale, options.scale);\n        }\n    }\n    Object.defineProperty(ChartCamera.prototype, \"id\", {\n        /** Keep id as readonly */\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the location of the camera by adjusting the offsets to match.\n     */\n    ChartCamera.prototype.position = function (location) {\n        this.offset = location.slice(0);\n    };\n    return ChartCamera;\n}());\nexports.ChartCamera = ChartCamera;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Classes can extend this and override the methods to respond to events.\n */\nvar EventManager = /** @class */ (function () {\n    function EventManager() {\n    }\n    /**\n     * This retrieves the projections for the view specified by the provided viewId.\n     */\n    EventManager.prototype.getProjection = function (viewId) {\n        return this.mouseManager.getView(viewId);\n    };\n    /**\n     * This retrieves the actual view for the view specified by the provided viewId.\n     */\n    EventManager.prototype.getView = function (viewId) {\n        return (this.mouseManager && this.mouseManager.getView(viewId)) || null;\n    };\n    /**\n     * This retrieves the screen bounds for the view specified by the provided viewId.\n     */\n    EventManager.prototype.getViewScreenBounds = function (viewId) {\n        var view = this.mouseManager.getView(viewId);\n        if (view) {\n            return view.screenBounds;\n        }\n        return null;\n    };\n    /**\n     * This is used internally which provides the parent MouseEventManager via the param mouseManager for this\n     * EventManager.\n     */\n    EventManager.prototype.setMouseManager = function (mouseManager) {\n        this.mouseManager = mouseManager;\n    };\n    return EventManager;\n}());\nexports.EventManager = EventManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mouse_1 = require(\"../util/mouse\");\nvar quad_tree_1 = require(\"../util/quad-tree\");\n// If a mouse up after a mouse down happens before this many milliseconds, a click gesture will happen\nvar VALID_CLICK_DELAY = 1E3;\nfunction sortByDepth(a, b) {\n    return b.data.depth - a.data.depth;\n}\n/**\n * This manages mouse events on the provided canvas and provides some higher level\n * interactions with the surface.\n */\nvar MouseEventManager = /** @class */ (function () {\n    function MouseEventManager(canvas, views, controllers, handlesWheelEvents) {\n        var _this = this;\n        /**\n         * This flag is set when the system is waiting to render the elements to establish bounds.\n         * No Mouse interations will happen while this is set to true.\n         */\n        this._waitingForRender = true;\n        /**\n         * Retrieves the views underneath the mouse with the top most view as\n         * the first view in the list.\n         */\n        this.getViewsUnderMouse = function (mouse) {\n            // Find the views the mouse has interacted with\n            var hitViews = _this.quadTree.query(mouse);\n            // Sort them by depth\n            hitViews.sort(sortByDepth);\n            return hitViews;\n        };\n        /**\n         * When the renderer is resized, we must reform our quad tree\n         */\n        this.resize = function () {\n            _this._waitingForRender = true;\n        };\n        this.context = canvas;\n        this.setViews(views);\n        this.setControllers(controllers);\n        this.addContextListeners(handlesWheelEvents);\n    }\n    Object.defineProperty(MouseEventManager.prototype, \"waitingForRender\", {\n        get: function () {\n            return this._waitingForRender;\n        },\n        set: function (val) {\n            this._waitingForRender = val;\n            // When we're no longer waiting for render to occur we update all of our views in the quad tree\n            if (!val) {\n                this.quadTree = new quad_tree_1.QuadTree(0, 0, 0, 0);\n                this.quadTree.addAll(this.views.map(function (v) { return v.bounds; }).filter(Boolean));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This sets up the DOM events to listen to the events that are broadcasted by the canvas.\n     * These events are set up in such a way as to continue some events when the user\n     * drags the mouse off of the browser or off the canvas without releasing.\n     */\n    MouseEventManager.prototype.addContextListeners = function (handlesWheelEvents) {\n        var _this = this;\n        var element = this.context;\n        var startView = null;\n        var startPosition = null;\n        if (handlesWheelEvents) {\n            element.onmousewheel = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                var wheel = _this.makeWheel(event);\n                _this.controllers.forEach(function (controller) {\n                    controller.handleWheel(interaction, wheel);\n                });\n                event.stopPropagation();\n                event.preventDefault();\n            };\n        }\n        element.onmouseleave = function (event) {\n            // No interactions while waiting for the render to update\n            if (_this.waitingForRender)\n                return;\n            var mouse = mouse_1.eventElementPosition(event, element);\n            var interaction = _this.makeInteraction(mouse, startPosition, startView);\n            _this.controllers.forEach(function (controller) {\n                controller.handleMouseOut(interaction);\n            });\n        };\n        element.onmousemove = function (event) {\n            // No interactions while waiting for the render to update\n            if (_this.waitingForRender)\n                return;\n            var mouse = mouse_1.eventElementPosition(event, element);\n            var interaction = _this.makeInteraction(mouse, startPosition, startView);\n            _this.controllers.forEach(function (controller) {\n                controller.handleMouseMove(interaction);\n            });\n        };\n        element.onmousedown = function (event) {\n            // No interactions while waiting for the render to update\n            if (_this.waitingForRender)\n                return;\n            startPosition = mouse_1.eventElementPosition(event, element);\n            var downViews = _this.getViewsUnderMouse(startPosition);\n            // While this is true, when mouse up happens, the click gesture will execute\n            var canClick = true;\n            var clickStartTime = Date.now();\n            // If no views under this view, then we just quick exit with no interactions\n            if (downViews.length <= 0) {\n                return;\n            }\n            startView = downViews[0].data;\n            var interaction = _this.makeInteraction(startPosition, startPosition, startView);\n            var currentPosition = startPosition;\n            _this.controllers.forEach(function (controller) {\n                controller.handleMouseDown(interaction, event.button);\n            });\n            event.stopPropagation();\n            document.onmousemove = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                var delta = {\n                    x: mouse.x - currentPosition.x,\n                    y: mouse.y - currentPosition.y,\n                };\n                var drag = _this.makeDrag(mouse, startPosition, currentPosition, delta);\n                currentPosition = mouse;\n                _this.controllers.forEach(function (controller) {\n                    controller.handleDrag(interaction, drag);\n                });\n                // If we move after a mouse down, it's no longer a click\n                canClick = false;\n            };\n            document.onmouseup = function (event) {\n                document.onmousemove = null;\n                document.onmouseup = null;\n                document.onmouseover = null;\n            };\n            document.onmouseover = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                _this.controllers.forEach(function (controller) {\n                    controller.handleMouseOver(interaction);\n                });\n                event.stopPropagation();\n            };\n            element.onmouseup = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                _this.controllers.forEach(function (controller) {\n                    controller.handleMouseUp(interaction, event.button);\n                });\n                // If we release the mouse before the valid click delay\n                if (canClick && Date.now() - clickStartTime < VALID_CLICK_DELAY) {\n                    _this.controllers.forEach(function (controller) {\n                        controller.handleClick(interaction, event.button);\n                    });\n                }\n            };\n            // Text will not be selected when it is being dragged\n            element.onselectstart = function () {\n                return false;\n            };\n        };\n        // Enable touch support\n        this.addTouchContextListeners();\n    };\n    MouseEventManager.prototype.addTouchContextListeners = function () {\n        var element = this.context;\n        element.ontouchstart = function (event) {\n            // TODO: This is the start work for the touch events. And this retains sentimental value.\n            // For (let i = 0, end = event.changedTouches.length; i < end; ++i) {\n            // TODO\n            // Const touch = event.changedTouches.item(i);\n            // CurrentTouches.set(touch.identifier, to);\n            // }\n        };\n        element.ontouchend = function (event) {\n            // TODO\n        };\n        element.ontouchmove = function (event) {\n            // TODO\n        };\n        element.ontouchcancel = function (event) {\n            // TODO\n        };\n    };\n    /**\n     * Retrieves the view for the provided id\n     */\n    MouseEventManager.prototype.getView = function (viewId) {\n        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n            var view = _a[_i];\n            if (view.view.id === viewId) {\n                return view.view;\n            }\n        }\n        return null;\n    };\n    /**\n     * This generates the metrics for a drag gesture.\n     */\n    MouseEventManager.prototype.makeDrag = function (mouse, start, previous, delta) {\n        return {\n            screen: {\n                current: mouse,\n                delta: delta,\n                previous: previous,\n                start: start,\n            },\n        };\n    };\n    /**\n     * This makes the metrics for interactions with the views.\n     */\n    MouseEventManager.prototype.makeInteraction = function (mouse, start, startView) {\n        // Find the views the mouse has interacted with\n        var hitViews = this.getViewsUnderMouse(mouse);\n        return {\n            screen: {\n                mouse: mouse,\n            },\n            start: start && startView && {\n                mouse: startView.view.screenToView(mouse),\n                view: startView.view,\n            },\n            target: {\n                mouse: hitViews[0] && hitViews[0].data.view.screenToView(mouse),\n                view: hitViews[0] && hitViews[0].data.view,\n            },\n            viewsUnderMouse: hitViews.map(function (v) { return ({\n                mouse: v.data.view.screenToView(mouse),\n                view: v.data.view,\n            }); }),\n        };\n    };\n    MouseEventManager.prototype.makeWheel = function (event) {\n        var wheel = mouse_1.normalizeWheel(event);\n        return {\n            wheel: [wheel.x, wheel.y],\n        };\n    };\n    /**\n     * Sets the controllers to receive events from this manager.\n     */\n    MouseEventManager.prototype.setControllers = function (controllers) {\n        this.controllers = controllers;\n        for (var _i = 0, _a = this.controllers; _i < _a.length; _i++) {\n            var controller = _a[_i];\n            controller.setMouseManager(this);\n        }\n    };\n    /**\n     * Sets the views that gets queried for interactions.\n     */\n    MouseEventManager.prototype.setViews = function (views) {\n        this.views = views;\n    };\n    MouseEventManager.prototype.destroy = function () {\n        this.quadTree = null;\n        this.context.onmousedown = null;\n        this.context.onmousemove = null;\n        this.context.onmouseleave = null;\n        this.context.onmousewheel = null;\n    };\n    return MouseEventManager;\n}());\nexports.MouseEventManager = MouseEventManager;\n","\"use strict\";\n/**\n * This file is dedicted to the all important step of processing desired inputs from the layer\n * and coming up with automated generated uniforms and attributes that the shader's will need\n * in order to operate with the conveniences the library offers. This includes things such as\n * injecting camera projection uniforms, resource uniforms, animation adjustments etc etc.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\nfunction toVertexAttributeInternal(attribute) {\n    return Object.assign({}, attribute, { materialAttribute: null });\n}\nfunction toUniformInternal(uniform) {\n    return Object.assign({}, uniform, { materialUniforms: [] });\n}\n/**\n * This searches through attribute packing for the first empty slot it can find to fill.\n * If a slot is not available it will just start a new block.\n */\nfunction findEmptyBlock(attributes) {\n    var blocks = new Map();\n    var found = null;\n    var maxBlock = 0;\n    attributes.forEach(function (instanceAttribute) {\n        var block = instanceAttribute.block;\n        var index = instanceAttribute.blockIndex;\n        var size = instanceAttribute.size;\n        var usedBlocks = blocks.get(block);\n        maxBlock = Math.max(block, maxBlock);\n        if (!usedBlocks) {\n            usedBlocks = new Map();\n            blocks.set(block, usedBlocks);\n        }\n        for (var i = index, end = index + size; i < end; ++i) {\n            usedBlocks.set(i, true);\n        }\n    });\n    blocks.forEach(function (usedBlocks, block) {\n        if (!usedBlocks.get(1))\n            found = [block, types_1.InstanceBlockIndex.ONE];\n        if (!usedBlocks.get(2))\n            found = [block, types_1.InstanceBlockIndex.TWO];\n        if (!usedBlocks.get(3))\n            found = [block, types_1.InstanceBlockIndex.THREE];\n        if (!usedBlocks.get(4))\n            found = [block, types_1.InstanceBlockIndex.FOUR];\n    });\n    // If no block was ever found, then we take the max block detected and make\n    // A new block after it\n    if (!found) {\n        found = [maxBlock + 1, 0];\n    }\n    return found;\n}\nfunction sortByResourceAttributes(a, b) {\n    if (a.atlas && !b.atlas)\n        return -1;\n    return 1;\n}\nfunction injectShaderIO(layer, shaderIO) {\n    // Retrieve all of the instance attributes that are atlas references\n    var atlasInstanceAttributes = [];\n    // Key: The atlas uniform name requested\n    var requestedAtlasInjections = new Map();\n    // Get the atlas requests that have unique names. We only need one uniform\n    // For a single unique provided name. We also must merge the requests for\n    // Vertex and fragment injections\n    shaderIO.instanceAttributes.forEach(function (attribute) {\n        if (attribute.atlas) {\n            // Auto set the size of the attribute. Attribute's that are a resource automatically\n            // Consume a size of four\n            attribute.size = types_1.InstanceAttributeSize.FOUR;\n            attribute.blockIndex = types_1.InstanceBlockIndex.ONE;\n            // Get the atlas resource uniform (sampler2D) injection targets. We default to only the\n            // Fragment shader as it's the most commonly used location for sampler2Ds\n            var injection = attribute.atlas.shaderInjection || types_1.ShaderInjectionTarget.FRAGMENT;\n            // See if we already have an injection for the given injected uniform name for an atlas resource.\n            var injections = requestedAtlasInjections.get(attribute.atlas.name);\n            if (injections) {\n                requestedAtlasInjections.set(attribute.atlas.name, [\n                    injections[0] ||\n                        injection === types_1.ShaderInjectionTarget.VERTEX ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                    injections[1] ||\n                        injection === types_1.ShaderInjectionTarget.FRAGMENT ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                ]);\n            }\n            else {\n                atlasInstanceAttributes.push(attribute);\n                requestedAtlasInjections.set(attribute.atlas.name, [\n                    injection === types_1.ShaderInjectionTarget.VERTEX ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                    injection === types_1.ShaderInjectionTarget.FRAGMENT ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                ]);\n            }\n        }\n    });\n    // Make uniforms for all of the unique atlas requests.\n    var atlasUniforms = atlasInstanceAttributes.map(function (instanceAttribute) {\n        var injections = requestedAtlasInjections.get(instanceAttribute.atlas.name);\n        var injection = (injections[0] && injections[1] && types_1.ShaderInjectionTarget.ALL) ||\n            (injections[0] && !injections[1] && types_1.ShaderInjectionTarget.VERTEX) ||\n            (!injections[0] && injections[1] && types_1.ShaderInjectionTarget.FRAGMENT);\n        return {\n            name: instanceAttribute.atlas.name,\n            shaderInjection: injection,\n            size: types_1.UniformSize.ATLAS,\n            update: function () { return layer.resource.getAtlasTexture(instanceAttribute.atlas.key); },\n        };\n    });\n    // These are the uniforms that should be present in the shader for basic operation\n    var addedUniforms = atlasUniforms.concat([\n        // This injects the projection matrix from the view camera\n        {\n            name: 'projection',\n            size: types_1.UniformSize.MATRIX4,\n            update: function () { return layer.view.viewCamera.baseCamera.projectionMatrix.elements; },\n        },\n        // This injects the model view matrix from the view camera\n        {\n            name: 'modelView',\n            size: types_1.UniformSize.MATRIX4,\n            update: function () { return layer.view.viewCamera.baseCamera.matrix.elements; },\n        },\n        // This injects the camera offset uniforms that need to be present for projecting in a more\n        // Chart centric style\n        {\n            name: 'cameraOffset',\n            size: types_1.UniformSize.THREE,\n            update: function () { return layer.view.camera.offset; },\n        },\n        // This injects the camera scaling uniforms that need to be present for projecting in a more\n        // Chart centric style\n        {\n            name: 'cameraScale',\n            size: types_1.UniformSize.THREE,\n            update: function () { return layer.view.camera.scale; },\n        },\n        // This injects the camera scaling uniforms that need to be present for projecting in a more\n        // Chart centric style\n        {\n            name: 'viewSize',\n            size: types_1.UniformSize.TWO,\n            update: function () { return [layer.view.viewBounds.width, layer.view.viewBounds.height]; },\n        },\n        // This injects the current layer's pixel ratio so pixel ratio dependent items can react to it\n        // Things like gl_PointSize will need this metric if not working in clip space\n        {\n            name: 'pixelRatio',\n            size: types_1.UniformSize.ONE,\n            update: function () { return [layer.view.pixelRatio]; },\n        },\n    ]);\n    // Seek an empty block within the layer provided uniforms so we can fill a hole potentially\n    // With the _active attribute.\n    var fillBlock = findEmptyBlock(shaderIO.instanceAttributes);\n    var addedInstanceAttributes = [\n        // This is injected so the system can control when an instance should not be rendered.\n        // This allows for holes to be in the buffer without having to correct them immediately\n        {\n            block: fillBlock[0],\n            blockIndex: fillBlock[1],\n            name: '_active',\n            size: types_1.InstanceAttributeSize.ONE,\n            update: function (o) { return [o.active ? 1 : 0]; },\n        },\n    ];\n    // Set the active attribute to the layer for quick reference\n    layer.activeAttribute = addedInstanceAttributes[0];\n    var addedVertexAttributes = [\n        // We add an inherent instance attribute to our vertices so they can determine the instancing\n        // Data to retrieve.\n        {\n            name: 'instance',\n            size: types_1.VertexAttributeSize.ONE,\n            // We no op this as our geomtry generating routine will establish the values needed here\n            update: function () { return [0]; },\n        },\n    ];\n    // Aggregate all of the injected shaderIO with the layer's shaderIO\n    var vertexAttributes = addedVertexAttributes\n        .concat(shaderIO.vertexAttributes)\n        .map(toVertexAttributeInternal);\n    var uniforms = addedUniforms\n        .concat(shaderIO.uniforms)\n        .map(toUniformInternal);\n    var instanceAttributes = addedInstanceAttributes\n        .concat(shaderIO.instanceAttributes)\n        .sort(sortByResourceAttributes);\n    return {\n        instanceAttributes: instanceAttributes,\n        uniforms: uniforms,\n        vertexAttributes: vertexAttributes,\n    };\n}\nexports.injectShaderIO = injectShaderIO;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar types_1 = require(\"../types\");\nvar UNIFORM_SIZE_TO_MATERIAL_TYPE = (_a = {},\n    _a[types_1.UniformSize.ONE] = 'f',\n    _a[types_1.UniformSize.TWO] = 'v2',\n    _a[types_1.UniformSize.THREE] = 'v3',\n    _a[types_1.UniformSize.FOUR] = 'v4',\n    _a[types_1.UniformSize.MATRIX3] = 'Matrix3fv',\n    _a[types_1.UniformSize.MATRIX4] = 'Matrix4fv',\n    _a);\nvar DEFAULT_UNIFORM_VALUE = (_b = {},\n    _b[types_1.UniformSize.ONE] = [0],\n    _b[types_1.UniformSize.TWO] = [0, 0],\n    _b[types_1.UniformSize.THREE] = [0, 0, 0],\n    _b[types_1.UniformSize.FOUR] = [0, 0, 0, 0],\n    _b[types_1.UniformSize.MATRIX3] = [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    _b[types_1.UniformSize.MATRIX4] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    _b);\nfunction toMaterialUniform(uniform) {\n    return {\n        type: UNIFORM_SIZE_TO_MATERIAL_TYPE[uniform.size],\n        value: DEFAULT_UNIFORM_VALUE[uniform.size],\n    };\n}\nfunction generateLayerMaterial(layer, vs, fs, layerUniforms, instancingUniforms) {\n    // We now need to establish the material for the layer\n    var materialParams = layer.getMaterialOptions();\n    materialParams.vertexShader = vs;\n    materialParams.fragmentShader = fs;\n    // We must convert all of the uniforms to actual Three material initialization uniforms\n    materialParams.uniforms = {};\n    // Convert our non-instancing uniforms to our material uniforms\n    for (var i = 0, end = layerUniforms.length; i < end; ++i) {\n        var uniform = layerUniforms[i];\n        var materialUniform = toMaterialUniform(uniform);\n        materialParams.uniforms[uniform.name] = materialUniform;\n    }\n    // Add in the generated instancing uniforms\n    for (var i = 0, end = instancingUniforms.length; i < end; ++i) {\n        var generatedUniform = instancingUniforms[i];\n        materialParams.uniforms[generatedUniform.name] = {\n            type: generatedUniform.type,\n            value: generatedUniform.value,\n        };\n    }\n    return new Three.RawShaderMaterial(materialParams);\n}\nexports.generateLayerMaterial = generateLayerMaterial;\nvar _a, _b;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nfunction isNumberCluster(val) {\n    return !Array.isArray(val[0]);\n}\nfunction generateLayerGeometry(maxInstancesPerBuffer, vertexAttributes, vertexCount) {\n    // Make the new buffers to be updated\n    var vertexBuffers = [];\n    for (var i = 0, end = vertexAttributes.length; i < end; ++i) {\n        var attribute_1 = vertexAttributes[i];\n        vertexBuffers.push(new Float32Array((attribute_1.size) * vertexCount * maxInstancesPerBuffer));\n    }\n    // Let's now fill in the baseline geometry with the instances we will be generating\n    // First we ask the layer for a single instance's buffer setup\n    var endk = vertexAttributes.length;\n    var buffer;\n    var attribute;\n    var value;\n    var formatError;\n    for (var i = 0, end = vertexCount; i < end; ++i) {\n        for (var k = 0; k < endk; ++k) {\n            attribute = vertexAttributes[k];\n            buffer = vertexBuffers[k];\n            value = attribute.update(i);\n            if (isNumberCluster(value)) {\n                for (var j = i * attribute.size, endj = j + attribute.size, index = 0; j < endj; ++j, ++index) {\n                    buffer[j] = value[index];\n                }\n            }\n            else {\n                formatError = true;\n            }\n        }\n    }\n    if (formatError) {\n        console.warn('A vertex buffer updating method should not use arrays of arrays of numbers.');\n    }\n    // After getting the geometry for a single instance, we can now copy paste\n    // For subsequent instances using very fast FLoat32 methods\n    for (var i = 0, end = vertexAttributes.length; i < end; ++i) {\n        var attribute_2 = vertexAttributes[i];\n        var instanceSize = (attribute_2.size) * vertexCount;\n        // Copy the first buffer set into the rest of the buffer\n        for (var k = 1, endk_1 = maxInstancesPerBuffer; k < endk_1; ++k) {\n            vertexBuffers[i].copyWithin(instanceSize * k, 0, instanceSize);\n        }\n    }\n    // Lastly, we make the instance attribute reflect correctly so each instance\n    // Can have varied information\n    var instancingBuffer = vertexBuffers[0];\n    for (var i = 0, end = maxInstancesPerBuffer; i < end; ++i) {\n        var instanceStartIndex = i * vertexCount;\n        for (var k = 0; k < vertexCount; ++k) {\n            instancingBuffer[k + instanceStartIndex] = i;\n        }\n    }\n    // Now we can generate the attributes and apply them to a geometry object\n    var geometry = new Three.BufferGeometry();\n    for (var i = 0, end = vertexAttributes.length; i < end; ++i) {\n        var attribute_3 = vertexAttributes[i];\n        var materialAttribute = new Three.BufferAttribute(vertexBuffers[i], attribute_3.size);\n        attribute_3.materialAttribute = materialAttribute;\n        geometry.addAttribute(attribute_3.name, materialAttribute);\n    }\n    return geometry;\n}\nexports.generateLayerGeometry = generateLayerGeometry;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\nvar DataBounds = /** @class */ (function (_super) {\n    __extends(DataBounds, _super);\n    function DataBounds() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DataBounds.emptyBounds = function () {\n        return new DataBounds({\n            height: 0,\n            width: 0,\n            x: 0,\n            y: 0,\n        });\n    };\n    return DataBounds;\n}(bounds_1.Bounds));\nexports.DataBounds = DataBounds;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar chart_camera_1 = require(\"../util/chart-camera\");\nvar view_camera_1 = require(\"../util/view-camera\");\nvar scene_1 = require(\"./scene\");\nvar view_1 = require(\"./view\");\n/**\n * This generates all of the cameras/views/scenes necessary for default viewing of elements.\n *\n * These defaults are required to ensure the following:\n *\n * - Orthographic view\n * - top left corner of the canvas is 0,0\n * - y axis is +y downward\n * - entire canvas is the viewport.\n */\nfunction generateDefaultScene(context) {\n    // Generate a default view camera that is\n    // - Orthographic\n    // - (0, 0) is the top left of the canvas\n    // - the y axis is +y going downward\n    var height = context.canvas.height;\n    var width = context.canvas.width;\n    var aspectRatio = width / height;\n    var viewport = {\n        aspectRatio: aspectRatio,\n        bottom: -height / 2,\n        far: 10000000,\n        left: -width / 2,\n        near: -100,\n        right: width / 2,\n        top: height / 2,\n        viewSize: height,\n    };\n    var defaultCamera = new view_camera_1.ViewCamera();\n    defaultCamera.baseCamera = new Three.OrthographicCamera(viewport.left, viewport.right, viewport.top, viewport.bottom, viewport.near, viewport.far);\n    defaultCamera.baseCamera.scale.set(1.0, -1.0, 1.0);\n    defaultCamera.baseCamera.position.set(0.0, 0.0, -300.0);\n    defaultCamera.baseCamera.updateMatrixWorld(true);\n    defaultCamera.baseCamera.updateMatrix();\n    if (defaultCamera.baseCamera instanceof Three.OrthographicCamera) {\n        defaultCamera.baseCamera.updateProjectionMatrix();\n    }\n    // Generate a charting camera with all scales set to 1 and no offsets in any direction\n    var defaultChartCamera = new chart_camera_1.ChartCamera();\n    // This is a viewport that covers the entire context\n    var defaultViewport = {\n        bottom: 0,\n        left: 0,\n        right: 0,\n        top: 0,\n    };\n    // Make a view using our defaults\n    var defaultView = new view_1.View({\n        camera: defaultChartCamera,\n        key: view_1.View.DEFAULT_VIEW_ID,\n        viewCamera: defaultCamera,\n        viewport: defaultViewport,\n    });\n    // Make a scene with our defaults\n    var defaultScene = new scene_1.Scene({\n        key: scene_1.Scene.DEFAULT_SCENE_ID,\n        views: [],\n    });\n    // Make sure the default view is a part of the default scene\n    defaultScene.addView(defaultView);\n    return {\n        camera: defaultChartCamera,\n        scene: defaultScene,\n        view: defaultView,\n        viewCamera: defaultCamera,\n        viewport: defaultViewport,\n    };\n}\nexports.generateDefaultScene = generateDefaultScene;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar INSTANCE_UNIFORM_ATTRIBUTE_PREFIX = 'u';\nfunction makeInstanceUniformNameArray() {\n    return \"instanceData\";\n}\nexports.makeInstanceUniformNameArray = makeInstanceUniformNameArray;\nfunction makeInstanceUniformNameTree(index) {\n    return \"\" + INSTANCE_UNIFORM_ATTRIBUTE_PREFIX + index.toString(31);\n}\nexports.makeInstanceUniformNameTree = makeInstanceUniformNameTree;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.templateVars = {\n    attributeFragments: 'attributeFragments',\n    attributes: 'attributes',\n    blocksPerInstance: 'blocksPerInstance',\n    instanceBlockCount: 'instanceBlockCount',\n    instanceDataBinaryTree: 'instanceDataBinaryTree',\n    instanceDataRetrieval: 'instanceDataRetrieval',\n    instanceDestructuring: 'instanceDestructuring',\n    instanceFragments: 'instanceFragments',\n    instanceUniformDeclarations: 'instanceUniformDeclarations',\n    layerUniforms: 'layerUniforms',\n    projectionMethods: 'projectionMethods',\n    shader: 'shader',\n    shaderInput: 'shaderInput',\n    vertexAttributes: 'vertexAttributes',\n};\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./label-layer\"));\n__export(require(\"./label-instance\"));\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar canvas;\nvar MAX_FONT_SIZE = 50;\nvar floor = Math.floor, max = Math.max, min = Math.min;\nvar LabelRasterizer = /** @class */ (function () {\n    function LabelRasterizer() {\n    }\n    /**\n     * This loops until our canvas context is available\n     */\n    LabelRasterizer.awaitContext = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!canvas) return [3 /*break*/, 2];\n                        this.getContext();\n                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 0];\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This renders our label to a sizeable canvas where we loop over the pixel data to determine\n     * the bounds of the label.\n     *\n     * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n     *                                 the size to be rendered to the texture to the size the label\n     *                                 should be within world space.\n     * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n     */\n    LabelRasterizer.calculateLabelSize = function (resource, sampleScale, calculateTexture) {\n        // If a max width is specified, then we must render and determine the potentially truncated text of the\n        // Label. We can do a binary search for the correct truncated label size.\n        if (calculateTexture) {\n            this.calculateTrucatedText(resource);\n        }\n        /** Get the label properties for rasterizing */\n        var label = resource.label;\n        // Get the scaling of the sample base\n        var sampleScaling = sampleScale || resource.sampleScale || 1.0;\n        // Draw our label to a canvas\n        this.drawLabel(label, resource.truncatedText, canvas, sampleScaling);\n        // Measure the contents of the canvas\n        var _a = this.measureContents(canvas), minX = _a.minX, minY = _a.minY, maxX = _a.maxX, maxY = _a.maxY;\n        // Make sure the rasterization object is initialized\n        resource.rasterization = resource.rasterization || {\n            texture: { height: 0, width: 0 },\n            world: { height: 0, width: 0 },\n        };\n        // When a forced sampling is present, it calculates that as the world space\n        if (!calculateTexture) {\n            // Update the calculated texture size.\n            resource.rasterization.world = {\n                height: maxY - minY,\n                width: maxX - minX,\n            };\n        }\n        // Otherwise we first calculate the texture rasterization for the label\n        else {\n            // Update the calculated texture size.\n            resource.rasterization.texture = {\n                height: maxY - minY,\n                width: maxX - minX,\n            };\n            resource.rasterization.canvas = this.createCroppedCanvas(resource, minY, minX);\n            this.calculateLabelSize(resource, 1.0, false);\n        }\n    };\n    /**\n     * This determines what the truncated text of the label will be. If there is no truncation\n     * then the truncated text === the label's text\n     */\n    LabelRasterizer.calculateTrucatedText = function (resource) {\n        var label = resource.label;\n        var maxWidth = label.maxWidth;\n        // If the label has no max width, then there will be no truncation\n        if (!maxWidth) {\n            resource.truncatedText = label.text;\n            return;\n        }\n        // We now do an initial rendering of the label as it will appear in world space\n        this.drawLabel(label, label.text, canvas, 1);\n        // We measure the contents of the rendered item to see if it violates the maxWidth\n        var firstTest = this.measureContents(canvas);\n        // If we're within spec, we do not need to truncate\n        if (firstTest.maxX - firstTest.minX <= maxWidth) {\n            resource.truncatedText = label.text;\n            return;\n        }\n        // At this point we need to binary search through chopping off letters to find a string\n        // That will fit within max width\n        var text = label.text;\n        var left = 0;\n        var right = text.length;\n        var cursor = floor((right - left) / 2.0);\n        var safety = 0;\n        var safetyMax = 50;\n        // Loop to perform the binary search\n        while (right > left && cursor !== 0 && safety++ < safetyMax) {\n            // Draw and measure\n            this.drawLabel(label, text.substr(0, cursor) + \"...\", canvas, 1);\n            var _a = this.measureContents(canvas), minX = _a.minX, maxX = _a.maxX;\n            // If we pass then we move left to cursor to make the test string longer\n            if (maxX - minX <= maxWidth) {\n                left = cursor;\n            }\n            // If we fail, we move right to cursor to make the test string shorter\n            else {\n                right = cursor;\n            }\n            // Get our next cursor position\n            var nextCursor = floor((right - left) / 2.0) + left;\n            // If the next cursor is the same as cursor, then we're done searching\n            if (nextCursor === cursor) {\n                break;\n            }\n            // Move our cursor\n            cursor = nextCursor;\n        }\n        // If cursor is zero, nothing passed and our truncation is just ellipses\n        if (cursor === 0) {\n            resource.truncatedText = '...';\n        }\n        // Otherwise we get the string that passes and use that as our truncated text\n        else {\n            resource.truncatedText = text.substr(0, cursor) + \"...\";\n        }\n    };\n    /**\n     * This generates a canvas that has the cropped version of the label where the label\n     * fits neatly in the canvas object.\n     */\n    LabelRasterizer.createCroppedCanvas = function (resource, top, left) {\n        var cropped = document.createElement('canvas');\n        var context = cropped.getContext('2d');\n        if (context) {\n            var texture = resource.rasterization.texture;\n            cropped.width = texture.width;\n            cropped.height = texture.height;\n            context.imageSmoothingEnabled = false;\n            // Draw just the region the label appears into the canvas\n            context.drawImage(canvas.canvas, left, top, texture.width, texture.height, 0, 0, texture.width, texture.height);\n        }\n        else {\n            console.warn('Could not create a canvas 2d context to generate a label\\'s cropped image.');\n        }\n        return cropped;\n    };\n    /**\n     * This actually renders a string to a canvas context using a label's settings\n     */\n    LabelRasterizer.drawLabel = function (label, text, canvas, sampleScaling) {\n        // Get the font size we will rasterize with\n        var fontSize = this.getLabelRasterizationFontSize(label, sampleScaling);\n        // Set the color of the label to white so we know what color to look for\n        canvas.fillStyle = 'white';\n        // Set the font to the canvas\n        canvas.font = this.makeCSSFont(label, sampleScaling);\n        // We will use the canvas measuring tool to give us a baseline for how wide\n        // The label will be. We add the font size to the width for the padding needed to ensure\n        // The entirety of the text is placed on the canvas.\n        canvas.canvas.width = canvas.measureText(label.text).width + fontSize;\n        // Make our test area the font size with one extra level of the font size\n        // For padding.\n        canvas.canvas.height = fontSize * 2.0;\n        // After adjusting the canvas dimensions we must re-set the font metrics\n        // Set the color of the label to white so we know what color to look for\n        canvas.fillStyle = 'white';\n        // Set the font to the canvas\n        canvas.font = this.makeCSSFont(label, sampleScaling);\n        // Render the text into our canvas for calculating\n        canvas.fillText(text, fontSize / 2.0, fontSize / 4.0 + fontSize);\n    };\n    /**\n     * Attempts to populate the 'canvas' context for rendering labels offscreen.\n     */\n    LabelRasterizer.getContext = function () {\n        if (!canvas) {\n            canvas = document.createElement('canvas').getContext('2d');\n        }\n        return canvas;\n    };\n    /**\n     * This retrieves the font size that will be used when rasterizing the label. This takes into\n     * account whether the label is requesting super sampling be present for the rendering.\n     */\n    LabelRasterizer.getLabelRasterizationFontSize = function (label, sampleScale) {\n        return label.fontSize * sampleScale;\n    };\n    /**\n     * Generates the CSS font string based on the label's values\n     */\n    LabelRasterizer.makeCSSFont = function (label, sampleScale) {\n        return label.fontWeight + \" \" + this.getLabelRasterizationFontSize(label, sampleScale) + \"px \" + label.fontFamily;\n    };\n    /**\n     * This measures the contents of what is inside the canvas assumming the rendered values are only white\n     */\n    LabelRasterizer.measureContents = function (canvas) {\n        var _a = canvas.canvas, width = _a.width, height = _a.height;\n        var imageData = canvas.getImageData(0, 0, width, height).data;\n        var r;\n        var minY = Number.MAX_SAFE_INTEGER;\n        var minX = Number.MAX_SAFE_INTEGER;\n        var maxX = Number.MIN_SAFE_INTEGER;\n        var maxY = Number.MIN_SAFE_INTEGER;\n        for (var i = 0; i < width; ++i) {\n            for (var k = 0; k < height; ++k) {\n                var redIndex = k * (width * 4) + i * 4;\n                r = imageData[redIndex];\n                if (r > 0.0) {\n                    minY = min(minY, k);\n                    minX = min(minX, i);\n                    maxX = max(maxX, i);\n                    maxY = max(maxY, k);\n                }\n            }\n        }\n        // The identified pixel needs to be encased and not a direct target\n        minY -= 1;\n        maxY += 2;\n        maxX += 2;\n        minX -= 1;\n        minY = max(minY, 0);\n        minX = max(minX, 0);\n        return { minX: minX, minY: minY, maxX: maxX, maxY: maxY };\n    };\n    /**\n     * Performs the rendering of the label\n     */\n    LabelRasterizer.render = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // Make sure our canvas object is ready for rendering\n                    return [4 /*yield*/, this.awaitContext()];\n                    case 1:\n                        // Make sure our canvas object is ready for rendering\n                        _a.sent();\n                        // Validate the label's input\n                        if (resource.label.fontSize > MAX_FONT_SIZE) {\n                            console.warn('Labels only support font sizes up to 50');\n                            return [2 /*return*/, resource];\n                        }\n                        // Calculate all of the label metrics and generate a canvas on the label that can\n                        // Be rendered to the canvas.\n                        this.calculateLabelSize(resource, resource.sampleScale, true);\n                        return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    /**\n     * Performs the rendering of the label\n     */\n    LabelRasterizer.renderSync = function (resource) {\n        // Ensure our offscreen canvas is prepped\n        this.getContext();\n        if (!canvas) {\n            console.warn('Can not render a label synchronously without the canvas context being ready.');\n            return resource;\n        }\n        // Validate the label's input\n        if (resource.label.fontSize > MAX_FONT_SIZE) {\n            console.warn('Labels only support font sizes up to 50');\n            return resource;\n        }\n        // Calculate all of the label metrics and generate a canvas on the label that can\n        // Be rendered to the canvas.\n        this.calculateLabelSize(resource, resource.sampleScale, true);\n        return resource;\n    };\n    return LabelRasterizer;\n}());\nexports.LabelRasterizer = LabelRasterizer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_atlas_resource_1 = require(\"./base-atlas-resource\");\nvar ImageAtlasResource = /** @class */ (function (_super) {\n    __extends(ImageAtlasResource, _super);\n    function ImageAtlasResource(image) {\n        var _this = _super.call(this) || this;\n        _this.image = image;\n        return _this;\n    }\n    return ImageAtlasResource;\n}(base_atlas_resource_1.BaseAtlasResource));\nexports.ImageAtlasResource = ImageAtlasResource;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// When ratserized to the image, this determines the size of the square rendered to the atlas.\nvar COLOR_RASTERIZATION_SIZE = 2;\n/**\n * Static class for rasterizing a color to a canvas object\n */\nvar ColorRasterizer = /** @class */ (function () {\n    function ColorRasterizer() {\n    }\n    /**\n     * This loops until our canvas context is available\n     */\n    ColorRasterizer.awaitContext = function (canvas) {\n        return __awaiter(this, void 0, void 0, function () {\n            var c, limit;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        c = canvas.getContext('2d'), limit = 0;\n                        _a.label = 1;\n                    case 1:\n                        if (!(!Boolean(c) && limit < 100)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        c = canvas.getContext('2d'), ++limit;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Generates the CSS string version of the color\n     */\n    ColorRasterizer.makeCSS = function (color) {\n        return \"rgba(\" + Math.floor(color.r * 256) + \", \" + Math.floor(color.g * 256) + \", \" + Math.floor(color.b * 256) + \", \" + color.opacity + \")\";\n    };\n    ColorRasterizer.render = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var canvas, context;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        canvas = document.createElement('canvas');\n                        context = canvas.getContext('2d');\n                        return [4 /*yield*/, this.awaitContext(canvas)];\n                    case 1:\n                        _a.sent();\n                        if (context) {\n                            canvas.width = COLOR_RASTERIZATION_SIZE;\n                            canvas.height = COLOR_RASTERIZATION_SIZE;\n                            context.imageSmoothingEnabled = false;\n                            context.fillStyle = this.makeCSS(resource.color);\n                            // Draw the color to the fill space\n                            context.fillRect(0, 0, COLOR_RASTERIZATION_SIZE, COLOR_RASTERIZATION_SIZE);\n                            // Update the resource with the rasterization\n                            resource.rasterization.canvas = canvas;\n                        }\n                        else {\n                            console.warn('Could not create a canvas 2d context to generate a color for rasterization.');\n                        }\n                        return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    return ColorRasterizer;\n}());\nexports.ColorRasterizer = ColorRasterizer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_atlas_resource_1 = require(\"./base-atlas-resource\");\nvar ColorAtlasResource = /** @class */ (function (_super) {\n    __extends(ColorAtlasResource, _super);\n    function ColorAtlasResource(color) {\n        var _this = _super.call(this) || this;\n        _this.color = color;\n        return _this;\n    }\n    return ColorAtlasResource;\n}(base_atlas_resource_1.BaseAtlasResource));\nexports.ColorAtlasResource = ColorAtlasResource;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Defines a texture that is located on an atlas\n */\nvar SubTexture = /** @class */ (function () {\n    function SubTexture() {\n        /** Stores the aspect ratio of the image for quick reference */\n        this.aspectRatio = 1.0;\n        /** The id of the atlas this texture is located on */\n        this.atlasReferenceID = '';\n        /** This is the actual texture of the atlas this resource is located on */\n        this.atlasTexture = null;\n        /** This is the top left UV coordinate of the sub texture on the atlas */\n        this.atlasTL = { x: 0, y: 0 };\n        /** This is the top right UV coordinate of the sub texture on the atlas */\n        this.atlasTR = { x: 0, y: 0 };\n        /** This is the bottom left UV coordinate of the sub texture on the atlas */\n        this.atlasBL = { x: 0, y: 0 };\n        /** This is the bottom right UV coordinate of the sub texture on the atlas */\n        this.atlasBR = { x: 0, y: 0 };\n        /** This is the normalized width of the sub texture on the atlas */\n        this.widthOnAtlas = 0;\n        /** This is the normalized height of the sub texture on the atlas */\n        this.heightOnAtlas = 0;\n        /** This flag is set to false when the underlying texture is no longer valid */\n        this.isValid = false;\n        /** Width in pixels of the image on the atlas */\n        this.pixelWidth = 0;\n        /** Height in pixels of the image on the atlas */\n        this.pixelHeight = 0;\n    }\n    return SubTexture;\n}());\nexports.SubTexture = SubTexture;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar identify_by_key_1 = require(\"../../util/identify-by-key\");\nvar pack_node_1 = require(\"./pack-node\");\nvar sub_texture_1 = require(\"./sub-texture\");\n/**\n * These are valid atlas sizes available. We force a power of 2 to be utilized.\n * We do not allow crazy large sizes as browsers have very real caps on resources.\n * This helps implementations be a little smarter about what they are using. Future\n * versions may increase this number as GPUs improve and standards allow greater\n * flexibility.\n */\nvar AtlasSize;\n(function (AtlasSize) {\n    AtlasSize[AtlasSize[\"_2\"] = 2] = \"_2\";\n    AtlasSize[AtlasSize[\"_4\"] = 4] = \"_4\";\n    AtlasSize[AtlasSize[\"_8\"] = 8] = \"_8\";\n    AtlasSize[AtlasSize[\"_16\"] = 16] = \"_16\";\n    AtlasSize[AtlasSize[\"_32\"] = 32] = \"_32\";\n    AtlasSize[AtlasSize[\"_64\"] = 64] = \"_64\";\n    AtlasSize[AtlasSize[\"_128\"] = 128] = \"_128\";\n    AtlasSize[AtlasSize[\"_256\"] = 256] = \"_256\";\n    AtlasSize[AtlasSize[\"_512\"] = 512] = \"_512\";\n    AtlasSize[AtlasSize[\"_1024\"] = 1024] = \"_1024\";\n    AtlasSize[AtlasSize[\"_2048\"] = 2048] = \"_2048\";\n    AtlasSize[AtlasSize[\"_4096\"] = 4096] = \"_4096\";\n})(AtlasSize = exports.AtlasSize || (exports.AtlasSize = {}));\n/**\n * This represents a single Texture on the gpu that is composed of several smaller textures\n * as a 'look up'.\n */\nvar Atlas = /** @class */ (function (_super) {\n    __extends(Atlas, _super);\n    function Atlas(options) {\n        var _this = _super.call(this, options) || this;\n        /**\n         * This is all of the resources associated with this atlas. The boolean flag indicates if the resource\n         * is flagged for removal. When set to false, the resource is no longer valid and can be removed from\n         * the atlas at any given moment.\n         */\n        _this.validResources = new Map();\n        var canvas = document.createElement('canvas');\n        _this.width = canvas.width = options.width;\n        _this.height = canvas.height = options.height;\n        _this.textureSettings = options.textureSettings;\n        // Set up the packing for this atlas\n        _this.packing = new pack_node_1.PackNode(0, 0, options.width, options.height);\n        // Make sure the texture is started and updated\n        _this.updateTexture(canvas);\n        return _this;\n    }\n    /**\n     * This invalidates the SubTexture of an atlas resource.\n     */\n    Atlas.prototype.invalidateResource = function (resource) {\n        var zero = { x: 0, y: 0 };\n        resource.texture.aspectRatio = 1;\n        resource.texture.atlasBL = zero;\n        resource.texture.atlasBR = zero;\n        resource.texture.atlasTL = zero;\n        resource.texture.atlasTR = zero;\n        resource.texture.atlasReferenceID = '';\n        resource.texture.pixelWidth = 0;\n        resource.texture.pixelHeight = 0;\n        resource.texture.isValid = false;\n    };\n    /**\n     * Sets the parent manager of this atlas\n     */\n    Atlas.prototype.setManager = function (manager) {\n        this.manager = manager;\n    };\n    /**\n     * Adds a resource to this atlas AND ensures the resource is flagged valid for use.\n     *\n     * @return {boolean} True if the resource successfully registered\n     */\n    Atlas.prototype.registerResource = function (resource) {\n        if (this.validResources.get(resource) === undefined) {\n            if (!resource.texture || !resource.texture.isValid) {\n                if (!resource.texture) {\n                    resource.texture = new sub_texture_1.SubTexture();\n                }\n                resource.texture.isValid = true;\n                this.validResources.set(resource, true);\n                return true;\n            }\n            else {\n                console.warn('Atlas Error:', this.id, 'Attempted to add a resource to an Atlas that is already a valid resource on another atlas.', 'Consider Creating a new resource to be loaded into this particular atlas.', 'Resource:', resource);\n            }\n        }\n        else {\n            console.warn('Atlas Error:', this.id, 'A resource was trying to be added to the atlas that has already been added before.', 'Consider creating a new resource to indicate what you want loaded to the atlas', 'Resource:', resource);\n        }\n        return false;\n    };\n    /**\n     * This flags a resource from removal from an atlas.\n     *\n     * NOTE: This does not immediately clear the resource fromt he atlas, nor does it even guarantee\n     * the resource will be cleared from the atlas for a while. It merely suggests the resource be removed\n     * and makes the SubTexture invalid. It could be a long while before the atlas gets regnerated and repacked\n     * to actually reflect the resource not existing on the atlas.\n     */\n    Atlas.prototype.removeResource = function (resource) {\n        if (this.validResources.get(resource)) {\n            this.validResources.set(resource, false);\n            this.invalidateResource(resource);\n        }\n        else {\n            console.warn('Atlas Error:', this.id, 'Attempted to remove a resource that does not exist on this atlas.', 'or the resource was already considered invalidated on this atlas.', 'Resource:', resource);\n        }\n    };\n    /**\n     * TODO:\n     * This performs the currently best known way to update a texture.\n     *\n     * This is the current best attempt at updating the atlas which is junk as it destroys the old texture\n     * And makes a new one. We REALLY should be just subTexture2D updating the texture, but Three makes that really\n     * Difficult\n     */\n    Atlas.prototype.updateTexture = function (canvas) {\n        if (this.texture) {\n            var redoneCanvas = this.texture.image;\n            this.texture.dispose();\n            this.texture = new Three.Texture(redoneCanvas);\n        }\n        else {\n            this.texture = new Three.Texture(canvas);\n        }\n        // Apply any relevant options to the texture desired to be set\n        this.texture.generateMipmaps = true;\n        this.texture.premultiplyAlpha = true;\n        this.textureSettings && Object.assign(this.texture, this.textureSettings);\n        this.texture.needsUpdate = true;\n    };\n    /**\n     * This frees up all the resources down to the GPU related to this atlas. It also\n     * loops through every resource and invalidates the texturing information within\n     * them so subsequent accidental renders will appear as a single color rather than\n     * an artifacted element.\n     */\n    Atlas.prototype.destroy = function () {\n        var _this = this;\n        this.texture.dispose();\n        this.validResources.forEach(function (isValid, resource) {\n            _this.invalidateResource(resource);\n        });\n    };\n    return Atlas;\n}(identify_by_key_1.IdentifyByKey));\nexports.Atlas = Atlas;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./image-layer\"));\n__export(require(\"./image-instance\"));\n","/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',\n  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',\n  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',\n  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',\n  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',\n  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',\n  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',\n  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',\n  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',\n  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',\n  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // Internet Explorer and Edge do not support colors.\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n    return false;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar browser = require(\"bowser\");\nvar three_1 = require(\"three\");\nvar debug = require('debug')('CommunicationsView:Mouse');\n/** Used to adjust the base whee delta for IE browsers */\nvar IE_ADJUSTMENT = 1 / 30;\n/** Used to adjust the rates for IE 11 */\nvar OLD_IE_ADJUSTMENT = -0.25;\n// This determines how large the delta can grow to in firefox\nvar MAX_FIREFOX_WHEELDELTA = 100;\n/**\n * Create a low pass filter memory bank so we can slow down rapid accelerations and let normal slower accelerations pass\n * Common use case for this is the discrepancy in firefox from mousewheels to trackpad scroll speeds\n */\nvar lowPassY = [0, 0, 0, 0];\n// These coefficients represent the coefficients of a FIR filter.\n// This FIR filter uses the lowPassY as the memory for the filter and is created for\n// The reasons specified for the lowPassY memory. To edit the coefficients, you simply\n// Ensure the coefficients added together === 1.0. If they do not, you may get an unstable\n// Result that goes to infinity rather quickly. Changing the distribution of these coefficients\n// Alters the rate at which the delta can approach MAX_FIREFOX_WHEELDELTA. Explaining exactly\n// How it affects the rate requires an understanding of FIR filters, so unless this is already\n// Known knowledge, it would be faster to just tweak the coefficients until a desired effect is\n// Attained.\nvar LOW_PASS_U0 = 0.1;\nvar LOW_PASS_U1 = 0.2;\nvar LOW_PASS_U2 = 0.2;\nvar LOW_PASS_U3 = 0.5;\nfunction normalizeFirefoxWheel(e) {\n    var wheel = e;\n    var deltaX = 0;\n    var deltaY = 0;\n    // Reset the filter if the direction changes to prevent lag in directional change\n    if (Math.sign(lowPassY[0]) !== Math.sign(deltaY)) {\n        lowPassY.splice(0, lowPassY.length, 0, 0, 0, 0);\n    }\n    deltaX = wheel.deltaX * MAX_FIREFOX_WHEELDELTA;\n    // Calculate the next value output from the FIR filter\n    deltaY = (wheel.deltaY * MAX_FIREFOX_WHEELDELTA) * LOW_PASS_U0 + lowPassY[0] * LOW_PASS_U1 + lowPassY[1] * LOW_PASS_U2 + lowPassY[2] * LOW_PASS_U3;\n    // Store the value of the filter in the FIR memory bank\n    lowPassY.unshift(deltaY);\n    // Keep our FIR memory clean and only the size of the number of coefficients\n    lowPassY.pop();\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeChromeWheel(e) {\n    var wheel = e;\n    return new three_1.Vector2(wheel.deltaX, -wheel.deltaY);\n}\nfunction normalizeIE11Wheel(e) {\n    var wheel = e;\n    var deltaX = wheel.deltaX;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    var deltaY = wheel.deltaY;\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = (wheel.wheelDelta || -wheel.detail) * OLD_IE_ADJUSTMENT;\n        }\n    }\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeIE12Wheel(e) {\n    var wheel = e;\n    var deltaX = wheel.deltaX, deltaY = wheel.deltaY;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = wheel.wheelDelta || -wheel.detail;\n        }\n    }\n    var v = new three_1.Vector2(deltaX, -deltaY);\n    v.multiplyScalar(0.25);\n    return v;\n}\n// Determine this browsers version of wheel normalization and apply it\nvar normalizeWheel;\nexports.normalizeWheel = normalizeWheel;\nif (browser.firefox) {\n    debug('Using mouse wheel for firefox');\n    exports.normalizeWheel = normalizeWheel = normalizeFirefoxWheel;\n}\nelse if (browser.msie && +browser.version >= 11) {\n    debug('Using mouse wheel for IE 11');\n    exports.normalizeWheel = normalizeWheel = normalizeIE11Wheel;\n}\nelse if (browser.msedge) {\n    debug('Using mouse wheel for MS EDGE');\n    exports.normalizeWheel = normalizeWheel = normalizeIE12Wheel;\n}\nelse {\n    debug('Using mouse wheel for Chrome');\n    exports.normalizeWheel = normalizeWheel = normalizeChromeWheel;\n}\n/**\n * Analyzes a MouseEvent and calculates the mouse coordinates (relative to the element).\n */\nfunction eventElementPosition(e, relative) {\n    var mouseX = 0, mouseY = 0, eventX = 0, eventY = 0, object = relative || (e.nativeEvent && e.nativeEvent.target) || e.target;\n    // Get mouse position on document crossbrowser\n    if (!e) {\n        e = window.event;\n    }\n    if (e.pageX || e.pageY) {\n        mouseX = e.pageX;\n        mouseY = e.pageY;\n    }\n    else if (e.clientX || e.clientY) {\n        mouseX = e.clientX + document.body.scrollLeft\n            + document.documentElement.scrollLeft;\n        mouseY = e.clientY + document.body.scrollTop\n            + document.documentElement.scrollTop;\n    }\n    // Get parent element position in document\n    if (object.offsetParent) {\n        do {\n            eventX += object.offsetLeft;\n            eventY += object.offsetTop;\n            object = object.offsetParent;\n        } while (object);\n    }\n    // Mouse position minus elm position is mouseposition relative to element:\n    return { x: mouseX - eventX, y: mouseY - eventY };\n}\nexports.eventElementPosition = eventElementPosition;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getProgramInfo(gl, program) {\n    var result = {\n        attributeCount: 0,\n        attributes: new Array(),\n        uniformCount: 0,\n        uniforms: new Array(),\n    }, activeUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS), activeAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    // Taken from the WebGl spec:\n    // Http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14\n    var enums = {\n        0x8B50: 'FLOAT_VEC2',\n        0x8B51: 'FLOAT_VEC3',\n        0x8B52: 'FLOAT_VEC4',\n        0x8B53: 'INT_VEC2',\n        0x8B54: 'INT_VEC3',\n        0x8B55: 'INT_VEC4',\n        0x8B56: 'BOOL',\n        0x8B57: 'BOOL_VEC2',\n        0x8B58: 'BOOL_VEC3',\n        0x8B59: 'BOOL_VEC4',\n        0x8B5A: 'FLOAT_MAT2',\n        0x8B5B: 'FLOAT_MAT3',\n        0x8B5C: 'FLOAT_MAT4',\n        0x8B5E: 'SAMPLER_2D',\n        0x8B60: 'SAMPLER_CUBE',\n        0x1400: 'BYTE',\n        0x1401: 'UNSIGNED_BYTE',\n        0x1402: 'SHORT',\n        0x1403: 'UNSIGNED_SHORT',\n        0x1404: 'INT',\n        0x1405: 'UNSIGNED_INT',\n        0x1406: 'FLOAT',\n    };\n    var blocks = {\n        0x8B50: 1,\n        0x8B51: 1,\n        0x8B52: 1,\n        0x8B53: 1,\n        0x8B54: 1,\n        0x8B55: 1,\n        0x8B56: 1,\n        0x8B57: 1,\n        0x8B58: 1,\n        0x8B59: 1,\n        0x8B5A: 1,\n        0x8B5B: 3,\n        0x8B5C: 4,\n        0x8B5E: 1,\n        0x8B60: 1,\n        0x1400: 1,\n        0x1401: 1,\n        0x1402: 1,\n        0x1403: 1,\n        0x1404: 1,\n        0x1405: 1,\n        0x1406: 1,\n    };\n    // Loop through active uniforms\n    for (var i = 0; i < activeUniforms; ++i) {\n        var uniform = gl.getActiveUniform(program, i);\n        uniform.typeName = enums[uniform.type];\n        result.uniforms.push(uniform);\n        result.uniformCount += uniform.size;\n        uniform.size = uniform.size * blocks[uniform.type];\n    }\n    // Loop through active attributes\n    for (var i = 0; i < activeAttributes; i++) {\n        var attribute = gl.getActiveAttrib(program, i);\n        attribute.typeName = enums[attribute.type];\n        result.attributes.push(attribute);\n        result.attributeCount += attribute.size;\n    }\n    return result;\n}\nexports.getProgramInfo = getProgramInfo;\nvar WebGLStat = /** @class */ (function () {\n    function WebGLStat() {\n    }\n    WebGLStat.MAX_VERTEX_UNIFORMS = 0;\n    WebGLStat.MAX_FRAGMENT_UNIFORMS = 0;\n    WebGLStat.MAX_ATTRIBUTES = 0;\n    WebGLStat.WEBGL_SUPPORTED = false;\n    WebGLStat.MAX_TEXTURE_SIZE = 0;\n    return WebGLStat;\n}());\nexports.WebGLStat = WebGLStat;\nfunction initStats() {\n    // Let's perform some immediate operations to do some gl querying for useful information\n    function getAContext() {\n        try {\n            var canvas = document.createElement('canvas');\n            return window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    // Attempt to retrieve a context for webgl\n    var gl = getAContext();\n    // If the context exists, then we know gl is supported and we can fill in some metrics\n    if (gl) {\n        WebGLStat.WEBGL_SUPPORTED = true;\n        WebGLStat.MAX_VERTEX_UNIFORMS = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n        WebGLStat.MAX_FRAGMENT_UNIFORMS = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n        WebGLStat.MAX_ATTRIBUTES = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n        WebGLStat.MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    }\n}\ninitStats();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar sqrt = Math.sqrt;\nfunction add2(left, right) {\n    return [\n        left[0] + right[0],\n        left[1] + right[1],\n    ];\n}\nexports.add2 = add2;\nfunction scale2(left, scale) {\n    return [\n        left[0] * scale,\n        left[1] * scale,\n    ];\n}\nexports.scale2 = scale2;\nfunction subtract2(left, right) {\n    return [\n        left[0] - right[0],\n        left[1] - right[1],\n    ];\n}\nexports.subtract2 = subtract2;\nfunction multiply2(left, right) {\n    return [\n        left[0] * right[0],\n        left[1] * right[1],\n    ];\n}\nexports.multiply2 = multiply2;\nfunction dot2(left, right) {\n    return (left[0] * right[0] +\n        left[1] * right[1]);\n}\nexports.dot2 = dot2;\nfunction linear2(start, end, t) {\n    return scale2(add2(subtract2(end, start), start), t);\n}\nexports.linear2 = linear2;\nfunction length2(start) {\n    return sqrt(dot2(start, start));\n}\nexports.length2 = length2;\nfunction add3(left, right) {\n    return [\n        left[0] + right[0],\n        left[1] + right[1],\n        left[2] + right[2],\n    ];\n}\nexports.add3 = add3;\nfunction scale3(left, scale) {\n    return [\n        left[0] * scale,\n        left[1] * scale,\n        left[2] * scale,\n    ];\n}\nexports.scale3 = scale3;\nfunction subtract3(left, right) {\n    return [\n        left[0] - right[0],\n        left[1] - right[1],\n        left[2] - right[2],\n    ];\n}\nexports.subtract3 = subtract3;\nfunction multiply3(left, right) {\n    return [\n        left[0] * right[0],\n        left[1] * right[1],\n        left[2] * right[2],\n    ];\n}\nexports.multiply3 = multiply3;\nfunction linear3(start, end, t) {\n    return scale3(add3(subtract3(end, start), start), t);\n}\nexports.linear3 = linear3;\nfunction length3(start) {\n    return sqrt(dot3(start, start));\n}\nexports.length3 = length3;\nfunction dot3(left, right) {\n    return (left[0] * right[0] +\n        left[1] * right[1] +\n        left[2] * right[2]);\n}\nexports.dot3 = dot3;\nfunction add4(left, right) {\n    return [\n        left[0] + right[0],\n        left[1] + right[1],\n        left[2] + right[2],\n        left[3] + right[3],\n    ];\n}\nexports.add4 = add4;\nfunction scale4(left, scale) {\n    return [\n        left[0] * scale,\n        left[1] * scale,\n        left[2] * scale,\n        left[3] * scale,\n    ];\n}\nexports.scale4 = scale4;\nfunction subtract4(left, right) {\n    return [\n        left[0] - right[0],\n        left[1] - right[1],\n        left[2] - right[2],\n        left[3] - right[3],\n    ];\n}\nexports.subtract4 = subtract4;\nfunction multiply4(left, right) {\n    return [\n        left[0] * right[0],\n        left[1] * right[1],\n        left[2] * right[2],\n        left[3] * right[3],\n    ];\n}\nexports.multiply4 = multiply4;\nfunction dot4(left, right) {\n    return (left[0] * right[0] +\n        left[1] * right[1] +\n        left[2] * right[2] +\n        left[3] * right[3]);\n}\nexports.dot4 = dot4;\nfunction linear4(start, end, t) {\n    return scale4(add4(subtract4(end, start), start), t);\n}\nexports.linear4 = linear4;\nfunction length4(start) {\n    return sqrt(dot4(start, start));\n}\nexports.length4 = length4;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ObservableManagerMode;\n(function (ObservableManagerMode) {\n    ObservableManagerMode[ObservableManagerMode[\"GATHER_OBSERVABLES\"] = 0] = \"GATHER_OBSERVABLES\";\n    ObservableManagerMode[ObservableManagerMode[\"BROADCAST\"] = 1] = \"BROADCAST\";\n})(ObservableManagerMode = exports.ObservableManagerMode || (exports.ObservableManagerMode = {}));\nvar ObservableManager = /** @class */ (function () {\n    function ObservableManager() {\n    }\n    ObservableManager.mode = ObservableManagerMode.BROADCAST;\n    return ObservableManager;\n}());\nexports.ObservableManager = ObservableManager;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar label_atlas_resource_1 = require(\"./label-atlas-resource\");\nfunction toInstanceIOValue(texture) {\n    // If the texture is not defined we just output an empty reference\n    if (!texture) {\n        return [0, 0, 0, 0];\n    }\n    // Otherwise, we return the atlas information of the texture\n    return [\n        texture.atlasTL.x,\n        texture.atlasTL.y,\n        texture.atlasBR.x,\n        texture.atlasBR.y,\n    ];\n}\n/**\n * This class is responsible for tracking resources requested to be placed on an Atlas.\n * This makes sure the resource is uploaded and then properly cached so similar requests\n * return already existing resources. This also manages instances waiting for the resource\n * to be made available.\n */\nvar AtlasResourceManager = /** @class */ (function () {\n    function AtlasResourceManager(options) {\n        /** This is the atlas currently targetted by requests */\n        this.targetAtlas = '';\n        /** This stores all of the requests awaiting dequeueing */\n        this.requestQueue = new Map();\n        /**\n         * This tracks if a resource is already in the request queue. This also stores ALL instances awaiting the resource.\n         */\n        this.requestLookup = new Map();\n        this.atlasManager = options.atlasManager;\n    }\n    /**\n     * This dequeues all instance requests for a resource and processes the request which will\n     * inevitably make the instance active\n     */\n    AtlasResourceManager.prototype.dequeueRequests = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var didDequeue, _loop_1, this_1, _i, _a, _b, targetAtlas, resources;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        didDequeue = false;\n                        _loop_1 = function (targetAtlas, resources) {\n                            var requests, atlasRequests_1;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        if (!(resources.length > 0)) return [3 /*break*/, 2];\n                                        // We did dequeue\n                                        didDequeue = true;\n                                        requests = resources.slice(0);\n                                        // Empty the queue to begin taking in new requests as needed\n                                        resources.length = 0;\n                                        // Tell the atlas manager to update with all of the requested resources\n                                        return [4 /*yield*/, this_1.atlasManager.updateAtlas(targetAtlas, requests)];\n                                    case 1:\n                                        // Tell the atlas manager to update with all of the requested resources\n                                        _a.sent();\n                                        atlasRequests_1 = this_1.requestLookup.get(targetAtlas);\n                                        if (atlasRequests_1) {\n                                            // Once the manager has been updated, we can now flag all of the instances waiting for the resources\n                                            // As active, which should thus trigger an update to the layers to perform a diff for each instance\n                                            requests.forEach(function (resource) {\n                                                var request = atlasRequests_1.get(resource);\n                                                atlasRequests_1.delete(resource);\n                                                if (request) {\n                                                    for (var _i = 0, request_1 = request; _i < request_1.length; _i++) {\n                                                        var _a = request_1[_i], layer = _a[0], instance = _a[1];\n                                                        // If the instance is still associated with a cluster, then the instance can be activated. Having\n                                                        // A cluster is indicative the instance has not been deleted.\n                                                        if (layer.uniformManager.getUniforms(instance)) {\n                                                            instance.active = true;\n                                                        }\n                                                    }\n                                                }\n                                            });\n                                        }\n                                        _a.label = 2;\n                                    case 2: return [2 /*return*/];\n                                }\n                            });\n                        };\n                        this_1 = this;\n                        _i = 0, _a = Array.from(this.requestQueue.entries());\n                        _c.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3 /*break*/, 4];\n                        _b = _a[_i], targetAtlas = _b[0], resources = _b[1];\n                        return [5 /*yield**/, _loop_1(targetAtlas, resources)];\n                    case 2:\n                        _c.sent();\n                        _c.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/, didDequeue];\n                }\n            });\n        });\n    };\n    /**\n     * Free ALL resources managed under this resource manager\n     */\n    AtlasResourceManager.prototype.destroy = function () {\n        this.atlasManager.destroy();\n    };\n    /**\n     * This retrieves the actual atlas texture that should be applied to a uniform's\n     * value.\n     */\n    AtlasResourceManager.prototype.getAtlasTexture = function (key) {\n        var atlas = this.atlasManager.getAtlasTexture(key);\n        if (atlas) {\n            return atlas.texture;\n        }\n        return null;\n    };\n    /**\n     * This is a request for atlas texture resources. It will produce either the coordinates needed to\n     * make valid texture lookups, or it will trigger a loading of resources to an atlas and cause an\n     * automated deactivation and reactivation of the instance.\n     */\n    AtlasResourceManager.prototype.request = function (layer, instance, resource) {\n        var texture = resource.texture;\n        // If the texture is ready and available, then we simply return the IO values\n        if (texture) {\n            return toInstanceIOValue(texture);\n        }\n        if (resource instanceof label_atlas_resource_1.LabelAtlasResource) {\n            if (!resource.label.text) {\n                return toInstanceIOValue(texture);\n            }\n        }\n        // If a request is already made, then we must save the instance making the request for deactivation and\n        // Reactivation but without any additional atlas loading\n        var atlasRequests = this.requestLookup.get(this.targetAtlas);\n        if (atlasRequests) {\n            var existingRequests = atlasRequests.get(resource);\n            if (existingRequests) {\n                existingRequests.push([layer, instance]);\n                instance.active = false;\n                return toInstanceIOValue(texture);\n            }\n        }\n        else {\n            atlasRequests = new Map();\n            this.requestLookup.set(this.targetAtlas, atlasRequests);\n        }\n        // If the texture is not available, then we must load the resource, deactivate the instance\n        // And wait for the resource to become available. Once the resource is available, the system\n        // Must activate the instance to render the resource.\n        instance.active = false;\n        var requests = this.requestQueue.get(this.targetAtlas);\n        if (!requests) {\n            requests = [];\n            this.requestQueue.set(this.targetAtlas, requests);\n        }\n        requests.push(resource);\n        atlasRequests.set(resource, [[layer, instance]]);\n        // This returns essentially returns blank values for the resource lookup\n        return toInstanceIOValue(texture);\n    };\n    /**\n     * This is used by the system to target the correct atlas for subsequent requests to a resource.\n     */\n    AtlasResourceManager.prototype.setTargetAtlas = function (target) {\n        this.targetAtlas = target;\n    };\n    return AtlasResourceManager;\n}());\nexports.AtlasResourceManager = AtlasResourceManager;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../../types\");\nvar event_manager_1 = require(\"../event-manager\");\n/**\n * This class is an injected event manager for the surface, it specifically handles taking in mouse events intended for view interactions\n * and broadcasts them to the layers that have picking enabled, thus allowing the layers to respond to\n * mouse view locations and broadcast Instance interactions based on the interaction with the View the layer is a part of\n *\n * In Summary: This is an adapter that takes in interactions to the views and injects those events into the layers associated with\n * the views so that the layers can translate the events to gestures.\n */\nvar LayerMouseEvents = /** @class */ (function (_super) {\n    __extends(LayerMouseEvents, _super);\n    function LayerMouseEvents(sceneViews) {\n        var _this = _super.call(this) || this;\n        /** This tracks which views have the mouse over them so we can properly broadcast view is out events */\n        _this.isOver = new Map();\n        _this.sceneViews = sceneViews;\n        return _this;\n    }\n    LayerMouseEvents.prototype.getSceneViewsUnderMouse = function (e) {\n        var sceneViewByViewId = new Map();\n        // Map the scene views by the view's identifiers\n        for (var _i = 0, _a = this.sceneViews; _i < _a.length; _i++) {\n            var sceneView = _a[_i];\n            sceneViewByViewId.set(sceneView.view.id, sceneView);\n        }\n        // Now retrieve and convert each view under the mouse to the scene view it coincides with\n        return e.viewsUnderMouse.map(function (viewItem) { return sceneViewByViewId.get(viewItem.view.id); });\n    };\n    LayerMouseEvents.prototype.getMouseByViewId = function (e) {\n        // This is the mouse position for the provided view in view space\n        var viewMouseByViewId = new Map();\n        for (var _i = 0, _a = e.viewsUnderMouse; _i < _a.length; _i++) {\n            var viewItem = _a[_i];\n            viewMouseByViewId.set(viewItem.view.id, viewItem.mouse);\n        }\n        return viewMouseByViewId;\n    };\n    LayerMouseEvents.prototype.handleClick = function (e, button) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseClick(view, mouse, button); });\n    };\n    LayerMouseEvents.prototype.handleDrag = function (e, drag) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseDrag(view, mouse); });\n    };\n    LayerMouseEvents.prototype.handleInteraction = function (e, callback) {\n        // Get all of the scenes under the mouse\n        var sceneViews = this.getSceneViewsUnderMouse(e);\n        // Get a lookup of a view id to the mouse position in the view\n        var viewMouseByViewId = this.getMouseByViewId(e);\n        // For every view of every scene, we must tell it's layers it's world space is receiving mouse interactions\n        for (var _i = 0, sceneViews_1 = sceneViews; _i < sceneViews_1.length; _i++) {\n            var sceneView = sceneViews_1[_i];\n            this.handleSceneView(sceneView, viewMouseByViewId, callback);\n        }\n        return sceneViews;\n    };\n    LayerMouseEvents.prototype.handleMouseDown = function (e, button) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseDown(view, mouse, button); });\n    };\n    LayerMouseEvents.prototype.handleMouseUp = function (e, button) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseUp(view, mouse, button); });\n    };\n    LayerMouseEvents.prototype.handleMouseOver = function (e) {\n        // We let the mouse move event handle the registration of moused over views\n    };\n    LayerMouseEvents.prototype.handleMouseOut = function (e) {\n        var _this = this;\n        // Get a lookup of a view id to the mouse position in the view\n        var viewMouseByViewId = this.getMouseByViewId(e);\n        var screen = e.screen.mouse;\n        // All views that are moused over should no longer be considered over and broadcast a mouse out\n        this.isOver.forEach(function (flag, sceneView) {\n            // Since we are leaving the view we must make the view relative cooridinates fromt he screen space coords\n            viewMouseByViewId.set(sceneView.view.id, sceneView.view.screenToView(screen));\n            _this.handleSceneView(sceneView, viewMouseByViewId, function (layer, view, mouse) { return layer.interactions.handleMouseOut(view, mouse); });\n        });\n        // Nothing is over anymore\n        this.isOver.clear();\n    };\n    LayerMouseEvents.prototype.handleMouseMove = function (e) {\n        var _this = this;\n        // Get all of the scenes we have interacted with, and broadcast a move event for each\n        var allSceneViews = this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseMove(view, mouse); });\n        // Get a lookup of a view id to the mouse position in the view\n        var viewMouseByViewId = this.getMouseByViewId(e);\n        // Get the position of the mouse on the screen\n        var screen = e.screen.mouse;\n        // For quick lookups map all of the current SceneViews that are over\n        var currentSceneViews = new Map();\n        allSceneViews.forEach(function (v) { return currentSceneViews.set(v, true); });\n        // Detect which of the views are newly over\n        currentSceneViews.forEach(function (flag, sceneView) {\n            if (!_this.isOver.get(sceneView)) {\n                _this.handleSceneView(sceneView, viewMouseByViewId, function (layer, view, mouse) { return layer.interactions.handleMouseOver(view, mouse); });\n            }\n        });\n        // Detect which of the views are no longer over\n        this.isOver.forEach(function (flag, sceneView) {\n            if (!currentSceneViews.get(sceneView)) {\n                // Since these views were not interacted with, we must create the mouse interaction position\n                viewMouseByViewId.set(sceneView.view.id, sceneView.view.screenToView(screen));\n                _this.handleSceneView(sceneView, viewMouseByViewId, function (layer, view, mouse) { return layer.interactions.handleMouseOut(view, mouse); });\n            }\n        });\n        // Update the current views that are over to the currently over views for next event\n        this.isOver = currentSceneViews;\n    };\n    LayerMouseEvents.prototype.handleSceneView = function (sceneView, viewMouseByViewId, callback) {\n        var view = sceneView.view;\n        var mouse = viewMouseByViewId.get(view.id);\n        for (var _i = 0, _a = sceneView.scene.layers; _i < _a.length; _i++) {\n            var layer = _a[_i];\n            if (layer.picking && layer.picking.type === types_1.PickType.ALL) {\n                callback(layer, view, mouse);\n            }\n        }\n    };\n    LayerMouseEvents.prototype.handleWheel = function (e) {\n        // TODO: This may need to be implemented. As of right now, there is no particular benefit\n    };\n    return LayerMouseEvents;\n}(event_manager_1.EventManager));\nexports.LayerMouseEvents = LayerMouseEvents;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar generate_layer_model_1 = require(\"../surface/generate-layer-model\");\nvar make_instance_uniform_name_1 = require(\"./make-instance-uniform-name\");\n/**\n * This class does a whoooooole lot of making the magical instancing optimization controls possible.\n *\n * Our instancing hackyness comes from the idea that uniforms are fast, and you don't have to commit\n * ALL of them when you touch just a little piece, and you don't have worry about drivers not supporting\n * partial vertex buffer updates.\n *\n * This also is WebGL 1.0 compatible without any extensions that are poorly implemented. And again: does\n * NOT require entire attribute buffer commits.\n *\n * Uniforms are limited for any given draw call. So we have to create multiple materials to support\n * chunks of the instances that need to be drawn. We then have to associate an instance with the set\n * of uniforms that is related to the instance and keep them paired together. If we have too many instances\n * we must generate more buffers to accomodate them.\n *\n * If we remove instances, we must free up the uniform set so that others can use the uniforms. While the uniforms\n * are not in use, the instance should not be rendering.\n */\nvar InstanceUniformManager = /** @class */ (function () {\n    function InstanceUniformManager(layer, scene) {\n        /** The generated buffers by this manager */\n        this.buffers = [];\n        /** The uniform clusters that are free and can be used by an instance */\n        this.availableClusters = [];\n        /** A lookup of an instance to a cluster of uniforms associated with it */\n        this.instanceToCluster = new Map();\n        /** A map of a cluster of uniforms to the buffer it comes from */\n        this.clusterToBuffer = new Map();\n        this.layer = layer;\n        var maxUniformBlock = 0;\n        layer.instanceAttributes.forEach(function (attributes) {\n            maxUniformBlock = Math.max(attributes.block, maxUniformBlock);\n        });\n        this.uniformBlocksPerInstance = maxUniformBlock + 1;\n        this.scene = scene;\n    }\n    /**\n     * This adds an instance to the manager and gives the instance an associative\n     * block of uniforms to work with.\n     */\n    InstanceUniformManager.prototype.add = function (instance) {\n        // If there are no available buffers, we must add a buffer\n        if (this.availableClusters.length <= 0) {\n            this.makeNewBuffer();\n        }\n        var cluster = this.availableClusters.pop();\n        if (cluster) {\n            this.instanceToCluster.set(instance.uid, cluster);\n        }\n        else {\n            console.warn('No valid cluster available for instance added to uniform manager.');\n        }\n        return cluster;\n    };\n    /**\n     * Free all resources this manager may be holding onto\n     */\n    InstanceUniformManager.prototype.destroy = function () {\n        this.buffers.forEach(function (buffer) {\n            buffer.geometry.dispose();\n            buffer.material.dispose();\n        });\n    };\n    /**\n     * This retireves the uniforms associated with an instance, or returns nothing\n     * if the instance has not been associated yet.\n     */\n    InstanceUniformManager.prototype.getUniforms = function (instance) {\n        return this.instanceToCluster.get(instance.uid);\n    };\n    /**\n     * Disassociates an instance with it's group of uniforms and makes the instance\n     * in the buffer no longer drawable.\n     */\n    InstanceUniformManager.prototype.remove = function (instance) {\n        var cluster = this.instanceToCluster.get(instance.uid);\n        // If the instance is associated with a cluster, we can add the cluster back to being available\n        // For another instance.\n        if (cluster) {\n            this.instanceToCluster.delete(instance.uid);\n            this.availableClusters.push(cluster);\n        }\n        return cluster;\n    };\n    /**\n     * Clears all elements of this manager from the current scene it was in.\n     */\n    InstanceUniformManager.prototype.removeFromScene = function () {\n        var _this = this;\n        this.buffers.forEach(function (buffer, index) {\n            _this.scene.container.remove(buffer.model);\n        });\n        this.scene = null;\n    };\n    /**\n     * Applies the buffers to the provided scene for rendering.\n     */\n    InstanceUniformManager.prototype.setScene = function (scene) {\n        var _this = this;\n        this.buffers.forEach(function (buffer, index) {\n            _this.scene.container.add(buffer.model);\n        });\n        this.scene = scene;\n    };\n    /**\n     * This generates a new buffer of uniforms to associate instances with.\n     */\n    InstanceUniformManager.prototype.makeNewBuffer = function () {\n        // We generate a new geometry object for the buffer as the geometry\n        // Needs to have it's own unique draw range per buffer for optimal\n        // Performance\n        var newGeometry = new Three.BufferGeometry();\n        this.layer.vertexAttributes.forEach(function (attribute) {\n            newGeometry.addAttribute(attribute.name, attribute.materialAttribute);\n        });\n        // Ensure the draw range covers every instance in the geometry.\n        newGeometry.drawRange.start = 0;\n        newGeometry.drawRange.count = this.layer.maxInstancesPerBuffer * this.layer.instanceVertexCount;\n        // This is the material that is generated for the layer that utilizes all of the generated and\n        // Injected shader IO and shader fragments\n        var newMaterial = this.layer.material.clone();\n        // Now make a Model for the buffer so it can be rendered withn the scene\n        var newModel = generate_layer_model_1.generateLayerModel(this.layer, newGeometry, newMaterial);\n        // We render junkloads of instances in a buffer. Culling will have to happen\n        // On an instance level.\n        newModel.frustumCulled = false;\n        // Make our new buffer which will manage the geometry and everything necessary\n        var buffer = {\n            activeInstances: [],\n            clusters: [],\n            firstInstance: 0,\n            geometry: newGeometry,\n            lastInstance: 0,\n            material: newMaterial,\n            model: newModel,\n        };\n        this.buffers.push(buffer);\n        // Now that we have created a new buffer, we have all of it's uniforms\n        // To use to render more instances. We must take the instancing uniforms\n        // And divvy them up into clusters for our available buffer.\n        var uniformIndex = 0;\n        var uniformName = make_instance_uniform_name_1.makeInstanceUniformNameArray();\n        var instanceData = newMaterial.uniforms[uniformName];\n        // We must ensure the vector objects are TOTALLY unique otherwise they'll get shared across buffers\n        instanceData.value = instanceData.value.map(function () { return new Three.Vector4(0.0, 0.0, 0.0, 0.0); });\n        for (var i = 0, end = this.layer.maxInstancesPerBuffer; i < end; ++i) {\n            var cluster = {\n                instanceIndex: i,\n                uniform: instanceData,\n                uniformRange: [uniformIndex, 0],\n            };\n            uniformIndex += this.uniformBlocksPerInstance;\n            cluster.uniformRange[1] = uniformIndex;\n            buffer.clusters.push(cluster);\n            this.availableClusters.push(cluster);\n            this.clusterToBuffer.set(cluster, buffer);\n        }\n        // Grab the global uniforms from the material and add it to the uniform's materialUniform list so that\n        // We can keep uniforms consistent across all Instances\n        for (var i = 0, end = this.layer.uniforms.length; i < end; ++i) {\n            var uniform = this.layer.uniforms[i];\n            uniform.materialUniforms.push(newMaterial.uniforms[uniform.name]);\n        }\n        // Now that we are ready to utilize the buffer, let's add it to the scene so it may be rendered.\n        // Each new buffer equates to one draw call.\n        if (this.scene) {\n            this.scene.container.add(buffer.model);\n        }\n    };\n    return InstanceUniformManager;\n}());\nexports.InstanceUniformManager = InstanceUniformManager;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nvar maxPopulation = 5;\nvar maxDepth = 10;\n/**\n * This filters a quad tree query by type\n *\n * @export\n * @template T\n */\nfunction filterQuery(type, queryValues) {\n    var filtered = [];\n    queryValues.forEach(function (obj) {\n        if (type.find(function (t) { return obj instanceof t; })) {\n            filtered.push(obj);\n        }\n    });\n    return filtered;\n}\nexports.filterQuery = filterQuery;\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n *\n * @class Quadrants\n */\nvar Quadrants = /** @class */ (function () {\n    /**\n     * Creates an instance of Quadrants.\n     *\n     * @param bounds The bounds this will create quandrants for\n     * @param depth  The child depth of this element\n     *\n     * @memberOf Quadrants\n     */\n    function Quadrants(bounds, depth) {\n        var mid = bounds.mid;\n        this.TL = new Node(bounds.x, mid.x, bounds.y, mid.y, depth);\n        this.TR = new Node(mid.x, bounds.right, bounds.y, mid.y, depth);\n        this.BL = new Node(bounds.x, mid.x, mid.y, bounds.bottom, depth);\n        this.BR = new Node(mid.x, bounds.right, mid.y, bounds.bottom, depth);\n    }\n    /**\n     * Ensures all memory is released for all nodes and all references are removed\n     * to potentially high memory consumption items\n     *\n     * @memberOf Quadrants\n     */\n    Quadrants.prototype.destroy = function () {\n        this.TL.destroy();\n        this.TR.destroy();\n        this.BL.destroy();\n        this.BR.destroy();\n        delete this.TL;\n        delete this.TR;\n        delete this.BL;\n        delete this.BR;\n    };\n    return Quadrants;\n}());\nexports.Quadrants = Quadrants;\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n *\n * @export\n * @class Node\n */\nvar Node = /** @class */ (function () {\n    /**\n     * Creates an instance of Node.\n     *\n     * @param l     The bounding left wall of the space this node covers\n     * @param r     The bounding right wall of the space this node covers\n     * @param t     The bounding top wall of the space this node covers\n     * @param b     The bounding bottom wall of the space this node covers\n     * @param depth The depth within the quad tree this node resides\n     *\n     * @memberOf Node\n     */\n    function Node(left, right, top, bottom, depth) {\n        this.children = [];\n        this.depth = 0;\n        // If params insertted\n        if (arguments.length >= 4) {\n            this.bounds = new bounds_1.Bounds({\n                height: top - bottom,\n                width: right - left,\n                x: left,\n                y: top,\n            });\n        }\n        // Otherwise, make tiny start area\n        else {\n            this.bounds = new bounds_1.Bounds({\n                height: 1,\n                width: 1,\n                x: 0,\n                y: 0,\n            });\n        }\n        // Ensure the depth is set\n        this.depth = depth || 0;\n    }\n    /**\n     * Destroys this node and ensures all child nodes are destroyed as well.\n     *\n     * @memberOf Node\n     */\n    Node.prototype.destroy = function () {\n        delete this.children;\n        delete this.bounds;\n        if (this.nodes) {\n            this.nodes.destroy();\n            delete this.nodes;\n        }\n    };\n    /**\n     * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n     * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n     * this quad tree spans (and this is the root node), the quad tree will expand to include\n     * the new child.\n     *\n     * @param child The Bounds type object to inject\n     * @param props Properties that can be retrieved with the child object if applicable\n     *\n     * @returns True if the insertion was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.add = function (child, props) {\n        // This is the entry function for adding children, so we must first expand our top node\n        // To cover the area that the child is located.\n        // If we're in bounds, then let's just add the child\n        if (child.isInside(this.bounds)) {\n            return this.doAdd(child);\n        }\n        // Otherwise, we need to expand first\n        else {\n            this.cover(child);\n            return this.add(child, props);\n        }\n    };\n    /**\n     * Adds a list of new children to this quad tree. It performs the same operations as\n     * addChild for each child in the list, however, it more efficiently recalculates the\n     * bounds necessary to cover the area the children cover.\n     *\n     * @param children      List of Bounds objects to inject\n     * @param childrenProps List of props to associate with each element\n     *\n     * @memberOf Node\n     */\n    Node.prototype.addAll = function (children, childrenProps) {\n        var _this = this;\n        // Ensure the properties are at least defined\n        childrenProps = childrenProps || [];\n        // Make sure we cover the entire area of all the children.\n        // We can speed this up a lot if we first calculate the total bounds the new children covers\n        var minX = Number.MAX_VALUE;\n        var minY = Number.MAX_VALUE;\n        var maxX = -Number.MAX_VALUE;\n        var maxY = -Number.MAX_VALUE;\n        // Get the dimensions of the new bounds\n        children.forEach(function (child) {\n            if (child.x < minX) {\n                minX = child.x;\n            }\n            if (child.right > maxX) {\n                maxX = child.right;\n            }\n            if (child.bottom > maxY) {\n                maxY = child.bottom;\n            }\n            if (child.y < minY) {\n                minY = child.y;\n            }\n        });\n        // Make sure our bounds includes the specified bounds\n        this.cover(new bounds_1.Bounds({\n            height: maxY - minY,\n            width: maxX - minX,\n            x: minX,\n            y: minY,\n        }));\n        // Add all of the children into the tree\n        children.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n     * This will cause all children to be re-injected into the tree.\n     *\n     * @param bounds The bounds to include in the tree's coverage\n     *\n     * @memberOf Node\n     */\n    Node.prototype.cover = function (bounds) {\n        var _this = this;\n        // If we are already covering the area: abort\n        if (bounds.isInside(this.bounds)) {\n            return;\n        }\n        // Make our bounds cover the new area\n        this.bounds.encapsulate(bounds);\n        this.bounds.x -= 1;\n        this.bounds.y -= 1;\n        this.bounds.width += 2;\n        this.bounds.height += 4;\n        // Get all of the children underneath this node\n        var allChildren = this.gatherChildren([]);\n        // Destroy the split nodes\n        if (this.nodes) {\n            // Completely...destroy...\n            this.nodes.destroy();\n            delete this.nodes;\n        }\n        // Reinsert all children with the new dimensions in place\n        allChildren.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * When adding children, this performs the actual action of injecting the child into the tree\n     * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n     *\n     * @param child The Bounds item to inject into the tree\n     * @param props The props to remain associated with the child\n     *\n     * @returns True if the injection was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.doAdd = function (child) {\n        // If nodes are present, then we have already exceeded the population of this node\n        if (this.nodes) {\n            if (child.isInside(this.nodes.TL.bounds)) {\n                return this.nodes.TL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.TR.bounds)) {\n                return this.nodes.TR.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BL.bounds)) {\n                return this.nodes.BL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BR.bounds)) {\n                return this.nodes.BR.doAdd(child);\n            }\n            // Otherwise, this is a child overlapping this border\n            this.children.push(child);\n            return true;\n        }\n        // Otherwise, we have not had a split due to population limits being exceeded\n        else if (child.isInside(this.bounds)) {\n            this.children.push(child);\n            // If we exceeded our population for this quadrant, it is time to split up\n            if (this.children.length > maxPopulation && this.depth < maxDepth) {\n                this.split();\n            }\n            return true;\n        }\n        // This is when there is something wrong with the insertted child. The bounds\n        // For the quad should have grown without issue, but in this case the bounds\n        // Could not grow to accomodate the child.\n        if (isNaN(child.width + child.height + child.x + child.y)) {\n            console.error('Child did not fit into bounds because a dimension is NaN', child);\n        }\n        else if (child.area === 0) {\n            console.error('Child did not fit into bounds because the area is zero', child);\n        }\n        // Don't insert the child and continue\n        return true;\n    };\n    /**\n     * Collects all children of all the current and sub nodes into a single list.\n     *\n     * @param list The list we must aggregate children into\n     *\n     * @return The list specified as the list parameter\n     */\n    Node.prototype.gatherChildren = function (list) {\n        list = list.concat(this.children);\n        if (this.nodes) {\n            this.nodes.TL.gatherChildren(list);\n            this.nodes.TR.gatherChildren(list);\n            this.nodes.BL.gatherChildren(list);\n            this.nodes.BR.gatherChildren(list);\n        }\n        return list;\n    };\n    /**\n     * Entry query for determining query type based on input object\n     *\n     * @param bounds Can be a Bounds or a Point object\n     * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n     *               information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return An array of children that intersects with the query\n     */\n    Node.prototype.query = function (bounds, visit) {\n        // Query a rectangle\n        if (bounds instanceof bounds_1.Bounds) {\n            if (bounds.hitBounds(this.bounds)) {\n                return this.queryBounds(bounds, [], visit);\n            }\n            // Return an empty array when nothing is collided with\n            return [];\n        }\n        // Query a point\n        if (this.bounds.containsPoint(bounds)) {\n            return this.queryPoint(bounds, [], visit);\n        }\n        // Return an empty array when nothing is collided with\n        return [];\n    };\n    /**\n     * Queries children for intersection with a bounds object\n     *\n     * @param b     The Bounds to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return     Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryBounds = function (b, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.hitBounds(b)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (b.hitBounds(this.nodes.TL.bounds)) {\n                this.nodes.TL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.TR.bounds)) {\n                this.nodes.TR.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BL.bounds)) {\n                this.nodes.BL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BR.bounds)) {\n                this.nodes.BR.queryBounds(b, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Queries children for intersection with a point\n     *\n     * @param p     The Point to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return      Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryPoint = function (p, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.containsPoint(p)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (this.nodes.TL.bounds.containsPoint(p)) {\n                this.nodes.TL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.TR.bounds.containsPoint(p)) {\n                this.nodes.TR.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BL.bounds.containsPoint(p)) {\n                this.nodes.BL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BR.bounds.containsPoint(p)) {\n                this.nodes.BR.queryPoint(p, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Creates four sub quadrants for this node.\n     */\n    Node.prototype.split = function () {\n        // Gather all items to be handed down\n        var allChildren = this.gatherChildren([]);\n        // Gather all props for the children to be handed down as well\n        this.nodes = new Quadrants(this.bounds, this.depth + 1);\n        this.children = [];\n        while (allChildren.length > 0) {\n            var child = allChildren.pop();\n            if (child)\n                this.doAdd(child);\n        }\n    };\n    /**\n     * Traverses the quad tree returning every quadrant encountered\n     *\n     * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n     */\n    Node.prototype.visit = function (cb) {\n        var finished = Boolean(cb(this));\n        if (this.nodes && !finished) {\n            this.nodes.TL.visit(cb);\n            this.nodes.TR.visit(cb);\n            this.nodes.BL.visit(cb);\n            this.nodes.BR.visit(cb);\n        }\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar QuadTree = /** @class */ (function (_super) {\n    __extends(QuadTree, _super);\n    function QuadTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return QuadTree;\n}(Node));\nexports.QuadTree = QuadTree;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar data_bounds_1 = require(\"../util/data-bounds\");\nfunction value(val, ref, scaleRatio) {\n    var parse = \"\" + val;\n    var num = parseFloat(parse);\n    if (isNaN(num)) {\n        return 0;\n    }\n    // If this is a percentage use the reference as the num to multiply against\n    if (parse.indexOf('%') > -1) {\n        return (num / 100.0) * ref;\n    }\n    return num * scaleRatio;\n}\n/**\n * This evaluates an absolute position with a reference to produce meaningful bounds.\n *\n * The scaleRatio provided should be available in or for percents to have the same weighting\n * as whole number values.\n */\nfunction getAbsolutePositionBounds(item, reference, scaleRatio) {\n    if (reference.width === 0 || reference.height === 0) {\n        console.warn('An AbsolutePosition evaluated to invalid dimensions.', 'Please ensure that the object provided and the reference has valid dimensions', 'to produce dimensions with width and height that are non-zero.', 'item:', item, 'reference:', reference.toString());\n    }\n    var bounds = data_bounds_1.DataBounds.emptyBounds();\n    var width;\n    var height;\n    // Calculate the horizontal values\n    if (item.width) {\n        bounds.width = value(item.width, reference.width, scaleRatio);\n        if ('left' in item) {\n            bounds.x = value(item.left, reference.width, scaleRatio);\n        }\n        else if ('right' in item) {\n            bounds.x = reference.width - value(item.right, reference.width, scaleRatio) - bounds.width;\n        }\n    }\n    else {\n        var left = value(item.left, reference.width, scaleRatio);\n        var right = reference.width - value(item.right, reference.width, scaleRatio);\n        width = right - left;\n        if (width < 0) {\n            console.warn('An AbsolutePosition evaluated to invalid dimensions.', 'Please ensure that the object provided and the reference has valid dimensions', 'to produce dimensions with width and height that are greater than zero.', 'item:', item, 'reference:', reference.toString());\n        }\n        bounds.x = left;\n        bounds.width = width;\n    }\n    // Calculate the vertical values\n    if (item.height) {\n        bounds.height = value(item.height, reference.height, scaleRatio);\n        if ('top' in item) {\n            bounds.y = value(item.top, reference.height, scaleRatio);\n        }\n        else if ('bottom' in item) {\n            bounds.y = reference.height - value(item.bottom, reference.height, scaleRatio) - bounds.height;\n        }\n    }\n    else {\n        var top_1 = value(item.top, reference.height, scaleRatio);\n        var bottom = reference.height - value(item.bottom, reference.height, scaleRatio);\n        height = bottom - top_1;\n        if (width < 0) {\n            console.warn('An AbsolutePosition evaluated to invalid dimensions.', 'Please ensure that the object provided and the reference has valid dimensions', 'to produce dimensions with width and height that are greater than zero.', 'item:', item, 'reference:', reference.toString());\n        }\n        bounds.y = top_1;\n        bounds.height = height;\n    }\n    if (bounds.width === 0 || bounds.height === 0 || isNaN(bounds.x + bounds.y + bounds.width + bounds.height)) {\n        bounds.x = 0;\n        bounds.y = 0;\n        bounds.width = reference.width;\n        bounds.height = reference.height;\n    }\n    return bounds;\n}\nexports.getAbsolutePositionBounds = getAbsolutePositionBounds;\n","module.exports = \"// These are projection methods utilizing the simpler camera breakdown approach\\n\\nvec3 cameraSpace(vec3 world) {\\n  return (world + cameraOffset) * cameraScale;\\n}\\n\\nvec3 cameraSpaceSize(vec3 worldSize) {\\n  return worldSize * cameraScale;\\n}\\n\\nvec4 clipSpace(vec3 world) {\\n  return vec4(((projection * modelView) * vec4(cameraSpace(world), 1.0)).xyz, 1.0);\\n}\\n\\nvec4 clipSpaceSize(vec3 worldSize) {\\n  return vec4(((projection * modelView) * vec4(cameraSpaceSize(worldSize), 0.0)).xyz, 1.0);\\n}\\n\"","module.exports = \"// When instancing is enabled, it causes a major list of uniforms to be generated\\n// it also generates a massive search tree to retrieve the correct unforms in question.\\n${instanceUniformDeclarations}\\n\\n// This is the uniforms provided by the system along with the uniforms created by the layer\\n${layerUniforms}\\n\\n// This is the attributes generated for vertex attributes\\n${vertexAttributes}\\n\\n// This is the methods and set up needed to retrieve a block of data for an instance\\n${instanceDataRetrieval}\\n\"","module.exports = \"// This is the injected dereferencing of the instance attributes\\n  int instanceIndex = int(instance);\\n  ${instanceDestructuring}\\n\\n  // This is a special injected instance attribute. It lets the system\\n  // control specific instances ability to draw, which allows the backend\\n  // system greater control on how it optimizes draw calls and it's buffers.\\n  if (_active == 0.0) {\\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n\\n    // Quick exit to prevent any geometry from arising from the instance\\n    return;\\n  }\\n\"","module.exports = \"// This is the fragment shader generated by the system\\n${layerUniforms}\\n\\n// --------------- The fragment shader provided by the layer ------------------\\n${shader}\\n\"","module.exports = \"// This is the vertex shader generated by the system\\n${shaderInput}\\n${projectionMethods}\\n// --------------- Vertex shader provided by the layer -----------------\\n${shader}\\n\"","module.exports = \"int instanceSize = ${instanceBlockCount};\\n\\nvec4 getBlock(int index, int instanceIndex) {\\n  return instanceData[(instanceSize * instanceIndex) + index];\\n}\\n\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar types_1 = require(\"../../types\");\nvar make_instance_uniform_name_1 = require(\"../../util/make-instance-uniform-name\");\nvar shader_templating_1 = require(\"../../util/shader-templating\");\nvar template_vars_1 = require(\"../fragments/template-vars\");\nvar instanceRetrievalArrayFragment = require('../fragments/instance-retrieval-array.vs');\n/** Defines the elements for destructuring out of a vector */\nvar VECTOR_COMPONENTS = ['x', 'y', 'z', 'w'];\n/** Converts a size to a shader type */\nvar sizeToType = {\n    1: 'float',\n    2: 'vec2',\n    3: 'vec3',\n    4: 'vec4',\n    9: 'mat3',\n    16: 'mat4',\n    /** This is the special case for instance attributes that want an atlas resource */\n    99: 'vec4',\n};\nfunction makeUniformArrayDeclaration(totalBlocks) {\n    return {\n        fragment: \"uniform vec4 \" + make_instance_uniform_name_1.makeInstanceUniformNameArray() + \"[\" + totalBlocks + \"];\",\n        materialUniforms: [\n            {\n                name: make_instance_uniform_name_1.makeInstanceUniformNameArray(),\n                type: '4fv',\n                value: new Array(totalBlocks)\n                    .fill(0)\n                    .map(function () { return new Three.Vector4(0, 0, 0, 0); }),\n            },\n        ],\n    };\n}\nexports.makeUniformArrayDeclaration = makeUniformArrayDeclaration;\nfunction makeInstanceRetrievalArray(blocksPerInstance) {\n    var templateOptions = {};\n    templateOptions[template_vars_1.templateVars.instanceBlockCount] = \"\" + blocksPerInstance;\n    var required = {\n        name: 'makeInstanceRetrievalArray',\n        values: [\n            template_vars_1.templateVars.instanceBlockCount,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(instanceRetrievalArrayFragment, templateOptions, required);\n    return results.shader;\n}\nexports.makeInstanceRetrievalArray = makeInstanceRetrievalArray;\nfunction makeInstanceDestructuringArray(instanceAttributes, blocksPerInstance) {\n    var out = '';\n    // Generate the blocks\n    for (var i = 0; i < blocksPerInstance; ++i) {\n        out += \"  vec4 block\" + i + \" = getBlock(\" + i + \", instanceIndex);\\n\";\n    }\n    instanceAttributes.forEach(function (attribute) {\n        var block = attribute.block;\n        // If we have a size the size of a block, then don't swizzle the vector\n        if (attribute.size === types_1.InstanceAttributeSize.FOUR) {\n            out += \"  \" + sizeToType[attribute.size] + \" \" + attribute.name + \" = block\" + block + \";\\n\";\n        }\n        // If the attribute is an atlas, then we use the special ATLAS size and don't swizzle the vector\n        else if (attribute.atlas) {\n            out += \"  \" + sizeToType[types_1.InstanceAttributeSize.ATLAS] + \" \" + attribute.name + \" = block\" + block + \";\\n\";\n        }\n        // Do normal destructuring with any other size and type\n        else {\n            out += \"  \" + sizeToType[attribute.size] + \" \" + attribute.name + \" = block\" + block + \".\" + makeVectorSwizzle(attribute.blockIndex, attribute.size) + \";\\n\";\n        }\n    });\n    return out;\n}\nexports.makeInstanceDestructuringArray = makeInstanceDestructuringArray;\nfunction makeVectorSwizzle(start, size) {\n    return VECTOR_COMPONENTS.slice(start, start + size).join('');\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * The goal of this file is to take in model attributes and instance attributes specified\n * and inject the proper attributes into the shaders so the implementor of the shader does\n * not worry about syncing attribute and uniform names between the JS\n */\nvar types_1 = require(\"../../types\");\nvar shader_templating_1 = require(\"../../util/shader-templating\");\nvar webgl_stat_1 = require(\"../../util/webgl-stat\");\nvar template_vars_1 = require(\"../fragments/template-vars\");\nvar uniform_instance_block_array_1 = require(\"./uniform-instance-block-array\");\n// These are all of the necessary fragments that will comprise our shader that is generated\nvar vertexShaderComposition = require('../fragments/vertex-shader-composition.vs');\nvar fragmentShaderComposition = require('../fragments/fragment-shader-composition.fs');\nvar instanceDestructuringArray = require('../fragments/instance-destructuring-array.vs');\nvar shaderInput = require('../fragments/shader-input.vs');\nvar projectionMethods = require('../fragments/projection-methods.vs');\n// Constants\n/**\n * Defines how many floats are available in a uniform block\n * What is a uniform block you ask? Why let me tell you! It is how opengl stores and communicates uniforms\n * to the GPU. Whenever you declare a uniform, it will use a hunk of memory. You can see how many uniforms\n * a GPU can have via the paramter MAX_VERTEX_UNIFORM_VECTORS. The number returned is the number of blocks\n * we can use for uniforms in the vertex shader. A BLOCK is an entire vec4.\n *\n * When you declare a uniform in your shader, it will use an entire BLOCK at the MINIMUM.\n *\n * A uniform float uses 1 block. vec2 uses 1 block. vec3 uses one block. vec4 uses one block.\n * mat4 uses 4 blocks. mat3 uses 3 blocks.\n *\n * etc etc.\n */\nvar MAX_USE_PER_BLOCK = 4;\n/** Converts a size to a shader type */\nvar sizeToType = {\n    1: 'float',\n    2: 'vec2',\n    3: 'vec3',\n    4: 'vec4',\n    9: 'mat3',\n    16: 'mat4',\n    99: 'sampler2D',\n};\nfunction calculateUniformBlockUseage(uniforms) {\n    var count = 0;\n    for (var i = 0, end = uniforms.length; i < end; ++i) {\n        count += Math.ceil(uniforms[i].size / 4);\n    }\n    return count;\n}\n/**\n * This method is the main algorithm for piecing together all of the attributes necessary\n * and injecting them into the shaders.\n *\n * @param shaders\n * @param vertexAttributes\n * @param instanceAttributes\n */\nfunction injectFragments(shaders, vertexAttributes, instanceAttributes, uniforms) {\n    var shaderInputMetrics = generateShaderInputs(vertexAttributes, instanceAttributes, uniforms);\n    var templateOptions = (_a = {},\n        _a[template_vars_1.templateVars.projectionMethods] = generateProjectionMethods(),\n        _a[template_vars_1.templateVars.shaderInput] = shaderInputMetrics.fragment,\n        _a[template_vars_1.templateVars.shader] = generateVertexShader(shaders, instanceAttributes, shaderInputMetrics.metrics.maxInstancesPerBuffer, shaderInputMetrics.metrics.blocksPerInstance),\n        _a);\n    var required = {\n        name: 'vertex shader composition',\n        values: [\n            template_vars_1.templateVars.projectionMethods,\n            template_vars_1.templateVars.shaderInput,\n            template_vars_1.templateVars.shader,\n        ],\n    };\n    var vertexShaderResults = shader_templating_1.shaderTemplate(vertexShaderComposition, templateOptions, required);\n    templateOptions = (_b = {},\n        _b[template_vars_1.templateVars.layerUniforms] = generateUniforms(uniforms, types_1.ShaderInjectionTarget.FRAGMENT),\n        _b[template_vars_1.templateVars.shader] = generateFragmentShader(shaders),\n        _b);\n    required = {\n        name: 'fragment shader composition',\n        values: [\n            template_vars_1.templateVars.layerUniforms,\n            template_vars_1.templateVars.shader,\n        ],\n    };\n    var fragmentShaderResults = shader_templating_1.shaderTemplate(fragmentShaderComposition, templateOptions, required);\n    return {\n        fs: fragmentShaderResults.shader,\n        materialUniforms: shaderInputMetrics.materialUniforms,\n        maxInstancesPerBuffer: shaderInputMetrics.metrics.maxInstancesPerBuffer,\n        vs: vertexShaderResults.shader,\n    };\n    var _a, _b;\n}\nexports.injectFragments = injectFragments;\n/**\n * Creates the projection method fragment\n */\nfunction generateProjectionMethods() {\n    var templateOptions = {};\n    var required = {\n        name: 'projection methods',\n        values: [],\n    };\n    var results = shader_templating_1.shaderTemplate(projectionMethods, templateOptions, required);\n    return results.shader;\n}\n/**\n * Generates the fragments for shader IO such as vertex and instance attributes\n */\nfunction generateShaderInputs(vertexAttributes, instanceAttributes, uniforms) {\n    var templateOptions = {};\n    var instancingInfo = generateInstanceDataLookupOptions(templateOptions, instanceAttributes, uniforms);\n    var additionalOptions = (_a = {},\n        _a[template_vars_1.templateVars.layerUniforms] = generateUniforms(uniforms, types_1.ShaderInjectionTarget.VERTEX),\n        _a[template_vars_1.templateVars.vertexAttributes] = generateVertexAttributes(vertexAttributes),\n        _a);\n    Object.assign(templateOptions, additionalOptions);\n    var required = {\n        name: 'shader input',\n        values: [\n            template_vars_1.templateVars.instanceDataRetrieval,\n            template_vars_1.templateVars.instanceUniformDeclarations,\n            template_vars_1.templateVars.layerUniforms,\n            template_vars_1.templateVars.vertexAttributes,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(shaderInput, templateOptions, required);\n    return {\n        fragment: results.shader,\n        materialUniforms: instancingInfo.materialUniforms,\n        metrics: instancingInfo.metrics,\n    };\n    var _a;\n}\n/**\n *\n * @param uniforms\n */\nfunction generateUniforms(uniforms, injectionType) {\n    var out = '';\n    var injection = injectionType || types_1.ShaderInjectionTarget.VERTEX;\n    uniforms.forEach(function (uniform) {\n        uniform.shaderInjection = uniform.shaderInjection || types_1.ShaderInjectionTarget.VERTEX;\n        if (uniform.shaderInjection === injection || uniform.shaderInjection === types_1.ShaderInjectionTarget.ALL) {\n            out += \"uniform \" + (uniform.qualifier || '') + (uniform.qualifier ? ' ' : '') + sizeToType[uniform.size] + \" \" + uniform.name + \";\\n\";\n        }\n    });\n    return out;\n}\n/**\n * This takes in the layer's vertex shader and transforms any required templating within the\n * shader.\n */\nfunction generateVertexShader(shaders, instanceAttributes, maxInstancesPerBuffer, blocksPerInstance) {\n    var templateOptions = (_a = {},\n        _a[template_vars_1.templateVars.attributes] = makeInstanceAttributeReferences(instanceAttributes, blocksPerInstance),\n        _a);\n    var required = {\n        name: 'layer vertex shader',\n        values: [\n            template_vars_1.templateVars.attributes,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(shaders.vs, templateOptions, required);\n    return results.shader;\n    var _a;\n}\nfunction generateFragmentShader(shaders) {\n    var templateOptions = {};\n    var required = {\n        name: 'layer fragment shader',\n        values: [],\n    };\n    var results = shader_templating_1.shaderTemplate(shaders.fs, templateOptions, required);\n    return results.shader;\n}\n/**\n * This generates the inline attribute references needed to be able to reference instance attribute\n * vars.\n */\nfunction makeInstanceAttributeReferences(instanceAttributes, blocksPerInstance) {\n    var templateOptions = {};\n    templateOptions[template_vars_1.templateVars.blocksPerInstance] = \"\" + blocksPerInstance;\n    templateOptions[template_vars_1.templateVars.instanceDestructuring] = makeInstanceDestructuring(instanceAttributes, blocksPerInstance);\n    var required = {\n        name: 'instance attributes fragment',\n        values: [\n            template_vars_1.templateVars.instanceDestructuring,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(instanceDestructuringArray, templateOptions, required);\n    return results.shader;\n}\n/**\n * This generates an in method destructuring pattern to make instance attributes available within a method.\n */\nfunction makeInstanceDestructuring(instanceAttributes, blocksPerInstance) {\n    return uniform_instance_block_array_1.makeInstanceDestructuringArray(instanceAttributes, blocksPerInstance);\n}\n/**\n * This generates the model attribute declarations\n */\nfunction generateVertexAttributes(vertexAttributes) {\n    var out = '';\n    vertexAttributes.forEach(function (attribute) {\n        out += \"attribute \" + sizeToType[attribute.size] + \" \" + (attribute.qualifier || '') + ((attribute.qualifier && ' ') || '') + attribute.name + \";\\n\";\n    });\n    return out;\n}\n/**\n * This method generates the chunk of shader that is responsible for providing\n */\nfunction generateInstanceDataLookupOptions(templateOptions, instanceAttributes, uniforms) {\n    // This is how many uniform blocks the current device can utilize in a shader\n    var maxUniforms = webgl_stat_1.WebGLStat.MAX_VERTEX_UNIFORMS;\n    // This reflects how many uniform blocks are available for instancing\n    var instanceUniformBlockCount = maxUniforms - calculateUniformBlockUseage(uniforms);\n    // Go through the attributes provided and calculate the number of blocks requested\n    // Also sort the attributes by block and pack the block useage down.\n    var sortedInstanceAttributes = instanceAttributes.slice(0).sort(function (a, b) { return a.block - b.block; });\n    var currentBlock = sortedInstanceAttributes[0].block;\n    var trueBlockIndex = 0;\n    // This tracks how much a block is used\n    var blockUseage = new Map();\n    var innerBlockUseage = new Map();\n    sortedInstanceAttributes.forEach(function (attribute) {\n        if (attribute.block !== currentBlock) {\n            currentBlock = attribute.block;\n            trueBlockIndex++;\n        }\n        var attributeSize = attribute.size;\n        var oldUseage = blockUseage.get(trueBlockIndex) || 0;\n        var newUseage = oldUseage + attributeSize;\n        // Make sure the block isn't over used thus losing attribute information\n        if (newUseage > MAX_USE_PER_BLOCK) {\n            console.error(\"An instance attribute was specified that over fills the maximum allowed useage for a block.\", \"\\nMax Allowed per block \" + MAX_USE_PER_BLOCK, \"\\nAttribute: \" + attribute.name + \" Block Specified: \" + attribute.block, \"\\nTotal blocks used with this attribute: \" + newUseage);\n            return;\n        }\n        // Store how much of the block is utilized\n        blockUseage.set(trueBlockIndex, newUseage);\n        // We can now auto specify the inner index of where the attribute lines up within the block\n        attribute.blockIndex = oldUseage;\n        // Now we examine the attributes request of use inside the block and make sure there is no\n        // Overlap\n        var innerUseage = innerBlockUseage.get(trueBlockIndex) || new Map();\n        if (attribute.blockIndex + attributeSize > MAX_USE_PER_BLOCK) {\n            console.error(\"An instance attribute was specified that would fill indices greater than the block allows.\", \"\\nMax index per block \" + MAX_USE_PER_BLOCK, \"\\nAttribute: \" + attribute.name + \" Block Index: \" + attribute.blockIndex + \" Size: \" + attribute.size + \" Block Index + Size: \" + (attribute.blockIndex + attribute.size));\n            return;\n        }\n        for (var i = attribute.blockIndex; i < attribute.blockIndex + attributeSize; ++i) {\n            if (innerUseage.get(i)) {\n                console.error(\"An instance attribute was specified who's block index overaps another attributes useage\", \"\\nMax index per block \" + MAX_USE_PER_BLOCK, \"\\nAttribute: \" + attribute.name + \" Block Index: \" + attribute.blockIndex + \" Size: \" + attribute.size + \" Block Index + Size: \" + (attribute.blockIndex + attribute.size));\n                return;\n            }\n        }\n        // Adjust the attribute to reflect the actual bock it is using\n        attribute.block = trueBlockIndex;\n    });\n    /**\n     * We now must create a decision tree large enough to accomodate our instances.\n     * Explanation:\n     * Our shaders CANNOT do switch case statements, NOR can they handle large amounts of\n     * chained if else statements (it will produce a memory exhausted error on many systems).\n     * There is even limits on how deep if else statements can be nested within each other.\n     * Lastly: We do NOT want to create an array in memory in the shader to create a lookup for our\n     * instance data as it would need to be allocated EVERY vertex operation.\n     *\n     * So, our best workaround is to make a decision tree that balances how many decisions per\n     * node it can make vs the depth of decisions. The more decisions per node, the less deep the\n     * tree will be, but will suffer some performance cost. But the less deep the tree, the better\n     * chance you will not get a 'memory exhausted' error.\n     */\n    var branchesPerLevel = 4;\n    var blocksPerInstance = trueBlockIndex + 1;\n    // This determines how many instances our allowed uniforms will allow for a single draw call\n    var maxInstancesPerBuffer = Math.floor(instanceUniformBlockCount / blocksPerInstance);\n    // Generate the decision tree and uniform declarations\n    var instancingMetrics = makeUniformInstanceDataOptions(templateOptions, maxInstancesPerBuffer, branchesPerLevel, blocksPerInstance, sortedInstanceAttributes);\n    return {\n        materialUniforms: instancingMetrics.materialUniforms,\n        metrics: {\n            blocksPerInstance: blocksPerInstance,\n            maxInstancesPerBuffer: maxInstancesPerBuffer,\n        },\n    };\n}\n/**\n * This generates all of the necessary templating information from uniform-instance-data\n * in order to provide an instance data getter for the application.\n */\nfunction makeUniformInstanceDataOptions(templateOptions, maxInstancesPerBuffer, branchesPerLevel, blocksPerInstance, instanceAttributes) {\n    // Make a list containing all instance indicies that will be utilized and will be split\n    // Out into the decision tree\n    var instances = [];\n    for (var i = 0; i < maxInstancesPerBuffer; ++i) {\n        instances.push(i);\n    }\n    // Make the uniform declaration. Uniform declaration simultaneously gives us the material uniforms necessary\n    // To apply to our three material.\n    var uniformMetrics = makeInstanceUniformDeclaration(maxInstancesPerBuffer * blocksPerInstance, instanceAttributes);\n    templateOptions[template_vars_1.templateVars.instanceUniformDeclarations] = uniformMetrics.fragment;\n    templateOptions[template_vars_1.templateVars.instanceBlockCount] = \"\" + blocksPerInstance;\n    // This way produced the data retrieval method for decision tree instancing\n    // *templateOptions[templateVars.instanceDataRetrieval] = makeInstanceRetrievalDecisionTree(blocksPerInstance, instances, branchesPerLevel);\n    // This method produces the data retrieval method for array instancing\n    templateOptions[template_vars_1.templateVars.instanceDataRetrieval] = uniform_instance_block_array_1.makeInstanceRetrievalArray(blocksPerInstance);\n    return {\n        materialUniforms: uniformMetrics.materialUniforms,\n    };\n}\n/**\n * This generates the declaration of all of the individual uniform registers for instancing.\n */\nfunction makeInstanceUniformDeclaration(instanceUniformBlockCount, attributes) {\n    var out = '';\n    var blockQualifierDedup = new Map();\n    var maxBlock = 0;\n    // Dedup the attributes specified for the\n    attributes.forEach(function (attribute) {\n        var qualifiers = blockQualifierDedup.get(attribute.block) || new Map();\n        // Make sure the qualifier is added for the block\n        qualifiers.set(attribute.qualifier, true);\n        // Get the max block in use\n        maxBlock = Math.max(maxBlock, attribute.block);\n    });\n    // Generate the full string for the specified qualifiers\n    var blockQualifiers = new Map();\n    blockQualifierDedup.forEach(function (qualifierList, block) {\n        var allQualifiers = Array.from(qualifierList.keys());\n        blockQualifiers.set(block, allQualifiers.join(' ') + \" \");\n    });\n    // Generate our uniform declarations\n    // Const blockCount = maxBlock + 1;\n    // This method produces the instancing declaration for a search tree.\n    // *out += makeUniformDecisionTreeDeclarations(instanceUniformBlockCount, blockCount, blockQualifiers, materialUniforms);\n    // This method produces the instancing declaration for an instancing array\n    var declaration = uniform_instance_block_array_1.makeUniformArrayDeclaration(instanceUniformBlockCount);\n    out += declaration.fragment;\n    out += \"\\n\";\n    return {\n        fragment: out,\n        materialUniforms: declaration.materialUniforms,\n    };\n}\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar images_1 = require(\"../base-layers/images\");\nvar labels_1 = require(\"../base-layers/labels\");\nvar bounds_1 = require(\"../primitives/bounds\");\nvar attribute_generation_1 = require(\"../shaders/util/attribute-generation\");\nvar generate_default_scene_1 = require(\"../surface/generate-default-scene\");\nvar generate_layer_geometry_1 = require(\"../surface/generate-layer-geometry\");\nvar generate_layer_material_1 = require(\"../surface/generate-layer-material\");\nvar generate_layer_model_1 = require(\"../surface/generate-layer-model\");\nvar inject_shader_io_1 = require(\"../surface/inject-shader-io\");\nvar mouse_event_manager_1 = require(\"../surface/mouse-event-manager\");\nvar scene_1 = require(\"../surface/scene\");\nvar view_1 = require(\"../surface/view\");\nvar data_bounds_1 = require(\"../util/data-bounds\");\nvar instance_uniform_manager_1 = require(\"../util/instance-uniform-manager\");\nvar layer_mouse_events_1 = require(\"./event-managers/layer-mouse-events\");\nvar texture_1 = require(\"./texture\");\nvar atlas_resource_manager_1 = require(\"./texture/atlas-resource-manager\");\nvar DEFAULT_BACKGROUND_COLOR = new Three.Color(1.0, 1.0, 1.0);\nfunction isCanvas(val) {\n    return Boolean(val.getContext);\n}\nfunction isString(val) {\n    return Boolean(val.substr);\n}\nfunction isWebGLContext(val) {\n    return Boolean(val.canvas);\n}\n/**\n * Used for reactive layer generation and updates.\n */\nfunction createLayer(layerClass, props) {\n    return [layerClass, props];\n}\nexports.createLayer = createLayer;\n/**\n * This is a manager for layers. It will use voidgl layers to intelligently render resources\n * as efficiently as possible. Layers will be rendered in the order they are provided and this\n * surface will provide some basic camera controls by default.\n */\nvar LayerSurface = /** @class */ (function () {\n    function LayerSurface() {\n        /** This is the atlas manager that will help with modifying and tracking atlas' generated for the layers */\n        this.atlasManager = new texture_1.AtlasManager();\n        /** This is all of the layers in this manager by their id */\n        this.layers = new Map();\n        /** This is the density the rendering renders for the surface */\n        this.pixelRatio = window.devicePixelRatio;\n        /**\n         * This is all of the available scenes and their views for this surface. Layers reference the IDs\n         * of the scenes and the views to be a part of their rendering state.\n         */\n        this.scenes = new Map();\n        /**\n         * This is all of the views currently generated for this surface paired with the scene they render.\n         */\n        this.sceneViews = [];\n        /**\n         * This flags all layers by id for disposal at the end of every render. A Layer must be recreated\n         * after each render in order to clear it's disposal flag. This is the trick to making this a\n         * reactive system.\n         */\n        this.willDisposeLayer = new Map();\n        /**\n         * This is used to help resolve concurrent draws. There are some very async operations that should\n         * not overlap in draw calls.\n         */\n        this.isBufferingAtlas = false;\n    }\n    Object.defineProperty(LayerSurface.prototype, \"gl\", {\n        /** Read only getter for the gl context */\n        get: function () {\n            return this.context;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This adds a layer to the manager which will manage all of the resource lifecycles of the layer\n     * as well as additional helper injections to aid in instancing and shader i/o.\n     */\n    LayerSurface.prototype.addLayer = function (layer) {\n        if (!layer.id) {\n            console.warn('All layers must have an id');\n            return layer;\n        }\n        if (this.layers.get(layer.id)) {\n            console.warn('All layer\\'s ids must be unique per layer manager');\n            return layer;\n        }\n        // We add the layer to our management\n        this.layers.set(layer.id, layer);\n        // Now we initialize the layer's gl components\n        this.initLayer(layer);\n        return layer;\n    };\n    /**\n     * Free all resources consumed by this surface that gets applied to the GPU.\n     */\n    LayerSurface.prototype.destroy = function () {\n        this.layers.forEach(function (layer) { return layer.destroy(); });\n        this.resourceManager.destroy();\n        this.mouseManager.destroy();\n        this.sceneViews.forEach(function (sceneView) { return sceneView.scene.destroy(); });\n        this.renderer.dispose();\n        // TODO: Instances should be implementing destroy for these clean ups.\n        labels_1.LabelInstance.destroy();\n        images_1.ImageInstance.destroy();\n    };\n    /**\n     * This is the draw loop that must be called per frame for updates to take effect and display.\n     */\n    LayerSurface.prototype.draw = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var scenes, i, end, scene, views, layers, k, endk, view, j, endj, layer, didBuffer;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        scenes = Array.from(this.scenes.values());\n                        // Loop through scenes\n                        for (i = 0, end = scenes.length; i < end; ++i) {\n                            scene = scenes[i];\n                            views = Array.from(scene.viewById.values());\n                            layers = scene.layers;\n                            // Make sure the layers are depth sorted\n                            scene.sortLayers();\n                            // Loop through the views\n                            for (k = 0, endk = views.length; k < endk; ++k) {\n                                view = views[k];\n                                // We must perform any operations necessary to make the view camera fit the viewport\n                                // Correctly\n                                view.fitViewtoViewport(new bounds_1.Bounds({\n                                    height: this.context.canvas.height,\n                                    width: this.context.canvas.width,\n                                    x: 0,\n                                    y: 0,\n                                }));\n                                // Let the layers update their uniforms before the draw\n                                for (j = 0, endj = layers.length; j < endj; ++j) {\n                                    layer = layers[j];\n                                    // Update the layer with the view it is about to be rendered with\n                                    layer.view = view;\n                                    // Make sure the layer is given the opportunity to update all of it's uniforms\n                                    // To match the view state and update any unresolved diffs internally\n                                    layer.draw();\n                                }\n                                // Now perform the rendering\n                                this.drawSceneView(scene.container, view);\n                            }\n                        }\n                        // After we have drawn our views of our scenes, we can now ensure all of the bounds\n                        // Are updated in the interactions and flag our interactions ready for mouse input\n                        if (this.mouseManager.waitingForRender) {\n                            this.sceneViews.forEach(function (sceneView) {\n                                sceneView.bounds = new data_bounds_1.DataBounds(sceneView.view.screenBounds);\n                                sceneView.bounds.data = sceneView;\n                            });\n                            this.mouseManager.waitingForRender = false;\n                        }\n                        if (!!this.isBufferingAtlas) return [3 /*break*/, 2];\n                        this.isBufferingAtlas = true;\n                        return [4 /*yield*/, this.resourceManager.dequeueRequests()];\n                    case 1:\n                        didBuffer = _a.sent();\n                        this.isBufferingAtlas = false;\n                        // If buffering did occur and completed, then we should be performing a draw to ensure all of the\n                        // Changes are committed and pushed out.\n                        if (didBuffer)\n                            this.draw();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This finalizes everything and sets up viewports and clears colors and\n     */\n    LayerSurface.prototype.drawSceneView = function (scene, view) {\n        var offset = { x: view.viewBounds.left, y: view.viewBounds.top };\n        var size = view.viewBounds;\n        var rendererSize = this.renderer.getSize();\n        rendererSize.width *= this.renderer.getPixelRatio();\n        rendererSize.height *= this.renderer.getPixelRatio();\n        var background = view.background;\n        // Set the scissor rectangle.\n        this.context.enable(this.context.SCISSOR_TEST);\n        this.context.scissor(offset.x, rendererSize.height - offset.y - size.height, size.width, size.height);\n        // If a background is established, we should clear the background color\n        // Specified for this context\n        if (view.background) {\n            // Clear the rect of color and depth so the region is totally it's own\n            this.context.clearColor(background[0], background[1], background[2], background[3]);\n        }\n        // Get the view's clearing preferences\n        if (view.clearFlags) {\n            this.context.clear((view.clearFlags.indexOf(view_1.ClearFlags.COLOR) > -1 ? this.context.COLOR_BUFFER_BIT : 0x0) |\n                (view.clearFlags.indexOf(view_1.ClearFlags.DEPTH) > -1 ? this.context.DEPTH_BUFFER_BIT : 0x0) |\n                (view.clearFlags.indexOf(view_1.ClearFlags.STENCIL) > -1 ? this.context.STENCIL_BUFFER_BIT : 0x0));\n        }\n        // Default clearing is depth and color\n        else {\n            this.context.clear(this.context.COLOR_BUFFER_BIT | this.context.DEPTH_BUFFER_BIT);\n        }\n        // Only if the viewport is different from last viewport should we attempt a viewport state\n        // Change.\n        var box = this.currentViewport;\n        if (!box || box.x !== offset.x || box.y !== offset.y || box.width !== size.width || box.height !== size.height) {\n            this.renderer.setViewport(offset.x / this.pixelRatio, offset.y / this.pixelRatio, size.width, size.height);\n            this.currentViewport = {\n                height: size.height,\n                width: size.width,\n                x: offset.x,\n                y: offset.y,\n            };\n        }\n        // Render the scene with the provided view metrics\n        this.renderer.render(scene, view.viewCamera.baseCamera);\n    };\n    /**\n     * This allows for querying a view's screen bounds. Null is returned if the view id\n     * specified does not exist.\n     */\n    LayerSurface.prototype.getViewSize = function (viewId) {\n        for (var _i = 0, _a = this.sceneViews; _i < _a.length; _i++) {\n            var sceneView = _a[_i];\n            if (sceneView.view.id === viewId) {\n                return sceneView.view.screenBounds;\n            }\n        }\n        return null;\n    };\n    /**\n     * This queries a view's window into a world's space.\n     */\n    LayerSurface.prototype.getViewWorldBounds = function (viewId) {\n        for (var _i = 0, _a = this.sceneViews; _i < _a.length; _i++) {\n            var sceneView = _a[_i];\n            if (sceneView.view.id === viewId) {\n                var view = sceneView.view;\n                if (view.screenBounds) {\n                    var topLeft = view.viewToWorld({ x: 0, y: 0 });\n                    var bottomRight = view.screenToWorld({ x: view.screenBounds.right, y: view.screenBounds.bottom });\n                    return new bounds_1.Bounds({\n                        bottom: bottomRight.y,\n                        left: topLeft.x,\n                        right: bottomRight.x,\n                        top: topLeft.y,\n                    });\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n        return null;\n    };\n    /**\n     * This is the beginning of the system. This should be called immediately after the surface is constructed.\n     * We make this mandatory outside of the constructor so we can make it follow an async pattern.\n     */\n    LayerSurface.prototype.init = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Make sure our desired pixel ratio is set up\n                        this.pixelRatio = options.pixelRatio || this.pixelRatio;\n                        // Make sure we have a gl context to work with\n                        this.setContext(options.context);\n                        // Initialize our GL needs that set the basis for rendering\n                        this.initGL(options);\n                        // Initialize our event manager that handles mouse interactions/gestures with the canvas\n                        this.initMouseManager(options);\n                        // Initialize any resources requested or needed, such as textures or rendering surfaces\n                        return [4 /*yield*/, this.initResources(options)];\n                    case 1:\n                        // Initialize any resources requested or needed, such as textures or rendering surfaces\n                        _a.sent();\n                        return [2 /*return*/, this];\n                }\n            });\n        });\n    };\n    /**\n     * This initializes the Canvas GL contexts needed for rendering.\n     */\n    LayerSurface.prototype.initGL = function (options) {\n        var _this = this;\n        if (!this.context) {\n            console.error('Can not initialize Layer Surface as a valid GL context was not established.');\n            return;\n        }\n        // Get the canvas of our context to set up our Three settings\n        var canvas = this.context.canvas;\n        // Get the starting width and height so adjustments don't affect it\n        var width = canvas.width;\n        var height = canvas.height;\n        // Generate the renderer along with it's properties\n        this.renderer = new Three.WebGLRenderer({\n            // Context supports rendering to an alpha canvas only if the background color has a transparent\n            // Alpha value.\n            alpha: options.background && (options.background[3] < 1.0),\n            // Yes to antialias! Make it preeeeetty!\n            antialias: true,\n            // Make three use an existing canvas rather than generate another\n            canvas: canvas,\n            // TODO: This should be toggleable. If it's true it allows us to snapshot the rendering in the canvas\n            //       But we dont' always want it as it makes performance drop a bit.\n            preserveDrawingBuffer: true,\n        });\n        // We want clearing to be controlled via the layer\n        this.renderer.autoClear = false;\n        // Charts don't really have face culling. Just 2D shapes\n        this.renderer.setFaceCulling(Three.CullFaceNone);\n        // This sets the pixel ratio to handle differing pixel densities in screens\n        this.renderer.setSize(width, height);\n        // Set the pixel ratio to match the pixel density of the monitor in use\n        this.renderer.setPixelRatio(this.pixelRatio);\n        // Applies the background color and establishes whether or not the context supports\n        // Alpha or not\n        if (options.background) {\n            this.renderer.setClearColor(new Three.Color(options.background[0], options.background[1], options.background[2]), options.background[3]);\n        }\n        // If a background color was not established, then we set a default background color\n        else {\n            this.renderer.setClearColor(DEFAULT_BACKGROUND_COLOR);\n        }\n        // Once we have made our renderer we now make us a default scene to which we can add objects\n        this.defaultSceneElements = generate_default_scene_1.generateDefaultScene(this.context);\n        this.defaultSceneElements.view.background = options.background;\n        // Set the default scene\n        this.scenes.set(this.defaultSceneElements.scene.id, this.defaultSceneElements.scene);\n        // Make a scene view depth tracker so we can track the order each scene view combo is drawn\n        var sceneViewDepth = 0;\n        // Make a SceneView for the default scene and view for mouse interactions\n        this.sceneViews.push({\n            depth: ++sceneViewDepth,\n            scene: this.defaultSceneElements.scene,\n            view: this.defaultSceneElements.view,\n        });\n        // Turn on the scissor test to keep the rendering clipped within the\n        // Render region of the context\n        this.context.enable(this.context.SCISSOR_TEST);\n        // Add the requested scenes to the surface and apply the necessary defaults\n        if (options.scenes) {\n            options.scenes.forEach(function (sceneOptions) {\n                // Make us a new scene based on the requested options\n                var newScene = new scene_1.Scene(sceneOptions);\n                // Make sure the default view is available for each scene\n                // IFF no view is provided for the scene\n                if (sceneOptions.views.length === 0) {\n                    newScene.addView(_this.defaultSceneElements.view);\n                    _this.sceneViews.push({\n                        depth: ++sceneViewDepth,\n                        scene: newScene,\n                        view: _this.defaultSceneElements.view,\n                    });\n                }\n                // Generate the views requested for the scene\n                sceneOptions.views.forEach(function (viewOptions) {\n                    var newView = new view_1.View(viewOptions);\n                    newView.camera = newView.camera || _this.defaultSceneElements.camera;\n                    newView.viewCamera = newView.viewCamera || _this.defaultSceneElements.viewCamera;\n                    newView.viewport = newView.viewport || _this.defaultSceneElements.viewport;\n                    newView.pixelRatio = _this.pixelRatio;\n                    newScene.addView(newView);\n                    for (var _i = 0, _a = _this.sceneViews; _i < _a.length; _i++) {\n                        var sceneView = _a[_i];\n                        if (sceneView.view.id === newView.id) {\n                            console.warn('You can NOT have two views with the same id. Please use unique identifiers for every view generated.');\n                        }\n                    }\n                    _this.sceneViews.push({\n                        depth: ++sceneViewDepth,\n                        scene: newScene,\n                        view: newView,\n                    });\n                });\n                _this.scenes.set(sceneOptions.key, newScene);\n            });\n        }\n    };\n    /**\n     * This does special initialization by gathering the layers shader IO, generates a material\n     * and injects special automated uniforms and attributes to make instancing work for the\n     * shader.\n     */\n    LayerSurface.prototype.initLayer = function (layer) {\n        // Set the resource manager this surface utilizes to the layer\n        layer.resource = this.resourceManager;\n        // For the sake of initializing uniforms to the correct values, we must first add the layer to it's appropriate\n        // Scene so that the necessary values will be in place for the sahder IO\n        var scene = this.addLayerToScene(layer);\n        // Get the shader metrics the layer desires\n        var shaderIO = layer.initShader();\n        // Clean out nulls provided as a convenience to the layer\n        shaderIO.instanceAttributes = shaderIO.instanceAttributes.filter(Boolean);\n        shaderIO.vertexAttributes = shaderIO.vertexAttributes.filter(Boolean);\n        shaderIO.uniforms = shaderIO.uniforms.filter(Boolean);\n        // Get the injected shader IO attributes and uniforms\n        var _a = inject_shader_io_1.injectShaderIO(layer, shaderIO), vertexAttributes = _a.vertexAttributes, instanceAttributes = _a.instanceAttributes, uniforms = _a.uniforms;\n        // Generate the actual shaders to be used by injecting all of the necessary fragments and injecting\n        // Instancing fragments\n        var shaderMetrics = attribute_generation_1.injectFragments(shaderIO, vertexAttributes, instanceAttributes, uniforms);\n        // Generate the geometry this layer will be utilizing\n        var geometry = generate_layer_geometry_1.generateLayerGeometry(shaderMetrics.maxInstancesPerBuffer, vertexAttributes, shaderIO.vertexCount);\n        // This is the material that is generated for the layer that utilizes all of the generated and\n        // Injected shader IO and shader fragments\n        var material = generate_layer_material_1.generateLayerMaterial(layer, shaderMetrics.vs, shaderMetrics.fs, uniforms, shaderMetrics.materialUniforms);\n        // And now we can now generate the mesh that will be added to the scene\n        var model = generate_layer_model_1.generateLayerModel(layer, geometry, material);\n        // Now that all of the elements of the layer are complete, let us apply them to the layer\n        layer.geometry = geometry;\n        layer.instanceAttributes = instanceAttributes;\n        layer.instanceVertexCount = shaderIO.vertexCount;\n        layer.material = material;\n        layer.maxInstancesPerBuffer = shaderMetrics.maxInstancesPerBuffer;\n        layer.model = model;\n        layer.uniforms = uniforms;\n        layer.vertexAttributes = vertexAttributes;\n        // The layer now needs a specialized uniform manager to provide instances with an appropriate set of uniforms\n        // To be able to render.\n        layer.uniformManager = new instance_uniform_manager_1.InstanceUniformManager(layer, scene);\n        return layer;\n    };\n    /**\n     * Initializes elements for handling mouse interactions with the canvas.\n     */\n    LayerSurface.prototype.initMouseManager = function (options) {\n        // We must inject an event manager to broadcast events through the layers themselves\n        var eventManagers = (options.eventManagers || []).concat([\n            new layer_mouse_events_1.LayerMouseEvents(this.sceneViews),\n        ]);\n        // Generate the mouse manager for the layer\n        this.mouseManager = new mouse_event_manager_1.MouseEventManager(this.context.canvas, this.sceneViews, eventManagers, options.handlesWheelEvents);\n    };\n    /**\n     * This initializes resources needed or requested such as textures or render surfaces.\n     */\n    LayerSurface.prototype.initResources = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _i, _a, resource;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!options.atlasResources) return [3 /*break*/, 4];\n                        _i = 0, _a = options.atlasResources;\n                        _b.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3 /*break*/, 4];\n                        resource = _a[_i];\n                        return [4 /*yield*/, this.atlasManager.createAtlas(resource)];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        // Initialize our resource manager with the atlas manager\n                        this.resourceManager = new atlas_resource_manager_1.AtlasResourceManager({\n                            atlasManager: this.atlasManager,\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This finds the scene and view the layer belongs to based on the layer's props. For invalid or not provided\n     * props, the layer gets added to default scenes and views.\n     */\n    LayerSurface.prototype.addLayerToScene = function (layer) {\n        // Get the scene the layer will add itself to\n        var scene = this.scenes.get(layer.props.scene);\n        if (!scene) {\n            // If no scene is specified by the layer, or the scene identifier is invalid, then we add the layer\n            // To the default scene.\n            scene = this.defaultSceneElements.scene;\n            if (layer.props.scene) {\n                console.warn('Layer specified a scene that is not within the layer surface manager. Layer will be added to the default scene.');\n            }\n        }\n        // Add the layer to the scene for rendering\n        scene.addLayer(layer);\n        return scene;\n    };\n    /**\n     * Discontinues a layer's management by this surface. This will invalidate any resources\n     * the layer was using in association with the context. If the layer is re-insertted, it will\n     * be revaluated as though it were a new layer.\n     */\n    LayerSurface.prototype.removeLayer = function (layer) {\n        // Make sure we are removing a layer that exists in the system\n        if (!this.layers.get(layer && layer.id)) {\n            console.warn('Tried to remove a layer that is not in the manager.', layer);\n            return layer;\n        }\n        layer.uniformManager.removeFromScene();\n        layer.destroy();\n        this.layers.delete(layer.id);\n        return layer;\n    };\n    /**\n     * Used for reactive rendering and diffs out the layers for changed layers.\n     */\n    LayerSurface.prototype.render = function (layerInitializers) {\n        var _this = this;\n        // Loop through all of the initializers and properly add and remove layers as needed\n        if (layerInitializers && layerInitializers.length > 0) {\n            layerInitializers.forEach(function (init) {\n                var layerClass = init[0];\n                var props = init[1];\n                var existingLayer = _this.layers.get(props.key);\n                if (existingLayer) {\n                    existingLayer.willUpdateProps(props);\n                    Object.assign(existingLayer.props, props);\n                    existingLayer.didUpdateProps();\n                }\n                else {\n                    _this.addLayer(new layerClass(Object.assign({}, layerClass.defaultProps, props)));\n                }\n                _this.willDisposeLayer.set(props.key, false);\n            });\n        }\n        // Take any layer that retained it's disposal flag and trash it\n        this.willDisposeLayer.forEach(function (dispose, layerId) {\n            if (dispose) {\n                _this.removeLayer(_this.layers.get(layerId));\n            }\n        });\n        // Resolve that all disposals occurred\n        this.willDisposeLayer.clear();\n        // Reflag every layer for removal again so creation of layers will determine\n        // Which layers remain for a reactive pattern\n        this.layers.forEach(function (layer, id) {\n            _this.willDisposeLayer.set(id, true);\n        });\n    };\n    /**\n     * This must be executed when the canvas changes size so that we can re-calculate the scenes and views\n     * dimensions for handling all of our rendered elements.\n     */\n    LayerSurface.prototype.fitContainer = function (pixelRatio) {\n        var container = this.context.canvas.parentElement;\n        if (container) {\n            var canvas = this.context.canvas;\n            canvas.className = '';\n            canvas.setAttribute('style', '');\n            container.style.position = 'relative';\n            canvas.style.position = 'absolute';\n            canvas.style.left = '0xp';\n            canvas.style.top = '0xp';\n            canvas.style.width = '100%';\n            canvas.style.height = '100%';\n            canvas.setAttribute('width', '');\n            canvas.setAttribute('height', '');\n            var containerBox = container.getBoundingClientRect();\n            var box = canvas.getBoundingClientRect();\n            this.resize(box.width || 100, containerBox.height || 100);\n        }\n    };\n    LayerSurface.prototype.resize = function (width, height, pixelRatio) {\n        var _this = this;\n        this.pixelRatio = pixelRatio || this.pixelRatio;\n        this.sceneViews.forEach(function (sceneView) { return sceneView.view.pixelRatio = _this.pixelRatio; });\n        this.renderer.setSize(width || 100, height || 100);\n        this.renderer.setPixelRatio(this.pixelRatio);\n        this.mouseManager.resize();\n    };\n    /**\n     * This establishes the rendering canvas context for the surface.\n     */\n    LayerSurface.prototype.setContext = function (context) {\n        if (!context) {\n            return;\n        }\n        if (isWebGLContext(context)) {\n            this.context = context;\n        }\n        else if (isCanvas(context)) {\n            this.context = context.getContext('webgl') || context.getContext('experimental-webgl');\n        }\n        else if (isString(context)) {\n            var element = document.getElementById(context);\n            if (isCanvas(element)) {\n                this.setContext(element);\n            }\n        }\n    };\n    return LayerSurface;\n}());\nexports.LayerSurface = LayerSurface;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./layer-surface\"));\n__export(require(\"./event-manager\"));\n__export(require(\"./generate-default-scene\"));\n__export(require(\"./generate-layer-geometry\"));\n__export(require(\"./generate-layer-material\"));\n__export(require(\"./generate-layer-model\"));\n__export(require(\"./inject-shader-io\"));\n__export(require(\"./layer\"));\n__export(require(\"./mouse-event-manager\"));\n__export(require(\"./scene\"));\n__export(require(\"./texture\"));\n__export(require(\"./view\"));\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float borderSize;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  vertexColor = color * color.a;\\n  gl_PointSize = radius * 2.0 * pixelRatio;\\n  borderSize = ((thickness * pixelRatio) / gl_PointSize) * 2.0;\\n  edgeSharpness = mix(0.8, 0.01, min(gl_PointSize / (45.0 * pixelRatio), 1.0));\\n  gl_Position = clipSpace(vec3(center, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\n/** This is the color of the ring */\\nvarying vec4 vertexColor;\\n/**\\n * This is how sharp the ring renders. For tiny rings, it's best to have\\n * less sharpness to better convey the shape of a circle. A good starter setting:\\n * edgeSharpness = mix(0.8, 0.01, min(gl_PointSize / 45.0, 1.0));\\n */\\nvarying float edgeSharpness;\\n/**\\n * This should be a value that sets the thickness of the ring in normal space\\n * relative to the PointSize\\n */\\nvarying float borderSize;\\n/**\\n * This is the ([0 - 1], [0 - 1])\\n */\\nvarying vec2 pointCoord;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius + (radius * 0.01),\\n    dot(dist, dist) * 4.0\\n  );\\n}\\n\\nvoid main() {\\n  float outer_step_factor = circle(gl_PointCoord.xy, 1.0);\\n  float inner_step_factor = circle(gl_PointCoord.xy, 1.0 - borderSize);\\n\\n  gl_FragColor = mix(\\n    mix(                        // Select the outer color outside of the inner radius\\n      vec4(0.0, 0.0, 0.0, 0.0),    // Select invisible outside of inner and outer radius\\n      vertexColor,                  // Select outer color outside of inner, but inside outer\\n      outer_step_factor\\n    ),\\n    vec4(0.0, 0.0, 0.0, 0.0),                 // Select inner color inside inner\\n    inner_step_factor\\n  );\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar max = Math.max;\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar RingLayer = /** @class */ (function (_super) {\n    __extends(RingLayer, _super);\n    function RingLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    RingLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given circle\n            boundsAccessor: function (ring) { return new primitives_1.Bounds({\n                height: ring.radius * 2,\n                width: ring.radius * 2,\n                x: ring.x - ring.radius,\n                y: ring.y - ring.radius,\n            }); },\n            // Provide a precise hit test for the ring\n            hitTest: function (ring, point, view) {\n                var r = ring.radius / max.apply(void 0, view.camera.scale);\n                var delta = [\n                    point.x - ring.x,\n                    point.y - ring.y,\n                ];\n                return (delta[0] * delta[0] + delta[1] * delta[1]) < (r * r);\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    RingLayer.prototype.initShader = function () {\n        return {\n            fs: require('./ring-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'center',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'radius',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.radius]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.color; },\n                },\n                {\n                    block: 2,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'thickness',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.thickness]; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (_) { return [1]; },\n                },\n                {\n                    name: 'atlas',\n                    size: types_1.UniformSize.ONE,\n                    update: function (_) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    defaults: [0],\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (_) { return [0, 0, 0]; },\n                },\n            ],\n            vertexCount: 1,\n            vs: require('./ring-layer.vs'),\n        };\n    };\n    RingLayer.prototype.getModelType = function () {\n        return {\n            modelType: Three.Points,\n        };\n    };\n    RingLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return RingLayer;\n}(layer_1.Layer));\nexports.RingLayer = RingLayer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar util_1 = require(\"../../util\");\nvar RingInstance = /** @class */ (function (_super) {\n    __extends(RingInstance, _super);\n    function RingInstance(options) {\n        var _this = _super.call(this, options) || this;\n        _this.color = [1.0, 1.0, 1.0, 1.0];\n        _this.depth = 0;\n        _this.radius = 0;\n        _this.thickness = 1;\n        _this.x = 0;\n        _this.y = 0;\n        _this.color = options.color || [1, 1, 1, 1];\n        _this.depth = options.depth || 0;\n        _this.radius = options.radius;\n        _this.thickness = options.thickness || _this.thickness;\n        _this.x = options.x;\n        _this.y = options.y;\n        return _this;\n    }\n    Object.defineProperty(RingInstance.prototype, \"width\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RingInstance.prototype, \"height\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RingInstance.prototype, \"innerRadius\", {\n        get: function () {\n            return this.radius - this.thickness;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        instance_provider_1.observable\n    ], RingInstance.prototype, \"color\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RingInstance.prototype, \"depth\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RingInstance.prototype, \"radius\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RingInstance.prototype, \"thickness\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RingInstance.prototype, \"x\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RingInstance.prototype, \"y\", void 0);\n    return RingInstance;\n}(util_1.Instance));\nexports.RingInstance = RingInstance;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./ring-instance\"));\n__export(require(\"./ring-layer\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar instance_1 = require(\"../../util/instance\");\nvar types_1 = require(\"../types\");\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nvar anchorCalculator = (_a = {},\n    _a[types_1.AnchorType.TopLeft] = function (anchor, rectangle) {\n        anchor.x = -anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopMiddle] = function (anchor, rectangle) {\n        anchor.x = rectangle.width / 2.0;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopRight] = function (anchor, rectangle) {\n        anchor.x = rectangle.width + anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.MiddleLeft] = function (anchor, rectangle) {\n        anchor.x = -anchor.padding;\n        anchor.y = rectangle.height / 2;\n    },\n    _a[types_1.AnchorType.Middle] = function (anchor, rectangle) {\n        anchor.x = rectangle.width / 2.0;\n        anchor.y = rectangle.height / 2.0;\n    },\n    _a[types_1.AnchorType.MiddleRight] = function (anchor, rectangle) {\n        anchor.x = rectangle.width + anchor.padding;\n        anchor.y = rectangle.height / 2.0;\n    },\n    _a[types_1.AnchorType.BottomLeft] = function (anchor, rectangle) {\n        anchor.x = -anchor.padding;\n        anchor.y = rectangle.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomMiddle] = function (anchor, rectangle) {\n        anchor.x = rectangle.width / 2.0;\n        anchor.y = rectangle.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomRight] = function (anchor, rectangle) {\n        anchor.x = rectangle.width + anchor.padding;\n        anchor.y = rectangle.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.Custom] = function (anchor, rectangle) {\n        anchor.x = anchor.x || 0;\n        anchor.y = anchor.y || 0;\n    },\n    _a);\n/**\n * This generates a new rectangle instance which will render a single line of text for a given layer.\n * There are restrictions surrounding rectangles due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a rectangle via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Rectangles should only be so long.\n * - Multiline is not supported inherently\n * - Once a rectangle is constructed, only SOME properties can be altered thereafter\n *\n * A rectangle that is constructed can only have some properties set upon creating the rectangle and are locked\n * thereafter. The only way to modify them would be to destroy the rectangle, then construct a new rectangle\n * with the modifications. This has to deal with performance regarding rasterizing the rectangle\n */\nvar RectangleInstance = /** @class */ (function (_super) {\n    __extends(RectangleInstance, _super);\n    function RectangleInstance(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the rendered color of the rectangle */\n        _this.color = [0, 0, 0, 1];\n        /** Depth sorting of the rectangle (or the z value of the lable) */\n        _this.depth = 0;\n        /** The height of the rectangle as it is to be rendered in world space */\n        _this.height = 1;\n        /** Sets the way the rectangle scales with the world */\n        _this.scaling = types_1.ScaleType.BOUND_MAX;\n        /** The width of the rectangle as it is to be rendered in world space */\n        _this.width = 1;\n        /** The x coordinate where the rectangle will be anchored to in world space */\n        _this.x = 0;\n        /** The y coordinate where the rectangle will be anchored to in world space */\n        _this.y = 0;\n        // These are properties that can be altered, but have side effects from being changed\n        /** This is the anchor location on the  */\n        _this._anchor = {\n            padding: 0,\n            type: types_1.AnchorType.TopLeft,\n            x: 0,\n            y: 0,\n        };\n        _this.depth = options.depth || _this.depth;\n        _this.color = options.color || _this.color;\n        _this.scaling = options.scaling || _this.scaling;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        _this.width = options.width || 1;\n        _this.height = options.height || 1;\n        // Make sure the anchor is set to the appropriate location\n        options.anchor && _this.setAnchor(options.anchor);\n        return _this;\n    }\n    Object.defineProperty(RectangleInstance.prototype, \"anchor\", {\n        get: function () {\n            return this._anchor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This applies a new anchor to this rectangle and properly determines it's anchor position on the rectangle\n     */\n    RectangleInstance.prototype.setAnchor = function (anchor) {\n        var newAnchor = {\n            padding: anchor.padding || 0,\n            type: anchor.type,\n            x: anchor.x || 0,\n            y: anchor.y || 0,\n        };\n        // Calculate the new anchors position values\n        anchorCalculator[newAnchor.type](newAnchor, this);\n        // Apply the anchor\n        this._anchor = newAnchor;\n    };\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"color\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"depth\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"height\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"scaling\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"width\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"x\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"y\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"_anchor\", void 0);\n    return RectangleInstance;\n}(instance_1.Instance));\nexports.RectangleInstance = RectangleInstance;\nvar _a;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the image as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the image is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y;\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float((cameraScale.x > cameraScale.y || cameraScale.y > cameraScale.x) && useScaleMode != 0.0);\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n  // Apply the image's tint as a tint to the image\\n  vertexColor = color * color.a;\\n\\n  // Correct aspect ratio.\\n  size = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * size + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the image\\n  float imageScreenScale = mix(\\n    screenSize.y / size.y,\\n    screenSize.x / size.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the image is supposed to be, then we automagically\\n  // scale down our image to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / imageScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\n\\nvoid main() {\\n  gl_FragColor = vertexColor;\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar types_2 = require(\"../types\");\nvar min = Math.min, max = Math.max;\n/**\n * This layer displays Rectangles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar RectangleLayer = /** @class */ (function (_super) {\n    __extends(RectangleLayer, _super);\n    function RectangleLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    RectangleLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given rectangle\n            boundsAccessor: function (rectangle) {\n                var topLeft = [\n                    rectangle.x - rectangle.anchor.x,\n                    rectangle.y - rectangle.anchor.y,\n                ];\n                return new primitives_1.Bounds({\n                    height: rectangle.height,\n                    width: rectangle.width,\n                    x: topLeft[0],\n                    y: topLeft[1],\n                });\n            },\n            // Provide a precise hit test for the circle\n            hitTest: function (rectangle, point, projection) {\n                // The bounds of the rectangle is in world space, but it does not account for the scale mode of the rectangle.\n                // Here, we will apply the scale mode testing to the rectangle\n                var maxScale = max.apply(void 0, projection.camera.scale);\n                var minScale = min.apply(void 0, projection.camera.scale);\n                // If we scale always then the rectangle stays within it's initial world bounds at all times\n                if (rectangle.scaling === types_2.ScaleType.ALWAYS) {\n                    return true;\n                }\n                // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n                // Rectangle the same size. If the camera zooms out then the bounds === the world bounds.\n                else if (rectangle.scaling === types_2.ScaleType.BOUND_MAX) {\n                    // We are zooming out. the bounds will stay within the world bounds\n                    if (minScale <= 1 && maxScale <= 1) {\n                        return true;\n                    }\n                    // We are zooming in. The bounds will shrink to keep the rectangle at max font size\n                    else {\n                        // The location is within the world, but we reverse project the anchor spread\n                        var topLeft = [\n                            rectangle.x - (rectangle.anchor.x / maxScale),\n                            rectangle.y - (rectangle.anchor.y / maxScale),\n                        ];\n                        // Reverse project the size and we should be within the distorted world coordinates\n                        return new primitives_1.Bounds({\n                            height: rectangle.height / maxScale,\n                            width: rectangle.width / maxScale,\n                            x: topLeft[0],\n                            y: topLeft[1],\n                        }).containsPoint(point);\n                    }\n                }\n                // If we never allow the rectangle to scale, then the bounds will grow and shrink to counter the effects\n                // Of the camera zoom\n                else if (rectangle.scaling === types_2.ScaleType.NEVER) {\n                    // The location is within the world, but we reverse project the anchor spread\n                    var topLeft = projection.worldToScreen({\n                        x: rectangle.x - (rectangle.anchor.x / projection.camera.scale[0]),\n                        y: rectangle.y - (rectangle.anchor.y / projection.camera.scale[1]),\n                    });\n                    var screenPoint = projection.worldToScreen(point);\n                    // Reverse project the size and we should be within the distorted world coordinates\n                    return new primitives_1.Bounds({\n                        height: rectangle.height,\n                        width: rectangle.width,\n                        x: topLeft.x,\n                        y: topLeft.y,\n                    }).containsPoint(screenPoint);\n                }\n                return true;\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    RectangleLayer.prototype.initShader = function () {\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: 0,\n            1: 0,\n            2: 0,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./rectangle-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'location',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'anchor',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.anchor.x, o.anchor.y]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'size',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.width, o.height]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'scaling',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scaling]; },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.color; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (u) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./rectangle-layer.vs'),\n        };\n    };\n    RectangleLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    RectangleLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return RectangleLayer;\n}(layer_1.Layer));\nexports.RectangleLayer = RectangleLayer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./rectangle-layer\"));\n__export(require(\"./rectangle-instance\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar texture_1 = require(\"../../surface/texture\");\nvar instance_1 = require(\"../../util/instance\");\nvar types_1 = require(\"../types\");\n/**\n * This is a lookup to find existing rasterizations for a particularly created label so that every\n * new label does not have to go through the rasterization process.\n */\nvar rasterizationLookUp = new Map();\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nvar anchorCalculator = (_a = {},\n    _a[types_1.AnchorType.TopLeft] = function (anchor, label) {\n        anchor.x = -anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopMiddle] = function (anchor, label) {\n        anchor.x = label.width / 2.0;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopRight] = function (anchor, label) {\n        anchor.x = label.width + anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.MiddleLeft] = function (anchor, label) {\n        anchor.x = -anchor.padding;\n        anchor.y = label.height / 2;\n    },\n    _a[types_1.AnchorType.Middle] = function (anchor, label) {\n        anchor.x = label.width / 2.0;\n        anchor.y = label.height / 2.0;\n    },\n    _a[types_1.AnchorType.MiddleRight] = function (anchor, label) {\n        anchor.x = label.width + anchor.padding;\n        anchor.y = label.height / 2.0;\n    },\n    _a[types_1.AnchorType.BottomLeft] = function (anchor, label) {\n        anchor.x = -anchor.padding;\n        anchor.y = label.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomMiddle] = function (anchor, label) {\n        anchor.x = label.width / 2.0;\n        anchor.y = label.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomRight] = function (anchor, label) {\n        anchor.x = label.width + anchor.padding;\n        anchor.y = label.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.Custom] = function (anchor, label) {\n        anchor.x = anchor.x || 0;\n        anchor.y = anchor.y || 0;\n    },\n    _a);\n/**\n * This generates a new label instance which will render a single line of text for a given layer.\n * There are restrictions surrounding labels due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a label via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Labels should only be so long.\n * - Multiline is not supported inherently\n * - Once a label is constructed, only SOME properties can be altered thereafter\n *\n * A label that is constructed can only have some properties set upon creating the label and are locked\n * thereafter. The only way to modify them would be to destroy the label, then construct a new label\n * with the modifications. This has to deal with performance regarding rasterizing the label\n */\nvar LabelInstance = /** @class */ (function (_super) {\n    __extends(LabelInstance, _super);\n    function LabelInstance(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the rendered color of the label */\n        _this.color = [0, 0, 0, 1];\n        /** Depth sorting of the label (or the z value of the label) */\n        _this.depth = 0;\n        /** Sets the way the label scales with the world */\n        _this.scaling = types_1.ScaleType.BOUND_MAX;\n        /** Scales the label uniformly */\n        _this.scale = 1.0;\n        /** The x coordinate where the label will be anchored to in world space */\n        _this.x = 0;\n        /** The y coordinate where the label will be anchored to in world space */\n        _this.y = 0;\n        // The following properties are properties that are locked in after creating this label\n        // As the properties are completely locked into how the label was rasterized and can not\n        // Nor should not be easily adjusted for performance concerns\n        _this._cssFont = '';\n        _this._fontFamily = 'Arial';\n        _this._fontSize = 12;\n        _this._fontStyle = 'normal';\n        _this._fontWeight = 400;\n        _this._maxWidth = 0;\n        _this._text = '';\n        _this._width = 0;\n        _this._height = 0;\n        _this._isDestroyed = false;\n        // These are properties that can be altered, but have side effects from being changed\n        /** This is the anchor location on the  */\n        _this._anchor = {\n            padding: 0,\n            type: types_1.AnchorType.TopLeft,\n            x: 0,\n            y: 0,\n        };\n        _this.depth = options.depth || _this.depth;\n        _this.color = options.color || _this.color;\n        _this.scaling = options.scaling || _this.scaling;\n        _this.scale = options.scale || _this.scale;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        _this._fontFamily = options.fontFamily || _this._fontFamily;\n        _this._fontSize = options.fontSize || _this._fontSize;\n        _this._fontStyle = options.fontStyle || _this._fontStyle;\n        _this._fontWeight = options.fontWeight || _this._fontWeight;\n        _this._maxWidth = options.maxWidth || 0;\n        _this._text = options.text || _this._text;\n        // We get the CSS font string for this label so we can uniquely identify the rasterization\n        // Easily.\n        _this._cssFont = texture_1.LabelRasterizer.makeCSSFont(_this, 1);\n        // This is css font used to look up rasterizations. This lookup includes the max width of the label\n        // Which the css font does not account for\n        var cssFontLookup = _this._cssFont + \"_\" + _this._maxWidth;\n        // Look for other same texts that have been rasterized\n        var rasterizations = rasterizationLookUp.get(_this._text);\n        var rasterization;\n        if (rasterizations) {\n            // Look for those texts that have been rasterized in the same fashion that this label is requesting\n            rasterization = rasterizations.get(cssFontLookup);\n            // If a rasterization exists, we must increment the use reference\n            if (rasterization) {\n                rasterization.references++;\n            }\n        }\n        else {\n            rasterizations = new Map();\n        }\n        // If we have not found an existing rasterization\n        if (!rasterization) {\n            rasterization = {\n                references: 1,\n                resource: new texture_1.LabelAtlasResource(_this),\n            };\n            // Look to see if any rasterization options were specified\n            if (options.rasterization) {\n                rasterization.resource.sampleScale = options.rasterization.scale || 1.0;\n            }\n            // Ensure the sample scale is set. Defaults to 1.0\n            rasterization.resource.sampleScale = rasterization.resource.sampleScale || 1.0;\n            // Rasterize the resource generated for this label. We need it immediately rasterized so\n            // That we can utilize the dimensions for calculations.\n            texture_1.LabelRasterizer.renderSync(rasterization.resource);\n            // Now that we have an official rasterization for this text / label combo, we shall store it\n            // For others to look up\n            rasterizationLookUp.set(_this._text, rasterizations);\n            rasterizations.set(cssFontLookup, rasterization);\n        }\n        _this._rasterization = rasterization;\n        _this._width = rasterization.resource.rasterization.world.width;\n        _this._height = rasterization.resource.rasterization.world.height;\n        // Make sure the anchor is set to the appropriate location\n        options.anchor && _this.setAnchor(options.anchor);\n        return _this;\n    }\n    /**\n     * TODO: We should be implementing the destroy on LabelInstances to clean this up\n     * Frees up module scoped data.\n     */\n    LabelInstance.destroy = function () {\n        rasterizationLookUp.clear();\n    };\n    Object.defineProperty(LabelInstance.prototype, \"cssFont\", {\n        // The following are the getters for the locked in parameters of the label so we can read\n        // The properties but not set any of them.\n        /**\n         * This is the full css string that represents this label. This + the text of the label is essentially\n         * a unique identifier for the rendering of the label and is used to key the rasterization of the label\n         * so that label rasterization can be shared for similar labels.\n         */\n        get: function () { return this._cssFont; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"isDestroyed\", {\n        /** This flag indicates if this label is valid anymore */\n        get: function () { return this._isDestroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontFamily\", {\n        /** This is the font family of the label */\n        get: function () { return this._fontFamily; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontSize\", {\n        /**\n         * This is the size of the label in pixels. For Labels, this correlates to the rendering font size.\n         * The true pixel height of the label is calculated and placed into the height property for the label.\n         */\n        get: function () { return this._fontSize; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontStyle\", {\n        /** This is the style of the font (italic, oblique, etc) */\n        get: function () { return this._fontStyle; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontWeight\", {\n        /** This is the font weight specified for the label (bold, normal, etc). */\n        get: function () { return this._fontWeight; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"maxWidth\", {\n        /** This is the max width in pixels this label can fill */\n        get: function () { return this._maxWidth; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"resource\", {\n        /** This gets the atlas resource that is uniquely identified for this label */\n        get: function () { return this._rasterization.resource; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"text\", {\n        /** This is the label's text. */\n        get: function () { return this._text; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"truncatedText\", {\n        /**\n         * If a maxWidth is specified, there is a chance the text will be truncated.\n         * This provides the calculated truncated text.\n         */\n        get: function () { return this._rasterization.resource.truncatedText || this.text; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"width\", {\n        /**\n         * This is the width in world space of the label. If there is no camera distortion,\n         * this would be the width of the label in pixels on the screen.\n         */\n        get: function () {\n            return this._width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"height\", {\n        /**\n         * This is the height in world space of the label. If there is no camera distortion,\n         * this would be the height of the label in pixels on the screen.\n         */\n        get: function () {\n            return this._height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Labels are a sort of unique case where the use of a label should be destroyed as rasterization\n     * resources are in a way kept alive through reference counting.\n     */\n    LabelInstance.prototype.destroy = function () {\n        if (!this._isDestroyed) {\n            this._isDestroyed = true;\n            this._rasterization.references--;\n            // If all references are cleared, then the rasterization needs to be eradicated\n            if (this._rasterization.references === 0) {\n                this._rasterization.resource;\n            }\n        }\n    };\n    Object.defineProperty(LabelInstance.prototype, \"anchor\", {\n        get: function () {\n            return this._anchor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This applies a new anchor to this label and properly determines it's anchor position on the label\n     */\n    LabelInstance.prototype.setAnchor = function (anchor) {\n        var newAnchor = {\n            padding: anchor.padding || 0,\n            type: anchor.type,\n            x: anchor.x || 0,\n            y: anchor.y || 0,\n        };\n        // Calculate the new anchors position values\n        anchorCalculator[newAnchor.type](newAnchor, this);\n        // Apply the anchor\n        this._anchor = newAnchor;\n    };\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"color\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"depth\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"scaling\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"scale\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"x\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"y\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"_anchor\", void 0);\n    return LabelInstance;\n}(instance_1.Instance));\nexports.LabelInstance = LabelInstance;\nvar _a;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the label as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the label is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y || screenSize.x > size.x;\\n\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float(cameraScale.x != cameraScale.y);\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n\\n  // Correct aspect ratio.\\n  size = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // apply scaling\\n  size *= scale;\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // Get the position of the current vertex\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * size + location - adjustedAnchor;\\n  // Get the tex coord from our inject texture info\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the label's color as a tint to the label (all labels are rendered white to the base texture)\\n  vertexColor = color;\\n\\n  // See how scaled the size on screen will be from the actual height of the label\\n  float labelScreenScale = mix(\\n    screenSize.y / size.y,\\n    screenSize.x / size.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the label is supposed to be, then we automagically\\n  // scale down our label to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / labelScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  gl_FragColor = texture2D(labelAtlas, texCoord) * vertexColor;\\n  gl_FragColor *= gl_FragColor.a;\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar types_2 = require(\"../types\");\nvar max = Math.max, min = Math.min;\n/**\n * This layer displays Labels and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar LabelLayer = /** @class */ (function (_super) {\n    __extends(LabelLayer, _super);\n    function LabelLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    LabelLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given label\n            boundsAccessor: function (label) {\n                var topLeft = [\n                    label.x - label.anchor.x,\n                    label.y - label.anchor.y,\n                ];\n                return new primitives_1.Bounds({\n                    height: label.height,\n                    width: label.width,\n                    x: topLeft[0],\n                    y: topLeft[1],\n                });\n            },\n            // Provide a precise hit test for the circle\n            hitTest: function (label, point, view) {\n                // The bounds of the label is in world space, but it does not account for the scale mode of the label.\n                // Here, we will apply the scale mode testing to the label\n                var maxScale = max.apply(void 0, view.camera.scale);\n                var minScale = min.apply(void 0, view.camera.scale);\n                // If we scale always then the label stays within it's initial world bounds at all times\n                if (label.scaling === types_2.ScaleType.ALWAYS) {\n                    return true;\n                }\n                // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n                // Label the same size. If the camera zooms out then the bounds === the world bounds.\n                else if (label.scaling === types_2.ScaleType.BOUND_MAX) {\n                    // We are zooming out. the bounds will stay within the world bounds\n                    if (minScale <= 1 && maxScale <= 1) {\n                        return true;\n                    }\n                    // We are zooming in. The bounds will shrink to keep the label at max font size\n                    else {\n                        // The location is within the world, but we reverse project the anchor spread\n                        var topLeft = view.worldToScreen({\n                            x: label.x - (label.anchor.x / view.camera.scale[0]),\n                            y: label.y - (label.anchor.y / view.camera.scale[1]),\n                        });\n                        var screenPoint = view.worldToScreen(point);\n                        // Reverse project the size and we should be within the distorted world coordinates\n                        return new primitives_1.Bounds({\n                            height: label.height,\n                            width: label.width,\n                            x: topLeft.x,\n                            y: topLeft.y,\n                        }).containsPoint(screenPoint);\n                    }\n                }\n                // If we never allow the label to scale, then the bounds will grow and shrink to counter the effects\n                // Of the camera zoom\n                else if (label.scaling === types_2.ScaleType.NEVER) {\n                    // The location is within the world, but we reverse project the anchor spread\n                    var topLeft = view.worldToScreen({\n                        x: label.x - (label.anchor.x / view.camera.scale[0]),\n                        y: label.y - (label.anchor.y / view.camera.scale[1]),\n                    });\n                    var screenPoint = view.worldToScreen(point);\n                    // Reverse project the size and we should be within the distorted world coordinates\n                    return new primitives_1.Bounds({\n                        height: label.height,\n                        width: label.width,\n                        x: topLeft.x,\n                        y: topLeft.y,\n                    }).containsPoint(screenPoint);\n                }\n                return true;\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    LabelLayer.prototype.initShader = function () {\n        var _this = this;\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: 0,\n            1: 0,\n            2: 0,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./label-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'location',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'anchor',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.anchor.x, o.anchor.y]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'size',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.width, o.height]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'scaling',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scaling]; },\n                },\n                {\n                    atlas: {\n                        key: this.props.atlas,\n                        name: 'labelAtlas',\n                    },\n                    block: 2,\n                    name: 'texture',\n                    update: function (o) { return _this.resource.request(_this, o, o.resource); },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.color; },\n                },\n                {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'scale',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scale]; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (u) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./label-layer.vs'),\n        };\n    };\n    LabelLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    LabelLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return LabelLayer;\n}(layer_1.Layer));\nexports.LabelLayer = LabelLayer;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar canvas;\nvar ImageRasterizer = /** @class */ (function () {\n    function ImageRasterizer() {\n    }\n    /**\n     * This loops until our canvas context is available\n     */\n    ImageRasterizer.awaitContext = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!canvas) return [3 /*break*/, 2];\n                        this.getContext();\n                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 0];\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Attempts to populate the 'canvas' context for rendering images offscreen.\n     */\n    ImageRasterizer.getContext = function () {\n        if (!canvas) {\n            canvas = document.createElement('canvas').getContext('2d');\n        }\n        return canvas;\n    };\n    /**\n     * This renders our image to a sizeable canvas where we loop over the pixel data to determine\n     * the bounds of the image.\n     *\n     * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n     *                                 the size to be rendered to the texture to the size the image\n     *                                 should be within world space.\n     * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n     */\n    ImageRasterizer.calculateImageSize = function (resource, sampleScale) {\n        /** Get the image properties for rasterizing */\n        var image = resource.image.element;\n        if (image.width === 0 || image.height === 0) {\n            console.warn('Images provided shoud have valid dimensions! Please ensure the image is loaded first.');\n            return;\n        }\n        // Just make sure th canvas is available\n        canvas.canvas.width = 100;\n        canvas.canvas.height = 100;\n        // Render the image into our canvas merely to ensure the image can be rendered\n        // This action often 'warms up' images such as images that have a data URL instead of a path\n        canvas.drawImage(image, 0, 0);\n        // Make sure the rasterization object is initialized\n        resource.rasterization = resource.rasterization || {\n            texture: { height: 0, width: 0 },\n            world: { height: 0, width: 0 },\n        };\n        // Update the calculated texture size.\n        resource.rasterization.texture = {\n            height: image.height * resource.sampleScale,\n            width: image.width * resource.sampleScale,\n        };\n        resource.rasterization.world = {\n            height: image.height,\n            width: image.width,\n        };\n        resource.rasterization.image = image;\n    };\n    /**\n     * Performs the rendering of the image\n     */\n    ImageRasterizer.render = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // Make sure our canvas object is ready for rendering\n                    return [4 /*yield*/, this.awaitContext()];\n                    case 1:\n                        // Make sure our canvas object is ready for rendering\n                        _a.sent();\n                        // Calculate all of the image metrics and ensure the image can be drawn\n                        this.calculateImageSize(resource, resource.sampleScale);\n                        return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    /**\n     * Performs the rendering of the image\n     */\n    ImageRasterizer.renderSync = function (resource) {\n        // Ensure our offscreen canvas is prepped\n        this.getContext();\n        if (!canvas) {\n            console.warn('Can not render a image synchronously without the canvas context being ready.');\n            return resource;\n        }\n        // Calculate all of the image metrics and generate a canvas on the image that can\n        // Be rendered to the canvas.\n        this.calculateImageSize(resource, resource.sampleScale);\n        return resource;\n    };\n    return ImageRasterizer;\n}());\nexports.ImageRasterizer = ImageRasterizer;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\nvar atlas_1 = require(\"./atlas\");\nvar color_atlas_resource_1 = require(\"./color-atlas-resource\");\nvar color_rasterizer_1 = require(\"./color-rasterizer\");\nvar image_atlas_resource_1 = require(\"./image-atlas-resource\");\nvar label_atlas_resource_1 = require(\"./label-atlas-resource\");\nvar label_rasterizer_1 = require(\"./label-rasterizer\");\nvar sub_texture_1 = require(\"./sub-texture\");\nvar debug = require('debug')('webgl-surface:Atlas');\nvar ZERO_IMAGE = {\n    aspectRatio: 0,\n    atlasBL: { x: 0, y: 0 },\n    atlasBR: { x: 0, y: 0 },\n    atlasReferenceID: '',\n    atlasTexture: null,\n    atlasTL: { x: 0, y: 0 },\n    atlasTR: { x: 0, y: 0 },\n    heightOnAtlas: 0,\n    isValid: false,\n    pixelHeight: 0,\n    pixelWidth: 0,\n    widthOnAtlas: 0,\n};\n/**\n * Determines if a SubTexture is a valid SubTexture for rendering\n */\nfunction isValidImage(image) {\n    var isValid = false;\n    if (image && image.isValid) {\n        if (image.pixelWidth && image.pixelHeight) {\n            isValid = true;\n        }\n    }\n    return isValid;\n}\n/**\n * Defines a manager of atlas', which includes generating the atlas and producing\n * textures defining those pieces of atlas.\n */\nvar AtlasManager = /** @class */ (function () {\n    function AtlasManager() {\n        /** Stores all of the generated atlas' in a lookup by name */\n        this.allAtlas = new Map();\n    }\n    /**\n     * Atlas' must be created from scratch to update them. In order to properly\n     * update an existing one, you must destroy it then recreate it again.\n     * This is from not knowing how to update a texture via three js.\n     *\n     * @param resources The images with their image path set to be loaded into the atlas.\n     *               Images that keep an atlas ID of null indicates the image did not load\n     *               correctly\n     *\n     * @return {Texture} The Threejs texture that is created as our atlas. The images injected\n     *                   into the texture will be populated with the atlas'\n     */\n    AtlasManager.prototype.createAtlas = function (options, resources) {\n        return __awaiter(this, void 0, void 0, function () {\n            var atlas;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        atlas = new atlas_1.Atlas(options);\n                        // Set the manager to the atlas\n                        atlas.setManager(this);\n                        // Make the atlas identifiable by it's name\n                        this.allAtlas.set(atlas.id, atlas);\n                        if (!resources) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.updateAtlas(atlas.id, resources)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        debug('Atlas Created-> %o', atlas);\n                        return [2 /*return*/, atlas];\n                }\n            });\n        });\n    };\n    /**\n     * Free ALL resources under this manager\n     */\n    AtlasManager.prototype.destroy = function () {\n        this.allAtlas.forEach(function (value) { return value.destroy(); });\n    };\n    /**\n     * Disposes of the resources the atlas held and makes the atlas invalid for use\n     *\n     * @param atlasName\n     */\n    AtlasManager.prototype.destroyAtlas = function (atlasName) {\n        var atlas = this.allAtlas.get(atlasName);\n        if (atlas) {\n            atlas.destroy();\n        }\n    };\n    AtlasManager.prototype.setDefaultImage = function (image, atlasName) {\n        image = Object.assign(image, ZERO_IMAGE, { atlasReferenceID: atlasName });\n        return image;\n    };\n    /**\n     * This loads, packs, and draws the indicated image into the specified canvas\n     * using the metrics that exists for the specified atlas.\n     *\n     * @param resource The image who should have it's image path loaded\n     * @param atlasName The name of the atlas to make the packing work\n     * @param canvas The canvas we will be drawing into to generate the complete image\n     *\n     * @return {Promise<boolean>} Promise that resolves to if the image successfully was drawn or not\n     */\n    AtlasManager.prototype.draw = function (atlas, resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var canvas, atlasName, loadedImage, rasterization, texture, rect, dimensions, packing, insertedNode, ux, uy, uw, uh, onePixelX, atlasDimensions, bottom, top_1, left, right;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        canvas = atlas.texture.image;\n                        atlasName = atlas.id;\n                        // Register the resource with the atlas\n                        if (!atlas.registerResource(resource)) {\n                            console.warn('Could not draw resource to the atlas as the resource was not properly registered to the atlas first', atlas, resource);\n                            return [2 /*return*/, Promise.resolve(false)];\n                        }\n                        return [4 /*yield*/, this.loadImage(resource)];\n                    case 1:\n                        loadedImage = _a.sent();\n                        // Only a non-null image means the image loaded correctly\n                        if (loadedImage && isValidImage(resource.texture)) {\n                            rasterization = resource.rasterization;\n                            texture = resource.texture;\n                            rect = new bounds_1.Bounds({ left: 0, right: rasterization.texture.width, top: 0, bottom: rasterization.texture.height });\n                            dimensions = {\n                                first: texture,\n                                second: rect,\n                            };\n                            // Auto add a buffer in\n                            dimensions.second.width += 1;\n                            dimensions.second.height += 1;\n                            packing = atlas.packing;\n                            insertedNode = packing.insert(dimensions);\n                            // If the result was NULL we did not successfully insert the image into any map\n                            if (insertedNode) {\n                                debug('Atlas location determined: %o', insertedNode);\n                                // Apply the image to the node\n                                insertedNode.nodeImage = texture;\n                                ux = insertedNode.nodeDimensions.x / atlas.width;\n                                uy = insertedNode.nodeDimensions.y / atlas.height;\n                                uw = insertedNode.nodeDimensions.width / atlas.width;\n                                uh = insertedNode.nodeDimensions.height / atlas.height;\n                                onePixelX = 1 / atlas.width;\n                                atlasDimensions = new bounds_1.Bounds({\n                                    bottom: 1.0 - uy,\n                                    left: ux,\n                                    right: ux + uw,\n                                    top: 1.0 - (uy + uh),\n                                });\n                                bottom = atlasDimensions.bottom;\n                                top_1 = atlasDimensions.y;\n                                left = atlasDimensions.x;\n                                right = atlasDimensions.x + atlasDimensions.width - onePixelX;\n                                texture.atlasReferenceID = atlasName;\n                                texture.atlasTL = { x: left, y: top_1 };\n                                texture.atlasBR = { x: right, y: bottom };\n                                texture.atlasBL = { x: left, y: bottom };\n                                texture.atlasTR = { x: right, y: top_1 };\n                                texture.widthOnAtlas = Math.abs(texture.atlasTR.x - texture.atlasTL.x);\n                                texture.heightOnAtlas = Math.abs(texture.atlasTR.y - texture.atlasBR.y);\n                                texture.pixelWidth = rasterization.texture.width;\n                                texture.pixelHeight = rasterization.texture.height;\n                                // Now draw the image to the indicated canvas\n                                canvas.getContext('2d').drawImage(loadedImage, insertedNode.nodeDimensions.x, insertedNode.nodeDimensions.y);\n                                // We have finished inserting\n                                return [2 /*return*/, true];\n                            }\n                            else {\n                                // Log an error\n                                console.error(\"Could not fit resource into atlas\", resource);\n                                resource.texture = this.setDefaultImage(resource.texture, atlasName);\n                                return [2 /*return*/, false];\n                            }\n                        }\n                        else {\n                            // Log an error and load a default sub texture\n                            console.error(\"Could not load resource:\", resource);\n                            resource.texture = this.setDefaultImage(resource.texture, atlasName);\n                            return [2 /*return*/, false];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Retrieves the threejs texture for the atlas\n     *\n     * @param atlasName The identifier of the atlas\n     */\n    AtlasManager.prototype.getAtlasTexture = function (atlasName) {\n        return this.allAtlas.get(atlasName);\n    };\n    /**\n     * This takes in any atlas resource and rasterizes it.\n     *\n     * @param {SubTexture} resource This is any atlas resource which will have it's image rasterized\n     *\n     * @return {Promise<HTMLImageElement>} A promise to resolve to the loaded image\n     *                                     or null if there was an error\n     */\n    AtlasManager.prototype.loadImage = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var imageSrc, subTexture, image_1, image, image;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        subTexture = resource.texture || new sub_texture_1.SubTexture();\n                        resource.texture = subTexture;\n                        if (!(resource instanceof image_atlas_resource_1.ImageAtlasResource)) return [3 /*break*/, 4];\n                        if (!resource.image.element) return [3 /*break*/, 2];\n                        if (resource.image.element.width !== 0 && resource.image.element.height !== 0) {\n                            image_1 = resource.image.element;\n                            subTexture.pixelWidth = image_1.width;\n                            subTexture.pixelHeight = image_1.height;\n                            subTexture.aspectRatio = image_1.width / image_1.height;\n                            return [2 /*return*/, image_1];\n                        }\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                var image = resource.image.element;\n                                image.onload = function () {\n                                    subTexture.pixelWidth = image.width;\n                                    subTexture.pixelHeight = image.height;\n                                    subTexture.aspectRatio = image.width / image.height;\n                                    resolve(image);\n                                };\n                                image.onerror = function () {\n                                    resolve(null);\n                                };\n                            })];\n                    case 1:\n                        image = _a.sent();\n                        return [2 /*return*/, image];\n                    case 2:\n                        if (resource.image.path) {\n                            imageSrc = resource.image.path;\n                        }\n                        _a.label = 3;\n                    case 3: return [3 /*break*/, 10];\n                    case 4:\n                        if (!(resource instanceof label_atlas_resource_1.LabelAtlasResource)) return [3 /*break*/, 7];\n                        if (!!resource.rasterization.canvas) return [3 /*break*/, 6];\n                        return [4 /*yield*/, label_rasterizer_1.LabelRasterizer.render(resource)];\n                    case 5:\n                        _a.sent();\n                        _a.label = 6;\n                    case 6:\n                        // Make sure the rasterization properly executed\n                        if (resource.rasterization.canvas) {\n                            debug('Rasterized label %o', resource.rasterization);\n                            imageSrc = resource.rasterization.canvas.toDataURL('image/png');\n                        }\n                        else {\n                            console.warn('The label was not able to be rasterized');\n                        }\n                        return [3 /*break*/, 10];\n                    case 7:\n                        if (!(resource instanceof color_atlas_resource_1.ColorAtlasResource)) return [3 /*break*/, 10];\n                        if (!!resource.rasterization.canvas) return [3 /*break*/, 9];\n                        return [4 /*yield*/, color_rasterizer_1.ColorRasterizer.render(resource)];\n                    case 8:\n                        _a.sent();\n                        _a.label = 9;\n                    case 9:\n                        // Make sure the rasterization properly executed\n                        if (resource.rasterization.canvas) {\n                            debug('Rasterized color %o', resource.rasterization);\n                            imageSrc = resource.rasterization.canvas.toDataURL('image/png');\n                        }\n                        else {\n                            console.warn('The color was not able to be rasterized');\n                        }\n                        _a.label = 10;\n                    case 10:\n                        if (!imageSrc) return [3 /*break*/, 12];\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                var image = new Image();\n                                image.onload = function () {\n                                    subTexture.pixelWidth = image.width;\n                                    subTexture.pixelHeight = image.height;\n                                    subTexture.aspectRatio = image.width / image.height;\n                                    resolve(image);\n                                };\n                                image.onerror = function () {\n                                    resolve(null);\n                                };\n                                image.src = imageSrc;\n                            })];\n                    case 11:\n                        image = _a.sent();\n                        return [2 /*return*/, image];\n                    case 12: return [2 /*return*/, null];\n                }\n            });\n        });\n    };\n    /**\n     * This targets an existing atlas and attempts to update it with the provided atlas resources.\n     *\n     * @param atlasName\n     * @param resources\n     */\n    AtlasManager.prototype.updateAtlas = function (atlasName, resources) {\n        return __awaiter(this, void 0, void 0, function () {\n            var atlas, _i, resources_1, resource;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        atlas = this.allAtlas.get(atlasName);\n                        if (!atlas) return [3 /*break*/, 5];\n                        _i = 0, resources_1 = resources;\n                        _a.label = 1;\n                    case 1:\n                        if (!(_i < resources_1.length)) return [3 /*break*/, 4];\n                        resource = resources_1[_i];\n                        return [4 /*yield*/, this.draw(atlas, resource)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        // Perform the best method for updating the underlying texture of the atlas to the latest changes\n                        atlas.updateTexture();\n                        return [3 /*break*/, 6];\n                    case 5:\n                        console.warn('Can not update non-existing atlas:', atlasName, 'These resources will not be loaded:', resources);\n                        _a.label = 6;\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return AtlasManager;\n}());\nexports.AtlasManager = AtlasManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\n/**\n * This is used specifically by the atlas manager to aid in packing\n * in textures within an area. This will guarantee boundaries of textures are\n * not violated and provide proper feedback for where to draw a given image\n */\nvar PackNode = /** @class */ (function () {\n    function PackNode(x, y, width, height) {\n        this.child = [null, null];\n        this.isLeaf = true;\n        this.nodeImage = null;\n        this.nodeDimensions = new bounds_1.Bounds({\n            height: height,\n            width: width,\n            x: x,\n            y: y,\n        });\n    }\n    /**\n     * Deletes all of the sub nodes in this Mapping, thus clearing up memory usage\n     */\n    PackNode.prototype.destroy = function () {\n        var child0 = this.child[0];\n        var child1 = this.child[1];\n        this.nodeImage = null;\n        if (child0) {\n            child0.destroy();\n        }\n        if (child1) {\n            child1.destroy();\n        }\n        this.child[0] = null;\n        this.child[1] = null;\n    };\n    /**\n     * Indicates if there is a child\n     */\n    PackNode.prototype.hasChild = function () {\n        var child0 = this.child[0];\n        var child1 = this.child[1];\n        if (child0 && !child0.nodeImage) {\n            return !child0.isLeaf;\n        }\n        if (child1 && !child1.nodeImage) {\n            return !child1.isLeaf;\n        }\n        return false;\n    };\n    /**\n     * Inserts images into our mapping, fitting them appropriately\n     */\n    PackNode.prototype.insert = function (image) {\n        var child0 = this.child[0];\n        var child1 = this.child[1];\n        if (!this.isLeaf && child0 && child1) {\n            // Try inserting into first child\n            var newNode = child0.insert(image);\n            if (newNode !== null) {\n                return newNode;\n            }\n            // No room in first so insert into second\n            return child1.insert(image);\n        }\n        else {\n            // If there's already an image here, return\n            if (this.nodeImage) {\n                return null;\n            }\n            // Check the fit status of the image in this nodes rectangle space\n            var fitFlag = this.nodeDimensions.fits(image.second);\n            // If we're too small, return null indicating can not fit\n            if (fitFlag === 0) {\n                return null;\n            }\n            // If we're just right, accept\n            if (fitFlag === 1) {\n                return this;\n            }\n            // Otherwise, gotta split this node and create some leaves\n            this.isLeaf = false;\n            // Get the image width\n            var imgWidth = image.second.width;\n            var imgHeight = image.second.height;\n            // Decide which way to split\n            var dWidth = this.nodeDimensions.width - imgWidth;\n            var dHeight = this.nodeDimensions.height - image.second.height;\n            if (dWidth > dHeight) {\n                this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, imgWidth, this.nodeDimensions.height);\n                this.child[1] = new PackNode(this.nodeDimensions.x + imgWidth, this.nodeDimensions.y, dWidth, this.nodeDimensions.height);\n            }\n            else {\n                this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, this.nodeDimensions.width, imgHeight);\n                this.child[1] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y + imgHeight, this.nodeDimensions.width, dHeight);\n            }\n        }\n        // Insert into first child we created\n        return this.child[0].insert(image);\n    };\n    /**\n     * Removes the image from the mapping and tries to open up as much space as possible.\n     *\n     * @param {AtlasTexture} image The image to insert into the\n     */\n    PackNode.prototype.remove = function (image) {\n        if (!this.isLeaf) {\n            // Try removing from first child\n            var removed = this.child[0].remove(image);\n            if (removed) {\n                return true;\n            }\n            // Try remove from second\n            removed = this.child[1].remove(image);\n            if (!this.child[0].hasChild()) {\n                if (!this.child[1].hasChild()) {\n                    this.child[0] = null;\n                    this.child[1] = null;\n                }\n            }\n            return removed;\n        }\n        else {\n            if (this.nodeImage === image) {\n                this.nodeImage = null;\n                image.atlasReferenceID = null;\n                image.pixelWidth = 0;\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n    };\n    return PackNode;\n}());\nexports.PackNode = PackNode;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar texture_1 = require(\"../../surface/texture\");\nvar instance_1 = require(\"../../util/instance\");\nvar types_1 = require(\"../types\");\n/**\n * This is a lookup to find existing rasterizations for a particularly created image so that every\n * new image does not have to go through the rasterization process.\n */\nvar rasterizationLookUp = new Map();\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nvar anchorCalculator = (_a = {},\n    _a[types_1.AnchorType.TopLeft] = function (anchor, image) {\n        anchor.x = -anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopMiddle] = function (anchor, image) {\n        anchor.x = image.width / 2.0;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopRight] = function (anchor, image) {\n        anchor.x = image.width + anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.MiddleLeft] = function (anchor, image) {\n        anchor.x = -anchor.padding;\n        anchor.y = image.height / 2;\n    },\n    _a[types_1.AnchorType.Middle] = function (anchor, image) {\n        anchor.x = image.width / 2.0;\n        anchor.y = image.height / 2.0;\n    },\n    _a[types_1.AnchorType.MiddleRight] = function (anchor, image) {\n        anchor.x = image.width + anchor.padding;\n        anchor.y = image.height / 2.0;\n    },\n    _a[types_1.AnchorType.BottomLeft] = function (anchor, image) {\n        anchor.x = -anchor.padding;\n        anchor.y = image.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomMiddle] = function (anchor, image) {\n        anchor.x = image.width / 2.0;\n        anchor.y = image.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomRight] = function (anchor, image) {\n        anchor.x = image.width + anchor.padding;\n        anchor.y = image.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.Custom] = function (anchor, image) {\n        anchor.x = anchor.x || 0;\n        anchor.y = anchor.y || 0;\n    },\n    _a);\n/**\n * This generates a new image instance which will render a single line of text for a given layer.\n * There are restrictions surrounding images due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a image via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Images should only be so long.\n * - Multiline is not supported inherently\n * - Once a image is constructed, only SOME properties can be altered thereafter\n *\n * A image that is constructed can only have some properties set upon creating the image and are locked\n * thereafter. The only way to modify them would be to destroy the image, then construct a new image\n * with the modifications. This has to deal with performance regarding rasterizing the image\n */\nvar ImageInstance = /** @class */ (function (_super) {\n    __extends(ImageInstance, _super);\n    function ImageInstance(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the rendered color of the image */\n        _this.tint = [0, 0, 0, 1];\n        /** Depth sorting of the image (or the z value of the lable) */\n        _this.depth = 0;\n        /** The height of the image as it is to be rendered in world space */\n        _this.height = 1;\n        /** Sets the way the image scales with the world */\n        _this.scaling = types_1.ScaleType.BOUND_MAX;\n        /** The width of the image as it is to be rendered in world space */\n        _this.width = 1;\n        /** The x coordinate where the image will be anchored to in world space */\n        _this.x = 0;\n        /** The y coordinate where the image will be anchored to in world space */\n        _this.y = 0;\n        // The following properties are properties that are locked in after creating this image\n        // As the properties are completely locked into how the image was rasterized and can not\n        // Nor should not be easily adjusted for performance concerns\n        _this._sourceWidth = 0;\n        _this._sourceHeight = 0;\n        _this._isDestroyed = false;\n        // These are properties that can be altered, but have side effects from being changed\n        /** This is the anchor location on the  */\n        _this._anchor = {\n            padding: 0,\n            type: types_1.AnchorType.TopLeft,\n            x: 0,\n            y: 0,\n        };\n        _this.depth = options.depth || _this.depth;\n        _this.tint = options.tint || _this.tint;\n        _this.scaling = options.scaling || _this.scaling;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        // This is the image that is to be rendered\n        _this._element = options.element;\n        // Look for other same texts that have been rasterized\n        var rasterization = rasterizationLookUp.get(_this._path || _this._element);\n        // If a rasterization exists, we must increment the use reference\n        if (rasterization) {\n            rasterization.references++;\n        }\n        // If we have not found an existing rasterization\n        if (!rasterization) {\n            rasterization = {\n                references: 1,\n                resource: new texture_1.ImageAtlasResource(_this),\n            };\n            // Ensure the sample scale is set. Defaults to 1.0\n            rasterization.resource.sampleScale = rasterization.resource.sampleScale || 1.0;\n            // Rasterize the resource generated for this image. We need it immediately rasterized so\n            // That we can utilize the dimensions for calculations.\n            texture_1.ImageRasterizer.renderSync(rasterization.resource);\n            // Now that we have an official rasterization for this image, we shall store it\n            // For others to look up\n            rasterizationLookUp.set(_this._path || _this._element, rasterization);\n        }\n        _this._rasterization = rasterization;\n        _this._sourceWidth = rasterization.resource.rasterization.world.width;\n        _this._sourceHeight = rasterization.resource.rasterization.world.height;\n        _this.width = options.width || _this._sourceWidth || 1;\n        _this.height = options.height || _this._sourceHeight || 1;\n        // Make sure the anchor is set to the appropriate location\n        options.anchor && _this.setAnchor(options.anchor);\n        return _this;\n    }\n    /**\n     * TODO: We should be implementing the destroy on ImageInstances to clean this up\n     * Frees up module scoped data.\n     */\n    ImageInstance.destroy = function () {\n        rasterizationLookUp.clear();\n    };\n    Object.defineProperty(ImageInstance.prototype, \"element\", {\n        // The following are the getters for the locked in parameters of the image so we can read\n        // The properties but not set any of them.\n        /** This is the provided element this image will be rendering */\n        get: function () { return this._element; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"isDestroyed\", {\n        /** This flag indicates if this image is valid anymore */\n        get: function () { return this._isDestroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"path\", {\n        /** This is the path to the image's resource if it's available */\n        get: function () { return this._path; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"resource\", {\n        /** This gets the atlas resource that is uniquely idenfied for this image */\n        get: function () { return this._rasterization.resource; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"sourceWidth\", {\n        /**\n         * This is the width in world space of the image. If there is no camera distortion,\n         * this would be the width of the image in pixels on the screen.\n         */\n        get: function () {\n            return this._sourceWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"sourceHeight\", {\n        /**\n         * This is the height in world space of the image. If there is no camera distortion,\n         * this would be the height of the image in pixels on the screen.\n         */\n        get: function () {\n            return this._sourceHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Images are a sort of unique case where the use of a image should be destroyed as rasterization\n     * resources are in a way kept alive through reference counting.\n     */\n    ImageInstance.prototype.destroy = function () {\n        if (!this._isDestroyed) {\n            this._isDestroyed = true;\n            this._rasterization.references--;\n            // If all references are cleared, then the rasterization needs to be eradicated\n            if (this._rasterization.references === 0) {\n                this._rasterization.resource;\n                console.warn('The destroy method still needs completion');\n            }\n        }\n    };\n    Object.defineProperty(ImageInstance.prototype, \"anchor\", {\n        get: function () {\n            return this._anchor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This applies a new anchor to this image and properly determines it's anchor position on the image\n     */\n    ImageInstance.prototype.setAnchor = function (anchor) {\n        var newAnchor = {\n            padding: anchor.padding || 0,\n            type: anchor.type,\n            x: anchor.x || 0,\n            y: anchor.y || 0,\n        };\n        // Calculate the new anchors position values\n        anchorCalculator[newAnchor.type](newAnchor, this);\n        // Apply the anchor\n        this._anchor = newAnchor;\n    };\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"tint\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"depth\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"height\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"scaling\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"width\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"x\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"y\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"_anchor\", void 0);\n    return ImageInstance;\n}(instance_1.Instance));\nexports.ImageInstance = ImageInstance;\nvar _a;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the image as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the image is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y;\\n\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float(cameraScale.x != cameraScale.y);\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n\\n  // Get the tex coord from our inject texture info\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the image's tint as a tint to the image\\n  vertexColor = tint;\\n\\n  // Correct aspect ratio.\\n  size = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * size + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the image\\n  float imageScreenScale = mix(\\n    screenSize.y / size.y,\\n    screenSize.x / size.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the image is supposed to be, then we automagically\\n  // scale down our image to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / imageScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  gl_FragColor = texture2D(imageAtlas, texCoord) * vertexColor;\\n  gl_FragColor *= gl_FragColor.a;\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar types_2 = require(\"../types\");\nvar min = Math.min, max = Math.max;\n/**\n * This layer displays Images and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar ImageLayer = /** @class */ (function (_super) {\n    __extends(ImageLayer, _super);\n    function ImageLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    ImageLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given image\n            boundsAccessor: function (image) {\n                var topLeft = [\n                    image.x - image.anchor.x,\n                    image.y - image.anchor.y,\n                ];\n                return new primitives_1.Bounds({\n                    height: image.height,\n                    width: image.width,\n                    x: topLeft[0],\n                    y: topLeft[1],\n                });\n            },\n            // Provide a precise hit test for the circle\n            hitTest: function (image, point, view) {\n                // The bounds of the image is in world space, but it does not account for the scale mode of the image.\n                // Here, we will apply the scale mode testing to the image\n                var maxScale = max.apply(void 0, view.camera.scale);\n                var minScale = min.apply(void 0, view.camera.scale);\n                // If we scale always then the image stays within it's initial world bounds at all times\n                if (image.scaling === types_2.ScaleType.ALWAYS) {\n                    return true;\n                }\n                // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n                // Image the same size. If the camera zooms out then the bounds === the world bounds.\n                else if (image.scaling === types_2.ScaleType.BOUND_MAX) {\n                    // We are zooming out. the bounds will stay within the world bounds\n                    if (minScale <= 1 && maxScale <= 1) {\n                        return true;\n                    }\n                    // We are zooming in. The bounds will shrink to keep the image at max font size\n                    else {\n                        // The location is within the world, but we reverse project the anchor spread\n                        var topLeft = view.worldToScreen({\n                            x: image.x - (image.anchor.x / view.camera.scale[0]),\n                            y: image.y - (image.anchor.y / view.camera.scale[1]),\n                        });\n                        var screenPoint = view.worldToScreen(point);\n                        // Reverse project the size and we should be within the distorted world coordinates\n                        return new primitives_1.Bounds({\n                            height: image.height,\n                            width: image.width,\n                            x: topLeft.x,\n                            y: topLeft.y,\n                        }).containsPoint(screenPoint);\n                    }\n                }\n                // If we never allow the image to scale, then the bounds will grow and shrink to counter the effects\n                // Of the camera zoom\n                else if (image.scaling === types_2.ScaleType.NEVER) {\n                    // The location is within the world, but we reverse project the anchor spread\n                    var topLeft = view.worldToScreen({\n                        x: image.x - (image.anchor.x / view.camera.scale[0]),\n                        y: image.y - (image.anchor.y / view.camera.scale[1]),\n                    });\n                    var screenPoint = view.worldToScreen(point);\n                    // Reverse project the size and we should be within the distorted world coordinates\n                    return new primitives_1.Bounds({\n                        height: image.height,\n                        width: image.width,\n                        x: topLeft.x,\n                        y: topLeft.y,\n                    }).containsPoint(screenPoint);\n                }\n                return true;\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    ImageLayer.prototype.initShader = function () {\n        var _this = this;\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: 0,\n            1: 0,\n            2: 0,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./image-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'location',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'anchor',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.anchor.x, o.anchor.y]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'size',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.width, o.height]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'scaling',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scaling]; },\n                },\n                {\n                    atlas: {\n                        key: this.props.atlas,\n                        name: 'imageAtlas',\n                    },\n                    block: 2,\n                    name: 'texture',\n                    update: function (o) { return _this.resource.request(_this, o, o.resource); },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'tint',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.tint; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (u) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./image-layer.vs'),\n        };\n    };\n    ImageLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    ImageLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return ImageLayer;\n}(layer_1.Layer));\nexports.ImageLayer = ImageLayer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar instance_1 = require(\"../../util/instance\");\nvar EdgeInstance = /** @class */ (function (_super) {\n    __extends(EdgeInstance, _super);\n    function EdgeInstance(options) {\n        var _this = _super.call(this, options) || this;\n        _this.colorStart = [1.0, 1.0, 1.0, 1.0];\n        _this.colorEnd = [1.0, 1.0, 1.0, 1.0];\n        _this.control = [[0, 0], [0, 0]];\n        _this.depth = 0;\n        _this.end = [0, 0];\n        _this.start = [0, 0];\n        _this.widthStart = 1.0;\n        _this.widthEnd = 1.0;\n        _this.colorStart = options.colorStart || _this.colorStart;\n        _this.colorEnd = options.colorEnd || _this.colorEnd;\n        _this.control = options.control || _this.control;\n        _this.depth = options.depth || _this.depth;\n        _this.end = options.end || _this.end;\n        _this.widthStart = options.widthStart || _this.widthStart;\n        _this.widthEnd = options.widthEnd || _this.widthEnd;\n        _this.start = options.start || _this.start;\n        return _this;\n    }\n    Object.defineProperty(EdgeInstance.prototype, \"length\", {\n        get: function () {\n            var delta = [\n                this.end[0] - this.start[0],\n                this.end[1] - this.start[1],\n            ];\n            return Math.sqrt(delta[0] * delta[0] + delta[1] * delta[1]);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EdgeInstance.prototype, \"midpoint\", {\n        /**\n         * Calculates the midpoint of the edge\n         */\n        get: function () {\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EdgeInstance.prototype, \"perpendicular\", {\n        /**\n         * Calculates a perpendicular direction vector to the edge\n         */\n        get: function () {\n            var length = this.length;\n            return [\n                (this.end[1] - this.start[1]) / length,\n                -(this.end[0] - this.start[0]) / length,\n            ];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Applies the edge width to the start and end\n     */\n    EdgeInstance.prototype.setEdgeWidth = function (width) {\n        if (width) {\n            this.widthEnd = width;\n            this.widthStart = width;\n        }\n    };\n    /**\n     * Applies the color to the start and end\n     */\n    EdgeInstance.prototype.setColor = function (color) {\n        this.colorStart = color;\n        this.colorEnd = color;\n    };\n    __decorate([\n        instance_provider_1.observable\n    ], EdgeInstance.prototype, \"colorStart\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], EdgeInstance.prototype, \"colorEnd\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], EdgeInstance.prototype, \"control\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], EdgeInstance.prototype, \"depth\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], EdgeInstance.prototype, \"end\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], EdgeInstance.prototype, \"start\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], EdgeInstance.prototype, \"widthStart\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], EdgeInstance.prototype, \"widthEnd\", void 0);\n    return EdgeInstance;\n}(instance_1.Instance));\nexports.EdgeInstance = EdgeInstance;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\n\\nvoid main() {\\n  gl_FragColor = vertexColor;\\n}\\n\"","module.exports = \"/**\\n  This vertex shader calculates edges based in world space to make an edge based on\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nprecision highp float;\\n\\nvarying vec4 vertexColor;\\n\\n// Interpolation type injection\\n${interpolation}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n\\n  // Convert our world points to screen space\\n  vec4 startClip = clipSpace(vec3(start, depth));\\n  vec4 endClip = clipSpace(vec3(end, depth));\\n  vec2 startScreen = (startClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  vec2 endScreen = (endClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Controls for this mode are screen space deltas from the end points\\n  vec2 control1 = startScreen + vec2(control.x, -control.y) * scaleFactor;\\n  vec2 control2 = endScreen + vec2(control.z, -control.w) * scaleFactor;\\n\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, startScreen, endScreen, control1, control2);\\n  // Calculate the next and previous segment's location on the line\\n  vec2 prePosition = interpolation(interpolationTime - interpolationIncrement, startScreen, endScreen, control1, control2);\\n  vec2 nextPosition = interpolation(interpolationTime + interpolationIncrement, startScreen, endScreen, control1, control2);\\n\\n  vec2 preLine = prePosition - currentPosition;\\n  vec2 nextLine = nextPosition - currentPosition;\\n\\n  // Get a spliced nromal at the joining of two segments to make a crisper curve\\n  vec2 currentNormal = mix(\\n    // Pick this value if we're at the beginning of the line\\n    normalize(vec2(preLine.y, -preLine.x)),\\n    mix(\\n      // Pick this value when we're between the ends\\n      normalize(vec2(preLine.y, -preLine.x) + vec2(-nextLine.y, nextLine.x)),\\n      // Pick this value if we're at the end of the line\\n      normalize(vec2(-nextLine.y, nextLine.x)),\\n      float(position.x >= 1.0)\\n    ),\\n    float(position.x > 0.0)\\n  );\\n\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (-normal * lineThickness * scaleFactor);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a;\\n\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), startClip.zw);\\n  gl_PointSize = 5.0;\\n}\\n\"","module.exports = \"precision highp float;\\n\\n/**\\n  This vertex shader calculates edges whose curve and width is in screen space where the curve is\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nvarying vec4 vertexColor;\\n\\n// Interpolation type injection\\n${interpolation}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, start, end, control.xy, control.zw);\\n  // Calculate the next and previous segment's location on the line\\n  vec2 prePosition = interpolation(interpolationTime - interpolationIncrement, start, end, control.xy, control.zw);\\n  vec2 nextPosition = interpolation(interpolationTime + interpolationIncrement, start, end, control.xy, control.zw);\\n\\n  vec2 preLine = prePosition - currentPosition;\\n  vec2 nextLine = nextPosition - currentPosition;\\n\\n  // Get a spliced nromal at the joining of two segments to make a crisper curve\\n  vec2 currentNormal = mix(\\n    // Pick this value if we're at the beginning of the line\\n    normalize(vec2(preLine.y, -preLine.x)),\\n    mix(\\n      // Pick this value when we're between the ends\\n      normalize(vec2(preLine.y, -preLine.x) + vec2(-nextLine.y, nextLine.x)),\\n      // Pick this value if we're at the end of the line\\n      normalize(vec2(-nextLine.y, nextLine.x)),\\n      float(position.x >= 1.0)\\n    ),\\n    float(position.x > 0.0)\\n  );\\n\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (normal * lineThickness);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a;\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n  gl_PointSize = 5.0;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  float t1 = 1.0 - t;\\n  return pow(t1, 3.0) * p1 + 3.0 * t * pow(t1, 2.0) * c1 + 3.0 * pow(t, 2.0) * t1 * c2 + pow(t, 3.0) * p2;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return (1.0 - t) * (1.0 - t) * p1 + 2.0 * t * (1.0 - t) * c1 + t * t * p2;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return p1 + (p2 - p1) * t;\\n}\\n\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\nvar vector_1 = require(\"../../util/vector\");\nvar types_1 = require(\"./types\");\nvar pow = Math.pow;\n/** This is an interpolation across a line */\nfunction linear(t, p1, p2, c1, c2) {\n    return vector_1.add2(vector_1.scale2(vector_1.subtract2(p2, p1), t), p1);\n}\n/** This is an interpolation across a bezier curve, single control */\nfunction bezier(t, p1, p2, c1, c2) {\n    return [\n        (1.0 - t) * (1.0 - t) * p1[0] + 2.0 * t * (1.0 - t) * c1[0] + t * t * p2[0],\n        (1.0 - t) * (1.0 - t) * p1[1] + 2.0 * t * (1.0 - t) * c1[1] + t * t * p2[1],\n    ];\n}\n/** This is an interpolation across a bezier curve, double control */\nfunction bezier2(t, p1, p2, c1, c2) {\n    var t1 = 1.0 - t;\n    return [\n        (pow(t1, 3.0) * p1[0]) + (3.0 * t * pow(t1, 2.0) * c1[0]) + (3.0 * pow(t, 2.0) * t1 * c2[0]) + (pow(t, 3.0) * p2[0]),\n        (pow(t1, 3.0) * p1[1]) + (3.0 * t * pow(t1, 2.0) * c1[1]) + (3.0 * pow(t, 2.0) * t1 * c2[1]) + (pow(t, 3.0) * p2[1]),\n    ];\n}\n/** A quick lookup for an interpolation method based on Edge Type */\nvar interpolation = (_a = {},\n    _a[types_1.EdgeType.LINE] = linear,\n    _a[types_1.EdgeType.BEZIER] = bezier,\n    _a[types_1.EdgeType.BEZIER2] = bezier2,\n    _a);\n/** Converts a point array to a point object */\nfunction toPointObject(point) {\n    return {\n        x: point[0],\n        y: point[1],\n    };\n}\n/** Converts a point object to a point array */\nfunction toPointArray(point) {\n    return [\n        point.x,\n        point.y,\n    ];\n}\n/** Takes two points that forms a line then calculates the nearest distance from that line to the third point */\nfunction distanceTo(start, end, p) {\n    // Make a vector from a line point to the indicated point\n    var vector = vector_1.subtract2(start, p);\n    var lineDirection = vector_1.subtract2(end, start);\n    var lineNormal = [lineDirection[1], -lineDirection[0]];\n    var distance = Math.abs(vector_1.dot2(vector, lineNormal)) / vector_1.length2(lineDirection);\n    // The distance is d = |v . r| where v is a unit perpendicular vector to the Line\n    return distance;\n}\n// This sets the number of iterations along a curve we sample to test collisions with\nvar TEST_RESOLUTION = 50;\n/**\n * This generates the picking methods needed for managing PickType.ALL for the edge layer.\n */\nfunction edgePicking(props) {\n    var broadphase = props.broadphase, _a = props.minPickDistance, minPickDistance = _a === void 0 ? 0 : _a, scaleType = props.scaleType, type = props.type;\n    var interpolate = interpolation[props.type];\n    var boundsAccessor = function (edge) {\n        var edgeWidthStart = edge.widthStart / 2 + minPickDistance;\n        var edgeWidthEnd = edge.widthEnd / 2 + minPickDistance;\n        // Encapsulate the endpoints as they are guaranteed to be included in the shape\n        // Each endpoint will be a box that includes the endpoint thickness\n        var bounds = new bounds_1.Bounds({\n            height: edge.widthStart,\n            width: edge.widthStart,\n            x: edge.start[0] - edgeWidthStart,\n            y: edge.start[1] - edgeWidthStart,\n        });\n        bounds.encapsulate(new bounds_1.Bounds({\n            height: edge.widthEnd,\n            width: edge.widthEnd,\n            x: edge.end[0] - edgeWidthEnd,\n            y: edge.end[1] - edgeWidthEnd,\n        }));\n        // Encapsulating the bezier control points is enough of a broadphase for beziers\n        if (props.type === types_1.EdgeType.BEZIER) {\n            bounds.encapsulate({\n                x: edge.control[0][0],\n                y: edge.control[0][1],\n            });\n        }\n        // Encapsulating the bezier control points is enough of a broadphase for beziers\n        else if (props.type === types_1.EdgeType.BEZIER2) {\n            bounds.encapsulate({\n                x: edge.control[0][0],\n                y: edge.control[0][1],\n            });\n            bounds.encapsulate({\n                x: edge.control[1][0],\n                y: edge.control[1][1],\n            });\n        }\n        if (broadphase === types_1.EdgeBroadphase.PASS_X) {\n            bounds.x = Number.MIN_SAFE_INTEGER / 2;\n            bounds.width = Number.MAX_SAFE_INTEGER;\n        }\n        if (broadphase === types_1.EdgeBroadphase.PASS_Y) {\n            bounds.y = Number.MIN_SAFE_INTEGER / 2;\n            bounds.height = Number.MAX_SAFE_INTEGER;\n        }\n        return bounds;\n    };\n    if (scaleType === types_1.EdgeScaleType.SCREEN_CURVE) {\n        return {\n            // Provide the calculated AABB world bounds for a given circle\n            boundsAccessor: boundsAccessor,\n            // Provide a precise hit test for the edge. This method performs all of the rendering\n            // And hit tests within screen space as opposed to world space.\n            hitTest: function (edge, point, view) {\n                point = view.worldToScreen(point);\n                var mouse = [point.x, point.y];\n                var closestIndex = 0;\n                var closestDistance = Number.MAX_VALUE;\n                var secondClosestIndex = 0;\n                var secondClosestDistance = Number.MAX_VALUE;\n                var start = view.worldToScreen(toPointObject(edge.start));\n                var end = view.worldToScreen(toPointObject(edge.end));\n                var control1, control2;\n                if (type === types_1.EdgeType.BEZIER) {\n                    control1 = vector_1.add2(toPointArray(start), edge.control[0]);\n                }\n                else if (type === types_1.EdgeType.BEZIER2) {\n                    control1 = vector_1.add2(toPointArray(start), edge.control[0]);\n                    control2 = vector_1.add2(toPointArray(end), edge.control[1]);\n                }\n                var startPoint = toPointArray(start);\n                var endPoint = toPointArray(end);\n                control1 = edge.control.length > 0 ? control1 : [0, 0];\n                control2 = edge.control.length > 1 ? control2 : [0, 0];\n                // Loop through sample points on the line and find one that is closest to the mouse point as possible\n                for (var i = 0; i < TEST_RESOLUTION; ++i) {\n                    var linePoint = interpolate(i / TEST_RESOLUTION, startPoint, endPoint, control1, control2);\n                    var distance = vector_1.length2(vector_1.subtract2(mouse, linePoint));\n                    if (distance < closestDistance) {\n                        secondClosestIndex = closestIndex;\n                        secondClosestDistance = closestDistance;\n                        closestIndex = i;\n                        closestDistance = distance;\n                    }\n                    else if (distance < secondClosestDistance) {\n                        secondClosestIndex = i;\n                        closestDistance = distance;\n                    }\n                }\n                var t = closestIndex / TEST_RESOLUTION;\n                var lineWidth = (edge.widthEnd - edge.widthStart) * t + edge.widthStart;\n                if (closestIndex === secondClosestIndex) {\n                    return false;\n                }\n                var startSegment = interpolate(closestIndex / TEST_RESOLUTION, startPoint, endPoint, control1, control2);\n                var endSegment = interpolate(secondClosestIndex / TEST_RESOLUTION, startPoint, endPoint, control1, control2);\n                // See how close the mouse is to the line between the two closest points for a more accurate\n                // Test\n                closestDistance = distanceTo(startSegment, endSegment, mouse);\n                // This helps determine if the mouse is beyond the end point\n                if (vector_1.dot2(vector_1.subtract2(endSegment, startSegment), vector_1.subtract2(mouse, startSegment)) < 0) {\n                    return false;\n                }\n                return closestDistance < ((lineWidth / 2.0) + minPickDistance);\n            },\n        };\n    }\n    return {\n        // Provide the calculated AABB world bounds for a given circle\n        boundsAccessor: boundsAccessor,\n        // Provide a precise hit test for the edge\n        hitTest: function (edge, point, view) {\n            var mouse = [point.x, point.y];\n            var closestIndex = 0;\n            var closestDistance = Number.MAX_VALUE;\n            // Loop through sample points on the line and find one that is closest to the mouse point as possible\n            for (var i = 0; i < TEST_RESOLUTION; ++i) {\n                var linePoint = interpolate(i / TEST_RESOLUTION, edge.start, edge.end, edge.control.length > 0 ? edge.control[0] : [0, 0], edge.control.length > 1 ? edge.control[1] : [0, 0]);\n                var distance = vector_1.length2(vector_1.subtract2(mouse, linePoint));\n                if (distance < closestDistance) {\n                    closestIndex = i;\n                    closestDistance = distance;\n                }\n            }\n            var t = closestIndex / TEST_RESOLUTION;\n            var lineWidth = (edge.widthEnd - edge.widthStart) * t + edge.widthStart;\n            return closestDistance < (lineWidth / 2.0);\n        },\n    };\n}\nexports.edgePicking = edgePicking;\nvar _a;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar util_1 = require(\"../../util\");\nvar edge_picking_1 = require(\"./edge-picking\");\nvar types_2 = require(\"./types\");\n/** Converts a control list to an IO value */\nfunction toInstanceIOValue(value) {\n    return [\n        value[0][0],\n        value[0][1],\n        value[1][0],\n        value[1][1],\n    ];\n}\n/** This picks the appropriate shader for the edge type desired */\nvar pickVS = (_a = {},\n    _a[types_2.EdgeType.LINE] = require('./shader/edge-layer-line.vs'),\n    _a[types_2.EdgeType.BEZIER] = require('./shader/edge-layer-bezier.vs'),\n    _a[types_2.EdgeType.BEZIER2] = require('./shader/edge-layer-bezier2.vs'),\n    _a);\n/** This is the base edge layer which is a template that can be filled with the needed specifics for a given line type */\nvar baseVS = require('./shader/edge-layer.vs');\nvar screenVS = require('./shader/edge-layer-screen-curve.vs');\nvar edgeFS = require('./shader/edge-layer.fs');\n/**\n * This layer displays edges and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar EdgeLayer = /** @class */ (function (_super) {\n    __extends(EdgeLayer, _super);\n    function EdgeLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    EdgeLayer.prototype.getInstancePickingMethods = function () {\n        return edge_picking_1.edgePicking(this.props);\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    EdgeLayer.prototype.initShader = function () {\n        var _a = this.props, _b = _a.scaleFactor, scaleFactor = _b === void 0 ? function () { return 1; } : _b, type = _a.type, _c = _a.scaleType, scaleType = _c === void 0 ? types_2.EdgeScaleType.NONE : _c;\n        var MAX_SEGMENTS = type === types_2.EdgeType.LINE ? 2 : 50;\n        // Calculate the normals and interpolations for our vertices\n        var vertexToNormal = (_d = {\n                0: 1\n            },\n            _d[MAX_SEGMENTS * 2 + 2] = -1,\n            _d);\n        var vertexInterpolation = (_e = {\n                0: 0\n            },\n            _e[MAX_SEGMENTS * 2 + 2] = 1,\n            _e);\n        var sign = 1;\n        for (var i = 0; i < MAX_SEGMENTS * 2; ++i) {\n            vertexToNormal[i + 1] = sign;\n            vertexInterpolation[i + 1] = Math.floor(i / 2) / (MAX_SEGMENTS - 1);\n            sign *= -1;\n        }\n        var vs = util_1.shaderTemplate(scaleType === types_2.EdgeScaleType.NONE ? baseVS : screenVS, {\n            // Retain the attributes injection\n            attributes: '${attributes}',\n            // Inject the proper interpolation method\n            interpolation: pickVS[type],\n        }, {\n            name: 'Edge Layer',\n            values: [\n                'interpolation',\n            ],\n        });\n        return {\n            fs: edgeFS,\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'start',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return o.start; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'end',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return o.end; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'widthStart',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.widthStart]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.TWO,\n                    name: 'widthEnd',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.widthEnd]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 2,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'colorStart',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.colorStart; },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'colorEnd',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.colorEnd; },\n                },\n                type === types_2.EdgeType.LINE ? {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'control',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return [0, 0, 0, 0]; },\n                } : null,\n                type === types_2.EdgeType.BEZIER ? {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'control',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return [o.control[0][0], o.control[0][1], 0, 0]; },\n                } : null,\n                type === types_2.EdgeType.BEZIER2 ? {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'control',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return toInstanceIOValue(o.control); },\n                } : null,\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (uniform) { return [scaleFactor()]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexInterpolation[vertex],\n                        // The number of vertices\n                        MAX_SEGMENTS * 2,\n                    ]; },\n                },\n            ],\n            vertexCount: MAX_SEGMENTS * 2 + 2,\n            vs: vs.shader,\n        };\n        var _d, _e;\n    };\n    EdgeLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    EdgeLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    // Set default props for the layer\n    EdgeLayer.defaultProps = {\n        broadphase: types_2.EdgeBroadphase.ALL,\n        data: null,\n        key: 'none',\n        scaleType: types_2.EdgeScaleType.NONE,\n        type: types_2.EdgeType.LINE,\n    };\n    return EdgeLayer;\n}(layer_1.Layer));\nexports.EdgeLayer = EdgeLayer;\nvar _a;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./edge-layer\"));\n__export(require(\"./edge-instance\"));\n__export(require(\"./types\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar instance_1 = require(\"../../util/instance\");\nvar CircleInstance = /** @class */ (function (_super) {\n    __extends(CircleInstance, _super);\n    function CircleInstance(options) {\n        var _this = _super.call(this, options) || this;\n        _this.color = [1.0, 1.0, 1.0, 1.0];\n        _this.depth = 0;\n        _this.radius = 0;\n        _this.x = 0;\n        _this.y = 0;\n        _this.color = options.color || _this.color;\n        _this.radius = options.radius || _this.radius;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        _this.depth = options.depth || _this.depth;\n        return _this;\n    }\n    Object.defineProperty(CircleInstance.prototype, \"width\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CircleInstance.prototype, \"height\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        instance_provider_1.observable\n    ], CircleInstance.prototype, \"color\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], CircleInstance.prototype, \"depth\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], CircleInstance.prototype, \"radius\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], CircleInstance.prototype, \"x\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], CircleInstance.prototype, \"y\", void 0);\n    return CircleInstance;\n}(instance_1.Instance));\nexports.CircleInstance = CircleInstance;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  vertexColor = color * color.a;\\n  gl_PointSize = radius * 2.0 * pixelRatio * scaleFactor;\\n  edgeSharpness = mix(0.8, 0.01, min(gl_PointSize / (45.0 * pixelRatio), 1.0));\\n  gl_Position = clipSpace(vec3(center, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius + (radius * 0.01),\\n    dot(dist, dist) * 4.0\\n  );\\n}\\n\\nvoid main() {\\n  float step_factor = circle(gl_PointCoord.xy, 1.0);\\n  gl_FragColor = mix(\\n    vec4(0.0, 0.0, 0.0, 0.0),\\n    vertexColor,\\n    step_factor\\n  );\\n}\\n\"","module.exports = \"void main() {\\n  gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n}\"","module.exports = \"\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\n/**\n * This manages mouse gestures broadcast to the layer and handles appropriate actions such as determining\n * how to make the interaction translate to picking events for the layer's instances.\n *\n * This class, in summary, takes in the gestures to the view and converts them to gestures to the instances.\n */\nvar LayerInteractionHandler = /** @class */ (function () {\n    function LayerInteractionHandler(layer) {\n        /** This tracks the elements that have the mouse currently over them */\n        this.isMouseOver = new Map();\n        /** This tracks the elements the mouse was down on */\n        this.isMouseDown = new Map();\n        this.layer = layer;\n    }\n    /**\n     * Handles mouse down gestures for a layer within a view\n     */\n    LayerInteractionHandler.prototype.handleMouseOver = function (view, mouse) {\n        // This is the mouse over for the view itself. We should probably just let the mouse over events handle the interactions\n        // With the instances\n    };\n    /**\n     * Handles mouse down gestures for a layer within a view\n     */\n    LayerInteractionHandler.prototype.handleMouseDown = function (view, mouse, button) {\n        var _this = this;\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type === types_1.PickType.ALL) {\n            var onMouseDown = this.layer.props.onMouseDown;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseDown) {\n                var world_1 = view.viewToWorld(mouse);\n                var hitTest_1 = this.layer.picking.hitTest;\n                var query_1 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                var instances = query_1(world_1).filter(function (o) { return hitTest_1(o, world_1, view); });\n                var info = {\n                    button: button,\n                    instances: instances,\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: function (check) { return query_1(check).filter(function (o) { return hitTest_1(o, world_1, view); }); },\n                    screen: [mouse.x, mouse.y],\n                    world: [world_1.x, world_1.y],\n                };\n                onMouseDown(info);\n                // We track all the elements the mouse is currently down on\n                this.isMouseDown.clear();\n                instances.forEach(function (o) { return _this.isMouseDown.set(o, true); });\n            }\n        }\n    };\n    /**\n     * Handles mouse out events for a layer within the view\n     */\n    LayerInteractionHandler.prototype.handleMouseOut = function (view, mouse) {\n        // This will fire an instance mouse out for any over instances in the queue since we left the view\n        // Thus no instances shall be considered 'over'\n        if (this.layer.picking && this.layer.picking.type === types_1.PickType.ALL) {\n            var onMouseOut = this.layer.props.onMouseOut;\n            if (onMouseOut) {\n                var world_2 = view.viewToWorld(mouse);\n                var query_2 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                var hitTest_2 = this.layer.picking.hitTest;\n                var info = {\n                    instances: Array.from(this.isMouseOver.keys()),\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: function (check) { return query_2(check).filter(function (o) { return hitTest_2(o, world_2, view); }); },\n                    screen: [mouse.x, mouse.y],\n                    world: [world_2.x, world_2.y],\n                };\n                onMouseOut(info);\n            }\n        }\n        // We clear as no instances are over anymore\n        this.isMouseOver.clear();\n        // We also clear all down elements as the mouse is no longer in proper context for the instances\n        // But since the mouse was never actually released, we do not fire an up\n        this.isMouseDown.clear();\n    };\n    /**\n     * Handles mouse up gestures for the layer within the provided view\n     */\n    LayerInteractionHandler.prototype.handleMouseUp = function (view, mouse, button) {\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type === types_1.PickType.ALL) {\n            var onMouseUp = this.layer.props.onMouseUp;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseUp) {\n                var world_3 = view.viewToWorld(mouse);\n                var hitTest_3 = this.layer.picking.hitTest;\n                var query_3 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                var instances = query_3(world_3).filter(function (o) { return hitTest_3(o, world_3, view); });\n                var info = {\n                    button: button,\n                    instances: instances,\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: function (check) { return query_3(check).filter(function (o) { return hitTest_3(o, world_3, view); }); },\n                    screen: [mouse.x, mouse.y],\n                    world: [world_3.x, world_3.y],\n                };\n                onMouseUp(info);\n            }\n        }\n    };\n    /**\n     * Mouse move events on the layer will detect when instances have their item newly over or just moved on\n     */\n    LayerInteractionHandler.prototype.handleMouseMove = function (view, mouse) {\n        var _this = this;\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type === types_1.PickType.ALL) {\n            var _a = this.layer.props, onMouseOver = _a.onMouseOver, onMouseMove = _a.onMouseMove, onMouseOut = _a.onMouseOut;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseOver || onMouseMove || onMouseOut) {\n                var info = void 0;\n                var world_4 = view.viewToWorld(mouse);\n                var hitTest_4 = this.layer.picking.hitTest;\n                var query_4 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                var instances = query_4(world_4).filter(function (o) { return hitTest_4(o, world_4, view); });\n                // Broadcast the picking info for newly over instances to any of the layers listeners if needed\n                if (onMouseOver) {\n                    var notOverInstances = instances.filter(function (o) { return !_this.isMouseOver.get(o); });\n                    info = {\n                        instances: notOverInstances,\n                        layer: this.layer.id,\n                        projection: view,\n                        querySpace: function (check) { return query_4(check).filter(function (o) { return hitTest_4(o, world_4, view); }); },\n                        screen: [mouse.x, mouse.y],\n                        world: [world_4.x, world_4.y],\n                    };\n                    if (notOverInstances.length > 0)\n                        onMouseOver(info);\n                }\n                // Broadcast the the picking info for all instances that the mouse moved on\n                if (onMouseMove) {\n                    // This is the pick info object we will broadcast from the layer\n                    info = {\n                        instances: instances,\n                        layer: this.layer.id,\n                        projection: view,\n                        querySpace: function (check) { return query_4(check).filter(function (o) { return hitTest_4(o, world_4, view); }); },\n                        screen: [mouse.x, mouse.y],\n                        world: [world_4.x, world_4.y],\n                    };\n                    onMouseMove(info);\n                }\n                // We take the hovered instances\n                var isCurrentlyOver_1 = new Map();\n                instances.forEach(function (o) { return isCurrentlyOver_1.set(o, true); });\n                // Broadcast the the picking info for all instances that the mouse moved off of\n                if (onMouseOut) {\n                    var noLongerOver = Array.from(this.isMouseOver.keys()).filter(function (o) { return !isCurrentlyOver_1.get(o); });\n                    // This is the pick info object we will broadcast from the layer\n                    info = {\n                        instances: noLongerOver,\n                        layer: this.layer.id,\n                        projection: view,\n                        querySpace: function (check) { return query_4(check).filter(function (o) { return hitTest_4(o, world_4, view); }); },\n                        screen: [mouse.x, mouse.y],\n                        world: [world_4.x, world_4.y],\n                    };\n                    if (noLongerOver.length > 0)\n                        onMouseOut(info);\n                }\n                // We store the current hovered over items as our over item list for next interaction\n                this.isMouseOver = isCurrentlyOver_1;\n            }\n        }\n    };\n    /**\n     * Handles click gestures on the layer within a view\n     */\n    LayerInteractionHandler.prototype.handleMouseClick = function (view, mouse, button) {\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type === types_1.PickType.ALL) {\n            var onMouseClick = this.layer.props.onMouseClick;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseClick) {\n                var world_5 = view.viewToWorld(mouse);\n                var hitTest_5 = this.layer.picking.hitTest;\n                var query_5 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                var instances = query_5(world_5).filter(function (o) { return hitTest_5(o, world_5, view); });\n                var info = {\n                    button: button,\n                    instances: instances,\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: function (check) { return query_5(check).filter(function (o) { return hitTest_5(o, world_5, view); }); },\n                    screen: [mouse.x, mouse.y],\n                    world: [world_5.x, world_5.y],\n                };\n                onMouseClick(info);\n            }\n        }\n    };\n    /**\n     * Handles drag gestures for the layer within the view\n     */\n    LayerInteractionHandler.prototype.handleMouseDrag = function (view, mouse) {\n        // We probably should not broadcast drag events for the sake of instances. Instance dragging should be handled on\n        // An instance by instance basis rather than coming from the view's gestures\n    };\n    return LayerInteractionHandler;\n}());\nexports.LayerInteractionHandler = LayerInteractionHandler;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\n// This is a mapping of the vector properties as they relate to an array order\nvar VECTOR_ACCESSORS = ['x', 'y', 'z', 'w'];\n/**\n * This class manages the process of taking the diffs of a layer and executing methods on those diffs to perform\n * updates to the uniforms that control those instances.\n */\nvar InstanceDiffManager = /** @class */ (function () {\n    function InstanceDiffManager(layer) {\n        this.layer = layer;\n    }\n    /**\n     * This returns the proper diff processor for handling diffs\n     */\n    InstanceDiffManager.prototype.getDiffProcessor = function () {\n        if (this.layer.picking) {\n            if (this.layer.picking.type === types_1.PickType.ALL) {\n                this.quadPicking = this.layer.picking;\n                return [\n                    this.changeInstanceQuad,\n                    this.addInstanceQuad,\n                    this.removeInstanceQuad,\n                ];\n            }\n        }\n        return [\n            this.changeInstance,\n            this.addInstance,\n            this.removeInstance,\n        ];\n    };\n    /**\n     * This processes add operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.addInstance = function (manager, instance, uniformCluster) {\n        // If the uniform cluster already exists, then we swap over to a change update\n        if (uniformCluster) {\n            manager.changeInstance(manager, instance, uniformCluster);\n        }\n        // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n        else {\n            var uniforms = manager.layer.uniformManager.add(instance);\n            instance.active = true;\n            manager.updateInstance(instance, uniforms);\n        }\n    };\n    /**\n     * This processes add operations from changes in the instancing data and manages the layer's quad tree\n     * with the instance as well.\n     */\n    InstanceDiffManager.prototype.addInstanceQuad = function (manager, instance, uniformCluster) {\n        // If the uniform cluster already exists, then we swap over to a change update\n        if (uniformCluster) {\n            manager.changeInstanceQuad(manager, instance, uniformCluster);\n        }\n        // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n        else {\n            var uniforms = manager.layer.uniformManager.add(instance);\n            instance.active = true;\n            manager.updateInstance(instance, uniforms);\n            // Ensure the instance has an updated injection in the quad tree\n            manager.quadPicking.quadTree.remove(instance);\n            manager.quadPicking.quadTree.add(instance);\n        }\n    };\n    /**\n     * This processes change operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.changeInstance = function (manager, instance, uniformCluster) {\n        // If there is an existing uniform cluster for this instance, then we can update the uniforms\n        if (uniformCluster) {\n            manager.updateInstance(instance, uniformCluster);\n        }\n        // If we don't have existing uniforms, then we must remove the instance\n        else {\n            manager.addInstance(manager, instance, uniformCluster);\n        }\n    };\n    /**\n     * This processes change operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.changeInstanceQuad = function (manager, instance, uniformCluster) {\n        // If there is an existing uniform cluster for this instance, then we can update the uniforms\n        if (uniformCluster) {\n            manager.updateInstance(instance, uniformCluster);\n            // Ensure the instance has an updated injection in the quad tree\n            manager.quadPicking.quadTree.remove(instance);\n            manager.quadPicking.quadTree.add(instance);\n        }\n        // If we don't have existing uniforms, then we must remove the instance\n        else {\n            manager.addInstanceQuad(manager, instance, uniformCluster);\n        }\n    };\n    /**\n     * This processes remove operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.removeInstance = function (manager, instance, uniformCluster) {\n        if (uniformCluster) {\n            // We deactivate the instance so it does not render anymore\n            instance.active = false;\n            // We do one last update on the instance to update to it's deactivated state\n            manager.updateInstance(instance, uniformCluster);\n            // Unlink the instance from the uniform cluster\n            manager.layer.uniformManager.remove(instance);\n        }\n    };\n    /**\n     * This processes remove operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.removeInstanceQuad = function (manager, instance, uniformCluster) {\n        if (uniformCluster) {\n            // We deactivate the instance so it does not render anymore\n            instance.active = false;\n            // We do one last update on the instance to update to it's deactivated state\n            manager.updateInstance(instance, uniformCluster);\n            // Unlink the instance from the uniform cluster\n            manager.layer.uniformManager.remove(instance);\n            // Remove the instance from our quad tree\n            manager.quadPicking.quadTree.remove(instance);\n        }\n    };\n    InstanceDiffManager.prototype.updateInstance = function (instance, uniformCluster) {\n        if (instance.active) {\n            var uniforms = uniformCluster.uniform;\n            var uniformRangeStart = uniformCluster.uniformRange[0];\n            var instanceData = uniforms.value;\n            var instanceUniform = void 0, value = void 0, block = void 0, start = void 0;\n            var k = void 0, endk = void 0;\n            // Loop through the instance attributes and update the uniform cluster with the valaues\n            // Calculated for the instance\n            for (var i = 0, end = this.layer.instanceAttributes.length; i < end; ++i) {\n                instanceUniform = this.layer.instanceAttributes[i];\n                value = instanceUniform.update(instance);\n                block = instanceData[uniformRangeStart + instanceUniform.block];\n                instanceUniform.atlas && this.layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n                start = instanceUniform.blockIndex;\n                // Hyper optimized vector filling routine. It uses properties that are globally scoped\n                // To greatly reduce overhead\n                for (k = start, endk = value.length + start; k < endk; ++k) {\n                    block[VECTOR_ACCESSORS[k]] = value[k - start];\n                }\n            }\n            uniforms.value = instanceData;\n        }\n        else {\n            var uniforms = uniformCluster.uniform;\n            var uniformRangeStart = uniformCluster.uniformRange[0];\n            var instanceData = uniforms.value;\n            var instanceUniform = void 0, value = void 0, block = void 0, start = void 0;\n            // Only update the _active attribute to ensure it is false. When it is false, there is no\n            // Point to updating any other uniform\n            instanceUniform = this.layer.activeAttribute;\n            value = instanceUniform.update(instance);\n            block = instanceData[uniformRangeStart + instanceUniform.block];\n            instanceUniform.atlas && this.layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n            start = instanceUniform.blockIndex;\n            // Hyper optimized vector filling routine. It uses properties that are globally scoped\n            // To greatly reduce overhead\n            for (var k = start, endk = value.length + start; k < endk; ++k) {\n                block[VECTOR_ACCESSORS[k]] = value[k - start];\n            }\n            uniforms.value = instanceData;\n        }\n    };\n    return InstanceDiffManager;\n}());\nexports.InstanceDiffManager = InstanceDiffManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Calculates the distance between two points, but keeps the distance in dquared form\n * thus performing Math.sqrt() on the output of this distance would provide the true\n * distance between the points.\n *\n * It is often faster and all that is needed to compare squared distances vs real distances\n * thus eliminating multiple Math.sqrt operations\n *\n * NOTE: For vectors this is the same as (pseudo code):\n * let vector3 = vector2.subtract(vector1)\n * return vector3.dot(vector3)\n *\n * @param p1 The point to find the distance from the second point\n * @param p2 The point to find the distance from the first point\n *\n * @return {number} The distance * distance between the two points\n */\nfunction squareDistance(p1, p2) {\n    var dx = p1.x - p2.x;\n    var dy = p1.y - p2.y;\n    return dx * dx + dy * dy;\n}\n/**\n * Contains methods for managing or manipulating points\n *\n * @export\n * @class Point\n */\nvar Point = /** @class */ (function () {\n    function Point() {\n    }\n    /**\n     * Adds two points together\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @return {IPoint} The two points added together\n     */\n    Point.add = function (p1, p2, out) {\n        if (out) {\n            out.x = p1.x + p2.x;\n            out.y = p1.y + p2.y;\n            return out;\n        }\n        return {\n            x: p1.x + p2.x,\n            y: p1.y + p2.y,\n        };\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {IPoint} The closest point to the test point\n     */\n    Point.getClosest = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = null;\n        var distance;\n        var findClosest = function (point) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = point;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * This just returns the index of the found point and not the point itself\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {number} The index of the closest point to the test point\n     */\n    Point.getClosestIndex = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = 0;\n        var distance;\n        var findClosest = function (point, i) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = i;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This will calculate a direction vector between two points that points toward p2\n     *\n     * @param {IPoint} amount The start of the direction\n     * @param {IPoint} from The direction to point the vector towards\n     * @param {boolean} normalize If true, this will make the vector have a magnitude of 1\n     *\n     * @returns {number}\n     */\n    Point.subtract = function (amount, from, normalize) {\n        if (normalize === void 0) { normalize = false; }\n        var dx = from.x - amount.x;\n        var dy = from.y - amount.y;\n        if (normalize) {\n            var magnitude = Math.sqrt(dx * dx + dy * dy);\n            dx /= magnitude;\n            dy /= magnitude;\n        }\n        return {\n            x: dx,\n            y: dy,\n        };\n    };\n    /**\n     * @static\n     * Gets the distance between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {boolean} squared If set to true, returns the distance * distance (performs faster)\n     *\n     * @returns {number} The real distance between two points\n     */\n    Point.getDistance = function (p1, p2, squared) {\n        if (squared === void 0) { squared = false; }\n        if (squared) {\n            return squareDistance(p1, p2);\n        }\n        return Math.sqrt(squareDistance(p1, p2));\n    };\n    /**\n     * @static\n     * Gets a point perfectly between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     *\n     * @returns {IPoint} The point between the two provided points\n     */\n    Point.getMidpoint = function (p1, p2) {\n        var direction = Point.subtract(p1, p2);\n        return {\n            x: direction.x / 2 + p1.x,\n            y: direction.y / 2 + p1.y,\n        };\n    };\n    Point.make = function (x, y) {\n        return { x: x, y: y };\n    };\n    /**\n     * Scales a point by a given amount\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {number} s The amount to scale the point by\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @memberof Point\n     */\n    Point.scale = function (p1, s, out) {\n        if (out) {\n            out.x = p1.x * s;\n            out.y = p1.y * s;\n            return out;\n        }\n        return {\n            x: p1.x * s,\n            y: p1.y * s,\n        };\n    };\n    /**\n     * Makes a new point initialized to {0,0}\n     *\n     * @static\n     * @returns {IPoint} A new point object at {0,0}\n     */\n    Point.zero = function () {\n        return {\n            x: 0,\n            y: 0,\n        };\n    };\n    return Point;\n}());\nexports.Point = Point;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar CircleLayer = /** @class */ (function (_super) {\n    __extends(CircleLayer, _super);\n    function CircleLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    CircleLayer.prototype.getInstancePickingMethods = function () {\n        var _this = this;\n        return {\n            // Provide the calculated AABB world bounds for a given circle\n            boundsAccessor: function (circle) { return new primitives_1.Bounds({\n                height: circle.radius * 2,\n                width: circle.radius * 2,\n                x: circle.x - circle.radius,\n                y: circle.y - circle.radius,\n            }); },\n            // Provide a precise hit test for the circle\n            hitTest: function (circle, point, view) {\n                var circleScreenCenter = view.worldToScreen(circle);\n                var mouseScreen = view.worldToScreen(point);\n                var r = circle.radius * _this.props.scaleFactor();\n                var delta = [\n                    mouseScreen.x - circleScreenCenter.x,\n                    mouseScreen.y - circleScreenCenter.y,\n                ];\n                return (delta[0] * delta[0] + delta[1] * delta[1]) < (r * r);\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    CircleLayer.prototype.initShader = function () {\n        var scaleFactor = this.props.scaleFactor || (function () { return 1; });\n        return {\n            fs: require('./circle-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'center',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (circle) { return [circle.x, circle.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'radius',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (circle) { return [circle.radius]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (circle) { return [circle.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (circle) { return circle.color; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (uniform) { return [scaleFactor()]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    defaults: [0],\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [0, 0, 0]; },\n                },\n            ],\n            vertexCount: 1,\n            vs: require('./circle-layer.vs'),\n        };\n    };\n    CircleLayer.prototype.getModelType = function () {\n        return {\n            modelType: Three.Points,\n        };\n    };\n    CircleLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            depthTest: !this.props.disableDepthTest,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return CircleLayer;\n}(layer_1.Layer));\nexports.CircleLayer = CircleLayer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./circle-layer\"));\n__export(require(\"./circle-instance\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./circles\"));\n__export(require(\"./edges\"));\n__export(require(\"./images\"));\n__export(require(\"./labels\"));\n__export(require(\"./rectangle\"));\n__export(require(\"./rings\"));\n__export(require(\"./types\"));\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * Active `debug` instances.\n */\nexports.instances = [];\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  var prevTime;\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n  debug.destroy = destroy;\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  exports.instances.push(debug);\n\n  return debug;\n}\n\nfunction destroy () {\n  var index = exports.instances.indexOf(this);\n  if (index !== -1) {\n    exports.instances.splice(index, 1);\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var i;\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n\n  for (i = 0; i < exports.instances.length; i++) {\n    var instance = exports.instances[i];\n    instance.enabled = exports.enabled(instance.namespace);\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  if (name[name.length - 1] === '*') {\n    return true;\n  }\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__102__;","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nvar maxPopulation = 5;\nvar maxDepth = 10;\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n */\nvar Quadrants = /** @class */ (function () {\n    /**\n     * Creates an instance of Quadrants.\n     *\n     * @param bounds The bounds this will create quandrants for\n     * @param depth  The child depth of this element\n     */\n    function Quadrants(bounds, depth, getBounds, childToNode, childToBounds) {\n        var mid = bounds.mid;\n        this.TL = new Node(bounds.x, mid.x, bounds.y, mid.y, getBounds, depth);\n        this.TR = new Node(mid.x, bounds.right, bounds.y, mid.y, getBounds, depth);\n        this.BL = new Node(bounds.x, mid.x, mid.y, bounds.bottom, getBounds, depth);\n        this.BR = new Node(mid.x, bounds.right, mid.y, bounds.bottom, getBounds, depth);\n        this.TL.childToNode = childToNode;\n        this.TR.childToNode = childToNode;\n        this.BL.childToNode = childToNode;\n        this.BR.childToNode = childToNode;\n        this.TL.childToBounds = childToBounds;\n        this.TR.childToBounds = childToBounds;\n        this.BL.childToBounds = childToBounds;\n        this.BR.childToBounds = childToBounds;\n    }\n    /**\n     * Ensures all memory is released for all nodes and all references are removed\n     * to potentially high memory consumption items\n     */\n    Quadrants.prototype.destroy = function () {\n        this.TL.destroy();\n        this.TR.destroy();\n        this.BL.destroy();\n        this.BR.destroy();\n        delete this.TL;\n        delete this.TR;\n        delete this.BL;\n        delete this.BR;\n    };\n    return Quadrants;\n}());\nexports.Quadrants = Quadrants;\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n */\nvar Node = /** @class */ (function () {\n    /**\n     * Creates an instance of Node.\n     */\n    function Node(left, right, top, bottom, getBounds, depth) {\n        if (depth === void 0) { depth = 0; }\n        /** These are the child Instances of the node. */\n        this.children = [];\n        /** This is how deep the node is within the tree */\n        this.depth = 0;\n        /** These are the child nodes of this quad node when this node is split. It is null if the node is not split yet */\n        this.nodes = null;\n        // If params insertted\n        if (arguments.length >= 4) {\n            this.bounds = new bounds_1.Bounds({ left: left, right: right, top: top, bottom: bottom });\n        }\n        else {\n            // Otherwise, make tiny start area\n            this.bounds = new bounds_1.Bounds({ left: 0, right: 1, top: 1, bottom: 0 });\n        }\n        // Ensure the depth is set\n        this.depth = depth;\n        // Apply the bounds accessor method for instances\n        this.getBounds = getBounds;\n        // If this is the top level node, we need to instantiate the lookup that will be used\n        // Across all nodes.\n        if (this.depth === 0) {\n            this.nullBounded = [];\n            this.childToNode = new Map();\n            this.childToBounds = new Map();\n        }\n    }\n    /**\n     * Destroys this node and ensures all child nodes are destroyed as well.\n     */\n    Node.prototype.destroy = function () {\n        delete this.children;\n        delete this.bounds;\n        if (this.nodes) {\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n    };\n    /**\n     * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n     * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n     * this quad tree spans (and this is the root node), the quad tree will expand to include\n     * the new child.\n     *\n     * @param child The Bounds type object to inject\n     * @param props Properties that can be retrieved with the child object if applicable\n     *\n     * @returns True if the insertion was successful\n     */\n    Node.prototype.add = function (child) {\n        var bounds = this.childToBounds.get(child);\n        if (!bounds) {\n            // First we access the bounds of the child and store it\n            bounds = this.getBounds(child);\n            this.childToBounds.set(child, bounds);\n        }\n        // This is the entry function for adding children, so we must first expand our top node\n        // To cover the area that the child is located.\n        // If we're in bounds, then let's just add the child\n        if (!bounds || bounds.isInside(this.bounds)) {\n            return this.doAdd(child, bounds);\n        }\n        else {\n            // Otherwise, we need to expand first\n            this.cover(bounds);\n            return this.add(child);\n        }\n    };\n    /**\n     * Adds a list of new children to this quad tree. It performs the same operations as\n     * addChild for each child in the list, however, it more efficiently recalculates the\n     * bounds necessary to cover the area the children cover.\n     *\n     * @param children      List of Bounds objects to inject\n     */\n    Node.prototype.addAll = function (children) {\n        var _this = this;\n        // Make sure we cover the entire area of all the children.\n        // We can speed this up a lot if we first calculate the total bounds the new children covers\n        var minX = Number.MAX_VALUE;\n        var minY = Number.MAX_VALUE;\n        var maxX = -Number.MAX_VALUE;\n        var maxY = -Number.MAX_VALUE;\n        // Get the dimensions of the new bounds\n        children.forEach(function (child) {\n            var bounds = _this.getBounds(child);\n            _this.childToBounds.set(child, bounds);\n            if (!bounds)\n                return;\n            if (bounds.x < minX) {\n                minX = bounds.x;\n            }\n            if (bounds.right > maxX) {\n                maxX = bounds.right;\n            }\n            if (bounds.bottom > maxY) {\n                maxY = bounds.bottom;\n            }\n            if (bounds.y < minY) {\n                minY = bounds.y;\n            }\n        });\n        // Ensure a valid cover dimension was established. If no valid dimension is established\n        // Then we don't cover, but we can still add the children as that have null Bounds which\n        // Means injecting at the top level.\n        if (minX !== Number.MAX_VALUE &&\n            minY !== Number.MAX_VALUE &&\n            maxX !== -Number.MAX_VALUE &&\n            maxY !== -Number.MAX_VALUE) {\n            // Make sure our bounds includes the specified bounds\n            this.cover(new bounds_1.Bounds({ left: minX, right: maxX, bottom: maxY, top: minY }));\n        }\n        // Add all of the children into the tree.\n        children.forEach(function (child, index) { return _this.doAdd(child, _this.childToBounds.get(child) || null, true); });\n    };\n    /**\n     * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n     * This will cause all children to be re-injected into the tree.\n     *\n     * @param bounds The bounds to include in the tree's coverage\n     */\n    Node.prototype.cover = function (bounds) {\n        var _this = this;\n        // If we are already covering the area: abort\n        if (bounds.isInside(this.bounds)) {\n            return;\n        }\n        // Make our bounds cover the new area\n        this.bounds.encapsulate(bounds);\n        this.bounds.x -= 1;\n        this.bounds.y -= 1;\n        this.bounds.width += 2;\n        this.bounds.height += 2;\n        // Get all of the children underneath this node\n        var allChildren = this.gatherChildren([]);\n        this.children = [];\n        // Destroy the split nodes\n        if (this.nodes) {\n            // Completely...destroy...\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n        // Clear out the child to node relations\n        this.childToNode.clear();\n        // Reinsert all children with the new dimensions in place\n        allChildren.forEach(function (child, index) { return _this.doAdd(child, _this.childToBounds.get(child) || null); });\n    };\n    /**\n     * When adding children, this performs the actual action of injecting the child into the tree\n     * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n     *\n     * @param child The Bounds item to inject into the tree\n     * @param props The props to remain associated with the child\n     *\n     * @returns True if the injection was successful\n     */\n    Node.prototype.doAdd = function (child, bounds, fromSplit) {\n        // If this is the top level node and the bounds are null, then we add to the null list\n        if (!bounds && this.depth === 0) {\n            this.nullBounded.push(child);\n            this.childToNode.set(child, this);\n            return true;\n        }\n        // If no bounds is available at this point, something went terribly wrong\n        if (!bounds) {\n            console.warn('A null bounds was added to a Quad Tree node below the top node, which is invalid.');\n            return false;\n        }\n        // If bounds are null, then just immediately add\n        // If nodes are present, then we have already exceeded the population of this node\n        if (this.nodes) {\n            if (bounds.isInside(this.nodes.TL.bounds)) {\n                return this.nodes.TL.doAdd(child, bounds, fromSplit);\n            }\n            if (bounds.isInside(this.nodes.TR.bounds)) {\n                return this.nodes.TR.doAdd(child, bounds, fromSplit);\n            }\n            if (bounds.isInside(this.nodes.BL.bounds)) {\n                return this.nodes.BL.doAdd(child, bounds, fromSplit);\n            }\n            if (bounds.isInside(this.nodes.BR.bounds)) {\n                return this.nodes.BR.doAdd(child, bounds, fromSplit);\n            }\n            // Otherwise, this is a child overlapping this border\n            this.children.push(child);\n            this.childToNode.set(child, this);\n            return true;\n        }\n        else if (bounds.isInside(this.bounds)) {\n            // Otherwise, we have not had a split due to population limits being exceeded\n            this.children.push(child);\n            this.childToNode.set(child, this);\n            // If we exceeded our population for this quadrant, it is time to split up\n            if (this.children.length > maxPopulation && this.depth < maxDepth) {\n                this.split();\n            }\n            return true;\n        }\n        // This is when there is something wrong with the insertted child. The bounds\n        // For the quad should have grown without issue, but in this case the bounds\n        // Could not grow to accomodate the child.\n        if (isNaN(bounds.width + bounds.height + bounds.x + bounds.y)) {\n            console.error('Child did not fit into bounds because a dimension is NaN', child, bounds);\n        }\n        else if (bounds.area === 0) {\n            console.error('Child did not fit into bounds because the area is zero', child, bounds);\n        }\n        else {\n            console.error('Child did not get insertted.', 'Parent:', this.bounds.toString(), 'Child:', bounds.toString(), 'Inside Checks:', bounds.x >= this.bounds.x, bounds.right <= this.bounds.right, bounds.y >= this.bounds.y, bounds.bottom <= this.bounds.bottom);\n        }\n        // Don't insert the child and continue\n        return true;\n    };\n    Node.prototype.doRemove = function (child) {\n        var index = this.children.indexOf(child);\n        if (index > -1) {\n            this.children.splice(index, 1);\n            this.childToNode.delete(child);\n            this.childToBounds.delete(child);\n        }\n    };\n    /**\n     * Collects all children of all the current and sub nodes into a single list.\n     *\n     * @param list The list we must aggregate children into\n     *\n     * @return The list specified as the list parameter\n     */\n    Node.prototype.gatherChildren = function (list) {\n        this.children.forEach(function (child) { return list.push(child); });\n        if (this.nodes) {\n            this.nodes.TL.gatherChildren(list);\n            this.nodes.TR.gatherChildren(list);\n            this.nodes.BL.gatherChildren(list);\n            this.nodes.BR.gatherChildren(list);\n        }\n        return list;\n    };\n    /**\n     * Entry query for determining query type based on input object\n     *\n     * @param bounds Can be a Bounds or a Point object\n     * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n     *               information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return An array of children that intersects with the query\n     */\n    Node.prototype.query = function (bounds, visit) {\n        // This stores all of the found Instances when querying by bounds or point\n        var found = [];\n        // If this is the top level node then add in the null bunded items as the start\n        if (this.depth === 0) {\n            found = this.nullBounded.slice(0);\n        }\n        // Query a rectangle\n        if (bounds instanceof bounds_1.Bounds) {\n            if (bounds.hitBounds(this.bounds)) {\n                return this.queryBounds(bounds, found, visit);\n            }\n        }\n        // Query a point\n        if (this.bounds.containsPoint(bounds)) {\n            return this.queryPoint(bounds, found, visit);\n        }\n        // Return an empty array when nothing is collided with\n        return found;\n    };\n    /**\n     * Queries children for intersection with a bounds object\n     *\n     * @param b     The Bounds to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return     Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryBounds = function (b, list, visit) {\n        var _this = this;\n        this.children.forEach(function (c) {\n            var bounds = _this.childToBounds.get(c);\n            if (bounds && bounds.hitBounds(b)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (b.hitBounds(this.nodes.TL.bounds)) {\n                this.nodes.TL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.TR.bounds)) {\n                this.nodes.TR.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BL.bounds)) {\n                this.nodes.BL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BR.bounds)) {\n                this.nodes.BR.queryBounds(b, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Queries children for intersection with a point\n     *\n     * @param p     The Point to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return      Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryPoint = function (p, list, visit) {\n        var _this = this;\n        this.children.forEach(function (c) {\n            var bounds = _this.childToBounds.get(c);\n            if (bounds && bounds.containsPoint(p)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (this.nodes.TL.bounds.containsPoint(p)) {\n                this.nodes.TL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.TR.bounds.containsPoint(p)) {\n                this.nodes.TR.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BL.bounds.containsPoint(p)) {\n                this.nodes.BL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BR.bounds.containsPoint(p)) {\n                this.nodes.BR.queryPoint(p, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Remove the provided item from the tree.\n     */\n    Node.prototype.remove = function (child) {\n        if (this.childToNode) {\n            var node = this.childToNode.get(child);\n            // If the node is getting removed from the top level node, then it MAY be a null bounded item\n            // Which gets removed from the list\n            if (node && node.depth === 0) {\n                var index = node.nullBounded.indexOf(child);\n                if (index > -1) {\n                    node.nullBounded.splice(index);\n                    this.childToNode.delete(child);\n                    this.childToBounds.delete(child);\n                    return;\n                }\n            }\n            // Otherwise, just remove the node normally\n            if (node) {\n                node.doRemove(child);\n            }\n        }\n    };\n    /**\n     * Creates four sub quadrants for this node.\n     */\n    Node.prototype.split = function () {\n        // Gather all items to be handed down\n        var allChildren = this.gatherChildren([]);\n        // Gather all props for the children to be handed down as well\n        this.nodes = new Quadrants(this.bounds, this.depth + 1, this.getBounds, this.childToNode, this.childToBounds);\n        // Empty out the children as they are being re-injected\n        this.children = [];\n        for (var i = 0, end = allChildren.length; i < end; ++i) {\n            var child = allChildren[i];\n            this.doAdd(child, this.childToBounds.get(child) || null, true);\n        }\n    };\n    /**\n     * Traverses the quad tree returning every quadrant encountered\n     *\n     * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n     */\n    Node.prototype.visit = function (cb) {\n        var finished = Boolean(cb(this));\n        if (this.nodes && !finished) {\n            this.nodes.TL.visit(cb);\n            this.nodes.TR.visit(cb);\n            this.nodes.BL.visit(cb);\n            this.nodes.BR.visit(cb);\n        }\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar TrackedQuadTree = /** @class */ (function (_super) {\n    __extends(TrackedQuadTree, _super);\n    function TrackedQuadTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return TrackedQuadTree;\n}(Node));\nexports.TrackedQuadTree = TrackedQuadTree;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chart_camera_1 = require(\"./chart-camera\");\n/**\n * This is a camera that is based on another camera. This can apply filters\n * to the information provided from the base camera.\n *\n * Useful for situations such as a chart having a chart area and a list on the\n * left. This can use the same camera the chart area uses, but filter the response\n * to only track the y offset of the base camera.\n *\n * That would allow easy tracking of the left list to track with elements in the\n * chart and only manipulate a single camera instead of managing many cameras and\n * tie them together with lots of events.\n */\nvar ReferenceCamera = /** @class */ (function (_super) {\n    __extends(ReferenceCamera, _super);\n    function ReferenceCamera(options) {\n        var _this = _super.call(this) || this;\n        _this.offsetFilter = function (offset) { return offset; };\n        _this.scaleFilter = function (scale) { return scale; };\n        Object.assign(_this, options);\n        return _this;\n    }\n    Object.defineProperty(ReferenceCamera.prototype, \"offset\", {\n        get: function () {\n            return this.offsetFilter(this.base.offset);\n        },\n        set: function (val) {\n            /** no-op */\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ReferenceCamera.prototype, \"scale\", {\n        get: function () {\n            return this.scaleFilter(this.base.scale);\n        },\n        set: function (val) {\n            /** no-op */\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ReferenceCamera;\n}(chart_camera_1.ChartCamera));\nexports.ReferenceCamera = ReferenceCamera;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\nvar observable_manager_1 = require(\"./observable-manager\");\nfunction isObservable(val) {\n    return val.$$register;\n}\n/**\n * This is an optimized provider, that can provide instances that use the internal observable system\n * to deliver updates to the framework.\n */\nvar InstanceProvider = /** @class */ (function () {\n    function InstanceProvider() {\n        /** Stores the disposers that are called when the instance is no longer listened to */\n        this.cleanObservation = new Map();\n        /** This stores the changes to the instances themselves */\n        this.instanceChanges = new Map();\n        /** This flag is true when resolving changes when the change list is retrieved. it blocks changes until the current list is resolved */\n        this.allowChanges = true;\n    }\n    Object.defineProperty(InstanceProvider.prototype, \"changeList\", {\n        get: function () {\n            this.allowChanges = false;\n            return Array.from(this.instanceChanges.entries());\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Adds an instance to the provider which will stream observable changes of the instance to\n     * the framework.\n     */\n    InstanceProvider.prototype.add = function (instance) {\n        // No need to duplicate the addition\n        if (this.cleanObservation.get(instance)) {\n            return instance;\n        }\n        if (this.allowChanges) {\n            // Set the observable manager mode to gather observables\n            observable_manager_1.ObservableManager.mode = observable_manager_1.ObservableManagerMode.GATHER_OBSERVABLES;\n            // Set this as the current observer so registrations are made\n            observable_manager_1.ObservableManager.observer = this;\n            // This is the disposer\n            var disposer = void 0;\n            if (isObservable(instance)) {\n                disposer = instance.$$register;\n            }\n            // Store the disposers so we can clean up the observable properties\n            this.cleanObservation.set(instance, disposer);\n            // Indicate we have a new instance\n            this.instanceChanges.set(instance, types_1.InstanceDiffType.INSERT);\n            // Change the mode back to broadcasting so we don't keep trying to record observables\n            observable_manager_1.ObservableManager.mode = observable_manager_1.ObservableManagerMode.BROADCAST;\n        }\n        return instance;\n    };\n    /**\n     * Removes all instances from this provider\n     */\n    InstanceProvider.prototype.clear = function () {\n        for (var _i = 0, _a = Array.from(this.cleanObservation.keys()); _i < _a.length; _i++) {\n            var instance = _a[_i];\n            this.remove(instance);\n        }\n    };\n    /**\n     * Clear all resources held by this provider. It IS valid to lose reference to all instances\n     * and to this object, which would effectively cause this object to get GC'ed. But if you\n     * desire to hang onto the instance objects, then this should be called.\n     */\n    InstanceProvider.prototype.destroy = function () {\n        var _this = this;\n        var toRemove = Array.from(this.cleanObservation.keys());\n        toRemove.forEach(function (instance) { return _this.remove(instance); });\n        this.cleanObservation.clear();\n        this.instanceChanges.clear();\n    };\n    /**\n     * THis is called from observables to indicate it's parent has been updated\n     */\n    InstanceProvider.prototype.instanceUpdated = function (instance) {\n        if (this.allowChanges) {\n            // Flag the instance as having a property changed\n            this.instanceChanges.set(instance, types_1.InstanceDiffType.CHANGE);\n        }\n    };\n    /**\n     * Removes the instance from being advertised changes and from providing the changes\n     * for the instance.\n     */\n    InstanceProvider.prototype.remove = function (instance) {\n        if (this.allowChanges) {\n            instance.$$dispose;\n            this.cleanObservation.delete(instance);\n            this.instanceChanges.set(instance, types_1.InstanceDiffType.REMOVE);\n        }\n        return false;\n    };\n    /**\n     * Flagged all changes were dealt with\n     */\n    InstanceProvider.prototype.resolve = function () {\n        this.allowChanges = true;\n        this.instanceChanges.clear();\n    };\n    return InstanceProvider;\n}());\nexports.InstanceProvider = InstanceProvider;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar observable_manager_1 = require(\"./observable-manager\");\nvar observerKey = '$$';\nfunction observable(target, key) {\n    // This is the privatized version of the property where the actual value is stored\n    var storage = \"_$\" + key;\n    // Property getter\n    function getter() {\n        return this[storage];\n    }\n    // Property setter\n    function setter(newVal) {\n        // Update the privatized value\n        this[storage] = newVal;\n        // Broadcast change\n        var observer = this[observerKey];\n        observer && observer.instanceUpdated(this);\n    }\n    function register() {\n        var _this = this;\n        if (observable_manager_1.ObservableManager.mode === observable_manager_1.ObservableManagerMode.GATHER_OBSERVABLES) {\n            this[observerKey] = observable_manager_1.ObservableManager.observer;\n            return function () { return (_this[observerKey] = null); };\n        }\n        return null;\n    }\n    function dispose() {\n        this[observerKey] = null;\n    }\n    Object.defineProperty(target, '$$dispose', {\n        configurable: true,\n        enumerable: false,\n        get: dispose,\n    });\n    Object.defineProperty(target, '$$register', {\n        configurable: true,\n        enumerable: false,\n        get: register,\n    });\n    // Create new property with custom getter and setter\n    Object.defineProperty(target, key, {\n        configurable: true,\n        enumerable: true,\n        get: getter,\n        set: setter,\n    });\n}\nexports.observable = observable;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__107__;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar types_1 = require(\"../types\");\nfunction isObservableArray(val) {\n    return Boolean(val.observe);\n}\nvar UPDATE_FLAG = 'update';\nvar SPLICE_FLAG = 'splice';\n/**\n * This is a generic DataProvider that provides instance data to a layer. It monitors\n * changes to a list of instance items and records those changes for consumption by\n * internal layer processes. This allows for extremely easy editing of instance data\n * that reflects highly targetted changes to the system with very little overhead\n * allowing for very large datasets with rapidly changing parts.\n */\nvar DataProvider = /** @class */ (function () {\n    function DataProvider(data) {\n        var _this = this;\n        // When active, this provider is recording changes. Deactivate to temporarily disable\n        // Change tracking.\n        this.active = true;\n        this.instanceDisposers = new Map();\n        this.instanceChanges = new Map();\n        this.instanceById = new Map();\n        this.isChanged = false;\n        this._changeList = [];\n        /**\n         * This generates a method for an interceptor to monitor individual items within a list and record\n         * any changes found to the changelist\n         *\n         * @param changes This is the change list which records the changes to the items\n         */\n        this.monitorItem = function (changes) { return function (change) {\n            if (_this.active) {\n                if (change.type === UPDATE_FLAG) {\n                    changes.set(change.object, types_1.InstanceDiffType.CHANGE);\n                    _this.isChanged = true;\n                }\n                else {\n                    console.warn('Received an update type not supported by monitorItem:', change.type);\n                }\n            }\n            return change;\n        }; };\n        this._instances = mobx_1.observable(data || []);\n        if (isObservableArray(this._instances)) {\n            this.listDisposer = mobx_1.intercept(this._instances, this.monitorList(this._instances, this.instanceChanges, this.instanceById, this.instanceDisposers));\n        }\n    }\n    Object.defineProperty(DataProvider.prototype, \"instances\", {\n        // We very explicitly shut off the ability to set the top level properties on\n        // This element. Mutations on the properties are allowed (and are thus trackable)\n        // But modifying the root properties will not have a very clean way to monitor that.\n        // So we make the properties accessible without being replaceable.\n        get: function () {\n            return this._instances;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataProvider.prototype, \"changeList\", {\n        get: function () {\n            // When the changelist is retrieved, we deactivate change recording until the provider\n            // Is resolved\n            this.active = false;\n            if (this.isChanged) {\n                var changes_1 = [];\n                this.instanceChanges.forEach(function (changeType, instance) {\n                    changes_1.push([instance, changeType]);\n                });\n                this._changeList = changes_1;\n            }\n            return this._changeList;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Clears out all disposers and items in the dataset\n     */\n    DataProvider.prototype.destroy = function () {\n        this.listDisposer();\n        this.instanceDisposers.forEach(function (disposer) { return disposer(); });\n        this._instances = null;\n        this.instanceChanges.clear();\n        this._changeList = null;\n    };\n    /**\n     * This generates a method for an interceptor that will monitor and collect change information\n     * on the list of items specified.\n     *\n     * @param list The list of items to monitor\n     * @param changes The changelist for the list of given item type\n     * @param lookUp A lookup so items that have changed can get their source easily\n     */\n    DataProvider.prototype.monitorList = function (list, changes, lookUp, disposers) {\n        var _this = this;\n        return function (change) {\n            if (_this.active) {\n                // We only handle splice types for changes, these indicate elements have been added or removed\n                if (change.type === SPLICE_FLAG) {\n                    // Record the removals and clear out any interceptors\n                    for (var i = change.index, end = change.index + change.removedCount; i < end; ++i) {\n                        var item = change.object[i];\n                        changes.set(item, types_1.InstanceDiffType.REMOVE);\n                        _this.isChanged = true;\n                        var dispose = disposers.get(item);\n                        if (dispose) {\n                            dispose();\n                        }\n                    }\n                    // Record the additions and add intercepts for each item. Also generate a lookup for the item\n                    for (var i = 0, end = change.added.length; i < end; ++i) {\n                        var item = change.added[i] = mobx_1.observable(change.added[i]);\n                        changes.set(item, types_1.InstanceDiffType.INSERT);\n                        _this.isChanged = true;\n                        lookUp.set(item.id, item);\n                        disposers.set(item, mobx_1.intercept(item, _this.monitorItem(changes)));\n                    }\n                }\n                else {\n                    console.warn('Received an update type not supported by monitorList:', change.type);\n                }\n            }\n            return change;\n        };\n    };\n    /**\n     * This resolves all of the changes found and makes them disappear.\n     */\n    DataProvider.prototype.resolve = function () {\n        this.instanceById.clear();\n        this.instanceChanges.clear();\n        this._changeList = [];\n        this.active = true;\n    };\n    return DataProvider;\n}());\nexports.DataProvider = DataProvider;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\nvar event_manager_1 = require(\"../surface/event-manager\");\nvar util_1 = require(\"../util\");\nvar CameraBoundsAnchor;\n(function (CameraBoundsAnchor) {\n    CameraBoundsAnchor[CameraBoundsAnchor[\"TOP_LEFT\"] = 0] = \"TOP_LEFT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"TOP_MIDDLE\"] = 1] = \"TOP_MIDDLE\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"TOP_RIGHT\"] = 2] = \"TOP_RIGHT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"MIDDLE_LEFT\"] = 3] = \"MIDDLE_LEFT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"MIDDLE\"] = 4] = \"MIDDLE\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"MIDDLE_RIGHT\"] = 5] = \"MIDDLE_RIGHT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"BOTTOM_LEFT\"] = 6] = \"BOTTOM_LEFT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"BOTTOM_MIDDLE\"] = 7] = \"BOTTOM_MIDDLE\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"BOTTOM_RIGHT\"] = 8] = \"BOTTOM_RIGHT\";\n})(CameraBoundsAnchor = exports.CameraBoundsAnchor || (exports.CameraBoundsAnchor = {}));\nvar max = Math.max, min = Math.min;\n/**\n * This provides some very basic common needs for a camera control system. This is not a total solution\n * very every scenario. This should just often handle most basic needs.\n */\nvar BasicCameraController = /** @class */ (function (_super) {\n    __extends(BasicCameraController, _super);\n    function BasicCameraController(options) {\n        var _this = _super.call(this) || this;\n        /** Informative property indicating the controller is panning the chart or not */\n        _this.isPanning = false;\n        /** This is the filter applied to panning operations */\n        _this.panFilter = function (offset, view, allViews) { return offset; };\n        /** THis is the filter applied to tscaling operations */\n        _this.scaleFilter = function (scale, view, allViews) { return scale; };\n        /**\n         * Callback for when the range has changed for the camera in a view\n         */\n        _this.onRangeChanged = function (camera, targetView) { };\n        /**\n         * This flag is set to true when a start view is targetted on mouse down even if it is not\n         * the top most view.\n         */\n        _this.startViewDidStart = false;\n        /**\n         * Corrects camera offset to respect current bounds and anchor.\n         */\n        _this.applyBounds = function () {\n            if (_this.bounds && _this.camera) {\n                var targetView = _this.getView(_this.bounds.view);\n                _this.applyScaleBounds();\n                // Next bound the positioning\n                if (targetView) {\n                    _this.camera.offset[0] = _this.boundsHorizontalOffset(targetView);\n                    _this.camera.offset[1] = _this.boundsVerticalOffset(targetView);\n                }\n            }\n        };\n        _this.applyScaleBounds = function () {\n            if (_this.camera && _this.bounds) {\n                // First bound the scaling\n                if (_this.bounds.scaleMin) {\n                    _this.camera.scale = [\n                        max(_this.camera.scale[0], _this.bounds.scaleMin[0]),\n                        max(_this.camera.scale[1], _this.bounds.scaleMin[1]),\n                        max(_this.camera.scale[2], _this.bounds.scaleMin[2]),\n                    ];\n                }\n                if (_this.bounds.scaleMax) {\n                    _this.camera.scale = [\n                        min(_this.camera.scale[0], _this.bounds.scaleMax[0]),\n                        min(_this.camera.scale[1], _this.bounds.scaleMax[1]),\n                        min(_this.camera.scale[2], _this.bounds.scaleMax[2]),\n                    ];\n                }\n            }\n        };\n        _this.setBounds(options.bounds);\n        _this.camera = options.camera;\n        _this.scaleFactor = options.scaleFactor || 1000.0;\n        _this.ignoreCoverViews = options.ignoreCoverViews || false;\n        if (options.startView) {\n            _this.startViews = Array.isArray(options.startView) ? options.startView : [options.startView];\n        }\n        _this.panFilter = options.panFilter || _this.panFilter;\n        _this.scaleFilter = options.scaleFilter || _this.scaleFilter;\n        _this.onRangeChanged = options.onRangeChanged || _this.onRangeChanged;\n        return _this;\n    }\n    /**\n     * Calculation for adhering to an anchor - x-axis offset only.\n     */\n    BasicCameraController.prototype.anchoredByBoundsHorizontal = function (targetView) {\n        switch (this.bounds.anchor) {\n            case CameraBoundsAnchor.TOP_LEFT:\n            case CameraBoundsAnchor.MIDDLE_LEFT:\n            case CameraBoundsAnchor.BOTTOM_LEFT:\n                return -(this.bounds.worldBounds.left -\n                    this.bounds.screenPadding.left / this.camera.scale[0]);\n            case CameraBoundsAnchor.TOP_MIDDLE:\n            case CameraBoundsAnchor.MIDDLE:\n            case CameraBoundsAnchor.BOTTOM_MIDDLE:\n                return -(this.bounds.worldBounds.right - (this.bounds.worldBounds.width / 2) -\n                    (0.5 * ((targetView.screenBounds.width + this.bounds.screenPadding.right) / this.camera.scale[0])));\n            case CameraBoundsAnchor.TOP_RIGHT:\n            case CameraBoundsAnchor.MIDDLE_RIGHT:\n            case CameraBoundsAnchor.BOTTOM_RIGHT:\n                return -(this.bounds.worldBounds.right - ((targetView.screenBounds.width - this.bounds.screenPadding.right) / this.camera.scale[0]));\n        }\n    };\n    /**\n     * Calculation for adhering to an anchor - y-axis offset only.\n     */\n    BasicCameraController.prototype.anchoredByBoundsVertical = function (targetView) {\n        switch (this.bounds.anchor) {\n            case CameraBoundsAnchor.TOP_LEFT:\n            case CameraBoundsAnchor.TOP_MIDDLE:\n            case CameraBoundsAnchor.TOP_RIGHT:\n                return -(this.bounds.worldBounds.top) -\n                    (-this.bounds.screenPadding.top / this.scale[1]);\n            case CameraBoundsAnchor.MIDDLE_LEFT:\n            case CameraBoundsAnchor.MIDDLE:\n            case CameraBoundsAnchor.MIDDLE_RIGHT:\n                return -(this.bounds.worldBounds.bottom - (this.bounds.worldBounds.height / 2)) +\n                    ((0.5 * (targetView.screenBounds.height - this.bounds.screenPadding.bottom) / this.scale[1]));\n            case CameraBoundsAnchor.BOTTOM_LEFT:\n            case CameraBoundsAnchor.BOTTOM_MIDDLE:\n            case CameraBoundsAnchor.BOTTOM_RIGHT:\n                return -(this.bounds.worldBounds.bottom -\n                    (targetView.screenBounds.height - this.bounds.screenPadding.bottom) / this.scale[1]);\n        }\n    };\n    /**\n     * Returns offset on x-axis due to current bounds and anchor.\n     */\n    BasicCameraController.prototype.boundsHorizontalOffset = function (targetView) {\n        var worldTLinScreenSpace = targetView.worldToScreen({ x: this.bounds.worldBounds.left, y: this.bounds.worldBounds.top });\n        var worldBRinScreenSpace = targetView.worldToScreen({ x: this.bounds.worldBounds.right, y: this.bounds.worldBounds.bottom });\n        var widthDifference = (worldBRinScreenSpace.x - worldTLinScreenSpace.x) +\n            this.bounds.screenPadding.left +\n            this.bounds.screenPadding.right -\n            targetView.screenBounds.width;\n        // If the worldBounds are smaller than the screenBounds,\n        // We offset according to the anchoring\n        if (widthDifference < 0) {\n            return this.anchoredByBoundsHorizontal(targetView);\n        }\n        if (worldBRinScreenSpace.x < (targetView.screenBounds.right - this.bounds.screenPadding.right)) {\n            return (-this.bounds.worldBounds.right + (targetView.screenBounds.width - this.bounds.screenPadding.right) / this.camera.scale[0]);\n        }\n        if (worldTLinScreenSpace.x > (targetView.screenBounds.left + this.bounds.screenPadding.left)) {\n            return (-this.bounds.worldBounds.left + (this.bounds.screenPadding.left / this.camera.scale[0]));\n        }\n        return this.camera.offset[0];\n    };\n    /**\n     * Returns offset on y-axis due to current bounds and anchor.\n     */\n    BasicCameraController.prototype.boundsVerticalOffset = function (targetView) {\n        var worldTLinScreenSpace = targetView.worldToScreen({ x: this.bounds.worldBounds.left, y: this.bounds.worldBounds.top });\n        var worldBRinScreenSpace = targetView.worldToScreen({ x: this.bounds.worldBounds.right, y: this.bounds.worldBounds.bottom });\n        var heightDifference = (worldBRinScreenSpace.y - worldTLinScreenSpace.y) +\n            this.bounds.screenPadding.top +\n            this.bounds.screenPadding.bottom -\n            targetView.screenBounds.height;\n        // If the viewBounds are larger than the screenBounds,\n        // We offset according to the anchoring\n        if (heightDifference < 0) {\n            return this.anchoredByBoundsVertical(targetView);\n        }\n        if (worldTLinScreenSpace.y > targetView.screenBounds.top - this.bounds.screenPadding.top) {\n            return (-(this.bounds.worldBounds.top - (this.bounds.screenPadding.top / this.camera.scale[1])));\n        }\n        if (worldBRinScreenSpace.y < targetView.screenBounds.bottom + this.bounds.screenPadding.bottom) {\n            return (-(this.bounds.worldBounds.bottom + ((-targetView.screenBounds.height + this.bounds.screenPadding.bottom) / this.camera.scale[1])));\n        }\n        return this.camera.offset[1];\n    };\n    BasicCameraController.prototype.canStart = function (viewId) {\n        return (!this.startViews ||\n            this.startViews.length === 0 ||\n            (this.startViews && this.startViews.indexOf(viewId) > -1) ||\n            this.startViewDidStart && this.ignoreCoverViews);\n    };\n    BasicCameraController.prototype.findCoveredStartView = function (e) {\n        var _this = this;\n        var found = e.viewsUnderMouse.find(function (under) { return _this.startViews.indexOf(under.view.id) > -1; });\n        this.startViewDidStart = Boolean(found);\n        if (found) {\n            this.coveredStartView = found.view;\n        }\n    };\n    BasicCameraController.prototype.getTargetView = function (e) {\n        // If we have a start view and we do not ignore covering views,\n        // Then our target view is the view we started with\n        if (this.startViews && !this.ignoreCoverViews) {\n            return e.target.view;\n        }\n        // Otherwise, we use the covered start view\n        else {\n            return this.coveredStartView;\n        }\n    };\n    /**\n     * Used to aid in handling the pan effect and determine the contextual view targetted.\n     */\n    BasicCameraController.prototype.handleMouseDown = function (e, button) {\n        // We look for valid covered views on mouse down so dragging will work\n        this.findCoveredStartView(e);\n        // If this is a valid start view, then we enter a panning state with the mouse down\n        this.isPanning = this.canStart(e.start.view.id);\n    };\n    /**\n     * Used to aid in handling the pan effect\n     */\n    BasicCameraController.prototype.handleMouseUp = function (e) {\n        this.startViewDidStart = false;\n        this.isPanning = false;\n    };\n    /**\n     * Applies a panning effect by adjusting the camera's offset.\n     */\n    BasicCameraController.prototype.handleDrag = function (e, drag) {\n        if (this.canStart(e.start.view.id)) {\n            var pan = [(drag.screen.delta.x / this.camera.scale[0]),\n                (drag.screen.delta.y / this.camera.scale[1]),\n                0];\n            if (this.panFilter) {\n                pan = this.panFilter(pan, e.start.view, e.viewsUnderMouse.map(function (v) { return v.view; }));\n            }\n            this.camera.offset[0] += pan[0];\n            this.camera.offset[1] += pan[1];\n            // Add additional correction for bounds\n            this.applyBounds();\n            // Broadcast the change occurred\n            this.onRangeChanged(this.camera, e.start.view);\n            // Add additional correction for bounds\n            this.applyBounds();\n        }\n    };\n    /**\n     * Applies a scaling effect to the camera for mouse wheel events\n     */\n    BasicCameraController.prototype.handleWheel = function (e, wheelMetrics) {\n        // Every mouse wheel event must look to see if it's over a valid covered start view\n        this.findCoveredStartView(e);\n        if (this.canStart(e.target.view.id)) {\n            var targetView = this.getTargetView(e);\n            var beforeZoom = targetView.screenToWorld(e.screen.mouse);\n            var currentZoomX = this.camera.scale[0] || 1.0;\n            var currentZoomY = this.camera.scale[1] || 1.0;\n            var scale = [wheelMetrics.wheel[1] / this.scaleFactor *\n                    currentZoomX, wheelMetrics.wheel[1] / this.scaleFactor * currentZoomY, 1];\n            if (this.scaleFilter) {\n                scale = this.scaleFilter(scale, targetView, e.viewsUnderMouse.map(function (v) { return v.view; }));\n            }\n            this.camera.scale[0] = currentZoomX + scale[0];\n            this.camera.scale[1] = currentZoomY + scale[1];\n            // Ensure the new scale values are within bounds before attempting to correct offsets\n            this.applyScaleBounds();\n            var afterZoom = targetView.screenToWorld(e.screen.mouse);\n            this.camera.offset[0] -= (beforeZoom.x - afterZoom.x);\n            this.camera.offset[1] -= (beforeZoom.y - afterZoom.y);\n            // Add additional correction for bounds\n            this.applyBounds();\n            // Broadcast the change occurred\n            this.onRangeChanged(this.camera, targetView);\n            // Add additional correction for bounds\n            this.applyBounds();\n        }\n    };\n    // These are the currently Unused responses for this controller\n    BasicCameraController.prototype.handleMouseOut = function (e) { };\n    BasicCameraController.prototype.handleClick = function (e) { };\n    BasicCameraController.prototype.handleMouseMove = function (e) { };\n    BasicCameraController.prototype.handleMouseOver = function (e) { };\n    /**\n     * Evaluates the world bounds the specified view is observing\n     *\n     * @param viewId The id of the view when the view was generated when the surface was made\n     */\n    BasicCameraController.prototype.getRange = function (viewId) {\n        /** Get the projections for the provided view */\n        var projection = this.getProjection(viewId);\n        /** Get the bounds on the screen for the indicated view */\n        var screenBounds = this.getViewScreenBounds(viewId);\n        // Make sure we have a valid projection and screen bounds to make the adjustment\n        if (projection && screenBounds) {\n            /** Get the current viewed world bounds of the view */\n            var topLeft = projection.screenToWorld(screenBounds);\n            var bottomRight = projection.screenToWorld({ x: screenBounds.right, y: screenBounds.bottom });\n            return new bounds_1.Bounds({\n                height: bottomRight.y - topLeft.y,\n                width: bottomRight.x - topLeft.x,\n                x: topLeft.x,\n                y: topLeft.y,\n            });\n        }\n        return new bounds_1.Bounds({ x: 0, y: 0, width: 1, height: 1 });\n    };\n    Object.defineProperty(BasicCameraController.prototype, \"pan\", {\n        /**\n         * Retrieves the current pan of the controlled camera\n         */\n        get: function () {\n            return this.camera.offset;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets bounds applicable to the supplied view.\n     * If no view is supplied, it uses the first in the startViews array\n     */\n    BasicCameraController.prototype.setBounds = function (bounds) {\n        this.bounds = bounds;\n        this.applyBounds();\n    };\n    Object.defineProperty(BasicCameraController.prototype, \"scale\", {\n        /**\n         * Retrieves the current scale of the camera\n         */\n        get: function () {\n            return this.camera.scale;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This lets you set the visible range of a view based on the view's camera. This will probably not work\n     * as expected if the view indicated and this controller do not share the same camera.\n     *\n     * @param viewId The id of the view when the view was generated when the surface was made\n     */\n    BasicCameraController.prototype.setRange = function (newWorld, viewId) {\n        /** Get the projections for the provided view */\n        var projection = this.getProjection(viewId);\n        /** Get the bounds on the screen for the indicated view */\n        var screenBounds = this.getViewScreenBounds(viewId);\n        /** Get the view the range is being applied towards */\n        var view = this.getView(viewId);\n        // Make sure we have a valid projection and screen bounds to make the adjustment\n        if (projection && screenBounds && view) {\n            var deltaScale = util_1.subtract3([\n                screenBounds.width / newWorld.width,\n                screenBounds.height / newWorld.height,\n                1,\n            ], this.camera.scale);\n            this.camera.scale = util_1.add3(this.camera.scale, this.scaleFilter(deltaScale, view, [view]));\n            var deltaPan = util_1.subtract3([\n                -newWorld.x,\n                -newWorld.y,\n                0,\n            ], this.camera.offset);\n            this.camera.offset = util_1.add3(this.camera.offset, this.scaleFilter(deltaPan, view, [view]));\n            // Bound the camera to the specified bounding range\n            this.applyBounds();\n            // Broadcast the change occurred\n            this.onRangeChanged(this.camera, view);\n            // Bound the camera to the specified bounding range\n            this.applyBounds();\n        }\n    };\n    return BasicCameraController;\n}(event_manager_1.EventManager));\nexports.BasicCameraController = BasicCameraController;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./basic-camera-controller\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./base-event-managers\"));\n__export(require(\"./base-layers\"));\n__export(require(\"./instance-provider\"));\n__export(require(\"./primitives\"));\n__export(require(\"./surface\"));\n__export(require(\"./types\"));\n__export(require(\"./util\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./voidgl\"));\n"],"sourceRoot":""}