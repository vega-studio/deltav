{"version":3,"sources":["webpack://voidgl/webpack/universalModuleDefinition","webpack://voidgl/webpack/bootstrap","webpack://voidgl/./src/voidgl/types.ts","webpack://voidgl/external \"three\"","webpack://voidgl/./src/voidgl/util/index.ts","webpack://voidgl/./src/voidgl/instance-provider/index.ts","webpack://voidgl/./src/voidgl/primitives/bounds.ts","webpack://voidgl/./src/voidgl/base-layers/types.ts","webpack://voidgl/./src/voidgl/surface/buffer-management/buffer-manager-base.ts","webpack://voidgl/./src/voidgl/surface/layer.ts","webpack://voidgl/./src/voidgl/surface/layer-processing/layer-buffer-type.ts","webpack://voidgl/./src/voidgl/primitives/index.ts","webpack://voidgl/./src/voidgl/surface/texture/index.ts","webpack://voidgl/./src/voidgl/surface/layer-processing/generate-layer-model.ts","webpack://voidgl/./src/voidgl/util/identify-by-key.ts","webpack://voidgl/./src/voidgl/instance-provider/instance.ts","webpack://voidgl/./src/voidgl/surface/view.ts","webpack://voidgl/./src/voidgl/surface/scene.ts","webpack://voidgl/./src/voidgl/surface/texture/label-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/base-atlas-resource.ts","webpack://voidgl/./src/voidgl/base-layers/edges/types.ts","webpack://voidgl/./src/voidgl/surface/buffer-management/diff-processors/uniform-diff-processor.ts","webpack://voidgl/./src/voidgl/util/view-camera.ts","webpack://voidgl/./src/voidgl/util/shader-templating.ts","webpack://voidgl/./src/voidgl/util/chart-camera.ts","webpack://voidgl/./src/voidgl/util/vector.ts","webpack://voidgl/./src/voidgl/util/auto-easing-method.ts","webpack://voidgl/./src/voidgl/surface/event-manager.ts","webpack://voidgl/./src/voidgl/surface/mouse-event-manager.ts","webpack://voidgl/./src/voidgl/surface/layer-processing/inject-shader-io.ts","webpack://voidgl/./src/voidgl/surface/layer-processing/generate-layer-material.ts","webpack://voidgl/./src/voidgl/surface/layer-processing/generate-layer-geometry.ts","webpack://voidgl/./src/voidgl/surface/layer-processing/generate-default-scene.ts","webpack://voidgl/./src/voidgl/util/data-bounds.ts","webpack://voidgl/./src/voidgl/shaders/fragments/template-vars.ts","webpack://voidgl/./src/voidgl/base-layers/labels/index.ts","webpack://voidgl/./src/voidgl/surface/texture/label-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/image-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/color-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/color-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/sub-texture.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas.ts","webpack://voidgl/./src/voidgl/base-layers/images/index.ts","webpack://voidgl/./src/voidgl/surface/buffer-management/diff-processors/base-diff-processor.ts","webpack://voidgl/./src/voidgl/shaders/util/make-instance-uniform-name.ts","webpack://voidgl/./src/voidgl/shaders/util/instance-attribute-shader-name.ts","webpack://voidgl/./src/voidgl/util/webgl-stat.ts","webpack://voidgl/./node_modules/debug/src/browser.js","webpack://voidgl/./src/voidgl/util/mouse.ts","webpack://voidgl/./src/voidgl/util/uid.ts","webpack://voidgl/./src/voidgl/instance-provider/observable.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas-resource-manager.ts","webpack://voidgl/./src/voidgl/util/quad-tree.ts","webpack://voidgl/./src/voidgl/primitives/absolute-position.ts","webpack://voidgl/./src/voidgl/surface/event-managers/layer-mouse-events.ts","webpack://voidgl/./src/voidgl/util/color-picking-analysis.ts","webpack://voidgl/./src/voidgl/shaders/fragments/color-picking-assignment.vs","webpack://voidgl/./src/voidgl/shaders/fragments/color-picking-disabled.fs","webpack://voidgl/./src/voidgl/shaders/fragments/color-picking-method.fs","webpack://voidgl/./src/voidgl/shaders/fragments/color-picking-vertex-header.vs","webpack://voidgl/./src/voidgl/shaders/fragments/projection-methods.vs","webpack://voidgl/./src/voidgl/shaders/fragments/shader-input.vs","webpack://voidgl/./src/voidgl/shaders/fragments/instance-destructuring-array.vs","webpack://voidgl/./src/voidgl/shaders/fragments/fragment-shader-composition.fs","webpack://voidgl/./src/voidgl/shaders/fragments/vertex-shader-composition.vs","webpack://voidgl/./src/voidgl/shaders/fragments/instance-retrieval-array.vs","webpack://voidgl/./src/voidgl/shaders/util/uniform-instance-block-array.ts","webpack://voidgl/./src/voidgl/shaders/util/attribute-generation.ts","webpack://voidgl/./src/voidgl/surface/layer-surface.ts","webpack://voidgl/./src/voidgl/surface/index.ts","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.vs","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.fs","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.ts","webpack://voidgl/./src/voidgl/base-layers/rings/ring-instance.ts","webpack://voidgl/./src/voidgl/base-layers/rings/index.ts","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-instance.ts","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-layer.vs","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-layer.fs","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-layer.ts","webpack://voidgl/./src/voidgl/base-layers/rectangle/index.ts","webpack://voidgl/./src/voidgl/base-layers/labels/label-instance.ts","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.vs","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.fs","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.ts","webpack://voidgl/./src/voidgl/surface/texture/image-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas-manager.ts","webpack://voidgl/./src/voidgl/surface/texture/pack-node.ts","webpack://voidgl/./src/voidgl/base-layers/images/image-instance.ts","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.vs","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.fs","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.ts","webpack://voidgl/./src/voidgl/base-layers/edges/edge-instance.ts","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer.fs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-screen-curve.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-bezier2.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-bezier.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-line.vs","webpack://voidgl/./src/voidgl/base-layers/edges/edge-picking.ts","webpack://voidgl/./src/voidgl/base-layers/edges/edge-layer.ts","webpack://voidgl/./src/voidgl/base-layers/edges/index.ts","webpack://voidgl/./src/voidgl/base-layers/circles/circle-instance.ts","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.vs","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.fs","webpack://voidgl/./src/voidgl/shaders/base/no-op.vs","webpack://voidgl/./src/voidgl/shaders/base/no-op.fs","webpack://voidgl/./src/voidgl/surface/layer-interaction-handler.ts","webpack://voidgl/./src/voidgl/surface/buffer-management/diff-processors/uniform-quad-diff-processor.ts","webpack://voidgl/./src/voidgl/surface/buffer-management/diff-processors/uniform-color-diff-processor.ts","webpack://voidgl/./src/voidgl/surface/buffer-management/diff-processors/instance-attribute-diff-processor.ts","webpack://voidgl/./src/voidgl/surface/buffer-management/uniform-buffer-manager.ts","webpack://voidgl/./src/voidgl/util/emit-once.ts","webpack://voidgl/./src/voidgl/surface/buffer-management/instance-attribute-buffer-manager.ts","webpack://voidgl/./src/voidgl/surface/buffer-management/index.ts","webpack://voidgl/./src/voidgl/surface/buffer-management/instance-diff-manager.ts","webpack://voidgl/./src/voidgl/primitives/point.ts","webpack://voidgl/./src/voidgl/instance-provider/instance-provider.ts","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.ts","webpack://voidgl/./src/voidgl/base-layers/circles/index.ts","webpack://voidgl/./src/voidgl/base-layers/index.ts","webpack://voidgl/./src/voidgl/util/common-options.ts","webpack://voidgl/./src/voidgl/util/tracked-quad-tree.ts","webpack://voidgl/./src/voidgl/util/reference-camera.ts","webpack://voidgl/./node_modules/ms/index.js","webpack://voidgl/./node_modules/debug/src/debug.js","webpack://voidgl/./node_modules/process/browser.js","webpack://voidgl/external \"bowser\"","webpack://voidgl/./src/voidgl/util/animation-helper.ts","webpack://voidgl/./src/voidgl/base-event-managers/basic-camera-controller.ts","webpack://voidgl/./src/voidgl/base-event-managers/index.ts","webpack://voidgl/./src/voidgl/index.ts","webpack://voidgl/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__124__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","InstanceAttributeSize","InstanceBlockIndex","instanceAttributeSizeFloatCount","[object Object]","ONE","TWO","THREE","FOUR","ATLAS","UniformSize","VertexAttributeSize","ShaderInjectionTarget","PickType","InstanceDiffType","__export","Bounds","options","this","x","y","width","height","left","top","bottom","right","area","mid","point","item","Math","abs","bounds","AnchorType","ScaleType","isBufferLocation","val","buffer","isBufferLocationGroup","propertyToBufferLocation","BufferManagerBase","layer","scene","Three","types_1","util_1","identify_by_key_1","instance_diff_manager_1","layer_interaction_handler_1","Layer","IdentifyByKey","props","super","depth","instanceById","Map","instanceVertexCount","assign","defaultProps","picking","NONE","ALL","pickingMethods","getInstancePickingMethods","currentPickMode","hitTest","quadTree","TrackedQuadTree","boundsAccessor","type","SINGLE","uidToInstance","bufferManager","_bufferManager","bufferType","_bufferType","removeLayer","removeFromScene","destroy","uniform","changeList","data","change","instance","bufferLocations","diffManager","processing","processor","incomingChangeList","end","length","getBufferLocations","values","commit","resolve","uniforms","update","materialUniforms","forEach","materialUniform","Error","drawMode","TrianglesDrawMode","modelType","Mesh","fs","instanceAttributes","vertexAttributes","vertexCount","vs","block","blockIndex","size","atlas","shaderInjection","qualifier","console","warn","InstanceDiffManager","makeProcessor","interactions","LayerInteractionHandler","undefined","changes","newProps","buffer_management_1","LayerBufferType","getLayerBufferType","gl","WebGLStat","HARDWARE_INSTANCING","attributesUsed","attribute","ceil","MAX_VERTEX_ATTRIBUTES","UNIFORM","INSTANCE_ATTRIBUTE","setBufferType","makeLayerBufferManager","setBufferManager","InstanceAttributeBufferManager","UniformBufferManager","generateLayerModel","geometry","material","modelInfo","getModelType","model","Boolean","isMesh","TriangleStripDrawMode","id","key","observable_1","instanceUID","Instance","_attributeMapping","_easing","observableStorage","_uid","newUID","_id","active","observableDisposer","_observer","observer","oldObserver","remove","attributeMapping","easing","uid","__decorate","observable","absolute_position_1","bounds_1","view_camera_1","isOrthographic","ClearFlags","View","pixelRatio","devicePixelRatio","out","screenToPixelSpace","viewBounds","pixelSpaceToScreen","view","screenToView","world","camera","offset","scale","viewCamera","ViewCameraType","CUSTOM","screen","viewToScreen","surfaceDimensions","CONTROLLED","baseCamera","getAbsolutePositionBounds","viewport","far","near","scaleX","scaleY","position","set","z","updateMatrix","updateMatrixWorld","updateProjectionMatrix","screenBounds","DEFAULT_VIEW_ID","sortByDepth","a","b","Scene","container","pickingContainer","layers","sortIsDirty","viewById","frustumCulled","autoUpdate","push","index","indexOf","splice","sort","DEFAULT_SCENE_ID","base_atlas_resource_1","LabelAtlasResource","BaseAtlasResource","label","sampleScale","EdgeScaleType","EdgeType","EdgeBroadphase","buffer_manager_base_1","base_diff_processor_1","VECTOR_ACCESSORS","EMPTY","UniformDiffProcessor","BaseDiffProcessor","manager","_propIds","uniformCluster","changeInstance","add","updateInstance","addInstance","uniformRangeStart","range","instanceData","instanceUniform","start","k","endk","resource","setTargetAtlas","activeAttribute","_changes","ViewCamera","shaderTemplate","shader","required","matched","noValueProvided","notFound","shaderOptions","shaderResults","replace","match","keys","option","results","resolvedShaderOptions","shaderProvidedOptions","unresolvedProvidedOptions","unresolvedShaderOptions","error","chartCameraUID","applyArray","target","source","ChartCamera","location","slice","sqrt","add1","scale1","vec","subtract1","multiply1","dot1","linear1","t","length1","add2","scale2","subtract2","multiply2","dot2","linear2","length2","add3","scale3","subtract3","multiply3","linear3","length3","dot3","add4","scale4","subtract4","multiply4","dot4","linear4","length4","vec1Methods","dot","linear","multiply","subtract","vec2Methods","vec3Methods","vec4Methods","VecMath","methods","vector_1","min","max","pow","round","sin","PI","GPU_PI","clamp","minVal","maxVal","AutoEasingLoopStyle","immediateGPU","linearGPU","easeInQuadGPU","easeOutQuadGPU","easeInOutQuadGPU","easeInCubicGPU","easeOutCubicGPU","easeInOutCubicGPU","easeInQuartGPU","easeOutQuartGPU","easeInOutQuartGPU","easeInQuintGPU","easeOutQuintGPU","easeInOutQuintGPU","easeOutElasticGPU","easeBackInGPU","easeBackOutGPU","easeBackInOutGPU","continuousSinusoidalGPU","rate","AutoEasingMethod","cpu","gpu","duration","method","delay","loop","methodName","time","t1","a1","t2","direction","amplitude","EventManager","viewId","mouseManager","getView","mouse_1","quad_tree_1","VALID_CLICK_DELAY","isDefined","MouseEventManager","canvas","views","controllers","handlesWheelEvents","eventCleanup","_waitingForRender","getViewsUnderMouse","mouse","hitViews","query","resize","context","setViews","setControllers","addContextListeners","waitingForRender","QuadTree","addAll","map","v","filter","element","startView","startPosition","wheelHandler","event","eventElementPosition","interaction","makeInteraction","wheel","makeWheel","controller","handleWheel","stopPropagation","preventDefault","onwheel","addEventListener","onmouseleave","handleMouseOut","onmousemove","handleMouseMove","onmousedown","downViews","canClick","clickStartTime","Date","now","currentPosition","handleMouseDown","button","document","delta","drag","makeDrag","handleDrag","onmouseup","onmouseover","handleMouseOver","handleMouseUp","handleClick","onselectstart","addTouchContextListeners","ontouchstart","ontouchend","ontouchmove","ontouchcancel","previous","current","viewsUnderMouse","normalizeWheel","setMouseManager","onmousewheel","removeEventListener","auto_easing_method_1","layer_buffer_type_1","testStartVector","testEndVector","emptyTexture","Texture","isEasingAttribute","attr","isInstanceAttribute","isVertexAttribute","isUniform","toVertexAttributeInternal","materialAttribute","toUniformInternal","findEmptyBlock","attributes","seekingSize","usedBlocks","maxBlock","instanceAttribute","ind","breadth","sortNeedsUpdateFirstToTop","generateAtlasResourceUniforms","atlasInstanceAttributes","requestedAtlasInjections","isAtlasAttribute","injection","FRAGMENT","injections","VERTEX","getAtlasTexture","compareVec","injectShaderIO","shaderIO","find","testStart","testEnd","test","validateInstanceAttributes","easingAttributes","easingUID","easingValues","currentTime","surface","frameMetrics","startTime","timeValue","CONTINUOUS","REPEAT","REFLECT","timePassed","childAttributes","slot","startAttr","parentAttribute","startTimeAttr","durationAttr","generateEasingAttributes","addedUniforms","concat","MATRIX4","projectionMatrix","elements","matrix","generateBaseUniforms","generatePickingUniforms","addedInstanceAttributes","fillBlock","generateBaseInstanceAttributes","emptyFillBlock","color","generatePickingAttributes","allUniforms","allInstanceAttributes","generateBaseVertexAttributes","UNIFORM_SIZE_TO_MATERIAL_TYPE","MATRIX3","DEFAULT_UNIFORM_VALUE","toMaterialUniform","generateLayerMaterial","layerUniforms","instancingUniforms","materialParams","getMaterialOptions","vertexShader","fragmentShader","generatedUniform","RawShaderMaterial","isNumberCluster","Array","isArray","generateLayerGeometry","maxInstancesPerBuffer","vertexBuffers","Float32Array","formatError","j","endj","instanceSize","copyWithin","instancingBuffer","instanceStartIndex","BufferGeometry","BufferAttribute","addAttribute","chart_camera_1","scene_1","view_1","generateDefaultScene","aspectRatio","viewSize","defaultCamera","OrthographicCamera","defaultChartCamera","defaultViewport","defaultView","defaultScene","addView","DataBounds","templateVars","attributeFragments","blocksPerInstance","easingMethod","easingMethods","instanceBlockCount","instanceDataBinaryTree","instanceDataRetrieval","instanceDestructuring","instanceFragments","instanceUniformDeclarations","projectionMethods","shaderInput","T","MAX_FONT_SIZE","floor","LabelRasterizer","getContext","Promise","setTimeout","calculateTexture","calculateTrucatedText","sampleScaling","drawLabel","truncatedText","minX","minY","maxX","maxY","measureContents","rasterization","texture","createCroppedCanvas","calculateLabelSize","maxWidth","text","firstTest","cursor","safety","substr","nextCursor","cropped","createElement","imageSmoothingEnabled","drawImage","fontSize","getLabelRasterizationFontSize","fillStyle","font","makeCSSFont","measureText","fillText","potentialCanvas","fontWeight","fontFamily","imageData","getImageData","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","awaitContext","ImageAtlasResource","image","COLOR_RASTERIZATION_SIZE","ColorRasterizer","limit","g","opacity","makeCSS","fillRect","ColorAtlasResource","SubTexture","atlasReferenceID","atlasTexture","atlasTL","atlasTR","atlasBL","atlasBR","widthOnAtlas","heightOnAtlas","isValid","pixelWidth","pixelHeight","pack_node_1","sub_texture_1","AtlasSize","Atlas","validResources","textureSettings","packing","PackNode","updateTexture","zero","invalidateResource","redoneCanvas","dispose","generateMipmaps","premultiplyAlpha","needsUpdate","INSTANCE_UNIFORM_ATTRIBUTE_PREFIX","makeInstanceUniformNameArray","makeInstanceUniformNameTree","toString","instanceAttributeShaderName","getProgramInfo","program","result","attributeCount","uniformCount","activeUniforms","getProgramParameter","ACTIVE_UNIFORMS","activeAttributes","ACTIVE_ATTRIBUTES","enums","35664","35665","35666","35667","35668","35669","35670","35671","35672","35673","35674","35675","35676","35678","35680","5120","5121","5122","5123","5124","5125","5126","blocks","getActiveUniform","typeName","getActiveAttrib","MAX_VERTEX_UNIFORMS","MAX_FRAGMENT_UNIFORMS","WEBGL_SUPPORTED","MAX_TEXTURE_SIZE","HARDWARE_INSTANCING_ANGLE","WebGLRenderingContext","e","getAContext","getParameter","MAX_VERTEX_UNIFORM_VECTORS","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_VERTEX_ATTRIBS","getExtension","initStats","process","load","storage","debug","env","DEBUG","log","Function","apply","arguments","formatArgs","args","useColors","namespace","humanize","diff","lastC","save","namespaces","removeItem","navigator","userAgent","toLowerCase","documentElement","style","WebkitAppearance","firebug","exception","table","parseInt","RegExp","$1","chrome","local","localStorage","localstorage","colors","formatters","JSON","stringify","err","message","enable","browser","three_1","IE_ADJUSTMENT","OLD_IE_ADJUSTMENT","MAX_FIREFOX_WHEELDELTA","lowPassY","LOW_PASS_U0","LOW_PASS_U1","LOW_PASS_U2","LOW_PASS_U3","firefox","deltaX","deltaY","sign","unshift","pop","Vector2","msie","version","wheelDeltaX","wheelDeltaY","wheelDelta","detail","msedge","multiplyScalar","relative","mouseX","mouseY","eventX","eventY","nativeEvent","pageX","pageY","clientX","clientY","body","scrollLeft","scrollTop","offsetParent","offsetLeft","offsetTop","UID","CUID","colorUID","uid_1","ObservableMonitoring","enabled","gatherIds","observableIds","clear","observableNamesToUID","propertyUID","newVal","instanceUpdated","label_atlas_resource_1","toInstanceIOValue","AtlasResourceManager","targetAtlas","requestQueue","requestLookup","atlasManager","didDequeue","resources","from","entries","requests","updateAtlas","atlasRequests","request","delete","resourceTrigger","existingRequests","maxPopulation","maxDepth","filterQuery","queryValues","filtered","obj","Quadrants","TL","Node","TR","BL","BR","children","nodes","child","isInside","doAdd","cover","childrenProps","MAX_VALUE","encapsulate","allChildren","gatherChildren","split","isNaN","list","visit","hitBounds","queryBounds","containsPoint","queryPoint","cb","finished","data_bounds_1","ref","scaleRatio","parse","num","parseFloat","reference","emptyBounds","event_manager_1","LayerMouseEvents","isOver","sceneViews","sceneViewByViewId","sceneView","viewItem","viewMouseByViewId","handleInteraction","handleMouseClick","handleMouseDrag","callback","getSceneViewsUnderMouse","getMouseByViewId","handleSceneView","flag","updateColorPickRange","allSceneViews","currentSceneViews","analyzeColorPickingRendering","pickingData","allColors","colorData","dataHeight","dataWidth","nearestColor","uniqueColors","pixelIndex","distance","row","dx","dy","testDistance","shader_templating_1","template_vars_1","make_instance_uniform_name_1","instanceRetrievalArrayFragment","VECTOR_COMPONENTS","sizeToType","1","2","3","4","9","16","99","orderByPriority","makeAutoEasingTiming","makeVectorSwizzle","join","makeUniformArrayDeclaration","totalBlocks","fragment","fill","Vector4","makeInstanceRetrievalArray","templateOptions","makeInstanceDestructuringArray","orderedAttributes","instanceAttributeDestructuring","uniformInstancingDestructuring","webgl_stat_1","instance_attribute_shader_name_1","uniform_instance_block_array_1","vertexShaderComposition","fragmentShaderComposition","instanceDestructuringArray","MAX_USE_PER_BLOCK","generateUniforms","injectionType","injectFragments","shaders","shaderInputMetrics","instancingInfo","metrics","instanceUniformBlockCount","count","calculateUniformBlockUseage","sortedInstanceAttributes","currentBlock","trueBlockIndex","blockUseage","innerBlockUseage","attributeSize","oldUseage","newUseage","innerUseage","instances","uniformMetrics","blockQualifierDedup","qualifiers","blockQualifiers","qualifierList","allQualifiers","declaration","makeInstanceUniformDeclaration","makeUniformInstanceDataOptions","generateInstanceDataLookupOptions","additionalOptions","generateVertexAttributes","methodSizes","sizeType","generateEasingMethods","generateShaderInputs","generateVertexPicking","makePickingDestructuring","makeInstanceAttributeReferences","generateVertexShader","vertexShaderResults","generateFragmentShader","generateFragmentPickingMethod","images_1","labels_1","attribute_generation_1","color_picking_analysis_1","layer_mouse_events_1","generate_default_scene_1","generate_layer_geometry_1","generate_layer_material_1","generate_layer_model_1","inject_shader_io_1","mouse_event_manager_1","texture_1","atlas_resource_manager_1","DEFAULT_BACKGROUND_COLOR","Color","isCanvas","createLayer","layerClass","LayerSurface","AtlasManager","currentViewport","currentFrame","previousTime","isBufferingAtlas","scenes","willDisposeLayer","initLayer","frameIncrement","onViewReady","validLayers","erroredLayers","sortLayers","pickingPass","fitViewtoViewport","draw","errors","passed","stack","render","initializer","resourceManager","renderer","pickingRenderer","LabelInstance","ImageInstance","drawSceneView","updateColorPick","defaultSceneElements","flags","clearFlags","COLOR","DEPTH","pickingTarget","pickWidth","pickHeight","Uint8Array","readRenderTargetPixels","colorPicking","didBuffer","dequeueRequests","rendererSize","getSize","getPixelRatio","background","SCISSOR_TEST","scissor","clearColor","setSize","setRenderTarget","STENCIL","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","setViewport","topLeft","viewToWorld","bottomRight","screenToWorld","setContext","initGL","initMouseManager","initResources","WebGLRenderer","alpha","antialias","preserveDrawingBuffer","autoClear","setRendererSize","setPixelRatio","setClearColor","sceneViewDepth","sceneOptions","newScene","viewOptions","newView","addLayerToScene","initShader","shaderMetrics","eventManagers","atlasResources","createAtlas","addLayer","layerInitializers","init","existingLayer","willUpdateProps","didUpdateProps","layerId","parentElement","className","setAttribute","containerBox","getBoundingClientRect","box","isWebGLContext","canvasContext","isString","getElementById","WebGLRenderTarget","magFilter","LinearFilter","minFilter","stencilBuffer","primitives_1","layer_1","RingLayer","ring","radius","scaleFactor","vertexToNormal","0","5","vertexToSide","thickness","_","vertex","CommonMaterialOptions","transparentShape","instance_provider_1","RingInstance","innerRadius","anchorCalculator","TopLeft","anchor","rectangle","padding","TopMiddle","TopRight","MiddleLeft","Middle","MiddleRight","BottomLeft","BottomMiddle","BottomRight","Custom","RectangleInstance","scaling","BOUND_MAX","_anchor","setAnchor","newAnchor","types_2","RectangleLayer","anchorEffect","projection","maxScale","minScale","ALWAYS","NEVER","worldToScreen","screenPoint","u","instance_1","rasterizationLookUp","_cssFont","_fontFamily","_fontSize","_fontStyle","_fontWeight","_maxWidth","_text","_width","_height","_isDestroyed","fontStyle","cssFontLookup","rasterizations","references","renderSync","_rasterization","cssFont","isDestroyed","LabelLayer","transparentImage","ImageRasterizer","calculateImageSize","atlas_1","color_atlas_resource_1","color_rasterizer_1","image_atlas_resource_1","label_rasterizer_1","ZERO_IMAGE","allAtlas","setManager","atlasName","registerResource","loadedImage","loadImage","isValidImage","dimensions","first","second","insertedNode","insert","nodeImage","ux","nodeDimensions","uy","uw","uh","onePixelX","atlasDimensions","setDefaultImage","imageSrc","subTexture","reject","onload","onerror","path","toDataURL","Image","src","isLeaf","child0","child1","newNode","fitFlag","fits","imgWidth","imgHeight","dWidth","dHeight","removed","hasChild","tint","_sourceWidth","_sourceHeight","_element","_path","aspect","sourceWidth","sourceHeight","ImageLayer","EdgeInstance","colorStart","colorEnd","control","widthStart","widthEnd","midpoint","perpendicular","interpolation","LINE","p1","p2","c1","c2","BEZIER","BEZIER2","toPointObject","toPointArray","TEST_RESOLUTION","edgePicking","broadphase","minPickDistance","scaleType","interpolate","edge","edgeWidthStart","edgeWidthEnd","PASS_X","PASS_Y","SCREEN_CURVE","closestIndex","closestDistance","secondClosestIndex","secondClosestDistance","control1","control2","startPoint","endPoint","linePoint","lineWidth","startSegment","endSegment","vector","lineDirection","lineNormal","distanceTo","edge_picking_1","pickVS","baseVS","screenVS","edgeFS","EdgeLayer","MAX_SEGMENTS","vertexInterpolation","InstanceProvider","CircleInstance","isMouseOver","isMouseDown","isColorProcessor","onMouseDown","querySpace","bind","check","instanceForColor","getColorPickInstance","onMouseOut","onMouseUp","onMouseOver","onMouseMove","info","notOverInstances","isCurrentlyOver","noLongerOver","onMouseClick","uniform_diff_processor_1","UniformQuadDiffProcessor","quadPicking","UniformColorDiffProcessor","DiffMode","InstanceAttributeDiffProcessor","diffMode","PARTIAL","bufferAttributeUpdateRange","bufferAttributeWillUpdate","updateInstancePartial","newBufferLocations","propIds","propertyToLocation","updateValue","updateRange","childLocations","getUpdateAllPropertyIdList","getActiveAttributePropertyId","updates","bufferAttribute","getInstanceCount","FULL","updateInstanceFull","buffers","availableClusters","instanceToCluster","clusterToBuffer","makeNewBuffer","cluster","maxUniformBlock","uniformBlocksPerInstance","pickModel","newGeometry","drawRange","newMaterial","clone","newModel","activeInstances","clusters","firstInstance","lastInstance","uniformIndex","uniformName","fakeAttribute","InstancedBufferAttribute","instanceIndex","toEmit","emitOnce","emit","clearTimeout","flushEmitOnce","emit_once_1","allBufferLocations","availableLocations","currentInstancedCount","instanceToBufferLocation","growthCount","maxInstancedCount","attributeToPropertyIds","updateAllPropertyIdList","activePropertyId","doAddWithRegistration","setObservableMonitor","propertyIdsForAttribute","getObservableMonitorIds","makeUpdateAllPropertyIdList","locationInfo","resizeBuffer","gatherLocationsIntoGroups","newLocations","growth","shift","ids","attributeToNewBufferLocations","InstancedBufferGeometry","previousInstanceAmount","array","newAttribute","setDynamic","allLocations","newLocation","internalAttribute","totalNewInstances","attributesBufferLocations","bufferLocationsForAttribute","childBufferLocations","group","bufferLocation","childAttribute","bufferLocationsForChildAttribute","childBufferLocation","instance_attribute_diff_processor_1","uniform_color_diff_processor_1","uniform_quad_diff_processor_1","removeInstance","squareDistance","Point","testPoint","points","closestPoint","amount","normalize","magnitude","squared","cleanObservation","instanceChanges","allowChanges","disposer","INSERT","CHANGE","REMOVE","CircleLayer","circle","circleScreenCenter","mouseScreen","animations","animate","center","animateCenter","animateRadius","animateColor","fadeOutOversized","premultipliedAlpha","transparent","blending","CustomBlending","blendSrc","OneFactor","getBounds","childToNode","childToBounds","nullBounded","fromSplit","found","node","doRemove","ReferenceCamera","offsetFilter","scaleFilter","base","h","plural","ms","str","String","exec","long","fmtLong","fmtShort","createDebug","prevTime","self","curr","prev","coerce","format","formatter","hash","charCodeAt","selectColor","disable","names","skips","len","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","noop","nextTick","title","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","isNumber","AnimationHelper","groupCount","baseDelay","delayGap","modifyInstances","startFrameTime","gap","CameraBoundsAnchor","BasicCameraController","isPanning","panFilter","allViews","startViews","onRangeChanged","targetView","startViewDidStart","applyBounds","applyScaleBounds","boundsHorizontalOffset","boundsVerticalOffset","scaleMin","scaleMax","setBounds","ignoreCoverViews","TOP_LEFT","MIDDLE_LEFT","BOTTOM_LEFT","worldBounds","screenPadding","TOP_MIDDLE","MIDDLE","BOTTOM_MIDDLE","TOP_RIGHT","MIDDLE_RIGHT","BOTTOM_RIGHT","worldTLinScreenSpace","worldBRinScreenSpace","anchoredByBoundsHorizontal","anchoredByBoundsVertical","under","coveredStartView","findCoveredStartView","canStart","pan","wheelMetrics","getTargetView","beforeZoom","currentZoomX","currentZoomY","afterZoom","getProjection","getViewScreenBounds","newWorld","deltaScale","deltaPan"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,EAAAG,QAAA,SAAAA,QAAA,WACA,mBAAAC,eAAAC,IACAD,QAAA,kBAAAJ,GACA,iBAAAC,QACAA,QAAA,OAAAD,EAAAG,QAAA,SAAAA,QAAA,WAEAJ,EAAA,OAAAC,EAAAD,EAAA,MAAAA,EAAA,QARA,CASCO,OAAA,SAAAC,EAAAC,GACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAV,QAGA,IAAAC,EAAAO,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAZ,YAUA,OANAa,EAAAH,GAAAI,KAAAb,EAAAD,QAAAC,IAAAD,QAAAS,GAGAR,EAAAW,GAAA,EAGAX,EAAAD,QA2CA,OAtCAS,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAjB,EAAAkB,EAAAC,GACAV,EAAAW,EAAApB,EAAAkB,IACAG,OAAAC,eAAAtB,EAAAkB,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAA1B,GACAqB,OAAAC,eAAAtB,EAAA,cAAiD2B,OAAA,KAIjDlB,EAAAmB,EAAA,SAAA3B,GACA,IAAAkB,EAAAlB,KAAA4B,WACA,WAA2B,OAAA5B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAQ,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAU,EAAAC,GAAsD,OAAAV,OAAAW,UAAAC,eAAAnB,KAAAgB,EAAAC,IAGtDtB,EAAAyB,EAAA,IAIAzB,IAAA0B,EAAA,oCCtCA,IAOYC,mDAPZ,SAAYC,GACVA,IAAA,aACAA,IAAA,aACAA,IAAA,iBACAA,IAAA,eAJF,CAAYrC,EAAAqC,qBAAArC,EAAAqC,wBAOZ,SAAYD,GACVA,IAAA,aACAA,IAAA,aACAA,IAAA,iBACAA,IAAA,eAEAA,IAAA,kBANF,CAAYA,EAAApC,EAAAoC,wBAAApC,EAAAoC,2BASCpC,EAAAsC,iCACXC,CAACH,EAAsBI,KAAM,EAC7BD,CAACH,EAAsBK,KAAM,EAC7BF,CAACH,EAAsBM,OAAQ,EAC/BH,CAACH,EAAsBO,MAAO,EAC9BJ,CAACH,EAAsBQ,OAAQ,GAGjC,SAAYC,GACVA,IAAA,aACAA,IAAA,aACAA,IAAA,iBACAA,IAAA,eACAA,IAAA,qBACAA,IAAA,sBACAA,IAAA,kBAPF,CAAY7C,EAAA6C,cAAA7C,EAAA6C,iBAUZ,SAAYC,GACVA,IAAA,aACAA,IAAA,aACAA,IAAA,iBACAA,IAAA,eAJF,CAAY9C,EAAA8C,sBAAA9C,EAAA8C,yBAsNZ,SAAYC,GAEVA,IAAA,mBAEAA,IAAA,uBAEAA,IAAA,aANF,CAAY/C,EAAA+C,wBAAA/C,EAAA+C,2BAmGZ,SAAYC,GAEVA,IAAA,eAEAA,IAAA,aAUAA,IAAA,mBAdF,CAAYhD,EAAAgD,WAAAhD,EAAAgD,cAoFZ,SAAYC,GACVA,IAAA,mBACAA,IAAA,mBACAA,IAAA,mBAHF,CAAYjD,EAAAiD,mBAAAjD,EAAAiD,qCC5cZhD,EAAAD,QAAAM,+ICAA4C,EAAAzC,EAAA,MACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,MACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,MACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,mJCZAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,MACAyC,EAAAzC,EAAA,0FC0BA0C,EAkDEZ,YAAYa,GAjDZC,KAAAC,EAAY,EACZD,KAAAE,EAAY,EACZF,KAAAG,MAAgB,EAChBH,KAAAI,OAAiB,EA+CfJ,KAAKC,EAAIF,EAAQE,GAAKF,EAAQM,MAAQ,EACtCL,KAAKE,EAAIH,EAAQG,GAAKH,EAAQO,KAAO,EACrCN,KAAKI,OAASL,EAAQK,SAAWL,EAAQQ,QAAU,GAAKP,KAAKE,GAAK,EAClEF,KAAKG,MAAQJ,EAAQI,QAAUJ,EAAQS,OAAS,GAAKR,KAAKC,GAAK,EAhDjEQ,WACE,OAAOT,KAAKG,MAAQH,KAAKI,OAG3BG,aACE,OAAOP,KAAKE,EAAIF,KAAKI,OAGvBC,WACE,OAAOL,KAAKC,EAGdS,UACE,OACET,EAAGD,KAAKC,EAAID,KAAKG,MAAQ,EACzBD,EAAGF,KAAKE,EAAIF,KAAKI,OAAS,GAI9BI,YACE,OAAOR,KAAKC,EAAID,KAAKG,MAGvBG,UACE,OAAON,KAAKE,EAGdhB,qBACE,OAAO,IAAIY,GACTM,OAAQ,EACRD,MAAO,EACPF,EAAG,EACHC,EAAG,IAwBPhB,cAAcyB,GACZ,QACEA,EAAMV,EAAID,KAAKC,GACfU,EAAMT,EAAIF,KAAKE,GACfS,EAAMV,EAAID,KAAKQ,OACfG,EAAMT,EAAIF,KAAKO,QASnBrB,YAAY0B,GACV,OAAIA,aAAgBd,GACdc,EAAKX,EAAID,KAAKC,IAChBD,KAAKG,OAASU,KAAKC,IAAIF,EAAKX,EAAID,KAAKC,GACrCD,KAAKC,EAAIW,EAAKX,GAGZW,EAAKV,EAAIF,KAAKE,IAChBF,KAAKI,QAAUS,KAAKC,IAAIF,EAAKV,EAAIF,KAAKE,GACtCF,KAAKE,EAAIU,EAAKV,GAGZF,KAAKQ,MAAQI,EAAKJ,QACpBR,KAAKG,OAASS,EAAKJ,MAAQR,KAAKQ,OAG9BR,KAAKO,OAASK,EAAKL,SACrBP,KAAKI,QAAUQ,EAAKL,OAASP,KAAKO,SAG7B,IAEHK,EAAKX,EAAID,KAAKC,IAChBD,KAAKG,OAASH,KAAKC,EAAIW,EAAKX,EAC5BD,KAAKC,EAAIW,EAAKX,GAGZW,EAAKX,EAAID,KAAKQ,QAChBR,KAAKG,OAASS,EAAKX,EAAID,KAAKC,GAG1BW,EAAKV,EAAIF,KAAKE,IAChBF,KAAKI,QAAUJ,KAAKE,EAAIU,EAAKV,EAC7BF,KAAKE,EAAIU,EAAKV,GAGZU,EAAKV,EAAIF,KAAKO,SAChBP,KAAKI,QAAUQ,EAAKV,EAAIF,KAAKE,IAGxB,GAYXhB,KAAK6B,GAEH,OAAIf,KAAKG,QAAUY,EAAOZ,OAASH,KAAKI,SAAWW,EAAOX,OACjD,EAILJ,KAAKG,OAASY,EAAOZ,OAASH,KAAKI,QAAUW,EAAOX,OAC/C,EAIF,EAQTlB,UAAU6B,GACR,QACEf,KAAKQ,MAAQO,EAAOd,GACpBD,KAAKC,EAAIc,EAAOP,OAChBR,KAAKO,OAASQ,EAAOb,GACrBF,KAAKE,EAAIa,EAAOX,QAUpBlB,SAAS6B,GACP,OACEf,KAAKC,GAAKc,EAAOd,GACjBD,KAAKQ,OAASO,EAAOP,OACrBR,KAAKE,GAAKa,EAAOb,GACjBF,KAAKO,QAAUQ,EAAOR,OAO1BrB,WACE,aAAcc,KAAKC,OAAOD,KAAKE,OAAOF,KAAKG,WAAWH,KAAKI,WAhL/DzD,EAAAmD,wFC5BA,SAAYkB,GACVA,IAAA,2BACAA,IAAA,+BACAA,IAAA,6BACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,qBACAA,IAAA,yBACAA,IAAA,uBAVF,CAAYrE,EAAAqE,aAAArE,EAAAqE,gBAwBZ,SAAYC,GAEVA,IAAA,mBAEAA,IAAA,yBAEAA,IAAA,iBANF,CAAYtE,EAAAsE,YAAAtE,EAAAsE,8FClBZtE,EAAAuE,iBAAA,SAAiCC,GAC/B,OAAOA,GAAOA,EAAIC,QAAUD,EAAIC,OAAO9C,OAGzC3B,EAAA0E,sBAAA,SACEF,GAEA,OAAOA,GAAOA,EAAIG,0BAqDpB3E,EAAA4E,wBAYErC,YAAYsC,EAAsBC,GAChCzB,KAAKwB,MAAQA,EACbxB,KAAKyB,MAAQA,mFChFjB,MAAAC,EAAAtE,EAAA,GAGAuE,EAAAvE,EAAA,GAsBAwE,EAAAxE,EAAA,GACAyE,EAAAzE,EAAA,IAEA0E,EAAA1E,EAAA,KACA2E,EAAA3E,EAAA,WA2FA4E,UAGUH,EAAAI,cA0DR/C,YAAYgD,GAGVC,MAAMD,GA3CRlC,KAAAoC,MAAgB,EAQhBpC,KAAAqC,aAAe,IAAIC,IAEnBtC,KAAAuC,oBAA8B,EAmC5BvC,KAAKkC,MAAQlE,OAAOwE,UAAWR,EAAMS,iBAAoBP,GAEzD,MAAMQ,QAAEA,EAAUf,EAAAhC,SAASgD,MAAS3C,KAAKkC,MAGzC,GAAIQ,IAAYf,EAAAhC,SAASiD,IAAK,CAC5B,MAAMC,EAAiB7C,KAAK8C,4BAE5B9C,KAAK0C,SACHK,gBAAiBpB,EAAAhC,SAASgD,KAC1BK,QAASH,EAAeG,QACxBC,SAAU,IAAIrB,EAAAsB,gBACZ,EACA,EACA,EACA,EACAL,EAAeM,gBAEjBC,KAAMzB,EAAAhC,SAASiD,UAERF,IAAYf,EAAAhC,SAAS0D,OAC9BrD,KAAK0C,SACHK,gBAAiBpB,EAAAhC,SAASgD,KAC1BS,KAAMzB,EAAAhC,SAAS0D,OACfC,cAAe,IAAIhB,KAGrBtC,KAAK0C,SACHK,gBAAiBpB,EAAAhC,SAASgD,KAC1BS,KAAMzB,EAAAhC,SAASgD,MApFrBY,oBACE,OAAOvD,KAAKwD,eAKdC,iBACE,OAAOzD,KAAK0D,YAqFdxE,UACMc,KAAKuD,gBACHvD,KAAKuD,cAAc9B,OAAOzB,KAAKuD,cAAc9B,MAAMkC,YAAY3D,MACnEA,KAAKuD,cAAcK,kBACnB5D,KAAKuD,cAAcM,WAIvB3E,kBAOAA,OACE,IAAI4E,EACAxF,EAGJ,MAAMyF,EAAa/D,KAAKkC,MAAM8B,KAAKD,WAEnC,IAAIE,EAAQC,EAAUC,EAEtB,MAAMC,EAAcpE,KAAKoE,YACnBC,EAAaD,EAAYC,WACzBC,EAAYF,EAAYE,UAG9BA,EAAUC,mBAAmBR,GAE7B,IAAK,IAAIzG,EAAI,EAAGkH,EAAMT,EAAWU,OAAQnH,EAAIkH,IAAOlH,EAElD4G,GADAD,EAASF,EAAWzG,IACF,GAClB6G,EAAkBnE,KAAKuD,cAAcmB,mBAAmBR,GAExDG,EAAWJ,EAAO,IAChBK,EACAJ,EACAlG,OAAO2G,OAAOV,EAAO,IACrBE,GAKJG,EAAUM,SAEV5E,KAAKkC,MAAM8B,KAAKa,UAGhB,IAAK,IAAIvH,EAAI,EAAGkH,EAAMxE,KAAK8E,SAASL,OAAQnH,EAAIkH,IAAOlH,EACrDwG,EAAU9D,KAAK8E,SAASxH,GACxBgB,EAAQwF,EAAQiB,OAAOjB,GACvBA,EAAQkB,iBAAiBC,QACvBC,GAAoBA,EAAgB5G,MAAQA,GASlDY,4BACE,MAAM,IAAIiG,MACR,kJAOJjG,eACE,OACEkG,SAAU1D,EAAM2D,kBAChBC,UAAW5D,EAAM6D,MAOrBrG,qBACE,SAaFA,aACE,OACEsG,GAAIpI,EAAQ,KACZqI,sBACAX,YACAY,oBACAC,YAAa,EACbC,GAAIxI,EAAQ,MAQhB8B,sBACE2G,EACAC,EACAjI,EACAkI,EACAhB,EACAiB,GAMA,OACEA,QACAH,QACAC,aACAjI,OACAkI,OACAhB,UAQJ7F,YACErB,EACAkI,EACAhB,EACAkB,EACAC,GAEA,OACErI,OACAqI,YACAD,kBACAF,OACAhB,UAQJ7F,iBAAiBqE,GACVvD,KAAKwD,eAMR2C,QAAQC,KACN,gFANFpG,KAAKwD,eAAiBD,EACtBvD,KAAKoE,YAAc,IAAItC,EAAAuE,oBAAuBrG,KAAMuD,GACpDvD,KAAKoE,YAAYkC,gBACjBtG,KAAKuG,aAAe,IAAIxE,EAAAyE,wBAAwBxG,OAWpDd,cAAciC,QACasF,IAArBzG,KAAK0D,YACP1D,KAAK0D,YAAcvC,EAEnBgF,QAAQC,KACN,8EAKNlH,oBAAoBwH,IAKpBxH,gBAAgByH,IAIhBzH,YACEc,KAAKkC,MAAM8B,KAAKa,WApSX7C,EAAAS,gBAJT9F,EAAAqF,uFCvHA,MAAAL,EAAAvE,EAAA,GAKAwE,EAAAxE,EAAA,GACAwJ,EAAAxJ,EAAA,KAOA,IAAYyJ,EAcZ,SAAAC,EACEC,EACAvF,EACAkE,EACAD,GAEA,IAAIrC,EAGJ,QAAyBqD,IAArBjF,EAAMiC,WACR,OAAOjC,EAAMiC,WAOf,GAAI7B,EAAAoF,UAAUC,oBAAqB,CACjC,IAAIC,EAAiB,EAErB,IAAK,IAAI5J,EAAI,EAAGkH,EAAMkB,EAAiBjB,OAAQnH,EAAIkH,IAAOlH,EAAG,CAC3D,MAAM6J,EAAYzB,EAAiBpI,GACnC4J,GAAkBrG,KAAKuG,KAAKD,EAAUpB,KAAO,GAG/C,IAAK,IAAIzI,EAAI,EAAGkH,EAAMiB,EAAmBhB,OAAQnH,EAAIkH,IAAOlH,EAAG,CAC7D,MAAM6J,EAAY1B,EAAmBnI,GACrC4J,GAAkBrG,KAAKuG,KACrBzF,EAAA1C,gCAAgCkI,EAAUpB,MAAQ,GAAK,GAMzD3C,EADE8D,EAAiBtF,EAAAoF,UAAUK,sBACtBR,EAAgBS,QAKhBT,EAAgBU,mBAS3B,OAJKnE,IAAMA,EAAOyD,EAAgBS,SAElC9F,EAAMgG,cAAcpE,GAEbA,GA9DT,SAAYyD,GAKVA,IAAA,qBAEAA,IAAA,2CAPF,CAAYA,EAAAlK,EAAAkK,kBAAAlK,EAAAkK,qBAcZlK,EAAAmK,qBAsDAnK,EAAA8K,uBAAA,SACEV,EACAvF,EACAC,GAUA,OAPaqF,EACXC,EACAvF,EACAA,EAAMkE,iBACNlE,EAAMiE,qBAKN,KAAKoB,EAAgBU,mBACnB/F,EAAMkG,iBAAiB,IAAId,EAAAe,+BAA+BnG,EAAOC,IACjE,MAIF,QACED,EAAMkG,iBAAiB,IAAId,EAAAgB,qBAAqBpG,EAAOC,mJCxG7D5B,EAAAzC,EAAA,IAEAyC,EAAAzC,EAAA,mJCFAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,oFCPA,MAAAsE,EAAAtE,EAAA,GAOAT,EAAAkL,mBAAA,SACErG,EACAsG,EACAC,GAEA,MAAMC,EAAYxG,EAAMyG,eAClBC,EAAQ,IAAIF,EAAU1C,UAAUwC,EAAUC,GAShD,OAnBF,SAAgB5G,GACd,OAAOgH,QAAQhH,EAAIiH,QAWfA,CAAOF,KACTA,EAAM9C,cACmBqB,IAAvBuB,EAAU5C,SACN1D,EAAM2G,sBACNL,EAAU5C,UAGX8C,kFCZTvL,EAAAsF,oBAKEqG,SACE,OAAOtI,KAAKuI,IAGdrJ,YAAYa,GACVC,KAAKuI,IAAMxI,EAAQwI,sbCjBvB,MAAAC,EAAApL,EAAA,IAEA,IAAIqL,EAAc,QASlBC,EA0EExJ,YAAYa,GAlEJC,KAAA2I,kBAAoB,IAAIrG,IAExBtC,KAAA4I,QAAU,IAAItG,IAMtBtC,KAAA6I,qBAEQ7I,KAAA8I,KAAOJ,EAASK,OAyDtB/I,KAAKgJ,IAAMjJ,EAAQuI,IAAM,GACzBtI,KAAKiJ,OAASlJ,EAAQkJ,QAAUjJ,KAAKiJ,OA3EvCF,oBACE,OAAQN,IAAgBA,EAAc,SAsBxCvJ,WAIAgK,yBACE,MAAO,WAAalJ,KAAKmJ,UAG3BC,eACE,OAAOpJ,KAAKmJ,WAAa,KAG3BC,aAAajI,GAGX,MAAMkI,EAAcrJ,KAAKmJ,UAErBE,GAAeA,IAAgBlI,GACjCkI,EAAYC,OAAOtJ,MAIrBA,KAAKmJ,UAAYhI,EAGnBoI,uBACE,OAAOvJ,KAAK2I,kBAGda,aACE,OAAOxJ,KAAK4I,QAGdN,SACE,OAAOtI,KAAKgJ,IAGdS,UACE,OAAOzJ,KAAK8I,KAQd5J,oBAhEYwK,GAAXlB,EAAAmB,yCANHhN,EAAA+L,0FCbA,MAAAkB,EAAAxM,EAAA,IAIAyM,EAAAzM,EAAA,GAKAyE,EAAAzE,EAAA,IACA0M,EAAA1M,EAAA,IAiDA,SAAA2M,EAAwB5I,GACtB,MAAO,SAAUA,GAhDnB,SAAY6I,GACVA,IAAA,iBACAA,IAAA,iBACAA,IAAA,qBAHF,CAAYrN,EAAAqN,aAAArN,EAAAqN,sBAsDZC,UAA0BpI,EAAAI,cAyBxB/C,YAAYa,GACVoC,MAAMpC,GAbRC,KAAAoC,MAAgB,EAEhBpC,KAAAkK,WAAqBlN,OAAOmN,iBAY1BnM,OAAOwE,OAAOxC,KAAMD,GAGtBb,mBAAmByB,EAAeyJ,GAChC,MAAMvL,EAAIuL,IAASnK,EAAG,EAAGC,EAAG,GAK5B,OAHArB,EAAEoB,EAAIU,EAAMV,EAAID,KAAKkK,WACrBrL,EAAEqB,EAAIS,EAAMT,EAAIF,KAAKkK,WAEdrL,EAGTK,mBAAmByB,EAAeyJ,GAChC,MAAMvL,EAAIuL,IAASnK,EAAG,EAAGC,EAAG,GAK5B,OAHArB,EAAEoB,EAAIU,EAAMV,EAAID,KAAKkK,WACrBrL,EAAEqB,EAAIS,EAAMT,EAAIF,KAAKkK,WAEdrL,EAGTK,aAAayB,EAAeyJ,GAC1B,MAAMvL,EAAImB,KAAKqK,mBAAmB1J,EAAOyJ,GAKzC,OAHAvL,EAAEoB,EAAIpB,EAAEoB,EAAID,KAAKsK,WAAWrK,EAC5BpB,EAAEqB,EAAIrB,EAAEqB,EAAIF,KAAKsK,WAAWpK,EAErBrB,EAGTK,aAAayB,EAAeyJ,GAC1B,MAAMvL,GAAMoB,EAAG,EAAGC,EAAG,GAKrB,OAHArB,EAAEoB,EAAIU,EAAMV,EAAID,KAAKsK,WAAWrK,EAChCpB,EAAEqB,EAAIS,EAAMT,EAAIF,KAAKsK,WAAWpK,EAEzBF,KAAKuK,mBAAmB1L,EAAGuL,GAGpClL,cAAcyB,EAAeyJ,GAC3B,MAAMI,EAAOxK,KAAKuK,mBAAmBvK,KAAKyK,aAAa9J,IAEjD+J,EAAQN,IAASnK,EAAG,EAAGC,EAAG,GAahC,OAZAwK,EAAMzK,GACHuK,EAAKvK,EAAID,KAAK2K,OAAOC,OAAO,GAAK5K,KAAK2K,OAAOE,MAAM,IACpD7K,KAAK2K,OAAOE,MAAM,GACpBH,EAAMxK,GACHsK,EAAKtK,EAAIF,KAAK2K,OAAOC,OAAO,GAAK5K,KAAK2K,OAAOE,MAAM,IACpD7K,KAAK2K,OAAOE,MAAM,GAGhB7K,KAAK8K,WAAW1H,OAAS0G,EAAAiB,eAAeC,QAC1C7E,QAAQC,KAAK,oDAGRsE,EAGTxL,cAAcyB,EAAeyJ,GAC3B,MAAMa,GAAWhL,EAAG,EAAGC,EAAG,GAkB1B,OAfA+K,EAAOhL,GACJU,EAAMV,EAAID,KAAK2K,OAAOE,MAAM,GAC3B7K,KAAK2K,OAAOC,OAAO,GAAK5K,KAAK2K,OAAOE,MAAM,IAC5C7K,KAAKkK,WACPe,EAAO/K,GACJS,EAAMT,EAAIF,KAAK2K,OAAOE,MAAM,GAC3B7K,KAAK2K,OAAOC,OAAO,GAAK5K,KAAK2K,OAAOE,MAAM,IAC5C7K,KAAKkK,WAGHlK,KAAK8K,WAAW1H,OAAS0G,EAAAiB,eAAeC,QAC1C7E,QAAQC,KAAK,oDAIRpG,KAAKkL,aAAaD,EAAQb,GAGnClL,YAAYyB,EAAeyJ,GACzB,MAAMM,EAAQN,IAASnK,EAAG,EAAGC,EAAG,GAE1B+K,EAASjL,KAAKuK,mBAAmB5J,GAavC,OAZA+J,EAAMzK,GACHgL,EAAOhL,EAAID,KAAK2K,OAAOC,OAAO,GAAK5K,KAAK2K,OAAOE,MAAM,IACtD7K,KAAK2K,OAAOE,MAAM,GACpBH,EAAMxK,GACH+K,EAAO/K,EAAIF,KAAK2K,OAAOC,OAAO,GAAK5K,KAAK2K,OAAOE,MAAM,IACtD7K,KAAK2K,OAAOE,MAAM,GAGhB7K,KAAK8K,WAAW1H,OAAS0G,EAAAiB,eAAeC,QAC1C7E,QAAQC,KAAK,oDAGRsE,EAGTxL,YAAYyB,EAAeyJ,GACzB,MAAMa,EAASb,IAASnK,EAAG,EAAGC,EAAG,GAejC,OAZA+K,EAAOhL,EACLU,EAAMV,EAAID,KAAK2K,OAAOE,MAAM,GAC5B7K,KAAK2K,OAAOC,OAAO,GAAK5K,KAAK2K,OAAOE,MAAM,GAC5CI,EAAO/K,EACLS,EAAMT,EAAIF,KAAK2K,OAAOE,MAAM,GAC5B7K,KAAK2K,OAAOC,OAAO,GAAK5K,KAAK2K,OAAOE,MAAM,GAGxC7K,KAAK8K,WAAW1H,OAAS0G,EAAAiB,eAAeC,QAC1C7E,QAAQC,KAAK,oDAGR6E,EAQT/L,kBAAkBiM,GAChB,GACEnL,KAAK8K,WAAW1H,OAAS0G,EAAAiB,eAAeK,YACxCrB,EAAe/J,KAAK8K,WAAWO,YAC/B,CACA,MAAMf,EAAaV,EAAA0B,0BACjBtL,KAAKuL,SACLJ,EACAnL,KAAKkK,YAED/J,EAAQmK,EAAWnK,MACnBC,EAASkK,EAAWlK,OAEpBmL,GACJhL,QAASH,EAAS,EAClBoL,IAAK,IACLnL,MAAOF,EAAQ,EACfsL,MAAO,IACPjL,MAAOL,EAAQ,EACfG,IAAKF,EAAS,GAGVsL,EAAS,EACTC,EAAS,EACThB,EAAS3K,KAAK8K,WAAWO,WAE/BrN,OAAOwE,OAAOmI,EAAQY,GACtBZ,EAAOiB,SAASC,KACbvB,EAAWnK,MAAQ,EAAMuL,EAC1BpB,EAAWlK,OAAS,EAAMuL,EAC1BhB,EAAOiB,SAASE,GAElBnB,EAAOE,MAAMgB,IAAIH,GAASC,EAAQ,GAClChB,EAAOoB,eACPpB,EAAOqB,mBAAkB,GACzBrB,EAAOsB,yBAEPjM,KAAKsK,WAAaA,EAClBtK,KAAKsK,WAAWtG,KAAOhE,KACvBA,KAAKkM,aAAe,IAAIrC,EAAA/J,QACtBM,OAAQJ,KAAKsK,WAAWlK,OAASJ,KAAKkK,WACtC/J,MAAOH,KAAKsK,WAAWnK,MAAQH,KAAKkK,WACpCjK,EAAGD,KAAKsK,WAAWrK,EAAID,KAAKkK,WAC5BhK,EAAGF,KAAKsK,WAAWpK,EAAIF,KAAKkK,kBAEpBH,EAAe/J,KAAK8K,WAAWO,aACzClF,QAAQC,KACN,qFApMC6D,EAAAkC,gBAAkB,cAD3BxP,EAAAsN,sFCnEA,MAAAvI,EAAAtE,EAAA,GAEAyE,EAAAzE,EAAA,IAoBA,SAAAgP,EAAqBC,EAAoBC,GACvC,OAAOD,EAAEjK,MAAQkK,EAAElK,YAOrBmK,UAA2B1K,EAAAI,cAezB/C,YAAYa,GACVoC,MAAMpC,GAZRC,KAAAwM,UAAyB,IAAI9K,EAAM6K,MAGnCvM,KAAAyM,iBAAgC,IAAI/K,EAAM6K,MAE1CvM,KAAA0M,UAEA1M,KAAA2M,aAAc,EAEd3M,KAAA4M,SAAW,IAAItK,IAIbtC,KAAKwM,UAAUK,eAAgB,EAC/B7M,KAAKwM,UAAUM,YAAa,EAQ9B5N,SAAuDsC,GAErDxB,KAAK0M,OAAOK,KAAKvL,GACjBxB,KAAK2M,aAAc,EAMrBzN,QAAQsL,GACNxK,KAAK4M,SAASf,IAAIrB,EAAKlC,GAAIkC,GAM7BtL,iBACSc,KAAKwM,UAOdtN,YAAYsC,GACV,GAAIxB,KAAK0M,OAAQ,CACf,MAAMM,EAAQhN,KAAK0M,OAAOO,QAAQzL,GAElC,GAAIwL,GAAS,EAEX,YADAhN,KAAK0M,OAAOQ,OAAOF,EAAO,GAK9B7G,QAAQC,KACN,oGACApG,KAAKsI,GACL,SACA9G,EAAM8G,IAIVpJ,aACMc,KAAK2M,aACP3M,KAAK0M,OAAOS,KAAKf,IArEdG,EAAAa,iBAAmB,cAD5BzQ,EAAA4P,uFC7BA,MAAAc,EAAAjQ,EAAA,IAEAT,EAAA2Q,iCAAwCD,EAAAE,kBAMtCrO,YAAYsO,GACVrL,QACAnC,KAAKwN,MAAQA,mFCTjB7Q,EAAA4Q,wBAAArO,cA4BEc,KAAAyN,YAAsB,mFC9BxB,SAAYC,GAEVA,IAAA,eAMAA,IAAA,+BARF,CAAY/Q,EAAA+Q,gBAAA/Q,EAAA+Q,mBAWZ,SAAYC,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,qBANF,CAAYhR,EAAAgR,WAAAhR,EAAAgR,cAcZ,SAAYC,GAEVA,IAAA,aAEAA,IAAA,mBAEAA,IAAA,mBANF,CAAYjR,EAAAiR,iBAAAjR,EAAAiR,mGCvBZ,MAAAC,EAAAzQ,EAAA,GAGA0Q,EAAA1Q,EAAA,IAGM2Q,GAA6C,IAAK,IAAK,IAAK,KAC5DC,KAKNrR,EAAAsR,mCAA8DH,EAAAI,kBAM5DhP,YACEiP,EACAjK,EACAkK,EACAC,GAGA,GAAIA,EACFF,EAAQG,eAAeH,EAASjK,EAAU8J,EAAOK,OAI9C,CACH,MAAMvJ,EAAWqJ,EAAQ3M,MAAM+B,cAAcgL,IAAIrK,GAE7C2J,EAAA3M,iBAAiB4D,KACnBZ,EAAS+E,QAAS,EAClBkF,EAAQK,eAAeL,EAAQ3M,MAAO0C,EAAUY,KAQtD5F,eACEiP,EACAjK,EACAkK,EACAC,GAGIA,EACFF,EAAQK,eAAeL,EAAQ3M,MAAO0C,EAAUmK,GAKhDF,EAAQM,YAAYN,EAASjK,EAAU8J,EAAOK,GAOlDnP,eACEiP,EACAjK,EACAkK,EACAC,GAEIA,IAEFnK,EAAS+E,QAAS,EAElBkF,EAAQK,eAAeL,EAAQ3M,MAAO0C,EAAUmK,GAEhDF,EAAQ3M,MAAM+B,cAAc+F,OAAOpF,IAOvChF,eACEsC,EACA0C,EACAmK,GAEA,GAAInK,EAAS+E,OAAQ,CACnB,MAAMnE,EAAWuJ,EAAejN,OAC1BsN,EAAoBL,EAAeM,MAAM,GACzCC,EAAgC9J,EAASxG,MAC/C,IAAIuQ,EAAiBvQ,EAAOuH,EAAOiJ,EAC/BC,EAAGC,EAIP,IAAK,IAAI1R,EAAI,EAAGkH,EAAMhD,EAAMiE,mBAAmBhB,OAAQnH,EAAIkH,IAAOlH,EAQhE,GANAgB,GADAuQ,EAAkBrN,EAAMiE,mBAAmBnI,IACnByH,OAAOb,GAC/B2B,EAAQ+I,EAAaF,EAAoBG,EAAgBhJ,OACzDgJ,EAAgB7I,OACdxE,EAAMyN,SAASC,eAAeL,EAAgB7I,MAAMuC,UAGxC9B,KAFdqI,EAAQD,EAAgB/I,YAQxB,IAAKiJ,EAAID,EAAOE,EAAO1Q,EAAMmG,OAASqK,EAAOC,EAAIC,IAAQD,EACvDlJ,EAAMkI,EAAiBgB,IAAMzQ,EAAMyQ,EAAID,GAI3ChK,EAASxG,MAAQsQ,MACZ,CACL,MAAM9J,EAA2BuJ,EAAejN,OAC1CsN,EAAoBL,EAAeM,MAAM,GACzCC,EAAgC9J,EAASxG,MAC/C,IAAIuQ,EAAiBvQ,EAAOuH,EAAOiJ,EAWnC,GANAxQ,GADAuQ,EAAkBrN,EAAM2N,iBACApK,OAAOb,GAC/B2B,EAAQ+I,EAAaF,EAAoBG,EAAgBhJ,OACzDgJ,EAAgB7I,OACdxE,EAAMyN,SAASC,eAAeL,EAAgB7I,MAAMuC,UAGxC9B,KAFdqI,EAAQD,EAAgB/I,YAKtB,IAAK,IAAIiJ,EAAID,EAAOE,EAAO1Q,EAAMmG,OAASqK,EAAOC,EAAIC,IAAQD,EAC3DlJ,EAAMkI,EAAiBgB,IAAMzQ,EAAMyQ,EAAID,GAI3ChK,EAASxG,MAAQsQ,GAOrB1P,UAOAA,mBAAmBkQ,oCCzJrB,IAAYrE,mDAAZ,SAAYA,GAOVA,IAAA,2BAIAA,IAAA,mBAXF,CAAYA,EAAApO,EAAAoO,iBAAApO,EAAAoO,oBAqBZpO,EAAA0S,iBAAAnQ,cACEc,KAAAoD,KAAuB2H,EAAeK,4FCDxCzO,EAAA2S,eAAA,SACEC,EACAxP,EACAyP,GAEA,MAAMC,EAAU,IAAInN,IACdoN,EAAkB,IAAIpN,IACtBqN,EAAW,IAAIrN,IACfsN,EAAgB,IAAItN,IAEpBuN,EAAgBN,EAAOO,QAC3B,eACA,CAAC7P,EAAW8P,KACVH,EAAc/D,IAAIkE,GAAQH,EAAcxR,IAAI2R,IAAU,GAAK,GAEvDA,KAAShQ,GACX0P,EAAQ5D,IAAIkE,GAAQN,EAAQrR,IAAI2R,IAAU,GAAK,GACxChQ,EAAQgQ,KAGjBL,EAAgB7D,IAAIkE,GAAQL,EAAgBtR,IAAI2R,IAAU,GAAK,GACxD,MAIX/R,OAAOgS,KAAKjQ,GAASkF,QAAQgL,IACtBR,EAAQrR,IAAI6R,IACfN,EAAS9D,IAAIoE,GAASN,EAASvR,IAAI6R,IAAW,GAAK,KAKvD,MAAMC,GACJC,sBAAuBV,EACvBF,OAAQM,EACRO,sBAAuBR,EACvBS,0BAA2BV,EAC3BW,wBAAyBZ,GA6B3B,OA1BIF,GAEFA,EAAS7K,OAAOM,QAAQpI,IAClBqT,EAAQG,0BAA0BjS,IAAIvB,GACxCsJ,QAAQoK,SACHf,EAAS3R,0DACZhB,GAEOqT,EAAQI,wBAAwBlS,IAAIvB,GAC7CsJ,QAAQoK,SAEJf,EAAS3R,6EAEXhB,GAEQqT,EAAQC,sBAAsB/R,IAAIvB,IAC5CsJ,QAAQoK,SAEJf,EAAS3R,6EAEXhB,KAMDqT,kFCzFT,IAAIM,EAAiB,EAcrB,SAAAC,EAAoBC,EAAmBC,GACrCD,GAAUC,GAAUD,EAAOxD,OAAO,EAAGyD,EAAOlM,UAAWkM,GAGzDhU,EAAAiU,kBAQE1R,YAAYa,GANZC,KAAAgJ,IAAcwH,IAEdxQ,KAAA4K,QAAoC,EAAG,EAAG,GAE1C5K,KAAA6K,OAAmC,EAAG,EAAG,GAGnC9K,IACF0Q,EAAWzQ,KAAK4K,OAAQ7K,EAAQ6K,QAChC6F,EAAWzQ,KAAK6K,MAAO9K,EAAQ8K,QAKnCvC,SACE,OAAOtI,KAAKgJ,IAMd9J,SAAS2R,GACP7Q,KAAK4K,OAASiG,EAASC,MAAM,oFC1CjC,MAAMC,KAAEA,GAASlQ,KA8CjB,SAAAmQ,EAAqB3Q,EAAYG,GAC/B,OAAQH,EAAK,GAAKG,EAAM,IAG1B,SAAAyQ,EAAuBC,EAAWrG,GAChC,OAAQqG,EAAI,GAAKrG,GAGnB,SAAAsG,EAA0B9Q,EAAYG,GACpC,OAAQH,EAAK,GAAKG,EAAM,IAG1B,SAAA4Q,EAA0B/Q,EAAYG,GACpC,OAAQH,EAAK,GAAKG,EAAM,IAG1B,SAAA6Q,EAAqBhR,EAAYG,GAC/B,OAAOH,EAAK,GAAKG,EAAM,GAGzB,SAAA8Q,EAAwBxC,EAAatK,EAAW+M,GAC9C,OAAON,EAAOD,EAAKG,EAAU3M,EAAKsK,GAAQA,GAAQyC,GAGpD,SAAAC,EAAwB1C,GACtB,OAAOiC,EAAKM,EAAKvC,EAAOA,IAG1B,SAAA2C,EAAqBpR,EAAYG,GAC/B,OAAQH,EAAK,GAAKG,EAAM,GAAIH,EAAK,GAAKG,EAAM,IAG9C,SAAAkR,EAAuBrR,EAAYwK,GACjC,OAAQxK,EAAK,GAAKwK,EAAOxK,EAAK,GAAKwK,GAGrC,SAAA8G,EAA0BtR,EAAYG,GACpC,OAAQH,EAAK,GAAKG,EAAM,GAAIH,EAAK,GAAKG,EAAM,IAG9C,SAAAoR,EAA0BvR,EAAYG,GACpC,OAAQH,EAAK,GAAKG,EAAM,GAAIH,EAAK,GAAKG,EAAM,IAG9C,SAAAqR,EAAqBxR,EAAYG,GAC/B,OAAOH,EAAK,GAAKG,EAAM,GAAKH,EAAK,GAAKG,EAAM,GAG9C,SAAAsR,EAAwBhD,EAAatK,EAAW+M,GAC9C,OAAOG,EAAOD,EAAKE,EAAUnN,EAAKsK,GAAQA,GAAQyC,GAGpD,SAAAQ,EAAwBjD,GACtB,OAAOiC,EAAKc,EAAK/C,EAAOA,IAG1B,SAAAkD,EAAqB3R,EAAYG,GAC/B,OAAQH,EAAK,GAAKG,EAAM,GAAIH,EAAK,GAAKG,EAAM,GAAIH,EAAK,GAAKG,EAAM,IAGlE,SAAAyR,EAAuB5R,EAAYwK,GACjC,OAAQxK,EAAK,GAAKwK,EAAOxK,EAAK,GAAKwK,EAAOxK,EAAK,GAAKwK,GAGtD,SAAAqH,EAA0B7R,EAAYG,GACpC,OAAQH,EAAK,GAAKG,EAAM,GAAIH,EAAK,GAAKG,EAAM,GAAIH,EAAK,GAAKG,EAAM,IAGlE,SAAA2R,EAA0B9R,EAAYG,GACpC,OAAQH,EAAK,GAAKG,EAAM,GAAIH,EAAK,GAAKG,EAAM,GAAIH,EAAK,GAAKG,EAAM,IAGlE,SAAA4R,EAAwBtD,EAAatK,EAAW+M,GAC9C,OAAOU,EAAOD,EAAKE,EAAU1N,EAAKsK,GAAQA,GAAQyC,GAGpD,SAAAc,EAAwBvD,GACtB,OAAOiC,EAAKuB,EAAKxD,EAAOA,IAG1B,SAAAwD,EAAqBjS,EAAYG,GAC/B,OAAOH,EAAK,GAAKG,EAAM,GAAKH,EAAK,GAAKG,EAAM,GAAKH,EAAK,GAAKG,EAAM,GAGnE,SAAA+R,EAAqBlS,EAAYG,GAC/B,OACEH,EAAK,GAAKG,EAAM,GAChBH,EAAK,GAAKG,EAAM,GAChBH,EAAK,GAAKG,EAAM,GAChBH,EAAK,GAAKG,EAAM,IAIpB,SAAAgS,EAAuBnS,EAAYwK,GACjC,OAAQxK,EAAK,GAAKwK,EAAOxK,EAAK,GAAKwK,EAAOxK,EAAK,GAAKwK,EAAOxK,EAAK,GAAKwK,GAGvE,SAAA4H,EAA0BpS,EAAYG,GACpC,OACEH,EAAK,GAAKG,EAAM,GAChBH,EAAK,GAAKG,EAAM,GAChBH,EAAK,GAAKG,EAAM,GAChBH,EAAK,GAAKG,EAAM,IAIpB,SAAAkS,EAA0BrS,EAAYG,GACpC,OACEH,EAAK,GAAKG,EAAM,GAChBH,EAAK,GAAKG,EAAM,GAChBH,EAAK,GAAKG,EAAM,GAChBH,EAAK,GAAKG,EAAM,IAIpB,SAAAmS,EAAqBtS,EAAYG,GAC/B,OACEH,EAAK,GAAKG,EAAM,GAChBH,EAAK,GAAKG,EAAM,GAChBH,EAAK,GAAKG,EAAM,GAChBH,EAAK,GAAKG,EAAM,GAIpB,SAAAoS,EAAwB9D,EAAatK,EAAW+M,GAC9C,OAAOiB,EAAOD,EAAKE,EAAUjO,EAAKsK,GAAQA,GAAQyC,GAGpD,SAAAsB,EAAwB/D,GACtB,OAAOiC,EAAK4B,EAAK7D,EAAOA,IAjI1BnS,EAAAqU,OAIArU,EAAAsU,SAIAtU,EAAAwU,YAIAxU,EAAAyU,YAIAzU,EAAA0U,OAIA1U,EAAA2U,UAIA3U,EAAA6U,UAIA7U,EAAA8U,OAIA9U,EAAA+U,SAIA/U,EAAAgV,YAIAhV,EAAAiV,YAIAjV,EAAAkV,OAIAlV,EAAAmV,UAIAnV,EAAAoV,UAIApV,EAAAqV,OAIArV,EAAAsV,SAIAtV,EAAAuV,YAIAvV,EAAAwV,YAIAxV,EAAAyV,UAIAzV,EAAA0V,UAIA1V,EAAA2V,OAIA3V,EAAA4V,OASA5V,EAAA6V,SAIA7V,EAAA8V,YASA9V,EAAA+V,YASA/V,EAAAgW,OASAhW,EAAAiW,UAIAjW,EAAAkW,UAcalW,EAAAmW,aACXvE,IAAKyC,EACL+B,IAAK1B,EACL5M,OAAQ+M,EACRwB,OAAQ1B,EACR2B,SAAU7B,EACVvG,MAAOoG,EACPiC,SAAU/B,GAGCxU,EAAAwW,aACX5E,IAAKkD,EACLsB,IAAKlB,EACLpN,OAAQsN,EACRiB,OAAQlB,EACRmB,SAAUrB,EACV/G,MAAO6G,EACPwB,SAAUvB,GAGChV,EAAAyW,aACX7E,IAAKyD,EACLe,IAAKT,EACL7N,OAAQ4N,EACRW,OAAQZ,EACRa,SAAUd,EACVtH,MAAOoH,EACPiB,SAAUhB,GAGCvV,EAAA0W,aACX9E,IAAKgE,EACLQ,IAAKJ,EACLlO,OAAQoO,EACRG,OAAQJ,EACRK,SAAUP,EACV7H,MAAO2H,EACPU,SAAUT,GAGZ9V,EAAA2W,QAAA,SAAwCpC,GACtC,IAAIqC,EAEJ,OACEA,EADiB,IAAfrC,EAAIzM,OACI9H,EAAAmW,YAEc,IAAf5B,EAAIzM,OACH9H,EAAAwW,YAEc,IAAfjC,EAAIzM,OACH9H,EAAAyW,YAIFzW,EAAA0W,4FCjPZ,MAAAG,EAAApW,EAAA,KAEMqW,IAAEA,EAAGC,IAAEA,EAAGC,IAAEA,EAAGC,MAAEA,EAAKC,IAAEA,EAAGC,GAAEA,GAAOjT,KACpCkT,EAASH,EAAW,IAALE,GAAa,IAElC,SAAAE,EAAe/T,EAAWgU,EAAgBC,GACxC,OAAOT,EAAIC,EAAIzT,EAAGgU,GAASC,GAG7B,IAAYC,GAAZ,SAAYA,GAEVA,IAAA,eAEAA,IAAA,2BAEAA,IAAA,mBAEAA,IAAA,qBARF,CAAYA,EAAAxX,EAAAwX,sBAAAxX,EAAAwX,yBA2CZ,MAAMC,EAAe,0CAMfC,EAAY,gEAMZC,EAAgB,0FAOhBC,EAAiB,kGAMjBC,EAAmB,uIAMnBC,EAAiB,8FAMjBC,EAAkB,8HAOlBC,EAAoB,oKAMpBC,EAAiB,kGAMjBC,EAAkB,mIAOlBC,EAAoB,yKAOpBC,EAAiB,sGAMjBC,EAAkB,wIAOlBC,EAAoB,oLAQpBC,6GAG4DnB,8DAK5DoB,yEAE0CpB,mDAK1CqB,EAAiB,oKASjBC,EAAmB,mSAenBC,EAA2BC,oJAISA,uBAO1C5Y,EAAA6Y,uBAgdEtW,YACEuW,EACAC,EACAC,EACAC,GAdF5V,KAAA6V,MAAgB,EAEhB7V,KAAA2V,SAAmB,IAInB3V,KAAA8V,KAAO3B,EAAoBxR,KAUzB3C,KAAKyV,IAAMA,EACXzV,KAAK0V,IAAMA,EACX1V,KAAK2V,SAAWA,GAAY,IAC5B3V,KAAK+V,WAAaH,GAAU,eApd9B1W,iBACEyW,EACAE,EAAgB,EAChBC,EAAO3B,EAAoBxR,MAE3B,OACE8S,IAAK,CAAC3G,EAAUtK,EAAQ+M,IAAc/M,EACtCqR,QACAF,WACAD,IAAKtB,EACL0B,OACAC,WAAY,aAOhB7W,cACEyW,EACAE,EAAgB,EAChBC,EAAO3B,EAAoBxR,MAE3B,OACE8S,IAAK,CAAC3G,EAAUtK,EAAQ+M,KACtB,MAAMhD,IAAEA,EAAG1D,MAAEA,EAAKqI,SAAEA,GAAaM,EAAAF,QAAQxE,GAEzC,OADAyC,EAAIyC,EAAMzC,EAAG,EAAG,GACThD,EAAI1D,EAAMqI,EAAS1O,EAAKsK,GAAQyC,GAAIzC,IAE7C+G,QACAF,WACAD,IAAKrB,EACLyB,OACAC,WAAY,UAOhB7W,kBACEyW,EACAE,EAAgB,EAChBC,EAAO3B,EAAoBxR,MAE3B,OACE8S,IAAK,CAAC3G,EAAUtK,EAAQ+M,KAEtB,MAAMyE,GADNzE,EAAIyC,EAAMzC,EAAG,EAAG,IACCA,GACXhD,IAAEA,EAAG1D,MAAEA,EAAKqI,SAAEA,GAAaM,EAAAF,QAAQxE,GACzC,OAAOP,EAAI1D,EAAMqI,EAAS1O,EAAKsK,GAAQkH,GAAOlH,IAEhD+G,QACAF,WACAD,IAAKpB,EACLwB,OACAC,WAAY,cAOhB7W,mBACEyW,EACAE,EAAgB,EAChBC,EAAO3B,EAAoBxR,MAE3B,OACE8S,IAAK,CAAC3G,EAAUtK,EAAQ+M,KAEtB,MAAMyE,GADNzE,EAAIyC,EAAMzC,EAAG,EAAG,KACE,EAAIA,IAChBhD,IAAEA,EAAG1D,MAAEA,EAAKqI,SAAEA,GAAaM,EAAAF,QAAQxE,GACzC,OAAOP,EAAI1D,EAAMqI,EAAS1O,EAAKsK,GAAQkH,GAAOlH,IAEhD+G,QACAF,WACAD,IAAKnB,EACLuB,OACAC,WAAY,eAOhB7W,qBACEyW,EACAE,EAAgB,EAChBC,EAAO3B,EAAoBxR,MAE3B,OACE8S,IAAK,CAAC3G,EAAUtK,EAAQ+M,KAEtB,MAAMyE,GADNzE,EAAIyC,EAAMzC,EAAG,EAAG,IACC,GAAM,EAAIA,EAAIA,GAAU,EAAI,EAAIA,GAAKA,EAAlB,GAC9BhD,IAAEA,EAAG1D,MAAEA,EAAKqI,SAAEA,GAAaM,EAAAF,QAAQxE,GACzC,OAAOP,EAAI1D,EAAMqI,EAAS1O,EAAKsK,GAAQkH,GAAOlH,IAEhD+G,QACAF,WACAD,IAAKlB,EACLsB,OACAC,WAAY,iBAOhB7W,mBACEyW,EACAE,EAAgB,EAChBC,EAAO3B,EAAoBxR,MAE3B,OACE8S,IAAK,CAAC3G,EAAUtK,EAAQ+M,KAEtB,MAAMyE,GADNzE,EAAIyC,EAAMzC,EAAG,EAAG,IACCA,EAAIA,GACfhD,IAAEA,EAAG1D,MAAEA,EAAKqI,SAAEA,GAAaM,EAAAF,QAAQxE,GACzC,OAAOP,EAAI1D,EAAMqI,EAAS1O,EAAKsK,GAAQkH,GAAOlH,IAEhD+G,QACAF,WACAD,IAAKjB,EACLqB,OACAC,WAAY,eAOhB7W,oBACEyW,EACAE,EAAgB,EAChBC,EAAO3B,EAAoBxR,MAE3B,OACE8S,IAAK,CAAC3G,EAAUtK,EAAQ+M,KACtBA,EAAIyC,EAAMzC,EAAG,EAAG,GAChB,MAAMyE,IAASzE,EAAIA,EAAIA,EAAI,GACrBhD,IAAEA,EAAG1D,MAAEA,EAAKqI,SAAEA,GAAaM,EAAAF,QAAQxE,GACzC,OAAOP,EAAI1D,EAAMqI,EAAS1O,EAAKsK,GAAQkH,GAAOlH,IAEhD+G,QACAF,WACAD,IAAKhB,EACLoB,OACAC,WAAY,gBAOhB7W,sBACEyW,EACAE,EAAgB,EAChBC,EAAO3B,EAAoBxR,MAE3B,OACE8S,IAAK,CAAC3G,EAAUtK,EAAQ+M,KAEtB,MAAMyE,GADNzE,EAAIyC,EAAMzC,EAAG,EAAG,IAEV,GAAM,EAAIA,EAAIA,EAAIA,GAAKA,EAAI,IAAM,EAAIA,EAAI,IAAM,EAAIA,EAAI,GAAK,GAC5DhD,IAAEA,EAAG1D,MAAEA,EAAKqI,SAAEA,GAAaM,EAAAF,QAAQxE,GACzC,OAAOP,EAAI1D,EAAMqI,EAAS1O,EAAKsK,GAAQkH,GAAOlH,IAEhD+G,QACAF,WACAD,IAAKf,EACLmB,OACAC,WAAY,kBAOhB7W,mBACEyW,EACAE,EAAgB,EAChBC,EAAO3B,EAAoBxR,MAE3B,OACE8S,IAAK,CAAC3G,EAAUtK,EAAQ+M,KAEtB,MAAMyE,GADNzE,EAAIyC,EAAMzC,EAAG,EAAG,IACCA,EAAIA,EAAIA,GACnBhD,IAAEA,EAAG1D,MAAEA,EAAKqI,SAAEA,GAAaM,EAAAF,QAAQxE,GACzC,OAAOP,EAAI1D,EAAMqI,EAAS1O,EAAKsK,GAAQkH,GAAOlH,IAEhD+G,QACAF,WACAD,IAAKd,EACLkB,OACAC,WAAY,eAOhB7W,oBACEyW,EACAE,EAAgB,EAChBC,EAAO3B,EAAoBxR,MAE3B,OACE8S,IAAK,CAAC3G,EAAUtK,EAAQ+M,KACtBA,EAAIyC,EAAMzC,EAAG,EAAG,GAChB,MAAMyE,EAAO,KAAMzE,EAAIA,EAAIA,EAAIA,GACzBhD,IAAEA,EAAG1D,MAAEA,EAAKqI,SAAEA,GAAaM,EAAAF,QAAQxE,GACzC,OAAOP,EAAI1D,EAAMqI,EAAS1O,EAAKsK,GAAQkH,GAAOlH,IAEhD+G,QACAF,WACAD,IAAKb,EACLiB,OACAC,WAAY,gBAOhB7W,sBACEyW,EACAE,EAAgB,EAChBC,EAAO3B,EAAoBxR,MAE3B,OACE8S,IAAK,CAAC3G,EAAUtK,EAAQ+M,KAEtB,MAAMyE,GADNzE,EAAIyC,EAAMzC,EAAG,EAAG,IACC,GAAM,EAAIA,EAAIA,EAAIA,EAAIA,EAAI,EAAI,IAAMA,EAAIA,EAAIA,EAAIA,GAC3DhD,IAAEA,EAAG1D,MAAEA,EAAKqI,SAAEA,GAAaM,EAAAF,QAAQxE,GACzC,OAAOP,EAAI1D,EAAMqI,EAAS1O,EAAKsK,GAAQkH,GAAOlH,IAEhD+G,QACAF,WACAD,IAAKZ,EACLgB,OACAC,WAAY,kBAOhB7W,mBACEyW,EACAE,EAAgB,EAChBC,EAAO3B,EAAoBxR,MAE3B,OACE8S,IAAK,CAAC3G,EAAUtK,EAAQ+M,KAEtB,MAAMyE,GADNzE,EAAIyC,EAAMzC,EAAG,EAAG,IACCA,EAAIA,EAAIA,EAAIA,GACvBhD,IAAEA,EAAG1D,MAAEA,EAAKqI,SAAEA,GAAaM,EAAAF,QAAQxE,GACzC,OAAOP,EAAI1D,EAAMqI,EAAS1O,EAAKsK,GAAQkH,GAAOlH,IAEhD+G,QACAF,WACAD,IAAKX,EACLe,OACAC,WAAY,eAOhB7W,oBACEyW,EACAE,EAAgB,EAChBC,EAAO3B,EAAoBxR,MAE3B,OACE8S,IAAK,CAAC3G,EAAUtK,EAAQ+M,KACtBA,EAAIyC,EAAMzC,EAAG,EAAG,GAChB,MAAMyE,EAAO,IAAMzE,EAAIA,EAAIA,EAAIA,EAAIA,GAC7BhD,IAAEA,EAAG1D,MAAEA,EAAKqI,SAAEA,GAAaM,EAAAF,QAAQxE,GACzC,OAAOP,EAAI1D,EAAMqI,EAAS1O,EAAKsK,GAAQkH,GAAOlH,IAEhD+G,QACAF,WACAD,IAAKV,EACLc,OACAC,WAAY,gBAOhB7W,sBACEyW,EACAE,EAAgB,EAChBC,EAAO3B,EAAoBxR,MAE3B,OACE8S,IAAK,CAAC3G,EAAUtK,EAAQ+M,KAEtB,MAAMyE,GADNzE,EAAIyC,EAAMzC,EAAG,EAAG,IAEV,GAAM,GAAKA,EAAIA,EAAIA,EAAIA,EAAIA,EAAI,EAAI,KAAOA,EAAIA,EAAIA,EAAIA,EAAIA,GAC1DhD,IAAEA,EAAG1D,MAAEA,EAAKqI,SAAEA,GAAaM,EAAAF,QAAQxE,GACzC,OAAOP,EAAI1D,EAAMqI,EAAS1O,EAAKsK,GAAQkH,GAAOlH,IAEhD+G,QACAF,WACAD,IAAKT,EACLa,OACAC,WAAY,kBAOhB7W,sBACEyW,EACAE,EAAgB,EAChBC,EAAO3B,EAAoBxR,MAE3B,OACE8S,IAAK,CAAC3G,EAAUtK,EAAQ+M,KACtBA,EAAIyC,EAAMzC,EAAG,EAAG,GAChB,MACMyE,EAAOrC,EAAI,GAAI,GAAKpC,GAAKsC,EAAmB,EAAIC,GAAlBvC,EAAI1S,MAD9B,IACuD,GAC3D0P,IAAEA,EAAG1D,MAAEA,EAAKqI,SAAEA,GAAaM,EAAAF,QAAQxE,GACzC,OAAOP,EAAI1D,EAAMqI,EAAS1O,EAAKsK,GAAQkH,GAAOlH,IAEhD+G,QACAF,WACAD,IAAKR,EACLY,OACAC,WAAY,kBAOhB7W,kBACEyW,EACAE,EAAgB,EAChBC,EAAO3B,EAAoBxR,MAE3B,OACE8S,IAAK,CAAC3G,EAAUtK,EAAQ+M,KAEtB,MACMyE,GAFNzE,EAAIyC,EAAMzC,EAAG,EAAG,IAECA,EAAIA,EADX,KACeA,EAAQsC,EAAItC,EAAIuC,IACnCvF,IAAEA,EAAG1D,MAAEA,EAAKqI,SAAEA,GAAaM,EAAAF,QAAQxE,GACzC,OAAOP,EAAI1D,EAAMqI,EAAS1O,EAAKsK,GAAQkH,GAAOlH,IAEhD+G,QACAF,WACAD,IAAKP,EACLW,OACAC,WAAY,cAOhB7W,mBACEyW,EACAE,EAAgB,EAChBC,EAAO3B,EAAoBxR,MAE3B,OACE8S,IAAK,CAAC3G,EAAUtK,EAAQ+M,KAEtB,MACM0E,GAFN1E,EAAIyC,EAAMzC,EAAG,EAAG,IAED,EACTyE,EAAOC,EAAKA,GAAM,IAAUA,EAFxB,KAEkC,GACtC1H,IAAEA,EAAG1D,MAAEA,EAAKqI,SAAEA,GAAaM,EAAAF,QAAQxE,GACzC,OAAOP,EAAI1D,EAAMqI,EAAS1O,EAAKsK,GAAQkH,GAAOlH,IAEhD+G,QACAF,WACAD,IAAKN,EACLU,OACAC,WAAY,eAOhB7W,qBACEyW,EACAE,EAAgB,EAChBC,EAAO3B,EAAoBxR,MAE3B,OACE8S,IAAK,CAAC3G,EAAUtK,EAAQ+M,KAEtB,MACM2E,EAAK7J,OACL4J,GAHN1E,EAAIyC,EAAMzC,EAAG,EAAG,IAGD,GACT4E,EAAKF,EAAK,EACVD,EACJC,EAAK,EACD,IAAOA,EAAKA,GAAMC,EAAK,GAAKD,EAAKC,GACjC,IAAOC,EAAKA,IAAOD,EAAK,GAAKC,EAAKD,GAAM,IACxC3H,IAAEA,EAAG1D,MAAEA,EAAKqI,SAAEA,GAAaM,EAAAF,QAAQxE,GACzC,OAAOP,EAAI1D,EAAMqI,EAAS1O,EAAKsK,GAAQkH,GAAOlH,IAEhD+G,QACAF,WACAD,IAAKL,EACLS,OACAC,WAAY,iBAUhB7W,4BACEyW,EACAE,EAAgB,EAChBC,EAAO3B,EAAoBxR,KAC3B4S,EAAO,KAEP,OACEE,IAAK,CAAC3G,EAAUtK,EAAQ+M,KACtB,MAAMhD,IAAEA,EAAG9J,OAAEA,EAAMoG,MAAEA,EAAKqI,SAAEA,GAAaM,EAAAF,QAAQxE,GACjDyC,EAAIyC,EAAMzC,EAAG,EAAG,GAChB,MAAM6E,EAAYlD,EAAS1O,EAAKsK,GAC1BuH,EAAgC,EAApB5R,EAAO2R,GACzB,OAAO7H,EAAIO,EAAOjE,EAAMuL,EAAWvC,EAAItC,EAAIgE,GAAQc,KAErDR,QACAF,WACAD,IAAKJ,EAAwBC,GAC7BO,OACAC,WAAY,wGCpnBlBpZ,EAAA2Z,mBAeEpX,cAAcqX,GACZ,OAAOvW,KAAKwW,aAAaC,QAAQF,GAMnCrX,QAAQqX,GACN,OAAQvW,KAAKwW,cAAgBxW,KAAKwW,aAAaC,QAAQF,IAAY,KAMrErX,oBAAoBqX,GAClB,MAAM/L,EAAOxK,KAAKwW,aAAaC,QAAQF,GAEvC,OAAI/L,EACKA,EAAK0B,aAGP,KAOThN,gBAAgBsX,GACdxW,KAAKwW,aAAeA,mFCvDxB,MAAAE,EAAAtZ,EAAA,IACAuZ,EAAAvZ,EAAA,IAMMwZ,EAAoB,IAkG1B,SAAAxK,EAAqBC,EAA0BC,GAC7C,OAAOA,EAAEtI,KAAK5B,MAAQiK,EAAErI,KAAK5B,MAG/B,SAAAyU,EAAsB1V,GACpB,OAAOgH,QAAQhH,GAOjBxE,EAAAma,wBAgCE5X,YACE6X,EACAC,EACAC,EACAC,GA1BFlX,KAAAmX,gBAMQnX,KAAAoX,mBAA6B,EAgPrCpX,KAAAqX,mBAAqB,CAACC,IAEpB,MAAMC,EAAWvX,KAAKiD,SAASuU,MAAMF,GAIrC,OAFAC,EAASpK,KAAKf,GAEPmL,IAgETvX,KAAAyX,OAAS,MACPzX,KAAKoX,mBAAoB,IAjSzBpX,KAAK0X,QAAUX,EACf/W,KAAK2X,SAASX,GACdhX,KAAK4X,eAAeX,GACpBjX,KAAK6X,oBAAoBX,GAvB3BY,uBACE,OAAO9X,KAAKoX,kBAGdU,qBAAqB3W,GACnBnB,KAAKoX,kBAAoBjW,EAGpBA,IACHnB,KAAKiD,SAAW,IAAI0T,EAAAoB,SAAS,EAAG,EAAG,EAAG,GACtC/X,KAAKiD,SAAS+U,OAAOhY,KAAKgX,MAAMiB,IAAIC,GAAKA,EAAEnX,QAAQoX,OAAOtB,KAqB9D3X,oBAAoBgY,GAClB,MAAMkB,EAAUpY,KAAK0X,QACrB,IAAIW,EACAC,EAEJ,GAAIpB,EAAoB,CACtB,MAAMqB,EAAgBC,IACpB,MAAMlB,EAAQZ,EAAA+B,qBAAqBD,EAAOJ,GACpCM,EAAc1Y,KAAK2Y,gBACvBrB,EACAgB,EACAD,GAEIO,EAAQ5Y,KAAK6Y,UAAUL,GAE7BxY,KAAKiX,YAAYhS,QAAQ6T,IACvBA,EAAWC,YAAYL,EAAaE,KAGtCJ,EAAMQ,kBACNR,EAAMS,kBAGJ,YAAab,IACfA,EAAQc,QAAUX,GAGhB,qBAAsBH,IACxBA,EAAQe,iBAAiB,iBAAkBZ,GAC3CvY,KAAKmX,aAAapK,MAAM,iBAAkBwL,KAI9CH,EAAQgB,aAAeZ,KAErB,GAAIxY,KAAK8X,iBAAkB,OAE3B,MAAMR,EAAQZ,EAAA+B,qBAAqBD,EAAOJ,GACpCM,EAAc1Y,KAAK2Y,gBAAgBrB,EAAOgB,EAAeD,GAE/DrY,KAAKiX,YAAYhS,QAAQ6T,IACvBA,EAAWO,eAAeX,OAI9BN,EAAQkB,YAAcd,KAEpB,GAAIxY,KAAK8X,iBAAkB,OAE3B,MAAMR,EAAQZ,EAAA+B,qBAAqBD,EAAOJ,GACpCM,EAAc1Y,KAAK2Y,gBAAgBrB,EAAOgB,EAAeD,GAE/DrY,KAAKiX,YAAYhS,QAAQ6T,IACvBA,EAAWS,gBAAgBb,OAI/BN,EAAQoB,YAAc,CAAChB,IAErB,GAAIxY,KAAK8X,iBAAkB,OAE3BQ,EAAgB5B,EAAA+B,qBAAqBD,EAAOJ,GAC5C,MAAMqB,EAAYzZ,KAAKqX,mBAAmBiB,GAE1C,IAAIoB,GAAW,EACf,MAAMC,EAAiBC,KAAKC,MAG5B,GAAIJ,EAAUhV,QAAU,EACtB,OAGF4T,EAAYoB,EAAU,GAAGzV,KACzB,MAAM0U,EAAc1Y,KAAK2Y,gBACvBL,EACAA,EACAD,GAEF,IAAIyB,EAAkBxB,EAEtBtY,KAAKiX,YAAYhS,QAAQ6T,IACvBA,EAAWiB,gBAAgBrB,EAAaF,EAAMwB,UAGhDxB,EAAMQ,kBAENiB,SAASX,YAAc,CAACd,IACtB,MAAMlB,EAAQZ,EAAA+B,qBAAqBD,EAAOJ,GACpCM,EAAc1Y,KAAK2Y,gBACvBrB,EACAgB,EACAD,GAEI6B,GACJja,EAAGqX,EAAMrX,EAAI6Z,EAAgB7Z,EAC7BC,EAAGoX,EAAMpX,EAAI4Z,EAAgB5Z,GAGzBia,EAAOna,KAAKoa,SAChB9C,EACAgB,IAAmBrY,EAAG,EAAGC,EAAG,GAC5B4Z,EACAI,GAEFJ,EAAkBxC,EAElBtX,KAAKiX,YAAYhS,QAAQ6T,IACvBA,EAAWuB,WAAW3B,EAAayB,KAIrCT,GAAW,IAGbO,SAASK,UAAY,CAAC9B,IACpByB,SAASX,YAAc,KACvBW,SAASK,UAAY,KACrBL,SAASM,YAAc,OAGzBN,SAASM,YAAc,CAAC/B,IACtB,MAAMlB,EAAQZ,EAAA+B,qBAAqBD,EAAOJ,GACpCM,EAAc1Y,KAAK2Y,gBACvBrB,EACAgB,EACAD,GAGFrY,KAAKiX,YAAYhS,QAAQ6T,IACvBA,EAAW0B,gBAAgB9B,KAG7BF,EAAMQ,oBAGRZ,EAAQkC,UAAY,CAAC9B,IACnB,MAAMlB,EAAQZ,EAAA+B,qBAAqBD,EAAOJ,GACpCM,EAAc1Y,KAAK2Y,gBACvBrB,EACAgB,EACAD,GAGFrY,KAAKiX,YAAYhS,QAAQ6T,IACvBA,EAAW2B,cAAc/B,EAAaF,EAAMwB,UAI1CN,GAAYE,KAAKC,MAAQF,EAAiB/C,GAC5C5W,KAAKiX,YAAYhS,QAAQ6T,IACvBA,EAAW4B,YAAYhC,EAAaF,EAAMwB,YAMhD5B,EAAQuC,cAAgB,WACtB,OAAO,KAKX3a,KAAK4a,2BAGP1b,2BACE,MAAMkZ,EAAUpY,KAAK0X,QAErBU,EAAQyC,aAAerC,QASvBJ,EAAQ0C,WAAatC,QAIrBJ,EAAQ2C,YAAcvC,QAItBJ,EAAQ4C,cAAgBxC,QAQ1BtZ,QAAQqX,GACN,IAAK,MAAM/L,KAAQxK,KAAKgX,MACtB,GAAIxM,EAAKA,KAAKlC,KAAOiO,EACnB,OAAO/L,EAAKA,KAIhB,OAAO,KAmBTtL,SACEoY,EACAxI,EACAmM,EACAf,GAEA,OACEjP,QACEiQ,QAAS5D,EACT4C,QACAe,WACAnM,UAQN5P,gBACEoY,EACAxI,EACAuJ,GAGA,MAAMd,EAAWvX,KAAKqX,mBAAmBC,GAEzC,OACErM,QACEqM,SAEFxI,MAAOA,GACLuJ,IACEf,MAAOe,EAAU7N,KAAKC,aAAa6M,GACnC9M,KAAM6N,EAAU7N,MAEpBkG,QACE4G,MAAOC,EAAS,IAAMA,EAAS,GAAGvT,KAAKwG,KAAKC,aAAa6M,GACzD9M,KAAM+M,EAAS,IAAMA,EAAS,GAAGvT,KAAKwG,MAExC2Q,gBAAiB5D,EAASU,IAAIC,KAC5BZ,MAAOY,EAAElU,KAAKwG,KAAKC,aAAa6M,GAChC9M,KAAM0N,EAAElU,KAAKwG,SAKnBtL,UAAUsZ,GACR,MAAMI,EAAQlC,EAAA0E,eAAe5C,GAE7B,OACEI,OAAQA,EAAM3Y,EAAG2Y,EAAM1Y,IAc3BhB,eAAe+X,GACbjX,KAAKiX,YAAcA,EAEnB,IAAK,MAAM6B,KAAc9Y,KAAKiX,YAC5B6B,EAAWuC,gBAAgBrb,MAO/Bd,SAAS8X,GACPhX,KAAKgX,MAAQA,EAGf9X,iBACSc,KAAKiD,SACZjD,KAAK0X,QAAQ8B,YAAc,KAC3BxZ,KAAK0X,QAAQ4B,YAAc,KAC3BtZ,KAAK0X,QAAQ0B,aAAe,KAC5BpZ,KAAK0X,QAAQ4D,aAAe,KAE5Btb,KAAKmX,aAAalS,QAAQuT,IACxBxY,KAAK0X,QAAQ6D,oBAAoB/C,EAAM,GAAIA,EAAM,uFCrdvD,MAAA9W,EAAAtE,EAAA,GAEAuE,EAAAvE,EAAA,GAiBAwE,EAAAxE,EAAA,GACAoe,EAAApe,EAAA,IAEAqe,EAAAre,EAAA,IAEM0D,IAAEA,GAAQD,KAKV6a,GACJxc,CAACyC,EAAA5C,sBAAsBI,MAAO,GAC9BD,CAACyC,EAAA5C,sBAAsBK,MAAO,EAAG,GACjCF,CAACyC,EAAA5C,sBAAsBM,QAAS,EAAG,EAAG,GACtCH,CAACyC,EAAA5C,sBAAsBO,OAAQ,EAAG,EAAG,EAAG,IAMpCqc,GACJzc,CAACyC,EAAA5C,sBAAsBI,MAAO,GAC9BD,CAACyC,EAAA5C,sBAAsBK,MAAO,EAAG,GACjCF,CAACyC,EAAA5C,sBAAsBM,QAAS,EAAG,EAAG,GACtCH,CAACyC,EAAA5C,sBAAsBO,OAAQ,EAAG,EAAG,EAAG,IAGpCsc,EAAe,IAAIla,EAAMma,QAQ/B,SAAAC,EACEC,GAEA,OAAO5T,QAAQ4T,IAASA,EAAKvS,aAAwB/C,IAAdsV,EAAKhW,KAG9C,SAAAiW,EACED,GAEA,OAAO5T,QAAQ4T,GAGjB,SAAAE,EAA2BF,GACzB,OAAO5T,QAAQ4T,GAGjB,SAAAG,EAAmBH,GACjB,OAAO5T,QAAQ4T,GAGjB,SAAAI,EACEhV,GAEA,OAAOnJ,OAAOwE,UAAW2E,GAAaiV,kBAAmB,OAG3D,SAAAC,EAA2BvY,GACzB,OAAO9F,OAAOwE,UAAWsB,GAAWkB,sBAQtC,SAAAsX,EACEC,EACAC,GAEA,MAAMC,KACN,IAAIC,EAAW,OACKjW,IAAhB+V,IACFA,EAAc,GAGhBD,EAAWtX,QAAQ0X,IACjB,MAAM9W,EAAQ8W,EAAkB9W,MAC1BmH,OAC6BvG,IAAjCkW,EAAkB7W,WACd,EACA6W,EAAkB7W,WAClBC,OACuBU,IAA3BkW,EAAkB5W,KAAqB,EAAI4W,EAAkB5W,KAI/D,IAFA2W,EAAW7b,KAAK6S,IAAI7N,EAAO6W,GAEpBD,EAAWhY,OAAS,EAAIoB,GAC7B4W,EAAW1P,OAAM,GAAO,GAAO,GAAO,IAGxC,IAAK,IAAIzP,EAAI0P,EAAQ,EAAGxI,EAAMwI,EAAQ,EAAIjH,EAAMzI,EAAIkH,IAAOlH,EACzDmf,EAAW5W,GAAOvI,IAAK,IAI3B,IAAK,IAAI2C,EAAI,EAAGA,EAAIwc,EAAWhY,OAAQxE,IACrC,IAAK,IAAI2c,EAAM,EAAGA,EAAM,EAAGA,IACzB,IAAIH,EAAWxc,GAAG2c,GAGhB,IAAK,IAAIC,EAAUD,EAAKC,EAAU,EAAGA,IACnC,IAAKJ,EAAWxc,GAAG4c,IACbA,EAAUD,EAAM,IAAMJ,EACxB,OAAQvc,EAAG2c,EAAM,GAU7B,OAAQF,EAAW,EAAG/a,EAAA3C,mBAAmBG,KAQ3C,SAAA2d,EACEzQ,EACAC,GAEA,OAAID,EAAErG,QAAUsG,EAAEtG,OAAe,EAC7BqG,EAAE7C,SAAW8C,EAAE9C,QAAgB,EAC5B,EAMT,SAAAuT,EAGEvb,EAAoBiE,GAEpB,MAAMuX,KAEAC,EAA2B,IAAI3a,IA0CrC,OArCAmD,EAAmBR,QAChBkC,IACC,GA3HN,SACE4U,GAEA,OAAO5T,QAAQ4T,IAASA,EAAK/V,MAwHrBkX,CAAiB/V,GAAY,CAG/BA,EAAUpB,KAAOpE,EAAA5C,sBAAsBO,KACvC6H,EAAUrB,WAAanE,EAAA3C,mBAAmBG,IAG1C,MAAMge,EACJhW,EAAUnB,MAAMC,iBAAmBtE,EAAAjC,sBAAsB0d,SAErDC,EAAaJ,EAAyB7e,IAAI+I,EAAUnB,MAAMnI,MAE5Dwf,EACFJ,EAAyBpR,IAAI1E,EAAUnB,MAAMnI,MAC3Cwf,EAAW,IACTF,IAAcxb,EAAAjC,sBAAsB4d,QACpCH,IAAcxb,EAAAjC,sBAAsBkD,IACtCya,EAAW,IACTF,IAAcxb,EAAAjC,sBAAsB0d,UACpCD,IAAcxb,EAAAjC,sBAAsBkD,OAGxCoa,EAAwBjQ,KAAK5F,GAC7B8V,EAAyBpR,IAAI1E,EAAUnB,MAAMnI,MAC3Csf,IAAcxb,EAAAjC,sBAAsB4d,QAClCH,IAAcxb,EAAAjC,sBAAsBkD,IACtCua,IAAcxb,EAAAjC,sBAAsB0d,UAClCD,IAAcxb,EAAAjC,sBAAsBkD,UAQzCoa,EAAwB/E,IAAI0E,IACjC,IAAIQ,EAAmCxb,EAAAjC,sBAAsB0d,SAE7D,GAAIT,EAAkB3W,MAAO,CAC3B,MAAMqX,EAAaJ,EAAyB7e,IAC1Cue,EAAkB3W,MAAMnI,MAGtBwf,IACFF,EACGE,EAAW,IAAMA,EAAW,IAAM1b,EAAAjC,sBAAsBkD,KACxDya,EAAW,KAAOA,EAAW,IAAM1b,EAAAjC,sBAAsB4d,SACxDD,EAAW,IAAMA,EAAW,IAAM1b,EAAAjC,sBAAsB0d,UAC1DD,GAIN,OACEtf,KAAM8e,EAAkB3W,MAAMnI,KAC9BoI,gBAAiBkX,EACjBpX,KAAMpE,EAAAnC,YAAYD,MAClBwF,OAAQ,IACNvD,EAAMyN,SAASsO,gBAAgBZ,EAAkB3W,MAAMuC,MACvDqT,KAgTR,SAAA4B,EAAoBnR,EAAQC,GAC1B,GAAID,EAAE5H,SAAW6H,EAAE7H,OAAQ,OAAO,EAElC,IAAK,IAAInH,EAAI,EAAGkH,EAAM6H,EAAE5H,OAAQnH,EAAIkH,IAAOlH,EACzC,GAAIuD,KAAK+S,MAAa,IAAPvH,EAAE/O,IAAY,KAAQuD,KAAK+S,MAAa,IAAPtH,EAAEhP,IAAY,IAC5D,OAAO,EAIX,OAAO,EAqGTX,EAAA8gB,eAAA,SACE1W,EACAvF,EACAkc,GAGA,MAAMjY,GAAsBiY,EAASjY,wBAA0B0S,OAC7D6D,GAGItW,GAAoBgY,EAAShY,sBAAwByS,OACzD8D,GAGInX,GAAY4Y,EAAS5Y,cAAgBqT,OAAO+D,IAhHpD,SACE1a,EACAiE,EACAC,GAEAD,EAAmBR,QAAQkC,IAwCzB,QAvCuBV,IAAnBU,EAAUtJ,MACZsI,QAAQC,KACN,qDACA5E,EAAM8G,IAKR7C,EAAmBkY,KACjB5B,GAAQA,IAAS5U,GAAa4U,EAAKle,OAASsJ,EAAUtJ,OAGxDsI,QAAQC,KACN,wEACAe,EAAUtJ,MAIV6H,EAAiBiY,KAAK5B,GAAQA,EAAKle,OAASsJ,EAAUtJ,OACxDsI,QAAQC,KACN,uFACAe,EAAUtJ,MAIVsJ,EAAUqC,QAAUrC,EAAUnB,QAChCG,QAAQC,KACN,uGAEFD,QAAQC,KAAKe,IAGVA,EAAUnB,YACUS,IAAnBU,EAAUpB,OACZI,QAAQC,KAAK,0DACbD,QAAQC,KAAKe,IAIbA,EAAUqC,OACZ,QAAuB/C,IAAnBU,EAAUpB,KAAoB,CAChC,MAAM6X,EAAYlC,EAAgBvU,EAAUpB,MACtC8X,EAAUlC,EAAcxU,EAAUpB,MAExC,IAAI+X,EAAO3W,EAAUqC,OAAOiM,IAAImI,EAAWC,EAAS,GAC/CL,EAAWM,EAAMF,KACpBzX,QAAQC,KACN,qFAEFD,QAAQC,KAAK,SAAUwX,EAAW,OAAQC,EAAS,UAAWC,GAC9D3X,QAAQC,KAAKe,IAIVqW,EADLM,EAAO3W,EAAUqC,OAAOiM,IAAImI,EAAWC,EAAS,GAC1BA,KACpB1X,QAAQC,KACN,mFAEFD,QAAQC,KAAK,SAAUwX,EAAW,OAAQC,EAAS,UAAWC,GAC9D3X,QAAQC,KAAKe,IAIVqW,EADLM,EAAO3W,EAAUqC,OAAOiM,IAAImI,EAAWC,GAAU,GAC3BD,KACpBzX,QAAQC,KACN,sFAEFD,QAAQC,KAAK,SAAUwX,EAAW,OAAQC,EAAS,UAAWC,GAC9D3X,QAAQC,KAAKe,IAIVqW,EADLM,EAAO3W,EAAUqC,OAAOiM,IAAImI,EAAWC,EAAS,GAC1BA,KACpB1X,QAAQC,KACN,mFAEFD,QAAQC,KAAK,SAAUwX,EAAW,OAAQC,EAAS,UAAWC,GAC9D3X,QAAQC,KAAKe,SAGfhB,QAAQC,KACN,iEA2BR2X,CAA2Bvc,EAAOiE,EAAoBC,GAraxD,SACElE,EACAiE,GAEA,MAAMuY,KAIN,IAAK,MAAM7W,KAAa1B,EAClBqW,EAAkB3U,IACpB6W,EAAiBjR,KAAK5F,GAK1B,IAAK,MAAMA,KAAa6W,EAAkB,CACxC,MAAQvI,IAAKjM,EAAMsM,KAAEA,GAAS3O,EAAUqC,QAClC3L,KAAEA,EAAIkI,KAAEA,EAAIhB,OAAEA,GAAWoC,EACzB8W,EAAYrc,EAAA6H,MAIlB,IAAIyU,EAIJ/W,EAAUpC,OAAShH,KAEjB,MAAM8X,MAAEA,EAAKF,SAAEA,GAAaxO,EAAUqC,OAEhChF,EAAMO,EAAOhH,GACbogB,EAAc3c,EAAM4c,QAAQC,aAAaF,YAG/CD,EAAengB,EAAEyL,OAAOpL,IAAI6f,KAC1BtI,WACAnR,MACAsK,MAAOtK,EACP8Z,UAAWH,GAIb,IAAII,EAAY,EAEhB,OAAQzI,GAEN,KAAK0F,EAAArH,oBAAoBqK,WACvBD,GAAaJ,EAAcD,EAAaI,WAAa3I,EACrD,MAGF,KAAK6F,EAAArH,oBAAoBsK,OACvBF,GAAcJ,EAAcD,EAAaI,WAAa3I,EAAY,EAClE,MAGF,KAAK6F,EAAArH,oBAAoBuK,QACvB,MAAMC,GAAcR,EAAcD,EAAaI,WAAa3I,EAE5D4I,EAAgD,EAApCzd,EAAK6d,EAAa,EAAO,EAAI,IACzC,MAGF,KAAKnD,EAAArH,oBAAoBxR,KACzB,QACE4b,GAAaJ,EAAcD,EAAaI,WAAa3I,EAiBzD,OAZAuI,EAAapP,MAAQtF,EACnB0U,EAAapP,MACboP,EAAa1Z,IACb+Z,GAGFL,EAAaI,UAAYH,EAActI,EAEvCqI,EAAa1Z,IAAMA,EAEnBzG,EAAEyL,OAAOqC,IAAIoS,EAAWC,GAEjB1Z,IAIT2C,EAAUyX,mBAGV,IAAIC,EAAOvC,EAAe7W,EAAoBM,GAC9C,MAAM+Y,GACJjZ,MAAOgZ,EAAK,GACZ/Y,WAAY+Y,EAAK,GACjBhhB,SAAUA,UACVkhB,gBAAiB5X,EACjBpB,OACAhB,OAAQhH,GAAKmgB,EAAapP,OAG5B3H,EAAUyX,gBAAgB7R,KAAK+R,GAC/BrZ,EAAmBsH,KAAK+R,GAIxB,MAAME,GACJnZ,OAFFgZ,EAAOvC,EAAe7W,EAAoB9D,EAAA5C,sBAAsBI,MAElD,GACZ2G,WAAY+Y,EAAK,GACjBhhB,SAAUA,eACVkhB,gBAAiB5X,EACjBpB,KAAMpE,EAAA5C,sBAAsBI,IAC5B4F,OAAQhH,IAAMmgB,EAAaI,YAG7BnX,EAAUyX,gBAAgB7R,KAAKiS,GAC/BvZ,EAAmBsH,KAAKiS,GAIxB,MAAMC,GACJpZ,OAFFgZ,EAAOvC,EAAe7W,EAAoB9D,EAAA5C,sBAAsBI,MAElD,GACZ2G,WAAY+Y,EAAK,GACjBhhB,SAAUA,aACVkhB,gBAAiB5X,EACjBpB,KAAMpE,EAAA5C,sBAAsBI,IAC5B4F,OAAQhH,IAAMmgB,EAAavI,WAG7BxO,EAAUyX,gBAAgB7R,KAAKkS,GAC/BxZ,EAAmBsH,KAAKkS,IAuS1BC,CAAyB1d,EAAOiE,GAEhC,IAAI0Z,EAA4Bra,EAASsa,OACvCrC,EAA8Bvb,EAAOiE,IAKvC0Z,GAFAA,EAAgBA,EAAcC,OA9OhC,SACE5d,GAEA,QAGI3D,KAAM,aACNkI,KAAMpE,EAAAnC,YAAY6f,QAClBta,OAAQ,IAAMvD,EAAMgJ,KAAKM,WAAWO,WAAWiU,iBAAiBC,WAIhE1hB,KAAM,YACNkI,KAAMpE,EAAAnC,YAAY6f,QAClBta,OAAQ,IAAMvD,EAAMgJ,KAAKM,WAAWO,WAAWmU,OAAOD,WAKtD1hB,KAAM,eACNkI,KAAMpE,EAAAnC,YAAYH,MAClB0F,OAAQ,IAAMvD,EAAMgJ,KAAKG,OAAOC,SAKhC/M,KAAM,cACNkI,KAAMpE,EAAAnC,YAAYH,MAClB0F,OAAQ,IAAMvD,EAAMgJ,KAAKG,OAAOE,QAKhChN,KAAM,WACNkI,KAAMpE,EAAAnC,YAAYJ,IAClB2F,OAAQ,KAAOvD,EAAMgJ,KAAKF,WAAWnK,MAAOqB,EAAMgJ,KAAKF,WAAWlK,UAKlEvC,KAAM,aACNkI,KAAMpE,EAAAnC,YAAYL,IAClB4F,OAAQ,KAAOvD,EAAMgJ,KAAKN,cAI1BrM,KAAM,cACNkI,KAAMpE,EAAAnC,YAAYL,IAClB4F,OAAQ,KAAOvD,EAAM4c,QAAQC,aAAaF,eA8LTsB,CAAqBje,KAE5B4d,OA3ShC,SACE5d,GAEA,OAAIA,EAAMkB,QAAQU,OAASzB,EAAAhC,SAAS0D,SAG9BxF,KAAM,gBACNoI,gBAAiBtE,EAAAjC,sBAAsBkD,IACvCmD,KAAMpE,EAAAnC,YAAYL,IAClB4F,OAAQ,KACNvD,EAAMkB,QAAQK,kBAAoBpB,EAAAhC,SAAS0D,OAAS,EAAM,QAiS7Bqc,CAAwBle,IAE7D,IAAIme,EAEEla,EAAmB2Z,OA5L3B,SACE5d,EACAiE,GAEA,MAAMma,EAAYtD,EAChB7W,EACA9D,EAAA5C,sBAAsBI,KAKlBgQ,GACJtJ,MAAO+Z,EAAU,GACjB9Z,WAAY8Z,EAAU,GACtB/hB,KAAM,UACNkI,KAAMpE,EAAA5C,sBAAsBI,IAC5B4F,OAAQhH,IAAMA,EAAEkL,OAAS,EAAI,IAM/B,OAFAzH,EAAM2N,gBAAkBA,GAEhBA,GAuKN0Q,CAA+Bre,EAAOiE,IAGxCka,EAA0BA,EAAwBP,OAhSpD,SAIE5d,EACAiE,GAEA,GAAIjE,EAAMkB,QAAQU,OAASzB,EAAAhC,SAAS0D,OAAQ,CAE1C,MAAMyc,EAAiBxD,EACrB7W,EACA9D,EAAA5C,sBAAsBO,MAGxB,QAEIuG,MAAOia,EAAe,GACtBha,WAAYga,EAAe,GAC3BjiB,KAAM,gBACNkI,KAAMpE,EAAA5C,sBAAsBO,KAC5ByF,OAAQhH,IAGN,MAAMgiB,EAAQ,SAAWhiB,EAAE0L,IAG3B,QACGsW,GAAS,IAAM,MACN,MAARA,IAAqB,GAAK,KACnB,IAARA,GAAoB,IACrB,MAOV,SA4PEC,CAA0Bxe,EAAOme,IAGnC,MAAMM,EAAcd,EAAclH,IAAIoE,GAEhC6D,EAAwBP,EAAwBxS,KACpD2P,GAgBF,OAZArB,EAAA3U,mBAAmBC,EAAIvF,EAAOkE,EAAkBwa,IAa9Cza,mBAAoBya,EACpBpb,SAAUmb,EACVva,iBA9LJ,SACElE,GAGA,OAAIA,EAAMiC,aAAegY,EAAA5U,gBAAgBS,UAKnCzJ,KAAM,WACNkI,KAAMpE,EAAAlC,oBAAoBN,IAE1B4F,OAAQ,KAAO,QAsK6Bob,CAChD3e,GAKC4d,OAAO1Z,OACPuS,IAAIkE,oFChsBT,MAAAza,EAAAtE,EAAA,GACAuE,EAAAvE,EAAA,GAIMgjB,GACJlhB,CAACyC,EAAAnC,YAAYL,KAAM,IACnBD,CAACyC,EAAAnC,YAAYJ,KAAM,KACnBF,CAACyC,EAAAnC,YAAYH,OAAQ,KACrBH,CAACyC,EAAAnC,YAAYF,MAAO,KACpBJ,CAACyC,EAAAnC,YAAY6gB,SAAU,YACvBnhB,CAACyC,EAAAnC,YAAY6f,SAAU,aAGnBiB,GACJphB,CAACyC,EAAAnC,YAAYL,MAAO,GACpBD,CAACyC,EAAAnC,YAAYJ,MAAO,EAAG,GACvBF,CAACyC,EAAAnC,YAAYH,QAAS,EAAG,EAAG,GAC5BH,CAACyC,EAAAnC,YAAYF,OAAQ,EAAG,EAAG,EAAG,GAC9BJ,CAACyC,EAAAnC,YAAY6gB,UAAW,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAChDnhB,CAACyC,EAAAnC,YAAY6f,UAAW,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAGvE,SAAAkB,EAA2Bzc,GACzB,OACEV,KAAMgd,EAA8Btc,EAAQiC,MAC5CzH,MAAOgiB,EAAsBxc,EAAQiC,OAIzCpJ,EAAA6jB,sBAAA,SAIEhf,EACAoE,EACAJ,EACAib,EACAC,GAGA,MAAMC,EAAiDnf,EAAMof,qBAC7DD,EAAeE,aAAejb,EAC9B+a,EAAeG,eAAiBtb,EAGhCmb,EAAe7b,YAGf,IAAK,IAAIxH,EAAI,EAAGkH,EAAMic,EAAchc,OAAQnH,EAAIkH,IAAOlH,EAAG,CACxD,MAAMwG,EAAU2c,EAAcnjB,GACxB4H,EAAkBqb,EAAkBzc,GAC1C6c,EAAe7b,SAAShB,EAAQjG,MAAQqH,EAI1C,IAAK,IAAI5H,EAAI,EAAGkH,EAAMkc,EAAmBjc,OAAQnH,EAAIkH,IAAOlH,EAAG,CAC7D,MAAMyjB,EAAmBL,EAAmBpjB,GAC5CqjB,EAAe7b,SAASic,EAAiBljB,OACvCuF,KAAM2d,EAAiB3d,KACvB9E,MAAOyiB,EAAiBziB,OAI5B,OAAO,IAAIoD,EAAMsf,kBAAkBL,mFChErC,MAAAjf,EAAAtE,EAAA,GAQAqe,EAAAre,EAAA,GAEA,SAAA6jB,EACE9f,GAMA,OAAQ+f,MAAMC,QAAQhgB,EAAI,IAG5BxE,EAAAykB,sBAAA,SACE5f,EACA6f,EACA3b,EACAC,GAGA,MAAM2b,KAEF9f,EAAMiC,aAAegY,EAAA5U,gBAAgBU,qBACvC8Z,EAAwB,GAG1B,IAAK,IAAI/jB,EAAI,EAAGkH,EAAMkB,EAAiBjB,OAAQnH,EAAIkH,IAAOlH,EAAG,CAC3D,MAAM6J,EAAYzB,EAAiBpI,GACnCgkB,EAAcvU,KACZ,IAAIwU,aAAapa,EAAUpB,KAAOJ,EAAc0b,IAMpD,MAAMrS,EAAOtJ,EAAiBjB,OAC9B,IAAIrD,EACA+F,EACA7I,EACAkjB,GAAuB,EAE3B,IAAK,IAAIlkB,EAAI,EAAGkH,EAAMmB,EAAarI,EAAIkH,IAAOlH,EAC5C,IAAK,IAAIyR,EAAI,EAAGA,EAAIC,IAAQD,EAK1B,GAJA5H,EAAYzB,EAAiBqJ,GAC7B3N,EAASkgB,EAAcvS,GAGnBkS,EAFJ3iB,EAAQ6I,EAAUpC,OAAOzH,IAGvB,IACE,IAAImkB,EAAInkB,EAAI6J,EAAUpB,KAAM2b,EAAOD,EAAIta,EAAUpB,KAAMiH,EAAQ,EAC/DyU,EAAIC,IACFD,IAAKzU,EAEP5L,EAAOqgB,GAAKnjB,EAAM0O,QAGpBwU,GAAc,EAKhBA,GACFrb,QAAQC,KACN,+EAQJ,IAAK,IAAI9I,EAAI,EAAGkH,EAAMkB,EAAiBjB,OAAQnH,EAAIkH,IAAOlH,EAAG,CAC3D,MACMqkB,EADYjc,EAAiBpI,GACJyI,KAAOJ,EAGtC,IAAK,IAAIoJ,EAAI,EAAGC,EAAOqS,EAAuBtS,EAAIC,IAAQD,EACxDuS,EAAchkB,GAAGskB,WAAWD,EAAe5S,EAAG,EAAG4S,GAMrD,GAAIngB,EAAMiC,aAAegY,EAAA5U,gBAAgBS,QAAS,CAChD,MAAMua,EAAmBP,EAAc,GAEvC,IAAK,IAAIhkB,EAAI,EAAGkH,EAAM6c,EAAuB/jB,EAAIkH,IAAOlH,EAAG,CACzD,MAAMwkB,EAAqBxkB,EAAIqI,EAE/B,IAAK,IAAIoJ,EAAI,EAAGA,EAAIpJ,IAAeoJ,EACjC8S,EAAiB9S,EAAI+S,GAAsBxkB,GAMjD,MAAMwK,EAAW,IAAIpG,EAAMqgB,eAE3B,IAAK,IAAIzkB,EAAI,EAAGkH,EAAMkB,EAAiBjB,OAAQnH,EAAIkH,IAAOlH,EAAG,CAC3D,MAAM6J,EAAYzB,EAAiBpI,GAC7B8e,EAAoB,IAAI1a,EAAMsgB,gBAClCV,EAAchkB,GACd6J,EAAUpB,MAEZoB,EAAUiV,kBAAoBA,EAC9BtU,EAASma,aAAa9a,EAAUtJ,KAAMue,GAGxC,OAAOtU,kFCnHT,MAAApG,EAAAtE,EAAA,GAEA8kB,EAAA9kB,EAAA,IACA0M,EAAA1M,EAAA,IACA+kB,EAAA/kB,EAAA,IACAglB,EAAAhlB,EAAA,IA4BAT,EAAA0lB,qBAAA,SACE3K,GAMA,MAAMtX,EAASsX,EAAQX,OAAO3W,OACxBD,EAAQuX,EAAQX,OAAO5W,MAGvBoL,GACJ+W,YAHkBniB,EAAQC,EAI1BG,QAASH,EAAS,EAClBoL,IAAK,IACLnL,MAAOF,EAAQ,EACfsL,MAAO,IACPjL,MAAOL,EAAQ,EACfG,IAAKF,EAAS,EACdmiB,SAAUniB,GAGNoiB,EAA4B,IAAI1Y,EAAAuF,WACtCmT,EAAcnX,WAAa,IAAI3J,EAAM+gB,mBACnClX,EAASlL,KACTkL,EAAS/K,MACT+K,EAASjL,IACTiL,EAAShL,OACTgL,EAASE,KACTF,EAASC,KAGXgX,EAAcnX,WAAWR,MAAMgB,IAAI,GAAM,EAAK,GAC9C2W,EAAcnX,WAAWO,SAASC,IAAI,EAAK,GAAM,KACjD2W,EAAcnX,WAAWW,mBAAkB,GAC3CwW,EAAcnX,WAAWU,eAErByW,EAAcnX,sBAAsB3J,EAAM+gB,oBAC5CD,EAAcnX,WAAWY,yBAI3B,MAAMyW,EAAkC,IAAIR,EAAAtR,YAGtC+R,GACJpiB,OAAQ,EACRF,KAAM,EACNG,MAAO,EACPF,IAAK,GAIDsiB,EAAc,IAAIR,EAAAnY,MACtBU,OAAQ+X,EACRna,IAAK6Z,EAAAnY,KAAKkC,gBACVrB,WAAY0X,EACZjX,SAAUoX,IAINE,EAAe,IAAIV,EAAA5V,OACvBhE,IAAK4Z,EAAA5V,MAAMa,iBACX4J,WAMF,OAFA6L,EAAaC,QAAQF,IAGnBjY,OAAQ+X,EACRjhB,MAAOohB,EACPrY,KAAMoY,EACN9X,WAAY0X,EACZjX,SAAUoX,mFC3Gd,MAAA9Y,EAAAzM,EAAA,SAEA2lB,UAAmClZ,EAAA/J,OAGjCZ,qBACE,OAAO,IAAI6jB,GACT3iB,OAAQ,EACRD,MAAO,EACPF,EAAG,EACHC,EAAG,KARTvD,EAAAomB,4FCFapmB,EAAAqmB,cACXC,mBAAoB,qBACpB1G,WAAY,aACZ2G,kBAAmB,oBACnBC,aAAc,eACdC,cAAe,gBACfC,mBAAoB,qBACpBC,uBAAwB,yBACxBC,sBAAuB,wBACvBC,sBAAuB,wBACvBC,kBAAmB,oBACnBC,4BAA6B,8BAC7BjD,cAAe,gBACf/d,QAAS,UACTihB,kBAAmB,oBACnBpU,OAAQ,SACRqU,YAAa,cACbC,EAAG,IACHne,iBAAkB,iKClBpB7F,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,mCCEA,IAAI2Z,mDACJ,MAAM+M,EAAgB,IAChBC,MAAEA,EAAKrQ,IAAEA,EAAGD,IAAEA,GAAQ5S,KAQ5BlE,EAAAqnB,sBAIE9kB,4BAEE,MAAQ6X,GACN/W,KAAKikB,mBACC,IAAIC,QAAQrf,GAAWsf,WAAWtf,EAAS,KAarD3F,0BACE+P,EACAxB,EACA2W,GAIIA,GACFpkB,KAAKqkB,sBAAsBpV,GAI7B,MAAMzB,EAAQyB,EAASzB,MAEjB8W,EAAgB7W,GAAewB,EAASxB,aAAe,EAE7DzN,KAAKukB,UAAU/W,EAAOyB,EAASuV,cAAezN,EAAQuN,GAEtD,MAAMG,KAAEA,EAAIC,KAAEA,EAAIC,KAAEA,EAAIC,KAAEA,GAAS5kB,KAAK6kB,gBAAgB9N,GAGxD9H,EAAS6V,cAAgB7V,EAAS6V,gBAChCC,SAAW3kB,OAAQ,EAAGD,MAAO,GAC7BuK,OAAStK,OAAQ,EAAGD,MAAO,IAIxBikB,GAWHnV,EAAS6V,cAAcC,SACrB3kB,OAAQwkB,EAAOF,EACfvkB,MAAOwkB,EAAOF,GAGhBxV,EAAS6V,cAAc/N,OAAS/W,KAAKglB,oBACnC/V,EACAyV,EACAD,GAEFzkB,KAAKilB,mBAAmBhW,EAAU,GAAK,IAnBvCA,EAAS6V,cAAcpa,OACrBtK,OAAQwkB,EAAOF,EACfvkB,MAAOwkB,EAAOF,GAyBpBvlB,6BAA6B+P,GAC3B,MAAMzB,EAAQyB,EAASzB,MACjB0X,EAAW1X,EAAM0X,SAGvB,IAAKA,EAEH,YADAjW,EAASuV,cAAgBhX,EAAM2X,MAKjCnlB,KAAKukB,UAAU/W,EAAOA,EAAM2X,KAAMpO,EAAQ,GAE1C,MAAMqO,EAAYplB,KAAK6kB,gBAAgB9N,GAGvC,GAAIqO,EAAUT,KAAOS,EAAUX,MAAQS,EAErC,YADAjW,EAASuV,cAAgBhX,EAAM2X,MAMjC,MAAMA,EAAO3X,EAAM2X,KACnB,IAAI9kB,EAAO,EACPG,EAAQ2kB,EAAK1gB,OACb4gB,EAAStB,GAAOvjB,EAAQH,GAAQ,GAChCilB,EAAS,EAIb,KAAO9kB,EAAQH,GAAmB,IAAXglB,GAAgBC,IAHrB,IAG2C,CAE3DtlB,KAAKukB,UAAU/W,KAAU2X,EAAKI,OAAO,EAAGF,QAActO,EAAQ,GAC9D,MAAM0N,KAAEA,EAAIE,KAAEA,GAAS3kB,KAAK6kB,gBAAgB9N,GAGxC4N,EAAOF,GAAQS,EACjB7kB,EAAOglB,EAKP7kB,EAAQ6kB,EAIV,MAAMG,EAAazB,GAAOvjB,EAAQH,GAAQ,GAAOA,EAGjD,GAAImlB,IAAeH,EACjB,MAIFA,EAASG,EAKTvW,EAASuV,cADI,IAAXa,EACuB,SAKGF,EAAKI,OAAO,EAAGF,QAQ/CnmB,2BACE+P,EACA3O,EACAD,GAEA,MAAMolB,EAAUxL,SAASyL,cAAc,UACjChO,EAAU+N,EAAQxB,WAAW,MAEnC,GAAIvM,EAAS,CACX,MAAMqN,EAAU9V,EAAS6V,cAAcC,QACvCU,EAAQtlB,MAAQ4kB,EAAQ5kB,MACxBslB,EAAQrlB,OAAS2kB,EAAQ3kB,OACzBsX,EAAQiO,uBAAwB,EAGhCjO,EAAQkO,UACN7O,EAAOA,OACP1W,EACAC,EACAykB,EAAQ5kB,MACR4kB,EAAQ3kB,OACR,EACA,EACA2kB,EAAQ5kB,MACR4kB,EAAQ3kB,aAGV+F,QAAQC,KACN,6EAIJ,OAAOqf,EAMTvmB,iBACEsO,EACA2X,EACApO,EACAuN,GAGA,MAAMuB,EAAW7lB,KAAK8lB,8BAA8BtY,EAAO8W,GAE3DvN,EAAOgP,UAAY,QAEnBhP,EAAOiP,KAAOhmB,KAAKimB,YAAYzY,EAAO8W,GAItCvN,EAAOA,OAAO5W,MAAQ4W,EAAOmP,YAAY1Y,EAAM2X,MAAMhlB,MAAQ0lB,EAG7D9O,EAAOA,OAAO3W,OAAoB,EAAXylB,EAGvB9O,EAAOgP,UAAY,QAEnBhP,EAAOiP,KAAOhmB,KAAKimB,YAAYzY,EAAO8W,GAEtCvN,EAAOoP,SAAShB,EAAMU,EAAW,EAAKA,EAAW,EAAMA,GAMzD3mB,oBACE,IAAK6X,EAAQ,CACX,MAAMqP,EAAkBnM,SAASyL,cAAc,UAAUzB,WAAW,MAMpE,OAJImC,IACFrP,EAASqP,GAGJA,EAGT,OAAOrP,EAOT7X,qCAAqCsO,EAAcC,GACjD,OAAOD,EAAMqY,SAAWpY,EAM1BvO,mBAAmBsO,EAAcC,GAC/B,SAAUD,EAAM6Y,cAAcrmB,KAAK8lB,8BACjCtY,EACAC,QACKD,EAAM8Y,aAMfpnB,uBAAuB6X,GACrB,MAAM5W,MAAEA,EAAKC,OAAEA,GAAW2W,EAAOA,OAC3BwP,EAAYxP,EAAOyP,aAAa,EAAG,EAAGrmB,EAAOC,GAAQ4D,KAC3D,IAAI3F,EAEAqmB,EAAO+B,OAAOC,iBACdjC,EAAOgC,OAAOC,iBACd/B,EAAO8B,OAAOE,iBACd/B,EAAO6B,OAAOE,iBAElB,IAAK,IAAIrpB,EAAI,EAAGA,EAAI6C,IAAS7C,EAC3B,IAAK,IAAIyR,EAAI,EAAGA,EAAI3O,IAAU2O,GAE5B1Q,EAAIkoB,EADaxX,GAAa,EAAR5O,GAAiB,EAAJ7C,IAG3B,IACNonB,EAAOjR,EAAIiR,EAAM3V,GACjB0V,EAAOhR,EAAIgR,EAAMnnB,GACjBqnB,EAAOjR,EAAIiR,EAAMrnB,GACjBsnB,EAAOlR,EAAIkR,EAAM7V,IAcvB,OAPA6V,GAAQ,EACRD,GAAQ,EACRF,GAAQ,EAERC,EAAOhR,EALPgR,GAAQ,EAKS,IAGRD,KAFTA,EAAO/Q,EAAI+Q,EAAM,GAEFC,OAAMC,OAAMC,QAM7B1lB,oBACE+P,GAMA,aAHMjP,KAAK4mB,eAGP3X,EAASzB,MAAMqY,SAAW/B,GAC5B3d,QAAQC,KAAK,2CACN6I,IAKTjP,KAAKilB,mBAAmBhW,EAAUA,EAASxB,aAAa,GAEjDwB,GAMT/P,kBAAkB+P,GAIhB,OAFAjP,KAAKikB,aAEAlN,EAQD9H,EAASzB,MAAMqY,SAAW/B,GAC5B3d,QAAQC,KAAK,2CACN6I,IAKTjP,KAAKilB,mBAAmBhW,EAAUA,EAASxB,aAAa,GAEjDwB,IAhBL9I,QAAQC,KACN,gFAEK6I,oFC/Ub,MAAA5B,EAAAjQ,EAAA,IAEAT,EAAAkqB,iCAAwCxZ,EAAAE,kBAItCrO,YAAY4nB,GACV3kB,QACAnC,KAAK8mB,MAAQA,mFCLjB,MAAMC,EAA2B,EAKjCpqB,EAAAqqB,sBAIE9nB,0BAA0B6X,GAExB,IACE,IAAIpZ,EAAIoZ,EAAOkN,WAAW,MAAOgD,EAAQ,GACxC9e,QAAQxK,IAAMspB,EAAQ,IACvBtpB,EAAIoZ,EAAOkN,WAAW,QAASgD,QAEzB,IAAI/C,QAAQrf,GAAWsf,WAAWtf,EAAS,KAOrD3F,eAAe6gB,GACb,cAAelf,KAAKkjB,MAAgB,IAAVhE,EAAM1hB,OAAawC,KAAKkjB,MACtC,IAAVhE,EAAMmH,OACFrmB,KAAKkjB,MAAgB,IAAVhE,EAAMzT,OAAayT,EAAMoH,WAG5CjoB,oBAAoB+P,GAClB,MAAM8H,EAASkD,SAASyL,cAAc,UAChChO,EAAUX,EAAOkN,WAAW,MAyBlC,aAvBMjkB,KAAK4mB,aAAa7P,GAEpBW,GACFX,EAAO5W,MAAQ4mB,EACfhQ,EAAO3W,OAAS2mB,EAChBrP,EAAQiO,uBAAwB,EAChCjO,EAAQqO,UAAY/lB,KAAKonB,QAAQnY,EAAS8Q,OAG1CrI,EAAQ2P,SACN,EACA,EACAN,EACAA,GAGF9X,EAAS6V,cAAc/N,OAASA,GAEhC5Q,QAAQC,KACN,+EAIG6I,mFC3DX,MAAA5B,EAAAjQ,EAAA,IAEAT,EAAA2qB,iCAAwCja,EAAAE,kBAItCrO,YAAY6gB,GACV5d,QACAnC,KAAK+f,MAAQA,mFCHjBpjB,EAAA4qB,iBAAAroB,cAEEc,KAAAsiB,YAAsB,EAEtBtiB,KAAAwnB,iBAA2B,GAE3BxnB,KAAAynB,aAAqC,KAErCznB,KAAA0nB,SAAoBznB,EAAG,EAAGC,EAAG,GAE7BF,KAAA2nB,SAAoB1nB,EAAG,EAAGC,EAAG,GAE7BF,KAAA4nB,SAAoB3nB,EAAG,EAAGC,EAAG,GAE7BF,KAAA6nB,SAAoB5nB,EAAG,EAAGC,EAAG,GAE7BF,KAAA8nB,aAAuB,EAEvB9nB,KAAA+nB,cAAwB,EAExB/nB,KAAAgoB,SAAmB,EAEnBhoB,KAAAioB,WAAqB,EAErBjoB,KAAAkoB,YAAsB,mFC9BxB,MAAAxmB,EAAAtE,EAAA,GACAyE,EAAAzE,EAAA,IAKA+qB,EAAA/qB,EAAA,IACAgrB,EAAAhrB,EAAA,KASA,SAAYirB,GACVA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,cACAA,IAAA,cACAA,IAAA,cACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,oBAZF,CAAY1rB,EAAA0rB,YAAA1rB,EAAA0rB,eAiCZ1rB,EAAA2rB,oBAA2BzmB,EAAAI,cAoBzB/C,YAAYa,GACVoC,MAAMpC,GALRC,KAAAuoB,eAAiB,IAAIjmB,IAMnB,MAAMyU,EAASkD,SAASyL,cAAc,UACtC1lB,KAAKG,MAAQ4W,EAAO5W,MAAQJ,EAAQI,MACpCH,KAAKI,OAAS2W,EAAO3W,OAASL,EAAQK,OACtCJ,KAAKwoB,gBAAkBzoB,EAAQyoB,gBAG/BxoB,KAAKyoB,QAAU,IAAIN,EAAAO,SAAS,EAAG,EAAG3oB,EAAQI,MAAOJ,EAAQK,QAEzDJ,KAAK2oB,cAAc5R,GAMb7X,mBAAmB+P,GACzB,MAAM2Z,GAAS3oB,EAAG,EAAGC,EAAG,GACxB+O,EAAS8V,QAAQzC,YAAc,EAC/BrT,EAAS8V,QAAQ6C,QAAUgB,EAC3B3Z,EAAS8V,QAAQ8C,QAAUe,EAC3B3Z,EAAS8V,QAAQ2C,QAAUkB,EAC3B3Z,EAAS8V,QAAQ4C,QAAUiB,EAC3B3Z,EAAS8V,QAAQyC,iBAAmB,GACpCvY,EAAS8V,QAAQkD,WAAa,EAC9BhZ,EAAS8V,QAAQmD,YAAc,EAC/BjZ,EAAS8V,QAAQiD,SAAU,EAM7B9oB,WAAWiP,GACTnO,KAAKmO,QAAUA,EAQjBjP,iBAAiB+P,GACf,QAA0CxI,IAAtCzG,KAAKuoB,eAAenqB,IAAI6Q,GAAyB,CACnD,IAAKA,EAAS8V,UAAY9V,EAAS8V,QAAQiD,QAQzC,OAPK/Y,EAAS8V,UACZ9V,EAAS8V,QAAU,IAAIqD,EAAAb,YAGzBtY,EAAS8V,QAAQiD,SAAU,EAC3BhoB,KAAKuoB,eAAe1c,IAAIoD,GAAU,IAE3B,EAEP9I,QAAQC,KACN,eACApG,KAAKsI,GACL,6FACA,4EACA,YACA2G,QAIJ9I,QAAQC,KACN,eACApG,KAAKsI,GACL,qFACA,iFACA,YACA2G,GAIJ,OAAO,EAWT/P,eAAe+P,GACTjP,KAAKuoB,eAAenqB,IAAI6Q,IAC1BjP,KAAKuoB,eAAe1c,IAAIoD,GAAU,GAClCjP,KAAK6oB,mBAAmB5Z,IAExB9I,QAAQC,KACN,eACApG,KAAKsI,GACL,oEACA,oEACA,YACA2G,GAaN/P,cAAc6X,GACZ,GAAI/W,KAAK+kB,QAAS,CAChB,MAAM+D,EAAkC9oB,KAAK+kB,QAAQ+B,MACrD9mB,KAAK+kB,QAAQgE,UACb/oB,KAAK+kB,QAAU,IAAIrjB,EAAMma,QAAQiN,QAEjC9oB,KAAK+kB,QAAU,IAAIrjB,EAAMma,QAAQ9E,GAInC/W,KAAK+kB,QAAQiE,iBAAkB,EAC/BhpB,KAAK+kB,QAAQkE,kBAAmB,EAChCjpB,KAAKwoB,iBAAmBxqB,OAAOwE,OAAOxC,KAAK+kB,QAAS/kB,KAAKwoB,iBACzDxoB,KAAK+kB,QAAQmE,aAAc,EAS7BhqB,UACEc,KAAK+kB,QAAQgE,UACb/oB,KAAKuoB,eAAetjB,QAAQ,CAAC+iB,EAAS/Y,KACpCjP,KAAK6oB,mBAAmB5Z,oJC1M9BpP,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,oFCUAT,EAAAuR,wBAIEhP,YACEsC,EACA+B,GAEAvD,KAAKwB,MAAQA,EACbxB,KAAKuD,cAAgBA,mFCpBzB,MAAM4lB,EAAoC,IAE1CxsB,EAAAysB,6BAAA,WACE,MAAO,gBAGTzsB,EAAA0sB,4BAAA,SAA4Crc,GAC1C,SAAUmc,IAAoCnc,EAAMsc,SAAS,sFCJ/D3sB,EAAA4sB,4BAAA,SACEpiB,GAEA,OAAIA,EAAUqC,WACDrC,EAAUtJ,WAEdsJ,EAAUtJ,qFCTrBlB,EAAA6sB,eAAA,SAA+BziB,EAA2B0iB,GACxD,MAAMC,GACFC,eAAgB,EAChBpN,WAAY,IAAI2E,MAChB0I,aAAc,EACd9kB,SAAU,IAAIoc,OAEhB2I,EAAiB9iB,EAAG+iB,oBAAoBL,EAAS1iB,EAAGgjB,iBACpDC,EAAmBjjB,EAAG+iB,oBAAoBL,EAAS1iB,EAAGkjB,mBAIlDC,GACJC,MAAQ,aACRC,MAAQ,aACRC,MAAQ,aACRC,MAAQ,WACRC,MAAQ,WACRC,MAAQ,WACRC,MAAQ,OACRC,MAAQ,YACRC,MAAQ,YACRC,MAAQ,YACRC,MAAQ,aACRC,MAAQ,aACRC,MAAQ,aACRC,MAAQ,aACRC,MAAQ,eACRC,KAAQ,OACRC,KAAQ,gBACRC,KAAQ,QACRC,KAAQ,iBACRC,KAAQ,MACRC,KAAQ,eACRC,KAAQ,SAGJC,GACJtB,MAAQ,EACRC,MAAQ,EACRC,MAAQ,EACRC,MAAQ,EACRC,MAAQ,EACRC,MAAQ,EACRC,MAAQ,EACRC,MAAQ,EACRC,MAAQ,EACRC,MAAQ,EACRC,MAAQ,EACRC,MAAQ,EACRC,MAAQ,EACRC,MAAQ,EACRC,MAAQ,EACRC,KAAQ,EACRC,KAAQ,EACRC,KAAQ,EACRC,KAAQ,EACRC,KAAQ,EACRC,KAAQ,EACRC,KAAQ,GAIV,IAAK,IAAIluB,EAAI,EAAGA,EAAIusB,IAAkBvsB,EAAG,CACvC,MAAMwG,EAAeiD,EAAG2kB,iBAAiBjC,EAASnsB,GAClDwG,EAAQ6nB,SAAWzB,EAAMpmB,EAAQV,MACjCsmB,EAAO5kB,SAASiI,KAAKjJ,GACrB4lB,EAAOE,cAAgB9lB,EAAQiC,KAC/BjC,EAAQiC,KAAOjC,EAAQiC,KAAO0lB,EAAO3nB,EAAQV,MAI/C,IAAK,IAAI9F,EAAI,EAAGA,EAAI0sB,EAAkB1sB,IAAK,CACzC,MAAM6J,EAAiBJ,EAAG6kB,gBAAgBnC,EAASnsB,GACnD6J,EAAUwkB,SAAWzB,EAAM/iB,EAAU/D,MACrCsmB,EAAOnN,WAAWxP,KAAK5F,GACvBuiB,EAAOC,gBAAkBxiB,EAAUpB,KAGrC,OAAO2jB,SAGT1iB,GACSA,EAAA6kB,oBAAsB,EACtB7kB,EAAA8kB,sBAAwB,EACxB9kB,EAAAK,sBAAwB,EACxBL,EAAA+kB,iBAA2B,EAC3B/kB,EAAAglB,iBAAmB,EACnBhlB,EAAAC,qBAAsB,EACtBD,EAAAilB,2BAA4B,EAPrCtvB,EAAAqK,YAUA,WAeE,MAAMD,EAbN,WACE,IACE,MAAMgQ,EAASkD,SAASyL,cAAc,UACtC,OACG1oB,OAAekvB,wBACfnV,EAAOkN,WAAW,UAAYlN,EAAOkN,WAAW,uBAEnD,MAAOkI,GACP,OAAO,GAKAC,GAGPrlB,IACFC,EAAU+kB,iBAAkB,EAC5B/kB,EAAU6kB,oBAAsB9kB,EAAGslB,aACjCtlB,EAAGulB,4BAELtlB,EAAU8kB,sBAAwB/kB,EAAGslB,aACnCtlB,EAAGwlB,8BAELvlB,EAAUK,sBAAwBN,EAAGslB,aAAatlB,EAAGylB,oBACrDxlB,EAAUglB,iBAAmBjlB,EAAGslB,aAAatlB,EAAGilB,kBAChDhlB,EAAUilB,0BAA4B9jB,QACpCpB,EAAG0lB,aAAa,2BAElBzlB,EAAUC,oBAAsBD,EAAUilB,2BAI9CS,qBC/HA,SAAAC,GA+JA,SAAAC,IACA,IAAAvuB,EACA,IACAA,EAAA1B,EAAAkwB,QAAAC,MACG,MAAAX,IAOH,OAJA9tB,QAAA,IAAAsuB,GAAA,QAAAA,IACAtuB,EAAAsuB,EAAAI,IAAAC,OAGA3uB,GApKA1B,EAAAC,EAAAD,QAAAS,EAAA,MACA6vB,IAwHA,WAGA,uBAAA9mB,SACAA,QAAA8mB,KACAC,SAAAvuB,UAAAwuB,MAAA1vB,KAAA0I,QAAA8mB,IAAA9mB,QAAAinB,YA5HAzwB,EAAA0wB,WA+EA,SAAAC,GACA,IAAAC,EAAAvtB,KAAAutB,UASA,GAPAD,EAAA,IAAAC,EAAA,SACAvtB,KAAAwtB,WACAD,EAAA,WACAD,EAAA,IACAC,EAAA,WACA,IAAA5wB,EAAA8wB,SAAAztB,KAAA0tB,OAEAH,EAAA,OAEA,IAAA5vB,EAAA,UAAAqC,KAAA+f,MACAuN,EAAApgB,OAAA,IAAAvP,EAAA,kBAKA,IAAAqP,EAAA,EACA2gB,EAAA,EACAL,EAAA,GAAAxd,QAAA,uBAAAC,GACA,OAAAA,GAEA,OAAAA,IAGA4d,IAJA3gB,KAQAsgB,EAAApgB,OAAAygB,EAAA,EAAAhwB,IA5GAhB,EAAAixB,KAqIA,SAAAC,GACA,IACA,MAAAA,EACAlxB,EAAAkwB,QAAAiB,WAAA,SAEAnxB,EAAAkwB,QAAAC,MAAAe,EAEG,MAAA1B,MA3IHxvB,EAAAiwB,OACAjwB,EAAA4wB,UAgCA,WAIA,uBAAAvwB,eAAA2vB,SAAA,aAAA3vB,OAAA2vB,QAAAvpB,KACA,SAIA,uBAAA2qB,qBAAAC,WAAAD,UAAAC,UAAAC,cAAAle,MAAA,yBACA,SAKA,0BAAAkK,mBAAAiU,iBAAAjU,SAAAiU,gBAAAC,OAAAlU,SAAAiU,gBAAAC,MAAAC,kBAEA,oBAAApxB,eAAAmJ,UAAAnJ,OAAAmJ,QAAAkoB,SAAArxB,OAAAmJ,QAAAmoB,WAAAtxB,OAAAmJ,QAAAooB,QAGA,oBAAAR,qBAAAC,WAAAD,UAAAC,UAAAC,cAAAle,MAAA,mBAAAye,SAAAC,OAAAC,GAAA,SAEA,oBAAAX,qBAAAC,WAAAD,UAAAC,UAAAC,cAAAle,MAAA,uBArDApT,EAAAkwB,QAAA,oBAAA8B,aACA,IAAAA,OAAA9B,QACA8B,OAAA9B,QAAA+B,MAgLA,WACA,IACA,OAAA5xB,OAAA6xB,aACG,MAAA1C,KAlLH2C,GAMAnyB,EAAAoyB,QACA,sEACA,sEACA,sEACA,sEACA,sEACA,sEACA,sEACA,sEACA,sEACA,sEACA,6DAwCApyB,EAAAqyB,WAAAvN,EAAA,SAAAvJ,GACA,IACA,OAAA+W,KAAAC,UAAAhX,GACG,MAAAiX,GACH,qCAAAA,EAAAC,UAqGAzyB,EAAA0yB,OAAAzC,wGCjLA,MAAA0C,EAAAlyB,EAAA,KACAmyB,EAAAnyB,EAAA,GACM0vB,EAAQ1vB,EAAQ,GAARA,CAAiB,4BAGzBoyB,EAAgB,EAAI,GAEpBC,GAAqB,IAErBC,EAAyB,IAKzBC,GAAsB,EAAG,EAAG,EAAG,GAU/BC,EAAc,IACdC,EAAc,GACdC,EAAc,IACdC,EAAc,GAgFpB,IAAI3U,EA4D2Bze,EAAAye,iBA1D3BkU,EAAQU,SACVlD,EAAM,iCACNnwB,EAAAye,iBAlFF,SAA+B+Q,GAC7B,MAAMvT,EAAoBuT,EAC1B,IAAI8D,EAAS,EACTC,EAAS,EAoBb,OAjBIrvB,KAAKsvB,KAAKR,EAAS,MAAQ9uB,KAAKsvB,KAAKD,IACvCP,EAASziB,OAAO,EAAGyiB,EAASlrB,OAAQ,EAAG,EAAG,EAAG,GAG/CwrB,EAASrX,EAAMqX,OAASP,EAGxBQ,EACEtX,EAAMsX,OAASR,EAAyBE,EACxCD,EAAS,GAAKE,EACdF,EAAS,GAAKG,EACdH,EAAS,GAAKI,EAEhBJ,EAASS,QAAQF,GAEjBP,EAASU,MAEF,IAAId,EAAAe,SAASL,GAASC,KA4DpBZ,EAAQiB,OAASjB,EAAQkB,SAAW,IAC7C1D,EAAM,+BACNnwB,EAAAye,iBArDF,SAA4B+Q,GAC1B,MAAMvT,EAAoBuT,EAC1B,IAAI8D,EAASrX,EAAMqX,YAEJxpB,IAAXwpB,IACFA,OACwBxpB,IAAtBmS,EAAM6X,YAA4B7X,EAAM6X,YAAcjB,EAAgB,GAG1E,IAAIU,EAAStX,EAAMsX,OAUnB,YARezpB,IAAXypB,IAEAA,OADwBzpB,IAAtBmS,EAAM8X,YACC9X,EAAM8X,YAAclB,GAEnB5W,EAAM+X,aAAe/X,EAAMgY,QAAUnB,GAI5C,IAAIF,EAAAe,SAASL,GAASC,KAmCpBZ,EAAQuB,QACjB/D,EAAM,iCACNnwB,EAAAye,iBAlCF,SAA4B+Q,GAC1B,MAAMvT,EAAoBuT,EAC1B,IAAI8D,OAAEA,EAAMC,OAAEA,GAAWtX,OAEVnS,IAAXwpB,IACFA,OACwBxpB,IAAtBmS,EAAM6X,YAA4B7X,EAAM6X,YAAcjB,EAAgB,QAG3D/oB,IAAXypB,IAEAA,OADwBzpB,IAAtBmS,EAAM8X,YACC9X,EAAM8X,YAAclB,EAEpB5W,EAAM+X,aAAe/X,EAAMgY,QAIxC,MAAM1Y,EAAI,IAAIqX,EAAAe,QAAQL,GAASC,GAG/B,OAFAhY,EAAE4Y,eAAe,KAEV5Y,KAgBP4U,EAAM,gCACNnwB,EAAAye,iBAjEF,SAA8B+Q,GAC5B,MAAMvT,EAAoBuT,EAE1B,OAAO,IAAIoD,EAAAe,QAAQ1X,EAAMqX,QAASrX,EAAMsX,UA6GjCvzB,EAAA8b,qBAzCT,SACE0T,EACA4E,GAEA,IAAIC,EAAiB,EACnBC,EAAiB,EACjBC,EAAiB,EACjBC,EAAiB,EACjB1yB,EACEsyB,GAAa5E,EAAEiF,aAAejF,EAAEiF,YAAY1gB,QAAWyb,EAAEzb,OAoB7D,GAjBKyb,IACHA,EAAInvB,OAAOwb,OAGT2T,EAAEkF,OAASlF,EAAEmF,OACfN,EAAS7E,EAAEkF,MACXJ,EAAS9E,EAAEmF,QACFnF,EAAEoF,SAAWpF,EAAEqF,WACxBR,EACE7E,EAAEoF,QACFtX,SAASwX,KAAKC,WACdzX,SAASiU,gBAAgBwD,WAC3BT,EACE9E,EAAEqF,QAAUvX,SAASwX,KAAKE,UAAY1X,SAASiU,gBAAgByD,WAI/DlzB,EAAOmzB,aACT,GACEV,GAAUzyB,EAAOozB,WACjBV,GAAU1yB,EAAOqzB,UACjBrzB,EAASA,EAAOmzB,mBACTnzB,GAIX,OAASwB,EAAG+wB,EAASE,EAAQhxB,EAAG+wB,EAASE,mFCpK3C,IAAIY,EAAM,EAQVp1B,EAAA8M,IAAA,WACE,QAASsoB,GAGX,IAAIC,EAAO,EAQXr1B,EAAAs1B,SAAA,WACE,QAASD,EAAO,yFCrBlB,MAAAE,EAAA90B,EAAA,UAGA+0B,EAUEjzB,4BAA4BkzB,GAC1BD,EAAqBE,UAAYD,EACjCD,EAAqBG,iBAOvBpzB,+BAA+BqzB,GAC7B,MAAM5tB,EAASwtB,EAAqBG,cAAcxhB,MAAM,GAGxD,OAFIyhB,IAAOJ,EAAqBG,kBAEzB3tB,GAtBFwtB,EAAAE,WAAqB,EACrBF,EAAAG,iBACAH,EAAAK,qBAAuB,IAAIlwB,IAHpC3F,EAAAw1B,uBAiCAx1B,EAAAgN,WAAA,SAA+C+G,EAAWnI,GAKxD,IAAIkqB,EACFN,EAAqBK,qBAAqBp0B,IAAImK,IAAQ,EAEnDkqB,IACHA,EAAcP,EAAAzoB,MACd0oB,EAAqBK,qBAAqB3mB,IAAItD,EAAKkqB,IA8BrDz0B,OAAOC,eAAeyS,EAAQnI,GAC5BrK,cAAc,EACdC,YAAY,EACZC,IA1BF,WAIE,OAHI+zB,EAAqBE,WACvBF,EAAqBG,cAAcvlB,KAAK0lB,GAEnCzyB,KAAK6I,kBAAkB4pB,IAuB9B5mB,IAhBF,SAAyB6mB,GAEvB1yB,KAAK6I,kBAAkB4pB,GAAeC,EAEtC,MAAMtpB,EAAWpJ,KAAKoJ,SACtBA,GAAYA,EAASupB,gBAAgB3yB,KAAMyyB,sFChE/C,MAAAG,EAAAx1B,EAAA,IAQA,SAAAy1B,EAA2B9N,GAEzB,OAAKA,GAMHA,EAAQ2C,QAAQznB,EAChB8kB,EAAQ2C,QAAQxnB,EAChB6kB,EAAQ8C,QAAQ5nB,EAChB8kB,EAAQ8C,QAAQ3nB,IARR,EAAG,EAAG,EAAG,GAkBrBvD,EAAAm2B,2BAeE5zB,YAAYa,GAXZC,KAAA+yB,YAAsB,GAEd/yB,KAAAgzB,aAAe,IAAI1wB,IAInBtC,KAAAizB,cAAgB,IAAI3wB,IAM1BtC,KAAKkzB,aAAenzB,EAAQmzB,aAO9Bh0B,wBAEE,IAAIi0B,GAAa,EAEjB,IAAK,MAAOJ,EAAaK,KAAclS,MAAMmS,KAC3CrzB,KAAKgzB,aAAaM,WAElB,GAAIF,EAAU3uB,OAAS,EAAG,CAExB0uB,GAAa,EAGb,MAAMI,EAAWH,EAAUtiB,MAAM,GAEjCsiB,EAAU3uB,OAAS,QAGbzE,KAAKkzB,aAAaM,YAAYT,EAAaQ,GAEjD,MAAME,EAAgBzzB,KAAKizB,cAAc70B,IAAI20B,GAEzCU,GAGFF,EAAStuB,QAAQgK,IACf,MAAMykB,EAAUD,EAAcr1B,IAAI6Q,GAGlC,GAFAwkB,EAAcE,OAAO1kB,GAEjBykB,EACF,IAAK,MAAOlyB,EAAO0C,KAAawvB,EAG1BlyB,EAAM+B,cAAcmB,mBAAmBR,KAEzCA,EAAS+E,QAAS,EAElB/E,EAAS0vB,qBASvB,OAAOT,EAMTj0B,UACEc,KAAKkzB,aAAarvB,UAOpB3E,gBAAgBqJ,GACd,MAAMvC,EAAQhG,KAAKkzB,aAAa3V,gBAAgBhV,GAEhD,OAAIvC,EACKA,EAAM+e,QAGR,KAQT7lB,QACEsC,EACA0C,EACA+K,GAEA,MAAM8V,EAAsB9V,EAAS8V,QAGrC,GAAIA,EACF,OAAO8N,EAAkB9N,GAG3B,GAAI9V,aAAoB2jB,EAAAtlB,qBACjB2B,EAASzB,MAAM2X,KAClB,OAAO0N,EAAkB9N,GAM7B,IAAI0O,EAAgBzzB,KAAKizB,cAAc70B,IAAI4B,KAAK+yB,aAEhD,GAAIU,EAAe,CACjB,MAAMI,EAAmBJ,EAAcr1B,IAAI6Q,GAE3C,GAAI4kB,EAIF,OAHAA,EAAiB9mB,MAAMvL,EAAO0C,IAC9BA,EAAS+E,QAAS,EAEX4pB,EAAkB9N,QAG3B0O,EAAgB,IAAInxB,IACpBtC,KAAKizB,cAAcpnB,IAAI7L,KAAK+yB,YAAaU,GAM3CvvB,EAAS+E,QAAS,EAClB,IAAIsqB,EAAWvzB,KAAKgzB,aAAa50B,IAAI4B,KAAK+yB,aAW1C,OATKQ,IACHA,KACAvzB,KAAKgzB,aAAannB,IAAI7L,KAAK+yB,YAAaQ,IAG1CA,EAASxmB,KAAKkC,GACdwkB,EAAc5nB,IAAIoD,IAAYzN,EAAO0C,KAG9B2uB,EAAkB9N,GAM3B7lB,eAAewR,GACb1Q,KAAK+yB,YAAcriB,mFC7LvB,MAAA7G,EAAAzM,EAAA,GAMM02B,EAAwB,EACxBC,EAAmB,GA2BzBp3B,EAAAq3B,YAAA,SACE5wB,EACA6wB,GAEA,MAAMC,KAQN,OANAD,EAAYhvB,QAASkvB,IACf/wB,EAAKua,KAAKpM,GAAK4iB,aAAe5iB,IAChC2iB,EAASnnB,KAAKonB,KAIXD,SAyBTE,EA+BEl1B,YAAY6B,EAAmBqB,GAC7B,MAAM1B,EAAMK,EAAOL,IACnBV,KAAKq0B,GAAK,IAAIC,EAAQvzB,EAAOd,EAAGS,EAAIT,EAAGc,EAAOb,EAAGQ,EAAIR,EAAGkC,GACxDpC,KAAKu0B,GAAK,IAAID,EAAQ5zB,EAAIT,EAAGc,EAAOP,MAAOO,EAAOb,EAAGQ,EAAIR,EAAGkC,GAC5DpC,KAAKw0B,GAAK,IAAIF,EAAQvzB,EAAOd,EAAGS,EAAIT,EAAGS,EAAIR,EAAGa,EAAOR,OAAQ6B,GAC7DpC,KAAKy0B,GAAK,IAAIH,EAAQ5zB,EAAIT,EAAGc,EAAOP,MAAOE,EAAIR,EAAGa,EAAOR,OAAQ6B,GAxBnElD,UACEc,KAAKq0B,GAAGxwB,UACR7D,KAAKu0B,GAAG1wB,UACR7D,KAAKw0B,GAAG3wB,UACR7D,KAAKy0B,GAAG5wB,iBACD7D,KAAKq0B,UACLr0B,KAAKu0B,UACLv0B,KAAKw0B,UACLx0B,KAAKy0B,IApBhB93B,EAAAy3B,kBAgDAE,EAgCEp1B,YACEmB,EACAG,EACAF,EACAC,EACA6B,GAnCFpC,KAAA00B,YACA10B,KAAAoC,MAAgB,EAqCVgrB,UAAU3oB,QAAU,EACtBzE,KAAKe,OAAS,IAAI8I,EAAA/J,QAChBM,OAAQE,EAAMC,EACdJ,MAAOK,EAAQH,EACfJ,EAAGI,EACHH,EAAGI,IAMLN,KAAKe,OAAS,IAAI8I,EAAA/J,QAChBM,OAAQ,EACRD,MAAO,EACPF,EAAG,EACHC,EAAG,IAKPF,KAAKoC,MAAQA,GAAS,EAjDxBlD,iBACSc,KAAK00B,gBACL10B,KAAKe,OAERf,KAAK20B,QACP30B,KAAK20B,MAAM9wB,iBACJ7D,KAAK20B,OA2DhBz1B,IAAI01B,EAAU1yB,GAIZ,OAAI0yB,EAAMC,SAAS70B,KAAKe,QACff,KAAK80B,MAAMF,IAKlB50B,KAAK+0B,MAAMH,GACJ50B,KAAKuO,IAAIqmB,EAAO1yB,IAc3BhD,OAAOw1B,EAAeM,GAEpBA,EAAgBA,MAIhB,IAAIvQ,EAAOgC,OAAOwO,UACdvQ,EAAO+B,OAAOwO,UACdtQ,GAAQ8B,OAAOwO,UACfrQ,GAAQ6B,OAAOwO,UAGnBP,EAASzvB,QAAQ2vB,IACXA,EAAM30B,EAAIwkB,IACZA,EAAOmQ,EAAM30B,GAEX20B,EAAMp0B,MAAQmkB,IAChBA,EAAOiQ,EAAMp0B,OAEXo0B,EAAMr0B,OAASqkB,IACjBA,EAAOgQ,EAAMr0B,QAEXq0B,EAAM10B,EAAIwkB,IACZA,EAAOkQ,EAAM10B,KAKjBF,KAAK+0B,MACH,IAAIlrB,EAAA/J,QACFM,OAAQwkB,EAAOF,EACfvkB,MAAOwkB,EAAOF,EACdxkB,EAAGwkB,EACHvkB,EAAGwkB,KAKPgQ,EAASzvB,QAAQ,CAAC2vB,EAAO5nB,IAAUhN,KAAK80B,MAAMF,IAWhD11B,MAAM6B,GAEJ,GAAIA,EAAO8zB,SAAS70B,KAAKe,QACvB,OAIFf,KAAKe,OAAOm0B,YAAYn0B,GACxBf,KAAKe,OAAOd,GAAK,EACjBD,KAAKe,OAAOb,GAAK,EACjBF,KAAKe,OAAOZ,OAAS,EACrBH,KAAKe,OAAOX,QAAU,EAEtB,MAAM+0B,EAAcn1B,KAAKo1B,mBAGrBp1B,KAAK20B,QAEP30B,KAAK20B,MAAM9wB,iBACJ7D,KAAK20B,OAIdQ,EAAYlwB,QAAQ,CAAC2vB,EAAO5nB,IAAUhN,KAAK80B,MAAMF,IAcnD11B,MAAM01B,GAEJ,OAAI50B,KAAK20B,MACHC,EAAMC,SAAS70B,KAAK20B,MAAMN,GAAGtzB,QACxBf,KAAK20B,MAAMN,GAAGS,MAAMF,GAGzBA,EAAMC,SAAS70B,KAAK20B,MAAMJ,GAAGxzB,QACxBf,KAAK20B,MAAMJ,GAAGO,MAAMF,GAGzBA,EAAMC,SAAS70B,KAAK20B,MAAMH,GAAGzzB,QACxBf,KAAK20B,MAAMH,GAAGM,MAAMF,GAGzBA,EAAMC,SAAS70B,KAAK20B,MAAMF,GAAG1zB,QACxBf,KAAK20B,MAAMF,GAAGK,MAAMF,IAI7B50B,KAAK00B,SAAS3nB,KAAK6nB,IAEZ,GAIAA,EAAMC,SAAS70B,KAAKe,SAC3Bf,KAAK00B,SAAS3nB,KAAK6nB,GAGf50B,KAAK00B,SAASjwB,OAASqvB,GAAiB9zB,KAAKoC,MAAQ2xB,GACvD/zB,KAAKq1B,SAGA,IAMLC,MAAMV,EAAMz0B,MAAQy0B,EAAMx0B,OAASw0B,EAAM30B,EAAI20B,EAAM10B,GACrDiG,QAAQoK,MACN,2DACAqkB,GAEsB,IAAfA,EAAMn0B,MACf0F,QAAQoK,MACN,yDACAqkB,IAKG,GAUT11B,eAAeq2B,GAUb,OATAA,EAAOA,EAAKnW,OAAOpf,KAAK00B,UAEpB10B,KAAK20B,QACP30B,KAAK20B,MAAMN,GAAGe,eAAeG,GAC7Bv1B,KAAK20B,MAAMJ,GAAGa,eAAeG,GAC7Bv1B,KAAK20B,MAAMH,GAAGY,eAAeG,GAC7Bv1B,KAAK20B,MAAMF,GAAGW,eAAeG,IAGxBA,EAYTr2B,MAAM6B,EAA4By0B,GAEhC,OAAIz0B,aAAkB8I,EAAA/J,OAChBiB,EAAO00B,UAAUz1B,KAAKe,QACjBf,KAAK01B,YAAY30B,KAAYy0B,MAQpCx1B,KAAKe,OAAO40B,cAAc50B,GACrBf,KAAK41B,WAAW70B,KAAYy0B,MAiBvCt2B,YAAYoN,EAAcipB,EAAWC,GA6BnC,OA5BAx1B,KAAK00B,SAASzvB,QAAQ,CAACtH,EAAGqP,KACpBrP,EAAE83B,UAAUnpB,IACdipB,EAAKxoB,KAAKpP,KAIV63B,GACFA,EAAMx1B,MAGJA,KAAK20B,QACHroB,EAAEmpB,UAAUz1B,KAAK20B,MAAMN,GAAGtzB,SAC5Bf,KAAK20B,MAAMN,GAAGqB,YAAYppB,EAAGipB,EAAMC,GAGjClpB,EAAEmpB,UAAUz1B,KAAK20B,MAAMJ,GAAGxzB,SAC5Bf,KAAK20B,MAAMJ,GAAGmB,YAAYppB,EAAGipB,EAAMC,GAGjClpB,EAAEmpB,UAAUz1B,KAAK20B,MAAMH,GAAGzzB,SAC5Bf,KAAK20B,MAAMH,GAAGkB,YAAYppB,EAAGipB,EAAMC,GAGjClpB,EAAEmpB,UAAUz1B,KAAK20B,MAAMF,GAAG1zB,SAC5Bf,KAAK20B,MAAMF,GAAGiB,YAAYppB,EAAGipB,EAAMC,IAIhCD,EAaTr2B,WAAWL,EAAQ02B,EAAWC,GA6B5B,OA5BAx1B,KAAK00B,SAASzvB,QAAQ,CAACtH,EAAGqP,KACpBrP,EAAEg4B,cAAc92B,IAClB02B,EAAKxoB,KAAKpP,KAIV63B,GACFA,EAAMx1B,MAGJA,KAAK20B,QACH30B,KAAK20B,MAAMN,GAAGtzB,OAAO40B,cAAc92B,IACrCmB,KAAK20B,MAAMN,GAAGuB,WAAW/2B,EAAG02B,EAAMC,GAGhCx1B,KAAK20B,MAAMJ,GAAGxzB,OAAO40B,cAAc92B,IACrCmB,KAAK20B,MAAMJ,GAAGqB,WAAW/2B,EAAG02B,EAAMC,GAGhCx1B,KAAK20B,MAAMH,GAAGzzB,OAAO40B,cAAc92B,IACrCmB,KAAK20B,MAAMH,GAAGoB,WAAW/2B,EAAG02B,EAAMC,GAGhCx1B,KAAK20B,MAAMF,GAAG1zB,OAAO40B,cAAc92B,IACrCmB,KAAK20B,MAAMF,GAAGmB,WAAW/2B,EAAG02B,EAAMC,IAI/BD,EAMTr2B,QAEE,MAAMi2B,EAAcn1B,KAAKo1B,mBAMzB,IAJAp1B,KAAK20B,MAAQ,IAAIP,EAAap0B,KAAKe,OAAQf,KAAKoC,MAAQ,GAExDpC,KAAK00B,YAEES,EAAY1wB,OAAS,GAAG,CAC7B,MAAMmwB,EAAQO,EAAY9E,MACtBuE,GAAO50B,KAAK80B,MAAMF,IAS1B11B,MAAM22B,GACJ,MAAMC,EAAW3tB,QAAQ0tB,EAAG71B,OAExBA,KAAK20B,QAAUmB,IACjB91B,KAAK20B,MAAMN,GAAGmB,MAAMK,GACpB71B,KAAK20B,MAAMJ,GAAGiB,MAAMK,GACpB71B,KAAK20B,MAAMH,GAAGgB,MAAMK,GACpB71B,KAAK20B,MAAMF,GAAGe,MAAMK,KArZ1Bl5B,EAAA23B,OA0ZA33B,EAAAob,uBAAmDuc,mFCjhBnD,MAAAyB,EAAA34B,EAAA,IAqBA,SAAAkB,EAAe6C,EAAsB60B,EAAaC,GAChD,MAAMC,KAAW/0B,IACXg1B,EAAMC,WAAWF,GAEvB,OAAIZ,MAAMa,GACD,EAILD,EAAMjpB,QAAQ,MAAQ,EACjBkpB,EAAM,IAAQH,EAGhBG,EAAMF,EASft5B,EAAA2O,0BAAA,SACE1K,EACAy1B,EACAJ,GAEwB,IAApBI,EAAUl2B,OAAoC,IAArBk2B,EAAUj2B,QACrC+F,QAAQC,KACN,uDACA,gFACA,iEACA,QACAxF,EACA,aACAy1B,EAAU/M,YAId,MAAMvoB,EAASg1B,EAAAhT,WAAWuT,cAC1B,IAAIn2B,EACAC,EAGJ,GAAIQ,EAAKT,MACPY,EAAOZ,MAAQ7B,EAAMsC,EAAKT,MAAOk2B,EAAUl2B,MAAO81B,QAEhCxvB,IAAd7F,EAAKP,KACPU,EAAOd,EAAI3B,EAAMsC,EAAKP,KAAMg2B,EAAUl2B,MAAO81B,QACrBxvB,IAAf7F,EAAKJ,QACdO,EAAOd,EACLo2B,EAAUl2B,MACV7B,EAAMsC,EAAKJ,MAAO61B,EAAUl2B,MAAO81B,GACnCl1B,EAAOZ,WAEN,CACL,MAAME,EAAO/B,EAAMsC,EAAKP,MAAQ,EAAGg2B,EAAUl2B,MAAO81B,IAGpD91B,EADEk2B,EAAUl2B,MAAQ7B,EAAMsC,EAAKJ,OAAS,EAAG61B,EAAUl2B,MAAO81B,GAC5C51B,GAEJ,GACV8F,QAAQC,KACN,uDACA,gFACA,0EACA,QACAxF,EACA,aACAy1B,EAAU/M,YAIdvoB,EAAOd,EAAII,EACXU,EAAOZ,MAAQA,EAIjB,GAAIS,EAAKR,OACPW,EAAOX,OAAS9B,EAAMsC,EAAKR,OAAQi2B,EAAUj2B,OAAQ61B,QAEpCxvB,IAAb7F,EAAKN,IACPS,EAAOb,EAAI5B,EAAMsC,EAAKN,IAAK+1B,EAAUj2B,OAAQ61B,QACpBxvB,IAAhB7F,EAAKL,SACdQ,EAAOb,EACLm2B,EAAUj2B,OACV9B,EAAMsC,EAAKL,OAAQ81B,EAAUj2B,OAAQ61B,GACrCl1B,EAAOX,YAEN,CACL,MAAME,EAAMhC,EAAMsC,EAAKN,KAAO,EAAG+1B,EAAUj2B,OAAQ61B,SAKpCxvB,KAFfrG,EADEi2B,EAAUj2B,OAAS9B,EAAMsC,EAAKL,QAAU,EAAG81B,EAAUj2B,OAAQ61B,GAC7C31B,IAEUF,EAAS,IACnC+F,QAAQC,KACN,uDACA,gFACA,0EACA,QACAxF,EACA,aACAy1B,EAAU/M,YAIdvoB,EAAOb,EAAII,EACXS,EAAOX,OAASA,EAclB,OAVmB,IAAjBW,EAAOZ,OACW,IAAlBY,EAAOX,QACPk1B,MAAMv0B,EAAOd,EAAIc,EAAOb,EAAIa,EAAOZ,MAAQY,EAAOX,WAElDW,EAAOd,EAAI,EACXc,EAAOb,EAAI,EACXa,EAAOZ,MAAQk2B,EAAUl2B,MACzBY,EAAOX,OAASi2B,EAAUj2B,QAGrBW,kFC9IT,MAAAY,EAAAvE,EAAA,GACAm5B,EAAAn5B,EAAA,IASA,SAAAyZ,EAAsB1V,GACpB,OAAOgH,QAAQhH,GAWjBxE,EAAA65B,+BAAsCD,EAAAjgB,aAWpCpX,YAAYkf,GACVjc,QAVFnC,KAAAy2B,OAAS,IAAIn0B,IAWXtC,KAAKoe,QAAUA,EACfpe,KAAK02B,WAAatY,EAAQsY,WAG5Bx3B,wBAAwBitB,GACtB,MAAMwK,EAAoB,IAAIr0B,IAG9B,IAAK,MAAMs0B,KAAa52B,KAAK02B,WAC3BC,EAAkB9qB,IAAI+qB,EAAUpsB,KAAKlC,GAAIsuB,GAI3C,OAAOzK,EAAEhR,gBACNlD,IAAI4e,GAAYF,EAAkBv4B,IAAIy4B,EAASrsB,KAAKlC,KACpD6P,OAAOtB,GAGZ3X,iBAAiBitB,GAEf,MAAM2K,EAAoB,IAAIx0B,IAE9B,IAAK,MAAMu0B,KAAY1K,EAAEhR,gBACvB2b,EAAkBjrB,IAAIgrB,EAASrsB,KAAKlC,GAAIuuB,EAASvf,OAGnD,OAAOwf,EAGT53B,YAAYitB,EAAsBnS,GAChCha,KAAK+2B,kBAAkB5K,EAAG,CAAC3qB,EAAOgJ,EAAM8M,IACtC9V,EAAM+E,aAAaywB,iBAAiBxsB,EAAM8M,EAAO0C,IAIrD9a,WAAWitB,EAAsBhS,GAC/Bna,KAAK+2B,kBAAkB5K,EAAG,CAAC3qB,EAAOgJ,EAAM8M,IACtC9V,EAAM+E,aAAa0wB,gBAAgBzsB,EAAM8M,IAI7CpY,kBACEitB,EACA+K,GAGA,MAAMR,EAAa12B,KAAKm3B,wBAAwBhL,GAE1C2K,EAAoB92B,KAAKo3B,iBAAiBjL,GAGhD,IAAK,MAAMyK,KAAaF,EACtB12B,KAAKq3B,gBAAgBT,EAAWE,EAAmBI,GAGrD,OAAOR,EAGTx3B,gBAAgBitB,EAAsBnS,GACpCha,KAAK+2B,kBAAkB5K,EAAG,CAAC3qB,EAAOgJ,EAAM8M,IACtC9V,EAAM+E,aAAawT,gBAAgBvP,EAAM8M,EAAO0C,IAIpD9a,cAAcitB,EAAsBnS,GAClCha,KAAK+2B,kBAAkB5K,EAAG,CAAC3qB,EAAOgJ,EAAM8M,IACtC9V,EAAM+E,aAAakU,cAAcjQ,EAAM8M,EAAO0C,IAIlD9a,gBAAgBitB,IAIhBjtB,eAAeitB,GAEb,MAAM2K,EAAoB92B,KAAKo3B,iBAAiBjL,GAC1ClhB,EAASkhB,EAAElhB,OAAOqM,MAGxBtX,KAAKy2B,OAAOxxB,QAAQ,CAACqyB,EAAMV,KAEzBE,EAAkBjrB,IAChB+qB,EAAUpsB,KAAKlC,GACfsuB,EAAUpsB,KAAKC,aAAaQ,IAG9BjL,KAAKq3B,gBAAgBT,EAAWE,EAAmB,CAACt1B,EAAOgJ,EAAM8M,IAC/D9V,EAAM+E,aAAa8S,eAAe7O,EAAM8M,MAK5CtX,KAAKy2B,OAAOlE,QAGdrzB,gBAAgBitB,GACVnsB,KAAKoe,SACPpe,KAAKoe,QAAQmZ,sBACVpL,EAAElhB,OAAOqM,MAAMrX,EAAGksB,EAAElhB,OAAOqM,MAAMpX,GAClCisB,EAAEhR,gBAAgBlD,IAAIC,GAAKA,EAAE1N,OAKjC,MAAMgtB,EAAgBx3B,KAAK+2B,kBAAkB5K,EAAG,CAAC3qB,EAAOgJ,EAAM8M,IAC5D9V,EAAM+E,aAAagT,gBAAgB/O,EAAM8M,IAGrCwf,EAAoB92B,KAAKo3B,iBAAiBjL,GAE1ClhB,EAASkhB,EAAElhB,OAAOqM,MAGlBmgB,EAAoB,IAAIn1B,IAC9Bk1B,EAAcvyB,QAAQiT,GAAKuf,EAAkB5rB,IAAIqM,GAAG,IAGpDuf,EAAkBxyB,QAAQ,CAACqyB,EAAMV,KAC1B52B,KAAKy2B,OAAOr4B,IAAIw4B,IACnB52B,KAAKq3B,gBACHT,EACAE,EACA,CAACt1B,EAAOgJ,EAAM8M,IACZ9V,EAAM+E,aAAaiU,gBAAgBhQ,EAAM8M,MAMjDtX,KAAKy2B,OAAOxxB,QAAQ,CAACqyB,EAAMV,KACpBa,EAAkBr5B,IAAIw4B,KAEzBE,EAAkBjrB,IAChB+qB,EAAUpsB,KAAKlC,GACfsuB,EAAUpsB,KAAKC,aAAaQ,IAG9BjL,KAAKq3B,gBACHT,EACAE,EACA,CAACt1B,EAAOgJ,EAAM8M,IAAU9V,EAAM+E,aAAa8S,eAAe7O,EAAM8M,OAMtEtX,KAAKy2B,OAASgB,EAGhBv4B,gBACE03B,EACAE,EACAI,GAEA,MAAM1sB,EAAOosB,EAAUpsB,KACjB8M,EAAQwf,EAAkB14B,IAAIoM,EAAKlC,IAEzC,GAAIgP,EACF,IAAK,MAAM9V,KAASo1B,EAAUn1B,MAAMiL,OAC9BlL,EAAMkB,SAAWlB,EAAMkB,QAAQU,OAASzB,EAAAhC,SAASgD,MACnDu0B,EAAS11B,EAAOgJ,EAAM8M,GAM9BpY,YAAYitB,qFCpMdxvB,EAAA+6B,6BAAA,SACEpgB,EACAtT,EACA7D,EACAC,GAEA,MAAMu3B,GACJC,aACAC,UAAW7zB,EACX8zB,WAAY13B,EACZ23B,UAAW53B,EACXmX,QACA0gB,aAAc,GAGVC,EAAe,IAAI31B,IACzB,IAAI41B,EAAa,EACjB,MAAMnJ,KACAiC,EAAiB7wB,EAAQ,EACzB8wB,EAAiB7wB,EAAS,EAEhC,IAAI43B,EAAe,EACfG,EAAW1R,OAAOC,iBAEtB,IAAK,IAAIppB,EAAI,EAAGA,EAAI8C,IAAU9C,EAAG,CAC/B,MAAM86B,KACNrJ,EAAOhiB,KAAKqrB,GAEZ,IAAK,IAAIrpB,EAAI,EAAGA,EAAI5O,IAAS4O,EAAG,CAC9B,MAAM1Q,EAAI2F,EAAKk0B,GACThR,EAAIljB,EAAKk0B,EAAa,GACtB5rB,EAAItI,EAAKk0B,EAAa,GAC5BA,GAAc,EAEd,MAAMnY,EAAS1hB,GAAK,GAAO6oB,GAAK,EAAK5a,EAKrC,GAJA2rB,EAAapsB,IAAIkU,GAAO,GACxBqY,EAAIrrB,KAAKgT,GAGK,IAAVA,EAAoB,CACtB,MAAMsY,EAAKtpB,EAAIiiB,EACTsH,EAAKh7B,EAAI2zB,EACTsH,EAAeF,EAAKA,EAAKC,EAAKA,EAEhCC,EAAeJ,IACjBA,EAAWI,EACXP,EAAejY,KAWvB,OAJA4X,EAAYC,UAAY1W,MAAMmS,KAAK4E,EAAajoB,QAEhD2nB,EAAYK,aAAeA,EAEpBL,kBChET/6B,EAAAD,QAAA,kKCAAC,EAAAD,QAAA,wGCAAC,EAAAD,QAAA,mYCAAC,EAAAD,QAAA,+NCAAC,EAAAD,QAAA,wgBCAAC,EAAAD,QAAA,gnBCAAC,EAAAD,QAAA,ugBCAAC,EAAAD,QAAA,kOCAAC,EAAAD,QAAA,+MCAAC,EAAAD,QAAA,iPCAA,MAAA+E,EAAAtE,EAAA,GAEAqe,EAAAre,EAAA,GACAuE,EAAAvE,EAAA,GAMAoe,EAAApe,EAAA,IACAo7B,EAAAp7B,EAAA,IACAq7B,EAAAr7B,EAAA,IACAs7B,EAAAt7B,EAAA,IAEMu7B,EAAiCv7B,EAAQ,IAGzCw7B,GAAqB,IAAK,IAAK,IAAK,KAGpCC,GACJC,EAAG,QACHC,EAAG,OACHC,EAAG,OACHC,EAAG,OACHC,EAAG,OACHC,GAAI,OAEJC,GAAI,QAQN,SAAAC,EACEhtB,EACAC,GAEA,OAAID,EAAE7C,SAAW8C,EAAE9C,OAAe,GAC1B,EAiJV,SAAA8vB,EAAkDnyB,GAChD,IAAKA,EAAUqC,OACb,OAGF,IAAIY,EAAM,GAEV,OAAQjD,EAAUqC,OAAOsM,MAEvB,KAAK0F,EAAArH,oBAAoBqK,WACvBpU,eACEjD,EAAUtJ,+BAEVsJ,EAAUtJ,uBACOsJ,EAAUtJ,mBAC7B,MAIF,KAAK2d,EAAArH,oBAAoBsK,OACvBrU,eACEjD,EAAUtJ,2CAEVsJ,EAAUtJ,uBACOsJ,EAAUtJ,+BAC7B,MAIF,KAAK2d,EAAArH,oBAAoBuK,QAEvBtU,eAAmBjD,EAAUtJ,qCAC3BsJ,EAAUtJ,uBACOsJ,EAAUtJ,mBAE7BuM,eAAmBjD,EAAUtJ,+BAC3BsJ,EAAUtJ,0CAGZuM,eAAmBjD,EAAUtJ,sBAC3BsJ,EAAUtJ,8BAEZ,MAIF,KAAK2d,EAAArH,oBAAoBxR,KACzB,QACEyH,eAAmBjD,EAAUtJ,qCAC3BsJ,EAAUtJ,uBACOsJ,EAAUtJ,8BAKjC,OAAOuM,EAGT,SAAAmvB,EAA2BzqB,EAAe/I,GACxC,OAAO6yB,EAAkB9nB,MAAMhC,EAAOA,EAAQ/I,GAAMyzB,KAAK,IAzM3D78B,EAAA88B,4BAAA,SAA4CC,GAC1C,OACEC,yBAA0BjB,EAAAtP,kCAAkCsQ,MAC5D10B,mBAEInH,KAAM66B,EAAAtP,+BACNhmB,KAAM,MACN9E,MAAO,IAAI4iB,MAAMwY,GACdE,KAAK,GACL3hB,IAAI,IAAM,IAAIvW,EAAMm4B,QAAQ,EAAG,EAAG,EAAG,QAMhDl9B,EAAAm9B,2BAAA,SAA2C5W,GACzC,MAAM6W,KACNA,EAAgBtB,EAAAzV,aAAaK,uBAAyBH,IAEtD,MAAM1T,GACJ3R,KAAM,6BACN8G,QAAS8zB,EAAAzV,aAAaK,qBASxB,OANgBmV,EAAAlpB,eACdqpB,EACAoB,EACAvqB,GAGaD,QAGjB5S,EAAAq9B,+BAAA,SACEx4B,EACAiE,EACAyd,GAEA,IAAI9Y,EAAM,GAEV,MAAM6vB,EAAoBx0B,EAAmBqL,MAAM,GAAG3D,KAAKksB,GAQ3D,OALEjvB,EADE5I,EAAMiC,aAAegY,EAAA5U,gBAAgBU,mBAS3C,SACE0yB,GAEA,IAAI7vB,EAAM,GAiBV,OAfA6vB,EAAkBh1B,QAAQkC,IAGpBA,EAAUqC,QAAUrC,EAAUpB,OAEhCqE,GAAOkvB,EAAqBnyB,GAE5BiD,QAAYyuB,EAAW1xB,EAAUpB,SAASoB,EAAUtJ,UAClDsJ,EAAUqC,OAAOuM,eACd5O,EAAUtJ,gBAAgBsJ,EAAUtJ,cACvCsJ,EAAUtJ,mBAKTuM,EA5BC8vB,CAA+BD,GA+BzC,SACEA,EACA/W,GAEA,IAAI9Y,EAAM,qCAGV,IAAK,IAAI9M,EAAI,EAAGA,EAAI4lB,IAAqB5lB,EACvC8M,kBAAsB9M,gBAAgBA,uBAyDxC,OAtDA28B,EAAkBh1B,QAAQkC,IACxB,MAAMtB,EAAQsB,EAAUtB,MAIpBsB,EAAUqC,QAAUrC,EAAUpB,MAC5BoB,EAAUpB,OAASpE,EAAA5C,sBAAsBO,KAC3C8K,QAAYyuB,EAAW1xB,EAAUpB,UAC/BoB,EAAUtJ,mBACGgI,OAEfuE,QAAYyuB,EAAW1xB,EAAUpB,MAAQ,OACvCoB,EAAUtJ,mBACGgI,KAAS0zB,EACtBpyB,EAAUrB,YAAc,EACxBqB,EAAUpB,MAAQ,QAKtBqE,GAAOkvB,EAAqBnyB,GAE5BiD,QAAYyuB,EAAW1xB,EAAUpB,SAASoB,EAAUtJ,UAClDsJ,EAAUqC,OAAOuM,eACd5O,EAAUtJ,gBAAgBsJ,EAAUtJ,cACvCsJ,EAAUtJ,iBAKLsJ,EAAUpB,OAASpE,EAAA5C,sBAAsBO,KAChD8K,QAAYyuB,EAAW1xB,EAAUpB,SAC/BoB,EAAUtJ,eACDgI,OAIJsB,EAAUnB,MACjBoE,QAAYyuB,EAAWl3B,EAAA5C,sBAAsBQ,UAC3C4H,EAAUtJ,eACDgI,OAKXuE,QAAYyuB,EAAW1xB,EAAUpB,MAAQ,MACvCoB,EAAUtJ,eACDgI,KAAS0zB,EAClBpyB,EAAUrB,YAAc,EACxBqB,EAAUpB,MAAQ,UAKjBqE,EA9FC+vB,CAA+BF,EAAmB/W,mFCnF5D,MAAAzH,EAAAre,EAAA,GACAuE,EAAAvE,EAAA,GAWAo7B,EAAAp7B,EAAA,IAIAg9B,EAAAh9B,EAAA,IACAq7B,EAAAr7B,EAAA,IACAi9B,EAAAj9B,EAAA,IACAk9B,EAAAl9B,EAAA,IAOMm9B,EAA0Bn9B,EAAQ,IAClCo9B,EAA4Bp9B,EAAQ,IACpCq9B,EAA6Br9B,EAAQ,IACrCwmB,EAAcxmB,EAAQ,IACtBumB,EAAoBvmB,EAAQ,IAkB5Bs9B,EAAoB,EAGpB7B,GACJC,EAAG,QACHC,EAAG,OACHC,EAAG,OACHC,EAAG,OACHC,EAAG,OACHC,GAAI,OACJC,GAAI,aAsPN,SAAAuB,EACE71B,EACA81B,GAEA,IAAIxwB,EAAM,GACV,MAAM+S,EAAYyd,GAAiBj5B,EAAAjC,sBAAsB4d,OAgBzD,OAdAxY,EAASG,QAAQnB,IACfA,EAAQmC,gBACNnC,EAAQmC,iBAAmBtE,EAAAjC,sBAAsB4d,OAGjDxZ,EAAQmC,kBAAoBkX,GAC5BrZ,EAAQmC,kBAAoBtE,EAAAjC,sBAAsBkD,MAElDwH,cAAkBtG,EAAQoC,WAAa,KACrCpC,EAAQoC,UAAY,IAAM,KACzB2yB,EAAW/0B,EAAQiC,SAASjC,EAAQjG,aAIpCuM,EA/OTzN,EAAAk+B,gBAAA,SACEr5B,EACAs5B,EACAp1B,EACAD,EACAX,GAEA,MAAMi2B,EA6FR,SACEv5B,EACAkE,EACAD,EACAX,GAEA,MAAMi1B,KAEN,IAAIiB,EAEAx5B,EAAMiC,aAAegY,EAAA5U,gBAAgBU,oBACvCyzB,GACEh2B,oBACAi2B,SACE/X,kBAAmB,EACnB7B,sBAAuB,IAI3B0Y,EAAgBxW,sBAAwB,GACxCwW,EAAgBrW,4BAA8B,IAE9CsX,EA6QJ,SAIEx5B,EACAu4B,EACAt0B,EACAX,GAGA,MAEMo2B,EAFcd,EAAApzB,UAAU6kB,oBA1ahC,SAAqC/mB,GACnC,IAAIq2B,EAAQ,EAEZ,IAAK,IAAI79B,EAAI,EAAGkH,EAAMM,EAASL,OAAQnH,EAAIkH,IAAOlH,EAChD69B,GAASt6B,KAAKuG,KAAKtC,EAASxH,GAAGyI,KAAO,GAGxC,OAAOo1B,EAsaSC,CAA4Bt2B,GAItCu2B,EAA2B51B,EAC9BqL,MAAM,GACN3D,KAAK,CAACd,EAAGC,IAAMD,EAAExG,MAAQyG,EAAEzG,OAE9B,IAAIy1B,EAAeD,EAAyB,GAAGx1B,MAC3C01B,EAAiB,EAGrB,MAAMC,EAAc,IAAIl5B,IAClBm5B,EAAmB,IAAIn5B,IAE7B+4B,EAAyBp2B,QAAQkC,IAC3BA,EAAUtB,QAAUy1B,IACtBA,EAAen0B,EAAUtB,MACzB01B,KAGF,MAAMG,EAAgBv0B,EAAUpB,MAAQ,EAClC41B,EAAYH,EAAYp9B,IAAIm9B,IAAmB,EAC/CK,EAAYD,EAAYD,EAG9B,GAAIE,EAAYlB,EAQd,YAPAv0B,QAAQoK,MACN,iHACmB/O,EAAM8G,gCACEoyB,oBACXvzB,EAAUtJ,yBAAyBsJ,EAAUtB,oDACjB+1B,KAMhDJ,EAAY3vB,IAAI0vB,EAAgBK,GAEhCz0B,EAAUrB,WAAa61B,EAIvB,MAAME,EACJJ,EAAiBr9B,IAAIm9B,IAAmB,IAAIj5B,IAE9C,GAAI6E,EAAUrB,WAAa41B,EAAgBhB,EACzCv0B,QAAQoK,MACN,sHACyBmqB,oBACTvzB,EAAUtJ,qBACxBsJ,EAAUrB,oBACFqB,EAAUpB,4BAA4BoB,EAAUrB,YACvDqB,EAAUpB,MAAQ,UAPzB,CAaA,IACE,IAAIzI,EAAI6J,EAAUrB,WAClBxI,EAAI6J,EAAUrB,WAAa41B,IACzBp+B,EAEF,GAAIu+B,EAAYz9B,IAAId,GAUlB,YATA6I,QAAQoK,MACN,mHACyBmqB,oBACTvzB,EAAUtJ,qBACxBsJ,EAAUrB,oBACFqB,EAAUpB,4BAA4BoB,EAAUrB,YACvDqB,EAAUpB,MAAQ,MAQ3BoB,EAAUtB,MAAQ01B,KAGpB,MAAMrY,EAAoBqY,EAAiB,EAErCla,EAAwBxgB,KAAKkjB,MACjCmX,EAA4BhY,GAW9B,OACEle,iBAYJ,SACE+0B,EACA1Y,EACA6B,EACAzd,GAIA,MAAMq2B,KAEN,IAAK,IAAIx+B,EAAI,EAAGA,EAAI+jB,IAAyB/jB,EAC3Cw+B,EAAU/uB,KAAKzP,GAKjB,MAAMy+B,EAsBR,SACEb,EACA3e,GAEA,IAAInS,EAAM,GACV,MAAM4xB,EAAsB,IAAI15B,IAChC,IAAIoa,EAAW,EAGfH,EAAWtX,QAAQkC,IACjB,MAAM80B,EACJD,EAAoB59B,IAAI+I,EAAUtB,QAAU,IAAIvD,IAE9C6E,EAAUjB,WACZ+1B,EAAWpwB,IAAI1E,EAAUjB,WAAW,GAItCwW,EAAW7b,KAAK6S,IAAIgJ,EAAUvV,EAAUtB,SAI1C,MAAMq2B,EAAkB,IAAI55B,IAE5B05B,EAAoB/2B,QAAQ,CAACk3B,EAAet2B,KAC1C,MAAMu2B,EAAgBlb,MAAMmS,KAAK8I,EAAcnsB,QAC/CksB,EAAgBrwB,IAAIhG,KAAUu2B,EAAc5C,KAAK,WASnD,MAAM6C,EAAc/B,EAAAb,4BAA4ByB,GAKhD,OAJA9wB,GAAOiyB,EAAY1C,UAKjBA,SAHFvvB,GAAO,KAILpF,iBAAkBq3B,EAAYr3B,kBAhETs3B,CACrBjb,EAAwB6B,EACxBzd,GAYF,OATAs0B,EAAgBtB,EAAAzV,aAAaU,6BAC3BqY,EAAepC,SACjBI,EAAgBtB,EAAAzV,aAAaK,uBAAyBH,IAGtD6W,EACEtB,EAAAzV,aAAaO,uBACX+W,EAAAR,2BAA2B5W,IAG7Ble,iBAAkB+2B,EAAe/2B,kBAnDTu3B,CACxBxC,EACA1Y,EACA6B,EACAmY,GAIoCr2B,iBACpCi2B,SACE/X,oBACA7B,0BA/Xemb,CACfh7B,EACAu4B,EACAt0B,EACAX,GAIJ,MAAM23B,GACJv9B,CAACu5B,EAAAzV,aAAavC,eAAgBka,EAC5B71B,EACAnD,EAAAjC,sBAAsB4d,QAExBpe,CAACu5B,EAAAzV,aAAatd,kBAoOlB,SACElE,EACAkE,EACAD,GAEA,IAAI2E,EAAM,GAiBV,OAfA1E,EAAiBT,QAAQkC,IACvBiD,gBAAoByuB,EAAW1xB,EAAUpB,SAASoB,EAAUjB,WAC1D,KAAMiB,EAAUjB,UAAa,IAAQ,MAAMiB,EAAUtJ,YAGrD2D,EAAMiC,aAAegY,EAAA5U,gBAAgBU,qBACvC6C,GAAO,6BACP3E,EAAmBR,QAAQkC,IACzBiD,gBACEyuB,EAAW1xB,EAAUpB,MAAQ,MAC3BoB,EAAUjB,WAAa,KAAMiB,EAAUjB,UAAa,IACtD,MAAMm0B,EAAA9Q,4BAA4BpiB,WAIjCiD,EA1P4BsyB,CAC/Bl7B,EACAkE,EACAD,GAEFvG,CAACu5B,EAAAzV,aAAaI,eA4BlB,SACE3d,GAEA,MAAM8N,EAAU,IAAIjR,IACpB,IAAI8H,EAAM,GAGV3E,EAAmBR,QAAQkC,IACzB,GAAIA,EAAUqC,QAAUrC,EAAUpB,KAAM,CACtC,IAAI42B,EAAcppB,EAAQnV,IAAI+I,EAAUqC,OAAOuM,YAE1C4mB,IACHA,EAAc,IAAIr6B,IAClBiR,EAAQ1H,IAAI1E,EAAUqC,OAAOuM,WAAY4mB,IAG3CA,EAAY9wB,IAAI1E,EAAUpB,KAAMoB,EAAUqC,OAAOkM,QAIrD,MAAMlG,GACJ3R,KAAM,2BACN8G,QAAS8zB,EAAAzV,aAAaG,eAsBxB,OAjBA5P,EAAQtO,QACN,CAAC03B,EAAiD5mB,KAChD4mB,EAAY13B,QAAQ,CAAC2Q,EAAQ7P,KAC3B,MAAM62B,EAAW/D,EAAW9yB,GAEtBg0B,GACJ76B,CAACu5B,EAAAzV,aAAaG,iBAAkByZ,KAAY7mB,KAAc6mB,YAAmBA,kBAC7E19B,CAACu5B,EAAAzV,aAAaa,MAAO+Y,KAGjB1sB,EAAUsoB,EAAAlpB,eAAesG,EAAQmkB,EAAiBvqB,GAExDpF,MAAU8F,EAAQX,eAKjBnF,EAxEyByyB,CAAsBp3B,IAGtDzH,OAAOwE,OAAOu3B,EAAiB0C,GAE/B,MAAMjtB,GACJ3R,KAAM,eACN8G,QACE8zB,EAAAzV,aAAaO,sBACbkV,EAAAzV,aAAaU,4BACb+U,EAAAzV,aAAavC,cACbgY,EAAAzV,aAAatd,iBACb+yB,EAAAzV,aAAaI,gBAMjB,OACEuW,SAHcnB,EAAAlpB,eAAesU,EAAamW,EAAiBvqB,GAGzCD,OAClBvK,iBAAkBg2B,EAAeh2B,iBACjCi2B,QAASD,EAAeC,SA1JC6B,CACzBt7B,EACAkE,EACAD,EACAX,GAGF,IAAIi1B,GACF76B,CAACu5B,EAAAzV,aAAaW,mBA6EA6U,EAAAlpB,eAAeqU,MAJ7B9lB,KAAM,qBACN8G,YAKa4K,OA9EbrQ,CAACu5B,EAAAzV,aAAatgB,SAkQlB,SAA+BlB,GAC7B,OAAIA,EAAMkB,QAAQU,OAASzB,EAAAhC,SAAS0D,OAC3BjG,EAAQ,IAGV,GAvQmB2/B,CAAsBv7B,GAC9CtC,CAACu5B,EAAAzV,aAAaY,aAAcmX,EAAmBpB,SAC/Cz6B,CAACu5B,EAAAzV,aAAazT,QAoOlB,SACE/N,EACAs5B,EACAr1B,EACA4b,EACA6B,GAEA,MAAM6W,GACJ76B,CAACu5B,EAAAzV,aAAazG,YAwDlB,SAIE/a,EACAiE,EACAyd,GAEA,MAAM6W,KACNA,EAAgBtB,EAAAzV,aAAaE,sBAAwBA,IACrD6W,EACEtB,EAAAzV,aAAaQ,uBACX8W,EAAAN,+BACFx4B,EACAiE,EACAyd,GAEF6W,EAAgBtB,EAAAzV,aAAatgB,SAyB/B,SAAkClB,GAChC,OAAIA,EAAMkB,QAAQU,OAASzB,EAAAhC,SAAS0D,OAC3BjG,EAAQ,IAGV,GA9BiC4/B,CAAyBx7B,GAEjE,MAAMgO,GACJ3R,KAAM,+BACN8G,QAAS8zB,EAAAzV,aAAaQ,wBAexB,OAVIhiB,EAAMkB,QAAQU,OAASzB,EAAAhC,SAAS0D,QAClCmM,EAAS7K,OAAOoI,KAAK0rB,EAAAzV,aAAatgB,SAGpB81B,EAAAlpB,eACdmrB,EACAV,EACAvqB,GAGaD,OA5Fc0tB,CACzBz7B,EACAiE,EACAyd,IAIE1T,GACJ3R,KAAM,sBACN8G,QAAS8zB,EAAAzV,aAAazG,aAKxB,OAFgBic,EAAAlpB,eAAewrB,EAAQl1B,GAAIm0B,EAAiBvqB,GAE7CD,OA1PU2tB,CACrB17B,EACAs5B,EACAr1B,EACAs1B,EAAmBE,QAAQ5Z,sBAC3B0Z,EAAmBE,QAAQ/X,oBAI3B1T,GACF3R,KAAM,4BACN8G,QACE8zB,EAAAzV,aAAaW,kBACb8U,EAAAzV,aAAaY,YACb6U,EAAAzV,aAAazT,SAMb/N,EAAMkB,QAAQU,OAASzB,EAAAhC,SAAS0D,QAClCmM,EAAS7K,OAAOoI,KAAK0rB,EAAAzV,aAAatgB,SAGpC,MAAMy6B,EAAsB3E,EAAAlpB,eAC1BirB,EACAR,EACAvqB,GA6BF,OA1BAuqB,GACE76B,CAACu5B,EAAAzV,aAAavC,eAAgBka,EAC5B71B,EACAnD,EAAAjC,sBAAsB0d,UAExBle,CAACu5B,EAAAzV,aAAazT,QAgPlB,SAAgCurB,GAU9B,OAFgBtC,EAAAlpB,eAAewrB,EAAQt1B,OAJrC3H,KAAM,wBACN8G,YAKa4K,OA1PU6tB,CAAuBtC,GAC9C57B,CAACu5B,EAAAzV,aAAatgB,SAuOlB,SAAuClB,GACrC,OAAIA,EAAMkB,QAAQU,OAASzB,EAAAhC,SAAS0D,OAC3BjG,EAAQ,IAGVA,EAAQ,IA5OWigC,CAA8B77B,IAGxDgO,GACE3R,KAAM,8BACN8G,QAAS8zB,EAAAzV,aAAavC,cAAegY,EAAAzV,aAAazT,SAKhD/N,EAAMkB,QAAQU,OAASzB,EAAAhC,SAAS0D,QAClCmM,EAAS7K,OAAOoI,KAAK0rB,EAAAzV,aAAatgB,UAUlC8C,GAP4BgzB,EAAAlpB,eAC5BkrB,EACAT,EACAvqB,GAI0BD,OAC1BvK,iBAAkB+1B,EAAmB/1B,iBACrCqc,sBAAuB0Z,EAAmBE,QAAQ5Z,sBAClDzb,GAAIu3B,EAAoB5tB,wFC1K5B,MAAA7N,EAAAtE,EAAA,GACAmyB,EAAAnyB,EAAA,GACAkgC,EAAAlgC,EAAA,IACAmgC,EAAAngC,EAAA,IAEAyM,EAAAzM,EAAA,GAEAogC,EAAApgC,EAAA,IACAuE,EAAAvE,EAAA,GAEAqgC,EAAArgC,EAAA,IACA24B,EAAA34B,EAAA,IAGAsgC,EAAAtgC,EAAA,IAEAugC,EAAAvgC,EAAA,IAIAwgC,EAAAxgC,EAAA,IACAygC,EAAAzgC,EAAA,IACA0gC,EAAA1gC,EAAA,IACA2gC,EAAA3gC,EAAA,IACAqe,EAAAre,EAAA,GAIA4gC,EAAA5gC,EAAA,IACA+kB,EAAA/kB,EAAA,IACA6gC,EAAA7gC,EAAA,IAEA8gC,EAAA9gC,EAAA,IACAglB,EAAAhlB,EAAA,IAuCM+gC,EAA2B,IAAIz8B,EAAM08B,MAAM,EAAK,EAAK,GAE3D,SAAAC,EAAkBl9B,GAChB,OAAOgH,QAAQhH,EAAI8iB,YA0BrBtnB,EAAA2hC,YAAA,SACEC,EACAr8B,GAEA,OAAQq8B,EAAYr8B,IAQtBvF,EAAA6hC,mBAAAt/B,cAEUc,KAAAkzB,aAA6B,IAAI+K,EAAAQ,aAIzCz+B,KAAA0+B,gBAAkB,IAAIp8B,IAStBtC,KAAAqe,cACEsgB,aAAc,EACdxgB,YAA0B,EAAbvE,KAAKC,MAClB+kB,aAA2B,EAAbhlB,KAAKC,OAMb7Z,KAAA6+B,kBAAmB,EAE3B7+B,KAAA0M,OAAS,IAAIpK,IAWbtC,KAAAkK,WAAqBlN,OAAOmN,iBAS5BnK,KAAA8+B,OAAS,IAAIx8B,IAIbtC,KAAA02B,cAWA12B,KAAA++B,iBAAmB,IAAIz8B,IAGvByE,SACE,OAAO/G,KAAK0X,QAONxY,SACNsC,GAEA,OAAKA,EAAM8G,GAKPtI,KAAK0M,OAAOtO,IAAIoD,EAAM8G,KACxBnC,QAAQC,KAAK,oDACN5E,IAITxB,KAAK0M,OAAOb,IAAIrK,EAAM8G,GAAI9G,GAE1BxB,KAAKg/B,UAAUx9B,GAERA,IAdL2E,QAAQC,KAAK,8BACN5E,GA2BXtC,aACE8W,EACAipB,EACAC,GAMA,IAAKl/B,KAAK+G,GAAI,OAGVk4B,GAAgBj/B,KAAKqe,aAAasgB,eACtC3+B,KAAKqe,aAAaugB,aAAe5+B,KAAKqe,aAAaF,iBAGtC1X,IAATuP,EACFhW,KAAKqe,aAAaF,YAA2B,EAAbvE,KAAKC,OAIjC7Z,KAAKqe,aAAaugB,eAAiB5+B,KAAKqe,aAAaF,cACvDne,KAAKqe,aAAaugB,aAAe5oB,GAGnChW,KAAKqe,aAAaF,YAAcnI,GAIlC,MAAM8oB,EAAS5d,MAAMmS,KAAKrzB,KAAK8+B,OAAOn6B,UAChCw6B,KACAC,KAGN,IAAK,IAAI9hC,EAAI,EAAGkH,EAAMs6B,EAAOr6B,OAAQnH,EAAIkH,IAAOlH,EAAG,CACjD,MAAMmE,EAAQq9B,EAAOxhC,GACf0Z,EAAQkK,MAAMmS,KAAK5xB,EAAMmL,SAASjI,UAClC+H,EAASjL,EAAMiL,OAGrBjL,EAAM49B,aAGN,IAAK,IAAItwB,EAAI,EAAGC,EAAOgI,EAAMvS,OAAQsK,EAAIC,IAAQD,EAAG,CAClD,MAAMvE,EAAOwM,EAAMjI,GAEbuwB,KAIN90B,EAAK+0B,kBACH,IAAI11B,EAAA/J,QACFM,OAAQJ,KAAK0X,QAAQX,OAAO3W,OAC5BD,MAAOH,KAAK0X,QAAQX,OAAO5W,MAC3BF,EAAG,EACHC,EAAG,KAKP,IAAK,IAAIuhB,EAAI,EAAGC,EAAOhV,EAAOjI,OAAQgd,EAAIC,IAAQD,EAAG,CAEnD,MAAMjgB,EAAQkL,EAAO+U,GAErBjgB,EAAMgJ,KAAOA,EAGb,IACEhJ,EAAMg+B,OACNL,EAAY39B,EAAM8G,IAAM9G,EACxB,MAAO2tB,GACFiQ,EAAc59B,EAAM8G,MACvB82B,EAAc59B,EAAM8G,KAAO9G,EAAO2tB,IAMlC3tB,EAAMkB,QAAQU,OAASzB,EAAAhC,SAAS0D,QAClCi8B,EAAYvyB,KAAKvL,GAIjB09B,GACFA,EAAYz9B,EAAO+I,EAAM80B,IAM/B,MAAMG,EAASzhC,OAAO2G,OAAOy6B,GAE7B,GAAIK,EAAOh7B,OAAS,EAAG,CACrB,MAAMi7B,EAAS1hC,OAAO2G,OAAOw6B,GAE7Bh5B,QAAQC,KACN,gIACAq5B,EAAOxnB,IAAIkX,GAAOA,EAAI,GAAG7mB,KAI3Bm3B,EAAOx6B,QAAQkqB,IACbhpB,QAAQC,cAAc+oB,EAAI,GAAG7mB,uCACzB6mB,EAAI,IAAIhpB,QAAQoK,MAAM4e,EAAI,GAAGwQ,OAASxQ,EAAI,GAAGC,WAInDpvB,KAAK4/B,OAAOF,EAAOznB,IAAIzW,GAASA,EAAMq+B,eAO1C3gC,UACEc,KAAK0M,OAAOzH,QAAQzD,GAASA,EAAMqC,WACnC7D,KAAK8/B,gBAAgBj8B,UACrB7D,KAAKwW,aAAa3S,UAClB7D,KAAK02B,WAAWzxB,QAAQ2xB,GAAaA,EAAUn1B,MAAMoC,WACrD7D,KAAK+/B,SAAShX,UACd/oB,KAAKggC,gBAAgBjX,UACrB/oB,KAAK0+B,gBAAgBnM,QAGrBgL,EAAA0C,cAAcp8B,UACdy5B,EAAA4C,cAAcr8B,UAShB3E,WAAW8W,GACT,GAAKhW,KAAK+G,GAAV,CAmIA,GA/HA/G,KAAK4E,OAAOoR,GAAM,EAAM,CAACvU,EAAO+I,EAAM80B,KAMpC,GAJAt/B,KAAKmgC,cAAc1+B,EAAM+K,UAAWhC,GAIhC80B,EAAY76B,OAAS,GAAKzE,KAAKogC,gBAAiB,CAElD,MAAM9oB,EAAQtX,KAAKogC,gBAAgB9oB,MAC7BN,EAAQhX,KAAKogC,gBAAgBppB,MAGnC,GACExM,EAAKlC,KAAOtI,KAAKqgC,qBAAqB71B,KAAKlC,IAC3C0O,EAAM/J,QAAQzC,IAAS,EACvB,CAEAA,EAAKN,WAAa,EAElB,MAAMo2B,EAAQ91B,EAAK+1B,WAAWzvB,MAAM,GAEpCtG,EAAK+1B,YAAcne,EAAApY,WAAWw2B,MAAOpe,EAAApY,WAAWy2B,OAIhDj2B,EAAK+0B,kBACH,IAAI11B,EAAA/J,QACFM,OAAQJ,KAAK0X,QAAQX,OAAO3W,OAASJ,KAAKkK,WAC1C/J,MAAOH,KAAK0X,QAAQX,OAAO5W,MAAQH,KAAKkK,WACxCjK,EAAG,EACHC,EAAG,KAKP,IAAK,IAAIuhB,EAAI,EAAGC,EAAO4d,EAAY76B,OAAQgd,EAAIC,IAAQD,EAAG,CACxD,MAAMjgB,EAAQ89B,EAAY7d,GAC1BjgB,EAAMkB,QAAQK,gBAAkBpB,EAAAhC,SAAS0D,OACzC,IACE7B,EAAMg+B,OACN,MAAOrQ,IAGT3tB,EAAMkB,QAAQK,gBAAkBpB,EAAAhC,SAASgD,KAO3C3C,KAAKmgC,cACH1+B,EAAMgL,iBACNjC,EACAxK,KAAKggC,gBACLhgC,KAAK0gC,eAIP,MAAMC,EAAY,EACZC,EAAa,EAEbx2B,EAAM,IAAIy2B,WAAWF,EAAYC,EADd,GAMzB5gC,KAAKggC,gBAAgBc,uBACnB9gC,KAAK0gC,cACLppB,EAAM,GAAK9M,EAAK0B,aAAajM,EAAI0gC,EAAY,EAC7Cn2B,EAAK0B,aAAa9L,QACfkX,EAAM,GAAK9M,EAAK0B,aAAahM,GAC9B0gC,EAAa,EACfD,EACAC,EACAx2B,GAIF,MAAMutB,EAAc8F,EAAA/F,6BAClBpgB,EACAlN,EACAu2B,EACAC,GAIF,IAAK,IAAInf,EAAI,EAAGC,EAAO4d,EAAY76B,OAAQgd,EAAIC,IAAQD,EAAG,CACxD,MAAMjgB,EAAQ89B,EAAY7d,GAEtBjgB,EAAMkB,QAAQU,OAASzB,EAAAhC,SAAS0D,SAClC7B,EAAM+E,aAAaw6B,aAAepJ,GAKtCntB,EAAKN,WAAalK,KAAKkK,WAEvBM,EAAK+1B,WAAaD,EAIlB91B,EAAK+0B,kBACH,IAAI11B,EAAA/J,QACFM,OAAQJ,KAAK0X,QAAQX,OAAO3W,OAC5BD,MAAOH,KAAK0X,QAAQX,OAAO5W,MAC3BF,EAAG,EACHC,EAAG,SASTF,KAAKwW,aAAasB,mBACpB9X,KAAK02B,WAAWzxB,QAAQ2xB,IACtBA,EAAU71B,OAAS,IAAIg1B,EAAAhT,WAAW6T,EAAUpsB,KAAK0B,cACjD0qB,EAAU71B,OAAOiD,KAAO4yB,IAG1B52B,KAAKwW,aAAasB,kBAAmB,IAMlC9X,KAAK6+B,iBAAkB,CAC1B7+B,KAAK6+B,kBAAmB,EACxB,MAAMmC,QAAkBhhC,KAAK8/B,gBAAgBmB,kBAC7CjhC,KAAK6+B,kBAAmB,EAIpBmC,GAAWhhC,KAAKw/B,cAKfx/B,KAAKogC,iBAMNlhC,cACNuC,EACA+I,EACAu1B,EACArvB,GAEAqvB,EAAWA,GAAY//B,KAAK+/B,SAE5B,MAAMn1B,GAAW3K,EAAGuK,EAAKF,WAAWjK,KAAMH,EAAGsK,EAAKF,WAAWhK,KACvDyF,EAAOyE,EAAKF,WACZ42B,EAAenB,EAASoB,UACxBj3B,EAAa61B,EAASqB,gBAC5BF,EAAa/gC,OAAS+J,EACtBg3B,EAAa9gC,QAAU8J,EACvB,MAAMm3B,EAAa72B,EAAK62B,WAClB3pB,EAAUqoB,EAAS9b,aAIpBvT,IAEHgH,EAAQ2X,OAAO3X,EAAQ4pB,cACvB5pB,EAAQ6pB,QACN32B,EAAO3K,EACPihC,EAAa9gC,OAASwK,EAAO1K,EAAI6F,EAAK3F,OACtC2F,EAAK5F,MACL4F,EAAK3F,QAIHoK,EAAK62B,YAEP3pB,EAAQ8pB,WACNH,EAAW,GACXA,EAAW,GACXA,EAAW,GACXA,EAAW,KAMb72B,EAAK+1B,WAEH7vB,GAIFA,EAAO+wB,QAAQ17B,EAAK5F,MAAO4F,EAAK3F,QAChC2/B,EAAS2B,gBAAgBhxB,GACzBqvB,EAASxN,MACP/nB,EAAK+1B,WAAWtzB,QAAQmV,EAAApY,WAAWw2B,QAAU,EAC7Ch2B,EAAK+1B,WAAWtzB,QAAQmV,EAAApY,WAAWy2B,QAAU,EAC7Cj2B,EAAK+1B,WAAWtzB,QAAQmV,EAAApY,WAAW23B,UAAY,IAGjD5B,EACG9b,aACAsO,OACE/nB,EAAK+1B,WAAWtzB,QAAQmV,EAAApY,WAAWw2B,QAAU,EAC1C9oB,EAAQkqB,iBACR,IACDp3B,EAAK+1B,WAAWtzB,QAAQmV,EAAApY,WAAWy2B,QAAU,EAC1C/oB,EAAQmqB,iBACR,IACHr3B,EAAK+1B,WAAWtzB,QAAQmV,EAAApY,WAAW23B,UAAY,EAC5CjqB,EAAQoqB,mBACR,IAQRpxB,GAIFA,EAAO+wB,QAAQ17B,EAAK5F,MAAO4F,EAAK3F,QAChC2/B,EAAS2B,gBAAgBhxB,GACzBqvB,EAASxN,OAAM,GAAM,IAErB7a,EAAQ6a,MAAM7a,EAAQkqB,iBAAmBlqB,EAAQmqB,kBAKrD9B,EAASgC,YACPn3B,EAAO3K,EAAIiK,EACXU,EAAO1K,EAAIgK,EACXnE,EAAK5F,MACL4F,EAAK3F,QAGP2/B,EAASH,OAAOn+B,EAAO+I,EAAKM,WAAWO,WAAYqF,GAOrDxR,YAAYqX,GACV,IAAK,MAAMqgB,KAAa52B,KAAK02B,WAC3B,GAAIE,EAAUpsB,KAAKlC,KAAOiO,EACxB,OAAOqgB,EAAUpsB,KAAK0B,aAI1B,OAAO,KAMThN,mBAAmBqX,GACjB,IAAK,MAAMqgB,KAAa52B,KAAK02B,WAC3B,GAAIE,EAAUpsB,KAAKlC,KAAOiO,EAAQ,CAChC,MAAM/L,EAAOosB,EAAUpsB,KAEvB,GAAIA,EAAK0B,aAAc,CACrB,MAAM81B,EAAUx3B,EAAKy3B,aAAchiC,EAAG,EAAGC,EAAG,IACtCgiC,EAAc13B,EAAK23B,eACvBliC,EAAGuK,EAAK0B,aAAa1L,MACrBN,EAAGsK,EAAK0B,aAAa3L,SAGvB,OAAO,IAAIsJ,EAAA/J,QACTS,OAAQ2hC,EAAYhiC,EACpBG,KAAM2hC,EAAQ/hC,EACdO,MAAO0hC,EAAYjiC,EACnBK,IAAK0hC,EAAQ9hC,IAGf,OAAO,KAKb,OAAO,KAOThB,WAAWa,GAmBT,OAjBAC,KAAKkK,WAAanK,EAAQmK,YAAclK,KAAKkK,WAE7ClK,KAAKoiC,WAAWriC,EAAQ2X,SAEpB1X,KAAK+G,IAEP/G,KAAKqiC,OAAOtiC,GAEZC,KAAKsiC,iBAAiBviC,SAEhBC,KAAKuiC,cAAcxiC,IAEzBoG,QAAQC,KACN,4EAIGpG,KAMDd,OAAOa,GACb,IAAKC,KAAK0X,QAIR,YAHAvR,QAAQoK,MACN,+EAMJ,MAAMwG,EAAS/W,KAAK0X,QAAQX,OAEtB5W,EAAQ4W,EAAO5W,MACfC,EAAS2W,EAAO3W,OAGtBJ,KAAK+/B,SAAW,IAAIr+B,EAAM8gC,eAGxBC,MAAO1iC,EAAQshC,YAActhC,EAAQshC,WAAW,GAAK,EAErDqB,WAAW,EAEX3rB,SAGA4rB,uBAAuB,IAIzB3iC,KAAKggC,gBAAkB,IAAIt+B,EAAM8gC,eAG/BC,OAAO,EAEPC,WAAW,EAEXC,uBAAuB,IASzB3iC,KAAK+/B,SAAS6C,WAAY,EAE1B5iC,KAAK6iC,gBAAgB1iC,EAAOC,GAE5BJ,KAAK+/B,SAAS+C,cAAc9iC,KAAKkK,YAI7BnK,EAAQshC,WACVrhC,KAAK+/B,SAASgD,cACZ,IAAIrhC,EAAM08B,MACRr+B,EAAQshC,WAAW,GACnBthC,EAAQshC,WAAW,GACnBthC,EAAQshC,WAAW,IAErBthC,EAAQshC,WAAW,IAMrBrhC,KAAK+/B,SAASgD,cAAc5E,GAI9Bn+B,KAAKggC,gBAAgB4C,WAAY,EAEjC5iC,KAAKggC,gBAAgB8C,cAAc,GAGnC9iC,KAAKggC,gBAAgB+C,cAAc,IAAIrhC,EAAM08B,MAAM,EAAG,EAAG,GAAI,GAG7Dp+B,KAAKqgC,qBAAuB1C,EAAAtb,qBAAqBriB,KAAK0X,SACtD1X,KAAKqgC,qBAAqB71B,KAAK62B,WAAathC,EAAQshC,WAEpDrhC,KAAK8+B,OAAOjzB,IACV7L,KAAKqgC,qBAAqB5+B,MAAM6G,GAChCtI,KAAKqgC,qBAAqB5+B,OAG5B,IAAIuhC,EAAiB,EAGrBhjC,KAAK02B,WAAW3pB,MACd3K,QAAS4gC,EACTvhC,MAAOzB,KAAKqgC,qBAAqB5+B,MACjC+I,KAAMxK,KAAKqgC,qBAAqB71B,OAKlCxK,KAAK0X,QAAQ2X,OAAOrvB,KAAK0X,QAAQ4pB,cAG7BvhC,EAAQ++B,QACV/+B,EAAQ++B,OAAO75B,QAAQg+B,IAErB,MAAMC,EAAW,IAAI/gB,EAAA5V,MAAM02B,GAIO,IAA9BA,EAAajsB,MAAMvS,SACrBy+B,EAASpgB,QAAQ9iB,KAAKqgC,qBAAqB71B,MAE3CxK,KAAK02B,WAAW3pB,MACd3K,QAAS4gC,EACTvhC,MAAOyhC,EACP14B,KAAMxK,KAAKqgC,qBAAqB71B,QAKpCy4B,EAAajsB,MAAM/R,QAAQk+B,IACzB,MAAMC,EAAU,IAAIhhB,EAAAnY,KAAKk5B,GACzBC,EAAQz4B,OAASy4B,EAAQz4B,QAAU3K,KAAKqgC,qBAAqB11B,OAC7Dy4B,EAAQt4B,WACNs4B,EAAQt4B,YAAc9K,KAAKqgC,qBAAqBv1B,WAClDs4B,EAAQ73B,SACN63B,EAAQ73B,UAAYvL,KAAKqgC,qBAAqB90B,SAChD63B,EAAQl5B,WAAalK,KAAKkK,WAC1Bg5B,EAASpgB,QAAQsgB,GAEjB,IAAK,MAAMxM,KAAa52B,KAAK02B,WACvBE,EAAUpsB,KAAKlC,KAAO86B,EAAQ96B,IAChCnC,QAAQC,KACN,wGAKNpG,KAAK02B,WAAW3pB,MACd3K,QAAS4gC,EACTvhC,MAAOyhC,EACP14B,KAAM44B,MAIVpjC,KAAK8+B,OAAOjzB,IAAIo3B,EAAa16B,IAAK26B,KAUhChkC,UACNsC,GAGAA,EAAM4c,QAAUpe,KAEhBwB,EAAMyN,SAAWjP,KAAK8/B,gBAGtB,MAAMr+B,EAAQzB,KAAKqjC,gBAAgB7hC,GAE7Bkc,EAAWlc,EAAM8hC,aAEvB5lB,EAASjY,oBAAsBiY,EAASjY,wBAA0B0S,OAChEhQ,SAEFuV,EAAShY,kBAAoBgY,EAAShY,sBAAwByS,OAC5DhQ,SAEFuV,EAAS5Y,UAAY4Y,EAAS5Y,cAAgBqT,OAAOhQ,SAErD,MAAMzC,iBAAEA,EAAgBD,mBAAEA,EAAkBX,SAAEA,GAAai5B,EAAAtgB,eACzDzd,KAAK+G,GACLvF,EACAkc,GAIFjC,EAAA3U,mBAAmB9G,KAAK+G,GAAIvF,EAAOkE,EAAkBD,GAGrD,MAAM89B,EAAgB/F,EAAA3C,gBACpBr5B,EACAkc,EACAhY,EACAD,EACAX,GAGIgD,EAAW81B,EAAAxc,sBACf5f,EACA+hC,EAAcliB,sBACd3b,EACAgY,EAAS/X,aAILoC,EAAW81B,EAAArd,sBACfhf,EACA+hC,EAAc39B,GACd29B,EAAc/9B,GACdV,EACAy+B,EAAcv+B,kBAGVkD,EAAQ41B,EAAAj2B,mBAAmBrG,EAAOsG,EAAUC,GAelD,OAZAvG,EAAMsG,SAAWA,EACjBtG,EAAMiE,mBAAqBA,EAC3BjE,EAAMe,oBAAsBmb,EAAS/X,YACrCnE,EAAMuG,SAAWA,EACjBvG,EAAM6f,sBAAwBkiB,EAAcliB,sBAC5C7f,EAAM0G,MAAQA,EACd1G,EAAMsD,SAAWA,EACjBtD,EAAMkE,iBAAmBA,EAGzB+V,EAAAhU,uBAAuBzH,KAAK+G,GAAIvF,EAAOC,GAEhCD,EAMDtC,iBAAiBa,GAEvB,MAAMyjC,GACJ,IAAI9F,EAAAlH,iBAAiBx2B,OACFof,OAAOrf,EAAQyjC,mBAGpCxjC,KAAKwW,aAAe,IAAIwnB,EAAAlnB,kBACtB9W,KAAK0X,QAAQX,OACb/W,KAAK02B,WACL8M,EACAzjC,EAAQmX,oBAOJhY,oBAAoBa,GAE1B,GAAIA,EAAQ0jC,eACV,IAAK,MAAMx0B,KAAYlP,EAAQ0jC,qBACvBzjC,KAAKkzB,aAAawQ,YAAYz0B,GAKxCjP,KAAK8/B,gBAAkB,IAAI5B,EAAApL,sBACzBI,aAAclzB,KAAKkzB,eAQfh0B,gBACNsC,GAGA,IAAIC,EAAQzB,KAAK8+B,OAAO1gC,IAAIoD,EAAMU,MAAMT,OAAS,IAiBjD,OAfKA,IAGHA,EAAQzB,KAAKqgC,qBAAqB5+B,MAE9BD,EAAMU,MAAMT,OACd0E,QAAQC,KACN,oHAMN3E,EAAMkiC,SAASniC,GAERC,EAQDvC,YACNsC,GAGA,OAAKA,EAGAxB,KAAK0M,OAAOtO,IAAIoD,GAASA,EAAM8G,KAQpC9G,EAAMqC,UACN7D,KAAK0M,OAAOinB,OAAOnyB,EAAM8G,IAElB9G,IAVL2E,QAAQC,KACN,sDACA5E,GAEKA,GAPA,KAmBXtC,OAAO0kC,GACA5jC,KAAK+G,KAGN68B,GAAqBA,EAAkBn/B,OAAS,GAClDm/B,EAAkB3+B,QAAQ4+B,IACxB,MAAMtF,EAAasF,EAAK,GAClB3hC,EAAQ2hC,EAAK,GACbC,EAAgB9jC,KAAK0M,OAAOtO,IAAI8D,EAAMqG,KAE5C,GAAIu7B,EACFA,EAAcC,gBAAgB7hC,GAC9BlE,OAAOwE,OAAOshC,EAAc5hC,MAAOA,GACnC4hC,EAAcjE,YAAY,GAAKiE,EAAc5hC,MAC7C4hC,EAAcE,qBACT,CACL,MAAMxiC,EAAQ,IAAI+8B,EAChBvgC,OAAOwE,UAAW+7B,EAAW97B,aAAcP,IAE7CV,EAAMq+B,YAAcgE,EACpB7jC,KAAK2jC,SAASniC,GAGhBxB,KAAK++B,iBAAiBlzB,IAAI3J,EAAMqG,KAAK,KAKzCvI,KAAK++B,iBAAiB95B,QAAQ,CAAC8jB,EAASkb,KACtC,GAAIlb,EAAS,CACX,MAAMvnB,EAAQxB,KAAK0M,OAAOtO,IAAI6lC,GAC1BziC,EACFxB,KAAK2D,YAAYnC,GAEjB2E,QAAQC,KACN,gGAORpG,KAAK++B,iBAAiBxM,QAItBvyB,KAAK0M,OAAOzH,QAAQ,CAACzD,EAAO8G,KAC1BtI,KAAK++B,iBAAiBlzB,IAAIvD,GAAI,MAQlCpJ,aAAagL,GACX,MAAMsC,EAAYxM,KAAK0X,QAAQX,OAAOmtB,cAEtC,GAAI13B,EAAW,CACb,MAAMuK,EAAS/W,KAAK0X,QAAQX,OAC5BA,EAAOotB,UAAY,GACnBptB,EAAOqtB,aAAa,QAAS,IAC7B53B,EAAU2hB,MAAMviB,SAAW,WAC3BmL,EAAOoX,MAAMviB,SAAW,WACxBmL,EAAOoX,MAAM9tB,KAAO,MACpB0W,EAAOoX,MAAM7tB,IAAM,MACnByW,EAAOoX,MAAMhuB,MAAQ,OACrB4W,EAAOoX,MAAM/tB,OAAS,OACtB2W,EAAOqtB,aAAa,QAAS,IAC7BrtB,EAAOqtB,aAAa,SAAU,IAC9B,MAAMC,EAAe73B,EAAU83B,wBACzBC,EAAMxtB,EAAOutB,wBAEnBtkC,KAAKyX,OAAO8sB,EAAIpkC,OAAS,IAAKkkC,EAAajkC,QAAU,MAOzDlB,OAAOiB,EAAeC,EAAgB8J,GACpClK,KAAKkK,WAAaA,GAAclK,KAAKkK,WACrClK,KAAK02B,WAAWzxB,QACd2xB,GAAcA,EAAUpsB,KAAKN,WAAalK,KAAKkK,YAEjDlK,KAAK6iC,gBAAgB1iC,EAAOC,GAC5BJ,KAAK+/B,SAAS+C,cAAc9iC,KAAKkK,YACjClK,KAAKggC,gBAAgB8C,cAAc,GACnC9iC,KAAKwW,aAAaiB,SAMZvY,WACNwY,GAEA,GAAKA,EAIL,GAj/BJ,SAAwBvW,GACtB,OAAOgH,QAAQhH,EAAI4V,QAg/BbytB,CAAe9sB,GACjB1X,KAAK0X,QAAUA,OACV,GAAI2mB,EAAS3mB,GAAU,CAC5B,MAAM+sB,EACJ/sB,EAAQuM,WAAW,UAAYvM,EAAQuM,WAAW,sBAE/CwgB,EAKHzkC,KAAK0X,QAAU+sB,EAJft+B,QAAQC,KACN,4HAKC,GAlgCX,SAAkBjF,GAChB,OAAOgH,QAAQhH,EAAIokB,QAigCNmf,CAAShtB,GAAU,CAC5B,MAAMU,EAAU6B,SAAS0qB,eAAejtB,GAEpC2mB,EAASjmB,IACXpY,KAAKoiC,WAAWhqB,IASdlZ,gBAAgBiB,EAAeC,GACrCD,EAAQA,GAAS,IACjBC,EAASA,GAAU,IAEnBJ,KAAK+/B,SAAS0B,QAAQthC,EAAOC,GAC7BJ,KAAKggC,gBAAgByB,QAAQthC,EAAOC,GAE/BJ,KAAK0gC,gBACR1gC,KAAK0gC,cAAgB,IAAInR,EAAAqV,kBAAkBzkC,EAAOC,GAChDykC,UAAWnjC,EAAMojC,aACjBC,UAAWrjC,EAAMojC,aACjBE,eAAe,KAInBhlC,KAAK0gC,cAAce,QAAQthC,EAAOC,GAOpClB,qBAAqBoY,EAAaN,GAEhChX,KAAKogC,iBACH9oB,QACAN,wJCvnCNnX,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,IACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,oBCXAR,EAAAD,QAAA,w7BCAAC,EAAAD,QAAA,6/CCAA,MAAA+E,EAAAtE,EAAA,GACA6nC,EAAA7nC,EAAA,GACA8nC,EAAA9nC,EAAA,GAMAuE,EAAAvE,EAAA,GASAwE,EAAAxE,EAAA,IAEMsW,IAAEA,GAAQ7S,KAWhBlE,EAAAwoC,wBAA+BD,EAAAljC,MAK7B9C,4BACE,OAEEiE,eAAiBiiC,GACf,IAAIH,EAAAnlC,QACFM,OAAsB,EAAdglC,EAAKC,OACbllC,MAAqB,EAAdilC,EAAKC,OACZplC,EAAGmlC,EAAKnlC,EAAImlC,EAAKC,OACjBnlC,EAAGklC,EAAKllC,EAAIklC,EAAKC,SAIrBriC,QAAS,CAACoiC,EAAoBzkC,EAAe6J,KAC3C,MAAMnM,EAAI+mC,EAAKC,OAAS3xB,KAAOlJ,EAAKG,OAAOE,OACrCqP,GAASvZ,EAAMV,EAAImlC,EAAKnlC,EAAGU,EAAMT,EAAIklC,EAAKllC,GAEhD,OAAOga,EAAM,GAAKA,EAAM,GAAKA,EAAM,GAAKA,EAAM,GAAK7b,EAAIA,IAQ7Da,aACE,MAAMomC,EAActlC,KAAKkC,MAAMojC,aAAe,KAAO,GAE/CC,GACJC,EAAG,EACH1M,EAAG,EACHC,GAAI,EACJC,EAAG,EACHC,GAAI,EACJwM,GAAI,GAGAC,GACJF,GAAI,EACJ1M,GAAI,EACJC,GAAI,EACJC,EAAG,EACHC,EAAG,EACHwM,EAAG,GAGL,OACEjgC,GAAIpI,EAAQ,IACZqI,qBAEII,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBG,IAC/BtB,KAAM,SACNkI,KAAMpE,EAAA5C,sBAAsBK,IAC5B2F,OAAQhH,IAAMA,EAAEkC,EAAGlC,EAAEmC,KAGrB2F,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBK,MAC/BxB,KAAM,SACNkI,KAAMpE,EAAA5C,sBAAsBI,IAC5B4F,OAAQhH,IAAMA,EAAEsnC,UAGhBx/B,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBM,KAC/BzB,KAAM,QACNkI,KAAMpE,EAAA5C,sBAAsBI,IAC5B4F,OAAQhH,IAAMA,EAAEqE,SAGhByD,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBG,IAC/BtB,KAAM,QACNkI,KAAMpE,EAAA5C,sBAAsBO,KAC5ByF,OAAQhH,GAAKA,EAAEgiB,QAGfla,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBG,IAC/BtB,KAAM,YACNkI,KAAMpE,EAAA5C,sBAAsBI,IAC5B4F,OAAQhH,IAAMA,EAAE4nC,aAGpB7gC,WAEIjH,KAAM,cACNkI,KAAMpE,EAAAnC,YAAYL,IAClB4F,OAAS6gC,IAAiBN,OAG9B5/B,mBAKI7H,KAAM,WACNkI,KAAMpE,EAAAlC,oBAAoBJ,MAC1B0F,OAAS8gC,IAEPN,EAAeM,GAEfH,EAAaG,GACb,KAINlgC,YAAa,EACbC,GAAIxI,EAAQ,KAIhB8B,eACE,OACEkG,SAAU1D,EAAM2G,sBAChB/C,UAAW5D,EAAM6D,MAIrBrG,qBACE,OAAO0C,EAAAkkC,sBAAsBC,mcC3JjC,MAAAC,EAAA5oC,EAAA,GAEAwE,EAAAxE,EAAA,SAWA6oC,UAAkCrkC,EAAA8G,SAQhCxJ,YAAYa,GACVoC,MAAMpC,GARIC,KAAA+f,OAA2C,EAAK,EAAK,EAAK,GAC1D/f,KAAAoC,MAAgB,EAChBpC,KAAAqlC,OAAiB,EACjBrlC,KAAA2lC,UAAoB,EACpB3lC,KAAAC,EAAY,EACZD,KAAAE,EAAY,EAKtBF,KAAK+f,MAAQhgB,EAAQggB,QAAU,EAAG,EAAG,EAAG,GACxC/f,KAAKoC,MAAQrC,EAAQqC,OAAS,EAC9BpC,KAAKqlC,OAAStlC,EAAQslC,OACtBrlC,KAAK2lC,UAAY5lC,EAAQ4lC,WAAa3lC,KAAK2lC,UAC3C3lC,KAAKC,EAAIF,EAAQE,EACjBD,KAAKE,EAAIH,EAAQG,EAGnBC,YACE,OAAqB,EAAdH,KAAKqlC,OAGdjlC,aACE,OAAqB,EAAdJ,KAAKqlC,OAGda,kBACE,OAAOlmC,KAAKqlC,OAASrlC,KAAK2lC,WA3BhBj8B,GAAXs8B,EAAAr8B,wCACWD,GAAXs8B,EAAAr8B,wCACWD,GAAXs8B,EAAAr8B,yCACWD,GAAXs8B,EAAAr8B,4CACWD,GAAXs8B,EAAAr8B,oCACWD,GAAXs8B,EAAAr8B,oCANHhN,EAAAspC,4JCbApmC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,qbCDA,MAAA4oC,EAAA5oC,EAAA,GAKAuE,EAAAvE,EAAA,GA4BM+oC,GAGJjnC,CAACyC,EAAAX,WAAWolC,SAAU,CAACC,EAAgBC,KACrCD,EAAOpmC,GAAKomC,EAAOE,QACnBF,EAAOnmC,GAAKmmC,EAAOE,SAErBrnC,CAACyC,EAAAX,WAAWwlC,WAAY,CAACH,EAAgBC,KACvCD,EAAOpmC,EAAIqmC,EAAUnmC,MAAQ,EAC7BkmC,EAAOnmC,GAAKmmC,EAAOE,SAErBrnC,CAACyC,EAAAX,WAAWylC,UAAW,CAACJ,EAAgBC,KACtCD,EAAOpmC,EAAIqmC,EAAUnmC,MAAQkmC,EAAOE,QACpCF,EAAOnmC,GAAKmmC,EAAOE,SAErBrnC,CAACyC,EAAAX,WAAW0lC,YAAa,CAACL,EAAgBC,KACxCD,EAAOpmC,GAAKomC,EAAOE,QACnBF,EAAOnmC,EAAIomC,EAAUlmC,OAAS,GAEhClB,CAACyC,EAAAX,WAAW2lC,QAAS,CAACN,EAAgBC,KACpCD,EAAOpmC,EAAIqmC,EAAUnmC,MAAQ,EAC7BkmC,EAAOnmC,EAAIomC,EAAUlmC,OAAS,GAEhClB,CAACyC,EAAAX,WAAW4lC,aAAc,CAACP,EAAgBC,KACzCD,EAAOpmC,EAAIqmC,EAAUnmC,MAAQkmC,EAAOE,QACpCF,EAAOnmC,EAAIomC,EAAUlmC,OAAS,GAEhClB,CAACyC,EAAAX,WAAW6lC,YAAa,CAACR,EAAgBC,KACxCD,EAAOpmC,GAAKomC,EAAOE,QACnBF,EAAOnmC,EAAIomC,EAAUlmC,OAASimC,EAAOE,SAEvCrnC,CAACyC,EAAAX,WAAW8lC,cAAe,CAACT,EAAgBC,KAC1CD,EAAOpmC,EAAIqmC,EAAUnmC,MAAQ,EAC7BkmC,EAAOnmC,EAAIomC,EAAUlmC,OAASimC,EAAOE,SAEvCrnC,CAACyC,EAAAX,WAAW+lC,aAAc,CAACV,EAAgBC,KACzCD,EAAOpmC,EAAIqmC,EAAUnmC,MAAQkmC,EAAOE,QACpCF,EAAOnmC,EAAIomC,EAAUlmC,OAASimC,EAAOE,SAEvCrnC,CAACyC,EAAAX,WAAWgmC,QAAS,CAACX,EAAgBC,KACpCD,EAAOpmC,EAAIomC,EAAOpmC,GAAK,EACvBomC,EAAOnmC,EAAImmC,EAAOnmC,GAAK,UAmB3B+mC,UAAuCjB,EAAAt9B,SA2BrCxJ,YAAYa,GACVoC,MAAMpC,GA1BIC,KAAA+f,OAA2C,EAAG,EAAG,EAAG,GAEpD/f,KAAAoC,MAAgB,EAEhBpC,KAAAI,OAAiB,EAEjBJ,KAAAknC,QAAqBvlC,EAAAV,UAAUkmC,UAE/BnnC,KAAAG,MAAgB,EAEhBH,KAAAC,EAAY,EAEZD,KAAAE,EAAY,EAMhBF,KAAAonC,SACNb,QAAS,EACTnjC,KAAMzB,EAAAX,WAAWolC,QACjBnmC,EAAG,EACHC,EAAG,GAMHF,KAAKoC,MAAQrC,EAAQqC,OAASpC,KAAKoC,MACnCpC,KAAK+f,MAAQhgB,EAAQggB,OAAS/f,KAAK+f,MACnC/f,KAAKknC,QAAUnnC,EAAQmnC,SAAWlnC,KAAKknC,QACvClnC,KAAKC,EAAIF,EAAQE,GAAKD,KAAKC,EAC3BD,KAAKE,EAAIH,EAAQG,GAAKF,KAAKE,EAC3BF,KAAKG,MAAQJ,EAAQI,OAAS,EAC9BH,KAAKI,OAASL,EAAQK,QAAU,EAGhCL,EAAQsmC,QAAUrmC,KAAKqnC,UAAUtnC,EAAQsmC,QAG3CA,aACE,OAAOrmC,KAAKonC,QAMdloC,UAAUmnC,GACR,MAAMiB,GACJf,QAASF,EAAOE,SAAW,EAC3BnjC,KAAMijC,EAAOjjC,KACbnD,EAAGomC,EAAOpmC,GAAK,EACfC,EAAGmmC,EAAOnmC,GAAK,GAIjBimC,EAAiBmB,EAAUlkC,MAAMkkC,EAAWtnC,MAE5CA,KAAKonC,QAAUE,GA1DL59B,GAAXs8B,EAAAr8B,wCAEWD,GAAXs8B,EAAAr8B,wCAEWD,GAAXs8B,EAAAr8B,yCAEWD,GAAXs8B,EAAAr8B,0CAEWD,GAAXs8B,EAAAr8B,wCAEWD,GAAXs8B,EAAAr8B,oCAEWD,GAAXs8B,EAAAr8B,oCAMDD,GADCs8B,EAAAr8B,0CAnBHhN,EAAAsqC,mCC7FArqC,EAAAD,QAAA,yhFCAAC,EAAAD,QAAA,iMCAA,MAAA+E,EAAAtE,EAAA,GACA6nC,EAAA7nC,EAAA,GACA8nC,EAAA9nC,EAAA,GAMAuE,EAAAvE,EAAA,GASAwE,EAAAxE,EAAA,GACAmqC,EAAAnqC,EAAA,IAGMqW,IAAEA,EAAGC,IAAEA,GAAQ7S,KAUrBlE,EAAA6qC,6BAAoCtC,EAAAljC,MAQlC9C,4BACE,OAEEiE,eAAiBmjC,IACf,MAAMmB,GAAgB,EAAG,GAErBnB,EAAUD,SACZoB,EAAa,GAAKnB,EAAUD,OAAOpmC,GAAK,EACxCwnC,EAAa,GAAKnB,EAAUD,OAAOnmC,GAAK,GAE1C,MAAM8hC,GACJsE,EAAUrmC,EAAIwnC,EAAa,GAC3BnB,EAAUpmC,EAAIunC,EAAa,IAG7B,OAAO,IAAIxC,EAAAnlC,QACTM,OAAQkmC,EAAUlmC,OAClBD,MAAOmmC,EAAUnmC,MACjBF,EAAG+hC,EAAQ,GACX9hC,EAAG8hC,EAAQ,MAKfh/B,QAAS,CACPsjC,EACA3lC,EACA+mC,KAIA,MAAMC,EAAWj0B,KAAOg0B,EAAW/8B,OAAOE,OACpC+8B,EAAWn0B,KAAOi0B,EAAW/8B,OAAOE,OAG1C,GAAIy7B,EAAUY,UAAYK,EAAAtmC,UAAU4mC,OAClC,OAAO,EAKJ,GAAIvB,EAAUY,UAAYK,EAAAtmC,UAAUkmC,UAAW,CAElD,GAAIS,GAAY,GAAKD,GAAY,EAC/B,OAAO,EAIJ,CAEH,MAAMF,GAAgB,EAAG,GAErBnB,EAAUD,SACZoB,EAAa,GAAKnB,EAAUD,OAAOpmC,GAAK,EACxCwnC,EAAa,GAAKnB,EAAUD,OAAOnmC,GAAK,GAG1C,MAAM8hC,GACJsE,EAAUrmC,EAAIwnC,EAAa,GAAKE,EAChCrB,EAAUpmC,EAAIunC,EAAa,GAAKE,GAIlC,OAAO,IAAI1C,EAAAnlC,QACTM,OAAQkmC,EAAUlmC,OAASunC,EAC3BxnC,MAAOmmC,EAAUnmC,MAAQwnC,EACzB1nC,EAAG+hC,EAAQ,GACX9hC,EAAG8hC,EAAQ,KACVrM,cAAch1B,IAMhB,GAAI2lC,EAAUY,UAAYK,EAAAtmC,UAAU6mC,MAAO,CAE9C,MAAML,GAAgB,EAAG,GAErBnB,EAAUD,SACZoB,EAAa,GAAKnB,EAAUD,OAAOpmC,GAAK,EACxCwnC,EAAa,GAAKnB,EAAUD,OAAOnmC,GAAK,GAG1C,MAAM8hC,EAAU0F,EAAWK,eACzB9nC,EAAGqmC,EAAUrmC,EAAIwnC,EAAa,GAAKC,EAAW/8B,OAAOE,MAAM,GAC3D3K,EAAGomC,EAAUpmC,EAAIunC,EAAa,GAAKC,EAAW/8B,OAAOE,MAAM,KAGvDm9B,EAAcN,EAAWK,cAAcpnC,GAG7C,OAAO,IAAIskC,EAAAnlC,QACTM,OAAQkmC,EAAUlmC,OAClBD,MAAOmmC,EAAUnmC,MACjBF,EAAG+hC,EAAQ/hC,EACXC,EAAG8hC,EAAQ9hC,IACVy1B,cAAcqS,GAGnB,OAAO,IAQb9oC,aACE,MAAMqmC,GACJC,EAAG,EACH1M,EAAG,EACHC,GAAI,EACJC,EAAG,EACHC,GAAI,EACJwM,GAAI,GAGAC,GACJF,EAAG,EACH1M,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHwM,EAAG,GAGL,OACEjgC,GAAIpI,EAAQ,IACZqI,qBAEII,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBG,IAC/BtB,KAAM,WACNkI,KAAMpE,EAAA5C,sBAAsBK,IAC5B2F,OAAQhH,IAAMA,EAAEkC,EAAGlC,EAAEmC,KAGrB2F,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBK,MAC/BxB,KAAM,SACNkI,KAAMpE,EAAA5C,sBAAsBK,IAC5B2F,OAAQhH,IAAMA,EAAEsoC,OAAOpmC,GAAK,EAAGlC,EAAEsoC,OAAOnmC,GAAK,KAG7C2F,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBG,IAC/BtB,KAAM,OACNkI,KAAMpE,EAAA5C,sBAAsBK,IAC5B2F,OAAQhH,IAAMA,EAAEoC,MAAOpC,EAAEqC,UAGzByF,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBK,MAC/BxB,KAAM,QACNkI,KAAMpE,EAAA5C,sBAAsBI,IAC5B4F,OAAQhH,IAAMA,EAAEqE,SAGhByD,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBM,KAC/BzB,KAAM,UACNkI,KAAMpE,EAAA5C,sBAAsBI,IAC5B4F,OAAQhH,IAAMA,EAAEmpC,WAGhBrhC,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBG,IAC/BtB,KAAM,QACNkI,KAAMpE,EAAA5C,sBAAsBO,KAC5ByF,OAAQhH,GAAKA,EAAEgiB,QAGnBjb,WAEIjH,KAAM,cACNkI,KAAMpE,EAAAnC,YAAYL,IAClB4F,OAASkjC,IAAiB,KAG9BviC,mBAKI7H,KAAM,WACNkI,KAAMpE,EAAAlC,oBAAoBJ,MAC1B0F,OAAS8gC,IAEPN,EAAeM,GAEfH,EAAaG,GACb,KAINlgC,YAAa,EACbC,GAAIxI,EAAQ,KAIhB8B,eACE,OACEkG,SAAU1D,EAAM2G,sBAChB/C,UAAW5D,EAAM6D,MAIrBrG,qBACE,OAAO0C,EAAAkkC,sBAAsBC,gKCvPjClmC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,qbCDA,MAAA4oC,EAAA5oC,EAAA,GACA8qC,EAAA9qC,EAAA,IAEA6gC,EAAA7gC,EAAA,IACAuE,EAAAvE,EAAA,GA+DM+qC,EAAsB,IAAI7lC,IAS1B6jC,GAGJjnC,CAACyC,EAAAX,WAAWolC,SAAU,CAACC,EAAgB74B,KACrC64B,EAAOpmC,GAAKomC,EAAOE,QACnBF,EAAOnmC,GAAKmmC,EAAOE,SAErBrnC,CAACyC,EAAAX,WAAWwlC,WAAY,CAACH,EAAgB74B,KACvC64B,EAAOpmC,EAAIuN,EAAMrN,MAAQ,EACzBkmC,EAAOnmC,GAAKmmC,EAAOE,SAErBrnC,CAACyC,EAAAX,WAAWylC,UAAW,CAACJ,EAAgB74B,KACtC64B,EAAOpmC,EAAIuN,EAAMrN,MAAQkmC,EAAOE,QAChCF,EAAOnmC,GAAKmmC,EAAOE,SAErBrnC,CAACyC,EAAAX,WAAW0lC,YAAa,CAACL,EAAgB74B,KACxC64B,EAAOpmC,GAAKomC,EAAOE,QACnBF,EAAOnmC,EAAIsN,EAAMpN,OAAS,GAE5BlB,CAACyC,EAAAX,WAAW2lC,QAAS,CAACN,EAAgB74B,KACpC64B,EAAOpmC,EAAIuN,EAAMrN,MAAQ,EACzBkmC,EAAOnmC,EAAIsN,EAAMpN,OAAS,GAE5BlB,CAACyC,EAAAX,WAAW4lC,aAAc,CAACP,EAAgB74B,KACzC64B,EAAOpmC,EAAIuN,EAAMrN,MAAQkmC,EAAOE,QAChCF,EAAOnmC,EAAIsN,EAAMpN,OAAS,GAE5BlB,CAACyC,EAAAX,WAAW6lC,YAAa,CAACR,EAAgB74B,KACxC64B,EAAOpmC,GAAKomC,EAAOE,QACnBF,EAAOnmC,EAAIsN,EAAMpN,OAASimC,EAAOE,SAEnCrnC,CAACyC,EAAAX,WAAW8lC,cAAe,CAACT,EAAgB74B,KAC1C64B,EAAOpmC,EAAIuN,EAAMrN,MAAQ,EACzBkmC,EAAOnmC,EAAIsN,EAAMpN,OAASimC,EAAOE,SAEnCrnC,CAACyC,EAAAX,WAAW+lC,aAAc,CAACV,EAAgB74B,KACzC64B,EAAOpmC,EAAIuN,EAAMrN,MAAQkmC,EAAOE,QAChCF,EAAOnmC,EAAIsN,EAAMpN,OAASimC,EAAOE,SAEnCrnC,CAACyC,EAAAX,WAAWgmC,QAAS,CAACX,EAAgB74B,KACpC64B,EAAOpmC,EAAIomC,EAAOpmC,GAAK,EACvBomC,EAAOnmC,EAAImmC,EAAOnmC,GAAK,UAmB3B+/B,UAAmCiI,EAAAx/B,SAgIjCxJ,YAAYa,GACVoC,MAAMpC,GAvHIC,KAAA+f,OAA2C,EAAG,EAAG,EAAG,GAEpD/f,KAAAoC,MAAgB,EAEhBpC,KAAA2nC,SAAmB,EAEnB3nC,KAAAknC,QAAqBvlC,EAAAV,UAAUkmC,UAE/BnnC,KAAA6K,MAAgB,EAEhB7K,KAAAC,EAAY,EAEZD,KAAAE,EAAY,EAMhBF,KAAAooC,SAAmB,GACnBpoC,KAAAqoC,YAAsB,QACtBroC,KAAAsoC,UAAoB,GACpBtoC,KAAAuoC,WAAiC,SACjCvoC,KAAAwoC,YAAmC,IACnCxoC,KAAAyoC,UAAoB,EACpBzoC,KAAA0oC,MAAgB,GAGhB1oC,KAAA2oC,OAAiB,EAGjB3oC,KAAA4oC,QAAkB,EAElB5oC,KAAA6oC,cAAwB,EA+ExB7oC,KAAAonC,SACNb,QAAS,EACTnjC,KAAMzB,EAAAX,WAAWolC,QACjBnmC,EAAG,EACHC,EAAG,GAMHF,KAAKoC,MAAQrC,EAAQqC,OAASpC,KAAKoC,MACnCpC,KAAK+f,MAAQhgB,EAAQggB,OAAS/f,KAAK+f,MACnC/f,KAAK2nC,SAAW5nC,EAAQ4nC,UAAY3nC,KAAK2nC,SACzC3nC,KAAKknC,QAAUnnC,EAAQmnC,SAAWlnC,KAAKknC,QACvClnC,KAAK6K,MAAQ9K,EAAQ8K,OAAS7K,KAAK6K,MAEnC7K,KAAKC,EAAIF,EAAQE,GAAKD,KAAKC,EAC3BD,KAAKE,EAAIH,EAAQG,GAAKF,KAAKE,EAE3BF,KAAKqoC,YAActoC,EAAQumB,YAActmB,KAAKqoC,YAC9CroC,KAAKsoC,UAAYvoC,EAAQ8lB,UAAY7lB,KAAKsoC,UAC1CtoC,KAAKuoC,WAAaxoC,EAAQ+oC,WAAa9oC,KAAKuoC,WAC5CvoC,KAAKwoC,YAAczoC,EAAQsmB,YAAcrmB,KAAKwoC,YAC9CxoC,KAAKyoC,UAAY1oC,EAAQmlB,UAAY,EACrCllB,KAAK0oC,MAAQ3oC,EAAQolB,MAAQnlB,KAAK0oC,MAIlC1oC,KAAKooC,SAAWnK,EAAAja,gBAAgBiC,YAAYjmB,KAAM,GAGlD,MAAM+oC,KAAmB/oC,KAAKooC,YAAYpoC,KAAKyoC,YAE/C,IACI3jB,EADAkkB,EAAiBb,EAAoB/pC,IAAI4B,KAAK0oC,OAG9CM,GAEFlkB,EAAgBkkB,EAAe5qC,IAAI2qC,KAIjCjkB,EAAcmkB,aAGhBD,EAAiB,IAAI1mC,IAIlBwiB,IACHA,GACEmkB,WAAY,EACZh6B,SAAU,IAAIgvB,EAAA3wB,mBAAmBtN,OAI/BD,EAAQ+kB,gBACVA,EAAc7V,SAASxB,YAAc1N,EAAQ+kB,cAAcja,OAAS,GAItEia,EAAc7V,SAASxB,YACrBqX,EAAc7V,SAASxB,aAAe,EAGxCwwB,EAAAja,gBAAgBklB,WAAWpkB,EAAc7V,UAGzCk5B,EAAoBt8B,IAAI7L,KAAK0oC,MAAOM,GACpCA,EAAen9B,IAAIk9B,EAAejkB,IAGpC9kB,KAAKmpC,eAAiBrkB,EACtB9kB,KAAK2oC,OAAS7jB,EAAc7V,SAAS6V,cAAcpa,MAAMvK,MACzDH,KAAK4oC,QAAU9jB,EAAc7V,SAAS6V,cAAcpa,MAAMtK,OAG1DL,EAAQsmC,QAAUrmC,KAAKqnC,UAAUtnC,EAAQsmC,QAjM3CnnC,iBACEipC,EAAoB5V,QAiDtB6W,cACE,OAAOppC,KAAKooC,SAGdiB,kBACE,OAAOrpC,KAAK6oC,aAGdviB,iBACE,OAAOtmB,KAAKqoC,YAMdxiB,eACE,OAAO7lB,KAAKsoC,UAGdQ,gBACE,OAAO9oC,KAAKuoC,WAGdliB,iBACE,OAAOrmB,KAAKwoC,YAGdtjB,eACE,OAAOllB,KAAKyoC,UAGdx5B,eACE,OAAOjP,KAAKmpC,eAAel6B,SAG7BkW,WACE,OAAOnlB,KAAK0oC,MAMdlkB,oBACE,OAAOxkB,KAAKmpC,eAAel6B,SAASuV,eAAiBxkB,KAAKmlB,KAO5DhlB,YACE,OAAOH,KAAK2oC,OAOdvoC,aACE,OAAOJ,KAAK4oC,QAuFdvC,aACE,OAAOrmC,KAAKonC,QAOdloC,UACOc,KAAK6oC,eACR7oC,KAAK6oC,cAAe,EACpB7oC,KAAKmpC,eAAeF,aAGmB,IAAnCjpC,KAAKmpC,eAAeF,YACtBjpC,KAAKmpC,eAAel6B,UAQ1B/P,kBAEEc,KAAKmpC,eAAiBnpC,KAAKmpC,eAC3BnpC,KAAK2oC,OAAS3oC,KAAK2oC,OAMrBzpC,UAAUmnC,GACR,MAAMiB,GACJf,QAASF,EAAOE,SAAW,EAC3BnjC,KAAMijC,EAAOjjC,KACbnD,EAAGomC,EAAOpmC,GAAK,EACfC,EAAGmmC,EAAOnmC,GAAK,GAIjBimC,EAAiBmB,EAAUlkC,MAAMkkC,EAAWtnC,MAE5CA,KAAKonC,QAAUE,GA1OL59B,GAAXs8B,EAAAr8B,wCAEWD,GAAXs8B,EAAAr8B,wCAEWD,GAAXs8B,EAAAr8B,2CAEWD,GAAXs8B,EAAAr8B,0CAEWD,GAAXs8B,EAAAr8B,wCAEWD,GAAXs8B,EAAAr8B,oCAEWD,GAAXs8B,EAAAr8B,oCAeDD,GADCs8B,EAAAr8B,yCAIDD,GADCs8B,EAAAr8B,0CAMDD,GADCs8B,EAAAr8B,iDA6EDD,GADCs8B,EAAAr8B,0CAxHHhN,EAAAsjC,+BCxIArjC,EAAAD,QAAA,miGCAAC,EAAAD,QAAA,4SCAA,MAAA+E,EAAAtE,EAAA,GACA6nC,EAAA7nC,EAAA,GACA8nC,EAAA9nC,EAAA,GAMAuE,EAAAvE,EAAA,GASAwE,EAAAxE,EAAA,GACAmqC,EAAAnqC,EAAA,IAOMsW,IAAEA,EAAGD,IAAEA,GAAQ5S,KAMrBlE,EAAA2sC,yBAAgCpE,EAAAljC,MAK9B9C,4BACE,OAEEiE,eAAiBqK,IACf,MAAM64B,GAAgB74B,EAAM64B,OAAOpmC,GAAK,EAAGuN,EAAM64B,OAAOnmC,GAAK,GAEvD8hC,GAAWx0B,EAAMvN,EAAIomC,EAAO,GAAI74B,EAAMtN,EAAImmC,EAAO,IAEvD,OAAO,IAAIpB,EAAAnlC,QACTM,OAAQoN,EAAMpN,OACdD,MAAOqN,EAAMrN,MACbF,EAAG+hC,EAAQ,GACX9hC,EAAG8hC,EAAQ,MAKfh/B,QAAS,CAACwK,EAAsB7M,EAAe6J,KAG7C,MAAMm9B,EAAWj0B,KAAOlJ,EAAKG,OAAOE,OAC9B+8B,EAAWn0B,KAAOjJ,EAAKG,OAAOE,OAGpC,GAAI2C,EAAM05B,UAAYK,EAAAtmC,UAAU4mC,OAC9B,OAAO,EAKJ,GAAIr6B,EAAM05B,UAAYK,EAAAtmC,UAAUkmC,UAAW,CAE9C,GAAIS,GAAY,GAAKD,GAAY,EAC/B,OAAO,EAIJ,CACH,MAAMtB,GAAgB74B,EAAM64B,OAAOpmC,GAAK,EAAGuN,EAAM64B,OAAOnmC,GAAK,GAGvD8hC,EAAUx3B,EAAKu9B,eACnB9nC,EAAGuN,EAAMvN,EAAIomC,EAAO,GAAK77B,EAAKG,OAAOE,MAAM,GAC3C3K,EAAGsN,EAAMtN,EAAImmC,EAAO,GAAK77B,EAAKG,OAAOE,MAAM,KAGvCm9B,EAAcx9B,EAAKu9B,cAAcpnC,GAGvC,OAAO,IAAIskC,EAAAnlC,QACTM,OAAQoN,EAAMpN,OACdD,MAAOqN,EAAMrN,MACbF,EAAG+hC,EAAQ/hC,EACXC,EAAG8hC,EAAQ9hC,IACVy1B,cAAcqS,IAMhB,GAAIx6B,EAAM05B,UAAYK,EAAAtmC,UAAU6mC,MAAO,CAC1C,MAAMzB,GAAgB74B,EAAM64B,OAAOpmC,GAAK,EAAGuN,EAAM64B,OAAOnmC,GAAK,GAGvD8hC,EAAUx3B,EAAKu9B,eACnB9nC,EAAGuN,EAAMvN,EAAIomC,EAAO,GAAK77B,EAAKG,OAAOE,MAAM,GAC3C3K,EAAGsN,EAAMtN,EAAImmC,EAAO,GAAK77B,EAAKG,OAAOE,MAAM,KAGvCm9B,EAAcx9B,EAAKu9B,cAAcpnC,GAGvC,OAAO,IAAIskC,EAAAnlC,QACTM,OAAQoN,EAAMpN,OACdD,MAAOqN,EAAMrN,MACbF,EAAG+hC,EAAQ/hC,EACXC,EAAG8hC,EAAQ9hC,IACVy1B,cAAcqS,GAGnB,OAAO,IAQb9oC,aACE,MAAMqmC,GACJC,EAAG,EACH1M,EAAG,EACHC,GAAI,EACJC,EAAG,EACHC,GAAI,EACJwM,GAAI,GAGAC,GACJF,EAAG,EACH1M,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHwM,EAAG,GAGL,OACEjgC,GAAIpI,EAAQ,IACZqI,qBAEII,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBG,IAC/BtB,KAAM,WACNkI,KAAMpE,EAAA5C,sBAAsBK,IAC5B2F,OAAQhH,IAAMA,EAAEkC,EAAGlC,EAAEmC,KAGrB2F,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBK,MAC/BxB,KAAM,SACNkI,KAAMpE,EAAA5C,sBAAsBK,IAC5B2F,OAAQhH,IAAMA,EAAEsoC,OAAOpmC,GAAK,EAAGlC,EAAEsoC,OAAOnmC,GAAK,KAG7C2F,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBG,IAC/BtB,KAAM,OACNkI,KAAMpE,EAAA5C,sBAAsBK,IAC5B2F,OAAQhH,IAAMA,EAAEoC,MAAOpC,EAAEqC,UAGzByF,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBK,MAC/BxB,KAAM,QACNkI,KAAMpE,EAAA5C,sBAAsBI,IAC5B4F,OAAQhH,IAAMA,EAAEqE,SAGhByD,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBM,KAC/BzB,KAAM,UACNkI,KAAMpE,EAAA5C,sBAAsBI,IAC5B4F,OAAQhH,IAAMA,EAAEmpC,WAGhBlhC,OACEuC,IAAKvI,KAAKkC,MAAM8D,OAAS,GACzBnI,KAAM,cAERgI,MAAO,EACPhI,KAAM,UACNkH,OAAQhH,GAAKiC,KAAKiP,SAASykB,QAAQ1zB,KAAMjC,EAAGA,EAAEkR,YAG9CpJ,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBG,IAC/BtB,KAAM,QACNkI,KAAMpE,EAAA5C,sBAAsBO,KAC5ByF,OAAQhH,GAAKA,EAAEgiB,QAGfla,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBG,IAC/BtB,KAAM,QACNkI,KAAMpE,EAAA5C,sBAAsBI,IAC5B4F,OAAQhH,IAAMA,EAAE8M,SAGhBhF,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBI,IAC/BvB,KAAM,WACNkI,KAAMpE,EAAA5C,sBAAsBI,IAC5B4F,OAAQhH,IAAMA,EAAE4pC,YAGpB7iC,WAEIjH,KAAM,cACNkI,KAAMpE,EAAAnC,YAAYL,IAClB4F,OAASkjC,IAAiB,KAG9BviC,mBAKI7H,KAAM,WACNkI,KAAMpE,EAAAlC,oBAAoBJ,MAC1B0F,OAAS8gC,IAEPN,EAAeM,GAEfH,EAAaG,GACb,KAINlgC,YAAa,EACbC,GAAIxI,EAAQ,KAIhB8B,eACE,OACEkG,SAAU1D,EAAM2G,sBAChB/C,UAAW5D,EAAM6D,MAIrBrG,qBACE,OAAO0C,EAAAkkC,sBAAsByD,iDCtPjC,IAAIxyB,mDAQJpa,EAAA6sC,sBAIEtqC,4BAEE,MAAQ6X,GACN/W,KAAKikB,mBACC,IAAIC,QAAQrf,GAAWsf,WAAWtf,EAAS,KAOrD3F,oBAKE,OAJK6X,IACHA,EAASkD,SAASyL,cAAc,UAAUzB,WAAW,OAGhDlN,EAYT7X,0BACE+P,EACAxB,GAGA,MAAMqZ,EAAQ7X,EAAS6X,MAAM1O,QAExB0O,EAOA/P,EAOe,IAAhB+P,EAAM3mB,OAAgC,IAAjB2mB,EAAM1mB,QAQ/B2W,EAAOA,OAAO5W,MAAQ,IACtB4W,EAAOA,OAAO3W,OAAS,IAGvB2W,EAAO6O,UAAUkB,EAAO,EAAG,GAG3B7X,EAAS6V,cAAgB7V,EAAS6V,gBAChCC,SAAW3kB,OAAQ,EAAGD,MAAO,GAC7BuK,OAAStK,OAAQ,EAAGD,MAAO,IAI7B8O,EAAS6V,cAAcC,SACrB3kB,OAAQ0mB,EAAM1mB,OAAS6O,EAASxB,YAChCtN,MAAO2mB,EAAM3mB,MAAQ8O,EAASxB,aAGhCwB,EAAS6V,cAAcpa,OACrBtK,OAAQ0mB,EAAM1mB,OACdD,MAAO2mB,EAAM3mB,OAGf8O,EAAS6V,cAAcgC,MAAQA,GA9B7B3gB,QAAQC,KACN,yFARFD,QAAQC,KACN,2JARFD,QAAQC,KACN,4EAiDNlH,oBACE+P,GAQA,aALMjP,KAAK4mB,eAGX5mB,KAAKypC,mBAAmBx6B,EAAUA,EAASxB,aAEpCwB,EAMT/P,kBAAkB+P,GAIhB,OAFAjP,KAAKikB,aAEAlN,GASL/W,KAAKypC,mBAAmBx6B,EAAUA,EAASxB,aAEpCwB,IAVL9I,QAAQC,KACN,gFAEK6I,oFC3Hb,MAAApF,EAAAzM,EAAA,GACAssC,EAAAtsC,EAAA,IACAusC,EAAAvsC,EAAA,IACAwsC,EAAAxsC,EAAA,IACAysC,EAAAzsC,EAAA,IACAw1B,EAAAx1B,EAAA,IACA0sC,EAAA1sC,EAAA,IAEAgrB,EAAAhrB,EAAA,IAEM0vB,EAAQ1vB,EAAQ,GAARA,CAAiB,uBAEzB2sC,GACJznB,YAAa,EACbsF,SAAW3nB,EAAG,EAAGC,EAAG,GACpB2nB,SAAW5nB,EAAG,EAAGC,EAAG,GACpBsnB,iBAAkB,GAClBC,aAAc,KACdC,SAAWznB,EAAG,EAAGC,EAAG,GACpBynB,SAAW1nB,EAAG,EAAGC,EAAG,GACpB6nB,cAAe,EACfC,SAAS,EACTE,YAAa,EACbD,WAAY,EACZH,aAAc,GA2BhBnrB,EAAA8hC,mBAAAv/B,cAEEc,KAAAgqC,SAAW,IAAI1nC,IAcfpD,kBAAkBa,EAAwBqzB,GAExC,MAAMptB,EAAQ,IAAI0jC,EAAAphB,MAAMvoB,GAaxB,OAXAiG,EAAMikC,WAAWjqC,MAEjBA,KAAKgqC,SAASn+B,IAAI7F,EAAMsC,GAAItC,GAGxBotB,SACIpzB,KAAKwzB,YAAYxtB,EAAMsC,GAAI8qB,GAGnCtG,EAAM,qBAAsB9mB,GAErBA,EAMT9G,UACEc,KAAKgqC,SAAS/kC,QAAQ3G,GAASA,EAAMuF,WAQvC3E,aAAagrC,GACX,MAAMlkC,EAAQhG,KAAKgqC,SAAS5rC,IAAI8rC,GAE5BlkC,GACFA,EAAMnC,UAIF3E,gBAAgB4nB,EAAmBojB,GAEzC,OADApjB,EAAQ9oB,OAAOwE,OAAOskB,EAAOijB,GAAcviB,iBAAkB0iB,IAcvDhrC,WAAW8G,EAAciJ,GAC/B,MAAM8H,EAAS/Q,EAAM+e,QAAQ+B,MACvBojB,EAAYlkC,EAAMsC,GAGxB,IAAKtC,EAAMmkC,iBAAiBl7B,GAM1B,OALA9I,QAAQC,KACN,sGACAJ,EACAiJ,GAEKiV,QAAQrf,SAAQ,GAMzB,MAAMulC,QAA6CpqC,KAAKqqC,UAAUp7B,GAGlE,GAAIm7B,GAzGR,SAAsBtjB,GACpB,IAAIkB,GAAU,EAQd,OANIlB,GAASA,EAAMkB,SACblB,EAAMmB,YAAcnB,EAAMoB,cAC5BF,GAAU,GAIPA,EAgGcsiB,CAAar7B,EAAS8V,SAAU,CAEjD,MAAMD,EAAgB7V,EAAS6V,cACzBC,EAAU9V,EAAS8V,QASnBwlB,GACJC,MAAOzlB,EACP0lB,OATmB,IAAI5gC,EAAA/J,QACvBS,OAAQukB,EAAcC,QAAQ3kB,OAC9BC,KAAM,EACNG,MAAOskB,EAAcC,QAAQ5kB,MAC7BG,IAAK,KASPiqC,EAAWE,OAAOtqC,OAAS,EAC3BoqC,EAAWE,OAAOrqC,QAAU,EAE5B,MAEMsqC,EAFoB1kC,EAAMyiB,QAEckiB,OAAOJ,GAGrD,GAAIG,EAAc,CAChB5d,EAAM,gCAAiC4d,GAGvCA,EAAaE,UAAY7lB,EAGzB,MAAM8lB,EAAKH,EAAaI,eAAe7qC,EAAI+F,EAAM7F,MAC3C4qC,EAAKL,EAAaI,eAAe5qC,EAAI8F,EAAM5F,OAC3C4qC,EAAKN,EAAaI,eAAe3qC,MAAQ6F,EAAM7F,MAC/C8qC,EAAKP,EAAaI,eAAe1qC,OAAS4F,EAAM5F,OAChD8qC,EAAY,EAAIllC,EAAM7F,MAEtBgrC,EAA0B,IAAIthC,EAAA/J,QAClCS,OAAQ,EAAMwqC,EACd1qC,KAAMwqC,EACNrqC,MAAOqqC,EAAKG,EACZ1qC,IAAK,GAAOyqC,EAAKE,KAGb1qC,EAAS4qC,EAAgB5qC,OACzBD,EAAM6qC,EAAgBjrC,EACtBG,EAAO8qC,EAAgBlrC,EACvBO,EAAQ2qC,EAAgBlrC,EAAIkrC,EAAgBhrC,MAAQ+qC,EAsB1D,OApBAnmB,EAAQyC,iBAAmB0iB,EAC3BnlB,EAAQ2C,SAAYznB,EAAGI,EAAMH,EAAGI,GAChCykB,EAAQ8C,SAAY5nB,EAAGO,EAAON,EAAGK,GACjCwkB,EAAQ6C,SAAY3nB,EAAGI,EAAMH,EAAGK,GAChCwkB,EAAQ4C,SAAY1nB,EAAGO,EAAON,EAAGI,GACjCykB,EAAQ+C,aAAejnB,KAAKC,IAAIikB,EAAQ4C,QAAQ1nB,EAAI8kB,EAAQ2C,QAAQznB,GACpE8kB,EAAQgD,cAAgBlnB,KAAKC,IAAIikB,EAAQ4C,QAAQznB,EAAI6kB,EAAQ8C,QAAQ3nB,GACrE6kB,EAAQkD,WAAanD,EAAcC,QAAQ5kB,MAC3C4kB,EAAQmD,YAAcpD,EAAcC,QAAQ3kB,OAG5C2W,EACGkN,WAAW,MACX2B,UACCwkB,EACAM,EAAaI,eAAe7qC,EAC5ByqC,EAAaI,eAAe5qC,IAIzB,EAKP,OAFAiG,QAAQoK,MAAM,oCAAqCtB,GACnDA,EAAS8V,QAAU/kB,KAAKorC,gBAAgBn8B,EAAS8V,QAASmlB,IACnD,EAMT,OAFA/jC,QAAQoK,MAAM,2BAA4BtB,GAC1CA,EAAS8V,QAAU/kB,KAAKorC,gBAAgBn8B,EAAS8V,QAASmlB,IACnD,EASXhrC,gBAAgBgrC,GACd,OAAOlqC,KAAKgqC,SAAS5rC,IAAI8rC,GAWnBhrC,gBACN+P,GAEA,IAAIo8B,EAAmB,GAEvB,MAAMC,EAAar8B,EAAS8V,SAAW,IAAIqD,EAAAb,WAG3C,GAFAtY,EAAS8V,QAAUumB,EAEfr8B,aAAoB46B,EAAAhjB,mBAAoB,CAG1C,GAAI5X,EAAS6X,MAAM1O,QAAS,CAC1B,GACmC,IAAjCnJ,EAAS6X,MAAM1O,QAAQjY,OACW,IAAlC8O,EAAS6X,MAAM1O,QAAQhY,OACvB,CACA,MAAM0mB,EAAQ7X,EAAS6X,MAAM1O,QAK7B,OAJAkzB,EAAWrjB,WAAanB,EAAM3mB,MAC9BmrC,EAAWpjB,YAAcpB,EAAM1mB,OAC/BkrC,EAAWhpB,YAAcwE,EAAM3mB,MAAQ2mB,EAAM1mB,OAEtC0mB,EAwBT,aArBoB,IAAI5C,QACtB,CAACrf,EAAS0mC,KACR,MAAMzkB,EAAsC7X,EAAS6X,MAAM1O,QAEvD0O,GACFA,EAAM0kB,OAAS,WACbF,EAAWrjB,WAAanB,EAAM3mB,MAC9BmrC,EAAWpjB,YAAcpB,EAAM1mB,OAC/BkrC,EAAWhpB,YAAcwE,EAAM3mB,MAAQ2mB,EAAM1mB,OAC7CyE,EAAQiiB,IAGVA,EAAM2kB,QAAU,WACd5mC,EAAQ,QAGVA,EAAQ,QASPoK,EAAS6X,MAAM4kB,OACtBL,EAAWp8B,EAAS6X,MAAM4kB,WAEnBz8B,aAAoB2jB,EAAAtlB,oBAExB2B,EAAS6V,cAAc/N,cACpB+yB,EAAA9lB,gBAAgB4b,OAAO3wB,GAI3BA,EAAS6V,cAAc/N,QACzB+V,EAAM,sBAAuB7d,EAAS6V,eACtCumB,EAAWp8B,EAAS6V,cAAc/N,OAAO40B,UAAU,cAEnDxlC,QAAQC,KAAK,4CAEN6I,aAAoB06B,EAAAriB,qBAExBrY,EAAS6V,cAAc/N,cACpB6yB,EAAA5iB,gBAAgB4Y,OAAO3wB,GAI3BA,EAAS6V,cAAc/N,QACzB+V,EAAM,sBAAuB7d,EAAS6V,eACtCumB,EAAWp8B,EAAS6V,cAAc/N,OAAO40B,UAAU,cAEnDxlC,QAAQC,KAAK,4CAIjB,OAAIilC,QACkB,IAAInnB,QACtB,CAACrf,EAAS0mC,KACR,MAAMzkB,EAA0B,IAAI8kB,MAEpC9kB,EAAM0kB,OAAS,WACbF,EAAWrjB,WAAanB,EAAM3mB,MAC9BmrC,EAAWpjB,YAAcpB,EAAM1mB,OAC/BkrC,EAAWhpB,YAAcwE,EAAM3mB,MAAQ2mB,EAAM1mB,OAC7CyE,EAAQiiB,IAGVA,EAAM2kB,QAAU,WACd5mC,EAAQ,OAGViiB,EAAM+kB,IAAMR,IAOX,KASTnsC,kBAAkBgrC,EAAmB9W,GACnC,MAAMptB,EAAQhG,KAAKgqC,SAAS5rC,IAAI8rC,GAEhC,GAAIlkC,EAAO,CACT,IAAK,MAAMiJ,KAAYmkB,QACfpzB,KAAKw/B,KAAKx5B,EAAOiJ,GAIzBjJ,EAAM2iB,qBAENxiB,QAAQC,KACN,qCACA8jC,EACA,sCACA9W,oFClXR,MAAAvpB,EAAAzM,EAAA,SAiBAsrB,EAMExpB,YAAYe,EAAWC,EAAWC,EAAeC,GALjDJ,KAAA40B,OAA6C,KAAM,MACnD50B,KAAA8rC,QAAkB,EAElB9rC,KAAA4qC,UAA+B,KAG7B5qC,KAAK8qC,eAAiB,IAAIjhC,EAAA/J,QACxBM,SACAD,QACAF,IACAC,MAOJhB,UACE,MAAM6sC,EAAS/rC,KAAK40B,MAAM,GACpBoX,EAAShsC,KAAK40B,MAAM,GAC1B50B,KAAK4qC,UAAY,KACbmB,GACFA,EAAOloC,UAELmoC,GACFA,EAAOnoC,UAET7D,KAAK40B,MAAM,GAAK,KAChB50B,KAAK40B,MAAM,GAAK,KAMlB11B,WACE,MAAM6sC,EAAS/rC,KAAK40B,MAAM,GACpBoX,EAAShsC,KAAK40B,MAAM,GAC1B,OAAImX,IAAWA,EAAOnB,WACZmB,EAAOD,UAEbE,GAAWA,EAAOpB,aACZoB,EAAOF,OAQnB5sC,OAAO4nB,GACL,IAAIilB,EAAS/rC,KAAK40B,MAAM,GACpBoX,EAAShsC,KAAK40B,MAAM,GAExB,IAAK50B,KAAK8rC,QAAUC,GAAUC,EAAQ,CAEpC,MAAMC,EAA2BF,EAAOpB,OAAO7jB,GAC/C,OAAgB,OAAZmlB,EACKA,EAGFD,EAAOrB,OAAO7jB,GAChB,CAEL,GAAI9mB,KAAK4qC,UACP,OAAO,KAGT,MAAMsB,EAAkBlsC,KAAK8qC,eAAeqB,KAAKrlB,EAAM2jB,QAEvD,GAAgB,IAAZyB,EACF,OAAO,KAGT,GAAgB,IAAZA,EACF,OAAOlsC,KAITA,KAAK8rC,QAAS,EAEd,MAAMM,EAAmBtlB,EAAM2jB,OAAOtqC,MAChCksC,EAAoBvlB,EAAM2jB,OAAOrqC,OAEjCksC,EAAiBtsC,KAAK8qC,eAAe3qC,MAAQisC,EAC7CG,EAAkBvsC,KAAK8qC,eAAe1qC,OAAS0mB,EAAM2jB,OAAOrqC,OAE9DksC,EAASC,GACXR,EAAS/rC,KAAK40B,MAAM,GAAK,IAAIlM,EAC3B1oB,KAAK8qC,eAAe7qC,EACpBD,KAAK8qC,eAAe5qC,EACpBksC,EACApsC,KAAK8qC,eAAe1qC,QAEtB4rC,EAAShsC,KAAK40B,MAAM,GAAK,IAAIlM,EAC3B1oB,KAAK8qC,eAAe7qC,EAAImsC,EACxBpsC,KAAK8qC,eAAe5qC,EACpBosC,EACAtsC,KAAK8qC,eAAe1qC,UAGtB2rC,EAAS/rC,KAAK40B,MAAM,GAAK,IAAIlM,EAC3B1oB,KAAK8qC,eAAe7qC,EACpBD,KAAK8qC,eAAe5qC,EACpBF,KAAK8qC,eAAe3qC,MACpBksC,GAEFL,EAAShsC,KAAK40B,MAAM,GAAK,IAAIlM,EAC3B1oB,KAAK8qC,eAAe7qC,EACpBD,KAAK8qC,eAAe5qC,EAAImsC,EACxBrsC,KAAK8qC,eAAe3qC,MACpBosC,IAMN,OAAOR,EAAOpB,OAAO7jB,GAQvB5nB,OAAO4nB,GACL,MAAMilB,EAAS/rC,KAAK40B,MAAM,GACpBoX,EAAShsC,KAAK40B,MAAM,GAE1B,GAAIoX,GAAUD,IAAW/rC,KAAK8rC,OAAQ,CAEpC,IAAIU,EAAmBT,EAAOziC,OAAOwd,GACrC,QAAI0lB,IAIJA,EAAUR,EAAO1iC,OAAOwd,GAEnBilB,EAAOU,YACLT,EAAOS,aACVzsC,KAAK40B,MAAM,GAAK,KAChB50B,KAAK40B,MAAM,GAAK,MAIb4X,GAEP,OAAIxsC,KAAK4qC,YAAc9jB,IACrB9mB,KAAK4qC,UAAY,YACV9jB,EAAMU,iBACbV,EAAMmB,WAAa,GACZ,IAvJftrB,EAAA+rB,2bCjBA,MAAAsd,EAAA5oC,EAAA,GACA8qC,EAAA9qC,EAAA,IAEA6gC,EAAA7gC,EAAA,IACAuE,EAAAvE,EAAA,IAEMsW,IAAEA,GAAQ7S,KAuCVsnC,EAAsB,IAAI7lC,IAS1B6jC,GAGJjnC,CAACyC,EAAAX,WAAWolC,SAAU,CAACC,EAAgBvf,KACrCuf,EAAOpmC,GAAKomC,EAAOE,QACnBF,EAAOnmC,GAAKmmC,EAAOE,SAErBrnC,CAACyC,EAAAX,WAAWwlC,WAAY,CAACH,EAAgBvf,KACvCuf,EAAOpmC,EAAI6mB,EAAM3mB,MAAQ,EACzBkmC,EAAOnmC,GAAKmmC,EAAOE,SAErBrnC,CAACyC,EAAAX,WAAWylC,UAAW,CAACJ,EAAgBvf,KACtCuf,EAAOpmC,EAAI6mB,EAAM3mB,MAAQkmC,EAAOE,QAChCF,EAAOnmC,GAAKmmC,EAAOE,SAErBrnC,CAACyC,EAAAX,WAAW0lC,YAAa,CAACL,EAAgBvf,KACxCuf,EAAOpmC,GAAKomC,EAAOE,QACnBF,EAAOnmC,EAAI4mB,EAAM1mB,OAAS,GAE5BlB,CAACyC,EAAAX,WAAW2lC,QAAS,CAACN,EAAgBvf,KACpCuf,EAAOpmC,EAAI6mB,EAAM3mB,MAAQ,EACzBkmC,EAAOnmC,EAAI4mB,EAAM1mB,OAAS,GAE5BlB,CAACyC,EAAAX,WAAW4lC,aAAc,CAACP,EAAgBvf,KACzCuf,EAAOpmC,EAAI6mB,EAAM3mB,MAAQkmC,EAAOE,QAChCF,EAAOnmC,EAAI4mB,EAAM1mB,OAAS,GAE5BlB,CAACyC,EAAAX,WAAW6lC,YAAa,CAACR,EAAgBvf,KACxCuf,EAAOpmC,GAAKomC,EAAOE,QACnBF,EAAOnmC,EAAI4mB,EAAM1mB,OAASimC,EAAOE,SAEnCrnC,CAACyC,EAAAX,WAAW8lC,cAAe,CAACT,EAAgBvf,KAC1Cuf,EAAOpmC,EAAI6mB,EAAM3mB,MAAQ,EACzBkmC,EAAOnmC,EAAI4mB,EAAM1mB,OAASimC,EAAOE,SAEnCrnC,CAACyC,EAAAX,WAAW+lC,aAAc,CAACV,EAAgBvf,KACzCuf,EAAOpmC,EAAI6mB,EAAM3mB,MAAQkmC,EAAOE,QAChCF,EAAOnmC,EAAI4mB,EAAM1mB,OAASimC,EAAOE,SAEnCrnC,CAACyC,EAAAX,WAAWgmC,QAAS,CAACX,EAAgBvf,KACpCuf,EAAOpmC,EAAIomC,EAAOpmC,GAAK,EACvBomC,EAAOnmC,EAAImmC,EAAOnmC,GAAK,UAkB3BggC,UAAmCgI,EAAAx/B,SA2FjCxJ,YAAYa,GACVoC,MAAMpC,GAlFIC,KAAA0sC,MAA0C,EAAG,EAAG,EAAG,GAEnD1sC,KAAAoC,MAAgB,EAEhBpC,KAAAI,OAAiB,EAEjBJ,KAAAknC,QAAqBvlC,EAAAV,UAAUkmC,UAE/BnnC,KAAAG,MAAgB,EAEhBH,KAAAC,EAAY,EAEZD,KAAAE,EAAY,EAehBF,KAAA2sC,aAAuB,EACvB3sC,KAAA4sC,cAAwB,EACxB5sC,KAAA6oC,cAAwB,EA6CxB7oC,KAAAonC,SACNb,QAAS,EACTnjC,KAAMzB,EAAAX,WAAWolC,QACjBnmC,EAAG,EACHC,EAAG,GAMHF,KAAKoC,MAAQrC,EAAQqC,OAASpC,KAAKoC,MACnCpC,KAAK0sC,KAAO3sC,EAAQ2sC,MAAQ1sC,KAAK0sC,KACjC1sC,KAAKknC,QAAUnnC,EAAQmnC,SAAWlnC,KAAKknC,QACvClnC,KAAKC,EAAIF,EAAQE,GAAKD,KAAKC,EAC3BD,KAAKE,EAAIH,EAAQG,GAAKF,KAAKE,EAG3BF,KAAK6sC,SAAW9sC,EAAQqY,QAExB,IAAI0M,EAAgBqjB,EAAoB/pC,IAAI4B,KAAK8sC,OAAS9sC,KAAK6sC,UAG3D/nB,GACFA,EAAcmkB,aAIXnkB,KACHA,GACEmkB,WAAY,EACZh6B,SAAU,IAAIgvB,EAAApX,mBAAmB7mB,QAIrBiP,SAASxB,YACrBqX,EAAc7V,SAASxB,aAAe,EAGxCwwB,EAAAuL,gBAAgBN,WAAWpkB,EAAc7V,UAGzCk5B,EAAoBt8B,IAAI7L,KAAK8sC,OAAS9sC,KAAK6sC,SAAU/nB,IAGvD9kB,KAAKmpC,eAAiBrkB,EACtB9kB,KAAK2sC,aAAe7nB,EAAc7V,SAAS6V,cAAcpa,MAAMvK,MAC/DH,KAAK4sC,cAAgB9nB,EAAc7V,SAAS6V,cAAcpa,MAAMtK,OAEhEJ,KAAKG,MAAQJ,EAAQI,OAASH,KAAK2sC,cAAgB,EACnD3sC,KAAKI,OAASL,EAAQK,QAAUJ,KAAK4sC,eAAiB,EAGtD7sC,EAAQsmC,QAAUrmC,KAAKqnC,UAAUtnC,EAAQsmC,QAnI3CnnC,iBACEipC,EAAoB5V,QAkBtBxsB,WACE,OAAO2N,EAAI1T,KAAKG,MAAOH,KAAKI,QAE9B2F,SAASzH,GACP,MAAMyuC,EAAS/sC,KAAKG,MAAQH,KAAKI,OACjCJ,KAAKG,MAAQ7B,EAAQyuC,EACrB/sC,KAAKI,OAAS9B,EAkBhB8Z,cACE,OAAOpY,KAAK6sC,SAGdxD,kBACE,OAAOrpC,KAAK6oC,aAGd6C,WACE,OAAO1rC,KAAK8sC,MAGd79B,eACE,OAAOjP,KAAKmpC,eAAel6B,SAO7B+9B,kBACE,OAAOhtC,KAAK2sC,aAOdM,mBACE,OAAOjtC,KAAK4sC,cA8DdvG,aACE,OAAOrmC,KAAKonC,QAOdloC,UACOc,KAAK6oC,eACR7oC,KAAK6oC,cAAe,EACpB7oC,KAAKmpC,eAAeF,aAGmB,IAAnCjpC,KAAKmpC,eAAeF,aACtBjpC,KAAKmpC,eAAel6B,SACpB9I,QAAQC,KAAK,+CAKnBlH,kBAEEc,KAAKmpC,eAAiBnpC,KAAKmpC,eAM7BjqC,UAAUmnC,GACR,MAAMiB,GACJf,QAASF,EAAOE,SAAW,EAC3BnjC,KAAMijC,EAAOjjC,KACbnD,EAAGomC,EAAOpmC,GAAK,EACfC,EAAGmmC,EAAOnmC,GAAK,GAIjBimC,EAAiBmB,EAAUlkC,MAAMkkC,EAAWtnC,MAE5CA,KAAKonC,QAAUE,GAzKL59B,GAAXs8B,EAAAr8B,uCAEWD,GAAXs8B,EAAAr8B,wCAEWD,GAAXs8B,EAAAr8B,yCAEWD,GAAXs8B,EAAAr8B,0CAEWD,GAAXs8B,EAAAr8B,wCAEWD,GAAXs8B,EAAAr8B,oCAEWD,GAAXs8B,EAAAr8B,oCAkBWD,GAAXs8B,EAAAr8B,iDA4CDD,GADCs8B,EAAAr8B,0CAnFHhN,EAAAujC,+BCjHAtjC,EAAAD,QAAA,8oFCAAC,EAAAD,QAAA,4SCAA,MAAA+E,EAAAtE,EAAA,GACA6nC,EAAA7nC,EAAA,GACA8nC,EAAA9nC,EAAA,GAMAuE,EAAAvE,EAAA,GASAwE,EAAAxE,EAAA,GACAmqC,EAAAnqC,EAAA,IAGMqW,IAAEA,EAAGC,IAAEA,GAAQ7S,KAUrBlE,EAAAuwC,yBAAgChI,EAAAljC,MAK9B9C,4BACE,OAEEiE,eAAiB2jB,IACf,MAAM2gB,GAAgB,EAAG,GAErB3gB,EAAMuf,SACRoB,EAAa,GAAK3gB,EAAMuf,OAAOpmC,GAAK,EACpCwnC,EAAa,GAAK3gB,EAAMuf,OAAOnmC,GAAK,GAGtC,MAAM8hC,GAAWlb,EAAM7mB,EAAIwnC,EAAa,GAAI3gB,EAAM5mB,EAAIunC,EAAa,IAEnE,OAAO,IAAIxC,EAAAnlC,QACTM,OAAQ0mB,EAAM1mB,OACdD,MAAO2mB,EAAM3mB,MACbF,EAAG+hC,EAAQ,GACX9hC,EAAG8hC,EAAQ,MAKfh/B,QAAS,CAAC8jB,EAAsBnmB,EAAe6J,KAG7C,MAAMm9B,EAAWj0B,KAAOlJ,EAAKG,OAAOE,OAC9B+8B,EAAWn0B,KAAOjJ,EAAKG,OAAOE,OAGpC,GAAIic,EAAMogB,UAAYK,EAAAtmC,UAAU4mC,OAC9B,OAAO,EAKJ,GAAI/gB,EAAMogB,UAAYK,EAAAtmC,UAAUkmC,UAAW,CAE9C,GAAIS,GAAY,GAAKD,GAAY,EAC/B,OAAO,EAIJ,CAEH,MAAMF,GAAgB,EAAG,GAErB3gB,EAAMuf,SACRoB,EAAa,GAAK3gB,EAAMuf,OAAOpmC,GAAK,EACpCwnC,EAAa,GAAK3gB,EAAMuf,OAAOnmC,GAAK,GAGtC,MAAM8hC,EAAUx3B,EAAKu9B,eACnB9nC,EAAG6mB,EAAM7mB,EAAIwnC,EAAa,GAAKj9B,EAAKG,OAAOE,MAAM,GACjD3K,EAAG4mB,EAAM5mB,EAAIunC,EAAa,GAAKj9B,EAAKG,OAAOE,MAAM,KAG7Cm9B,EAAcx9B,EAAKu9B,cAAcpnC,GAGvC,OAAO,IAAIskC,EAAAnlC,QACTM,OAAQ0mB,EAAM1mB,OACdD,MAAO2mB,EAAM3mB,MACbF,EAAG+hC,EAAQ/hC,EACXC,EAAG8hC,EAAQ9hC,IACVy1B,cAAcqS,IAMhB,GAAIlhB,EAAMogB,UAAYK,EAAAtmC,UAAU6mC,MAAO,CAE1C,MAAML,GAAgB,EAAG,GAErB3gB,EAAMuf,SACRoB,EAAa,GAAK3gB,EAAMuf,OAAOpmC,GAAK,EACpCwnC,EAAa,GAAK3gB,EAAMuf,OAAOnmC,GAAK,GAGtC,MAAM8hC,EAAUx3B,EAAKu9B,eACnB9nC,EAAG6mB,EAAM7mB,EAAIwnC,EAAa,GAAKj9B,EAAKG,OAAOE,MAAM,GACjD3K,EAAG4mB,EAAM5mB,EAAIunC,EAAa,GAAKj9B,EAAKG,OAAOE,MAAM,KAG7Cm9B,EAAcx9B,EAAKu9B,cAAcpnC,GAGvC,OAAO,IAAIskC,EAAAnlC,QACTM,OAAQ0mB,EAAM1mB,OACdD,MAAO2mB,EAAM3mB,MACbF,EAAG+hC,EAAQ/hC,EACXC,EAAG8hC,EAAQ9hC,IACVy1B,cAAcqS,GAGnB,OAAO,IAQb9oC,aACE,MAAMqmC,GACJC,EAAG,EACH1M,EAAG,EACHC,GAAI,EACJC,EAAG,EACHC,GAAI,EACJwM,GAAI,GAGAC,GACJF,EAAG,EACH1M,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHwM,EAAG,GAGL,OACEjgC,GAAIpI,EAAQ,IACZqI,qBAEII,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBG,IAC/BtB,KAAM,WACNkI,KAAMpE,EAAA5C,sBAAsBK,IAC5B2F,OAAQhH,IAAMA,EAAEkC,EAAGlC,EAAEmC,KAGrB2F,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBK,MAC/BxB,KAAM,SACNkI,KAAMpE,EAAA5C,sBAAsBK,IAC5B2F,OAAQhH,IAAMA,EAAEsoC,OAAOpmC,GAAK,EAAGlC,EAAEsoC,OAAOnmC,GAAK,KAG7C2F,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBG,IAC/BtB,KAAM,OACNkI,KAAMpE,EAAA5C,sBAAsBK,IAC5B2F,OAAQhH,IAAMA,EAAEoC,MAAOpC,EAAEqC,UAGzByF,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBK,MAC/BxB,KAAM,QACNkI,KAAMpE,EAAA5C,sBAAsBI,IAC5B4F,OAAQhH,IAAMA,EAAEqE,SAGhByD,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBM,KAC/BzB,KAAM,UACNkI,KAAMpE,EAAA5C,sBAAsBI,IAC5B4F,OAAQhH,IAAMA,EAAEmpC,WAGhBlhC,OACEuC,IAAKvI,KAAKkC,MAAM8D,OAAS,GACzBnI,KAAM,cAERgI,MAAO,EACPhI,KAAM,UACNkH,OAAQhH,GAAKiC,KAAKiP,SAASykB,QAAQ1zB,KAAMjC,EAAGA,EAAEkR,YAG9CpJ,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBG,IAC/BtB,KAAM,OACNkI,KAAMpE,EAAA5C,sBAAsBO,KAC5ByF,OAAQhH,GAAKA,EAAE2uC,OAGnB5nC,WAEIjH,KAAM,cACNkI,KAAMpE,EAAAnC,YAAYL,IAClB4F,OAASkjC,IAAiB,KAG9BviC,mBAKI7H,KAAM,WACNkI,KAAMpE,EAAAlC,oBAAoBJ,MAC1B0F,OAAS8gC,IAEPN,EAAeM,GAEfH,EAAaG,GACb,KAINlgC,YAAa,EACbC,GAAIxI,EAAQ,KAIhB8B,eACE,OACEkG,SAAU1D,EAAM2G,sBAChB/C,UAAW5D,EAAM6D,MAIrBrG,qBACE,OAAO0C,EAAAkkC,sBAAsByD,mcCzPjC,MAAAvD,EAAA5oC,EAAA,SA2BA+vC,UAAkCnH,EAAAt9B,SAqDhCxJ,YAAYa,GACVoC,MAAMpC,GArDIC,KAAAotC,YAAyB,EAAK,EAAK,EAAK,GACxCptC,KAAAqtC,UAAuB,EAAK,EAAK,EAAK,GACtCrtC,KAAAstC,UAAgC,EAAG,IAAK,EAAG,IAC3CttC,KAAAoC,MAAgB,EAChBpC,KAAAwE,KAAyB,EAAG,GAC5BxE,KAAA8O,OAA2B,EAAG,GAC9B9O,KAAAutC,WAAqB,EACrBvtC,KAAAwtC,SAAmB,EA+C7BxtC,KAAKotC,WAAartC,EAAQqtC,YAAcptC,KAAKotC,WAC7CptC,KAAKqtC,SAAWttC,EAAQstC,UAAYrtC,KAAKqtC,SACzCrtC,KAAKstC,QAAUvtC,EAAQutC,SAAWttC,KAAKstC,QACvCttC,KAAKoC,MAAQrC,EAAQqC,OAASpC,KAAKoC,MACnCpC,KAAKwE,IAAMzE,EAAQyE,KAAOxE,KAAKwE,IAC/BxE,KAAKutC,WAAaxtC,EAAQwtC,YAAcvtC,KAAKutC,WAC7CvtC,KAAKwtC,SAAWztC,EAAQytC,UAAYxtC,KAAKwtC,SACzCxtC,KAAK8O,MAAQ/O,EAAQ+O,OAAS9O,KAAK8O,MApDrCrK,aACE,MAAMyV,GAASla,KAAKwE,IAAI,GAAKxE,KAAK8O,MAAM,GAAI9O,KAAKwE,IAAI,GAAKxE,KAAK8O,MAAM,IAErE,OAAOjO,KAAKkQ,KAAKmJ,EAAM,GAAKA,EAAM,GAAKA,EAAM,GAAKA,EAAM,IAM1DuzB,eACE,OAAO,EAMTC,oBACE,MAAMjpC,EAASzE,KAAKyE,OAEpB,QACGzE,KAAKwE,IAAI,GAAKxE,KAAK8O,MAAM,IAAMrK,IAC9BzE,KAAKwE,IAAI,GAAKxE,KAAK8O,MAAM,IAAMrK,GAOrCvF,aAAaiB,GACPA,IACFH,KAAKwtC,SAAWrtC,EAChBH,KAAKutC,WAAaptC,GAOtBjB,SAAS6gB,GACP/f,KAAKotC,WAAartB,EAClB/f,KAAKqtC,SAAWttB,GAjDNrW,GAAXs8B,EAAAr8B,6CACWD,GAAXs8B,EAAAr8B,2CACWD,GAAXs8B,EAAAr8B,0CACWD,GAAXs8B,EAAAr8B,wCACWD,GAAXs8B,EAAAr8B,sCACWD,GAAXs8B,EAAAr8B,wCACWD,GAAXs8B,EAAAr8B,6CACWD,GAAXs8B,EAAAr8B,2CARHhN,EAAAwwC,8BC3BAvwC,EAAAD,QAAA,iICAAC,EAAAD,QAAA,8oFCAAC,EAAAD,QAAA,ojECAAC,EAAAD,QAAA,ihBCAAC,EAAAD,QAAA,4dCAAC,EAAAD,QAAA,4eCKA,MAAAkN,EAAAzM,EAAA,GAGAoW,EAAApW,EAAA,IAUAuE,EAAAvE,EAAA,KACMuW,IAAEA,GAAQ9S,KAwChB,MAAM8sC,GACJzuC,CAACyC,EAAAgM,SAASigC,MA9BZ,SAAgBr8B,EAAWs8B,EAAUC,EAAUC,EAAUC,GACvD,OAAOx6B,EAAA/B,KAAK+B,EAAA9B,OAAO8B,EAAA7B,UAAUm8B,EAAID,GAAKt8B,GAAIs8B,IA8B1C3uC,CAACyC,EAAAgM,SAASsgC,QA1BZ,SAAgB18B,EAAWs8B,EAAUC,EAAUC,EAAUC,GACvD,QACG,EAAMz8B,IAAM,EAAMA,GAAKs8B,EAAG,GAAK,EAAMt8B,GAAK,EAAMA,GAAKw8B,EAAG,GAAKx8B,EAAIA,EAAIu8B,EAAG,IACxE,EAAMv8B,IAAM,EAAMA,GAAKs8B,EAAG,GAAK,EAAMt8B,GAAK,EAAMA,GAAKw8B,EAAG,GAAKx8B,EAAIA,EAAIu8B,EAAG,KAwB3E5uC,CAACyC,EAAAgM,SAASugC,SAnBZ,SAAiB38B,EAAWs8B,EAAUC,EAAUC,EAAUC,GACxD,MAAM/3B,EAAK,EAAM1E,EAEjB,OACEoC,EAAIsC,EAAI,GAAO43B,EAAG,GAChB,EAAMt8B,EAAIoC,EAAIsC,EAAI,GAAO83B,EAAG,GAC5B,EAAMp6B,EAAIpC,EAAG,GAAO0E,EAAK+3B,EAAG,GAC5Br6B,EAAIpC,EAAG,GAAOu8B,EAAG,GACnBn6B,EAAIsC,EAAI,GAAO43B,EAAG,GAChB,EAAMt8B,EAAIoC,EAAIsC,EAAI,GAAO83B,EAAG,GAC5B,EAAMp6B,EAAIpC,EAAG,GAAO0E,EAAK+3B,EAAG,GAC5Br6B,EAAIpC,EAAG,GAAOu8B,EAAG,MAYvB,SAAAK,EAAuBxtC,GACrB,OACEV,EAAGU,EAAM,GACTT,EAAGS,EAAM,IAKb,SAAAytC,EAAsBztC,GACpB,OAAQA,EAAMV,EAAGU,EAAMT,GAiBzB,MAAMmuC,EAAkB,GAKxB1xC,EAAA2xC,YAAA,SACEpsC,GAEA,MAAMqsC,WAAEA,EAAUC,gBAAEA,EAAkB,EAACC,UAAEA,EAASrrC,KAAEA,GAASlB,EACvDwsC,EAAcf,EAAczrC,EAAMkB,MAElCD,EAAkBwrC,IACtB,MAAMC,EAAiBD,EAAKpB,WAAa,EAAIiB,EACvCK,EAAeF,EAAKnB,SAAW,EAAIgB,EAGnCztC,EAAS,IAAI8I,EAAA/J,QACjBM,OAAQuuC,EAAKpB,WACbptC,MAAOwuC,EAAKpB,WACZttC,EAAG0uC,EAAK7/B,MAAM,GAAK8/B,EACnB1uC,EAAGyuC,EAAK7/B,MAAM,GAAK8/B,IA2CrB,OAxCA7tC,EAAOm0B,YACL,IAAIrrB,EAAA/J,QACFM,OAAQuuC,EAAKnB,SACbrtC,MAAOwuC,EAAKnB,SACZvtC,EAAG0uC,EAAKnqC,IAAI,GAAKqqC,EACjB3uC,EAAGyuC,EAAKnqC,IAAI,GAAKqqC,KAKjB3sC,EAAMkB,OAASzB,EAAAgM,SAASsgC,OAC1BltC,EAAOm0B,aACLj1B,EAAG0uC,EAAKrB,QAAQ,GAAG,GACnBptC,EAAGyuC,EAAKrB,QAAQ,GAAG,KAKdprC,EAAMkB,OAASzB,EAAAgM,SAASugC,UAC/BntC,EAAOm0B,aACLj1B,EAAG0uC,EAAKrB,QAAQ,GAAG,GACnBptC,EAAGyuC,EAAKrB,QAAQ,GAAG,KAGrBvsC,EAAOm0B,aACLj1B,EAAG0uC,EAAKrB,QAAQ,GAAG,GACnBptC,EAAGyuC,EAAKrB,QAAQ,GAAG,MAInBiB,IAAe5sC,EAAAiM,eAAekhC,SAChC/tC,EAAOd,EAAIwmB,OAAOE,iBAAmB,EACrC5lB,EAAOZ,MAAQsmB,OAAOC,kBAGpB6nB,IAAe5sC,EAAAiM,eAAemhC,SAChChuC,EAAOb,EAAIumB,OAAOE,iBAAmB,EACrC5lB,EAAOX,OAASqmB,OAAOC,kBAGlB3lB,GAGT,OAAI0tC,IAAc9sC,EAAA+L,cAAcshC,cAG5B7rC,iBAIAH,QAAS,CAAC2rC,EAAoBhuC,EAAe6J,KAE3C,MAAM8M,IADN3W,EAAQ6J,EAAKu9B,cAAcpnC,IACAV,EAAGU,EAAMT,GACpC,IAAI+uC,EAAe,EACfC,EAAkBzoB,OAAOwO,UACzBka,EAAqB,EACrBC,EAAwB3oB,OAAOwO,UAEnC,MAAMnmB,EAAQtE,EAAKu9B,cAAcoG,EAAcQ,EAAK7/B,QAC9CtK,EAAMgG,EAAKu9B,cAAcoG,EAAcQ,EAAKnqC,MAClD,IAAI6qC,GAAkB,EAAG,GACrBC,GAAkB,EAAG,GAErBlsC,IAASzB,EAAAgM,SAASsgC,OACpBoB,EAAW77B,EAAA/B,KAAK28B,EAAat/B,GAAQ6/B,EAAKrB,QAAQ,IACzClqC,IAASzB,EAAAgM,SAASugC,UAC3BmB,EAAW77B,EAAA/B,KAAK28B,EAAat/B,GAAQ6/B,EAAKrB,QAAQ,IAClDgC,EAAW97B,EAAA/B,KAAK28B,EAAa5pC,GAAMmqC,EAAKrB,QAAQ,KAGlD,MAAMiC,EAAanB,EAAat/B,GAC1B0gC,EAAWpB,EAAa5pC,GAE9B6qC,EAAWV,EAAKrB,QAAQ7oC,OAAS,EAAI4qC,GAAY,EAAG,GACpDC,EAAWX,EAAKrB,QAAQ7oC,OAAS,EAAI6qC,GAAY,EAAG,GAGpD,IAAK,IAAIhyC,EAAI,EAAGA,EAAI+wC,IAAmB/wC,EAAG,CACxC,MAAMmyC,EAAYf,EAChBpxC,EAAI+wC,EACJkB,EACAC,EACAH,EACAC,GAEInX,EAAW3kB,EAAAzB,QAAQyB,EAAA7B,UAAU2F,EAAOm4B,IAEtCtX,EAAW+W,GACbC,EAAqBF,EACrBG,EAAwBF,EACxBD,EAAe3xC,EACf4xC,EAAkB/W,GACTA,EAAWiX,IACpBD,EAAqB7xC,EACrB4xC,EAAkB/W,GAItB,MAAM5mB,EAAI09B,EAAeZ,EACnBqB,GACHf,EAAKnB,SAAWmB,EAAKpB,YAAch8B,EAAIo9B,EAAKpB,WAE/C,GAAI0B,IAAiBE,EACnB,OAAO,EAGT,MAAMQ,EAAejB,EACnBO,EAAeZ,EACfkB,EACAC,EACAH,EACAC,GAGIM,EAAalB,EACjBS,EAAqBd,EACrBkB,EACAC,EACAH,EACAC,GAQF,OAHAJ,EAhKR,SAAoBpgC,EAAatK,EAAW3F,GAE1C,MAAMgxC,EAAer8B,EAAA7B,UAAU7C,EAAOjQ,GAChCixC,EAAsBt8B,EAAA7B,UAAUnN,EAAKsK,GACrCihC,GAAoBD,EAAc,IAAKA,EAAc,IAK3D,OAHEjvC,KAAKC,IAAI0S,EAAA3B,KAAKg+B,EAAQE,IAAev8B,EAAAzB,QAAQ+9B,GA0JvBE,CAAWL,EAAcC,EAAYt4B,KAIrD9D,EAAA3B,KACE2B,EAAA7B,UAAUi+B,EAAYD,GACtBn8B,EAAA7B,UAAU2F,EAAOq4B,IACf,IAKCT,EAAkBQ,EAAY,EAAMlB,KAO/CrrC,iBAGAH,QAAS,CAAC2rC,EAAoBhuC,EAAe6J,KAC3C,MAAM8M,GAA2B3W,EAAMV,EAAGU,EAAMT,GAChD,IAAI+uC,EAAe,EACfC,EAAkBzoB,OAAOwO,UAG7B,IAAK,IAAI33B,EAAI,EAAGA,EAAI+wC,IAAmB/wC,EAAG,CACxC,MAAMmyC,EAAYf,EAChBpxC,EAAI+wC,EACJM,EAAK7/B,MACL6/B,EAAKnqC,IACLmqC,EAAKrB,QAAQ7oC,OAAS,EAAIkqC,EAAKrB,QAAQ,IAAM,EAAG,GAChDqB,EAAKrB,QAAQ7oC,OAAS,EAAIkqC,EAAKrB,QAAQ,IAAM,EAAG,IAE5CnV,EAAW3kB,EAAAzB,QAAQyB,EAAA7B,UAAU2F,EAAOm4B,IAEtCtX,EAAW+W,IACbD,EAAe3xC,EACf4xC,EAAkB/W,GAItB,MAAM5mB,EAAI09B,EAAeZ,EAGzB,OAAOa,IAFYP,EAAKnB,SAAWmB,EAAKpB,YAAch8B,EAAIo9B,EAAKpB,YAE1B,oFC9R3C,MAAA7rC,EAAAtE,EAAA,GACA4oC,EAAA5oC,EAAA,GACA8nC,EAAA9nC,EAAA,GAOAuE,EAAAvE,EAAA,GASAwE,EAAAxE,EAAA,GAEA6yC,EAAA7yC,EAAA,IACAmqC,EAAAnqC,EAAA,IA0BA,MAAM8yC,GACJhxC,CAACqoC,EAAA55B,SAASigC,MAAOxwC,EAAQ,IACzB8B,CAACqoC,EAAA55B,SAASsgC,QAAS7wC,EAAQ,IAC3B8B,CAACqoC,EAAA55B,SAASugC,SAAU9wC,EAAQ,KAIxB+yC,EAAS/yC,EAAQ,IACjBgzC,EAAWhzC,EAAQ,IACnBizC,EAASjzC,EAAQ,UAMvBkzC,UAA+BpL,EAAAljC,MAc7B9C,4BACE,OAAO+wC,EAAA3B,YAAYtuC,KAAKkC,OAM1BhD,aACE,MAAMomC,YACJA,EAAc,KAAM,GAACliC,KACrBA,EAAIqrC,UACJA,EAAYlH,EAAA75B,cAAc/K,MACxB3C,KAAKkC,MAEHquC,EAAentC,IAASmkC,EAAA55B,SAASigC,KAAO,EAAI,GAG5CrI,GACJC,EAAG,EACHtmC,CAAgB,EAAfqxC,EAAmB,IAAK,GAGrBC,GACJhL,EAAG,EACHtmC,CAAgB,EAAfqxC,EAAmB,GAAI,GAG1B,IAAIpgB,EAAO,EACX,IAAK,IAAI7yB,EAAI,EAAGA,EAAmB,EAAfizC,IAAoBjzC,EACtCioC,EAAejoC,EAAI,GAAK6yB,EACxBqgB,EAAoBlzC,EAAI,GAAKuD,KAAKkjB,MAAMzmB,EAAI,IAAMizC,EAAe,GACjEpgB,IAAS,EAGX,MAAMvqB,EAAKhE,EAAA0N,eACTm/B,IAAclH,EAAA75B,cAAc/K,KAAOwtC,EAASC,GAG1C7zB,WAAY,gBAEZoxB,cAAeuC,EAAO9sC,KAGtBvF,KAAM,aACN8G,QAAS,mBAIb,OACEa,GAAI6qC,EACJ5qC,qBAEII,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBG,IAC/BtB,KAAM,QACNkI,KAAMpE,EAAA5C,sBAAsBK,IAC5B2F,OAAQhH,GAAKA,EAAE+Q,QAGfjJ,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBK,MAC/BxB,KAAM,MACNkI,KAAMpE,EAAA5C,sBAAsBK,IAC5B2F,OAAQhH,GAAKA,EAAEyG,MAGfqB,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBG,IAC/BtB,KAAM,aACNkI,KAAMpE,EAAA5C,sBAAsBI,IAC5B4F,OAAQhH,IAAMA,EAAEwvC,cAGhB1nC,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBI,IAC/BvB,KAAM,WACNkI,KAAMpE,EAAA5C,sBAAsBI,IAC5B4F,OAAQhH,IAAMA,EAAEyvC,YAGhB3nC,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBK,MAC/BxB,KAAM,QACNkI,KAAMpE,EAAA5C,sBAAsBI,IAC5B4F,OAAQhH,IAAMA,EAAEqE,SAGhByD,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBG,IAC/BtB,KAAM,aACNkI,KAAMpE,EAAA5C,sBAAsBO,KAC5ByF,OAAQhH,GAAKA,EAAEqvC,aAGfvnC,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBG,IAC/BtB,KAAM,WACNkI,KAAMpE,EAAA5C,sBAAsBO,KAC5ByF,OAAQhH,GAAKA,EAAEsvC,UAEjBjqC,IAASmkC,EAAA55B,SAASigC,MAEZ/nC,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBG,IAC/BtB,KAAM,UACNkI,KAAMpE,EAAA5C,sBAAsBO,KAC5ByF,OAAQhH,IAAM,EAAG,EAAG,EAAG,IAEzB,KACJqF,IAASmkC,EAAA55B,SAASsgC,QAEZpoC,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBG,IAC/BtB,KAAM,UACNkI,KAAMpE,EAAA5C,sBAAsBO,KAC5ByF,OAAQhH,IAAMA,EAAEuvC,QAAQ,GAAG,GAAIvvC,EAAEuvC,QAAQ,GAAG,GAAI,EAAG,IAErD,KACJlqC,IAASmkC,EAAA55B,SAASugC,SAEZroC,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBG,IAC/BtB,KAAM,UACNkI,KAAMpE,EAAA5C,sBAAsBO,KAC5ByF,OAAQhH,IA9JtB,SAA2BO,GACzB,OAAQA,EAAM,GAAG,GAAIA,EAAM,GAAG,GAAIA,EAAM,GAAG,GAAIA,EAAM,GAAG,KA6J/Bu0B,CAAkB90B,EAAEuvC,UAEnC,MAENxoC,WAEIjH,KAAM,cACNkI,KAAMpE,EAAAnC,YAAYL,IAClB4F,OAASjB,IAAuBwhC,OAGpC5/B,mBAKI7H,KAAM,WACNkI,KAAMpE,EAAAlC,oBAAoBJ,MAC1B0F,OAAS8gC,IAEPN,EAAeM,GAEf2K,EAAoB3K,GAEL,EAAf0K,KAIN5qC,YAA4B,EAAf4qC,EAAmB,EAChC3qC,GAAIA,EAAG2J,QAIXrQ,eACE,OACEkG,SAAU1D,EAAM2G,sBAChB/C,UAAW5D,EAAM6D,MAIrBrG,qBACE,OAAO0C,EAAAkkC,sBAAsBC,kBAjLxBuK,EAAA7tC,cACL8rC,WAAYhH,EAAA35B,eAAehL,IAC3BoB,KAAM,IAAIgiC,EAAAyK,iBACVloC,IAAK,OACLkmC,UAAWlH,EAAA75B,cAAc/K,KACzBS,KAAMmkC,EAAA55B,SAASigC,MAPnBjxC,EAAA2zC,yJC9DAzwC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,qbCFA,MAAA4oC,EAAA5oC,EAAA,SAcAszC,UAAoC1K,EAAAt9B,SAOlCxJ,YAAYa,GACVoC,MAAMpC,GAPIC,KAAA+f,OAA2C,EAAK,EAAK,EAAK,GAC1D/f,KAAAoC,MAAgB,EAChBpC,KAAAqlC,OAAiB,EACjBrlC,KAAAC,EAAY,EACZD,KAAAE,EAAY,EAKtBF,KAAK+f,MAAQhgB,EAAQggB,OAAS/f,KAAK+f,MACnC/f,KAAKqlC,OAAStlC,EAAQslC,QAAUrlC,KAAKqlC,OACrCrlC,KAAKC,EAAIF,EAAQE,GAAKD,KAAKC,EAC3BD,KAAKE,EAAIH,EAAQG,GAAKF,KAAKE,EAC3BF,KAAKoC,MAAQrC,EAAQqC,OAASpC,KAAKoC,MAGrCjC,YACE,OAAqB,EAAdH,KAAKqlC,OAGdjlC,aACE,OAAqB,EAAdJ,KAAKqlC,QArBF37B,GAAXs8B,EAAAr8B,wCACWD,GAAXs8B,EAAAr8B,wCACWD,GAAXs8B,EAAAr8B,yCACWD,GAAXs8B,EAAAr8B,oCACWD,GAAXs8B,EAAAr8B,oCALHhN,EAAA+zC,gCCdA9zC,EAAAD,QAAA,g6BCAAC,EAAAD,QAAA,qjBCAAC,EAAAD,QAAA,6ECAAC,EAAAD,QAAA,kFCEA,MAAAgF,EAAAvE,EAAA,GAuBAT,EAAA6J,8BAaEtH,YAAYsC,GANZxB,KAAA2wC,YAAc,IAAIruC,IAElBtC,KAAA4wC,YAAc,IAAItuC,IAKhBtC,KAAKwB,MAAQA,EAMftC,uBACE,OACEc,KAAK+gC,cAlCX,SACE5/B,GAEA,OAAOA,GAAOA,EAAI4/B,aAgCd8P,CAAoB7wC,KAAKwB,MAAM4C,YAAYE,WAEpCtE,KAAKwB,MAAM4C,YAAYE,UAAUy8B,aAAaz9B,cAAclF,IACjE,SAAW4B,KAAK+gC,aAAa/I,cAI1B,KAMT94B,gBAAgBsL,EAAmB8M,IAQnCpY,gBAAgBsL,EAAmB8M,EAAe0C,GAEhD,GAAIha,KAAKwB,MAAMkB,SAAW1C,KAAKwB,MAAMkB,QAAQU,OAASzB,EAAAhC,SAASgD,KAAM,CACnE,MAAMmuC,YAAEA,GAAgB9wC,KAAKwB,MAAMU,MAGnC,GAAI4uC,EAAa,CACf,MAAMpmC,EAAQF,EAAKy3B,YAAY3qB,GAC/B,IAAItU,EACAwU,EACAu5B,EACAjV,KAEJ,GAAI97B,KAAKwB,MAAMkB,QAAQU,OAASzB,EAAAhC,SAASiD,IACvCI,EAAUhD,KAAKwB,MAAMkB,QAAQM,QAC7BwU,EAAQxX,KAAKwB,MAAMkB,QAAQO,SAASuU,MAAMw5B,KACxChxC,KAAKwB,MAAMkB,QAAQO,UAErB8tC,EAAa,CAACE,GACZz5B,EAAMy5B,GAAO94B,OAAOpa,GAAKiF,EAAQjF,EAAG2M,EAAOF,KAC7CsxB,EAAYtkB,EAAM9M,GAAOyN,OAAOpa,GAAKiF,EAAQjF,EAAG2M,EAAOF,SAClD,GAAIxK,KAAKwB,MAAMkB,QAAQU,OAASzB,EAAAhC,SAAS0D,OAAQ,CAEtD,MAAM6tC,EAAmBlxC,KAAKmxC,uBAE1BD,GACFpV,EAAU/uB,KAAKmkC,GAcnBJ,GATE92B,SACA8hB,YACAt6B,MAAOxB,KAAKwB,MAAM8G,GAClBo/B,WAAYl9B,EACZumC,aACA9lC,QAASqM,EAAMrX,EAAGqX,EAAMpX,GACxBwK,OAAQA,EAAMzK,EAAGyK,EAAMxK,KAMzBF,KAAK4wC,YAAYre,QACjBuJ,EAAU72B,QAAQlH,GAAKiC,KAAK4wC,YAAY/kC,IAAI9N,GAAG,MAQrDmB,eAAesL,EAAmB8M,GAGhC,GAAItX,KAAKwB,MAAMkB,SAAW1C,KAAKwB,MAAMkB,QAAQU,OAASzB,EAAAhC,SAASgD,KAAM,CACnE,MAAMyuC,WAAEA,GAAepxC,KAAKwB,MAAMU,MAElC,GAAIkvC,EAAY,CACd,MAAM1mC,EAAQF,EAAKy3B,YAAY3qB,GAC/B,IAAItU,EACAwU,EACAu5B,EAEA/wC,KAAKwB,MAAMkB,QAAQU,OAASzB,EAAAhC,SAASiD,MACvCI,EAAUhD,KAAKwB,MAAMkB,QAAQM,QAC7BwU,EAAQxX,KAAKwB,MAAMkB,QAAQO,SAASuU,MAAMw5B,KACxChxC,KAAKwB,MAAMkB,QAAQO,UAErB8tC,EAAa,CAACE,GACZz5B,EAAMy5B,GAAO94B,OAAOpa,GAAKiF,EAAQjF,EAAG2M,EAAOF,MAY/C4mC,GAREtV,UAAW5a,MAAMmS,KAAKrzB,KAAK2wC,YAAY3gC,QACvCxO,MAAOxB,KAAKwB,MAAM8G,GAClBo/B,WAAYl9B,EACZumC,aACA9lC,QAASqM,EAAMrX,EAAGqX,EAAMpX,GACxBwK,OAAQA,EAAMzK,EAAGyK,EAAMxK,MAQ7BF,KAAK2wC,YAAYpe,QAGjBvyB,KAAK4wC,YAAYre,QAMnBrzB,cAAcsL,EAAmB8M,EAAe0C,GAE9C,GAAIha,KAAKwB,MAAMkB,SAAW1C,KAAKwB,MAAMkB,QAAQU,OAASzB,EAAAhC,SAASgD,KAAM,CACnE,MAAM0uC,UAAEA,GAAcrxC,KAAKwB,MAAMU,MAGjC,GAAImvC,EAAW,CACb,MAAM3mC,EAAQF,EAAKy3B,YAAY3qB,GAC/B,IAAItU,EACAwU,EACAu5B,EACAjV,KAEJ,GAAI97B,KAAKwB,MAAMkB,QAAQU,OAASzB,EAAAhC,SAASiD,IACvCI,EAAUhD,KAAKwB,MAAMkB,QAAQM,QAC7BwU,EAAQxX,KAAKwB,MAAMkB,QAAQO,SAASuU,MAAMw5B,KACxChxC,KAAKwB,MAAMkB,QAAQO,UAErB8tC,EAAa,CAACE,GACZz5B,EAAMy5B,GAAO94B,OAAOpa,GAAKiF,EAAQjF,EAAG2M,EAAOF,KAC7CsxB,EAAYtkB,EAAM9M,GAAOyN,OAAOpa,GAAKiF,EAAQjF,EAAG2M,EAAOF,SAClD,GAAIxK,KAAKwB,MAAMkB,QAAQU,OAASzB,EAAAhC,SAAS0D,OAAQ,CAEtD,MAAM6tC,EAAmBlxC,KAAKmxC,uBAE1BD,GACFpV,EAAU/uB,KAAKmkC,GAcnBG,GATEr3B,SACA8hB,YACAt6B,MAAOxB,KAAKwB,MAAM8G,GAClBo/B,WAAYl9B,EACZumC,aACA9lC,QAASqM,EAAMrX,EAAGqX,EAAMpX,GACxBwK,OAAQA,EAAMzK,EAAGyK,EAAMxK,OAW/BhB,gBAAgBsL,EAAmB8M,GAEjC,MAAMg6B,YAAEA,EAAWC,YAAEA,EAAWH,WAAEA,GAAepxC,KAAKwB,MAAMU,MAE5D,GAAIlC,KAAKwB,MAAMkB,SAAW1C,KAAKwB,MAAMkB,QAAQU,OAASzB,EAAAhC,SAASgD,OAEzD2uC,GAAeC,GAAeH,GAAY,CAC5C,IAAII,EACJ,MAAM9mC,EAAQF,EAAKy3B,YAAY3qB,GAC/B,IAAItU,EACAwU,EACAu5B,EACAjV,KAEJ,GAAI97B,KAAKwB,MAAMkB,QAAQU,OAASzB,EAAAhC,SAASiD,IACvCI,EAAUhD,KAAKwB,MAAMkB,QAAQM,QAC7BwU,EAAQxX,KAAKwB,MAAMkB,QAAQO,SAASuU,MAAMw5B,KACxChxC,KAAKwB,MAAMkB,QAAQO,UAErB8tC,EAAa,CAACE,GACZz5B,EAAMy5B,GAAO94B,OAAOpa,GAAKiF,EAAQjF,EAAG2M,EAAOF,KAC7CsxB,EAAYtkB,EAAM9M,GAAOyN,OAAOpa,GAAKiF,EAAQjF,EAAG2M,EAAOF,SAClD,GAAIxK,KAAKwB,MAAMkB,QAAQU,OAASzB,EAAAhC,SAAS0D,OAAQ,CAEtD,MAAM6tC,EAAmBlxC,KAAKmxC,uBAE1BD,GACFpV,EAAU/uB,KAAKmkC,GAKnB,GAAII,EAAa,CACf,MAAMG,EAAmB3V,EAAU3jB,OACjCpa,IAAMiC,KAAK2wC,YAAYvyC,IAAIL,IAE7ByzC,GACE1V,UAAW2V,EACXjwC,MAAOxB,KAAKwB,MAAM8G,GAClBo/B,WAAYl9B,EACZumC,aACA9lC,QAASqM,EAAMrX,EAAGqX,EAAMpX,GACxBwK,OAAQA,EAAMzK,EAAGyK,EAAMxK,IAGrBuxC,EAAiBhtC,OAAS,GAAG6sC,EAAYE,GAI3CD,GAWFA,EATAC,GACE1V,YACAt6B,MAAOxB,KAAKwB,MAAM8G,GAClBo/B,WAAYl9B,EACZumC,aACA9lC,QAASqM,EAAMrX,EAAGqX,EAAMpX,GACxBwK,OAAQA,EAAMzK,EAAGyK,EAAMxK,KAO3B,MAAMwxC,EAAkB,IAAIpvC,IAI5B,GAHAw5B,EAAU72B,QAAQlH,GAAK2zC,EAAgB7lC,IAAI9N,GAAG,IAG1CqzC,EAAY,CACd,MAAMO,EAAezwB,MAAMmS,KAAKrzB,KAAK2wC,YAAY3gC,QAAQmI,OACvDpa,IAAM2zC,EAAgBtzC,IAAIL,IAI5ByzC,GACE1V,UAAW6V,EACXnwC,MAAOxB,KAAKwB,MAAM8G,GAClBo/B,WAAYl9B,EACZumC,aACA9lC,QAASqM,EAAMrX,EAAGqX,EAAMpX,GACxBwK,OAAQA,EAAMzK,EAAGyK,EAAMxK,IAGrByxC,EAAaltC,OAAS,GAAG2sC,EAAWI,GAI1CxxC,KAAK2wC,YAAce,GAQzBxyC,iBAAiBsL,EAAmB8M,EAAe0C,GAEjD,GAAIha,KAAKwB,MAAMkB,SAAW1C,KAAKwB,MAAMkB,QAAQU,OAASzB,EAAAhC,SAASgD,KAAM,CACnE,MAAMivC,aAAEA,GAAiB5xC,KAAKwB,MAAMU,MAGpC,GAAI0vC,EAAc,CAChB,MAAMlnC,EAAQF,EAAKy3B,YAAY3qB,GAC/B,IAAItU,EACAwU,EACAu5B,EACAjV,KAEJ,GAAI97B,KAAKwB,MAAMkB,QAAQU,OAASzB,EAAAhC,SAASiD,IACvCI,EAAUhD,KAAKwB,MAAMkB,QAAQM,QAC7BwU,EAAQxX,KAAKwB,MAAMkB,QAAQO,SAASuU,MAAMw5B,KACxChxC,KAAKwB,MAAMkB,QAAQO,UAErB8tC,EAAa,CAACE,GACZz5B,EAAMy5B,GAAO94B,OAAOpa,GAAKiF,EAAQjF,EAAG2M,EAAOF,KAC7CsxB,EAAYtkB,EAAM9M,GAAOyN,OAAOpa,GAAKiF,EAAQjF,EAAG2M,EAAOF,SAClD,GAAIxK,KAAKwB,MAAMkB,QAAQU,OAASzB,EAAAhC,SAAS0D,OAAQ,CAEtD,MAAM6tC,EAAmBlxC,KAAKmxC,uBAE1BD,GACFpV,EAAU/uB,KAAKmkC,GAcnBU,GATE53B,SACA8hB,YACAt6B,MAAOxB,KAAKwB,MAAM8G,GAClBo/B,WAAYl9B,EACZumC,aACA9lC,QAASqM,EAAMrX,EAAGqX,EAAMpX,GACxBwK,OAAQA,EAAMzK,EAAGyK,EAAMxK,OAW/BhB,gBAAgBsL,EAAmB8M,qFCnWrC,MAAA3V,EAAAvE,EAAA,GACAyQ,EAAAzQ,EAAA,GAOAy0C,EAAAz0C,EAAA,IAEM4Q,KAKNrR,EAAAm1C,uCAEUD,EAAA5jC,qBAGR/O,YACEsC,EACA+B,GAEApB,MAAMX,EAAO+B,GAET/B,EAAMkB,QAAQU,OAASzB,EAAAhC,SAASiD,IAClC5C,KAAK+xC,YAAcvwC,EAAMkB,QAEzByD,QAAQC,KACN,qHASNlH,YACEiP,EACAjK,EACAkK,EACAC,GAGA,GAAIA,EACFF,EAAQG,eAAeH,EAASjK,EAAU8J,EAAOK,OAI9C,CACH,MAAMvJ,EAAWqJ,EAAQ3M,MAAM+B,cAAcgL,IAAIrK,GAE7C2J,EAAA3M,iBAAiB4D,KACnBZ,EAAS+E,QAAS,EAClBkF,EAAQK,eAAeL,EAAQ3M,MAAO0C,EAAUY,GAGhDqJ,EAAQ4jC,YAAY9uC,SAASqG,OAAOpF,GACpCiK,EAAQ4jC,YAAY9uC,SAASsL,IAAIrK,KAQvChF,eACEiP,EACAjK,EACAkK,EACAC,GAGIA,GACFF,EAAQK,eAAeL,EAAQ3M,MAAO0C,EAAUmK,GAGhDF,EAAQ4jC,YAAY9uC,SAASqG,OAAOpF,GACpCiK,EAAQ4jC,YAAY9uC,SAASsL,IAAIrK,IAKjCiK,EAAQM,YAAYN,EAASjK,EAAU8J,EAAOK,GAOlDnP,eACEiP,EACAjK,EACAkK,EACAC,GAEIA,IAEFnK,EAAS+E,QAAS,EAElBkF,EAAQK,eAAeL,EAAQ3M,MAAO0C,EAAUmK,GAEhDF,EAAQ3M,MAAM+B,cAAc+F,OAAOpF,GAEnCiK,EAAQ4jC,YAAY9uC,SAASqG,OAAOpF,qFC1G1C,MAAAvC,EAAAvE,EAAA,GACAyQ,EAAAzQ,EAAA,GAOAy0C,EAAAz0C,EAAA,IAEM4Q,KAKNrR,EAAAq1C,wCAEUH,EAAA5jC,qBAGR/O,YACEsC,EACA+B,GAEApB,MAAMX,EAAO+B,GAET/B,EAAMkB,QAAQU,OAASzB,EAAAhC,SAAS0D,QAClCrD,KAAK+gC,aAAev/B,EAAMkB,QAC1B1C,KAAK+gC,aAAaz9B,cAAgB,IAAIhB,KAEtC6D,QAAQC,KACN,sHASNlH,YACEiP,EACAjK,EACAkK,EACAC,GAGA,GAAIA,EACFF,EAAQG,eAAeH,EAASjK,EAAU8J,EAAOK,OAI9C,CACH,MAAMvJ,EAAWqJ,EAAQ3M,MAAM+B,cAAcgL,IAAIrK,GAE7C2J,EAAA3M,iBAAiB4D,IACnBZ,EAAS+E,QAAS,EAClBkF,EAAQK,eAAeL,EAAQ3M,MAAO0C,EAAUY,GAGhDqJ,EAAQ4yB,aAAaz9B,cAAcuI,IAAI3H,EAASuF,IAAKvF,IAErDiC,QAAQC,KACN,kFASRlH,eACEiP,EACAjK,EACAkK,EACAC,GAGIA,EACFF,EAAQK,eAAeL,EAAQ3M,MAAO0C,EAAUmK,GAKhDF,EAAQM,YAAYN,EAASjK,EAAU8J,EAAOK,GAOlDnP,eACEiP,EACAjK,EACAkK,EACAC,GAEIA,IAEFnK,EAAS+E,QAAS,EAElBkF,EAAQK,eAAeL,EAAQ3M,MAAO0C,EAAUmK,GAEhDF,EAAQ3M,MAAM+B,cAAc+F,OAAOpF,GAEnCiK,EAAQ4yB,aAAaz9B,cAAcqwB,OAAOzvB,EAASuF,uFCvGzD,MAAAoE,EAAAzQ,EAAA,GAOA0Q,EAAA1Q,EAAA,IAEM4Q,MACAyF,IAAEA,EAAGC,IAAEA,GAAQ7S,KAErB,IAAKoxC,GAAL,SAAKA,GAEHA,IAAA,qBAEAA,IAAA,eAJF,CAAKA,WAULt1C,EAAAu1C,6CAEUpkC,EAAAI,kBAFVhP,kCAIUc,KAAAmyC,SAAqBF,EAASG,QAGtCpyC,KAAAqyC,8BAKAryC,KAAAsyC,6BAQAtyC,KAAAwO,eAKYxO,KAAKuyC,sBAKjBrzC,YACEiP,EACAjK,EACAkK,EACAjK,GAGA,GAAIA,EACFgK,EAAQG,eAAeH,EAASjK,EAAU8J,EAAO7J,OAI9C,CACH,MAAMquC,EAAqBrkC,EAAQ3M,MAAM+B,cAAcgL,IAAIrK,GAEvD2J,EAAAxM,sBAAsBmxC,KACxBtuC,EAAS+E,QAAS,EAClBkF,EAAQK,eACNL,EAAQ3M,MACR0C,EACA8J,EACAwkC,KASRtzC,eACEiP,EACAjK,EACAuuC,EACAtuC,GAGIA,EACFgK,EAAQK,eAAeL,EAAQ3M,MAAO0C,EAAUuuC,EAAStuC,GAKzDgK,EAAQM,YAAYN,EAASjK,EAAU8J,EAAO7J,GAOlDjF,eACEiP,EACAjK,EACAkK,EACAjK,GAEIA,IAEFD,EAAS+E,QAAS,EAElBkF,EAAQK,eAAeL,EAAQ3M,MAAO0C,EAAU8J,EAAO7J,GAEvDgK,EAAQ3M,MAAM+B,cAAc+F,OAAOpF,IAOvChF,sBACEsC,EACA0C,EACAuuC,EACAtuC,GAEA,MAAMuuC,EAAqBvuC,EAAgB7C,yBACrC+wC,EAA6BryC,KAAKqyC,2BACxC,IAAIxhC,EACA8hC,EACAC,EACAC,EACA1rC,EAEJ,GAAIjD,EAAS+E,OAAQ,CAEI,IAAnBwpC,EAAQhuC,SACVguC,EAAUzyC,KAAKuD,cAAcuvC,8BAG/B,IAAK,IAAIx1C,EAAI,EAAGkH,EAAMiuC,EAAQhuC,OAAQnH,EAAIkH,IAAOlH,EAkB/C,IAfA6J,GADA0J,EAAW6hC,EAAmBD,EAAQn1C,KACjB6J,WACXnB,OAASxE,EAAMyN,SAASC,eAAe/H,EAAUnB,MAAMuC,KACjEoqC,EAAcxrC,EAAUpC,OAAOb,GAC/B2M,EAASzP,OAAO9C,MAAMuN,IAAI8mC,EAAa9hC,EAASlC,MAAM,KACtDikC,EAAcP,EAA2BlrC,EAAUsC,OACjD,KACAgd,OAAOC,iBACPD,OAAOE,mBAEG,GAAKxf,EACjByrC,EAAY,GAAKn/B,EAAI5C,EAASlC,MAAM,GAAIikC,EAAY,IACpDA,EAAY,GAAKl/B,EAAI7C,EAASlC,MAAM,GAAIikC,EAAY,IACpDP,EAA2BlrC,EAAUsC,KAAOmpC,EAGxC/hC,EAASgiC,eAGX,IAAK,IAAI9jC,EAAI,EAAGC,GAFhB6jC,EAAiBhiC,EAASgiC,gBAEYpuC,OAAQsK,EAAIC,IAAQD,EAExD4jC,GADA9hC,EAAWgiC,EAAe9jC,IACH5H,UAAUpC,OAAOb,GACxC2M,EAASzP,OAAO9C,MAAMuN,IAAI8mC,EAAa9hC,EAASlC,MAAM,KACtDikC,EAAcP,EACZxhC,EAAS1J,UAAUsC,OACf,KAAMgd,OAAOC,iBAAkBD,OAAOE,mBAChC,GAAK9V,EAAS1J,UAC1ByrC,EAAY,GAAKn/B,EAAI5C,EAASlC,MAAM,GAAIikC,EAAY,IACpDA,EAAY,GAAKl/B,EAAI7C,EAASlC,MAAM,GAAIikC,EAAY,IACpDP,EAA2BxhC,EAAS1J,UAAUsC,KAAOmpC,OAW3DD,GADAxrC,GAFA0J,EACE6hC,EAAmB1yC,KAAKuD,cAAcwvC,iCACnB5rC,WACGpC,OAAOb,GAC/B2M,EAASzP,OAAO9C,MAAMuN,IAAI8mC,EAAa9hC,EAASlC,MAAM,KACtDikC,EAAcP,EAA2BlrC,EAAUsC,OACjD,KACAgd,OAAOC,iBACPD,OAAOE,mBAEG,GAAKxf,EACjByrC,EAAY,GAAKn/B,EAAI5C,EAASlC,MAAM,GAAIikC,EAAY,IACpDA,EAAY,GAAKl/B,EAAI7C,EAASlC,MAAM,GAAIikC,EAAY,IACpDP,EAA2BlrC,EAAUsC,KAAOmpC,EAQhD1zC,mBACEsC,EACA0C,EACAuuC,EACAtuC,GAEA,MAAMuuC,EAAqBvuC,EAAgB7C,yBACrCgxC,EAA4BtyC,KAAKsyC,0BACvC,IAAIzhC,EACA8hC,EACAE,EACA1rC,EAEJ,GAAIjD,EAAS+E,OAAQ,CAEI,IAAnBwpC,EAAQhuC,SACVguC,EAAUzyC,KAAKuD,cAAcuvC,8BAG/B,IAAK,IAAIx1C,EAAI,EAAGkH,EAAMiuC,EAAQhuC,OAAQnH,EAAIkH,IAAOlH,EAU/C,IAPA6J,GADA0J,EAAW6hC,EAAmBD,EAAQn1C,KACjB6J,WACXnB,OAASxE,EAAMyN,SAASC,eAAe/H,EAAUnB,MAAMuC,KACjEoqC,EAAcxrC,EAAUpC,OAAOb,GAC/B2M,EAASzP,OAAO9C,MAAMuN,IAAI8mC,EAAa9hC,EAASlC,MAAM,IACtD2jC,EAA0BnrC,EAAUsC,KAAOtC,EAGvC0J,EAASgiC,eAGX,IAAK,IAAI9jC,EAAI,EAAGC,GAFhB6jC,EAAiBhiC,EAASgiC,gBAEYpuC,OAAQsK,EAAIC,IAAQD,EAGxD4jC,GADAxrC,GADA0J,EAAWgiC,EAAe9jC,IACL5H,WACGpC,OAAOb,GAC/B2M,EAASzP,OAAO9C,MAAMuN,IAAI8mC,EAAa9hC,EAASlC,MAAM,IACtD2jC,EAA0BnrC,EAAUsC,KAAOtC,OAUjDA,GAFA0J,EACE6hC,EAAmB1yC,KAAKuD,cAAcwvC,iCACnB5rC,WACXnB,OAASxE,EAAMyN,SAASC,eAAe/H,EAAUnB,MAAMuC,KACjEoqC,EAAcxrC,EAAUpC,OAAOb,GAC/B2M,EAASzP,OAAO9C,MAAMuN,IAAI8mC,EAAa9hC,EAASlC,MAAM,IACtD2jC,EAA0BnrC,EAAUsC,KAAOtC,EAO/CjI,SAEE,GAAIc,KAAKmyC,WAAaF,EAASG,QAAS,CAEtC,MAAMY,EAAUh1C,OAAO2G,OAAO3E,KAAKqyC,4BAEnC,IAAK,IAAI/0C,EAAI,EAAGkH,EAAMwuC,EAAQvuC,OAAQnH,EAAIkH,IAAOlH,EAAG,CAClD,MAAMyH,EAASiuC,EAAQ11C,GACjB6J,EAAYpC,EAAO,GAAGkuC,gBAC5B9rC,EAAU+hB,aAAc,EACxB/hB,EAAUyrC,aACRzX,MAAOp2B,EAAO,GAAKA,EAAO,GAC1B6F,OAAQ7F,EAAO,SAMhB,CAEH,MAAMiuC,EAAUh1C,OAAO2G,OAAO3E,KAAKsyC,2BAEnC,IAAK,IAAIh1C,EAAI,EAAGkH,EAAMwuC,EAAQvuC,OAAQnH,EAAIkH,IAAOlH,EAAG,CAClD,MAAM6J,EAAY6rC,EAAQ11C,GAAG21C,gBAC7B9rC,EAAU+hB,aAAc,EACxB/hB,EAAUyrC,aACRzX,OAAQ,EACRvwB,OAAQ,IAMd5K,KAAKqyC,8BAQPnzC,mBAAmBwH,GACM,IAAnBA,EAAQjC,OACVzE,KAAKmyC,SAAWF,EAASG,QAGlB1rC,EAAQjC,OAAiD,GAAxCzE,KAAKuD,cAAc2vC,mBAC3ClzC,KAAKmyC,SAAWF,EAASkB,KAIzBnzC,KAAKmyC,SAAWF,EAASG,QAGvBpyC,KAAKmyC,WAAaF,EAASG,QAC7BpyC,KAAKwO,eAAiBxO,KAAKuyC,sBAI3BvyC,KAAKwO,eAAiBxO,KAAKozC,oGClUjC,MAAA1xC,EAAAtE,EAAA,GAEAs7B,EAAAt7B,EAAA,IACAuE,EAAAvE,EAAA,GACAwE,EAAAxE,EAAA,GAEA0gC,EAAA1gC,EAAA,IAEAyQ,EAAAzQ,EAAA,GAuDAT,EAAAiL,mCAA8DiG,EAAAtM,kBAkB5DrC,YAAYsC,EAAsBC,GAChCU,MAAMX,EAAOC,GAZPzB,KAAAqzC,WAEArzC,KAAAszC,qBAEAtzC,KAAAuzC,qBAEAvzC,KAAAwzC,gBAAkB,IAAIlxC,IAoB9BtC,KAAAuO,IAAM,SAASrK,GAETlE,KAAKszC,kBAAkB7uC,QAAU,GACnCzE,KAAKyzC,gBAGP,MAAMC,EAAU1zC,KAAKszC,kBAAkBjjB,MAUvC,OARIqjB,EACF1zC,KAAKuzC,kBAAkBrvC,EAASuF,KAAOiqC,EAEvCvtC,QAAQC,KACN,qEAIGstC,GAiDT1zC,KAAAsJ,OAAS,SAASpF,GAChB,MAAMwvC,EAAU1zC,KAAKuzC,kBAAkBrvC,EAASuF,KAShD,OALIiqC,WACK1zC,KAAKuzC,kBAAkBrvC,EAASuF,KACvCzJ,KAAKszC,kBAAkBvmC,KAAK2mC,IAGvBxvC,GAvFP,IAAIyvC,EAA0B,EAC9BnyC,EAAMiE,mBAAmBR,QAASsX,IAChCo3B,EAAkB9yC,KAAK6S,IAAI6I,EAAW1W,MAAO8tC,KAG/C3zC,KAAK4zC,yBAA2BD,EAAkB,EA6BpDz0C,UACEc,KAAKqzC,QAAQpuC,QAAQ7D,IACnBA,EAAO0G,SAASihB,UAChB3nB,EAAO2G,SAASghB,YAQpB7pB,mBAAmBgF,GACjB,OAAOlE,KAAKuzC,kBAAkBrvC,EAASuF,KAOzCvK,+BACE,OAAQ,EAOVA,mBACE,OAAQ,EAOVA,6BACE,SAuBFA,kBACEc,KAAKqzC,QAAQpuC,QAAQ,CAAC7D,EAAQ4L,KAC5BhN,KAAKyB,MAAM+K,UAAUlD,OAAOlI,EAAO8G,OACnC9G,EAAOyyC,WAAa7zC,KAAKyB,MAAMgL,iBAAiBnD,OAAOlI,EAAOyyC,oBAGzD7zC,KAAKyB,MAMdvC,SAASuC,GACPzB,KAAKqzC,QAAQpuC,QAAQ,CAAC7D,EAAQ4L,KAC5BhN,KAAKyB,MAAM+K,UAAU+B,IAAInN,EAAO8G,OAChC9G,EAAOyyC,WAAa7zC,KAAKyB,MAAMgL,iBAAiB8B,IAAInN,EAAOyyC,aAG7D7zC,KAAKyB,MAAQA,EAMfvC,gBAIE,MAAM40C,EAAc,IAAIpyC,EAAMqgB,eAC9B/hB,KAAKwB,MAAMkE,iBAAiBT,QAAQkC,IAC9BA,EAAUiV,mBACZ03B,EAAY7xB,aAAa9a,EAAUtJ,KAAMsJ,EAAUiV,qBAKvD03B,EAAYC,UAAUjlC,MAAQ,EAC9BglC,EAAYC,UAAU5Y,MACpBn7B,KAAKwB,MAAM6f,sBAAwBrhB,KAAKwB,MAAMe,oBAIhD,MAAMyxC,EAAch0C,KAAKwB,MAAMuG,SAASksC,QAElCC,EAAWpW,EAAAj2B,mBAAmB7H,KAAKwB,MAAOsyC,EAAaE,GAG7DE,EAASrnC,eAAgB,EAGzB,MAAMzL,GACJ+yC,mBACAC,YACAC,cAAe,EACfvsC,SAAUgsC,EACVQ,aAAc,EACdvsC,SAAUisC,EACV9rC,MAAOgsC,EACPL,UACE7zC,KAAKwB,MAAMkB,QAAQU,OAASzB,EAAAhC,SAAS0D,OACjC6wC,EAASD,aACTxtC,GAGRzG,KAAKqzC,QAAQtmC,KAAK3L,GAKlB,IAAImzC,EAAe,EACnB,MAAMC,EAAc9b,EAAAtP,+BACdxa,EAAeolC,EAAYlvC,SAAS0vC,GAG1C5lC,EAAatQ,MAAQsQ,EAAatQ,MAAM2Z,IACtC,IAAM,IAAIvW,EAAMm4B,QAAQ,EAAK,EAAK,EAAK,IAKzC,MAAM4a,EAAgBz2C,OAAOwE,UAAWxC,KAAKwB,MAAMiE,mBAAmB,IACpEwtC,gBAAiB,IAAIvxC,EAAMgzC,yBACzB,IAAInzB,aAAa,GACjB,GAEF9X,IAAK7H,EAAA6H,QAGP,IAAK,IAAInM,EAAI,EAAGkH,EAAMxE,KAAKwB,MAAM6f,sBAAuB/jB,EAAIkH,IAAOlH,EAAG,CACpE,MAAMo2C,GACJvsC,UAAWstC,EAEXrzC,OAAQwN,EACR+lC,cAAer3C,EACfqR,OAAQ4lC,EAAc,IAGxBA,GAAgBv0C,KAAK4zC,yBACrBF,EAAQ/kC,MAAM,GAAK4lC,EAEnBnzC,EAAOgzC,SAASrnC,KAAK2mC,GACrB1zC,KAAKszC,kBAAkBvmC,KAAK2mC,GAC5B1zC,KAAKwzC,gBAAgB3nC,IAAI6nC,EAAStyC,GAKpC,IAAK,IAAI9D,EAAI,EAAGkH,EAAMxE,KAAKwB,MAAMsD,SAASL,OAAQnH,EAAIkH,IAAOlH,EAAG,CAC9D,MAAMwG,EAAU9D,KAAKwB,MAAMsD,SAASxH,GACpCwG,EAAQkB,iBAAiB+H,KAAKinC,EAAYlvC,SAAShB,EAAQjG,OAKzDmC,KAAKyB,QACPzB,KAAKyB,MAAM+K,UAAU+B,IAAInN,EAAO8G,OAChC9G,EAAOyyC,WAAa7zC,KAAKyB,MAAMgL,iBAAiB8B,IAAInN,EAAOyyC,6FCrSjE,IAAIe,KAEJj4C,EAAAk4C,SAAA,SACEvsC,EACA4uB,GAEA,MAAM4d,EAAOF,EAAOtsC,KAAQ4uB,GAAW,EAAG,GAC1C0d,EAAOtsC,GAAMwsC,EACbA,EAAK,KAELC,aAAaD,EAAK,IAClBA,EAAK,GAAK93C,OAAOmnB,WAAW,KAC1B+S,EAAS4d,EAAK,GAAIxsC,UACXssC,EAAOtsC,IACb,IAGL3L,EAAAq4C,cAAA,WACE,IAAK,MAAM1sC,KAAMssC,EAAQ,CACvB,MAAME,EAAOF,EAAOtsC,GACpBysC,aAAaD,EAAK,IAClBA,EAAK,GAAGA,EAAK,GAAIxsC,GAGnBssC,qFCxBF,MAAAlzC,EAAAtE,EAAA,GACA4oC,EAAA5oC,EAAA,GACAi9B,EAAAj9B,EAAA,IACAuE,EAAAvE,EAAA,GAKAwE,EAAAxE,EAAA,GACA63C,EAAA73C,EAAA,KAEA0gC,EAAA1gC,EAAA,IAEAyQ,EAAAzQ,EAAA,IAMMsW,IAAEA,GAAQ7S,KAgBhBlE,EAAAgL,6CAEUkG,EAAAtM,kBAuCRrC,YAAYsC,EAAsBC,GAChCU,MAAMX,EAAOC,GAtCPzB,KAAAk1C,sBAEAl1C,KAAAm1C,sBAERn1C,KAAAo1C,sBAAwB,EAEhBp1C,KAAAq1C,4BAOAr1C,KAAAs1C,YAAsB,EAEtBt1C,KAAAu1C,kBAA4B,IAU5Bv1C,KAAAw1C,uBAAyB,IAAIlzC,IAK7BtC,KAAAy1C,2BAKAz1C,KAAA01C,kBAA4B,EAkJpC11C,KAAAsJ,OAAS,CAACpF,IACR,MAAM2M,EAAW7Q,KAAKq1C,yBAAyBnxC,EAASuF,KAOxD,OALIoH,WACK7Q,KAAKq1C,yBAAyBnxC,EAASuF,KAC9CzJ,KAAKm1C,mBAAmBpoC,KAAK8D,IAGxB3M,IArJPlE,KAAKuO,IAAMvO,KAAK21C,sBAMVz2C,sBAAsBgF,GAG5BlE,KAAKwB,MAAMiE,mBAAmBR,QAAQkC,IAEpC,GAAIA,EAAU4X,gBAAiB,OAE/BinB,EAAA7T,qBAAqByjB,sBAAqB,GAE1CzuC,EAAUpC,OAAOb,GAEjB,MAAM2xC,EAA0B7P,EAAA7T,qBAAqB2jB,yBACnD,GAGF91C,KAAKw1C,uBAAuB3pC,IAAI1E,EAAW0uC,GAIvC1uC,IAAcnH,KAAKwB,MAAM2N,kBAC3BnP,KAAK01C,iBAAmBG,EAAwB,MAMpD7P,EAAA7T,qBAAqByjB,sBAAqB,GAG1C51C,KAAK+1C,8BAEL,MAAMC,EAAeh2C,KAAKi2C,eAY1B,OARAj2C,KAAKk2C,0BACHF,EAAaG,aACbH,EAAaI,QAGfp2C,KAAKuO,IAAMvO,KAAK80B,MAGT90B,KAAK80B,MAAM5wB,GAOZhF,MAAMgF,GAEZ,GAAIlE,KAAKm1C,mBAAmB1wC,QAAU,EAAG,CAEvC,MAAMuxC,EAAeh2C,KAAKi2C,eAE1Bj2C,KAAKk2C,0BACHF,EAAaG,aACbH,EAAaI,QAKjB,MAAMjyC,EAAkBnE,KAAKm1C,mBAAmBkB,QAgBhD,OAbIlyC,GACFnE,KAAKq1C,yBAAyBnxC,EAASuF,KAAOtF,EAC9CnE,KAAKo1C,sBAAwBp1C,KAAK8H,SAASytC,kBAAoB7hC,EAC7D1T,KAAKo1C,sBAELjxC,EAAgBwwC,cAAgB,IAGlCxuC,QAAQoK,MACN,kGAIGpM,EAGTjF,UACEc,KAAK8H,SAASihB,UACd/oB,KAAK+H,SAASghB,UACV/oB,KAAKyB,OAASzB,KAAKyB,MAAM+K,WAC3BxM,KAAKyB,MAAM+K,UAAUlD,OAAOtJ,KAAKkI,OAQrChJ,mBAAmBgF,GACjB,OAAOlE,KAAKq1C,yBAAyBnxC,EAASuF,KAMhDvK,+BACE,OAAOc,KAAK01C,iBAOdx2C,6BACE,OAAOc,KAAKy1C,wBAONv2C,8BAEN,MAAMu2C,KAGNz1C,KAAKw1C,uBAAuBvwC,QAAQqxC,IAClCb,EAAwBa,EAAI,IAAMA,EAAI,KAIxCt2C,KAAKy1C,wBAA0Bz3C,OAAO2G,OACpC8wC,GACAt9B,OAAOhQ,SAoBXjJ,kBACMc,KAAKyB,OAASzB,KAAKyB,MAAM+K,WAC3BxM,KAAKyB,MAAM+K,UAAUlD,OAAOtJ,KAAKkI,OAEnClI,KAAK6zC,WAAa7zC,KAAKyB,MAAMgL,iBAAiBnD,OAAOtJ,KAAK6zC,kBACnD7zC,KAAKyB,MAMNvC,eACN,IAAIk3C,EAAS,EAEb,MAAMG,EAAgC,IAAIj0C,IAM1C,GAAKtC,KAAK8H,SAoFL,CAEH9H,KAAK8H,SAASihB,UACd/oB,KAAK8H,SAAW,IAAIpG,EAAM80C,wBAC1B,MAAMC,EAAyBz2C,KAAKu1C,kBAGpCv1C,KAAKwB,MAAMkE,iBAAiBT,QAAQkC,IAC9BA,EAAUiV,mBACZpc,KAAK8H,SAASma,aACZ9a,EAAUtJ,KACVsJ,EAAUiV,qBAYhBpc,KAAKs1C,YAAcz0C,KAAK4S,IAAI,EAAGzT,KAAKs1C,YAAc,GAClDc,EAA0C,IAAjCv1C,KAAK8S,IAAI,GAAI3T,KAAKs1C,aAC3Bt1C,KAAKu1C,mBAAqBa,EAE1Bp2C,KAAKuc,WAAWtX,QAAQkC,IACtB,MAAM8rC,EAAkB9rC,EAAU8rC,gBAC5BltC,EAAeoB,EAAUpB,MAAQ,EAEvC,GAAIktC,EAAgByD,iBAAiBn1B,aAAc,CAEjD,MAAMngB,EAAuB,IAAImgB,aAC/BvhB,KAAKu1C,kBAAoBxvC,GAG3B3E,EAAOyK,IAAIonC,EAAgByD,MAAO,GAElC,MAAMC,EAAe,IAAIj1C,EAAMgzC,yBAAyBtzC,EAAQ2E,GAEhE4wC,EAAaC,YAAW,GAExBzvC,EAAU8rC,gBAAkB0D,EAE5B32C,KAAK8H,SAASma,aACZoY,EAAA9Q,4BAA4BpiB,GAC5BwvC,GAGF,IAAInE,EAAqB+D,EAA8Bn4C,IACrD+I,EAAUtJ,MAMZ,MAAMg5C,EAAe72C,KAAKk1C,mBAAmB/tC,EAAUtJ,UACvDmC,KAAKk1C,mBAAmB/tC,EAAUtJ,MAAQg5C,EAE1C,IAAK,IAAI9nC,EAAI,EAAGC,EAAO6nC,EAAapyC,OAAQsK,EAAIC,IAAQD,EACtD8nC,EAAa9nC,GAAG3N,OAAO9C,MAAQ8C,EAG5BoxC,IACHA,KACA+D,EAA8B1qC,IAC5B1E,EAAUtJ,KACV20C,IAIJ,IACE,IAAIl1C,EAAIm5C,EAAwBjyC,EAAMxE,KAAKu1C,kBAC3Cj4C,EAAIkH,IACFlH,EACF,CACA,MAAMw5C,GACJ3vC,YACA/F,QACE9C,MAAO8C,GAETuzC,cAAer3C,EACfqR,OAAQrR,EAAIyI,EAAMzI,EAAIyI,EAAOA,IAG/BysC,EAAmBzlC,KAAK+pC,GACxBD,EAAa9pC,KAAK+pC,OAKxB92C,KAAKyB,MAAM+K,UAAUlD,OAAOtJ,KAAKkI,WAhLf,CAElBkuC,EAASp2C,KAAKu1C,kBAIdv1C,KAAK8H,SAAW,IAAIpG,EAAM80C,wBAG1Bx2C,KAAKwB,MAAMkE,iBAAiBT,QAAQkC,IAC9BA,EAAUiV,mBACZpc,KAAK8H,SAASma,aACZ9a,EAAUtJ,KACVsJ,EAAUiV,qBAMhBpc,KAAKuc,WAAavc,KAAKwB,MAAMiE,mBAAmBwS,IAAI9Q,IAElD,MAAMpB,EAAeoB,EAAUpB,MAAQ,EACjC3E,EAAS,IAAImgB,aAAaxb,EAAO/F,KAAKu1C,mBACtCtC,EAAkB,IAAIvxC,EAAMgzC,yBAChCtzC,EACA2E,GAEFktC,EAAgB2D,YAAW,GAC3B52C,KAAK8H,SAASma,aACZoY,EAAA9Q,4BAA4BpiB,GAC5B8rC,GAEF,IAAIT,EAAqB+D,EAA8Bn4C,IACrD+I,EAAUtJ,MAGP20C,IACHA,KACA+D,EAA8B1qC,IAAI1E,EAAUtJ,KAAM20C,IAGpD,MAAMqE,EAAe72C,KAAKk1C,mBAAmB/tC,EAAUtJ,UACvDmC,KAAKk1C,mBAAmB/tC,EAAUtJ,MAAQg5C,EAE1C,MAAME,EAAmD/4C,OAAOwE,UAE9D2E,GACEsC,IAAK7H,EAAA6H,MAAOwpC,gBAAiBA,IAGjC,IAAK,IAAI31C,EAAI,EAAGA,EAAI0C,KAAKu1C,oBAAqBj4C,EAAG,CAC/C,MAAMw5C,GACJ3vC,UAAW4vC,EACX31C,QACE9C,MAAO8C,GAETuzC,cAAer3C,EACfqR,OAAQrR,EAAIyI,EAAMzI,EAAIyI,EAAOA,IAG/BysC,EAAmBzlC,KAAK+pC,GACxBD,EAAa9pC,KAAK+pC,GAIpB,OAAOC,IAIT/2C,KAAK8H,SAASytC,kBAAoB,EAGlCv1C,KAAK+H,SAAW/H,KAAKwB,MAAMuG,SAASksC,QAIpC,IAAK,IAAI32C,EAAI,EAAGkH,EAAMxE,KAAKwB,MAAMsD,SAASL,OAAQnH,EAAIkH,IAAOlH,EAAG,CAC9D,MAAMwG,EAAU9D,KAAKwB,MAAMsD,SAASxH,GACpCwG,EAAQkB,iBAAiB+H,KAAK/M,KAAK+H,SAASjD,SAAShB,EAAQjG,QA+HjE,OA1BImC,KAAKyB,OAASzB,KAAKkI,OACrBlI,KAAKyB,MAAM+K,UAAUlD,OAAOtJ,KAAKkI,OAInClI,KAAKkI,MAAQ41B,EAAAj2B,mBAAmB7H,KAAKwB,MAAOxB,KAAK8H,SAAU9H,KAAK+H,UAGhE/H,KAAKkI,MAAM2E,eAAgB,EAG3B7M,KAAK6zC,UACH7zC,KAAKwB,MAAMkB,QAAQU,OAASzB,EAAAhC,SAAS0D,OACjCrD,KAAKkI,MAAM+rC,aACXxtC,EAIFzG,KAAKyB,QACPzB,KAAKyB,MAAM+K,UAAU+B,IAAIvO,KAAKkI,OAE1BlI,KAAK6zC,WACP7zC,KAAKyB,MAAMgL,iBAAiB8B,IAAIvO,KAAK6zC,aAKvCuC,SACAD,aAAcI,GAQVr3C,0BACNq3C,EAIAS,GAEA,GAAyC,IAArCh3C,KAAKw1C,uBAAuBzvC,KAAY,OAG5C,MAAMkxC,KAONj3C,KAAKw1C,uBAAuBvwC,QAAQ,CAACqxC,EAAKnvC,KACxC8vC,EAA0BlqC,MACxB5F,YACA+vC,4BACEX,EAA8Bn4C,IAAI+I,EAAUtJ,UAC9Cs5C,sBAAuBhwC,EAAUyX,qBAAuB3G,IACtD8D,GAAQw6B,EAA8Bn4C,IAAI2d,EAAKle,WAEjDy4C,UAKJ,IAAK,IAAIh5C,EAAI,EAAGA,EAAI05C,IAAqB15C,EAAG,CAC1C,MAAM85C,GACJzC,eAAgB,EAChBrzC,6BAKF,IAAK,IAAImgB,EAAI,EAAGC,EAAOu1B,EAA0BxyC,OAAQgd,EAAIC,IAAQD,EAAG,CACtE,MAAMo1B,EAAeI,EAA0Bx1B,GACzCta,EAAY0vC,EAAa1vC,UACzBmvC,EAAMO,EAAaP,IACnBY,EACJL,EAAaK,4BAEf,IAAKA,EAA6B,CAChCjC,EAAAJ,SACE,kCACA,CAAC1Z,EAAe7yB,KACdnC,QAAQC,QACHkC,0GAA2G6yB,OAIpH,SAGF,MAAMkc,EAAiBH,EAA4Bb,QAEnD,GAAKgB,EAAL,CAYA,IAA6B,IAAzBD,EAAMzC,cACRyC,EAAMzC,cAAgB0C,EAAe1C,mBAChC,GAAI0C,EAAe1C,gBAAkByC,EAAMzC,cAAe,CAC/DM,EAAAJ,SACE,uCACA,CAAC1Z,EAAe7yB,KACdnC,QAAQC,QACHkC,2JAA4J6yB,KAEjKh1B,QAAQC,KAAKe,EAAUtJ,KAAMw5C,KAGjC,SAKF,GAAIlwC,EAAUyX,gBAAiB,CAC7B,MAAMi0B,KAEN,IACE,IAAI9jC,EAAI,EAAGC,EAAO7H,EAAUyX,gBAAgBna,OAC5CsK,EAAIC,IACFD,EACF,CACA,MAAMuoC,EAAiBnwC,EAAUyX,gBAAgB7P,GAC3CwoC,EACJV,EAAaM,qBAAqBpoC,GAEpC,GAAIwoC,EAAkC,CACpC,MAAMC,EAAsBD,EAAiClB,QACzDmB,EACF3E,EAAe9lC,KAAKyqC,GAEpBvC,EAAAJ,SACE,2CACA,CAAC1Z,EAAe7yB,KACdnC,QAAQC,QACHkC,gFAAiF6yB,KAEtFh1B,QAAQC,0BACee,EAAUtJ,yBAC7By5C,EAAez5C,WAS7Bw5C,EAAexE,eAAiBA,EAIlC,IAAK,IAAI9jC,EAAI,EAAGC,EAAOsnC,EAAI7xC,OAAQsK,EAAIC,IAAQD,EAAG,CAChD,MAAMzG,EAAKguC,EAAIvnC,GACfqoC,EAAM91C,yBAAyBgH,GAAM+uC,QApErCpC,EAAAJ,SACE,kCACA,CAAC1Z,EAAe7yB,KACdnC,QAAQC,QACHkC,0GAA2G6yB,OAqExHn7B,KAAKm1C,mBAAmBpoC,KAAKqqC,GAI/BnC,EAAAD,gBAMF91C,mBACE,OAAOc,KAAKu1C,iKCrmBhB11C,EAAAzC,EAAA,IACAyC,EAAAzC,EAAA,MACAyC,EAAAzC,EAAA,qFCDA,MAAAuE,EAAAvE,EAAA,GAOAqe,EAAAre,EAAA,GAKAq6C,EAAAr6C,EAAA,KACAs6C,EAAAt6C,EAAA,KACAy0C,EAAAz0C,EAAA,IACAu6C,EAAAv6C,EAAA,KAsCAT,EAAA0J,0BAMEnH,YACEsC,EACA+B,GAEAvD,KAAKwB,MAAQA,EACbxB,KAAKuD,cAAgBA,EAMvBrE,gBAEE,OAAIc,KAAKqE,WAAmBrE,KAAKqE,YAE7BrE,KAAKwB,MAAMiC,aAAegY,EAAA5U,gBAAgBU,mBAC5CvH,KAAKsE,UAAY,IAAImzC,EAAAvF,+BACnBlyC,KAAKwB,MACLxB,KAAKuD,gBAIHvD,KAAKwB,MAAMkB,UACT1C,KAAKwB,MAAMkB,QAAQU,OAASzB,EAAAhC,SAASiD,IACvC5C,KAAKsE,UAAY,IAAIqzC,EAAA7F,yBACnB9xC,KAAKwB,MACLxB,KAAKuD,eAEEvD,KAAKwB,MAAMkB,QAAQU,OAASzB,EAAAhC,SAAS0D,SAC9CrD,KAAKsE,UAAY,IAAIozC,EAAA1F,0BACnBhyC,KAAKwB,MACLxB,KAAKuD,iBAKNvD,KAAKsE,YACRtE,KAAKsE,UAAY,IAAIutC,EAAA5jC,qBACnBjO,KAAKwB,MACLxB,KAAKuD,iBAKXvD,KAAKqE,YACHrE,KAAKsE,UAAUgK,eACftO,KAAKsE,UAAUmK,YACfzO,KAAKsE,UAAUszC,gBAGV53C,KAAKqE,4CCrFhB,SAAAwzC,EAAwBhK,EAAYC,GAClC,MAAMzV,EAAKwV,EAAG5tC,EAAI6tC,EAAG7tC,EACfq4B,EAAKuV,EAAG3tC,EAAI4tC,EAAG5tC,EAErB,OAAOm4B,EAAKA,EAAKC,EAAKA,yDASxBwf,EAWE54C,WAAW2uC,EAAYC,EAAY1jC,GACjC,OAAIA,GACFA,EAAInK,EAAI4tC,EAAG5tC,EAAI6tC,EAAG7tC,EAClBmK,EAAIlK,EAAI2tC,EAAG3tC,EAAI4tC,EAAG5tC,EACXkK,IAIPnK,EAAG4tC,EAAG5tC,EAAI6tC,EAAG7tC,EACbC,EAAG2tC,EAAG3tC,EAAI4tC,EAAG5tC,GAejBhB,kBAAkB64C,EAAmBC,GACnC,IAEI7f,EAFA+W,EAAkBzoB,OAAOwO,UACzBgjB,EAAuBF,EAc3B,OAFAC,EAAO/yC,QATa,SAAStE,IAC3Bw3B,EAAW0f,EAAel3C,EAAOo3C,IAElB7I,IACbA,EAAkB/W,EAClB8f,EAAet3C,KAMZs3C,EAgBT/4C,uBAAuB64C,EAAmBC,GACxC,IAEI7f,EAFA+W,EAAkBzoB,OAAOwO,UACzBgjB,EAAuB,EAc3B,OAFAD,EAAO/yC,QATa,SAAStE,EAAerD,IAC1C66B,EAAW0f,EAAel3C,EAAOo3C,IAElB7I,IACbA,EAAkB/W,EAClB8f,EAAe36C,KAMZ26C,EAaT/4C,gBACEg5C,EACA7kB,EACA8kB,GAAqB,GAErB,IAAI9f,EAAKhF,EAAKpzB,EAAIi4C,EAAOj4C,EACrBq4B,EAAKjF,EAAKnzB,EAAIg4C,EAAOh4C,EAEzB,GAAIi4C,EAAW,CACb,MAAMC,EAAYv3C,KAAKkQ,KAAKsnB,EAAKA,EAAKC,EAAKA,GAC3CD,GAAM+f,EACN9f,GAAM8f,EAGR,OACEn4C,EAAGo4B,EACHn4B,EAAGo4B,GAcPp5B,mBAAmB2uC,EAAYC,EAAYuK,GAAmB,GAC5D,OAAIA,EACKR,EAAehK,EAAIC,GAGrBjtC,KAAKkQ,KAAK8mC,EAAehK,EAAIC,IAYtC5uC,mBAAmB2uC,EAAYC,GAC7B,MAAM13B,EAAY0hC,EAAM5kC,SAAS26B,EAAIC,GAErC,OACE7tC,EAAGmW,EAAUnW,EAAI,EAAI4tC,EAAG5tC,EACxBC,EAAGkW,EAAUlW,EAAI,EAAI2tC,EAAG3tC,GAI5BhB,YAAYe,EAAWC,GACrB,OAASD,IAAGC,KAadhB,aAAa2uC,EAAY/uC,EAAWsL,GAClC,OAAIA,GACFA,EAAInK,EAAI4tC,EAAG5tC,EAAInB,EACfsL,EAAIlK,EAAI2tC,EAAG3tC,EAAIpB,EACRsL,IAIPnK,EAAG4tC,EAAG5tC,EAAInB,EACVoB,EAAG2tC,EAAG3tC,EAAIpB,GAUdI,cACE,OACEe,EAAG,EACHC,EAAG,IA5LTvD,EAAAm7C,uFCtCA,MAAAn2C,EAAAvE,EAAA,GAiBAT,EAAA8zC,uBAAAvxC,cAEUc,KAAAs4C,oBAEAt4C,KAAAu4C,mBAEAv4C,KAAAw4C,cAAe,EAKvBz0C,iBAIE,OAHA/D,KAAKw4C,cAAe,EACJx6C,OAAO2G,OAAO3E,KAAKu4C,iBASrCr5C,IAAIgF,GAEF,GAAIlE,KAAKs4C,iBAAiBp0C,EAASuF,KACjC,OAAOvF,EAGT,GAAIlE,KAAKw4C,aAAc,CACrBt0C,EAASkF,SAAWpJ,KACpB,MAAMy4C,EAAqBv0C,EAASgF,mBAEpClJ,KAAKs4C,iBAAiBp0C,EAASuF,MAAQvF,EAAUu0C,GAEjDz4C,KAAKu4C,gBAAgBr0C,EAASuF,MAC5BvF,EACAvC,EAAA/B,iBAAiB84C,WAKrB,OAAOx0C,EAMThF,QACE,MAAMyF,EAAS3G,OAAO2G,OAAO3E,KAAKs4C,kBAElC,IAAK,IAAIh7C,EAAI,EAAGkH,EAAMG,EAAOF,OAAQnH,EAAIkH,IAAOlH,EAC9C0C,KAAKsJ,OAAO3E,EAAOrH,GAAG,IAS1B4B,UACE,MAAMyF,EAAS3G,OAAO2G,OAAO3E,KAAKs4C,kBAElC,IAAK,IAAIh7C,EAAI,EAAGkH,EAAMG,EAAOF,OAAQnH,EAAIkH,IAAOlH,EAC9CqH,EAAOrH,GAAG,KAGZ0C,KAAKs4C,oBACLt4C,KAAKu4C,mBAMPr5C,gBAAgBgF,EAAaxF,GAC3B,GAAIsB,KAAKw4C,aAAc,CAErB,MAAMv0C,EAASjE,KAAKu4C,gBAAgBr0C,EAASuF,OAC3CvF,EACAvC,EAAA/B,iBAAiB+4C,WAGnB34C,KAAKu4C,gBAAgBr0C,EAASuF,KAAOxF,EACrCA,EAAO,GAAKtC,EAAA/B,iBAAiB+4C,OAC7B10C,EAAO,GAAGvF,GAAYA,GAQ1BQ,OAAOgF,GACL,GAAIlE,KAAKw4C,aAAc,CACrB,MAAMC,EAAWz4C,KAAKs4C,iBAAiBp0C,EAASuF,KAE5CgvC,IACFA,EAAS,YACFz4C,KAAKs4C,iBAAiBp0C,EAASuF,KACtCzJ,KAAKu4C,gBAAgBr0C,EAASuF,MAC5BvF,EACAvC,EAAA/B,iBAAiBg5C,YAMvB,OAAO,EAMT15C,UACEc,KAAKw4C,cAAe,EACpBx4C,KAAKu4C,oGCpIT,MAAA72C,EAAAtE,EAAA,GACA4oC,EAAA5oC,EAAA,GACA6nC,EAAA7nC,EAAA,GACA8nC,EAAA9nC,EAAA,GAMAuE,EAAAvE,EAAA,GASAwE,EAAAxE,EAAA,SA6BAy7C,UAAiC3T,EAAAljC,MAY/B9C,4BAGE,OAEEiE,eAAiB21C,GACf,IAAI7T,EAAAnlC,QACFM,OAAwB,EAAhB04C,EAAOzT,OACfllC,MAAuB,EAAhB24C,EAAOzT,OACdplC,EAAG64C,EAAO74C,EAAI64C,EAAOzT,OACrBnlC,EAAG44C,EAAO54C,EAAI44C,EAAOzT,SAIzBriC,QAAS,CAAC81C,EAAwBn4C,EAAe6J,KAC/C,MAAMuuC,EAAqBvuC,EAAKu9B,cAAc+Q,GACxCE,EAAcxuC,EAAKu9B,cAAcpnC,GACjCtC,EAAIy6C,EAAOzT,QAAUrlC,KAAKkC,MAAMojC,aAhBpB,KAAM,MAkBlBprB,GACJ8+B,EAAY/4C,EAAI84C,EAAmB94C,EACnC+4C,EAAY94C,EAAI64C,EAAmB74C,GAGrC,OAAOga,EAAM,GAAKA,EAAM,GAAKA,EAAM,GAAKA,EAAM,GAAK7b,EAAIA,IAQ7Da,aACE,MAAMomC,EAActlC,KAAKkC,MAAMojC,aAAe,KAAO,GAC/C2T,EAAaj5C,KAAKkC,MAAMg3C,aAE5BC,OAAQC,EACR/T,OAAQgU,EACRt5B,MAAOu5B,GACLL,EAEE1T,GACJC,EAAG,EACH1M,EAAG,EACHC,GAAI,EACJC,EAAG,EACHC,GAAI,EACJwM,GAAI,GAGAC,GACJF,GAAI,EACJ1M,GAAI,EACJC,GAAI,EACJC,EAAG,EACHC,EAAG,EACHwM,EAAG,GAGL,OACEjgC,GAAIpI,EAAQ,KACZqI,qBAEII,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBG,IAC/BqK,OAAQ4vC,EACRv7C,KAAM,SACNkI,KAAMpE,EAAA5C,sBAAsBK,IAC5B2F,OAAQ+zC,IAAWA,EAAO74C,EAAG64C,EAAO54C,KAGpC2F,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBK,MAC/BmK,OAAQ6vC,EACRx7C,KAAM,SACNkI,KAAMpE,EAAA5C,sBAAsBI,IAC5B4F,OAAQ+zC,IAAWA,EAAOzT,UAG1Bx/B,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBM,KAC/BzB,KAAM,QACNkI,KAAMpE,EAAA5C,sBAAsBI,IAC5B4F,OAAQ+zC,IAAWA,EAAO12C,SAG1ByD,MAAO,EACPC,WAAYnE,EAAA3C,mBAAmBG,IAC/BqK,OAAQ8vC,EACRz7C,KAAM,QACNkI,KAAMpE,EAAA5C,sBAAsBO,KAC5ByF,OAAQ+zC,GAAUA,EAAO/4B,QAG7Bjb,WAEIjH,KAAM,cACNkI,KAAMpE,EAAAnC,YAAYL,IAClB4F,OAASjB,IAAuBwhC,OAGpC5/B,mBAKI7H,KAAM,WACNkI,KAAMpE,EAAAlC,oBAAoBJ,MAC1B0F,OAAS8gC,IAEPN,EAAeM,GAEfH,EAAaG,GACb,KAINlgC,YAAa,EACbC,GAAIxI,EAAQ,MAIhB8B,eACE,OACEkG,SAAU1D,EAAM2G,sBAChB/C,UAAW5D,EAAM6D,MAIrBrG,qBACE,OAAO0C,EAAAkkC,sBAAsBC,kBA7IxB8S,EAAAp2C,cACLuB,KAAM,IAAIgiC,EAAAyK,iBACV8I,kBAAmB,EACnBhxC,IAAK,GACL+8B,YAAa,IAAM,GALvB3oC,EAAAk8C,2JC/CAh5C,EAAAzC,EAAA,MACAyC,EAAAzC,EAAA,kJCDAyC,EAAAzC,EAAA,MACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,mFCNA,MAAAsE,EAAAtE,EAAA,SAGA0oC,GACSA,EAAAC,kBACLyT,oBAAoB,EACpBC,aAAa,GAGR3T,EAAAyD,kBACLmQ,SAAUh4C,EAAMi4C,eAChBC,SAAUl4C,EAAMm4C,UAChBL,oBAAoB,EACpBC,aAAa,GAVjB98C,EAAAmpC,uGCFA,MAAAj8B,EAAAzM,EAAA,GAMM02B,EAAwB,EACxBC,EAAmB,SAwBzBK,EA2BEl1B,YACE6B,EACAqB,EACA03C,EACAC,EACAC,GAEA,MAAMt5C,EAAMK,EAAOL,IACnBV,KAAKq0B,GAAK,IAAIC,EAAQvzB,EAAOd,EAAGS,EAAIT,EAAGc,EAAOb,EAAGQ,EAAIR,EAAG45C,EAAW13C,GACnEpC,KAAKu0B,GAAK,IAAID,EACZ5zB,EAAIT,EACJc,EAAOP,MACPO,EAAOb,EACPQ,EAAIR,EACJ45C,EACA13C,GAEFpC,KAAKw0B,GAAK,IAAIF,EACZvzB,EAAOd,EACPS,EAAIT,EACJS,EAAIR,EACJa,EAAOR,OACPu5C,EACA13C,GAEFpC,KAAKy0B,GAAK,IAAIH,EACZ5zB,EAAIT,EACJc,EAAOP,MACPE,EAAIR,EACJa,EAAOR,OACPu5C,EACA13C,GAEFpC,KAAKq0B,GAAG0lB,YAAcA,EACtB/5C,KAAKu0B,GAAGwlB,YAAcA,EACtB/5C,KAAKw0B,GAAGulB,YAAcA,EACtB/5C,KAAKy0B,GAAGslB,YAAcA,EACtB/5C,KAAKq0B,GAAG2lB,cAAgBA,EACxBh6C,KAAKu0B,GAAGylB,cAAgBA,EACxBh6C,KAAKw0B,GAAGwlB,cAAgBA,EACxBh6C,KAAKy0B,GAAGulB,cAAgBA,EAzD1B96C,UACEc,KAAKq0B,GAAGxwB,UACR7D,KAAKu0B,GAAG1wB,UACR7D,KAAKw0B,GAAG3wB,UACR7D,KAAKy0B,GAAG5wB,iBACD7D,KAAKq0B,UACLr0B,KAAKu0B,UACLv0B,KAAKw0B,UACLx0B,KAAKy0B,IAlBhB93B,EAAAy3B,kBA4EAE,EAwCEp1B,YACEmB,EACAG,EACAF,EACAC,EACAu5C,EACA13C,EAAgB,GA1ClBpC,KAAA00B,YASA10B,KAAAoC,MAAgB,EAIhBpC,KAAA20B,MAA6B,KAgCvBvH,UAAU3oB,QAAU,EACtBzE,KAAKe,OAAS,IAAI8I,EAAA/J,QAASO,OAAMG,QAAOF,MAAKC,WAG7CP,KAAKe,OAAS,IAAI8I,EAAA/J,QAASO,KAAM,EAAGG,MAAO,EAAGF,IAAK,EAAGC,OAAQ,IAIhEP,KAAKoC,MAAQA,EAEbpC,KAAK85C,UAAYA,EAIE,IAAf95C,KAAKoC,QACPpC,KAAKi6C,eACLj6C,KAAK+5C,YAAc,IAAIz3C,IACvBtC,KAAKg6C,cAAgB,IAAI13C,KAvC7BpD,iBACSc,KAAK00B,gBACL10B,KAAKe,OAERf,KAAK20B,QACP30B,KAAK20B,MAAM9wB,UACX7D,KAAK20B,MAAQ,MAgDjBz1B,IAAI01B,GACF,IAAI7zB,EAASf,KAAKg6C,cAAc57C,IAAIw2B,GAWpC,OATK7zB,IAEHA,EAASf,KAAK85C,UAAUllB,GACxB50B,KAAKg6C,cAAcnuC,IAAI+oB,EAAO7zB,KAM3BA,GAAUA,EAAO8zB,SAAS70B,KAAKe,QAC3Bf,KAAK80B,MAAMF,EAAO7zB,IAGzBf,KAAK+0B,MAAMh0B,GACJf,KAAKuO,IAAIqmB,IAWpB11B,OAAOw1B,GAGL,IAAIjQ,EAAOgC,OAAOwO,UACdvQ,EAAO+B,OAAOwO,UACdtQ,GAAQ8B,OAAOwO,UACfrQ,GAAQ6B,OAAOwO,UAGnBP,EAASzvB,QAAQ2vB,IACf,MAAM7zB,EAASf,KAAK85C,UAAUllB,GAC9B50B,KAAKg6C,cAAcnuC,IAAI+oB,EAAO7zB,GACzBA,IAEDA,EAAOd,EAAIwkB,IACbA,EAAO1jB,EAAOd,GAEZc,EAAOP,MAAQmkB,IACjBA,EAAO5jB,EAAOP,OAEZO,EAAOR,OAASqkB,IAClBA,EAAO7jB,EAAOR,QAEZQ,EAAOb,EAAIwkB,IACbA,EAAO3jB,EAAOb,MAQhBukB,IAASgC,OAAOwO,WAChBvQ,IAAS+B,OAAOwO,WAChBtQ,KAAU8B,OAAOwO,WACjBrQ,KAAU6B,OAAOwO,WAGjBj1B,KAAK+0B,MACH,IAAIlrB,EAAA/J,QAASO,KAAMokB,EAAMjkB,MAAOmkB,EAAMpkB,OAAQqkB,EAAMtkB,IAAKokB,KAK7DgQ,EAASzvB,QAAQ,CAAC2vB,EAAO5nB,IACvBhN,KAAK80B,MAAMF,EAAO50B,KAAKg6C,cAAc57C,IAAIw2B,IAAU,MAAM,IAU7D11B,MAAM6B,GAEJ,GAAIA,EAAO8zB,SAAS70B,KAAKe,QACvB,OAIFf,KAAKe,OAAOm0B,YAAYn0B,GACxBf,KAAKe,OAAOd,GAAK,EACjBD,KAAKe,OAAOb,GAAK,EACjBF,KAAKe,OAAOZ,OAAS,EACrBH,KAAKe,OAAOX,QAAU,EAEtB,MAAM+0B,EAAcn1B,KAAKo1B,mBACzBp1B,KAAK00B,YAGD10B,KAAK20B,QAEP30B,KAAK20B,MAAM9wB,UACX7D,KAAK20B,MAAQ,MAIf30B,KAAK+5C,YAAYxnB,QAEjB4C,EAAYlwB,QAAQ,CAAC2vB,EAAO5nB,IAC1BhN,KAAK80B,MAAMF,EAAO50B,KAAKg6C,cAAc57C,IAAIw2B,IAAU,OAa/C11B,MAAM01B,EAAU7zB,EAAuBm5C,GAE7C,OAAKn5C,GAAyB,IAAff,KAAKoC,MAQfrB,EASDf,KAAK20B,MACH5zB,EAAO8zB,SAAS70B,KAAK20B,MAAMN,GAAGtzB,QACzBf,KAAK20B,MAAMN,GAAGS,MAAMF,EAAO7zB,EAAQm5C,GAGxCn5C,EAAO8zB,SAAS70B,KAAK20B,MAAMJ,GAAGxzB,QACzBf,KAAK20B,MAAMJ,GAAGO,MAAMF,EAAO7zB,EAAQm5C,GAGxCn5C,EAAO8zB,SAAS70B,KAAK20B,MAAMH,GAAGzzB,QACzBf,KAAK20B,MAAMH,GAAGM,MAAMF,EAAO7zB,EAAQm5C,GAGxCn5C,EAAO8zB,SAAS70B,KAAK20B,MAAMF,GAAG1zB,QACzBf,KAAK20B,MAAMF,GAAGK,MAAMF,EAAO7zB,EAAQm5C,IAI5Cl6C,KAAK00B,SAAS3nB,KAAK6nB,GACnB50B,KAAK+5C,YAAYluC,IAAI+oB,EAAO50B,OAErB,GACEe,EAAO8zB,SAAS70B,KAAKe,SAE9Bf,KAAK00B,SAAS3nB,KAAK6nB,GACnB50B,KAAK+5C,YAAYluC,IAAI+oB,EAAO50B,MAGxBA,KAAK00B,SAASjwB,OAASqvB,GAAiB9zB,KAAKoC,MAAQ2xB,GACvD/zB,KAAKq1B,SAGA,IAMLC,MAAMv0B,EAAOZ,MAAQY,EAAOX,OAASW,EAAOd,EAAIc,EAAOb,GACzDiG,QAAQoK,MACN,2DACAqkB,EACA7zB,GAEuB,IAAhBA,EAAON,KAChB0F,QAAQoK,MACN,yDACAqkB,EACA7zB,GAGFoF,QAAQoK,MACN,+BACA,UACAvQ,KAAKe,OAAOuoB,WACZ,SACAvoB,EAAOuoB,WACP,iBACAvoB,EAAOd,GAAKD,KAAKe,OAAOd,EACxBc,EAAOP,OAASR,KAAKe,OAAOP,MAC5BO,EAAOb,GAAKF,KAAKe,OAAOb,EACxBa,EAAOR,QAAUP,KAAKe,OAAOR,SAK1B,IA1EL4F,QAAQC,KACN,sFAEK,IAXPpG,KAAKi6C,YAAYltC,KAAK6nB,GACtB50B,KAAK+5C,YAAYluC,IAAI+oB,EAAO50B,OAErB,GAkFHd,SAAS01B,GACf,MAAM5nB,EAAQhN,KAAK00B,SAASznB,QAAQ2nB,GAEhC5nB,GAAS,IACXhN,KAAK00B,SAASxnB,OAAOF,EAAO,GAC5BhN,KAAK+5C,YAAYpmB,OAAOiB,GACxB50B,KAAKg6C,cAAcrmB,OAAOiB,IAW9B11B,eAAeq2B,GAUb,OATAv1B,KAAK00B,SAASzvB,QAAQ2vB,GAASW,EAAKxoB,KAAK6nB,IAErC50B,KAAK20B,QACP30B,KAAK20B,MAAMN,GAAGe,eAAeG,GAC7Bv1B,KAAK20B,MAAMJ,GAAGa,eAAeG,GAC7Bv1B,KAAK20B,MAAMH,GAAGY,eAAeG,GAC7Bv1B,KAAK20B,MAAMF,GAAGW,eAAeG,IAGxBA,EAYTr2B,MAAM6B,EAAyBy0B,GAE7B,IAAI2kB,KAQJ,OALmB,IAAfn6C,KAAKoC,QACP+3C,EAAQn6C,KAAKi6C,YAAYnpC,MAAM,IAI7B/P,aAAkB8I,EAAA/J,QAChBiB,EAAO00B,UAAUz1B,KAAKe,QACjBf,KAAK01B,YAAY30B,EAAQo5C,EAAO3kB,GAKvCx1B,KAAKe,OAAO40B,cAAc50B,GACrBf,KAAK41B,WAAW70B,EAAQo5C,EAAO3kB,GAIjC2kB,EAaTj7C,YAAYoN,EAAWipB,EAAWC,GA+BhC,OA9BAx1B,KAAK00B,SAASzvB,QAAQtH,IACpB,MAAMoD,EAASf,KAAKg6C,cAAc57C,IAAIT,GAElCoD,GAAUA,EAAO00B,UAAUnpB,IAC7BipB,EAAKxoB,KAAKpP,KAIV63B,GACFA,EAAMx1B,MAGJA,KAAK20B,QACHroB,EAAEmpB,UAAUz1B,KAAK20B,MAAMN,GAAGtzB,SAC5Bf,KAAK20B,MAAMN,GAAGqB,YAAYppB,EAAGipB,EAAMC,GAGjClpB,EAAEmpB,UAAUz1B,KAAK20B,MAAMJ,GAAGxzB,SAC5Bf,KAAK20B,MAAMJ,GAAGmB,YAAYppB,EAAGipB,EAAMC,GAGjClpB,EAAEmpB,UAAUz1B,KAAK20B,MAAMH,GAAGzzB,SAC5Bf,KAAK20B,MAAMH,GAAGkB,YAAYppB,EAAGipB,EAAMC,GAGjClpB,EAAEmpB,UAAUz1B,KAAK20B,MAAMF,GAAG1zB,SAC5Bf,KAAK20B,MAAMF,GAAGiB,YAAYppB,EAAGipB,EAAMC,IAIhCD,EAaTr2B,WAAWL,EAAQ02B,EAAWC,GA+B5B,OA9BAx1B,KAAK00B,SAASzvB,QAAQtH,IACpB,MAAMoD,EAASf,KAAKg6C,cAAc57C,IAAIT,GAElCoD,GAAUA,EAAO40B,cAAc92B,IACjC02B,EAAKxoB,KAAKpP,KAIV63B,GACFA,EAAMx1B,MAGJA,KAAK20B,QACH30B,KAAK20B,MAAMN,GAAGtzB,OAAO40B,cAAc92B,IACrCmB,KAAK20B,MAAMN,GAAGuB,WAAW/2B,EAAG02B,EAAMC,GAGhCx1B,KAAK20B,MAAMJ,GAAGxzB,OAAO40B,cAAc92B,IACrCmB,KAAK20B,MAAMJ,GAAGqB,WAAW/2B,EAAG02B,EAAMC,GAGhCx1B,KAAK20B,MAAMH,GAAGzzB,OAAO40B,cAAc92B,IACrCmB,KAAK20B,MAAMH,GAAGoB,WAAW/2B,EAAG02B,EAAMC,GAGhCx1B,KAAK20B,MAAMF,GAAG1zB,OAAO40B,cAAc92B,IACrCmB,KAAK20B,MAAMF,GAAGmB,WAAW/2B,EAAG02B,EAAMC,IAI/BD,EAMTr2B,OAAO01B,GACL,GAAI50B,KAAK+5C,YAAa,CACpB,MAAMK,EAAOp6C,KAAK+5C,YAAY37C,IAAIw2B,GAIlC,GAAIwlB,GAAuB,IAAfA,EAAKh4C,MAAa,CAC5B,MAAM4K,EAAQotC,EAAKH,YAAYhtC,QAAQ2nB,GAEvC,GAAI5nB,GAAS,EAKX,OAJAotC,EAAKH,YAAY/sC,OAAOF,GACxBhN,KAAK+5C,YAAYpmB,OAAOiB,QACxB50B,KAAKg6C,cAAcrmB,OAAOiB,GAO1BwlB,GACFA,EAAKC,SAASzlB,IAQpB11B,QAEE,MAAMi2B,EAAcn1B,KAAKo1B,mBAEzBp1B,KAAK20B,MAAQ,IAAIP,EACfp0B,KAAKe,OACLf,KAAKoC,MAAQ,EACbpC,KAAK85C,UACL95C,KAAK+5C,YACL/5C,KAAKg6C,eAGPh6C,KAAK00B,YAEL,IAAK,IAAIp3B,EAAI,EAAGkH,EAAM2wB,EAAY1wB,OAAQnH,EAAIkH,IAAOlH,EAAG,CACtD,MAAMs3B,EAAQO,EAAY73B,GAC1B0C,KAAK80B,MAAMF,EAAO50B,KAAKg6C,cAAc57C,IAAIw2B,IAAU,MAAM,IAS7D11B,MAAM22B,GACJ,MAAMC,EAAW3tB,QAAQ0tB,EAAG71B,OAExBA,KAAK20B,QAAUmB,IACjB91B,KAAK20B,MAAMN,GAAGmB,MAAMK,GACpB71B,KAAK20B,MAAMJ,GAAGiB,MAAMK,GACpB71B,KAAK20B,MAAMH,GAAGgB,MAAMK,GACpB71B,KAAK20B,MAAMF,GAAGe,MAAMK,KA3f1Bl5B,EAAA23B,OAggBA33B,EAAAuG,8BAAyDoxB,mFC5mBzD,MAAApS,EAAA9kB,EAAA,IA2BAT,EAAA29C,8BAAqCp4B,EAAAtR,YAqBnC1R,YAAYa,GACVoC,QApBMnC,KAAAu6C,aAAe,CAAC3vC,GAAqCA,GACrD5K,KAAAw6C,YAAc,CAAC3vC,GAAoCA,GAoBzD7M,OAAOwE,OAAOxC,KAAMD,GAlBtB6K,WAAWzJ,IAIXyJ,aACE,OAAO5K,KAAKu6C,aAAav6C,KAAKy6C,KAAK7vC,QAGrCC,UAAU1J,IAIV0J,YACE,OAAO7K,KAAKw6C,YAAYx6C,KAAKy6C,KAAK5vC,wBCzCtC,IAAA/L,EAAA,IACApB,EAAA,GAAAoB,EACA47C,EAAA,GAAAh9C,EACAE,EAAA,GAAA88C,EACAx6C,EAAA,OAAAtC,EAuIA,SAAA+8C,EAAAC,EAAAr8C,EAAAV,GACA,KAAA+8C,EAAAr8C,GAGA,OAAAq8C,EAAA,IAAAr8C,EACAsC,KAAAkjB,MAAA62B,EAAAr8C,GAAA,IAAAV,EAEAgD,KAAAuG,KAAAwzC,EAAAr8C,GAAA,IAAAV,EAAA,IA9HAjB,EAAAD,QAAA,SAAAwE,EAAApB,GACAA,QACA,IAAAqD,SAAAjC,EACA,cAAAiC,GAAAjC,EAAAsD,OAAA,EACA,OAkBA,SAAAo2C,GAEA,IADAA,EAAAC,OAAAD,IACAp2C,OAAA,IACA,OAEA,IAAAsL,EAAA,wHAAAgrC,KACAF,GAEA,IAAA9qC,EACA,OAEA,IAAAxR,EAAA63B,WAAArmB,EAAA,IAEA,QADAA,EAAA,UAAAke,eAEA,YACA,WACA,UACA,SACA,QACA,OAAA1vB,EAAA2B,EACA,WACA,UACA,QACA,OAAA3B,EAAAX,EACA,YACA,WACA,UACA,SACA,QACA,OAAAW,EAAAm8C,EACA,cACA,aACA,WACA,UACA,QACA,OAAAn8C,EAAAb,EACA,cACA,aACA,WACA,UACA,QACA,OAAAa,EAAAO,EACA,mBACA,kBACA,YACA,WACA,SACA,OAAAP,EACA,QACA,QAnEA23B,CAAA/0B,GACG,cAAAiC,IAAA,IAAAkyB,MAAAn0B,GACH,OAAApB,EAAAi7C,KAqGA,SAAAJ,GACA,OAAAD,EAAAC,EAAAh9C,EAAA,QACA+8C,EAAAC,EAAAF,EAAA,SACAC,EAAAC,EAAAl9C,EAAA,WACAi9C,EAAAC,EAAA97C,EAAA,WACA87C,EAAA,MA1GAK,CAAA95C,GA6EA,SAAAy5C,GACA,GAAAA,GAAAh9C,EACA,OAAAiD,KAAA+S,MAAAgnC,EAAAh9C,GAAA,IAEA,GAAAg9C,GAAAF,EACA,OAAA75C,KAAA+S,MAAAgnC,EAAAF,GAAA,IAEA,GAAAE,GAAAl9C,EACA,OAAAmD,KAAA+S,MAAAgnC,EAAAl9C,GAAA,IAEA,GAAAk9C,GAAA97C,EACA,OAAA+B,KAAA+S,MAAAgnC,EAAA97C,GAAA,IAEA,OAAA87C,EAAA,KA1FAM,CAAA/5C,GAEA,UAAAgE,MACA,wDACA8pB,KAAAC,UAAA/tB,sBC2BA,SAAAg6C,EAAA3tB,GAEA,IAAA4tB,EAEA,SAAAtuB,IAEA,GAAAA,EAAAsF,QAAA,CAEA,IAAAipB,EAAAvuB,EAGAwuB,GAAA,IAAA1hC,KACAghC,EAAAU,GAAAF,GAAAE,GACAD,EAAA3tB,KAAAktB,EACAS,EAAAE,KAAAH,EACAC,EAAAC,OACAF,EAAAE,EAIA,IADA,IAAAhuB,EAAA,IAAApM,MAAAkM,UAAA3oB,QACAnH,EAAA,EAAmBA,EAAAgwB,EAAA7oB,OAAiBnH,IACpCgwB,EAAAhwB,GAAA8vB,UAAA9vB,GAGAgwB,EAAA,GAAA3wB,EAAA6+C,OAAAluB,EAAA,IAEA,iBAAAA,EAAA,IAEAA,EAAA8C,QAAA,MAIA,IAAApjB,EAAA,EACAsgB,EAAA,GAAAA,EAAA,GAAAxd,QAAA,yBAAAC,EAAA0rC,GAEA,UAAA1rC,EAAA,OAAAA,EACA/C,IACA,IAAA0uC,EAAA/+C,EAAAqyB,WAAAysB,GACA,sBAAAC,EAAA,CACA,IAAAv6C,EAAAmsB,EAAAtgB,GACA+C,EAAA2rC,EAAAj+C,KAAA49C,EAAAl6C,GAGAmsB,EAAApgB,OAAAF,EAAA,GACAA,IAEA,OAAA+C,IAIApT,EAAA0wB,WAAA5vB,KAAA49C,EAAA/tB,IAEAR,EAAAG,KAAAtwB,EAAAswB,KAAA9mB,QAAA8mB,IAAA+jB,KAAA7qC,UACAgnB,MAAAkuB,EAAA/tB,IAgBA,OAbAR,EAAAU,YACAV,EAAAsF,QAAAz1B,EAAAy1B,QAAA5E,GACAV,EAAAS,UAAA5wB,EAAA4wB,YACAT,EAAA/M,MA9EA,SAAAyN,GACA,IAAAlwB,EAAAq+C,EAAA,EAEA,IAAAr+C,KAAAkwB,EACAmuB,MAAA,GAAAA,EAAAnuB,EAAAouB,WAAAt+C,GACAq+C,GAAA,EAGA,OAAAh/C,EAAAoyB,OAAAluB,KAAAC,IAAA66C,GAAAh/C,EAAAoyB,OAAAtqB,QAsEAo3C,CAAAruB,GACAV,EAAAjpB,UAGA,mBAAAlH,EAAAknC,MACAlnC,EAAAknC,KAAA/W,GAGAnwB,EAAAm/B,UAAA/uB,KAAA+f,GAEAA,EAGA,SAAAjpB,IACA,IAAAmJ,EAAArQ,EAAAm/B,UAAA7uB,QAAAjN,MACA,WAAAgN,IACArQ,EAAAm/B,UAAA5uB,OAAAF,EAAA,IACA,IAjIArQ,EAAAC,EAAAD,QAAAw+C,EAAAruB,MAAAquB,EAAA,QAAAA,GACAK,OAoNA,SAAAr6C,GACA,OAAAA,aAAAgE,MAAAhE,EAAAw+B,OAAAx+B,EAAAiuB,QACAjuB,GArNAxE,EAAAm/C,QA6KA,WACAn/C,EAAA0yB,OAAA,KA7KA1yB,EAAA0yB,OA4IA,SAAAxB,GAMA,IAAAvwB,EALAX,EAAAixB,KAAAC,GAEAlxB,EAAAo/C,SACAp/C,EAAAq/C,SAGA,IAAA3mB,GAAA,iBAAAxH,IAAA,IAAAwH,MAAA,UACA4mB,EAAA5mB,EAAA5wB,OAEA,IAAAnH,EAAA,EAAaA,EAAA2+C,EAAS3+C,IACtB+3B,EAAA/3B,KAEA,OADAuwB,EAAAwH,EAAA/3B,GAAAwS,QAAA,cACA,GACAnT,EAAAq/C,MAAAjvC,KAAA,IAAA0hB,OAAA,IAAAZ,EAAAtI,OAAA,SAEA5oB,EAAAo/C,MAAAhvC,KAAA,IAAA0hB,OAAA,IAAAZ,EAAA,OAIA,IAAAvwB,EAAA,EAAaA,EAAAX,EAAAm/B,UAAAr3B,OAA8BnH,IAAA,CAC3C,IAAA4G,EAAAvH,EAAAm/B,UAAAx+B,GACA4G,EAAAkuB,QAAAz1B,EAAAy1B,QAAAluB,EAAAspB,aAjKA7wB,EAAAy1B,QAuLA,SAAAv0B,GACA,SAAAA,IAAA4G,OAAA,GACA,SAEA,IAAAnH,EAAA2+C,EACA,IAAA3+C,EAAA,EAAA2+C,EAAAt/C,EAAAq/C,MAAAv3C,OAAyCnH,EAAA2+C,EAAS3+C,IAClD,GAAAX,EAAAq/C,MAAA1+C,GAAAwgB,KAAAjgB,GACA,SAGA,IAAAP,EAAA,EAAA2+C,EAAAt/C,EAAAo/C,MAAAt3C,OAAyCnH,EAAA2+C,EAAS3+C,IAClD,GAAAX,EAAAo/C,MAAAz+C,GAAAwgB,KAAAjgB,GACA,SAGA,UArMAlB,EAAA8wB,SAAArwB,EAAA,KAKAT,EAAAm/B,aAMAn/B,EAAAo/C,SACAp/C,EAAAq/C,SAQAr/C,EAAAqyB,6BChCA,IAOAktB,EACAC,EARAxvB,EAAA/vB,EAAAD,WAUA,SAAAy/C,IACA,UAAAj3C,MAAA,mCAEA,SAAAk3C,IACA,UAAAl3C,MAAA,qCAsBA,SAAAm3C,EAAAC,GACA,GAAAL,IAAA/3B,WAEA,OAAAA,WAAAo4B,EAAA,GAGA,IAAAL,IAAAE,IAAAF,IAAA/3B,WAEA,OADA+3B,EAAA/3B,WACAA,WAAAo4B,EAAA,GAEA,IAEA,OAAAL,EAAAK,EAAA,GACK,MAAApwB,GACL,IAEA,OAAA+vB,EAAAz+C,KAAA,KAAA8+C,EAAA,GACS,MAAApwB,GAET,OAAA+vB,EAAAz+C,KAAAuC,KAAAu8C,EAAA,MAvCA,WACA,IAEAL,EADA,mBAAA/3B,WACAA,WAEAi4B,EAEK,MAAAjwB,GACL+vB,EAAAE,EAEA,IAEAD,EADA,mBAAApH,aACAA,aAEAsH,EAEK,MAAAlwB,GACLgwB,EAAAE,GAjBA,GAwEA,IAEAG,EAFAC,KACAC,GAAA,EAEAC,GAAA,EAEA,SAAAC,IACAF,GAAAF,IAGAE,GAAA,EACAF,EAAA/3C,OACAg4C,EAAAD,EAAAp9B,OAAAq9B,GAEAE,GAAA,EAEAF,EAAAh4C,QACAo4C,KAIA,SAAAA,IACA,IAAAH,EAAA,CAGA,IAAAI,EAAAR,EAAAM,GACAF,GAAA,EAGA,IADA,IAAAT,EAAAQ,EAAAh4C,OACAw3C,GAAA,CAGA,IAFAO,EAAAC,EACAA,OACAE,EAAAV,GACAO,GACAA,EAAAG,GAAAI,MAGAJ,GAAA,EACAV,EAAAQ,EAAAh4C,OAEA+3C,EAAA,KACAE,GAAA,EAnEA,SAAAM,GACA,GAAAb,IAAApH,aAEA,OAAAA,aAAAiI,GAGA,IAAAb,IAAAE,IAAAF,IAAApH,aAEA,OADAoH,EAAApH,aACAA,aAAAiI,GAEA,IAEAb,EAAAa,GACK,MAAA7wB,GACL,IAEA,OAAAgwB,EAAA1+C,KAAA,KAAAu/C,GACS,MAAA7wB,GAGT,OAAAgwB,EAAA1+C,KAAAuC,KAAAg9C,KAgDAC,CAAAH,IAiBA,SAAAI,EAAAX,EAAA7F,GACA12C,KAAAu8C,MACAv8C,KAAA02C,QAYA,SAAAyG,KA5BAxwB,EAAAywB,SAAA,SAAAb,GACA,IAAAjvB,EAAA,IAAApM,MAAAkM,UAAA3oB,OAAA,GACA,GAAA2oB,UAAA3oB,OAAA,EACA,QAAAnH,EAAA,EAAuBA,EAAA8vB,UAAA3oB,OAAsBnH,IAC7CgwB,EAAAhwB,EAAA,GAAA8vB,UAAA9vB,GAGAm/C,EAAA1vC,KAAA,IAAAmwC,EAAAX,EAAAjvB,IACA,IAAAmvB,EAAAh4C,QAAAi4C,GACAJ,EAAAO,IASAK,EAAAv+C,UAAAo+C,IAAA,WACA/8C,KAAAu8C,IAAApvB,MAAA,KAAAntB,KAAA02C,QAEA/pB,EAAA0wB,MAAA,UACA1wB,EAAA2C,SAAA,EACA3C,EAAAI,OACAJ,EAAA2wB,QACA3wB,EAAA6D,QAAA,GACA7D,EAAA4wB,YAIA5wB,EAAA6wB,GAAAL,EACAxwB,EAAA8wB,YAAAN,EACAxwB,EAAA+wB,KAAAP,EACAxwB,EAAAgxB,IAAAR,EACAxwB,EAAAixB,eAAAT,EACAxwB,EAAAkxB,mBAAAV,EACAxwB,EAAAmoB,KAAAqI,EACAxwB,EAAAmxB,gBAAAX,EACAxwB,EAAAoxB,oBAAAZ,EAEAxwB,EAAAqxB,UAAA,SAAAngD,GAAqC,UAErC8uB,EAAAsxB,QAAA,SAAApgD,GACA,UAAAsH,MAAA,qCAGAwnB,EAAAuxB,IAAA,WAA2B,WAC3BvxB,EAAAwxB,MAAA,SAAAC,GACA,UAAAj5C,MAAA,mCAEAwnB,EAAA0xB,MAAA,WAA4B,yBCvL5BzhD,EAAAD,QAAAO,gCCYA,SAAAohD,EAAkBn9C,GAChB,OAAQm0B,MAAMn0B,oDAOhBxE,EAAA4hD,sBAGEr/C,YAAYkf,GACVpe,KAAKoe,QAAUA,EAYjBlf,eACEikB,EACAq7B,EACAC,EACAC,EACAC,GAGA,MAAMC,EAAiB5+C,KAAKoe,QAAQC,aAAaF,YAGjDne,KAAKoe,QAAQxZ,OAAOg6C,GAGpB,IAAK,IAAIthD,EAAI,EAAGA,EAAIkhD,IAAclhD,EAAG,CAEnC,MAAMuhD,EAAMP,EAASI,GACjBA,EACAA,EAASphD,EAAG6lB,EAAatN,OAE7BsN,EAAatN,MAAQ4oC,EAAYI,EAAMvhD,EAEvCqhD,EAAgBrhD,GAEhB0C,KAAKoe,QAAQxZ,OAAOg6C,qFC5D1B,MAAA/0C,EAAAzM,EAAA,GACAm5B,EAAAn5B,EAAA,IAOAwE,EAAAxE,EAAA,GAEA,IAAY0hD,GAAZ,SAAYA,GACVA,IAAA,uBACAA,IAAA,2BACAA,IAAA,yBACAA,IAAA,6BACAA,IAAA,mBACAA,IAAA,+BACAA,IAAA,6BACAA,IAAA,iCACAA,IAAA,+BATF,CAAYA,EAAAniD,EAAAmiD,qBAAAniD,EAAAmiD,wBAYZ,MAAMprC,IAAEA,EAAGD,IAAEA,GAAQ5S,KAoErBlE,EAAAoiD,oCAA2CxoB,EAAAjgB,aA6CzCpX,YAAYa,GACVoC,QAnCFnC,KAAAg/C,WAAqB,EAEbh/C,KAAAi/C,UAAY,EAClBr0C,EACAJ,EACA00C,IACGt0C,GAIG5K,KAAAw6C,YAAc,EACpB3vC,EACAL,EACA00C,IACGr0C,GAEL7K,KAAAm/C,cASQn/C,KAAAo/C,eAAiB,EAACz0C,EAAqB00C,QAOvCr/C,KAAAs/C,mBAA6B,EAyBrCt/C,KAAAu/C,YAAc,MACZ,GAAIv/C,KAAKe,QAAUf,KAAK2K,OAAQ,CAC9B,MAAM00C,EAAar/C,KAAKyW,QAAQzW,KAAKe,OAAOyJ,MAC5CxK,KAAKw/C,mBAGDH,IACFr/C,KAAK2K,OAAOC,OAAO,GAAK5K,KAAKy/C,uBAC3BJ,EACAr/C,KAAKe,QAEPf,KAAK2K,OAAOC,OAAO,GAAK5K,KAAK0/C,qBAC3BL,EACAr/C,KAAKe,YAMbf,KAAAw/C,iBAAmB,MACbx/C,KAAK2K,QAAU3K,KAAKe,SAElBf,KAAKe,OAAO4+C,WACd3/C,KAAK2K,OAAOE,OACV6I,EAAI1T,KAAK2K,OAAOE,MAAM,GAAI7K,KAAKe,OAAO4+C,SAAS,IAC/CjsC,EAAI1T,KAAK2K,OAAOE,MAAM,GAAI7K,KAAKe,OAAO4+C,SAAS,IAC/CjsC,EAAI1T,KAAK2K,OAAOE,MAAM,GAAI7K,KAAKe,OAAO4+C,SAAS,MAI/C3/C,KAAKe,OAAO6+C,WACd5/C,KAAK2K,OAAOE,OACV4I,EAAIzT,KAAK2K,OAAOE,MAAM,GAAI7K,KAAKe,OAAO6+C,SAAS,IAC/CnsC,EAAIzT,KAAK2K,OAAOE,MAAM,GAAI7K,KAAKe,OAAO6+C,SAAS,IAC/CnsC,EAAIzT,KAAK2K,OAAOE,MAAM,GAAI7K,KAAKe,OAAO6+C,SAAS,SAvDjD7/C,EAAQgB,QACVf,KAAK6/C,UAAU9/C,EAAQgB,QAEzBf,KAAK2K,OAAS5K,EAAQ4K,OACtB3K,KAAKslC,YAAcvlC,EAAQulC,aAAe,IAC1CtlC,KAAK8/C,iBAAmB//C,EAAQ+/C,mBAAoB,EAEhD//C,EAAQsY,YACVrY,KAAKm/C,WAAaj+B,MAAMC,QAAQphB,EAAQsY,WACpCtY,EAAQsY,WACPtY,EAAQsY,YAGfrY,KAAKi/C,UAAYl/C,EAAQk/C,WAAaj/C,KAAKi/C,UAC3Cj/C,KAAKw6C,YAAcz6C,EAAQy6C,aAAex6C,KAAKw6C,YAC/Cx6C,KAAKo/C,eAAiBr/C,EAAQq/C,gBAAkBp/C,KAAKo/C,eAiDvDlgD,2BAA2BmgD,EAAkBt+C,GAC3C,OAAQA,EAAOslC,QACb,KAAKyY,EAAmBiB,SACxB,KAAKjB,EAAmBkB,YACxB,KAAKlB,EAAmBmB,YACtB,QACEl/C,EAAOm/C,YAAY7/C,KACnBU,EAAOo/C,cAAc9/C,KAAOL,KAAK2K,OAAOE,MAAM,IAGlD,KAAKi0C,EAAmBsB,WACxB,KAAKtB,EAAmBuB,OACxB,KAAKvB,EAAmBwB,cACtB,QACEv/C,EAAOm/C,YAAY1/C,MACnBO,EAAOm/C,YAAY//C,MAAQ,GAEvBk/C,EAAWnzC,aAAa/L,MAAQY,EAAOo/C,cAAc3/C,OACrDR,KAAK2K,OAAOE,MAAM,GAFtB,IAKJ,KAAKi0C,EAAmByB,UACxB,KAAKzB,EAAmB0B,aACxB,KAAK1B,EAAmB2B,aACtB,QACE1/C,EAAOm/C,YAAY1/C,OAClB6+C,EAAWnzC,aAAa/L,MAAQY,EAAOo/C,cAAc3/C,OACpDR,KAAK2K,OAAOE,MAAM,KAQ5B3L,yBAAyBmgD,EAAkBt+C,GACzC,OAAQA,EAAOslC,QACb,KAAKyY,EAAmBiB,SACxB,KAAKjB,EAAmBsB,WACxB,KAAKtB,EAAmByB,UACtB,OACGx/C,EAAOm/C,YAAY5/C,MAAOS,EAAOo/C,cAAc7/C,IAAMN,KAAK6K,MAAM,GAGrE,KAAKi0C,EAAmBkB,YACxB,KAAKlB,EAAmBuB,OACxB,KAAKvB,EAAmB0B,aACtB,QACIz/C,EAAOm/C,YAAY3/C,OAASQ,EAAOm/C,YAAY9/C,OAAS,GAC1D,IACGi/C,EAAWnzC,aAAa9L,OAASW,EAAOo/C,cAAc5/C,QACvDP,KAAK6K,MAAM,GAGjB,KAAKi0C,EAAmBmB,YACxB,KAAKnB,EAAmBwB,cACxB,KAAKxB,EAAmB2B,aACtB,QACE1/C,EAAOm/C,YAAY3/C,QAClB8+C,EAAWnzC,aAAa9L,OAASW,EAAOo/C,cAAc5/C,QACrDP,KAAK6K,MAAM,KAQrB3L,uBAAuBmgD,EAAkBt+C,GACvC,MAAM2/C,EAAuBrB,EAAWtX,eACtC9nC,EAAGc,EAAOm/C,YAAY7/C,KACtBH,EAAGa,EAAOm/C,YAAY5/C,MAElBqgD,EAAuBtB,EAAWtX,eACtC9nC,EAAGc,EAAOm/C,YAAY1/C,MACtBN,EAAGa,EAAOm/C,YAAY3/C,SAYxB,OAREogD,EAAqB1gD,EACrBygD,EAAqBzgD,EACrBc,EAAOo/C,cAAc9/C,KACrBU,EAAOo/C,cAAc3/C,MACrB6+C,EAAWnzC,aAAa/L,MAIJ,EACbH,KAAK4gD,2BAA2BvB,EAAYt+C,GAInD4/C,EAAqB1gD,EACrBo/C,EAAWnzC,aAAa1L,MAAQO,EAAOo/C,cAAc3/C,OAGlDO,EAAOm/C,YAAY1/C,OACnB6+C,EAAWnzC,aAAa/L,MAAQY,EAAOo/C,cAAc3/C,OACpDR,KAAK2K,OAAOE,MAAM,GAKtB61C,EAAqBzgD,EACrBo/C,EAAWnzC,aAAa7L,KAAOU,EAAOo/C,cAAc9/C,MAGjDU,EAAOm/C,YAAY7/C,KACpBU,EAAOo/C,cAAc9/C,KAAOL,KAAK2K,OAAOE,MAAM,GAI3C7K,KAAK2K,OAAOC,OAAO,GAM5B1L,qBAAqBmgD,EAAkBt+C,GACrC,MAAM2/C,EAAuBrB,EAAWtX,eACtC9nC,EAAGc,EAAOm/C,YAAY7/C,KACtBH,EAAGa,EAAOm/C,YAAY5/C,MAElBqgD,EAAuBtB,EAAWtX,eACtC9nC,EAAGc,EAAOm/C,YAAY1/C,MACtBN,EAAGa,EAAOm/C,YAAY3/C,SAYxB,OAREogD,EAAqBzgD,EACrBwgD,EAAqBxgD,EACrBa,EAAOo/C,cAAc7/C,IACrBS,EAAOo/C,cAAc5/C,OACrB8+C,EAAWnzC,aAAa9L,OAIH,EACdJ,KAAK6gD,yBAAyBxB,EAAYt+C,GAIjD2/C,EAAqBxgD,EACrBm/C,EAAWnzC,aAAa5L,IAAMS,EAAOo/C,cAAc7/C,MAGjDS,EAAOm/C,YAAY5/C,IACnBS,EAAOo/C,cAAc7/C,IAAMN,KAAK2K,OAAOE,MAAM,IAK/C81C,EAAqBzgD,EACrBm/C,EAAWnzC,aAAa3L,OAASQ,EAAOo/C,cAAc5/C,SAGpDQ,EAAOm/C,YAAY3/C,SACjB8+C,EAAWnzC,aAAa9L,OAASW,EAAOo/C,cAAc5/C,QACtDP,KAAK2K,OAAOE,MAAM,IAIjB7K,KAAK2K,OAAOC,OAAO,GAGpB1L,SAASqX,GACf,OAC6B,IAA3BvW,KAAKm/C,WAAW16C,QACfzE,KAAKm/C,YAAcn/C,KAAKm/C,WAAWlyC,QAAQsJ,IAAW,GACtDvW,KAAKs/C,mBAAqBt/C,KAAK8/C,iBAI5B5gD,qBAAqBitB,GAC3B,MAAMguB,EAAQhuB,EAAEhR,gBAAgBwC,KAC9BmjC,GAAS9gD,KAAKm/C,WAAWlyC,QAAQ6zC,EAAMt2C,KAAKlC,KAAO,GAErDtI,KAAKs/C,kBAAoBn3C,QAAQgyC,GAE7BA,IACFn6C,KAAK+gD,iBAAmB5G,EAAM3vC,MAI1BtL,cAAcitB,GAGpB,OAAInsB,KAAKm/C,aAAen/C,KAAK8/C,iBACpB3zB,EAAEzb,OAAOlG,KAKTxK,KAAK+gD,iBAOhB7hD,gBAAgBitB,EAAsBnS,GAChCha,KAAKm/C,aAEPn/C,KAAKghD,qBAAqB70B,GAEtBA,EAAErd,QACJ9O,KAAKg/C,UAAYh/C,KAAKihD,SAAS90B,EAAErd,MAAMtE,KAAKlC,KAAOtI,KAAKg/C,YAQ9D9/C,cAAcitB,GACZnsB,KAAKs/C,mBAAoB,EACzBt/C,KAAKg/C,WAAY,EAMnB9/C,WAAWitB,EAAsBhS,GAC/B,GAAIgS,EAAErd,OACA9O,KAAKihD,SAAS90B,EAAErd,MAAMtE,KAAKlC,IAAK,CAClC,IAAI44C,GACF/mC,EAAKlP,OAAOiP,MAAMja,EAAID,KAAK2K,OAAOE,MAAM,GACxCsP,EAAKlP,OAAOiP,MAAMha,EAAIF,KAAK2K,OAAOE,MAAM,GACxC,GAGE7K,KAAKi/C,YACPiC,EAAMlhD,KAAKi/C,UACTiC,EACA/0B,EAAErd,MAAMtE,KACR2hB,EAAEhR,gBAAgBlD,IAAIC,GAAKA,EAAE1N,QAIjCxK,KAAK2K,OAAOC,OAAO,IAAMs2C,EAAI,GAC7BlhD,KAAK2K,OAAOC,OAAO,IAAMs2C,EAAI,GAG7BlhD,KAAKu/C,cAELv/C,KAAKo/C,eAAep/C,KAAK2K,OAAQwhB,EAAErd,MAAMtE,MAEzCxK,KAAKu/C,eAQXrgD,YAAYitB,EAAsBg1B,GAIhC,GAFAnhD,KAAKghD,qBAAqB70B,GAEtBnsB,KAAKihD,SAAS90B,EAAEzb,OAAOlG,KAAKlC,IAAK,CACnC,MAAM+2C,EAAar/C,KAAKohD,cAAcj1B,GAChCk1B,EAAahC,EAAWld,cAAchW,EAAElhB,OAAOqM,OAE/CgqC,EAAethD,KAAK2K,OAAOE,MAAM,IAAM,EACvC02C,EAAevhD,KAAK2K,OAAOE,MAAM,IAAM,EAE7C,IAAIA,GACFs2C,EAAavoC,MAAM,GAAK5Y,KAAKslC,YAAcgc,EAC3CH,EAAavoC,MAAM,GAAK5Y,KAAKslC,YAAcic,EAC3C,GAGEvhD,KAAKw6C,cACP3vC,EAAQ7K,KAAKw6C,YACX3vC,EACAw0C,EACAlzB,EAAEhR,gBAAgBlD,IAAIC,GAAKA,EAAE1N,QAIjCxK,KAAK2K,OAAOE,MAAM,GAAKy2C,EAAez2C,EAAM,GAC5C7K,KAAK2K,OAAOE,MAAM,GAAK02C,EAAe12C,EAAM,GAG5C7K,KAAKw/C,mBAEL,MAAMgC,EAAYnC,EAAWld,cAAchW,EAAElhB,OAAOqM,OACpDtX,KAAK2K,OAAOC,OAAO,IAAMy2C,EAAWphD,EAAIuhD,EAAUvhD,EAClDD,KAAK2K,OAAOC,OAAO,IAAMy2C,EAAWnhD,EAAIshD,EAAUthD,EAGlDF,KAAKu/C,cAELv/C,KAAKo/C,eAAep/C,KAAK2K,OAAQ00C,GAEjCr/C,KAAKu/C,eAKTrgD,eAAeitB,IAGfjtB,YAAYitB,IAGZjtB,gBAAgBitB,IAGhBjtB,gBAAgBitB,IAShBjtB,SAASqX,GAEP,MAAMmxB,EAAa1nC,KAAKyhD,cAAclrC,GAEhCrK,EAAelM,KAAK0hD,oBAAoBnrC,GAG9C,GAAImxB,GAAcx7B,EAAc,CAE9B,MAAM81B,EAAU0F,EAAWvF,cAAcj2B,GACnCg2B,EAAcwF,EAAWvF,eAC7BliC,EAAGiM,EAAa1L,MAChBN,EAAGgM,EAAa3L,SAGlB,OAAO,IAAIsJ,EAAA/J,QACTM,OAAQ8hC,EAAYhiC,EAAI8hC,EAAQ9hC,EAChCC,MAAO+hC,EAAYjiC,EAAI+hC,EAAQ/hC,EAC/BA,EAAG+hC,EAAQ/hC,EACXC,EAAG8hC,EAAQ9hC,IAIf,OAAO,IAAI2J,EAAA/J,QAASG,EAAG,EAAGC,EAAG,EAAGC,MAAO,EAAGC,OAAQ,IAMpD8gD,UACE,OAAOlhD,KAAK2K,OAAOC,OAOrB1L,UAAU6B,GACRf,KAAKe,OAASA,EACdf,KAAKu/C,cAMP10C,YACE,OAAO7K,KAAK2K,OAAOE,MASrB3L,SAASyiD,EAAkBprC,GAEzB,MAAMmxB,EAAa1nC,KAAKyhD,cAAclrC,GAEhCrK,EAAelM,KAAK0hD,oBAAoBnrC,GAExC/L,EAAOxK,KAAKyW,QAAQF,GAG1B,GAAImxB,GAAcx7B,GAAgB1B,EAAM,CACtC,MAAMo3C,EAAahgD,EAAAsQ,WAEfhG,EAAa/L,MAAQwhD,EAASxhD,MAC9B+L,EAAa9L,OAASuhD,EAASvhD,OAC/B,GAEFJ,KAAK2K,OAAOE,OAGd7K,KAAK2K,OAAOE,MAAQjJ,EAAAoQ,KAClBhS,KAAK2K,OAAOE,MACZ7K,KAAKw6C,YAAYoH,EAAYp3C,GAAOA,KAGtC,MAAMq3C,EAAWjgD,EAAAsQ,YACbyvC,EAAS1hD,GAAI0hD,EAASzhD,EAAG,GAC3BF,KAAK2K,OAAOC,QAGd5K,KAAK2K,OAAOC,OAAShJ,EAAAoQ,KACnBhS,KAAK2K,OAAOC,OACZ5K,KAAKw6C,YAAYqH,EAAUr3C,GAAOA,KAIpCxK,KAAKu/C,cAELv/C,KAAKo/C,eAAep/C,KAAK2K,OAAQH,GAEjCxK,KAAKu/C,4JCrmBX1/C,CAAAzC,EAAA,mJCAAyC,EAAAzC,EAAA,MACAyC,EAAAzC,EAAA,MACAyC,EAAAzC,EAAA,IACAyC,EAAAzC,EAAA,IACAyC,EAAAzC,EAAA,KACAyC,EAAAzC,EAAA,IACAyC,EAAAzC,EAAA,+ICNAyC,CAAAzC,EAAA","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"three\"), require(\"bowser\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"three\", \"bowser\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"voidgl\"] = factory(require(\"three\"), require(\"bowser\"));\n\telse\n\t\troot[\"voidgl\"] = factory(root[\"three\"], root[\"bowser\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__124__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 129);\n","import * as Three from 'three';\nimport { Instance } from './instance-provider/instance';\nimport { Bounds } from './primitives/bounds';\nimport { IPoint } from './primitives/point';\nimport { ChartCamera, Vec, Vec2 } from './util';\nimport { IAutoEasingMethod } from './util/auto-easing-method';\nimport { IVisitFunction, TrackedQuadTree } from './util/tracked-quad-tree';\n\nexport type Diff<T extends string, U extends string> = ({ [P in T]: P } &\n  { [P in U]: never } & { [x: string]: never })[T];\nexport type Omit<T, K extends keyof T> = { [P in Diff<keyof T, K>]: T[P] };\nexport type ShaderIOValue =\n  | [number]\n  | [number, number]\n  | [number, number, number]\n  | [number, number, number, number]\n  | Three.Vector4[]\n  | Float32Array;\nexport type InstanceIOValue =\n  | [number]\n  | [number, number]\n  | [number, number, number]\n  | [number, number, number, number];\nexport type UniformIOValue =\n  | number\n  | InstanceIOValue\n  | Float32Array\n  | Three.Texture;\n\nexport enum InstanceBlockIndex {\n  ONE = 1,\n  TWO = 2,\n  THREE = 3,\n  FOUR = 4,\n}\n\nexport enum InstanceAttributeSize {\n  ONE = 1,\n  TWO = 2,\n  THREE = 3,\n  FOUR = 4,\n  /** Special case for making instance attributes that can target Atlas resources */\n  ATLAS = 99,\n}\n\nexport const instanceAttributeSizeFloatCount: { [key: number]: number } = {\n  [InstanceAttributeSize.ONE]: 1,\n  [InstanceAttributeSize.TWO]: 2,\n  [InstanceAttributeSize.THREE]: 3,\n  [InstanceAttributeSize.FOUR]: 4,\n  [InstanceAttributeSize.ATLAS]: 4,\n};\n\nexport enum UniformSize {\n  ONE = 1,\n  TWO = 2,\n  THREE = 3,\n  FOUR = 4,\n  MATRIX3 = 9,\n  MATRIX4 = 16,\n  ATLAS = 99,\n}\n\nexport enum VertexAttributeSize {\n  ONE = 1,\n  TWO = 2,\n  THREE = 3,\n  FOUR = 4,\n}\n\n/**\n * This represents a color in the VoidGL system. Ranges are [0 - 1, 0 - 1, 0 - 1, 0 - 1]\n */\nexport type Color = [number, number, number, number];\n\n/**\n * Represents something with a unique id\n */\nexport interface Identifiable {\n  /** A unique identifier */\n  id: string;\n}\n\n/**\n * Information provided in mouse events interacting with instances and\n * layers.\n */\nexport interface IPickInfo<T extends Instance> {\n  /** If a mouse button is involved in the pick, this will be populated */\n  button?: number;\n  /** This is the parent layer id of the instances interacted with */\n  layer: string;\n  /** This is the list of instances that were detected in the interaction */\n  instances: T[];\n  /** If picking is set to ALL then this will be provided which can be used to make additional spatial queries */\n  querySpace?(bounds: Bounds | IPoint, visit?: IVisitFunction<T>): T[];\n  /** This is the screen coordinates of the mouse point that interacted with the instances */\n  screen: [number, number];\n  /** This is the world coordinates of the mouse point that interacted with the instances */\n  world: [number, number];\n  /** Projection methods to easily go between coordinate spaces */\n  projection: IProjection;\n}\n\nexport interface IVertexAttribute {\n  /**\n   * When initWithBuffer and customFill are not specified, this is was the system will initially\n   * load each vertex attribute with.\n   */\n  defaults?: number[];\n  /**\n   * When this is specified it will initialize the model's attribute with the data in this buffer.\n   */\n  initWithBuffer?: Float32Array;\n  /**\n   * When generating this attribute in the shader this will be the prefix to the attribute:\n   * For instance, if you specify 'highp' as the modifier, then the attribute that appears\n   * in the shader will be:\n   * attribute highp vec3 position;\n   */\n  qualifier?: string;\n  /**\n   * This is the name the attribute will be for the model.\n   */\n  name: string;\n  /**\n   * This is the number of floats the attribute will consume. For now, we only allow for up\n   * to four floats per attribute.\n   */\n  size: VertexAttributeSize;\n  /**\n   * This lets you populate the buffer with an automatically called method. This will fire when\n   * necessary updates are detected or on initialization.\n   */\n  update(vertex: number): ShaderIOValue;\n}\n\nexport interface IVertexAttributeInternal extends IVertexAttribute {\n  /** This is the actual attribute generated internally for the ThreeJS interfacing */\n  materialAttribute: Three.BufferAttribute | null;\n}\n\nexport interface IInstanceAttribute<T extends Instance> {\n  /**\n   * If this is specified, this attribute becomes a size of 4 and will have a block index of\n   * 0. This makes this attribute and layer become compatible with reading atlas resources.\n   * The value provided for this property should be the name of the atlas that is created.\n   */\n  atlas?: {\n    /** Specify which generated atlas to target for the resource */\n    key: string;\n    /** Specify the name that will be injected that will be the sampler2D in the shader */\n    name: string;\n    /**\n     * This specifies which of the shaders the sampler2D will be injected into.\n     * Defaults to the Fragment shader only.\n     */\n    shaderInjection?: ShaderInjectionTarget;\n  };\n  /**\n   * This is a block index helping describe the instancing process. It can be any number as\n   * the system will sort and organize them for you. This only helps the system detect when\n   * you cram too much info into a single block. The tighter you pack your blocks the better\n   * your program will perform.\n   */\n  block: number;\n  /**\n   * This is the index within the block this attribute will be available.\n   */\n  blockIndex?: InstanceBlockIndex;\n  /**\n   * If the settings on this attrubute spawns additional attributes, those attributes shall\n   * be populated here. Otherwise this remains undefined.\n   */\n  childAttributes?: IInstanceAttribute<T>[];\n  /**\n   * When this is set, the system will automatically inject necessary Shader IO to facilitate\n   * performing the easing on the GPU, which saves enormous amounts of CPU processing time\n   * trying to calcuate animations and tweens for properties.\n   *\n   * NOTE: Setting this increases the amount of data per instance by: size * 2 + ;\n   * as it injects in a start value, start time, and duration\n   */\n  easing?: IAutoEasingMethod<Vec>;\n  /**\n   * This is the name that will be available in your shader for use. This will only be\n   * available after the ${attributes} declaration.\n   */\n  name: string;\n  /**\n   * If this attribute is created automatically by the system based on the settings of another\n   * attribute, that parent attribute will be set here. Otherwise this remains undefined.\n   */\n  parentAttribute?: IInstanceAttribute<T>;\n  /**\n   * When generating this attribute in the shader this will be the prefix to the attribute:\n   * For instance, if you specify 'highp' as the modifier, then the attribute that appears\n   * in the shader will be:\n   * attribute highp vec3 position;\n   */\n  qualifier?: string;\n  /**\n   * This is how many floats the instance attribute takes up. Due to how instancing is\n   * implemented, we can only take up to 4 floats per variable right now.\n   */\n  size?: InstanceAttributeSize;\n  /**\n   * This is the accessor that executes when the instance needs updating. Simply return the\n   * value that should be populated for this attribute.\n   */\n  update(instance: T): InstanceIOValue;\n}\n\n/**\n * Internal Instance Attributes are ones that actually map to an attribute in the shader and use\n * hardware instancing.\n */\nexport interface IInstanceAttributeInternal<T extends Instance>\n  extends IInstanceAttribute<T> {\n  /** We will keep an internal uid for the  */\n  uid: number;\n  /** This is the actual attribute mapped to a buffer */\n  bufferAttribute: Three.InstancedBufferAttribute;\n}\n\n/**\n * This is an attribute where the atlas is definitely declared.\n */\nexport interface IAtlasInstanceAttribute<T extends Instance>\n  extends IInstanceAttribute<T> {\n  /**\n   * If this is specified, this attribute becomes a size of 4 and will have a block index of\n   * 0. This makes this attribute and layer become compatible with reading atlas resources.\n   * The value provided for this property should be the name of the atlas that is created.\n   */\n  atlas: {\n    /** Specify which generated atlas to target for the resource */\n    key: string;\n    /** Specify the name that will be injected that will be the sampler2D in the shader */\n    name: string;\n    /**\n     * This specifies which of the shaders the sampler2D will be injected into.\n     * Defaults to the Fragment shader only.\n     */\n    shaderInjection?: ShaderInjectionTarget;\n  };\n}\n\n/**\n * This is an attribute that is simply a value\n */\nexport interface IEasingInstanceAttribute<T extends Instance>\n  extends IInstanceAttribute<T> {\n  /**\n   * This MUST be defined to be an Easing attribute\n   */\n  easing: IAutoEasingMethod<Vec>;\n  /**\n   * Easing attributes requires size to be present\n   */\n  size: InstanceAttributeSize;\n}\n\n/**\n * This is an attribute that is simply a value\n */\nexport interface IValueInstanceAttribute<T extends Instance>\n  extends IInstanceAttribute<T> {\n  /**\n   * If this is specified, this attribute becomes a size of 4 and will have a block index of\n   * 0. This makes this attribute and layer become compatible with reading atlas resources.\n   * The value provided for this property should be the name of the atlas that is created.\n   */\n  atlas: undefined;\n}\n\n/** These are flags for indicating which shaders receive certain injection elements */\nexport enum ShaderInjectionTarget {\n  /** ONLY the vertex shader will receive the injection */\n  VERTEX = 1,\n  /** ONLY the fragment shader will receive the injection */\n  FRAGMENT = 2,\n  /** Both the fragment and vertex shader will receive the injection */\n  ALL = 3,\n}\n\nexport interface IUniform {\n  /**\n   * This lets you specify which of the shaders will receive this uniform as available.\n   * This defaults to only injecting into the vertex shader.\n   */\n  shaderInjection?: ShaderInjectionTarget;\n  /** Name of the uniform as will be available in the shaders */\n  name: string;\n  /** How many floats the uniform shall encompass */\n  size: UniformSize;\n  /**\n   * When generating this uniform in the shader this will be the prefix to the uniform:\n   * For instance, if you specify 'highp' as the modifier, then the uniform that appears\n   * in the shader will be:\n   * uniform highp vec3 position;\n   */\n  qualifier?: string;\n  /**\n   * This is the accessor that executes every frame before this layer is drawn. It gives\n   * opportunity to update the uniform's value before every draw.\n   */\n  update(uniform: IUniform): UniformIOValue;\n}\n\nexport interface IUniformInternal extends IUniform {\n  /**\n   * All layers will have many many ShaderMaterials generated per each instance buffer as a single buffer\n   * can only render so many instances. This tracks across all generated ShaderMaterials for each buffer\n   * the material uniforms that need to be updated as a Uniform for a layer is dictated as uniform across\n   * all instances.\n   */\n  materialUniforms: Three.IUniform[];\n}\n\n/**\n * This is the structure of a uniform generated for the sake of instancing\n */\nexport interface IInstancingUniform {\n  name: string;\n  type: 'f' | 'v2' | 'v3' | 'v4' | '4fv' | 'bvec4';\n  value: ShaderIOValue;\n}\n\n/**\n * Represents a complete shader object set.\n */\nexport interface IShaders {\n  fs: string;\n  header?: string;\n  vs: string;\n}\n\n/**\n * Represents an element that has a full list of projection methods\n */\nexport interface IProjection {\n  /** This is the chart camera utilized in the projection of elements */\n  camera: ChartCamera;\n  /** Converts from the pixel density layer to the screen space */\n  pixelSpaceToScreen(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from the screen coordinates to the pixel density layer */\n  screenToPixelSpace(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from screen space to the view's relative coordinates */\n  screenToView(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from screen space to the world space of a scene */\n  screenToWorld(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from a view's space to the screen */\n  viewToScreen(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from a views space to the world coordinates */\n  viewToWorld(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from world coordinate space of a scene to the screen */\n  worldToScreen(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from world coordinate space of a scene to the view's space */\n  worldToView(point: IPoint, out?: IPoint): IPoint;\n}\n\nexport type IMaterialOptions = Partial<\n  Omit<\n    Omit<Omit<Three.ShaderMaterialParameters, 'uniforms'>, 'vertexShader'>,\n    'fragmentShader'\n  >\n>;\n\n/** This is the method signature for determining whether or not a point hits an instance */\nexport type InstanceHitTest<T> = (o: T, p: IPoint, v: IProjection) => boolean;\n\n/**\n * This is the type of picking assigned to a layer. Each mode has performance and functionality\n * tradeoffs.\n */\nexport enum PickType {\n  /** Disable any picking methodology */\n  NONE,\n  /** Pick all instances found underneath the mouse. The Layer must explicitly support this feature. */\n  ALL,\n  /**\n   * NOTE: NOT IMPLEMENTED YET\n   *\n   * Uses highly efficient color rendering method to detect an instance on a pixel by pixel check. Since it is\n   * based on rendering, it will only select the 'visually' top most rendered instance. This means instances can be occluded\n   * by other instances is an instance renders behind another.\n   *\n   * This is vastly more efficient and accurate than ALL. This also will be more readily supported than ALL.\n   */\n  SINGLE,\n}\n\n/**\n * This represents the settings and objects used to facilitate picking in a layer.\n */\nexport interface IPickingMetrics {\n  /** This is the current pick mode that is active during the draw pass of the layer */\n  currentPickMode: PickType;\n  /** This is the picking style to be used */\n  type: PickType;\n}\n\n/**\n * This is the picking settings and objects to facilitate PickType.ALL so we can get\n * all instances underneath the mouse.\n */\nexport interface IQuadTreePickingMetrics<T extends Instance>\n  extends IPickingMetrics {\n  /** This handles the ALL type only */\n  type: PickType.ALL;\n  /** This stores all of our instances in a quad tree to spatially track our instances */\n  quadTree: TrackedQuadTree<T>;\n  /** This is the method for performing a hit test with the provided instance */\n  hitTest: InstanceHitTest<T>;\n}\n\n/**\n * This is the picking settings and objects to facilitate PickType.SINGLE so we can get\n * a single instance underneath the mouse.\n */\nexport interface ISinglePickingMetrics<T extends Instance>\n  extends IPickingMetrics {\n  /** Set the enum for the type */\n  type: PickType.SINGLE;\n  /**\n   * This is a lookup of the instance by it's UID which is all that is needed to decode a color to an instance\n   * The color UINT8 components composited into a single UINT32 IS the UID of the instance\n   */\n  uidToInstance: Map<number, T>;\n}\n\n/**\n * This is the picking settings and objects to facilitate PickType.NONE where no information\n * is retrieved for mouse interactions.\n */\nexport interface INonePickingMetrics extends IPickingMetrics {\n  // Single Picking does not require any special helper information\n  type: PickType.NONE;\n}\n\nexport interface IColorPickingData {\n  /** The mouse target position where the data is rendered */\n  mouse: Vec2;\n  /** The color data loaded for last picking rendering */\n  colorData: Uint8Array;\n  /** The height of the data array */\n  dataHeight: number;\n  /** The width of the data array */\n  dataWidth: number;\n  /** The nearest found color */\n  nearestColor: number;\n  /** All colors in the data */\n  allColors: number[];\n}\n\n/**\n * Diff types that an instance can go through. Used to help the system consume the diff\n * and apply it to the GL framework.\n */\nexport enum InstanceDiffType {\n  CHANGE = 0,\n  INSERT = 1,\n  REMOVE = 2,\n}\n\n/**\n * This is the metrics associated with a frame. Mostly dealing with timing values.\n */\nexport type FrameMetrics = {\n  /** The frame number rendered. Increases by 1 every surface draw */\n  currentFrame: number;\n  /** The start time of the current frame */\n  currentTime: number;\n  /** The start time of the previous frame */\n  previousTime: number;\n};\n\n/**\n * This is the minimum properties required to make all easing functions operate.\n */\nexport interface IEasingProps {\n  start: Vec;\n  end: Vec;\n  startTime: number;\n  duration: number;\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","export * from './animation-helper';\nexport * from './auto-easing-method';\nexport * from './chart-camera';\nexport * from '../instance-provider/instance';\nexport * from './mouse';\nexport * from './reference-camera';\nexport * from './shader-templating';\nexport * from './tracked-quad-tree';\nexport * from './uid';\nexport * from './vector';\nexport * from './view-camera';\nexport * from './webgl-stat';\nexport * from './common-options';\n","export * from './observable';\nexport * from './instance-provider';\nexport * from './instance';\n","import { IPoint } from './point';\n\nexport interface IBoundsOptions {\n  /** Top left x position */\n  x?: number;\n  /** Top left y position */\n  y?: number;\n  /** Width covered */\n  width?: number;\n  /** height covered */\n  height?: number;\n\n  /** Specify the left */\n  left?: number;\n  /** Specify the right */\n  right?: number;\n  /** Specify the top */\n  top?: number;\n  /** Specify the bottom */\n  bottom?: number;\n}\n\n/**\n * Class to manage the x, y, width, and height of an object\n *\n * @template T This specifies the data type associated with this shape and is accessible\n *             via the property 'd'\n */\nexport class Bounds {\n  x: number = 0;\n  y: number = 0;\n  width: number = 0;\n  height: number = 0;\n\n  get area() {\n    return this.width * this.height;\n  }\n\n  get bottom() {\n    return this.y + this.height;\n  }\n\n  get left() {\n    return this.x;\n  }\n\n  get mid() {\n    return {\n      x: this.x + this.width / 2.0,\n      y: this.y + this.height / 2.0,\n    };\n  }\n\n  get right() {\n    return this.x + this.width;\n  }\n\n  get top() {\n    return this.y;\n  }\n\n  static emptyBounds() {\n    return new Bounds({\n      height: 0,\n      width: 0,\n      x: 0,\n      y: 0,\n    });\n  }\n\n  /**\n   * Create a new instance\n   *\n   * @param left  The left side (x coordinate) of the instance\n   * @param right The right side of the instance\n   * @param top The top (y coordinate) of the instance\n   * @param bottom The bottom of the instance\n   */\n  constructor(options: IBoundsOptions) {\n    this.x = options.x || options.left || 0;\n    this.y = options.y || options.top || 0;\n    this.height = options.height || (options.bottom || 0) - this.y || 0;\n    this.width = options.width || (options.right || 0) - this.x || 0;\n  }\n\n  /**\n   * Checks to see if a point is within this bounds object.\n   *\n   * @param point\n   */\n  containsPoint(point: IPoint) {\n    return !(\n      point.x < this.x ||\n      point.y < this.y ||\n      point.x > this.right ||\n      point.y > this.bottom\n    );\n  }\n\n  /**\n   * Grows this bounds object to cover the space of the provided bounds object\n   *\n   * @param item\n   */\n  encapsulate(item: Bounds | IPoint) {\n    if (item instanceof Bounds) {\n      if (item.x < this.x) {\n        this.width += Math.abs(item.x - this.x);\n        this.x = item.x;\n      }\n\n      if (item.y < this.y) {\n        this.height += Math.abs(item.y - this.y);\n        this.y = item.y;\n      }\n\n      if (this.right < item.right) {\n        this.width += item.right - this.right;\n      }\n\n      if (this.bottom < item.bottom) {\n        this.height += item.bottom - this.bottom;\n      }\n\n      return true;\n    } else {\n      if (item.x < this.x) {\n        this.width += this.x - item.x;\n        this.x = item.x;\n      }\n\n      if (item.x > this.right) {\n        this.width += item.x - this.x;\n      }\n\n      if (item.y < this.y) {\n        this.height += this.y - item.y;\n        this.y = item.y;\n      }\n\n      if (item.y > this.bottom) {\n        this.height += item.y - this.y;\n      }\n\n      return true;\n    }\n  }\n\n  /**\n   * Checks to see if the provided bounds object could fit within the dimensions of this bounds object\n   * This ignores position and just checks width and height.\n   *\n   * @param bounds\n   *\n   * @return {number} 0 if it doesn't fit. 1 if it fits perfectly. 2 if it just fits.\n   */\n  fits(bounds: Bounds): 0 | 1 | 2 {\n    // If the same, the bounds fits exactly into this bounds\n    if (this.width === bounds.width && this.height === bounds.height) {\n      return 1;\n    }\n\n    // The bounds can fit within this, then it just fits\n    if (this.width >= bounds.width && this.height >= bounds.height) {\n      return 2;\n    }\n\n    // Otherwise, the bounds does not fit within this bounds\n    return 0;\n  }\n\n  /**\n   * Checks if a bounds object intersects another bounds object.\n   *\n   * @param bounds\n   */\n  hitBounds(bounds: Bounds) {\n    return !(\n      this.right < bounds.x ||\n      this.x > bounds.right ||\n      this.bottom < bounds.y ||\n      this.y > bounds.height\n    );\n  }\n\n  /**\n   * Sees if the provided bounds is completely within this bounds object. Unlike fits() this takes\n   * position into account.\n   *\n   * @param bounds\n   */\n  isInside(bounds: Bounds): boolean {\n    return (\n      this.x >= bounds.x &&\n      this.right <= bounds.right &&\n      this.y >= bounds.y &&\n      this.bottom <= bounds.bottom\n    );\n  }\n\n  /**\n   * Easy readout of this Bounds object.\n   */\n  toString() {\n    return `{x: ${this.x} y:${this.y} w:${this.width} h:${this.height}}`;\n  }\n}\n","export enum AnchorType {\n  BottomLeft,\n  BottomMiddle,\n  BottomRight,\n  Custom,\n  Middle,\n  MiddleLeft,\n  MiddleRight,\n  TopLeft,\n  TopMiddle,\n  TopRight,\n}\n\nexport type Anchor = {\n  /** When the anchor gets calculated on the image, this allows the anchor to go beyond the borders of the image by this amount */\n  padding: number;\n  /** This is the location of the anchor. If a custom anchor is specified, then the x and y are not automatically populated */\n  type: AnchorType;\n  /** This is populated with the anchor's location relative to the image's surface */\n  x?: number;\n  /** This is populated with the anchor's location relative to the image's surface */\n  y?: number;\n};\n\nexport enum ScaleType {\n  /** The size of the image will be tied to world space */\n  ALWAYS = 1,\n  /** The image will scale to it's font size then stop growing */\n  BOUND_MAX = 2,\n  /** The image will alwyas retain it's font size on screen */\n  NEVER = 3,\n}\n","import { Instance } from '../../instance-provider/instance';\nimport { IInstanceAttributeInternal } from '../../types';\nimport { Vec2 } from '../../util';\nimport { Layer } from '../layer';\nimport { Scene } from '../scene';\n\nexport function isBufferLocation(val: any): val is IBufferLocation {\n  return val && val.buffer && val.buffer.value;\n}\n\nexport function isBufferLocationGroup(\n  val: any,\n): val is IBufferLocationGroup<IBufferLocation> {\n  return val && val.propertyToBufferLocation;\n}\n\n/**\n * This defines a base information object that explains where in a buffer a value\n * is represented.\n */\nexport interface IBufferLocation {\n  /** This is the parent attribute of this location */\n  attribute: IInstanceAttributeInternal<Instance>;\n  /**\n   * This is the generic buffer object interface for accessing the actual buffer.\n   */\n  buffer: {\n    value: Float32Array | Uint8Array;\n  };\n  /**\n   * If the attribute has child attributes (attributes auto generated as a consequence of the attributes settings)\n   * then the children's buffer locations can be found here.\n   */\n  childLocations?: IBufferLocation[];\n  /**\n   * This is the instance index indicative of the instance positioning within the buffer.\n   * Keep in mind: This does NOT correlate to a lookup for an Instance object but rather for\n   * the instancing concept designed for GL Buffers.\n   */\n  instanceIndex: number;\n  /**\n   * This is the range within the buffer values should be injected for this location.\n   */\n  range: Vec2;\n}\n\n/**\n * Each instance that comes in can be associated with a group of buffer locations. A buffer location for each\n * instance attribute used in updates. So a grouping is several buffer locations that are keyed by\n * the instance's property's UIDs.\n */\nexport interface IBufferLocationGroup<T extends IBufferLocation> {\n  /** This is the instance index WITHIN THE BUFFERS. This does NOT have relevance to Instance type objects */\n  instanceIndex: number;\n  /** This is a map of property UIDs to an associated buffer location */\n  propertyToBufferLocation: { [key: number]: T };\n}\n\n/**\n * Layers manage instances and those instances require a form of binding to their associated buffers.\n * The buffers have to be intelligently created and managed in this tieing to maximize performance.\n * One can not have a buffer for every instance in most cases, so the buffer manager has to get instances\n * to cooperate sharing a buffer in whatever strategy possible that best suits the hardware and it's limitations.\n *\n * This provides a uniform interface between instances and their corresponding buffer.\n */\nexport abstract class BufferManagerBase<\n  T extends Instance,\n  U extends IBufferLocation\n> {\n  /** The layer this manager glues Instances to Buffers */\n  layer: Layer<T, any>;\n  /** The scene the layer is injecting elements into */\n  scene: Scene;\n\n  /**\n   * Base constructor. A manager always needs to be associated with it's layer and it's scene.\n   */\n  constructor(layer: Layer<T, any>, scene: Scene) {\n    this.layer = layer;\n    this.scene = scene;\n  }\n\n  /**\n   * Destroy all elements that consume GPU resources or consumes otherwise unreleaseable resources.\n   */\n  abstract destroy(): void;\n\n  /**\n   * This adds an instance to the manager and thus ties the instance to an IBuffer location\n   */\n  add: (instance: T) => U | IBufferLocationGroup<U> | undefined;\n\n  /**\n   * Retrieves the buffer locations for the instance provided\n   */\n  abstract getBufferLocations(\n    instance: T,\n  ): U | IBufferLocationGroup<U> | undefined;\n\n  /**\n   * This retrieves the property ID for the active attribute. This is necessary to prevent\n   * the need for lookups to find the active attribute.\n   */\n  abstract getActiveAttributePropertyId(): number;\n\n  /**\n   * This returns how many instances this buffer manager has grown to accommodate.\n   */\n  abstract getInstanceCount(): number;\n\n  /**\n   * This should provide a minimum property id list that represents a set of properties that if triggered\n   * for update, would cause all of the attributes to be updated for the layer.\n   */\n  abstract getUpdateAllPropertyIdList(): number[];\n\n  /**\n   * Disassociates an instance with it's buffer location and makes the instance\n   * in the buffer no longer drawable.\n   */\n  remove: (instance: T) => T;\n\n  /**\n   * Removes the manager from the scene it applied itself to.\n   */\n  abstract removeFromScene(): void;\n}\n","import * as Three from 'three';\nimport { InstanceDiff } from '../instance-provider';\nimport { Instance } from '../instance-provider/instance';\nimport {\n  IInstanceAttribute,\n  IMaterialOptions,\n  INonePickingMetrics,\n  InstanceAttributeSize,\n  InstanceBlockIndex,\n  InstanceDiffType,\n  InstanceHitTest,\n  InstanceIOValue,\n  IPickInfo,\n  IQuadTreePickingMetrics,\n  IShaders,\n  ISinglePickingMetrics,\n  IUniform,\n  IUniformInternal,\n  IVertexAttribute,\n  IVertexAttributeInternal,\n  PickType,\n  ShaderInjectionTarget,\n  UniformIOValue,\n  UniformSize,\n} from '../types';\nimport { BoundsAccessor, TrackedQuadTree } from '../util';\nimport { IdentifyByKey, IdentifyByKeyOptions } from '../util/identify-by-key';\nimport { BufferManagerBase, IBufferLocation } from './buffer-management';\nimport { InstanceDiffManager } from './buffer-management/instance-diff-manager';\nimport { LayerInteractionHandler } from './layer-interaction-handler';\nimport { LayerBufferType } from './layer-processing/layer-buffer-type';\nimport { LayerInitializer, LayerSurface } from './layer-surface';\nimport { AtlasResourceManager } from './texture/atlas-resource-manager';\nimport { View } from './view';\n\nexport interface IShaderInputs<T extends Instance> {\n  /** These are very frequently changing attributes and are uniform across all vertices in the model */\n  instanceAttributes?: (IInstanceAttribute<T> | null)[];\n  /** These are attributes that should be static on a vertex. These are considered unique per vertex. */\n  vertexAttributes?: (IVertexAttribute | null)[];\n  /** Specify how many vertices there are per instance */\n  vertexCount: number;\n  /** These are uniforms in the shader. These are uniform across all vertices and all instances for this layer. */\n  uniforms?: (IUniform | null)[];\n}\n\nexport type IShaderInitialization<T extends Instance> = IShaderInputs<T> &\n  IShaders;\n\nexport interface IModelType {\n  /** This is the draw type of the model to be used */\n  drawMode?: Three.TrianglesDrawModes;\n  /** This is the THREE JS model type */\n  modelType: IModelConstructable;\n}\n\n/**\n * Bare minimum required features a provider must provide to be the data for the layer.\n */\nexport interface IInstanceProvider<T extends Instance> {\n  /** A list of changes to instances */\n  changeList: InstanceDiff<T>[];\n  /** Resolves the changes as consumed */\n  resolve(): void;\n}\n\n/**\n * Constructor options when generating a layer.\n */\nexport interface ILayerProps<T extends Instance> extends IdentifyByKeyOptions {\n  /** This is the data provider where the instancing data is injected and modified. */\n  data: IInstanceProvider<T>;\n  /**\n   * This sets how instances can be picked via the mouse. This activates the mouse events for the layer IFF\n   * the value is not NONE.\n   */\n  picking?: PickType;\n  /**\n   * This identifies the scene we want the layer to be a part of.\n   * Layer's with the same identifiers will render their buffers in the same scene.\n   * This only applies to the layer when the layer is initialized in a layer surface. You shouldn't\n   * be swapping layers from scene to scene.\n   *\n   * The scene identifier must be an identifier used when constructing the layer surface that this layer\n   * is added to.\n   */\n  scene?: string;\n\n  // ---- EVENTS ----\n  /** Executes when the mouse is down on instances and a picking type is set */\n  onMouseDown?(info: IPickInfo<T>): void;\n  /** Executes when the mouse moves on instances and a picking type is set */\n  onMouseMove?(info: IPickInfo<T>): void;\n  /** Executes when the mouse no longer over instances and a picking type is set */\n  onMouseOut?(info: IPickInfo<T>): void;\n  /** Executes when the mouse is newly over instances and a picking type is set */\n  onMouseOver?(info: IPickInfo<T>): void;\n  /** Executes when the mouse button is release when over instances and a picking type is set */\n  onMouseUp?(info: IPickInfo<T>): void;\n  /** Executes when the mouse click gesture is executed over instances and a picking type is set */\n  onMouseClick?(info: IPickInfo<T>): void;\n}\n\nexport interface IModelConstructable {\n  new (\n    geometry?: Three.Geometry | Three.BufferGeometry,\n    material?: Three.Material | Three.Material[],\n  ): any;\n}\n\nexport interface IPickingMethods<T extends Instance> {\n  /** This provides a way to calculate bounds of an Instance */\n  boundsAccessor: BoundsAccessor<T>;\n  /** This is the way the system tests hitting an intsance */\n  hitTest: InstanceHitTest<T>;\n}\n\n/**\n * A base class for generating drawable content\n */\nexport class Layer<\n  T extends Instance,\n  U extends ILayerProps<T>\n> extends IdentifyByKey {\n  static defaultProps: any = {};\n\n  /** This is the attribute that specifies the _active flag for an instance */\n  activeAttribute: IInstanceAttribute<T>;\n  /** This matches an instance to the list of Three uniforms that the instance is responsible for updating */\n  private _bufferManager: BufferManagerBase<T, IBufferLocation>;\n  /** Buffer manager is read only. Must use setBufferManager */\n  get bufferManager() {\n    return this._bufferManager;\n  }\n  /** This is the determined buffering strategy of the layer */\n  private _bufferType: LayerBufferType;\n  /** Buffer type is private and should not be directly modified */\n  get bufferType() {\n    return this._bufferType;\n  }\n  /** This determines the drawing order of the layer within it's scene */\n  depth: number = 0;\n  /** This is the threejs geometry filled with the vertex information */\n  geometry: Three.BufferGeometry;\n  /** This is the initializer used when making this layer. */\n  initializer: LayerInitializer;\n  /** This is all of the instance attributes generated for the layer */\n  instanceAttributes: IInstanceAttribute<T>[];\n  /** A lookup fo an instance by it's ID */\n  instanceById = new Map<string, T>();\n  /** Provides the number of vertices a single instance spans */\n  instanceVertexCount: number = 0;\n  /** This is the handler that manages interactions for the layer */\n  interactions: LayerInteractionHandler<T, U>;\n  /** The official shader material generated for the layer */\n  material: Three.RawShaderMaterial;\n  /** INTERNAL: For the given shader IO provided this is how many instances can be present per buffer. */\n  maxInstancesPerBuffer: number;\n  /** This is the mesh for the Threejs setup */\n  model: Three.Object3D;\n  /** This is all of the picking metrics kept for handling picking scenarios */\n  picking:\n    | IQuadTreePickingMetrics<T>\n    | ISinglePickingMetrics<T>\n    | INonePickingMetrics;\n  /** Properties handed to the Layer during a LayerSurface render */\n  props: U;\n  /** This is the system provided resource manager that lets a layer request Atlas resources */\n  resource: AtlasResourceManager;\n  /** This is the surface this layer is generated under */\n  surface: LayerSurface;\n  /** This is all of the uniforms generated for the layer */\n  uniforms: IUniformInternal[];\n  /** This is all of the vertex attributes generated for the layer */\n  vertexAttributes: IVertexAttributeInternal[];\n  /** This is the view the layer is applied to. The system sets this, modifying will only cause sorrow. */\n  view: View;\n\n  /** This contains the methods and controls for handling diffs for the layer */\n  diffManager: InstanceDiffManager<T>;\n\n  constructor(props: ILayerProps<T>) {\n    // We do not establish bounds in the layer. The surface manager will take care of that for us\n    // After associating the layer with the view it is a part of.\n    super(props);\n    // Keep our props within the layer\n    this.props = Object.assign({}, Layer.defaultProps || {}, props as U);\n    // Set up the pick type for the layer\n    const { picking = PickType.NONE } = this.props;\n\n    // If ALL is specified we set up QUAD tree picking for our instances\n    if (picking === PickType.ALL) {\n      const pickingMethods = this.getInstancePickingMethods();\n\n      this.picking = {\n        currentPickMode: PickType.NONE,\n        hitTest: pickingMethods.hitTest,\n        quadTree: new TrackedQuadTree<T>(\n          0,\n          1,\n          0,\n          1,\n          pickingMethods.boundsAccessor,\n        ),\n        type: PickType.ALL,\n      };\n    } else if (picking === PickType.SINGLE) {\n      this.picking = {\n        currentPickMode: PickType.NONE,\n        type: PickType.SINGLE,\n        uidToInstance: new Map<number, T>(),\n      };\n    } else {\n      this.picking = {\n        currentPickMode: PickType.NONE,\n        type: PickType.NONE,\n      };\n    }\n  }\n\n  /**\n   * Invalidate and free all resources assocated with this layer.\n   */\n  destroy() {\n    if (this.bufferManager) {\n      if (this.bufferManager.scene) this.bufferManager.scene.removeLayer(this);\n      this.bufferManager.removeFromScene();\n      this.bufferManager.destroy();\n    }\n  }\n\n  didUpdateProps() {\n    /** LIFECYCLE */\n  }\n\n  /**\n   * This is where global uniforms should update their values. Executes every frame.\n   */\n  draw() {\n    let uniform: IUniformInternal;\n    let value: UniformIOValue;\n\n    // Consume the diffs for the instances to update each element\n    const changeList = this.props.data.changeList;\n    // Make some holder variables to prevent declaration within the loop\n    let change, instance, bufferLocations;\n    // Fast ref to the processor and manager\n    const diffManager = this.diffManager;\n    const processing = diffManager.processing;\n    const processor = diffManager.processor;\n\n    // Forewarn the processor how many instances are flagged for a change.\n    processor.incomingChangeList(changeList);\n\n    for (let i = 0, end = changeList.length; i < end; ++i) {\n      change = changeList[i];\n      instance = change[0];\n      bufferLocations = this.bufferManager.getBufferLocations(instance);\n      // The diff type is change[1] which we use to find the diff processing method to use\n      processing[change[1]](\n        processor,\n        instance,\n        Object.values(change[2]),\n        bufferLocations,\n      );\n    }\n\n    // Tell the diff processor that it has completed it's task set\n    processor.commit();\n    // Indicate the diffs are consumed\n    this.props.data.resolve();\n\n    // Loop through the uniforms that are across all instances\n    for (let i = 0, end = this.uniforms.length; i < end; ++i) {\n      uniform = this.uniforms[i];\n      value = uniform.update(uniform);\n      uniform.materialUniforms.forEach(\n        materialUniform => (materialUniform.value = value),\n      );\n    }\n  }\n\n  /**\n   * This method is for layers to implement to specify how the bounds for an instance are retrieved or\n   * calculated and how the Instance interacts with a point. This is REQUIRED to support PickType.ALL on the layer.\n   */\n  getInstancePickingMethods(): IPickingMethods<T> {\n    throw new Error(\n      'When picking is set to PickType.ALL, the layer MUST have this method implemented; otherwise, the layer is incompatible with this picking mode.',\n    );\n  }\n\n  /**\n   * The type of Three model as well as the preferred draw mode associated with it.\n   */\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TrianglesDrawMode,\n      modelType: Three.Mesh,\n    };\n  }\n\n  /**\n   * The options for a three material without uniforms.\n   */\n  getMaterialOptions(): IMaterialOptions {\n    return {};\n  }\n\n  /**\n   * This sets up all of the data bindings that will transport data from the CPU\n   * to the Shader on the GPU.\n   *\n   * Instance Attributes: These are very frequently changing attributes\n   * Vertex Attributes: These are attributes that should be static on a vertex. Conisder it very costly to update.\n   *                    The only time making these modifieable is in the event of GL_POINTS.\n   * Uniforms: These set up the uniforms for the layer, thus having all normal implications of a uniform. Global\n   *           across the fragment and vertex shaders and can be modified with little consequence.\n   */\n  initShader(): IShaderInitialization<T> {\n    return {\n      fs: require('../shaders/base/no-op.fs'),\n      instanceAttributes: [],\n      uniforms: [],\n      vertexAttributes: [],\n      vertexCount: 0,\n      vs: require('../shaders/base/no-op.vs'),\n    };\n  }\n\n  /**\n   * Helper method for making an instance attribute. Depending on set up, this makes creating elements\n   * have better documentation when typing out the elements.\n   */\n  makeInstanceAttribute(\n    block: number,\n    blockIndex: InstanceBlockIndex,\n    name: string,\n    size: InstanceAttributeSize,\n    update: (o: T) => InstanceIOValue,\n    atlas?: {\n      key: string;\n      name: string;\n      shaderInjection?: ShaderInjectionTarget;\n    },\n  ): IInstanceAttribute<T> {\n    return {\n      atlas,\n      block,\n      blockIndex,\n      name,\n      size,\n      update,\n    };\n  }\n\n  /**\n   * Helper method for making a uniform type. Depending on set up, this makes creating elements\n   * have better documentation when typing out the elements.\n   */\n  makeUniform(\n    name: string,\n    size: UniformSize,\n    update: (o: IUniform) => UniformIOValue,\n    shaderInjection?: ShaderInjectionTarget,\n    qualifier?: string,\n  ): IUniform {\n    return {\n      name,\n      qualifier,\n      shaderInjection,\n      size,\n      update,\n    };\n  }\n\n  /**\n   * Applies a buffer manager to the layer which handles instance changes and applies those changes\n   * to an appropriate buffer at the appropriate location.\n   */\n  setBufferManager(bufferManager: BufferManagerBase<T, IBufferLocation>) {\n    if (!this._bufferManager) {\n      this._bufferManager = bufferManager;\n      this.diffManager = new InstanceDiffManager<T>(this, bufferManager);\n      this.diffManager.makeProcessor();\n      this.interactions = new LayerInteractionHandler(this);\n    } else {\n      console.warn(\n        'You can not change a layer\\'s buffer strategy once it has been instantiated.',\n      );\n    }\n  }\n\n  /**\n   * Only allows the buffer type to be set once\n   */\n  setBufferType(val: LayerBufferType) {\n    if (this._bufferType === undefined) {\n      this._bufferType = val;\n    } else {\n      console.warn(\n        'You can not change a layers buffer strategy once it has been instantiated.',\n      );\n    }\n  }\n\n  willUpdateInstances(changes: [T, InstanceDiffType]) {\n    // HOOK: Simple hook so a class can review all of it's changed instances before\n    //       Getting applied to the Shader IO\n  }\n\n  willUpdateProps(newProps: ILayerProps<T>) {\n    /** LIFECYCLE */\n  }\n\n  didUpdate() {\n    this.props.data.resolve();\n  }\n}\n","import { Instance } from '../../instance-provider/instance';\nimport {\n  IInstanceAttribute,\n  instanceAttributeSizeFloatCount,\n  IVertexAttribute,\n} from '../../types';\nimport { WebGLStat } from '../../util';\nimport {\n  InstanceAttributeBufferManager,\n  UniformBufferManager,\n} from '../buffer-management';\nimport { Layer } from '../layer';\nimport { Scene } from '../scene';\n\nexport enum LayerBufferType {\n  // This is a compatibility mode for instance attributes. This is used when:\n  // 1. It would perform better\n  // 2. When instance attributes are not available for the gl context (ANGLE draw instanced arrays)\n  // 3. When the instance attributes + vertex attributes exceeds the max Vertex Attributes for the hardware\n  UNIFORM,\n  // This is a fast and zippy buffering strategy used when the hardware supports it for a provided layer!\n  INSTANCE_ATTRIBUTE,\n}\n\n/**\n * This analyzes a layer and determines if it should use a compatibility instancing mode or use hardware\n * instancing.\n */\nexport function getLayerBufferType<T extends Instance>(\n  gl: WebGLRenderingContext,\n  layer: Layer<T, any>,\n  vertexAttributes: IVertexAttribute[],\n  instanceAttributes: IInstanceAttribute<T>[],\n) {\n  let type;\n\n  // The layer only gets it's buffer type calculated once\n  if (layer.bufferType !== undefined) {\n    return layer.bufferType;\n  }\n\n  // Uncomment this to force the uniform buffer strategy\n  // layer.setBufferType(LayerBufferType.UNIFORM);\n  // return LayerBufferType.UNIFORM;\n\n  if (WebGLStat.HARDWARE_INSTANCING) {\n    let attributesUsed = 0;\n\n    for (let i = 0, end = vertexAttributes.length; i < end; ++i) {\n      const attribute = vertexAttributes[i];\n      attributesUsed += Math.ceil(attribute.size / 4);\n    }\n\n    for (let i = 0, end = instanceAttributes.length; i < end; ++i) {\n      const attribute = instanceAttributes[i];\n      attributesUsed += Math.ceil(\n        instanceAttributeSizeFloatCount[attribute.size || 1] / 4,\n      );\n    }\n\n    // Too many attributes. We must use the uniform compatibility mode\n    if (attributesUsed > WebGLStat.MAX_VERTEX_ATTRIBUTES) {\n      type = LayerBufferType.UNIFORM;\n    }\n\n    // If we make it here, we are good to go using hardware instancing! Hooray performance!\n    else {\n      type = LayerBufferType.INSTANCE_ATTRIBUTE;\n    }\n  }\n\n  // No other faster mode supported: use uniform instancing\n  if (!type) type = LayerBufferType.UNIFORM;\n  // Apply the type to the layer\n  layer.setBufferType(type);\n\n  return type;\n}\n\n/**\n * Builds the proper buffer manager for the provided layer\n */\nexport function makeLayerBufferManager<T extends Instance>(\n  gl: WebGLRenderingContext,\n  layer: Layer<T, any>,\n  scene: Scene,\n) {\n  // Esnure the buffering type has been calculated for the layer\n  const type = getLayerBufferType(\n    gl,\n    layer,\n    layer.vertexAttributes,\n    layer.instanceAttributes,\n  );\n\n  switch (type) {\n    // This is the Instance Attribute buffering strategy, which means the system\n    case LayerBufferType.INSTANCE_ATTRIBUTE: {\n      layer.setBufferManager(new InstanceAttributeBufferManager(layer, scene));\n      break;\n    }\n\n    // Anything not utiliziing a specialized buffering strategy will use the uniform compatibility mode\n    default: {\n      layer.setBufferManager(new UniformBufferManager(layer, scene));\n      break;\n    }\n  }\n}\n","export * from './bounds';\nexport * from './circle';\nexport * from './point';\nexport * from './scale';\nexport * from './size';\n","export * from './atlas';\nexport * from './atlas-manager';\nexport * from './color-atlas-resource';\nexport * from './color-rasterizer';\nexport * from './image-atlas-resource';\nexport * from './image-rasterizer';\nexport * from './label-atlas-resource';\nexport * from './label-rasterizer';\n","import * as Three from 'three';\nimport { IModelConstructable, Layer } from '../layer';\n\nfunction isMesh(val: any): val is Three.Mesh {\n  return Boolean(val.isMesh);\n}\n\nexport function generateLayerModel(\n  layer: Layer<any, any>,\n  geometry: Three.BufferGeometry,\n  material: Three.ShaderMaterial,\n): IModelConstructable & Three.Object3D {\n  const modelInfo = layer.getModelType();\n  const model = new modelInfo.modelType(geometry, material);\n\n  if (isMesh(model)) {\n    model.drawMode =\n      modelInfo.drawMode === undefined\n        ? Three.TriangleStripDrawMode\n        : modelInfo.drawMode;\n  }\n\n  return model;\n}\n","export interface IdentifyByKeyOptions {\n  /** The identifier of the object */\n  key: string;\n}\n\n/**\n * This is an object that specifically is generated with a 'key' option that can never\n * be modified on the object and is identified henceforth with the key applied as the\n * 'id' of the object.\n */\nexport class IdentifyByKey {\n  /** Internal key held by the object */\n  private key: string;\n\n  /** READONLY id of the object. */\n  get id() {\n    return this.key;\n  }\n\n  constructor(options: IdentifyByKeyOptions) {\n    this.key = options.key;\n  }\n}\n","import { IBufferLocation } from '../surface/buffer-management';\nimport { Identifiable, IEasingProps } from '../types';\nimport { InstanceProvider } from './instance-provider';\nimport { observable } from './observable';\n\nlet instanceUID = 0;\n\nexport interface IInstanceOptions {\n  /** The instance can be declared with an initial active state */\n  active?: boolean;\n  /** An instance must be declared with an identifier */\n  id?: string;\n}\n\nexport class Instance implements Identifiable {\n  static get newUID() {\n    return (instanceUID = ++instanceUID % 0xffffff);\n  }\n\n  /** This indicates when the instance is active / rendering */\n  @observable active: boolean;\n  /** This is a mapping of an instance's observable properties to their associated Buffer Mapping */\n  private _attributeMapping = new Map<number, IBufferLocation>();\n  /** This is an internal easing object to track properties for automated easing */\n  private _easing = new Map<number, IEasingProps>();\n  /** Internal, non-changeable id */\n  private _id: string;\n  /** This is the observer of the Instance's observable properties */\n  private _observer: InstanceProvider<this> | null;\n  /** This is where observables store their data for the instance */\n  observableStorage: any[] = [];\n  /** A numerical look up for the instance. Numerical identifiers run faster than objects or strings */\n  private _uid = Instance.newUID;\n\n  /**\n   * The system will call this on the instance when it believes the instance may be\n   * harboring resources that are not released.\n   */\n  destroy() {\n    // Generally a No-op\n  }\n\n  get observableDisposer(): () => void {\n    return () => delete this._observer;\n  }\n\n  get observer(): InstanceProvider<this> | null {\n    return this._observer || null;\n  }\n\n  set observer(val: InstanceProvider<this> | null) {\n    // If an observer already is present, we should inform it, that it is being removed\n    // in favor of a new observer\n    const oldObserver = this._observer;\n\n    if (oldObserver && oldObserver !== val) {\n      oldObserver.remove(this);\n    }\n\n    // Apply the new observer as the current observer\n    this._observer = val;\n  }\n\n  get attributeMapping() {\n    return this._attributeMapping;\n  }\n\n  get easing() {\n    return this._easing;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get uid() {\n    return this._uid;\n  }\n\n  /**\n   * This method is utilized internally to indicate when requested resources are ready.\n   * If you have a property that will be requesting a resource, you should implement this method\n   * to cause a trigger for the property to activate such that the property will update it's buffer.\n   */\n  resourceTrigger() {\n    // For subclasses\n  }\n\n  constructor(options: IInstanceOptions) {\n    this._id = options.id || '';\n    this.active = options.active || this.active;\n  }\n}\n","import * as Three from 'three';\nimport {\n  AbsolutePosition,\n  getAbsolutePositionBounds,\n} from '../primitives/absolute-position';\nimport { Bounds } from '../primitives/bounds';\nimport { IPoint } from '../primitives/point';\nimport { Color } from '../types';\nimport { ChartCamera } from '../util/chart-camera';\nimport { DataBounds } from '../util/data-bounds';\nimport { IdentifyByKey, IdentifyByKeyOptions } from '../util/identify-by-key';\nimport { ViewCamera, ViewCameraType } from '../util/view-camera';\n\nexport enum ClearFlags {\n  COLOR = 0b0001,\n  DEPTH = 0b0010,\n  STENCIL = 0b0100,\n}\n\n/**\n * Defines the input metrics of a view for a scene.\n */\nexport interface IViewOptions extends IdentifyByKeyOptions {\n  /**\n   * The background color that gets cleared out for this view. Performance is\n   * better if this is left clear. Probably better to draw a colored quad instead.\n   * This is just convenient.\n   */\n  background?: Color;\n  /**\n   * This is the spatial charting camera that is concerned with offsets and scales.\n   * It is often easier to work with camera positioning and settings rather than working\n   * with the complex and nuanced viewCamera which works with special transformation matrices\n   * to express orientation.\n   *\n   * If not provided, then this camera will use a default ChartCamera for this camera slot. This\n   * will also cause a normal camera handler to be utilized.\n   */\n  camera?: ChartCamera;\n  /**\n   * This sets what buffers get cleared by webgl before the view is drawn in it's space.\n   */\n  clearFlags?: ClearFlags[];\n  /**\n   * If this is provided, the layer can be rendered with a traditional camera that utilizes\n   * matrix transforms to provide orientation/projection for the view.\n   *\n   * If this is NOT provided, the camera will be a special orthographic camera for 2d spaces\n   * with a y-axis of +y points down with (0, 0) at the top left of the viewport.\n   */\n  viewCamera?: ViewCamera;\n  /**\n   * This specifies the bounds on the canvas this camera will render to. This let's you render\n   * say a little square in the bottom right showing a minimap.\n   *\n   * If this is not specified, the entire canvas will be the viewport.\n   */\n  viewport?: AbsolutePosition;\n}\n\nfunction isOrthographic(val: Three.Camera): val is Three.OrthographicCamera {\n  return 'left' in val;\n}\n\n/**\n * This defines a view of a scene\n */\nexport class View extends IdentifyByKey {\n  static DEFAULT_VIEW_ID = '__default__';\n\n  /** If present, is the cleared color before this view renders */\n  background: Color;\n  /** Camera that defines the individual components of each axis with simpler concepts */\n  camera: ChartCamera;\n  /** These are the clear flags set for this view */\n  clearFlags: ClearFlags[];\n  /**\n   * This is the depth of the view. The higher the depth represents which layer is on top.\n   * Zero always represents the default view.\n   */\n  depth: number = 0;\n  /** This is set to ensure the projections that happen properly translates the pixel ratio to normal Web coordinates */\n  pixelRatio: number = window.devicePixelRatio;\n  /** This is the rendering bounds within screen space */\n  screenBounds: Bounds;\n  /** Camera that defines the view projection matrix */\n  viewCamera: ViewCamera;\n  /** The size positioning of the view */\n  viewport: AbsolutePosition;\n  /** The bounds of the render space on the canvas this view will render on */\n  viewBounds: DataBounds<View>;\n\n  constructor(options: IViewOptions) {\n    super(options);\n    Object.assign(this, options);\n  }\n\n  screenToPixelSpace(point: IPoint, out?: IPoint) {\n    const p = out || { x: 0, y: 0 };\n\n    p.x = point.x * this.pixelRatio;\n    p.y = point.y * this.pixelRatio;\n\n    return p;\n  }\n\n  pixelSpaceToScreen(point: IPoint, out?: IPoint) {\n    const p = out || { x: 0, y: 0 };\n\n    p.x = point.x / this.pixelRatio;\n    p.y = point.y / this.pixelRatio;\n\n    return p;\n  }\n\n  screenToView(point: IPoint, out?: IPoint) {\n    const p = this.screenToPixelSpace(point, out);\n\n    p.x = p.x - this.viewBounds.x;\n    p.y = p.y - this.viewBounds.y;\n\n    return p;\n  }\n\n  viewToScreen(point: IPoint, out?: IPoint) {\n    const p = { x: 0, y: 0 };\n\n    p.x = point.x + this.viewBounds.x;\n    p.y = point.y + this.viewBounds.y;\n\n    return this.pixelSpaceToScreen(p, out);\n  }\n\n  screenToWorld(point: IPoint, out?: IPoint) {\n    const view = this.pixelSpaceToScreen(this.screenToView(point));\n\n    const world = out || { x: 0, y: 0 };\n    world.x =\n      (view.x - this.camera.offset[0] * this.camera.scale[0]) /\n      this.camera.scale[0];\n    world.y =\n      (view.y - this.camera.offset[1] * this.camera.scale[1]) /\n      this.camera.scale[1];\n\n    // If this is a custom camera, we must actually project our world point to the screen\n    if (this.viewCamera.type === ViewCameraType.CUSTOM) {\n      console.warn('Custom View Camera projections not supported yet');\n    }\n\n    return world;\n  }\n\n  worldToScreen(point: IPoint, out?: IPoint) {\n    const screen = { x: 0, y: 0 };\n\n    // Calculate from the camera to view space\n    screen.x =\n      (point.x * this.camera.scale[0] +\n        this.camera.offset[0] * this.camera.scale[0]) *\n      this.pixelRatio;\n    screen.y =\n      (point.y * this.camera.scale[1] +\n        this.camera.offset[1] * this.camera.scale[1]) *\n      this.pixelRatio;\n\n    // If this is a custom camera, we must actually project our world point to the screen\n    if (this.viewCamera.type === ViewCameraType.CUSTOM) {\n      console.warn('Custom View Camera projections not supported yet');\n    }\n\n    // Convert from view to screen space\n    return this.viewToScreen(screen, out);\n  }\n\n  viewToWorld(point: IPoint, out?: IPoint) {\n    const world = out || { x: 0, y: 0 };\n\n    const screen = this.pixelSpaceToScreen(point);\n    world.x =\n      (screen.x - this.camera.offset[0] * this.camera.scale[0]) /\n      this.camera.scale[0];\n    world.y =\n      (screen.y - this.camera.offset[1] * this.camera.scale[1]) /\n      this.camera.scale[1];\n\n    // If this is a custom camera, we must actually project our world point to the screen\n    if (this.viewCamera.type === ViewCameraType.CUSTOM) {\n      console.warn('Custom View Camera projections not supported yet');\n    }\n\n    return world;\n  }\n\n  worldToView(point: IPoint, out?: IPoint) {\n    const screen = out || { x: 0, y: 0 };\n\n    // Calculate from the camera to view space\n    screen.x =\n      point.x * this.camera.scale[0] +\n      this.camera.offset[0] * this.camera.scale[0];\n    screen.y =\n      point.y * this.camera.scale[1] +\n      this.camera.offset[1] * this.camera.scale[1];\n\n    // If this is a custom camera, we must actually project our world point to the screen\n    if (this.viewCamera.type === ViewCameraType.CUSTOM) {\n      console.warn('Custom View Camera projections not supported yet');\n    }\n\n    return screen;\n  }\n\n  /**\n   * This operation makes sure we have the view camera adjusted to the new viewport's needs.\n   * For default behavior this ensures that the coordinate system has no distortion, orthographic,\n   * top left as 0,0 with +y axis pointing down.\n   */\n  fitViewtoViewport(surfaceDimensions: Bounds) {\n    if (\n      this.viewCamera.type === ViewCameraType.CONTROLLED &&\n      isOrthographic(this.viewCamera.baseCamera)\n    ) {\n      const viewBounds = getAbsolutePositionBounds<View>(\n        this.viewport,\n        surfaceDimensions,\n        this.pixelRatio,\n      );\n      const width = viewBounds.width;\n      const height = viewBounds.height;\n\n      const viewport = {\n        bottom: -height / 2,\n        far: 10000000,\n        left: -width / 2,\n        near: -100,\n        right: width / 2,\n        top: height / 2,\n      };\n\n      const scaleX = 1;\n      const scaleY = 1;\n      const camera = this.viewCamera.baseCamera;\n\n      Object.assign(camera, viewport);\n      camera.position.set(\n        -viewBounds.width / 2.0 * scaleX,\n        viewBounds.height / 2.0 * scaleY,\n        camera.position.z,\n      );\n      camera.scale.set(scaleX, -scaleY, 1.0);\n      camera.updateMatrix();\n      camera.updateMatrixWorld(true);\n      camera.updateProjectionMatrix();\n\n      this.viewBounds = viewBounds;\n      this.viewBounds.data = this;\n      this.screenBounds = new Bounds({\n        height: this.viewBounds.height / this.pixelRatio,\n        width: this.viewBounds.width / this.pixelRatio,\n        x: this.viewBounds.x / this.pixelRatio,\n        y: this.viewBounds.y / this.pixelRatio,\n      });\n    } else if (!isOrthographic(this.viewCamera.baseCamera)) {\n      console.warn(\n        'Fit to viewport does not support non-orthographic cameras as a default behavior.',\n      );\n    }\n  }\n}\n","import * as Three from 'three';\nimport { Instance } from '../util';\nimport { IdentifyByKey, IdentifyByKeyOptions } from '../util/identify-by-key';\nimport { ILayerProps, Layer } from './layer';\nimport { IViewOptions, View } from './view';\n\n/**\n * Defines the input for an available scene layers can add themselves to. Each scene can be rendered with multiple\n * views.\n */\nexport interface ISceneOptions extends IdentifyByKeyOptions {\n  /**\n   * This indicates all of the views this scene can be rendered with. For instance: You have a\n   * world scene and you want to render it stereoscopically for VR. Then you can specify two\n   * views with two viewports to render the scene on both halves of the canvas.\n   *\n   * Or perhaps you want an aerial shot as a minimap in the bottom right corner while the rest\n   * of the canvas renders a first person view, then you would make two views for that as well.\n   */\n  views: IViewOptions[];\n}\n\nfunction sortByDepth(a: Layer<any, any>, b: Layer<any, any>) {\n  return a.depth - b.depth;\n}\n\n/**\n * This defines a scene to which layers are added to. It also tracks the views that this scene\n * is rendered with.\n */\nexport class Scene extends IdentifyByKey {\n  static DEFAULT_SCENE_ID = '__default__';\n\n  /** This is the three scene which actually sets up the rendering objects */\n  container: Three.Scene = new Three.Scene();\n  // TODO: This 'could' be smarter when Three is gone. The pipeline could IMMEDIATELY render\n  /** We make a picking container specifically for the cases where objects must be rendered for picking */\n  pickingContainer: Three.Scene = new Three.Scene();\n  /** This is all of the layers tracked to the scene */\n  layers: Layer<any, any>[] = [];\n  /** This indicates the sort is dirty for a set of layers */\n  sortIsDirty = false;\n  /** This is the view */\n  viewById = new Map<string, View>();\n\n  constructor(options: ISceneOptions) {\n    super(options);\n    this.container.frustumCulled = false;\n    this.container.autoUpdate = false;\n  }\n\n  /**\n   * Adds a layer to the scene with the current view setting the layer contains.\n   * The layer can not jump between views or scenes. You must destroy and reconstruct\n   * the layer.\n   */\n  addLayer<T extends Instance, U extends ILayerProps<T>>(layer: Layer<T, U>) {\n    // Add the layer to the list of layers under the view\n    this.layers.push(layer);\n    this.sortIsDirty = true;\n  }\n\n  /**\n   * This adds a view to this scene to be used by the scene\n   */\n  addView(view: View) {\n    this.viewById.set(view.id, view);\n  }\n\n  /**\n   * Release any resources this may be hanging onto\n   */\n  destroy() {\n    delete this.container;\n  }\n\n  /**\n   * Removes a layer from the scene. No resort is needed as remove operations\n   * do not adjust the sorting order.\n   */\n  removeLayer(layer: Layer<any, any>) {\n    if (this.layers) {\n      const index = this.layers.indexOf(layer);\n\n      if (index >= 0) {\n        this.layers.splice(index, 1);\n        return;\n      }\n    }\n\n    console.warn(\n      'Could not remove a layer from the scene as the layer was not a part of the scene to start. Scene:',\n      this.id,\n      'Layer:',\n      layer.id,\n    );\n  }\n\n  sortLayers() {\n    if (this.sortIsDirty) {\n      this.layers.sort(sortByDepth);\n    }\n  }\n}\n","import { Label } from '../../primitives/label';\nimport { BaseAtlasResource } from './base-atlas-resource';\n\nexport class LabelAtlasResource extends BaseAtlasResource {\n  /** This is the label to be loaded into the atlas */\n  label: Label;\n  /** If the label renders */\n  truncatedText: string;\n\n  constructor(label: Label) {\n    super();\n    this.label = label;\n  }\n}\n","import { SubTexture } from './sub-texture';\n\nexport class BaseAtlasResource {\n  /** The rasterization metrics of the label */\n  rasterization: {\n    /**\n     * WARNING: This will ONLY SOMETIMES be populated. The system can choose\n     * when to consume this as it chooses as it can be a major memory eater if\n     * permanently left in place. DO NOT RELY on this being available.\n     */\n    canvas?: HTMLCanvasElement;\n    image?: HTMLImageElement;\n    /** The rasterization dimensions as it is rendered to texture space on an atlas */\n    texture: {\n      height: number;\n      width: number;\n    };\n    /** The rasterization dimensions as it would be rendered in world space */\n    world: {\n      height: number;\n      width: number;\n    };\n  };\n  /**\n   * This sets the ratserization to be a larger value on the texture than is rendered within\n   * the world space. This allows for techniques to be applied in the shaders to incorporate super sampling\n   * or other processes which require higher levels of resolution.\n   *\n   * The default is 1 for a 1 to 1 sample scaling to world space rendering\n   */\n  sampleScale: number = 1;\n  /** Once loaded into the texture, this will be populated */\n  texture: SubTexture;\n}\n","export enum EdgeScaleType {\n  /** All dimensions are within world space */\n  NONE,\n  /**\n   * The control points are a delta from the end points within screen space, and the line thickness is within\n   * screen space as well all measured in pixels. The scaleFactor scales both thickness and control delta values.\n   * The endpoints remain in world space\n   */\n  SCREEN_CURVE,\n}\n\nexport enum EdgeType {\n  /** Makes a straight edge with no curve */\n  LINE,\n  /** Makes a single control point Bezier curve */\n  BEZIER,\n  /** Makes a two control point bezier curve */\n  BEZIER2,\n}\n\n/**\n * This is the broadphase control for edges to help handle quad tree adjustments for picking. If the edge scale type\n * is NONE, you don't need to utilize this. If you use screen space and have camera distortions along an axis, this\n * can help greatly.\n */\nexport enum EdgeBroadphase {\n  /** Use this if the broad phase detection should use both width and height of the edge's bounds */\n  ALL,\n  /** Use this to ensure a test against the edge is performed if the mouse aligns with it on the x-axis */\n  PASS_Y,\n  /** Use this to ensure a test against the edge is performed if the mouse aligns with it on the y axis */\n  PASS_X,\n}\n","import * as Three from 'three';\nimport { Instance, InstanceDiff } from '../../../instance-provider';\nimport { isBufferLocation } from '../buffer-manager-base';\nimport { IInstanceDiffManagerTarget } from '../instance-diff-manager';\nimport { IUniformBufferLocation } from '../uniform-buffer-manager';\nimport { BaseDiffProcessor } from './base-diff-processor';\n\n// This is a mapping of the vector properties as they relate to an array order\nconst VECTOR_ACCESSORS: (keyof Three.Vector4)[] = ['x', 'y', 'z', 'w'];\nconst EMPTY: number[] = [];\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class UniformDiffProcessor<T extends Instance> extends BaseDiffProcessor<\n  T\n> {\n  /**\n   * This processes add operations from changes in the instancing data\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation,\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (uniformCluster) {\n      manager.changeInstance(manager, instance, EMPTY, uniformCluster);\n    }\n\n    // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n    else {\n      const uniforms = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocation(uniforms)) {\n        instance.active = true;\n        manager.updateInstance(manager.layer, instance, uniforms);\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation,\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the uniforms\n    if (uniformCluster) {\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n    }\n\n    // If we don't have existing uniforms, then we must remove the instance\n    else {\n      manager.addInstance(manager, instance, EMPTY, uniformCluster);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation,\n  ) {\n    if (uniformCluster) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n    }\n  }\n\n  /**\n   * This performs the actual updating of buffers the instance needs to update\n   */\n  updateInstance(\n    layer: IInstanceDiffManagerTarget<T>,\n    instance: T,\n    uniformCluster: IUniformBufferLocation,\n  ) {\n    if (instance.active) {\n      const uniforms = uniformCluster.buffer;\n      const uniformRangeStart = uniformCluster.range[0];\n      const instanceData: Three.Vector4[] = uniforms.value;\n      let instanceUniform, value, block, start;\n      let k, endk;\n\n      // Loop through the instance attributes and update the uniform cluster with the valaues\n      // Calculated for the instance\n      for (let i = 0, end = layer.instanceAttributes.length; i < end; ++i) {\n        instanceUniform = layer.instanceAttributes[i];\n        value = instanceUniform.update(instance);\n        block = instanceData[uniformRangeStart + instanceUniform.block];\n        instanceUniform.atlas &&\n          layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n        start = instanceUniform.blockIndex;\n\n        if (start === undefined) {\n          continue;\n        }\n\n        // Hyper optimized vector filling routine. It uses properties that are globally scoped\n        // To greatly reduce overhead\n        for (k = start, endk = value.length + start; k < endk; ++k) {\n          block[VECTOR_ACCESSORS[k]] = value[k - start];\n        }\n      }\n\n      uniforms.value = instanceData;\n    } else {\n      const uniforms: Three.IUniform = uniformCluster.buffer;\n      const uniformRangeStart = uniformCluster.range[0];\n      const instanceData: Three.Vector4[] = uniforms.value;\n      let instanceUniform, value, block, start;\n\n      // Only update the _active attribute to ensure it is false. When it is false, there is no\n      // Point to updating any other uniform\n      instanceUniform = layer.activeAttribute;\n      value = instanceUniform.update(instance);\n      block = instanceData[uniformRangeStart + instanceUniform.block];\n      instanceUniform.atlas &&\n        layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n      start = instanceUniform.blockIndex;\n\n      if (start !== undefined) {\n        // Hyper optimized vector filling routine. It uses properties that are globally scoped\n        // To greatly reduce overhead\n        for (let k = start, endk = value.length + start; k < endk; ++k) {\n          block[VECTOR_ACCESSORS[k]] = value[k - start];\n        }\n      }\n\n      uniforms.value = instanceData;\n    }\n  }\n\n  /**\n   * Right now there is no operations for committing for the uniform manager.\n   */\n  commit() {\n    /** no-op */\n  }\n\n  /**\n   * There are no optimizations available for this processor yet.\n   */\n  incomingChangeList(_changes: InstanceDiff<T>[]) {\n    /** no-op */\n  }\n}\n","import * as Three from 'three';\n\nexport enum ViewCameraType {\n  /**\n   * Indicates a camera that is forced by the system to follow:\n   * - Match width and height of the view port\n   * - +y axis points downward\n   * - gl origin is at the top left of the screen\n   */\n  CONTROLLED,\n  /**\n   * This allows a custom view camera to be applied to the scene.\n   */\n  CUSTOM,\n}\n\n/**\n * This is a camera that controls the view projection matrix. This is a much more\n * complicated way to handle views that is better suited for handling 3D applications\n * and is very overkill for most 2D charting systems. If you are working purely with\n * 2D components, it's recommended to leave this as a CONTROLLED camera and utilize\n * the ChartCamera for most of your needs.\n */\nexport class ViewCamera {\n  type: ViewCameraType = ViewCameraType.CONTROLLED;\n  baseCamera: Three.Camera;\n}\n","export interface IShaderTemplateResults {\n  /** This is the resulting shader string generated from the templating */\n  shader: string;\n  /** This is the template options provided by the shader. {option: num occurrences} */\n  shaderProvidedOptions: Map<string, number>;\n  /**\n   * This is the template options provided by the shader that were not resolved by the options parameter\n   * {option: num occurrences}\n   */\n  unresolvedShaderOptions: Map<string, number>;\n  /** This is the options provided to the template that did not get resolved by the shader {option: 1} */\n  unresolvedProvidedOptions: Map<string, number>;\n  /** This is the list of options that DID get resolved by the options provided {option: num occurrences} */\n  resolvedShaderOptions: Map<string, number>;\n}\n\nexport interface IShaderTemplateRequirements {\n  /** A string identifier to make it easier to identify which shader template failed requirements */\n  name: string;\n  /** The options that must be present within both provided options AND within the template */\n  values: string[];\n}\n\nexport function shaderTemplate(\n  shader: string,\n  options: { [key: string]: string },\n  required?: IShaderTemplateRequirements,\n): IShaderTemplateResults {\n  const matched = new Map<string, number>();\n  const noValueProvided = new Map<string, number>();\n  const notFound = new Map<string, number>();\n  const shaderOptions = new Map<string, number>();\n\n  const shaderResults = shader.replace(\n    /\\$\\{(\\w+)\\}/g,\n    (x: string, match: string) => {\n      shaderOptions.set(match, (shaderOptions.get(match) || 0) + 1);\n\n      if (match in options) {\n        matched.set(match, (matched.get(match) || 0) + 1);\n        return options[match];\n      }\n\n      noValueProvided.set(match, (noValueProvided.get(match) || 0) + 1);\n      return '';\n    },\n  );\n\n  Object.keys(options).forEach(option => {\n    if (!matched.get(option)) {\n      notFound.set(option, (notFound.get(option) || 0) + 1);\n    }\n  });\n\n  // Provide metrics\n  const results = {\n    resolvedShaderOptions: matched,\n    shader: shaderResults,\n    shaderProvidedOptions: shaderOptions,\n    unresolvedProvidedOptions: notFound,\n    unresolvedShaderOptions: noValueProvided,\n  };\n\n  if (required) {\n    // This will ensure that BOTH the parameter input AND the shader provided the required options.\n    required.values.forEach(require => {\n      if (results.unresolvedProvidedOptions.get(require)) {\n        console.error(\n          `${required.name}: Could not resolve all the required inputs. Input:`,\n          require,\n        );\n      } else if (results.unresolvedShaderOptions.get(require)) {\n        console.error(\n          `${\n            required.name\n          }: A required option was not provided in the options parameter. Option:`,\n          require,\n        );\n      } else if (!results.resolvedShaderOptions.get(require)) {\n        console.error(\n          `${\n            required.name\n          }: A required option was not provided in the options parameter. Option:`,\n          require,\n        );\n      }\n    });\n  }\n\n  return results;\n}\n","let chartCameraUID = 0;\n\nexport interface IChartCameraOptions {\n  /** The world space offset of elements in the chart */\n  offset?: [number] | [number, number] | [number, number, number];\n  /** The world space scaling present in the chart */\n  scale?: [number] | [number, number] | [number, number, number];\n}\n\n/**\n * Quick method for applying a source array to a target array. This\n * ensures the arrays both are valid and applies the values without just making\n * a copy of the source.\n */\nfunction applyArray(target?: number[], source?: number[]) {\n  target && source && target.splice(0, source.length, ...source);\n}\n\nexport class ChartCamera {\n  /** Internally set id */\n  _id: number = chartCameraUID++;\n  /** Represents how much an element should be offset in world space */\n  offset: [number, number, number] = [0, 0, 0];\n  /** Represents how scaled each axis should be in world space */\n  scale: [number, number, number] = [1, 1, 1];\n\n  constructor(options?: IChartCameraOptions) {\n    if (options) {\n      applyArray(this.offset, options.offset);\n      applyArray(this.scale, options.scale);\n    }\n  }\n\n  /** Keep id as readonly */\n  get id() {\n    return this._id;\n  }\n\n  /**\n   * Sets the location of the camera by adjusting the offsets to match.\n   */\n  position(location: [number, number, number]) {\n    this.offset = location.slice(0) as [number, number, number];\n  }\n}\n","const { sqrt } = Math;\n\n/** Explicit Vec1 */\nexport interface IVec1 extends Array<number> {\n  0: number;\n  length: 1;\n}\n\n/** Explicit Vec2 */\nexport interface IVec2 extends Array<number> {\n  0: number;\n  1: number;\n  length: 2;\n}\n\n/** Explicit Vec3 */\nexport interface IVec3 extends Array<number> {\n  0: number;\n  1: number;\n  2: number;\n  length: 3;\n}\n\n/** Explicit Vec4 */\nexport interface IVec4 extends Array<number> {\n  0: number;\n  1: number;\n  2: number;\n  3: number;\n  length: 4;\n}\n\n/** Vector of 1 components */\nexport type Vec1 = [number];\n/** Vector of 2 components */\nexport type Vec2 = [number, number];\n/** Vector of 3 components */\nexport type Vec3 = [number, number, number];\n/** Vector of 4 components */\nexport type Vec4 = [number, number, number, number];\n\n/** This type defines any possible explicit vector */\nexport type IVec = IVec1 | IVec2 | IVec3 | IVec4;\n/** This type defines any possible vector */\nexport type Vec = Vec1 | Vec2 | Vec3 | Vec4;\n\nexport function add1(left: Vec1, right: Vec1): Vec1 {\n  return [left[0] + right[0]];\n}\n\nexport function scale1(vec: Vec1, scale: number): Vec1 {\n  return [vec[0] * scale];\n}\n\nexport function subtract1(left: Vec1, right: Vec1): Vec1 {\n  return [left[0] - right[0]];\n}\n\nexport function multiply1(left: Vec1, right: Vec1): Vec1 {\n  return [left[0] * right[0]];\n}\n\nexport function dot1(left: Vec1, right: Vec1): number {\n  return left[0] * right[0];\n}\n\nexport function linear1(start: Vec1, end: Vec1, t: number): Vec1 {\n  return scale1(add1(subtract1(end, start), start), t);\n}\n\nexport function length1(start: Vec1): number {\n  return sqrt(dot1(start, start));\n}\n\nexport function add2(left: Vec2, right: Vec2): Vec2 {\n  return [left[0] + right[0], left[1] + right[1]];\n}\n\nexport function scale2(left: Vec2, scale: number): Vec2 {\n  return [left[0] * scale, left[1] * scale];\n}\n\nexport function subtract2(left: Vec2, right: Vec2): Vec2 {\n  return [left[0] - right[0], left[1] - right[1]];\n}\n\nexport function multiply2(left: Vec2, right: Vec2): Vec2 {\n  return [left[0] * right[0], left[1] * right[1]];\n}\n\nexport function dot2(left: Vec2, right: Vec2): number {\n  return left[0] * right[0] + left[1] * right[1];\n}\n\nexport function linear2(start: Vec2, end: Vec2, t: number): Vec2 {\n  return scale2(add2(subtract2(end, start), start), t);\n}\n\nexport function length2(start: Vec2): number {\n  return sqrt(dot2(start, start));\n}\n\nexport function add3(left: Vec3, right: Vec3): Vec3 {\n  return [left[0] + right[0], left[1] + right[1], left[2] + right[2]];\n}\n\nexport function scale3(left: Vec3, scale: number): Vec3 {\n  return [left[0] * scale, left[1] * scale, left[2] * scale];\n}\n\nexport function subtract3(left: Vec3, right: Vec3): Vec3 {\n  return [left[0] - right[0], left[1] - right[1], left[2] - right[2]];\n}\n\nexport function multiply3(left: Vec3, right: Vec3): Vec3 {\n  return [left[0] * right[0], left[1] * right[1], left[2] * right[2]];\n}\n\nexport function linear3(start: Vec3, end: Vec3, t: number): Vec3 {\n  return scale3(add3(subtract3(end, start), start), t);\n}\n\nexport function length3(start: Vec3): number {\n  return sqrt(dot3(start, start));\n}\n\nexport function dot3(left: Vec3, right: Vec3): number {\n  return left[0] * right[0] + left[1] * right[1] + left[2] * right[2];\n}\n\nexport function add4(left: Vec4, right: Vec4): Vec4 {\n  return [\n    left[0] + right[0],\n    left[1] + right[1],\n    left[2] + right[2],\n    left[3] + right[3],\n  ];\n}\n\nexport function scale4(left: Vec4, scale: number): Vec4 {\n  return [left[0] * scale, left[1] * scale, left[2] * scale, left[3] * scale];\n}\n\nexport function subtract4(left: Vec4, right: Vec4): Vec4 {\n  return [\n    left[0] - right[0],\n    left[1] - right[1],\n    left[2] - right[2],\n    left[3] - right[3],\n  ];\n}\n\nexport function multiply4(left: Vec4, right: Vec4): Vec4 {\n  return [\n    left[0] * right[0],\n    left[1] * right[1],\n    left[2] * right[2],\n    left[3] * right[3],\n  ];\n}\n\nexport function dot4(left: Vec4, right: Vec4): number {\n  return (\n    left[0] * right[0] +\n    left[1] * right[1] +\n    left[2] * right[2] +\n    left[3] * right[3]\n  );\n}\n\nexport function linear4(start: Vec4, end: Vec4, t: number): Vec4 {\n  return scale4(add4(subtract4(end, start), start), t);\n}\n\nexport function length4(start: Vec4): number {\n  return sqrt(dot4(start, start));\n}\n\nexport type VecMethods<T extends Vec> = {\n  add(left: T, right: T): T;\n  scale(vec: T, scale: number): T;\n  subtract(left: T, right: T): T;\n  multiply(left: T, right: T): T;\n  dot(left: T, right: T): number;\n  linear(start: T, end: T, t: number): T;\n  length(vec: T): number;\n};\n\nexport const vec1Methods: VecMethods<Vec1> = {\n  add: add1,\n  dot: dot1,\n  length: length1,\n  linear: linear1,\n  multiply: multiply1,\n  scale: scale1,\n  subtract: subtract1,\n};\n\nexport const vec2Methods: VecMethods<Vec2> = {\n  add: add2,\n  dot: dot2,\n  length: length2,\n  linear: linear2,\n  multiply: multiply2,\n  scale: scale2,\n  subtract: subtract2,\n};\n\nexport const vec3Methods: VecMethods<Vec3> = {\n  add: add3,\n  dot: dot3,\n  length: length3,\n  linear: linear3,\n  multiply: multiply3,\n  scale: scale3,\n  subtract: subtract3,\n};\n\nexport const vec4Methods: VecMethods<Vec4> = {\n  add: add4,\n  dot: dot4,\n  length: length4,\n  linear: linear4,\n  multiply: multiply4,\n  scale: scale4,\n  subtract: subtract4,\n};\n\nexport function VecMath<T extends IVec>(vec: T): VecMethods<T> {\n  let methods: VecMethods<T>;\n\n  if (vec.length === 1) {\n    methods = vec1Methods as VecMethods<T>;\n    return methods;\n  } else if (vec.length === 2) {\n    methods = vec2Methods as VecMethods<T>;\n    return methods;\n  } else if (vec.length === 3) {\n    methods = vec3Methods as VecMethods<T>;\n    return methods;\n  }\n\n  methods = vec4Methods as VecMethods<T>;\n\n  return methods;\n}\n","import { InstanceIOValue } from '../types';\nimport { Vec, VecMath } from './vector';\n\nconst { min, max, pow, round, sin, PI } = Math;\nconst GPU_PI = round(PI * 1000) / 1000;\n\nfunction clamp(x: number, minVal: number, maxVal: number) {\n  return min(max(x, minVal), maxVal);\n}\n\nexport enum AutoEasingLoopStyle {\n  /** Time will go from 0 -> 1 then stop at 1 */\n  NONE = 1,\n  /** Time will go from 0 -> infinity */\n  CONTINUOUS = 4,\n  /** Time will continuously go 0 -> 1 then 0 -> 1 then 0 -> 1 etc etc */\n  REPEAT = 2,\n  /** Time will continously go 0 -> 1 then 1 -> 0 then 0 -> 1 then 1 -> 0 etc etc */\n  REFLECT = 3,\n}\n\n/**\n * This defines a GPU enabled easing method that will be executed on the GPU to maneuver\n *\n */\nexport interface IAutoEasingMethod<T extends InstanceIOValue> {\n  /** An easing method that should produce IDENTICAL values to the values of the gpu easing method using the exact same parameters */\n  cpu(start: T, end: T, t: number): T;\n  /** This adds a delay to the starting time of an easing change */\n  delay: number;\n  /** This is how long the easing method should last */\n  duration: number;\n  /**\n   * An easing method written in shader language that should produce IDENTICAL\n   * values to the values of the cpu easing method using the exact same parameters.\n   */\n  gpu: string;\n  /**\n   * This defines the looping style of the easing.\n   */\n  loop: AutoEasingLoopStyle;\n  /**\n   * This shall be the name of the easing method as it appears in the spu shader.\n   * BE WARNED: This name is used to dedup the methods created on the shader. So,\n   * if you use the same name as another ease method used on a single layer, you run\n   * the risk of one overriding the other with an undefined chance of who wins.\n   */\n  methodName: string;\n}\n\n// GPU easing methods! Written here because it's cleaner to write `` style strings\n// Against the left side of the editor\n\nconst immediateGPU = `\n$\\{easingMethod} {\n  return end;\n}\n`;\n\nconst linearGPU = `\n$\\{easingMethod} {\n  return (end - start) * t + start;\n}\n`;\n\nconst easeInQuadGPU = `\n$\\{easingMethod} {\n  float time = t * t;\n  return (end - start) * time + start;\n}\n`;\n\nconst easeOutQuadGPU = `\n$\\{easingMethod} {\n  float time = t * (2.0 - t);\n  return (end - start) * time + start;\n}\n`;\nconst easeInOutQuadGPU = `\n$\\{easingMethod} {\n  float time = t < 0.5 ? 2.0 * t * t : -1.0 + (4.0 - 2.0 * t) * t;\n  return (end - start) * time + start;\n}\n`;\nconst easeInCubicGPU = `\n$\\{easingMethod} {\n  float time = t * t * t;\n  return (end - start) * time + start;\n}\n`;\nconst easeOutCubicGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float time = t1 * t1 * t1 + 1.0;\n  return (end - start) * time + start;\n}\n`;\nconst easeInOutCubicGPU = `\n$\\{easingMethod} {\n  float time = t < 0.5 ? 4.0 * t * t * t : (t - 1.0) * (2.0 * t - 2.0) * (2.0 * t - 2.0) + 1.0;\n  return (end - start) * time + start;\n}\n`;\nconst easeInQuartGPU = `\n$\\{easingMethod} {\n  float time = t * t * t * t;\n  return (end - start) * time + start;\n}\n`;\nconst easeOutQuartGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float time = 1.0 - t1 * t1 * t1 * t1;\n  return (end - start) * time + start;\n}\n`;\nconst easeInOutQuartGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float time = t < 0.5 ? 8.0 * t * t * t * t : 1.0 - 8.0 * t1 * t1 * t1 * t1;\n  return (end - start) * time + start;\n}\n`;\nconst easeInQuintGPU = `\n$\\{easingMethod} {\n  float time = t * t * t * t * t;\n  return (end - start) * time + start;\n}\n`;\nconst easeOutQuintGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float time = 1.0 + t1 * t1 * t1 * t1 * t1;\n  return (end - start) * time + start;\n}\n`;\nconst easeInOutQuintGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float time = t < 0.5 ? 16.0 * t * t * t * t * t : 1.0 + 16.0 * t1 * t1 * t1 * t1 * t1;\n  return (end - start) * time + start;\n}\n`;\n\nconst easeOutElasticGPU = `\n$\\{easingMethod} {\n  float p = 0.3;\n  float time = pow(2.0, -10.0 * t) * sin((t - p / 4.0) * (2.0 * ${GPU_PI}) / p) + 1.0;\n  return (end - start) * time + start;\n}\n`;\n\nconst easeBackInGPU = `\n$\\{easingMethod} {\n  float time = t * t * t - t * 1.05 * sin(t * ${GPU_PI});\n  return (end - start) * time + start;\n}\n`;\n\nconst easeBackOutGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float a = 1.7;\n  float time = (t1 * t1 * ((a + 1.0) * t1 + a) + 1.0);\n  return (end - start) * time + start;\n}\n`;\n\nconst easeBackInOutGPU = `\n$\\{easingMethod} {\n  float a = 1.4;\n  float a1 = a * 1.525;\n  float t1 = t / 0.5;\n  float t2 = t1 - 2.0;\n  float time =\n    (t1 < 1.0) ? 0.5 * (t1 * t1 * (a1 + 1.0) * t1 - a1) :\n    0.5 * (t2 * t2 * ((a1 + 1.0) * t2 + a1) + 2.0)\n  ;\n\n  return (end - start) * time + start;\n}\n`;\n\nconst continuousSinusoidalGPU = (rate: number) => `\n$\\{easingMethod} {\n  $\\{T} direction = end - start;\n  $\\{T} amplitude = length(direction) * 2.0;\n  return start + direction * sin(time / ${rate}) * amplitude;\n}\n`;\n\n/**\n * Class of base AutoEasingMethods as well as helper constructs for making the methods.\n */\nexport class AutoEasingMethod<T extends InstanceIOValue>\n  implements IAutoEasingMethod<T> {\n  /**\n   * Autoeasing methods for linear easing\n   */\n  static immediate<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE,\n  ) {\n    return {\n      cpu: (start: T, end: T, t: number) => end,\n      delay,\n      duration,\n      gpu: immediateGPU,\n      loop,\n      methodName: 'immediate',\n    };\n  }\n\n  /**\n   * Autoeasing methods for linear easing\n   */\n  static linear<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE,\n  ) {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        const { add, scale, subtract } = VecMath(start);\n        t = clamp(t, 0, 1);\n        return add(scale(subtract(end, start), t), start);\n      },\n      delay,\n      duration,\n      gpu: linearGPU,\n      loop,\n      methodName: 'linear',\n    };\n  }\n\n  /**\n   * Auto easing for Accelerating to end\n   */\n  static easeInQuad<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE,\n  ) {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInQuadGPU,\n      loop,\n      methodName: 'easeInQuad',\n    };\n  }\n\n  /**\n   * Auto easing for decelerating to end\n   */\n  static easeOutQuad<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE,\n  ) {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t * (2 - t);\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeOutQuadGPU,\n      loop,\n      methodName: 'easeOutQuad',\n    };\n  }\n\n  /**\n   * Auto easing for Accelerate to mid, then decelerate to end\n   */\n  static easeInOutQuad<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE,\n  ) {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInOutQuadGPU,\n      loop,\n      methodName: 'easeInOutQuad',\n    };\n  }\n\n  /**\n   * Auto easing for Slower acceleration\n   */\n  static easeInCubic<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE,\n  ) {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInCubicGPU,\n      loop,\n      methodName: 'easeInCubic',\n    };\n  }\n\n  /**\n   * Auto easing for Slower deceleration\n   */\n  static easeOutCubic<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE,\n  ) {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = --t * t * t + 1;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeOutCubicGPU,\n      loop,\n      methodName: 'easeOutCubic',\n    };\n  }\n\n  /**\n   * Auto easing for Slower acceleration to mid, and slower deceleration to end\n   */\n  static easeInOutCubic<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE,\n  ) {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time =\n          t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInOutCubicGPU,\n      loop,\n      methodName: 'easeInOutCubic',\n    };\n  }\n\n  /**\n   * Auto easing for even Slower acceleration to end\n   */\n  static easeInQuart<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE,\n  ) {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInQuartGPU,\n      loop,\n      methodName: 'easeInQuart',\n    };\n  }\n\n  /**\n   * Auto easing for even Slower deceleration to end\n   */\n  static easeOutQuart<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE,\n  ) {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = 1 - --t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeOutQuartGPU,\n      loop,\n      methodName: 'easeOutQuart',\n    };\n  }\n\n  /**\n   * Auto easing for even Slower acceleration to mid, and even slower deceleration to end\n   */\n  static easeInOutQuart<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE,\n  ) {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInOutQuartGPU,\n      loop,\n      methodName: 'easeInOutQuart',\n    };\n  }\n\n  /**\n   * Auto easing for super slow accelerating to the end\n   */\n  static easeInQuint<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE,\n  ) {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t * t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInQuintGPU,\n      loop,\n      methodName: 'easeInQuint',\n    };\n  }\n\n  /**\n   * Auto easing for super slow decelerating to the end\n   */\n  static easeOutQuint<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE,\n  ) {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = 1 + --t * t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeOutQuintGPU,\n      loop,\n      methodName: 'easeOutQuint',\n    };\n  }\n\n  /**\n   * Auto easing for super slow accelerating to mid and super slow decelerating to the end\n   */\n  static easeInOutQuint<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE,\n  ) {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time =\n          t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInOutQuintGPU,\n      loop,\n      methodName: 'easeInOutQuint',\n    };\n  }\n\n  /**\n   * Auto easing for elastic effect\n   */\n  static easeOutElastic<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE,\n  ) {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const p = 0.3;\n        const time = pow(2, -10 * t) * sin((t - p / 4) * (2 * PI) / p) + 1;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeOutElasticGPU,\n      loop,\n      methodName: 'easeOutElastic',\n    };\n  }\n\n  /**\n   * Auto easing for retracting first then shooting to the end\n   */\n  static easeBackIn<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE,\n  ) {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const a = 1.05;\n        const time = t * t * t - t * a * sin(t * PI);\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeBackInGPU,\n      loop,\n      methodName: 'easeBackIn',\n    };\n  }\n\n  /**\n   * Auto easing for overshooting at the end\n   */\n  static easeBackOut<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE,\n  ) {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const a = 1.7;\n        const t1 = t - 1;\n        const time = t1 * t1 * ((a + 1) * t1 + a) + 1;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeBackOutGPU,\n      loop,\n      methodName: 'easeBackOut',\n    };\n  }\n\n  /**\n   * Auto easing for overshooting at the end\n   */\n  static easeBackInOut<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE,\n  ) {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const a = 1.7;\n        const a1 = a * 1.525;\n        const t1 = t / 0.5;\n        const t2 = t1 - 2;\n        const time =\n          t1 < 1\n            ? 0.5 * (t1 * t1 * (a1 + 1) * t1 - a1)\n            : 0.5 * (t2 * t2 * ((a1 + 1) * t2 + a1) + 2);\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeBackInOutGPU,\n      loop,\n      methodName: 'easeBackInOut',\n    };\n  }\n\n  /**\n   * This is an easing method that performs a sinusoidal wave where the amplitude is\n   * (start - end) * 2 and the wave starts at the start value.\n   *\n   * This is intended to work best with the CONTINUOUS loop style.\n   */\n  static continuousSinusoidal<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE,\n    rate = 1000,\n  ) {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        const { add, length, scale, subtract } = VecMath(start);\n        t = clamp(t, 0, 1);\n        const direction = subtract(end, start);\n        const amplitude = length(direction) * 2.0;\n        return add(start, scale(direction, sin(t / rate) * amplitude));\n      },\n      delay,\n      duration,\n      gpu: continuousSinusoidalGPU(rate),\n      loop,\n      methodName: 'repeatingSinusoidal',\n    };\n  }\n\n  /** The easing method for the cpu */\n  cpu: IAutoEasingMethod<T>['cpu'];\n  /** Time before a delay  */\n  delay: number = 0;\n  /** The time in ms is takes to complete the animation */\n  duration: number = 500;\n  /** The easing method on the GPU */\n  gpu: IAutoEasingMethod<T>['gpu'];\n  /** The looping style of the animation */\n  loop = AutoEasingLoopStyle.NONE;\n  /** Method name of the ease function on the gpu */\n  methodName: string;\n\n  constructor(\n    cpu: IAutoEasingMethod<T>['cpu'],\n    gpu: IAutoEasingMethod<T>['gpu'],\n    duration?: number,\n    method?: string,\n  ) {\n    this.cpu = cpu;\n    this.gpu = gpu;\n    this.duration = duration || 500;\n    this.methodName = method || 'easingMethod';\n  }\n}\n","import { Bounds } from '../primitives';\nimport { IProjection } from '../types';\nimport {\n  IDragMetrics,\n  IMouseInteraction,\n  IWheelMetrics,\n  MouseEventManager,\n} from './mouse-event-manager';\nimport { View } from './view';\n\n/**\n * Classes can extend this and override the methods to respond to events.\n */\nexport abstract class EventManager {\n  private mouseManager: MouseEventManager;\n\n  abstract handleMouseDown(e: IMouseInteraction, button: number): void;\n  abstract handleMouseUp(e: IMouseInteraction, button: number): void;\n  abstract handleMouseOver(e: IMouseInteraction): void;\n  abstract handleMouseOut(e: IMouseInteraction): void;\n  abstract handleMouseMove(e: IMouseInteraction): void;\n  abstract handleClick(e: IMouseInteraction, button: number): void;\n  abstract handleDrag(e: IMouseInteraction, drag: IDragMetrics): void;\n  abstract handleWheel(e: IMouseInteraction, wheel: IWheelMetrics): void;\n\n  /**\n   * This retrieves the projections for the view specified by the provided viewId.\n   */\n  getProjection(viewId: string): IProjection | null {\n    return this.mouseManager.getView(viewId);\n  }\n\n  /**\n   * This retrieves the actual view for the view specified by the provided viewId.\n   */\n  getView(viewId: string): View | null {\n    return (this.mouseManager && this.mouseManager.getView(viewId)) || null;\n  }\n\n  /**\n   * This retrieves the screen bounds for the view specified by the provided viewId.\n   */\n  getViewScreenBounds(viewId: string): Bounds | null {\n    const view = this.mouseManager.getView(viewId);\n\n    if (view) {\n      return view.screenBounds;\n    }\n\n    return null;\n  }\n\n  /**\n   * This is used internally which provides the parent MouseEventManager via the param mouseManager for this\n   * EventManager.\n   */\n  setMouseManager(mouseManager: MouseEventManager) {\n    this.mouseManager = mouseManager;\n  }\n}\n","import { IPoint } from '../primitives/point';\nimport { DataBounds } from '../util/data-bounds';\nimport { eventElementPosition, normalizeWheel } from '../util/mouse';\nimport { QuadTree } from '../util/quad-tree';\nimport { EventManager } from './event-manager';\nimport { Scene } from './scene';\nimport { View } from './view';\n\n// If a mouse up after a mouse down happens before this many milliseconds, a click gesture will happen\nconst VALID_CLICK_DELAY = 1e3;\n\n/**\n * Theorectically we can have a view be applied to multiple scenes. So to properly qualify a view\n * it must be paired with the scene it is rendering for.\n */\nexport type SceneView = {\n  /** This specifies the order the view is rendered in so we can pick the top most item when needed */\n  depth: number;\n  /** This is the scene the view is rendering for */\n  scene: Scene;\n  /** This is the view itself that our mouse will interact with */\n  view: View;\n  /** Gets the bounds of this view for this particular scene */\n  bounds?: DataBounds<SceneView>;\n};\n\n/**\n * This represents an interaction with the Layer Surface. It provides mouse metrics with how the mouse\n * interacts with the views below it.\n */\nexport interface IMouseInteraction {\n  /** When present indicates any relevant button codes used during a click event */\n  button?: number;\n  /** Metrics of the interaction in screen space */\n  screen: {\n    mouse: IPoint;\n  };\n  /** The View the mouse was 'down' on */\n  start?: {\n    mouse: IPoint;\n    view: View;\n  };\n  /** The View Immediately underneath the mouse */\n  target: {\n    mouse: IPoint;\n    view: View;\n  };\n  /** This is populated with ALL of the views underneath the mouse */\n  viewsUnderMouse: {\n    /** The mouse's location in the views coordinate space */\n    mouse: IPoint;\n    /** The view that is interacted with */\n    view: View;\n  }[];\n}\n\nexport interface IDragMetrics {\n  /** Drag metrics in screen space */\n  screen: {\n    /** The start position of the drag where the mouse down first occurred */\n    start: IPoint;\n    /** The previous position of the mouse last frame */\n    previous: IPoint;\n    /** The current position the mouse is located for this frame */\n    current: IPoint;\n    /** The change in position from last frame to this frame */\n    delta: IPoint;\n  };\n}\n\nexport interface IWheelMetrics {\n  wheel: [number, number];\n}\n\n/**\n * This is metrics measured between two touches\n */\nexport interface ITouchRelation {\n  /** The direction to the other touch */\n  direction: IPoint;\n  /** The current distance to the other touch */\n  distance: number;\n  /** The id of the other touch */\n  id: number;\n}\n\n/**\n * This is the information of a touch for a given frame.\n */\nexport interface ITouchFrame {\n  /** This is the location or delta location of the touch for this frame */\n  location: IPoint;\n  /** This is the direction from the start touch frame */\n  direction: IPoint;\n  /** This is the metrics or delta metrics of the touch relative to the other touches for the frame */\n  relations: Map<number, ITouchRelation>;\n}\n\nexport interface ITouchMetrics {\n  /** The starting metrics of the touch */\n  start: ITouchFrame;\n  /** The delta changes from previous event to the current event */\n  delta: ITouchFrame;\n  /** The current metrics of the touch event */\n  current: ITouchFrame;\n}\n\nfunction sortByDepth(a: DataBounds<SceneView>, b: DataBounds<SceneView>) {\n  return b.data.depth - a.data.depth;\n}\n\nfunction isDefined<T>(val: T | null | undefined): val is T {\n  return Boolean(val);\n}\n\n/**\n * This manages mouse events on the provided canvas and provides some higher level\n * interactions with the surface.\n */\nexport class MouseEventManager {\n  /** This is the canvas context we are rendering to */\n  context: HTMLCanvasElement;\n  /** This is list of Event Managers that receive the events and gestures which perform the nexessary actions */\n  controllers: EventManager[];\n  /** This is the quad tree for finding intersections with the mouse */\n  quadTree: QuadTree<DataBounds<SceneView>>;\n  /** This is the current list of views being managed */\n  views: SceneView[];\n\n  eventCleanup: [string, EventListenerOrEventListenerObject][] = [];\n\n  /**\n   * This flag is set when the system is waiting to render the elements to establish bounds.\n   * No Mouse interations will happen while this is set to true.\n   */\n  private _waitingForRender: boolean = true;\n\n  get waitingForRender() {\n    return this._waitingForRender;\n  }\n\n  set waitingForRender(val: boolean) {\n    this._waitingForRender = val;\n\n    // When we're no longer waiting for render to occur we update all of our views in the quad tree\n    if (!val) {\n      this.quadTree = new QuadTree(0, 0, 0, 0);\n      this.quadTree.addAll(this.views.map(v => v.bounds).filter(isDefined));\n    }\n  }\n\n  constructor(\n    canvas: HTMLCanvasElement,\n    views: SceneView[],\n    controllers: EventManager[],\n    handlesWheelEvents?: boolean,\n  ) {\n    this.context = canvas;\n    this.setViews(views);\n    this.setControllers(controllers);\n    this.addContextListeners(handlesWheelEvents);\n  }\n\n  /**\n   * This sets up the DOM events to listen to the events that are broadcasted by the canvas.\n   * These events are set up in such a way as to continue some events when the user\n   * drags the mouse off of the browser or off the canvas without releasing.\n   */\n  addContextListeners(handlesWheelEvents?: boolean) {\n    const element = this.context;\n    let startView: SceneView | undefined;\n    let startPosition: IPoint | undefined;\n\n    if (handlesWheelEvents) {\n      const wheelHandler = (event: MouseWheelEvent) => {\n        const mouse = eventElementPosition(event, element);\n        const interaction = this.makeInteraction(\n          mouse,\n          startPosition,\n          startView,\n        );\n        const wheel = this.makeWheel(event);\n\n        this.controllers.forEach(controller => {\n          controller.handleWheel(interaction, wheel);\n        });\n\n        event.stopPropagation();\n        event.preventDefault();\n      };\n\n      if ('onwheel' in element) {\n        element.onwheel = wheelHandler;\n      }\n\n      if ('addEventListener' in element) {\n        element.addEventListener('DOMMouseScroll', wheelHandler);\n        this.eventCleanup.push(['DOMMouseScroll', wheelHandler]);\n      }\n    }\n\n    element.onmouseleave = event => {\n      // No interactions while waiting for the render to update\n      if (this.waitingForRender) return;\n\n      const mouse = eventElementPosition(event, element);\n      const interaction = this.makeInteraction(mouse, startPosition, startView);\n\n      this.controllers.forEach(controller => {\n        controller.handleMouseOut(interaction);\n      });\n    };\n\n    element.onmousemove = event => {\n      // No interactions while waiting for the render to update\n      if (this.waitingForRender) return;\n\n      const mouse = eventElementPosition(event, element);\n      const interaction = this.makeInteraction(mouse, startPosition, startView);\n\n      this.controllers.forEach(controller => {\n        controller.handleMouseMove(interaction);\n      });\n    };\n\n    element.onmousedown = (event: MouseEvent) => {\n      // No interactions while waiting for the render to update\n      if (this.waitingForRender) return;\n\n      startPosition = eventElementPosition(event, element);\n      const downViews = this.getViewsUnderMouse(startPosition);\n      // While this is true, when mouse up happens, the click gesture will execute\n      let canClick = true;\n      const clickStartTime = Date.now();\n\n      // If no views under this view, then we just quick exit with no interactions\n      if (downViews.length <= 0) {\n        return;\n      }\n\n      startView = downViews[0].data;\n      const interaction = this.makeInteraction(\n        startPosition,\n        startPosition,\n        startView,\n      );\n      let currentPosition = startPosition;\n\n      this.controllers.forEach(controller => {\n        controller.handleMouseDown(interaction, event.button);\n      });\n\n      event.stopPropagation();\n\n      document.onmousemove = (event: MouseEvent) => {\n        const mouse = eventElementPosition(event, element);\n        const interaction = this.makeInteraction(\n          mouse,\n          startPosition,\n          startView,\n        );\n        const delta = {\n          x: mouse.x - currentPosition.x,\n          y: mouse.y - currentPosition.y,\n        };\n\n        const drag = this.makeDrag(\n          mouse,\n          startPosition || { x: 0, y: 0 },\n          currentPosition,\n          delta,\n        );\n        currentPosition = mouse;\n\n        this.controllers.forEach(controller => {\n          controller.handleDrag(interaction, drag);\n        });\n\n        // If we move after a mouse down, it's no longer a click\n        canClick = false;\n      };\n\n      document.onmouseup = (event: MouseEvent) => {\n        document.onmousemove = null;\n        document.onmouseup = null;\n        document.onmouseover = null;\n      };\n\n      document.onmouseover = (event: MouseEvent) => {\n        const mouse = eventElementPosition(event, element);\n        const interaction = this.makeInteraction(\n          mouse,\n          startPosition,\n          startView,\n        );\n\n        this.controllers.forEach(controller => {\n          controller.handleMouseOver(interaction);\n        });\n\n        event.stopPropagation();\n      };\n\n      element.onmouseup = (event: MouseEvent) => {\n        const mouse = eventElementPosition(event, element);\n        const interaction = this.makeInteraction(\n          mouse,\n          startPosition,\n          startView,\n        );\n\n        this.controllers.forEach(controller => {\n          controller.handleMouseUp(interaction, event.button);\n        });\n\n        // If we release the mouse before the valid click delay\n        if (canClick && Date.now() - clickStartTime < VALID_CLICK_DELAY) {\n          this.controllers.forEach(controller => {\n            controller.handleClick(interaction, event.button);\n          });\n        }\n      };\n\n      // Text will not be selected when it is being dragged\n      element.onselectstart = function() {\n        return false;\n      };\n    };\n\n    // Enable touch support\n    this.addTouchContextListeners();\n  }\n\n  addTouchContextListeners() {\n    const element = this.context;\n\n    element.ontouchstart = event => {\n      // TODO: This is the start work for the touch events. And this retains sentimental value.\n      // For (let i = 0, end = event.changedTouches.length; i < end; ++i) {\n      // TODO\n      // Const touch = event.changedTouches.item(i);\n      // CurrentTouches.set(touch.identifier, to);\n      // }\n    };\n\n    element.ontouchend = event => {\n      // TODO\n    };\n\n    element.ontouchmove = event => {\n      // TODO\n    };\n\n    element.ontouchcancel = event => {\n      // TODO\n    };\n  }\n\n  /**\n   * Retrieves the view for the provided id\n   */\n  getView(viewId: string): View | null {\n    for (const view of this.views) {\n      if (view.view.id === viewId) {\n        return view.view;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Retrieves the views underneath the mouse with the top most view as\n   * the first view in the list.\n   */\n  getViewsUnderMouse = (mouse: IPoint) => {\n    // Find the views the mouse has interacted with\n    const hitViews = this.quadTree.query(mouse);\n    // Sort them by depth\n    hitViews.sort(sortByDepth);\n\n    return hitViews;\n  }\n\n  /**\n   * This generates the metrics for a drag gesture.\n   */\n  makeDrag(\n    mouse: IPoint,\n    start: IPoint,\n    previous: IPoint,\n    delta: IPoint,\n  ): IDragMetrics {\n    return {\n      screen: {\n        current: mouse,\n        delta,\n        previous,\n        start,\n      },\n    };\n  }\n\n  /**\n   * This makes the metrics for interactions with the views.\n   */\n  makeInteraction(\n    mouse: IPoint,\n    start?: IPoint,\n    startView?: SceneView,\n  ): IMouseInteraction {\n    // Find the views the mouse has interacted with\n    const hitViews = this.getViewsUnderMouse(mouse);\n\n    return {\n      screen: {\n        mouse,\n      },\n      start: start &&\n        startView && {\n          mouse: startView.view.screenToView(mouse),\n          view: startView.view,\n        },\n      target: {\n        mouse: hitViews[0] && hitViews[0].data.view.screenToView(mouse),\n        view: hitViews[0] && hitViews[0].data.view,\n      },\n      viewsUnderMouse: hitViews.map(v => ({\n        mouse: v.data.view.screenToView(mouse),\n        view: v.data.view,\n      })),\n    };\n  }\n\n  makeWheel(event: MouseWheelEvent): IWheelMetrics {\n    const wheel = normalizeWheel(event);\n\n    return {\n      wheel: [wheel.x, wheel.y],\n    };\n  }\n\n  /**\n   * When the renderer is resized, we must reform our quad tree\n   */\n  resize = () => {\n    this._waitingForRender = true;\n  }\n\n  /**\n   * Sets the controllers to receive events from this manager.\n   */\n  setControllers(controllers: EventManager[]) {\n    this.controllers = controllers;\n\n    for (const controller of this.controllers) {\n      controller.setMouseManager(this);\n    }\n  }\n\n  /**\n   * Sets the views that gets queried for interactions.\n   */\n  setViews(views: SceneView[]) {\n    this.views = views;\n  }\n\n  destroy() {\n    delete this.quadTree;\n    this.context.onmousedown = null;\n    this.context.onmousemove = null;\n    this.context.onmouseleave = null;\n    this.context.onmousewheel = null;\n\n    this.eventCleanup.forEach(event => {\n      this.context.removeEventListener(event[0], event[1]);\n    });\n  }\n}\n","/**\n * This file is dedicted to the all important step of processing desired inputs from the layer\n * and coming up with automated generated uniforms and attributes that the shader's will need\n * in order to operate with the conveniences the library offers. This includes things such as\n * injecting camera projection uniforms, resource uniforms, animation adjustments etc etc.\n */\nimport * as Three from 'three';\nimport { Instance } from '../../instance-provider/instance';\nimport {\n  IAtlasInstanceAttribute,\n  IEasingInstanceAttribute,\n  IEasingProps,\n  IInstanceAttribute,\n  InstanceAttributeSize,\n  InstanceBlockIndex,\n  IUniform,\n  IUniformInternal,\n  IValueInstanceAttribute,\n  IVertexAttribute,\n  IVertexAttributeInternal,\n  PickType,\n  ShaderInjectionTarget,\n  UniformSize,\n  VertexAttributeSize,\n} from '../../types';\nimport { uid, Vec } from '../../util';\nimport { AutoEasingLoopStyle } from '../../util/auto-easing-method';\nimport { ILayerProps, IShaderInitialization, Layer } from '../layer';\nimport { getLayerBufferType, LayerBufferType } from './layer-buffer-type';\n\nconst { abs } = Math;\n\n/**\n * This is a lookup for a test vector for the provided size\n */\nconst testStartVector: { [key: number]: Vec } = {\n  [InstanceAttributeSize.ONE]: [1],\n  [InstanceAttributeSize.TWO]: [1, 2],\n  [InstanceAttributeSize.THREE]: [1, 2, 3],\n  [InstanceAttributeSize.FOUR]: [1, 2, 3, 4],\n};\n\n/**\n * This is a lookup for a test vector for the provided size\n */\nconst testEndVector: { [key: number]: Vec } = {\n  [InstanceAttributeSize.ONE]: [4],\n  [InstanceAttributeSize.TWO]: [4, 3],\n  [InstanceAttributeSize.THREE]: [4, 3, 2],\n  [InstanceAttributeSize.FOUR]: [4, 3, 2, 1],\n};\n\nconst emptyTexture = new Three.Texture();\n\nfunction isAtlasAttribute<T extends Instance>(\n  attr: any,\n): attr is IAtlasInstanceAttribute<T> {\n  return Boolean(attr) && attr.atlas;\n}\n\nfunction isEasingAttribute<T extends Instance>(\n  attr: any,\n): attr is IEasingInstanceAttribute<T> {\n  return Boolean(attr) && attr.easing && attr.size !== undefined;\n}\n\nfunction isInstanceAttribute<T extends Instance>(\n  attr: any,\n): attr is IInstanceAttribute<T> {\n  return Boolean(attr);\n}\n\nfunction isVertexAttribute(attr: any): attr is IVertexAttribute {\n  return Boolean(attr);\n}\n\nfunction isUniform(attr: any): attr is IUniform {\n  return Boolean(attr);\n}\n\nfunction toVertexAttributeInternal(\n  attribute: IVertexAttribute,\n): IVertexAttributeInternal {\n  return Object.assign({}, attribute, { materialAttribute: null });\n}\n\nfunction toUniformInternal(uniform: IUniform): IUniformInternal {\n  return Object.assign({}, uniform, { materialUniforms: [] });\n}\n\n/**\n * This finds a block and an index that can accomodate a provided size\n * @param attributes\n * @param seekingSize\n */\nfunction findEmptyBlock(\n  attributes: IInstanceAttribute<any>[],\n  seekingSize?: InstanceAttributeSize,\n): [number, InstanceBlockIndex] {\n  const usedBlocks: any[] = [];\n  let maxBlock = 0;\n  if (seekingSize === undefined) {\n    seekingSize = 1;\n  }\n\n  attributes.forEach(instanceAttribute => {\n    const block = instanceAttribute.block;\n    const index: number =\n      instanceAttribute.blockIndex === undefined\n        ? 0\n        : instanceAttribute.blockIndex;\n    const size: number =\n      instanceAttribute.size === undefined ? 0 : instanceAttribute.size;\n\n    maxBlock = Math.max(block, maxBlock);\n\n    while (usedBlocks.length - 1 < block) {\n      usedBlocks.push([false, false, false, false]);\n    }\n\n    for (let i = index - 1, end = index - 1 + size; i < end; ++i) {\n      usedBlocks[block][i] = true;\n    }\n  });\n\n  for (let x = 0; x < usedBlocks.length; x++) {\n    for (let ind = 0; ind < 4; ind++) {\n      if (usedBlocks[x][ind]) {\n        continue;\n      } else {\n        for (let breadth = ind; breadth < 4; breadth++) {\n          if (!usedBlocks[x][breadth]) {\n            if (breadth - ind + 1 === seekingSize) {\n              return [x, ind + 1];\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // If no block was ever found, then we take the max block detected and make\n  // A new block after it\n  return [maxBlock + 1, InstanceBlockIndex.ONE];\n}\n\n/**\n * This sorts the attributes such that the attributes that MUST be updated first are put to the top.\n * This is necessary for complex attributes like atlas and easing attributes who have other attributes\n * that have dependent behaviors based on their source attribute.\n */\nfunction sortNeedsUpdateFirstToTop<T extends Instance>(\n  a: IInstanceAttribute<T>,\n  b: IInstanceAttribute<T>,\n) {\n  if (a.atlas && !b.atlas) return -1;\n  if (a.easing && !b.easing) return -1;\n  return 1;\n}\n\n/**\n * This generates any uniforms needed for when a layer is requesting\n */\nfunction generateAtlasResourceUniforms<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(layer: Layer<T, U>, instanceAttributes: IInstanceAttribute<T>[]) {\n  // Retrieve all of the instance attributes that are atlas references\n  const atlasInstanceAttributes: IAtlasInstanceAttribute<T>[] = [];\n  // Key: The atlas uniform name requested\n  const requestedAtlasInjections = new Map<string, [boolean, boolean]>();\n\n  // Get the atlas requests that have unique names. We only need one uniform\n  // For a single unique provided name. We also must merge the requests for\n  // Vertex and fragment injections\n  instanceAttributes.forEach(\n    (attribute: IValueInstanceAttribute<T> | IAtlasInstanceAttribute<T>) => {\n      if (isAtlasAttribute(attribute)) {\n        // Auto set the size of the attribute. Attribute's that are a resource automatically\n        // Consume a size of four\n        attribute.size = InstanceAttributeSize.FOUR;\n        attribute.blockIndex = InstanceBlockIndex.ONE;\n        // Get the atlas resource uniform (sampler2D) injection targets. We default to only the\n        // Fragment shader as it's the most commonly used location for sampler2Ds\n        const injection: number =\n          attribute.atlas.shaderInjection || ShaderInjectionTarget.FRAGMENT;\n        // See if we already have an injection for the given injected uniform name for an atlas resource.\n        const injections = requestedAtlasInjections.get(attribute.atlas.name);\n\n        if (injections) {\n          requestedAtlasInjections.set(attribute.atlas.name, [\n            injections[0] ||\n              injection === ShaderInjectionTarget.VERTEX ||\n              injection === ShaderInjectionTarget.ALL,\n            injections[1] ||\n              injection === ShaderInjectionTarget.FRAGMENT ||\n              injection === ShaderInjectionTarget.ALL,\n          ]);\n        } else {\n          atlasInstanceAttributes.push(attribute);\n          requestedAtlasInjections.set(attribute.atlas.name, [\n            injection === ShaderInjectionTarget.VERTEX ||\n              injection === ShaderInjectionTarget.ALL,\n            injection === ShaderInjectionTarget.FRAGMENT ||\n              injection === ShaderInjectionTarget.ALL,\n          ]);\n        }\n      }\n    },\n  );\n\n  // Make uniforms for all of the unique atlas requests.\n  return atlasInstanceAttributes.map(instanceAttribute => {\n    let injection: ShaderInjectionTarget = ShaderInjectionTarget.FRAGMENT;\n\n    if (instanceAttribute.atlas) {\n      const injections = requestedAtlasInjections.get(\n        instanceAttribute.atlas.name,\n      );\n\n      if (injections) {\n        injection =\n          (injections[0] && injections[1] && ShaderInjectionTarget.ALL) ||\n          (injections[0] && !injections[1] && ShaderInjectionTarget.VERTEX) ||\n          (!injections[0] && injections[1] && ShaderInjectionTarget.FRAGMENT) ||\n          injection;\n      }\n    }\n\n    return {\n      name: instanceAttribute.atlas.name,\n      shaderInjection: injection,\n      size: UniformSize.ATLAS,\n      update: () =>\n        layer.resource.getAtlasTexture(instanceAttribute.atlas.key) ||\n        emptyTexture,\n    };\n  });\n}\n\n/**\n * This modifies the instance attributes in a way that produces enough attributes to handle the easing equations\n * being performed on the gpu.\n */\nfunction generateEasingAttributes<T extends Instance, U extends ILayerProps<T>>(\n  layer: Layer<T, U>,\n  instanceAttributes: IInstanceAttribute<T>[],\n) {\n  const easingAttributes: IEasingInstanceAttribute<T>[] = [];\n\n  // We gather all of the easing attributes first so we can modify the attribute array\n  // On next pass\n  for (const attribute of instanceAttributes) {\n    if (isEasingAttribute(attribute)) {\n      easingAttributes.push(attribute);\n    }\n  }\n\n  // Now loop through each easing attribute and generate attributes needed for the easing method\n  for (const attribute of easingAttributes) {\n    const { cpu: easing, loop } = attribute.easing;\n    const { name, size, update } = attribute;\n    const easingUID = uid();\n\n    // We keep this in a scope above the update as we utilize the fact that the attributes will update\n    // In order for a single instance to our advantage.\n    let easingValues: IEasingProps;\n\n    // Hijack the update from the attribute to a new update method which will\n    // Be able to interact with the values for the easing methodology\n    attribute.update = o => {\n      // We retrieve properties that we want to be dynamic from the easing equation\n      const { delay, duration } = attribute.easing;\n      // First get the value that is to be our new destination\n      const end = update(o);\n      const currentTime = layer.surface.frameMetrics.currentTime;\n\n      // Get the easing values specific to an instance\n      easingValues = o.easing.get(easingUID) || {\n        duration,\n        end,\n        start: end,\n        startTime: currentTime,\n      };\n\n      // Previous position time value\n      let timeValue = 1;\n\n      switch (loop) {\n        // Continuous means we start at 0 and let the time go to infinity\n        case AutoEasingLoopStyle.CONTINUOUS:\n          timeValue = (currentTime - easingValues.startTime) / duration;\n          break;\n\n        // Repeat means going from 0 to 1 then 0 to 1 etc etc\n        case AutoEasingLoopStyle.REPEAT:\n          timeValue = ((currentTime - easingValues.startTime) / duration) % 1;\n          break;\n\n        // Reflect means going from 0 to 1 then 1 to 0 then 0 to 1 etc etc\n        case AutoEasingLoopStyle.REFLECT:\n          const timePassed = (currentTime - easingValues.startTime) / duration;\n          // This is a triangle wave for an input\n          timeValue = abs((timePassed / 2.0) % 1 - 0.5) * 2.0;\n          break;\n\n        // No loop means just linear time\n        case AutoEasingLoopStyle.NONE:\n        default:\n          timeValue = (currentTime - easingValues.startTime) / duration;\n          break;\n      }\n\n      // Now get the value of where our instance currently is located this frame\n      easingValues.start = easing(\n        easingValues.start,\n        easingValues.end,\n        timeValue,\n      );\n      // Set the current time as the start time of our animation\n      easingValues.startTime = currentTime + delay;\n      // Set the provided value as our destination\n      easingValues.end = end;\n      // Make sure the instance contains the current easing values\n      o.easing.set(easingUID, easingValues);\n\n      return end;\n    };\n\n    // The attribute is going to generate some child attributes\n    attribute.childAttributes = [];\n\n    // Find a slot available for our new start value\n    let slot = findEmptyBlock(instanceAttributes, size);\n    const startAttr: IInstanceAttribute<T> = {\n      block: slot[0],\n      blockIndex: slot[1],\n      name: `_${name}_start`,\n      parentAttribute: attribute,\n      size,\n      update: o => easingValues.start,\n    };\n\n    attribute.childAttributes.push(startAttr);\n    instanceAttributes.push(startAttr);\n\n    // Find a slot available for our new start time\n    slot = findEmptyBlock(instanceAttributes, InstanceAttributeSize.ONE);\n    const startTimeAttr: IInstanceAttribute<T> = {\n      block: slot[0],\n      blockIndex: slot[1],\n      name: `_${name}_start_time`,\n      parentAttribute: attribute,\n      size: InstanceAttributeSize.ONE,\n      update: o => [easingValues.startTime],\n    };\n\n    attribute.childAttributes.push(startTimeAttr);\n    instanceAttributes.push(startTimeAttr);\n\n    // Find a slot available for our duration\n    slot = findEmptyBlock(instanceAttributes, InstanceAttributeSize.ONE);\n    const durationAttr: IInstanceAttribute<T> = {\n      block: slot[0],\n      blockIndex: slot[1],\n      name: `_${name}_duration`,\n      parentAttribute: attribute,\n      size: InstanceAttributeSize.ONE,\n      update: o => [easingValues.duration],\n    };\n\n    attribute.childAttributes.push(durationAttr);\n    instanceAttributes.push(durationAttr);\n  }\n}\n\nfunction generatePickingUniforms<T extends Instance, U extends ILayerProps<T>>(\n  layer: Layer<T, U>,\n): IUniform[] {\n  if (layer.picking.type === PickType.SINGLE) {\n    return [\n      {\n        name: 'pickingActive',\n        shaderInjection: ShaderInjectionTarget.ALL,\n        size: UniformSize.ONE,\n        update: () => [\n          layer.picking.currentPickMode === PickType.SINGLE ? 1.0 : 0.0,\n        ],\n      },\n    ];\n  }\n\n  return [];\n}\n\nfunction generatePickingAttributes<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(\n  layer: Layer<T, U>,\n  instanceAttributes: IInstanceAttribute<T>[],\n): IInstanceAttribute<T>[] {\n  if (layer.picking.type === PickType.SINGLE) {\n    // Find a compltely empty block within all instance attributes provided and injected\n    const emptyFillBlock = findEmptyBlock(\n      instanceAttributes,\n      InstanceAttributeSize.FOUR,\n    );\n\n    return [\n      {\n        block: emptyFillBlock[0],\n        blockIndex: emptyFillBlock[1],\n        name: '_pickingColor',\n        size: InstanceAttributeSize.FOUR,\n        update: o => {\n          // We start from white and move down so the colors are more visible\n          // For debugging\n          const color = 0xffffff - o.uid;\n\n          // Do bit maths do get float components out of the int color\n          return [\n            (color >> 16) / 255.0,\n            ((color & 0x00ff00) >> 8) / 255.0,\n            (color & 0x0000ff) / 255.0,\n            1,\n          ];\n        },\n      },\n    ];\n  }\n\n  return [];\n}\n\nfunction generateBaseUniforms<T extends Instance, U extends ILayerProps<T>>(\n  layer: Layer<T, U>,\n): IUniform[] {\n  return [\n    // This injects the projection matrix from the view camera\n    {\n      name: 'projection',\n      size: UniformSize.MATRIX4,\n      update: () => layer.view.viewCamera.baseCamera.projectionMatrix.elements,\n    },\n    // This injects the model view matrix from the view camera\n    {\n      name: 'modelView',\n      size: UniformSize.MATRIX4,\n      update: () => layer.view.viewCamera.baseCamera.matrix.elements,\n    },\n    // This injects the camera offset uniforms that need to be present for projecting in a more\n    // Chart centric style\n    {\n      name: 'cameraOffset',\n      size: UniformSize.THREE,\n      update: () => layer.view.camera.offset,\n    },\n    // This injects the camera scaling uniforms that need to be present for projecting in a more\n    // Chart centric style\n    {\n      name: 'cameraScale',\n      size: UniformSize.THREE,\n      update: () => layer.view.camera.scale,\n    },\n    // This injects the camera scaling uniforms that need to be present for projecting in a more\n    // Chart centric style\n    {\n      name: 'viewSize',\n      size: UniformSize.TWO,\n      update: () => [layer.view.viewBounds.width, layer.view.viewBounds.height],\n    },\n    // This injects the current layer's pixel ratio so pixel ratio dependent items can react to it\n    // Things like gl_PointSize will need this metric if not working in clip space\n    {\n      name: 'pixelRatio',\n      size: UniformSize.ONE,\n      update: () => [layer.view.pixelRatio],\n    },\n    // This will be the current frame's current time which is updated in the layer's surface draw call\n    {\n      name: 'currentTime',\n      size: UniformSize.ONE,\n      update: () => [layer.surface.frameMetrics.currentTime],\n    },\n  ];\n}\n\n/**\n * This creates the base instance attributes that are ALWAYS present\n */\nfunction generateBaseInstanceAttributes<T extends Instance>(\n  layer: Layer<T, any>,\n  instanceAttributes: IInstanceAttribute<T>[],\n): IInstanceAttribute<T>[] {\n  const fillBlock = findEmptyBlock(\n    instanceAttributes,\n    InstanceAttributeSize.ONE,\n  );\n\n  // This is injected so the system can control when an instance should not be rendered.\n  // This allows for holes to be in the buffer without having to correct them immediately\n  const activeAttribute: IInstanceAttribute<T> = {\n    block: fillBlock[0],\n    blockIndex: fillBlock[1],\n    name: '_active',\n    size: InstanceAttributeSize.ONE,\n    update: o => [o.active ? 1 : 0],\n  };\n\n  // Set the active attribute to the layer for quick reference\n  layer.activeAttribute = activeAttribute;\n\n  return [activeAttribute];\n}\n\n/**\n * This creates the base vertex attributes that are ALWAYS present\n */\nfunction generateBaseVertexAttributes<T extends Instance>(\n  layer: Layer<T, any>,\n): IVertexAttribute[] {\n  // Only the uniform buffering strategy requires instance information in it's vertex attributes\n  if (layer.bufferType === LayerBufferType.UNIFORM) {\n    return [\n      // We add an inherent instance attribute to our vertices so they can determine the instancing\n      // Data to retrieve.\n      {\n        name: 'instance',\n        size: VertexAttributeSize.ONE,\n        // We no op this as our geomtry generating routine will establish the values needed here\n        update: () => [0],\n      },\n    ];\n  }\n\n  return [];\n}\n\nfunction compareVec(a: Vec, b: Vec) {\n  if (a.length !== b.length) return false;\n\n  for (let i = 0, end = a.length; i < end; ++i) {\n    if (Math.round(a[i] * 100) / 100 !== Math.round(b[i] * 100) / 100) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction validateInstanceAttributes<T extends Instance>(\n  layer: Layer<T, any>,\n  instanceAttributes: IInstanceAttribute<T>[],\n  vertexAttributes: IVertexAttribute[],\n) {\n  instanceAttributes.forEach(attribute => {\n    if (attribute.name === undefined) {\n      console.warn(\n        'All instance attributes MUST have a name on Layer:',\n        layer.id,\n      );\n    }\n\n    if (\n      instanceAttributes.find(\n        attr => attr !== attribute && attr.name === attribute.name,\n      )\n    ) {\n      console.warn(\n        'An instance attribute can not have the same name used more than once:',\n        attribute.name,\n      );\n    }\n\n    if (vertexAttributes.find(attr => attr.name === attribute.name)) {\n      console.warn(\n        'An instance attribute and a vertex attribute in a layer can not share the same name:',\n        attribute.name,\n      );\n    }\n\n    if (attribute.easing && attribute.atlas) {\n      console.warn(\n        'An instance attribute can not have both easing and atlas properties. Undefined behavior will occur.',\n      );\n      console.warn(attribute);\n    }\n\n    if (!attribute.atlas) {\n      if (attribute.size === undefined) {\n        console.warn('An instance attribute requires the size to be defined.');\n        console.warn(attribute);\n      }\n    }\n\n    if (attribute.easing) {\n      if (attribute.size !== undefined) {\n        const testStart = testStartVector[attribute.size];\n        const testEnd = testEndVector[attribute.size];\n\n        let test = attribute.easing.cpu(testStart, testEnd, 0);\n        if (!compareVec(test, testStart)) {\n          console.warn(\n            'Auto Easing Validation Failed: using a time of 0 does not produce the start value',\n          );\n          console.warn('Start:', testStart, 'End:', testEnd, 'Result:', test);\n          console.warn(attribute);\n        }\n\n        test = attribute.easing.cpu(testStart, testEnd, 1);\n        if (!compareVec(test, testEnd)) {\n          console.warn(\n            'Auto Easing Validation Failed: using a time of 1 does not produce the end value',\n          );\n          console.warn('Start:', testStart, 'End:', testEnd, 'Result:', test);\n          console.warn(attribute);\n        }\n\n        test = attribute.easing.cpu(testStart, testEnd, -1);\n        if (!compareVec(test, testStart)) {\n          console.warn(\n            'Auto Easing Validation Failed: using a time of -1 does not produce the start value',\n          );\n          console.warn('Start:', testStart, 'End:', testEnd, 'Result:', test);\n          console.warn(attribute);\n        }\n\n        test = attribute.easing.cpu(testStart, testEnd, 2);\n        if (!compareVec(test, testEnd)) {\n          console.warn(\n            'Auto Easing Validation Failed: using a time of 2 does not produce the end value',\n          );\n          console.warn('Start:', testStart, 'End:', testEnd, 'Result:', test);\n          console.warn(attribute);\n        }\n      } else {\n        console.warn(\n          'An Instance Attribute with easing MUST have a size declared',\n        );\n      }\n    }\n  });\n}\n\n/**\n * This is the primary method that analyzes all shader IO and determines which elements needs to be automatically injected\n * into the shader.\n */\nexport function injectShaderIO<T extends Instance, U extends ILayerProps<T>>(\n  gl: WebGLRenderingContext,\n  layer: Layer<T, U>,\n  shaderIO: IShaderInitialization<T>,\n) {\n  // All of the instance attributes with nulls filtered out\n  const instanceAttributes = (shaderIO.instanceAttributes || []).filter(\n    isInstanceAttribute,\n  );\n  // All of the vertex attributes with nulls filtered out\n  const vertexAttributes = (shaderIO.vertexAttributes || []).filter(\n    isVertexAttribute,\n  );\n  // All of the uniforms with nulls filtered out\n  const uniforms = (shaderIO.uniforms || []).filter(isUniform);\n  // Do a validation pass of the attributes injected so we can provide feedback as to why things behave odd\n  validateInstanceAttributes(layer, instanceAttributes, vertexAttributes);\n  // Generates all of the attributes needed to make attributes automagically be eased when changed\n  generateEasingAttributes(layer, instanceAttributes);\n  // Get the uniforms needed to facilitate atlas resource requests if any exists\n  let addedUniforms: IUniform[] = uniforms.concat(\n    generateAtlasResourceUniforms(layer, instanceAttributes),\n  );\n  // These are the uniforms that should be present in the shader for basic operation\n  addedUniforms = addedUniforms.concat(generateBaseUniforms(layer));\n  // Add in uniforms for picking\n  addedUniforms = addedUniforms.concat(generatePickingUniforms(layer));\n  // Create the base instance attributes that must be present\n  let addedInstanceAttributes: IInstanceAttribute<\n    T\n  >[] = instanceAttributes.concat(\n    generateBaseInstanceAttributes(layer, instanceAttributes),\n  );\n  // Add in attributes for picking\n  addedInstanceAttributes = addedInstanceAttributes.concat(\n    generatePickingAttributes(layer, addedInstanceAttributes),\n  );\n\n  const allUniforms = addedUniforms.map(toUniformInternal);\n\n  const allInstanceAttributes = addedInstanceAttributes.sort(\n    sortNeedsUpdateFirstToTop,\n  );\n\n  // Before we make the vertex attributes, we must determine the buffering strategy our layer will utilize\n  getLayerBufferType(gl, layer, vertexAttributes, allInstanceAttributes);\n\n  // Create the base vertex attributes that must be present\n  const addedVertexAttributes: IVertexAttribute[] = generateBaseVertexAttributes(\n    layer,\n  );\n\n  // Aggregate all of the injected shaderIO with the layer's shaderIO\n  const allVertexAttributes: IVertexAttributeInternal[] = addedVertexAttributes\n    .concat(vertexAttributes || [])\n    .map(toVertexAttributeInternal);\n\n  return {\n    instanceAttributes: allInstanceAttributes,\n    uniforms: allUniforms,\n    vertexAttributes: allVertexAttributes,\n  };\n}\n","import * as Three from 'three';\nimport { IInstancingUniform, IUniform, UniformSize } from '../../types';\nimport { Instance } from '../../util';\nimport { ILayerProps, Layer } from '../layer';\n\nconst UNIFORM_SIZE_TO_MATERIAL_TYPE: { [key: number]: string } = {\n  [UniformSize.ONE]: 'f',\n  [UniformSize.TWO]: 'v2',\n  [UniformSize.THREE]: 'v3',\n  [UniformSize.FOUR]: 'v4',\n  [UniformSize.MATRIX3]: 'Matrix3fv',\n  [UniformSize.MATRIX4]: 'Matrix4fv',\n};\n\nconst DEFAULT_UNIFORM_VALUE: { [key: number]: number[] } = {\n  [UniformSize.ONE]: [0],\n  [UniformSize.TWO]: [0, 0],\n  [UniformSize.THREE]: [0, 0, 0],\n  [UniformSize.FOUR]: [0, 0, 0, 0],\n  [UniformSize.MATRIX3]: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [UniformSize.MATRIX4]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n};\n\nfunction toMaterialUniform(uniform: IUniform) {\n  return {\n    type: UNIFORM_SIZE_TO_MATERIAL_TYPE[uniform.size],\n    value: DEFAULT_UNIFORM_VALUE[uniform.size],\n  };\n}\n\nexport function generateLayerMaterial<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(\n  layer: Layer<T, U>,\n  vs: string,\n  fs: string,\n  layerUniforms: IUniform[],\n  instancingUniforms: IInstancingUniform[],\n): Three.RawShaderMaterial {\n  // We now need to establish the material for the layer\n  const materialParams: Three.ShaderMaterialParameters = layer.getMaterialOptions();\n  materialParams.vertexShader = vs;\n  materialParams.fragmentShader = fs;\n\n  // We must convert all of the uniforms to actual Three material initialization uniforms\n  materialParams.uniforms = {};\n\n  // Convert our non-instancing uniforms to our material uniforms\n  for (let i = 0, end = layerUniforms.length; i < end; ++i) {\n    const uniform = layerUniforms[i];\n    const materialUniform = toMaterialUniform(uniform);\n    materialParams.uniforms[uniform.name] = materialUniform;\n  }\n\n  // Add in the generated instancing uniforms\n  for (let i = 0, end = instancingUniforms.length; i < end; ++i) {\n    const generatedUniform = instancingUniforms[i];\n    materialParams.uniforms[generatedUniform.name] = {\n      type: generatedUniform.type,\n      value: generatedUniform.value,\n    };\n  }\n\n  return new Three.RawShaderMaterial(materialParams);\n}\n","import * as Three from 'three';\nimport { Instance } from '../../instance-provider/instance';\nimport {\n  IVertexAttribute,\n  IVertexAttributeInternal,\n  ShaderIOValue,\n} from '../../types';\nimport { Layer } from '../layer';\nimport { LayerBufferType } from './layer-buffer-type';\n\nfunction isNumberCluster(\n  val: ShaderIOValue,\n): val is\n  | [number]\n  | [number, number]\n  | [number, number, number]\n  | [number, number, number, number] {\n  return !Array.isArray(val[0]);\n}\n\nexport function generateLayerGeometry<T extends Instance>(\n  layer: Layer<T, any>,\n  maxInstancesPerBuffer: number,\n  vertexAttributes: IVertexAttributeInternal[],\n  vertexCount: number,\n): Three.BufferGeometry {\n  // Make the new buffers to be updated\n  const vertexBuffers = [];\n\n  if (layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE) {\n    maxInstancesPerBuffer = 1;\n  }\n\n  for (let i = 0, end = vertexAttributes.length; i < end; ++i) {\n    const attribute = vertexAttributes[i];\n    vertexBuffers.push(\n      new Float32Array(attribute.size * vertexCount * maxInstancesPerBuffer),\n    );\n  }\n\n  // Let's now fill in the baseline geometry with the instances we will be generating\n  // First we ask the layer for a single instance's buffer setup\n  const endk = vertexAttributes.length;\n  let buffer: Float32Array;\n  let attribute: IVertexAttribute;\n  let value: ShaderIOValue;\n  let formatError: boolean = false;\n\n  for (let i = 0, end = vertexCount; i < end; ++i) {\n    for (let k = 0; k < endk; ++k) {\n      attribute = vertexAttributes[k];\n      buffer = vertexBuffers[k];\n      value = attribute.update(i);\n\n      if (isNumberCluster(value)) {\n        for (\n          let j = i * attribute.size, endj = j + attribute.size, index = 0;\n          j < endj;\n          ++j, ++index\n        ) {\n          buffer[j] = value[index];\n        }\n      } else {\n        formatError = true;\n      }\n    }\n  }\n\n  if (formatError) {\n    console.warn(\n      'A vertex buffer updating method should not use arrays of arrays of numbers.',\n    );\n  }\n\n  // After getting the geometry for a single instance, we can now copy paste\n  // For subsequent instances using very fast FLoat32 methods\n  // NOTE: This is ONLY for certain buffering strategies. This is essentially a noop when the\n  // maxInstances is set to one.\n  for (let i = 0, end = vertexAttributes.length; i < end; ++i) {\n    const attribute = vertexAttributes[i];\n    const instanceSize = attribute.size * vertexCount;\n\n    // Copy the first buffer set into the rest of the buffer\n    for (let k = 1, endk = maxInstancesPerBuffer; k < endk; ++k) {\n      vertexBuffers[i].copyWithin(instanceSize * k, 0, instanceSize);\n    }\n  }\n\n  // Lastly, we make the instance attribute reflect correctly so each instance\n  // Can have varied information. This is only appropriate for the uniform buffer strategy\n  if (layer.bufferType === LayerBufferType.UNIFORM) {\n    const instancingBuffer = vertexBuffers[0];\n\n    for (let i = 0, end = maxInstancesPerBuffer; i < end; ++i) {\n      const instanceStartIndex = i * vertexCount;\n\n      for (let k = 0; k < vertexCount; ++k) {\n        instancingBuffer[k + instanceStartIndex] = i;\n      }\n    }\n  }\n\n  // Now we can generate the attributes and apply them to a geometry object\n  const geometry = new Three.BufferGeometry();\n\n  for (let i = 0, end = vertexAttributes.length; i < end; ++i) {\n    const attribute = vertexAttributes[i];\n    const materialAttribute = new Three.BufferAttribute(\n      vertexBuffers[i],\n      attribute.size,\n    );\n    attribute.materialAttribute = materialAttribute;\n    geometry.addAttribute(attribute.name, materialAttribute);\n  }\n\n  return geometry;\n}\n","import * as Three from 'three';\nimport { AbsolutePosition } from '../../primitives/absolute-position';\nimport { ChartCamera } from '../../util/chart-camera';\nimport { ViewCamera } from '../../util/view-camera';\nimport { Scene } from '../scene';\nimport { View } from '../view';\n\nexport interface IDefaultSceneElements {\n  /** Default chartting camera */\n  camera: ChartCamera;\n  /** Default scene for elements to be added into */\n  scene: Scene;\n  /** Default view scenes are rendered with when no other views are specified by the layer or the surface */\n  view: View;\n  /**\n   * The default view projection. Defaults to being an orthographic rendering with the origin at the\n   * top left of the canvas and the y-axis as +y going downward.\n   */\n  viewCamera: ViewCamera;\n  /** The default viewport that encompasses the entire canvas */\n  viewport: AbsolutePosition;\n}\n\n/**\n * This generates all of the cameras/views/scenes necessary for default viewing of elements.\n *\n * These defaults are required to ensure the following:\n *\n * - Orthographic view\n * - top left corner of the canvas is 0,0\n * - y axis is +y downward\n * - entire canvas is the viewport.\n */\nexport function generateDefaultScene(\n  context: WebGLRenderingContext,\n): IDefaultSceneElements {\n  // Generate a default view camera that is\n  // - Orthographic\n  // - (0, 0) is the top left of the canvas\n  // - the y axis is +y going downward\n  const height = context.canvas.height;\n  const width = context.canvas.width;\n  const aspectRatio = width / height;\n\n  const viewport = {\n    aspectRatio: aspectRatio,\n    bottom: -height / 2,\n    far: 10000000,\n    left: -width / 2,\n    near: -100,\n    right: width / 2,\n    top: height / 2,\n    viewSize: height,\n  };\n\n  const defaultCamera: ViewCamera = new ViewCamera();\n  defaultCamera.baseCamera = new Three.OrthographicCamera(\n    viewport.left,\n    viewport.right,\n    viewport.top,\n    viewport.bottom,\n    viewport.near,\n    viewport.far,\n  );\n\n  defaultCamera.baseCamera.scale.set(1.0, -1.0, 1.0);\n  defaultCamera.baseCamera.position.set(0.0, 0.0, -300.0);\n  defaultCamera.baseCamera.updateMatrixWorld(true);\n  defaultCamera.baseCamera.updateMatrix();\n\n  if (defaultCamera.baseCamera instanceof Three.OrthographicCamera) {\n    defaultCamera.baseCamera.updateProjectionMatrix();\n  }\n\n  // Generate a charting camera with all scales set to 1 and no offsets in any direction\n  const defaultChartCamera: ChartCamera = new ChartCamera();\n\n  // This is a viewport that covers the entire context\n  const defaultViewport = {\n    bottom: 0,\n    left: 0,\n    right: 0,\n    top: 0,\n  };\n\n  // Make a view using our defaults\n  const defaultView = new View({\n    camera: defaultChartCamera,\n    key: View.DEFAULT_VIEW_ID,\n    viewCamera: defaultCamera,\n    viewport: defaultViewport,\n  });\n\n  // Make a scene with our defaults\n  const defaultScene = new Scene({\n    key: Scene.DEFAULT_SCENE_ID,\n    views: [],\n  });\n\n  // Make sure the default view is a part of the default scene\n  defaultScene.addView(defaultView);\n\n  return {\n    camera: defaultChartCamera,\n    scene: defaultScene,\n    view: defaultView,\n    viewCamera: defaultCamera,\n    viewport: defaultViewport,\n  };\n}\n","import { Bounds } from '../primitives/bounds';\n\nexport class DataBounds<T> extends Bounds {\n  data: T;\n\n  static emptyBounds<T>() {\n    return new DataBounds<T>({\n      height: 0,\n      width: 0,\n      x: 0,\n      y: 0,\n    });\n  }\n}\n","export const templateVars = {\n  attributeFragments: 'attributeFragments',\n  attributes: 'attributes',\n  blocksPerInstance: 'blocksPerInstance',\n  easingMethod: 'easingMethod',\n  easingMethods: 'easingMethods',\n  instanceBlockCount: 'instanceBlockCount',\n  instanceDataBinaryTree: 'instanceDataBinaryTree',\n  instanceDataRetrieval: 'instanceDataRetrieval',\n  instanceDestructuring: 'instanceDestructuring',\n  instanceFragments: 'instanceFragments',\n  instanceUniformDeclarations: 'instanceUniformDeclarations',\n  layerUniforms: 'layerUniforms',\n  picking: 'picking',\n  projectionMethods: 'projectionMethods',\n  shader: 'shader',\n  shaderInput: 'shaderInput',\n  T: 'T',\n  vertexAttributes: 'vertexAttributes',\n};\n","export * from './label-layer';\nexport * from './label-instance';\n","import { Label } from '../../primitives/label';\nimport { LabelAtlasResource } from './label-atlas-resource';\n\nlet canvas: CanvasRenderingContext2D;\nconst MAX_FONT_SIZE = 50;\nconst { floor, max, min } = Math;\n\nexport interface ILabelRasterizedMetrics {\n  canvas: HTMLCanvasElement;\n  height: number;\n  width: number;\n}\n\nexport class LabelRasterizer {\n  /**\n   * This loops until our canvas context is available\n   */\n  static async awaitContext() {\n    // Iterate till the browser provides a valid canvas to render elements into\n    while (!canvas) {\n      this.getContext();\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n  }\n\n  /**\n   * This renders our label to a sizeable canvas where we loop over the pixel data to determine\n   * the bounds of the label.\n   *\n   * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n   *                                 the size to be rendered to the texture to the size the label\n   *                                 should be within world space.\n   * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n   */\n  static calculateLabelSize(\n    resource: LabelAtlasResource,\n    sampleScale?: number,\n    calculateTexture?: boolean,\n  ) {\n    // If a max width is specified, then we must render and determine the potentially truncated text of the\n    // Label. We can do a binary search for the correct truncated label size.\n    if (calculateTexture) {\n      this.calculateTrucatedText(resource);\n    }\n\n    /** Get the label properties for rasterizing */\n    const label = resource.label;\n    // Get the scaling of the sample base\n    const sampleScaling = sampleScale || resource.sampleScale || 1.0;\n    // Draw our label to a canvas\n    this.drawLabel(label, resource.truncatedText, canvas, sampleScaling);\n    // Measure the contents of the canvas\n    const { minX, minY, maxX, maxY } = this.measureContents(canvas);\n\n    // Make sure the rasterization object is initialized\n    resource.rasterization = resource.rasterization || {\n      texture: { height: 0, width: 0 },\n      world: { height: 0, width: 0 },\n    };\n\n    // When a forced sampling is present, it calculates that as the world space\n    if (!calculateTexture) {\n      // Update the calculated texture size.\n      resource.rasterization.world = {\n        height: maxY - minY,\n        width: maxX - minX,\n      };\n    }\n\n    // Otherwise we first calculate the texture rasterization for the label\n    else {\n      // Update the calculated texture size.\n      resource.rasterization.texture = {\n        height: maxY - minY,\n        width: maxX - minX,\n      };\n\n      resource.rasterization.canvas = this.createCroppedCanvas(\n        resource,\n        minY,\n        minX,\n      );\n      this.calculateLabelSize(resource, 1.0, false);\n    }\n  }\n\n  /**\n   * This determines what the truncated text of the label will be. If there is no truncation\n   * then the truncated text === the label's text\n   */\n  static calculateTrucatedText(resource: LabelAtlasResource) {\n    const label = resource.label;\n    const maxWidth = label.maxWidth;\n\n    // If the label has no max width, then there will be no truncation\n    if (!maxWidth) {\n      resource.truncatedText = label.text;\n      return;\n    }\n\n    // We now do an initial rendering of the label as it will appear in world space\n    this.drawLabel(label, label.text, canvas, 1);\n    // We measure the contents of the rendered item to see if it violates the maxWidth\n    const firstTest = this.measureContents(canvas);\n\n    // If we're within spec, we do not need to truncate\n    if (firstTest.maxX - firstTest.minX <= maxWidth) {\n      resource.truncatedText = label.text;\n      return;\n    }\n\n    // At this point we need to binary search through chopping off letters to find a string\n    // That will fit within max width\n    const text = label.text;\n    let left = 0;\n    let right = text.length;\n    let cursor = floor((right - left) / 2.0);\n    let safety = 0;\n    const safetyMax = 50;\n\n    // Loop to perform the binary search\n    while (right > left && cursor !== 0 && safety++ < safetyMax) {\n      // Draw and measure\n      this.drawLabel(label, `${text.substr(0, cursor)}...`, canvas, 1);\n      const { minX, maxX } = this.measureContents(canvas);\n\n      // If we pass then we move left to cursor to make the test string longer\n      if (maxX - minX <= maxWidth) {\n        left = cursor;\n      }\n\n      // If we fail, we move right to cursor to make the test string shorter\n      else {\n        right = cursor;\n      }\n\n      // Get our next cursor position\n      const nextCursor = floor((right - left) / 2.0) + left;\n\n      // If the next cursor is the same as cursor, then we're done searching\n      if (nextCursor === cursor) {\n        break;\n      }\n\n      // Move our cursor\n      cursor = nextCursor;\n    }\n\n    // If cursor is zero, nothing passed and our truncation is just ellipses\n    if (cursor === 0) {\n      resource.truncatedText = '...';\n    }\n\n    // Otherwise we get the string that passes and use that as our truncated text\n    else {\n      resource.truncatedText = `${text.substr(0, cursor)}...`;\n    }\n  }\n\n  /**\n   * This generates a canvas that has the cropped version of the label where the label\n   * fits neatly in the canvas object.\n   */\n  static createCroppedCanvas(\n    resource: LabelAtlasResource,\n    top: number,\n    left: number,\n  ) {\n    const cropped = document.createElement('canvas');\n    const context = cropped.getContext('2d');\n\n    if (context) {\n      const texture = resource.rasterization.texture;\n      cropped.width = texture.width;\n      cropped.height = texture.height;\n      context.imageSmoothingEnabled = false;\n\n      // Draw just the region the label appears into the canvas\n      context.drawImage(\n        canvas.canvas,\n        left,\n        top,\n        texture.width,\n        texture.height,\n        0,\n        0,\n        texture.width,\n        texture.height,\n      );\n    } else {\n      console.warn(\n        'Could not create a canvas 2d context to generate a label\\'s cropped image.',\n      );\n    }\n\n    return cropped;\n  }\n\n  /**\n   * This actually renders a string to a canvas context using a label's settings\n   */\n  static drawLabel(\n    label: Label,\n    text: string,\n    canvas: CanvasRenderingContext2D,\n    sampleScaling: number,\n  ) {\n    // Get the font size we will rasterize with\n    const fontSize = this.getLabelRasterizationFontSize(label, sampleScaling);\n    // Set the color of the label to white so we know what color to look for\n    canvas.fillStyle = 'white';\n    // Set the font to the canvas\n    canvas.font = this.makeCSSFont(label, sampleScaling);\n    // We will use the canvas measuring tool to give us a baseline for how wide\n    // The label will be. We add the font size to the width for the padding needed to ensure\n    // The entirety of the text is placed on the canvas.\n    canvas.canvas.width = canvas.measureText(label.text).width + fontSize;\n    // Make our test area the font size with one extra level of the font size\n    // For padding.\n    canvas.canvas.height = fontSize * 2.0;\n    // After adjusting the canvas dimensions we must re-set the font metrics\n    // Set the color of the label to white so we know what color to look for\n    canvas.fillStyle = 'white';\n    // Set the font to the canvas\n    canvas.font = this.makeCSSFont(label, sampleScaling);\n    // Render the text into our canvas for calculating\n    canvas.fillText(text, fontSize / 2.0, fontSize / 4.0 + fontSize);\n  }\n\n  /**\n   * Attempts to populate the 'canvas' context for rendering labels offscreen.\n   */\n  static getContext() {\n    if (!canvas) {\n      const potentialCanvas = document.createElement('canvas').getContext('2d');\n\n      if (potentialCanvas) {\n        canvas = potentialCanvas;\n      }\n\n      return potentialCanvas;\n    }\n\n    return canvas;\n  }\n\n  /**\n   * This retrieves the font size that will be used when rasterizing the label. This takes into\n   * account whether the label is requesting super sampling be present for the rendering.\n   */\n  static getLabelRasterizationFontSize(label: Label, sampleScale: number) {\n    return label.fontSize * sampleScale;\n  }\n\n  /**\n   * Generates the CSS font string based on the label's values\n   */\n  static makeCSSFont(label: Label, sampleScale: number) {\n    return `${label.fontWeight} ${this.getLabelRasterizationFontSize(\n      label,\n      sampleScale,\n    )}px ${label.fontFamily}`;\n  }\n\n  /**\n   * This measures the contents of what is inside the canvas assumming the rendered values are only white\n   */\n  static measureContents(canvas: CanvasRenderingContext2D) {\n    const { width, height } = canvas.canvas;\n    const imageData = canvas.getImageData(0, 0, width, height).data;\n    let r;\n\n    let minY = Number.MAX_SAFE_INTEGER;\n    let minX = Number.MAX_SAFE_INTEGER;\n    let maxX = Number.MIN_SAFE_INTEGER;\n    let maxY = Number.MIN_SAFE_INTEGER;\n\n    for (let i = 0; i < width; ++i) {\n      for (let k = 0; k < height; ++k) {\n        const redIndex = k * (width * 4) + i * 4;\n        r = imageData[redIndex];\n\n        if (r > 0.0) {\n          minY = min(minY, k);\n          minX = min(minX, i);\n          maxX = max(maxX, i);\n          maxY = max(maxY, k);\n        }\n      }\n    }\n\n    // The identified pixel needs to be encased and not a direct target\n    minY -= 1;\n    maxY += 2;\n    maxX += 2;\n    minX -= 1;\n\n    minY = max(minY, 0);\n    minX = max(minX, 0);\n\n    return { minX, minY, maxX, maxY };\n  }\n\n  /**\n   * Performs the rendering of the label\n   */\n  static async render(\n    resource: LabelAtlasResource,\n  ): Promise<LabelAtlasResource> {\n    // Make sure our canvas object is ready for rendering\n    await this.awaitContext();\n\n    // Validate the label's input\n    if (resource.label.fontSize > MAX_FONT_SIZE) {\n      console.warn('Labels only support font sizes up to 50');\n      return resource;\n    }\n\n    // Calculate all of the label metrics and generate a canvas on the label that can\n    // Be rendered to the canvas.\n    this.calculateLabelSize(resource, resource.sampleScale, true);\n\n    return resource;\n  }\n\n  /**\n   * Performs the rendering of the label\n   */\n  static renderSync(resource: LabelAtlasResource): LabelAtlasResource {\n    // Ensure our offscreen canvas is prepped\n    this.getContext();\n\n    if (!canvas) {\n      console.warn(\n        'Can not render a label synchronously without the canvas context being ready.',\n      );\n      return resource;\n    }\n\n    // Validate the label's input\n    if (resource.label.fontSize > MAX_FONT_SIZE) {\n      console.warn('Labels only support font sizes up to 50');\n      return resource;\n    }\n\n    // Calculate all of the label metrics and generate a canvas on the label that can\n    // Be rendered to the canvas.\n    this.calculateLabelSize(resource, resource.sampleScale, true);\n\n    return resource;\n  }\n}\n","import { Image } from '../../primitives/image';\nimport { BaseAtlasResource } from './base-atlas-resource';\n\nexport class ImageAtlasResource extends BaseAtlasResource {\n  /** This is the image to be loaded into the atlas */\n  image: Image;\n\n  constructor(image: Image) {\n    super();\n    this.image = image;\n  }\n}\n","import { Color } from '../../primitives/color';\nimport { ColorAtlasResource } from './color-atlas-resource';\n\n// When ratserized to the image, this determines the size of the square rendered to the atlas.\nconst COLOR_RASTERIZATION_SIZE = 2;\n\n/**\n * Static class for rasterizing a color to a canvas object\n */\nexport class ColorRasterizer {\n  /**\n   * This loops until our canvas context is available\n   */\n  static async awaitContext(canvas: HTMLCanvasElement) {\n    // Iterate till the browser provides a valid canvas to render elements into\n    for (\n      let c = canvas.getContext('2d'), limit = 0;\n      !Boolean(c) && limit < 100;\n      c = canvas.getContext('2d'), ++limit\n    ) {\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n  }\n\n  /**\n   * Generates the CSS string version of the color\n   */\n  static makeCSS(color: Color) {\n    return `rgba(${Math.floor(color.r * 256)}, ${Math.floor(\n      color.g * 256,\n    )}, ${Math.floor(color.b * 256)}, ${color.opacity})`;\n  }\n\n  static async render(resource: ColorAtlasResource) {\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n\n    await this.awaitContext(canvas);\n\n    if (context) {\n      canvas.width = COLOR_RASTERIZATION_SIZE;\n      canvas.height = COLOR_RASTERIZATION_SIZE;\n      context.imageSmoothingEnabled = false;\n      context.fillStyle = this.makeCSS(resource.color);\n\n      // Draw the color to the fill space\n      context.fillRect(\n        0,\n        0,\n        COLOR_RASTERIZATION_SIZE,\n        COLOR_RASTERIZATION_SIZE,\n      );\n      // Update the resource with the rasterization\n      resource.rasterization.canvas = canvas;\n    } else {\n      console.warn(\n        'Could not create a canvas 2d context to generate a color for rasterization.',\n      );\n    }\n\n    return resource;\n  }\n}\n","import { Color } from '../../primitives/color';\nimport { BaseAtlasResource } from './base-atlas-resource';\n\nexport class ColorAtlasResource extends BaseAtlasResource {\n  /** This is the color to be loaded into the atlas */\n  color: Color;\n\n  constructor(color: Color) {\n    super();\n    this.color = color;\n  }\n}\n","import * as Three from 'three';\nimport { IPoint } from '../../primitives/point';\n\n/**\n * Defines a texture that is located on an atlas\n */\nexport class SubTexture {\n  /** Stores the aspect ratio of the image for quick reference */\n  aspectRatio: number = 1.0;\n  /** The id of the atlas this texture is located on */\n  atlasReferenceID: string = '';\n  /** This is the actual texture of the atlas this resource is located on */\n  atlasTexture: Three.Texture | null = null;\n  /** This is the top left UV coordinate of the sub texture on the atlas */\n  atlasTL: IPoint = { x: 0, y: 0 };\n  /** This is the top right UV coordinate of the sub texture on the atlas */\n  atlasTR: IPoint = { x: 0, y: 0 };\n  /** This is the bottom left UV coordinate of the sub texture on the atlas */\n  atlasBL: IPoint = { x: 0, y: 0 };\n  /** This is the bottom right UV coordinate of the sub texture on the atlas */\n  atlasBR: IPoint = { x: 0, y: 0 };\n  /** This is the normalized width of the sub texture on the atlas */\n  widthOnAtlas: number = 0;\n  /** This is the normalized height of the sub texture on the atlas */\n  heightOnAtlas: number = 0;\n  /** This flag is set to false when the underlying texture is no longer valid */\n  isValid: boolean = false;\n  /** Width in pixels of the image on the atlas */\n  pixelWidth: number = 0;\n  /** Height in pixels of the image on the atlas */\n  pixelHeight: number = 0;\n}\n","import * as Three from 'three';\nimport {\n  IdentifyByKey,\n  IdentifyByKeyOptions,\n} from '../../util/identify-by-key';\nimport { AtlasManager, AtlasResource } from './atlas-manager';\nimport { PackNode } from './pack-node';\nimport { SubTexture } from './sub-texture';\n\n/**\n * These are valid atlas sizes available. We force a power of 2 to be utilized.\n * We do not allow crazy large sizes as browsers have very real caps on resources.\n * This helps implementations be a little smarter about what they are using. Future\n * versions may increase this number as GPUs improve and standards allow greater\n * flexibility.\n */\nexport enum AtlasSize {\n  _2 = 0x01 << 1,\n  _4 = 0x01 << 2,\n  _8 = 0x01 << 3,\n  _16 = 0x01 << 4,\n  _32 = 0x01 << 5,\n  _64 = 0x01 << 6,\n  _128 = 0x01 << 7,\n  _256 = 0x01 << 8,\n  _512 = 0x01 << 9,\n  _1024 = 0x01 << 10,\n  _2048 = 0x01 << 11,\n  _4096 = 0x01 << 12,\n}\n\nexport interface IAtlasOptions extends IdentifyByKeyOptions {\n  /** This is the height of the texture */\n  height: AtlasSize;\n  /** This is the width of the atlas */\n  width: AtlasSize;\n  /**\n   * This applies any desired settings to the Threejs texture as desired.\n   * Some noteable defaults this system sets:\n   *  - generateMipMaps is false and\n   *  - premultiply alpha is true.\n   */\n  textureSettings?: Partial<Three.Texture>;\n}\n\n/**\n * This represents a single Texture on the gpu that is composed of several smaller textures\n * as a 'look up'.\n */\nexport class Atlas extends IdentifyByKey {\n  /** Stores the size of the atlas texture */\n  height: AtlasSize;\n  /** This is the parent manager of the atlas */\n  manager: AtlasManager;\n  /** This is the packing of the  */\n  packing: PackNode;\n  /** This is the actual texture object that represents the atlas on the GPU */\n  texture: Three.Texture;\n  /** These are the applied settings to our texture */\n  textureSettings?: Partial<Three.Texture>;\n  /**\n   * This is all of the resources associated with this atlas. The boolean flag indicates if the resource\n   * is flagged for removal. When set to false, the resource is no longer valid and can be removed from\n   * the atlas at any given moment.\n   */\n  validResources = new Map<AtlasResource, boolean>();\n  /** Stores the size of the atlas texture */\n  width: AtlasSize;\n\n  constructor(options: IAtlasOptions) {\n    super(options);\n    const canvas = document.createElement('canvas');\n    this.width = canvas.width = options.width;\n    this.height = canvas.height = options.height;\n    this.textureSettings = options.textureSettings;\n\n    // Set up the packing for this atlas\n    this.packing = new PackNode(0, 0, options.width, options.height);\n    // Make sure the texture is started and updated\n    this.updateTexture(canvas);\n  }\n\n  /**\n   * This invalidates the SubTexture of an atlas resource.\n   */\n  private invalidateResource(resource: AtlasResource) {\n    const zero = { x: 0, y: 0 };\n    resource.texture.aspectRatio = 1;\n    resource.texture.atlasBL = zero;\n    resource.texture.atlasBR = zero;\n    resource.texture.atlasTL = zero;\n    resource.texture.atlasTR = zero;\n    resource.texture.atlasReferenceID = '';\n    resource.texture.pixelWidth = 0;\n    resource.texture.pixelHeight = 0;\n    resource.texture.isValid = false;\n  }\n\n  /**\n   * Sets the parent manager of this atlas\n   */\n  setManager(manager: AtlasManager) {\n    this.manager = manager;\n  }\n\n  /**\n   * Adds a resource to this atlas AND ensures the resource is flagged valid for use.\n   *\n   * @return {boolean} True if the resource successfully registered\n   */\n  registerResource(resource: AtlasResource) {\n    if (this.validResources.get(resource) === undefined) {\n      if (!resource.texture || !resource.texture.isValid) {\n        if (!resource.texture) {\n          resource.texture = new SubTexture();\n        }\n\n        resource.texture.isValid = true;\n        this.validResources.set(resource, true);\n\n        return true;\n      } else {\n        console.warn(\n          'Atlas Error:',\n          this.id,\n          'Attempted to add a resource to an Atlas that is already a valid resource on another atlas.',\n          'Consider Creating a new resource to be loaded into this particular atlas.',\n          'Resource:',\n          resource,\n        );\n      }\n    } else {\n      console.warn(\n        'Atlas Error:',\n        this.id,\n        'A resource was trying to be added to the atlas that has already been added before.',\n        'Consider creating a new resource to indicate what you want loaded to the atlas',\n        'Resource:',\n        resource,\n      );\n    }\n\n    return false;\n  }\n\n  /**\n   * This flags a resource from removal from an atlas.\n   *\n   * NOTE: This does not immediately clear the resource fromt he atlas, nor does it even guarantee\n   * the resource will be cleared from the atlas for a while. It merely suggests the resource be removed\n   * and makes the SubTexture invalid. It could be a long while before the atlas gets regnerated and repacked\n   * to actually reflect the resource not existing on the atlas.\n   */\n  removeResource(resource: AtlasResource) {\n    if (this.validResources.get(resource)) {\n      this.validResources.set(resource, false);\n      this.invalidateResource(resource);\n    } else {\n      console.warn(\n        'Atlas Error:',\n        this.id,\n        'Attempted to remove a resource that does not exist on this atlas.',\n        'or the resource was already considered invalidated on this atlas.',\n        'Resource:',\n        resource,\n      );\n    }\n  }\n\n  /**\n   * TODO:\n   * This performs the currently best known way to update a texture.\n   *\n   * This is the current best attempt at updating the atlas which is junk as it destroys the old texture\n   * And makes a new one. We REALLY should be just subTexture2D updating the texture, but Three makes that really\n   * Difficult\n   */\n  updateTexture(canvas?: HTMLCanvasElement) {\n    if (this.texture) {\n      const redoneCanvas: HTMLCanvasElement = this.texture.image;\n      this.texture.dispose();\n      this.texture = new Three.Texture(redoneCanvas);\n    } else {\n      this.texture = new Three.Texture(canvas);\n    }\n\n    // Apply any relevant options to the texture desired to be set\n    this.texture.generateMipmaps = true;\n    this.texture.premultiplyAlpha = true;\n    this.textureSettings && Object.assign(this.texture, this.textureSettings);\n    this.texture.needsUpdate = true;\n  }\n\n  /**\n   * This frees up all the resources down to the GPU related to this atlas. It also\n   * loops through every resource and invalidates the texturing information within\n   * them so subsequent accidental renders will appear as a single color rather than\n   * an artifacted element.\n   */\n  destroy() {\n    this.texture.dispose();\n    this.validResources.forEach((isValid, resource) => {\n      this.invalidateResource(resource);\n    });\n  }\n}\n","export * from './image-layer';\nexport * from './image-instance';\n","import { Instance, InstanceDiff } from '../../../instance-provider';\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  IBufferLocationGroup,\n} from '../buffer-manager-base';\nimport { IInstanceDiffManagerTarget } from '../instance-diff-manager';\n\n/**\n * Base requirements for handling diffs from a layer.\n */\nexport abstract class BaseDiffProcessor<T extends Instance> {\n  layer: IInstanceDiffManagerTarget<T>;\n  bufferManager: BufferManagerBase<T, IBufferLocation>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>,\n  ) {\n    this.layer = layer;\n    this.bufferManager = bufferManager;\n  }\n\n  /** Perform an 'add' operation for the instance's buffer */\n  abstract addInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocation?: IBufferLocation | IBufferLocationGroup<IBufferLocation>,\n  ): void;\n  /** Perform a 'change' operation for the instance's buffer */\n  abstract changeInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocation?: IBufferLocation | IBufferLocationGroup<IBufferLocation>,\n  ): void;\n  /** Perform a 'remove' operation for the instance's buffer */\n  abstract removeInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocation?: IBufferLocation | IBufferLocationGroup<IBufferLocation>,\n  ): void;\n\n  /**\n   * This indicates all changes have been applied, this allows the processor to finalize buffer updates\n   */\n  abstract commit(): void;\n  /**\n   * This will be called with the changes that WILL be processed. This allows this processor to make extra judgement calls on\n   * how it will process the changes and let's it optimize itself before changes are actually processed. An example optimization:\n   *\n   * Buffers have an update range we can adjust so only a piece of the buffer is updated. However, calculating that range causes\n   * overhead to calculate the affected range. So, if we have mass changes happening for major sections of the buffer (number of\n   * changes approaches some large percentage of the instances supported by the buffer), then it would be more efficient just to\n   * update the entire buffer rather than discover the portion needing updating.\n   */\n  abstract incomingChangeList(changes: InstanceDiff<T>[]): void;\n}\n","const INSTANCE_UNIFORM_ATTRIBUTE_PREFIX = 'u';\n\nexport function makeInstanceUniformNameArray() {\n  return `instanceData`;\n}\n\nexport function makeInstanceUniformNameTree(index: number) {\n  return `${INSTANCE_UNIFORM_ATTRIBUTE_PREFIX}${index.toString(31)}`;\n}\n","import { IInstanceAttribute } from '../../types';\nimport { Instance } from '../../util';\n\nexport function instanceAttributeShaderName<T extends Instance>(\n  attribute: IInstanceAttribute<T>,\n) {\n  if (attribute.easing) {\n    return `_${attribute.name}_end`;\n  } else {\n    return attribute.name;\n  }\n}\n","export function getProgramInfo(gl: WebGLRenderingContext, program: any) {\n  const result = {\n      attributeCount: 0,\n      attributes: new Array(),\n      uniformCount: 0,\n      uniforms: new Array(),\n    },\n    activeUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS),\n    activeAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n  // Taken from the WebGl spec:\n  // Http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14\n  const enums: { [key: number]: string } = {\n    0x8b50: 'FLOAT_VEC2',\n    0x8b51: 'FLOAT_VEC3',\n    0x8b52: 'FLOAT_VEC4',\n    0x8b53: 'INT_VEC2',\n    0x8b54: 'INT_VEC3',\n    0x8b55: 'INT_VEC4',\n    0x8b56: 'BOOL',\n    0x8b57: 'BOOL_VEC2',\n    0x8b58: 'BOOL_VEC3',\n    0x8b59: 'BOOL_VEC4',\n    0x8b5a: 'FLOAT_MAT2',\n    0x8b5b: 'FLOAT_MAT3',\n    0x8b5c: 'FLOAT_MAT4',\n    0x8b5e: 'SAMPLER_2D',\n    0x8b60: 'SAMPLER_CUBE',\n    0x1400: 'BYTE',\n    0x1401: 'UNSIGNED_BYTE',\n    0x1402: 'SHORT',\n    0x1403: 'UNSIGNED_SHORT',\n    0x1404: 'INT',\n    0x1405: 'UNSIGNED_INT',\n    0x1406: 'FLOAT',\n  };\n\n  const blocks: { [key: number]: number } = {\n    0x8b50: 1,\n    0x8b51: 1,\n    0x8b52: 1,\n    0x8b53: 1,\n    0x8b54: 1,\n    0x8b55: 1,\n    0x8b56: 1,\n    0x8b57: 1,\n    0x8b58: 1,\n    0x8b59: 1,\n    0x8b5a: 1,\n    0x8b5b: 3,\n    0x8b5c: 4,\n    0x8b5e: 1,\n    0x8b60: 1,\n    0x1400: 1,\n    0x1401: 1,\n    0x1402: 1,\n    0x1403: 1,\n    0x1404: 1,\n    0x1405: 1,\n    0x1406: 1,\n  };\n\n  // Loop through active uniforms\n  for (let i = 0; i < activeUniforms; ++i) {\n    const uniform: any = gl.getActiveUniform(program, i);\n    uniform.typeName = enums[uniform.type];\n    result.uniforms.push(uniform);\n    result.uniformCount += uniform.size;\n    uniform.size = uniform.size * blocks[uniform.type];\n  }\n\n  // Loop through active attributes\n  for (let i = 0; i < activeAttributes; i++) {\n    const attribute: any = gl.getActiveAttrib(program, i);\n    attribute.typeName = enums[attribute.type];\n    result.attributes.push(attribute);\n    result.attributeCount += attribute.size;\n  }\n\n  return result;\n}\n\nexport class WebGLStat {\n  static MAX_VERTEX_UNIFORMS = 0;\n  static MAX_FRAGMENT_UNIFORMS = 0;\n  static MAX_VERTEX_ATTRIBUTES = 0;\n  static WEBGL_SUPPORTED: boolean = false;\n  static MAX_TEXTURE_SIZE = 0;\n  static HARDWARE_INSTANCING = false;\n  static HARDWARE_INSTANCING_ANGLE = false;\n}\n\nfunction initStats() {\n  // Let's perform some immediate operations to do some gl querying for useful information\n  function getAContext() {\n    try {\n      const canvas = document.createElement('canvas');\n      return (\n        (window as any).WebGLRenderingContext &&\n        (canvas.getContext('webgl') || canvas.getContext('experimental-webgl'))\n      );\n    } catch (e) {\n      return false;\n    }\n  }\n\n  // Attempt to retrieve a context for webgl\n  const gl = getAContext();\n\n  // If the context exists, then we know gl is supported and we can fill in some metrics\n  if (gl) {\n    WebGLStat.WEBGL_SUPPORTED = true;\n    WebGLStat.MAX_VERTEX_UNIFORMS = gl.getParameter(\n      gl.MAX_VERTEX_UNIFORM_VECTORS,\n    );\n    WebGLStat.MAX_FRAGMENT_UNIFORMS = gl.getParameter(\n      gl.MAX_FRAGMENT_UNIFORM_VECTORS,\n    );\n    WebGLStat.MAX_VERTEX_ATTRIBUTES = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    WebGLStat.MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    WebGLStat.HARDWARE_INSTANCING_ANGLE = Boolean(\n      gl.getExtension('ANGLE_instanced_arrays'),\n    );\n    WebGLStat.HARDWARE_INSTANCING = WebGLStat.HARDWARE_INSTANCING_ANGLE;\n  }\n}\n\ninitStats();\n","/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',\n  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',\n  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',\n  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',\n  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',\n  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',\n  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',\n  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',\n  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',\n  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',\n  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // Internet Explorer and Edge do not support colors.\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n    return false;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n","import * as browser from 'bowser';\nimport { Vector2 } from 'three';\nconst debug = require('debug')('CommunicationsView:Mouse');\n\n/** Used to adjust the base whee delta for IE browsers */\nconst IE_ADJUSTMENT = 1 / 30;\n/** Used to adjust the rates for IE 11 */\nconst OLD_IE_ADJUSTMENT = -0.25;\n// This determines how large the delta can grow to in firefox\nconst MAX_FIREFOX_WHEELDELTA = 100;\n/**\n * Create a low pass filter memory bank so we can slow down rapid accelerations and let normal slower accelerations pass\n * Common use case for this is the discrepancy in firefox from mousewheels to trackpad scroll speeds\n */\nconst lowPassY: number[] = [0, 0, 0, 0];\n// These coefficients represent the coefficients of a FIR filter.\n// This FIR filter uses the lowPassY as the memory for the filter and is created for\n// The reasons specified for the lowPassY memory. To edit the coefficients, you simply\n// Ensure the coefficients added together === 1.0. If they do not, you may get an unstable\n// Result that goes to infinity rather quickly. Changing the distribution of these coefficients\n// Alters the rate at which the delta can approach MAX_FIREFOX_WHEELDELTA. Explaining exactly\n// How it affects the rate requires an understanding of FIR filters, so unless this is already\n// Known knowledge, it would be faster to just tweak the coefficients until a desired effect is\n// Attained.\nconst LOW_PASS_U0 = 0.02;\nconst LOW_PASS_U1 = 0.1;\nconst LOW_PASS_U2 = 0.18;\nconst LOW_PASS_U3 = 0.7;\n\nfunction normalizeFirefoxWheel(e: MouseWheelEvent) {\n  const wheel: WheelEvent = e;\n  let deltaX = 0;\n  let deltaY = 0;\n\n  // Reset the filter if the direction changes to prevent lag in directional change\n  if (Math.sign(lowPassY[0]) !== Math.sign(deltaY)) {\n    lowPassY.splice(0, lowPassY.length, 0, 0, 0, 0);\n  }\n\n  deltaX = wheel.deltaX * MAX_FIREFOX_WHEELDELTA;\n\n  // Calculate the next value output from the FIR filter\n  deltaY =\n    wheel.deltaY * MAX_FIREFOX_WHEELDELTA * LOW_PASS_U0 +\n    lowPassY[0] * LOW_PASS_U1 +\n    lowPassY[1] * LOW_PASS_U2 +\n    lowPassY[2] * LOW_PASS_U3;\n  // Store the value of the filter in the FIR memory bank\n  lowPassY.unshift(deltaY);\n  // Keep our FIR memory clean and only the size of the number of coefficients\n  lowPassY.pop();\n\n  return new Vector2(-deltaX, -deltaY);\n}\n\nfunction normalizeChromeWheel(e: MouseWheelEvent) {\n  const wheel: WheelEvent = e;\n\n  return new Vector2(wheel.deltaX, -wheel.deltaY);\n}\n\nfunction normalizeIE11Wheel(e: MouseWheelEvent) {\n  const wheel: WheelEvent = e;\n  let deltaX = wheel.deltaX;\n\n  if (deltaX === undefined) {\n    deltaX =\n      wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n  }\n\n  let deltaY = wheel.deltaY;\n\n  if (deltaY === undefined) {\n    if (wheel.wheelDeltaY !== undefined) {\n      deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n    } else {\n      deltaY = (wheel.wheelDelta || -wheel.detail) * OLD_IE_ADJUSTMENT;\n    }\n  }\n\n  return new Vector2(-deltaX, -deltaY);\n}\n\nfunction normalizeIE12Wheel(e: MouseWheelEvent) {\n  const wheel: WheelEvent = e;\n  let { deltaX, deltaY } = wheel;\n\n  if (deltaX === undefined) {\n    deltaX =\n      wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n  }\n\n  if (deltaY === undefined) {\n    if (wheel.wheelDeltaY !== undefined) {\n      deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n    } else {\n      deltaY = wheel.wheelDelta || -wheel.detail;\n    }\n  }\n\n  const v = new Vector2(deltaX, -deltaY);\n  v.multiplyScalar(0.25);\n\n  return v;\n}\n\n// Determine this browsers version of wheel normalization and apply it\nlet normalizeWheel: (e: MouseWheelEvent) => Vector2;\n\nif (browser.firefox) {\n  debug('Using mouse wheel for firefox');\n  normalizeWheel = normalizeFirefoxWheel;\n} else if (browser.msie && +browser.version >= 11) {\n  debug('Using mouse wheel for IE 11');\n  normalizeWheel = normalizeIE11Wheel;\n} else if (browser.msedge) {\n  debug('Using mouse wheel for MS EDGE');\n  normalizeWheel = normalizeIE12Wheel;\n} else {\n  debug('Using mouse wheel for Chrome');\n  normalizeWheel = normalizeChromeWheel;\n}\n\n/**\n * Analyzes a MouseEvent and calculates the mouse coordinates (relative to the element).\n */\nfunction eventElementPosition(\n  e: any,\n  relative?: HTMLElement,\n): { x: number; y: number } {\n  let mouseX: number = 0,\n    mouseY: number = 0,\n    eventX: number = 0,\n    eventY: number = 0,\n    object: any =\n      relative || (e.nativeEvent && e.nativeEvent.target) || e.target;\n\n  // Get mouse position on document crossbrowser\n  if (!e) {\n    e = window.event;\n  }\n\n  if (e.pageX || e.pageY) {\n    mouseX = e.pageX;\n    mouseY = e.pageY;\n  } else if (e.clientX || e.clientY) {\n    mouseX =\n      e.clientX +\n      document.body.scrollLeft +\n      document.documentElement.scrollLeft;\n    mouseY =\n      e.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n  }\n\n  // Get parent element position in document\n  if (object.offsetParent) {\n    do {\n      eventX += object.offsetLeft;\n      eventY += object.offsetTop;\n      object = object.offsetParent;\n    } while (object);\n  }\n\n  // Mouse position minus elm position is mouseposition relative to element:\n  return { x: mouseX - eventX, y: mouseY - eventY };\n}\n\nexport { eventElementPosition, normalizeWheel };\n","let UID = 0;\n\n/**\n * Provides a 64 bit UID.\n *\n * Note: all uids generated with uid() are unique amongst uid() calls and NOT unique amongst\n * other types of uid calls.\n */\nexport function uid() {\n  return ++UID;\n}\n\nlet CUID = 0;\n\n/**\n * Provides a 24 bit UID (keeps the UID within non-alpha color ranges)\n *\n * Note: all uids generated with colorUID() are unique amongst colorUID() calls and NOT unique amongst\n * other types of uid calls.\n */\nexport function colorUID() {\n  return ++CUID % 0xffffff;\n}\n","import { uid } from '../util/uid';\nimport { Instance } from './instance';\n\nexport class ObservableMonitoring {\n  static gatherIds: boolean = false;\n  static observableIds: number[] = [];\n  static observableNamesToUID = new Map<string, number>();\n\n  /**\n   * This activates all observables to gather their UIDs when they are retrieved via their getter.\n   * All of the ID's gathered can be accessed via getObservableMonitorIds. It is REQUIRED that this\n   * is disabled again to prevent a MASSIVE memory leak.\n   */\n  static setObservableMonitor(enabled: boolean) {\n    ObservableMonitoring.gatherIds = enabled;\n    ObservableMonitoring.observableIds = [];\n  }\n\n  /**\n   * This retrieves the observables montiored IDs that were gathered when setObservableMonitor was\n   * enabled.\n   */\n  static getObservableMonitorIds(clear?: boolean) {\n    const values = ObservableMonitoring.observableIds.slice(0);\n    if (clear) ObservableMonitoring.observableIds = [];\n\n    return values;\n  }\n}\n\n/**\n * This is a custom decorator intended for single properties on Instances only! It will\n * facilitate automatic updates and stream the updates through an InstanceProvider to properly\n * update the Instances values in the appropriate and corresponding buffers that will get committed\n * to the GPU.\n */\nexport function observable<T extends Instance>(target: T, key: string) {\n  // Here we store the name of the observable to a UID. This mapping allows us to have a UID\n  // per NAME of an observable. A UID for a name can produce MUCH faster lookups than the name itself.\n  // Matching against the name allows us to have instances with their own property sets but have matching\n  // name mappings to improve compatibility of Instances with varying Layers.\n  let propertyUID: number =\n    ObservableMonitoring.observableNamesToUID.get(key) || 0;\n\n  if (!propertyUID) {\n    propertyUID = uid();\n    ObservableMonitoring.observableNamesToUID.set(key, propertyUID);\n  }\n\n  /**\n   * New property getter to get the property's alternative storage since we overrode\n   * the initial storage with a custom getter and setter.\n   */\n  function getter(this: T) {\n    if (ObservableMonitoring.gatherIds) {\n      ObservableMonitoring.observableIds.push(propertyUID);\n    }\n    return this.observableStorage[propertyUID];\n  }\n\n  /**\n   * New property setter to replace the property marked as observable. This allows\n   * us to broadcast a change to our current observer.\n   */\n  function setter(this: T, newVal: any) {\n    // Update the privatized value\n    this.observableStorage[propertyUID] = newVal;\n    // Broadcast change\n    const observer = this.observer;\n    observer && observer.instanceUpdated(this, propertyUID);\n  }\n\n  /**\n   * Make sure the desired property is declared on the class with our custom getter and\n   * setter.\n   */\n  Object.defineProperty(target, key, {\n    configurable: true,\n    enumerable: true,\n    get: getter,\n    set: setter,\n  });\n}\n","import * as Three from 'three';\nimport { Instance } from '../../instance-provider/instance';\nimport { InstanceIOValue } from '../../types';\nimport { ILayerProps, Layer } from '../layer';\nimport { AtlasManager, AtlasResource } from './atlas-manager';\nimport { LabelAtlasResource } from './label-atlas-resource';\nimport { SubTexture } from './sub-texture';\n\nexport interface IAtlasResourceManagerOptions {\n  /** This is the atlas manager that handles operations with our atlas' */\n  atlasManager: AtlasManager;\n}\n\nfunction toInstanceIOValue(texture?: SubTexture): InstanceIOValue {\n  // If the texture is not defined we just output an empty reference\n  if (!texture) {\n    return [0, 0, 0, 0];\n  }\n\n  // Otherwise, we return the atlas information of the texture\n  return [\n    texture.atlasTL.x,\n    texture.atlasTL.y,\n    texture.atlasBR.x,\n    texture.atlasBR.y,\n  ];\n}\n\n/**\n * This class is responsible for tracking resources requested to be placed on an Atlas.\n * This makes sure the resource is uploaded and then properly cached so similar requests\n * return already existing resources. This also manages instances waiting for the resource\n * to be made available.\n */\nexport class AtlasResourceManager {\n  /** This is the atlas manager that handles operations with our atlas' */\n  atlasManager: AtlasManager;\n  /** This is the atlas currently targetted by requests */\n  targetAtlas: string = '';\n  /** This stores all of the requests awaiting dequeueing */\n  private requestQueue = new Map<string, AtlasResource[]>();\n  /**\n   * This tracks if a resource is already in the request queue. This also stores ALL instances awaiting the resource.\n   */\n  private requestLookup = new Map<\n    string,\n    Map<AtlasResource, [Layer<any, any>, Instance][]>\n  >();\n\n  constructor(options: IAtlasResourceManagerOptions) {\n    this.atlasManager = options.atlasManager;\n  }\n\n  /**\n   * This dequeues all instance requests for a resource and processes the request which will\n   * inevitably make the instance active\n   */\n  async dequeueRequests() {\n    // This flag will be modified to reflect if a dequeue operation has occurred\n    let didDequeue = false;\n\n    for (const [targetAtlas, resources] of Array.from(\n      this.requestQueue.entries(),\n    )) {\n      if (resources.length > 0) {\n        // We did dequeue\n        didDequeue = true;\n        // Pull out all of the requests into a new array and empty the existing queue to allow the queue to register\n        // New requests while this dequeue is being processed\n        const requests = resources.slice(0);\n        // Empty the queue to begin taking in new requests as needed\n        resources.length = 0;\n\n        // Tell the atlas manager to update with all of the requested resources\n        await this.atlasManager.updateAtlas(targetAtlas, requests);\n        // Get the requests for the given atlas\n        const atlasRequests = this.requestLookup.get(targetAtlas);\n\n        if (atlasRequests) {\n          // Once the manager has been updated, we can now flag all of the instances waiting for the resources\n          // As active, which should thus trigger an update to the layers to perform a diff for each instance\n          requests.forEach(resource => {\n            const request = atlasRequests.get(resource);\n            atlasRequests.delete(resource);\n\n            if (request) {\n              for (const [layer, instance] of request) {\n                // If the instance is still associated with buffer locations, then the instance can be activated. Having\n                // A buffer location is indicative the instance has not been deleted.\n                if (layer.bufferManager.getBufferLocations(instance)) {\n                  // Make sure the instance is active\n                  instance.active = true;\n                  // Trigger the resource attributes to update\n                  instance.resourceTrigger();\n                }\n              }\n            }\n          });\n        }\n      }\n    }\n\n    return didDequeue;\n  }\n\n  /**\n   * Free ALL resources managed under this resource manager\n   */\n  destroy() {\n    this.atlasManager.destroy();\n  }\n\n  /**\n   * This retrieves the actual atlas texture that should be applied to a uniform's\n   * value.\n   */\n  getAtlasTexture(key: string): Three.Texture | null {\n    const atlas = this.atlasManager.getAtlasTexture(key);\n\n    if (atlas) {\n      return atlas.texture;\n    }\n\n    return null;\n  }\n\n  /**\n   * This is a request for atlas texture resources. It will produce either the coordinates needed to\n   * make valid texture lookups, or it will trigger a loading of resources to an atlas and cause an\n   * automated deactivation and reactivation of the instance.\n   */\n  request<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U>,\n    instance: Instance,\n    resource: AtlasResource,\n  ): InstanceIOValue {\n    const texture: SubTexture = resource.texture;\n\n    // If the texture is ready and available, then we simply return the IO values\n    if (texture) {\n      return toInstanceIOValue(texture);\n    }\n\n    if (resource instanceof LabelAtlasResource) {\n      if (!resource.label.text) {\n        return toInstanceIOValue(texture);\n      }\n    }\n\n    // If a request is already made, then we must save the instance making the request for deactivation and\n    // Reactivation but without any additional atlas loading\n    let atlasRequests = this.requestLookup.get(this.targetAtlas);\n\n    if (atlasRequests) {\n      const existingRequests = atlasRequests.get(resource);\n\n      if (existingRequests) {\n        existingRequests.push([layer, instance]);\n        instance.active = false;\n\n        return toInstanceIOValue(texture);\n      }\n    } else {\n      atlasRequests = new Map();\n      this.requestLookup.set(this.targetAtlas, atlasRequests);\n    }\n\n    // If the texture is not available, then we must load the resource, deactivate the instance\n    // And wait for the resource to become available. Once the resource is available, the system\n    // Must activate the instance to render the resource.\n    instance.active = false;\n    let requests = this.requestQueue.get(this.targetAtlas);\n\n    if (!requests) {\n      requests = [];\n      this.requestQueue.set(this.targetAtlas, requests);\n    }\n\n    requests.push(resource);\n    atlasRequests.set(resource, [[layer, instance]]);\n\n    // This returns essentially returns blank values for the resource lookup\n    return toInstanceIOValue(texture);\n  }\n\n  /**\n   * This is used by the system to target the correct atlas for subsequent requests to a resource.\n   */\n  setTargetAtlas(target: string) {\n    this.targetAtlas = target;\n  }\n}\n","import { Bounds } from '../primitives/bounds';\nimport { IPoint } from '../primitives/point';\n\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nconst maxPopulation: number = 5;\nconst maxDepth: number = 10;\n\nexport interface IQuadItem {\n  area: number;\n  bottom: number;\n  height: number;\n  left: number;\n  mid: IPoint;\n  right: number;\n  top: number;\n  width: number;\n  x: number;\n  y: number;\n\n  containsPoint(point: IPoint): boolean;\n  encapsulate(item: IQuadItem): boolean;\n  fits(item: IQuadItem): 0 | 1 | 2;\n  hitBounds(item: IQuadItem): boolean;\n  isInside(item: IQuadItem): boolean;\n}\n\n/**\n * This filters a quad tree query by type\n *\n * @export\n * @template T\n */\nexport function filterQuery<T extends IQuadItem>(\n  type: Function[],\n  queryValues: IQuadItem[],\n): T[] {\n  const filtered: T[] = [];\n\n  queryValues.forEach((obj: IQuadItem) => {\n    if (type.find(t => obj instanceof t)) {\n      filtered.push(obj as T);\n    }\n  });\n\n  return filtered;\n}\n\n/**\n * Allows typing of a callback argument\n */\nexport interface IVisitFunction<T extends IQuadItem> {\n  /**\n   * A callback to use during add or query\n   *\n   * Called do provide aggregation or filtering like Array.reduce or\n   * Array.filter, but in a QuadTree instead.\n   *\n   * @param node  The node to effect the function upon\n   * @param child The child to add to the node\n   */\n  (node: Node<T>, child?: IQuadItem): void;\n}\n\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n *\n * @class Quadrants\n */\nexport class Quadrants<T extends IQuadItem> {\n  TL: Node<T>;\n  TR: Node<T>;\n  BL: Node<T>;\n  BR: Node<T>;\n\n  /**\n   * Ensures all memory is released for all nodes and all references are removed\n   * to potentially high memory consumption items\n   *\n   * @memberOf Quadrants\n   */\n  destroy() {\n    this.TL.destroy();\n    this.TR.destroy();\n    this.BL.destroy();\n    this.BR.destroy();\n    delete this.TL;\n    delete this.TR;\n    delete this.BL;\n    delete this.BR;\n  }\n\n  /**\n   * Creates an instance of Quadrants.\n   *\n   * @param bounds The bounds this will create quandrants for\n   * @param depth  The child depth of this element\n   *\n   * @memberOf Quadrants\n   */\n  constructor(bounds: IQuadItem, depth: number) {\n    const mid = bounds.mid;\n    this.TL = new Node<T>(bounds.x, mid.x, bounds.y, mid.y, depth);\n    this.TR = new Node<T>(mid.x, bounds.right, bounds.y, mid.y, depth);\n    this.BL = new Node<T>(bounds.x, mid.x, mid.y, bounds.bottom, depth);\n    this.BR = new Node<T>(mid.x, bounds.right, mid.y, bounds.bottom, depth);\n  }\n}\n\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n *\n * @export\n * @class Node\n */\nexport class Node<T extends IQuadItem> {\n  bounds: Bounds;\n  children: T[] = [];\n  depth: number = 0;\n  nodes: Quadrants<T>;\n\n  /**\n   * Destroys this node and ensures all child nodes are destroyed as well.\n   *\n   * @memberOf Node\n   */\n  destroy() {\n    delete this.children;\n    delete this.bounds;\n\n    if (this.nodes) {\n      this.nodes.destroy();\n      delete this.nodes;\n    }\n  }\n\n  /**\n   * Creates an instance of Node.\n   *\n   * @param l     The bounding left wall of the space this node covers\n   * @param r     The bounding right wall of the space this node covers\n   * @param t     The bounding top wall of the space this node covers\n   * @param b     The bounding bottom wall of the space this node covers\n   * @param depth The depth within the quad tree this node resides\n   *\n   * @memberOf Node\n   */\n  constructor(\n    left: number,\n    right: number,\n    top: number,\n    bottom: number,\n    depth?: number,\n  ) {\n    // If params insertted\n    if (arguments.length >= 4) {\n      this.bounds = new Bounds({\n        height: top - bottom,\n        width: right - left,\n        x: left,\n        y: top,\n      });\n    }\n\n    // Otherwise, make tiny start area\n    else {\n      this.bounds = new Bounds({\n        height: 1,\n        width: 1,\n        x: 0,\n        y: 0,\n      });\n    }\n\n    // Ensure the depth is set\n    this.depth = depth || 0;\n  }\n\n  /**\n   * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n   * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n   * this quad tree spans (and this is the root node), the quad tree will expand to include\n   * the new child.\n   *\n   * @param child The Bounds type object to inject\n   * @param props Properties that can be retrieved with the child object if applicable\n   *\n   * @returns True if the insertion was successful\n   *\n   * @memberOf Node\n   */\n  add(child: T, props: any): boolean {\n    // This is the entry function for adding children, so we must first expand our top node\n    // To cover the area that the child is located.\n    // If we're in bounds, then let's just add the child\n    if (child.isInside(this.bounds)) {\n      return this.doAdd(child);\n    }\n\n    // Otherwise, we need to expand first\n    else {\n      this.cover(child);\n      return this.add(child, props);\n    }\n  }\n\n  /**\n   * Adds a list of new children to this quad tree. It performs the same operations as\n   * addChild for each child in the list, however, it more efficiently recalculates the\n   * bounds necessary to cover the area the children cover.\n   *\n   * @param children      List of Bounds objects to inject\n   * @param childrenProps List of props to associate with each element\n   *\n   * @memberOf Node\n   */\n  addAll(children: T[], childrenProps?: any[]) {\n    // Ensure the properties are at least defined\n    childrenProps = childrenProps || [];\n\n    // Make sure we cover the entire area of all the children.\n    // We can speed this up a lot if we first calculate the total bounds the new children covers\n    let minX = Number.MAX_VALUE;\n    let minY = Number.MAX_VALUE;\n    let maxX = -Number.MAX_VALUE;\n    let maxY = -Number.MAX_VALUE;\n\n    // Get the dimensions of the new bounds\n    children.forEach(child => {\n      if (child.x < minX) {\n        minX = child.x;\n      }\n      if (child.right > maxX) {\n        maxX = child.right;\n      }\n      if (child.bottom > maxY) {\n        maxY = child.bottom;\n      }\n      if (child.y < minY) {\n        minY = child.y;\n      }\n    });\n\n    // Make sure our bounds includes the specified bounds\n    this.cover(\n      new Bounds({\n        height: maxY - minY,\n        width: maxX - minX,\n        x: minX,\n        y: minY,\n      }),\n    );\n\n    // Add all of the children into the tree\n    children.forEach((child, index) => this.doAdd(child));\n  }\n\n  /**\n   * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n   * This will cause all children to be re-injected into the tree.\n   *\n   * @param bounds The bounds to include in the tree's coverage\n   *\n   * @memberOf Node\n   */\n  cover(bounds: IQuadItem) {\n    // If we are already covering the area: abort\n    if (bounds.isInside(this.bounds)) {\n      return;\n    }\n\n    // Make our bounds cover the new area\n    this.bounds.encapsulate(bounds);\n    this.bounds.x -= 1;\n    this.bounds.y -= 1;\n    this.bounds.width += 2;\n    this.bounds.height += 4;\n    // Get all of the children underneath this node\n    const allChildren = this.gatherChildren([]);\n\n    // Destroy the split nodes\n    if (this.nodes) {\n      // Completely...destroy...\n      this.nodes.destroy();\n      delete this.nodes;\n    }\n\n    // Reinsert all children with the new dimensions in place\n    allChildren.forEach((child, index) => this.doAdd(child));\n  }\n\n  /**\n   * When adding children, this performs the actual action of injecting the child into the tree\n   * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n   *\n   * @param child The Bounds item to inject into the tree\n   * @param props The props to remain associated with the child\n   *\n   * @returns True if the injection was successful\n   *\n   * @memberOf Node\n   */\n  doAdd(child: T): boolean {\n    // If nodes are present, then we have already exceeded the population of this node\n    if (this.nodes) {\n      if (child.isInside(this.nodes.TL.bounds)) {\n        return this.nodes.TL.doAdd(child);\n      }\n\n      if (child.isInside(this.nodes.TR.bounds)) {\n        return this.nodes.TR.doAdd(child);\n      }\n\n      if (child.isInside(this.nodes.BL.bounds)) {\n        return this.nodes.BL.doAdd(child);\n      }\n\n      if (child.isInside(this.nodes.BR.bounds)) {\n        return this.nodes.BR.doAdd(child);\n      }\n\n      // Otherwise, this is a child overlapping this border\n      this.children.push(child);\n\n      return true;\n    }\n\n    // Otherwise, we have not had a split due to population limits being exceeded\n    else if (child.isInside(this.bounds)) {\n      this.children.push(child);\n\n      // If we exceeded our population for this quadrant, it is time to split up\n      if (this.children.length > maxPopulation && this.depth < maxDepth) {\n        this.split();\n      }\n\n      return true;\n    }\n\n    // This is when there is something wrong with the insertted child. The bounds\n    // For the quad should have grown without issue, but in this case the bounds\n    // Could not grow to accomodate the child.\n    if (isNaN(child.width + child.height + child.x + child.y)) {\n      console.error(\n        'Child did not fit into bounds because a dimension is NaN',\n        child,\n      );\n    } else if (child.area === 0) {\n      console.error(\n        'Child did not fit into bounds because the area is zero',\n        child,\n      );\n    }\n\n    // Don't insert the child and continue\n    return true;\n  }\n\n  /**\n   * Collects all children of all the current and sub nodes into a single list.\n   *\n   * @param list The list we must aggregate children into\n   *\n   * @return The list specified as the list parameter\n   */\n  gatherChildren(list: T[]): T[] {\n    list = list.concat(this.children);\n\n    if (this.nodes) {\n      this.nodes.TL.gatherChildren(list);\n      this.nodes.TR.gatherChildren(list);\n      this.nodes.BL.gatherChildren(list);\n      this.nodes.BR.gatherChildren(list);\n    }\n\n    return list;\n  }\n\n  /**\n   * Entry query for determining query type based on input object\n   *\n   * @param bounds Can be a Bounds or a Point object\n   * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n   *               information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return An array of children that intersects with the query\n   */\n  query(bounds: IQuadItem | IPoint, visit?: IVisitFunction<T>): T[] {\n    // Query a rectangle\n    if (bounds instanceof Bounds) {\n      if (bounds.hitBounds(this.bounds)) {\n        return this.queryBounds(bounds, [], visit);\n      }\n\n      // Return an empty array when nothing is collided with\n      return [];\n    }\n\n    // Query a point\n    if (this.bounds.containsPoint(bounds)) {\n      return this.queryPoint(bounds, [], visit);\n    }\n\n    // Return an empty array when nothing is collided with\n    return [];\n  }\n\n  /**\n   * Queries children for intersection with a bounds object\n   *\n   * @param b     The Bounds to test children against\n   * @param list  The list of children to aggregate into the query\n   * @param visit A callback function that will receive the Node as it is analyzed. This gives\n   *              information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return     Returns the exact same list that was input as the list param\n   */\n  queryBounds(b: IQuadItem, list: T[], visit?: IVisitFunction<T>): T[] {\n    this.children.forEach((c, index) => {\n      if (c.hitBounds(b)) {\n        list.push(c);\n      }\n    });\n\n    if (visit) {\n      visit(this);\n    }\n\n    if (this.nodes) {\n      if (b.hitBounds(this.nodes.TL.bounds)) {\n        this.nodes.TL.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.TR.bounds)) {\n        this.nodes.TR.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.BL.bounds)) {\n        this.nodes.BL.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.BR.bounds)) {\n        this.nodes.BR.queryBounds(b, list, visit);\n      }\n    }\n\n    return list;\n  }\n\n  /**\n   * Queries children for intersection with a point\n   *\n   * @param p     The Point to test children against\n   * @param list  The list of children to aggregate into the query\n   * @param visit A callback function that will receive the Node as it is analyzed. This gives\n   *              information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return      Returns the exact same list that was input as the list param\n   */\n  queryPoint(p: any, list: T[], visit?: IVisitFunction<T>): T[] {\n    this.children.forEach((c, index) => {\n      if (c.containsPoint(p)) {\n        list.push(c);\n      }\n    });\n\n    if (visit) {\n      visit(this);\n    }\n\n    if (this.nodes) {\n      if (this.nodes.TL.bounds.containsPoint(p)) {\n        this.nodes.TL.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.TR.bounds.containsPoint(p)) {\n        this.nodes.TR.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.BL.bounds.containsPoint(p)) {\n        this.nodes.BL.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.BR.bounds.containsPoint(p)) {\n        this.nodes.BR.queryPoint(p, list, visit);\n      }\n    }\n\n    return list;\n  }\n\n  /**\n   * Creates four sub quadrants for this node.\n   */\n  split() {\n    // Gather all items to be handed down\n    const allChildren = this.gatherChildren([]);\n    // Gather all props for the children to be handed down as well\n    this.nodes = new Quadrants<T>(this.bounds, this.depth + 1);\n\n    this.children = [];\n\n    while (allChildren.length > 0) {\n      const child = allChildren.pop();\n      if (child) this.doAdd(child);\n    }\n  }\n\n  /**\n   * Traverses the quad tree returning every quadrant encountered\n   *\n   * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n   */\n  visit(cb: IVisitFunction<T>): void {\n    const finished = Boolean(cb(this));\n\n    if (this.nodes && !finished) {\n      this.nodes.TL.visit(cb);\n      this.nodes.TR.visit(cb);\n      this.nodes.BL.visit(cb);\n      this.nodes.BR.visit(cb);\n    }\n  }\n}\n\nexport class QuadTree<T extends IQuadItem> extends Node<T> {}\n","import { DataBounds } from '../util/data-bounds';\nimport { Bounds } from './bounds';\n\n/**\n * Anytime this is used to express bounds of an object, it is expected\n * to behave like CSS styling with absolute positioning.\n *\n * Setting a left and a right will auto calculate width (setting width takes precedence)\n *\n * You can set numbers to a %. If no % is present all other characters will be ignored\n * (px, em, and other dimensions will not be supported...just px by default unless %)\n */\nexport type AbsolutePosition = {\n  bottom?: number | string;\n  height?: number | string;\n  left?: number | string;\n  right?: number | string;\n  top?: number | string;\n  width?: number | string;\n};\n\nfunction value(val: number | string, ref: number, scaleRatio: number) {\n  const parse = `${val}`;\n  const num = parseFloat(parse);\n\n  if (isNaN(num)) {\n    return 0;\n  }\n\n  // If this is a percentage use the reference as the num to multiply against\n  if (parse.indexOf('%') > -1) {\n    return num / 100.0 * ref;\n  }\n\n  return num * scaleRatio;\n}\n\n/**\n * This evaluates an absolute position with a reference to produce meaningful bounds.\n *\n * The scaleRatio provided should be available in or for percents to have the same weighting\n * as whole number values.\n */\nexport function getAbsolutePositionBounds<T>(\n  item: AbsolutePosition,\n  reference: Bounds,\n  scaleRatio: number,\n): DataBounds<T> {\n  if (reference.width === 0 || reference.height === 0) {\n    console.warn(\n      'An AbsolutePosition evaluated to invalid dimensions.',\n      'Please ensure that the object provided and the reference has valid dimensions',\n      'to produce dimensions with width and height that are non-zero.',\n      'item:',\n      item,\n      'reference:',\n      reference.toString(),\n    );\n  }\n\n  const bounds = DataBounds.emptyBounds<T>();\n  let width;\n  let height;\n\n  // Calculate the horizontal values\n  if (item.width) {\n    bounds.width = value(item.width, reference.width, scaleRatio);\n\n    if (item.left !== undefined) {\n      bounds.x = value(item.left, reference.width, scaleRatio);\n    } else if (item.right !== undefined) {\n      bounds.x =\n        reference.width -\n        value(item.right, reference.width, scaleRatio) -\n        bounds.width;\n    }\n  } else {\n    const left = value(item.left || 0, reference.width, scaleRatio);\n    const right =\n      reference.width - value(item.right || 0, reference.width, scaleRatio);\n    width = right - left;\n\n    if (width < 0) {\n      console.warn(\n        'An AbsolutePosition evaluated to invalid dimensions.',\n        'Please ensure that the object provided and the reference has valid dimensions',\n        'to produce dimensions with width and height that are greater than zero.',\n        'item:',\n        item,\n        'reference:',\n        reference.toString(),\n      );\n    }\n\n    bounds.x = left;\n    bounds.width = width;\n  }\n\n  // Calculate the vertical values\n  if (item.height) {\n    bounds.height = value(item.height, reference.height, scaleRatio);\n\n    if (item.top !== undefined) {\n      bounds.y = value(item.top, reference.height, scaleRatio);\n    } else if (item.bottom !== undefined) {\n      bounds.y =\n        reference.height -\n        value(item.bottom, reference.height, scaleRatio) -\n        bounds.height;\n    }\n  } else {\n    const top = value(item.top || 0, reference.height, scaleRatio);\n    const bottom =\n      reference.height - value(item.bottom || 0, reference.height, scaleRatio);\n    height = bottom - top;\n\n    if (height === undefined || height < 0) {\n      console.warn(\n        'An AbsolutePosition evaluated to invalid dimensions.',\n        'Please ensure that the object provided and the reference has valid dimensions',\n        'to produce dimensions with width and height that are greater than zero.',\n        'item:',\n        item,\n        'reference:',\n        reference.toString(),\n      );\n    }\n\n    bounds.y = top;\n    bounds.height = height;\n  }\n\n  if (\n    bounds.width === 0 ||\n    bounds.height === 0 ||\n    isNaN(bounds.x + bounds.y + bounds.width + bounds.height)\n  ) {\n    bounds.x = 0;\n    bounds.y = 0;\n    bounds.width = reference.width;\n    bounds.height = reference.height;\n  }\n\n  return bounds;\n}\n","import { IPoint } from '../../primitives/point';\nimport { IProjection, PickType } from '../../types';\nimport { EventManager } from '../event-manager';\nimport { Layer } from '../layer';\nimport { LayerSurface } from '../layer-surface';\nimport {\n  IDragMetrics,\n  IMouseInteraction,\n  SceneView,\n} from '../mouse-event-manager';\n\nfunction isDefined<T>(val: T | null | undefined): val is T {\n  return Boolean(val);\n}\n\n/**\n * This class is an injected event manager for the surface, it specifically handles taking in mouse events intended for view interactions\n * and broadcasts them to the layers that have picking enabled, thus allowing the layers to respond to\n * mouse view locations and broadcast Instance interactions based on the interaction with the View the layer is a part of\n *\n * In Summary: This is an adapter that takes in interactions to the views and injects those events into the layers associated with\n * the views so that the layers can translate the events to gestures.\n */\nexport class LayerMouseEvents extends EventManager {\n  /** This tracks which views have the mouse over them so we can properly broadcast view is out events */\n  isOver = new Map<SceneView, boolean>();\n  /** This is the surface this manager is aiding with broadcasting events to layers */\n  sceneViews: SceneView[];\n  /**\n   * This is the surface this LayerMouseEvent Controller is operating on behalf of. We use this to trigger,\n   * pre-layer processing items, such as color pick narrowing prior to the Layers receiving the event.\n   */\n  surface: LayerSurface;\n\n  constructor(surface: LayerSurface) {\n    super();\n    this.surface = surface;\n    this.sceneViews = surface.sceneViews;\n  }\n\n  getSceneViewsUnderMouse(e: IMouseInteraction) {\n    const sceneViewByViewId = new Map<string, SceneView>();\n\n    // Map the scene views by the view's identifiers\n    for (const sceneView of this.sceneViews) {\n      sceneViewByViewId.set(sceneView.view.id, sceneView);\n    }\n\n    // Now retrieve and convert each view under the mouse to the scene view it coincides with\n    return e.viewsUnderMouse\n      .map(viewItem => sceneViewByViewId.get(viewItem.view.id))\n      .filter(isDefined);\n  }\n\n  getMouseByViewId(e: IMouseInteraction) {\n    // This is the mouse position for the provided view in view space\n    const viewMouseByViewId = new Map<string, IPoint>();\n\n    for (const viewItem of e.viewsUnderMouse) {\n      viewMouseByViewId.set(viewItem.view.id, viewItem.mouse);\n    }\n\n    return viewMouseByViewId;\n  }\n\n  handleClick(e: IMouseInteraction, button: number) {\n    this.handleInteraction(e, (layer, view, mouse) =>\n      layer.interactions.handleMouseClick(view, mouse, button),\n    );\n  }\n\n  handleDrag(e: IMouseInteraction, drag: IDragMetrics) {\n    this.handleInteraction(e, (layer, view, mouse) =>\n      layer.interactions.handleMouseDrag(view, mouse),\n    );\n  }\n\n  handleInteraction(\n    e: IMouseInteraction,\n    callback: (layer: Layer<any, any>, view: IProjection, mouse: IPoint) => void,\n  ) {\n    // Get all of the scenes under the mouse\n    const sceneViews = this.getSceneViewsUnderMouse(e);\n    // Get a lookup of a view id to the mouse position in the view\n    const viewMouseByViewId = this.getMouseByViewId(e);\n\n    // For every view of every scene, we must tell it's layers it's world space is receiving mouse interactions\n    for (const sceneView of sceneViews) {\n      this.handleSceneView(sceneView, viewMouseByViewId, callback);\n    }\n\n    return sceneViews;\n  }\n\n  handleMouseDown(e: IMouseInteraction, button: number) {\n    this.handleInteraction(e, (layer, view, mouse) =>\n      layer.interactions.handleMouseDown(view, mouse, button),\n    );\n  }\n\n  handleMouseUp(e: IMouseInteraction, button: number) {\n    this.handleInteraction(e, (layer, view, mouse) =>\n      layer.interactions.handleMouseUp(view, mouse, button),\n    );\n  }\n\n  handleMouseOver(e: IMouseInteraction) {\n    // We let the mouse move event handle the registration of moused over views\n  }\n\n  handleMouseOut(e: IMouseInteraction) {\n    // Get a lookup of a view id to the mouse position in the view\n    const viewMouseByViewId = this.getMouseByViewId(e);\n    const screen = e.screen.mouse;\n\n    // All views that are moused over should no longer be considered over and broadcast a mouse out\n    this.isOver.forEach((flag, sceneView) => {\n      // Since we are leaving the view we must make the view relative cooridinates fromt he screen space coords\n      viewMouseByViewId.set(\n        sceneView.view.id,\n        sceneView.view.screenToView(screen),\n      );\n\n      this.handleSceneView(sceneView, viewMouseByViewId, (layer, view, mouse) =>\n        layer.interactions.handleMouseOut(view, mouse),\n      );\n    });\n\n    // Nothing is over anymore\n    this.isOver.clear();\n  }\n\n  handleMouseMove(e: IMouseInteraction) {\n    if (this.surface) {\n      this.surface.updateColorPickRange(\n        [e.screen.mouse.x, e.screen.mouse.y],\n        e.viewsUnderMouse.map(v => v.view),\n      );\n    }\n\n    // Get all of the scenes we have interacted with, and broadcast a move event for each\n    const allSceneViews = this.handleInteraction(e, (layer, view, mouse) =>\n      layer.interactions.handleMouseMove(view, mouse),\n    );\n    // Get a lookup of a view id to the mouse position in the view\n    const viewMouseByViewId = this.getMouseByViewId(e);\n    // Get the position of the mouse on the screen\n    const screen = e.screen.mouse;\n\n    // For quick lookups map all of the current SceneViews that are over\n    const currentSceneViews = new Map<SceneView, boolean>();\n    allSceneViews.forEach(v => currentSceneViews.set(v, true));\n\n    // Detect which of the views are newly over\n    currentSceneViews.forEach((flag, sceneView) => {\n      if (!this.isOver.get(sceneView)) {\n        this.handleSceneView(\n          sceneView,\n          viewMouseByViewId,\n          (layer, view, mouse) =>\n            layer.interactions.handleMouseOver(view, mouse),\n        );\n      }\n    });\n\n    // Detect which of the views are no longer over\n    this.isOver.forEach((flag, sceneView) => {\n      if (!currentSceneViews.get(sceneView)) {\n        // Since these views were not interacted with, we must create the mouse interaction position\n        viewMouseByViewId.set(\n          sceneView.view.id,\n          sceneView.view.screenToView(screen),\n        );\n\n        this.handleSceneView(\n          sceneView,\n          viewMouseByViewId,\n          (layer, view, mouse) => layer.interactions.handleMouseOut(view, mouse),\n        );\n      }\n    });\n\n    // Update the current views that are over to the currently over views for next event\n    this.isOver = currentSceneViews;\n  }\n\n  handleSceneView(\n    sceneView: SceneView,\n    viewMouseByViewId: Map<string, IPoint>,\n    callback: (layer: Layer<any, any>, view: IProjection, mouse: IPoint) => void,\n  ) {\n    const view = sceneView.view;\n    const mouse = viewMouseByViewId.get(view.id);\n\n    if (mouse) {\n      for (const layer of sceneView.scene.layers) {\n        if (layer.picking && layer.picking.type !== PickType.NONE) {\n          callback(layer, view, mouse);\n        }\n      }\n    }\n  }\n\n  handleWheel(e: IMouseInteraction) {\n    // TODO: This may need to be implemented. As of right now, there is no particular benefit\n  }\n}\n","import { IColorPickingData } from '../types';\nimport { Vec2 } from './vector';\n\n/**\n * This analyzes the rendered data for color picking and outputs the metrics and data needed\n * for the operation.\n */\nexport function analyzeColorPickingRendering(\n  mouse: Vec2,\n  data: Uint8Array,\n  width: number,\n  height: number,\n) {\n  const pickingData: IColorPickingData = {\n    allColors: [],\n    colorData: data,\n    dataHeight: height,\n    dataWidth: width,\n    mouse,\n    nearestColor: 0,\n  };\n\n  const uniqueColors = new Map<number, boolean>();\n  let pixelIndex = 0;\n  const colors: number[][] = [];\n  const mouseX: number = width / 2;\n  const mouseY: number = height / 2;\n\n  let nearestColor = 0x000000;\n  let distance = Number.MAX_SAFE_INTEGER;\n\n  for (let i = 0; i < height; ++i) {\n    const row: number[] = [];\n    colors.push(row);\n\n    for (let k = 0; k < width; ++k) {\n      const r = data[pixelIndex];\n      const g = data[pixelIndex + 1];\n      const b = data[pixelIndex + 2];\n      pixelIndex += 4;\n\n      const color = (r << 16) | (g << 8) | b;\n      uniqueColors.set(color, true);\n      row.push(color);\n\n      // If the color is not black, let's test the distance against currnet nearest color\n      if (color !== 0x000000) {\n        const dx = k - mouseX;\n        const dy = i - mouseY;\n        const testDistance = dx * dx + dy * dy;\n\n        if (testDistance < distance) {\n          distance = testDistance;\n          nearestColor = color;\n        }\n      }\n    }\n  }\n\n  // Apply all o fthe unique colors that were discovered within the rendering\n  pickingData.allColors = Array.from(uniqueColors.keys());\n  // The nearest color will be the element in the middle of the array of colors\n  pickingData.nearestColor = nearestColor;\n\n  return pickingData;\n}\n","module.exports = \"// This portion is where the shader assigns the picking color that gets passed to the fragment shader\\n  _picking_color_pass_ = _pickingColor;\\n\"","module.exports = \"lowp vec4 setColor(vec4 color) {\\n  gl_FragColor = color;\\n  return gl_FragColor;\\n}\\n\"","module.exports = \"precision lowp float;\\n\\n// This contains the method required to be used on a fragment shader when a layer desires to use\\n// PickType.SINGLE (color picking).\\nvarying vec4 _picking_color_pass_;\\n\\nvec4 setColor(vec4 color) {\\n  gl_FragColor = mix(color, _picking_color_pass_, pickingActive);\\n\\n  if (color.a == 0.0) {\\n    discard;\\n  }\\n\\n  return gl_FragColor;\\n}\\n\"","module.exports = \"// This is the varying auto generated for the fragment shader that is needed in the vertex shader to pass the\\n// color for the instance through to the fragment shader\\nvarying vec4 _picking_color_pass_;\\n\"","module.exports = \"// These are projection methods utilizing the simpler camera breakdown approach\\n\\nvec3 cameraSpace(vec3 world) {\\n  return (world + cameraOffset) * cameraScale;\\n}\\n\\nvec3 cameraSpaceSize(vec3 worldSize) {\\n  return worldSize * cameraScale;\\n}\\n\\nvec4 clipSpace(vec3 world) {\\n  return vec4(((projection * modelView) * vec4(cameraSpace(world), 1.0)).xyz, 1.0);\\n}\\n\\nvec4 clipSpaceSize(vec3 worldSize) {\\n  return vec4(((projection * modelView) * vec4(cameraSpaceSize(worldSize), 0.0)).xyz, 1.0);\\n}\\n\"","module.exports = \"// When instancing is enabled, it causes a major list of uniforms to be generated\\n// it also generates a massive search tree to retrieve the correct unforms in question.\\n${instanceUniformDeclarations}\\n\\n// This is the uniforms provided by the system along with the uniforms created by the layer\\n${layerUniforms}\\n\\n// This is the attributes generated for vertex attributes\\n${vertexAttributes}\\n\\n// This is the methods and set up needed to retrieve a block of data for an instance\\n${instanceDataRetrieval}\\n\\n// This is the methods generated for the automated easing of attributes\\n${easingMethods}\\n\"","module.exports = \"// This is the injected dereferencing of the instance attributes\\n  ${instanceDestructuring}\\n\\n  // This is a special injected instance attribute. It lets the system\\n  // control specific instances ability to draw, which allows the backend\\n  // system greater control on how it optimizes draw calls and it's buffers.\\n  if (_active == 0.0) {\\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n\\n    // Quick exit to prevent any geometry from arising from the instance\\n    return;\\n  }\\n\\n  ${picking}\\n\"","module.exports = \"precision highp float;\\n\\n// This is the fragment shader generated by the system\\n${layerUniforms}\\n\\n${picking}\\n\\n// --------------- The fragment shader provided by the layer ------------------\\n${shader}\\n\"","module.exports = \"// This is the vertex shader generated by the system\\n${shaderInput}\\n${projectionMethods}\\n${picking}\\n// --------------- Vertex shader provided by the layer -----------------\\n${shader}\\n\"","module.exports = \"int instanceSize = ${instanceBlockCount};\\n\\nvec4 getBlock(int index, int instanceIndex) {\\n  return instanceData[(instanceSize * instanceIndex) + index];\\n}\\n\"","import * as Three from 'three';\nimport { Layer } from '../../surface/layer';\nimport { LayerBufferType } from '../../surface/layer-processing/layer-buffer-type';\nimport {\n  IInstanceAttribute,\n  IInstancingUniform,\n  InstanceAttributeSize,\n} from '../../types';\nimport { Instance } from '../../util';\nimport { AutoEasingLoopStyle } from '../../util/auto-easing-method';\nimport { shaderTemplate } from '../../util/shader-templating';\nimport { templateVars } from '../fragments/template-vars';\nimport { makeInstanceUniformNameArray } from './make-instance-uniform-name';\n\nconst instanceRetrievalArrayFragment = require('../fragments/instance-retrieval-array.vs');\n\n/** Defines the elements for destructuring out of a vector */\nconst VECTOR_COMPONENTS = ['x', 'y', 'z', 'w'];\n\n/** Converts a size to a shader type */\nconst sizeToType: { [key: number]: string } = {\n  1: 'float',\n  2: 'vec2',\n  3: 'vec3',\n  4: 'vec4',\n  9: 'mat3',\n  16: 'mat4',\n  /** This is the special case for instance attributes that want an atlas resource */\n  99: 'vec4',\n};\n\n/**\n * This sorts attributes specific to how they need to be destructured. For example:\n * easing attributes MUST appear AFTER all of the specially integrated attributes that were generated\n * such as start times and durations.\n */\nfunction orderByPriority(\n  a: IInstanceAttribute<any>,\n  b: IInstanceAttribute<any>,\n) {\n  if (a.easing && !b.easing) return 1;\n  return -1;\n}\n\nexport function makeUniformArrayDeclaration(totalBlocks: number) {\n  return {\n    fragment: `uniform vec4 ${makeInstanceUniformNameArray()}[${totalBlocks}];`,\n    materialUniforms: [\n      {\n        name: makeInstanceUniformNameArray(),\n        type: '4fv',\n        value: new Array(totalBlocks)\n          .fill(0)\n          .map(() => new Three.Vector4(0, 0, 0, 0)),\n      },\n    ] as IInstancingUniform[],\n  };\n}\n\nexport function makeInstanceRetrievalArray(blocksPerInstance: number) {\n  const templateOptions: { [key: string]: string } = {};\n  templateOptions[templateVars.instanceBlockCount] = `${blocksPerInstance}`;\n\n  const required = {\n    name: 'makeInstanceRetrievalArray',\n    values: [templateVars.instanceBlockCount],\n  };\n\n  const results = shaderTemplate(\n    instanceRetrievalArrayFragment,\n    templateOptions,\n    required,\n  );\n\n  return results.shader;\n}\n\nexport function makeInstanceDestructuringArray<T extends Instance>(\n  layer: Layer<T, any>,\n  instanceAttributes: IInstanceAttribute<T>[],\n  blocksPerInstance: number,\n) {\n  let out = '';\n\n  const orderedAttributes = instanceAttributes.slice(0).sort(orderByPriority);\n\n  if (layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE) {\n    out = instanceAttributeDestructuring(orderedAttributes);\n  } else {\n    out = uniformInstancingDestructuring(orderedAttributes, blocksPerInstance);\n  }\n\n  return out;\n}\n\nfunction instanceAttributeDestructuring<T extends Instance>(\n  orderedAttributes: IInstanceAttribute<T>[],\n) {\n  let out = '';\n\n  orderedAttributes.forEach(attribute => {\n    // If this is the source easing attribute, we must add it in as an eased method along with a calculation for the\n    // Easing interpolation time value based on the current time and the injected start time of the change.\n    if (attribute.easing && attribute.size) {\n      // Make the time calculation for the easing equation\n      out += makeAutoEasingTiming(attribute);\n\n      out += `  ${sizeToType[attribute.size]} ${attribute.name} = ${\n        attribute.easing.methodName\n      }(_${attribute.name}_start, _${attribute.name}_end, _${\n        attribute.name\n      }_time);\\n`;\n    }\n  });\n\n  return out;\n}\n\nfunction uniformInstancingDestructuring<T extends Instance>(\n  orderedAttributes: IInstanceAttribute<T>[],\n  blocksPerInstance: number,\n) {\n  let out = 'int instanceIndex = int(instance);';\n\n  // Generate the blocks\n  for (let i = 0; i < blocksPerInstance; ++i) {\n    out += `  vec4 block${i} = getBlock(${i}, instanceIndex);\\n`;\n  }\n\n  orderedAttributes.forEach(attribute => {\n    const block = attribute.block;\n\n    // If this is the source easing attribute, we must add it in as an eased method along with a calculation for the\n    // Easing interpolation time value based on the current time and the injected start time of the change.\n    if (attribute.easing && attribute.size) {\n      if (attribute.size === InstanceAttributeSize.FOUR) {\n        out += `  ${sizeToType[attribute.size]} _${\n          attribute.name\n        }_end = block${block};\\n`;\n      } else {\n        out += `  ${sizeToType[attribute.size || 1]} _${\n          attribute.name\n        }_end = block${block}.${makeVectorSwizzle(\n          attribute.blockIndex || 0,\n          attribute.size || 1,\n        )};\\n`;\n      }\n\n      // Generate the proper timing calculation for the easing involved\n      out += makeAutoEasingTiming(attribute);\n\n      out += `  ${sizeToType[attribute.size]} ${attribute.name} = ${\n        attribute.easing.methodName\n      }(_${attribute.name}_start, _${attribute.name}_end, _${\n        attribute.name\n      }_time);\\n`;\n    }\n\n    // If we have a size the size of a block, then don't swizzle the vector\n    else if (attribute.size === InstanceAttributeSize.FOUR) {\n      out += `  ${sizeToType[attribute.size]} ${\n        attribute.name\n      } = block${block};\\n`;\n    }\n\n    // If the attribute is an atlas, then we use the special ATLAS size and don't swizzle the vector\n    else if (attribute.atlas) {\n      out += `  ${sizeToType[InstanceAttributeSize.ATLAS]} ${\n        attribute.name\n      } = block${block};\\n`;\n    }\n\n    // Do normal destructuring with any other size and type\n    else {\n      out += `  ${sizeToType[attribute.size || 1]} ${\n        attribute.name\n      } = block${block}.${makeVectorSwizzle(\n        attribute.blockIndex || 0,\n        attribute.size || 1,\n      )};\\n`;\n    }\n  });\n\n  return out;\n}\n\nfunction makeAutoEasingTiming<T extends Instance>(attribute: IInstanceAttribute<T>) {\n  if (!attribute.easing) {\n    return;\n  }\n\n  let out = '';\n\n  switch (attribute.easing.loop) {\n    // Continuous means letting the time go from 0 to infinity\n    case AutoEasingLoopStyle.CONTINUOUS: {\n      out += `  float _${\n        attribute.name\n      }_time = (currentTime - _${\n        attribute.name\n      }_start_time) / _${attribute.name}_duration;\\n`;\n      break;\n    }\n\n    // Repeat means going from 0 to 1 then 0 to 1 etc etc\n    case AutoEasingLoopStyle.REPEAT: {\n      out += `  float _${\n        attribute.name\n      }_time = clamp(fract((currentTime - _${\n        attribute.name\n      }_start_time) / _${attribute.name}_duration), 0.0, 1.0);\\n`;\n      break;\n    }\n\n    // Reflect means going from 0 to 1 then 1 to 0 then 0 to 1 etc etc\n    case AutoEasingLoopStyle.REFLECT: {\n      // Get the time passed in a linear fashion\n      out += `  float _${attribute.name}_timePassed = (currentTime - _${\n        attribute.name\n      }_start_time) / _${attribute.name}_duration;\\n`;\n      // Make a triangle wave from the time passed to ping pong the value\n      out += `  float _${attribute.name}_pingPong = abs((fract(_${\n        attribute.name\n      }_timePassed / 2.0)) - 0.5) * 2.0;\\n`;\n      // Ensure we're clamped to the right values\n      out += `  float _${attribute.name}_time = clamp(_${\n        attribute.name\n      }_pingPong, 0.0, 1.0);\\n`;\n      break;\n    }\n\n    // No loop means just linear time\n    case AutoEasingLoopStyle.NONE:\n    default: {\n      out += `  float _${attribute.name}_time = clamp((currentTime - _${\n        attribute.name\n      }_start_time) / _${attribute.name}_duration, 0.0, 1.0);\\n`;\n      break;\n    }\n  }\n\n  return out;\n}\n\nfunction makeVectorSwizzle(start: number, size: number) {\n  return VECTOR_COMPONENTS.slice(start, start + size).join('');\n}\n","/**\n * The goal of this file is to take in model attributes and instance attributes specified\n * and inject the proper attributes into the shaders so the implementor of the shader does\n * not worry about syncing attribute and uniform names between the JS\n */\nimport { ILayerProps, Layer } from '../../surface/layer';\nimport { LayerBufferType } from '../../surface/layer-processing/layer-buffer-type';\nimport {\n  IInstanceAttribute,\n  IInstancingUniform,\n  InstanceAttributeSize,\n  IShaders,\n  IUniform,\n  IVertexAttribute,\n  PickType,\n  ShaderInjectionTarget,\n} from '../../types';\nimport { Instance } from '../../util';\nimport {\n  IShaderTemplateRequirements,\n  shaderTemplate,\n} from '../../util/shader-templating';\nimport { WebGLStat } from '../../util/webgl-stat';\nimport { templateVars } from '../fragments/template-vars';\nimport { instanceAttributeShaderName } from './instance-attribute-shader-name';\nimport {\n  makeInstanceDestructuringArray,\n  makeInstanceRetrievalArray,\n  makeUniformArrayDeclaration,\n} from './uniform-instance-block-array';\n\n// These are all of the necessary fragments that will comprise our shader that is generated\nconst vertexShaderComposition = require('../fragments/vertex-shader-composition.vs');\nconst fragmentShaderComposition = require('../fragments/fragment-shader-composition.fs');\nconst instanceDestructuringArray = require('../fragments/instance-destructuring-array.vs');\nconst shaderInput = require('../fragments/shader-input.vs');\nconst projectionMethods = require('../fragments/projection-methods.vs');\n\n// Constants\n\n/**\n * Defines how many floats are available in a uniform block\n * What is a uniform block you ask? Why let me tell you! It is how opengl stores and communicates uniforms\n * to the GPU. Whenever you declare a uniform, it will use a hunk of memory. You can see how many uniforms\n * a GPU can have via the paramter MAX_VERTEX_UNIFORM_VECTORS. The number returned is the number of blocks\n * we can use for uniforms in the vertex shader. A BLOCK is an entire vec4.\n *\n * When you declare a uniform in your shader, it will use an entire BLOCK at the MINIMUM.\n *\n * A uniform float uses 1 block. vec2 uses 1 block. vec3 uses one block. vec4 uses one block.\n * mat4 uses 4 blocks. mat3 uses 3 blocks.\n *\n * etc etc.\n */\nconst MAX_USE_PER_BLOCK = 4;\n\n/** Converts a size to a shader type */\nconst sizeToType: { [key: number]: string } = {\n  1: 'float',\n  2: 'vec2',\n  3: 'vec3',\n  4: 'vec4',\n  9: 'mat3',\n  16: 'mat4',\n  99: 'sampler2D',\n};\n\nfunction calculateUniformBlockUseage(uniforms: IUniform[]) {\n  let count = 0;\n\n  for (let i = 0, end = uniforms.length; i < end; ++i) {\n    count += Math.ceil(uniforms[i].size / 4);\n  }\n\n  return count;\n}\n\nexport interface IInjectionDetails {\n  fs: string;\n  materialUniforms: IInstancingUniform[];\n  maxInstancesPerBuffer: number;\n  vs: string;\n}\n\n/**\n * This method is the main algorithm for piecing together all of the attributes necessary\n * and injecting them into the shaders.\n *\n * @param shaders\n * @param vertexAttributes\n * @param instanceAttributes\n */\nexport function injectFragments<T extends Instance, U extends ILayerProps<T>>(\n  layer: Layer<T, U>,\n  shaders: IShaders,\n  vertexAttributes: IVertexAttribute[],\n  instanceAttributes: IInstanceAttribute<any>[],\n  uniforms: IUniform[],\n): IInjectionDetails {\n  const shaderInputMetrics = generateShaderInputs(\n    layer,\n    vertexAttributes,\n    instanceAttributes,\n    uniforms,\n  );\n\n  let templateOptions: { [key: string]: string } = {\n    [templateVars.projectionMethods]: generateProjectionMethods(),\n    [templateVars.picking]: generateVertexPicking(layer),\n    [templateVars.shaderInput]: shaderInputMetrics.fragment,\n    [templateVars.shader]: generateVertexShader(\n      layer,\n      shaders,\n      instanceAttributes,\n      shaderInputMetrics.metrics.maxInstancesPerBuffer,\n      shaderInputMetrics.metrics.blocksPerInstance,\n    ),\n  };\n\n  let required = {\n    name: 'vertex shader composition',\n    values: [\n      templateVars.projectionMethods,\n      templateVars.shaderInput,\n      templateVars.shader,\n    ],\n  };\n\n  // If our layer is using color picking, then we must require the shader to include the ${picking} annotation\n  // To receive the fragment picking method\n  if (layer.picking.type === PickType.SINGLE) {\n    required.values.push(templateVars.picking);\n  }\n\n  const vertexShaderResults = shaderTemplate(\n    vertexShaderComposition,\n    templateOptions,\n    required,\n  );\n\n  templateOptions = {\n    [templateVars.layerUniforms]: generateUniforms(\n      uniforms,\n      ShaderInjectionTarget.FRAGMENT,\n    ),\n    [templateVars.shader]: generateFragmentShader(shaders),\n    [templateVars.picking]: generateFragmentPickingMethod(layer),\n  };\n\n  required = {\n    name: 'fragment shader composition',\n    values: [templateVars.layerUniforms, templateVars.shader],\n  };\n\n  // If our layer is using color picking, then we must require the shader to include the ${picking} annotation\n  // To receive the fragment picking method\n  if (layer.picking.type === PickType.SINGLE) {\n    required.values.push(templateVars.picking);\n  }\n\n  const fragmentShaderResults = shaderTemplate(\n    fragmentShaderComposition,\n    templateOptions,\n    required,\n  );\n\n  return {\n    fs: fragmentShaderResults.shader,\n    materialUniforms: shaderInputMetrics.materialUniforms,\n    maxInstancesPerBuffer: shaderInputMetrics.metrics.maxInstancesPerBuffer,\n    vs: vertexShaderResults.shader,\n  };\n}\n\n/**\n * Creates the projection method fragment\n */\nfunction generateProjectionMethods() {\n  const templateOptions: { [key: string]: string } = {};\n  const required: IShaderTemplateRequirements = {\n    name: 'projection methods',\n    values: [],\n  };\n\n  const results = shaderTemplate(projectionMethods, templateOptions, required);\n\n  return results.shader;\n}\n\n/**\n * Generates the fragments for shader IO such as vertex and instance attributes\n */\nfunction generateShaderInputs<T extends Instance, U extends ILayerProps<T>>(\n  layer: Layer<T, U>,\n  vertexAttributes: IVertexAttribute[],\n  instanceAttributes: IInstanceAttribute<T>[],\n  uniforms: IUniform[],\n) {\n  const templateOptions: { [key: string]: string } = {};\n\n  let instancingInfo;\n\n  if (layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE) {\n    instancingInfo = {\n      materialUniforms: [],\n      metrics: {\n        blocksPerInstance: 0,\n        maxInstancesPerBuffer: 0,\n      },\n    };\n\n    templateOptions.instanceDataRetrieval = '';\n    templateOptions.instanceUniformDeclarations = '';\n  } else {\n    instancingInfo = generateInstanceDataLookupOptions(\n      layer,\n      templateOptions,\n      instanceAttributes,\n      uniforms,\n    );\n  }\n\n  const additionalOptions: { [key: string]: string } = {\n    [templateVars.layerUniforms]: generateUniforms(\n      uniforms,\n      ShaderInjectionTarget.VERTEX,\n    ),\n    [templateVars.vertexAttributes]: generateVertexAttributes(\n      layer,\n      vertexAttributes,\n      instanceAttributes,\n    ),\n    [templateVars.easingMethods]: generateEasingMethods(instanceAttributes),\n  };\n\n  Object.assign(templateOptions, additionalOptions);\n\n  const required: IShaderTemplateRequirements = {\n    name: 'shader input',\n    values: [\n      templateVars.instanceDataRetrieval,\n      templateVars.instanceUniformDeclarations,\n      templateVars.layerUniforms,\n      templateVars.vertexAttributes,\n      templateVars.easingMethods,\n    ],\n  };\n\n  const results = shaderTemplate(shaderInput, templateOptions, required);\n\n  return {\n    fragment: results.shader,\n    materialUniforms: instancingInfo.materialUniforms,\n    metrics: instancingInfo.metrics,\n  };\n}\n\n/**\n * Generates the easing methods for the Shader specified by each attribute\n */\nfunction generateEasingMethods<T extends Instance>(\n  instanceAttributes: IInstanceAttribute<T>[],\n) {\n  const methods = new Map<string, Map<InstanceAttributeSize, string>>();\n  let out = '';\n\n  // First dedupe the methods needed by their method name\n  instanceAttributes.forEach(attribute => {\n    if (attribute.easing && attribute.size) {\n      let methodSizes = methods.get(attribute.easing.methodName);\n\n      if (!methodSizes) {\n        methodSizes = new Map<InstanceAttributeSize, string>();\n        methods.set(attribute.easing.methodName, methodSizes);\n      }\n\n      methodSizes.set(attribute.size, attribute.easing.gpu);\n    }\n  });\n\n  const required: IShaderTemplateRequirements = {\n    name: 'Easing Method Generation',\n    values: [templateVars.easingMethod],\n  };\n\n  // Now generate the full blown method for each element. We create overloaded methods for\n  // Each method name for each vector size required\n  methods.forEach(\n    (methodSizes: Map<InstanceAttributeSize, string>, methodName: string) => {\n      methodSizes.forEach((method, size) => {\n        const sizeType = sizeToType[size];\n\n        const templateOptions: { [key: string]: string } = {\n          [templateVars.easingMethod]: `${sizeType} ${methodName}(${sizeType} start, ${sizeType} end, float t)`,\n          [templateVars.T]: `${sizeType}`,\n        };\n\n        const results = shaderTemplate(method, templateOptions, required);\n\n        out += `${results.shader}\\n`;\n      });\n    },\n  );\n\n  return out;\n}\n\n/**\n * Generates all of the uniforms that are provided by the shader IO.\n */\nfunction generateUniforms(\n  uniforms: IUniform[],\n  injectionType: ShaderInjectionTarget,\n) {\n  let out = '';\n  const injection = injectionType || ShaderInjectionTarget.VERTEX;\n\n  uniforms.forEach(uniform => {\n    uniform.shaderInjection =\n      uniform.shaderInjection || ShaderInjectionTarget.VERTEX;\n\n    if (\n      uniform.shaderInjection === injection ||\n      uniform.shaderInjection === ShaderInjectionTarget.ALL\n    ) {\n      out += `uniform ${uniform.qualifier || ''}${\n        uniform.qualifier ? ' ' : ''\n      }${sizeToType[uniform.size]} ${uniform.name};\\n`;\n    }\n  });\n\n  return out;\n}\n\n/**\n * This takes in the layer's vertex shader and transforms any required templating within the\n * shader.\n */\nfunction generateVertexShader<T extends Instance, U extends ILayerProps<T>>(\n  layer: Layer<T, U>,\n  shaders: IShaders,\n  instanceAttributes: IInstanceAttribute<T>[],\n  maxInstancesPerBuffer: number,\n  blocksPerInstance: number,\n) {\n  const templateOptions: { [key: string]: string } = {\n    [templateVars.attributes]: makeInstanceAttributeReferences(\n      layer,\n      instanceAttributes,\n      blocksPerInstance,\n    ),\n  };\n\n  const required = {\n    name: 'layer vertex shader',\n    values: [templateVars.attributes],\n  };\n\n  const results = shaderTemplate(shaders.vs, templateOptions, required);\n\n  return results.shader;\n}\n\n/**\n * This generates the header portion required for vertex picking to work\n */\nfunction generateVertexPicking(layer: Layer<any, any>) {\n  if (layer.picking.type === PickType.SINGLE) {\n    return require('../fragments/color-picking-vertex-header.vs');\n  }\n\n  return '';\n}\n\n/**\n * This generates the fragment that defines the picking methods\n */\nfunction generateFragmentPickingMethod(layer: Layer<any, any>) {\n  if (layer.picking.type === PickType.SINGLE) {\n    return require('../fragments/color-picking-method.fs');\n  }\n\n  return require('../fragments/color-picking-disabled.fs');\n}\n\nfunction generateFragmentShader(shaders: IShaders) {\n  const templateOptions: { [key: string]: string } = {};\n\n  const required: IShaderTemplateRequirements = {\n    name: 'layer fragment shader',\n    values: [],\n  };\n\n  const results = shaderTemplate(shaders.fs, templateOptions, required);\n\n  return results.shader;\n}\n\n/**\n * This generates the inline attribute references needed to be able to reference instance attribute\n * vars.\n */\nfunction makeInstanceAttributeReferences<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(\n  layer: Layer<T, U>,\n  instanceAttributes: IInstanceAttribute<T>[],\n  blocksPerInstance: number,\n) {\n  const templateOptions: { [key: string]: string } = {};\n  templateOptions[templateVars.blocksPerInstance] = `${blocksPerInstance}`;\n  templateOptions[\n    templateVars.instanceDestructuring\n  ] = makeInstanceDestructuringArray(\n    layer,\n    instanceAttributes,\n    blocksPerInstance,\n  );\n  templateOptions[templateVars.picking] = makePickingDestructuring(layer);\n\n  const required = {\n    name: 'instance attributes fragment',\n    values: [templateVars.instanceDestructuring],\n  };\n\n  // If picking is enabled, then we require the picking set up that we inject into the destructuring portion\n  // Of the shader\n  if (layer.picking.type === PickType.SINGLE) {\n    required.values.push(templateVars.picking);\n  }\n\n  const results = shaderTemplate(\n    instanceDestructuringArray,\n    templateOptions,\n    required,\n  );\n\n  return results.shader;\n}\n\n/**\n * This generates the portion of picking logic that is injected into the destructuring portion of the shader\n */\nfunction makePickingDestructuring(layer: Layer<any, any>) {\n  if (layer.picking.type === PickType.SINGLE) {\n    return require('../fragments/color-picking-assignment.vs');\n  }\n\n  return '';\n}\n\n/**\n * This generates the model attribute declarations\n */\nfunction generateVertexAttributes(\n  layer: Layer<any, any>,\n  vertexAttributes: IVertexAttribute[],\n  instanceAttributes: IInstanceAttribute<any>[],\n) {\n  let out = '';\n\n  vertexAttributes.forEach(attribute => {\n    out += `attribute ${sizeToType[attribute.size]} ${attribute.qualifier ||\n      ''}${(attribute.qualifier && ' ') || ''} ${attribute.name};\\n`;\n  });\n\n  if (layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE) {\n    out += '\\n// Instance Attributes\\n';\n    instanceAttributes.forEach(attribute => {\n      out += `attribute ${\n        sizeToType[attribute.size || 1]\n      } ${attribute.qualifier || ''}${(attribute.qualifier && ' ') ||\n        ''} ${instanceAttributeShaderName(attribute)};\\n`;\n    });\n  }\n\n  return out;\n}\n\n/**\n * This method generates the chunk of shader that is responsible for providing\n */\nfunction generateInstanceDataLookupOptions<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(\n  layer: Layer<T, U>,\n  templateOptions: { [key: string]: string },\n  instanceAttributes: IInstanceAttribute<T>[],\n  uniforms: IUniform[],\n) {\n  // This is how many uniform blocks the current device can utilize in a shader\n  const maxUniforms = WebGLStat.MAX_VERTEX_UNIFORMS;\n  // This reflects how many uniform blocks are available for instancing\n  const instanceUniformBlockCount =\n    maxUniforms - calculateUniformBlockUseage(uniforms);\n\n  // Go through the attributes provided and calculate the number of blocks requested\n  // Also sort the attributes by block and pack the block useage down.\n  const sortedInstanceAttributes = instanceAttributes\n    .slice(0)\n    .sort((a, b) => a.block - b.block);\n\n  let currentBlock = sortedInstanceAttributes[0].block;\n  let trueBlockIndex = 0;\n\n  // This tracks how much a block is used\n  const blockUseage = new Map<number, number>();\n  const innerBlockUseage = new Map<number, Map<number, boolean>>();\n\n  sortedInstanceAttributes.forEach(attribute => {\n    if (attribute.block !== currentBlock) {\n      currentBlock = attribute.block;\n      trueBlockIndex++;\n    }\n\n    const attributeSize = attribute.size || 1;\n    const oldUseage = blockUseage.get(trueBlockIndex) || 0;\n    const newUseage = oldUseage + attributeSize;\n\n    // Make sure the block isn't over used thus losing attribute information\n    if (newUseage > MAX_USE_PER_BLOCK) {\n      console.error(\n        `An instance attribute was specified that over fills the maximum allowed useage for a block.`,\n        `\\nSource Layer: ${layer.id}`,\n        `\\nMax Allowed per block ${MAX_USE_PER_BLOCK}`,\n        `\\nAttribute: ${attribute.name} Block Specified: ${attribute.block}`,\n        `\\nTotal blocks used with this attribute: ${newUseage}`,\n      );\n      return;\n    }\n\n    // Store how much of the block is utilized\n    blockUseage.set(trueBlockIndex, newUseage);\n    // We can now auto specify the inner index of where the attribute lines up within the block\n    attribute.blockIndex = oldUseage;\n\n    // Now we examine the attributes request of use inside the block and make sure there is no\n    // Overlap\n    const innerUseage =\n      innerBlockUseage.get(trueBlockIndex) || new Map<number, boolean>();\n\n    if (attribute.blockIndex + attributeSize > MAX_USE_PER_BLOCK) {\n      console.error(\n        `An instance attribute was specified that would fill indices greater than the block allows.`,\n        `\\nMax index per block ${MAX_USE_PER_BLOCK}`,\n        `\\nAttribute: ${attribute.name} Block Index: ${\n          attribute.blockIndex\n        } Size: ${attribute.size} Block Index + Size: ${attribute.blockIndex +\n          (attribute.size || 1)}`,\n      );\n\n      return;\n    }\n\n    for (\n      let i = attribute.blockIndex;\n      i < attribute.blockIndex + attributeSize;\n      ++i\n    ) {\n      if (innerUseage.get(i)) {\n        console.error(\n          `An instance attribute was specified who's block index overaps another attributes useage`,\n          `\\nMax index per block ${MAX_USE_PER_BLOCK}`,\n          `\\nAttribute: ${attribute.name} Block Index: ${\n            attribute.blockIndex\n          } Size: ${attribute.size} Block Index + Size: ${attribute.blockIndex +\n            (attribute.size || 1)}`,\n        );\n\n        return;\n      }\n    }\n\n    // Adjust the attribute to reflect the actual bock it is using\n    attribute.block = trueBlockIndex;\n  });\n\n  const blocksPerInstance = trueBlockIndex + 1;\n  // This determines how many instances our allowed uniforms will allow for a single draw call\n  const maxInstancesPerBuffer = Math.floor(\n    instanceUniformBlockCount / blocksPerInstance,\n  );\n\n  // Generate the decision tree and uniform declarations\n  const instancingMetrics = makeUniformInstanceDataOptions(\n    templateOptions,\n    maxInstancesPerBuffer,\n    blocksPerInstance,\n    sortedInstanceAttributes,\n  );\n\n  return {\n    materialUniforms: instancingMetrics.materialUniforms,\n    metrics: {\n      blocksPerInstance,\n      maxInstancesPerBuffer,\n    },\n  };\n}\n\n/**\n * This generates all of the necessary templating information from uniform-instance-data\n * in order to provide an instance data getter for the application.\n */\nfunction makeUniformInstanceDataOptions<T extends Instance>(\n  templateOptions: { [key: string]: string },\n  maxInstancesPerBuffer: number,\n  blocksPerInstance: number,\n  instanceAttributes: IInstanceAttribute<T>[],\n) {\n  // Make a list containing all instance indicies that will be utilized and will be split\n  // Out into the decision tree\n  const instances = [];\n\n  for (let i = 0; i < maxInstancesPerBuffer; ++i) {\n    instances.push(i);\n  }\n\n  // Make the uniform declaration. Uniform declaration simultaneously gives us the material uniforms necessary\n  // To apply to our three material.\n  const uniformMetrics = makeInstanceUniformDeclaration(\n    maxInstancesPerBuffer * blocksPerInstance,\n    instanceAttributes,\n  );\n\n  templateOptions[templateVars.instanceUniformDeclarations] =\n    uniformMetrics.fragment;\n  templateOptions[templateVars.instanceBlockCount] = `${blocksPerInstance}`;\n\n  // This method produces the data retrieval method for array instancing\n  templateOptions[\n    templateVars.instanceDataRetrieval\n  ] = makeInstanceRetrievalArray(blocksPerInstance);\n\n  return {\n    materialUniforms: uniformMetrics.materialUniforms,\n  };\n}\n\n/**\n * This generates the declaration of all of the individual uniform registers for instancing.\n */\nfunction makeInstanceUniformDeclaration<T extends Instance>(\n  instanceUniformBlockCount: number,\n  attributes: IInstanceAttribute<T>[],\n) {\n  let out = '';\n  const blockQualifierDedup = new Map<number, Map<string, boolean>>();\n  let maxBlock = 0;\n\n  // Dedup the attributes specified for the\n  attributes.forEach(attribute => {\n    const qualifiers =\n      blockQualifierDedup.get(attribute.block) || new Map<string, boolean>();\n    // Make sure the qualifier is added for the block!\n    if (attribute.qualifier) {\n      qualifiers.set(attribute.qualifier, true);\n    }\n\n    // Get the max block in use\n    maxBlock = Math.max(maxBlock, attribute.block);\n  });\n\n  // Generate the full string for the specified qualifiers\n  const blockQualifiers = new Map<number, string>();\n\n  blockQualifierDedup.forEach((qualifierList, block) => {\n    const allQualifiers = Array.from(qualifierList.keys());\n    blockQualifiers.set(block, `${allQualifiers.join(' ')} `);\n  });\n\n  // Generate our uniform declarations\n  // Const blockCount = maxBlock + 1;\n\n  // This method produces the instancing declaration for a search tree.\n  // *out += makeUniformDecisionTreeDeclarations(instanceUniformBlockCount, blockCount, blockQualifiers, materialUniforms);\n  // This method produces the instancing declaration for an instancing array\n  const declaration = makeUniformArrayDeclaration(instanceUniformBlockCount);\n  out += declaration.fragment;\n\n  out += `\\n`;\n\n  return {\n    fragment: out,\n    materialUniforms: declaration.materialUniforms,\n  };\n}\n","import * as Three from 'three';\nimport { WebGLRenderTarget } from 'three';\nimport { ImageInstance } from '../base-layers/images';\nimport { LabelInstance } from '../base-layers/labels';\nimport { Instance } from '../instance-provider/instance';\nimport { Bounds } from '../primitives/bounds';\nimport { Box } from '../primitives/box';\nimport { injectFragments } from '../shaders/util/attribute-generation';\nimport { PickType } from '../types';\nimport { FrameMetrics } from '../types';\nimport { analyzeColorPickingRendering } from '../util/color-picking-analysis';\nimport { DataBounds } from '../util/data-bounds';\nimport { Vec2 } from '../util/vector';\nimport { EventManager } from './event-manager';\nimport { LayerMouseEvents } from './event-managers/layer-mouse-events';\nimport { ILayerProps, Layer } from './layer';\nimport {\n  generateDefaultScene,\n  IDefaultSceneElements,\n} from './layer-processing/generate-default-scene';\nimport { generateLayerGeometry } from './layer-processing/generate-layer-geometry';\nimport { generateLayerMaterial } from './layer-processing/generate-layer-material';\nimport { generateLayerModel } from './layer-processing/generate-layer-model';\nimport { injectShaderIO } from './layer-processing/inject-shader-io';\nimport {\n  getLayerBufferType,\n  makeLayerBufferManager,\n} from './layer-processing/layer-buffer-type';\nimport { MouseEventManager, SceneView } from './mouse-event-manager';\nimport { ISceneOptions, Scene } from './scene';\nimport { AtlasManager } from './texture';\nimport { IAtlasOptions } from './texture/atlas';\nimport { AtlasResourceManager } from './texture/atlas-resource-manager';\nimport { ClearFlags, View } from './view';\n\nexport interface ILayerSurfaceOptions {\n  /**\n   * These are the atlas resources we want available that our layers can be provided to utilize\n   * for their internal processes.\n   */\n  atlasResources?: IAtlasOptions[];\n  /**\n   * This is the color the canvas will be set to.\n   */\n  background: [number, number, number, number];\n  /**\n   * If this is provided, it will use this context for rendering. If a string is provided\n   * it will search for the canvas context by id.\n   */\n  context?: WebGLRenderingContext | HTMLCanvasElement | string;\n  /**\n   * This is the event managers to respond to the mouse events.\n   */\n  eventManagers?: EventManager[];\n  /**\n   * Set to true to allow this surface to absorb and handle wheel events from the mouse.\n   */\n  handlesWheelEvents?: boolean;\n  /**\n   * This specifies the density of rendering in the surface. The default value is window.devicePixelRatio to match the\n   * monitor for optimal clarity. Using a value of 1 will be acceptable, will not get high density renders, but will\n   * have better performance if needed.\n   */\n  pixelRatio?: number;\n  /**\n   * This sets up the available scenes the surface will have to work with. Layers then can\n   * reference the scene by it's scene property. The order of the scenes here is the drawing\n   * order of the scenes.\n   */\n  scenes?: ISceneOptions[];\n}\n\nconst DEFAULT_BACKGROUND_COLOR = new Three.Color(1.0, 1.0, 1.0);\n\nfunction isCanvas(val: any): val is HTMLCanvasElement {\n  return Boolean(val.getContext);\n}\n\nfunction isString(val: any): val is String {\n  return Boolean(val.substr);\n}\n\nfunction isWebGLContext(val: any): val is WebGLRenderingContext {\n  return Boolean(val.canvas);\n}\n\nexport interface ILayerConstructable<T extends Instance> {\n  new (props: ILayerProps<T>): Layer<any, any>;\n}\n\n/**\n * This is a pair of a Class Type and the props to be applied to that class type.\n */\nexport type LayerInitializer = [\n  ILayerConstructable<Instance> & { defaultProps: ILayerProps<Instance> },\n  ILayerProps<Instance>\n];\n\n/**\n * Used for reactive layer generation and updates.\n */\nexport function createLayer<T extends Instance, U extends ILayerProps<T>>(\n  layerClass: ILayerConstructable<T> & { defaultProps: U },\n  props: U,\n): LayerInitializer {\n  return [layerClass, props];\n}\n\n/**\n * This is a manager for layers. It will use voidgl layers to intelligently render resources\n * as efficiently as possible. Layers will be rendered in the order they are provided and this\n * surface will provide some basic camera controls by default.\n */\nexport class LayerSurface {\n  /** This is the atlas manager that will help with modifying and tracking atlas' generated for the layers */\n  private atlasManager: AtlasManager = new AtlasManager();\n  /** This is the gl context this surface is rendering to */\n  private context: WebGLRenderingContext;\n  /** This is the current viewport the renderer state is in */\n  currentViewport = new Map<Three.WebGLRenderer, Box>();\n  /**\n   * This is the default scene that layers get added to if they do not specify a valid Scene.\n   * This scene by default only has a single default view.\n   */\n  defaultSceneElements: IDefaultSceneElements;\n  /**\n   * This is the metrics of the current running frame\n   */\n  frameMetrics: FrameMetrics = {\n    currentFrame: 0,\n    currentTime: Date.now() | 0,\n    previousTime: Date.now() | 0,\n  };\n  /**\n   * This is used to help resolve concurrent draws. There are some very async operations that should\n   * not overlap in draw calls.\n   */\n  private isBufferingAtlas = false;\n  /** This is all of the layers in this manager by their id */\n  layers = new Map<string, Layer<any, any>>();\n  /** This manages the mouse events for the current canvas context */\n  private mouseManager: MouseEventManager;\n  /**\n   * This is the renderer that is meant for rendering the picking pass. We have a separate renderer so we can disable\n   * over complicated features like antialiasing which would ruin the picking pass.\n   */\n  pickingRenderer: Three.WebGLRenderer;\n  /** This is a target used to perform rendering our picking pass */\n  pickingTarget: Three.WebGLRenderTarget;\n  /** This is the density the rendering renders for the surface */\n  pixelRatio: number = window.devicePixelRatio;\n  /** This is the THREE render system we use to render scenes with views */\n  renderer: Three.WebGLRenderer;\n  /** This is the resource manager that handles resource requests for instances */\n  resourceManager: AtlasResourceManager;\n  /**\n   * This is all of the available scenes and their views for this surface. Layers reference the IDs\n   * of the scenes and the views to be a part of their rendering state.\n   */\n  scenes = new Map<string, Scene>();\n  /**\n   * This is all of the views currently generated for this surface paired with the scene they render.\n   */\n  sceneViews: SceneView[] = [];\n  /** When set to true, the next render will make sure color picking is updated for layer interactions */\n  updateColorPick?: {\n    mouse: Vec2;\n    views: View[];\n  };\n  /**\n   * This flags all layers by id for disposal at the end of every render. A Layer must be recreated\n   * after each render in order to clear it's disposal flag. This is the trick to making this a\n   * reactive system.\n   */\n  willDisposeLayer = new Map<string, boolean>();\n\n  /** Read only getter for the gl context */\n  get gl() {\n    return this.context;\n  }\n\n  /**\n   * This adds a layer to the manager which will manage all of the resource lifecycles of the layer\n   * as well as additional helper injections to aid in instancing and shader i/o.\n   */\n  private addLayer<T extends Instance, U extends ILayerProps<T>, V>(\n    layer: Layer<T, U>,\n  ): Layer<T, U> {\n    if (!layer.id) {\n      console.warn('All layers must have an id');\n      return layer;\n    }\n\n    if (this.layers.get(layer.id)) {\n      console.warn('All layer\\'s ids must be unique per layer manager');\n      return layer;\n    }\n\n    // We add the layer to our management\n    this.layers.set(layer.id, layer);\n    // Now we initialize the layer's gl components\n    this.initLayer(layer);\n\n    return layer;\n  }\n\n  /**\n   * The performs all of the needed updates that layers need to commit to the scene and buffers\n   * to be ready for a draw pass. This is callable outside of the draw loop to allow for specialized\n   * procedures or optimizations to take place, where incremental updates to the buffers would make\n   * the most sense.\n   *\n   * @param time The start time of the given frame\n   * @param frameIncrement When true, the frame count for the frame metrics will increment\n   * @param onViewReady Callback for when all of the layers of a scene view have been committed\n   *                    and are thus potentially ready to be rendered.\n   */\n  async commit(\n    time?: number,\n    frameIncrement?: boolean,\n    onViewReady?: (\n      scene: Scene,\n      view: View,\n      pickingPass: Layer<any, any>[],\n    ) => void,\n  ) {\n    if (!this.gl) return;\n\n    // We are rendering a new frame so increment our frame count\n    if (frameIncrement) this.frameMetrics.currentFrame++;\n    this.frameMetrics.previousTime = this.frameMetrics.currentTime;\n\n    // If no manual time was provided, we shall use Date.now in 32 bit format\n    if (time === undefined) {\n      this.frameMetrics.currentTime = Date.now() | 0;\n    } else {\n      // If this is our first frame and we have a manual time entry, then we first need to sync up\n      // The manual time as our previous timing.\n      if (this.frameMetrics.previousTime === this.frameMetrics.currentTime) {\n        this.frameMetrics.previousTime = time;\n      }\n\n      this.frameMetrics.currentTime = time;\n    }\n\n    // Get the scenes in their added order\n    const scenes = Array.from(this.scenes.values());\n    const validLayers: { [key: string]: Layer<any, any> } = {};\n    const erroredLayers: { [key: string]: [Layer<any, any>, Error] } = {};\n\n    // Loop through scenes\n    for (let i = 0, end = scenes.length; i < end; ++i) {\n      const scene = scenes[i];\n      const views = Array.from(scene.viewById.values());\n      const layers = scene.layers;\n\n      // Make sure the layers are depth sorted\n      scene.sortLayers();\n\n      // Loop through the views\n      for (let k = 0, endk = views.length; k < endk; ++k) {\n        const view = views[k];\n        // When this flags true, a picking pass will be rendered for the provided scene / view\n        const pickingPass: Layer<any, any>[] = [];\n\n        // We must perform any operations necessary to make the view camera fit the viewport\n        // Correctly\n        view.fitViewtoViewport(\n          new Bounds({\n            height: this.context.canvas.height,\n            width: this.context.canvas.width,\n            x: 0,\n            y: 0,\n          }),\n        );\n\n        // Let the layers update their uniforms before the draw\n        for (let j = 0, endj = layers.length; j < endj; ++j) {\n          // Get the layer to be rendered in the scene\n          const layer = layers[j];\n          // Update the layer with the view it is about to be rendered with\n          layer.view = view;\n          // Make sure the layer is given the opportunity to update all of it's uniforms\n          // To match the view state and update any unresolved diffs internally\n          try {\n            layer.draw();\n            validLayers[layer.id] = layer;\n          } catch (err) {\n            if (!erroredLayers[layer.id]) {\n              erroredLayers[layer.id] = [layer, err];\n            }\n          }\n\n          // If this layer specifies a picking draw pass, then we shall store it in the current draw order\n          // For that next step\n          if (layer.picking.type === PickType.SINGLE) {\n            pickingPass.push(layer);\n          }\n        }\n\n        if (onViewReady) {\n          onViewReady(scene, view, pickingPass);\n        }\n      }\n    }\n\n    // get the layers with errors flagged for them\n    const errors = Object.values(erroredLayers);\n\n    if (errors.length > 0) {\n      const passed = Object.values(validLayers);\n\n      console.warn(\n        'Some layers errored during their draw update. These layers will be removed. They can be re-added if render() is called again:',\n        errors.map(err => err[0].id),\n      );\n\n      // Output each layer and why it errored\n      errors.forEach(err => {\n        console.warn(`Layer ${err[0].id} removed for the following error:`);\n        if (err[1]) console.error(err[1].stack || err[1].message);\n      });\n\n      // Re-render but only include non-errored layers\n      this.render(passed.map(layer => layer.initializer));\n    }\n  }\n\n  /**\n   * Free all resources consumed by this surface that gets applied to the GPU.\n   */\n  destroy() {\n    this.layers.forEach(layer => layer.destroy());\n    this.resourceManager.destroy();\n    this.mouseManager.destroy();\n    this.sceneViews.forEach(sceneView => sceneView.scene.destroy());\n    this.renderer.dispose();\n    this.pickingRenderer.dispose();\n    this.currentViewport.clear();\n\n    // TODO: Instances should be implementing destroy for these clean ups.\n    LabelInstance.destroy();\n    ImageInstance.destroy();\n  }\n\n  /**\n   * This is the draw loop that must be called per frame for updates to take effect and display.\n   *\n   * @param time This is an optional time flag so one can manually control the time flag for the frame.\n   *             This will affect animations and other automated gpu processes.\n   */\n  async draw(time?: number) {\n    if (!this.gl) return;\n\n    // Make the layers commit their changes to the buffers then draw each scene view on\n    // Completion.\n    this.commit(time, true, (scene, view, pickingPass) => {\n      // Now perform the rendering\n      this.drawSceneView(scene.container, view);\n\n      // If a layer needs a picking pass, then perform a picking draw pass only\n      // if a request for the color pick has been made, then we query the pixels rendered to our picking target\n      if (pickingPass.length > 0 && this.updateColorPick) {\n        // Get the requested metrics\n        const mouse = this.updateColorPick.mouse;\n        const views = this.updateColorPick.views;\n\n        // Only if the view is interacted with should we both with rendering\n        if (\n          view.id !== this.defaultSceneElements.view.id &&\n          views.indexOf(view) > -1\n        ) {\n          // Picking uses a pixel ratio of 1\n          view.pixelRatio = 1.0;\n          // Get the current flags for the view\n          const flags = view.clearFlags.slice(0);\n          // Set color rendering flasg\n          view.clearFlags = [ClearFlags.COLOR, ClearFlags.DEPTH];\n\n          // We must perform any operations necessary to make the view camera fit the viewport\n          // Correctly with the possibly adjusted pixel ratio\n          view.fitViewtoViewport(\n            new Bounds({\n              height: this.context.canvas.height / this.pixelRatio,\n              width: this.context.canvas.width / this.pixelRatio,\n              x: 0,\n              y: 0,\n            }),\n          );\n\n          // We must redraw the layers so they will update their uniforms to adapt to a picking pass\n          for (let j = 0, endj = pickingPass.length; j < endj; ++j) {\n            const layer = pickingPass[j];\n            layer.picking.currentPickMode = PickType.SINGLE;\n            try {\n              layer.draw();\n            } catch (err) {\n              /** No-op, the first draw should have output an error for bad draw calls */\n            }\n            layer.picking.currentPickMode = PickType.NONE;\n          }\n\n          // Draw the picking container for the scene with our view long with our specialized picking renderer\n          // NOTE: Neat trick, just remove 'this.pickingTarget' from the argument and add\n          // canvas.parentNode.appendChild(this.pickingRenderer.getContext().canvas);\n          // below where the picking Target is created and you will see what is being rendered to the color picking buffer\n          this.drawSceneView(\n            scene.pickingContainer,\n            view,\n            this.pickingRenderer,\n            this.pickingTarget,\n          );\n\n          // Make our metrics for how much of the image we wish to analyze\n          const pickWidth = 5;\n          const pickHeight = 5;\n          const numBytesPerColor = 4;\n          const out = new Uint8Array(pickWidth * pickHeight * numBytesPerColor);\n\n          // Read the pixels out\n          // TODO: We need to defer this reading to next frame as the rendering MUST be completed before a readPixels\n          // operation can complete. Thus in complex rendering situations that pushes the GPU, this could be a MAJOR bottleneck.\n          this.pickingRenderer.readRenderTargetPixels(\n            this.pickingTarget,\n            mouse[0] - view.screenBounds.x - pickWidth / 2,\n            view.screenBounds.height -\n              (mouse[1] - view.screenBounds.y) -\n              pickHeight / 2,\n            pickWidth,\n            pickHeight,\n            out,\n          );\n\n          // Analyze the rendered color data for the picking routine\n          const pickingData = analyzeColorPickingRendering(\n            mouse,\n            out,\n            pickWidth,\n            pickHeight,\n          );\n\n          // We must redraw the layers so they will update their uniforms to adapt to a picking pass\n          for (let j = 0, endj = pickingPass.length; j < endj; ++j) {\n            const layer = pickingPass[j];\n\n            if (layer.picking.type === PickType.SINGLE) {\n              layer.interactions.colorPicking = pickingData;\n            }\n          }\n\n          // Return the pixel ratio back to the rendered ratio\n          view.pixelRatio = this.pixelRatio;\n          // Return the view's clear flags\n          view.clearFlags = flags;\n\n          // After reverting the pixel ratio, we must return to the state we came from so that mouse interactions\n          // will work properly\n          view.fitViewtoViewport(\n            new Bounds({\n              height: this.context.canvas.height,\n              width: this.context.canvas.width,\n              x: 0,\n              y: 0,\n            }),\n          );\n        }\n      }\n    });\n\n    // After we have drawn our views of our scenes, we can now ensure all of the bounds\n    // Are updated in the interactions and flag our interactions ready for mouse input\n    if (this.mouseManager.waitingForRender) {\n      this.sceneViews.forEach(sceneView => {\n        sceneView.bounds = new DataBounds(sceneView.view.screenBounds);\n        sceneView.bounds.data = sceneView;\n      });\n\n      this.mouseManager.waitingForRender = false;\n    }\n\n    // Now that all of our layers have performed updates to everything, we can now dequeue\n    // All resource requests\n    // We create this gate in case multiple draw calls flow through before a buffer opertion is completed\n    if (!this.isBufferingAtlas) {\n      this.isBufferingAtlas = true;\n      const didBuffer = await this.resourceManager.dequeueRequests();\n      this.isBufferingAtlas = false;\n\n      // If buffering did occur and completed, then we should be performing a draw to ensure all of the\n      // Changes are committed and pushed out.\n      if (didBuffer) this.draw();\n    }\n\n    // Clear out the flag requesting a pick pass so we don't perform a pick render pass unless we have\n    // another requested from mouse interactions\n    delete this.updateColorPick;\n  }\n\n  /**\n   * This finalizes everything and sets up viewports and clears colors and performs the actual render step\n   */\n  private drawSceneView(\n    scene: Three.Scene,\n    view: View,\n    renderer?: Three.WebGLRenderer,\n    target?: Three.WebGLRenderTarget,\n  ) {\n    renderer = renderer || this.renderer;\n\n    const offset = { x: view.viewBounds.left, y: view.viewBounds.top };\n    const size = view.viewBounds;\n    const rendererSize = renderer.getSize();\n    const pixelRatio = renderer.getPixelRatio();\n    rendererSize.width *= pixelRatio;\n    rendererSize.height *= pixelRatio;\n    const background = view.background;\n    const context = renderer.getContext();\n\n    // Something is up with threejs that does not allow us to set viewport x and y values. So for targets\n    // We simply size the target to the view size and render. Thus scissoring is not required\n    if (!target) {\n      // Set the scissor rectangle.\n      context.enable(context.SCISSOR_TEST);\n      context.scissor(\n        offset.x,\n        rendererSize.height - offset.y - size.height,\n        size.width,\n        size.height,\n      );\n      // If a background is established, we should clear the background color\n      // Specified for this context\n      if (view.background) {\n        // Clear the rect of color and depth so the region is totally it's own\n        context.clearColor(\n          background[0],\n          background[1],\n          background[2],\n          background[3],\n        );\n      }\n    }\n\n    // Get the view's clearing preferences\n    if (view.clearFlags) {\n      // For targets, we must also perform clear operations\n      if (target) {\n        // TODO: This is frustrating. Right now we can't specify and set the viewport for a render target\n        // Possibly with Threejs going away we can actually be more explcit for the render area to a render target\n        // and not cause this overhead of resizing the render target for every picking pass\n        target.setSize(size.width, size.height);\n        renderer.setRenderTarget(target);\n        renderer.clear(\n          view.clearFlags.indexOf(ClearFlags.COLOR) > -1,\n          view.clearFlags.indexOf(ClearFlags.DEPTH) > -1,\n          view.clearFlags.indexOf(ClearFlags.STENCIL) > -1,\n        );\n      } else {\n        renderer\n          .getContext()\n          .clear(\n            (view.clearFlags.indexOf(ClearFlags.COLOR) > -1\n              ? context.COLOR_BUFFER_BIT\n              : 0x0) |\n              (view.clearFlags.indexOf(ClearFlags.DEPTH) > -1\n                ? context.DEPTH_BUFFER_BIT\n                : 0x0) |\n              (view.clearFlags.indexOf(ClearFlags.STENCIL) > -1\n                ? context.STENCIL_BUFFER_BIT\n                : 0x0),\n          );\n      }\n    }\n\n    // Default clearing is depth and color\n    else {\n      // For targets, we must also perform clear operations\n      if (target) {\n        // TODO: This is frustrating. Right now we can't specify and set the viewport for a render target\n        // Possibly with Threejs going away we can actually be more explcit for the render area to a render target\n        // and not cause this overhead of resizing the render target for every picking pass\n        target.setSize(size.width, size.height);\n        renderer.setRenderTarget(target);\n        renderer.clear(true, true);\n      } else {\n        context.clear(context.COLOR_BUFFER_BIT | context.DEPTH_BUFFER_BIT);\n      }\n    }\n\n    // Make sure the viewport is set properly for the next render\n    renderer.setViewport(\n      offset.x / pixelRatio,\n      offset.y / pixelRatio,\n      size.width,\n      size.height,\n    );\n    // Render the scene with the provided view metrics\n    renderer.render(scene, view.viewCamera.baseCamera, target);\n  }\n\n  /**\n   * This allows for querying a view's screen bounds. Null is returned if the view id\n   * specified does not exist.\n   */\n  getViewSize(viewId: string): Bounds | null {\n    for (const sceneView of this.sceneViews) {\n      if (sceneView.view.id === viewId) {\n        return sceneView.view.screenBounds;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * This queries a view's window into a world's space.\n   */\n  getViewWorldBounds(viewId: string): Bounds | null {\n    for (const sceneView of this.sceneViews) {\n      if (sceneView.view.id === viewId) {\n        const view = sceneView.view;\n\n        if (view.screenBounds) {\n          const topLeft = view.viewToWorld({ x: 0, y: 0 });\n          const bottomRight = view.screenToWorld({\n            x: view.screenBounds.right,\n            y: view.screenBounds.bottom,\n          });\n\n          return new Bounds({\n            bottom: bottomRight.y,\n            left: topLeft.x,\n            right: bottomRight.x,\n            top: topLeft.y,\n          });\n        } else {\n          return null;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * This is the beginning of the system. This should be called immediately after the surface is constructed.\n   * We make this mandatory outside of the constructor so we can make it follow an async pattern.\n   */\n  async init(options: ILayerSurfaceOptions) {\n    // Make sure our desired pixel ratio is set up\n    this.pixelRatio = options.pixelRatio || this.pixelRatio;\n    // Make sure we have a gl context to work with\n    this.setContext(options.context);\n\n    if (this.gl) {\n      // Initialize our GL needs that set the basis for rendering\n      this.initGL(options);\n      // Initialize our event manager that handles mouse interactions/gestures with the canvas\n      this.initMouseManager(options);\n      // Initialize any resources requested or needed, such as textures or rendering surfaces\n      await this.initResources(options);\n    } else {\n      console.warn(\n        'Could not establish a GL context. Layer Surface will be unable to render',\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * This initializes the Canvas GL contexts needed for rendering.\n   */\n  private initGL(options: ILayerSurfaceOptions) {\n    if (!this.context) {\n      console.error(\n        'Can not initialize Layer Surface as a valid GL context was not established.',\n      );\n      return;\n    }\n\n    // Get the canvas of our context to set up our Three settings\n    const canvas = this.context.canvas;\n    // Get the starting width and height so adjustments don't affect it\n    const width = canvas.width;\n    const height = canvas.height;\n\n    // Generate the renderer along with it's properties\n    this.renderer = new Three.WebGLRenderer({\n      // Context supports rendering to an alpha canvas only if the background color has a transparent\n      // Alpha value.\n      alpha: options.background && options.background[3] < 1.0,\n      // Yes to antialias! Make it preeeeetty!\n      antialias: true,\n      // Make three use an existing canvas rather than generate another\n      canvas,\n      // TODO: This should be toggleable. If it's true it allows us to snapshot the rendering in the canvas\n      //       But we dont' always want it as it makes performance drop a bit.\n      preserveDrawingBuffer: true,\n    });\n\n    // Generate a renderer for the picking pass\n    this.pickingRenderer = new Three.WebGLRenderer({\n      // Context supports rendering to an alpha canvas only if the background color has a transparent\n      // Alpha value.\n      alpha: false,\n      // Picking shall not\n      antialias: false,\n      // Do not need this for picking\n      preserveDrawingBuffer: true,\n    });\n\n    // NOTE: Uncomment this plus remove this.pickingTarget from the drawSceneView of the color picking pass\n    // to view the colors rendered to the color picking buffer. This disables the interactions but helps\n    // debug what's going on with shaders etc\n    // canvas.parentNode.appendChild(this.pickingRenderer.getContext().canvas);\n\n    // We want clearing to be controlled via the layer\n    this.renderer.autoClear = false;\n    // This sets the pixel ratio to handle differing pixel densities in screens\n    this.setRendererSize(width, height);\n    // Set the pixel ratio to match the pixel density of the monitor in use\n    this.renderer.setPixelRatio(this.pixelRatio);\n\n    // Applies the background color and establishes whether or not the context supports\n    // Alpha or not\n    if (options.background) {\n      this.renderer.setClearColor(\n        new Three.Color(\n          options.background[0],\n          options.background[1],\n          options.background[2],\n        ),\n        options.background[3],\n      );\n    }\n\n    // If a background color was not established, then we set a default background color\n    else {\n      this.renderer.setClearColor(DEFAULT_BACKGROUND_COLOR);\n    }\n\n    // We want clearing to be controlled via the layer\n    this.pickingRenderer.autoClear = false;\n    // Picking does not need retina style precision\n    this.pickingRenderer.setPixelRatio(1.0);\n    // Applies the background color and establishes whether or not the context supports\n    // Alpha or not\n    this.pickingRenderer.setClearColor(new Three.Color(0, 0, 0), 1);\n\n    // Once we have made our renderer we now make us a default scene to which we can add objects\n    this.defaultSceneElements = generateDefaultScene(this.context);\n    this.defaultSceneElements.view.background = options.background;\n    // Set the default scene\n    this.scenes.set(\n      this.defaultSceneElements.scene.id,\n      this.defaultSceneElements.scene,\n    );\n    // Make a scene view depth tracker so we can track the order each scene view combo is drawn\n    let sceneViewDepth = 0;\n\n    // Make a SceneView for the default scene and view for mouse interactions\n    this.sceneViews.push({\n      depth: ++sceneViewDepth,\n      scene: this.defaultSceneElements.scene,\n      view: this.defaultSceneElements.view,\n    });\n\n    // Turn on the scissor test to keep the rendering clipped within the\n    // Render region of the context\n    this.context.enable(this.context.SCISSOR_TEST);\n\n    // Add the requested scenes to the surface and apply the necessary defaults\n    if (options.scenes) {\n      options.scenes.forEach(sceneOptions => {\n        // Make us a new scene based on the requested options\n        const newScene = new Scene(sceneOptions);\n\n        // Make sure the default view is available for each scene\n        // IFF no view is provided for the scene\n        if (sceneOptions.views.length === 0) {\n          newScene.addView(this.defaultSceneElements.view);\n\n          this.sceneViews.push({\n            depth: ++sceneViewDepth,\n            scene: newScene,\n            view: this.defaultSceneElements.view,\n          });\n        }\n\n        // Generate the views requested for the scene\n        sceneOptions.views.forEach(viewOptions => {\n          const newView = new View(viewOptions);\n          newView.camera = newView.camera || this.defaultSceneElements.camera;\n          newView.viewCamera =\n            newView.viewCamera || this.defaultSceneElements.viewCamera;\n          newView.viewport =\n            newView.viewport || this.defaultSceneElements.viewport;\n          newView.pixelRatio = this.pixelRatio;\n          newScene.addView(newView);\n\n          for (const sceneView of this.sceneViews) {\n            if (sceneView.view.id === newView.id) {\n              console.warn(\n                'You can NOT have two views with the same id. Please use unique identifiers for every view generated.',\n              );\n            }\n          }\n\n          this.sceneViews.push({\n            depth: ++sceneViewDepth,\n            scene: newScene,\n            view: newView,\n          });\n        });\n\n        this.scenes.set(sceneOptions.key, newScene);\n      });\n    }\n  }\n\n  /**\n   * This does special initialization by gathering the layers shader IO, generates a material\n   * and injects special automated uniforms and attributes to make instancing work for the\n   * shader.\n   */\n  private initLayer<T extends Instance, U extends ILayerProps<T>, V>(\n    layer: Layer<T, U>,\n  ): Layer<T, U> {\n    // Set the layer's parent surface here\n    layer.surface = this;\n    // Set the resource manager this surface utilizes to the layer\n    layer.resource = this.resourceManager;\n    // For the sake of initializing uniforms to the correct values, we must first add the layer to it's appropriate\n    // Scene so that the necessary values will be in place for the sahder IO\n    const scene = this.addLayerToScene(layer);\n    // Get the shader metrics the layer desires\n    const shaderIO = layer.initShader();\n    // Clean out nulls provided as a convenience to the layer\n    shaderIO.instanceAttributes = (shaderIO.instanceAttributes || []).filter(\n      Boolean,\n    );\n    shaderIO.vertexAttributes = (shaderIO.vertexAttributes || []).filter(\n      Boolean,\n    );\n    shaderIO.uniforms = (shaderIO.uniforms || []).filter(Boolean);\n    // Get the injected shader IO attributes and uniforms\n    const { vertexAttributes, instanceAttributes, uniforms } = injectShaderIO(\n      this.gl,\n      layer,\n      shaderIO,\n    );\n    // After all of the shader IO is established, let's calculate the appropriate buffering strategy\n    // For the layer.\n    getLayerBufferType(this.gl, layer, vertexAttributes, instanceAttributes);\n    // Generate the actual shaders to be used by injecting all of the necessary fragments and injecting\n    // Instancing fragments\n    const shaderMetrics = injectFragments(\n      layer,\n      shaderIO,\n      vertexAttributes,\n      instanceAttributes,\n      uniforms,\n    );\n    // Generate the geometry this layer will be utilizing\n    const geometry = generateLayerGeometry(\n      layer,\n      shaderMetrics.maxInstancesPerBuffer,\n      vertexAttributes,\n      shaderIO.vertexCount,\n    );\n    // This is the material that is generated for the layer that utilizes all of the generated and\n    // Injected shader IO and shader fragments\n    const material = generateLayerMaterial(\n      layer,\n      shaderMetrics.vs,\n      shaderMetrics.fs,\n      uniforms,\n      shaderMetrics.materialUniforms,\n    );\n    // And now we can now generate the mesh that will be added to the scene\n    const model = generateLayerModel(layer, geometry, material);\n\n    // Now that all of the elements of the layer are complete, let us apply them to the layer\n    layer.geometry = geometry;\n    layer.instanceAttributes = instanceAttributes;\n    layer.instanceVertexCount = shaderIO.vertexCount;\n    layer.material = material;\n    layer.maxInstancesPerBuffer = shaderMetrics.maxInstancesPerBuffer;\n    layer.model = model;\n    layer.uniforms = uniforms;\n    layer.vertexAttributes = vertexAttributes;\n\n    // Generate the correct buffering strategy for the layer\n    makeLayerBufferManager(this.gl, layer, scene);\n\n    return layer;\n  }\n\n  /**\n   * Initializes elements for handling mouse interactions with the canvas.\n   */\n  private initMouseManager(options: ILayerSurfaceOptions) {\n    // We must inject an event manager to broadcast events through the layers themselves\n    const eventManagers: EventManager[] = ([\n      new LayerMouseEvents(this),\n    ] as EventManager[]).concat(options.eventManagers || []);\n\n    // Generate the mouse manager for the layer\n    this.mouseManager = new MouseEventManager(\n      this.context.canvas,\n      this.sceneViews,\n      eventManagers,\n      options.handlesWheelEvents,\n    );\n  }\n\n  /**\n   * This initializes resources needed or requested such as textures or render surfaces.\n   */\n  private async initResources(options: ILayerSurfaceOptions) {\n    // Tell our manager to generate all of the atlas' requested for surface\n    if (options.atlasResources) {\n      for (const resource of options.atlasResources) {\n        await this.atlasManager.createAtlas(resource);\n      }\n    }\n\n    // Initialize our resource manager with the atlas manager\n    this.resourceManager = new AtlasResourceManager({\n      atlasManager: this.atlasManager,\n    });\n  }\n\n  /**\n   * This finds the scene and view the layer belongs to based on the layer's props. For invalid or not provided\n   * props, the layer gets added to default scenes and views.\n   */\n  private addLayerToScene<T extends Instance, U extends ILayerProps<T>, V>(\n    layer: Layer<T, U>,\n  ): Scene {\n    // Get the scene the layer will add itself to\n    let scene = this.scenes.get(layer.props.scene || '');\n\n    if (!scene) {\n      // If no scene is specified by the layer, or the scene identifier is invalid, then we add the layer\n      // To the default scene.\n      scene = this.defaultSceneElements.scene;\n\n      if (layer.props.scene) {\n        console.warn(\n          'Layer specified a scene that is not within the layer surface manager. Layer will be added to the default scene.',\n        );\n      }\n    }\n\n    // Add the layer to the scene for rendering\n    scene.addLayer(layer);\n\n    return scene;\n  }\n\n  /**\n   * Discontinues a layer's management by this surface. This will invalidate any resources\n   * the layer was using in association with the context. If the layer is re-insertted, it will\n   * be revaluated as though it were a new layer.\n   */\n  private removeLayer<T extends Instance, U extends ILayerProps<T>, V>(\n    layer: Layer<T, U> | null,\n  ): Layer<T, U> | null {\n    // Make sure we are removing a layer that exists in the system\n    if (!layer) {\n      return null;\n    }\n    if (!this.layers.get(layer && layer.id)) {\n      console.warn(\n        'Tried to remove a layer that is not in the manager.',\n        layer,\n      );\n      return layer;\n    }\n\n    layer.destroy();\n    this.layers.delete(layer.id);\n\n    return layer;\n  }\n\n  /**\n   * Used for reactive rendering and diffs out the layers for changed layers.\n   */\n  render(layerInitializers: LayerInitializer[]) {\n    if (!this.gl) return;\n\n    // Loop through all of the initializers and properly add and remove layers as needed\n    if (layerInitializers && layerInitializers.length > 0) {\n      layerInitializers.forEach(init => {\n        const layerClass = init[0];\n        const props = init[1];\n        const existingLayer = this.layers.get(props.key);\n\n        if (existingLayer) {\n          existingLayer.willUpdateProps(props);\n          Object.assign(existingLayer.props, props);\n          existingLayer.initializer[1] = existingLayer.props;\n          existingLayer.didUpdateProps();\n        } else {\n          const layer = new layerClass(\n            Object.assign({}, layerClass.defaultProps, props),\n          );\n          layer.initializer = init;\n          this.addLayer(layer);\n        }\n\n        this.willDisposeLayer.set(props.key, false);\n      });\n    }\n\n    // Take any layer that retained it's disposal flag and trash it\n    this.willDisposeLayer.forEach((dispose, layerId) => {\n      if (dispose) {\n        const layer = this.layers.get(layerId);\n        if (layer) {\n          this.removeLayer(layer);\n        } else {\n          console.warn(\n            'this.willDisposeLayer applied to a layer that does not exist in the existing layer check.',\n          );\n        }\n      }\n    });\n\n    // Resolve that all disposals occurred\n    this.willDisposeLayer.clear();\n\n    // Reflag every layer for removal again so creation of layers will determine\n    // Which layers remain for a reactive pattern\n    this.layers.forEach((layer, id) => {\n      this.willDisposeLayer.set(id, true);\n    });\n  }\n\n  /**\n   * This must be executed when the canvas changes size so that we can re-calculate the scenes and views\n   * dimensions for handling all of our rendered elements.\n   */\n  fitContainer(pixelRatio?: number) {\n    const container = this.context.canvas.parentElement;\n\n    if (container) {\n      const canvas = this.context.canvas;\n      canvas.className = '';\n      canvas.setAttribute('style', '');\n      container.style.position = 'relative';\n      canvas.style.position = 'absolute';\n      canvas.style.left = '0xp';\n      canvas.style.top = '0xp';\n      canvas.style.width = '100%';\n      canvas.style.height = '100%';\n      canvas.setAttribute('width', '');\n      canvas.setAttribute('height', '');\n      const containerBox = container.getBoundingClientRect();\n      const box = canvas.getBoundingClientRect();\n\n      this.resize(box.width || 100, containerBox.height || 100);\n    }\n  }\n\n  /**\n   * This resizes the canvas and retains pixel ratios amongst all of the resources involved.\n   */\n  resize(width: number, height: number, pixelRatio?: number) {\n    this.pixelRatio = pixelRatio || this.pixelRatio;\n    this.sceneViews.forEach(\n      sceneView => (sceneView.view.pixelRatio = this.pixelRatio),\n    );\n    this.setRendererSize(width, height);\n    this.renderer.setPixelRatio(this.pixelRatio);\n    this.pickingRenderer.setPixelRatio(1.0);\n    this.mouseManager.resize();\n  }\n\n  /**\n   * This establishes the rendering canvas context for the surface.\n   */\n  private setContext(\n    context?: WebGLRenderingContext | HTMLCanvasElement | string,\n  ) {\n    if (!context) {\n      return;\n    }\n\n    if (isWebGLContext(context)) {\n      this.context = context;\n    } else if (isCanvas(context)) {\n      const canvasContext =\n        context.getContext('webgl') || context.getContext('experimental-webgl');\n\n      if (!canvasContext) {\n        console.warn(\n          'A valid GL context was not found for the context provided to the surface. This surface will not be able to operate.',\n        );\n      } else {\n        this.context = canvasContext;\n      }\n    } else if (isString(context)) {\n      const element = document.getElementById(context);\n\n      if (isCanvas(element)) {\n        this.setContext(element);\n      }\n    }\n  }\n\n  /**\n   * This applies a new size to the renderer and resizes any additional resources that requires being\n   * sized along with the renderer.\n   */\n  private setRendererSize(width: number, height: number) {\n    width = width || 100;\n    height = height || 100;\n\n    this.renderer.setSize(width, height);\n    this.pickingRenderer.setSize(width, height);\n\n    if (!this.pickingTarget) {\n      this.pickingTarget = new WebGLRenderTarget(width, height, {\n        magFilter: Three.LinearFilter,\n        minFilter: Three.LinearFilter,\n        stencilBuffer: false,\n      });\n    }\n\n    this.pickingTarget.setSize(width, height);\n  }\n\n  /**\n   * This triggers an update to all of the layers that perform picking, the pixel data\n   * within the specified mouse range.\n   */\n  updateColorPickRange(mouse: Vec2, views: View[]) {\n    // We will flag the color range as needing an update\n    this.updateColorPick = {\n      mouse,\n      views,\n    };\n  }\n}\n","export * from './layer-surface';\nexport * from './event-manager';\nexport * from './layer-processing/generate-default-scene';\nexport * from './layer-processing/generate-layer-geometry';\nexport * from './layer-processing/generate-layer-material';\nexport * from './layer-processing/generate-layer-model';\nexport * from './layer-processing/inject-shader-io';\nexport * from './layer';\nexport * from './mouse-event-manager';\nexport * from './scene';\nexport * from './texture';\nexport * from './view';\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float borderSize;\\nvarying vec2 pointCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  vertexColor = color * color.a;\\n  float size = radius * scaleFactor;\\n  borderSize = mix(\\n    (thickness + 1.5) / size,\\n    ((thickness * pixelRatio) / size),\\n    float(pixelRatio > 1.0)\\n  );\\n  edgeSharpness = mix(0.8, 0.01, min((size * 3.0 * pixelRatio) / (45.0 * pixelRatio), 1.0));\\n  pointCoord = (position.xy + vec2(1.0, 1.0)) / 2.0;\\n\\n  // Center within clip space\\n  vec4 clipCenter = clipSpace(vec3(center, depth));\\n  // Center in screen space\\n  vec2 screenCenter = (clipCenter.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Position in screen space\\n  vec2 vertex = (position.xy * size) + screenCenter;\\n  // Position back to clip space\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), clipCenter.zw);\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\n\\n/** This is the color of the ring */\\nvarying vec4 vertexColor;\\n/**\\n * This is how sharp the ring renders. For tiny rings, it's best to have\\n * less sharpness to better convey the shape of a circle. A good starter setting:\\n * edgeSharpness = mix(0.8, 0.01, min(gl_PointSize / 45.0, 1.0));\\n */\\nvarying float edgeSharpness;\\n/**\\n * This should be a value that sets the thickness of the ring in normal space\\n * relative to the PointSize\\n */\\nvarying float borderSize;\\n/**\\n * Since this is now a quad instead of a point sprite, this provides what gl_PointCoord\\n * used to provide.\\n */\\nvarying vec2 pointCoord;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius + (radius * 0.01),\\n    dot(dist, dist) * 4.0\\n  );\\n}\\n\\nvoid main() {\\n  float outer_step_factor = circle(pointCoord, 1.0);\\n  float inner_step_factor = circle(pointCoord, 1.0 - borderSize);\\n\\n  setColor(mix(\\n    mix(                        // Select the outer color outside of the inner radius\\n      vec4(0.0, 0.0, 0.0, 0.0),    // Select invisible outside of inner and outer radius\\n      vertexColor,                  // Select outer color outside of inner, but inside outer\\n      outer_step_factor\\n    ),\\n    vec4(0.0, 0.0, 0.0, 0.0),                 // Select inner color inside inner\\n    inner_step_factor\\n  ));\\n}\\n\"","import * as Three from 'three';\nimport { Bounds, IPoint } from '../../primitives';\nimport {\n  ILayerProps,\n  IModelType,\n  IShaderInitialization,\n  Layer,\n} from '../../surface/layer';\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  InstanceBlockIndex,\n  IProjection,\n  IUniform,\n  UniformSize,\n  VertexAttributeSize,\n} from '../../types';\nimport { CommonMaterialOptions } from '../../util';\nimport { RingInstance } from './ring-instance';\nconst { max } = Math;\n\nexport interface IRingLayerProps extends ILayerProps<RingInstance> {\n  /** This sets a scaling factor for the circle's radius */\n  scaleFactor?(): number;\n}\n\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class RingLayer extends Layer<RingInstance, IRingLayerProps> {\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods() {\n    return {\n      // Provide the calculated AABB world bounds for a given circle\n      boundsAccessor: (ring: RingInstance) =>\n        new Bounds({\n          height: ring.radius * 2,\n          width: ring.radius * 2,\n          x: ring.x - ring.radius,\n          y: ring.y - ring.radius,\n        }),\n\n      // Provide a precise hit test for the ring\n      hitTest: (ring: RingInstance, point: IPoint, view: IProjection) => {\n        const r = ring.radius / max(...view.camera.scale);\n        const delta = [point.x - ring.x, point.y - ring.y];\n\n        return delta[0] * delta[0] + delta[1] * delta[1] < r * r;\n      },\n    };\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<RingInstance> {\n    const scaleFactor = this.props.scaleFactor || (() => 1);\n\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      1: 1,\n      2: -1,\n      3: 1,\n      4: -1,\n      5: -1,\n    };\n\n    const vertexToSide: { [key: number]: number } = {\n      0: -1,\n      1: -1,\n      2: -1,\n      3: 1,\n      4: 1,\n      5: 1,\n    };\n\n    return {\n      fs: require('./ring-layer.fs'),\n      instanceAttributes: [\n        {\n          block: 0,\n          blockIndex: InstanceBlockIndex.ONE,\n          name: 'center',\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.x, o.y],\n        },\n        {\n          block: 0,\n          blockIndex: InstanceBlockIndex.THREE,\n          name: 'radius',\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.radius],\n        },\n        {\n          block: 0,\n          blockIndex: InstanceBlockIndex.FOUR,\n          name: 'depth',\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth],\n        },\n        {\n          block: 1,\n          blockIndex: InstanceBlockIndex.ONE,\n          name: 'color',\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.color,\n        },\n        {\n          block: 2,\n          blockIndex: InstanceBlockIndex.ONE,\n          name: 'thickness',\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.thickness],\n        },\n      ],\n      uniforms: [\n        {\n          name: 'scaleFactor',\n          size: UniformSize.ONE,\n          update: (_: IUniform) => [scaleFactor()],\n        },\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: 'position',\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexToSide[vertex],\n            0,\n          ],\n        },\n      ],\n      vertexCount: 6,\n      vs: require('./ring-layer.vs'),\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh,\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentShape;\n  }\n}\n","import { observable } from '../../instance-provider';\nimport { Circle } from '../../primitives';\nimport { IInstanceOptions, Instance } from '../../util';\n\nexport interface IRingInstanceOptions extends IInstanceOptions, Circle {\n  /** The color of this ring */\n  color?: [number, number, number, number];\n  /** The z depth of the ring (for draw ordering) */\n  depth?: number;\n  /** The thickness of the ring */\n  thickness?: number;\n}\n\nexport class RingInstance extends Instance implements Circle {\n  @observable color: [number, number, number, number] = [1.0, 1.0, 1.0, 1.0];\n  @observable depth: number = 0;\n  @observable radius: number = 0;\n  @observable thickness: number = 1;\n  @observable x: number = 0;\n  @observable y: number = 0;\n\n  constructor(options: IRingInstanceOptions) {\n    super(options);\n\n    this.color = options.color || [1, 1, 1, 1];\n    this.depth = options.depth || 0;\n    this.radius = options.radius;\n    this.thickness = options.thickness || this.thickness;\n    this.x = options.x;\n    this.y = options.y;\n  }\n\n  get width() {\n    return this.radius * 2;\n  }\n\n  get height() {\n    return this.radius * 2;\n  }\n\n  get innerRadius() {\n    return this.radius - this.thickness;\n  }\n}\n","export * from './ring-instance';\nexport * from './ring-layer';\n","import {\n  IInstanceOptions,\n  Instance,\n  observable,\n} from '../../instance-provider';\nimport { Anchor, AnchorType, ScaleType } from '../types';\n\nexport interface IRectangleInstanceOptions extends IInstanceOptions {\n  /**\n   * The point on the rectangle which will be placed in world space via the x, y coords. This is also the point\n   * which the rectangle will be scaled around.\n   */\n  anchor?: Anchor;\n  /** Depth sorting of the rectangle (or the z value of the lable) */\n  depth?: number;\n  /** The height of the rectangle as it is to be rendered in world space */\n  height?: number;\n  /** Sets the way the rectangle scales with the world */\n  scaling?: ScaleType;\n  /** The color the rectangle should render as */\n  color: [number, number, number, number];\n  /** The width of the rectangle as it is to be rendered in world space */\n  width?: number;\n  /** The x coordinate where the rectangle will be anchored to in world space */\n  x?: number;\n  /** The y coordinate where the rectangle will be anchored to in world space */\n  y?: number;\n}\n\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nconst anchorCalculator: {\n  [key: number]: (anchor: Anchor, rectangle: RectangleInstance) => void;\n} = {\n  [AnchorType.TopLeft]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopMiddle]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width / 2.0;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopRight]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width + anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.MiddleLeft]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = rectangle.height / 2;\n  },\n  [AnchorType.Middle]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width / 2.0;\n    anchor.y = rectangle.height / 2.0;\n  },\n  [AnchorType.MiddleRight]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width + anchor.padding;\n    anchor.y = rectangle.height / 2.0;\n  },\n  [AnchorType.BottomLeft]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = rectangle.height + anchor.padding;\n  },\n  [AnchorType.BottomMiddle]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width / 2.0;\n    anchor.y = rectangle.height + anchor.padding;\n  },\n  [AnchorType.BottomRight]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width + anchor.padding;\n    anchor.y = rectangle.height + anchor.padding;\n  },\n  [AnchorType.Custom]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = anchor.x || 0;\n    anchor.y = anchor.y || 0;\n  },\n};\n\n/**\n * This generates a new rectangle instance which will render a single line of text for a given layer.\n * There are restrictions surrounding rectangles due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a rectangle via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Rectangles should only be so long.\n * - Multiline is not supported inherently\n * - Once a rectangle is constructed, only SOME properties can be altered thereafter\n *\n * A rectangle that is constructed can only have some properties set upon creating the rectangle and are locked\n * thereafter. The only way to modify them would be to destroy the rectangle, then construct a new rectangle\n * with the modifications. This has to deal with performance regarding rasterizing the rectangle\n */\nexport class RectangleInstance extends Instance {\n  /** This is the rendered color of the rectangle */\n  @observable color: [number, number, number, number] = [0, 0, 0, 1];\n  /** Depth sorting of the rectangle (or the z value of the lable) */\n  @observable depth: number = 0;\n  /** The height of the rectangle as it is to be rendered in world space */\n  @observable height: number = 1;\n  /** Sets the way the rectangle scales with the world */\n  @observable scaling: ScaleType = ScaleType.BOUND_MAX;\n  /** The width of the rectangle as it is to be rendered in world space */\n  @observable width: number = 1;\n  /** The x coordinate where the rectangle will be anchored to in world space */\n  @observable x: number = 0;\n  /** The y coordinate where the rectangle will be anchored to in world space */\n  @observable y: number = 0;\n\n  // These are properties that can be altered, but have side effects from being changed\n\n  /** This is the anchor location on the  */\n  @observable\n  private _anchor: Anchor = {\n    padding: 0,\n    type: AnchorType.TopLeft,\n    x: 0,\n    y: 0,\n  };\n\n  constructor(options: IRectangleInstanceOptions) {\n    super(options);\n\n    this.depth = options.depth || this.depth;\n    this.color = options.color || this.color;\n    this.scaling = options.scaling || this.scaling;\n    this.x = options.x || this.x;\n    this.y = options.y || this.y;\n    this.width = options.width || 1;\n    this.height = options.height || 1;\n\n    // Make sure the anchor is set to the appropriate location\n    options.anchor && this.setAnchor(options.anchor);\n  }\n\n  get anchor() {\n    return this._anchor;\n  }\n\n  /**\n   * This applies a new anchor to this rectangle and properly determines it's anchor position on the rectangle\n   */\n  setAnchor(anchor: Anchor) {\n    const newAnchor = {\n      padding: anchor.padding || 0,\n      type: anchor.type,\n      x: anchor.x || 0,\n      y: anchor.y || 0,\n    };\n\n    // Calculate the new anchors position values\n    anchorCalculator[newAnchor.type](newAnchor, this);\n    // Apply the anchor\n    this._anchor = newAnchor;\n  }\n}\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the image as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the image is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y;\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float((cameraScale.x > cameraScale.y || cameraScale.y > cameraScale.x) && useScaleMode != 0.0);\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n  // Apply the image's tint as a tint to the image\\n  vertexColor = color * color.a;\\n\\n  // Correct aspect ratio.\\n  vec2 adjustedSize = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * size + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the image\\n  float imageScreenScale = mix(\\n    screenSize.y / adjustedSize.y,\\n    screenSize.x / adjustedSize.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the image is supposed to be, then we automagically\\n  // scale down our image to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / imageScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\n\\nvoid main() {\\n  setColor(vertexColor);\\n}\\n\"","import * as Three from 'three';\nimport { Bounds, IPoint } from '../../primitives';\nimport {\n  ILayerProps,\n  IModelType,\n  IShaderInitialization,\n  Layer,\n} from '../../surface/layer';\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  InstanceBlockIndex,\n  IProjection,\n  IUniform,\n  UniformSize,\n  VertexAttributeSize,\n} from '../../types';\nimport { CommonMaterialOptions } from '../../util';\nimport { ScaleType } from '../types';\nimport { RectangleInstance } from './rectangle-instance';\n\nconst { min, max } = Math;\n\nexport interface IRectangleLayerProps extends ILayerProps<RectangleInstance> {\n  atlas?: string;\n}\n\n/**\n * This layer displays Rectangles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class RectangleLayer extends Layer<\n  RectangleInstance,\n  IRectangleLayerProps\n> {\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods() {\n    return {\n      // Provide the calculated AABB world bounds for a given rectangle\n      boundsAccessor: (rectangle: RectangleInstance) => {\n        const anchorEffect = [0, 0];\n\n        if (rectangle.anchor) {\n          anchorEffect[0] = rectangle.anchor.x || 0;\n          anchorEffect[1] = rectangle.anchor.y || 0;\n        }\n        const topLeft = [\n          rectangle.x - anchorEffect[0],\n          rectangle.y - anchorEffect[1],\n        ];\n\n        return new Bounds({\n          height: rectangle.height,\n          width: rectangle.width,\n          x: topLeft[0],\n          y: topLeft[1],\n        });\n      },\n\n      // Provide a precise hit test for the circle\n      hitTest: (\n        rectangle: RectangleInstance,\n        point: IPoint,\n        projection: IProjection,\n      ) => {\n        // The bounds of the rectangle is in world space, but it does not account for the scale mode of the rectangle.\n        // Here, we will apply the scale mode testing to the rectangle\n        const maxScale = max(...projection.camera.scale);\n        const minScale = min(...projection.camera.scale);\n\n        // If we scale always then the rectangle stays within it's initial world bounds at all times\n        if (rectangle.scaling === ScaleType.ALWAYS) {\n          return true;\n        }\n\n        // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n        // Rectangle the same size. If the camera zooms out then the bounds === the world bounds.\n        else if (rectangle.scaling === ScaleType.BOUND_MAX) {\n          // We are zooming out. the bounds will stay within the world bounds\n          if (minScale <= 1 && maxScale <= 1) {\n            return true;\n          }\n\n          // We are zooming in. The bounds will shrink to keep the rectangle at max font size\n          else {\n            // The location is within the world, but we reverse project the anchor spread\n            const anchorEffect = [0, 0];\n\n            if (rectangle.anchor) {\n              anchorEffect[0] = rectangle.anchor.x || 0;\n              anchorEffect[1] = rectangle.anchor.y || 0;\n            }\n\n            const topLeft = [\n              rectangle.x - anchorEffect[0] / maxScale,\n              rectangle.y - anchorEffect[1] / maxScale,\n            ];\n\n            // Reverse project the size and we should be within the distorted world coordinates\n            return new Bounds({\n              height: rectangle.height / maxScale,\n              width: rectangle.width / maxScale,\n              x: topLeft[0],\n              y: topLeft[1],\n            }).containsPoint(point);\n          }\n        }\n\n        // If we never allow the rectangle to scale, then the bounds will grow and shrink to counter the effects\n        // Of the camera zoom\n        else if (rectangle.scaling === ScaleType.NEVER) {\n          // The location is within the world, but we reverse project the anchor spread\n          const anchorEffect = [0, 0];\n\n          if (rectangle.anchor) {\n            anchorEffect[0] = rectangle.anchor.x || 0;\n            anchorEffect[1] = rectangle.anchor.y || 0;\n          }\n\n          const topLeft = projection.worldToScreen({\n            x: rectangle.x - anchorEffect[0] / projection.camera.scale[0],\n            y: rectangle.y - anchorEffect[1] / projection.camera.scale[1],\n          });\n\n          const screenPoint = projection.worldToScreen(point);\n\n          // Reverse project the size and we should be within the distorted world coordinates\n          return new Bounds({\n            height: rectangle.height,\n            width: rectangle.width,\n            x: topLeft.x,\n            y: topLeft.y,\n          }).containsPoint(screenPoint);\n        }\n\n        return true;\n      },\n    };\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<RectangleInstance> {\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      1: 1,\n      2: -1,\n      3: 1,\n      4: -1,\n      5: -1,\n    };\n\n    const vertexToSide: { [key: number]: number } = {\n      0: 0,\n      1: 0,\n      2: 0,\n      3: 1,\n      4: 1,\n      5: 1,\n    };\n\n    return {\n      fs: require('./rectangle-layer.fs'),\n      instanceAttributes: [\n        {\n          block: 0,\n          blockIndex: InstanceBlockIndex.ONE,\n          name: 'location',\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.x, o.y],\n        },\n        {\n          block: 0,\n          blockIndex: InstanceBlockIndex.THREE,\n          name: 'anchor',\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.anchor.x || 0, o.anchor.y || 0],\n        },\n        {\n          block: 1,\n          blockIndex: InstanceBlockIndex.ONE,\n          name: 'size',\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.width, o.height],\n        },\n        {\n          block: 1,\n          blockIndex: InstanceBlockIndex.THREE,\n          name: 'depth',\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth],\n        },\n        {\n          block: 1,\n          blockIndex: InstanceBlockIndex.FOUR,\n          name: 'scaling',\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.scaling],\n        },\n        {\n          block: 3,\n          blockIndex: InstanceBlockIndex.ONE,\n          name: 'color',\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.color,\n        },\n      ],\n      uniforms: [\n        {\n          name: 'scaleFactor',\n          size: UniformSize.ONE,\n          update: (u: IUniform) => [1],\n        },\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: 'position',\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexToSide[vertex],\n            0,\n          ],\n        },\n      ],\n      vertexCount: 6,\n      vs: require('./rectangle-layer.vs'),\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh,\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentShape;\n  }\n}\n","export * from './rectangle-layer';\nexport * from './rectangle-instance';\n","import { observable } from '../../instance-provider';\nimport { IInstanceOptions, Instance } from '../../instance-provider/instance';\nimport { Label } from '../../primitives/label';\nimport { LabelAtlasResource, LabelRasterizer } from '../../surface/texture';\nimport { Anchor, AnchorType, ScaleType } from '../types';\n\nexport interface ILabelInstanceOptions\n  extends IInstanceOptions,\n    Partial<Label> {\n  /**\n   * The point on the label which will be placed in world space via the x, y coords. This is also the point\n   * which the label will be scaled around.\n   */\n  anchor?: Anchor;\n  /** The color the label should render as */\n  color: [number, number, number, number];\n  /** Depth sorting of the label (or the z value of the label) */\n  depth?: number;\n  /** The font of the label */\n  fontFamily?: string;\n  /** The font size of the label in px */\n  fontSize?: number;\n  /** Stylization of the font */\n  fontStyle?: Label['fontStyle'];\n  /** The weight of the font */\n  fontWeight?: Label['fontWeight'];\n  /** When this is set labels will only draw the label up to this size. If below, the label will automatically truncate with ellipses */\n  maxWidth?: number;\n  /** When in BOUND_MAX mode, this allows the label to scale up beyond it's max size */\n  maxScale?: number;\n  /** This allows for control over rasterization to the atlas */\n  rasterization?: {\n    /**\n     * This is the scale of the rasterization on the atlas. Higher numbers increase atlas usage, but can provide\n     * higher quality render outputs to the surface.\n     */\n    scale: number;\n  };\n  /** Sets the way the label scales with the world */\n  scaling?: ScaleType;\n  /** Scales the label uniformly */\n  scale?: number;\n  /** This will be the text that should render with  */\n  text: string;\n  /** The x coordinate where the label will be anchored to in world space */\n  x?: number;\n  /** The y coordinate where the label will be anchored to in world space */\n  y?: number;\n}\n\n/** This is to make a clear type that references label text values */\ntype TextValue = string;\n/** This is to make a clear type that references label css font values */\ntype CSSFont = string;\n/**\n * This is a reference for a rasterization that has reference counting. When the references go to zero,\n * the rasterization should be invalidated and resources freed for the rasterization.\n */\ntype RasterizationReference = {\n  resource: LabelAtlasResource;\n  references: number;\n};\n\n/**\n * This is a lookup to find existing rasterizations for a particularly created label so that every\n * new label does not have to go through the rasterization process.\n */\nconst rasterizationLookUp = new Map<\n  TextValue,\n  Map<CSSFont, RasterizationReference>\n>();\n\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nconst anchorCalculator: {\n  [key: number]: (anchor: Anchor, label: LabelInstance) => void;\n} = {\n  [AnchorType.TopLeft]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopMiddle]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width / 2.0;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopRight]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width + anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.MiddleLeft]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = label.height / 2;\n  },\n  [AnchorType.Middle]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width / 2.0;\n    anchor.y = label.height / 2.0;\n  },\n  [AnchorType.MiddleRight]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width + anchor.padding;\n    anchor.y = label.height / 2.0;\n  },\n  [AnchorType.BottomLeft]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = label.height + anchor.padding;\n  },\n  [AnchorType.BottomMiddle]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width / 2.0;\n    anchor.y = label.height + anchor.padding;\n  },\n  [AnchorType.BottomRight]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width + anchor.padding;\n    anchor.y = label.height + anchor.padding;\n  },\n  [AnchorType.Custom]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = anchor.x || 0;\n    anchor.y = anchor.y || 0;\n  },\n};\n\n/**\n * This generates a new label instance which will render a single line of text for a given layer.\n * There are restrictions surrounding labels due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a label via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Labels should only be so long.\n * - Multiline is not supported inherently\n * - Once a label is constructed, only SOME properties can be altered thereafter\n *\n * A label that is constructed can only have some properties set upon creating the label and are locked\n * thereafter. The only way to modify them would be to destroy the label, then construct a new label\n * with the modifications. This has to deal with performance regarding rasterizing the label\n */\nexport class LabelInstance extends Instance implements Label {\n  /**\n   * TODO: We should be implementing the destroy on LabelInstances to clean this up\n   * Frees up module scoped data.\n   */\n  static destroy() {\n    rasterizationLookUp.clear();\n  }\n\n  /** This is the rendered color of the label */\n  @observable color: [number, number, number, number] = [0, 0, 0, 1];\n  /** Depth sorting of the label (or the z value of the label) */\n  @observable depth: number = 0;\n  /** When in BOUND_MAX mode, this allows the label to scale up beyond it's max size */\n  @observable maxScale: number = 1;\n  /** Sets the way the label scales with the world */\n  @observable scaling: ScaleType = ScaleType.BOUND_MAX;\n  /** Scales the label uniformly */\n  @observable scale: number = 1.0;\n  /** The x coordinate where the label will be anchored to in world space */\n  @observable x: number = 0;\n  /** The y coordinate where the label will be anchored to in world space */\n  @observable y: number = 0;\n\n  // The following properties are properties that are locked in after creating this label\n  // As the properties are completely locked into how the label was rasterized and can not\n  // Nor should not be easily adjusted for performance concerns\n\n  private _cssFont: string = '';\n  private _fontFamily: string = 'Arial';\n  private _fontSize: number = 12;\n  private _fontStyle: Label['fontStyle'] = 'normal';\n  private _fontWeight: Label['fontWeight'] = 400;\n  private _maxWidth: number = 0;\n  private _text: string = '';\n\n  @observable\n  private _width: number = 0;\n\n  @observable\n  private _height: number = 0;\n\n  private _isDestroyed: boolean = false;\n\n  @observable\n  private _rasterization: RasterizationReference;\n\n  // The following are the getters for the locked in parameters of the label so we can read\n  // The properties but not set any of them.\n\n  /**\n   * This is the full css string that represents this label. This + the text of the label is essentially\n   * a unique identifier for the rendering of the label and is used to key the rasterization of the label\n   * so that label rasterization can be shared for similar labels.\n   */\n  get cssFont() {\n    return this._cssFont;\n  }\n  /** This flag indicates if this label is valid anymore */\n  get isDestroyed() {\n    return this._isDestroyed;\n  }\n  /** This is the font family of the label */\n  get fontFamily() {\n    return this._fontFamily;\n  }\n  /**\n   * This is the size of the label in pixels. For Labels, this correlates to the rendering font size.\n   * The true pixel height of the label is calculated and placed into the height property for the label.\n   */\n  get fontSize() {\n    return this._fontSize;\n  }\n  /** This is the style of the font (italic, oblique, etc) */\n  get fontStyle() {\n    return this._fontStyle;\n  }\n  /** This is the font weight specified for the label (bold, normal, etc). */\n  get fontWeight() {\n    return this._fontWeight;\n  }\n  /** This is the max width in pixels this label can fill */\n  get maxWidth() {\n    return this._maxWidth;\n  }\n  /** This gets the atlas resource that is uniquely identified for this label */\n  get resource() {\n    return this._rasterization.resource;\n  }\n  /** This is the label's text. */\n  get text() {\n    return this._text;\n  }\n  /**\n   * If a maxWidth is specified, there is a chance the text will be truncated.\n   * This provides the calculated truncated text.\n   */\n  get truncatedText() {\n    return this._rasterization.resource.truncatedText || this.text;\n  }\n\n  /**\n   * This is the width in world space of the label. If there is no camera distortion,\n   * this would be the width of the label in pixels on the screen.\n   */\n  get width() {\n    return this._width;\n  }\n\n  /**\n   * This is the height in world space of the label. If there is no camera distortion,\n   * this would be the height of the label in pixels on the screen.\n   */\n  get height() {\n    return this._height;\n  }\n\n  // These are properties that can be altered, but have side effects from being changed\n\n  /** This is the anchor location on the  */\n  @observable\n  private _anchor: Anchor = {\n    padding: 0,\n    type: AnchorType.TopLeft,\n    x: 0,\n    y: 0,\n  };\n\n  constructor(options: ILabelInstanceOptions) {\n    super(options);\n\n    this.depth = options.depth || this.depth;\n    this.color = options.color || this.color;\n    this.maxScale = options.maxScale || this.maxScale;\n    this.scaling = options.scaling || this.scaling;\n    this.scale = options.scale || this.scale;\n\n    this.x = options.x || this.x;\n    this.y = options.y || this.y;\n\n    this._fontFamily = options.fontFamily || this._fontFamily;\n    this._fontSize = options.fontSize || this._fontSize;\n    this._fontStyle = options.fontStyle || this._fontStyle;\n    this._fontWeight = options.fontWeight || this._fontWeight;\n    this._maxWidth = options.maxWidth || 0;\n    this._text = options.text || this._text;\n\n    // We get the CSS font string for this label so we can uniquely identify the rasterization\n    // Easily.\n    this._cssFont = LabelRasterizer.makeCSSFont(this, 1);\n    // This is css font used to look up rasterizations. This lookup includes the max width of the label\n    // Which the css font does not account for\n    const cssFontLookup = `${this._cssFont}_${this._maxWidth}`;\n    // Look for other same texts that have been rasterized\n    let rasterizations = rasterizationLookUp.get(this._text);\n    let rasterization: RasterizationReference | null | undefined;\n\n    if (rasterizations) {\n      // Look for those texts that have been rasterized in the same fashion that this label is requesting\n      rasterization = rasterizations.get(cssFontLookup);\n\n      // If a rasterization exists, we must increment the use reference\n      if (rasterization) {\n        rasterization.references++;\n      }\n    } else {\n      rasterizations = new Map<CSSFont, RasterizationReference>();\n    }\n\n    // If we have not found an existing rasterization\n    if (!rasterization) {\n      rasterization = {\n        references: 1,\n        resource: new LabelAtlasResource(this),\n      };\n\n      // Look to see if any rasterization options were specified\n      if (options.rasterization) {\n        rasterization.resource.sampleScale = options.rasterization.scale || 1.0;\n      }\n\n      // Ensure the sample scale is set. Defaults to 1.0\n      rasterization.resource.sampleScale =\n        rasterization.resource.sampleScale || 1.0;\n      // Rasterize the resource generated for this label. We need it immediately rasterized so\n      // That we can utilize the dimensions for calculations.\n      LabelRasterizer.renderSync(rasterization.resource);\n      // Now that we have an official rasterization for this text / label combo, we shall store it\n      // For others to look up\n      rasterizationLookUp.set(this._text, rasterizations);\n      rasterizations.set(cssFontLookup, rasterization);\n    }\n\n    this._rasterization = rasterization;\n    this._width = rasterization.resource.rasterization.world.width;\n    this._height = rasterization.resource.rasterization.world.height;\n\n    // Make sure the anchor is set to the appropriate location\n    options.anchor && this.setAnchor(options.anchor);\n  }\n\n  get anchor() {\n    return this._anchor;\n  }\n\n  /**\n   * Labels are a sort of unique case where the use of a label should be destroyed as rasterization\n   * resources are in a way kept alive through reference counting.\n   */\n  destroy() {\n    if (!this._isDestroyed) {\n      this._isDestroyed = true;\n      this._rasterization.references--;\n\n      // If all references are cleared, then the rasterization needs to be eradicated\n      if (this._rasterization.references === 0) {\n        this._rasterization.resource;\n      }\n    }\n  }\n\n  /**\n   * Triggers any attributes waiting on resources\n   */\n  resourceTrigger() {\n    // Trigger the accessed element that the layer utilizes for resource fetching.\n    this._rasterization = this._rasterization;\n    this._width = this._width;\n  }\n\n  /**\n   * This applies a new anchor to this label and properly determines it's anchor position on the label\n   */\n  setAnchor(anchor: Anchor) {\n    const newAnchor = {\n      padding: anchor.padding || 0,\n      type: anchor.type,\n      x: anchor.x || 0,\n      y: anchor.y || 0,\n    };\n\n    // Calculate the new anchors position values\n    anchorCalculator[newAnchor.type](newAnchor, this);\n    // Apply the anchor\n    this._anchor = newAnchor;\n  }\n}\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Determine final screen size of label\\n  vec3 screenSize = cameraSpaceSize(vec3(size * scale / maxScale, 1.0));\\n\\n  // Test whether the label is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y || screenSize.x > size.x;\\n\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n\\n  // Correct aspect ratio.  Sufficient fix for most applications.\\n  // Will need another solution in the case of:\\n  //  (cameraScale y != cameraScale.x) && (cameraScale.x != 1 && cameraScale.y != 1)\\n\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float(cameraScale.x != cameraScale.y);\\n\\n  vec2 adjustedSize = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  vec2 scaledAnchor = anchor * scale;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + scaledAnchor;\\n\\n  vec2 adjustedAnchor = mix(\\n    scaledAnchor,\\n    (scaledAnchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // Get the position of the current vertex\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * scale * size + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the label\\n  float labelScreenScale = mix(\\n    screenSize.y / adjustedSize.y,\\n    screenSize.x / adjustedSize.x,\\n    float((cameraScale.x != 1.0))\\n  );\\n\\n  float currentScale = labelScreenScale * scale;\\n\\n  // If our screen rendering is larger than the size the label is supposed to be, then we automagically\\n  // scale down our label to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / labelScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  // --Texture and Color\\n  // Get the tex coord from our inject texture info\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the label's color as a tint to the label (all labels are rendered white to the base texture)\\n  vertexColor = color;\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  gl_FragColor = texture2D(labelAtlas, texCoord) * vertexColor;\\n  setColor(gl_FragColor * gl_FragColor.a);\\n}\\n\"","import * as Three from 'three';\nimport { Bounds, IPoint } from '../../primitives';\nimport {\n  ILayerProps,\n  IModelType,\n  IShaderInitialization,\n  Layer,\n} from '../../surface/layer';\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  InstanceBlockIndex,\n  IProjection,\n  IUniform,\n  UniformSize,\n  VertexAttributeSize,\n} from '../../types';\nimport { CommonMaterialOptions, Vec2 } from '../../util';\nimport { ScaleType } from '../types';\nimport { LabelInstance } from './label-instance';\n\nexport interface ILabelLayerProps extends ILayerProps<LabelInstance> {\n  atlas?: string;\n}\n\nconst { max, min } = Math;\n\n/**\n * This layer displays Labels and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class LabelLayer extends Layer<LabelInstance, ILabelLayerProps> {\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods() {\n    return {\n      // Provide the calculated AABB world bounds for a given label\n      boundsAccessor: (label: LabelInstance) => {\n        const anchor: Vec2 = [label.anchor.x || 0, label.anchor.y || 0];\n\n        const topLeft = [label.x - anchor[0], label.y - anchor[1]];\n\n        return new Bounds({\n          height: label.height,\n          width: label.width,\n          x: topLeft[0],\n          y: topLeft[1],\n        });\n      },\n\n      // Provide a precise hit test for the circle\n      hitTest: (label: LabelInstance, point: IPoint, view: IProjection) => {\n        // The bounds of the label is in world space, but it does not account for the scale mode of the label.\n        // Here, we will apply the scale mode testing to the label\n        const maxScale = max(...view.camera.scale);\n        const minScale = min(...view.camera.scale);\n\n        // If we scale always then the label stays within it's initial world bounds at all times\n        if (label.scaling === ScaleType.ALWAYS) {\n          return true;\n        }\n\n        // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n        // Label the same size. If the camera zooms out then the bounds === the world bounds.\n        else if (label.scaling === ScaleType.BOUND_MAX) {\n          // We are zooming out. the bounds will stay within the world bounds\n          if (minScale <= 1 && maxScale <= 1) {\n            return true;\n          }\n\n          // We are zooming in. The bounds will shrink to keep the label at max font size\n          else {\n            const anchor: Vec2 = [label.anchor.x || 0, label.anchor.y || 0];\n\n            // The location is within the world, but we reverse project the anchor spread\n            const topLeft = view.worldToScreen({\n              x: label.x - anchor[0] / view.camera.scale[0],\n              y: label.y - anchor[1] / view.camera.scale[1],\n            });\n\n            const screenPoint = view.worldToScreen(point);\n\n            // Reverse project the size and we should be within the distorted world coordinates\n            return new Bounds({\n              height: label.height,\n              width: label.width,\n              x: topLeft.x,\n              y: topLeft.y,\n            }).containsPoint(screenPoint);\n          }\n        }\n\n        // If we never allow the label to scale, then the bounds will grow and shrink to counter the effects\n        // Of the camera zoom\n        else if (label.scaling === ScaleType.NEVER) {\n          const anchor: Vec2 = [label.anchor.x || 0, label.anchor.y || 0];\n\n          // The location is within the world, but we reverse project the anchor spread\n          const topLeft = view.worldToScreen({\n            x: label.x - anchor[0] / view.camera.scale[0],\n            y: label.y - anchor[1] / view.camera.scale[1],\n          });\n\n          const screenPoint = view.worldToScreen(point);\n\n          // Reverse project the size and we should be within the distorted world coordinates\n          return new Bounds({\n            height: label.height,\n            width: label.width,\n            x: topLeft.x,\n            y: topLeft.y,\n          }).containsPoint(screenPoint);\n        }\n\n        return true;\n      },\n    };\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<LabelInstance> {\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      1: 1,\n      2: -1,\n      3: 1,\n      4: -1,\n      5: -1,\n    };\n\n    const vertexToSide: { [key: number]: number } = {\n      0: 0,\n      1: 0,\n      2: 0,\n      3: 1,\n      4: 1,\n      5: 1,\n    };\n\n    return {\n      fs: require('./label-layer.fs'),\n      instanceAttributes: [\n        {\n          block: 0,\n          blockIndex: InstanceBlockIndex.ONE,\n          name: 'location',\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.x, o.y],\n        },\n        {\n          block: 0,\n          blockIndex: InstanceBlockIndex.THREE,\n          name: 'anchor',\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.anchor.x || 0, o.anchor.y || 0],\n        },\n        {\n          block: 1,\n          blockIndex: InstanceBlockIndex.ONE,\n          name: 'size',\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.width, o.height],\n        },\n        {\n          block: 1,\n          blockIndex: InstanceBlockIndex.THREE,\n          name: 'depth',\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth],\n        },\n        {\n          block: 1,\n          blockIndex: InstanceBlockIndex.FOUR,\n          name: 'scaling',\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.scaling],\n        },\n        {\n          atlas: {\n            key: this.props.atlas || '',\n            name: 'labelAtlas',\n          },\n          block: 2,\n          name: 'texture',\n          update: o => this.resource.request(this, o, o.resource),\n        },\n        {\n          block: 3,\n          blockIndex: InstanceBlockIndex.ONE,\n          name: 'color',\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.color,\n        },\n        {\n          block: 4,\n          blockIndex: InstanceBlockIndex.ONE,\n          name: 'scale',\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.scale],\n        },\n        {\n          block: 4,\n          blockIndex: InstanceBlockIndex.TWO,\n          name: 'maxScale',\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.maxScale],\n        },\n      ],\n      uniforms: [\n        {\n          name: 'scaleFactor',\n          size: UniformSize.ONE,\n          update: (u: IUniform) => [1],\n        },\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: 'position',\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexToSide[vertex],\n            0,\n          ],\n        },\n      ],\n      vertexCount: 6,\n      vs: require('./label-layer.vs'),\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh,\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentImage;\n  }\n}\n","import { ImageAtlasResource } from './image-atlas-resource';\n\nlet canvas: CanvasRenderingContext2D | null;\n\nexport interface IImageRasterizedMetrics {\n  canvas: HTMLCanvasElement;\n  height: number;\n  width: number;\n}\n\nexport class ImageRasterizer {\n  /**\n   * This loops until our canvas context is available\n   */\n  static async awaitContext() {\n    // Iterate till the browser provides a valid canvas to render elements into\n    while (!canvas) {\n      this.getContext();\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n  }\n\n  /**\n   * Attempts to populate the 'canvas' context for rendering images offscreen.\n   */\n  static getContext() {\n    if (!canvas) {\n      canvas = document.createElement('canvas').getContext('2d');\n    }\n\n    return canvas;\n  }\n\n  /**\n   * This renders our image to a sizeable canvas where we loop over the pixel data to determine\n   * the bounds of the image.\n   *\n   * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n   *                                 the size to be rendered to the texture to the size the image\n   *                                 should be within world space.\n   * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n   */\n  static calculateImageSize(\n    resource: ImageAtlasResource,\n    sampleScale?: number,\n  ) {\n    /** Get the image properties for rasterizing */\n    const image = resource.image.element;\n\n    if (!image) {\n      console.warn(\n        'Image does not exist! Please ensure the resource contains a valid image.',\n      );\n      return;\n    }\n\n    if (!canvas) {\n      console.warn(\n        'The Image rasterizer was unable to establish a valid canvas context. Please ensure the system supports contexts and ensure the document is ready first.',\n      );\n      return;\n    }\n\n    if (image.width === 0 || image.height === 0) {\n      console.warn(\n        'Images provided shoud have valid dimensions! Please ensure the image is loaded first.',\n      );\n      return;\n    }\n\n    // Just make sure th canvas is available\n    canvas.canvas.width = 100;\n    canvas.canvas.height = 100;\n    // Render the image into our canvas merely to ensure the image can be rendered\n    // This action often 'warms up' images such as images that have a data URL instead of a path\n    canvas.drawImage(image, 0, 0);\n\n    // Make sure the rasterization object is initialized\n    resource.rasterization = resource.rasterization || {\n      texture: { height: 0, width: 0 },\n      world: { height: 0, width: 0 },\n    };\n\n    // Update the calculated texture size.\n    resource.rasterization.texture = {\n      height: image.height * resource.sampleScale,\n      width: image.width * resource.sampleScale,\n    };\n\n    resource.rasterization.world = {\n      height: image.height,\n      width: image.width,\n    };\n\n    resource.rasterization.image = image;\n  }\n\n  /**\n   * Performs the rendering of the image\n   */\n  static async render(\n    resource: ImageAtlasResource,\n  ): Promise<ImageAtlasResource> {\n    // Make sure our canvas object is ready for rendering\n    await this.awaitContext();\n\n    // Calculate all of the image metrics and ensure the image can be drawn\n    this.calculateImageSize(resource, resource.sampleScale);\n\n    return resource;\n  }\n\n  /**\n   * Performs the rendering of the image\n   */\n  static renderSync(resource: ImageAtlasResource): ImageAtlasResource {\n    // Ensure our offscreen canvas is prepped\n    this.getContext();\n\n    if (!canvas) {\n      console.warn(\n        'Can not render a image synchronously without the canvas context being ready.',\n      );\n      return resource;\n    }\n\n    // Calculate all of the image metrics and generate a canvas on the image that can\n    // Be rendered to the canvas.\n    this.calculateImageSize(resource, resource.sampleScale);\n\n    return resource;\n  }\n}\n","import { Bounds } from '../../primitives/bounds';\nimport { Atlas, IAtlasOptions } from './atlas';\nimport { ColorAtlasResource } from './color-atlas-resource';\nimport { ColorRasterizer } from './color-rasterizer';\nimport { ImageAtlasResource } from './image-atlas-resource';\nimport { LabelAtlasResource } from './label-atlas-resource';\nimport { LabelRasterizer } from './label-rasterizer';\nimport { ImageDimensions, PackNode } from './pack-node';\nimport { SubTexture } from './sub-texture';\n\nconst debug = require('debug')('webgl-surface:Atlas');\n\nconst ZERO_IMAGE: SubTexture = {\n  aspectRatio: 0,\n  atlasBL: { x: 0, y: 0 },\n  atlasBR: { x: 0, y: 0 },\n  atlasReferenceID: '',\n  atlasTexture: null,\n  atlasTL: { x: 0, y: 0 },\n  atlasTR: { x: 0, y: 0 },\n  heightOnAtlas: 0,\n  isValid: false,\n  pixelHeight: 0,\n  pixelWidth: 0,\n  widthOnAtlas: 0,\n};\n\nexport type AtlasResource =\n  | ColorAtlasResource\n  | LabelAtlasResource\n  | ImageAtlasResource;\n\n/**\n * Determines if a SubTexture is a valid SubTexture for rendering\n */\nfunction isValidImage(image: SubTexture) {\n  let isValid = false;\n\n  if (image && image.isValid) {\n    if (image.pixelWidth && image.pixelHeight) {\n      isValid = true;\n    }\n  }\n\n  return isValid;\n}\n\n/**\n * Defines a manager of atlas', which includes generating the atlas and producing\n * textures defining those pieces of atlas.\n */\nexport class AtlasManager {\n  /** Stores all of the generated atlas' in a lookup by name */\n  allAtlas = new Map<string, Atlas>();\n\n  /**\n   * Atlas' must be created from scratch to update them. In order to properly\n   * update an existing one, you must destroy it then recreate it again.\n   * This is from not knowing how to update a texture via three js.\n   *\n   * @param resources The images with their image path set to be loaded into the atlas.\n   *               Images that keep an atlas ID of null indicates the image did not load\n   *               correctly\n   *\n   * @return {Texture} The Threejs texture that is created as our atlas. The images injected\n   *                   into the texture will be populated with the atlas'\n   */\n  async createAtlas(options: IAtlasOptions, resources?: AtlasResource[]) {\n    // Create the new Atlas object that tracks all of our atlas' metrics\n    const atlas = new Atlas(options);\n    // Set the manager to the atlas\n    atlas.setManager(this);\n    // Make the atlas identifiable by it's name\n    this.allAtlas.set(atlas.id, atlas);\n\n    // Now we load, pack in, and draw each requested resource\n    if (resources) {\n      await this.updateAtlas(atlas.id, resources);\n    }\n\n    debug('Atlas Created-> %o', atlas);\n\n    return atlas;\n  }\n\n  /**\n   * Free ALL resources under this manager\n   */\n  destroy() {\n    this.allAtlas.forEach(value => value.destroy());\n  }\n\n  /**\n   * Disposes of the resources the atlas held and makes the atlas invalid for use\n   *\n   * @param atlasName\n   */\n  destroyAtlas(atlasName: string) {\n    const atlas = this.allAtlas.get(atlasName);\n\n    if (atlas) {\n      atlas.destroy();\n    }\n  }\n\n  private setDefaultImage(image: SubTexture, atlasName: string) {\n    image = Object.assign(image, ZERO_IMAGE, { atlasReferenceID: atlasName });\n    return image;\n  }\n\n  /**\n   * This loads, packs, and draws the indicated image into the specified canvas\n   * using the metrics that exists for the specified atlas.\n   *\n   * @param resource The image who should have it's image path loaded\n   * @param atlasName The name of the atlas to make the packing work\n   * @param canvas The canvas we will be drawing into to generate the complete image\n   *\n   * @return {Promise<boolean>} Promise that resolves to if the image successfully was drawn or not\n   */\n  private async draw(atlas: Atlas, resource: AtlasResource): Promise<boolean> {\n    const canvas = atlas.texture.image;\n    const atlasName = atlas.id;\n\n    // Register the resource with the atlas\n    if (!atlas.registerResource(resource)) {\n      console.warn(\n        'Could not draw resource to the atlas as the resource was not properly registered to the atlas first',\n        atlas,\n        resource,\n      );\n      return Promise.resolve(false);\n    }\n\n    // First we must load the image\n    // Make a buffer to hold our new image\n    // Load the image into memory, default to keeping the alpha channel\n    const loadedImage: HTMLImageElement | null = await this.loadImage(resource);\n\n    // Only a non-null image means the image loaded correctly\n    if (loadedImage && isValidImage(resource.texture)) {\n      // Get the sub texture that is going to be applied to the atlas\n      const rasterization = resource.rasterization;\n      const texture = resource.texture;\n      // Now we create a Rectangle to store the image dimensions\n      const rect: Bounds = new Bounds({\n        bottom: rasterization.texture.height,\n        left: 0,\n        right: rasterization.texture.width,\n        top: 0,\n      });\n      // Create ImageDimension to insert into our atlas mapper\n      const dimensions: ImageDimensions = {\n        first: texture,\n        second: rect,\n      };\n\n      // Auto add a buffer in\n      dimensions.second.width += 1;\n      dimensions.second.height += 1;\n      // Get the atlas map node\n      const packing: PackNode = atlas.packing;\n      // Store the node resulting from the insert operation\n      const insertedNode: PackNode | null = packing.insert(dimensions);\n\n      // If the result was NULL we did not successfully insert the image into any map\n      if (insertedNode) {\n        debug('Atlas location determined: %o', insertedNode);\n\n        // Apply the image to the node\n        insertedNode.nodeImage = texture;\n\n        // Set our image's atlas properties\n        const ux = insertedNode.nodeDimensions.x / atlas.width;\n        const uy = insertedNode.nodeDimensions.y / atlas.height;\n        const uw = insertedNode.nodeDimensions.width / atlas.width;\n        const uh = insertedNode.nodeDimensions.height / atlas.height;\n        const onePixelX = 1 / atlas.width;\n\n        const atlasDimensions: Bounds = new Bounds({\n          bottom: 1.0 - uy,\n          left: ux,\n          right: ux + uw,\n          top: 1.0 - (uy + uh),\n        });\n\n        const bottom = atlasDimensions.bottom;\n        const top = atlasDimensions.y;\n        const left = atlasDimensions.x;\n        const right = atlasDimensions.x + atlasDimensions.width - onePixelX;\n\n        texture.atlasReferenceID = atlasName;\n        texture.atlasTL = { x: left, y: top };\n        texture.atlasBR = { x: right, y: bottom };\n        texture.atlasBL = { x: left, y: bottom };\n        texture.atlasTR = { x: right, y: top };\n        texture.widthOnAtlas = Math.abs(texture.atlasTR.x - texture.atlasTL.x);\n        texture.heightOnAtlas = Math.abs(texture.atlasTR.y - texture.atlasBR.y);\n        texture.pixelWidth = rasterization.texture.width;\n        texture.pixelHeight = rasterization.texture.height;\n\n        // Now draw the image to the indicated canvas\n        canvas\n          .getContext('2d')\n          .drawImage(\n            loadedImage,\n            insertedNode.nodeDimensions.x,\n            insertedNode.nodeDimensions.y,\n          );\n\n        // We have finished inserting\n        return true;\n      } else {\n        // Log an error\n        console.error(`Could not fit resource into atlas`, resource);\n        resource.texture = this.setDefaultImage(resource.texture, atlasName);\n        return false;\n      }\n    } else {\n      // Log an error and load a default sub texture\n      console.error(`Could not load resource:`, resource);\n      resource.texture = this.setDefaultImage(resource.texture, atlasName);\n      return false;\n    }\n  }\n\n  /**\n   * Retrieves the threejs texture for the atlas\n   *\n   * @param atlasName The identifier of the atlas\n   */\n  getAtlasTexture(atlasName: string): Atlas | undefined {\n    return this.allAtlas.get(atlasName);\n  }\n\n  /**\n   * This takes in any atlas resource and rasterizes it.\n   *\n   * @param {SubTexture} resource This is any atlas resource which will have it's image rasterized\n   *\n   * @return {Promise<HTMLImageElement>} A promise to resolve to the loaded image\n   *                                     or null if there was an error\n   */\n  private async loadImage(\n    resource: AtlasResource,\n  ): Promise<HTMLImageElement | null> {\n    let imageSrc: string = '';\n\n    const subTexture = resource.texture || new SubTexture();\n    resource.texture = subTexture;\n\n    if (resource instanceof ImageAtlasResource) {\n      // If the texture was provided an image then we ensure the image is loaded\n      // Then hand it back\n      if (resource.image.element) {\n        if (\n          resource.image.element.width !== 0 &&\n          resource.image.element.height !== 0\n        ) {\n          const image = resource.image.element;\n          subTexture.pixelWidth = image.width;\n          subTexture.pixelHeight = image.height;\n          subTexture.aspectRatio = image.width / image.height;\n\n          return image;\n        }\n\n        const image = await new Promise<HTMLImageElement | null>(\n          (resolve, reject) => {\n            const image: HTMLImageElement | undefined = resource.image.element;\n\n            if (image) {\n              image.onload = function() {\n                subTexture.pixelWidth = image.width;\n                subTexture.pixelHeight = image.height;\n                subTexture.aspectRatio = image.width / image.height;\n                resolve(image);\n              };\n\n              image.onerror = function() {\n                resolve(null);\n              };\n            } else {\n              resolve(null);\n            }\n          },\n        );\n\n        return image;\n      }\n\n      // If a string was returned, we must load the image then return the image\n      else if (resource.image.path) {\n        imageSrc = resource.image.path;\n      }\n    } else if (resource instanceof LabelAtlasResource) {\n      // Ensure the label has been rasterized to a canvas element\n      if (!resource.rasterization.canvas) {\n        await LabelRasterizer.render(resource);\n      }\n\n      // Make sure the rasterization properly executed\n      if (resource.rasterization.canvas) {\n        debug('Rasterized label %o', resource.rasterization);\n        imageSrc = resource.rasterization.canvas.toDataURL('image/png');\n      } else {\n        console.warn('The label was not able to be rasterized');\n      }\n    } else if (resource instanceof ColorAtlasResource) {\n      // Ensure the color has been rasterized to a canvas element\n      if (!resource.rasterization.canvas) {\n        await ColorRasterizer.render(resource);\n      }\n\n      // Make sure the rasterization properly executed\n      if (resource.rasterization.canvas) {\n        debug('Rasterized color %o', resource.rasterization);\n        imageSrc = resource.rasterization.canvas.toDataURL('image/png');\n      } else {\n        console.warn('The color was not able to be rasterized');\n      }\n    }\n\n    if (imageSrc) {\n      const image = await new Promise<HTMLImageElement | null>(\n        (resolve, reject) => {\n          const image: HTMLImageElement = new Image();\n\n          image.onload = function() {\n            subTexture.pixelWidth = image.width;\n            subTexture.pixelHeight = image.height;\n            subTexture.aspectRatio = image.width / image.height;\n            resolve(image);\n          };\n\n          image.onerror = function() {\n            resolve(null);\n          };\n\n          image.src = imageSrc;\n        },\n      );\n\n      return image;\n    }\n\n    return null;\n  }\n\n  /**\n   * This targets an existing atlas and attempts to update it with the provided atlas resources.\n   *\n   * @param atlasName\n   * @param resources\n   */\n  async updateAtlas(atlasName: string, resources: AtlasResource[]) {\n    const atlas = this.allAtlas.get(atlasName);\n\n    if (atlas) {\n      for (const resource of resources) {\n        await this.draw(atlas, resource);\n      }\n\n      // Perform the best method for updating the underlying texture of the atlas to the latest changes\n      atlas.updateTexture();\n    } else {\n      console.warn(\n        'Can not update non-existing atlas:',\n        atlasName,\n        'These resources will not be loaded:',\n        resources,\n      );\n    }\n  }\n}\n","import { Bounds } from '../../primitives/bounds';\nimport { SubTexture } from './sub-texture';\n\n/**\n * Helps us track the bounds of the image being loaded in tied in with the\n * texture it represents\n */\nexport interface ImageDimensions {\n  first: SubTexture;\n  second: Bounds;\n}\n\n/**\n * This is used specifically by the atlas manager to aid in packing\n * in textures within an area. This will guarantee boundaries of textures are\n * not violated and provide proper feedback for where to draw a given image\n */\nexport class PackNode {\n  child: [PackNode | null, PackNode | null] = [null, null];\n  isLeaf: boolean = true;\n  nodeDimensions: Bounds;\n  nodeImage: SubTexture | null = null;\n\n  constructor(x: number, y: number, width: number, height: number) {\n    this.nodeDimensions = new Bounds({\n      height,\n      width,\n      x,\n      y,\n    });\n  }\n\n  /**\n   * Deletes all of the sub nodes in this Mapping, thus clearing up memory usage\n   */\n  destroy() {\n    const child0 = this.child[0];\n    const child1 = this.child[1];\n    this.nodeImage = null;\n    if (child0) {\n      child0.destroy();\n    }\n    if (child1) {\n      child1.destroy();\n    }\n    this.child[0] = null;\n    this.child[1] = null;\n  }\n\n  /**\n   * Indicates if there is a child\n   */\n  hasChild(): boolean {\n    const child0 = this.child[0];\n    const child1 = this.child[1];\n    if (child0 && !child0.nodeImage) {\n      return !child0.isLeaf;\n    }\n    if (child1 && !child1.nodeImage) {\n      return !child1.isLeaf;\n    }\n    return false;\n  }\n\n  /**\n   * Inserts images into our mapping, fitting them appropriately\n   */\n  insert(image: ImageDimensions): PackNode | null {\n    let child0 = this.child[0];\n    let child1 = this.child[1];\n\n    if (!this.isLeaf && child0 && child1) {\n      // Try inserting into first child\n      const newNode: PackNode | null = child0.insert(image);\n      if (newNode !== null) {\n        return newNode;\n      }\n      // No room in first so insert into second\n      return child1.insert(image);\n    } else {\n      // If there's already an image here, return\n      if (this.nodeImage) {\n        return null;\n      }\n      // Check the fit status of the image in this nodes rectangle space\n      const fitFlag: number = this.nodeDimensions.fits(image.second);\n      // If we're too small, return null indicating can not fit\n      if (fitFlag === 0) {\n        return null;\n      }\n      // If we're just right, accept\n      if (fitFlag === 1) {\n        return this;\n      }\n\n      // Otherwise, gotta split this node and create some leaves\n      this.isLeaf = false;\n      // Get the image width\n      const imgWidth: number = image.second.width;\n      const imgHeight: number = image.second.height;\n      // Decide which way to split\n      const dWidth: number = this.nodeDimensions.width - imgWidth;\n      const dHeight: number = this.nodeDimensions.height - image.second.height;\n\n      if (dWidth > dHeight) {\n        child0 = this.child[0] = new PackNode(\n          this.nodeDimensions.x,\n          this.nodeDimensions.y,\n          imgWidth,\n          this.nodeDimensions.height,\n        );\n        child1 = this.child[1] = new PackNode(\n          this.nodeDimensions.x + imgWidth,\n          this.nodeDimensions.y,\n          dWidth,\n          this.nodeDimensions.height,\n        );\n      } else {\n        child0 = this.child[0] = new PackNode(\n          this.nodeDimensions.x,\n          this.nodeDimensions.y,\n          this.nodeDimensions.width,\n          imgHeight,\n        );\n        child1 = this.child[1] = new PackNode(\n          this.nodeDimensions.x,\n          this.nodeDimensions.y + imgHeight,\n          this.nodeDimensions.width,\n          dHeight,\n        );\n      }\n    }\n\n    // Insert into first child we created\n    return child0.insert(image);\n  }\n\n  /**\n   * Removes the image from the mapping and tries to open up as much space as possible.\n   *\n   * @param {AtlasTexture} image The image to insert into the\n   */\n  remove(image: SubTexture): boolean {\n    const child0 = this.child[0];\n    const child1 = this.child[1];\n\n    if (child1 && child0 && !this.isLeaf) {\n      // Try removing from first child\n      let removed: boolean = child0.remove(image);\n      if (removed) {\n        return true;\n      }\n      // Try remove from second\n      removed = child1.remove(image);\n\n      if (!child0.hasChild()) {\n        if (!child1.hasChild()) {\n          this.child[0] = null;\n          this.child[1] = null;\n        }\n      }\n\n      return removed;\n    } else {\n      if (this.nodeImage === image) {\n        this.nodeImage = null;\n        delete image.atlasReferenceID;\n        image.pixelWidth = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n}\n","import { observable } from '../../instance-provider';\nimport { IInstanceOptions, Instance } from '../../instance-provider/instance';\nimport { Image } from '../../primitives/image';\nimport { ImageAtlasResource, ImageRasterizer } from '../../surface/texture';\nimport { Anchor, AnchorType, ScaleType } from '../types';\n\nconst { max } = Math;\n\nexport interface IImageInstanceOptions extends IInstanceOptions {\n  /**\n   * The point on the image which will be placed in world space via the x, y coords. This is also the point\n   * which the image will be scaled around.\n   */\n  anchor?: Anchor;\n  /** Depth sorting of the image (or the z value of the lable) */\n  depth?: number;\n  /** This is the HTMLImageElement that the image is to render. This element MUST be loaded completely before this instance is created. */\n  element: HTMLImageElement;\n  /** The height of the image as it is to be rendered in world space */\n  height?: number;\n  /** Sets the way the image scales with the world */\n  scaling?: ScaleType;\n  /** The color the image should render as */\n  tint: [number, number, number, number];\n  /** The width of the image as it is to be rendered in world space */\n  width?: number;\n  /** The x coordinate where the image will be anchored to in world space */\n  x?: number;\n  /** The y coordinate where the image will be anchored to in world space */\n  y?: number;\n}\n\n/**\n * This is a reference for a rasterization that has reference counting. When the references go to zero,\n * the rasterization should be invalidated and resources freed for the rasterization.\n */\ntype RasterizationReference = {\n  resource: ImageAtlasResource;\n  references: number;\n};\n\n/**\n * This is a lookup to find existing rasterizations for a particularly created image so that every\n * new image does not have to go through the rasterization process.\n */\nconst rasterizationLookUp = new Map<\n  string | HTMLImageElement,\n  RasterizationReference\n>();\n\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nconst anchorCalculator: {\n  [key: number]: (anchor: Anchor, image: ImageInstance) => void;\n} = {\n  [AnchorType.TopLeft]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopMiddle]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width / 2.0;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopRight]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width + anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.MiddleLeft]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = image.height / 2;\n  },\n  [AnchorType.Middle]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width / 2.0;\n    anchor.y = image.height / 2.0;\n  },\n  [AnchorType.MiddleRight]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width + anchor.padding;\n    anchor.y = image.height / 2.0;\n  },\n  [AnchorType.BottomLeft]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = image.height + anchor.padding;\n  },\n  [AnchorType.BottomMiddle]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width / 2.0;\n    anchor.y = image.height + anchor.padding;\n  },\n  [AnchorType.BottomRight]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width + anchor.padding;\n    anchor.y = image.height + anchor.padding;\n  },\n  [AnchorType.Custom]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = anchor.x || 0;\n    anchor.y = anchor.y || 0;\n  },\n};\n\n/**\n * This generates a new image instance.\n * There are restrictions surrounding images due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a image via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Images should only be so large.\n * - Once a image is constructed, only SOME properties can be altered thereafter\n *\n * An image that is constructed can only have some properties set upon creating the image and are locked\n * thereafter. The only way to modify them would be to destroy the image, then construct a new image\n * with the modifications. This has to deal with performance regarding rasterizing the image.\n */\nexport class ImageInstance extends Instance implements Image {\n  /**\n   * TODO: We should be implementing the destroy on ImageInstances to clean this up\n   * Frees up module scoped data.\n   */\n  static destroy() {\n    rasterizationLookUp.clear();\n  }\n\n  /** This is the rendered color of the image */\n  @observable tint: [number, number, number, number] = [0, 0, 0, 1];\n  /** Depth sorting of the image (or the z value of the lable) */\n  @observable depth: number = 0;\n  /** The height of the image as it is to be rendered in world space */\n  @observable height: number = 1;\n  /** Sets the way the image scales with the world */\n  @observable scaling: ScaleType = ScaleType.BOUND_MAX;\n  /** The width of the image as it is to be rendered in world space */\n  @observable width: number = 1;\n  /** The x coordinate where the image will be anchored to in world space */\n  @observable x: number = 0;\n  /** The y coordinate where the image will be anchored to in world space */\n  @observable y: number = 0;\n\n  get size() {\n    return max(this.width, this.height);\n  }\n  set size(value: number) {\n    const aspect = this.width / this.height;\n    this.width = value * aspect;\n    this.height = value;\n  }\n\n  // The following properties are properties that are locked in after creating this image\n  // As the properties are completely locked into how the image was rasterized and can not\n  // Nor should not be easily adjusted for performance concerns\n\n  private _sourceWidth: number = 0;\n  private _sourceHeight: number = 0;\n  private _isDestroyed: boolean = false;\n  @observable private _rasterization: RasterizationReference;\n  private _path: string;\n  private _element: HTMLImageElement;\n\n  // The following are the getters for the locked in parameters of the image so we can read\n  // The properties but not set any of them.\n\n  /** This is the provided element this image will be rendering */\n  get element() {\n    return this._element;\n  }\n  /** This flag indicates if this image is valid anymore */\n  get isDestroyed() {\n    return this._isDestroyed;\n  }\n  /** This is the path to the image's resource if it's available */\n  get path() {\n    return this._path;\n  }\n  /** This gets the atlas resource that is uniquely idenfied for this image */\n  get resource() {\n    return this._rasterization.resource;\n  }\n\n  /**\n   * This is the width in world space of the image. If there is no camera distortion,\n   * this would be the width of the image in pixels on the screen.\n   */\n  get sourceWidth() {\n    return this._sourceWidth;\n  }\n\n  /**\n   * This is the height in world space of the image. If there is no camera distortion,\n   * this would be the height of the image in pixels on the screen.\n   */\n  get sourceHeight() {\n    return this._sourceHeight;\n  }\n\n  // These are properties that can be altered, but have side effects from being changed\n\n  /** This is the anchor location on the  */\n  @observable\n  private _anchor: Anchor = {\n    padding: 0,\n    type: AnchorType.TopLeft,\n    x: 0,\n    y: 0,\n  };\n\n  constructor(options: IImageInstanceOptions) {\n    super(options);\n\n    this.depth = options.depth || this.depth;\n    this.tint = options.tint || this.tint;\n    this.scaling = options.scaling || this.scaling;\n    this.x = options.x || this.x;\n    this.y = options.y || this.y;\n\n    // This is the image that is to be rendered\n    this._element = options.element;\n    // Look for other same texts that have been rasterized\n    let rasterization = rasterizationLookUp.get(this._path || this._element);\n\n    // If a rasterization exists, we must increment the use reference\n    if (rasterization) {\n      rasterization.references++;\n    }\n\n    // If we have not found an existing rasterization\n    if (!rasterization) {\n      rasterization = {\n        references: 1,\n        resource: new ImageAtlasResource(this),\n      };\n\n      // Ensure the sample scale is set. Defaults to 1.0\n      rasterization.resource.sampleScale =\n        rasterization.resource.sampleScale || 1.0;\n      // Rasterize the resource generated for this image. We need it immediately rasterized so\n      // That we can utilize the dimensions for calculations.\n      ImageRasterizer.renderSync(rasterization.resource);\n      // Now that we have an official rasterization for this image, we shall store it\n      // For others to look up\n      rasterizationLookUp.set(this._path || this._element, rasterization);\n    }\n\n    this._rasterization = rasterization;\n    this._sourceWidth = rasterization.resource.rasterization.world.width;\n    this._sourceHeight = rasterization.resource.rasterization.world.height;\n\n    this.width = options.width || this._sourceWidth || 1;\n    this.height = options.height || this._sourceHeight || 1;\n\n    // Make sure the anchor is set to the appropriate location\n    options.anchor && this.setAnchor(options.anchor);\n  }\n\n  get anchor() {\n    return this._anchor;\n  }\n\n  /**\n   * Images are a sort of unique case where the use of a image should be destroyed as rasterization\n   * resources are in a way kept alive through reference counting.\n   */\n  destroy() {\n    if (!this._isDestroyed) {\n      this._isDestroyed = true;\n      this._rasterization.references--;\n\n      // If all references are cleared, then the rasterization needs to be eradicated\n      if (this._rasterization.references === 0) {\n        this._rasterization.resource;\n        console.warn('The destroy method still needs completion');\n      }\n    }\n  }\n\n  resourceTrigger() {\n    // Trigger the accessed element that the layer utilizes for resource fetching.\n    this._rasterization = this._rasterization;\n  }\n\n  /**\n   * This applies a new anchor to this image and properly determines it's anchor position on the image\n   */\n  setAnchor(anchor: Anchor) {\n    const newAnchor = {\n      padding: anchor.padding || 0,\n      type: anchor.type,\n      x: anchor.x || 0,\n      y: anchor.y || 0,\n    };\n\n    // Calculate the new anchors position values\n    anchorCalculator[newAnchor.type](newAnchor, this);\n    // Apply the anchor\n    this._anchor = newAnchor;\n  }\n}\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the image as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the image is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y;\\n\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float(cameraScale.x != cameraScale.y);\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n\\n  // Get the tex coord from our inject texture info\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the image's tint as a tint to the image\\n  vertexColor = tint;\\n\\n  // Correct aspect ratio.\\n  vec2 adjustedSize = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * adjustedSize + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the image\\n  float imageScreenScale = mix(\\n    screenSize.y / adjustedSize.y,\\n    screenSize.x / adjustedSize.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the image is supposed to be, then we automagically\\n  // scale down our image to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / imageScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  gl_FragColor = texture2D(imageAtlas, texCoord) * vertexColor;\\n  setColor(gl_FragColor * gl_FragColor.a);\\n}\\n\"","import * as Three from 'three';\nimport { Bounds, IPoint } from '../../primitives';\nimport {\n  ILayerProps,\n  IModelType,\n  IShaderInitialization,\n  Layer,\n} from '../../surface/layer';\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  InstanceBlockIndex,\n  IProjection,\n  IUniform,\n  UniformSize,\n  VertexAttributeSize,\n} from '../../types';\nimport { CommonMaterialOptions } from '../../util';\nimport { ScaleType } from '../types';\nimport { ImageInstance } from './image-instance';\n\nconst { min, max } = Math;\n\nexport interface IImageLayerProps extends ILayerProps<ImageInstance> {\n  atlas?: string;\n}\n\n/**\n * This layer displays Images and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class ImageLayer extends Layer<ImageInstance, IImageLayerProps> {\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods() {\n    return {\n      // Provide the calculated AABB world bounds for a given image\n      boundsAccessor: (image: ImageInstance) => {\n        const anchorEffect = [0, 0];\n\n        if (image.anchor) {\n          anchorEffect[0] = image.anchor.x || 0;\n          anchorEffect[1] = image.anchor.y || 0;\n        }\n\n        const topLeft = [image.x - anchorEffect[0], image.y - anchorEffect[1]];\n\n        return new Bounds({\n          height: image.height,\n          width: image.width,\n          x: topLeft[0],\n          y: topLeft[1],\n        });\n      },\n\n      // Provide a precise hit test for the circle\n      hitTest: (image: ImageInstance, point: IPoint, view: IProjection) => {\n        // The bounds of the image is in world space, but it does not account for the scale mode of the image.\n        // Here, we will apply the scale mode testing to the image\n        const maxScale = max(...view.camera.scale);\n        const minScale = min(...view.camera.scale);\n\n        // If we scale always then the image stays within it's initial world bounds at all times\n        if (image.scaling === ScaleType.ALWAYS) {\n          return true;\n        }\n\n        // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n        // Image the same size. If the camera zooms out then the bounds === the world bounds.\n        else if (image.scaling === ScaleType.BOUND_MAX) {\n          // We are zooming out. the bounds will stay within the world bounds\n          if (minScale <= 1 && maxScale <= 1) {\n            return true;\n          }\n\n          // We are zooming in. The bounds will shrink to keep the image at max font size\n          else {\n            // The location is within the world, but we reverse project the anchor spread\n            const anchorEffect = [0, 0];\n\n            if (image.anchor) {\n              anchorEffect[0] = image.anchor.x || 0;\n              anchorEffect[1] = image.anchor.y || 0;\n            }\n\n            const topLeft = view.worldToScreen({\n              x: image.x - anchorEffect[0] / view.camera.scale[0],\n              y: image.y - anchorEffect[1] / view.camera.scale[1],\n            });\n\n            const screenPoint = view.worldToScreen(point);\n\n            // Reverse project the size and we should be within the distorted world coordinates\n            return new Bounds({\n              height: image.height,\n              width: image.width,\n              x: topLeft.x,\n              y: topLeft.y,\n            }).containsPoint(screenPoint);\n          }\n        }\n\n        // If we never allow the image to scale, then the bounds will grow and shrink to counter the effects\n        // Of the camera zoom\n        else if (image.scaling === ScaleType.NEVER) {\n          // The location is within the world, but we reverse project the anchor spread\n          const anchorEffect = [0, 0];\n\n          if (image.anchor) {\n            anchorEffect[0] = image.anchor.x || 0;\n            anchorEffect[1] = image.anchor.y || 0;\n          }\n\n          const topLeft = view.worldToScreen({\n            x: image.x - anchorEffect[0] / view.camera.scale[0],\n            y: image.y - anchorEffect[1] / view.camera.scale[1],\n          });\n\n          const screenPoint = view.worldToScreen(point);\n\n          // Reverse project the size and we should be within the distorted world coordinates\n          return new Bounds({\n            height: image.height,\n            width: image.width,\n            x: topLeft.x,\n            y: topLeft.y,\n          }).containsPoint(screenPoint);\n        }\n\n        return true;\n      },\n    };\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<ImageInstance> {\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      1: 1,\n      2: -1,\n      3: 1,\n      4: -1,\n      5: -1,\n    };\n\n    const vertexToSide: { [key: number]: number } = {\n      0: 0,\n      1: 0,\n      2: 0,\n      3: 1,\n      4: 1,\n      5: 1,\n    };\n\n    return {\n      fs: require('./image-layer.fs'),\n      instanceAttributes: [\n        {\n          block: 0,\n          blockIndex: InstanceBlockIndex.ONE,\n          name: 'location',\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.x, o.y],\n        },\n        {\n          block: 0,\n          blockIndex: InstanceBlockIndex.THREE,\n          name: 'anchor',\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.anchor.x || 0, o.anchor.y || 0],\n        },\n        {\n          block: 1,\n          blockIndex: InstanceBlockIndex.ONE,\n          name: 'size',\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.width, o.height],\n        },\n        {\n          block: 1,\n          blockIndex: InstanceBlockIndex.THREE,\n          name: 'depth',\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth],\n        },\n        {\n          block: 1,\n          blockIndex: InstanceBlockIndex.FOUR,\n          name: 'scaling',\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.scaling],\n        },\n        {\n          atlas: {\n            key: this.props.atlas || '',\n            name: 'imageAtlas',\n          },\n          block: 2,\n          name: 'texture',\n          update: o => this.resource.request(this, o, o.resource),\n        },\n        {\n          block: 3,\n          blockIndex: InstanceBlockIndex.ONE,\n          name: 'tint',\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.tint,\n        },\n      ],\n      uniforms: [\n        {\n          name: 'scaleFactor',\n          size: UniformSize.ONE,\n          update: (u: IUniform) => [1],\n        },\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: 'position',\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexToSide[vertex],\n            0,\n          ],\n        },\n      ],\n      vertexCount: 6,\n      vs: require('./image-layer.vs'),\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh,\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentImage;\n  }\n}\n","import {\n  IInstanceOptions,\n  Instance,\n  observable,\n} from '../../instance-provider';\n\nexport interface IEdgeInstanceOptions extends IInstanceOptions {\n  /** The color of this edge at the start point. */\n  colorStart?: [number, number, number, number];\n  /** The color of this edge at the end point. */\n  colorEnd?: [number, number, number, number];\n  /** This is the list of control points  */\n  control?: [number, number][];\n  /** The z depth of the edge (for draw ordering) */\n  depth?: number;\n  /** End point of the edge. */\n  end: [number, number];\n  /** Beginning point of the edge. */\n  start: [number, number];\n  /** Start width of the edge. */\n  widthStart?: number;\n  /** End width of the edge */\n  widthEnd?: number;\n}\n\nexport type EdgeColor = [number, number, number, number];\n\nexport class EdgeInstance extends Instance {\n  @observable colorStart: EdgeColor = [1.0, 1.0, 1.0, 1.0];\n  @observable colorEnd: EdgeColor = [1.0, 1.0, 1.0, 1.0];\n  @observable control: [number, number][] = [[0, 0], [0, 0]];\n  @observable depth: number = 0;\n  @observable end: [number, number] = [0, 0];\n  @observable start: [number, number] = [0, 0];\n  @observable widthStart: number = 1.0;\n  @observable widthEnd: number = 1.0;\n\n  get length() {\n    const delta = [this.end[0] - this.start[0], this.end[1] - this.start[1]];\n\n    return Math.sqrt(delta[0] * delta[0] + delta[1] * delta[1]);\n  }\n\n  /**\n   * Calculates the midpoint of the edge\n   */\n  get midpoint() {\n    return 0;\n  }\n\n  /**\n   * Calculates a perpendicular direction vector to the edge\n   */\n  get perpendicular(): [number, number] {\n    const length = this.length;\n\n    return [\n      (this.end[1] - this.start[1]) / length,\n      -(this.end[0] - this.start[0]) / length,\n    ];\n  }\n\n  /**\n   * Applies the edge width to the start and end\n   */\n  setEdgeWidth(width: number) {\n    if (width) {\n      this.widthEnd = width;\n      this.widthStart = width;\n    }\n  }\n\n  /**\n   * Applies the color to the start and end\n   */\n  setColor(color: EdgeColor) {\n    this.colorStart = color;\n    this.colorEnd = color;\n  }\n\n  constructor(options: IEdgeInstanceOptions) {\n    super(options);\n    this.colorStart = options.colorStart || this.colorStart;\n    this.colorEnd = options.colorEnd || this.colorEnd;\n    this.control = options.control || this.control;\n    this.depth = options.depth || this.depth;\n    this.end = options.end || this.end;\n    this.widthStart = options.widthStart || this.widthStart;\n    this.widthEnd = options.widthEnd || this.widthEnd;\n    this.start = options.start || this.start;\n  }\n}\n","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\n\\nvoid main() {\\n  setColor(vertexColor);\\n}\\n\"","module.exports = \"/**\\n  This vertex shader calculates edges based in world space to make an edge based on\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nprecision highp float;\\n\\nvarying vec4 vertexColor;\\n\\n// Interpolation type injection\\n${interpolation}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n\\n  // Convert our world points to screen space\\n  vec4 startClip = clipSpace(vec3(start, depth));\\n  vec4 endClip = clipSpace(vec3(end, depth));\\n  vec2 startScreen = (startClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  vec2 endScreen = (endClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Controls for this mode are screen space deltas from the end points\\n  vec2 control1 = startScreen + vec2(control.x, -control.y) * scaleFactor;\\n  vec2 control2 = endScreen + vec2(control.z, -control.w) * scaleFactor;\\n\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, startScreen, endScreen, control1, control2);\\n  // Calculate the next and previous segment's location on the line\\n  vec2 prePosition = interpolation(interpolationTime - interpolationIncrement, startScreen, endScreen, control1, control2);\\n  vec2 nextPosition = interpolation(interpolationTime + interpolationIncrement, startScreen, endScreen, control1, control2);\\n\\n  vec2 preLine = prePosition - currentPosition;\\n  vec2 nextLine = nextPosition - currentPosition;\\n\\n  // Get a spliced nromal at the joining of two segments to make a crisper curve\\n  vec2 currentNormal = mix(\\n    // Pick this value if we're at the beginning of the line\\n    normalize(vec2(preLine.y, -preLine.x)),\\n    mix(\\n      // Pick this value when we're between the ends\\n      normalize(vec2(preLine.y, -preLine.x) + vec2(-nextLine.y, nextLine.x)),\\n      // Pick this value if we're at the end of the line\\n      normalize(vec2(-nextLine.y, nextLine.x)),\\n      float(position.x >= 1.0)\\n    ),\\n    float(position.x > 0.0)\\n  );\\n\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (-normal * lineThickness * scaleFactor);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a;\\n\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), startClip.zw);\\n  gl_PointSize = 5.0;\\n}\\n\"","module.exports = \"precision highp float;\\n\\n/**\\n  This vertex shader calculates edges whose curve and width is in screen space where the curve is\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nvarying vec4 vertexColor;\\n\\n// Interpolation type injection\\n${interpolation}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, start, end, control.xy, control.zw);\\n  // Calculate the next and previous segment's location on the line\\n  vec2 prePosition = interpolation(interpolationTime - interpolationIncrement, start, end, control.xy, control.zw);\\n  vec2 nextPosition = interpolation(interpolationTime + interpolationIncrement, start, end, control.xy, control.zw);\\n\\n  vec2 preLine = prePosition - currentPosition;\\n  vec2 nextLine = nextPosition - currentPosition;\\n\\n  // Get a spliced nromal at the joining of two segments to make a crisper curve\\n  vec2 currentNormal = mix(\\n    // Pick this value if we're at the beginning of the line\\n    normalize(vec2(preLine.y, -preLine.x)),\\n    mix(\\n      // Pick this value when we're between the ends\\n      normalize(vec2(preLine.y, -preLine.x) + vec2(-nextLine.y, nextLine.x)),\\n      // Pick this value if we're at the end of the line\\n      normalize(vec2(-nextLine.y, nextLine.x)),\\n      float(position.x >= 1.0)\\n    ),\\n    float(position.x > 0.0)\\n  );\\n\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (normal * lineThickness);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a;\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n  gl_PointSize = 5.0;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  float t1 = 1.0 - t;\\n  return pow(t1, 3.0) * p1 + 3.0 * t * pow(t1, 2.0) * c1 + 3.0 * pow(t, 2.0) * t1 * c2 + pow(t, 3.0) * p2;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return (1.0 - t) * (1.0 - t) * p1 + 2.0 * t * (1.0 - t) * c1 + t * t * p2;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return p1 + (p2 - p1) * t;\\n}\\n\"","/**\n * This file contains the logic for handling edge picking via quad tree and hit tests.\n * The methods involved are fairly robust and would clutter the layer's code file.\n */\nimport { IPoint } from '../../primitives';\nimport { Bounds } from '../../primitives/bounds';\nimport { IPickingMethods } from '../../surface/layer';\nimport { IProjection } from '../../types';\nimport {\n  add2,\n  dot2,\n  length2,\n  scale2,\n  subtract2,\n  Vec2,\n} from '../../util/vector';\nimport { EdgeInstance } from './edge-instance';\nimport { IEdgeLayerProps } from './edge-layer';\nimport { EdgeBroadphase, EdgeScaleType, EdgeType } from './types';\nconst { pow } = Math;\n\ntype InterpolationMethod = (\n  t: number,\n  p1: Vec2,\n  p2: Vec2,\n  c1: Vec2,\n  c2: Vec2,\n) => Vec2;\n\n/** This is an interpolation across a line */\nfunction linear(t: number, p1: Vec2, p2: Vec2, c1: Vec2, c2: Vec2): Vec2 {\n  return add2(scale2(subtract2(p2, p1), t), p1);\n}\n\n/** This is an interpolation across a bezier curve, single control */\nfunction bezier(t: number, p1: Vec2, p2: Vec2, c1: Vec2, c2: Vec2): Vec2 {\n  return [\n    (1.0 - t) * (1.0 - t) * p1[0] + 2.0 * t * (1.0 - t) * c1[0] + t * t * p2[0],\n    (1.0 - t) * (1.0 - t) * p1[1] + 2.0 * t * (1.0 - t) * c1[1] + t * t * p2[1],\n  ];\n}\n\n/** This is an interpolation across a bezier curve, double control */\nfunction bezier2(t: number, p1: Vec2, p2: Vec2, c1: Vec2, c2: Vec2): Vec2 {\n  const t1 = 1.0 - t;\n\n  return [\n    pow(t1, 3.0) * p1[0] +\n      3.0 * t * pow(t1, 2.0) * c1[0] +\n      3.0 * pow(t, 2.0) * t1 * c2[0] +\n      pow(t, 3.0) * p2[0],\n    pow(t1, 3.0) * p1[1] +\n      3.0 * t * pow(t1, 2.0) * c1[1] +\n      3.0 * pow(t, 2.0) * t1 * c2[1] +\n      pow(t, 3.0) * p2[1],\n  ];\n}\n\n/** A quick lookup for an interpolation method based on Edge Type */\nconst interpolation: { [key: number]: InterpolationMethod } = {\n  [EdgeType.LINE]: linear,\n  [EdgeType.BEZIER]: bezier,\n  [EdgeType.BEZIER2]: bezier2,\n};\n\n/** Converts a point array to a point object */\nfunction toPointObject(point: Vec2): IPoint {\n  return {\n    x: point[0],\n    y: point[1],\n  };\n}\n\n/** Converts a point object to a point array */\nfunction toPointArray(point: IPoint): Vec2 {\n  return [point.x, point.y];\n}\n\n/** Takes two points that forms a line then calculates the nearest distance from that line to the third point */\nfunction distanceTo(start: Vec2, end: Vec2, p: Vec2) {\n  // Make a vector from a line point to the indicated point\n  const vector: Vec2 = subtract2(start, p);\n  const lineDirection: Vec2 = subtract2(end, start);\n  const lineNormal: Vec2 = [lineDirection[1], -lineDirection[0]];\n  const distance: number =\n    Math.abs(dot2(vector, lineNormal)) / length2(lineDirection);\n\n  // The distance is d = |v . r| where v is a unit perpendicular vector to the Line\n  return distance;\n}\n\n// This sets the number of iterations along a curve we sample to test collisions with\nconst TEST_RESOLUTION = 50;\n\n/**\n * This generates the picking methods needed for managing PickType.ALL for the edge layer.\n */\nexport function edgePicking(\n  props: IEdgeLayerProps,\n): IPickingMethods<EdgeInstance> {\n  const { broadphase, minPickDistance = 0, scaleType, type } = props;\n  const interpolate = interpolation[props.type];\n\n  const boundsAccessor = (edge: EdgeInstance) => {\n    const edgeWidthStart = edge.widthStart / 2 + minPickDistance;\n    const edgeWidthEnd = edge.widthEnd / 2 + minPickDistance;\n    // Encapsulate the endpoints as they are guaranteed to be included in the shape\n    // Each endpoint will be a box that includes the endpoint thickness\n    const bounds = new Bounds({\n      height: edge.widthStart,\n      width: edge.widthStart,\n      x: edge.start[0] - edgeWidthStart,\n      y: edge.start[1] - edgeWidthStart,\n    });\n\n    bounds.encapsulate(\n      new Bounds({\n        height: edge.widthEnd,\n        width: edge.widthEnd,\n        x: edge.end[0] - edgeWidthEnd,\n        y: edge.end[1] - edgeWidthEnd,\n      }),\n    );\n\n    // Encapsulating the bezier control points is enough of a broadphase for beziers\n    if (props.type === EdgeType.BEZIER) {\n      bounds.encapsulate({\n        x: edge.control[0][0],\n        y: edge.control[0][1],\n      });\n    }\n\n    // Encapsulating the bezier control points is enough of a broadphase for beziers\n    else if (props.type === EdgeType.BEZIER2) {\n      bounds.encapsulate({\n        x: edge.control[0][0],\n        y: edge.control[0][1],\n      });\n\n      bounds.encapsulate({\n        x: edge.control[1][0],\n        y: edge.control[1][1],\n      });\n    }\n\n    if (broadphase === EdgeBroadphase.PASS_X) {\n      bounds.x = Number.MIN_SAFE_INTEGER / 2;\n      bounds.width = Number.MAX_SAFE_INTEGER;\n    }\n\n    if (broadphase === EdgeBroadphase.PASS_Y) {\n      bounds.y = Number.MIN_SAFE_INTEGER / 2;\n      bounds.height = Number.MAX_SAFE_INTEGER;\n    }\n\n    return bounds;\n  };\n\n  if (scaleType === EdgeScaleType.SCREEN_CURVE) {\n    return {\n      // Provide the calculated AABB world bounds for a given circle\n      boundsAccessor,\n\n      // Provide a precise hit test for the edge. This method performs all of the rendering\n      // And hit tests within screen space as opposed to world space.\n      hitTest: (edge: EdgeInstance, point: IPoint, view: IProjection) => {\n        point = view.worldToScreen(point);\n        const mouse: Vec2 = [point.x, point.y];\n        let closestIndex = 0;\n        let closestDistance = Number.MAX_VALUE;\n        let secondClosestIndex = 0;\n        let secondClosestDistance = Number.MAX_VALUE;\n\n        const start = view.worldToScreen(toPointObject(edge.start));\n        const end = view.worldToScreen(toPointObject(edge.end));\n        let control1: Vec2 = [0, 0];\n        let control2: Vec2 = [0, 0];\n\n        if (type === EdgeType.BEZIER) {\n          control1 = add2(toPointArray(start), edge.control[0]);\n        } else if (type === EdgeType.BEZIER2) {\n          control1 = add2(toPointArray(start), edge.control[0]);\n          control2 = add2(toPointArray(end), edge.control[1]);\n        }\n\n        const startPoint = toPointArray(start);\n        const endPoint = toPointArray(end);\n\n        control1 = edge.control.length > 0 ? control1 : [0, 0];\n        control2 = edge.control.length > 1 ? control2 : [0, 0];\n\n        // Loop through sample points on the line and find one that is closest to the mouse point as possible\n        for (let i = 0; i < TEST_RESOLUTION; ++i) {\n          const linePoint = interpolate(\n            i / TEST_RESOLUTION,\n            startPoint,\n            endPoint,\n            control1,\n            control2,\n          );\n          const distance = length2(subtract2(mouse, linePoint));\n\n          if (distance < closestDistance) {\n            secondClosestIndex = closestIndex;\n            secondClosestDistance = closestDistance;\n            closestIndex = i;\n            closestDistance = distance;\n          } else if (distance < secondClosestDistance) {\n            secondClosestIndex = i;\n            closestDistance = distance;\n          }\n        }\n\n        const t = closestIndex / TEST_RESOLUTION;\n        const lineWidth =\n          (edge.widthEnd - edge.widthStart) * t + edge.widthStart;\n\n        if (closestIndex === secondClosestIndex) {\n          return false;\n        }\n\n        const startSegment = interpolate(\n          closestIndex / TEST_RESOLUTION,\n          startPoint,\n          endPoint,\n          control1,\n          control2,\n        );\n\n        const endSegment = interpolate(\n          secondClosestIndex / TEST_RESOLUTION,\n          startPoint,\n          endPoint,\n          control1,\n          control2,\n        );\n\n        // See how close the mouse is to the line between the two closest points for a more accurate\n        // Test\n        closestDistance = distanceTo(startSegment, endSegment, mouse);\n\n        // This helps determine if the mouse is beyond the end point\n        if (\n          dot2(\n            subtract2(endSegment, startSegment),\n            subtract2(mouse, startSegment),\n          ) < 0\n        ) {\n          return false;\n        }\n\n        return closestDistance < lineWidth / 2.0 + minPickDistance;\n      },\n    };\n  }\n\n  return {\n    // Provide the calculated AABB world bounds for a given circle\n    boundsAccessor,\n\n    // Provide a precise hit test for the edge\n    hitTest: (edge: EdgeInstance, point: IPoint, view: IProjection) => {\n      const mouse: [number, number] = [point.x, point.y];\n      let closestIndex = 0;\n      let closestDistance = Number.MAX_VALUE;\n\n      // Loop through sample points on the line and find one that is closest to the mouse point as possible\n      for (let i = 0; i < TEST_RESOLUTION; ++i) {\n        const linePoint = interpolate(\n          i / TEST_RESOLUTION,\n          edge.start,\n          edge.end,\n          edge.control.length > 0 ? edge.control[0] : [0, 0],\n          edge.control.length > 1 ? edge.control[1] : [0, 0],\n        );\n        const distance = length2(subtract2(mouse, linePoint));\n\n        if (distance < closestDistance) {\n          closestIndex = i;\n          closestDistance = distance;\n        }\n      }\n\n      const t = closestIndex / TEST_RESOLUTION;\n      const lineWidth = (edge.widthEnd - edge.widthStart) * t + edge.widthStart;\n\n      return closestDistance < lineWidth / 2.0;\n    },\n  };\n}\n","import * as Three from 'three';\nimport { InstanceProvider } from '../../instance-provider';\nimport {\n  ILayerProps,\n  IModelType,\n  IPickingMethods,\n  IShaderInitialization,\n  Layer,\n} from '../../surface/layer';\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  InstanceBlockIndex,\n  InstanceIOValue,\n  IUniform,\n  UniformSize,\n  VertexAttributeSize,\n} from '../../types';\nimport { CommonMaterialOptions, shaderTemplate } from '../../util';\nimport { EdgeInstance } from './edge-instance';\nimport { edgePicking } from './edge-picking';\nimport { EdgeBroadphase, EdgeScaleType, EdgeType } from './types';\n\nexport interface IEdgeLayerProps extends ILayerProps<EdgeInstance> {\n  /** Allows adjustments for broadphase interactions for an edge */\n  broadphase?: EdgeBroadphase;\n  /** Any distance to the mouse from an edge that is less than this distance will be picked */\n  minPickDistance?: number;\n  /** This sets a scaling factor for the edge's line width and curve  */\n  scaleFactor?(): number;\n  /**\n   * If this is set, then the thickness of the line and the curvature of the line exists in screen space\n   * rather than world space.\n   */\n  scaleType?: EdgeScaleType;\n  /** Specifies how the edge is formed */\n  type: EdgeType;\n}\n\nexport interface IEdgeLayerState {}\n\n/** Converts a control list to an IO value */\nfunction toInstanceIOValue(value: [number, number][]): InstanceIOValue {\n  return [value[0][0], value[0][1], value[1][0], value[1][1]];\n}\n\n/** This picks the appropriate shader for the edge type desired */\nconst pickVS = {\n  [EdgeType.LINE]: require('./shader/edge-layer-line.vs'),\n  [EdgeType.BEZIER]: require('./shader/edge-layer-bezier.vs'),\n  [EdgeType.BEZIER2]: require('./shader/edge-layer-bezier2.vs'),\n};\n\n/** This is the base edge layer which is a template that can be filled with the needed specifics for a given line type */\nconst baseVS = require('./shader/edge-layer.vs');\nconst screenVS = require('./shader/edge-layer-screen-curve.vs');\nconst edgeFS = require('./shader/edge-layer.fs');\n\n/**\n * This layer displays edges and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class EdgeLayer extends Layer<EdgeInstance, IEdgeLayerProps> {\n  // Set default props for the layer\n  static defaultProps: IEdgeLayerProps = {\n    broadphase: EdgeBroadphase.ALL,\n    data: new InstanceProvider<EdgeInstance>(),\n    key: 'none',\n    scaleType: EdgeScaleType.NONE,\n    type: EdgeType.LINE,\n  };\n\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods(): IPickingMethods<EdgeInstance> {\n    return edgePicking(this.props);\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<EdgeInstance> {\n    const {\n      scaleFactor = () => 1,\n      type,\n      scaleType = EdgeScaleType.NONE,\n    } = this.props;\n\n    const MAX_SEGMENTS = type === EdgeType.LINE ? 2 : 50;\n\n    // Calculate the normals and interpolations for our vertices\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      [MAX_SEGMENTS * 2 + 2]: -1,\n    };\n\n    const vertexInterpolation: { [key: number]: number } = {\n      0: 0,\n      [MAX_SEGMENTS * 2 + 2]: 1,\n    };\n\n    let sign = 1;\n    for (let i = 0; i < MAX_SEGMENTS * 2; ++i) {\n      vertexToNormal[i + 1] = sign;\n      vertexInterpolation[i + 1] = Math.floor(i / 2) / (MAX_SEGMENTS - 1);\n      sign *= -1;\n    }\n\n    const vs = shaderTemplate(\n      scaleType === EdgeScaleType.NONE ? baseVS : screenVS,\n      {\n        // Retain the attributes injection\n        attributes: '${attributes}',\n        // Inject the proper interpolation method\n        interpolation: pickVS[type],\n      },\n      {\n        name: 'Edge Layer',\n        values: ['interpolation'],\n      },\n    );\n\n    return {\n      fs: edgeFS,\n      instanceAttributes: [\n        {\n          block: 0,\n          blockIndex: InstanceBlockIndex.ONE,\n          name: 'start',\n          size: InstanceAttributeSize.TWO,\n          update: o => o.start,\n        },\n        {\n          block: 0,\n          blockIndex: InstanceBlockIndex.THREE,\n          name: 'end',\n          size: InstanceAttributeSize.TWO,\n          update: o => o.end,\n        },\n        {\n          block: 1,\n          blockIndex: InstanceBlockIndex.ONE,\n          name: 'widthStart',\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.widthStart],\n        },\n        {\n          block: 1,\n          blockIndex: InstanceBlockIndex.TWO,\n          name: 'widthEnd',\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.widthEnd],\n        },\n        {\n          block: 1,\n          blockIndex: InstanceBlockIndex.THREE,\n          name: 'depth',\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth],\n        },\n        {\n          block: 2,\n          blockIndex: InstanceBlockIndex.ONE,\n          name: 'colorStart',\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.colorStart,\n        },\n        {\n          block: 3,\n          blockIndex: InstanceBlockIndex.ONE,\n          name: 'colorEnd',\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.colorEnd,\n        },\n        type === EdgeType.LINE\n          ? {\n              block: 4,\n              blockIndex: InstanceBlockIndex.ONE,\n              name: 'control',\n              size: InstanceAttributeSize.FOUR,\n              update: o => [0, 0, 0, 0],\n            }\n          : null,\n        type === EdgeType.BEZIER\n          ? {\n              block: 4,\n              blockIndex: InstanceBlockIndex.ONE,\n              name: 'control',\n              size: InstanceAttributeSize.FOUR,\n              update: o => [o.control[0][0], o.control[0][1], 0, 0],\n            }\n          : null,\n        type === EdgeType.BEZIER2\n          ? {\n              block: 4,\n              blockIndex: InstanceBlockIndex.ONE,\n              name: 'control',\n              size: InstanceAttributeSize.FOUR,\n              update: o => toInstanceIOValue(o.control),\n            }\n          : null,\n      ],\n      uniforms: [\n        {\n          name: 'scaleFactor',\n          size: UniformSize.ONE,\n          update: (uniform: IUniform) => [scaleFactor()],\n        },\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: 'position',\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexInterpolation[vertex],\n            // The number of vertices\n            MAX_SEGMENTS * 2,\n          ],\n        },\n      ],\n      vertexCount: MAX_SEGMENTS * 2 + 2,\n      vs: vs.shader,\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh,\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentShape;\n  }\n}\n","export * from './edge-layer';\nexport * from './edge-instance';\nexport * from './types';\n","import {\n  IInstanceOptions,\n  Instance,\n  observable,\n} from '../../instance-provider';\nimport { Circle } from '../../primitives/circle';\n\nexport interface ICircleInstanceOptions extends IInstanceOptions, Circle {\n  /** The color of this circle */\n  color?: [number, number, number, number];\n  /** The z depth of the circle (for draw ordering) */\n  depth?: number;\n}\n\nexport class CircleInstance extends Instance implements Circle {\n  @observable color: [number, number, number, number] = [1.0, 1.0, 1.0, 1.0];\n  @observable depth: number = 0;\n  @observable radius: number = 0;\n  @observable x: number = 0;\n  @observable y: number = 0;\n\n  constructor(options: ICircleInstanceOptions) {\n    super(options);\n\n    this.color = options.color || this.color;\n    this.radius = options.radius || this.radius;\n    this.x = options.x || this.x;\n    this.y = options.y || this.y;\n    this.depth = options.depth || this.depth;\n  }\n\n  get width() {\n    return this.radius * 2;\n  }\n\n  get height() {\n    return this.radius * 2;\n  }\n}\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float edgeSharpnessBase;\\nvarying vec2 pointCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  vertexColor = color * color.a;\\n  float size = radius * scaleFactor;\\n  edgeSharpness = mix(0.8, 0.0, min((size * 6.0 * pixelRatio) / (45.0 * pixelRatio), 1.0));\\n  edgeSharpnessBase = mix(0.1, 0.0, min((size * 6.0 * pixelRatio) / (45.0 * pixelRatio), 1.0));\\n  pointCoord = (position.xy + vec2(1.0, 1.0)) / 2.0;\\n\\n  // Center within clip space\\n  vec4 clipCenter = clipSpace(vec3(center, depth));\\n  // Center in screen space\\n  vec2 screenCenter = (clipCenter.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Position in screen space\\n  vec2 vertex = (position.xy * size) + screenCenter;\\n  // Position back to clip space\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), clipCenter.zw);\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float edgeSharpnessBase;\\nvarying vec2 pointCoord;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius + (radius * edgeSharpnessBase),\\n    dot(dist, dist) * 4.0\\n  );\\n}\\n\\nvoid main() {\\n  float step_factor = circle(pointCoord.xy, 1.0);\\n\\n  setColor(mix(\\n    vec4(0.0, 0.0, 0.0, 0.0),\\n    vertexColor,\\n    step_factor\\n  ));\\n}\\n\"","module.exports = \"void main() {\\n  gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n}\"","module.exports = \"\"","import { Bounds } from '../primitives';\nimport { IPoint } from '../primitives/point';\nimport {\n  IColorPickingData,\n  InstanceHitTest,\n  IPickInfo,\n  IProjection,\n  PickType,\n} from '../types';\nimport { Instance, TrackedQuadTree } from '../util';\nimport { UniformColorDiffProcessor } from './buffer-management/diff-processors/uniform-color-diff-processor';\nimport { ILayerProps, Layer } from './layer';\n\nfunction isColorProcessor<T extends Instance>(\n  val: any,\n): val is UniformColorDiffProcessor<T> {\n  return val && val.colorPicking;\n}\n\n/**\n * This manages mouse gestures broadcast to the layer and handles appropriate actions such as determining\n * how to make the interaction translate to picking events for the layer's instances.\n *\n * This class, in summary, takes in the gestures to the view and converts them to gestures to the instances.\n */\nexport class LayerInteractionHandler<\n  T extends Instance,\n  U extends ILayerProps<T>\n> {\n  /** This is the color picking information most recently rendered */\n  colorPicking?: IColorPickingData;\n  /** This tracks the elements that have the mouse currently over them */\n  isMouseOver = new Map<T, boolean>();\n  /** This tracks the elements the mouse was down on */\n  isMouseDown = new Map<T, boolean>();\n  /** This is the layer the interaction handler manages events for */\n  layer: Layer<T, U>;\n\n  constructor(layer: Layer<T, U>) {\n    this.layer = layer;\n  }\n\n  /**\n   * Retrieves the color picking instance determined for the procedure.\n   */\n  getColorPickInstance() {\n    if (\n      this.colorPicking &&\n      isColorProcessor<T>(this.layer.diffManager.processor)\n    ) {\n      return this.layer.diffManager.processor.colorPicking.uidToInstance.get(\n        0xffffff - this.colorPicking.nearestColor,\n      );\n    }\n\n    return null;\n  }\n\n  /**\n   * Handles mouse down gestures for a layer within a view\n   */\n  handleMouseOver(view: IProjection, mouse: IPoint) {\n    // This is the mouse over for the view itself. We should probably just let the mouse move events handle the interactions\n    // With the instances\n  }\n\n  /**\n   * Handles mouse down gestures for a layer within a view\n   */\n  handleMouseDown(view: IProjection, mouse: IPoint, button: number) {\n    // This handles interactions for PickType ALL layers\n    if (this.layer.picking && this.layer.picking.type !== PickType.NONE) {\n      const { onMouseDown } = this.layer.props;\n\n      // If we have a listener for either event we should continue to process the event in more detail\n      if (onMouseDown) {\n        const world = view.viewToWorld(mouse);\n        let hitTest: InstanceHitTest<T>;\n        let query: TrackedQuadTree<T>['query'];\n        let querySpace;\n        let instances: T[] = [];\n\n        if (this.layer.picking.type === PickType.ALL) {\n          hitTest = this.layer.picking.hitTest;\n          query = this.layer.picking.quadTree.query.bind(\n            this.layer.picking.quadTree,\n          );\n          querySpace = (check: Bounds | IPoint) =>\n            query(check).filter(o => hitTest(o, world, view));\n          instances = query(world).filter(o => hitTest(o, world, view));\n        } else if (this.layer.picking.type === PickType.SINGLE) {\n          // Get the instance for the nearest color\n          const instanceForColor = this.getColorPickInstance();\n\n          if (instanceForColor) {\n            instances.push(instanceForColor);\n          }\n        }\n\n        const info: IPickInfo<T> = {\n          button,\n          instances,\n          layer: this.layer.id,\n          projection: view,\n          querySpace,\n          screen: [mouse.x, mouse.y],\n          world: [world.x, world.y],\n        };\n\n        onMouseDown(info);\n\n        // We track all the elements the mouse is currently down on\n        this.isMouseDown.clear();\n        instances.forEach(o => this.isMouseDown.set(o, true));\n      }\n    }\n  }\n\n  /**\n   * Handles mouse out events for a layer within the view\n   */\n  handleMouseOut(view: IProjection, mouse: IPoint) {\n    // This will fire an instance mouse out for any over instances in the queue since we left the view\n    // Thus no instances shall be considered 'over'\n    if (this.layer.picking && this.layer.picking.type !== PickType.NONE) {\n      const { onMouseOut } = this.layer.props;\n\n      if (onMouseOut) {\n        const world = view.viewToWorld(mouse);\n        let hitTest: InstanceHitTest<T>;\n        let query: TrackedQuadTree<T>['query'];\n        let querySpace;\n\n        if (this.layer.picking.type === PickType.ALL) {\n          hitTest = this.layer.picking.hitTest;\n          query = this.layer.picking.quadTree.query.bind(\n            this.layer.picking.quadTree,\n          );\n          querySpace = (check: Bounds | IPoint) =>\n            query(check).filter(o => hitTest(o, world, view));\n        }\n\n        const info: IPickInfo<T> = {\n          instances: Array.from(this.isMouseOver.keys()),\n          layer: this.layer.id,\n          projection: view,\n          querySpace,\n          screen: [mouse.x, mouse.y],\n          world: [world.x, world.y],\n        };\n\n        onMouseOut(info);\n      }\n    }\n\n    // We clear as no instances are over anymore\n    this.isMouseOver.clear();\n    // We also clear all down elements as the mouse is no longer in proper context for the instances\n    // But since the mouse was never actually released, we do not fire an up\n    this.isMouseDown.clear();\n  }\n\n  /**\n   * Handles mouse up gestures for the layer within the provided view\n   */\n  handleMouseUp(view: IProjection, mouse: IPoint, button: number) {\n    // This handles interactions for PickType ALL layers\n    if (this.layer.picking && this.layer.picking.type !== PickType.NONE) {\n      const { onMouseUp } = this.layer.props;\n\n      // If we have a listener for either event we should continue to process the event in more detail\n      if (onMouseUp) {\n        const world = view.viewToWorld(mouse);\n        let hitTest: InstanceHitTest<T>;\n        let query: TrackedQuadTree<T>['query'];\n        let querySpace;\n        let instances: T[] = [];\n\n        if (this.layer.picking.type === PickType.ALL) {\n          hitTest = this.layer.picking.hitTest;\n          query = this.layer.picking.quadTree.query.bind(\n            this.layer.picking.quadTree,\n          );\n          querySpace = (check: Bounds | IPoint) =>\n            query(check).filter(o => hitTest(o, world, view));\n          instances = query(world).filter(o => hitTest(o, world, view));\n        } else if (this.layer.picking.type === PickType.SINGLE) {\n          // Get the instance for the nearest color\n          const instanceForColor = this.getColorPickInstance();\n\n          if (instanceForColor) {\n            instances.push(instanceForColor);\n          }\n        }\n\n        const info: IPickInfo<T> = {\n          button,\n          instances,\n          layer: this.layer.id,\n          projection: view,\n          querySpace,\n          screen: [mouse.x, mouse.y],\n          world: [world.x, world.y],\n        };\n\n        onMouseUp(info);\n      }\n    }\n  }\n\n  /**\n   * Mouse move events on the layer will detect when instances have their item newly over or just moved on\n   */\n  handleMouseMove(view: IProjection, mouse: IPoint) {\n    // This handles interactions for PickType ALL layers\n    const { onMouseOver, onMouseMove, onMouseOut } = this.layer.props;\n\n    if (this.layer.picking && this.layer.picking.type !== PickType.NONE) {\n      // If we have a listener for either event we should continue to process the event in more detail\n      if (onMouseOver || onMouseMove || onMouseOut) {\n        let info: IPickInfo<T>;\n        const world = view.viewToWorld(mouse);\n        let hitTest: InstanceHitTest<T>;\n        let query: TrackedQuadTree<T>['query'];\n        let querySpace;\n        let instances: T[] = [];\n\n        if (this.layer.picking.type === PickType.ALL) {\n          hitTest = this.layer.picking.hitTest;\n          query = this.layer.picking.quadTree.query.bind(\n            this.layer.picking.quadTree,\n          );\n          querySpace = (check: Bounds | IPoint) =>\n            query(check).filter(o => hitTest(o, world, view));\n          instances = query(world).filter(o => hitTest(o, world, view));\n        } else if (this.layer.picking.type === PickType.SINGLE) {\n          // Get the instance for the nearest color\n          const instanceForColor = this.getColorPickInstance();\n\n          if (instanceForColor) {\n            instances.push(instanceForColor);\n          }\n        }\n\n        // Broadcast the picking info for newly over instances to any of the layers listeners if needed\n        if (onMouseOver) {\n          const notOverInstances = instances.filter(\n            o => !this.isMouseOver.get(o),\n          );\n          info = {\n            instances: notOverInstances,\n            layer: this.layer.id,\n            projection: view,\n            querySpace,\n            screen: [mouse.x, mouse.y],\n            world: [world.x, world.y],\n          };\n\n          if (notOverInstances.length > 0) onMouseOver(info);\n        }\n\n        // Broadcast the the picking info for all instances that the mouse moved on\n        if (onMouseMove) {\n          // This is the pick info object we will broadcast from the layer\n          info = {\n            instances,\n            layer: this.layer.id,\n            projection: view,\n            querySpace,\n            screen: [mouse.x, mouse.y],\n            world: [world.x, world.y],\n          };\n\n          onMouseMove(info);\n        }\n\n        // We take the hovered instances\n        const isCurrentlyOver = new Map<T, boolean>();\n        instances.forEach(o => isCurrentlyOver.set(o, true));\n\n        // Broadcast the the picking info for all instances that the mouse moved off of\n        if (onMouseOut) {\n          const noLongerOver = Array.from(this.isMouseOver.keys()).filter(\n            o => !isCurrentlyOver.get(o),\n          );\n\n          // This is the pick info object we will broadcast from the layer\n          info = {\n            instances: noLongerOver,\n            layer: this.layer.id,\n            projection: view,\n            querySpace,\n            screen: [mouse.x, mouse.y],\n            world: [world.x, world.y],\n          };\n\n          if (noLongerOver.length > 0) onMouseOut(info);\n        }\n\n        // We store the current hovered over items as our over item list for next interaction\n        this.isMouseOver = isCurrentlyOver;\n      }\n    }\n  }\n\n  /**\n   * Handles click gestures on the layer within a view\n   */\n  handleMouseClick(view: IProjection, mouse: IPoint, button: number) {\n    // This handles interactions for PickType ALL layers\n    if (this.layer.picking && this.layer.picking.type !== PickType.NONE) {\n      const { onMouseClick } = this.layer.props;\n\n      // If we have a listener for either event we should continue to process the event in more detail\n      if (onMouseClick) {\n        const world = view.viewToWorld(mouse);\n        let hitTest: InstanceHitTest<T>;\n        let query: TrackedQuadTree<T>['query'];\n        let querySpace;\n        let instances: T[] = [];\n\n        if (this.layer.picking.type === PickType.ALL) {\n          hitTest = this.layer.picking.hitTest;\n          query = this.layer.picking.quadTree.query.bind(\n            this.layer.picking.quadTree,\n          );\n          querySpace = (check: Bounds | IPoint) =>\n            query(check).filter(o => hitTest(o, world, view));\n          instances = query(world).filter(o => hitTest(o, world, view));\n        } else if (this.layer.picking.type === PickType.SINGLE) {\n          // Get the instance for the nearest color\n          const instanceForColor = this.getColorPickInstance();\n\n          if (instanceForColor) {\n            instances.push(instanceForColor);\n          }\n        }\n\n        const info: IPickInfo<T> = {\n          button,\n          instances,\n          layer: this.layer.id,\n          projection: view,\n          querySpace,\n          screen: [mouse.x, mouse.y],\n          world: [world.x, world.y],\n        };\n\n        onMouseClick(info);\n      }\n    }\n  }\n\n  /**\n   * Handles drag gestures for the layer within the view\n   */\n  handleMouseDrag(view: IProjection, mouse: IPoint) {\n    // We probably should not broadcast drag events for the sake of instances. Instance dragging should be handled on\n    // An instance by instance basis rather than coming from the view's gestures\n  }\n}\n","import { Instance } from '../../../instance-provider';\nimport { IQuadTreePickingMetrics, PickType } from '../../../types';\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  isBufferLocation,\n} from '../buffer-manager-base';\nimport { IInstanceDiffManagerTarget } from '../instance-diff-manager';\nimport { IUniformBufferLocation } from '../uniform-buffer-manager';\nimport { UniformDiffProcessor } from './uniform-diff-processor';\n\nconst EMPTY: number[] = [];\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class UniformQuadDiffProcessor<\n  T extends Instance\n> extends UniformDiffProcessor<T> {\n  quadPicking: IQuadTreePickingMetrics<T>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>,\n  ) {\n    super(layer, bufferManager);\n\n    if (layer.picking.type === PickType.ALL) {\n      this.quadPicking = layer.picking;\n    } else {\n      console.warn(\n        'Diff Processing Error: A layer has a diff processor requesting Quad Processing but the picking type is not valid.',\n      );\n    }\n  }\n\n  /**\n   * This processes add operations from changes in the instancing data and manages the layer's quad tree\n   * with the instance as well.\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation,\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (uniformCluster) {\n      manager.changeInstance(manager, instance, EMPTY, uniformCluster);\n    }\n\n    // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n    else {\n      const uniforms = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocation(uniforms)) {\n        instance.active = true;\n        manager.updateInstance(manager.layer, instance, uniforms);\n\n        // Ensure the instance has an updated injection in the quad tree\n        manager.quadPicking.quadTree.remove(instance);\n        manager.quadPicking.quadTree.add(instance);\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation,\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the uniforms\n    if (uniformCluster) {\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n\n      // Ensure the instance has an updated injection in the quad tree\n      manager.quadPicking.quadTree.remove(instance);\n      manager.quadPicking.quadTree.add(instance);\n    }\n\n    // If we don't have existing uniforms, then we must remove the instance\n    else {\n      manager.addInstance(manager, instance, EMPTY, uniformCluster);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation,\n  ) {\n    if (uniformCluster) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n      // Remove the instance from our quad tree\n      manager.quadPicking.quadTree.remove(instance);\n    }\n  }\n}\n","import { Instance } from '../../../instance-provider';\nimport { ISinglePickingMetrics, PickType } from '../../../types';\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  isBufferLocation,\n} from '../buffer-manager-base';\nimport { IInstanceDiffManagerTarget } from '../instance-diff-manager';\nimport { IUniformBufferLocation } from '../uniform-buffer-manager';\nimport { UniformDiffProcessor } from './uniform-diff-processor';\n\nconst EMPTY: number[] = [];\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class UniformColorDiffProcessor<\n  T extends Instance\n> extends UniformDiffProcessor<T> {\n  colorPicking: ISinglePickingMetrics<T>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>,\n  ) {\n    super(layer, bufferManager);\n\n    if (layer.picking.type === PickType.SINGLE) {\n      this.colorPicking = layer.picking;\n      this.colorPicking.uidToInstance = new Map<number, T>();\n    } else {\n      console.warn(\n        'Diff Processing Error: A layer has a diff processor requesting Color Processing but the picking type is not valid.',\n      );\n    }\n  }\n\n  /**\n   * This processes add operations from changes in the instancing data and manages the layer's matching of\n   * color / UID to Instance\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster: IUniformBufferLocation,\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (uniformCluster) {\n      manager.changeInstance(manager, instance, EMPTY, uniformCluster);\n    }\n\n    // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n    else {\n      const uniforms = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocation(uniforms)) {\n        instance.active = true;\n        manager.updateInstance(manager.layer, instance, uniforms);\n\n        // Make sure the instance is mapped to it's UID\n        manager.colorPicking.uidToInstance.set(instance.uid, instance);\n      } else {\n        console.warn(\n          'A data cluster was not provided by the manager to associate an instance with.',\n        );\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster: IUniformBufferLocation,\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the uniforms\n    if (uniformCluster) {\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n    }\n\n    // If we don't have existing uniforms, then we must remove the instance\n    else {\n      manager.addInstance(manager, instance, EMPTY, uniformCluster);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster: IUniformBufferLocation,\n  ) {\n    if (uniformCluster) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n      // Remove the instance from our quad tree\n      manager.colorPicking.uidToInstance.delete(instance.uid);\n    }\n  }\n}\n","import { Instance } from '../../../instance-provider/instance';\nimport { InstanceDiff } from '../../../instance-provider/instance-provider';\nimport { IInstanceAttributeInternal } from '../../../types';\nimport { Vec } from '../../../util';\nimport {\n  IBufferLocation,\n  IBufferLocationGroup,\n  isBufferLocationGroup,\n} from '../buffer-manager-base';\nimport { IInstanceAttributeBufferLocationGroup } from '../instance-attribute-buffer-manager';\nimport { IInstanceDiffManagerTarget } from '../instance-diff-manager';\nimport { BaseDiffProcessor } from './base-diff-processor';\n\nconst EMPTY: number[] = [];\nconst { min, max } = Math;\n\nenum DiffMode {\n  /** This mode will analyze incoming buffer location changes and only update the range of changed buffer */\n  PARTIAL,\n  /** This mode will not spend time figuring out what has changed for a buffer, rather the whole buffer will get an update */\n  FULL,\n}\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class InstanceAttributeDiffProcessor<\n  T extends Instance\n> extends BaseDiffProcessor<T> {\n  /** This is the processor's current diff mode for consuming instance updates. */\n  private diffMode: DiffMode = DiffMode.PARTIAL;\n\n  /** This tracks a buffer attribute's uid to the range of data that it should update */\n  bufferAttributeUpdateRange: {\n    [key: number]: [IInstanceAttributeInternal<T>, number, number];\n  } = {};\n\n  /** This tracks a buffer attribute's uid that will perform a complete update */\n  bufferAttributeWillUpdate: {\n    [key: number]: IInstanceAttributeInternal<T>,\n  } = {};\n\n  /**\n   * The instance updating is a property instead of a method as we will want to be able to gear shift it for varying levels\n   * of adjustments.\n   */\n  updateInstance: (\n    layer: IInstanceDiffManagerTarget<T>,\n    instance: T,\n    propIds: number[],\n    bufferLocations: IBufferLocationGroup<IBufferLocation>,\n  ) => void = this.updateInstancePartial;\n\n  /**\n   * This processes add operations from changes in the instancing data\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup,\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (bufferLocations) {\n      manager.changeInstance(manager, instance, EMPTY, bufferLocations);\n    }\n\n    // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n    else {\n      const newBufferLocations = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocationGroup(newBufferLocations)) {\n        instance.active = true;\n        manager.updateInstance(\n          manager.layer,\n          instance,\n          EMPTY,\n          newBufferLocations,\n        );\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup,\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the bufferLocations\n    if (bufferLocations) {\n      manager.updateInstance(manager.layer, instance, propIds, bufferLocations);\n    }\n\n    // If we don't have existing bufferLocations, then we must remove the instance\n    else {\n      manager.addInstance(manager, instance, EMPTY, bufferLocations);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup,\n  ) {\n    if (bufferLocations) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, EMPTY, bufferLocations);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n    }\n  }\n\n  /**\n   * This performs the actual updating of buffers the instance needs to update\n   */\n  updateInstancePartial(\n    layer: IInstanceDiffManagerTarget<T>,\n    instance: T,\n    propIds: number[],\n    bufferLocations: IBufferLocationGroup<IBufferLocation>,\n  ) {\n    const propertyToLocation = bufferLocations.propertyToBufferLocation;\n    const bufferAttributeUpdateRange = this.bufferAttributeUpdateRange;\n    let location: IBufferLocation;\n    let updateValue: Vec;\n    let updateRange;\n    let childLocations: IBufferLocation[];\n    let attribute: IInstanceAttributeInternal<T>;\n\n    if (instance.active) {\n      // If no prop ids provided, then we perform a complete instance property update\n      if (propIds.length === 0) {\n        propIds = this.bufferManager.getUpdateAllPropertyIdList();\n      }\n\n      for (let i = 0, end = propIds.length; i < end; ++i) {\n        // First update for the instance attribute itself\n        location = propertyToLocation[propIds[i]];\n        attribute = location.attribute;\n        attribute.atlas && layer.resource.setTargetAtlas(attribute.atlas.key);\n        updateValue = attribute.update(instance);\n        location.buffer.value.set(updateValue, location.range[0]);\n        updateRange = bufferAttributeUpdateRange[attribute.uid] || [\n          null,\n          Number.MAX_SAFE_INTEGER,\n          Number.MIN_SAFE_INTEGER,\n        ];\n        updateRange[0] = attribute;\n        updateRange[1] = min(location.range[0], updateRange[1]);\n        updateRange[2] = max(location.range[1], updateRange[2]);\n        bufferAttributeUpdateRange[attribute.uid] = updateRange;\n\n        // Now update any child attributes that would need updating based on the parent attribute changing\n        if (location.childLocations) {\n          childLocations = location.childLocations;\n\n          for (let k = 0, endk = childLocations.length; k < endk; ++k) {\n            location = childLocations[k];\n            updateValue = location.attribute.update(instance);\n            location.buffer.value.set(updateValue, location.range[0]);\n            updateRange = bufferAttributeUpdateRange[\n              location.attribute.uid\n            ] || [null, Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER];\n            updateRange[0] = location.attribute;\n            updateRange[1] = min(location.range[0], updateRange[1]);\n            updateRange[2] = max(location.range[1], updateRange[2]);\n            bufferAttributeUpdateRange[location.attribute.uid] = updateRange;\n          }\n        }\n      }\n    }\n\n    // When the instance is inactive all we update is the active attribute to false\n    else {\n      location =\n        propertyToLocation[this.bufferManager.getActiveAttributePropertyId()];\n      attribute = location.attribute;\n      updateValue = attribute.update(instance);\n      location.buffer.value.set(updateValue, location.range[0]);\n      updateRange = bufferAttributeUpdateRange[attribute.uid] || [\n        null,\n        Number.MAX_SAFE_INTEGER,\n        Number.MIN_SAFE_INTEGER,\n      ];\n      updateRange[0] = attribute;\n      updateRange[1] = min(location.range[0], updateRange[1]);\n      updateRange[2] = max(location.range[1], updateRange[2]);\n      bufferAttributeUpdateRange[attribute.uid] = updateRange;\n    }\n  }\n\n  /**\n   * This performs an update on the buffers with the intent the entire buffer is going to update\n   * rather than a chunk of it.\n   */\n  updateInstanceFull(\n    layer: IInstanceDiffManagerTarget<T>,\n    instance: T,\n    propIds: number[],\n    bufferLocations: IBufferLocationGroup<IBufferLocation>,\n  ) {\n    const propertyToLocation = bufferLocations.propertyToBufferLocation;\n    const bufferAttributeWillUpdate = this.bufferAttributeWillUpdate;\n    let location: IBufferLocation;\n    let updateValue: Vec;\n    let childLocations: IBufferLocation[];\n    let attribute: IInstanceAttributeInternal<T>;\n\n    if (instance.active) {\n      // If no prop ids provided, then we perform a complete instance property update\n      if (propIds.length === 0) {\n        propIds = this.bufferManager.getUpdateAllPropertyIdList();\n      }\n\n      for (let i = 0, end = propIds.length; i < end; ++i) {\n        // First update for the instance attribute itself\n        location = propertyToLocation[propIds[i]];\n        attribute = location.attribute;\n        attribute.atlas && layer.resource.setTargetAtlas(attribute.atlas.key);\n        updateValue = attribute.update(instance);\n        location.buffer.value.set(updateValue, location.range[0]);\n        bufferAttributeWillUpdate[attribute.uid] = attribute;\n\n        // Now update any child attributes that would need updating based on the parent attribute changing\n        if (location.childLocations) {\n          childLocations = location.childLocations;\n\n          for (let k = 0, endk = childLocations.length; k < endk; ++k) {\n            location = childLocations[k];\n            attribute = location.attribute;\n            updateValue = attribute.update(instance);\n            location.buffer.value.set(updateValue, location.range[0]);\n            bufferAttributeWillUpdate[attribute.uid] = attribute;\n          }\n        }\n      }\n    }\n\n    // When the instance is inactive all we update is the active attribute to false\n    else {\n      location =\n        propertyToLocation[this.bufferManager.getActiveAttributePropertyId()];\n      attribute = location.attribute;\n      attribute.atlas && layer.resource.setTargetAtlas(attribute.atlas.key);\n      updateValue = attribute.update(instance);\n      location.buffer.value.set(updateValue, location.range[0]);\n      bufferAttributeWillUpdate[attribute.uid] = attribute;\n    }\n  }\n\n  /**\n   * Finalize all of the buffer changes and apply the correct update ranges\n   */\n  commit() {\n    // If we're in a partial mode: just update the portion of the buffer that needs updating.\n    if (this.diffMode === DiffMode.PARTIAL) {\n      // We now grab all of the attributes and set their update ranges\n      const updates = Object.values(this.bufferAttributeUpdateRange);\n\n      for (let i = 0, end = updates.length; i < end; ++i) {\n        const update = updates[i];\n        const attribute = update[0].bufferAttribute;\n        attribute.needsUpdate = true;\n        attribute.updateRange = {\n          count: update[2] - update[1],\n          offset: update[1],\n        };\n      }\n    }\n\n    // Otherwise just update the full buffer\n    else {\n      // We now grab all of the attributes and set their update ranges\n      const updates = Object.values(this.bufferAttributeWillUpdate);\n\n      for (let i = 0, end = updates.length; i < end; ++i) {\n        const attribute = updates[i].bufferAttribute;\n        attribute.needsUpdate = true;\n        attribute.updateRange = {\n          count: -1,\n          offset: 0,\n        };\n      }\n    }\n\n    // Clear the attribute update metrics\n    this.bufferAttributeUpdateRange = {};\n  }\n\n  /**\n   * This will optimize the update method used. If there are enough instances being updated, we will\n   * cause the entire attribute buffer to update. If there are not enough, then we will update with\n   * additional steps to\n   */\n  incomingChangeList(changes: InstanceDiff<T>[]) {\n    if (changes.length === 0) {\n      this.diffMode = DiffMode.PARTIAL;\n    }\n\n    else if (changes.length > this.bufferManager.getInstanceCount() * 0.7) {\n      this.diffMode = DiffMode.FULL;\n    }\n\n    else {\n      this.diffMode = DiffMode.PARTIAL;\n    }\n\n    if (this.diffMode === DiffMode.PARTIAL) {\n      this.updateInstance = this.updateInstancePartial;\n    }\n\n    else {\n      this.updateInstance = this.updateInstanceFull;\n    }\n  }\n}\n","import * as Three from 'three';\nimport { Instance } from '../../instance-provider';\nimport { makeInstanceUniformNameArray } from '../../shaders/util/make-instance-uniform-name';\nimport { IInstanceAttribute, PickType } from '../../types';\nimport { uid, Vec2 } from '../../util';\nimport { Layer } from '../layer';\nimport { generateLayerModel } from '../layer-processing/generate-layer-model';\nimport { Scene } from '../scene';\nimport { BufferManagerBase, IBufferLocation } from './buffer-manager-base';\n\nexport interface IUniformBufferLocation extends IBufferLocation {\n  /** This is the index of the instance as it appears in the buffer */\n  instanceIndex: number;\n  /** This is the instance data uniform */\n  buffer: Three.IUniform;\n  /** This is the instance data range within the instanceData uniform */\n  range: Vec2;\n}\n\nexport interface InstanceUniformBuffer {\n  /** This tracks which instances are active. Helps optimize draw range */\n  activeInstances: boolean[];\n  /** This is all of the clusters within this buffer */\n  clusters: IUniformBufferLocation[];\n  /** The first instance in the draw range */\n  firstInstance: number;\n  /** The unique geometry object for the buffer: Used to set draw range */\n  geometry: Three.BufferGeometry;\n  /** The last instance in the draw range */\n  lastInstance: number;\n  /** The unique material for the buffer: Used to provide a new set of uniforms */\n  material: Three.ShaderMaterial;\n  /** The unique model generated for the buffer: Used to allow the buffer to be rendered by adding to a scene */\n  model: Three.Object3D;\n  /** Threejs can not have duplicate objects across Scenes */\n  pickModel?: Three.Object3D;\n}\n\n/**\n * This is a Buffer Management system that performs instancing via the uniforms available to the hardware.\n * This improves compatibility with instancing for systems DRAMATICALLY as ALL systems WILL support uniforms.\n * This will NOT perform the best against true hardware instancing support, but it will have edge cases where it\n * is needed.\n *\n * When a layer has too many instance + vertex attributes for the hardware, the system will defer to this buffer methodology.\n *\n * This class does a whoooooole lot of making the magical instancing optimization controls possible.\n *\n * Our instancing hackyness comes from the idea that uniforms are fast, and you don't have to commit\n * ALL of them when you touch just a little piece, and you don't have worry about drivers not supporting\n * partial vertex buffer updates.\n *\n * This also is WebGL 1.0 compatible without any extensions that are poorly implemented. And again: does\n * NOT require entire attribute buffer commits.\n *\n * Uniforms are limited for any given draw call. So we have to create multiple materials to support\n * chunks of the instances that need to be drawn. We then have to associate an instance with the set\n * of uniforms that is related to the instance and keep them paired together. If we have too many instances\n * we must generate more buffers to accomodate them.\n *\n * If we remove instances, we must free up the uniform set so that others can use the uniforms. While the uniforms\n * are not in use, the instance should not be rendering.\n */\nexport class UniformBufferManager<T extends Instance> extends BufferManagerBase<\n  T,\n  IUniformBufferLocation\n> {\n  /** The number of uniform blocks an instance requires */\n  private uniformBlocksPerInstance: number;\n  /** The generated buffers by this manager */\n  private buffers: InstanceUniformBuffer[] = [];\n  /** The uniform clusters that are free and can be used by an instance */\n  private availableClusters: IUniformBufferLocation[] = [];\n  /** A lookup of an instance to a cluster of uniforms associated with it */\n  private instanceToCluster: { [key: number]: IUniformBufferLocation } = {};\n  /** A map of a cluster of uniforms to the buffer it comes from */\n  private clusterToBuffer = new Map<\n    IUniformBufferLocation,\n    InstanceUniformBuffer\n  >();\n\n  constructor(layer: Layer<T, any>, scene: Scene) {\n    super(layer, scene);\n\n    let maxUniformBlock: number = 0;\n    layer.instanceAttributes.forEach((attributes: IInstanceAttribute<T>) => {\n      maxUniformBlock = Math.max(attributes.block, maxUniformBlock);\n    });\n\n    this.uniformBlocksPerInstance = maxUniformBlock + 1;\n  }\n\n  /**\n   * This adds an instance to the manager and gives the instance an associative\n   * block of uniforms to work with.\n   */\n  add = function(instance: T) {\n    // If there are no available buffers, we must add a buffer\n    if (this.availableClusters.length <= 0) {\n      this.makeNewBuffer();\n    }\n\n    const cluster = this.availableClusters.pop();\n\n    if (cluster) {\n      this.instanceToCluster[instance.uid] = cluster;\n    } else {\n      console.warn(\n        'No valid cluster available for instance added to uniform manager.',\n      );\n    }\n\n    return cluster;\n  };\n\n  /**\n   * Free all resources this manager may be holding onto\n   */\n  destroy() {\n    this.buffers.forEach(buffer => {\n      buffer.geometry.dispose();\n      buffer.material.dispose();\n    });\n  }\n\n  /**\n   * This retireves the uniforms associated with an instance, or returns nothing\n   * if the instance has not been associated yet.\n   */\n  getBufferLocations(instance: T) {\n    return this.instanceToCluster[instance.uid];\n  }\n\n  /**\n   * TODO: The uniform buffer does not need to utilize this yet. it will be more necessary\n   * when this manager updates only changed properties.\n   */\n  getActiveAttributePropertyId() {\n    return -1;\n  }\n\n  /**\n   * TODO: This is irrelevant tot his manager for now.\n   * Number of instances this buffer manages.\n   */\n  getInstanceCount() {\n    return -1;\n  }\n\n  /**\n   * TODO: The uniform buffer updates ALL attributes every change for any property so far.\n   * This should be fixed for performance improvements on the compatibility mode.\n   */\n  getUpdateAllPropertyIdList() {\n    return [];\n  }\n\n  /**\n   * Disassociates an instance with it's group of uniforms and makes the instance\n   * in the buffer no longer drawable.\n   */\n  remove = function(instance: T) {\n    const cluster = this.instanceToCluster[instance.uid];\n\n    // If the instance is associated with a cluster, we can add the cluster back to being available\n    // For another instance.\n    if (cluster) {\n      delete this.instanceToCluster[instance.uid];\n      this.availableClusters.push(cluster);\n    }\n\n    return instance;\n  };\n\n  /**\n   * Clears all elements of this manager from the current scene it was in.\n   */\n  removeFromScene() {\n    this.buffers.forEach((buffer, index) => {\n      this.scene.container.remove(buffer.model);\n      buffer.pickModel && this.scene.pickingContainer.remove(buffer.pickModel);\n    });\n\n    delete this.scene;\n  }\n\n  /**\n   * Applies the buffers to the provided scene for rendering.\n   */\n  setScene(scene: Scene) {\n    this.buffers.forEach((buffer, index) => {\n      this.scene.container.add(buffer.model);\n      buffer.pickModel && this.scene.pickingContainer.add(buffer.pickModel);\n    });\n\n    this.scene = scene;\n  }\n\n  /**\n   * This generates a new buffer of uniforms to associate instances with.\n   */\n  makeNewBuffer() {\n    // We generate a new geometry object for the buffer as the geometry\n    // Needs to have it's own unique draw range per buffer for optimal\n    // Performance\n    const newGeometry = new Three.BufferGeometry();\n    this.layer.vertexAttributes.forEach(attribute => {\n      if (attribute.materialAttribute) {\n        newGeometry.addAttribute(attribute.name, attribute.materialAttribute);\n      }\n    });\n\n    // Ensure the draw range covers every instance in the geometry.\n    newGeometry.drawRange.start = 0;\n    newGeometry.drawRange.count =\n      this.layer.maxInstancesPerBuffer * this.layer.instanceVertexCount;\n\n    // This is the material that is generated for the layer that utilizes all of the generated and\n    // Injected shader IO and shader fragments\n    const newMaterial = this.layer.material.clone();\n    // Now make a Model for the buffer so it can be rendered withn the scene\n    const newModel = generateLayerModel(this.layer, newGeometry, newMaterial);\n    // We render junkloads of instances in a buffer. Culling will have to happen\n    // On an instance level.\n    newModel.frustumCulled = false;\n\n    // Make our new buffer which will manage the geometry and everything necessary\n    const buffer: InstanceUniformBuffer = {\n      activeInstances: [],\n      clusters: [],\n      firstInstance: 0,\n      geometry: newGeometry,\n      lastInstance: 0,\n      material: newMaterial,\n      model: newModel,\n      pickModel:\n        this.layer.picking.type === PickType.SINGLE\n          ? newModel.clone()\n          : undefined,\n    };\n\n    this.buffers.push(buffer);\n\n    // Now that we have created a new buffer, we have all of it's uniforms\n    // To use to render more instances. We must take the instancing uniforms\n    // And divvy them up into clusters for our available buffer.\n    let uniformIndex = 0;\n    const uniformName = makeInstanceUniformNameArray();\n    const instanceData = newMaterial.uniforms[uniformName];\n\n    // We must ensure the vector objects are TOTALLY unique otherwise they'll get shared across buffers\n    instanceData.value = instanceData.value.map(\n      () => new Three.Vector4(0.0, 0.0, 0.0, 0.0),\n    );\n\n    // TODO: This will go away! To satisfy the changing buffer manager interfaces, we make a\n    // fake internal attribute for now\n    const fakeAttribute = Object.assign({}, this.layer.instanceAttributes[0], {\n      bufferAttribute: new Three.InstancedBufferAttribute(\n        new Float32Array(1),\n        1,\n      ),\n      uid: uid(),\n    });\n\n    for (let i = 0, end = this.layer.maxInstancesPerBuffer; i < end; ++i) {\n      const cluster: IUniformBufferLocation = {\n        attribute: fakeAttribute, // TODO: This is not needed for the uniform method yet. When we break down\n        // the uniform updates into attributes, this will be utilized.\n        buffer: instanceData,\n        instanceIndex: i,\n        range: [uniformIndex, 0],\n      };\n\n      uniformIndex += this.uniformBlocksPerInstance;\n      cluster.range[1] = uniformIndex;\n\n      buffer.clusters.push(cluster);\n      this.availableClusters.push(cluster);\n      this.clusterToBuffer.set(cluster, buffer);\n    }\n\n    // Grab the global uniforms from the material and add it to the uniform's materialUniform list so that\n    // We can keep uniforms consistent across all Instances\n    for (let i = 0, end = this.layer.uniforms.length; i < end; ++i) {\n      const uniform = this.layer.uniforms[i];\n      uniform.materialUniforms.push(newMaterial.uniforms[uniform.name]);\n    }\n\n    // Now that we are ready to utilize the buffer, let's add it to the scene so it may be rendered.\n    // Each new buffer equates to one draw call.\n    if (this.scene) {\n      this.scene.container.add(buffer.model);\n      buffer.pickModel && this.scene.pickingContainer.add(buffer.pickModel);\n    }\n  }\n}\n","let toEmit: { [key: string]: [Function, number, number] } = {};\n\nexport function emitOnce(\n  id: string,\n  callback: (calledCountBeforeEmit: number, id: string) => void,\n) {\n  const emit = toEmit[id] || [callback, -1, 0];\n  toEmit[id] = emit;\n  emit[2]++;\n\n  clearTimeout(emit[1]);\n  emit[1] = window.setTimeout(() => {\n    callback(emit[2], id);\n    delete toEmit[id];\n  }, 1);\n}\n\nexport function flushEmitOnce() {\n  for (const id in toEmit) {\n    const emit = toEmit[id];\n    clearTimeout(emit[1]);\n    emit[0](emit[2], id);\n  }\n\n  toEmit = {};\n}\n","import * as Three from 'three';\nimport { Instance, ObservableMonitoring } from '../../instance-provider';\nimport { instanceAttributeShaderName } from '../../shaders/util/instance-attribute-shader-name';\nimport {\n  IInstanceAttribute,\n  IInstanceAttributeInternal,\n  PickType,\n} from '../../types';\nimport { uid } from '../../util';\nimport { emitOnce, flushEmitOnce } from '../../util/emit-once';\nimport { IModelConstructable, Layer } from '../layer';\nimport { generateLayerModel } from '../layer-processing/generate-layer-model';\nimport { Scene } from '../scene';\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  IBufferLocationGroup,\n} from './buffer-manager-base';\n\nconst { max } = Math;\n\n/**\n * This represents the location of data for an instance's property to the piece of attribute buffer\n * it will update when it changes.\n */\nexport interface IInstanceAttributeBufferLocation extends IBufferLocation {}\n\n/** Represents the Location Groupings for Instance attribute Buffer locations */\nexport type IInstanceAttributeBufferLocationGroup = IBufferLocationGroup<\n  IInstanceAttributeBufferLocation\n>;\n\n/**\n * This manages instances in how they associate with buffer data for an instanced attribute strategy.\n */\nexport class InstanceAttributeBufferManager<\n  T extends Instance\n> extends BufferManagerBase<T, IInstanceAttributeBufferLocation> {\n  /** This stores an attribute's name to the buffer locations generated for it */\n  private allBufferLocations: { [key: string]: IBufferLocation[] } = {};\n  /** This contains the buffer locations the system will have available to the  */\n  private availableLocations: IInstanceAttributeBufferLocationGroup[] = [];\n  /** This is the number of instances the buffer draws currently */\n  currentInstancedCount = 0;\n  /** This is the mapped buffer location to the provided Instance */\n  private instanceToBufferLocation: {\n    [key: number]: IInstanceAttributeBufferLocationGroup;\n  } = {};\n  /**\n   * This is the number of times the buffer has grown. This is used to determine how much the buffer will grow\n   * for next growth pass.\n   */\n  private growthCount: number = 0;\n  /** This is the number of instances the buffer currently supports */\n  private maxInstancedCount: number = 1000;\n\n  // These are the only Three objects that must be monitored for disposal\n  private geometry: Three.InstancedBufferGeometry;\n  private material: Three.ShaderMaterial;\n  private model: IModelConstructable & Three.Object3D;\n  private pickModel: IModelConstructable & Three.Object3D | undefined;\n  private attributes: IInstanceAttributeInternal<T>[];\n\n  /** This is a mapping of all attributes to their associated property ids that, when the property changes, the attribute will be updated */\n  private attributeToPropertyIds = new Map<IInstanceAttribute<T>, number[]>();\n  /**\n   * This is a trimmed listing of minimum property ids needed to trigger an update on all properties.\n   * This is used by the diffing process mostly to handle adding a new instance.\n   */\n  private updateAllPropertyIdList: number[] = [];\n  /**\n   * This is the discovered property id of the active attribute for the instance type this manager manages.\n   * This is used by the diffing process to target updates related to deactivating an instance.\n   */\n  private activePropertyId: number = -1;\n\n  constructor(layer: Layer<T, any>, scene: Scene) {\n    super(layer, scene);\n    // Start our add method as a registration step.\n    this.add = this.doAddWithRegistration;\n  }\n\n  /**\n   * First instance to be added to this manager will be heavily analyzed for used observables per attribute.\n   */\n  private doAddWithRegistration(instance: T) {\n    // We need to find out how an instance interacts with the attributes, so we will\n    // loop through the instances, call their updates and get feedback\n    this.layer.instanceAttributes.forEach(attribute => {\n      // We don't need to register child attributes as they get updated as a consequence to parent attributes\n      if (attribute.parentAttribute) return;\n      // Activate monitoring of ids, this also resets the monitor's list\n      ObservableMonitoring.setObservableMonitor(true);\n      // Access the update which accesses an instances properties (usually)\n      attribute.update(instance);\n      // We now have all of the ids of the properties that were used in updating the attributes\n      const propertyIdsForAttribute = ObservableMonitoring.getObservableMonitorIds(\n        true,\n      );\n      // Store the mapping of the property ids\n      this.attributeToPropertyIds.set(attribute, propertyIdsForAttribute);\n\n      // If this is the active attribute, then we track the property id that modifies it\n      // for handling internal instance management.\n      if (attribute === this.layer.activeAttribute) {\n        this.activePropertyId = propertyIdsForAttribute[0];\n      }\n    });\n\n    // SUPER IMPORTANT to deactivate this here. Leaving this turned on causes memory to be chewed up\n    // for every property getter.\n    ObservableMonitoring.setObservableMonitor(false);\n    // This analyzes the properties and how they affect the attributes. It determines the smallest\n    // list possible of property ids needed to trigger an update on all of the attributes.\n    this.makeUpdateAllPropertyIdList();\n    // Do the first resize which creates the buffer and makes all of the initial buffer locations\n    const locationInfo = this.resizeBuffer();\n    // After all of the property id to attribute associations are made, we must break down the buffers\n    // into locations and then group those locations which will become our instance to buffer location\n    // slots\n    this.gatherLocationsIntoGroups(\n      locationInfo.newLocations,\n      locationInfo.growth,\n    );\n    // After the first registration add, we gear shift to a more efficient add method.\n    this.add = this.doAdd;\n\n    // Perform the add after all of the registration process is complete\n    return this.doAdd(instance);\n  }\n\n  /**\n   * After the registration add happens, we gear shift over to this add method which will only pair instances\n   * with their appropriate buffer location.\n   */\n  private doAdd(instance: T) {\n    // Ensure we have buffer locations available\n    if (this.availableLocations.length <= 0) {\n      // Resice the buffer to accommodate more instances\n      const locationInfo = this.resizeBuffer();\n      // Break down the newly generated buffers into property groupings for the instances\n      this.gatherLocationsIntoGroups(\n        locationInfo.newLocations,\n        locationInfo.growth,\n      );\n    }\n\n    // Get the next available location\n    const bufferLocations = this.availableLocations.shift();\n\n    // Pair up the instance with it's buffer location\n    if (bufferLocations) {\n      this.instanceToBufferLocation[instance.uid] = bufferLocations;\n      this.currentInstancedCount = this.geometry.maxInstancedCount = max(\n        this.currentInstancedCount,\n        // Instance index + 1 because the indices are zero indexed and the maxInstancedCount is a count value\n        bufferLocations.instanceIndex + 1,\n      );\n    } else {\n      console.error(\n        'Add Error: Instance Attribute Buffer Manager failed to pair an instance with a buffer location',\n      );\n    }\n\n    return bufferLocations;\n  }\n\n  destroy() {\n    this.geometry.dispose();\n    this.material.dispose();\n    if (this.scene && this.scene.container) {\n      this.scene.container.remove(this.model);\n    }\n  }\n\n  /**\n   * This retireves the buffer locations associated with an instance, or returns nothing\n   * if the instance has not been associated yet.\n   */\n  getBufferLocations(instance: T) {\n    return this.instanceToBufferLocation[instance.uid];\n  }\n\n  /**\n   * This is the property id of the active attribute.\n   */\n  getActiveAttributePropertyId() {\n    return this.activePropertyId;\n  }\n\n  /**\n   * This is the bare minimum property ids that, when triggered for update, will update ALL of the attribute buffers\n   * for the managed layer.\n   */\n  getUpdateAllPropertyIdList() {\n    return this.updateAllPropertyIdList;\n  }\n\n  /**\n   * Analyzes the list of attributes to the property ids that affects them. This populates the list\n   * of minimal property ids needed to trigger updates on all of the attributes.\n   */\n  private makeUpdateAllPropertyIdList() {\n    // Make a deduping list of ids\n    const updateAllPropertyIdList: { [key: number]: number } = {};\n\n    // Get unique ids that will target all attributes\n    this.attributeToPropertyIds.forEach(ids => {\n      updateAllPropertyIdList[ids[0]] = ids[0];\n    });\n\n    // Store the list for the diffing process to utilize\n    this.updateAllPropertyIdList = Object.values(\n      updateAllPropertyIdList,\n    ).filter(Boolean);\n  }\n\n  /**\n   * Disassociates an instance with a buffer\n   */\n  remove = (instance: T) => {\n    const location = this.instanceToBufferLocation[instance.uid];\n\n    if (location) {\n      delete this.instanceToBufferLocation[instance.uid];\n      this.availableLocations.push(location);\n    }\n\n    return instance;\n  }\n\n  /**\n   * Clears all elements of this manager from the current scene it was in.\n   */\n  removeFromScene() {\n    if (this.scene && this.scene.container) {\n      this.scene.container.remove(this.model);\n    }\n    this.pickModel && this.scene.pickingContainer.remove(this.pickModel);\n    delete this.scene;\n  }\n\n  /**\n   * This generates a new buffer of uniforms to associate instances with.\n   */\n  private resizeBuffer() {\n    let growth = 0;\n    // Each attribute will generate lists of new buffer locations after being created or expanded\n    const attributeToNewBufferLocations = new Map<\n      string,\n      IInstanceAttributeBufferLocation[]\n    >();\n\n    // If our geometry is not created yet, then it need be made\n    if (!this.geometry) {\n      // The buffer grows from 0 to our initial instance count\n      growth = this.maxInstancedCount;\n      // We generate a new geometry object for the buffer as the geometry\n      // Needs to have it's own unique draw range per buffer for optimal\n      // Performance.\n      this.geometry = new Three.InstancedBufferGeometry();\n\n      // The geometry needs the vertex information (which should be shared amongst all instances of the layer)\n      this.layer.vertexAttributes.forEach(attribute => {\n        if (attribute.materialAttribute) {\n          this.geometry.addAttribute(\n            attribute.name,\n            attribute.materialAttribute,\n          );\n        }\n      });\n\n      // We now take the instance attributes and add them as Instanced Attributes to our geometry\n      this.attributes = this.layer.instanceAttributes.map(attribute => {\n        // We start with enough data in the buffer to accommodate 1024 instances\n        const size: number = attribute.size || 0;\n        const buffer = new Float32Array(size * this.maxInstancedCount);\n        const bufferAttribute = new Three.InstancedBufferAttribute(\n          buffer,\n          size,\n        );\n        bufferAttribute.setDynamic(true);\n        this.geometry.addAttribute(\n          instanceAttributeShaderName(attribute),\n          bufferAttribute,\n        );\n        let newBufferLocations = attributeToNewBufferLocations.get(\n          attribute.name,\n        );\n\n        if (!newBufferLocations) {\n          newBufferLocations = [];\n          attributeToNewBufferLocations.set(attribute.name, newBufferLocations);\n        }\n\n        const allLocations = this.allBufferLocations[attribute.name] || [];\n        this.allBufferLocations[attribute.name] = allLocations;\n\n        const internalAttribute: IInstanceAttributeInternal<T> = Object.assign(\n          {},\n          attribute,\n          { uid: uid(), bufferAttribute: bufferAttribute },\n        );\n\n        for (let i = 0; i < this.maxInstancedCount; ++i) {\n          const newLocation: IBufferLocation = {\n            attribute: internalAttribute,\n            buffer: {\n              value: buffer,\n            },\n            instanceIndex: i,\n            range: [i * size, i * size + size],\n          };\n\n          newBufferLocations.push(newLocation);\n          allLocations.push(newLocation);\n        }\n\n        // Make an internal instance attribute for tracking\n        return internalAttribute;\n      });\n\n      // Ensure the draw range covers every instance in the geometry.\n      this.geometry.maxInstancedCount = 0;\n      // This is the material that is generated for the layer that utilizes all of the generated and\n      // Injected shader IO and shader fragments\n      this.material = this.layer.material.clone();\n\n      // Grab the global uniforms from the material and add it to the uniform's materialUniform list so that\n      // We can keep uniforms consistent across all Instances\n      for (let i = 0, end = this.layer.uniforms.length; i < end; ++i) {\n        const uniform = this.layer.uniforms[i];\n        uniform.materialUniforms.push(this.material.uniforms[uniform.name]);\n      }\n    }\n\n    // If the geometry is already created, then we will expand each instanced attribute to the next growth\n    // level and generate the new buffer locations based on the expansion\n    else {\n      // Since were are resizing the buffer, let's destroy the old buffer and make one anew\n      this.geometry.dispose();\n      this.geometry = new Three.InstancedBufferGeometry();\n      const previousInstanceAmount = this.maxInstancedCount;\n\n      // The geometry needs the vertex information (which should be shared amongst all instances of the layer)\n      this.layer.vertexAttributes.forEach(attribute => {\n        if (attribute.materialAttribute) {\n          this.geometry.addAttribute(\n            attribute.name,\n            attribute.materialAttribute,\n          );\n        }\n      });\n\n      // We grow our buffer by magnitudes of 10 * 1024\n      // First growth: 1000\n      // Next: 10000\n      // Next: 10000\n      // Next: 10000\n      // Next: 10000\n      // We cap at growth of 1 million to prevent a mass unused RAM void.\n      this.growthCount = Math.min(1, this.growthCount + 1);\n      growth = Math.pow(10, this.growthCount) * 1000;\n      this.maxInstancedCount += growth;\n\n      this.attributes.forEach(attribute => {\n        const bufferAttribute = attribute.bufferAttribute;\n        const size: number = attribute.size || 0;\n\n        if (bufferAttribute.array instanceof Float32Array) {\n          // Make a new buffer that is the proper size\n          const buffer: Float32Array = new Float32Array(\n            this.maxInstancedCount * size,\n          );\n          // Retain all of the information in the previous buffer\n          buffer.set(bufferAttribute.array, 0);\n          // Make our new attribute based on the grown buffer\n          const newAttribute = new Three.InstancedBufferAttribute(buffer, size);\n          // Set the attribute to dynamic so we can update ranges within it\n          newAttribute.setDynamic(true);\n          // Make sure our attribute is updated with the newly made attribute\n          attribute.bufferAttribute = newAttribute;\n          // Add the new attribute to our new geometry object\n          this.geometry.addAttribute(\n            instanceAttributeShaderName(attribute),\n            newAttribute,\n          );\n          // Get the temp storage for new buffer locations\n          let newBufferLocations = attributeToNewBufferLocations.get(\n            attribute.name,\n          );\n\n          // Since we have a new buffer object we are working with, we must update all of the existing buffer\n          // locations to utilize this new buffer. The locations keep everything else the same, but the buffer\n          // object itself should be updated\n          const allLocations = this.allBufferLocations[attribute.name] || [];\n          this.allBufferLocations[attribute.name] = allLocations;\n\n          for (let k = 0, endk = allLocations.length; k < endk; ++k) {\n            allLocations[k].buffer.value = buffer;\n          }\n\n          if (!newBufferLocations) {\n            newBufferLocations = [];\n            attributeToNewBufferLocations.set(\n              attribute.name,\n              newBufferLocations,\n            );\n          }\n\n          for (\n            let i = previousInstanceAmount, end = this.maxInstancedCount;\n            i < end;\n            ++i\n          ) {\n            const newLocation: IBufferLocation = {\n              attribute,\n              buffer: {\n                value: buffer,\n              },\n              instanceIndex: i,\n              range: [i * size, i * size + size],\n            };\n\n            newBufferLocations.push(newLocation);\n            allLocations.push(newLocation);\n          }\n        }\n      });\n\n      this.scene.container.remove(this.model);\n    }\n\n    if (this.scene && this.model) {\n      this.scene.container.remove(this.model);\n    }\n\n    // Remake the model with the generated geometry\n    this.model = generateLayerModel(this.layer, this.geometry, this.material);\n    // We render junkloads of instances for a given buffer. Culling will have to happen\n    // On an instance level.\n    this.model.frustumCulled = false;\n    // Make a picking model if we need it so we can render the model with a different uniform set\n    // for the picking procedure.\n    this.pickModel =\n      this.layer.picking.type === PickType.SINGLE\n        ? this.model.clone()\n        : undefined;\n\n    // Now that we are ready to utilize the buffer, let's add it to the scene so it may be rendered.\n    // Each new buffer equates to one draw call.\n    if (this.scene) {\n      this.scene.container.add(this.model);\n\n      if (this.pickModel) {\n        this.scene.pickingContainer.add(this.pickModel);\n      }\n    }\n\n    return {\n      growth,\n      newLocations: attributeToNewBufferLocations,\n    };\n  }\n\n  /**\n   * This takes newly created buffer locations and groups them by the property ids identified by the\n   * registration phase.\n   */\n  private gatherLocationsIntoGroups(\n    attributeToNewBufferLocations: Map<\n      string,\n      IInstanceAttributeBufferLocation[]\n    >,\n    totalNewInstances: number,\n  ) {\n    if (this.attributeToPropertyIds.size === 0) return;\n\n    // Optimize inner loops by pre-fetching lookups by names\n    const attributesBufferLocations: {\n      attribute: IInstanceAttribute<T>;\n      bufferLocationsForAttribute: IInstanceAttributeBufferLocation[];\n      childBufferLocations: IInstanceAttributeBufferLocation[][];\n      ids: number[];\n    }[] = [];\n\n    this.attributeToPropertyIds.forEach((ids, attribute) => {\n      attributesBufferLocations.push({\n        attribute,\n        bufferLocationsForAttribute:\n          attributeToNewBufferLocations.get(attribute.name) || [],\n        childBufferLocations: (attribute.childAttributes || []).map(\n          attr => attributeToNewBufferLocations.get(attr.name) || [],\n        ),\n        ids,\n      });\n    });\n\n    // Loop through all of the new instances available and gather all of the buffer locations\n    for (let i = 0; i < totalNewInstances; ++i) {\n      const group: IInstanceAttributeBufferLocationGroup = {\n        instanceIndex: -1,\n        propertyToBufferLocation: {},\n      };\n\n      // Loop through all of the property ids that affect specific attributes. Each of these ids\n      // needs an association with the buffer location they modify.\n      for (let j = 0, endj = attributesBufferLocations.length; j < endj; ++j) {\n        const allLocations = attributesBufferLocations[j];\n        const attribute = allLocations.attribute;\n        const ids = allLocations.ids;\n        const bufferLocationsForAttribute =\n          allLocations.bufferLocationsForAttribute;\n\n        if (!bufferLocationsForAttribute) {\n          emitOnce(\n            'Instance Attribute Buffer Error',\n            (count: number, id: string) => {\n              console.warn(\n                `${id}: There is an error in forming buffer location groups in InstanceAttributeBufferManager. Error count: ${count}`,\n              );\n            },\n          );\n          continue;\n        }\n\n        const bufferLocation = bufferLocationsForAttribute.shift();\n\n        if (!bufferLocation) {\n          emitOnce(\n            'Instance Attribute Buffer Error',\n            (count: number, id: string) => {\n              console.warn(\n                `${id}: There is an error in forming buffer location groups in InstanceAttributeBufferManager. Error count: ${count}`,\n              );\n            },\n          );\n          continue;\n        }\n\n        if (group.instanceIndex === -1) {\n          group.instanceIndex = bufferLocation.instanceIndex;\n        } else if (bufferLocation.instanceIndex !== group.instanceIndex) {\n          emitOnce(\n            'Instance Attribute Parallelism Error',\n            (count: number, id: string) => {\n              console.warn(\n                `${id}: A buffer location does not have a matching instance index which means the buffer locations are not in parallel with each other somehow. Error count: ${count}`,\n              );\n              console.warn(attribute.name, bufferLocation);\n            },\n          );\n          continue;\n        }\n\n        // If the attribute has children attributes. Then when the attribute is updated, the child attributes should\n        // be updated as well. Thus the buffer location needs the child attribute buffer locations.\n        if (attribute.childAttributes) {\n          const childLocations = [];\n\n          for (\n            let k = 0, endk = attribute.childAttributes.length;\n            k < endk;\n            ++k\n          ) {\n            const childAttribute = attribute.childAttributes[k];\n            const bufferLocationsForChildAttribute =\n              allLocations.childBufferLocations[k];\n\n            if (bufferLocationsForChildAttribute) {\n              const childBufferLocation = bufferLocationsForChildAttribute.shift();\n              if (childBufferLocation) {\n                childLocations.push(childBufferLocation);\n              } else {\n                emitOnce(\n                  'Instance Attribute Child Attribute Error',\n                  (count: number, id: string) => {\n                    console.warn(\n                      `${id}: A child attribute does not have a buffer location available. Error count: ${count}`,\n                    );\n                    console.warn(\n                      `Parent Attribute: ${attribute.name} Child Attribute: ${\n                        childAttribute.name\n                      }`,\n                    );\n                  },\n                );\n              }\n            }\n          }\n\n          bufferLocation.childLocations = childLocations;\n        }\n\n        // In the group, associate the property ids that affect a buffer location WITH the buffer location they affect\n        for (let k = 0, endk = ids.length; k < endk; ++k) {\n          const id = ids[k];\n          group.propertyToBufferLocation[id] = bufferLocation;\n        }\n      }\n\n      // Store this group as a group that is ready to be associated with an instance\n      this.availableLocations.push(group);\n    }\n\n    // This helps ensure errors get reported in a timely fashion in case this triggers some massive looping\n    flushEmitOnce();\n  }\n\n  /**\n   * Returns the total instances this buffer manages.\n   */\n  getInstanceCount() {\n    return this.maxInstancedCount;\n  }\n}\n","export * from './buffer-manager-base';\nexport * from './instance-attribute-buffer-manager';\nexport * from './uniform-buffer-manager';\n","import { Instance } from '../../instance-provider/instance';\nimport {\n  IInstanceAttribute,\n  INonePickingMetrics,\n  IQuadTreePickingMetrics,\n  ISinglePickingMetrics,\n  PickType,\n} from '../../types';\nimport { LayerBufferType } from '../layer-processing/layer-buffer-type';\nimport { AtlasResourceManager } from '../texture/atlas-resource-manager';\nimport { BufferManagerBase, IBufferLocation } from './buffer-manager-base';\nimport { IBufferLocationGroup } from './buffer-manager-base';\nimport { BaseDiffProcessor } from './diff-processors/base-diff-processor';\nimport { InstanceAttributeDiffProcessor } from './diff-processors/instance-attribute-diff-processor';\nimport { UniformColorDiffProcessor } from './diff-processors/uniform-color-diff-processor';\nimport { UniformDiffProcessor } from './diff-processors/uniform-diff-processor';\nimport { UniformQuadDiffProcessor } from './diff-processors/uniform-quad-diff-processor';\n\n/** Signature of a method that handles a diff */\nexport type DiffHandler<T extends Instance> = (\n  manager: BaseDiffProcessor<T>,\n  instance: T,\n  propIds: number[],\n  bufferLocations?: IBufferLocation | IBufferLocationGroup<IBufferLocation>,\n) => void;\n/** A set of diff handling methods in this order [change, add, remove] */\nexport type DiffLookup<T extends Instance> = DiffHandler<T>[];\n\n/**\n * This interface is the bare minimum properties needed for this diff manager to map instance updates to\n * uniform changes. We don't use a Layer as a target explicitly to avoid circular/hard dependencies\n */\nexport interface IInstanceDiffManagerTarget<T extends Instance> {\n  /** This is the attribute for the target that represents the _active injected value */\n  activeAttribute: IInstanceAttribute<T>;\n  /** This is all of the instance attributes applied to the target */\n  instanceAttributes: IInstanceAttribute<T>[];\n  /** This is the picking metrics for how Instances are picked with the mouse */\n  picking:\n    | IQuadTreePickingMetrics<T>\n    | ISinglePickingMetrics<T>\n    | INonePickingMetrics;\n  /** This is the resource manager for the target which let's us fetch information from an atlas for an instance */\n  resource: AtlasResourceManager;\n  /** This is the manager that links an instance to it's uniform cluster for populating the uniform buffer */\n  bufferManager: BufferManagerBase<T, IBufferLocation>;\n  /** This is the buffering strategy being used */\n  bufferType: LayerBufferType;\n}\n\n/**\n * This class manages the process of taking the diffs of a layer and executing methods on those diffs to perform\n * updates to the uniforms that control those instances.\n */\nexport class InstanceDiffManager<T extends Instance> {\n  bufferManager: BufferManagerBase<T, IBufferLocation>;\n  processor: BaseDiffProcessor<T>;\n  processing: DiffLookup<T>;\n  layer: IInstanceDiffManagerTarget<T>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>,\n  ) {\n    this.layer = layer;\n    this.bufferManager = bufferManager;\n  }\n\n  /**\n   * This returns the proper diff processor for handling diffs\n   */\n  makeProcessor(): DiffLookup<T> {\n    // If this manager has already figured out which processor to use. Just return that processor.\n    if (this.processing) return this.processing;\n\n    if (this.layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE) {\n      this.processor = new InstanceAttributeDiffProcessor(\n        this.layer,\n        this.bufferManager,\n      );\n    } else {\n      // Now we look at the state of the layer to determine the best diff processor strategy\n      if (this.layer.picking) {\n        if (this.layer.picking.type === PickType.ALL) {\n          this.processor = new UniformQuadDiffProcessor(\n            this.layer,\n            this.bufferManager,\n          );\n        } else if (this.layer.picking.type === PickType.SINGLE) {\n          this.processor = new UniformColorDiffProcessor(\n            this.layer,\n            this.bufferManager,\n          );\n        }\n      }\n\n      if (!this.processor) {\n        this.processor = new UniformDiffProcessor(\n          this.layer,\n          this.bufferManager,\n        );\n      }\n    }\n\n    this.processing = [\n      this.processor.changeInstance,\n      this.processor.addInstance,\n      this.processor.removeInstance,\n    ];\n\n    return this.processing;\n  }\n}\n","/**\n * Defines a 2d point within a coordinate plane\n */\nexport interface IPoint {\n  x: number;\n  y: number;\n}\n\n/**\n * Calculates the distance between two points, but keeps the distance in dquared form\n * thus performing Math.sqrt() on the output of this distance would provide the true\n * distance between the points.\n *\n * It is often faster and all that is needed to compare squared distances vs real distances\n * thus eliminating multiple Math.sqrt operations\n *\n * NOTE: For vectors this is the same as (pseudo code):\n * let vector3 = vector2.subtract(vector1)\n * return vector3.dot(vector3)\n *\n * @param p1 The point to find the distance from the second point\n * @param p2 The point to find the distance from the first point\n *\n * @return {number} The distance * distance between the two points\n */\nfunction squareDistance(p1: IPoint, p2: IPoint): number {\n  const dx = p1.x - p2.x;\n  const dy = p1.y - p2.y;\n\n  return dx * dx + dy * dy;\n}\n\n/**\n * Contains methods for managing or manipulating points\n *\n * @export\n * @class Point\n */\nexport class Point {\n  /**\n   * Adds two points together\n   *\n   * @static\n   * @param {IPoint} p1\n   * @param {IPoint} p2\n   * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n   *\n   * @return {IPoint} The two points added together\n   */\n  static add(p1: IPoint, p2: IPoint, out?: IPoint): IPoint {\n    if (out) {\n      out.x = p1.x + p2.x;\n      out.y = p1.y + p2.y;\n      return out;\n    }\n\n    return {\n      x: p1.x + p2.x,\n      y: p1.y + p2.y,\n    };\n  }\n\n  /**\n   * @static\n   * This analyzes a test point against a list of points and determines which of the points is\n   * the closest to the test point. If there are equi-distant points in the list, this will return\n   * the first found in the list.\n   *\n   * @param {IPoint} testPoint The point to compare against other points\n   * @param {IPoint[]} points The list of points to be compared against\n   *\n   * @return {IPoint} The closest point to the test point\n   */\n  static getClosest(testPoint: IPoint, points: IPoint[]): IPoint {\n    let closestDistance = Number.MAX_VALUE;\n    let closestPoint: IPoint = testPoint;\n    let distance: number;\n\n    const findClosest = function(point: IPoint) {\n      distance = squareDistance(point, testPoint);\n\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestPoint = point;\n      }\n    };\n\n    points.forEach(findClosest);\n\n    return closestPoint;\n  }\n\n  /**\n   * @static\n   * This analyzes a test point against a list of points and determines which of the points is\n   * the closest to the test point. If there are equi-distant points in the list, this will return\n   * the first found in the list.\n   *\n   * This just returns the index of the found point and not the point itself\n   *\n   * @param {IPoint} testPoint The point to compare against other points\n   * @param {IPoint[]} points The list of points to be compared against\n   *\n   * @return {number} The index of the closest point to the test point\n   */\n  static getClosestIndex(testPoint: IPoint, points: IPoint[]): number {\n    let closestDistance = Number.MAX_VALUE;\n    let closestPoint: number = 0;\n    let distance: number;\n\n    const findClosest = function(point: IPoint, i: number) {\n      distance = squareDistance(point, testPoint);\n\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestPoint = i;\n      }\n    };\n\n    points.forEach(findClosest);\n\n    return closestPoint;\n  }\n\n  /**\n   * @static\n   * This will calculate a direction vector between two points that points toward p2\n   *\n   * @param {IPoint} amount The start of the direction\n   * @param {IPoint} from The direction to point the vector towards\n   * @param {boolean} normalize If true, this will make the vector have a magnitude of 1\n   *\n   * @returns {number}\n   */\n  static subtract(\n    amount: IPoint,\n    from: IPoint,\n    normalize: boolean = false,\n  ): IPoint {\n    let dx = from.x - amount.x;\n    let dy = from.y - amount.y;\n\n    if (normalize) {\n      const magnitude = Math.sqrt(dx * dx + dy * dy);\n      dx /= magnitude;\n      dy /= magnitude;\n    }\n\n    return {\n      x: dx,\n      y: dy,\n    };\n  }\n\n  /**\n   * @static\n   * Gets the distance between two points\n   *\n   * @param {IPoint} p1\n   * @param {IPoint} p2\n   * @param {boolean} squared If set to true, returns the distance * distance (performs faster)\n   *\n   * @returns {number} The real distance between two points\n   */\n  static getDistance(p1: IPoint, p2: IPoint, squared: boolean = false): number {\n    if (squared) {\n      return squareDistance(p1, p2);\n    }\n\n    return Math.sqrt(squareDistance(p1, p2));\n  }\n\n  /**\n   * @static\n   * Gets a point perfectly between two points\n   *\n   * @param {IPoint} p1\n   * @param {IPoint} p2\n   *\n   * @returns {IPoint} The point between the two provided points\n   */\n  static getMidpoint(p1: IPoint, p2: IPoint) {\n    const direction = Point.subtract(p1, p2);\n\n    return {\n      x: direction.x / 2 + p1.x,\n      y: direction.y / 2 + p1.y,\n    };\n  }\n\n  static make(x: number, y: number) {\n    return { x, y };\n  }\n\n  /**\n   * Scales a point by a given amount\n   *\n   * @static\n   * @param {IPoint} p1\n   * @param {number} s The amount to scale the point by\n   * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n   *\n   * @memberof Point\n   */\n  static scale(p1: IPoint, s: number, out?: IPoint): IPoint {\n    if (out) {\n      out.x = p1.x * s;\n      out.y = p1.y * s;\n      return out;\n    }\n\n    return {\n      x: p1.x * s,\n      y: p1.y * s,\n    };\n  }\n\n  /**\n   * Makes a new point initialized to {0,0}\n   *\n   * @static\n   * @returns {IPoint} A new point object at {0,0}\n   */\n  static zero(): IPoint {\n    return {\n      x: 0,\n      y: 0,\n    };\n  }\n}\n","import { InstanceDiffType } from '../types';\nimport { Instance } from './instance';\n\n/**\n * This is an entry within the change list of the provider. It represents the type of change\n * and stores the property id's of the properties on the instance that have changed.\n */\nexport type InstanceDiff<T extends Instance> = [\n  T,\n  InstanceDiffType,\n  { [key: number]: number }\n];\n\n/**\n * This is an optimized provider, that can provide instances that use the internal observable system\n * to deliver updates to the framework.\n */\nexport class InstanceProvider<T extends Instance> {\n  /** Stores the disposers that are called when the instance is no longer listened to */\n  private cleanObservation: { [key: number]: [T, Function] } = {};\n  /** This stores the changes to the instances themselves */\n  private instanceChanges: { [key: number]: InstanceDiff<T> } = {};\n  /** This flag is true when resolving changes when the change list is retrieved. it blocks changes until the current list is resolved */\n  private allowChanges = true;\n\n  /**\n   * Retrieve all of the changes applied to instances\n   */\n  get changeList(): InstanceDiff<T>[] {\n    this.allowChanges = false;\n    const changes = Object.values(this.instanceChanges);\n\n    return changes;\n  }\n\n  /**\n   * Adds an instance to the provider which will stream observable changes of the instance to\n   * the framework.\n   */\n  add(instance: T) {\n    // No need to duplicate the addition\n    if (this.cleanObservation[instance.uid]) {\n      return instance;\n    }\n\n    if (this.allowChanges) {\n      instance.observer = this;\n      const disposer: Function = instance.observableDisposer;\n      // Store the disposers so we can clean up the observable properties\n      this.cleanObservation[instance.uid] = [instance, disposer];\n      // Indicate we have a new instance\n      this.instanceChanges[instance.uid] = [\n        instance,\n        InstanceDiffType.INSERT,\n        {},\n      ];\n    }\n\n    return instance;\n  }\n\n  /**\n   * Removes all instances from this provider\n   */\n  clear() {\n    const values = Object.values(this.cleanObservation);\n\n    for (let i = 0, end = values.length; i < end; ++i) {\n      this.remove(values[i][0]);\n    }\n  }\n\n  /**\n   * Clear all resources held by this provider. It IS valid to lose reference to all instances\n   * and to this object, which would effectively cause this object to get GC'ed. But if you\n   * desire to hang onto the instance objects, then this should be called.\n   */\n  destroy() {\n    const values = Object.values(this.cleanObservation);\n\n    for (let i = 0, end = values.length; i < end; ++i) {\n      values[i][1]();\n    }\n\n    this.cleanObservation = {};\n    this.instanceChanges = {};\n  }\n\n  /**\n   * This is called from observables to indicate it's parent has been updated\n   */\n  instanceUpdated(instance: T, property: number) {\n    if (this.allowChanges) {\n      // Flag the instance as having a property changed\n      const change = this.instanceChanges[instance.uid] || [\n        instance,\n        InstanceDiffType.CHANGE,\n        {},\n      ];\n      this.instanceChanges[instance.uid] = change;\n      change[1] = InstanceDiffType.CHANGE;\n      change[2][property] = property;\n    }\n  }\n\n  /**\n   * Removes the instance from being advertised changes and from providing the changes\n   * for the instance.\n   */\n  remove(instance: T) {\n    if (this.allowChanges) {\n      const disposer = this.cleanObservation[instance.uid];\n\n      if (disposer) {\n        disposer[1]();\n        delete this.cleanObservation[instance.uid];\n        this.instanceChanges[instance.uid] = [\n          instance,\n          InstanceDiffType.REMOVE,\n          {},\n        ];\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Flagged all changes as dealt with\n   */\n  resolve() {\n    this.allowChanges = true;\n    this.instanceChanges = {};\n  }\n}\n","import * as Three from 'three';\nimport { InstanceProvider } from '../../instance-provider';\nimport { Bounds, IPoint } from '../../primitives';\nimport {\n  ILayerProps,\n  IModelType,\n  IShaderInitialization,\n  Layer,\n} from '../../surface/layer';\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  InstanceBlockIndex,\n  IProjection,\n  IUniform,\n  UniformSize,\n  VertexAttributeSize,\n} from '../../types';\nimport { CommonMaterialOptions, Vec } from '../../util';\nimport { IAutoEasingMethod } from '../../util/auto-easing-method';\nimport { CircleInstance } from './circle-instance';\n\nexport interface ICircleLayerProps extends ILayerProps<CircleInstance> {\n  /** This sets the  */\n  fadeOutOversized?: number;\n  /** This sets a scaling factor for the circle's radius */\n  scaleFactor?(): number;\n  /** Flags this layer to draw  */\n  disableDepthTest?: boolean;\n  /**\n   * This is the properties that can toggle on animations.\n   *\n   * NOTE: The more properties declared as animated will reduce the performance of the layer.\n   * if animated properties are created, it can be beneficial to have other layers with no\n   * animations be available for the Instances to 'rest' in when not moving.\n   */\n  animate?: {\n    center?: IAutoEasingMethod<Vec>;\n    radius?: IAutoEasingMethod<Vec>;\n    color?: IAutoEasingMethod<Vec>;\n  };\n}\n\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class CircleLayer extends Layer<CircleInstance, ICircleLayerProps> {\n  static defaultProps: ICircleLayerProps = {\n    data: new InstanceProvider<CircleInstance>(),\n    fadeOutOversized: -1,\n    key: '',\n    scaleFactor: () => 1,\n  };\n\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods() {\n    const noScaleFactor = () => 1;\n\n    return {\n      // Provide the calculated AABB world bounds for a given circle\n      boundsAccessor: (circle: CircleInstance) =>\n        new Bounds({\n          height: circle.radius * 2,\n          width: circle.radius * 2,\n          x: circle.x - circle.radius,\n          y: circle.y - circle.radius,\n        }),\n\n      // Provide a precise hit test for the circle\n      hitTest: (circle: CircleInstance, point: IPoint, view: IProjection) => {\n        const circleScreenCenter = view.worldToScreen(circle);\n        const mouseScreen = view.worldToScreen(point);\n        const r = circle.radius * (this.props.scaleFactor || noScaleFactor)();\n\n        const delta = [\n          mouseScreen.x - circleScreenCenter.x,\n          mouseScreen.y - circleScreenCenter.y,\n        ];\n\n        return delta[0] * delta[0] + delta[1] * delta[1] < r * r;\n      },\n    };\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<CircleInstance> {\n    const scaleFactor = this.props.scaleFactor || (() => 1);\n    const animations = this.props.animate || {};\n    const {\n      center: animateCenter,\n      radius: animateRadius,\n      color: animateColor,\n    } = animations;\n\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      1: 1,\n      2: -1,\n      3: 1,\n      4: -1,\n      5: -1,\n    };\n\n    const vertexToSide: { [key: number]: number } = {\n      0: -1,\n      1: -1,\n      2: -1,\n      3: 1,\n      4: 1,\n      5: 1,\n    };\n\n    return {\n      fs: require('./circle-layer.fs'),\n      instanceAttributes: [\n        {\n          block: 0,\n          blockIndex: InstanceBlockIndex.ONE,\n          easing: animateCenter,\n          name: 'center',\n          size: InstanceAttributeSize.TWO,\n          update: circle => [circle.x, circle.y],\n        },\n        {\n          block: 0,\n          blockIndex: InstanceBlockIndex.THREE,\n          easing: animateRadius,\n          name: 'radius',\n          size: InstanceAttributeSize.ONE,\n          update: circle => [circle.radius],\n        },\n        {\n          block: 0,\n          blockIndex: InstanceBlockIndex.FOUR,\n          name: 'depth',\n          size: InstanceAttributeSize.ONE,\n          update: circle => [circle.depth],\n        },\n        {\n          block: 1,\n          blockIndex: InstanceBlockIndex.ONE,\n          easing: animateColor,\n          name: 'color',\n          size: InstanceAttributeSize.FOUR,\n          update: circle => circle.color,\n        },\n      ],\n      uniforms: [\n        {\n          name: 'scaleFactor',\n          size: UniformSize.ONE,\n          update: (uniform: IUniform) => [scaleFactor()],\n        },\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: 'position',\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexToSide[vertex],\n            0,\n          ],\n        },\n      ],\n      vertexCount: 6,\n      vs: require('./circle-layer.vs'),\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh,\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentShape;\n  }\n}\n","export * from './circle-layer';\nexport * from './circle-instance';\n","export * from './circles';\nexport * from './edges';\nexport * from './images';\nexport * from './labels';\nexport * from './rectangle';\nexport * from './rings';\nexport * from './types';\n","import * as Three from 'three';\nimport { IMaterialOptions } from '../types';\n\nexport class CommonMaterialOptions {\n  static transparentShape: IMaterialOptions = {\n    premultipliedAlpha: true,\n    transparent: true,\n  };\n\n  static transparentImage: IMaterialOptions = {\n    blending: Three.CustomBlending,\n    blendSrc: Three.OneFactor,\n    premultipliedAlpha: true,\n    transparent: true,\n  };\n}\n","import { Instance } from '../instance-provider/instance';\nimport { Bounds } from '../primitives/bounds';\nimport { IPoint } from '../primitives/point';\n\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nconst maxPopulation: number = 5;\nconst maxDepth: number = 10;\n\nexport type BoundsAccessor<T extends Instance> = (o: T) => Bounds | null;\n\n/**\n * Allows typing of a callback argument\n */\nexport interface IVisitFunction<T extends Instance> {\n  /**\n   * A callback to use during add or query\n   *\n   * Called do provide aggregation or filtering like Array.reduce or\n   * Array.filter, but in a QuadTree instead.\n   *\n   * @param node  The node to effect the function upon\n   * @param child The child to add to the node\n   */\n  (node: Node<T>, child?: Bounds): void;\n}\n\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n */\nexport class Quadrants<T extends Instance> {\n  TL: Node<T>;\n  TR: Node<T>;\n  BL: Node<T>;\n  BR: Node<T>;\n\n  /**\n   * Ensures all memory is released for all nodes and all references are removed\n   * to potentially high memory consumption items\n   */\n  destroy() {\n    this.TL.destroy();\n    this.TR.destroy();\n    this.BL.destroy();\n    this.BR.destroy();\n    delete this.TL;\n    delete this.TR;\n    delete this.BL;\n    delete this.BR;\n  }\n\n  /**\n   * Creates an instance of Quadrants.\n   *\n   * @param bounds The bounds this will create quandrants for\n   * @param depth  The child depth of this element\n   */\n  constructor(\n    bounds: Bounds,\n    depth: number,\n    getBounds: BoundsAccessor<T>,\n    childToNode: Map<T, Node<T>>,\n    childToBounds: Map<T, Bounds | null>,\n  ) {\n    const mid = bounds.mid;\n    this.TL = new Node<T>(bounds.x, mid.x, bounds.y, mid.y, getBounds, depth);\n    this.TR = new Node<T>(\n      mid.x,\n      bounds.right,\n      bounds.y,\n      mid.y,\n      getBounds,\n      depth,\n    );\n    this.BL = new Node<T>(\n      bounds.x,\n      mid.x,\n      mid.y,\n      bounds.bottom,\n      getBounds,\n      depth,\n    );\n    this.BR = new Node<T>(\n      mid.x,\n      bounds.right,\n      mid.y,\n      bounds.bottom,\n      getBounds,\n      depth,\n    );\n    this.TL.childToNode = childToNode;\n    this.TR.childToNode = childToNode;\n    this.BL.childToNode = childToNode;\n    this.BR.childToNode = childToNode;\n    this.TL.childToBounds = childToBounds;\n    this.TR.childToBounds = childToBounds;\n    this.BL.childToBounds = childToBounds;\n    this.BR.childToBounds = childToBounds;\n  }\n}\n\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n */\nexport class Node<T extends Instance> {\n  /** This is the amount of space this node covers */\n  bounds: Bounds;\n  /** These are the child Instances of the node. */\n  children: T[] = [];\n  /**\n   * This tracks a quick lookup of a child to it's parent node. This is used so the child can\n   * be removed with ease and not require a traversal of the tree.\n   */\n  childToNode: Map<T, Node<T>>;\n  /** This tracks the bounds calcuated for the given instance */\n  childToBounds: Map<T, Bounds | null>;\n  /** This is how deep the node is within the tree */\n  depth: number = 0;\n  /** This is the accessor method that retrieves the bounds for an injected instance */\n  getBounds: BoundsAccessor<T>;\n  /** These are the child nodes of this quad node when this node is split. It is null if the node is not split yet */\n  nodes: Quadrants<T> | null = null;\n  /**\n   * These are children with null bounds that do not affect the splitting and ALWAYS get checked every query.\n   * They should only reside on the top node.\n   */\n  nullBounded: T[];\n\n  /**\n   * Destroys this node and ensures all child nodes are destroyed as well.\n   */\n  destroy() {\n    delete this.children;\n    delete this.bounds;\n\n    if (this.nodes) {\n      this.nodes.destroy();\n      this.nodes = null;\n    }\n  }\n\n  /**\n   * Creates an instance of Node.\n   */\n  constructor(\n    left: number,\n    right: number,\n    top: number,\n    bottom: number,\n    getBounds: BoundsAccessor<T>,\n    depth: number = 0,\n  ) {\n    // If params insertted\n    if (arguments.length >= 4) {\n      this.bounds = new Bounds({ left, right, top, bottom });\n    } else {\n      // Otherwise, make tiny start area\n      this.bounds = new Bounds({ left: 0, right: 1, top: 1, bottom: 0 });\n    }\n\n    // Ensure the depth is set\n    this.depth = depth;\n    // Apply the bounds accessor method for instances\n    this.getBounds = getBounds;\n\n    // If this is the top level node, we need to instantiate the lookup that will be used\n    // Across all nodes.\n    if (this.depth === 0) {\n      this.nullBounded = [];\n      this.childToNode = new Map<T, Node<T>>();\n      this.childToBounds = new Map<T, Bounds>();\n    }\n  }\n\n  /**\n   * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n   * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n   * this quad tree spans (and this is the root node), the quad tree will expand to include\n   * the new child.\n   *\n   * @param child The Bounds type object to inject\n   * @param props Properties that can be retrieved with the child object if applicable\n   *\n   * @returns True if the insertion was successful\n   */\n  add(child: T): boolean {\n    let bounds = this.childToBounds.get(child);\n\n    if (!bounds) {\n      // First we access the bounds of the child and store it\n      bounds = this.getBounds(child);\n      this.childToBounds.set(child, bounds);\n    }\n\n    // This is the entry function for adding children, so we must first expand our top node\n    // To cover the area that the child is located.\n    // If we're in bounds, then let's just add the child\n    if (!bounds || bounds.isInside(this.bounds)) {\n      return this.doAdd(child, bounds);\n    } else {\n      // Otherwise, we need to expand first\n      this.cover(bounds);\n      return this.add(child);\n    }\n  }\n\n  /**\n   * Adds a list of new children to this quad tree. It performs the same operations as\n   * addChild for each child in the list, however, it more efficiently recalculates the\n   * bounds necessary to cover the area the children cover.\n   *\n   * @param children      List of Bounds objects to inject\n   */\n  addAll(children: T[]) {\n    // Make sure we cover the entire area of all the children.\n    // We can speed this up a lot if we first calculate the total bounds the new children covers\n    let minX = Number.MAX_VALUE;\n    let minY = Number.MAX_VALUE;\n    let maxX = -Number.MAX_VALUE;\n    let maxY = -Number.MAX_VALUE;\n\n    // Get the dimensions of the new bounds\n    children.forEach(child => {\n      const bounds = this.getBounds(child);\n      this.childToBounds.set(child, bounds);\n      if (!bounds) return;\n\n      if (bounds.x < minX) {\n        minX = bounds.x;\n      }\n      if (bounds.right > maxX) {\n        maxX = bounds.right;\n      }\n      if (bounds.bottom > maxY) {\n        maxY = bounds.bottom;\n      }\n      if (bounds.y < minY) {\n        minY = bounds.y;\n      }\n    });\n\n    // Ensure a valid cover dimension was established. If no valid dimension is established\n    // Then we don't cover, but we can still add the children as that have null Bounds which\n    // Means injecting at the top level.\n    if (\n      minX !== Number.MAX_VALUE &&\n      minY !== Number.MAX_VALUE &&\n      maxX !== -Number.MAX_VALUE &&\n      maxY !== -Number.MAX_VALUE\n    ) {\n      // Make sure our bounds includes the specified bounds\n      this.cover(\n        new Bounds({ left: minX, right: maxX, bottom: maxY, top: minY }),\n      );\n    }\n\n    // Add all of the children into the tree.\n    children.forEach((child, index) =>\n      this.doAdd(child, this.childToBounds.get(child) || null, true),\n    );\n  }\n\n  /**\n   * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n   * This will cause all children to be re-injected into the tree.\n   *\n   * @param bounds The bounds to include in the tree's coverage\n   */\n  cover(bounds: Bounds) {\n    // If we are already covering the area: abort\n    if (bounds.isInside(this.bounds)) {\n      return;\n    }\n\n    // Make our bounds cover the new area\n    this.bounds.encapsulate(bounds);\n    this.bounds.x -= 1;\n    this.bounds.y -= 1;\n    this.bounds.width += 2;\n    this.bounds.height += 2;\n    // Get all of the children underneath this node\n    const allChildren = this.gatherChildren([]);\n    this.children = [];\n\n    // Destroy the split nodes\n    if (this.nodes) {\n      // Completely...destroy...\n      this.nodes.destroy();\n      this.nodes = null;\n    }\n\n    // Clear out the child to node relations\n    this.childToNode.clear();\n    // Reinsert all children with the new dimensions in place\n    allChildren.forEach((child, index) =>\n      this.doAdd(child, this.childToBounds.get(child) || null),\n    );\n  }\n\n  /**\n   * When adding children, this performs the actual action of injecting the child into the tree\n   * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n   *\n   * @param child The Bounds item to inject into the tree\n   * @param props The props to remain associated with the child\n   *\n   * @returns True if the injection was successful\n   */\n  private doAdd(child: T, bounds: Bounds | null, fromSplit?: boolean): boolean {\n    // If this is the top level node and the bounds are null, then we add to the null list\n    if (!bounds && this.depth === 0) {\n      this.nullBounded.push(child);\n      this.childToNode.set(child, this);\n\n      return true;\n    }\n\n    // If no bounds is available at this point, something went terribly wrong\n    if (!bounds) {\n      console.warn(\n        'A null bounds was added to a Quad Tree node below the top node, which is invalid.',\n      );\n      return false;\n    }\n\n    // If bounds are null, then just immediately add\n    // If nodes are present, then we have already exceeded the population of this node\n    if (this.nodes) {\n      if (bounds.isInside(this.nodes.TL.bounds)) {\n        return this.nodes.TL.doAdd(child, bounds, fromSplit);\n      }\n\n      if (bounds.isInside(this.nodes.TR.bounds)) {\n        return this.nodes.TR.doAdd(child, bounds, fromSplit);\n      }\n\n      if (bounds.isInside(this.nodes.BL.bounds)) {\n        return this.nodes.BL.doAdd(child, bounds, fromSplit);\n      }\n\n      if (bounds.isInside(this.nodes.BR.bounds)) {\n        return this.nodes.BR.doAdd(child, bounds, fromSplit);\n      }\n\n      // Otherwise, this is a child overlapping this border\n      this.children.push(child);\n      this.childToNode.set(child, this);\n\n      return true;\n    } else if (bounds.isInside(this.bounds)) {\n      // Otherwise, we have not had a split due to population limits being exceeded\n      this.children.push(child);\n      this.childToNode.set(child, this);\n\n      // If we exceeded our population for this quadrant, it is time to split up\n      if (this.children.length > maxPopulation && this.depth < maxDepth) {\n        this.split();\n      }\n\n      return true;\n    }\n\n    // This is when there is something wrong with the insertted child. The bounds\n    // For the quad should have grown without issue, but in this case the bounds\n    // Could not grow to accomodate the child.\n    if (isNaN(bounds.width + bounds.height + bounds.x + bounds.y)) {\n      console.error(\n        'Child did not fit into bounds because a dimension is NaN',\n        child,\n        bounds,\n      );\n    } else if (bounds.area === 0) {\n      console.error(\n        'Child did not fit into bounds because the area is zero',\n        child,\n        bounds,\n      );\n    } else {\n      console.error(\n        'Child did not get insertted.',\n        'Parent:',\n        this.bounds.toString(),\n        'Child:',\n        bounds.toString(),\n        'Inside Checks:',\n        bounds.x >= this.bounds.x,\n        bounds.right <= this.bounds.right,\n        bounds.y >= this.bounds.y,\n        bounds.bottom <= this.bounds.bottom,\n      );\n    }\n\n    // Don't insert the child and continue\n    return true;\n  }\n\n  private doRemove(child: T) {\n    const index = this.children.indexOf(child);\n\n    if (index > -1) {\n      this.children.splice(index, 1);\n      this.childToNode.delete(child);\n      this.childToBounds.delete(child);\n    }\n  }\n\n  /**\n   * Collects all children of all the current and sub nodes into a single list.\n   *\n   * @param list The list we must aggregate children into\n   *\n   * @return The list specified as the list parameter\n   */\n  gatherChildren(list: T[]): T[] {\n    this.children.forEach(child => list.push(child));\n\n    if (this.nodes) {\n      this.nodes.TL.gatherChildren(list);\n      this.nodes.TR.gatherChildren(list);\n      this.nodes.BL.gatherChildren(list);\n      this.nodes.BR.gatherChildren(list);\n    }\n\n    return list;\n  }\n\n  /**\n   * Entry query for determining query type based on input object\n   *\n   * @param bounds Can be a Bounds or a Point object\n   * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n   *               information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return An array of children that intersects with the query\n   */\n  query(bounds: Bounds | IPoint, visit?: IVisitFunction<T>): T[] {\n    // This stores all of the found Instances when querying by bounds or point\n    let found: T[] = [];\n\n    // If this is the top level node then add in the null bunded items as the start\n    if (this.depth === 0) {\n      found = this.nullBounded.slice(0);\n    }\n\n    // Query a rectangle\n    if (bounds instanceof Bounds) {\n      if (bounds.hitBounds(this.bounds)) {\n        return this.queryBounds(bounds, found, visit);\n      }\n    }\n\n    // Query a point\n    if (this.bounds.containsPoint(bounds)) {\n      return this.queryPoint(bounds, found, visit);\n    }\n\n    // Return an empty array when nothing is collided with\n    return found;\n  }\n\n  /**\n   * Queries children for intersection with a bounds object\n   *\n   * @param b     The Bounds to test children against\n   * @param list  The list of children to aggregate into the query\n   * @param visit A callback function that will receive the Node as it is analyzed. This gives\n   *              information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return     Returns the exact same list that was input as the list param\n   */\n  queryBounds(b: Bounds, list: T[], visit?: IVisitFunction<T>): T[] {\n    this.children.forEach(c => {\n      const bounds = this.childToBounds.get(c);\n\n      if (bounds && bounds.hitBounds(b)) {\n        list.push(c);\n      }\n    });\n\n    if (visit) {\n      visit(this);\n    }\n\n    if (this.nodes) {\n      if (b.hitBounds(this.nodes.TL.bounds)) {\n        this.nodes.TL.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.TR.bounds)) {\n        this.nodes.TR.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.BL.bounds)) {\n        this.nodes.BL.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.BR.bounds)) {\n        this.nodes.BR.queryBounds(b, list, visit);\n      }\n    }\n\n    return list;\n  }\n\n  /**\n   * Queries children for intersection with a point\n   *\n   * @param p     The Point to test children against\n   * @param list  The list of children to aggregate into the query\n   * @param visit A callback function that will receive the Node as it is analyzed. This gives\n   *              information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return      Returns the exact same list that was input as the list param\n   */\n  queryPoint(p: any, list: T[], visit?: IVisitFunction<T>): T[] {\n    this.children.forEach(c => {\n      const bounds = this.childToBounds.get(c);\n\n      if (bounds && bounds.containsPoint(p)) {\n        list.push(c);\n      }\n    });\n\n    if (visit) {\n      visit(this);\n    }\n\n    if (this.nodes) {\n      if (this.nodes.TL.bounds.containsPoint(p)) {\n        this.nodes.TL.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.TR.bounds.containsPoint(p)) {\n        this.nodes.TR.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.BL.bounds.containsPoint(p)) {\n        this.nodes.BL.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.BR.bounds.containsPoint(p)) {\n        this.nodes.BR.queryPoint(p, list, visit);\n      }\n    }\n\n    return list;\n  }\n\n  /**\n   * Remove the provided item from the tree.\n   */\n  remove(child: T) {\n    if (this.childToNode) {\n      const node = this.childToNode.get(child);\n\n      // If the node is getting removed from the top level node, then it MAY be a null bounded item\n      // Which gets removed from the list\n      if (node && node.depth === 0) {\n        const index = node.nullBounded.indexOf(child);\n\n        if (index > -1) {\n          node.nullBounded.splice(index);\n          this.childToNode.delete(child);\n          this.childToBounds.delete(child);\n\n          return;\n        }\n      }\n\n      // Otherwise, just remove the node normally\n      if (node) {\n        node.doRemove(child);\n      }\n    }\n  }\n\n  /**\n   * Creates four sub quadrants for this node.\n   */\n  split() {\n    // Gather all items to be handed down\n    const allChildren = this.gatherChildren([]);\n    // Gather all props for the children to be handed down as well\n    this.nodes = new Quadrants<T>(\n      this.bounds,\n      this.depth + 1,\n      this.getBounds,\n      this.childToNode,\n      this.childToBounds,\n    );\n    // Empty out the children as they are being re-injected\n    this.children = [];\n\n    for (let i = 0, end = allChildren.length; i < end; ++i) {\n      const child = allChildren[i];\n      this.doAdd(child, this.childToBounds.get(child) || null, true);\n    }\n  }\n\n  /**\n   * Traverses the quad tree returning every quadrant encountered\n   *\n   * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n   */\n  visit(cb: IVisitFunction<T>): void {\n    const finished = Boolean(cb(this));\n\n    if (this.nodes && !finished) {\n      this.nodes.TL.visit(cb);\n      this.nodes.TR.visit(cb);\n      this.nodes.BL.visit(cb);\n      this.nodes.BR.visit(cb);\n    }\n  }\n}\n\nexport class TrackedQuadTree<T extends Instance> extends Node<T> {}\n","import { ChartCamera } from './chart-camera';\n\nexport interface IReferenceCameraOptions {\n  /** This is the base camera to monitor */\n  base: ChartCamera;\n  /**\n   * This is a filter applied to the offset that comes from the chart camera.\n   */\n  offsetFilter?(offset: [number, number, number]): [number, number, number];\n  /**\n   * This is a filter applied to the scale that comes from the chart camera.\n   */\n  scaleFilter?(scale: [number, number, number]): [number, number, number];\n}\n\n/**\n * This is a camera that is based on another camera. This can apply filters\n * to the information provided from the base camera.\n *\n * Useful for situations such as a chart having a chart area and a list on the\n * left. This can use the same camera the chart area uses, but filter the response\n * to only track the y offset of the base camera.\n *\n * That would allow easy tracking of the left list to track with elements in the\n * chart and only manipulate a single camera instead of managing many cameras and\n * tie them together with lots of events.\n */\nexport class ReferenceCamera extends ChartCamera {\n  private base: ChartCamera;\n  private offsetFilter = (offset: [number, number, number]) => offset;\n  private scaleFilter = (scale: [number, number, number]) => scale;\n\n  set offset(val: any) {\n    /** no-op */\n  }\n\n  get offset() {\n    return this.offsetFilter(this.base.offset);\n  }\n\n  set scale(val: any) {\n    /** no-op */\n  }\n\n  get scale() {\n    return this.scaleFilter(this.base.scale);\n  }\n\n  constructor(options: IReferenceCameraOptions) {\n    super();\n    Object.assign(this, options);\n  }\n}\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * Active `debug` instances.\n */\nexports.instances = [];\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  var prevTime;\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n  debug.destroy = destroy;\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  exports.instances.push(debug);\n\n  return debug;\n}\n\nfunction destroy () {\n  var index = exports.instances.indexOf(this);\n  if (index !== -1) {\n    exports.instances.splice(index, 1);\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var i;\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n\n  for (i = 0; i < exports.instances.length; i++) {\n    var instance = exports.instances[i];\n    instance.enabled = exports.enabled(instance.namespace);\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  if (name[name.length - 1] === '*') {\n    return true;\n  }\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__124__;","import { LayerSurface } from '../surface';\nimport { IAutoEasingMethod } from './auto-easing-method';\nimport { Vec } from './vector';\n\nexport type AnimationDelayAccessor = (\n  groupIndex: number,\n  currentDelay: number,\n) => number;\nexport type AnimationInstanceModificationCallback = (\n  groupIndex: number,\n) => void;\n\nfunction isNumber(val: any): val is number {\n  return !isNaN(val);\n}\n\n/**\n * This provides some methods that aids in more complicated animation tasks, such as\n * adjusting gpu animated properties with differing time delay values for each change.\n */\nexport class AnimationHelper {\n  surface: LayerSurface;\n\n  constructor(surface: LayerSurface) {\n    this.surface = surface;\n  }\n\n  /**\n   * When you want to animate properties of instances but you want them to start at differing times,\n   * use this method to ensure the timings starting between the elements is correct.\n   *\n   * @param easingMethod This is the easing method used for the layer's property to animate\n   * @param groupCount This is the number of animations desired for a given delay level\n   * @param delayGap This is the amount of delay between each group. This can be a static value or\n   *                 can be a dynamic callback\n   */\n  groupAnimation(\n    easingMethod: IAutoEasingMethod<Vec>,\n    groupCount: number,\n    baseDelay: number,\n    delayGap: number | AnimationDelayAccessor,\n    modifyInstances: AnimationInstanceModificationCallback,\n  ) {\n    // Get the time of the current frame as our timing basis\n    const startFrameTime = this.surface.frameMetrics.currentTime;\n    // Do an initial commit to ensure all previous animated properties are committed based on the\n    // Delay specified for them\n    this.surface.commit(startFrameTime);\n\n    // Loop through the the number of grouped animations to work with\n    for (let i = 0; i < groupCount; ++i) {\n      // Determine how much extra delay is applied for the provided group\n      const gap = isNumber(delayGap)\n        ? delayGap\n        : delayGap(i, easingMethod.delay);\n      // Apply the delay\n      easingMethod.delay = baseDelay + gap * i;\n      // Make the instance modifications\n      modifyInstances(i);\n      // Commit the instance modifications based on the current delay settings\n      this.surface.commit(startFrameTime);\n    }\n  }\n}\n","import { Bounds } from '../primitives/bounds';\nimport { EventManager } from '../surface/event-manager';\nimport {\n  IDragMetrics,\n  IMouseInteraction,\n  IWheelMetrics,\n} from '../surface/mouse-event-manager';\nimport { View } from '../surface/view';\nimport { add3, subtract3, Vec3 } from '../util';\nimport { ChartCamera } from '../util/chart-camera';\nexport enum CameraBoundsAnchor {\n  TOP_LEFT,\n  TOP_MIDDLE,\n  TOP_RIGHT,\n  MIDDLE_LEFT,\n  MIDDLE,\n  MIDDLE_RIGHT,\n  BOTTOM_LEFT,\n  BOTTOM_MIDDLE,\n  BOTTOM_RIGHT,\n}\n\nconst { max, min } = Math;\n\n/**\n * This represents how the camera should be bounded in the world space. This gives enough information\n * to handle all cases of bounding, including screen padding and anchoring for cases where the viewed space\n * is smaller than the view.\n */\nexport interface ICameraBoundsOptions {\n  /** How the bounded world space should anchor itself within the view when the projected world space to the screen is smaller than the view */\n  anchor: CameraBoundsAnchor;\n  /** Minimum settings the camera can scale to */\n  scaleMin?: Vec3;\n  /** Maximum settings the camera can scale to */\n  scaleMax?: Vec3;\n  /** The actual screen pixels the bounds can exceed when the camera's view has reached the bounds of the world */\n  screenPadding: { left: number; right: number; top: number; bottom: number };\n  /** This is the view for which the bounds applies towards */\n  view: string;\n  /** The area the camera is bound inside */\n  worldBounds: Bounds;\n}\n\nexport interface IBasicCameraControllerOptions {\n  /** Takes in the options to be used for creating a new ViewBounds object on this controller. */\n  bounds?: ICameraBoundsOptions;\n  /** This is the camera this controller will manipulate */\n  camera: ChartCamera;\n  /** When this is set to true, the start view can be targetted even when behind other views */\n  ignoreCoverViews?: boolean;\n  /**\n   * This provides a control to filter panning that will be applied to the camera. The input and\n   * output of this will be the delta value to be applied.\n   */\n  panFilter?(\n    offset: [number, number, number],\n    view: View,\n    allViews: View[],\n  ): [number, number, number];\n  /**\n   * This adjusts how fast scaling is applied from the mouse wheel\n   */\n  scaleFactor?: number;\n  /**\n   * This provides a control to filter scaling that will be applied to the camera. The input and\n   * output of this will be the delta value to be applied.\n   */\n  scaleFilter?(\n    scale: [number, number, number],\n    view: View,\n    allViews: View[],\n  ): [number, number, number];\n  /**\n   * This is the view that MUST be the start view from the events.\n   * If not provided, then dragging anywhere will adjust the camera\n   */\n  startView?: string | string[];\n\n  /**\n   * This is a handler for when the camera has applied changes to the visible range of what is seen.\n   * Which most likely means offset or scale has been altered.\n   */\n  onRangeChanged?(camera: ChartCamera, targetView: View): void;\n}\n\n/**\n * This provides some very basic common needs for a camera control system. This is not a total solution\n * very every scenario. This should just often handle most basic needs.\n */\nexport class BasicCameraController extends EventManager {\n  /**\n   * If total bounds of worldbounds + screenpadding is smaller\n   * than width or height of view, anchor dictates placement.\n   */\n  bounds?: ICameraBoundsOptions;\n  /** This is the camera that this controller will manipulate */\n  camera: ChartCamera;\n  /** When this is set to true, the start view can be targetted even when behind other views */\n  ignoreCoverViews?: boolean;\n  /** Informative property indicating the controller is panning the chart or not */\n  isPanning: boolean = false;\n  /** This is the filter applied to panning operations */\n  private panFilter = (\n    offset: [number, number, number],\n    view: View,\n    allViews: View[],\n  ) => offset\n  /** The rate scale is adjusted with the mouse wheel */\n  scaleFactor: number;\n  /** THis is the filter applied to tscaling operations */\n  private scaleFilter = (\n    scale: [number, number, number],\n    view: View,\n    allViews: View[],\n  ) => scale\n  /** The view that must be the start or focus of the interactions in order for the interactions to occur */\n  startViews: string[] = [];\n\n  /**\n   * If an unconvered start view is not available, this is the next available covered view, if present\n   */\n  private coveredStartView: View;\n  /**\n   * Callback for when the range has changed for the camera in a view\n   */\n  private onRangeChanged = (camera: ChartCamera, targetView: View) => {\n    /* no-op */\n  }\n  /**\n   * This flag is set to true when a start view is targetted on mouse down even if it is not\n   * the top most view.\n   */\n  private startViewDidStart: boolean = false;\n\n  constructor(options: IBasicCameraControllerOptions) {\n    super();\n    if (options.bounds) {\n      this.setBounds(options.bounds);\n    }\n    this.camera = options.camera;\n    this.scaleFactor = options.scaleFactor || 1000.0;\n    this.ignoreCoverViews = options.ignoreCoverViews || false;\n\n    if (options.startView) {\n      this.startViews = Array.isArray(options.startView)\n        ? options.startView\n        : [options.startView];\n    }\n\n    this.panFilter = options.panFilter || this.panFilter;\n    this.scaleFilter = options.scaleFilter || this.scaleFilter;\n    this.onRangeChanged = options.onRangeChanged || this.onRangeChanged;\n  }\n\n  /**\n   * Corrects camera offset to respect current bounds and anchor.\n   */\n  applyBounds = () => {\n    if (this.bounds && this.camera) {\n      const targetView = this.getView(this.bounds.view);\n      this.applyScaleBounds();\n\n      // Next bound the positioning\n      if (targetView) {\n        this.camera.offset[0] = this.boundsHorizontalOffset(\n          targetView,\n          this.bounds,\n        );\n        this.camera.offset[1] = this.boundsVerticalOffset(\n          targetView,\n          this.bounds,\n        );\n      }\n    }\n  }\n\n  applyScaleBounds = () => {\n    if (this.camera && this.bounds) {\n      // First bound the scaling\n      if (this.bounds.scaleMin) {\n        this.camera.scale = [\n          max(this.camera.scale[0], this.bounds.scaleMin[0]),\n          max(this.camera.scale[1], this.bounds.scaleMin[1]),\n          max(this.camera.scale[2], this.bounds.scaleMin[2]),\n        ];\n      }\n\n      if (this.bounds.scaleMax) {\n        this.camera.scale = [\n          min(this.camera.scale[0], this.bounds.scaleMax[0]),\n          min(this.camera.scale[1], this.bounds.scaleMax[1]),\n          min(this.camera.scale[2], this.bounds.scaleMax[2]),\n        ];\n      }\n    }\n  }\n\n  /**\n   * Calculation for adhering to an anchor - x-axis offset only.\n   */\n  anchoredByBoundsHorizontal(targetView: View, bounds: ICameraBoundsOptions) {\n    switch (bounds.anchor) {\n      case CameraBoundsAnchor.TOP_LEFT:\n      case CameraBoundsAnchor.MIDDLE_LEFT:\n      case CameraBoundsAnchor.BOTTOM_LEFT:\n        return -(\n          bounds.worldBounds.left -\n          bounds.screenPadding.left / this.camera.scale[0]\n        );\n\n      case CameraBoundsAnchor.TOP_MIDDLE:\n      case CameraBoundsAnchor.MIDDLE:\n      case CameraBoundsAnchor.BOTTOM_MIDDLE:\n        return -(\n          bounds.worldBounds.right -\n          bounds.worldBounds.width / 2 -\n          0.5 *\n            ((targetView.screenBounds.width + bounds.screenPadding.right) /\n              this.camera.scale[0])\n        );\n\n      case CameraBoundsAnchor.TOP_RIGHT:\n      case CameraBoundsAnchor.MIDDLE_RIGHT:\n      case CameraBoundsAnchor.BOTTOM_RIGHT:\n        return -(\n          bounds.worldBounds.right -\n          (targetView.screenBounds.width - bounds.screenPadding.right) /\n            this.camera.scale[0]\n        );\n    }\n  }\n\n  /**\n   * Calculation for adhering to an anchor - y-axis offset only.\n   */\n  anchoredByBoundsVertical(targetView: View, bounds: ICameraBoundsOptions) {\n    switch (bounds.anchor) {\n      case CameraBoundsAnchor.TOP_LEFT:\n      case CameraBoundsAnchor.TOP_MIDDLE:\n      case CameraBoundsAnchor.TOP_RIGHT:\n        return (\n          -bounds.worldBounds.top - -bounds.screenPadding.top / this.scale[1]\n        );\n\n      case CameraBoundsAnchor.MIDDLE_LEFT:\n      case CameraBoundsAnchor.MIDDLE:\n      case CameraBoundsAnchor.MIDDLE_RIGHT:\n        return (\n          -(bounds.worldBounds.bottom - bounds.worldBounds.height / 2) +\n          0.5 *\n            (targetView.screenBounds.height - bounds.screenPadding.bottom) /\n            this.scale[1]\n        );\n\n      case CameraBoundsAnchor.BOTTOM_LEFT:\n      case CameraBoundsAnchor.BOTTOM_MIDDLE:\n      case CameraBoundsAnchor.BOTTOM_RIGHT:\n        return -(\n          bounds.worldBounds.bottom -\n          (targetView.screenBounds.height - bounds.screenPadding.bottom) /\n            this.scale[1]\n        );\n    }\n  }\n\n  /**\n   * Returns offset on x-axis due to current bounds and anchor.\n   */\n  boundsHorizontalOffset(targetView: View, bounds: ICameraBoundsOptions) {\n    const worldTLinScreenSpace = targetView.worldToScreen({\n      x: bounds.worldBounds.left,\n      y: bounds.worldBounds.top,\n    });\n    const worldBRinScreenSpace = targetView.worldToScreen({\n      x: bounds.worldBounds.right,\n      y: bounds.worldBounds.bottom,\n    });\n\n    const widthDifference =\n      worldBRinScreenSpace.x -\n      worldTLinScreenSpace.x +\n      bounds.screenPadding.left +\n      bounds.screenPadding.right -\n      targetView.screenBounds.width;\n\n    // If the worldBounds are smaller than the screenBounds,\n    // We offset according to the anchoring\n    if (widthDifference < 0) {\n      return this.anchoredByBoundsHorizontal(targetView, bounds);\n    }\n\n    if (\n      worldBRinScreenSpace.x <\n      targetView.screenBounds.right - bounds.screenPadding.right\n    ) {\n      return (\n        -bounds.worldBounds.right +\n        (targetView.screenBounds.width - bounds.screenPadding.right) /\n          this.camera.scale[0]\n      );\n    }\n\n    if (\n      worldTLinScreenSpace.x >\n      targetView.screenBounds.left + bounds.screenPadding.left\n    ) {\n      return (\n        -bounds.worldBounds.left +\n        bounds.screenPadding.left / this.camera.scale[0]\n      );\n    }\n\n    return this.camera.offset[0];\n  }\n\n  /**\n   * Returns offset on y-axis due to current bounds and anchor.\n   */\n  boundsVerticalOffset(targetView: View, bounds: ICameraBoundsOptions) {\n    const worldTLinScreenSpace = targetView.worldToScreen({\n      x: bounds.worldBounds.left,\n      y: bounds.worldBounds.top,\n    });\n    const worldBRinScreenSpace = targetView.worldToScreen({\n      x: bounds.worldBounds.right,\n      y: bounds.worldBounds.bottom,\n    });\n\n    const heightDifference =\n      worldBRinScreenSpace.y -\n      worldTLinScreenSpace.y +\n      bounds.screenPadding.top +\n      bounds.screenPadding.bottom -\n      targetView.screenBounds.height;\n\n    // If the viewBounds are larger than the screenBounds,\n    // We offset according to the anchoring\n    if (heightDifference < 0) {\n      return this.anchoredByBoundsVertical(targetView, bounds);\n    }\n\n    if (\n      worldTLinScreenSpace.y >\n      targetView.screenBounds.top - bounds.screenPadding.top\n    ) {\n      return -(\n        bounds.worldBounds.top -\n        bounds.screenPadding.top / this.camera.scale[1]\n      );\n    }\n\n    if (\n      worldBRinScreenSpace.y <\n      targetView.screenBounds.bottom + bounds.screenPadding.bottom\n    ) {\n      return -(\n        bounds.worldBounds.bottom +\n        (-targetView.screenBounds.height + bounds.screenPadding.bottom) /\n          this.camera.scale[1]\n      );\n    }\n\n    return this.camera.offset[1];\n  }\n\n  private canStart(viewId: string) {\n    return (\n      this.startViews.length === 0 ||\n      (this.startViews && this.startViews.indexOf(viewId) > -1) ||\n      (this.startViewDidStart && this.ignoreCoverViews)\n    );\n  }\n\n  private findCoveredStartView(e: IMouseInteraction) {\n    const found = e.viewsUnderMouse.find(\n      under => this.startViews.indexOf(under.view.id) > -1,\n    );\n    this.startViewDidStart = Boolean(found);\n\n    if (found) {\n      this.coveredStartView = found.view;\n    }\n  }\n\n  private getTargetView(e: IMouseInteraction) {\n    // If we have a start view and we do not ignore covering views,\n    // Then our target view is the view we started with\n    if (this.startViews && !this.ignoreCoverViews) {\n      return e.target.view;\n    }\n\n    // Otherwise, we use the covered start view\n    else {\n      return this.coveredStartView;\n    }\n  }\n\n  /**\n   * Used to aid in handling the pan effect and determine the contextual view targetted.\n   */\n  handleMouseDown(e: IMouseInteraction, button: number) {\n    if (this.startViews) {\n      // We look for valid covered views on mouse down so dragging will work\n      this.findCoveredStartView(e);\n      // If this is a valid start view, then we enter a panning state with the mouse down\n      if (e.start) {\n        this.isPanning = this.canStart(e.start.view.id) || this.isPanning;\n      }\n    }\n  }\n\n  /**\n   * Used to aid in handling the pan effect\n   */\n  handleMouseUp(e: IMouseInteraction) {\n    this.startViewDidStart = false;\n    this.isPanning = false;\n  }\n\n  /**\n   * Applies a panning effect by adjusting the camera's offset.\n   */\n  handleDrag(e: IMouseInteraction, drag: IDragMetrics) {\n    if (e.start) {\n      if (this.canStart(e.start.view.id)) {\n        let pan: [number, number, number] = [\n          drag.screen.delta.x / this.camera.scale[0],\n          drag.screen.delta.y / this.camera.scale[1],\n          0,\n        ];\n\n        if (this.panFilter) {\n          pan = this.panFilter(\n            pan,\n            e.start.view,\n            e.viewsUnderMouse.map(v => v.view),\n          );\n        }\n\n        this.camera.offset[0] += pan[0];\n        this.camera.offset[1] += pan[1];\n\n        // Add additional correction for bounds\n        this.applyBounds();\n        // Broadcast the change occurred\n        this.onRangeChanged(this.camera, e.start.view);\n        // Add additional correction for bounds\n        this.applyBounds();\n      }\n    }\n  }\n\n  /**\n   * Applies a scaling effect to the camera for mouse wheel events\n   */\n  handleWheel(e: IMouseInteraction, wheelMetrics: IWheelMetrics) {\n    // Every mouse wheel event must look to see if it's over a valid covered start view\n    this.findCoveredStartView(e);\n\n    if (this.canStart(e.target.view.id)) {\n      const targetView = this.getTargetView(e);\n      const beforeZoom = targetView.screenToWorld(e.screen.mouse);\n\n      const currentZoomX = this.camera.scale[0] || 1.0;\n      const currentZoomY = this.camera.scale[1] || 1.0;\n\n      let scale: [number, number, number] = [\n        wheelMetrics.wheel[1] / this.scaleFactor * currentZoomX,\n        wheelMetrics.wheel[1] / this.scaleFactor * currentZoomY,\n        1,\n      ];\n\n      if (this.scaleFilter) {\n        scale = this.scaleFilter(\n          scale,\n          targetView,\n          e.viewsUnderMouse.map(v => v.view),\n        );\n      }\n\n      this.camera.scale[0] = currentZoomX + scale[0];\n      this.camera.scale[1] = currentZoomY + scale[1];\n\n      // Ensure the new scale values are within bounds before attempting to correct offsets\n      this.applyScaleBounds();\n\n      const afterZoom = targetView.screenToWorld(e.screen.mouse);\n      this.camera.offset[0] -= beforeZoom.x - afterZoom.x;\n      this.camera.offset[1] -= beforeZoom.y - afterZoom.y;\n\n      // Add additional correction for bounds\n      this.applyBounds();\n      // Broadcast the change occurred\n      this.onRangeChanged(this.camera, targetView);\n      // Add additional correction for bounds\n      this.applyBounds();\n    }\n  }\n\n  // These are the currently Unused responses for this controller\n  handleMouseOut(e: IMouseInteraction) {\n    /*no-op*/\n  }\n  handleClick(e: IMouseInteraction) {\n    /*no-op*/\n  }\n  handleMouseMove(e: IMouseInteraction) {\n    /*no-op*/\n  }\n  handleMouseOver(e: IMouseInteraction) {\n    /*no-op*/\n  }\n\n  /**\n   * Evaluates the world bounds the specified view is observing\n   *\n   * @param viewId The id of the view when the view was generated when the surface was made\n   */\n  getRange(viewId: string): Bounds {\n    /** Get the projections for the provided view */\n    const projection = this.getProjection(viewId);\n    /** Get the bounds on the screen for the indicated view */\n    const screenBounds = this.getViewScreenBounds(viewId);\n\n    // Make sure we have a valid projection and screen bounds to make the adjustment\n    if (projection && screenBounds) {\n      /** Get the current viewed world bounds of the view */\n      const topLeft = projection.screenToWorld(screenBounds);\n      const bottomRight = projection.screenToWorld({\n        x: screenBounds.right,\n        y: screenBounds.bottom,\n      });\n\n      return new Bounds({\n        height: bottomRight.y - topLeft.y,\n        width: bottomRight.x - topLeft.x,\n        x: topLeft.x,\n        y: topLeft.y,\n      });\n    }\n\n    return new Bounds({ x: 0, y: 0, width: 1, height: 1 });\n  }\n\n  /**\n   * Retrieves the current pan of the controlled camera\n   */\n  get pan(): Vec3 {\n    return this.camera.offset;\n  }\n\n  /**\n   * Sets bounds applicable to the supplied view.\n   * If no view is supplied, it uses the first in the startViews array\n   */\n  setBounds(bounds: ICameraBoundsOptions) {\n    this.bounds = bounds;\n    this.applyBounds();\n  }\n\n  /**\n   * Retrieves the current scale of the camera\n   */\n  get scale(): Vec3 {\n    return this.camera.scale;\n  }\n\n  /**\n   * This lets you set the visible range of a view based on the view's camera. This will probably not work\n   * as expected if the view indicated and this controller do not share the same camera.\n   *\n   * @param viewId The id of the view when the view was generated when the surface was made\n   */\n  setRange(newWorld: Bounds, viewId: string) {\n    /** Get the projections for the provided view */\n    const projection = this.getProjection(viewId);\n    /** Get the bounds on the screen for the indicated view */\n    const screenBounds = this.getViewScreenBounds(viewId);\n    /** Get the view the range is being applied towards */\n    const view = this.getView(viewId);\n\n    // Make sure we have a valid projection and screen bounds to make the adjustment\n    if (projection && screenBounds && view) {\n      const deltaScale = subtract3(\n        [\n          screenBounds.width / newWorld.width,\n          screenBounds.height / newWorld.height,\n          1,\n        ],\n        this.camera.scale,\n      );\n\n      this.camera.scale = add3(\n        this.camera.scale,\n        this.scaleFilter(deltaScale, view, [view]),\n      );\n\n      const deltaPan = subtract3(\n        [-newWorld.x, -newWorld.y, 0],\n        this.camera.offset,\n      );\n\n      this.camera.offset = add3(\n        this.camera.offset,\n        this.scaleFilter(deltaPan, view, [view]),\n      );\n\n      // Bound the camera to the specified bounding range\n      this.applyBounds();\n      // Broadcast the change occurred\n      this.onRangeChanged(this.camera, view);\n      // Bound the camera to the specified bounding range\n      this.applyBounds();\n    }\n  }\n}\n","export * from './basic-camera-controller';\n","export * from './base-event-managers';\nexport * from './base-layers';\nexport * from './instance-provider';\nexport * from './primitives';\nexport * from './surface';\nexport * from './types';\nexport * from './util';\n","export * from './voidgl';\n"],"sourceRoot":""}