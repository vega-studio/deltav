{"version":3,"sources":["webpack://network-bubble-chart/webpack/universalModuleDefinition","webpack://network-bubble-chart/webpack/bootstrap","webpack://network-bubble-chart/./src/voidgl/types.ts","webpack://network-bubble-chart/external \"three\"","webpack://network-bubble-chart/./src/voidgl/instance-provider/index.ts","webpack://network-bubble-chart/./src/voidgl/util/index.ts","webpack://network-bubble-chart/./src/voidgl/primitives/bounds.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/buffer-manager-base.ts","webpack://network-bubble-chart/./src/voidgl/instance-provider/instance.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/types.ts","webpack://network-bubble-chart/./src/voidgl/primitives/index.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/layer-buffer-type.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/index.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/generate-layer-model.ts","webpack://network-bubble-chart/./src/voidgl/util/identify-by-key.ts","webpack://network-bubble-chart/./src/voidgl/shaders/template-vars.ts","webpack://network-bubble-chart/./src/voidgl/util/shader-templating.ts","webpack://network-bubble-chart/./src/voidgl/instance-provider/observable.ts","webpack://network-bubble-chart/./src/voidgl/surface/view.ts","webpack://network-bubble-chart/./src/voidgl/surface/scene.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/label-atlas-resource.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/base-atlas-resource.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/types.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/diff-processors/uniform-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/diff-processors/instance-attribute-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/util/view-camera.ts","webpack://network-bubble-chart/./src/voidgl/util/chart-camera.ts","webpack://network-bubble-chart/./src/voidgl/util/vector.ts","webpack://network-bubble-chart/./src/voidgl/util/uid.ts","webpack://network-bubble-chart/./src/voidgl/surface/event-manager.ts","webpack://network-bubble-chart/./src/voidgl/surface/mouse-event-manager.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/inject-shader-io.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/generate-layer-material.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/generate-layer-geometry.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/generate-default-scene.ts","webpack://network-bubble-chart/./src/voidgl/util/data-bounds.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/labels/index.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/label-rasterizer.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/image-atlas-resource.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/color-rasterizer.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/color-atlas-resource.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/sub-texture.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/atlas.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/images/index.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/diff-processors/base-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/shaders/util/make-instance-uniform-name.ts","webpack://network-bubble-chart/./src/voidgl/shaders/util/instance-attribute-shader-name.ts","webpack://network-bubble-chart/./src/voidgl/util/webgl-stat.ts","webpack://network-bubble-chart/./node_modules/debug/src/browser.js","webpack://network-bubble-chart/./src/voidgl/util/mouse.ts","webpack://network-bubble-chart/./src/voidgl/util/auto-easing-method.ts","webpack://network-bubble-chart/./src/voidgl/util/common-options.ts","webpack://network-bubble-chart/./src/voidgl/util/easing-props.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/atlas-resource-manager.ts","webpack://network-bubble-chart/./src/voidgl/util/quad-tree.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/pack-attributes.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/expand-easing-attributes.ts","webpack://network-bubble-chart/./src/voidgl/primitives/absolute-position.ts","webpack://network-bubble-chart/./src/voidgl/surface/event-managers/layer-mouse-events.ts","webpack://network-bubble-chart/./src/voidgl/util/color-picking-analysis.ts","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/color-picking-assignment.vs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/color-picking-disabled.fs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/color-picking-method.fs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/color-picking-vertex-header.vs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/projection-methods.vs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/shader-input.vs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/instance-destructuring-array.vs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/fragment-shader-composition.fs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/vertex-shader-composition.vs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/instance-retrieval-array.vs","webpack://network-bubble-chart/./src/voidgl/shaders/util/uniform-instance-block-array.ts","webpack://network-bubble-chart/./src/voidgl/shaders/util/attribute-generation.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-surface.ts","webpack://network-bubble-chart/./src/voidgl/surface/index.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/rings/ring-layer.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/rings/ring-layer.fs","webpack://network-bubble-chart/./src/voidgl/base-layers/rings/ring-layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/rings/ring-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/rings/index.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/rectangle/rectangle-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/rectangle/rectangle-layer.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/rectangle/rectangle-layer.fs","webpack://network-bubble-chart/./src/voidgl/base-layers/rectangle/rectangle-layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/rectangle/index.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/labels/label-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/labels/label-layer.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/labels/label-layer.fs","webpack://network-bubble-chart/./src/voidgl/base-layers/labels/label-layer.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/image-rasterizer.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/atlas-manager.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/pack-node.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/images/image-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/images/image-layer.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/images/image-layer.fs","webpack://network-bubble-chart/./src/voidgl/base-layers/images/image-layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/edge-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/shader/edge-layer.fs","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/shader/edge-layer-screen-curve.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/shader/edge-layer.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/shader/edge-layer-bezier2.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/shader/edge-layer-bezier.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/shader/edge-layer-line.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/edge-picking.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/edge-layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/index.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/circles/circle-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/circles/circle-layer.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/circles/circle-layer.fs","webpack://network-bubble-chart/./src/voidgl/primitives/point.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/circles/circle-layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/circles/index.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/arcs/arc-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/arcs/arc-layer.fs","webpack://network-bubble-chart/./src/voidgl/base-layers/arcs/arc-layer-screen-space.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/arcs/arc-layer.vs","webpack://network-bubble-chart/./src/voidgl/shaders/base/no-op.vs","webpack://network-bubble-chart/./src/voidgl/shaders/base/no-op.fs","webpack://network-bubble-chart/./src/voidgl/surface/layer-interaction-handler.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/diff-processors/uniform-quad-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/diff-processors/uniform-color-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/diff-processors/instance-attribute-quad-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/diff-processors/instance-attribute-color-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/uniform-buffer-manager.ts","webpack://network-bubble-chart/./src/voidgl/util/emit-once.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/instance-attribute-buffer-manager.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/index.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/instance-diff-manager.ts","webpack://network-bubble-chart/./src/voidgl/instance-provider/instance-provider.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/arcs/arc-layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/arcs/index.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/index.ts","webpack://network-bubble-chart/./src/voidgl/util/tracked-quad-tree.ts","webpack://network-bubble-chart/./src/voidgl/util/reference-camera.ts","webpack://network-bubble-chart/./node_modules/ms/index.js","webpack://network-bubble-chart/./node_modules/debug/src/debug.js","webpack://network-bubble-chart/./node_modules/process/browser.js","webpack://network-bubble-chart/external \"bowser\"","webpack://network-bubble-chart/./src/voidgl/shaders/util/extend-shader.ts","webpack://network-bubble-chart/./src/voidgl/util/extend-shader-io.ts","webpack://network-bubble-chart/./src/voidgl/util/animation-helper.ts","webpack://network-bubble-chart/./src/voidgl/base-event-managers/basic-camera-controller.ts","webpack://network-bubble-chart/./src/voidgl/base-event-managers/index.ts","webpack://network-bubble-chart/./src/voidgl/index.ts","webpack://network-bubble-chart/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__135__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","InstanceAttributeSize","InstanceBlockIndex","instanceAttributeSizeFloatCount","_a","ONE","TWO","THREE","FOUR","ATLAS","UniformSize","VertexAttributeSize","ShaderInjectionTarget","PickType","InstanceDiffType","__export","Bounds","options","this","x","y","width","height","left","top","bottom","right","emptyBounds","containsPoint","point","encapsulate","item","Math","abs","fits","bounds","hitBounds","isInside","toString","isBufferLocation","val","buffer","isBufferLocationGroup","propertyToBufferLocation","BufferManagerBase","layer","scene","easing_props_1","observable_1","instanceUID","Instance","changes","_easing","Map","observableStorage","_uid","newUID","_id","id","active","_this","_observer","oldObserver","clear","remove","clearEasing","easingId","getEasing","attributeName","easing","EasingProps","resourceTrigger","console","warn","__decorate","observable","Three","types_1","util_1","identify_by_key_1","instance_diff_manager_1","layer_interaction_handler_1","Layer","_super","props","depth","instanceById","instanceVertexCount","assign","defaultProps","picking","NONE","ALL","pickingMethods","getInstancePickingMethods","currentPickMode","hitTest","quadTree","TrackedQuadTree","boundsAccessor","type","SINGLE","uidToInstance","__extends","_bufferManager","_bufferType","destroy","bufferManager","removeLayer","removeFromScene","didUpdateProps","draw","uniform","change","instance","bufferLocations","changeList","data","diffManager","processing","processor","incomingChangeList","end","length","getBufferLocations","values","commit","resolve","uniforms","update","materialUniforms","forEach","materialUniform","Error","getModelType","drawMode","TrianglesDrawMode","modelType","Mesh","getMaterialOptions","initShader","fs","instanceAttributes","vertexAttributes","vertexCount","vs","makeInstanceAttribute","block","blockIndex","size","atlas","makeUniform","shaderInjection","qualifier","setBufferManager","InstanceDiffManager","makeProcessor","interactions","LayerInteractionHandler","setBufferType","undefined","willUpdateInstances","_changes","willUpdateProps","_newProps","didUpdate","IdentifyByKey","AnchorType","ScaleType","LayerBufferType","buffer_management_1","getLayerBufferType","_gl","bufferType","WebGLStat","HARDWARE_INSTANCING","attributesUsed","attribute","ceil","MAX_VERTEX_ATTRIBUTES","UNIFORM","INSTANCE_ATTRIBUTE","makeLayerBufferManager","gl","InstanceAttributeBufferManager","UniformBufferManager","generateLayerModel","geometry","material","modelInfo","model","Boolean","isMesh","TriangleStripDrawMode","key","templateVars","attributeFragments","attributes","blocksPerInstance","easingMethod","easingMethods","extend","extendHeader","instanceBlockCount","instanceDataBinaryTree","instanceDataRetrieval","instanceDestructuring","instanceFragments","instanceUniformDeclarations","layerUniforms","projectionMethods","shader","shaderInput","T","shaderTemplate","templateOptions","required","onError","onToken","matched","noValueProvided","notFound","shaderOptions","shaderResults","replace","_x","match","set","keys","option","results","resolvedShaderOptions","shaderProvidedOptions","unresolvedProvidedOptions","unresolvedShaderOptions","msg","error","uid_1","ObservableMonitoring","setObservableMonitor","enabled","gatherIds","observableIds","getObservableMonitorIds","slice","observableNamesToUID","target","propertyUID","uid","push","newVal","observer","instanceUpdated","absolute_position_1","bounds_1","view_camera_1","isOrthographic","ClearFlags","View","pixelRatio","devicePixelRatio","screenToPixelSpace","out","pixelSpaceToScreen","screenToView","viewBounds","viewToScreen","screenToWorld","view","world","camera","offset","scale","viewCamera","ViewCameraType","CUSTOM","worldToScreen","screen","viewToWorld","worldToView","fitViewtoViewport","surfaceDimensions","CONTROLLED","baseCamera","getAbsolutePositionBounds","viewport","far","near","position","z","updateMatrix","updateMatrixWorld","updateProjectionMatrix","screenBounds","DEFAULT_VIEW_ID","sortByDepth","a","b","Scene","container","pickingContainer","layers","sortIsDirty","viewById","frustumCulled","autoUpdate","addLayer","addView","index","indexOf","splice","sortLayers","sort","DEFAULT_SCENE_ID","LabelAtlasResource","label","BaseAtlasResource","sampleScale","EdgeScaleType","EdgeType","EdgeBroadphase","buffer_manager_base_1","VECTOR_ACCESSORS","EMPTY","UniformDiffProcessor","addInstance","manager","_propIds","uniformCluster","changeInstance","add","updateInstance","removeInstance","uniformRangeStart","range","instanceData","instanceUniform","start","k","endk","resource","setTargetAtlas","activeAttribute","BaseDiffProcessor","DiffMode","base_diff_processor_1","min","max","InstanceAttributeDiffProcessor","apply","arguments","diffMode","PARTIAL","bufferAttributeUpdateRange","bufferAttributeWillUpdate","updateInstancePartial","newBufferLocations","propIds","location","updateValue","updateRange","childLocations","propertyToLocation","getUpdateAllPropertyIdList","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","getActiveAttributePropertyId","updateInstanceFull","updates","bufferAttribute","needsUpdate","count","getInstanceCount","FULL","ViewCamera","chartCameraUID","applyArray","source","concat","ChartCamera","sqrt","add1","scale1","vec","subtract1","multiply1","dot1","linear1","t","length1","add2","scale2","subtract2","multiply2","dot2","linear2","length2","add3","scale3","subtract3","multiply3","linear3","length3","dot3","add4","scale4","subtract4","multiply4","dot4","linear4","length4","vec1Methods","dot","linear","multiply","subtract","vec2Methods","vec3Methods","vec4Methods","VecMath","UID","CUID","colorUID","EventManager","getProjection","viewId","mouseManager","getView","getViewScreenBounds","setMouseManager","mouse_1","quad_tree_1","isDefined","MouseEventManager","canvas","views","controllers","handlesWheelEvents","eventCleanup","_waitingForRender","getViewsUnderMouse","mouse","hitViews","query","resize","context","setViews","setControllers","addContextListeners","QuadTree","addAll","map","v","filter","startView","element","startPosition","wheelHandler","event","eventElementPosition","interaction","makeInteraction","wheel","makeWheel","controller","handleWheel","stopPropagation","preventDefault","onwheel","addEventListener","onmouseleave","waitingForRender","handleMouseOut","onmousemove","handleMouseMove","onmousedown","downViews","canClick","clickStartTime","Date","now","currentPosition","handleMouseDown","button","document","delta","drag","makeDrag","handleDrag","onmouseup","_event","onmouseover","handleMouseOver","handleMouseUp","handleClick","onselectstart","addTouchContextListeners","ontouchstart","ontouchend","ontouchmove","ontouchcancel","_i","previous","current","viewsUnderMouse","normalizeWheel","onmousewheel","removeEventListener","expand_easing_attributes_1","layer_buffer_type_1","pack_attributes_1","testStartVector","testEndVector","_b","emptyTexture","Texture","isInstanceAttribute","attr","isVertexAttribute","isUniform","toVertexAttributeInternal","materialAttribute","toUniformInternal","sortNeedsUpdateFirstToTop","generateAtlasResourceUniforms","atlasInstanceAttributes","requestedAtlasInjections","isAtlasAttribute","injection","FRAGMENT","injections","VERTEX","instanceAttribute","getAtlasTexture","compareVec","round","injectShaderIO","shaderIO","find","testStart","testEnd","validationRules","validation","test","cpu","ignoreEndValueCheck","ignoreOverTimeCheck","validateInstanceAttributes","generateEasingAttributes","addedUniforms","MATRIX4","projectionMatrix","elements","matrix","surface","frameMetrics","currentTime","generateBaseUniforms","generatePickingUniforms","addedInstanceAttributes","generateBaseInstanceAttributes","color","generatePickingAttributes","allUniforms","allInstanceAttributes","packAttributes","generateBaseVertexAttributes","UNIFORM_SIZE_TO_MATERIAL_TYPE","MATRIX3","DEFAULT_UNIFORM_VALUE","toMaterialUniform","generateLayerMaterial","instancingUniforms","materialParams","vertexShader","fragmentShader","generatedUniform","RawShaderMaterial","isNumberCluster","Array","isArray","generateLayerGeometry","maxInstancesPerBuffer","vertexBuffers","attribute_1","Float32Array","formatError","j","endj","instanceSize","endk_1","copyWithin","instancingBuffer","instanceStartIndex","BufferGeometry","attribute_3","BufferAttribute","addAttribute","chart_camera_1","scene_1","view_1","generateDefaultScene","aspectRatio","viewSize","defaultCamera","OrthographicCamera","defaultChartCamera","defaultViewport","defaultView","defaultScene","DataBounds","floor","LabelRasterizer","awaitContext","getContext","Promise","setTimeout","sent","calculateLabelSize","calculateTexture","calculateTrucatedText","sampleScaling","drawLabel","truncatedText","measureContents","minX","minY","maxX","maxY","rasterization","texture","createCroppedCanvas","maxWidth","text","firstTest","cursor","safety","substr","nextCursor","cropped","createElement","imageSmoothingEnabled","drawImage","fontSize","getLabelRasterizationFontSize","fillStyle","font","makeCSSFont","measureText","fillText","potentialCanvas","fontWeight","fontFamily","imageData","getImageData","render","renderSync","ImageAtlasResource","image","ColorRasterizer","limit","makeCSS","g","opacity","fillRect","ColorAtlasResource","SubTexture","atlasReferenceID","atlasTexture","atlasTL","atlasTR","atlasBL","atlasBR","widthOnAtlas","heightOnAtlas","isValid","pixelWidth","pixelHeight","pack_node_1","sub_texture_1","AtlasSize","Atlas","validResources","textureSettings","packing","PackNode","updateTexture","invalidateResource","zero","setManager","registerResource","removeResource","redoneCanvas","dispose","generateMipmaps","premultiplyAlpha","_isValid","INSTANCE_UNIFORM_ATTRIBUTE_PREFIX","makeInstanceUniformNameArray","makeInstanceUniformNameTree","instanceAttributeShaderName","getProgramInfo","program","result","attributeCount","uniformCount","activeUniforms","getProgramParameter","ACTIVE_UNIFORMS","activeAttributes","ACTIVE_ATTRIBUTES","enums","35664","35665","35666","35667","35668","35669","35670","35671","35672","35673","35674","35675","35676","35678","35680","5120","5121","5122","5123","5124","5125","5126","blocks","getActiveUniform","typeName","getActiveAttrib","MAX_VERTEX_UNIFORMS","MAX_FRAGMENT_UNIFORMS","WEBGL_SUPPORTED","MAX_TEXTURE_SIZE","HARDWARE_INSTANCING_ANGLE","WebGLRenderingContext","e","getAContext","getParameter","MAX_VERTEX_UNIFORM_VECTORS","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_VERTEX_ATTRIBS","getExtension","initStats","process","load","storage","debug","env","DEBUG","log","Function","formatArgs","args","useColors","namespace","humanize","diff","lastC","save","namespaces","removeItem","navigator","userAgent","toLowerCase","documentElement","style","WebkitAppearance","firebug","exception","table","parseInt","RegExp","$1","chrome","local","localStorage","localstorage","colors","formatters","JSON","stringify","err","message","enable","browser","three_1","IE_ADJUSTMENT","OLD_IE_ADJUSTMENT","MAX_FIREFOX_WHEELDELTA","lowPassY","LOW_PASS_U0","LOW_PASS_U1","LOW_PASS_U2","LOW_PASS_U3","firefox","deltaX","deltaY","sign","unshift","pop","Vector2","msie","version","wheelDeltaX","wheelDeltaY","wheelDelta","detail","msedge","multiplyScalar","relative","mouseX","mouseY","eventX","eventY","nativeEvent","pageX","pageY","clientX","clientY","body","scrollLeft","scrollTop","offsetParent","offsetLeft","offsetTop","AutoEasingLoopStyle","vector_1","pow","sin","PI","GPU_PI","clamp","minVal","maxVal","easeOutElasticGPU","easeBackInGPU","continuousSinusoidalGPU","AutoEasingMethod","gpu","duration","method","delay","loop","methodName","immediate","_start","_t","easeInQuad","time","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeOutElastic","easeBackIn","easeBackOut","t1","easeBackInOut","a1","t2","continuousSinusoidal","CONTINUOUS","direction","amplitude","CommonMaterialOptions","transparentShape","premultipliedAlpha","transparent","transparentImage","blending","CustomBlending","blendSrc","OneFactor","isManualStart","isTimeSet","setAutomatic","setStart","setTiming","label_atlas_resource_1","toInstanceIOValue","AtlasResourceManager","targetAtlas","requestQueue","requestLookup","atlasManager","dequeueRequests","didDequeue","resources","requests","this_1","updateAtlas","atlasRequests_1","request","delete","request_1","from","entries","atlasRequests","existingRequests","filterQuery","queryValues","filtered","obj","Quadrants","mid","TL","Node","TR","BL","BR","children","nodes","child","doAdd","cover","childrenProps","MAX_VALUE","allChildren","gatherChildren","split","isNaN","area","list","visit","queryBounds","queryPoint","cb","finished","Block","available","setAttribute","check","ensureSizes","newBlock","isEasingAttribute","usedInstanceAttributes","Set","easingAttributes","instanceAttributes_1","easingIds","easingValues","providedUID","name_1","easingUID","has","attributeDelay","attributeDuration","startTime","timeValue","REPEAT","REFLECT","timePassed","childAttributes","startAttr","parentAttribute","_o","startTimeAttr","durationAttr","easingAttributes_1","data_bounds_1","ref","scaleRatio","parse","num","parseFloat","reference","top_1","LayerMouseEvents","isOver","sceneViews","getSceneViewsUnderMouse","sceneViewByViewId","sceneView","viewItem","getMouseByViewId","viewMouseByViewId","handleInteraction","handleMouseClick","_drag","handleMouseDrag","callback","sceneViews_1","handleSceneView","_e","_flag","updateColorPickRange","allSceneViews","currentSceneViews","analyzeColorPickingRendering","pickingData","allColors","colorData","dataHeight","dataWidth","nearestColor","uniqueColors","pixelIndex","distance","row","dx","dy","testDistance","auto_easing_method_1","shader_templating_1","template_vars_1","make_instance_uniform_name_1","instanceRetrievalArrayFragment","VECTOR_COMPONENTS","sizeToType","1","2","3","4","9","16","99","orderByPriority","makeAutoEasingTiming","pingPong","makeVectorSwizzle","join","makeUniformArrayDeclaration","totalBlocks","fragment","fill","Vector4","makeInstanceRetrievalArray","makeInstanceDestructuringArray","orderedAttributes","instanceAttributeDestructuring","uniformInstancingDestructuring","webgl_stat_1","instance_attribute_shader_name_1","uniform_instance_block_array_1","vertexShaderComposition","fragmentShaderComposition","instanceDestructuringArray","MAX_USE_PER_BLOCK","generateUniforms","injectionType","injectFragments","shaders","shaderInputMetrics","instancingInfo","metrics","instanceUniformBlockCount","calculateUniformBlockUseage","sortedInstanceAttributes","currentBlock","trueBlockIndex","blockUseage","innerBlockUseage","attributeSize","oldUseage","newUseage","innerUseage","instances","uniformMetrics","blockQualifierDedup","maxBlock","qualifiers","blockQualifiers","qualifierList","allQualifiers","declaration","makeInstanceUniformDeclaration","makeUniformInstanceDataOptions","generateInstanceDataLookupOptions","additionalOptions","generateVertexAttributes","methods","methodSizes","sizeType","generateEasingMethods","generateShaderInputs","generateVertexPicking","_maxInstancesPerBuffer","makePickingDestructuring","makeInstanceAttributeReferences","generateVertexShader","vertexShaderResults","generateFragmentShader","generateFragmentPickingMethod","images_1","labels_1","attribute_generation_1","color_picking_analysis_1","layer_mouse_events_1","generate_default_scene_1","generate_layer_geometry_1","generate_layer_material_1","generate_layer_model_1","inject_shader_io_1","mouse_event_manager_1","texture_1","atlas_resource_manager_1","DEFAULT_BACKGROUND_COLOR","Color","isCanvas","createLayer","layerClass","LayerSurface","AtlasManager","currentViewport","currentFrame","previousTime","isBufferingAtlas","scenes","willDisposeLayer","loadReady","loadReadyResolve","initLayer","frameIncrement","onViewReady","validLayers","erroredLayers","pickingPass","errors","passed","stack","initializer","resourceManager","renderer","pickingRenderer","LabelInstance","ImageInstance","drawSceneView","updateColorPick","defaultSceneElements","flags","clearFlags","COLOR","DEPTH","pickingTarget","Uint8Array","pickWidth","readRenderTargetPixels","pickHeight","colorPicking","didBuffer","rendererSize","getSize","getPixelRatio","background","SCISSOR_TEST","scissor","clearColor","setSize","setRenderTarget","STENCIL","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","setViewport","getViewSize","getViewWorldBounds","topLeft","bottomRight","init","setContext","initGL","initMouseManager","initResources","WebGLRenderer","alpha","antialias","preserveDrawingBuffer","autoClear","setRendererSize","setPixelRatio","setClearColor","sceneViewDepth","sceneOptions","newScene","viewOptions","newView","addLayerToScene","shaderMetrics","eventManagers","atlasResources","createAtlas","layerInitializers","existingLayer","layerId","_layer","fitContainer","_pixelRatio","parentElement","className","containerBox","getBoundingClientRect","box","isWebGLContext","canvasContext","isString","getElementById","WebGLRenderTarget","magFilter","LinearFilter","minFilter","stencilBuffer","instance_provider_1","primitives_1","layer_1","RingLayer","ring","radius","center","scaleFactor","animations","animate","animateColor","animateCenter","animateRadius","vertexToNormal","0","5","vertexToSide","attributeNames","thickness","_","vertex","InstanceProvider","instance_1","RingInstance","anchorCalculator","TopLeft","anchor","_rectangle","padding","TopMiddle","rectangle","TopRight","MiddleLeft","Middle","MiddleRight","BottomLeft","BottomMiddle","BottomRight","Custom","RectangleInstance","scaling","BOUND_MAX","_anchor","setAnchor","newAnchor","types_2","RectangleLayer","anchorEffect","projection","maxScale","minScale","ALWAYS","NEVER","screenPoint","_u","rasterizationLookUp","_label","_cssFont","_fontFamily","_fontSize","_fontStyle","_fontWeight","_maxWidth","_text","_width","_height","_isDestroyed","fontStyle","cssFontLookup","rasterizations","references","_rasterization","LabelLayer","animateLocation","animateSize","ImageRasterizer","calculateImageSize","_sampleScale","atlas_1","color_atlas_resource_1","color_rasterizer_1","image_atlas_resource_1","label_rasterizer_1","ZERO_IMAGE","allAtlas","destroyAtlas","atlasName","setDefaultImage","loadImage","loadedImage","isValidImage","rect","dimensions","first","second","insertedNode","insert","nodeImage","ux","nodeDimensions","uy","uw","uh","onePixelX","atlasDimensions","imageSrc","subTexture","image_1","onload","onerror","path","toDataURL","Image","src","resources_1","isLeaf","child0","child1","hasChild","newNode","fitFlag","imgWidth","imgHeight","dWidth","dHeight","removed","_image","tint","_sourceWidth","_sourceHeight","_element","_path","aspect","common_options_1","ImageLayer","animateTint","EdgeInstance","colorStart","colorEnd","control","widthStart","widthEnd","setEdgeWidth","setColor","interpolation","LINE","p1","p2","_c1","_c2","BEZIER","c1","BEZIER2","c2","toPointObject","toPointArray","TEST_RESOLUTION","edgePicking","broadphase","minPickDistance","scaleType","interpolate","edge","edgeWidthStart","edgeWidthEnd","PASS_X","PASS_Y","SCREEN_CURVE","closestIndex","closestDistance","secondClosestIndex","secondClosestDistance","control1","control2","startPoint","endPoint","linePoint","lineWidth","startSegment","endSegment","vector","lineDirection","lineNormal","distanceTo","_view","edge_picking_1","pickVS","baseVS","screenVS","edgeFS","EdgeLayer","_c","_d","_f","animateEnd","animateStart","animateColorStart","animateColorEnd","animateControl","MAX_SEGMENTS","vertexInterpolation","token","_uniform","CircleInstance","squareDistance","Point","getClosest","testPoint","points","closestPoint","getClosestIndex","amount","normalize","magnitude","getDistance","squared","getMidpoint","make","CircleLayer","circle","circleScreenCenter","mouseScreen","fadeOutOversized","ArcInstance","angle","isMouseOver","isMouseDown","getColorPickInstance","isColorProcessor","_mouse","onMouseDown","hitTest_1","query_1","world_1","querySpace","bind","instanceForColor","onMouseOut","hitTest_2","query_2","world_2","onMouseUp","hitTest_3","query_3","world_3","onMouseOver","onMouseMove","hitTest_4","query_4","info","world_4","notOverInstances","isCurrentlyOver_1","noLongerOver","onMouseClick","hitTest_5","query_5","world_5","UniformQuadDiffProcessor","quadPicking","UniformColorDiffProcessor","InstanceAttributeQuadDiffProcessor","locations","InstanceAttributeColorDiffProcessor","buffers","availableClusters","instanceToCluster","clusterToBuffer","makeNewBuffer","cluster","maxUniformBlock","uniformBlocksPerInstance","pickModel","setScene","newGeometry","drawRange","newMaterial","clone","newModel","activeInstances","clusters","firstInstance","lastInstance","uniformIndex","uniformName","fakeAttribute","InstancedBufferAttribute","instanceIndex","toEmit","emitOnce","emit","clearTimeout","flushEmitOnce","emit_once_1","allBufferLocations","availableLocations","currentInstancedCount","instanceToBufferLocation","growthCount","maxInstancedCount","attributeToPropertyIds","updateAllPropertyIdList","activePropertyId","doAddWithRegistration","propertyIdsForAttribute","makeUpdateAllPropertyIdList","locationInfo","resizeBuffer","gatherLocationsIntoGroups","newLocations","growth","shift","ids","attributeToNewBufferLocations","InstancedBufferGeometry","previousInstanceAmount","_g","array","newAttribute","setDynamic","allLocations","newLocation","internalAttribute","totalNewInstances","attributesBufferLocations","bufferLocationsForAttribute","childBufferLocations","group","bufferLocation","childAttribute","bufferLocationsForChildAttribute","childBufferLocation","instance_attribute_color_diff_processor_1","instance_attribute_diff_processor_1","instance_attribute_quad_diff_processor_1","uniform_color_diff_processor_1","uniform_diff_processor_1","uniform_quad_diff_processor_1","cleanObservation","instanceChanges","allowChanges","disposer","observableDisposer","INSERT","CHANGE","REMOVE","ArcScaleType","ArcLayer","animateAngle","animateThickness","side","DoubleSide","getBounds","childToNode","childToBounds","nullBounded","fromSplit","doRemove","found","node","ReferenceCamera","offsetFilter","scaleFilter","base","_val","h","plural","ms","str","String","exec","long","fmtLong","fmtShort","createDebug","prevTime","self","curr","prev","coerce","format","formatter","hash","charCodeAt","selectColor","disable","names","skips","len","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","noop","nextTick","title","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","extendShader","baseFS","extendedVS","extendedFS","header","extend_shader_1","extendShaderInitialization","extendedShaders","isNumber","AnimationHelper","groupAnimation","groupCount","baseDelay","delayGap","modifyInstances","startFrameTime","gap","CameraBoundsAnchor","event_manager_1","BasicCameraController","isPanning","panFilter","_allViews","startViews","onRangeChanged","_camera","_targetView","startViewDidStart","applyBounds","targetView","applyScaleBounds","boundsHorizontalOffset","boundsVerticalOffset","scaleMin","scaleMax","setBounds","ignoreCoverViews","anchoredByBoundsHorizontal","TOP_LEFT","MIDDLE_LEFT","BOTTOM_LEFT","worldBounds","screenPadding","TOP_MIDDLE","MIDDLE","BOTTOM_MIDDLE","TOP_RIGHT","MIDDLE_RIGHT","BOTTOM_RIGHT","anchoredByBoundsVertical","worldTLinScreenSpace","worldBRinScreenSpace","canStart","findCoveredStartView","under","coveredStartView","getTargetView","_button","pan","wheelMetrics","beforeZoom","currentZoomX","currentZoomY","afterZoom","getRange","setRange","newWorld","deltaScale","deltaPan"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"three\"), require(\"bowser\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"three\", \"bowser\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"network-bubble-chart\"] = factory(require(\"three\"), require(\"bowser\"));\n\telse\n\t\troot[\"network-bubble-chart\"] = factory(root[\"three\"], root[\"bowser\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__135__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 142);\n","import * as Three from \"three\";\nimport { Instance } from \"./instance-provider/instance\";\nimport { Bounds } from \"./primitives/bounds\";\nimport { IPoint } from \"./primitives/point\";\nimport { ChartCamera, Vec, Vec2 } from \"./util\";\nimport { IAutoEasingMethod } from \"./util/auto-easing-method\";\nimport { IVisitFunction, TrackedQuadTree } from \"./util/tracked-quad-tree\";\n\nexport type Diff<T extends string, U extends string> = ({ [P in T]: P } &\n  { [P in U]: never } & { [x: string]: never })[T];\nexport type Omit<TType, TKeys> = Pick<TType, Exclude<keyof TType, TKeys>>;\nexport type ShaderIOValue =\n  | [number]\n  | [number, number]\n  | [number, number, number]\n  | [number, number, number, number]\n  | Three.Vector4[]\n  | Float32Array;\nexport type InstanceIOValue =\n  | [number]\n  | [number, number]\n  | [number, number, number]\n  | [number, number, number, number];\nexport type UniformIOValue =\n  | number\n  | InstanceIOValue\n  | Float32Array\n  | Three.Texture;\n\nexport enum InstanceBlockIndex {\n  ONE = 1,\n  TWO = 2,\n  THREE = 3,\n  FOUR = 4\n}\n\nexport enum InstanceAttributeSize {\n  ONE = 1,\n  TWO = 2,\n  THREE = 3,\n  FOUR = 4,\n  /** Special case for making instance attributes that can target Atlas resources */\n  ATLAS = 99\n}\n\nexport const instanceAttributeSizeFloatCount: { [key: number]: number } = {\n  [InstanceAttributeSize.ONE]: 1,\n  [InstanceAttributeSize.TWO]: 2,\n  [InstanceAttributeSize.THREE]: 3,\n  [InstanceAttributeSize.FOUR]: 4,\n  [InstanceAttributeSize.ATLAS]: 4\n};\n\nexport enum UniformSize {\n  ONE = 1,\n  TWO = 2,\n  THREE = 3,\n  FOUR = 4,\n  MATRIX3 = 9,\n  MATRIX4 = 16,\n  ATLAS = 99\n}\n\nexport enum VertexAttributeSize {\n  ONE = 1,\n  TWO = 2,\n  THREE = 3,\n  FOUR = 4\n}\n\n/**\n * This represents a color in the VoidGL system. Ranges are [0 - 1, 0 - 1, 0 - 1, 0 - 1]\n */\nexport type Color = [number, number, number, number];\n\n/**\n * Represents something with a unique id\n */\nexport interface Identifiable {\n  /** A unique identifier */\n  id: string;\n}\n\n/**\n * Information provided in mouse events interacting with instances and\n * layers.\n */\nexport interface IPickInfo<T extends Instance> {\n  /** If a mouse button is involved in the pick, this will be populated */\n  button?: number;\n  /** This is the parent layer id of the instances interacted with */\n  layer: string;\n  /** This is the list of instances that were detected in the interaction */\n  instances: T[];\n  /** If picking is set to ALL then this will be provided which can be used to make additional spatial queries */\n  querySpace?(bounds: Bounds | IPoint, visit?: IVisitFunction<T>): T[];\n  /** This is the screen coordinates of the mouse point that interacted with the instances */\n  screen: [number, number];\n  /** This is the world coordinates of the mouse point that interacted with the instances */\n  world: [number, number];\n  /** Projection methods to easily go between coordinate spaces */\n  projection: IProjection;\n}\n\nexport interface IVertexAttribute {\n  /**\n   * When initWithBuffer and customFill are not specified, this is was the system will initially\n   * load each vertex attribute with.\n   */\n  defaults?: number[];\n  /**\n   * When this is specified it will initialize the model's attribute with the data in this buffer.\n   */\n  initWithBuffer?: Float32Array;\n  /**\n   * When generating this attribute in the shader this will be the prefix to the attribute:\n   * For instance, if you specify 'highp' as the modifier, then the attribute that appears\n   * in the shader will be:\n   * attribute highp vec3 position;\n   */\n  qualifier?: string;\n  /**\n   * This is the name the attribute will be for the model.\n   */\n  name: string;\n  /**\n   * This is the number of floats the attribute will consume. For now, we only allow for up\n   * to four floats per attribute.\n   */\n  size: VertexAttributeSize;\n  /**\n   * This lets you populate the buffer with an automatically called method. This will fire when\n   * necessary updates are detected or on initialization.\n   */\n  update(vertex: number): ShaderIOValue;\n}\n\nexport interface IVertexAttributeInternal extends IVertexAttribute {\n  /** This is the actual attribute generated internally for the ThreeJS interfacing */\n  materialAttribute: Three.BufferAttribute | null;\n}\n\nexport interface IInstanceAttribute<T extends Instance> {\n  /**\n   * If this is specified, this attribute becomes a size of 4 and will have a block index of\n   * 0. This makes this attribute and layer become compatible with reading atlas resources.\n   * The value provided for this property should be the name of the atlas that is created.\n   */\n  atlas?: {\n    /** Specify which generated atlas to target for the resource */\n    key: string;\n    /** Specify the name that will be injected that will be the sampler2D in the shader */\n    name: string;\n    /**\n     * This specifies which of the shaders the sampler2D will be injected into.\n     * Defaults to the Fragment shader only.\n     */\n    shaderInjection?: ShaderInjectionTarget;\n  };\n  /**\n   * This is a block index helping describe the instancing process. It can be any number as\n   * the system will sort and organize them for you. This only helps the system detect when\n   * you cram too much info into a single block. The tighter you pack your blocks the better\n   * your program will perform.\n   *\n   * Note: It's best to leave this blank as the system now packs your attributes for you and\n   * will determine this number for you.\n   */\n  block?: number;\n  /**\n   * This is the index within the block this attribute will be available.\n   */\n  blockIndex?: InstanceBlockIndex;\n  /**\n   * If the settings on this attrubute spawns additional attributes, those attributes shall\n   * be populated here. Otherwise this remains undefined.\n   */\n  childAttributes?: IInstanceAttribute<T>[];\n  /**\n   * When this is set, the system will automatically inject necessary Shader IO to facilitate\n   * performing the easing on the GPU, which saves enormous amounts of CPU processing time\n   * trying to calcuate animations and tweens for properties.\n   *\n   * NOTE: Setting this increases the amount of data per instance by: size * 2 + ;\n   * as it injects in a start value, start time, and duration\n   */\n  easing?: IAutoEasingMethod<Vec>;\n  /**\n   * This is the name that will be available in your shader for use. This will only be\n   * available after the ${attributes} declaration.\n   */\n  name: string;\n  /**\n   * If this attribute is created automatically by the system based on the settings of another\n   * attribute, that parent attribute will be set here. Otherwise this remains undefined.\n   */\n  parentAttribute?: IInstanceAttribute<T>;\n  /**\n   * When generating this attribute in the shader this will be the prefix to the attribute:\n   * For instance, if you specify 'highp' as the modifier, then the attribute that appears\n   * in the shader will be:\n   * attribute highp vec3 position;\n   */\n  qualifier?: string;\n  /**\n   * This is how many floats the instance attribute takes up. Due to how instancing is\n   * implemented, we can only take up to 4 floats per variable right now.\n   */\n  size?: InstanceAttributeSize;\n  /**\n   * This is the accessor that executes when the instance needs updating. Simply return the\n   * value that should be populated for this attribute.\n   */\n  update(instance: T): InstanceIOValue;\n}\n\n/**\n * Internal Instance Attributes are ones that actually map to an attribute in the shader and use\n * hardware instancing.\n */\nexport interface IInstanceAttributeInternal<T extends Instance>\n  extends IInstanceAttribute<T> {\n  /** We will keep an internal uid for the  */\n  uid: number;\n  /** This is the actual attribute mapped to a buffer */\n  bufferAttribute: Three.InstancedBufferAttribute;\n}\n\n/**\n * This is an attribute where the atlas is definitely declared.\n */\nexport interface IAtlasInstanceAttribute<T extends Instance>\n  extends IInstanceAttribute<T> {\n  /**\n   * If this is specified, this attribute becomes a size of 4 and will have a block index of\n   * 0. This makes this attribute and layer become compatible with reading atlas resources.\n   * The value provided for this property should be the name of the atlas that is created.\n   */\n  atlas: {\n    /** Specify which generated atlas to target for the resource */\n    key: string;\n    /** Specify the name that will be injected that will be the sampler2D in the shader */\n    name: string;\n    /**\n     * This specifies which of the shaders the sampler2D will be injected into.\n     * Defaults to the Fragment shader only.\n     */\n    shaderInjection?: ShaderInjectionTarget;\n  };\n}\n\n/**\n * This is an attribute that is simply a value\n */\nexport interface IEasingInstanceAttribute<T extends Instance>\n  extends IInstanceAttribute<T> {\n  /**\n   * This MUST be defined to be an Easing attribute\n   */\n  easing: IAutoEasingMethod<Vec> & { uid?: number };\n  /**\n   * Easing attributes requires size to be present\n   */\n  size: InstanceAttributeSize;\n}\n\n/**\n * This is an attribute that is simply a value\n */\nexport interface IValueInstanceAttribute<T extends Instance>\n  extends IInstanceAttribute<T> {\n  /**\n   * If this is specified, this attribute becomes a size of 4 and will have a block index of\n   * 0. This makes this attribute and layer become compatible with reading atlas resources.\n   * The value provided for this property should be the name of the atlas that is created.\n   */\n  atlas: undefined;\n}\n\n/** These are flags for indicating which shaders receive certain injection elements */\nexport enum ShaderInjectionTarget {\n  /** ONLY the vertex shader will receive the injection */\n  VERTEX = 1,\n  /** ONLY the fragment shader will receive the injection */\n  FRAGMENT = 2,\n  /** Both the fragment and vertex shader will receive the injection */\n  ALL = 3\n}\n\nexport interface IUniform {\n  /**\n   * This lets you specify which of the shaders will receive this uniform as available.\n   * This defaults to only injecting into the vertex shader.\n   */\n  shaderInjection?: ShaderInjectionTarget;\n  /** Name of the uniform as will be available in the shaders */\n  name: string;\n  /** How many floats the uniform shall encompass */\n  size: UniformSize;\n  /**\n   * When generating this uniform in the shader this will be the prefix to the uniform:\n   * For instance, if you specify 'highp' as the modifier, then the uniform that appears\n   * in the shader will be:\n   * uniform highp vec3 position;\n   */\n  qualifier?: string;\n  /**\n   * This is the accessor that executes every frame before this layer is drawn. It gives\n   * opportunity to update the uniform's value before every draw.\n   */\n  update(uniform: IUniform): UniformIOValue;\n}\n\nexport interface IUniformInternal extends IUniform {\n  /**\n   * All layers will have many many ShaderMaterials generated per each instance buffer as a single buffer\n   * can only render so many instances. This tracks across all generated ShaderMaterials for each buffer\n   * the material uniforms that need to be updated as a Uniform for a layer is dictated as uniform across\n   * all instances.\n   */\n  materialUniforms: Three.IUniform[];\n}\n\n/**\n * This is the structure of a uniform generated for the sake of instancing\n */\nexport interface IInstancingUniform {\n  name: string;\n  type: \"f\" | \"v2\" | \"v3\" | \"v4\" | \"4fv\" | \"bvec4\";\n  value: ShaderIOValue;\n}\n\n/**\n * Represents a complete shader object set.\n */\nexport interface IShaders {\n  fs: string;\n  header?: string;\n  vs: string;\n}\n\n/**\n * Represents an element that has a full list of projection methods\n */\nexport interface IProjection {\n  /** This is the chart camera utilized in the projection of elements */\n  camera: ChartCamera;\n  /** Converts from the pixel density layer to the screen space */\n  pixelSpaceToScreen(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from the screen coordinates to the pixel density layer */\n  screenToPixelSpace(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from screen space to the view's relative coordinates */\n  screenToView(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from screen space to the world space of a scene */\n  screenToWorld(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from a view's space to the screen */\n  viewToScreen(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from a views space to the world coordinates */\n  viewToWorld(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from world coordinate space of a scene to the screen */\n  worldToScreen(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from world coordinate space of a scene to the view's space */\n  worldToView(point: IPoint, out?: IPoint): IPoint;\n}\n\nexport type IMaterialOptions = Partial<\n  Omit<\n    Omit<Omit<Three.ShaderMaterialParameters, \"uniforms\">, \"vertexShader\">,\n    \"fragmentShader\"\n  >\n>;\n\n/** This is the method signature for determining whether or not a point hits an instance */\nexport type InstanceHitTest<T> = (o: T, p: IPoint, v: IProjection) => boolean;\n\n/**\n * This is the type of picking assigned to a layer. Each mode has performance and functionality\n * tradeoffs.\n */\nexport enum PickType {\n  /** Disable any picking methodology */\n  NONE,\n  /** Pick all instances found underneath the mouse. The Layer must explicitly support this feature. */\n  ALL,\n  /**\n   * NOTE: NOT IMPLEMENTED YET\n   *\n   * Uses highly efficient color rendering method to detect an instance on a pixel by pixel check. Since it is\n   * based on rendering, it will only select the 'visually' top most rendered instance. This means instances can be occluded\n   * by other instances is an instance renders behind another.\n   *\n   * This is vastly more efficient and accurate than ALL. This also will be more readily supported than ALL.\n   */\n  SINGLE\n}\n\n/**\n * This represents the settings and objects used to facilitate picking in a layer.\n */\nexport interface IPickingMetrics {\n  /** This is the current pick mode that is active during the draw pass of the layer */\n  currentPickMode: PickType;\n  /** This is the picking style to be used */\n  type: PickType;\n}\n\n/**\n * This is the picking settings and objects to facilitate PickType.ALL so we can get\n * all instances underneath the mouse.\n */\nexport interface IQuadTreePickingMetrics<T extends Instance>\n  extends IPickingMetrics {\n  /** This handles the ALL type only */\n  type: PickType.ALL;\n  /** This stores all of our instances in a quad tree to spatially track our instances */\n  quadTree: TrackedQuadTree<T>;\n  /** This is the method for performing a hit test with the provided instance */\n  hitTest: InstanceHitTest<T>;\n}\n\n/**\n * This is the picking settings and objects to facilitate PickType.SINGLE so we can get\n * a single instance underneath the mouse.\n */\nexport interface ISinglePickingMetrics<T extends Instance>\n  extends IPickingMetrics {\n  /** Set the enum for the type */\n  type: PickType.SINGLE;\n  /**\n   * This is a lookup of the instance by it's UID which is all that is needed to decode a color to an instance\n   * The color UINT8 components composited into a single UINT32 IS the UID of the instance\n   */\n  uidToInstance: Map<number, T>;\n}\n\n/**\n * This is the picking settings and objects to facilitate PickType.NONE where no information\n * is retrieved for mouse interactions.\n */\nexport interface INonePickingMetrics extends IPickingMetrics {\n  // Single Picking does not require any special helper information\n  type: PickType.NONE;\n}\n\nexport interface IColorPickingData {\n  /** The mouse target position where the data is rendered */\n  mouse: Vec2;\n  /** The color data loaded for last picking rendering */\n  colorData: Uint8Array;\n  /** The height of the data array */\n  dataHeight: number;\n  /** The width of the data array */\n  dataWidth: number;\n  /** The nearest found color */\n  nearestColor: number;\n  /** All colors in the data */\n  allColors: number[];\n}\n\n/**\n * Diff types that an instance can go through. Used to help the system consume the diff\n * and apply it to the GL framework.\n */\nexport enum InstanceDiffType {\n  CHANGE = 0,\n  INSERT = 1,\n  REMOVE = 2\n}\n\n/**\n * This is the metrics associated with a frame. Mostly dealing with timing values.\n */\nexport type FrameMetrics = {\n  /** The frame number rendered. Increases by 1 every surface draw */\n  currentFrame: number;\n  /** The start time of the current frame */\n  currentTime: number;\n  /** The start time of the previous frame */\n  previousTime: number;\n};\n\n/**\n * This represents controls that can be utilized when adjustig easing\n */\nexport interface IEasingControl {\n  /** A value in ms that expresses how long the system should wait before beginning the animation */\n  readonly delay?: number;\n  /** Indicates how long the easing should take to complete in ms */\n  readonly duration: number;\n  /** The end value the easing should approach */\n  readonly end: Vec;\n  /** The starting value of the easing object */\n  readonly start: Vec;\n  /** The start time in ms the easing object utilizes */\n  readonly startTime: number;\n\n  /**\n   * If you manually set values for the easing properties, then you use this to return\n   * the easing object back to an automated state which is where the start value is\n   * the calculated current position of the output and the delay and duration is determined\n   * by the easing set to the layer's IAutomatedEasingMethod value set to the layer.\n   */\n  setAutomatic(): void;\n\n  /**\n   * This controls the start value of the easing. This should be used to force a starting\n   * value of the animation.\n   *\n   * Use setAutomatic() to return to default easing behavior.\n   */\n  setStart(start?: Vec): void;\n\n  /**\n   * This controls of the timing of the easing equation. This should be used to adjust\n   * when a value is to be adjusted\n   *\n   * Use setAutomatic() to return to default easing behavior.\n   */\n  setTiming(delay?: number, duration?: number): void;\n}\n\n/**\n * This is the minimum properties required to make all easing functions operate.\n */\nexport interface IEasingProps {\n  /** A value in ms that expresses how long the system should wait before beginning the animation */\n  delay?: number;\n  /** Indicates how long the easing should take to complete in ms */\n  duration: number;\n  /** The end value the easing should approach */\n  end: Vec;\n  /** A flag indicating if the easing start value is manually set, thus prioritizing the values already set in this object */\n  isManualStart?: boolean;\n  /** A flag indicating if the easing timing is manually set, thus prioritizing the values already set in this object */\n  isTimeSet?: boolean;\n  /** The starting value of the easing object */\n  start: Vec;\n  /** The start time in ms the easing object utilizes */\n  startTime: number;\n}\n\n/**\n * This is the Shader IO information a layer will provide.\n */\nexport interface IShaderInputs<T extends Instance> {\n  /** These are very frequently changing attributes and are uniform across all vertices in the model */\n  instanceAttributes?: (IInstanceAttribute<T> | null)[];\n  /** These are attributes that should be static on a vertex. These are considered unique per vertex. */\n  vertexAttributes?: (IVertexAttribute | null)[];\n  /** Specify how many vertices there are per instance */\n  vertexCount: number;\n  /** These are uniforms in the shader. These are uniform across all vertices and all instances for this layer. */\n  uniforms?: (IUniform | null)[];\n}\n\n/**\n * This is the initialization of the shader.\n */\nexport type IShaderInitialization<T extends Instance> = IShaderInputs<T> &\n  IShaders;\n\nexport interface IShaderExtension {\n  header?: string;\n  body?: string;\n}\n\nexport type IShaderIOExtension<T extends Instance> = Partial<\n  IShaderInputs<T>\n> & {\n  vs?: IShaderExtension;\n  fs?: IShaderExtension;\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","export * from \"./observable\";\nexport * from \"./instance-provider\";\nexport * from \"./instance\";\n","export * from \"../instance-provider/instance\";\nexport * from \"./common-options\";\nexport * from \"./animation-helper\";\nexport * from \"./auto-easing-method\";\nexport * from \"./chart-camera\";\nexport * from \"./extend-shader-io\";\nexport * from \"./mouse\";\nexport * from \"./reference-camera\";\nexport * from \"./shader-templating\";\nexport * from \"./tracked-quad-tree\";\nexport * from \"./uid\";\nexport * from \"./vector\";\nexport * from \"./view-camera\";\nexport * from \"./webgl-stat\";\n","import { IPoint } from \"./point\";\n\nexport interface IBoundsOptions {\n  /** Top left x position */\n  x?: number;\n  /** Top left y position */\n  y?: number;\n  /** Width covered */\n  width?: number;\n  /** height covered */\n  height?: number;\n\n  /** Specify the left */\n  left?: number;\n  /** Specify the right */\n  right?: number;\n  /** Specify the top */\n  top?: number;\n  /** Specify the bottom */\n  bottom?: number;\n}\n\n/**\n * Class to manage the x, y, width, and height of an object\n *\n * @template T This specifies the data type associated with this shape and is accessible\n *             via the property 'd'\n */\nexport class Bounds {\n  x: number = 0;\n  y: number = 0;\n  width: number = 0;\n  height: number = 0;\n\n  get area() {\n    return this.width * this.height;\n  }\n\n  get bottom() {\n    return this.y + this.height;\n  }\n\n  get left() {\n    return this.x;\n  }\n\n  get mid() {\n    return {\n      x: this.x + this.width / 2.0,\n      y: this.y + this.height / 2.0\n    };\n  }\n\n  get right() {\n    return this.x + this.width;\n  }\n\n  get top() {\n    return this.y;\n  }\n\n  static emptyBounds() {\n    return new Bounds({\n      height: 0,\n      width: 0,\n      x: 0,\n      y: 0\n    });\n  }\n\n  /**\n   * Create a new instance\n   *\n   * @param left  The left side (x coordinate) of the instance\n   * @param right The right side of the instance\n   * @param top The top (y coordinate) of the instance\n   * @param bottom The bottom of the instance\n   */\n  constructor(options: IBoundsOptions) {\n    this.x = options.x || options.left || 0;\n    this.y = options.y || options.top || 0;\n    this.height = options.height || (options.bottom || 0) - this.y || 0;\n    this.width = options.width || (options.right || 0) - this.x || 0;\n  }\n\n  /**\n   * Checks to see if a point is within this bounds object.\n   *\n   * @param point\n   */\n  containsPoint(point: IPoint) {\n    return !(\n      point.x < this.x ||\n      point.y < this.y ||\n      point.x > this.right ||\n      point.y > this.bottom\n    );\n  }\n\n  /**\n   * Grows this bounds object to cover the space of the provided bounds object\n   *\n   * @param item\n   */\n  encapsulate(item: Bounds | IPoint) {\n    if (item instanceof Bounds) {\n      if (item.x < this.x) {\n        this.width += Math.abs(item.x - this.x);\n        this.x = item.x;\n      }\n\n      if (item.y < this.y) {\n        this.height += Math.abs(item.y - this.y);\n        this.y = item.y;\n      }\n\n      if (this.right < item.right) {\n        this.width += item.right - this.right;\n      }\n\n      if (this.bottom < item.bottom) {\n        this.height += item.bottom - this.bottom;\n      }\n\n      return true;\n    } else {\n      if (item.x < this.x) {\n        this.width += this.x - item.x;\n        this.x = item.x;\n      }\n\n      if (item.x > this.right) {\n        this.width += item.x - this.x;\n      }\n\n      if (item.y < this.y) {\n        this.height += this.y - item.y;\n        this.y = item.y;\n      }\n\n      if (item.y > this.bottom) {\n        this.height += item.y - this.y;\n      }\n\n      return true;\n    }\n  }\n\n  /**\n   * Checks to see if the provided bounds object could fit within the dimensions of this bounds object\n   * This ignores position and just checks width and height.\n   *\n   * @param bounds\n   *\n   * @return {number} 0 if it doesn't fit. 1 if it fits perfectly. 2 if it just fits.\n   */\n  fits(bounds: Bounds): 0 | 1 | 2 {\n    // If the same, the bounds fits exactly into this bounds\n    if (this.width === bounds.width && this.height === bounds.height) {\n      return 1;\n    }\n\n    // The bounds can fit within this, then it just fits\n    if (this.width >= bounds.width && this.height >= bounds.height) {\n      return 2;\n    }\n\n    // Otherwise, the bounds does not fit within this bounds\n    return 0;\n  }\n\n  /**\n   * Checks if a bounds object intersects another bounds object.\n   *\n   * @param bounds\n   */\n  hitBounds(bounds: Bounds) {\n    return !(\n      this.right < bounds.x ||\n      this.x > bounds.right ||\n      this.bottom < bounds.y ||\n      this.y > bounds.height\n    );\n  }\n\n  /**\n   * Sees if the provided bounds is completely within this bounds object. Unlike fits() this takes\n   * position into account.\n   *\n   * @param bounds\n   */\n  isInside(bounds: Bounds): boolean {\n    return (\n      this.x >= bounds.x &&\n      this.right <= bounds.right &&\n      this.y >= bounds.y &&\n      this.bottom <= bounds.bottom\n    );\n  }\n\n  /**\n   * Easy readout of this Bounds object.\n   */\n  toString() {\n    return `{x: ${this.x} y:${this.y} w:${this.width} h:${this.height}}`;\n  }\n}\n","import { Instance } from \"../../instance-provider/instance\";\nimport { IInstanceAttributeInternal } from \"../../types\";\nimport { Vec2 } from \"../../util\";\nimport { Layer } from \"../layer\";\nimport { Scene } from \"../scene\";\n\nexport function isBufferLocation(val: any): val is IBufferLocation {\n  return val && val.buffer && val.buffer.value;\n}\n\nexport function isBufferLocationGroup(\n  val: any\n): val is IBufferLocationGroup<IBufferLocation> {\n  return val && val.propertyToBufferLocation;\n}\n\n/**\n * This defines a base information object that explains where in a buffer a value\n * is represented.\n */\nexport interface IBufferLocation {\n  /** This is the parent attribute of this location */\n  attribute: IInstanceAttributeInternal<Instance>;\n  /**\n   * This is the generic buffer object interface for accessing the actual buffer.\n   */\n  buffer: {\n    value: Float32Array | Uint8Array;\n  };\n  /**\n   * If the attribute has child attributes (attributes auto generated as a consequence of the attributes settings)\n   * then the children's buffer locations can be found here.\n   */\n  childLocations?: IBufferLocation[];\n  /**\n   * This is the instance index indicative of the instance positioning within the buffer.\n   * Keep in mind: This does NOT correlate to a lookup for an Instance object but rather for\n   * the instancing concept designed for GL Buffers.\n   */\n  instanceIndex: number;\n  /**\n   * This is the range within the buffer values should be injected for this location.\n   */\n  range: Vec2;\n}\n\n/**\n * Each instance that comes in can be associated with a group of buffer locations. A buffer location for each\n * instance attribute used in updates. So a grouping is several buffer locations that are keyed by\n * the instance's property's UIDs.\n */\nexport interface IBufferLocationGroup<T extends IBufferLocation> {\n  /** This is the instance index WITHIN THE BUFFERS. This does NOT have relevance to Instance type objects */\n  instanceIndex: number;\n  /** This is a map of property UIDs to an associated buffer location */\n  propertyToBufferLocation: { [key: number]: T };\n}\n\n/**\n * Layers manage instances and those instances require a form of binding to their associated buffers.\n * The buffers have to be intelligently created and managed in this tieing to maximize performance.\n * One can not have a buffer for every instance in most cases, so the buffer manager has to get instances\n * to cooperate sharing a buffer in whatever strategy possible that best suits the hardware and it's limitations.\n *\n * This provides a uniform interface between instances and their corresponding buffer.\n */\nexport abstract class BufferManagerBase<\n  T extends Instance,\n  U extends IBufferLocation\n> {\n  /** The layer this manager glues Instances to Buffers */\n  layer: Layer<T, any>;\n  /** The scene the layer is injecting elements into */\n  scene: Scene;\n\n  /**\n   * Base constructor. A manager always needs to be associated with it's layer and it's scene.\n   */\n  constructor(layer: Layer<T, any>, scene: Scene) {\n    this.layer = layer;\n    this.scene = scene;\n  }\n\n  /**\n   * Destroy all elements that consume GPU resources or consumes otherwise unreleaseable resources.\n   */\n  abstract destroy(): void;\n\n  /**\n   * This adds an instance to the manager and thus ties the instance to an IBuffer location\n   */\n  add: (instance: T) => U | IBufferLocationGroup<U> | undefined;\n\n  /**\n   * Retrieves the buffer locations for the instance provided\n   */\n  abstract getBufferLocations(\n    instance: T\n  ): U | IBufferLocationGroup<U> | undefined;\n\n  /**\n   * This retrieves the property ID for the active attribute. This is necessary to prevent\n   * the need for lookups to find the active attribute.\n   */\n  abstract getActiveAttributePropertyId(): number;\n\n  /**\n   * This returns how many instances this buffer manager has grown to accommodate.\n   */\n  abstract getInstanceCount(): number;\n\n  /**\n   * This should provide a minimum property id list that represents a set of properties that if triggered\n   * for update, would cause all of the attributes to be updated for the layer.\n   */\n  abstract getUpdateAllPropertyIdList(): number[];\n\n  /**\n   * Disassociates an instance with it's buffer location and makes the instance\n   * in the buffer no longer drawable.\n   */\n  remove: (instance: T) => T;\n\n  /**\n   * Removes the manager from the scene it applied itself to.\n   */\n  abstract removeFromScene(): void;\n}\n","import { Identifiable, IEasingControl, IEasingProps } from \"../types\";\nimport { EasingProps } from \"../util/easing-props\";\nimport { InstanceProvider } from \"./instance-provider\";\nimport { observable } from \"./observable\";\n\nlet instanceUID = 0;\n\nexport interface IInstanceOptions {\n  /** The instance can be declared with an initial active state */\n  active?: boolean;\n  /** An instance must be declared with an identifier */\n  id?: string;\n}\n\nexport class Instance implements Identifiable {\n  static get newUID() {\n    return (instanceUID = ++instanceUID % 0xffffff);\n  }\n\n  /** This indicates when the instance is active / rendering */\n  @observable active: boolean;\n  /** The property changes on the instance */\n  changes: { [key: number]: number } = {};\n  /** Stores property identification numbers */\n  property: { [key: string]: number } = {};\n  /**\n   * This is a lookup that provides a means to retrieve the id of an easing type currently available to the instance.\n   * This is populated when the instance becomes a part of a layer with easing attributes.\n   *\n   * This property is to NOT be mutated except by the system.\n   */\n  easingId: { [key: string]: number } | undefined;\n  /** This is an internal easing object to track properties for automated easing */\n  private _easing = new Map<number, IEasingProps>();\n  /** Internal, non-changeable id */\n  private _id: string;\n  /** This is the observer of the Instance's observable properties */\n  private _observer: InstanceProvider<this> | null;\n  /** This is where observables store their data for the instance */\n  observableStorage: any[] = [];\n  /** A numerical look up for the instance. Numerical identifiers run faster than objects or strings */\n  @observable private _uid = Instance.newUID;\n\n  /**\n   * Retrieves a method for disposing the link between observables and observer.\n   */\n  get observableDisposer(): () => void {\n    return () => delete this._observer;\n  }\n\n  /**\n   * Retrieves the observer of the observables.\n   */\n  get observer(): InstanceProvider<this> | null {\n    return this._observer || null;\n  }\n\n  /**\n   * Applies an observer for changes to the observables.\n   */\n  set observer(val: InstanceProvider<this> | null) {\n    // If an observer already is present, we should inform it, that it is being removed\n    // in favor of a new observer\n    const oldObserver = this._observer;\n\n    // If we're switching observers, then we have to dump out assumptions made within other observers\n    if (oldObserver && oldObserver !== val) {\n      this._easing.clear();\n      oldObserver.remove(this);\n    }\n\n    // Apply the new observer as the current observer\n    this._observer = val;\n  }\n\n  /**\n   * This clears any lingering easing information that may have been registered with the instance.\n   */\n  clearEasing() {\n    this._easing.clear();\n    delete this.easingId;\n  }\n\n  /**\n   * Retrieves easing properties for the observables that are associated with easing.\n   */\n  get easing() {\n    return this._easing;\n  }\n\n  /**\n   * This attempts to get the easing object for this instance for a given attribute that it MIGHT be associated with.\n   *\n   * When an instance is added to a layer and the layer has attributes with easing applied to them, the instance gains easing values\n   * for the attributes in the layer with applied easing.\n   *\n   * You can access the easing values by requesting the attribute's \"name\" property value using this method.\n   *\n   * There is NO WAY TO GUARANTEE this value is set or available, so this method WILL return undefined if you did\n   * not use the correct name, or no such value exists, or the layer decided to not make the attribute animateable.\n   *\n   * Thus ALWAYS check the returned value to ensure it is defined before attempting to use it's results.\n   *\n   * PERFORMANCE: You can probably get much better performance NOT using this to manipulate the easing object directly.\n   * The system is designed to automatically animate an item from it's current rendered location to the next location\n   * seamlessly thus accounting for most situations. This method is provided to commit much more complex start, duration,\n   * and delay animations within a given frame to prevent the need for complicated setTimeout patterns.\n   *\n   * This CAN be faster than the default behavior if it avoids causing complicated easing computations to determine where\n   * the rendering should be at the moment (complicated cpu methods within the IAutoEasingMethod used).\n   */\n  getEasing(attributeName: string): IEasingControl | undefined {\n    if (this.easingId) {\n      const easingId = this.easingId[attributeName];\n\n      if (easingId) {\n        const easing = this._easing.get(easingId);\n\n        if (easing instanceof EasingProps) {\n          return easing;\n        }\n      }\n    }\n\n    return;\n  }\n\n  /**\n   * Get the applied id of this instance\n   */\n  get id() {\n    return this._id;\n  }\n\n  /**\n   * Get the auto generated ID of this instance\n   */\n  get uid() {\n    return this._uid;\n  }\n\n  /**\n   * This method is utilized internally to indicate when requested resources are ready.\n   * If you have a property that will be requesting a resource, you should implement this method\n   * to cause a trigger for the property to activate such that the property will update it's buffer.\n   */\n  resourceTrigger() {\n    // No default behavior, subclasses must override and provide behavior.\n    console.warn(\n      \"resourceTrigger called on an instance that did not override resourceTrigger. resourceTrigger MUST be overridden for instances\",\n      \"that utilize a resource. The observable that is tied to committing the resource should be 'triggered' in this method.\"\n    );\n  }\n\n  constructor(options: IInstanceOptions) {\n    this._id = options.id || \"\";\n    this.active = options.active || this.active;\n  }\n}\n","import * as Three from \"three\";\nimport { Instance } from \"../instance-provider/instance\";\nimport { InstanceDiff } from \"../instance-provider/instance-provider\";\nimport {\n  IInstanceAttribute,\n  IMaterialOptions,\n  INonePickingMetrics,\n  InstanceAttributeSize,\n  InstanceBlockIndex,\n  InstanceDiffType,\n  InstanceHitTest,\n  InstanceIOValue,\n  IPickInfo,\n  IQuadTreePickingMetrics,\n  IShaderInitialization,\n  ISinglePickingMetrics,\n  IUniform,\n  IUniformInternal,\n  IVertexAttributeInternal,\n  PickType,\n  ShaderInjectionTarget,\n  UniformIOValue,\n  UniformSize\n} from \"../types\";\nimport { BoundsAccessor, TrackedQuadTree } from \"../util\";\nimport { IdentifyByKey, IdentifyByKeyOptions } from \"../util/identify-by-key\";\nimport {\n  BufferManagerBase,\n  IBufferLocation\n} from \"./buffer-management/buffer-manager-base\";\nimport { InstanceDiffManager } from \"./buffer-management/instance-diff-manager\";\nimport { LayerInteractionHandler } from \"./layer-interaction-handler\";\nimport { LayerBufferType } from \"./layer-processing/layer-buffer-type\";\nimport { LayerInitializer, LayerSurface } from \"./layer-surface\";\nimport { AtlasResourceManager } from \"./texture/atlas-resource-manager\";\nimport { View } from \"./view\";\n\nexport interface IModelType {\n  /** This is the draw type of the model to be used */\n  drawMode?: Three.TrianglesDrawModes;\n  /** This is the THREE JS model type */\n  modelType: IModelConstructable;\n}\n\n/**\n * Bare minimum required features a provider must provide to be the data for the layer.\n */\nexport interface IInstanceProvider<T extends Instance> {\n  /** A list of changes to instances */\n  changeList: InstanceDiff<T>[];\n  /** Resolves the changes as consumed */\n  resolve(): void;\n}\n\n/**\n * Constructor options when generating a layer.\n */\nexport interface ILayerProps<T extends Instance> extends IdentifyByKeyOptions {\n  /** This is the data provider where the instancing data is injected and modified. */\n  data: IInstanceProvider<T>;\n  /**\n   * This sets how instances can be picked via the mouse. This activates the mouse events for the layer IFF\n   * the value is not NONE.\n   */\n  picking?: PickType;\n  /**\n   * Used for debugging. Logs the generated shader for the layer in the console.\n   */\n  printShader?: boolean;\n  /**\n   * This identifies the scene we want the layer to be a part of.\n   * Layer's with the same identifiers will render their buffers in the same scene.\n   * This only applies to the layer when the layer is initialized in a layer surface. You shouldn't\n   * be swapping layers from scene to scene.\n   *\n   * The scene identifier must be an identifier used when constructing the layer surface that this layer\n   * is added to.\n   */\n  scene?: string;\n\n  // ---- EVENTS ----\n  /** Executes when the mouse is down on instances and a picking type is set */\n  onMouseDown?(info: IPickInfo<T>): void;\n  /** Executes when the mouse moves on instances and a picking type is set */\n  onMouseMove?(info: IPickInfo<T>): void;\n  /** Executes when the mouse no longer over instances and a picking type is set */\n  onMouseOut?(info: IPickInfo<T>): void;\n  /** Executes when the mouse is newly over instances and a picking type is set */\n  onMouseOver?(info: IPickInfo<T>): void;\n  /** Executes when the mouse button is release when over instances and a picking type is set */\n  onMouseUp?(info: IPickInfo<T>): void;\n  /** Executes when the mouse click gesture is executed over instances and a picking type is set */\n  onMouseClick?(info: IPickInfo<T>): void;\n}\n\nexport interface IModelConstructable {\n  new (\n    geometry?: Three.Geometry | Three.BufferGeometry,\n    material?: Three.Material | Three.Material[]\n  ): any;\n}\n\nexport interface IPickingMethods<T extends Instance> {\n  /** This provides a way to calculate bounds of an Instance */\n  boundsAccessor: BoundsAccessor<T>;\n  /** This is the way the system tests hitting an intsance */\n  hitTest: InstanceHitTest<T>;\n}\n\n/**\n * A base class for generating drawable content\n */\nexport class Layer<\n  T extends Instance,\n  U extends ILayerProps<T>\n> extends IdentifyByKey {\n  static defaultProps: any = {};\n\n  /** This is the attribute that specifies the _active flag for an instance */\n  activeAttribute: IInstanceAttribute<T>;\n  /** This matches an instance to the list of Three uniforms that the instance is responsible for updating */\n  private _bufferManager: BufferManagerBase<T, IBufferLocation>;\n  /** Buffer manager is read only. Must use setBufferManager */\n  get bufferManager() {\n    return this._bufferManager;\n  }\n  /** This is the determined buffering strategy of the layer */\n  private _bufferType: LayerBufferType;\n  /** Buffer type is private and should not be directly modified */\n  get bufferType() {\n    return this._bufferType;\n  }\n  /** This determines the drawing order of the layer within it's scene */\n  depth: number = 0;\n  /**\n   * This gets populated when there are attributes that have easing applied to them. This\n   * subsequently gets applied to instances when they get added to the layer.\n   */\n  easingId: { [key: string]: number };\n  /** This is the threejs geometry filled with the vertex information */\n  geometry: Three.BufferGeometry;\n  /** This is the initializer used when making this layer. */\n  initializer: LayerInitializer;\n  /** This is all of the instance attributes generated for the layer */\n  instanceAttributes: IInstanceAttribute<T>[];\n  /** A lookup fo an instance by it's ID */\n  instanceById = new Map<string, T>();\n  /** Provides the number of vertices a single instance spans */\n  instanceVertexCount: number = 0;\n  /** This is the handler that manages interactions for the layer */\n  interactions: LayerInteractionHandler<T, U>;\n  /** The official shader material generated for the layer */\n  material: Three.RawShaderMaterial;\n  /** INTERNAL: For the given shader IO provided this is how many instances can be present per buffer. */\n  maxInstancesPerBuffer: number;\n  /** This is the mesh for the Threejs setup */\n  model: Three.Object3D;\n  /** This is all of the picking metrics kept for handling picking scenarios */\n  picking:\n    | IQuadTreePickingMetrics<T>\n    | ISinglePickingMetrics<T>\n    | INonePickingMetrics;\n  /** Properties handed to the Layer during a LayerSurface render */\n  props: U;\n  /** This is the system provided resource manager that lets a layer request Atlas resources */\n  resource: AtlasResourceManager;\n  /** This is the surface this layer is generated under */\n  surface: LayerSurface;\n  /** This is all of the uniforms generated for the layer */\n  uniforms: IUniformInternal[];\n  /** This is all of the vertex attributes generated for the layer */\n  vertexAttributes: IVertexAttributeInternal[];\n  /** This is the view the layer is applied to. The system sets this, modifying will only cause sorrow. */\n  view: View;\n\n  /** This contains the methods and controls for handling diffs for the layer */\n  diffManager: InstanceDiffManager<T>;\n\n  constructor(props: ILayerProps<T>) {\n    // We do not establish bounds in the layer. The surface manager will take care of that for us\n    // After associating the layer with the view it is a part of.\n    super(props);\n    // Keep our props within the layer\n    this.props = Object.assign({}, Layer.defaultProps || {}, props as U);\n    // Set up the pick type for the layer\n    const { picking = PickType.NONE } = this.props;\n\n    // If ALL is specified we set up QUAD tree picking for our instances\n    if (picking === PickType.ALL) {\n      const pickingMethods = this.getInstancePickingMethods();\n\n      this.picking = {\n        currentPickMode: PickType.NONE,\n        hitTest: pickingMethods.hitTest,\n        quadTree: new TrackedQuadTree<T>(\n          0,\n          1,\n          0,\n          1,\n          pickingMethods.boundsAccessor\n        ),\n        type: PickType.ALL\n      };\n    } else if (picking === PickType.SINGLE) {\n      this.picking = {\n        currentPickMode: PickType.NONE,\n        type: PickType.SINGLE,\n        uidToInstance: new Map<number, T>()\n      };\n    } else {\n      this.picking = {\n        currentPickMode: PickType.NONE,\n        type: PickType.NONE\n      };\n    }\n  }\n\n  /**\n   * Invalidate and free all resources assocated with this layer.\n   */\n  destroy() {\n    if (this.bufferManager) {\n      if (this.bufferManager.scene) this.bufferManager.scene.removeLayer(this);\n      this.bufferManager.removeFromScene();\n      this.bufferManager.destroy();\n    }\n  }\n\n  didUpdateProps() {\n    /** LIFECYCLE */\n  }\n\n  /**\n   * This is where global uniforms should update their values. Executes every frame.\n   */\n  draw() {\n    let uniform: IUniformInternal;\n    let value: UniformIOValue;\n\n    // Consume the diffs for the instances to update each element\n    const changeList = this.props.data.changeList;\n    // Make some holder variables to prevent declaration within the loop\n    let change, instance, bufferLocations;\n    // Fast ref to the processor and manager\n    const diffManager = this.diffManager;\n    const processing = diffManager.processing;\n    const processor = diffManager.processor;\n\n    // Forewarn the processor how many instances are flagged for a change.\n    processor.incomingChangeList(changeList);\n\n    for (let i = 0, end = changeList.length; i < end; ++i) {\n      change = changeList[i];\n      instance = change[0];\n      bufferLocations = this.bufferManager.getBufferLocations(instance);\n      // The diff type is change[1] which we use to find the diff processing method to use\n      processing[change[1]](\n        processor,\n        instance,\n        Object.values(change[2]),\n        bufferLocations\n      );\n      // Clear the changes for the instance\n      instance.changes = {};\n    }\n\n    // Tell the diff processor that it has completed it's task set\n    processor.commit();\n    // Indicate the diffs are consumed\n    this.props.data.resolve();\n\n    // Loop through the uniforms that are across all instances\n    for (let i = 0, end = this.uniforms.length; i < end; ++i) {\n      uniform = this.uniforms[i];\n      value = uniform.update(uniform);\n      uniform.materialUniforms.forEach(\n        materialUniform => (materialUniform.value = value)\n      );\n    }\n  }\n\n  /**\n   * This method is for layers to implement to specify how the bounds for an instance are retrieved or\n   * calculated and how the Instance interacts with a point. This is REQUIRED to support PickType.ALL on the layer.\n   */\n  getInstancePickingMethods(): IPickingMethods<T> {\n    throw new Error(\n      \"When picking is set to PickType.ALL, the layer MUST have this method implemented; otherwise, the layer is incompatible with this picking mode.\"\n    );\n  }\n\n  /**\n   * The type of Three model as well as the preferred draw mode associated with it.\n   */\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TrianglesDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  /**\n   * The options for a three material without uniforms.\n   */\n  getMaterialOptions(): IMaterialOptions {\n    return {};\n  }\n\n  /**\n   * This sets up all of the data bindings that will transport data from the CPU\n   * to the Shader on the GPU.\n   *\n   * Instance Attributes: These are very frequently changing attributes\n   * Vertex Attributes: These are attributes that should be static on a vertex. Conisder it very costly to update.\n   *                    The only time making these modifieable is in the event of GL_POINTS.\n   * Uniforms: These set up the uniforms for the layer, thus having all normal implications of a uniform. Global\n   *           across the fragment and vertex shaders and can be modified with little consequence.\n   */\n  initShader(): IShaderInitialization<T> {\n    return {\n      fs: require(\"../shaders/base/no-op.fs\"),\n      instanceAttributes: [],\n      uniforms: [],\n      vertexAttributes: [],\n      vertexCount: 0,\n      vs: require(\"../shaders/base/no-op.vs\")\n    };\n  }\n\n  /**\n   * Helper method for making an instance attribute. Depending on set up, this makes creating elements\n   * have better documentation when typing out the elements.\n   */\n  makeInstanceAttribute(\n    block: number,\n    blockIndex: InstanceBlockIndex,\n    name: string,\n    size: InstanceAttributeSize,\n    update: (o: T) => InstanceIOValue,\n    atlas?: {\n      key: string;\n      name: string;\n      shaderInjection?: ShaderInjectionTarget;\n    }\n  ): IInstanceAttribute<T> {\n    return {\n      atlas,\n      block,\n      blockIndex,\n      name,\n      size,\n      update\n    };\n  }\n\n  /**\n   * Helper method for making a uniform type. Depending on set up, this makes creating elements\n   * have better documentation when typing out the elements.\n   */\n  makeUniform(\n    name: string,\n    size: UniformSize,\n    update: (o: IUniform) => UniformIOValue,\n    shaderInjection?: ShaderInjectionTarget,\n    qualifier?: string\n  ): IUniform {\n    return {\n      name,\n      qualifier,\n      shaderInjection,\n      size,\n      update\n    };\n  }\n\n  /**\n   * Applies a buffer manager to the layer which handles instance changes and applies those changes\n   * to an appropriate buffer at the appropriate location.\n   */\n  setBufferManager(bufferManager: BufferManagerBase<T, IBufferLocation>) {\n    if (!this._bufferManager) {\n      this._bufferManager = bufferManager;\n      this.diffManager = new InstanceDiffManager<T>(this, bufferManager);\n      this.diffManager.makeProcessor();\n      this.interactions = new LayerInteractionHandler(this);\n    } else {\n      console.warn(\n        \"You can not change a layer's buffer strategy once it has been instantiated.\"\n      );\n    }\n  }\n\n  /**\n   * Only allows the buffer type to be set once\n   */\n  setBufferType(val: LayerBufferType) {\n    if (this._bufferType === undefined) {\n      this._bufferType = val;\n    } else {\n      console.warn(\n        \"You can not change a layers buffer strategy once it has been instantiated.\"\n      );\n    }\n  }\n\n  willUpdateInstances(_changes: [T, InstanceDiffType]) {\n    // HOOK: Simple hook so a class can review all of it's changed instances before\n    //       Getting applied to the Shader IO\n  }\n\n  willUpdateProps(_newProps: ILayerProps<T>) {\n    /** LIFECYCLE */\n  }\n\n  didUpdate() {\n    this.props.data.resolve();\n  }\n}\n","export enum AnchorType {\n  BottomLeft,\n  BottomMiddle,\n  BottomRight,\n  Custom,\n  Middle,\n  MiddleLeft,\n  MiddleRight,\n  TopLeft,\n  TopMiddle,\n  TopRight\n}\n\nexport type Anchor = {\n  /** When the anchor gets calculated on the image, this allows the anchor to go beyond the borders of the image by this amount */\n  padding: number;\n  /** This is the location of the anchor. If a custom anchor is specified, then the x and y are not automatically populated */\n  type: AnchorType;\n  /** This is populated with the anchor's location relative to the image's surface */\n  x?: number;\n  /** This is populated with the anchor's location relative to the image's surface */\n  y?: number;\n};\n\nexport enum ScaleType {\n  /** The size of the image will be tied to world space */\n  ALWAYS = 1,\n  /** The image will scale to it's font size then stop growing */\n  BOUND_MAX = 2,\n  /** The image will alwyas retain it's font size on screen */\n  NEVER = 3\n}\n","export * from \"./bounds\";\nexport * from \"./circle\";\nexport * from \"./point\";\nexport * from \"./scale\";\nexport * from \"./size\";\n","import { Instance } from \"../../instance-provider/instance\";\nimport {\n  IInstanceAttribute,\n  instanceAttributeSizeFloatCount,\n  IVertexAttribute\n} from \"../../types\";\nimport { WebGLStat } from \"../../util\";\nimport {\n  InstanceAttributeBufferManager,\n  UniformBufferManager\n} from \"../buffer-management\";\nimport { Layer } from \"../layer\";\nimport { Scene } from \"../scene\";\n\nexport enum LayerBufferType {\n  // This is a compatibility mode for instance attributes. This is used when:\n  // 1. It would perform better\n  // 2. When instance attributes are not available for the gl context (ANGLE draw instanced arrays)\n  // 3. When the instance attributes + vertex attributes exceeds the max Vertex Attributes for the hardware\n  UNIFORM,\n  // This is a fast and zippy buffering strategy used when the hardware supports it for a provided layer!\n  INSTANCE_ATTRIBUTE\n}\n\n/**\n * This analyzes a layer and determines if it should use a compatibility instancing mode or use hardware\n * instancing.\n */\nexport function getLayerBufferType<T extends Instance>(\n  _gl: WebGLRenderingContext,\n  layer: Layer<T, any>,\n  vertexAttributes: IVertexAttribute[],\n  instanceAttributes: IInstanceAttribute<T>[]\n) {\n  let type;\n\n  // The layer only gets it's buffer type calculated once\n  if (layer.bufferType !== undefined) {\n    return layer.bufferType;\n  }\n\n  // Uncomment this to force the uniform buffer strategy\n  // layer.setBufferType(LayerBufferType.UNIFORM);\n  // return LayerBufferType.UNIFORM;\n\n  if (WebGLStat.HARDWARE_INSTANCING) {\n    let attributesUsed = 0;\n\n    for (let i = 0, end = vertexAttributes.length; i < end; ++i) {\n      const attribute = vertexAttributes[i];\n      attributesUsed += Math.ceil(attribute.size / 4);\n    }\n\n    for (let i = 0, end = instanceAttributes.length; i < end; ++i) {\n      const attribute = instanceAttributes[i];\n      attributesUsed += Math.ceil(\n        instanceAttributeSizeFloatCount[attribute.size || 1] / 4\n      );\n    }\n\n    // Too many attributes. We must use the uniform compatibility mode\n    if (attributesUsed > WebGLStat.MAX_VERTEX_ATTRIBUTES) {\n      type = LayerBufferType.UNIFORM;\n    }\n\n    // If we make it here, we are good to go using hardware instancing! Hooray performance!\n    else {\n      type = LayerBufferType.INSTANCE_ATTRIBUTE;\n    }\n  }\n\n  // No other faster mode supported: use uniform instancing\n  if (!type) type = LayerBufferType.UNIFORM;\n  // Apply the type to the layer\n  layer.setBufferType(type);\n\n  return type;\n}\n\n/**\n * Builds the proper buffer manager for the provided layer\n */\nexport function makeLayerBufferManager<T extends Instance>(\n  gl: WebGLRenderingContext,\n  layer: Layer<T, any>,\n  scene: Scene\n) {\n  // Esnure the buffering type has been calculated for the layer\n  const type = getLayerBufferType(\n    gl,\n    layer,\n    layer.vertexAttributes,\n    layer.instanceAttributes\n  );\n\n  switch (type) {\n    // This is the Instance Attribute buffering strategy, which means the system\n    case LayerBufferType.INSTANCE_ATTRIBUTE: {\n      layer.setBufferManager(new InstanceAttributeBufferManager(layer, scene));\n      break;\n    }\n\n    // Anything not utiliziing a specialized buffering strategy will use the uniform compatibility mode\n    default: {\n      layer.setBufferManager(new UniformBufferManager(layer, scene));\n      break;\n    }\n  }\n}\n","export * from \"./atlas\";\nexport * from \"./atlas-manager\";\nexport * from \"./color-atlas-resource\";\nexport * from \"./color-rasterizer\";\nexport * from \"./image-atlas-resource\";\nexport * from \"./image-rasterizer\";\nexport * from \"./label-atlas-resource\";\nexport * from \"./label-rasterizer\";\n","import * as Three from \"three\";\nimport { IModelConstructable, Layer } from \"../layer\";\n\nfunction isMesh(val: any): val is Three.Mesh {\n  return Boolean(val.isMesh);\n}\n\nexport function generateLayerModel(\n  layer: Layer<any, any>,\n  geometry: Three.BufferGeometry,\n  material: Three.ShaderMaterial\n): IModelConstructable & Three.Object3D {\n  const modelInfo = layer.getModelType();\n  const model = new modelInfo.modelType(geometry, material);\n\n  if (isMesh(model)) {\n    model.drawMode =\n      modelInfo.drawMode === undefined\n        ? Three.TriangleStripDrawMode\n        : modelInfo.drawMode;\n  }\n\n  return model;\n}\n","export interface IdentifyByKeyOptions {\n  /** The identifier of the object */\n  key: string;\n}\n\n/**\n * This is an object that specifically is generated with a 'key' option that can never\n * be modified on the object and is identified henceforth with the key applied as the\n * 'id' of the object.\n */\nexport class IdentifyByKey {\n  /** Internal key held by the object */\n  private key: string;\n\n  /** READONLY id of the object. */\n  get id() {\n    return this.key;\n  }\n\n  constructor(options: IdentifyByKeyOptions) {\n    this.key = options.key;\n  }\n}\n","export const templateVars = {\n  attributeFragments: \"attributeFragments\",\n  attributes: \"attributes\",\n  blocksPerInstance: \"blocksPerInstance\",\n  easingMethod: \"easingMethod\",\n  easingMethods: \"easingMethods\",\n  extend: \"extend\",\n  extendHeader: \"extendHeader\",\n  instanceBlockCount: \"instanceBlockCount\",\n  instanceDataBinaryTree: \"instanceDataBinaryTree\",\n  instanceDataRetrieval: \"instanceDataRetrieval\",\n  instanceDestructuring: \"instanceDestructuring\",\n  instanceFragments: \"instanceFragments\",\n  instanceUniformDeclarations: \"instanceUniformDeclarations\",\n  layerUniforms: \"layerUniforms\",\n  picking: \"picking\",\n  projectionMethods: \"projectionMethods\",\n  shader: \"shader\",\n  shaderInput: \"shaderInput\",\n  T: \"T\",\n  vertexAttributes: \"vertexAttributes\"\n};\n","export interface IShaderTemplateResults {\n  /** This is the resulting shader string generated from the templating */\n  shader: string;\n  /** This is the template options provided by the shader. {option: num occurrences} */\n  shaderProvidedOptions: Map<string, number>;\n  /**\n   * This is the template options provided by the shader that were not resolved by the options parameter\n   * {option: num occurrences}\n   */\n  unresolvedShaderOptions: Map<string, number>;\n  /** This is the options provided to the template that did not get resolved by the shader {option: 1} */\n  unresolvedProvidedOptions: Map<string, number>;\n  /** This is the list of options that DID get resolved by the options provided {option: num occurrences} */\n  resolvedShaderOptions: Map<string, number>;\n}\n\nexport interface IShaderTemplateRequirements {\n  /** A string identifier to make it easier to identify which shader template failed requirements */\n  name: string;\n  /** The options that must be present within both provided options AND within the template */\n  values: string[];\n}\n\nexport interface IShaderTemplateOptions {\n  /** Callback for 'required' errors being emitted */\n  onError?(msg: string): void;\n  /** Callback that allows overrides for token replacement. Provides the token found and the suggested replacement for it */\n  onToken?(token: string, replace: string): string;\n  /** This is a key value pair the template uses to match tokens found to replacement values */\n  options: { [key: string]: string };\n  /** This is used to indicate which tokens are required both within the shader AND within the 'options' */\n  required?: IShaderTemplateRequirements;\n  /** THis is the shader written with templating information */\n  shader: string;\n}\n\n/**\n * This is a method that aids in making shaders a bit more dynamic with simple string replacement based on tokens written\n * into the shader. Tokens in the shader will appear as ${token} and will either be ignored by this method and thus removed\n * or will be replaced with a provided value.\n *\n * This method will give feedback on the replacements taking place and simplify the process of detecting errors within the process.\n */\nexport function shaderTemplate(\n  templateOptions: IShaderTemplateOptions\n): IShaderTemplateResults {\n  const { shader, options, required, onError, onToken } = templateOptions;\n  const matched = new Map<string, number>();\n  const noValueProvided = new Map<string, number>();\n  const notFound = new Map<string, number>();\n  const shaderOptions = new Map<string, number>();\n\n  const shaderResults = shader.replace(\n    /\\$\\{(\\w+)\\}/g,\n    (_x: string, match: string) => {\n      let replace = \"\";\n      shaderOptions.set(match, (shaderOptions.get(match) || 0) + 1);\n\n      if (match in options) {\n        matched.set(match, (matched.get(match) || 0) + 1);\n        replace = options[match];\n      } else {\n        noValueProvided.set(match, (noValueProvided.get(match) || 0) + 1);\n      }\n\n      if (onToken) {\n        replace = onToken(match, replace);\n      }\n\n      return replace;\n    }\n  );\n\n  Object.keys(options).forEach(option => {\n    if (!matched.get(option)) {\n      notFound.set(option, (notFound.get(option) || 0) + 1);\n    }\n  });\n\n  // Provide metrics\n  const results = {\n    resolvedShaderOptions: matched,\n    shader: shaderResults,\n    shaderProvidedOptions: shaderOptions,\n    unresolvedProvidedOptions: notFound,\n    unresolvedShaderOptions: noValueProvided\n  };\n\n  if (required) {\n    // This will ensure that BOTH the parameter input AND the shader provided the required options.\n    required.values.forEach(require => {\n      if (results.unresolvedProvidedOptions.get(require)) {\n        const msg = `${\n          required.name\n        }: Could not resolve all the required inputs. Input: ${require}`;\n        if (onError) onError(msg);\n        else console.error(msg);\n      } else if (results.unresolvedShaderOptions.get(require)) {\n        const msg = `${\n          required.name\n        }: A required option was not provided in the options parameter. Option: ${require}`;\n        if (onError) onError(msg);\n        else console.error(msg);\n      } else if (!results.resolvedShaderOptions.get(require)) {\n        const msg = `${\n          required.name\n        }: A required option was not provided in the options parameter. Option: ${require}`;\n        if (onError) onError(msg);\n        else console.error(msg);\n      }\n    });\n  }\n\n  return results;\n}\n","import { uid } from \"../util/uid\";\nimport { Instance } from \"./instance\";\n\nexport class ObservableMonitoring {\n  static gatherIds: boolean = false;\n  static observableIds: number[] = [];\n  static observableNamesToUID = new Map<string, number>();\n\n  /**\n   * This activates all observables to gather their UIDs when they are retrieved via their getter.\n   * All of the ID's gathered can be accessed via getObservableMonitorIds. It is REQUIRED that this\n   * is disabled again to prevent a MASSIVE memory leak.\n   */\n  static setObservableMonitor(enabled: boolean) {\n    ObservableMonitoring.gatherIds = enabled;\n    ObservableMonitoring.observableIds = [];\n  }\n\n  /**\n   * This retrieves the observables montiored IDs that were gathered when setObservableMonitor was\n   * enabled.\n   */\n  static getObservableMonitorIds(clear?: boolean) {\n    const values = ObservableMonitoring.observableIds.slice(0);\n    if (clear) ObservableMonitoring.observableIds = [];\n\n    return values;\n  }\n}\n\n/**\n * This is a custom decorator intended for single properties on Instances only! It will\n * facilitate automatic updates and stream the updates through an InstanceProvider to properly\n * update the Instances values in the appropriate and corresponding buffers that will get committed\n * to the GPU.\n */\nexport function observable<T extends Instance>(target: T, key: string) {\n  // Here we store the name of the observable to a UID. This mapping allows us to have a UID\n  // per NAME of an observable. A UID for a name can produce MUCH faster lookups than the name itself.\n  // Matching against the name allows us to have instances with their own property sets but have matching\n  // name mappings to improve compatibility of Instances with varying Layers.\n  let propertyUID: number =\n    ObservableMonitoring.observableNamesToUID.get(key) || 0;\n\n  if (!propertyUID) {\n    propertyUID = uid();\n    ObservableMonitoring.observableNamesToUID.set(key, propertyUID);\n  }\n\n  /**\n   * New property getter to get the property's alternative storage since we overrode\n   * the initial storage with a custom getter and setter.\n   */\n  function getter(this: T) {\n    if (ObservableMonitoring.gatherIds) {\n      ObservableMonitoring.observableIds.push(propertyUID);\n    }\n    return this.observableStorage[propertyUID];\n  }\n\n  /**\n   * New property setter to replace the property marked as observable. This allows\n   * us to broadcast a change to our current observer.\n   */\n  function setter(this: T, newVal: any) {\n    // Update the privatized value\n    this.observableStorage[propertyUID] = newVal;\n    // Broadcast change\n    this.changes[propertyUID] = propertyUID;\n    this.observer && this.observer.instanceUpdated(this);\n  }\n\n  /**\n   * Make sure the desired property is declared on the class with our custom getter and\n   * setter.\n   */\n  Object.defineProperty(target, key, {\n    configurable: true,\n    enumerable: true,\n    get: getter,\n    set: setter\n  });\n}\n","import * as Three from \"three\";\nimport {\n  AbsolutePosition,\n  getAbsolutePositionBounds\n} from \"../primitives/absolute-position\";\nimport { Bounds } from \"../primitives/bounds\";\nimport { IPoint } from \"../primitives/point\";\nimport { Color } from \"../types\";\nimport { ChartCamera } from \"../util/chart-camera\";\nimport { DataBounds } from \"../util/data-bounds\";\nimport { IdentifyByKey, IdentifyByKeyOptions } from \"../util/identify-by-key\";\nimport { ViewCamera, ViewCameraType } from \"../util/view-camera\";\n\nexport enum ClearFlags {\n  COLOR = 0b0001,\n  DEPTH = 0b0010,\n  STENCIL = 0b0100\n}\n\n/**\n * Defines the input metrics of a view for a scene.\n */\nexport interface IViewOptions extends IdentifyByKeyOptions {\n  /**\n   * The background color that gets cleared out for this view. Performance is\n   * better if this is left clear. Probably better to draw a colored quad instead.\n   * This is just convenient.\n   */\n  background?: Color;\n  /**\n   * This is the spatial charting camera that is concerned with offsets and scales.\n   * It is often easier to work with camera positioning and settings rather than working\n   * with the complex and nuanced viewCamera which works with special transformation matrices\n   * to express orientation.\n   *\n   * If not provided, then this camera will use a default ChartCamera for this camera slot. This\n   * will also cause a normal camera handler to be utilized.\n   */\n  camera?: ChartCamera;\n  /**\n   * This sets what buffers get cleared by webgl before the view is drawn in it's space.\n   */\n  clearFlags?: ClearFlags[];\n  /**\n   * If this is provided, the layer can be rendered with a traditional camera that utilizes\n   * matrix transforms to provide orientation/projection for the view.\n   *\n   * If this is NOT provided, the camera will be a special orthographic camera for 2d spaces\n   * with a y-axis of +y points down with (0, 0) at the top left of the viewport.\n   */\n  viewCamera?: ViewCamera;\n  /**\n   * This specifies the bounds on the canvas this camera will render to. This let's you render\n   * say a little square in the bottom right showing a minimap.\n   *\n   * If this is not specified, the entire canvas will be the viewport.\n   */\n  viewport?: AbsolutePosition;\n}\n\nfunction isOrthographic(val: Three.Camera): val is Three.OrthographicCamera {\n  return \"left\" in val;\n}\n\n/**\n * This defines a view of a scene\n */\nexport class View extends IdentifyByKey {\n  static DEFAULT_VIEW_ID = \"__default__\";\n\n  /** If present, is the cleared color before this view renders */\n  background: Color;\n  /** Camera that defines the individual components of each axis with simpler concepts */\n  camera: ChartCamera;\n  /** These are the clear flags set for this view */\n  clearFlags: ClearFlags[];\n  /**\n   * This is the depth of the view. The higher the depth represents which layer is on top.\n   * Zero always represents the default view.\n   */\n  depth: number = 0;\n  /** This is set to ensure the projections that happen properly translates the pixel ratio to normal Web coordinates */\n  pixelRatio: number = window.devicePixelRatio;\n  /** This is the rendering bounds within screen space */\n  screenBounds: Bounds;\n  /** Camera that defines the view projection matrix */\n  viewCamera: ViewCamera;\n  /** The size positioning of the view */\n  viewport: AbsolutePosition;\n  /** The bounds of the render space on the canvas this view will render on */\n  viewBounds: DataBounds<View>;\n\n  constructor(options: IViewOptions) {\n    super(options);\n    Object.assign(this, options);\n  }\n\n  screenToPixelSpace(point: IPoint, out?: IPoint) {\n    const p = out || { x: 0, y: 0 };\n\n    p.x = point.x * this.pixelRatio;\n    p.y = point.y * this.pixelRatio;\n\n    return p;\n  }\n\n  pixelSpaceToScreen(point: IPoint, out?: IPoint) {\n    const p = out || { x: 0, y: 0 };\n\n    p.x = point.x / this.pixelRatio;\n    p.y = point.y / this.pixelRatio;\n\n    return p;\n  }\n\n  screenToView(point: IPoint, out?: IPoint) {\n    const p = this.screenToPixelSpace(point, out);\n\n    p.x = p.x - this.viewBounds.x;\n    p.y = p.y - this.viewBounds.y;\n\n    return p;\n  }\n\n  viewToScreen(point: IPoint, out?: IPoint) {\n    const p = { x: 0, y: 0 };\n\n    p.x = point.x + this.viewBounds.x;\n    p.y = point.y + this.viewBounds.y;\n\n    return this.pixelSpaceToScreen(p, out);\n  }\n\n  screenToWorld(point: IPoint, out?: IPoint) {\n    const view = this.pixelSpaceToScreen(this.screenToView(point));\n\n    const world = out || { x: 0, y: 0 };\n    world.x =\n      (view.x - this.camera.offset[0] * this.camera.scale[0]) /\n      this.camera.scale[0];\n    world.y =\n      (view.y - this.camera.offset[1] * this.camera.scale[1]) /\n      this.camera.scale[1];\n\n    // If this is a custom camera, we must actually project our world point to the screen\n    if (this.viewCamera.type === ViewCameraType.CUSTOM) {\n      console.warn(\"Custom View Camera projections not supported yet\");\n    }\n\n    return world;\n  }\n\n  worldToScreen(point: IPoint, out?: IPoint) {\n    const screen = { x: 0, y: 0 };\n\n    // Calculate from the camera to view space\n    screen.x =\n      (point.x * this.camera.scale[0] +\n        this.camera.offset[0] * this.camera.scale[0]) *\n      this.pixelRatio;\n    screen.y =\n      (point.y * this.camera.scale[1] +\n        this.camera.offset[1] * this.camera.scale[1]) *\n      this.pixelRatio;\n\n    // If this is a custom camera, we must actually project our world point to the screen\n    if (this.viewCamera.type === ViewCameraType.CUSTOM) {\n      console.warn(\"Custom View Camera projections not supported yet\");\n    }\n\n    // Convert from view to screen space\n    return this.viewToScreen(screen, out);\n  }\n\n  viewToWorld(point: IPoint, out?: IPoint) {\n    const world = out || { x: 0, y: 0 };\n\n    const screen = this.pixelSpaceToScreen(point);\n    world.x =\n      (screen.x - this.camera.offset[0] * this.camera.scale[0]) /\n      this.camera.scale[0];\n    world.y =\n      (screen.y - this.camera.offset[1] * this.camera.scale[1]) /\n      this.camera.scale[1];\n\n    // If this is a custom camera, we must actually project our world point to the screen\n    if (this.viewCamera.type === ViewCameraType.CUSTOM) {\n      console.warn(\"Custom View Camera projections not supported yet\");\n    }\n\n    return world;\n  }\n\n  worldToView(point: IPoint, out?: IPoint) {\n    const screen = out || { x: 0, y: 0 };\n\n    // Calculate from the camera to view space\n    screen.x =\n      point.x * this.camera.scale[0] +\n      this.camera.offset[0] * this.camera.scale[0];\n    screen.y =\n      point.y * this.camera.scale[1] +\n      this.camera.offset[1] * this.camera.scale[1];\n\n    // If this is a custom camera, we must actually project our world point to the screen\n    if (this.viewCamera.type === ViewCameraType.CUSTOM) {\n      console.warn(\"Custom View Camera projections not supported yet\");\n    }\n\n    return screen;\n  }\n\n  /**\n   * This operation makes sure we have the view camera adjusted to the new viewport's needs.\n   * For default behavior this ensures that the coordinate system has no distortion, orthographic,\n   * top left as 0,0 with +y axis pointing down.\n   */\n  fitViewtoViewport(surfaceDimensions: Bounds) {\n    if (\n      this.viewCamera.type === ViewCameraType.CONTROLLED &&\n      isOrthographic(this.viewCamera.baseCamera)\n    ) {\n      const viewBounds = getAbsolutePositionBounds<View>(\n        this.viewport,\n        surfaceDimensions,\n        this.pixelRatio\n      );\n      const width = viewBounds.width;\n      const height = viewBounds.height;\n\n      const viewport = {\n        bottom: -height / 2,\n        far: 10000000,\n        left: -width / 2,\n        near: -100,\n        right: width / 2,\n        top: height / 2\n      };\n\n      const scaleX = 1;\n      const scaleY = 1;\n      const camera = this.viewCamera.baseCamera;\n\n      Object.assign(camera, viewport);\n      camera.position.set(\n        -viewBounds.width / 2.0 * scaleX,\n        viewBounds.height / 2.0 * scaleY,\n        camera.position.z\n      );\n      camera.scale.set(scaleX, -scaleY, 1.0);\n      camera.updateMatrix();\n      camera.updateMatrixWorld(true);\n      camera.updateProjectionMatrix();\n\n      this.viewBounds = viewBounds;\n      this.viewBounds.data = this;\n      this.screenBounds = new Bounds({\n        height: this.viewBounds.height / this.pixelRatio,\n        width: this.viewBounds.width / this.pixelRatio,\n        x: this.viewBounds.x / this.pixelRatio,\n        y: this.viewBounds.y / this.pixelRatio\n      });\n    } else if (!isOrthographic(this.viewCamera.baseCamera)) {\n      console.warn(\n        \"Fit to viewport does not support non-orthographic cameras as a default behavior.\"\n      );\n    }\n  }\n}\n","import * as Three from \"three\";\nimport { Instance } from \"../instance-provider/instance\";\nimport { ILayerProps, Layer } from \"../surface/layer\";\nimport { IdentifyByKey, IdentifyByKeyOptions } from \"../util/identify-by-key\";\nimport { IViewOptions, View } from \"./view\";\n\n/**\n * Defines the input for an available scene layers can add themselves to. Each scene can be rendered with multiple\n * views.\n */\nexport interface ISceneOptions extends IdentifyByKeyOptions {\n  /**\n   * This indicates all of the views this scene can be rendered with. For instance: You have a\n   * world scene and you want to render it stereoscopically for VR. Then you can specify two\n   * views with two viewports to render the scene on both halves of the canvas.\n   *\n   * Or perhaps you want an aerial shot as a minimap in the bottom right corner while the rest\n   * of the canvas renders a first person view, then you would make two views for that as well.\n   */\n  views: IViewOptions[];\n}\n\nfunction sortByDepth(a: Layer<any, any>, b: Layer<any, any>) {\n  return a.depth - b.depth;\n}\n\n/**\n * This defines a scene to which layers are added to. It also tracks the views that this scene\n * is rendered with.\n */\nexport class Scene extends IdentifyByKey {\n  static DEFAULT_SCENE_ID = \"__default__\";\n\n  /** This is the three scene which actually sets up the rendering objects */\n  container: Three.Scene | undefined = new Three.Scene();\n  // TODO: This 'could' be smarter when Three is gone. The pipeline could IMMEDIATELY render\n  /** We make a picking container specifically for the cases where objects must be rendered for picking */\n  pickingContainer: Three.Scene = new Three.Scene();\n  /** This is all of the layers tracked to the scene */\n  layers: Layer<any, any>[] = [];\n  /** This indicates the sort is dirty for a set of layers */\n  sortIsDirty = false;\n  /** This is the view */\n  viewById = new Map<string, View>();\n\n  constructor(options: ISceneOptions) {\n    super(options);\n\n    if (this.container) {\n      this.container.frustumCulled = false;\n      this.container.autoUpdate = false;\n    }\n  }\n\n  /**\n   * Adds a layer to the scene with the current view setting the layer contains.\n   * The layer can not jump between views or scenes. You must destroy and reconstruct\n   * the layer.\n   */\n  addLayer<T extends Instance, U extends ILayerProps<T>>(layer: Layer<T, U>) {\n    // Add the layer to the list of layers under the view\n    this.layers.push(layer);\n    this.sortIsDirty = true;\n  }\n\n  /**\n   * This adds a view to this scene to be used by the scene\n   */\n  addView(view: View) {\n    this.viewById.set(view.id, view);\n  }\n\n  /**\n   * Release any resources this may be hanging onto\n   */\n  destroy() {\n    delete this.container;\n  }\n\n  /**\n   * Removes a layer from the scene. No resort is needed as remove operations\n   * do not adjust the sorting order.\n   */\n  removeLayer(layer: Layer<any, any>) {\n    if (this.layers) {\n      const index = this.layers.indexOf(layer);\n\n      if (index >= 0) {\n        this.layers.splice(index, 1);\n        return;\n      }\n    }\n\n    console.warn(\n      \"Could not remove a layer from the scene as the layer was not a part of the scene to start. Scene:\",\n      this.id,\n      \"Layer:\",\n      layer.id\n    );\n  }\n\n  sortLayers() {\n    if (this.sortIsDirty) {\n      this.layers.sort(sortByDepth);\n    }\n  }\n}\n","import { Label } from \"../../primitives/label\";\nimport { BaseAtlasResource } from \"./base-atlas-resource\";\n\nexport class LabelAtlasResource extends BaseAtlasResource {\n  /** This is the label to be loaded into the atlas */\n  label: Label;\n  /** If the label renders */\n  truncatedText: string;\n\n  constructor(label: Label) {\n    super();\n    this.label = label;\n  }\n}\n","import { SubTexture } from \"./sub-texture\";\n\nexport class BaseAtlasResource {\n  /** The rasterization metrics of the label */\n  rasterization: {\n    /**\n     * WARNING: This will ONLY SOMETIMES be populated. The system can choose\n     * when to consume this as it chooses as it can be a major memory eater if\n     * permanently left in place. DO NOT RELY on this being available.\n     */\n    canvas?: HTMLCanvasElement;\n    image?: HTMLImageElement;\n    /** The rasterization dimensions as it is rendered to texture space on an atlas */\n    texture: {\n      height: number;\n      width: number;\n    };\n    /** The rasterization dimensions as it would be rendered in world space */\n    world: {\n      height: number;\n      width: number;\n    };\n  };\n  /**\n   * This sets the ratserization to be a larger value on the texture than is rendered within\n   * the world space. This allows for techniques to be applied in the shaders to incorporate super sampling\n   * or other processes which require higher levels of resolution.\n   *\n   * The default is 1 for a 1 to 1 sample scaling to world space rendering\n   */\n  sampleScale: number = 1;\n  /** Once loaded into the texture, this will be populated */\n  texture: SubTexture;\n}\n","export enum EdgeScaleType {\n  /** All dimensions are within world space */\n  NONE,\n  /**\n   * The control points are a delta from the end points within screen space, and the line thickness is within\n   * screen space as well all measured in pixels. The scaleFactor scales both thickness and control delta values.\n   * The endpoints remain in world space\n   */\n  SCREEN_CURVE\n}\n\nexport enum EdgeType {\n  /** Makes a straight edge with no curve */\n  LINE,\n  /** Makes a single control point Bezier curve */\n  BEZIER,\n  /** Makes a two control point bezier curve */\n  BEZIER2\n}\n\n/**\n * This is the broadphase control for edges to help handle quad tree adjustments for picking. If the edge scale type\n * is NONE, you don't need to utilize this. If you use screen space and have camera distortions along an axis, this\n * can help greatly.\n */\nexport enum EdgeBroadphase {\n  /** Use this if the broad phase detection should use both width and height of the edge's bounds */\n  ALL,\n  /** Use this to ensure a test against the edge is performed if the mouse aligns with it on the x-axis */\n  PASS_Y,\n  /** Use this to ensure a test against the edge is performed if the mouse aligns with it on the y axis */\n  PASS_X\n}\n","import * as Three from \"three\";\nimport { Instance, InstanceDiff } from \"../../../instance-provider\";\nimport { isBufferLocation } from \"../buffer-manager-base\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\nimport { IUniformBufferLocation } from \"../uniform-buffer-manager\";\nimport { BaseDiffProcessor } from \"./base-diff-processor\";\n\n// This is a mapping of the vector properties as they relate to an array order\nconst VECTOR_ACCESSORS: (keyof Three.Vector4)[] = [\"x\", \"y\", \"z\", \"w\"];\nconst EMPTY: number[] = [];\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class UniformDiffProcessor<T extends Instance> extends BaseDiffProcessor<\n  T\n> {\n  /**\n   * This processes add operations from changes in the instancing data\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (uniformCluster) {\n      manager.changeInstance(manager, instance, EMPTY, uniformCluster);\n    }\n\n    // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n    else {\n      const uniforms = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocation(uniforms)) {\n        instance.active = true;\n        instance.easingId = this.layer.easingId;\n        manager.updateInstance(manager.layer, instance, uniforms);\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the uniforms\n    if (uniformCluster) {\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n    }\n\n    // If we don't have existing uniforms, then we must remove the instance\n    else {\n      manager.addInstance(manager, instance, EMPTY, uniformCluster);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation\n  ) {\n    if (uniformCluster) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // Remove the easing information the instance gained from being apart of the layer\n      instance.clearEasing();\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n    }\n  }\n\n  /**\n   * This performs the actual updating of buffers the instance needs to update\n   */\n  updateInstance(\n    layer: IInstanceDiffManagerTarget<T>,\n    instance: T,\n    uniformCluster: IUniformBufferLocation\n  ) {\n    if (instance.active) {\n      const uniforms = uniformCluster.buffer;\n      const uniformRangeStart = uniformCluster.range[0];\n      const instanceData: Three.Vector4[] = uniforms.value;\n      let instanceUniform, value, block, start;\n      let k, endk;\n\n      // Loop through the instance attributes and update the uniform cluster with the valaues\n      // Calculated for the instance\n      for (let i = 0, end = layer.instanceAttributes.length; i < end; ++i) {\n        instanceUniform = layer.instanceAttributes[i];\n        value = instanceUniform.update(instance);\n        block = instanceData[uniformRangeStart + (instanceUniform.block || 0)];\n        instanceUniform.atlas &&\n          layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n        start = instanceUniform.blockIndex;\n\n        if (start === undefined) {\n          continue;\n        }\n\n        // Hyper optimized vector filling routine. It uses properties that are globally scoped\n        // To greatly reduce overhead\n        for (k = start, endk = value.length + start; k < endk; ++k) {\n          block[VECTOR_ACCESSORS[k]] = value[k - start];\n        }\n      }\n\n      uniforms.value = instanceData;\n    } else {\n      const uniforms: Three.IUniform = uniformCluster.buffer;\n      const uniformRangeStart = uniformCluster.range[0];\n      const instanceData: Three.Vector4[] = uniforms.value;\n      let instanceUniform, value, block, start;\n\n      // Only update the _active attribute to ensure it is false. When it is false, there is no\n      // Point to updating any other uniform\n      instanceUniform = layer.activeAttribute;\n      value = instanceUniform.update(instance);\n      block = instanceData[uniformRangeStart + (instanceUniform.block || 0)];\n      instanceUniform.atlas &&\n        layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n      start = instanceUniform.blockIndex;\n\n      if (start !== undefined) {\n        // Hyper optimized vector filling routine. It uses properties that are globally scoped\n        // To greatly reduce overhead\n        for (let k = start, endk = value.length + start; k < endk; ++k) {\n          block[VECTOR_ACCESSORS[k]] = value[k - start];\n        }\n      }\n\n      uniforms.value = instanceData;\n    }\n  }\n\n  /**\n   * Right now there is no operations for committing for the uniform manager.\n   */\n  commit() {\n    /** no-op */\n  }\n\n  /**\n   * There are no optimizations available for this processor yet.\n   */\n  incomingChangeList(_changes: InstanceDiff<T>[]) {\n    /** no-op */\n  }\n}\n","import { Instance } from \"../../../instance-provider/instance\";\nimport { InstanceDiff } from \"../../../instance-provider/instance-provider\";\nimport { IInstanceAttributeInternal } from \"../../../types\";\nimport { Vec } from \"../../../util\";\nimport {\n  IBufferLocation,\n  IBufferLocationGroup,\n  isBufferLocationGroup\n} from \"../buffer-manager-base\";\nimport { IInstanceAttributeBufferLocationGroup } from \"../instance-attribute-buffer-manager\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\nimport { BaseDiffProcessor } from \"./base-diff-processor\";\n\nconst EMPTY: number[] = [];\nconst { min, max } = Math;\n\nenum DiffMode {\n  /** This mode will analyze incoming buffer location changes and only update the range of changed buffer */\n  PARTIAL,\n  /** This mode will not spend time figuring out what has changed for a buffer, rather the whole buffer will get an update */\n  FULL\n}\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class InstanceAttributeDiffProcessor<\n  T extends Instance\n> extends BaseDiffProcessor<T> {\n  /** This is the processor's current diff mode for consuming instance updates. */\n  private diffMode: DiffMode = DiffMode.PARTIAL;\n\n  /** This tracks a buffer attribute's uid to the range of data that it should update */\n  bufferAttributeUpdateRange: {\n    [key: number]: [IInstanceAttributeInternal<T>, number, number];\n  } = {};\n\n  /** This tracks a buffer attribute's uid that will perform a complete update */\n  bufferAttributeWillUpdate: {\n    [key: number]: IInstanceAttributeInternal<T>;\n  } = {};\n\n  /**\n   * The instance updating is a property instead of a method as we will want to be able to gear shift it for varying levels\n   * of adjustments.\n   */\n  updateInstance: (\n    layer: IInstanceDiffManagerTarget<T>,\n    instance: T,\n    propIds: number[],\n    bufferLocations: IBufferLocationGroup<IBufferLocation>\n  ) => void = this.updateInstancePartial;\n\n  /**\n   * This processes add operations from changes in the instancing data\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (bufferLocations) {\n      manager.changeInstance(manager, instance, EMPTY, bufferLocations);\n    }\n\n    // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n    else {\n      const newBufferLocations = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocationGroup(newBufferLocations)) {\n        instance.active = true;\n        instance.easingId = manager.layer.easingId;\n\n        manager.updateInstance(\n          manager.layer,\n          instance,\n          EMPTY,\n          newBufferLocations\n        );\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the bufferLocations\n    if (bufferLocations) {\n      manager.updateInstance(manager.layer, instance, propIds, bufferLocations);\n    }\n\n    // If we don't have existing bufferLocations, then we must remove the instance\n    else {\n      manager.addInstance(manager, instance, EMPTY, bufferLocations);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    if (bufferLocations) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // Remove the easing information the instance gained from being apart of the layer\n      instance.clearEasing();\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, EMPTY, bufferLocations);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n    }\n  }\n\n  /**\n   * This performs the actual updating of buffers the instance needs to update\n   */\n  updateInstancePartial(\n    layer: IInstanceDiffManagerTarget<T>,\n    instance: T,\n    propIds: number[],\n    bufferLocations: IBufferLocationGroup<IBufferLocation>\n  ) {\n    const propertyToLocation = bufferLocations.propertyToBufferLocation;\n    const bufferAttributeUpdateRange = this.bufferAttributeUpdateRange;\n    let location: IBufferLocation;\n    let updateValue: Vec;\n    let updateRange;\n    let childLocations: IBufferLocation[];\n    let attribute: IInstanceAttributeInternal<T>;\n\n    if (instance.active) {\n      // If no prop ids provided, then we perform a complete instance property update\n      if (propIds.length === 0) {\n        propIds = this.bufferManager.getUpdateAllPropertyIdList();\n      }\n\n      for (let i = 0, end = propIds.length; i < end; ++i) {\n        // First update for the instance attribute itself\n        location = propertyToLocation[propIds[i]];\n        attribute = location.attribute;\n        attribute.atlas && layer.resource.setTargetAtlas(attribute.atlas.key);\n        updateValue = attribute.update(instance);\n        location.buffer.value.set(updateValue, location.range[0]);\n        updateRange = bufferAttributeUpdateRange[attribute.uid] || [\n          null,\n          Number.MAX_SAFE_INTEGER,\n          Number.MIN_SAFE_INTEGER\n        ];\n        updateRange[0] = attribute;\n        updateRange[1] = min(location.range[0], updateRange[1]);\n        updateRange[2] = max(location.range[1], updateRange[2]);\n        bufferAttributeUpdateRange[attribute.uid] = updateRange;\n\n        // Now update any child attributes that would need updating based on the parent attribute changing\n        if (location.childLocations) {\n          childLocations = location.childLocations;\n\n          for (let k = 0, endk = childLocations.length; k < endk; ++k) {\n            location = childLocations[k];\n            updateValue = location.attribute.update(instance);\n            location.buffer.value.set(updateValue, location.range[0]);\n            updateRange = bufferAttributeUpdateRange[\n              location.attribute.uid\n            ] || [null, Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER];\n            updateRange[0] = location.attribute;\n            updateRange[1] = min(location.range[0], updateRange[1]);\n            updateRange[2] = max(location.range[1], updateRange[2]);\n            bufferAttributeUpdateRange[location.attribute.uid] = updateRange;\n          }\n        }\n      }\n    }\n\n    // When the instance is inactive all we update is the active attribute to false\n    else {\n      location =\n        propertyToLocation[this.bufferManager.getActiveAttributePropertyId()];\n      attribute = location.attribute;\n      updateValue = attribute.update(instance);\n      location.buffer.value.set(updateValue, location.range[0]);\n      updateRange = bufferAttributeUpdateRange[attribute.uid] || [\n        null,\n        Number.MAX_SAFE_INTEGER,\n        Number.MIN_SAFE_INTEGER\n      ];\n      updateRange[0] = attribute;\n      updateRange[1] = min(location.range[0], updateRange[1]);\n      updateRange[2] = max(location.range[1], updateRange[2]);\n      bufferAttributeUpdateRange[attribute.uid] = updateRange;\n    }\n  }\n\n  /**\n   * This performs an update on the buffers with the intent the entire buffer is going to update\n   * rather than a chunk of it.\n   */\n  updateInstanceFull(\n    layer: IInstanceDiffManagerTarget<T>,\n    instance: T,\n    propIds: number[],\n    bufferLocations: IBufferLocationGroup<IBufferLocation>\n  ) {\n    const propertyToLocation = bufferLocations.propertyToBufferLocation;\n    const bufferAttributeWillUpdate = this.bufferAttributeWillUpdate;\n    let location: IBufferLocation;\n    let updateValue: Vec;\n    let childLocations: IBufferLocation[];\n    let attribute: IInstanceAttributeInternal<T>;\n\n    if (instance.active) {\n      // If no prop ids provided, then we perform a complete instance property update\n      if (propIds.length === 0) {\n        propIds = this.bufferManager.getUpdateAllPropertyIdList();\n      }\n\n      for (let i = 0, end = propIds.length; i < end; ++i) {\n        // First update for the instance attribute itself\n        location = propertyToLocation[propIds[i]];\n        attribute = location.attribute;\n        attribute.atlas && layer.resource.setTargetAtlas(attribute.atlas.key);\n        updateValue = attribute.update(instance);\n        location.buffer.value.set(updateValue, location.range[0]);\n        bufferAttributeWillUpdate[attribute.uid] = attribute;\n\n        // Now update any child attributes that would need updating based on the parent attribute changing\n        if (location.childLocations) {\n          childLocations = location.childLocations;\n\n          for (let k = 0, endk = childLocations.length; k < endk; ++k) {\n            location = childLocations[k];\n            attribute = location.attribute;\n            updateValue = attribute.update(instance);\n            location.buffer.value.set(updateValue, location.range[0]);\n            bufferAttributeWillUpdate[attribute.uid] = attribute;\n          }\n        }\n      }\n    }\n\n    // When the instance is inactive all we update is the active attribute to false\n    else {\n      location =\n        propertyToLocation[this.bufferManager.getActiveAttributePropertyId()];\n      attribute = location.attribute;\n      attribute.atlas && layer.resource.setTargetAtlas(attribute.atlas.key);\n      updateValue = attribute.update(instance);\n      location.buffer.value.set(updateValue, location.range[0]);\n      bufferAttributeWillUpdate[attribute.uid] = attribute;\n    }\n  }\n\n  /**\n   * Finalize all of the buffer changes and apply the correct update ranges\n   */\n  commit() {\n    // If we're in a partial mode: just update the portion of the buffer that needs updating.\n    if (this.diffMode === DiffMode.PARTIAL) {\n      // We now grab all of the attributes and set their update ranges\n      const updates = Object.values(this.bufferAttributeUpdateRange);\n\n      for (let i = 0, end = updates.length; i < end; ++i) {\n        const update = updates[i];\n        const attribute = update[0].bufferAttribute;\n        attribute.needsUpdate = true;\n        attribute.updateRange = {\n          count: update[2] - update[1],\n          offset: update[1]\n        };\n      }\n    }\n\n    // Otherwise just update the full buffer\n    else {\n      // We now grab all of the attributes and set their update ranges\n      const updates = Object.values(this.bufferAttributeWillUpdate);\n\n      for (let i = 0, end = updates.length; i < end; ++i) {\n        const attribute = updates[i].bufferAttribute;\n        attribute.needsUpdate = true;\n        attribute.updateRange = {\n          count: -1,\n          offset: 0\n        };\n      }\n    }\n\n    // Clear the attribute update metrics\n    this.bufferAttributeUpdateRange = {};\n  }\n\n  /**\n   * This will optimize the update method used. If there are enough instances being updated, we will\n   * cause the entire attribute buffer to update. If there are not enough, then we will update with\n   * additional steps to\n   */\n  incomingChangeList(changes: InstanceDiff<T>[]) {\n    if (changes.length === 0) {\n      this.diffMode = DiffMode.PARTIAL;\n    } else if (changes.length > this.bufferManager.getInstanceCount() * 0.7) {\n      this.diffMode = DiffMode.FULL;\n    } else {\n      this.diffMode = DiffMode.PARTIAL;\n    }\n\n    if (this.diffMode === DiffMode.PARTIAL) {\n      this.updateInstance = this.updateInstancePartial;\n    } else {\n      this.updateInstance = this.updateInstanceFull;\n    }\n  }\n}\n","import * as Three from \"three\";\n\nexport enum ViewCameraType {\n  /**\n   * Indicates a camera that is forced by the system to follow:\n   * - Match width and height of the view port\n   * - +y axis points downward\n   * - gl origin is at the top left of the screen\n   */\n  CONTROLLED,\n  /**\n   * This allows a custom view camera to be applied to the scene.\n   */\n  CUSTOM\n}\n\n/**\n * This is a camera that controls the view projection matrix. This is a much more\n * complicated way to handle views that is better suited for handling 3D applications\n * and is very overkill for most 2D charting systems. If you are working purely with\n * 2D components, it's recommended to leave this as a CONTROLLED camera and utilize\n * the ChartCamera for most of your needs.\n */\nexport class ViewCamera {\n  type: ViewCameraType = ViewCameraType.CONTROLLED;\n  baseCamera: Three.Camera;\n}\n","let chartCameraUID = 0;\n\nexport interface IChartCameraOptions {\n  /** The world space offset of elements in the chart */\n  offset?: [number] | [number, number] | [number, number, number];\n  /** The world space scaling present in the chart */\n  scale?: [number] | [number, number] | [number, number, number];\n}\n\n/**\n * Quick method for applying a source array to a target array. This\n * ensures the arrays both are valid and applies the values without just making\n * a copy of the source.\n */\nfunction applyArray(target?: number[], source?: number[]) {\n  target && source && target.splice(0, source.length, ...source);\n}\n\nexport class ChartCamera {\n  /** Internally set id */\n  _id: number = chartCameraUID++;\n  /** Represents how much an element should be offset in world space */\n  offset: [number, number, number] = [0, 0, 0];\n  /** Represents how scaled each axis should be in world space */\n  scale: [number, number, number] = [1, 1, 1];\n\n  constructor(options?: IChartCameraOptions) {\n    if (options) {\n      applyArray(this.offset, options.offset);\n      applyArray(this.scale, options.scale);\n    }\n  }\n\n  /** Keep id as readonly */\n  get id() {\n    return this._id;\n  }\n\n  /**\n   * Sets the location of the camera by adjusting the offsets to match.\n   */\n  position(location: [number, number, number]) {\n    this.offset = location.slice(0) as [number, number, number];\n  }\n}\n","const { sqrt } = Math;\n\n/** Explicit Vec1 */\nexport interface IVec1 extends Array<number> {\n  0: number;\n  length: 1;\n}\n\n/** Explicit Vec2 */\nexport interface IVec2 extends Array<number> {\n  0: number;\n  1: number;\n  length: 2;\n}\n\n/** Explicit Vec3 */\nexport interface IVec3 extends Array<number> {\n  0: number;\n  1: number;\n  2: number;\n  length: 3;\n}\n\n/** Explicit Vec4 */\nexport interface IVec4 extends Array<number> {\n  0: number;\n  1: number;\n  2: number;\n  3: number;\n  length: 4;\n}\n\n/** Vector of 1 components */\nexport type Vec1 = [number];\n/** Vector of 2 components */\nexport type Vec2 = [number, number];\n/** Vector of 3 components */\nexport type Vec3 = [number, number, number];\n/** Vector of 4 components */\nexport type Vec4 = [number, number, number, number];\n\n/** This type defines any possible explicit vector */\nexport type IVec = IVec1 | IVec2 | IVec3 | IVec4;\n/** This type defines any possible vector */\nexport type Vec = Vec1 | Vec2 | Vec3 | Vec4;\n\nexport function add1(left: Vec1, right: Vec1): Vec1 {\n  return [left[0] + right[0]];\n}\n\nexport function scale1(vec: Vec1, scale: number): Vec1 {\n  return [vec[0] * scale];\n}\n\nexport function subtract1(left: Vec1, right: Vec1): Vec1 {\n  return [left[0] - right[0]];\n}\n\nexport function multiply1(left: Vec1, right: Vec1): Vec1 {\n  return [left[0] * right[0]];\n}\n\nexport function dot1(left: Vec1, right: Vec1): number {\n  return left[0] * right[0];\n}\n\nexport function linear1(start: Vec1, end: Vec1, t: number): Vec1 {\n  return scale1(add1(subtract1(end, start), start), t);\n}\n\nexport function length1(start: Vec1): number {\n  return sqrt(dot1(start, start));\n}\n\nexport function add2(left: Vec2, right: Vec2): Vec2 {\n  return [left[0] + right[0], left[1] + right[1]];\n}\n\nexport function scale2(left: Vec2, scale: number): Vec2 {\n  return [left[0] * scale, left[1] * scale];\n}\n\nexport function subtract2(left: Vec2, right: Vec2): Vec2 {\n  return [left[0] - right[0], left[1] - right[1]];\n}\n\nexport function multiply2(left: Vec2, right: Vec2): Vec2 {\n  return [left[0] * right[0], left[1] * right[1]];\n}\n\nexport function dot2(left: Vec2, right: Vec2): number {\n  return left[0] * right[0] + left[1] * right[1];\n}\n\nexport function linear2(start: Vec2, end: Vec2, t: number): Vec2 {\n  return scale2(add2(subtract2(end, start), start), t);\n}\n\nexport function length2(start: Vec2): number {\n  return sqrt(dot2(start, start));\n}\n\nexport function add3(left: Vec3, right: Vec3): Vec3 {\n  return [left[0] + right[0], left[1] + right[1], left[2] + right[2]];\n}\n\nexport function scale3(left: Vec3, scale: number): Vec3 {\n  return [left[0] * scale, left[1] * scale, left[2] * scale];\n}\n\nexport function subtract3(left: Vec3, right: Vec3): Vec3 {\n  return [left[0] - right[0], left[1] - right[1], left[2] - right[2]];\n}\n\nexport function multiply3(left: Vec3, right: Vec3): Vec3 {\n  return [left[0] * right[0], left[1] * right[1], left[2] * right[2]];\n}\n\nexport function linear3(start: Vec3, end: Vec3, t: number): Vec3 {\n  return scale3(add3(subtract3(end, start), start), t);\n}\n\nexport function length3(start: Vec3): number {\n  return sqrt(dot3(start, start));\n}\n\nexport function dot3(left: Vec3, right: Vec3): number {\n  return left[0] * right[0] + left[1] * right[1] + left[2] * right[2];\n}\n\nexport function add4(left: Vec4, right: Vec4): Vec4 {\n  return [\n    left[0] + right[0],\n    left[1] + right[1],\n    left[2] + right[2],\n    left[3] + right[3]\n  ];\n}\n\nexport function scale4(left: Vec4, scale: number): Vec4 {\n  return [left[0] * scale, left[1] * scale, left[2] * scale, left[3] * scale];\n}\n\nexport function subtract4(left: Vec4, right: Vec4): Vec4 {\n  return [\n    left[0] - right[0],\n    left[1] - right[1],\n    left[2] - right[2],\n    left[3] - right[3]\n  ];\n}\n\nexport function multiply4(left: Vec4, right: Vec4): Vec4 {\n  return [\n    left[0] * right[0],\n    left[1] * right[1],\n    left[2] * right[2],\n    left[3] * right[3]\n  ];\n}\n\nexport function dot4(left: Vec4, right: Vec4): number {\n  return (\n    left[0] * right[0] +\n    left[1] * right[1] +\n    left[2] * right[2] +\n    left[3] * right[3]\n  );\n}\n\nexport function linear4(start: Vec4, end: Vec4, t: number): Vec4 {\n  return scale4(add4(subtract4(end, start), start), t);\n}\n\nexport function length4(start: Vec4): number {\n  return sqrt(dot4(start, start));\n}\n\nexport type VecMethods<T extends Vec> = {\n  add(left: T, right: T): T;\n  scale(vec: T, scale: number): T;\n  subtract(left: T, right: T): T;\n  multiply(left: T, right: T): T;\n  dot(left: T, right: T): number;\n  linear(start: T, end: T, t: number): T;\n  length(vec: T): number;\n};\n\nexport const vec1Methods: VecMethods<Vec1> = {\n  add: add1,\n  dot: dot1,\n  length: length1,\n  linear: linear1,\n  multiply: multiply1,\n  scale: scale1,\n  subtract: subtract1\n};\n\nexport const vec2Methods: VecMethods<Vec2> = {\n  add: add2,\n  dot: dot2,\n  length: length2,\n  linear: linear2,\n  multiply: multiply2,\n  scale: scale2,\n  subtract: subtract2\n};\n\nexport const vec3Methods: VecMethods<Vec3> = {\n  add: add3,\n  dot: dot3,\n  length: length3,\n  linear: linear3,\n  multiply: multiply3,\n  scale: scale3,\n  subtract: subtract3\n};\n\nexport const vec4Methods: VecMethods<Vec4> = {\n  add: add4,\n  dot: dot4,\n  length: length4,\n  linear: linear4,\n  multiply: multiply4,\n  scale: scale4,\n  subtract: subtract4\n};\n\nexport function VecMath<T extends IVec>(vec: T): VecMethods<T> {\n  let methods: VecMethods<T>;\n\n  if (vec.length === 1) {\n    methods = vec1Methods as VecMethods<T>;\n    return methods;\n  } else if (vec.length === 2) {\n    methods = vec2Methods as VecMethods<T>;\n    return methods;\n  } else if (vec.length === 3) {\n    methods = vec3Methods as VecMethods<T>;\n    return methods;\n  }\n\n  methods = vec4Methods as VecMethods<T>;\n\n  return methods;\n}\n","let UID = 0;\n\n/**\n * Provides a 64 bit UID.\n *\n * Note: all uids generated with uid() are unique amongst uid() calls and NOT unique amongst\n * other types of uid calls.\n */\nexport function uid() {\n  return ++UID;\n}\n\nlet CUID = 0;\n\n/**\n * Provides a 24 bit UID (keeps the UID within non-alpha color ranges)\n *\n * Note: all uids generated with colorUID() are unique amongst colorUID() calls and NOT unique amongst\n * other types of uid calls.\n */\nexport function colorUID() {\n  return ++CUID % 0xffffff;\n}\n","import { Bounds } from \"../primitives\";\nimport { IProjection } from \"../types\";\nimport {\n  IDragMetrics,\n  IMouseInteraction,\n  IWheelMetrics,\n  MouseEventManager\n} from \"./mouse-event-manager\";\nimport { View } from \"./view\";\n\n/**\n * Classes can extend this and override the methods to respond to events.\n */\nexport abstract class EventManager {\n  private mouseManager: MouseEventManager;\n\n  abstract handleMouseDown(e: IMouseInteraction, button: number): void;\n  abstract handleMouseUp(e: IMouseInteraction, button: number): void;\n  abstract handleMouseOver(e: IMouseInteraction): void;\n  abstract handleMouseOut(e: IMouseInteraction): void;\n  abstract handleMouseMove(e: IMouseInteraction): void;\n  abstract handleClick(e: IMouseInteraction, button: number): void;\n  abstract handleDrag(e: IMouseInteraction, drag: IDragMetrics): void;\n  abstract handleWheel(e: IMouseInteraction, wheel: IWheelMetrics): void;\n\n  /**\n   * This retrieves the projections for the view specified by the provided viewId.\n   */\n  getProjection(viewId: string): IProjection | null {\n    return this.mouseManager.getView(viewId);\n  }\n\n  /**\n   * This retrieves the actual view for the view specified by the provided viewId.\n   */\n  getView(viewId: string): View | null {\n    return (this.mouseManager && this.mouseManager.getView(viewId)) || null;\n  }\n\n  /**\n   * This retrieves the screen bounds for the view specified by the provided viewId.\n   */\n  getViewScreenBounds(viewId: string): Bounds | null {\n    const view = this.mouseManager.getView(viewId);\n\n    if (view) {\n      return view.screenBounds;\n    }\n\n    return null;\n  }\n\n  /**\n   * This is used internally which provides the parent MouseEventManager via the param mouseManager for this\n   * EventManager.\n   */\n  setMouseManager(mouseManager: MouseEventManager) {\n    this.mouseManager = mouseManager;\n  }\n}\n","import { IPoint } from \"../primitives/point\";\nimport { DataBounds } from \"../util/data-bounds\";\nimport { eventElementPosition, normalizeWheel } from \"../util/mouse\";\nimport { QuadTree } from \"../util/quad-tree\";\nimport { EventManager } from \"./event-manager\";\nimport { Scene } from \"./scene\";\nimport { View } from \"./view\";\n\n// If a mouse up after a mouse down happens before this many milliseconds, a click gesture will happen\nconst VALID_CLICK_DELAY = 1e3;\n\n/**\n * Theorectically we can have a view be applied to multiple scenes. So to properly qualify a view\n * it must be paired with the scene it is rendering for.\n */\nexport type SceneView = {\n  /** This specifies the order the view is rendered in so we can pick the top most item when needed */\n  depth: number;\n  /** This is the scene the view is rendering for */\n  scene: Scene;\n  /** This is the view itself that our mouse will interact with */\n  view: View;\n  /** Gets the bounds of this view for this particular scene */\n  bounds?: DataBounds<SceneView>;\n};\n\n/**\n * This represents an interaction with the Layer Surface. It provides mouse metrics with how the mouse\n * interacts with the views below it.\n */\nexport interface IMouseInteraction {\n  /** When present indicates any relevant button codes used during a click event */\n  button?: number;\n  /** Metrics of the interaction in screen space */\n  screen: {\n    mouse: IPoint;\n  };\n  /** The View the mouse was 'down' on */\n  start?: {\n    mouse: IPoint;\n    view: View;\n  };\n  /** The View Immediately underneath the mouse */\n  target: {\n    mouse: IPoint;\n    view: View;\n  };\n  /** This is populated with ALL of the views underneath the mouse */\n  viewsUnderMouse: {\n    /** The mouse's location in the views coordinate space */\n    mouse: IPoint;\n    /** The view that is interacted with */\n    view: View;\n  }[];\n}\n\nexport interface IDragMetrics {\n  /** Drag metrics in screen space */\n  screen: {\n    /** The start position of the drag where the mouse down first occurred */\n    start: IPoint;\n    /** The previous position of the mouse last frame */\n    previous: IPoint;\n    /** The current position the mouse is located for this frame */\n    current: IPoint;\n    /** The change in position from last frame to this frame */\n    delta: IPoint;\n  };\n}\n\nexport interface IWheelMetrics {\n  wheel: [number, number];\n}\n\n/**\n * This is metrics measured between two touches\n */\nexport interface ITouchRelation {\n  /** The direction to the other touch */\n  direction: IPoint;\n  /** The current distance to the other touch */\n  distance: number;\n  /** The id of the other touch */\n  id: number;\n}\n\n/**\n * This is the information of a touch for a given frame.\n */\nexport interface ITouchFrame {\n  /** This is the location or delta location of the touch for this frame */\n  location: IPoint;\n  /** This is the direction from the start touch frame */\n  direction: IPoint;\n  /** This is the metrics or delta metrics of the touch relative to the other touches for the frame */\n  relations: Map<number, ITouchRelation>;\n}\n\nexport interface ITouchMetrics {\n  /** The starting metrics of the touch */\n  start: ITouchFrame;\n  /** The delta changes from previous event to the current event */\n  delta: ITouchFrame;\n  /** The current metrics of the touch event */\n  current: ITouchFrame;\n}\n\nfunction sortByDepth(a: DataBounds<SceneView>, b: DataBounds<SceneView>) {\n  return b.data.depth - a.data.depth;\n}\n\nfunction isDefined<T>(val: T | null | undefined): val is T {\n  return Boolean(val);\n}\n\n/**\n * This manages mouse events on the provided canvas and provides some higher level\n * interactions with the surface.\n */\nexport class MouseEventManager {\n  /** This is the canvas context we are rendering to */\n  context: HTMLCanvasElement;\n  /** This is list of Event Managers that receive the events and gestures which perform the nexessary actions */\n  controllers: EventManager[];\n  /** This is the quad tree for finding intersections with the mouse */\n  quadTree: QuadTree<DataBounds<SceneView>>;\n  /** This is the current list of views being managed */\n  views: SceneView[];\n\n  eventCleanup: [string, EventListenerOrEventListenerObject][] = [];\n\n  /**\n   * This flag is set when the system is waiting to render the elements to establish bounds.\n   * No Mouse interations will happen while this is set to true.\n   */\n  private _waitingForRender: boolean = true;\n\n  get waitingForRender() {\n    return this._waitingForRender;\n  }\n\n  set waitingForRender(val: boolean) {\n    this._waitingForRender = val;\n\n    // When we're no longer waiting for render to occur we update all of our views in the quad tree\n    if (!val) {\n      this.quadTree = new QuadTree(0, 0, 0, 0);\n      this.quadTree.addAll(this.views.map(v => v.bounds).filter(isDefined));\n    }\n  }\n\n  constructor(\n    canvas: HTMLCanvasElement,\n    views: SceneView[],\n    controllers: EventManager[],\n    handlesWheelEvents?: boolean\n  ) {\n    this.context = canvas;\n    this.setViews(views);\n    this.setControllers(controllers);\n    this.addContextListeners(handlesWheelEvents);\n  }\n\n  /**\n   * This sets up the DOM events to listen to the events that are broadcasted by the canvas.\n   * These events are set up in such a way as to continue some events when the user\n   * drags the mouse off of the browser or off the canvas without releasing.\n   */\n  addContextListeners(handlesWheelEvents?: boolean) {\n    const element = this.context;\n    let startView: SceneView | undefined;\n    let startPosition: IPoint = { x: 0, y: 0 };\n\n    if (handlesWheelEvents) {\n      const wheelHandler = (event: MouseWheelEvent) => {\n        const mouse = eventElementPosition(event, element);\n        const interaction = this.makeInteraction(\n          mouse,\n          startPosition,\n          startView\n        );\n        const wheel = this.makeWheel(event);\n\n        this.controllers.forEach(controller => {\n          controller.handleWheel(interaction, wheel);\n        });\n\n        event.stopPropagation();\n        event.preventDefault();\n      };\n\n      if (\"onwheel\" in element) {\n        element.onwheel = wheelHandler;\n      }\n\n      if (\"addEventListener\" in element) {\n        element.addEventListener(\"DOMMouseScroll\", wheelHandler);\n        this.eventCleanup.push([\"DOMMouseScroll\", wheelHandler]);\n      }\n    }\n\n    element.onmouseleave = event => {\n      // No interactions while waiting for the render to update\n      if (this.waitingForRender) return;\n\n      const mouse = eventElementPosition(event, element);\n      const interaction = this.makeInteraction(mouse, startPosition, startView);\n\n      this.controllers.forEach(controller => {\n        controller.handleMouseOut(interaction);\n      });\n    };\n\n    element.onmousemove = event => {\n      // No interactions while waiting for the render to update\n      if (this.waitingForRender) return;\n\n      const mouse = eventElementPosition(event, element);\n      const interaction = this.makeInteraction(mouse, startPosition, startView);\n\n      this.controllers.forEach(controller => {\n        controller.handleMouseMove(interaction);\n      });\n    };\n\n    element.onmousedown = (event: MouseEvent) => {\n      // No interactions while waiting for the render to update\n      if (this.waitingForRender) return;\n\n      startPosition = eventElementPosition(event, element);\n      const downViews = this.getViewsUnderMouse(startPosition);\n      // While this is true, when mouse up happens, the click gesture will execute\n      let canClick = true;\n      const clickStartTime = Date.now();\n\n      // If no views under this view, then we just quick exit with no interactions\n      if (downViews.length <= 0) {\n        return;\n      }\n\n      startView = downViews[0].data;\n      if (!startView) return;\n\n      const interaction = this.makeInteraction(\n        startPosition,\n        startPosition,\n        startView\n      );\n      let currentPosition = startPosition;\n\n      this.controllers.forEach(controller => {\n        controller.handleMouseDown(interaction, event.button);\n      });\n\n      event.stopPropagation();\n\n      document.onmousemove = (event: MouseEvent) => {\n        const mouse = eventElementPosition(event, element);\n        const interaction = this.makeInteraction(\n          mouse,\n          startPosition,\n          startView\n        );\n        const delta = {\n          x: mouse.x - currentPosition.x,\n          y: mouse.y - currentPosition.y\n        };\n\n        const drag = this.makeDrag(\n          mouse,\n          startPosition || { x: 0, y: 0 },\n          currentPosition,\n          delta\n        );\n        currentPosition = mouse;\n\n        this.controllers.forEach(controller => {\n          controller.handleDrag(interaction, drag);\n        });\n\n        // If we move after a mouse down, it's no longer a click\n        canClick = false;\n      };\n\n      document.onmouseup = (_event: MouseEvent) => {\n        document.onmousemove = null;\n        document.onmouseup = null;\n        document.onmouseover = null;\n      };\n\n      document.onmouseover = (event: MouseEvent) => {\n        const mouse = eventElementPosition(event, element);\n        const interaction = this.makeInteraction(\n          mouse,\n          startPosition,\n          startView\n        );\n\n        this.controllers.forEach(controller => {\n          controller.handleMouseOver(interaction);\n        });\n\n        event.stopPropagation();\n      };\n\n      element.onmouseup = (event: MouseEvent) => {\n        const mouse = eventElementPosition(event, element);\n        const interaction = this.makeInteraction(\n          mouse,\n          startPosition,\n          startView\n        );\n\n        this.controllers.forEach(controller => {\n          controller.handleMouseUp(interaction, event.button);\n        });\n\n        // If we release the mouse before the valid click delay\n        if (canClick && Date.now() - clickStartTime < VALID_CLICK_DELAY) {\n          this.controllers.forEach(controller => {\n            controller.handleClick(interaction, event.button);\n          });\n        }\n      };\n\n      // Text will not be selected when it is being dragged\n      element.onselectstart = function() {\n        return false;\n      };\n    };\n\n    // Enable touch support\n    this.addTouchContextListeners();\n  }\n\n  addTouchContextListeners() {\n    const element = this.context;\n\n    element.ontouchstart = _event => {\n      // TODO: This is the start work for the touch events. And this retains sentimental value.\n      // For (let i = 0, end = event.changedTouches.length; i < end; ++i) {\n      // TODO\n      // Const touch = event.changedTouches.item(i);\n      // CurrentTouches.set(touch.identifier, to);\n      // }\n    };\n\n    element.ontouchend = _event => {\n      // TODO\n    };\n\n    element.ontouchmove = _event => {\n      // TODO\n    };\n\n    element.ontouchcancel = _event => {\n      // TODO\n    };\n  }\n\n  /**\n   * Retrieves the view for the provided id\n   */\n  getView(viewId: string): View | null {\n    for (const view of this.views) {\n      if (view.view.id === viewId) {\n        return view.view;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Retrieves the views underneath the mouse with the top most view as\n   * the first view in the list.\n   */\n  getViewsUnderMouse = (mouse: IPoint) => {\n    // Find the views the mouse has interacted with\n    const hitViews = this.quadTree.query(mouse);\n    // Sort them by depth\n    hitViews.sort(sortByDepth);\n\n    return hitViews;\n  };\n\n  /**\n   * This generates the metrics for a drag gesture.\n   */\n  makeDrag(\n    mouse: IPoint,\n    start: IPoint,\n    previous: IPoint,\n    delta: IPoint\n  ): IDragMetrics {\n    return {\n      screen: {\n        current: mouse,\n        delta,\n        previous,\n        start\n      }\n    };\n  }\n\n  /**\n   * This makes the metrics for interactions with the views.\n   */\n  makeInteraction(\n    mouse: IPoint,\n    start?: IPoint,\n    startView?: SceneView\n  ): IMouseInteraction {\n    // Find the views the mouse has interacted with\n    const hitViews = this.getViewsUnderMouse(mouse);\n\n    return {\n      screen: {\n        mouse\n      },\n      start: start &&\n        startView && {\n          mouse: startView.view.screenToView(mouse),\n          view: startView.view\n        },\n      target: {\n        mouse: hitViews[0] && hitViews[0].data.view.screenToView(mouse),\n        view: hitViews[0] && hitViews[0].data.view\n      },\n      viewsUnderMouse: hitViews.map(v => ({\n        mouse: v.data.view.screenToView(mouse),\n        view: v.data.view\n      }))\n    };\n  }\n\n  makeWheel(event: MouseWheelEvent): IWheelMetrics {\n    const wheel = normalizeWheel(event);\n\n    return {\n      wheel: [wheel.x, wheel.y]\n    };\n  }\n\n  /**\n   * When the renderer is resized, we must reform our quad tree\n   */\n  resize = () => {\n    this._waitingForRender = true;\n  };\n\n  /**\n   * Sets the controllers to receive events from this manager.\n   */\n  setControllers(controllers: EventManager[]) {\n    this.controllers = controllers;\n\n    for (const controller of this.controllers) {\n      controller.setMouseManager(this);\n    }\n  }\n\n  /**\n   * Sets the views that gets queried for interactions.\n   */\n  setViews(views: SceneView[]) {\n    this.views = views;\n  }\n\n  destroy() {\n    delete this.quadTree;\n    this.context.onmousedown = null;\n    this.context.onmousemove = null;\n    this.context.onmouseleave = null;\n    this.context.onmousewheel = null;\n\n    this.eventCleanup.forEach(event => {\n      this.context.removeEventListener(event[0], event[1]);\n    });\n  }\n}\n","/**\n * This file is dedicted to the all important step of processing desired inputs from the layer\n * and coming up with automated generated uniforms and attributes that the shader's will need\n * in order to operate with the conveniences the library offers. This includes things such as\n * injecting camera projection uniforms, resource uniforms, animation adjustments etc etc.\n */\nimport * as Three from \"three\";\nimport { Instance } from \"../../instance-provider/instance\";\nimport {\n  IAtlasInstanceAttribute,\n  IInstanceAttribute,\n  InstanceAttributeSize,\n  InstanceBlockIndex,\n  IShaderInitialization,\n  IUniform,\n  IUniformInternal,\n  IValueInstanceAttribute,\n  IVertexAttribute,\n  IVertexAttributeInternal,\n  PickType,\n  ShaderInjectionTarget,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport { Vec } from \"../../util\";\nimport { ILayerProps, Layer } from \"../layer\";\nimport { generateEasingAttributes } from \"./expand-easing-attributes\";\nimport { getLayerBufferType, LayerBufferType } from \"./layer-buffer-type\";\nimport { packAttributes } from \"./pack-attributes\";\n\n/**\n * This is a lookup for a test vector for the provided size\n */\nconst testStartVector: { [key: number]: Vec } = {\n  [InstanceAttributeSize.ONE]: [1],\n  [InstanceAttributeSize.TWO]: [1, 2],\n  [InstanceAttributeSize.THREE]: [1, 2, 3],\n  [InstanceAttributeSize.FOUR]: [1, 2, 3, 4]\n};\n\n/**\n * This is a lookup for a test vector for the provided size\n */\nconst testEndVector: { [key: number]: Vec } = {\n  [InstanceAttributeSize.ONE]: [4],\n  [InstanceAttributeSize.TWO]: [4, 3],\n  [InstanceAttributeSize.THREE]: [4, 3, 2],\n  [InstanceAttributeSize.FOUR]: [4, 3, 2, 1]\n};\n\nconst emptyTexture = new Three.Texture();\n\nfunction isAtlasAttribute<T extends Instance>(\n  attr: any\n): attr is IAtlasInstanceAttribute<T> {\n  return Boolean(attr) && attr.atlas;\n}\n\nfunction isInstanceAttribute<T extends Instance>(\n  attr: any\n): attr is IInstanceAttribute<T> {\n  return Boolean(attr);\n}\n\nfunction isVertexAttribute(attr: any): attr is IVertexAttribute {\n  return Boolean(attr);\n}\n\nfunction isUniform(attr: any): attr is IUniform {\n  return Boolean(attr);\n}\n\nfunction toVertexAttributeInternal(\n  attribute: IVertexAttribute\n): IVertexAttributeInternal {\n  return Object.assign({}, attribute, { materialAttribute: null });\n}\n\nfunction toUniformInternal(uniform: IUniform): IUniformInternal {\n  return Object.assign({}, uniform, { materialUniforms: [] });\n}\n\n/**\n * This sorts the attributes such that the attributes that MUST be updated first are put to the top.\n * This is necessary for complex attributes like atlas and easing attributes who have other attributes\n * that have dependent behaviors based on their source attribute.\n */\nfunction sortNeedsUpdateFirstToTop<T extends Instance>(\n  a: IInstanceAttribute<T>,\n  b: IInstanceAttribute<T>\n) {\n  if (a.atlas && !b.atlas) return -1;\n  if (a.easing && !b.easing) return -1;\n  return 1;\n}\n\n/**\n * This generates any uniforms needed for when a layer is requesting\n */\nfunction generateAtlasResourceUniforms<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(layer: Layer<T, U>, instanceAttributes: IInstanceAttribute<T>[]) {\n  // Retrieve all of the instance attributes that are atlas references\n  const atlasInstanceAttributes: IAtlasInstanceAttribute<T>[] = [];\n  // Key: The atlas uniform name requested\n  const requestedAtlasInjections = new Map<string, [boolean, boolean]>();\n\n  // Get the atlas requests that have unique names. We only need one uniform\n  // For a single unique provided name. We also must merge the requests for\n  // Vertex and fragment injections\n  instanceAttributes.forEach(\n    (attribute: IValueInstanceAttribute<T> | IAtlasInstanceAttribute<T>) => {\n      if (isAtlasAttribute(attribute)) {\n        // Auto set the size of the attribute. Attribute's that are a resource automatically\n        // Consume a size of four\n        attribute.size = InstanceAttributeSize.FOUR;\n        attribute.blockIndex = InstanceBlockIndex.ONE;\n        // Get the atlas resource uniform (sampler2D) injection targets. We default to only the\n        // Fragment shader as it's the most commonly used location for sampler2Ds\n        const injection: number =\n          attribute.atlas.shaderInjection || ShaderInjectionTarget.FRAGMENT;\n        // See if we already have an injection for the given injected uniform name for an atlas resource.\n        const injections = requestedAtlasInjections.get(attribute.atlas.name);\n\n        if (injections) {\n          requestedAtlasInjections.set(attribute.atlas.name, [\n            injections[0] ||\n              injection === ShaderInjectionTarget.VERTEX ||\n              injection === ShaderInjectionTarget.ALL,\n            injections[1] ||\n              injection === ShaderInjectionTarget.FRAGMENT ||\n              injection === ShaderInjectionTarget.ALL\n          ]);\n        } else {\n          atlasInstanceAttributes.push(attribute);\n          requestedAtlasInjections.set(attribute.atlas.name, [\n            injection === ShaderInjectionTarget.VERTEX ||\n              injection === ShaderInjectionTarget.ALL,\n            injection === ShaderInjectionTarget.FRAGMENT ||\n              injection === ShaderInjectionTarget.ALL\n          ]);\n        }\n      }\n    }\n  );\n\n  // Make uniforms for all of the unique atlas requests.\n  return atlasInstanceAttributes.map(instanceAttribute => {\n    let injection: ShaderInjectionTarget = ShaderInjectionTarget.FRAGMENT;\n\n    if (instanceAttribute.atlas) {\n      const injections = requestedAtlasInjections.get(\n        instanceAttribute.atlas.name\n      );\n\n      if (injections) {\n        injection =\n          (injections[0] && injections[1] && ShaderInjectionTarget.ALL) ||\n          (injections[0] && !injections[1] && ShaderInjectionTarget.VERTEX) ||\n          (!injections[0] && injections[1] && ShaderInjectionTarget.FRAGMENT) ||\n          injection;\n      }\n    }\n\n    return {\n      name: instanceAttribute.atlas.name,\n      shaderInjection: injection,\n      size: UniformSize.ATLAS,\n      update: () =>\n        layer.resource.getAtlasTexture(instanceAttribute.atlas.key) ||\n        emptyTexture\n    };\n  });\n}\n\nfunction generatePickingUniforms<T extends Instance, U extends ILayerProps<T>>(\n  layer: Layer<T, U>\n): IUniform[] {\n  if (layer.picking.type === PickType.SINGLE) {\n    return [\n      {\n        name: \"pickingActive\",\n        shaderInjection: ShaderInjectionTarget.ALL,\n        size: UniformSize.ONE,\n        update: () => [\n          layer.picking.currentPickMode === PickType.SINGLE ? 1.0 : 0.0\n        ]\n      }\n    ];\n  }\n\n  return [];\n}\n\nfunction generatePickingAttributes<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(layer: Layer<T, U>): IInstanceAttribute<T>[] {\n  if (layer.picking.type === PickType.SINGLE) {\n    return [\n      {\n        name: \"_pickingColor\",\n        size: InstanceAttributeSize.FOUR,\n        update: o => {\n          // We start from white and move down so the colors are more visible\n          // For debugging\n          const color = 0xffffff - o.uid;\n\n          // Do bit maths do get float components out of the int color\n          return [\n            (color >> 16) / 255.0,\n            ((color & 0x00ff00) >> 8) / 255.0,\n            (color & 0x0000ff) / 255.0,\n            1\n          ];\n        }\n      }\n    ];\n  }\n\n  return [];\n}\n\nfunction generateBaseUniforms<T extends Instance, U extends ILayerProps<T>>(\n  layer: Layer<T, U>\n): IUniform[] {\n  return [\n    // This injects the projection matrix from the view camera\n    {\n      name: \"projection\",\n      size: UniformSize.MATRIX4,\n      update: () => layer.view.viewCamera.baseCamera.projectionMatrix.elements\n    },\n    // This injects the model view matrix from the view camera\n    {\n      name: \"modelView\",\n      size: UniformSize.MATRIX4,\n      update: () => layer.view.viewCamera.baseCamera.matrix.elements\n    },\n    // This injects the camera offset uniforms that need to be present for projecting in a more\n    // Chart centric style\n    {\n      name: \"cameraOffset\",\n      size: UniformSize.THREE,\n      update: () => layer.view.camera.offset\n    },\n    // This injects the camera scaling uniforms that need to be present for projecting in a more\n    // Chart centric style\n    {\n      name: \"cameraScale\",\n      size: UniformSize.THREE,\n      update: () => layer.view.camera.scale\n    },\n    // This injects the camera scaling uniforms that need to be present for projecting in a more\n    // Chart centric style\n    {\n      name: \"viewSize\",\n      size: UniformSize.TWO,\n      update: () => [layer.view.viewBounds.width, layer.view.viewBounds.height]\n    },\n    // This injects the current layer's pixel ratio so pixel ratio dependent items can react to it\n    // Things like gl_PointSize will need this metric if not working in clip space\n    {\n      name: \"pixelRatio\",\n      size: UniformSize.ONE,\n      update: () => [layer.view.pixelRatio]\n    },\n    // This will be the current frame's current time which is updated in the layer's surface draw call\n    {\n      name: \"currentTime\",\n      size: UniformSize.ONE,\n      update: () => [layer.surface.frameMetrics.currentTime]\n    }\n  ];\n}\n\n/**\n * This creates the base instance attributes that are ALWAYS present\n */\nfunction generateBaseInstanceAttributes<T extends Instance>(\n  layer: Layer<T, any>\n): IInstanceAttribute<T>[] {\n  // This is injected so the system can control when an instance should not be rendered.\n  // This allows for holes to be in the buffer without having to correct them immediately\n  const activeAttribute: IInstanceAttribute<T> = {\n    name: \"_active\",\n    size: InstanceAttributeSize.ONE,\n    update: o => [o.active ? 1 : 0]\n  };\n\n  // Set the active attribute to the layer for quick reference\n  layer.activeAttribute = activeAttribute;\n\n  return [activeAttribute];\n}\n\n/**\n * This creates the base vertex attributes that are ALWAYS present\n */\nfunction generateBaseVertexAttributes<T extends Instance>(\n  layer: Layer<T, any>\n): IVertexAttribute[] {\n  // Only the uniform buffering strategy requires instance information in it's vertex attributes\n  if (layer.bufferType === LayerBufferType.UNIFORM) {\n    return [\n      // We add an inherent instance attribute to our vertices so they can determine the instancing\n      // Data to retrieve.\n      {\n        name: \"instance\",\n        size: VertexAttributeSize.ONE,\n        // We no op this as our geomtry generating routine will establish the values needed here\n        update: () => [0]\n      }\n    ];\n  }\n\n  return [];\n}\n\nfunction compareVec(a: Vec, b: Vec) {\n  if (a.length !== b.length) return false;\n\n  for (let i = 0, end = a.length; i < end; ++i) {\n    if (Math.round(a[i] * 100) / 100 !== Math.round(b[i] * 100) / 100) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction validateInstanceAttributes<T extends Instance>(\n  layer: Layer<T, any>,\n  instanceAttributes: IInstanceAttribute<T>[],\n  vertexAttributes: IVertexAttribute[]\n) {\n  instanceAttributes.forEach(attribute => {\n    if (attribute.name === undefined) {\n      console.warn(\n        \"All instance attributes MUST have a name on Layer:\",\n        layer.id\n      );\n    }\n\n    if (\n      instanceAttributes.find(\n        attr => attr !== attribute && attr.name === attribute.name\n      )\n    ) {\n      console.warn(\n        \"An instance attribute can not have the same name used more than once:\",\n        attribute.name\n      );\n    }\n\n    if (vertexAttributes.find(attr => attr.name === attribute.name)) {\n      console.warn(\n        \"An instance attribute and a vertex attribute in a layer can not share the same name:\",\n        attribute.name\n      );\n    }\n\n    if (attribute.easing && attribute.atlas) {\n      console.warn(\n        \"An instance attribute can not have both easing and atlas properties. Undefined behavior will occur.\"\n      );\n      console.warn(attribute);\n    }\n\n    if (!attribute.atlas) {\n      if (attribute.size === undefined) {\n        console.warn(\"An instance attribute requires the size to be defined.\");\n        console.warn(attribute);\n      }\n    }\n\n    if (attribute.easing) {\n      if (attribute.size !== undefined) {\n        const testStart = testStartVector[attribute.size];\n        const testEnd = testEndVector[attribute.size];\n        const validationRules = attribute.easing.validation || {};\n\n        let test = attribute.easing.cpu(testStart, testEnd, 0);\n        if (!compareVec(test, testStart)) {\n          console.warn(\n            \"Auto Easing Validation Failed: using a time of 0 does not produce the start value\"\n          );\n          console.warn(\"Start:\", testStart, \"End:\", testEnd, \"Result:\", test);\n          console.warn(attribute);\n        }\n\n        test = attribute.easing.cpu(testStart, testEnd, 1);\n        if (\n          !validationRules.ignoreEndValueCheck &&\n          !compareVec(test, testEnd)\n        ) {\n          console.warn(\n            \"Auto Easing Validation Failed: using a time of 1 does not produce the end value\"\n          );\n          console.warn(\"Start:\", testStart, \"End:\", testEnd, \"Result:\", test);\n          console.warn(attribute);\n        }\n\n        test = attribute.easing.cpu(testStart, testEnd, -1);\n        if (!compareVec(test, testStart)) {\n          console.warn(\n            \"Auto Easing Validation Failed: using a time of -1 does not produce the start value\"\n          );\n          console.warn(\"Start:\", testStart, \"End:\", testEnd, \"Result:\", test);\n          console.warn(attribute);\n        }\n\n        test = attribute.easing.cpu(testStart, testEnd, 2);\n        if (\n          !validationRules.ignoreOverTimeCheck &&\n          !compareVec(test, testEnd)\n        ) {\n          console.warn(\n            \"Auto Easing Validation Failed: using a time of 2 does not produce the end value\"\n          );\n          console.warn(\"Start:\", testStart, \"End:\", testEnd, \"Result:\", test);\n          console.warn(attribute);\n        }\n      } else {\n        console.warn(\n          \"An Instance Attribute with easing MUST have a size declared\"\n        );\n      }\n    }\n  });\n}\n\n/**\n * This is the primary method that analyzes all shader IO and determines which elements needs to be automatically injected\n * into the shader.\n */\nexport function injectShaderIO<T extends Instance, U extends ILayerProps<T>>(\n  gl: WebGLRenderingContext,\n  layer: Layer<T, U>,\n  shaderIO: IShaderInitialization<T>\n) {\n  // All of the instance attributes with nulls filtered out\n  const instanceAttributes = (shaderIO.instanceAttributes || []).filter(\n    isInstanceAttribute\n  );\n  // All of the vertex attributes with nulls filtered out\n  const vertexAttributes = (shaderIO.vertexAttributes || []).filter(\n    isVertexAttribute\n  );\n  // All of the uniforms with nulls filtered out\n  const uniforms = (shaderIO.uniforms || []).filter(isUniform);\n  // Do a validation pass of the attributes injected so we can provide feedback as to why things behave odd\n  validateInstanceAttributes(layer, instanceAttributes, vertexAttributes);\n  // Generates all of the attributes needed to make attributes automagically be eased when changed\n  generateEasingAttributes(layer, instanceAttributes);\n  // Get the uniforms needed to facilitate atlas resource requests if any exists\n  let addedUniforms: IUniform[] = uniforms.concat(\n    generateAtlasResourceUniforms(layer, instanceAttributes)\n  );\n  // These are the uniforms that should be present in the shader for basic operation\n  addedUniforms = addedUniforms.concat(generateBaseUniforms(layer));\n  // Add in uniforms for picking\n  addedUniforms = addedUniforms.concat(generatePickingUniforms(layer));\n  // Create the base instance attributes that must be present\n  let addedInstanceAttributes = instanceAttributes.concat(\n    generateBaseInstanceAttributes(layer)\n  );\n  // Add in attributes for picking\n  addedInstanceAttributes = addedInstanceAttributes.concat(\n    generatePickingAttributes(layer)\n  );\n\n  const allUniforms = addedUniforms.map(toUniformInternal);\n\n  const allInstanceAttributes = addedInstanceAttributes.sort(\n    sortNeedsUpdateFirstToTop\n  );\n\n  // Let's pack in our attributes automagically so we can determine block and block indices.\n  packAttributes(allInstanceAttributes);\n  // Before we make the vertex attributes, we must determine the buffering strategy our layer will utilize\n  getLayerBufferType(gl, layer, vertexAttributes, allInstanceAttributes);\n\n  // Create the base vertex attributes that must be present\n  const addedVertexAttributes: IVertexAttribute[] = generateBaseVertexAttributes(\n    layer\n  );\n\n  // Aggregate all of the injected shaderIO with the layer's shaderIO\n  const allVertexAttributes: IVertexAttributeInternal[] = addedVertexAttributes\n    .concat(vertexAttributes || [])\n    .map(toVertexAttributeInternal);\n\n  return {\n    instanceAttributes: allInstanceAttributes,\n    uniforms: allUniforms,\n    vertexAttributes: allVertexAttributes\n  };\n}\n","import * as Three from \"three\";\nimport { IInstancingUniform, IUniform, UniformSize } from \"../../types\";\nimport { Instance } from \"../../util\";\nimport { ILayerProps, Layer } from \"../layer\";\n\nconst UNIFORM_SIZE_TO_MATERIAL_TYPE: { [key: number]: string } = {\n  [UniformSize.ONE]: \"f\",\n  [UniformSize.TWO]: \"v2\",\n  [UniformSize.THREE]: \"v3\",\n  [UniformSize.FOUR]: \"v4\",\n  [UniformSize.MATRIX3]: \"Matrix3fv\",\n  [UniformSize.MATRIX4]: \"Matrix4fv\"\n};\n\nconst DEFAULT_UNIFORM_VALUE: { [key: number]: number[] } = {\n  [UniformSize.ONE]: [0],\n  [UniformSize.TWO]: [0, 0],\n  [UniformSize.THREE]: [0, 0, 0],\n  [UniformSize.FOUR]: [0, 0, 0, 0],\n  [UniformSize.MATRIX3]: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [UniformSize.MATRIX4]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n};\n\nfunction toMaterialUniform(uniform: IUniform) {\n  return {\n    type: UNIFORM_SIZE_TO_MATERIAL_TYPE[uniform.size],\n    value: DEFAULT_UNIFORM_VALUE[uniform.size]\n  };\n}\n\nexport function generateLayerMaterial<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(\n  layer: Layer<T, U>,\n  vs: string,\n  fs: string,\n  layerUniforms: IUniform[],\n  instancingUniforms: IInstancingUniform[]\n): Three.RawShaderMaterial {\n  // We now need to establish the material for the layer\n  const materialParams: Three.ShaderMaterialParameters = layer.getMaterialOptions();\n  materialParams.vertexShader = vs;\n  materialParams.fragmentShader = fs;\n\n  // We must convert all of the uniforms to actual Three material initialization uniforms\n  materialParams.uniforms = {};\n\n  // Convert our non-instancing uniforms to our material uniforms\n  for (let i = 0, end = layerUniforms.length; i < end; ++i) {\n    const uniform = layerUniforms[i];\n    const materialUniform = toMaterialUniform(uniform);\n    materialParams.uniforms[uniform.name] = materialUniform;\n  }\n\n  // Add in the generated instancing uniforms\n  for (let i = 0, end = instancingUniforms.length; i < end; ++i) {\n    const generatedUniform = instancingUniforms[i];\n    materialParams.uniforms[generatedUniform.name] = {\n      type: generatedUniform.type,\n      value: generatedUniform.value\n    };\n  }\n\n  return new Three.RawShaderMaterial(materialParams);\n}\n","import * as Three from \"three\";\nimport { Instance } from \"../../instance-provider/instance\";\nimport {\n  IVertexAttribute,\n  IVertexAttributeInternal,\n  ShaderIOValue\n} from \"../../types\";\nimport { Layer } from \"../layer\";\nimport { LayerBufferType } from \"./layer-buffer-type\";\n\nfunction isNumberCluster(\n  val: ShaderIOValue\n): val is\n  | [number]\n  | [number, number]\n  | [number, number, number]\n  | [number, number, number, number] {\n  return !Array.isArray(val[0]);\n}\n\nexport function generateLayerGeometry<T extends Instance>(\n  layer: Layer<T, any>,\n  maxInstancesPerBuffer: number,\n  vertexAttributes: IVertexAttributeInternal[],\n  vertexCount: number\n): Three.BufferGeometry {\n  // Make the new buffers to be updated\n  const vertexBuffers = [];\n\n  if (layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE) {\n    maxInstancesPerBuffer = 1;\n  }\n\n  for (let i = 0, end = vertexAttributes.length; i < end; ++i) {\n    const attribute = vertexAttributes[i];\n    vertexBuffers.push(\n      new Float32Array(attribute.size * vertexCount * maxInstancesPerBuffer)\n    );\n  }\n\n  // Let's now fill in the baseline geometry with the instances we will be generating\n  // First we ask the layer for a single instance's buffer setup\n  const endk = vertexAttributes.length;\n  let buffer: Float32Array;\n  let attribute: IVertexAttribute;\n  let value: ShaderIOValue;\n  let formatError: boolean = false;\n\n  for (let i = 0, end = vertexCount; i < end; ++i) {\n    for (let k = 0; k < endk; ++k) {\n      attribute = vertexAttributes[k];\n      buffer = vertexBuffers[k];\n      value = attribute.update(i);\n\n      if (isNumberCluster(value)) {\n        for (\n          let j = i * attribute.size, endj = j + attribute.size, index = 0;\n          j < endj;\n          ++j, ++index\n        ) {\n          buffer[j] = value[index];\n        }\n      } else {\n        formatError = true;\n      }\n    }\n  }\n\n  if (formatError) {\n    console.warn(\n      \"A vertex buffer updating method should not use arrays of arrays of numbers.\"\n    );\n  }\n\n  // After getting the geometry for a single instance, we can now copy paste\n  // For subsequent instances using very fast FLoat32 methods\n  // NOTE: This is ONLY for certain buffering strategies. This is essentially a noop when the\n  // maxInstances is set to one.\n  for (let i = 0, end = vertexAttributes.length; i < end; ++i) {\n    const attribute = vertexAttributes[i];\n    const instanceSize = attribute.size * vertexCount;\n\n    // Copy the first buffer set into the rest of the buffer\n    for (let k = 1, endk = maxInstancesPerBuffer; k < endk; ++k) {\n      vertexBuffers[i].copyWithin(instanceSize * k, 0, instanceSize);\n    }\n  }\n\n  // Lastly, we make the instance attribute reflect correctly so each instance\n  // Can have varied information. This is only appropriate for the uniform buffer strategy\n  if (layer.bufferType === LayerBufferType.UNIFORM) {\n    const instancingBuffer = vertexBuffers[0];\n\n    for (let i = 0, end = maxInstancesPerBuffer; i < end; ++i) {\n      const instanceStartIndex = i * vertexCount;\n\n      for (let k = 0; k < vertexCount; ++k) {\n        instancingBuffer[k + instanceStartIndex] = i;\n      }\n    }\n  }\n\n  // Now we can generate the attributes and apply them to a geometry object\n  const geometry = new Three.BufferGeometry();\n\n  for (let i = 0, end = vertexAttributes.length; i < end; ++i) {\n    const attribute = vertexAttributes[i];\n    const materialAttribute = new Three.BufferAttribute(\n      vertexBuffers[i],\n      attribute.size\n    );\n    attribute.materialAttribute = materialAttribute;\n    geometry.addAttribute(attribute.name, materialAttribute);\n  }\n\n  return geometry;\n}\n","import * as Three from \"three\";\nimport { AbsolutePosition } from \"../../primitives/absolute-position\";\nimport { ChartCamera } from \"../../util/chart-camera\";\nimport { ViewCamera } from \"../../util/view-camera\";\nimport { Scene } from \"../scene\";\nimport { View } from \"../view\";\n\nexport interface IDefaultSceneElements {\n  /** Default chartting camera */\n  camera: ChartCamera;\n  /** Default scene for elements to be added into */\n  scene: Scene;\n  /** Default view scenes are rendered with when no other views are specified by the layer or the surface */\n  view: View;\n  /**\n   * The default view projection. Defaults to being an orthographic rendering with the origin at the\n   * top left of the canvas and the y-axis as +y going downward.\n   */\n  viewCamera: ViewCamera;\n  /** The default viewport that encompasses the entire canvas */\n  viewport: AbsolutePosition;\n}\n\n/**\n * This generates all of the cameras/views/scenes necessary for default viewing of elements.\n *\n * These defaults are required to ensure the following:\n *\n * - Orthographic view\n * - top left corner of the canvas is 0,0\n * - y axis is +y downward\n * - entire canvas is the viewport.\n */\nexport function generateDefaultScene(\n  context: WebGLRenderingContext\n): IDefaultSceneElements {\n  // Generate a default view camera that is\n  // - Orthographic\n  // - (0, 0) is the top left of the canvas\n  // - the y axis is +y going downward\n  const height = context.canvas.height;\n  const width = context.canvas.width;\n  const aspectRatio = width / height;\n\n  const viewport = {\n    aspectRatio: aspectRatio,\n    bottom: -height / 2,\n    far: 10000000,\n    left: -width / 2,\n    near: -100,\n    right: width / 2,\n    top: height / 2,\n    viewSize: height\n  };\n\n  const defaultCamera: ViewCamera = new ViewCamera();\n  defaultCamera.baseCamera = new Three.OrthographicCamera(\n    viewport.left,\n    viewport.right,\n    viewport.top,\n    viewport.bottom,\n    viewport.near,\n    viewport.far\n  );\n\n  defaultCamera.baseCamera.scale.set(1.0, -1.0, 1.0);\n  defaultCamera.baseCamera.position.set(0.0, 0.0, -300.0);\n  defaultCamera.baseCamera.updateMatrixWorld(true);\n  defaultCamera.baseCamera.updateMatrix();\n\n  if (defaultCamera.baseCamera instanceof Three.OrthographicCamera) {\n    defaultCamera.baseCamera.updateProjectionMatrix();\n  }\n\n  // Generate a charting camera with all scales set to 1 and no offsets in any direction\n  const defaultChartCamera: ChartCamera = new ChartCamera();\n\n  // This is a viewport that covers the entire context\n  const defaultViewport = {\n    bottom: 0,\n    left: 0,\n    right: 0,\n    top: 0\n  };\n\n  // Make a view using our defaults\n  const defaultView = new View({\n    camera: defaultChartCamera,\n    key: View.DEFAULT_VIEW_ID,\n    viewCamera: defaultCamera,\n    viewport: defaultViewport\n  });\n\n  // Make a scene with our defaults\n  const defaultScene = new Scene({\n    key: Scene.DEFAULT_SCENE_ID,\n    views: []\n  });\n\n  // Make sure the default view is a part of the default scene\n  defaultScene.addView(defaultView);\n\n  return {\n    camera: defaultChartCamera,\n    scene: defaultScene,\n    view: defaultView,\n    viewCamera: defaultCamera,\n    viewport: defaultViewport\n  };\n}\n","import { Bounds } from \"../primitives/bounds\";\n\nexport class DataBounds<T> extends Bounds {\n  data: T;\n\n  static emptyBounds<T>() {\n    return new DataBounds<T>({\n      height: 0,\n      width: 0,\n      x: 0,\n      y: 0\n    });\n  }\n}\n","export * from \"./label-layer\";\nexport * from \"./label-instance\";\n","import { Label } from \"../../primitives/label\";\nimport { LabelAtlasResource } from \"./label-atlas-resource\";\n\nlet canvas: CanvasRenderingContext2D;\nconst MAX_FONT_SIZE = 50;\nconst { floor, max, min } = Math;\n\nexport interface ILabelRasterizedMetrics {\n  canvas: HTMLCanvasElement;\n  height: number;\n  width: number;\n}\n\nexport class LabelRasterizer {\n  /**\n   * This loops until our canvas context is available\n   */\n  static async awaitContext() {\n    // Iterate till the browser provides a valid canvas to render elements into\n    while (!canvas) {\n      this.getContext();\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n  }\n\n  /**\n   * This renders our label to a sizeable canvas where we loop over the pixel data to determine\n   * the bounds of the label.\n   *\n   * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n   *                                 the size to be rendered to the texture to the size the label\n   *                                 should be within world space.\n   * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n   */\n  static calculateLabelSize(\n    resource: LabelAtlasResource,\n    sampleScale?: number,\n    calculateTexture?: boolean\n  ) {\n    // If a max width is specified, then we must render and determine the potentially truncated text of the\n    // Label. We can do a binary search for the correct truncated label size.\n    if (calculateTexture) {\n      this.calculateTrucatedText(resource);\n    }\n\n    /** Get the label properties for rasterizing */\n    const label = resource.label;\n    // Get the scaling of the sample base\n    const sampleScaling = sampleScale || resource.sampleScale || 1.0;\n    // Draw our label to a canvas\n    this.drawLabel(label, resource.truncatedText, canvas, sampleScaling);\n    // Measure the contents of the canvas\n    const { minX, minY, maxX, maxY } = this.measureContents(canvas);\n\n    // Make sure the rasterization object is initialized\n    resource.rasterization = resource.rasterization || {\n      texture: { height: 0, width: 0 },\n      world: { height: 0, width: 0 }\n    };\n\n    // When a forced sampling is present, it calculates that as the world space\n    if (!calculateTexture) {\n      // Update the calculated texture size.\n      resource.rasterization.world = {\n        height: maxY - minY,\n        width: maxX - minX\n      };\n    }\n\n    // Otherwise we first calculate the texture rasterization for the label\n    else {\n      // Update the calculated texture size.\n      resource.rasterization.texture = {\n        height: maxY - minY,\n        width: maxX - minX\n      };\n\n      resource.rasterization.canvas = this.createCroppedCanvas(\n        resource,\n        minY,\n        minX\n      );\n      this.calculateLabelSize(resource, 1.0, false);\n    }\n  }\n\n  /**\n   * This determines what the truncated text of the label will be. If there is no truncation\n   * then the truncated text === the label's text\n   */\n  static calculateTrucatedText(resource: LabelAtlasResource) {\n    const label = resource.label;\n    const maxWidth = label.maxWidth;\n\n    // If the label has no max width, then there will be no truncation\n    if (!maxWidth) {\n      resource.truncatedText = label.text;\n      return;\n    }\n\n    // We now do an initial rendering of the label as it will appear in world space\n    this.drawLabel(label, label.text, canvas, 1);\n    // We measure the contents of the rendered item to see if it violates the maxWidth\n    const firstTest = this.measureContents(canvas);\n\n    // If we're within spec, we do not need to truncate\n    if (firstTest.maxX - firstTest.minX <= maxWidth) {\n      resource.truncatedText = label.text;\n      return;\n    }\n\n    // At this point we need to binary search through chopping off letters to find a string\n    // That will fit within max width\n    const text = label.text;\n    let left = 0;\n    let right = text.length;\n    let cursor = floor((right - left) / 2.0);\n    let safety = 0;\n    const safetyMax = 50;\n\n    // Loop to perform the binary search\n    while (right > left && cursor !== 0 && safety++ < safetyMax) {\n      // Draw and measure\n      this.drawLabel(label, `${text.substr(0, cursor)}...`, canvas, 1);\n      const { minX, maxX } = this.measureContents(canvas);\n\n      // If we pass then we move left to cursor to make the test string longer\n      if (maxX - minX <= maxWidth) {\n        left = cursor;\n      }\n\n      // If we fail, we move right to cursor to make the test string shorter\n      else {\n        right = cursor;\n      }\n\n      // Get our next cursor position\n      const nextCursor = floor((right - left) / 2.0) + left;\n\n      // If the next cursor is the same as cursor, then we're done searching\n      if (nextCursor === cursor) {\n        break;\n      }\n\n      // Move our cursor\n      cursor = nextCursor;\n    }\n\n    // If cursor is zero, nothing passed and our truncation is just ellipses\n    if (cursor === 0) {\n      resource.truncatedText = \"...\";\n    }\n\n    // Otherwise we get the string that passes and use that as our truncated text\n    else {\n      resource.truncatedText = `${text.substr(0, cursor)}...`;\n    }\n  }\n\n  /**\n   * This generates a canvas that has the cropped version of the label where the label\n   * fits neatly in the canvas object.\n   */\n  static createCroppedCanvas(\n    resource: LabelAtlasResource,\n    top: number,\n    left: number\n  ) {\n    const cropped = document.createElement(\"canvas\");\n    const context = cropped.getContext(\"2d\");\n\n    if (context) {\n      const texture = resource.rasterization.texture;\n      cropped.width = texture.width;\n      cropped.height = texture.height;\n      context.imageSmoothingEnabled = false;\n\n      // Draw just the region the label appears into the canvas\n      context.drawImage(\n        canvas.canvas,\n        left,\n        top,\n        texture.width,\n        texture.height,\n        0,\n        0,\n        texture.width,\n        texture.height\n      );\n    } else {\n      console.warn(\n        \"Could not create a canvas 2d context to generate a label's cropped image.\"\n      );\n    }\n\n    return cropped;\n  }\n\n  /**\n   * This actually renders a string to a canvas context using a label's settings\n   */\n  static drawLabel(\n    label: Label,\n    text: string,\n    canvas: CanvasRenderingContext2D,\n    sampleScaling: number\n  ) {\n    // Get the font size we will rasterize with\n    const fontSize = this.getLabelRasterizationFontSize(label, sampleScaling);\n    // Set the color of the label to white so we know what color to look for\n    canvas.fillStyle = \"white\";\n    // Set the font to the canvas\n    canvas.font = this.makeCSSFont(label, sampleScaling);\n    // We will use the canvas measuring tool to give us a baseline for how wide\n    // The label will be. We add the font size to the width for the padding needed to ensure\n    // The entirety of the text is placed on the canvas.\n    canvas.canvas.width = canvas.measureText(label.text).width + fontSize;\n    // Make our test area the font size with one extra level of the font size\n    // For padding.\n    canvas.canvas.height = fontSize * 2.0;\n    // After adjusting the canvas dimensions we must re-set the font metrics\n    // Set the color of the label to white so we know what color to look for\n    canvas.fillStyle = \"white\";\n    // Set the font to the canvas\n    canvas.font = this.makeCSSFont(label, sampleScaling);\n    // Render the text into our canvas for calculating\n    canvas.fillText(text, fontSize / 2.0, fontSize / 4.0 + fontSize);\n  }\n\n  /**\n   * Attempts to populate the 'canvas' context for rendering labels offscreen.\n   */\n  static getContext() {\n    if (!canvas) {\n      const potentialCanvas = document.createElement(\"canvas\").getContext(\"2d\");\n\n      if (potentialCanvas) {\n        canvas = potentialCanvas;\n      }\n\n      return potentialCanvas;\n    }\n\n    return canvas;\n  }\n\n  /**\n   * This retrieves the font size that will be used when rasterizing the label. This takes into\n   * account whether the label is requesting super sampling be present for the rendering.\n   */\n  static getLabelRasterizationFontSize(label: Label, sampleScale: number) {\n    return label.fontSize * sampleScale;\n  }\n\n  /**\n   * Generates the CSS font string based on the label's values\n   */\n  static makeCSSFont(label: Label, sampleScale: number) {\n    return `${label.fontWeight} ${this.getLabelRasterizationFontSize(\n      label,\n      sampleScale\n    )}px ${label.fontFamily}`;\n  }\n\n  /**\n   * This measures the contents of what is inside the canvas assumming the rendered values are only white\n   */\n  static measureContents(canvas: CanvasRenderingContext2D) {\n    const { width, height } = canvas.canvas;\n    const imageData = canvas.getImageData(0, 0, width, height).data;\n    let r;\n\n    let minY = Number.MAX_SAFE_INTEGER;\n    let minX = Number.MAX_SAFE_INTEGER;\n    let maxX = Number.MIN_SAFE_INTEGER;\n    let maxY = Number.MIN_SAFE_INTEGER;\n\n    for (let i = 0; i < width; ++i) {\n      for (let k = 0; k < height; ++k) {\n        const redIndex = k * (width * 4) + i * 4;\n        r = imageData[redIndex];\n\n        if (r > 0.0) {\n          minY = min(minY, k);\n          minX = min(minX, i);\n          maxX = max(maxX, i);\n          maxY = max(maxY, k);\n        }\n      }\n    }\n\n    // The identified pixel needs to be encased and not a direct target\n    minY -= 1;\n    maxY += 2;\n    maxX += 2;\n    minX -= 1;\n\n    minY = max(minY, 0);\n    minX = max(minX, 0);\n\n    return { minX, minY, maxX, maxY };\n  }\n\n  /**\n   * Performs the rendering of the label\n   */\n  static async render(\n    resource: LabelAtlasResource\n  ): Promise<LabelAtlasResource> {\n    // Make sure our canvas object is ready for rendering\n    await this.awaitContext();\n\n    // Validate the label's input\n    if (resource.label.fontSize > MAX_FONT_SIZE) {\n      console.warn(\"Labels only support font sizes up to 50\");\n      return resource;\n    }\n\n    // Calculate all of the label metrics and generate a canvas on the label that can\n    // Be rendered to the canvas.\n    this.calculateLabelSize(resource, resource.sampleScale, true);\n\n    return resource;\n  }\n\n  /**\n   * Performs the rendering of the label\n   */\n  static renderSync(resource: LabelAtlasResource): LabelAtlasResource {\n    // Ensure our offscreen canvas is prepped\n    this.getContext();\n\n    if (!canvas) {\n      console.warn(\n        \"Can not render a label synchronously without the canvas context being ready.\"\n      );\n      return resource;\n    }\n\n    // Validate the label's input\n    if (resource.label.fontSize > MAX_FONT_SIZE) {\n      console.warn(\"Labels only support font sizes up to 50\");\n      return resource;\n    }\n\n    // Calculate all of the label metrics and generate a canvas on the label that can\n    // Be rendered to the canvas.\n    this.calculateLabelSize(resource, resource.sampleScale, true);\n\n    return resource;\n  }\n}\n","import { Image } from \"../../primitives/image\";\nimport { BaseAtlasResource } from \"./base-atlas-resource\";\n\nexport class ImageAtlasResource extends BaseAtlasResource {\n  /** This is the image to be loaded into the atlas */\n  image: Image;\n\n  constructor(image: Image) {\n    super();\n    this.image = image;\n  }\n}\n","import { Color } from \"../../primitives/color\";\nimport { ColorAtlasResource } from \"./color-atlas-resource\";\n\n// When ratserized to the image, this determines the size of the square rendered to the atlas.\nconst COLOR_RASTERIZATION_SIZE = 2;\n\n/**\n * Static class for rasterizing a color to a canvas object\n */\nexport class ColorRasterizer {\n  /**\n   * This loops until our canvas context is available\n   */\n  static async awaitContext(canvas: HTMLCanvasElement) {\n    // Iterate till the browser provides a valid canvas to render elements into\n    for (\n      let c = canvas.getContext(\"2d\"), limit = 0;\n      !Boolean(c) && limit < 100;\n      c = canvas.getContext(\"2d\"), ++limit\n    ) {\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n  }\n\n  /**\n   * Generates the CSS string version of the color\n   */\n  static makeCSS(color: Color) {\n    return `rgba(${Math.floor(color.r * 256)}, ${Math.floor(\n      color.g * 256\n    )}, ${Math.floor(color.b * 256)}, ${color.opacity})`;\n  }\n\n  static async render(resource: ColorAtlasResource) {\n    const canvas = document.createElement(\"canvas\");\n    const context = canvas.getContext(\"2d\");\n\n    await this.awaitContext(canvas);\n\n    if (context) {\n      canvas.width = COLOR_RASTERIZATION_SIZE;\n      canvas.height = COLOR_RASTERIZATION_SIZE;\n      context.imageSmoothingEnabled = false;\n      context.fillStyle = this.makeCSS(resource.color);\n\n      // Draw the color to the fill space\n      context.fillRect(\n        0,\n        0,\n        COLOR_RASTERIZATION_SIZE,\n        COLOR_RASTERIZATION_SIZE\n      );\n      // Update the resource with the rasterization\n      resource.rasterization.canvas = canvas;\n    } else {\n      console.warn(\n        \"Could not create a canvas 2d context to generate a color for rasterization.\"\n      );\n    }\n\n    return resource;\n  }\n}\n","import { Color } from \"../../primitives/color\";\nimport { BaseAtlasResource } from \"./base-atlas-resource\";\n\nexport class ColorAtlasResource extends BaseAtlasResource {\n  /** This is the color to be loaded into the atlas */\n  color: Color;\n\n  constructor(color: Color) {\n    super();\n    this.color = color;\n  }\n}\n","import * as Three from \"three\";\nimport { IPoint } from \"../../primitives/point\";\n\n/**\n * Defines a texture that is located on an atlas\n */\nexport class SubTexture {\n  /** Stores the aspect ratio of the image for quick reference */\n  aspectRatio: number = 1.0;\n  /** The id of the atlas this texture is located on */\n  atlasReferenceID: string = \"\";\n  /** This is the actual texture of the atlas this resource is located on */\n  atlasTexture: Three.Texture | null = null;\n  /** This is the top left UV coordinate of the sub texture on the atlas */\n  atlasTL: IPoint = { x: 0, y: 0 };\n  /** This is the top right UV coordinate of the sub texture on the atlas */\n  atlasTR: IPoint = { x: 0, y: 0 };\n  /** This is the bottom left UV coordinate of the sub texture on the atlas */\n  atlasBL: IPoint = { x: 0, y: 0 };\n  /** This is the bottom right UV coordinate of the sub texture on the atlas */\n  atlasBR: IPoint = { x: 0, y: 0 };\n  /** This is the normalized width of the sub texture on the atlas */\n  widthOnAtlas: number = 0;\n  /** This is the normalized height of the sub texture on the atlas */\n  heightOnAtlas: number = 0;\n  /** This flag is set to false when the underlying texture is no longer valid */\n  isValid: boolean = false;\n  /** Width in pixels of the image on the atlas */\n  pixelWidth: number = 0;\n  /** Height in pixels of the image on the atlas */\n  pixelHeight: number = 0;\n}\n","import * as Three from \"three\";\nimport {\n  IdentifyByKey,\n  IdentifyByKeyOptions\n} from \"../../util/identify-by-key\";\nimport { AtlasManager, AtlasResource } from \"./atlas-manager\";\nimport { PackNode } from \"./pack-node\";\nimport { SubTexture } from \"./sub-texture\";\n\n/**\n * These are valid atlas sizes available. We force a power of 2 to be utilized.\n * We do not allow crazy large sizes as browsers have very real caps on resources.\n * This helps implementations be a little smarter about what they are using. Future\n * versions may increase this number as GPUs improve and standards allow greater\n * flexibility.\n */\nexport enum AtlasSize {\n  _2 = 0x01 << 1,\n  _4 = 0x01 << 2,\n  _8 = 0x01 << 3,\n  _16 = 0x01 << 4,\n  _32 = 0x01 << 5,\n  _64 = 0x01 << 6,\n  _128 = 0x01 << 7,\n  _256 = 0x01 << 8,\n  _512 = 0x01 << 9,\n  _1024 = 0x01 << 10,\n  _2048 = 0x01 << 11,\n  _4096 = 0x01 << 12\n}\n\nexport interface IAtlasOptions extends IdentifyByKeyOptions {\n  /** This is the height of the texture */\n  height: AtlasSize;\n  /** This is the width of the atlas */\n  width: AtlasSize;\n  /**\n   * This applies any desired settings to the Threejs texture as desired.\n   * Some noteable defaults this system sets:\n   *  - generateMipMaps is false and\n   *  - premultiply alpha is true.\n   */\n  textureSettings?: Partial<Three.Texture>;\n}\n\n/**\n * This represents a single Texture on the gpu that is composed of several smaller textures\n * as a 'look up'.\n */\nexport class Atlas extends IdentifyByKey {\n  /** Stores the size of the atlas texture */\n  height: AtlasSize;\n  /** This is the parent manager of the atlas */\n  manager: AtlasManager;\n  /** This is the packing of the  */\n  packing: PackNode;\n  /** This is the actual texture object that represents the atlas on the GPU */\n  texture: Three.Texture;\n  /** These are the applied settings to our texture */\n  textureSettings?: Partial<Three.Texture>;\n  /**\n   * This is all of the resources associated with this atlas. The boolean flag indicates if the resource\n   * is flagged for removal. When set to false, the resource is no longer valid and can be removed from\n   * the atlas at any given moment.\n   */\n  validResources = new Map<AtlasResource, boolean>();\n  /** Stores the size of the atlas texture */\n  width: AtlasSize;\n\n  constructor(options: IAtlasOptions) {\n    super(options);\n    const canvas = document.createElement(\"canvas\");\n    this.width = canvas.width = options.width;\n    this.height = canvas.height = options.height;\n    this.textureSettings = options.textureSettings;\n\n    // Set up the packing for this atlas\n    this.packing = new PackNode(0, 0, options.width, options.height);\n    // Make sure the texture is started and updated\n    this.updateTexture(canvas);\n  }\n\n  /**\n   * This invalidates the SubTexture of an atlas resource.\n   */\n  private invalidateResource(resource: AtlasResource) {\n    const zero = { x: 0, y: 0 };\n    resource.texture.aspectRatio = 1;\n    resource.texture.atlasBL = zero;\n    resource.texture.atlasBR = zero;\n    resource.texture.atlasTL = zero;\n    resource.texture.atlasTR = zero;\n    resource.texture.atlasReferenceID = \"\";\n    resource.texture.pixelWidth = 0;\n    resource.texture.pixelHeight = 0;\n    resource.texture.isValid = false;\n  }\n\n  /**\n   * Sets the parent manager of this atlas\n   */\n  setManager(manager: AtlasManager) {\n    this.manager = manager;\n  }\n\n  /**\n   * Adds a resource to this atlas AND ensures the resource is flagged valid for use.\n   *\n   * @return {boolean} True if the resource successfully registered\n   */\n  registerResource(resource: AtlasResource) {\n    if (this.validResources.get(resource) === undefined) {\n      if (!resource.texture || !resource.texture.isValid) {\n        if (!resource.texture) {\n          resource.texture = new SubTexture();\n        }\n\n        resource.texture.isValid = true;\n        this.validResources.set(resource, true);\n\n        return true;\n      } else {\n        console.warn(\n          \"Atlas Error:\",\n          this.id,\n          \"Attempted to add a resource to an Atlas that is already a valid resource on another atlas.\",\n          \"Consider Creating a new resource to be loaded into this particular atlas.\",\n          \"Resource:\",\n          resource\n        );\n      }\n    } else {\n      console.warn(\n        \"Atlas Error:\",\n        this.id,\n        \"A resource was trying to be added to the atlas that has already been added before.\",\n        \"Consider creating a new resource to indicate what you want loaded to the atlas\",\n        \"Resource:\",\n        resource\n      );\n    }\n\n    return false;\n  }\n\n  /**\n   * This flags a resource from removal from an atlas.\n   *\n   * NOTE: This does not immediately clear the resource fromt he atlas, nor does it even guarantee\n   * the resource will be cleared from the atlas for a while. It merely suggests the resource be removed\n   * and makes the SubTexture invalid. It could be a long while before the atlas gets regnerated and repacked\n   * to actually reflect the resource not existing on the atlas.\n   */\n  removeResource(resource: AtlasResource) {\n    if (this.validResources.get(resource)) {\n      this.validResources.set(resource, false);\n      this.invalidateResource(resource);\n    } else {\n      console.warn(\n        \"Atlas Error:\",\n        this.id,\n        \"Attempted to remove a resource that does not exist on this atlas.\",\n        \"or the resource was already considered invalidated on this atlas.\",\n        \"Resource:\",\n        resource\n      );\n    }\n  }\n\n  /**\n   * TODO:\n   * This performs the currently best known way to update a texture.\n   *\n   * This is the current best attempt at updating the atlas which is junk as it destroys the old texture\n   * And makes a new one. We REALLY should be just subTexture2D updating the texture, but Three makes that really\n   * Difficult\n   */\n  updateTexture(canvas?: HTMLCanvasElement) {\n    if (this.texture) {\n      const redoneCanvas: HTMLCanvasElement = this.texture.image;\n      this.texture.dispose();\n      this.texture = new Three.Texture(redoneCanvas);\n    } else {\n      this.texture = new Three.Texture(canvas);\n    }\n\n    // Apply any relevant options to the texture desired to be set\n    this.texture.generateMipmaps = true;\n    this.texture.premultiplyAlpha = true;\n    this.textureSettings && Object.assign(this.texture, this.textureSettings);\n    this.texture.needsUpdate = true;\n  }\n\n  /**\n   * This frees up all the resources down to the GPU related to this atlas. It also\n   * loops through every resource and invalidates the texturing information within\n   * them so subsequent accidental renders will appear as a single color rather than\n   * an artifacted element.\n   */\n  destroy() {\n    this.texture.dispose();\n    this.validResources.forEach((_isValid, resource) => {\n      this.invalidateResource(resource);\n    });\n  }\n}\n","export * from \"./image-layer\";\nexport * from \"./image-instance\";\n","import { Instance, InstanceDiff } from \"../../../instance-provider\";\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  IBufferLocationGroup\n} from \"../buffer-manager-base\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\n\n/**\n * Base requirements for handling diffs from a layer.\n */\nexport abstract class BaseDiffProcessor<T extends Instance> {\n  layer: IInstanceDiffManagerTarget<T>;\n  bufferManager: BufferManagerBase<T, IBufferLocation>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>\n  ) {\n    this.layer = layer;\n    this.bufferManager = bufferManager;\n  }\n\n  /** Perform an 'add' operation for the instance's buffer */\n  abstract addInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocation?: IBufferLocation | IBufferLocationGroup<IBufferLocation>\n  ): void;\n  /** Perform a 'change' operation for the instance's buffer */\n  abstract changeInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocation?: IBufferLocation | IBufferLocationGroup<IBufferLocation>\n  ): void;\n  /** Perform a 'remove' operation for the instance's buffer */\n  abstract removeInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocation?: IBufferLocation | IBufferLocationGroup<IBufferLocation>\n  ): void;\n\n  /**\n   * This indicates all changes have been applied, this allows the processor to finalize buffer updates\n   */\n  abstract commit(): void;\n  /**\n   * This will be called with the changes that WILL be processed. This allows this processor to make extra judgement calls on\n   * how it will process the changes and let's it optimize itself before changes are actually processed. An example optimization:\n   *\n   * Buffers have an update range we can adjust so only a piece of the buffer is updated. However, calculating that range causes\n   * overhead to calculate the affected range. So, if we have mass changes happening for major sections of the buffer (number of\n   * changes approaches some large percentage of the instances supported by the buffer), then it would be more efficient just to\n   * update the entire buffer rather than discover the portion needing updating.\n   */\n  abstract incomingChangeList(changes: InstanceDiff<T>[]): void;\n}\n","const INSTANCE_UNIFORM_ATTRIBUTE_PREFIX = \"u\";\n\nexport function makeInstanceUniformNameArray() {\n  return `instanceData`;\n}\n\nexport function makeInstanceUniformNameTree(index: number) {\n  return `${INSTANCE_UNIFORM_ATTRIBUTE_PREFIX}${index.toString(31)}`;\n}\n","import { IInstanceAttribute } from \"../../types\";\nimport { Instance } from \"../../util\";\n\nexport function instanceAttributeShaderName<T extends Instance>(\n  attribute: IInstanceAttribute<T>\n) {\n  if (attribute.easing) {\n    return `_${attribute.name}_end`;\n  } else {\n    return attribute.name;\n  }\n}\n","export function getProgramInfo(gl: WebGLRenderingContext, program: any) {\n  const result = {\n      attributeCount: 0,\n      attributes: new Array(),\n      uniformCount: 0,\n      uniforms: new Array()\n    },\n    activeUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS),\n    activeAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n  // Taken from the WebGl spec:\n  // Http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14\n  const enums: { [key: number]: string } = {\n    0x8b50: \"FLOAT_VEC2\",\n    0x8b51: \"FLOAT_VEC3\",\n    0x8b52: \"FLOAT_VEC4\",\n    0x8b53: \"INT_VEC2\",\n    0x8b54: \"INT_VEC3\",\n    0x8b55: \"INT_VEC4\",\n    0x8b56: \"BOOL\",\n    0x8b57: \"BOOL_VEC2\",\n    0x8b58: \"BOOL_VEC3\",\n    0x8b59: \"BOOL_VEC4\",\n    0x8b5a: \"FLOAT_MAT2\",\n    0x8b5b: \"FLOAT_MAT3\",\n    0x8b5c: \"FLOAT_MAT4\",\n    0x8b5e: \"SAMPLER_2D\",\n    0x8b60: \"SAMPLER_CUBE\",\n    0x1400: \"BYTE\",\n    0x1401: \"UNSIGNED_BYTE\",\n    0x1402: \"SHORT\",\n    0x1403: \"UNSIGNED_SHORT\",\n    0x1404: \"INT\",\n    0x1405: \"UNSIGNED_INT\",\n    0x1406: \"FLOAT\"\n  };\n\n  const blocks: { [key: number]: number } = {\n    0x8b50: 1,\n    0x8b51: 1,\n    0x8b52: 1,\n    0x8b53: 1,\n    0x8b54: 1,\n    0x8b55: 1,\n    0x8b56: 1,\n    0x8b57: 1,\n    0x8b58: 1,\n    0x8b59: 1,\n    0x8b5a: 1,\n    0x8b5b: 3,\n    0x8b5c: 4,\n    0x8b5e: 1,\n    0x8b60: 1,\n    0x1400: 1,\n    0x1401: 1,\n    0x1402: 1,\n    0x1403: 1,\n    0x1404: 1,\n    0x1405: 1,\n    0x1406: 1\n  };\n\n  // Loop through active uniforms\n  for (let i = 0; i < activeUniforms; ++i) {\n    const uniform: any = gl.getActiveUniform(program, i);\n    uniform.typeName = enums[uniform.type];\n    result.uniforms.push(uniform);\n    result.uniformCount += uniform.size;\n    uniform.size = uniform.size * blocks[uniform.type];\n  }\n\n  // Loop through active attributes\n  for (let i = 0; i < activeAttributes; i++) {\n    const attribute: any = gl.getActiveAttrib(program, i);\n    attribute.typeName = enums[attribute.type];\n    result.attributes.push(attribute);\n    result.attributeCount += attribute.size;\n  }\n\n  return result;\n}\n\nexport class WebGLStat {\n  static MAX_VERTEX_UNIFORMS = 0;\n  static MAX_FRAGMENT_UNIFORMS = 0;\n  static MAX_VERTEX_ATTRIBUTES = 0;\n  static WEBGL_SUPPORTED: boolean = false;\n  static MAX_TEXTURE_SIZE = 0;\n  static HARDWARE_INSTANCING = false;\n  static HARDWARE_INSTANCING_ANGLE = false;\n}\n\nfunction initStats() {\n  // Let's perform some immediate operations to do some gl querying for useful information\n  function getAContext() {\n    try {\n      const canvas = document.createElement(\"canvas\");\n      return (\n        (window as any).WebGLRenderingContext &&\n        (canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\"))\n      );\n    } catch (e) {\n      return false;\n    }\n  }\n\n  // Attempt to retrieve a context for webgl\n  const gl = getAContext();\n\n  // If the context exists, then we know gl is supported and we can fill in some metrics\n  if (gl) {\n    WebGLStat.WEBGL_SUPPORTED = true;\n    WebGLStat.MAX_VERTEX_UNIFORMS = gl.getParameter(\n      gl.MAX_VERTEX_UNIFORM_VECTORS\n    );\n    WebGLStat.MAX_FRAGMENT_UNIFORMS = gl.getParameter(\n      gl.MAX_FRAGMENT_UNIFORM_VECTORS\n    );\n    WebGLStat.MAX_VERTEX_ATTRIBUTES = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    WebGLStat.MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    WebGLStat.HARDWARE_INSTANCING_ANGLE = Boolean(\n      gl.getExtension(\"ANGLE_instanced_arrays\")\n    );\n    WebGLStat.HARDWARE_INSTANCING = WebGLStat.HARDWARE_INSTANCING_ANGLE;\n  }\n}\n\ninitStats();\n","/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',\n  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',\n  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',\n  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',\n  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',\n  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',\n  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',\n  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',\n  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',\n  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',\n  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // Internet Explorer and Edge do not support colors.\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n    return false;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n","import * as browser from \"bowser\";\nimport { Vector2 } from \"three\";\nconst debug = require(\"debug\")(\"CommunicationsView:Mouse\");\n\n/** Used to adjust the base whee delta for IE browsers */\nconst IE_ADJUSTMENT = 1 / 30;\n/** Used to adjust the rates for IE 11 */\nconst OLD_IE_ADJUSTMENT = -0.25;\n// This determines how large the delta can grow to in firefox\nconst MAX_FIREFOX_WHEELDELTA = 100;\n/**\n * Create a low pass filter memory bank so we can slow down rapid accelerations and let normal slower accelerations pass\n * Common use case for this is the discrepancy in firefox from mousewheels to trackpad scroll speeds\n */\nconst lowPassY: number[] = [0, 0, 0, 0];\n// These coefficients represent the coefficients of a FIR filter.\n// This FIR filter uses the lowPassY as the memory for the filter and is created for\n// The reasons specified for the lowPassY memory. To edit the coefficients, you simply\n// Ensure the coefficients added together === 1.0. If they do not, you may get an unstable\n// Result that goes to infinity rather quickly. Changing the distribution of these coefficients\n// Alters the rate at which the delta can approach MAX_FIREFOX_WHEELDELTA. Explaining exactly\n// How it affects the rate requires an understanding of FIR filters, so unless this is already\n// Known knowledge, it would be faster to just tweak the coefficients until a desired effect is\n// Attained.\nconst LOW_PASS_U0 = 0.02;\nconst LOW_PASS_U1 = 0.1;\nconst LOW_PASS_U2 = 0.18;\nconst LOW_PASS_U3 = 0.7;\n\nfunction normalizeFirefoxWheel(e: MouseWheelEvent) {\n  const wheel: WheelEvent = e;\n  let deltaX = 0;\n  let deltaY = 0;\n\n  // Reset the filter if the direction changes to prevent lag in directional change\n  if (Math.sign(lowPassY[0]) !== Math.sign(deltaY)) {\n    lowPassY.splice(0, lowPassY.length, 0, 0, 0, 0);\n  }\n\n  deltaX = wheel.deltaX * MAX_FIREFOX_WHEELDELTA;\n\n  // Calculate the next value output from the FIR filter\n  deltaY =\n    wheel.deltaY * MAX_FIREFOX_WHEELDELTA * LOW_PASS_U0 +\n    lowPassY[0] * LOW_PASS_U1 +\n    lowPassY[1] * LOW_PASS_U2 +\n    lowPassY[2] * LOW_PASS_U3;\n  // Store the value of the filter in the FIR memory bank\n  lowPassY.unshift(deltaY);\n  // Keep our FIR memory clean and only the size of the number of coefficients\n  lowPassY.pop();\n\n  return new Vector2(-deltaX, -deltaY);\n}\n\nfunction normalizeChromeWheel(e: MouseWheelEvent) {\n  const wheel: WheelEvent = e;\n\n  return new Vector2(wheel.deltaX, -wheel.deltaY);\n}\n\nfunction normalizeIE11Wheel(e: MouseWheelEvent) {\n  const wheel: WheelEvent = e;\n  let deltaX = wheel.deltaX;\n\n  if (deltaX === undefined) {\n    deltaX =\n      wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n  }\n\n  let deltaY = wheel.deltaY;\n\n  if (deltaY === undefined) {\n    if (wheel.wheelDeltaY !== undefined) {\n      deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n    } else {\n      deltaY = (wheel.wheelDelta || -wheel.detail) * OLD_IE_ADJUSTMENT;\n    }\n  }\n\n  return new Vector2(-deltaX, -deltaY);\n}\n\nfunction normalizeIE12Wheel(e: MouseWheelEvent) {\n  const wheel: WheelEvent = e;\n  let { deltaX, deltaY } = wheel;\n\n  if (deltaX === undefined) {\n    deltaX =\n      wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n  }\n\n  if (deltaY === undefined) {\n    if (wheel.wheelDeltaY !== undefined) {\n      deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n    } else {\n      deltaY = wheel.wheelDelta || -wheel.detail;\n    }\n  }\n\n  const v = new Vector2(deltaX, -deltaY);\n  v.multiplyScalar(0.25);\n\n  return v;\n}\n\n// Determine this browsers version of wheel normalization and apply it\nlet normalizeWheel: (e: MouseWheelEvent) => Vector2;\n\nif (browser.firefox) {\n  debug(\"Using mouse wheel for firefox\");\n  normalizeWheel = normalizeFirefoxWheel;\n} else if (browser.msie && +browser.version >= 11) {\n  debug(\"Using mouse wheel for IE 11\");\n  normalizeWheel = normalizeIE11Wheel;\n} else if (browser.msedge) {\n  debug(\"Using mouse wheel for MS EDGE\");\n  normalizeWheel = normalizeIE12Wheel;\n} else {\n  debug(\"Using mouse wheel for Chrome\");\n  normalizeWheel = normalizeChromeWheel;\n}\n\n/**\n * Analyzes a MouseEvent and calculates the mouse coordinates (relative to the element).\n */\nfunction eventElementPosition(\n  e: any,\n  relative?: HTMLElement\n): { x: number; y: number } {\n  let mouseX: number = 0,\n    mouseY: number = 0,\n    eventX: number = 0,\n    eventY: number = 0,\n    object: any =\n      relative || (e.nativeEvent && e.nativeEvent.target) || e.target;\n\n  // Get mouse position on document crossbrowser\n  if (!e) {\n    e = window.event;\n  }\n\n  if (e.pageX || e.pageY) {\n    mouseX = e.pageX;\n    mouseY = e.pageY;\n  } else if (e.clientX || e.clientY) {\n    mouseX =\n      e.clientX +\n      document.body.scrollLeft +\n      document.documentElement.scrollLeft;\n    mouseY =\n      e.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n  }\n\n  // Get parent element position in document\n  if (object.offsetParent) {\n    do {\n      eventX += object.offsetLeft;\n      eventY += object.offsetTop;\n      object = object.offsetParent;\n    } while (object);\n  }\n\n  // Mouse position minus elm position is mouseposition relative to element:\n  return { x: mouseX - eventX, y: mouseY - eventY };\n}\n\nexport { eventElementPosition, normalizeWheel };\n","import { InstanceIOValue } from \"../types\";\nimport { uid } from \"../util/uid\";\nimport { Vec, VecMath } from \"./vector\";\n\nconst { min, max, pow, round, sin, PI } = Math;\nconst GPU_PI = round(PI * 1000) / 1000;\n\nfunction clamp(x: number, minVal: number, maxVal: number) {\n  return min(max(x, minVal), maxVal);\n}\n\nexport enum AutoEasingLoopStyle {\n  /** Time will go from 0 -> 1 then stop at 1 */\n  NONE = 1,\n  /** Time will go from 0 -> infinity */\n  CONTINUOUS = 4,\n  /** Time will continuously go 0 -> 1 then 0 -> 1 then 0 -> 1 etc etc */\n  REPEAT = 2,\n  /** Time will continously go 0 -> 1 then 1 -> 0 then 0 -> 1 then 1 -> 0 etc etc */\n  REFLECT = 3\n}\n\n/**\n * This defines a GPU enabled easing method that will be executed on the GPU to maneuver\n *\n */\nexport interface IAutoEasingMethod<T extends InstanceIOValue> {\n  /** An easing method that should produce IDENTICAL values to the values of the gpu easing method using the exact same parameters */\n  cpu(start: T, end: T, t: number): T;\n  /** This adds a delay to the starting time of an easing change */\n  delay: number;\n  /** This is how long the easing method should last */\n  duration: number;\n  /**\n   * An easing method written in shader language that should produce IDENTICAL\n   * values to the values of the cpu easing method using the exact same parameters.\n   */\n  gpu: string;\n  /**\n   * This defines the looping style of the easing.\n   */\n  loop: AutoEasingLoopStyle;\n  /**\n   * This shall be the name of the easing method as it appears in the spu shader.\n   * BE WARNED: This name is used to dedup the methods created on the shader. So,\n   * if you use the same name as another ease method used on a single layer, you run\n   * the risk of one overriding the other with an undefined chance of who wins.\n   */\n  methodName: string;\n  /**\n   * A unique identifier for the auto easing method.\n   */\n  uid: number;\n\n  /**\n   * This lets you modify some auto easing validation rules.\n   */\n  validation?: {\n    ignoreEndValueCheck?: boolean;\n    ignoreOverTimeCheck?: boolean;\n  };\n}\n\n// GPU easing methods! Written here because it's cleaner to write `` style strings\n// Against the left side of the editor\n\nconst immediateGPU = `\n$\\{easingMethod} {\n  return end;\n}\n`;\n\nconst linearGPU = `\n$\\{easingMethod} {\n  return (end - start) * t + start;\n}\n`;\n\nconst easeInQuadGPU = `\n$\\{easingMethod} {\n  float time = t * t;\n  return (end - start) * time + start;\n}\n`;\n\nconst easeOutQuadGPU = `\n$\\{easingMethod} {\n  float time = t * (2.0 - t);\n  return (end - start) * time + start;\n}\n`;\nconst easeInOutQuadGPU = `\n$\\{easingMethod} {\n  float time = t < 0.5 ? 2.0 * t * t : -1.0 + (4.0 - 2.0 * t) * t;\n  return (end - start) * time + start;\n}\n`;\nconst easeInCubicGPU = `\n$\\{easingMethod} {\n  float time = t * t * t;\n  return (end - start) * time + start;\n}\n`;\nconst easeOutCubicGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float time = t1 * t1 * t1 + 1.0;\n  return (end - start) * time + start;\n}\n`;\nconst easeInOutCubicGPU = `\n$\\{easingMethod} {\n  float time = t < 0.5 ? 4.0 * t * t * t : (t - 1.0) * (2.0 * t - 2.0) * (2.0 * t - 2.0) + 1.0;\n  return (end - start) * time + start;\n}\n`;\nconst easeInQuartGPU = `\n$\\{easingMethod} {\n  float time = t * t * t * t;\n  return (end - start) * time + start;\n}\n`;\nconst easeOutQuartGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float time = 1.0 - t1 * t1 * t1 * t1;\n  return (end - start) * time + start;\n}\n`;\nconst easeInOutQuartGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float time = t < 0.5 ? 8.0 * t * t * t * t : 1.0 - 8.0 * t1 * t1 * t1 * t1;\n  return (end - start) * time + start;\n}\n`;\nconst easeInQuintGPU = `\n$\\{easingMethod} {\n  float time = t * t * t * t * t;\n  return (end - start) * time + start;\n}\n`;\nconst easeOutQuintGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float time = 1.0 + t1 * t1 * t1 * t1 * t1;\n  return (end - start) * time + start;\n}\n`;\nconst easeInOutQuintGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float time = t < 0.5 ? 16.0 * t * t * t * t * t : 1.0 + 16.0 * t1 * t1 * t1 * t1 * t1;\n  return (end - start) * time + start;\n}\n`;\n\nconst easeOutElasticGPU = `\n$\\{easingMethod} {\n  float p = 0.3;\n  float time = pow(2.0, -10.0 * t) * sin((t - p / 4.0) * (2.0 * ${GPU_PI}) / p) + 1.0;\n  return (end - start) * time + start;\n}\n`;\n\nconst easeBackInGPU = `\n$\\{easingMethod} {\n  float time = t * t * t - t * 1.05 * sin(t * ${GPU_PI});\n  return (end - start) * time + start;\n}\n`;\n\nconst easeBackOutGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float a = 1.7;\n  float time = (t1 * t1 * ((a + 1.0) * t1 + a) + 1.0);\n  return (end - start) * time + start;\n}\n`;\n\nconst easeBackInOutGPU = `\n$\\{easingMethod} {\n  float a = 1.4;\n  float a1 = a * 1.525;\n  float t1 = t / 0.5;\n  float t2 = t1 - 2.0;\n  float time =\n    (t1 < 1.0) ? 0.5 * (t1 * t1 * (a1 + 1.0) * t1 - a1) :\n    0.5 * (t2 * t2 * ((a1 + 1.0) * t2 + a1) + 2.0)\n  ;\n\n  return (end - start) * time + start;\n}\n`;\n\nconst continuousSinusoidalGPU = `\n$\\{easingMethod} {\n  $\\{T} direction = end - start;\n  float amplitude = length(direction) * 2.0;\n  return start + direction * sin(t * ${GPU_PI} * 2.0) * amplitude;\n}\n`;\n\n/**\n * Class of base AutoEasingMethods as well as helper constructs for making the methods.\n */\nexport class AutoEasingMethod<T extends InstanceIOValue>\n  implements IAutoEasingMethod<T> {\n  /**\n   * Autoeasing methods for linear easing\n   */\n  static immediate<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (_start: T, end: T, _t: number) => end,\n      delay,\n      duration,\n      gpu: immediateGPU,\n      loop,\n      methodName: \"immediate\"\n    };\n  }\n\n  /**\n   * Autoeasing methods for linear easing\n   */\n  static linear<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        const { add, scale, subtract } = VecMath(start);\n        t = clamp(t, 0, 1);\n        return add(scale(subtract(end, start), t), start);\n      },\n      delay,\n      duration,\n      gpu: linearGPU,\n      loop,\n      methodName: \"linear\"\n    };\n  }\n\n  /**\n   * Auto easing for Accelerating to end\n   */\n  static easeInQuad<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInQuadGPU,\n      loop,\n      methodName: \"easeInQuad\"\n    };\n  }\n\n  /**\n   * Auto easing for decelerating to end\n   */\n  static easeOutQuad<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t * (2 - t);\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeOutQuadGPU,\n      loop,\n      methodName: \"easeOutQuad\"\n    };\n  }\n\n  /**\n   * Auto easing for Accelerate to mid, then decelerate to end\n   */\n  static easeInOutQuad<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInOutQuadGPU,\n      loop,\n      methodName: \"easeInOutQuad\"\n    };\n  }\n\n  /**\n   * Auto easing for Slower acceleration\n   */\n  static easeInCubic<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInCubicGPU,\n      loop,\n      methodName: \"easeInCubic\"\n    };\n  }\n\n  /**\n   * Auto easing for Slower deceleration\n   */\n  static easeOutCubic<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = --t * t * t + 1;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeOutCubicGPU,\n      loop,\n      methodName: \"easeOutCubic\"\n    };\n  }\n\n  /**\n   * Auto easing for Slower acceleration to mid, and slower deceleration to end\n   */\n  static easeInOutCubic<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time =\n          t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInOutCubicGPU,\n      loop,\n      methodName: \"easeInOutCubic\"\n    };\n  }\n\n  /**\n   * Auto easing for even Slower acceleration to end\n   */\n  static easeInQuart<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInQuartGPU,\n      loop,\n      methodName: \"easeInQuart\"\n    };\n  }\n\n  /**\n   * Auto easing for even Slower deceleration to end\n   */\n  static easeOutQuart<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = 1 - --t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeOutQuartGPU,\n      loop,\n      methodName: \"easeOutQuart\"\n    };\n  }\n\n  /**\n   * Auto easing for even Slower acceleration to mid, and even slower deceleration to end\n   */\n  static easeInOutQuart<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInOutQuartGPU,\n      loop,\n      methodName: \"easeInOutQuart\"\n    };\n  }\n\n  /**\n   * Auto easing for super slow accelerating to the end\n   */\n  static easeInQuint<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t * t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInQuintGPU,\n      loop,\n      methodName: \"easeInQuint\"\n    };\n  }\n\n  /**\n   * Auto easing for super slow decelerating to the end\n   */\n  static easeOutQuint<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = 1 + --t * t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeOutQuintGPU,\n      loop,\n      methodName: \"easeOutQuint\"\n    };\n  }\n\n  /**\n   * Auto easing for super slow accelerating to mid and super slow decelerating to the end\n   */\n  static easeInOutQuint<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time =\n          t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInOutQuintGPU,\n      loop,\n      methodName: \"easeInOutQuint\"\n    };\n  }\n\n  /**\n   * Auto easing for elastic effect\n   */\n  static easeOutElastic<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const p = 0.3;\n        const time = pow(2, -10 * t) * sin((t - p / 4) * (2 * PI) / p) + 1;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeOutElasticGPU,\n      loop,\n      methodName: \"easeOutElastic\"\n    };\n  }\n\n  /**\n   * Auto easing for retracting first then shooting to the end\n   */\n  static easeBackIn<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const a = 1.05;\n        const time = t * t * t - t * a * sin(t * PI);\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeBackInGPU,\n      loop,\n      methodName: \"easeBackIn\"\n    };\n  }\n\n  /**\n   * Auto easing for overshooting at the end\n   */\n  static easeBackOut<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const a = 1.7;\n        const t1 = t - 1;\n        const time = t1 * t1 * ((a + 1) * t1 + a) + 1;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeBackOutGPU,\n      loop,\n      methodName: \"easeBackOut\"\n    };\n  }\n\n  /**\n   * Auto easing for overshooting at the end\n   */\n  static easeBackInOut<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const a = 1.7;\n        const a1 = a * 1.525;\n        const t1 = t / 0.5;\n        const t2 = t1 - 2;\n        const time =\n          t1 < 1\n            ? 0.5 * (t1 * t1 * (a1 + 1) * t1 - a1)\n            : 0.5 * (t2 * t2 * ((a1 + 1) * t2 + a1) + 2);\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeBackInOutGPU,\n      loop,\n      methodName: \"easeBackInOut\"\n    };\n  }\n\n  /**\n   * This is an easing method that performs a sinusoidal wave where the amplitude is\n   * (start - end) * 2 and the wave starts at the start value.\n   *\n   * This is intended to work best with the CONTINUOUS loop style.\n   */\n  static continuousSinusoidal<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.CONTINUOUS\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        const { add, length, scale, subtract } = VecMath(start);\n        t = clamp(t, 0, 1);\n        const direction = subtract(end, start);\n        const amplitude = length(direction) * 2.0;\n        return add(start, scale(direction, sin(t * PI * 2) * amplitude));\n      },\n      delay,\n      duration,\n      gpu: continuousSinusoidalGPU,\n      loop,\n      methodName: \"repeatingSinusoidal\",\n\n      // Since this is sinusoidial and operates off of a continuous time structure\n      validation: {\n        // When time = 1 our value will = start and NOT end\n        ignoreEndValueCheck: true,\n        // When the time is > 1 our value will not clamp to the value at 1.\n        ignoreOverTimeCheck: true\n      }\n    };\n  }\n\n  /** A uid for the easing method */\n  uid = uid();\n  /** The easing method for the cpu */\n  cpu: IAutoEasingMethod<T>[\"cpu\"];\n  /** Time before a delay  */\n  delay: number = 0;\n  /** The time in ms is takes to complete the animation */\n  duration: number = 500;\n  /** The easing method on the GPU */\n  gpu: IAutoEasingMethod<T>[\"gpu\"];\n  /** The looping style of the animation */\n  loop = AutoEasingLoopStyle.NONE;\n  /** Method name of the ease function on the gpu */\n  methodName: string;\n\n  constructor(\n    cpu: IAutoEasingMethod<T>[\"cpu\"],\n    gpu: IAutoEasingMethod<T>[\"gpu\"],\n    duration?: number,\n    method?: string\n  ) {\n    this.cpu = cpu;\n    this.gpu = gpu;\n    this.duration = duration || 500;\n    this.methodName = method || \"easingMethod\";\n  }\n}\n","import * as Three from \"three\";\nimport { IMaterialOptions } from \"../types\";\n\nexport class CommonMaterialOptions {\n  static transparentShape: IMaterialOptions = {\n    premultipliedAlpha: true,\n    transparent: true\n  };\n\n  static transparentImage: IMaterialOptions = {\n    blending: Three.CustomBlending,\n    blendSrc: Three.OneFactor,\n    premultipliedAlpha: true,\n    transparent: true\n  };\n}\n","import { IEasingProps } from \"../types\";\nimport { Vec } from \"./vector\";\n\n/**\n * This object represents the data associated with easing. It provides the\n * information needed to make an easing equation execute to completion. It also\n * contains a few methods to aid in properly adjusting the easing values.\n */\nexport class EasingProps implements IEasingProps {\n  delay: number = 0;\n  duration: number;\n  end: Vec;\n  isManualStart = false;\n  isTimeSet = false;\n  start: Vec;\n  startTime: number;\n\n  constructor(options: IEasingProps) {\n    Object.assign(this, options);\n  }\n\n  /**\n   * If you manually set values for the easing properties, then you use this to return\n   * the easing object back to an automated state which is where the start value is\n   * the calculated current position of the output and the delay and duration is determined\n   * by the easing set to the layer's IAutomatedEasingMethod value set to the layer.\n   */\n  setAutomatic() {\n    this.isManualStart = false;\n    this.isTimeSet = false;\n  }\n\n  /**\n   * This controls the start value of the easing. This should be used to force a starting\n   * value of the animation.\n   *\n   * Use setAutomatic() to return to default easing behavior.\n   */\n  setStart(start?: Vec) {\n    if (start) {\n      if (this.start.length !== start.length) {\n        console.warn(\n          \"A manual easing adjustment provided an incompatible value for the easing type.\"\n        );\n      } else {\n        this.start = start;\n        this.isManualStart = true;\n      }\n    }\n  }\n\n  /**\n   * This controls of the timing of the easing equation. This should be used to adjust\n   * when a value is to be adjusted\n   *\n   * Use setAutomatic() to return to default easing behavior.\n   */\n  setTiming(delay?: number, duration?: number) {\n    this.delay = delay === undefined ? this.delay : delay;\n    this.duration = duration === undefined ? this.duration : duration;\n    this.isTimeSet = true;\n  }\n}\n","import * as Three from \"three\";\nimport { Instance } from \"../../instance-provider/instance\";\nimport { InstanceIOValue } from \"../../types\";\nimport { ILayerProps, Layer } from \"../layer\";\nimport { AtlasManager, AtlasResource } from \"./atlas-manager\";\nimport { LabelAtlasResource } from \"./label-atlas-resource\";\nimport { SubTexture } from \"./sub-texture\";\n\nexport interface IAtlasResourceManagerOptions {\n  /** This is the atlas manager that handles operations with our atlas' */\n  atlasManager: AtlasManager;\n}\n\nfunction toInstanceIOValue(texture?: SubTexture): InstanceIOValue {\n  // If the texture is not defined we just output an empty reference\n  if (!texture) {\n    return [0, 0, 0, 0];\n  }\n\n  // Otherwise, we return the atlas information of the texture\n  return [\n    texture.atlasTL.x,\n    texture.atlasTL.y,\n    texture.atlasBR.x,\n    texture.atlasBR.y\n  ];\n}\n\n/**\n * This class is responsible for tracking resources requested to be placed on an Atlas.\n * This makes sure the resource is uploaded and then properly cached so similar requests\n * return already existing resources. This also manages instances waiting for the resource\n * to be made available.\n */\nexport class AtlasResourceManager {\n  /** This is the atlas manager that handles operations with our atlas' */\n  atlasManager: AtlasManager;\n  /** This is the atlas currently targetted by requests */\n  targetAtlas: string = \"\";\n  /** This stores all of the requests awaiting dequeueing */\n  private requestQueue = new Map<string, AtlasResource[]>();\n  /**\n   * This tracks if a resource is already in the request queue. This also stores ALL instances awaiting the resource.\n   */\n  private requestLookup = new Map<\n    string,\n    Map<AtlasResource, [Layer<any, any>, Instance][]>\n  >();\n\n  constructor(options: IAtlasResourceManagerOptions) {\n    this.atlasManager = options.atlasManager;\n  }\n\n  /**\n   * This dequeues all instance requests for a resource and processes the request which will\n   * inevitably make the instance active\n   */\n  async dequeueRequests() {\n    // This flag will be modified to reflect if a dequeue operation has occurred\n    let didDequeue = false;\n\n    for (const [targetAtlas, resources] of Array.from(\n      this.requestQueue.entries()\n    )) {\n      if (resources.length > 0) {\n        // We did dequeue\n        didDequeue = true;\n        // Pull out all of the requests into a new array and empty the existing queue to allow the queue to register\n        // New requests while this dequeue is being processed\n        const requests = resources.slice(0);\n        // Empty the queue to begin taking in new requests as needed\n        resources.length = 0;\n\n        // Tell the atlas manager to update with all of the requested resources\n        await this.atlasManager.updateAtlas(targetAtlas, requests);\n        // Get the requests for the given atlas\n        const atlasRequests = this.requestLookup.get(targetAtlas);\n\n        if (atlasRequests) {\n          // Once the manager has been updated, we can now flag all of the instances waiting for the resources\n          // As active, which should thus trigger an update to the layers to perform a diff for each instance\n          requests.forEach(resource => {\n            const request = atlasRequests.get(resource);\n            atlasRequests.delete(resource);\n\n            if (request) {\n              for (const [layer, instance] of request) {\n                // If the instance is still associated with buffer locations, then the instance can be activated. Having\n                // A buffer location is indicative the instance has not been deleted.\n                if (layer.bufferManager.getBufferLocations(instance)) {\n                  // Make sure the instance is active\n                  instance.active = true;\n                  // Trigger the resource attributes to update\n                  instance.resourceTrigger();\n                }\n              }\n            }\n          });\n        }\n      }\n    }\n\n    return didDequeue;\n  }\n\n  /**\n   * Free ALL resources managed under this resource manager\n   */\n  destroy() {\n    this.atlasManager.destroy();\n  }\n\n  /**\n   * This retrieves the actual atlas texture that should be applied to a uniform's\n   * value.\n   */\n  getAtlasTexture(key: string): Three.Texture | null {\n    const atlas = this.atlasManager.getAtlasTexture(key);\n\n    if (atlas) {\n      return atlas.texture;\n    }\n\n    return null;\n  }\n\n  /**\n   * This is a request for atlas texture resources. It will produce either the coordinates needed to\n   * make valid texture lookups, or it will trigger a loading of resources to an atlas and cause an\n   * automated deactivation and reactivation of the instance.\n   */\n  request<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U>,\n    instance: Instance,\n    resource: AtlasResource\n  ): InstanceIOValue {\n    const texture: SubTexture = resource.texture;\n\n    // If the texture is ready and available, then we simply return the IO values\n    if (texture) {\n      return toInstanceIOValue(texture);\n    }\n\n    if (resource instanceof LabelAtlasResource) {\n      if (!resource.label.text) {\n        return toInstanceIOValue(texture);\n      }\n    }\n\n    // If a request is already made, then we must save the instance making the request for deactivation and\n    // Reactivation but without any additional atlas loading\n    let atlasRequests = this.requestLookup.get(this.targetAtlas);\n\n    if (atlasRequests) {\n      const existingRequests = atlasRequests.get(resource);\n\n      if (existingRequests) {\n        existingRequests.push([layer, instance]);\n        instance.active = false;\n\n        return toInstanceIOValue(texture);\n      }\n    } else {\n      atlasRequests = new Map();\n      this.requestLookup.set(this.targetAtlas, atlasRequests);\n    }\n\n    // If the texture is not available, then we must load the resource, deactivate the instance\n    // And wait for the resource to become available. Once the resource is available, the system\n    // Must activate the instance to render the resource.\n    instance.active = false;\n    let requests = this.requestQueue.get(this.targetAtlas);\n\n    if (!requests) {\n      requests = [];\n      this.requestQueue.set(this.targetAtlas, requests);\n    }\n\n    requests.push(resource);\n    atlasRequests.set(resource, [[layer, instance]]);\n\n    // This returns essentially returns blank values for the resource lookup\n    return toInstanceIOValue(texture);\n  }\n\n  /**\n   * This is used by the system to target the correct atlas for subsequent requests to a resource.\n   */\n  setTargetAtlas(target: string) {\n    this.targetAtlas = target;\n  }\n}\n","import { Bounds } from \"../primitives/bounds\";\nimport { IPoint } from \"../primitives/point\";\n\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nconst maxPopulation: number = 5;\nconst maxDepth: number = 10;\n\nexport interface IQuadItem {\n  area: number;\n  bottom: number;\n  height: number;\n  left: number;\n  mid: IPoint;\n  right: number;\n  top: number;\n  width: number;\n  x: number;\n  y: number;\n\n  containsPoint(point: IPoint): boolean;\n  encapsulate(item: IQuadItem): boolean;\n  fits(item: IQuadItem): 0 | 1 | 2;\n  hitBounds(item: IQuadItem): boolean;\n  isInside(item: IQuadItem): boolean;\n}\n\n/**\n * This filters a quad tree query by type\n *\n * @export\n * @template T\n */\nexport function filterQuery<T extends IQuadItem>(\n  type: Function[],\n  queryValues: IQuadItem[]\n): T[] {\n  const filtered: T[] = [];\n\n  queryValues.forEach((obj: IQuadItem) => {\n    if (type.find(t => obj instanceof t)) {\n      filtered.push(obj as T);\n    }\n  });\n\n  return filtered;\n}\n\n/**\n * Allows typing of a callback argument\n */\nexport interface IVisitFunction<T extends IQuadItem> {\n  /**\n   * A callback to use during add or query\n   *\n   * Called do provide aggregation or filtering like Array.reduce or\n   * Array.filter, but in a QuadTree instead.\n   *\n   * @param node  The node to effect the function upon\n   * @param child The child to add to the node\n   */\n  (node: Node<T>, child?: IQuadItem): void;\n}\n\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n *\n * @class Quadrants\n */\nexport class Quadrants<T extends IQuadItem> {\n  TL: Node<T>;\n  TR: Node<T>;\n  BL: Node<T>;\n  BR: Node<T>;\n\n  /**\n   * Ensures all memory is released for all nodes and all references are removed\n   * to potentially high memory consumption items\n   *\n   * @memberOf Quadrants\n   */\n  destroy() {\n    this.TL.destroy();\n    this.TR.destroy();\n    this.BL.destroy();\n    this.BR.destroy();\n    delete this.TL;\n    delete this.TR;\n    delete this.BL;\n    delete this.BR;\n  }\n\n  /**\n   * Creates an instance of Quadrants.\n   *\n   * @param bounds The bounds this will create quandrants for\n   * @param depth  The child depth of this element\n   *\n   * @memberOf Quadrants\n   */\n  constructor(bounds: IQuadItem, depth: number) {\n    const mid = bounds.mid;\n    this.TL = new Node<T>(bounds.x, mid.x, bounds.y, mid.y, depth);\n    this.TR = new Node<T>(mid.x, bounds.right, bounds.y, mid.y, depth);\n    this.BL = new Node<T>(bounds.x, mid.x, mid.y, bounds.bottom, depth);\n    this.BR = new Node<T>(mid.x, bounds.right, mid.y, bounds.bottom, depth);\n  }\n}\n\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n *\n * @export\n * @class Node\n */\nexport class Node<T extends IQuadItem> {\n  bounds: Bounds;\n  children: T[] = [];\n  depth: number = 0;\n  nodes: Quadrants<T>;\n\n  /**\n   * Destroys this node and ensures all child nodes are destroyed as well.\n   *\n   * @memberOf Node\n   */\n  destroy() {\n    delete this.children;\n    delete this.bounds;\n\n    if (this.nodes) {\n      this.nodes.destroy();\n      delete this.nodes;\n    }\n  }\n\n  /**\n   * Creates an instance of Node.\n   *\n   * @param l     The bounding left wall of the space this node covers\n   * @param r     The bounding right wall of the space this node covers\n   * @param t     The bounding top wall of the space this node covers\n   * @param b     The bounding bottom wall of the space this node covers\n   * @param depth The depth within the quad tree this node resides\n   *\n   * @memberOf Node\n   */\n  constructor(\n    left: number,\n    right: number,\n    top: number,\n    bottom: number,\n    depth?: number\n  ) {\n    // If params insertted\n    if (arguments.length >= 4) {\n      this.bounds = new Bounds({\n        height: top - bottom,\n        width: right - left,\n        x: left,\n        y: top\n      });\n    }\n\n    // Otherwise, make tiny start area\n    else {\n      this.bounds = new Bounds({\n        height: 1,\n        width: 1,\n        x: 0,\n        y: 0\n      });\n    }\n\n    // Ensure the depth is set\n    this.depth = depth || 0;\n  }\n\n  /**\n   * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n   * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n   * this quad tree spans (and this is the root node), the quad tree will expand to include\n   * the new child.\n   *\n   * @param child The Bounds type object to inject\n   * @param props Properties that can be retrieved with the child object if applicable\n   *\n   * @returns True if the insertion was successful\n   *\n   * @memberOf Node\n   */\n  add(child: T, props: any): boolean {\n    // This is the entry function for adding children, so we must first expand our top node\n    // To cover the area that the child is located.\n    // If we're in bounds, then let's just add the child\n    if (child.isInside(this.bounds)) {\n      return this.doAdd(child);\n    }\n\n    // Otherwise, we need to expand first\n    else {\n      this.cover(child);\n      return this.add(child, props);\n    }\n  }\n\n  /**\n   * Adds a list of new children to this quad tree. It performs the same operations as\n   * addChild for each child in the list, however, it more efficiently recalculates the\n   * bounds necessary to cover the area the children cover.\n   *\n   * @param children      List of Bounds objects to inject\n   * @param childrenProps List of props to associate with each element\n   *\n   * @memberOf Node\n   */\n  addAll(children: T[], childrenProps?: any[]) {\n    // Ensure the properties are at least defined\n    childrenProps = childrenProps || [];\n\n    // Make sure we cover the entire area of all the children.\n    // We can speed this up a lot if we first calculate the total bounds the new children covers\n    let minX = Number.MAX_VALUE;\n    let minY = Number.MAX_VALUE;\n    let maxX = -Number.MAX_VALUE;\n    let maxY = -Number.MAX_VALUE;\n\n    // Get the dimensions of the new bounds\n    children.forEach(child => {\n      if (child.x < minX) {\n        minX = child.x;\n      }\n      if (child.right > maxX) {\n        maxX = child.right;\n      }\n      if (child.bottom > maxY) {\n        maxY = child.bottom;\n      }\n      if (child.y < minY) {\n        minY = child.y;\n      }\n    });\n\n    // Make sure our bounds includes the specified bounds\n    this.cover(\n      new Bounds({\n        height: maxY - minY,\n        width: maxX - minX,\n        x: minX,\n        y: minY\n      })\n    );\n\n    // Add all of the children into the tree\n    children.forEach(child => this.doAdd(child));\n  }\n\n  /**\n   * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n   * This will cause all children to be re-injected into the tree.\n   *\n   * @param bounds The bounds to include in the tree's coverage\n   *\n   * @memberOf Node\n   */\n  cover(bounds: IQuadItem) {\n    // If we are already covering the area: abort\n    if (bounds.isInside(this.bounds)) {\n      return;\n    }\n\n    // Make our bounds cover the new area\n    this.bounds.encapsulate(bounds);\n    this.bounds.x -= 1;\n    this.bounds.y -= 1;\n    this.bounds.width += 2;\n    this.bounds.height += 4;\n    // Get all of the children underneath this node\n    const allChildren = this.gatherChildren([]);\n\n    // Destroy the split nodes\n    if (this.nodes) {\n      // Completely...destroy...\n      this.nodes.destroy();\n      delete this.nodes;\n    }\n\n    // Reinsert all children with the new dimensions in place\n    allChildren.forEach(child => this.doAdd(child));\n  }\n\n  /**\n   * When adding children, this performs the actual action of injecting the child into the tree\n   * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n   *\n   * @param child The Bounds item to inject into the tree\n   * @param props The props to remain associated with the child\n   *\n   * @returns True if the injection was successful\n   *\n   * @memberOf Node\n   */\n  doAdd(child: T): boolean {\n    // If nodes are present, then we have already exceeded the population of this node\n    if (this.nodes) {\n      if (child.isInside(this.nodes.TL.bounds)) {\n        return this.nodes.TL.doAdd(child);\n      }\n\n      if (child.isInside(this.nodes.TR.bounds)) {\n        return this.nodes.TR.doAdd(child);\n      }\n\n      if (child.isInside(this.nodes.BL.bounds)) {\n        return this.nodes.BL.doAdd(child);\n      }\n\n      if (child.isInside(this.nodes.BR.bounds)) {\n        return this.nodes.BR.doAdd(child);\n      }\n\n      // Otherwise, this is a child overlapping this border\n      this.children.push(child);\n\n      return true;\n    }\n\n    // Otherwise, we have not had a split due to population limits being exceeded\n    else if (child.isInside(this.bounds)) {\n      this.children.push(child);\n\n      // If we exceeded our population for this quadrant, it is time to split up\n      if (this.children.length > maxPopulation && this.depth < maxDepth) {\n        this.split();\n      }\n\n      return true;\n    }\n\n    // This is when there is something wrong with the insertted child. The bounds\n    // For the quad should have grown without issue, but in this case the bounds\n    // Could not grow to accomodate the child.\n    if (isNaN(child.width + child.height + child.x + child.y)) {\n      console.error(\n        \"Child did not fit into bounds because a dimension is NaN\",\n        child\n      );\n    } else if (child.area === 0) {\n      console.error(\n        \"Child did not fit into bounds because the area is zero\",\n        child\n      );\n    }\n\n    // Don't insert the child and continue\n    return true;\n  }\n\n  /**\n   * Collects all children of all the current and sub nodes into a single list.\n   *\n   * @param list The list we must aggregate children into\n   *\n   * @return The list specified as the list parameter\n   */\n  gatherChildren(list: T[]): T[] {\n    list = list.concat(this.children);\n\n    if (this.nodes) {\n      this.nodes.TL.gatherChildren(list);\n      this.nodes.TR.gatherChildren(list);\n      this.nodes.BL.gatherChildren(list);\n      this.nodes.BR.gatherChildren(list);\n    }\n\n    return list;\n  }\n\n  /**\n   * Entry query for determining query type based on input object\n   *\n   * @param bounds Can be a Bounds or a Point object\n   * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n   *               information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return An array of children that intersects with the query\n   */\n  query(bounds: IQuadItem | IPoint, visit?: IVisitFunction<T>): T[] {\n    // Query a rectangle\n    if (bounds instanceof Bounds) {\n      if (bounds.hitBounds(this.bounds)) {\n        return this.queryBounds(bounds, [], visit);\n      }\n\n      // Return an empty array when nothing is collided with\n      return [];\n    }\n\n    // Query a point\n    if (this.bounds.containsPoint(bounds)) {\n      return this.queryPoint(bounds, [], visit);\n    }\n\n    // Return an empty array when nothing is collided with\n    return [];\n  }\n\n  /**\n   * Queries children for intersection with a bounds object\n   *\n   * @param b     The Bounds to test children against\n   * @param list  The list of children to aggregate into the query\n   * @param visit A callback function that will receive the Node as it is analyzed. This gives\n   *              information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return     Returns the exact same list that was input as the list param\n   */\n  queryBounds(b: IQuadItem, list: T[], visit?: IVisitFunction<T>): T[] {\n    this.children.forEach(c => {\n      if (c.hitBounds(b)) {\n        list.push(c);\n      }\n    });\n\n    if (visit) {\n      visit(this);\n    }\n\n    if (this.nodes) {\n      if (b.hitBounds(this.nodes.TL.bounds)) {\n        this.nodes.TL.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.TR.bounds)) {\n        this.nodes.TR.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.BL.bounds)) {\n        this.nodes.BL.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.BR.bounds)) {\n        this.nodes.BR.queryBounds(b, list, visit);\n      }\n    }\n\n    return list;\n  }\n\n  /**\n   * Queries children for intersection with a point\n   *\n   * @param p     The Point to test children against\n   * @param list  The list of children to aggregate into the query\n   * @param visit A callback function that will receive the Node as it is analyzed. This gives\n   *              information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return      Returns the exact same list that was input as the list param\n   */\n  queryPoint(p: any, list: T[], visit?: IVisitFunction<T>): T[] {\n    this.children.forEach(c => {\n      if (c.containsPoint(p)) {\n        list.push(c);\n      }\n    });\n\n    if (visit) {\n      visit(this);\n    }\n\n    if (this.nodes) {\n      if (this.nodes.TL.bounds.containsPoint(p)) {\n        this.nodes.TL.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.TR.bounds.containsPoint(p)) {\n        this.nodes.TR.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.BL.bounds.containsPoint(p)) {\n        this.nodes.BL.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.BR.bounds.containsPoint(p)) {\n        this.nodes.BR.queryPoint(p, list, visit);\n      }\n    }\n\n    return list;\n  }\n\n  /**\n   * Creates four sub quadrants for this node.\n   */\n  split() {\n    // Gather all items to be handed down\n    const allChildren = this.gatherChildren([]);\n    // Gather all props for the children to be handed down as well\n    this.nodes = new Quadrants<T>(this.bounds, this.depth + 1);\n\n    this.children = [];\n\n    while (allChildren.length > 0) {\n      const child = allChildren.pop();\n      if (child) this.doAdd(child);\n    }\n  }\n\n  /**\n   * Traverses the quad tree returning every quadrant encountered\n   *\n   * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n   */\n  visit(cb: IVisitFunction<T>): void {\n    const finished = Boolean(cb(this));\n\n    if (this.nodes && !finished) {\n      this.nodes.TL.visit(cb);\n      this.nodes.TR.visit(cb);\n      this.nodes.BL.visit(cb);\n      this.nodes.BR.visit(cb);\n    }\n  }\n}\n\nexport class QuadTree<T extends IQuadItem> extends Node<T> {}\n","/**\n * The purpose of this file and processes is to take a layers attributes and\n * instance attributes and optimally pack them into blocks. As it should be known\n * an attribute and a uniform is limited by the hardware in 'blocks'. Each block\n * for webgl 1.0 is 4 floats. If you use a single float and not the rest, you have\n * used an entire block.\n *\n * Thus, we pack down the attributes into appropriate block indices and slots.\n */\n\nimport { IInstanceAttribute, InstanceAttributeSize } from \"../../types\";\nimport { Instance } from \"../../util\";\n\n/**\n * A quick representation of an available block with a convenience method to easily apply\n * metrics to an attribute if it fits.\n */\nclass Block<T extends Instance> {\n  index: number = 0;\n  available: number = 4;\n\n  constructor(blockIndex: number) {\n    this.index = blockIndex;\n  }\n\n  setAttribute(attr: IInstanceAttribute<T>) {\n    if ((attr.size || 0) <= this.available) {\n      attr.block = this.index;\n      attr.blockIndex = 4 - this.available;\n      this.available -= attr.size || 0;\n\n      return true;\n    }\n\n    return false;\n  }\n}\n\n/**\n * This loops through all attributes and ensures each attribute is applied\n */\nfunction ensureSizes<T extends Instance>(attributes: IInstanceAttribute<T>[]) {\n  attributes.forEach(attr => {\n    if (attr.atlas) {\n      attr.size = InstanceAttributeSize.FOUR;\n    }\n\n    // If the size of the attribute is not determiend at this point, we do our best\n    // to find it by whatever means possible\n    if (!attr.size) {\n      try {\n        // We inject a very phoney instance, we don't need accurate data, we will be happy if we get\n        // an array of undefineds which should be in line with the size of the attribute.\n        const check = attr.update(new Instance({}) as T);\n\n        // We see if the output is sane\n        if (check.length > 0 && check.length <= InstanceAttributeSize.FOUR) {\n          attr.size = check.length;\n        }\n      } catch (err) {\n        console.warn(\n          \"The system could not determine the size of the provided attribute. Please provide the size of the attribute:\",\n          attr\n        );\n      }\n    }\n  });\n}\n\n/**\n * This is the packing method that calculates the block and block index best suited for an attribute\n * so a layer developer does not have to worry about it.\n */\nexport function packAttributes<T extends Instance>(\n  attributes: IInstanceAttribute<T>[]\n) {\n  // First make sure each attribute has a size\n  ensureSizes(attributes);\n  // Keep a list of the blocks we have decided needs to be in use\n  const blocks = [new Block(0)];\n\n  // Loop through all attributes and pack em' in\n  attributes.forEach(attr => {\n    // Look for a block that can fit our attribute\n    const block = blocks.find(block => {\n      if (block.setAttribute(attr)) {\n        return Boolean(block);\n      }\n\n      return false;\n    });\n\n    // If our attribute did not fit into any of the existing blocks, then we must create a new block\n    // to stuff our attribute into.\n    if (!block) {\n      const newBlock = new Block(blocks.length);\n      blocks.push(newBlock);\n\n      if (!newBlock.setAttribute(attr)) {\n        console.warn(\n          \"There was a problem packing an attribute into a block. No block would accommodate it:\",\n          attr\n        );\n      }\n    }\n  });\n}\n","import { Instance } from \"../../instance-provider/instance\";\nimport {\n  IEasingInstanceAttribute,\n  IEasingProps,\n  IInstanceAttribute,\n  InstanceAttributeSize\n} from \"../../types\";\nimport { AutoEasingLoopStyle } from \"../../util\";\nimport { EasingProps } from \"../../util/easing-props\";\nimport { ILayerProps, Layer } from \"../layer\";\n\nconst { abs } = Math;\n\n/**\n * Tests an attribute to see if it is an easing attribute\n */\nfunction isEasingAttribute<T extends Instance>(\n  attr: any\n): attr is IEasingInstanceAttribute<T> {\n  return Boolean(attr) && attr.easing && attr.size !== undefined;\n}\n\n/**\n * This modifies the instance attributes in a way that produces enough attributes to handle the easing equations\n * being performed on the gpu.\n */\nexport function generateEasingAttributes<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(layer: Layer<T, U>, instanceAttributes: IInstanceAttribute<T>[]) {\n  const usedInstanceAttributes = new Set<number>();\n  const easingAttributes: IEasingInstanceAttribute<T>[] = [];\n\n  // We gather all of the easing attributes first so we can modify the attribute array\n  // On next pass\n  for (const attribute of instanceAttributes) {\n    if (isEasingAttribute(attribute)) {\n      easingAttributes.push(attribute);\n    }\n  }\n\n  const easingIds: { [key: string]: number } = {};\n  layer.easingId = easingIds;\n\n  // Now loop through each easing attribute and generate attributes needed for the easing method\n  for (const attribute of easingAttributes) {\n    const { cpu: easing, loop, uid: providedUID } = attribute.easing;\n    const { name, size, update } = attribute;\n    const easingUID = providedUID;\n\n    // Make our easing ID lookup so instances can access their easing information for higher level\n    // animation control.\n    easingIds[attribute.name] = easingUID;\n\n    // Ensure the AutoEasing method is unique\n    if (usedInstanceAttributes.has(easingUID)) {\n      console.error(\n        \"Undefined behavior occurs if you reuse an IAutoEasingMethod. Please ensure you are using uid() from the util to give the IAutoEasingMethod its uid, or just use the default provided methods\"\n      );\n    }\n\n    // Flag the uid of the easing method as used\n    usedInstanceAttributes.add(easingUID);\n    // We keep this in a scope above the update as we utilize the fact that the attributes will update\n    // In order for a single instance to our advantage.\n    let easingValues: IEasingProps;\n\n    // Hijack the update from the attribute to a new update method which will\n    // Be able to interact with the values for the easing methodology\n    attribute.update = instance => {\n      // We retrieve properties that we want to be dynamic from the easing equation\n      const {\n        delay: attributeDelay,\n        duration: attributeDuration\n      } = attribute.easing;\n\n      // First get the value that is to be our new destination\n      const end = update(instance);\n      const currentTime = layer.surface.frameMetrics.currentTime;\n\n      // Get the easing values specific to an instance.\n      let values = instance.easing.get(easingUID);\n\n      // If the easing values do not exist yet, make them now\n      if (!values) {\n        values = new EasingProps({\n          duration: attributeDuration,\n          end,\n          start: end,\n          startTime: currentTime\n        });\n\n        // Make sure the instance contains the current easing values\n        instance.easing.set(easingUID, easingValues);\n      }\n\n      // Assign the established values\n      easingValues = values;\n\n      let duration = attributeDuration;\n      let delay = attributeDelay;\n\n      if (easingValues.isTimeSet) {\n        duration = easingValues.duration || attributeDuration;\n        delay = easingValues.delay || 0;\n      }\n\n      if (!easingValues.isManualStart) {\n        // Previous position time value\n        let timeValue = 1;\n\n        switch (loop) {\n          // Continuous means we start at 0 and let the time go to infinity\n          case AutoEasingLoopStyle.CONTINUOUS:\n            timeValue = (currentTime - easingValues.startTime) / duration;\n            break;\n\n          // Repeat means going from 0 to 1 then 0 to 1 etc etc\n          case AutoEasingLoopStyle.REPEAT:\n            timeValue = ((currentTime - easingValues.startTime) / duration) % 1;\n            break;\n\n          // Reflect means going from 0 to 1 then 1 to 0 then 0 to 1 etc etc\n          case AutoEasingLoopStyle.REFLECT:\n            const timePassed =\n              (currentTime - easingValues.startTime) / duration;\n            // This is a triangle wave for an input\n            timeValue = abs((timePassed / 2.0) % 1 - 0.5) * 2.0;\n            break;\n\n          // No loop means just linear time\n          case AutoEasingLoopStyle.NONE:\n          default:\n            timeValue = (currentTime - easingValues.startTime) / duration;\n            break;\n        }\n\n        // Now get the value of where our instance currently is located this frame\n        easingValues.start = easing(\n          easingValues.start,\n          easingValues.end,\n          timeValue\n        );\n      }\n\n      // Set the current time as the start time of our animation\n      easingValues.startTime = currentTime + delay;\n      // Set the provided value as our destination\n      easingValues.end = end;\n\n      return end;\n    };\n\n    // The attribute is going to generate some child attributes\n    attribute.childAttributes = [];\n\n    // Find a slot available for our new start value\n    const startAttr: IInstanceAttribute<T> = {\n      name: `_${name}_start`,\n      parentAttribute: attribute,\n      size,\n      update: _o => easingValues.start\n    };\n\n    attribute.childAttributes.push(startAttr);\n    instanceAttributes.push(startAttr);\n\n    // Find a slot available for our new start time\n    const startTimeAttr: IInstanceAttribute<T> = {\n      name: `_${name}_start_time`,\n      parentAttribute: attribute,\n      size: InstanceAttributeSize.ONE,\n      update: _o => [easingValues.startTime]\n    };\n\n    attribute.childAttributes.push(startTimeAttr);\n    instanceAttributes.push(startTimeAttr);\n\n    // Find a slot available for our duration\n    const durationAttr: IInstanceAttribute<T> = {\n      name: `_${name}_duration`,\n      parentAttribute: attribute,\n      size: InstanceAttributeSize.ONE,\n      update: _o => [easingValues.duration]\n    };\n\n    attribute.childAttributes.push(durationAttr);\n    instanceAttributes.push(durationAttr);\n  }\n}\n","import { DataBounds } from \"../util/data-bounds\";\nimport { Bounds } from \"./bounds\";\n\n/**\n * Anytime this is used to express bounds of an object, it is expected\n * to behave like CSS styling with absolute positioning.\n *\n * Setting a left and a right will auto calculate width (setting width takes precedence)\n *\n * You can set numbers to a %. If no % is present all other characters will be ignored\n * (px, em, and other dimensions will not be supported...just px by default unless %)\n */\nexport type AbsolutePosition = {\n  bottom?: number | string;\n  height?: number | string;\n  left?: number | string;\n  right?: number | string;\n  top?: number | string;\n  width?: number | string;\n};\n\nfunction value(val: number | string, ref: number, scaleRatio: number) {\n  const parse = `${val}`;\n  const num = parseFloat(parse);\n\n  if (isNaN(num)) {\n    return 0;\n  }\n\n  // If this is a percentage use the reference as the num to multiply against\n  if (parse.indexOf(\"%\") > -1) {\n    return num / 100.0 * ref;\n  }\n\n  return num * scaleRatio;\n}\n\n/**\n * This evaluates an absolute position with a reference to produce meaningful bounds.\n *\n * The scaleRatio provided should be available in or for percents to have the same weighting\n * as whole number values.\n */\nexport function getAbsolutePositionBounds<T>(\n  item: AbsolutePosition,\n  reference: Bounds,\n  scaleRatio: number\n): DataBounds<T> {\n  if (reference.width === 0 || reference.height === 0) {\n    console.warn(\n      \"An AbsolutePosition evaluated to invalid dimensions.\",\n      \"Please ensure that the object provided and the reference has valid dimensions\",\n      \"to produce dimensions with width and height that are non-zero.\",\n      \"item:\",\n      item,\n      \"reference:\",\n      reference.toString()\n    );\n  }\n\n  const bounds = DataBounds.emptyBounds<T>();\n  let width;\n  let height;\n\n  // Calculate the horizontal values\n  if (item.width) {\n    bounds.width = value(item.width, reference.width, scaleRatio);\n\n    if (item.left !== undefined) {\n      bounds.x = value(item.left, reference.width, scaleRatio);\n    } else if (item.right !== undefined) {\n      bounds.x =\n        reference.width -\n        value(item.right, reference.width, scaleRatio) -\n        bounds.width;\n    }\n  } else {\n    const left = value(item.left || 0, reference.width, scaleRatio);\n    const right =\n      reference.width - value(item.right || 0, reference.width, scaleRatio);\n    width = right - left;\n\n    if (width < 0) {\n      console.warn(\n        \"An AbsolutePosition evaluated to invalid dimensions.\",\n        \"Please ensure that the object provided and the reference has valid dimensions\",\n        \"to produce dimensions with width and height that are greater than zero.\",\n        \"item:\",\n        item,\n        \"reference:\",\n        reference.toString()\n      );\n    }\n\n    bounds.x = left;\n    bounds.width = width;\n  }\n\n  // Calculate the vertical values\n  if (item.height) {\n    bounds.height = value(item.height, reference.height, scaleRatio);\n\n    if (item.top !== undefined) {\n      bounds.y = value(item.top, reference.height, scaleRatio);\n    } else if (item.bottom !== undefined) {\n      bounds.y =\n        reference.height -\n        value(item.bottom, reference.height, scaleRatio) -\n        bounds.height;\n    }\n  } else {\n    const top = value(item.top || 0, reference.height, scaleRatio);\n    const bottom =\n      reference.height - value(item.bottom || 0, reference.height, scaleRatio);\n    height = bottom - top;\n\n    if (height === undefined || height < 0) {\n      console.warn(\n        \"An AbsolutePosition evaluated to invalid dimensions.\",\n        \"Please ensure that the object provided and the reference has valid dimensions\",\n        \"to produce dimensions with width and height that are greater than zero.\",\n        \"item:\",\n        item,\n        \"reference:\",\n        reference.toString()\n      );\n    }\n\n    bounds.y = top;\n    bounds.height = height;\n  }\n\n  if (\n    bounds.width === 0 ||\n    bounds.height === 0 ||\n    isNaN(bounds.x + bounds.y + bounds.width + bounds.height)\n  ) {\n    bounds.x = 0;\n    bounds.y = 0;\n    bounds.width = reference.width;\n    bounds.height = reference.height;\n  }\n\n  return bounds;\n}\n","import { IPoint } from \"../../primitives/point\";\nimport { IProjection, PickType } from \"../../types\";\nimport { EventManager } from \"../event-manager\";\nimport { Layer } from \"../layer\";\nimport { LayerSurface } from \"../layer-surface\";\nimport {\n  IDragMetrics,\n  IMouseInteraction,\n  SceneView\n} from \"../mouse-event-manager\";\n\nfunction isDefined<T>(val: T | null | undefined): val is T {\n  return Boolean(val);\n}\n\n/**\n * This class is an injected event manager for the surface, it specifically handles taking in mouse events intended for view interactions\n * and broadcasts them to the layers that have picking enabled, thus allowing the layers to respond to\n * mouse view locations and broadcast Instance interactions based on the interaction with the View the layer is a part of\n *\n * In Summary: This is an adapter that takes in interactions to the views and injects those events into the layers associated with\n * the views so that the layers can translate the events to gestures.\n */\nexport class LayerMouseEvents extends EventManager {\n  /** This tracks which views have the mouse over them so we can properly broadcast view is out events */\n  isOver = new Map<SceneView, boolean>();\n  /** This is the surface this manager is aiding with broadcasting events to layers */\n  sceneViews: SceneView[];\n  /**\n   * This is the surface this LayerMouseEvent Controller is operating on behalf of. We use this to trigger,\n   * pre-layer processing items, such as color pick narrowing prior to the Layers receiving the event.\n   */\n  surface: LayerSurface;\n\n  constructor(surface: LayerSurface) {\n    super();\n    this.surface = surface;\n    this.sceneViews = surface.sceneViews;\n  }\n\n  getSceneViewsUnderMouse(e: IMouseInteraction) {\n    const sceneViewByViewId = new Map<string, SceneView>();\n\n    // Map the scene views by the view's identifiers\n    for (const sceneView of this.sceneViews) {\n      sceneViewByViewId.set(sceneView.view.id, sceneView);\n    }\n\n    // Now retrieve and convert each view under the mouse to the scene view it coincides with\n    return e.viewsUnderMouse\n      .map(viewItem => sceneViewByViewId.get(viewItem.view.id))\n      .filter(isDefined);\n  }\n\n  getMouseByViewId(e: IMouseInteraction) {\n    // This is the mouse position for the provided view in view space\n    const viewMouseByViewId = new Map<string, IPoint>();\n\n    for (const viewItem of e.viewsUnderMouse) {\n      viewMouseByViewId.set(viewItem.view.id, viewItem.mouse);\n    }\n\n    return viewMouseByViewId;\n  }\n\n  handleClick(e: IMouseInteraction, button: number) {\n    this.handleInteraction(e, (layer, view, mouse) =>\n      layer.interactions.handleMouseClick(view, mouse, button)\n    );\n  }\n\n  handleDrag(e: IMouseInteraction, _drag: IDragMetrics) {\n    this.handleInteraction(e, (layer, view, mouse) =>\n      layer.interactions.handleMouseDrag(view, mouse)\n    );\n  }\n\n  handleInteraction(\n    e: IMouseInteraction,\n    callback: (layer: Layer<any, any>, view: IProjection, mouse: IPoint) => void\n  ) {\n    // Get all of the scenes under the mouse\n    const sceneViews = this.getSceneViewsUnderMouse(e);\n    // Get a lookup of a view id to the mouse position in the view\n    const viewMouseByViewId = this.getMouseByViewId(e);\n\n    // For every view of every scene, we must tell it's layers it's world space is receiving mouse interactions\n    for (const sceneView of sceneViews) {\n      this.handleSceneView(sceneView, viewMouseByViewId, callback);\n    }\n\n    return sceneViews;\n  }\n\n  handleMouseDown(e: IMouseInteraction, button: number) {\n    this.handleInteraction(e, (layer, view, mouse) =>\n      layer.interactions.handleMouseDown(view, mouse, button)\n    );\n  }\n\n  handleMouseUp(e: IMouseInteraction, button: number) {\n    this.handleInteraction(e, (layer, view, mouse) =>\n      layer.interactions.handleMouseUp(view, mouse, button)\n    );\n  }\n\n  handleMouseOver(_e: IMouseInteraction) {\n    // We let the mouse move event handle the registration of moused over views\n  }\n\n  handleMouseOut(e: IMouseInteraction) {\n    // Get a lookup of a view id to the mouse position in the view\n    const viewMouseByViewId = this.getMouseByViewId(e);\n    const screen = e.screen.mouse;\n\n    // All views that are moused over should no longer be considered over and broadcast a mouse out\n    this.isOver.forEach((_flag, sceneView) => {\n      // Since we are leaving the view we must make the view relative cooridinates fromt he screen space coords\n      viewMouseByViewId.set(\n        sceneView.view.id,\n        sceneView.view.screenToView(screen)\n      );\n\n      this.handleSceneView(sceneView, viewMouseByViewId, (layer, view, mouse) =>\n        layer.interactions.handleMouseOut(view, mouse)\n      );\n    });\n\n    // Nothing is over anymore\n    this.isOver.clear();\n  }\n\n  handleMouseMove(e: IMouseInteraction) {\n    if (this.surface) {\n      this.surface.updateColorPickRange(\n        [e.screen.mouse.x, e.screen.mouse.y],\n        e.viewsUnderMouse.map(v => v.view)\n      );\n    }\n\n    // Get all of the scenes we have interacted with, and broadcast a move event for each\n    const allSceneViews = this.handleInteraction(e, (layer, view, mouse) =>\n      layer.interactions.handleMouseMove(view, mouse)\n    );\n    // Get a lookup of a view id to the mouse position in the view\n    const viewMouseByViewId = this.getMouseByViewId(e);\n    // Get the position of the mouse on the screen\n    const screen = e.screen.mouse;\n\n    // For quick lookups map all of the current SceneViews that are over\n    const currentSceneViews = new Map<SceneView, boolean>();\n    allSceneViews.forEach(v => currentSceneViews.set(v, true));\n\n    // Detect which of the views are newly over\n    currentSceneViews.forEach((_flag, sceneView) => {\n      if (!this.isOver.get(sceneView)) {\n        this.handleSceneView(\n          sceneView,\n          viewMouseByViewId,\n          (layer, view, mouse) =>\n            layer.interactions.handleMouseOver(view, mouse)\n        );\n      }\n    });\n\n    // Detect which of the views are no longer over\n    this.isOver.forEach((_flag, sceneView) => {\n      if (!currentSceneViews.get(sceneView)) {\n        // Since these views were not interacted with, we must create the mouse interaction position\n        viewMouseByViewId.set(\n          sceneView.view.id,\n          sceneView.view.screenToView(screen)\n        );\n\n        this.handleSceneView(\n          sceneView,\n          viewMouseByViewId,\n          (layer, view, mouse) => layer.interactions.handleMouseOut(view, mouse)\n        );\n      }\n    });\n\n    // Update the current views that are over to the currently over views for next event\n    this.isOver = currentSceneViews;\n  }\n\n  handleSceneView(\n    sceneView: SceneView,\n    viewMouseByViewId: Map<string, IPoint>,\n    callback: (layer: Layer<any, any>, view: IProjection, mouse: IPoint) => void\n  ) {\n    const view = sceneView.view;\n    const mouse = viewMouseByViewId.get(view.id);\n\n    if (mouse) {\n      for (const layer of sceneView.scene.layers) {\n        if (layer.picking && layer.picking.type !== PickType.NONE) {\n          callback(layer, view, mouse);\n        }\n      }\n    }\n  }\n\n  handleWheel(_e: IMouseInteraction) {\n    // TODO: This may need to be implemented. As of right now, there is no particular benefit\n  }\n}\n","import { IColorPickingData } from \"../types\";\nimport { Vec2 } from \"./vector\";\n\n/**\n * This analyzes the rendered data for color picking and outputs the metrics and data needed\n * for the operation.\n */\nexport function analyzeColorPickingRendering(\n  mouse: Vec2,\n  data: Uint8Array,\n  width: number,\n  height: number\n) {\n  const pickingData: IColorPickingData = {\n    allColors: [],\n    colorData: data,\n    dataHeight: height,\n    dataWidth: width,\n    mouse,\n    nearestColor: 0\n  };\n\n  const uniqueColors = new Map<number, boolean>();\n  let pixelIndex = 0;\n  const colors: number[][] = [];\n  const mouseX: number = width / 2;\n  const mouseY: number = height / 2;\n\n  let nearestColor = 0x000000;\n  let distance = Number.MAX_SAFE_INTEGER;\n\n  for (let i = 0; i < height; ++i) {\n    const row: number[] = [];\n    colors.push(row);\n\n    for (let k = 0; k < width; ++k) {\n      const r = data[pixelIndex];\n      const g = data[pixelIndex + 1];\n      const b = data[pixelIndex + 2];\n      pixelIndex += 4;\n\n      const color = (r << 16) | (g << 8) | b;\n      uniqueColors.set(color, true);\n      row.push(color);\n\n      // If the color is not black, let's test the distance against currnet nearest color\n      if (color !== 0x000000) {\n        const dx = k - mouseX;\n        const dy = i - mouseY;\n        const testDistance = dx * dx + dy * dy;\n\n        if (testDistance < distance) {\n          distance = testDistance;\n          nearestColor = color;\n        }\n      }\n    }\n  }\n\n  // Apply all o fthe unique colors that were discovered within the rendering\n  pickingData.allColors = Array.from(uniqueColors.keys());\n  // The nearest color will be the element in the middle of the array of colors\n  pickingData.nearestColor = nearestColor;\n\n  return pickingData;\n}\n","module.exports = \"// This portion is where the shader assigns the picking color that gets passed to the fragment shader\\n  _picking_color_pass_ = _pickingColor;\\n\"","module.exports = \"lowp vec4 setColor(vec4 color) {\\n  gl_FragColor = color;\\n  return gl_FragColor;\\n}\\n\"","module.exports = \"precision lowp float;\\n\\n// This contains the method required to be used on a fragment shader when a layer desires to use\\n// PickType.SINGLE (color picking).\\nvarying vec4 _picking_color_pass_;\\n\\nvec4 setColor(vec4 color) {\\n  gl_FragColor = mix(color, _picking_color_pass_, pickingActive);\\n\\n  if (color.a == 0.0) {\\n    discard;\\n  }\\n\\n  return gl_FragColor;\\n}\\n\"","module.exports = \"// This is the varying auto generated for the fragment shader that is needed in the vertex shader to pass the\\n// color for the instance through to the fragment shader\\nvarying vec4 _picking_color_pass_;\\n\"","module.exports = \"// These are projection methods utilizing the simpler camera breakdown approach\\n\\nvec3 cameraSpace(vec3 world) {\\n  return (world + cameraOffset) * cameraScale;\\n}\\n\\nvec3 cameraSpaceSize(vec3 worldSize) {\\n  return worldSize * cameraScale;\\n}\\n\\nvec4 clipSpace(vec3 world) {\\n  return vec4(((projection * modelView) * vec4(cameraSpace(world), 1.0)).xyz, 1.0);\\n}\\n\\nvec4 clipSpaceSize(vec3 worldSize) {\\n  return vec4(((projection * modelView) * vec4(cameraSpaceSize(worldSize), 0.0)).xyz, 1.0);\\n}\\n\"","module.exports = \"// When instancing is enabled, it causes a major list of uniforms to be generated\\n// it also generates a massive search tree to retrieve the correct unforms in question.\\n${instanceUniformDeclarations}\\n\\n// This is the uniforms provided by the system along with the uniforms created by the layer\\n${layerUniforms}\\n\\n// This is the attributes generated for vertex attributes\\n${vertexAttributes}\\n\\n// This is the methods and set up needed to retrieve a block of data for an instance\\n${instanceDataRetrieval}\\n\\n// This is the methods generated for the automated easing of attributes\\n${easingMethods}\\n\"","module.exports = \"// This is the injected dereferencing of the instance attributes\\n  ${instanceDestructuring}\\n\\n  // This is a special injected instance attribute. It lets the system\\n  // control specific instances ability to draw, which allows the backend\\n  // system greater control on how it optimizes draw calls and it's buffers.\\n  if (_active == 0.0) {\\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n\\n    // Quick exit to prevent any geometry from arising from the instance\\n    return;\\n  }\\n\\n  ${picking}\\n\"","module.exports = \"precision highp float;\\n\\n// This is the fragment shader generated by the system\\n${layerUniforms}\\n\\n${picking}\\n\\n// --------------- The fragment shader provided by the layer ------------------\\n${shader}\\n\"","module.exports = \"// This is the vertex shader generated by the system\\n${shaderInput}\\n${projectionMethods}\\n${picking}\\n// --------------- Vertex shader provided by the layer -----------------\\n${shader}\\n\"","module.exports = \"int instanceSize = ${instanceBlockCount};\\n\\nvec4 getBlock(int index, int instanceIndex) {\\n  return instanceData[(instanceSize * instanceIndex) + index];\\n}\\n\"","import * as Three from \"three\";\nimport { Instance } from \"../../instance-provider/instance\";\nimport { Layer } from \"../../surface/layer\";\nimport { LayerBufferType } from \"../../surface/layer-processing/layer-buffer-type\";\nimport {\n  IInstanceAttribute,\n  IInstancingUniform,\n  InstanceAttributeSize\n} from \"../../types\";\nimport { AutoEasingLoopStyle } from \"../../util/auto-easing-method\";\nimport { shaderTemplate } from \"../../util/shader-templating\";\nimport { templateVars } from \"../template-vars\";\nimport { makeInstanceUniformNameArray } from \"./make-instance-uniform-name\";\n\nconst instanceRetrievalArrayFragment = require(\"../fragments/instance-retrieval-array.vs\");\n\n/** Defines the elements for destructuring out of a vector */\nconst VECTOR_COMPONENTS = [\"x\", \"y\", \"z\", \"w\"];\n\n/** Converts a size to a shader type */\nconst sizeToType: { [key: number]: string } = {\n  1: \"float\",\n  2: \"vec2\",\n  3: \"vec3\",\n  4: \"vec4\",\n  9: \"mat3\",\n  16: \"mat4\",\n  /** This is the special case for instance attributes that want an atlas resource */\n  99: \"vec4\"\n};\n\n/**\n * This sorts attributes specific to how they need to be destructured. For example:\n * easing attributes MUST appear AFTER all of the specially integrated attributes that were generated\n * such as start times and durations.\n */\nfunction orderByPriority(\n  a: IInstanceAttribute<any>,\n  b: IInstanceAttribute<any>\n) {\n  if (a.easing && !b.easing) return 1;\n  return -1;\n}\n\nexport function makeUniformArrayDeclaration(totalBlocks: number) {\n  return {\n    fragment: `uniform vec4 ${makeInstanceUniformNameArray()}[${totalBlocks}];`,\n    materialUniforms: [\n      {\n        name: makeInstanceUniformNameArray(),\n        type: \"4fv\",\n        value: new Array(totalBlocks)\n          .fill(0)\n          .map(() => new Three.Vector4(0, 0, 0, 0))\n      }\n    ] as IInstancingUniform[]\n  };\n}\n\nexport function makeInstanceRetrievalArray(blocksPerInstance: number) {\n  const templateOptions: { [key: string]: string } = {};\n  templateOptions[templateVars.instanceBlockCount] = `${blocksPerInstance}`;\n\n  const required = {\n    name: \"makeInstanceRetrievalArray\",\n    values: [templateVars.instanceBlockCount]\n  };\n\n  const results = shaderTemplate({\n    options: templateOptions,\n    required,\n    shader: instanceRetrievalArrayFragment\n  });\n\n  return results.shader;\n}\n\nexport function makeInstanceDestructuringArray<T extends Instance>(\n  layer: Layer<T, any>,\n  instanceAttributes: IInstanceAttribute<T>[],\n  blocksPerInstance: number\n) {\n  let out = \"\";\n\n  const orderedAttributes = instanceAttributes.slice(0).sort(orderByPriority);\n\n  if (layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE) {\n    out = instanceAttributeDestructuring(orderedAttributes);\n  } else {\n    out = uniformInstancingDestructuring(orderedAttributes, blocksPerInstance);\n  }\n\n  return out;\n}\n\nfunction instanceAttributeDestructuring<T extends Instance>(\n  orderedAttributes: IInstanceAttribute<T>[]\n) {\n  let out = \"\";\n\n  orderedAttributes.forEach(attribute => {\n    // If this is the source easing attribute, we must add it in as an eased method along with a calculation for the\n    // Easing interpolation time value based on the current time and the injected start time of the change.\n    if (attribute.easing && attribute.size) {\n      // Make the time calculation for the easing equation\n      out += makeAutoEasingTiming(attribute);\n\n      out += `  ${sizeToType[attribute.size]} ${attribute.name} = ${\n        attribute.easing.methodName\n      }(_${attribute.name}_start, _${attribute.name}_end, _${\n        attribute.name\n      }_time);\\n`;\n    }\n  });\n\n  return out;\n}\n\nfunction uniformInstancingDestructuring<T extends Instance>(\n  orderedAttributes: IInstanceAttribute<T>[],\n  blocksPerInstance: number\n) {\n  let out = \"int instanceIndex = int(instance);\";\n\n  // Generate the blocks\n  for (let i = 0; i < blocksPerInstance; ++i) {\n    out += `  vec4 block${i} = getBlock(${i}, instanceIndex);\\n`;\n  }\n\n  orderedAttributes.forEach(attribute => {\n    const block = attribute.block;\n\n    // If this is the source easing attribute, we must add it in as an eased method along with a calculation for the\n    // Easing interpolation time value based on the current time and the injected start time of the change.\n    if (attribute.easing && attribute.size) {\n      if (attribute.size === InstanceAttributeSize.FOUR) {\n        out += `  ${sizeToType[attribute.size]} _${\n          attribute.name\n        }_end = block${block};\\n`;\n      } else {\n        out += `  ${sizeToType[attribute.size || 1]} _${\n          attribute.name\n        }_end = block${block}.${makeVectorSwizzle(\n          attribute.blockIndex || 0,\n          attribute.size || 1\n        )};\\n`;\n      }\n\n      // Generate the proper timing calculation for the easing involved\n      out += makeAutoEasingTiming(attribute);\n\n      out += `  ${sizeToType[attribute.size]} ${attribute.name} = ${\n        attribute.easing.methodName\n      }(_${attribute.name}_start, _${attribute.name}_end, _${\n        attribute.name\n      }_time);\\n`;\n    }\n\n    // If we have a size the size of a block, then don't swizzle the vector\n    else if (attribute.size === InstanceAttributeSize.FOUR) {\n      out += `  ${sizeToType[attribute.size]} ${\n        attribute.name\n      } = block${block};\\n`;\n    }\n\n    // If the attribute is an atlas, then we use the special ATLAS size and don't swizzle the vector\n    else if (attribute.atlas) {\n      out += `  ${sizeToType[InstanceAttributeSize.ATLAS]} ${\n        attribute.name\n      } = block${block};\\n`;\n    }\n\n    // Do normal destructuring with any other size and type\n    else {\n      out += `  ${sizeToType[attribute.size || 1]} ${\n        attribute.name\n      } = block${block}.${makeVectorSwizzle(\n        attribute.blockIndex || 0,\n        attribute.size || 1\n      )};\\n`;\n    }\n  });\n\n  return out;\n}\n\nfunction makeAutoEasingTiming<T extends Instance>(\n  attribute: IInstanceAttribute<T>\n) {\n  if (!attribute.easing) {\n    return;\n  }\n\n  let out = \"\";\n\n  // These are common values across all easing loop styles\n  const time = `_${attribute.name}_time`;\n  const duration = `_${attribute.name}_duration`;\n  const startTime = `_${attribute.name}_start_time`;\n\n  switch (attribute.easing.loop) {\n    // Continuous means letting the time go from 0 to infinity\n    case AutoEasingLoopStyle.CONTINUOUS: {\n      out += `  float ${time} = (currentTime - ${startTime}) / ${duration};\\n`;\n      break;\n    }\n\n    // Repeat means going from 0 to 1 then 0 to 1 etc etc\n    case AutoEasingLoopStyle.REPEAT: {\n      out += `  float ${time} = clamp(fract((currentTime - ${startTime}) / ${duration}), 0.0, 1.0);\\n`;\n      break;\n    }\n\n    // Reflect means going from 0 to 1 then 1 to 0 then 0 to 1 etc etc\n    case AutoEasingLoopStyle.REFLECT: {\n      const timePassed = `_${attribute.name}_timePassed`;\n      const pingPong = `_${attribute.name}_pingPong`;\n\n      // Get the time passed in a linear fashion\n      out += `  float ${timePassed} = (currentTime - ${startTime}) / ${duration};\\n`;\n      // Make a triangle wave from the time passed to ping pong the value\n      out += `  float ${pingPong} = abs((fract(${timePassed} / 2.0)) - 0.5) * 2.0;\\n`;\n      // Ensure we're clamped to the right values\n      out += `  float ${time} = clamp(${pingPong}, 0.0, 1.0);\\n`;\n      break;\n    }\n\n    // No loop means just linear time\n    case AutoEasingLoopStyle.NONE:\n    default: {\n      out += `  float ${time} = clamp((currentTime - ${startTime}) / ${duration}, 0.0, 1.0);\\n`;\n      break;\n    }\n  }\n\n  return out;\n}\n\nfunction makeVectorSwizzle(start: number, size: number) {\n  return VECTOR_COMPONENTS.slice(start, start + size).join(\"\");\n}\n","/**\n * The goal of this file is to take in model attributes and instance attributes specified\n * and inject the proper attributes into the shaders so the implementor of the shader does\n * not worry about syncing attribute and uniform names between the JS\n */\nimport { Instance } from \"../../instance-provider/instance\";\nimport { ILayerProps, Layer } from \"../../surface/layer\";\nimport { LayerBufferType } from \"../../surface/layer-processing/layer-buffer-type\";\nimport {\n  IInstanceAttribute,\n  IInstancingUniform,\n  InstanceAttributeSize,\n  IShaders,\n  IUniform,\n  IVertexAttribute,\n  PickType,\n  ShaderInjectionTarget\n} from \"../../types\";\nimport {\n  IShaderTemplateRequirements,\n  shaderTemplate\n} from \"../../util/shader-templating\";\nimport { WebGLStat } from \"../../util/webgl-stat\";\nimport { templateVars } from \"../template-vars\";\nimport { instanceAttributeShaderName } from \"./instance-attribute-shader-name\";\nimport {\n  makeInstanceDestructuringArray,\n  makeInstanceRetrievalArray,\n  makeUniformArrayDeclaration\n} from \"./uniform-instance-block-array\";\n\n// These are all of the necessary fragments that will comprise our shader that is generated\nconst vertexShaderComposition = require(\"../fragments/vertex-shader-composition.vs\");\nconst fragmentShaderComposition = require(\"../fragments/fragment-shader-composition.fs\");\nconst instanceDestructuringArray = require(\"../fragments/instance-destructuring-array.vs\");\nconst shaderInput = require(\"../fragments/shader-input.vs\");\nconst projectionMethods = require(\"../fragments/projection-methods.vs\");\n\n// Constants\n\n/**\n * Defines how many floats are available in a uniform block\n * What is a uniform block you ask? Why let me tell you! It is how opengl stores and communicates uniforms\n * to the GPU. Whenever you declare a uniform, it will use a hunk of memory. You can see how many uniforms\n * a GPU can have via the paramter MAX_VERTEX_UNIFORM_VECTORS. The number returned is the number of blocks\n * we can use for uniforms in the vertex shader. A BLOCK is an entire vec4.\n *\n * When you declare a uniform in your shader, it will use an entire BLOCK at the MINIMUM.\n *\n * A uniform float uses 1 block. vec2 uses 1 block. vec3 uses one block. vec4 uses one block.\n * mat4 uses 4 blocks. mat3 uses 3 blocks.\n *\n * etc etc.\n */\nconst MAX_USE_PER_BLOCK = 4;\n\n/** Converts a size to a shader type */\nconst sizeToType: { [key: number]: string } = {\n  1: \"float\",\n  2: \"vec2\",\n  3: \"vec3\",\n  4: \"vec4\",\n  9: \"mat3\",\n  16: \"mat4\",\n  99: \"sampler2D\"\n};\n\nfunction calculateUniformBlockUseage(uniforms: IUniform[]) {\n  let count = 0;\n\n  for (let i = 0, end = uniforms.length; i < end; ++i) {\n    count += Math.ceil(uniforms[i].size / 4);\n  }\n\n  return count;\n}\n\nexport interface IInjectionDetails {\n  fs: string;\n  materialUniforms: IInstancingUniform[];\n  maxInstancesPerBuffer: number;\n  vs: string;\n}\n\n/**\n * This method is the main algorithm for piecing together all of the attributes necessary\n * and injecting them into the shaders.\n *\n * @param shaders\n * @param vertexAttributes\n * @param instanceAttributes\n */\nexport function injectFragments<T extends Instance, U extends ILayerProps<T>>(\n  layer: Layer<T, U>,\n  shaders: IShaders,\n  vertexAttributes: IVertexAttribute[],\n  instanceAttributes: IInstanceAttribute<any>[],\n  uniforms: IUniform[]\n): IInjectionDetails {\n  const shaderInputMetrics = generateShaderInputs(\n    layer,\n    vertexAttributes,\n    instanceAttributes,\n    uniforms\n  );\n\n  let templateOptions: { [key: string]: string } = {\n    [templateVars.projectionMethods]: generateProjectionMethods(),\n    [templateVars.picking]: generateVertexPicking(layer),\n    [templateVars.shaderInput]: shaderInputMetrics.fragment,\n    [templateVars.shader]: generateVertexShader(\n      layer,\n      shaders,\n      instanceAttributes,\n      shaderInputMetrics.metrics.maxInstancesPerBuffer,\n      shaderInputMetrics.metrics.blocksPerInstance\n    )\n  };\n\n  let required = {\n    name: \"vertex shader composition\",\n    values: [\n      templateVars.projectionMethods,\n      templateVars.shaderInput,\n      templateVars.shader\n    ]\n  };\n\n  // If our layer is using color picking, then we must require the shader to include the ${picking} annotation\n  // To receive the fragment picking method\n  if (layer.picking.type === PickType.SINGLE) {\n    required.values.push(templateVars.picking);\n  }\n\n  const vertexShaderResults = shaderTemplate({\n    options: templateOptions,\n    required,\n    shader: vertexShaderComposition\n  });\n\n  templateOptions = {\n    [templateVars.layerUniforms]: generateUniforms(\n      uniforms,\n      ShaderInjectionTarget.FRAGMENT\n    ),\n    [templateVars.shader]: generateFragmentShader(shaders),\n    [templateVars.picking]: generateFragmentPickingMethod(layer)\n  };\n\n  required = {\n    name: \"fragment shader composition\",\n    values: [templateVars.layerUniforms, templateVars.shader]\n  };\n\n  // If our layer is using color picking, then we must require the shader to include the ${picking} annotation\n  // To receive the fragment picking method\n  if (layer.picking.type === PickType.SINGLE) {\n    required.values.push(templateVars.picking);\n  }\n\n  const fragmentShaderResults = shaderTemplate({\n    options: templateOptions,\n    required,\n    shader: fragmentShaderComposition\n  });\n\n  return {\n    fs: fragmentShaderResults.shader,\n    materialUniforms: shaderInputMetrics.materialUniforms,\n    maxInstancesPerBuffer: shaderInputMetrics.metrics.maxInstancesPerBuffer,\n    vs: vertexShaderResults.shader\n  };\n}\n\n/**\n * Creates the projection method fragment\n */\nfunction generateProjectionMethods() {\n  const templateOptions: { [key: string]: string } = {};\n  const required: IShaderTemplateRequirements = {\n    name: \"projection methods\",\n    values: []\n  };\n\n  const results = shaderTemplate({\n    options: templateOptions,\n    required,\n    shader: projectionMethods\n  });\n\n  return results.shader;\n}\n\n/**\n * Generates the fragments for shader IO such as vertex and instance attributes\n */\nfunction generateShaderInputs<T extends Instance, U extends ILayerProps<T>>(\n  layer: Layer<T, U>,\n  vertexAttributes: IVertexAttribute[],\n  instanceAttributes: IInstanceAttribute<T>[],\n  uniforms: IUniform[]\n) {\n  const templateOptions: { [key: string]: string } = {};\n\n  let instancingInfo;\n\n  if (layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE) {\n    instancingInfo = {\n      materialUniforms: [],\n      metrics: {\n        blocksPerInstance: 0,\n        maxInstancesPerBuffer: 0\n      }\n    };\n\n    templateOptions.instanceDataRetrieval = \"\";\n    templateOptions.instanceUniformDeclarations = \"\";\n  } else {\n    instancingInfo = generateInstanceDataLookupOptions(\n      layer,\n      templateOptions,\n      instanceAttributes,\n      uniforms\n    );\n  }\n\n  const additionalOptions: { [key: string]: string } = {\n    [templateVars.layerUniforms]: generateUniforms(\n      uniforms,\n      ShaderInjectionTarget.VERTEX\n    ),\n    [templateVars.vertexAttributes]: generateVertexAttributes(\n      layer,\n      vertexAttributes,\n      instanceAttributes\n    ),\n    [templateVars.easingMethods]: generateEasingMethods(instanceAttributes)\n  };\n\n  Object.assign(templateOptions, additionalOptions);\n\n  const required: IShaderTemplateRequirements = {\n    name: \"shader input\",\n    values: [\n      templateVars.instanceDataRetrieval,\n      templateVars.instanceUniformDeclarations,\n      templateVars.layerUniforms,\n      templateVars.vertexAttributes,\n      templateVars.easingMethods\n    ]\n  };\n\n  const results = shaderTemplate({\n    options: templateOptions,\n    required,\n    shader: shaderInput\n  });\n\n  return {\n    fragment: results.shader,\n    materialUniforms: instancingInfo.materialUniforms,\n    metrics: instancingInfo.metrics\n  };\n}\n\n/**\n * Generates the easing methods for the Shader specified by each attribute\n */\nfunction generateEasingMethods<T extends Instance>(\n  instanceAttributes: IInstanceAttribute<T>[]\n) {\n  const methods = new Map<string, Map<InstanceAttributeSize, string>>();\n  let out = \"\";\n\n  // First dedupe the methods needed by their method name\n  instanceAttributes.forEach(attribute => {\n    if (attribute.easing && attribute.size) {\n      let methodSizes = methods.get(attribute.easing.methodName);\n\n      if (!methodSizes) {\n        methodSizes = new Map<InstanceAttributeSize, string>();\n        methods.set(attribute.easing.methodName, methodSizes);\n      }\n\n      methodSizes.set(attribute.size, attribute.easing.gpu);\n    }\n  });\n\n  const required: IShaderTemplateRequirements = {\n    name: \"Easing Method Generation\",\n    values: [templateVars.easingMethod]\n  };\n\n  // Now generate the full blown method for each element. We create overloaded methods for\n  // Each method name for each vector size required\n  methods.forEach(\n    (methodSizes: Map<InstanceAttributeSize, string>, methodName: string) => {\n      methodSizes.forEach((method, size) => {\n        const sizeType = sizeToType[size];\n\n        const templateOptions: { [key: string]: string } = {\n          [templateVars.easingMethod]: `${sizeType} ${methodName}(${sizeType} start, ${sizeType} end, float t)`,\n          [templateVars.T]: `${sizeType}`\n        };\n\n        const results = shaderTemplate({\n          options: templateOptions,\n          required,\n          shader: method\n        });\n\n        out += `${results.shader}\\n`;\n      });\n    }\n  );\n\n  return out;\n}\n\n/**\n * Generates all of the uniforms that are provided by the shader IO.\n */\nfunction generateUniforms(\n  uniforms: IUniform[],\n  injectionType: ShaderInjectionTarget\n) {\n  let out = \"\";\n  const injection = injectionType || ShaderInjectionTarget.VERTEX;\n\n  uniforms.forEach(uniform => {\n    uniform.shaderInjection =\n      uniform.shaderInjection || ShaderInjectionTarget.VERTEX;\n\n    if (\n      uniform.shaderInjection === injection ||\n      uniform.shaderInjection === ShaderInjectionTarget.ALL\n    ) {\n      out += `uniform ${uniform.qualifier || \"\"}${\n        uniform.qualifier ? \" \" : \"\"\n      }${sizeToType[uniform.size]} ${uniform.name};\\n`;\n    }\n  });\n\n  return out;\n}\n\n/**\n * This takes in the layer's vertex shader and transforms any required templating within the\n * shader.\n */\nfunction generateVertexShader<T extends Instance, U extends ILayerProps<T>>(\n  layer: Layer<T, U>,\n  shaders: IShaders,\n  instanceAttributes: IInstanceAttribute<T>[],\n  _maxInstancesPerBuffer: number,\n  blocksPerInstance: number\n) {\n  const templateOptions: { [key: string]: string } = {\n    [templateVars.attributes]: makeInstanceAttributeReferences(\n      layer,\n      instanceAttributes,\n      blocksPerInstance\n    )\n  };\n\n  const required = {\n    name: \"layer vertex shader\",\n    values: [templateVars.attributes]\n  };\n\n  const results = shaderTemplate({\n    options: templateOptions,\n    required,\n    shader: shaders.vs\n  });\n\n  return results.shader;\n}\n\n/**\n * This generates the header portion required for vertex picking to work\n */\nfunction generateVertexPicking(layer: Layer<any, any>) {\n  if (layer.picking.type === PickType.SINGLE) {\n    return require(\"../fragments/color-picking-vertex-header.vs\");\n  }\n\n  return \"\";\n}\n\n/**\n * This generates the fragment that defines the picking methods\n */\nfunction generateFragmentPickingMethod(layer: Layer<any, any>) {\n  if (layer.picking.type === PickType.SINGLE) {\n    return require(\"../fragments/color-picking-method.fs\");\n  }\n\n  return require(\"../fragments/color-picking-disabled.fs\");\n}\n\nfunction generateFragmentShader(shaders: IShaders) {\n  const templateOptions: { [key: string]: string } = {};\n\n  const required: IShaderTemplateRequirements = {\n    name: \"layer fragment shader\",\n    values: []\n  };\n\n  const results = shaderTemplate({\n    options: templateOptions,\n    required,\n    shader: shaders.fs\n  });\n\n  return results.shader;\n}\n\n/**\n * This generates the inline attribute references needed to be able to reference instance attribute\n * vars.\n */\nfunction makeInstanceAttributeReferences<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(\n  layer: Layer<T, U>,\n  instanceAttributes: IInstanceAttribute<T>[],\n  blocksPerInstance: number\n) {\n  const templateOptions: { [key: string]: string } = {};\n  templateOptions[templateVars.blocksPerInstance] = `${blocksPerInstance}`;\n  templateOptions[\n    templateVars.instanceDestructuring\n  ] = makeInstanceDestructuringArray(\n    layer,\n    instanceAttributes,\n    blocksPerInstance\n  );\n  templateOptions[templateVars.picking] = makePickingDestructuring(layer);\n\n  const required = {\n    name: \"instance attributes fragment\",\n    values: [templateVars.instanceDestructuring]\n  };\n\n  // If picking is enabled, then we require the picking set up that we inject into the destructuring portion\n  // Of the shader\n  if (layer.picking.type === PickType.SINGLE) {\n    required.values.push(templateVars.picking);\n  }\n\n  const results = shaderTemplate({\n    options: templateOptions,\n    required,\n    shader: instanceDestructuringArray\n  });\n\n  return results.shader;\n}\n\n/**\n * This generates the portion of picking logic that is injected into the destructuring portion of the shader\n */\nfunction makePickingDestructuring(layer: Layer<any, any>) {\n  if (layer.picking.type === PickType.SINGLE) {\n    return require(\"../fragments/color-picking-assignment.vs\");\n  }\n\n  return \"\";\n}\n\n/**\n * This generates the model attribute declarations\n */\nfunction generateVertexAttributes(\n  layer: Layer<any, any>,\n  vertexAttributes: IVertexAttribute[],\n  instanceAttributes: IInstanceAttribute<any>[]\n) {\n  let out = \"\";\n\n  vertexAttributes.forEach(attribute => {\n    out += `attribute ${sizeToType[attribute.size]} ${attribute.qualifier ||\n      \"\"}${(attribute.qualifier && \" \") || \"\"} ${attribute.name};\\n`;\n  });\n\n  if (layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE) {\n    out += \"\\n// Instance Attributes\\n\";\n    instanceAttributes.forEach(attribute => {\n      out += `attribute ${\n        sizeToType[attribute.size || 1]\n      } ${attribute.qualifier || \"\"}${(attribute.qualifier && \" \") ||\n        \"\"} ${instanceAttributeShaderName(attribute)};\\n`;\n    });\n  }\n\n  return out;\n}\n\n/**\n * This method generates the chunk of shader that is responsible for providing\n */\nfunction generateInstanceDataLookupOptions<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(\n  layer: Layer<T, U>,\n  templateOptions: { [key: string]: string },\n  instanceAttributes: IInstanceAttribute<T>[],\n  uniforms: IUniform[]\n) {\n  // This is how many uniform blocks the current device can utilize in a shader\n  const maxUniforms = WebGLStat.MAX_VERTEX_UNIFORMS;\n  // This reflects how many uniform blocks are available for instancing\n  const instanceUniformBlockCount =\n    maxUniforms - calculateUniformBlockUseage(uniforms);\n\n  // Go through the attributes provided and calculate the number of blocks requested\n  // Also sort the attributes by block and pack the block useage down.\n  const sortedInstanceAttributes = instanceAttributes\n    .slice(0)\n    .sort((a, b) => (a.block || 0) - (b.block || 0));\n\n  let currentBlock = sortedInstanceAttributes[0].block;\n  let trueBlockIndex = 0;\n\n  // This tracks how much a block is used\n  const blockUseage = new Map<number, number>();\n  const innerBlockUseage = new Map<number, Map<number, boolean>>();\n\n  sortedInstanceAttributes.forEach(attribute => {\n    if (attribute.block !== currentBlock) {\n      currentBlock = attribute.block;\n      trueBlockIndex++;\n    }\n\n    const attributeSize = attribute.size || 1;\n    const oldUseage = blockUseage.get(trueBlockIndex) || 0;\n    const newUseage = oldUseage + attributeSize;\n\n    // Make sure the block isn't over used thus losing attribute information\n    if (newUseage > MAX_USE_PER_BLOCK) {\n      console.error(\n        `An instance attribute was specified that over fills the maximum allowed useage for a block.`,\n        `\\nSource Layer: ${layer.id}`,\n        layer,\n        `\\nMax Allowed per block ${MAX_USE_PER_BLOCK}`,\n        `\\nAttribute: ${attribute.name} Block Specified: ${attribute.block}`,\n        `\\nTotal blocks used with this attribute: ${newUseage}`\n      );\n      return;\n    }\n\n    // Store how much of the block is utilized\n    blockUseage.set(trueBlockIndex, newUseage);\n    // We can now auto specify the inner index of where the attribute lines up within the block\n    attribute.blockIndex = oldUseage;\n\n    // Now we examine the attributes request of use inside the block and make sure there is no\n    // Overlap\n    const innerUseage =\n      innerBlockUseage.get(trueBlockIndex) || new Map<number, boolean>();\n\n    if (attribute.blockIndex + attributeSize > MAX_USE_PER_BLOCK) {\n      console.error(\n        `An instance attribute was specified that would fill indices greater than the block allows.`,\n        `\\nMax index per block ${MAX_USE_PER_BLOCK}`,\n        `\\nAttribute: ${attribute.name} Block Index: ${\n          attribute.blockIndex\n        } Size: ${attribute.size} Block Index + Size: ${attribute.blockIndex +\n          (attribute.size || 1)}`\n      );\n\n      return;\n    }\n\n    for (\n      let i = attribute.blockIndex;\n      i < attribute.blockIndex + attributeSize;\n      ++i\n    ) {\n      if (innerUseage.get(i)) {\n        console.error(\n          `An instance attribute was specified who's block index overaps another attributes useage`,\n          `\\nMax index per block ${MAX_USE_PER_BLOCK}`,\n          `\\nAttribute: ${attribute.name} Block Index: ${\n            attribute.blockIndex\n          } Size: ${attribute.size} Block Index + Size: ${attribute.blockIndex +\n            (attribute.size || 1)}`\n        );\n\n        return;\n      }\n    }\n\n    // Adjust the attribute to reflect the actual bock it is using\n    attribute.block = trueBlockIndex;\n  });\n\n  const blocksPerInstance = trueBlockIndex + 1;\n  // This determines how many instances our allowed uniforms will allow for a single draw call\n  const maxInstancesPerBuffer = Math.floor(\n    instanceUniformBlockCount / blocksPerInstance\n  );\n\n  // Generate the decision tree and uniform declarations\n  const instancingMetrics = makeUniformInstanceDataOptions(\n    templateOptions,\n    maxInstancesPerBuffer,\n    blocksPerInstance,\n    sortedInstanceAttributes\n  );\n\n  return {\n    materialUniforms: instancingMetrics.materialUniforms,\n    metrics: {\n      blocksPerInstance,\n      maxInstancesPerBuffer\n    }\n  };\n}\n\n/**\n * This generates all of the necessary templating information from uniform-instance-data\n * in order to provide an instance data getter for the application.\n */\nfunction makeUniformInstanceDataOptions<T extends Instance>(\n  templateOptions: { [key: string]: string },\n  maxInstancesPerBuffer: number,\n  blocksPerInstance: number,\n  instanceAttributes: IInstanceAttribute<T>[]\n) {\n  // Make a list containing all instance indicies that will be utilized and will be split\n  // Out into the decision tree\n  const instances = [];\n\n  for (let i = 0; i < maxInstancesPerBuffer; ++i) {\n    instances.push(i);\n  }\n\n  // Make the uniform declaration. Uniform declaration simultaneously gives us the material uniforms necessary\n  // To apply to our three material.\n  const uniformMetrics = makeInstanceUniformDeclaration(\n    maxInstancesPerBuffer * blocksPerInstance,\n    instanceAttributes\n  );\n\n  templateOptions[templateVars.instanceUniformDeclarations] =\n    uniformMetrics.fragment;\n  templateOptions[templateVars.instanceBlockCount] = `${blocksPerInstance}`;\n\n  // This method produces the data retrieval method for array instancing\n  templateOptions[\n    templateVars.instanceDataRetrieval\n  ] = makeInstanceRetrievalArray(blocksPerInstance);\n\n  return {\n    materialUniforms: uniformMetrics.materialUniforms\n  };\n}\n\n/**\n * This generates the declaration of all of the individual uniform registers for instancing.\n */\nfunction makeInstanceUniformDeclaration<T extends Instance>(\n  instanceUniformBlockCount: number,\n  attributes: IInstanceAttribute<T>[]\n) {\n  let out = \"\";\n  const blockQualifierDedup = new Map<number, Map<string, boolean>>();\n  let maxBlock = 0;\n\n  // Dedup the attributes specified for the\n  attributes.forEach(attribute => {\n    const qualifiers =\n      blockQualifierDedup.get(attribute.block || 0) ||\n      new Map<string, boolean>();\n    // Make sure the qualifier is added for the block!\n    if (attribute.qualifier) {\n      qualifiers.set(attribute.qualifier, true);\n    }\n\n    // Get the max block in use\n    maxBlock = Math.max(maxBlock, attribute.block || 0);\n  });\n\n  // Generate the full string for the specified qualifiers\n  const blockQualifiers = new Map<number, string>();\n\n  blockQualifierDedup.forEach((qualifierList, block) => {\n    const allQualifiers = Array.from(qualifierList.keys());\n    blockQualifiers.set(block, `${allQualifiers.join(\" \")} `);\n  });\n\n  // Generate our uniform declarations\n  // Const blockCount = maxBlock + 1;\n\n  // This method produces the instancing declaration for a search tree.\n  // *out += makeUniformDecisionTreeDeclarations(instanceUniformBlockCount, blockCount, blockQualifiers, materialUniforms);\n  // This method produces the instancing declaration for an instancing array\n  const declaration = makeUniformArrayDeclaration(instanceUniformBlockCount);\n  out += declaration.fragment;\n\n  out += `\\n`;\n\n  return {\n    fragment: out,\n    materialUniforms: declaration.materialUniforms\n  };\n}\n","import * as Three from \"three\";\nimport { WebGLRenderTarget } from \"three\";\nimport { ImageInstance } from \"../base-layers/images\";\nimport { LabelInstance } from \"../base-layers/labels\";\nimport { Instance } from \"../instance-provider/instance\";\nimport { Bounds } from \"../primitives/bounds\";\nimport { Box } from \"../primitives/box\";\nimport { injectFragments } from \"../shaders/util/attribute-generation\";\nimport { PickType } from \"../types\";\nimport { FrameMetrics } from \"../types\";\nimport { analyzeColorPickingRendering } from \"../util/color-picking-analysis\";\nimport { DataBounds } from \"../util/data-bounds\";\nimport { Vec2 } from \"../util/vector\";\nimport { EventManager } from \"./event-manager\";\nimport { LayerMouseEvents } from \"./event-managers/layer-mouse-events\";\nimport { ILayerProps, Layer } from \"./layer\";\nimport {\n  generateDefaultScene,\n  IDefaultSceneElements\n} from \"./layer-processing/generate-default-scene\";\nimport { generateLayerGeometry } from \"./layer-processing/generate-layer-geometry\";\nimport { generateLayerMaterial } from \"./layer-processing/generate-layer-material\";\nimport { generateLayerModel } from \"./layer-processing/generate-layer-model\";\nimport { injectShaderIO } from \"./layer-processing/inject-shader-io\";\nimport {\n  getLayerBufferType,\n  makeLayerBufferManager\n} from \"./layer-processing/layer-buffer-type\";\nimport { MouseEventManager, SceneView } from \"./mouse-event-manager\";\nimport { ISceneOptions, Scene } from \"./scene\";\nimport { AtlasManager } from \"./texture\";\nimport { IAtlasOptions } from \"./texture/atlas\";\nimport { AtlasResourceManager } from \"./texture/atlas-resource-manager\";\nimport { ClearFlags, View } from \"./view\";\n\nexport interface ILayerSurfaceOptions {\n  /**\n   * These are the atlas resources we want available that our layers can be provided to utilize\n   * for their internal processes.\n   */\n  atlasResources?: IAtlasOptions[];\n  /**\n   * This is the color the canvas will be set to.\n   */\n  background: [number, number, number, number];\n  /**\n   * If this is provided, it will use this context for rendering. If a string is provided\n   * it will search for the canvas context by id.\n   */\n  context?: WebGLRenderingContext | HTMLCanvasElement | string;\n  /**\n   * This is the event managers to respond to the mouse events.\n   */\n  eventManagers?: EventManager[];\n  /**\n   * Set to true to allow this surface to absorb and handle wheel events from the mouse.\n   */\n  handlesWheelEvents?: boolean;\n  /**\n   * This specifies the density of rendering in the surface. The default value is window.devicePixelRatio to match the\n   * monitor for optimal clarity. Using a value of 1 will be acceptable, will not get high density renders, but will\n   * have better performance if needed.\n   */\n  pixelRatio?: number;\n  /**\n   * This sets up the available scenes the surface will have to work with. Layers then can\n   * reference the scene by it's scene property. The order of the scenes here is the drawing\n   * order of the scenes.\n   */\n  scenes?: ISceneOptions[];\n}\n\nconst DEFAULT_BACKGROUND_COLOR = new Three.Color(1.0, 1.0, 1.0);\n\nfunction isCanvas(val: any): val is HTMLCanvasElement {\n  return Boolean(val.getContext);\n}\n\nfunction isString(val: any): val is string {\n  return Boolean(val.substr);\n}\n\nfunction isWebGLContext(val: any): val is WebGLRenderingContext {\n  return Boolean(val.canvas);\n}\n\nexport interface ILayerConstructable<T extends Instance> {\n  new (props: ILayerProps<T>): Layer<any, any>;\n}\n\n/**\n * This is a pair of a Class Type and the props to be applied to that class type.\n */\nexport type LayerInitializer = [\n  ILayerConstructable<Instance> & { defaultProps: ILayerProps<Instance> },\n  ILayerProps<Instance>\n];\n\n/**\n * Used for reactive layer generation and updates.\n */\nexport function createLayer<T extends Instance, U extends ILayerProps<T>>(\n  layerClass: ILayerConstructable<T> & { defaultProps: U },\n  props: U\n): LayerInitializer {\n  return [layerClass, props];\n}\n\n/**\n * This is a manager for layers. It will use voidgl layers to intelligently render resources\n * as efficiently as possible. Layers will be rendered in the order they are provided and this\n * surface will provide some basic camera controls by default.\n */\nexport class LayerSurface {\n  /** This is the atlas manager that will help with modifying and tracking atlas' generated for the layers */\n  private atlasManager: AtlasManager = new AtlasManager();\n  /** This is the gl context this surface is rendering to */\n  private context: WebGLRenderingContext;\n  /** This is the current viewport the renderer state is in */\n  currentViewport = new Map<Three.WebGLRenderer, Box>();\n  /**\n   * This is the default scene that layers get added to if they do not specify a valid Scene.\n   * This scene by default only has a single default view.\n   */\n  defaultSceneElements: IDefaultSceneElements;\n  /**\n   * This is the metrics of the current running frame\n   */\n  frameMetrics: FrameMetrics = {\n    currentFrame: 0,\n    currentTime: Date.now() | 0,\n    previousTime: Date.now() | 0\n  };\n  /**\n   * This is used to help resolve concurrent draws. There are some very async operations that should\n   * not overlap in draw calls.\n   */\n  private isBufferingAtlas = false;\n  /** This is all of the layers in this manager by their id */\n  layers = new Map<string, Layer<any, any>>();\n  /** This manages the mouse events for the current canvas context */\n  private mouseManager: MouseEventManager;\n  /**\n   * This is the renderer that is meant for rendering the picking pass. We have a separate renderer so we can disable\n   * over complicated features like antialiasing which would ruin the picking pass.\n   */\n  pickingRenderer: Three.WebGLRenderer;\n  /** This is a target used to perform rendering our picking pass */\n  pickingTarget: Three.WebGLRenderTarget;\n  /** This is the density the rendering renders for the surface */\n  pixelRatio: number = window.devicePixelRatio;\n  /** This is the THREE render system we use to render scenes with views */\n  renderer: Three.WebGLRenderer;\n  /** This is the resource manager that handles resource requests for instances */\n  resourceManager: AtlasResourceManager;\n  /**\n   * This is all of the available scenes and their views for this surface. Layers reference the IDs\n   * of the scenes and the views to be a part of their rendering state.\n   */\n  scenes = new Map<string, Scene>();\n  /**\n   * This is all of the views currently generated for this surface paired with the scene they render.\n   */\n  sceneViews: SceneView[] = [];\n  /** When set to true, the next render will make sure color picking is updated for layer interactions */\n  updateColorPick?: {\n    mouse: Vec2;\n    views: View[];\n  };\n  /**\n   * This flags all layers by id for disposal at the end of every render. A Layer must be recreated\n   * after each render in order to clear it's disposal flag. This is the trick to making this a\n   * reactive system.\n   */\n  willDisposeLayer = new Map<string, boolean>();\n\n  /** This is used to indicate whether the loading is completed */\n  private loadReadyResolve: () => void;\n  loadReady: Promise<void> = new Promise(\n    resolve => (this.loadReadyResolve = resolve)\n  );\n\n  /** Read only getter for the gl context */\n  get gl() {\n    return this.context;\n  }\n\n  /**\n   * This adds a layer to the manager which will manage all of the resource lifecycles of the layer\n   * as well as additional helper injections to aid in instancing and shader i/o.\n   */\n  private addLayer<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U>\n  ): Layer<T, U> {\n    if (!layer.id) {\n      console.warn(\"All layers must have an id\");\n      return layer;\n    }\n\n    if (this.layers.get(layer.id)) {\n      console.warn(\"All layer's ids must be unique per layer manager\");\n      return layer;\n    }\n\n    // We add the layer to our management\n    this.layers.set(layer.id, layer);\n    // Now we initialize the layer's gl components\n    this.initLayer(layer);\n\n    return layer;\n  }\n\n  /**\n   * The performs all of the needed updates that layers need to commit to the scene and buffers\n   * to be ready for a draw pass. This is callable outside of the draw loop to allow for specialized\n   * procedures or optimizations to take place, where incremental updates to the buffers would make\n   * the most sense.\n   *\n   * @param time The start time of the given frame\n   * @param frameIncrement When true, the frame count for the frame metrics will increment\n   * @param onViewReady Callback for when all of the layers of a scene view have been committed\n   *                    and are thus potentially ready to be rendered.\n   */\n  async commit(\n    time?: number,\n    frameIncrement?: boolean,\n    onViewReady?: (\n      scene: Scene,\n      view: View,\n      pickingPass: Layer<any, any>[]\n    ) => void\n  ) {\n    if (!this.gl) return;\n\n    // We are rendering a new frame so increment our frame count\n    if (frameIncrement) this.frameMetrics.currentFrame++;\n    this.frameMetrics.previousTime = this.frameMetrics.currentTime;\n\n    // If no manual time was provided, we shall use Date.now in 32 bit format\n    if (time === undefined) {\n      this.frameMetrics.currentTime = Date.now() | 0;\n    } else {\n      // If this is our first frame and we have a manual time entry, then we first need to sync up\n      // The manual time as our previous timing.\n      if (this.frameMetrics.previousTime === this.frameMetrics.currentTime) {\n        this.frameMetrics.previousTime = time;\n      }\n\n      this.frameMetrics.currentTime = time;\n    }\n\n    // Get the scenes in their added order\n    const scenes = Array.from(this.scenes.values());\n    const validLayers: { [key: string]: Layer<any, any> } = {};\n    const erroredLayers: { [key: string]: [Layer<any, any>, Error] } = {};\n\n    // Loop through scenes\n    for (let i = 0, end = scenes.length; i < end; ++i) {\n      const scene = scenes[i];\n      const views = Array.from(scene.viewById.values());\n      const layers = scene.layers;\n\n      // Make sure the layers are depth sorted\n      scene.sortLayers();\n\n      // Loop through the views\n      for (let k = 0, endk = views.length; k < endk; ++k) {\n        const view = views[k];\n        // When this flags true, a picking pass will be rendered for the provided scene / view\n        const pickingPass: Layer<any, any>[] = [];\n\n        // We must perform any operations necessary to make the view camera fit the viewport\n        // Correctly\n        view.fitViewtoViewport(\n          new Bounds({\n            height: this.context.canvas.height,\n            width: this.context.canvas.width,\n            x: 0,\n            y: 0\n          })\n        );\n\n        // Let the layers update their uniforms before the draw\n        for (let j = 0, endj = layers.length; j < endj; ++j) {\n          // Get the layer to be rendered in the scene\n          const layer = layers[j];\n          // Update the layer with the view it is about to be rendered with\n          layer.view = view;\n          // Make sure the layer is given the opportunity to update all of it's uniforms\n          // To match the view state and update any unresolved diffs internally\n          try {\n            layer.draw();\n            validLayers[layer.id] = layer;\n          } catch (err) {\n            if (!erroredLayers[layer.id]) {\n              erroredLayers[layer.id] = [layer, err];\n            }\n          }\n\n          // If this layer specifies a picking draw pass, then we shall store it in the current draw order\n          // For that next step\n          if (layer.picking.type === PickType.SINGLE) {\n            pickingPass.push(layer);\n          }\n        }\n\n        if (onViewReady) {\n          onViewReady(scene, view, pickingPass);\n        }\n      }\n    }\n\n    // get the layers with errors flagged for them\n    const errors = Object.values(erroredLayers);\n\n    if (errors.length > 0) {\n      const passed = Object.values(validLayers);\n\n      console.warn(\n        \"Some layers errored during their draw update. These layers will be removed. They can be re-added if render() is called again:\",\n        errors.map(err => err[0].id)\n      );\n\n      // Output each layer and why it errored\n      errors.forEach(err => {\n        console.warn(`Layer ${err[0].id} removed for the following error:`);\n        if (err[1]) console.error(err[1].stack || err[1].message);\n      });\n\n      // Re-render but only include non-errored layers\n      this.render(passed.map(layer => layer.initializer));\n    }\n  }\n\n  /**\n   * Free all resources consumed by this surface that gets applied to the GPU.\n   */\n  destroy() {\n    this.layers.forEach(layer => layer.destroy());\n    this.resourceManager.destroy();\n    this.mouseManager.destroy();\n    this.sceneViews.forEach(sceneView => sceneView.scene.destroy());\n    this.renderer.dispose();\n    this.pickingRenderer.dispose();\n    this.currentViewport.clear();\n\n    // TODO: Instances should be implementing destroy for these clean ups.\n    LabelInstance.destroy();\n    ImageInstance.destroy();\n  }\n\n  /**\n   * This is the draw loop that must be called per frame for updates to take effect and display.\n   *\n   * @param time This is an optional time flag so one can manually control the time flag for the frame.\n   *             This will affect animations and other automated gpu processes.\n   */\n  async draw(time?: number) {\n    if (!this.gl) return;\n\n    // Make the layers commit their changes to the buffers then draw each scene view on\n    // Completion.\n    this.commit(time, true, (scene, view, pickingPass) => {\n      // Our scene must have a valid container to operate\n      if (!scene.container) return;\n      // Now perform the rendering\n      this.drawSceneView(scene.container, view);\n\n      // If a layer needs a picking pass, then perform a picking draw pass only\n      // if a request for the color pick has been made, then we query the pixels rendered to our picking target\n      if (pickingPass.length > 0 && this.updateColorPick) {\n        // Get the requested metrics\n        const mouse = this.updateColorPick.mouse;\n        const views = this.updateColorPick.views;\n\n        // Only if the view is interacted with should we both with rendering\n        if (\n          view.id !== this.defaultSceneElements.view.id &&\n          views.indexOf(view) > -1\n        ) {\n          // Picking uses a pixel ratio of 1\n          view.pixelRatio = 1.0;\n          // Get the current flags for the view\n          const flags = view.clearFlags.slice(0);\n          // Set color rendering flasg\n          view.clearFlags = [ClearFlags.COLOR, ClearFlags.DEPTH];\n\n          // We must perform any operations necessary to make the view camera fit the viewport\n          // Correctly with the possibly adjusted pixel ratio\n          view.fitViewtoViewport(\n            new Bounds({\n              height: this.context.canvas.height / this.pixelRatio,\n              width: this.context.canvas.width / this.pixelRatio,\n              x: 0,\n              y: 0\n            })\n          );\n\n          // We must redraw the layers so they will update their uniforms to adapt to a picking pass\n          for (let j = 0, endj = pickingPass.length; j < endj; ++j) {\n            const layer = pickingPass[j];\n            layer.picking.currentPickMode = PickType.SINGLE;\n            try {\n              layer.draw();\n            } catch (err) {\n              /** No-op, the first draw should have output an error for bad draw calls */\n            }\n            layer.picking.currentPickMode = PickType.NONE;\n          }\n\n          // Draw the picking container for the scene with our view long with our specialized picking renderer\n          // NOTE: Neat trick, just remove 'this.pickingTarget' from the argument and add\n          // canvas.parentNode.appendChild(this.pickingRenderer.getContext().canvas);\n          // below where the picking Target is created and you will see what is being rendered to the color picking buffer\n          this.drawSceneView(\n            scene.pickingContainer,\n            view,\n            this.pickingRenderer,\n            this.pickingTarget\n          );\n\n          // Make our metrics for how much of the image we wish to analyze\n          const pickWidth = 5;\n          const pickHeight = 5;\n          const numBytesPerColor = 4;\n          const out = new Uint8Array(pickWidth * pickHeight * numBytesPerColor);\n\n          // Read the pixels out\n          // TODO: We need to defer this reading to next frame as the rendering MUST be completed before a readPixels\n          // operation can complete. Thus in complex rendering situations that pushes the GPU, this could be a MAJOR bottleneck.\n          this.pickingRenderer.readRenderTargetPixels(\n            this.pickingTarget,\n            mouse[0] - view.screenBounds.x - pickWidth / 2,\n            view.screenBounds.height -\n              (mouse[1] - view.screenBounds.y) -\n              pickHeight / 2,\n            pickWidth,\n            pickHeight,\n            out\n          );\n\n          // Analyze the rendered color data for the picking routine\n          const pickingData = analyzeColorPickingRendering(\n            [mouse[0] - view.screenBounds.x, mouse[1] - view.screenBounds.y],\n            out,\n            pickWidth,\n            pickHeight\n          );\n\n          // We must redraw the layers so they will update their uniforms to adapt to a picking pass\n          for (let j = 0, endj = pickingPass.length; j < endj; ++j) {\n            const layer = pickingPass[j];\n\n            if (layer.picking.type === PickType.SINGLE) {\n              layer.interactions.colorPicking = pickingData;\n            }\n          }\n\n          // Return the pixel ratio back to the rendered ratio\n          view.pixelRatio = this.pixelRatio;\n          // Return the view's clear flags\n          view.clearFlags = flags;\n\n          // After reverting the pixel ratio, we must return to the state we came from so that mouse interactions\n          // will work properly\n          view.fitViewtoViewport(\n            new Bounds({\n              height: this.context.canvas.height,\n              width: this.context.canvas.width,\n              x: 0,\n              y: 0\n            })\n          );\n        }\n      }\n    });\n\n    // After we have drawn our views of our scenes, we can now ensure all of the bounds\n    // Are updated in the interactions and flag our interactions ready for mouse input\n    if (this.mouseManager.waitingForRender) {\n      this.sceneViews.forEach(sceneView => {\n        sceneView.bounds = new DataBounds(sceneView.view.screenBounds);\n        sceneView.bounds.data = sceneView;\n      });\n\n      this.mouseManager.waitingForRender = false;\n    }\n\n    // Now that all of our layers have performed updates to everything, we can now dequeue\n    // All resource requests\n    // We create this gate in case multiple draw calls flow through before a buffer opertion is completed\n    if (!this.isBufferingAtlas) {\n      this.isBufferingAtlas = true;\n      const didBuffer = await this.resourceManager.dequeueRequests();\n      this.isBufferingAtlas = false;\n\n      // If buffering did occur and completed, then we should be performing a draw to ensure all of the\n      // Changes are committed and pushed out.\n      if (didBuffer) {\n        this.loadReadyResolve();\n        this.loadReady = new Promise(\n          resolve => (this.loadReadyResolve = resolve)\n        );\n        this.draw();\n      }\n    }\n\n    // Clear out the flag requesting a pick pass so we don't perform a pick render pass unless we have\n    // another requested from mouse interactions\n    delete this.updateColorPick;\n  }\n\n  /**\n   * This finalizes everything and sets up viewports and clears colors and performs the actual render step\n   */\n  private drawSceneView(\n    scene: Three.Scene,\n    view: View,\n    renderer?: Three.WebGLRenderer,\n    target?: Three.WebGLRenderTarget\n  ) {\n    renderer = renderer || this.renderer;\n\n    const offset = { x: view.viewBounds.left, y: view.viewBounds.top };\n    const size = view.viewBounds;\n    const rendererSize = renderer.getSize();\n    const pixelRatio = renderer.getPixelRatio();\n    rendererSize.width *= pixelRatio;\n    rendererSize.height *= pixelRatio;\n    const background = view.background;\n    const context = renderer.getContext();\n\n    // Something is up with threejs that does not allow us to set viewport x and y values. So for targets\n    // We simply size the target to the view size and render. Thus scissoring is not required\n    if (!target) {\n      // Set the scissor rectangle.\n      context.enable(context.SCISSOR_TEST);\n      context.scissor(\n        offset.x,\n        rendererSize.height - offset.y - size.height,\n        size.width,\n        size.height\n      );\n      // If a background is established, we should clear the background color\n      // Specified for this context\n      if (view.background) {\n        // Clear the rect of color and depth so the region is totally it's own\n        context.clearColor(\n          background[0],\n          background[1],\n          background[2],\n          background[3]\n        );\n      }\n    }\n\n    // Get the view's clearing preferences\n    if (view.clearFlags) {\n      // For targets, we must also perform clear operations\n      if (target) {\n        // TODO: This is frustrating. Right now we can't specify and set the viewport for a render target\n        // Possibly with Threejs going away we can actually be more explcit for the render area to a render target\n        // and not cause this overhead of resizing the render target for every picking pass\n        target.setSize(size.width, size.height);\n        renderer.setRenderTarget(target);\n        renderer.clear(\n          view.clearFlags.indexOf(ClearFlags.COLOR) > -1,\n          view.clearFlags.indexOf(ClearFlags.DEPTH) > -1,\n          view.clearFlags.indexOf(ClearFlags.STENCIL) > -1\n        );\n      } else {\n        renderer\n          .getContext()\n          .clear(\n            (view.clearFlags.indexOf(ClearFlags.COLOR) > -1\n              ? context.COLOR_BUFFER_BIT\n              : 0x0) |\n              (view.clearFlags.indexOf(ClearFlags.DEPTH) > -1\n                ? context.DEPTH_BUFFER_BIT\n                : 0x0) |\n              (view.clearFlags.indexOf(ClearFlags.STENCIL) > -1\n                ? context.STENCIL_BUFFER_BIT\n                : 0x0)\n          );\n      }\n    }\n\n    // Default clearing is depth and color\n    else {\n      // For targets, we must also perform clear operations\n      if (target) {\n        // TODO: This is frustrating. Right now we can't specify and set the viewport for a render target\n        // Possibly with Threejs going away we can actually be more explcit for the render area to a render target\n        // and not cause this overhead of resizing the render target for every picking pass\n        target.setSize(size.width, size.height);\n        renderer.setRenderTarget(target);\n        renderer.clear(true, true);\n      } else {\n        context.clear(context.COLOR_BUFFER_BIT | context.DEPTH_BUFFER_BIT);\n      }\n    }\n\n    // Make sure the viewport is set properly for the next render\n    renderer.setViewport(\n      offset.x / pixelRatio,\n      offset.y / pixelRatio,\n      size.width,\n      size.height\n    );\n    // Render the scene with the provided view metrics\n    renderer.render(scene, view.viewCamera.baseCamera, target);\n  }\n\n  /**\n   * This allows for querying a view's screen bounds. Null is returned if the view id\n   * specified does not exist.\n   */\n  getViewSize(viewId: string): Bounds | null {\n    for (const sceneView of this.sceneViews) {\n      if (sceneView.view.id === viewId) {\n        return sceneView.view.screenBounds;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * This queries a view's window into a world's space.\n   */\n  getViewWorldBounds(viewId: string): Bounds | null {\n    for (const sceneView of this.sceneViews) {\n      if (sceneView.view.id === viewId) {\n        const view = sceneView.view;\n\n        if (view.screenBounds) {\n          const topLeft = view.viewToWorld({ x: 0, y: 0 });\n          const bottomRight = view.screenToWorld({\n            x: view.screenBounds.right,\n            y: view.screenBounds.bottom\n          });\n\n          return new Bounds({\n            bottom: bottomRight.y,\n            left: topLeft.x,\n            right: bottomRight.x,\n            top: topLeft.y\n          });\n        } else {\n          return null;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * This is the beginning of the system. This should be called immediately after the surface is constructed.\n   * We make this mandatory outside of the constructor so we can make it follow an async pattern.\n   */\n  async init(options: ILayerSurfaceOptions) {\n    // Make sure our desired pixel ratio is set up\n    this.pixelRatio = options.pixelRatio || this.pixelRatio;\n    // Make sure we have a gl context to work with\n    this.setContext(options.context);\n\n    if (this.gl) {\n      // Initialize our GL needs that set the basis for rendering\n      this.initGL(options);\n      // Initialize our event manager that handles mouse interactions/gestures with the canvas\n      this.initMouseManager(options);\n      // Initialize any resources requested or needed, such as textures or rendering surfaces\n      await this.initResources(options);\n    } else {\n      console.warn(\n        \"Could not establish a GL context. Layer Surface will be unable to render\"\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * This initializes the Canvas GL contexts needed for rendering.\n   */\n  private initGL(options: ILayerSurfaceOptions) {\n    if (!this.context) {\n      console.error(\n        \"Can not initialize Layer Surface as a valid GL context was not established.\"\n      );\n      return;\n    }\n\n    // Get the canvas of our context to set up our Three settings\n    const canvas = this.context.canvas;\n    // Get the starting width and height so adjustments don't affect it\n    const width = canvas.width;\n    const height = canvas.height;\n\n    // Generate the renderer along with it's properties\n    this.renderer = new Three.WebGLRenderer({\n      // Context supports rendering to an alpha canvas only if the background color has a transparent\n      // Alpha value.\n      alpha: options.background && options.background[3] < 1.0,\n      // Yes to antialias! Make it preeeeetty!\n      antialias: true,\n      // Make three use an existing canvas rather than generate another\n      canvas,\n      // TODO: This should be toggleable. If it's true it allows us to snapshot the rendering in the canvas\n      //       But we dont' always want it as it makes performance drop a bit.\n      preserveDrawingBuffer: true\n    });\n\n    // Generate a renderer for the picking pass\n    this.pickingRenderer = new Three.WebGLRenderer({\n      // Context supports rendering to an alpha canvas only if the background color has a transparent\n      // Alpha value.\n      alpha: false,\n      // Picking shall not\n      antialias: false,\n      // Do not need this for picking\n      preserveDrawingBuffer: true\n    });\n\n    // NOTE: Uncomment this plus remove this.pickingTarget from the drawSceneView of the color picking pass\n    // to view the colors rendered to the color picking buffer. This disables the interactions but helps\n    // debug what's going on with shaders etc\n    // canvas.parentNode.appendChild(this.pickingRenderer.getContext().canvas);\n\n    // We want clearing to be controlled via the layer\n    this.renderer.autoClear = false;\n    // This sets the pixel ratio to handle differing pixel densities in screens\n    this.setRendererSize(width, height);\n    // Set the pixel ratio to match the pixel density of the monitor in use\n    this.renderer.setPixelRatio(this.pixelRatio);\n\n    // Applies the background color and establishes whether or not the context supports\n    // Alpha or not\n    if (options.background) {\n      this.renderer.setClearColor(\n        new Three.Color(\n          options.background[0],\n          options.background[1],\n          options.background[2]\n        ),\n        options.background[3]\n      );\n    }\n\n    // If a background color was not established, then we set a default background color\n    else {\n      this.renderer.setClearColor(DEFAULT_BACKGROUND_COLOR);\n    }\n\n    // We want clearing to be controlled via the layer\n    this.pickingRenderer.autoClear = false;\n    // Picking does not need retina style precision\n    this.pickingRenderer.setPixelRatio(1.0);\n    // Applies the background color and establishes whether or not the context supports\n    // Alpha or not\n    this.pickingRenderer.setClearColor(new Three.Color(0, 0, 0), 1);\n\n    // Once we have made our renderer we now make us a default scene to which we can add objects\n    this.defaultSceneElements = generateDefaultScene(this.context);\n    this.defaultSceneElements.view.background = options.background;\n    // Set the default scene\n    this.scenes.set(\n      this.defaultSceneElements.scene.id,\n      this.defaultSceneElements.scene\n    );\n    // Make a scene view depth tracker so we can track the order each scene view combo is drawn\n    let sceneViewDepth = 0;\n\n    // Make a SceneView for the default scene and view for mouse interactions\n    this.sceneViews.push({\n      depth: ++sceneViewDepth,\n      scene: this.defaultSceneElements.scene,\n      view: this.defaultSceneElements.view\n    });\n\n    // Turn on the scissor test to keep the rendering clipped within the\n    // Render region of the context\n    this.context.enable(this.context.SCISSOR_TEST);\n\n    // Add the requested scenes to the surface and apply the necessary defaults\n    if (options.scenes) {\n      options.scenes.forEach(sceneOptions => {\n        // Make us a new scene based on the requested options\n        const newScene = new Scene(sceneOptions);\n\n        // Make sure the default view is available for each scene\n        // IFF no view is provided for the scene\n        if (sceneOptions.views.length === 0) {\n          newScene.addView(this.defaultSceneElements.view);\n\n          this.sceneViews.push({\n            depth: ++sceneViewDepth,\n            scene: newScene,\n            view: this.defaultSceneElements.view\n          });\n        }\n\n        // Generate the views requested for the scene\n        sceneOptions.views.forEach(viewOptions => {\n          const newView = new View(viewOptions);\n          newView.camera = newView.camera || this.defaultSceneElements.camera;\n          newView.viewCamera =\n            newView.viewCamera || this.defaultSceneElements.viewCamera;\n          newView.viewport =\n            newView.viewport || this.defaultSceneElements.viewport;\n          newView.pixelRatio = this.pixelRatio;\n          newScene.addView(newView);\n\n          for (const sceneView of this.sceneViews) {\n            if (sceneView.view.id === newView.id) {\n              console.warn(\n                \"You can NOT have two views with the same id. Please use unique identifiers for every view generated.\"\n              );\n            }\n          }\n\n          this.sceneViews.push({\n            depth: ++sceneViewDepth,\n            scene: newScene,\n            view: newView\n          });\n        });\n\n        this.scenes.set(sceneOptions.key, newScene);\n      });\n    }\n  }\n\n  /**\n   * This does special initialization by gathering the layers shader IO, generates a material\n   * and injects special automated uniforms and attributes to make instancing work for the\n   * shader.\n   */\n  private initLayer<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U>\n  ): Layer<T, U> {\n    // Set the layer's parent surface here\n    layer.surface = this;\n    // Set the resource manager this surface utilizes to the layer\n    layer.resource = this.resourceManager;\n    // For the sake of initializing uniforms to the correct values, we must first add the layer to it's appropriate\n    // Scene so that the necessary values will be in place for the sahder IO\n    const scene = this.addLayerToScene(layer);\n    // Get the shader metrics the layer desires\n    const shaderIO = layer.initShader();\n    // Clean out nulls provided as a convenience to the layer\n    shaderIO.instanceAttributes = (shaderIO.instanceAttributes || []).filter(\n      Boolean\n    );\n    shaderIO.vertexAttributes = (shaderIO.vertexAttributes || []).filter(\n      Boolean\n    );\n    shaderIO.uniforms = (shaderIO.uniforms || []).filter(Boolean);\n    // Get the injected shader IO attributes and uniforms\n    const { vertexAttributes, instanceAttributes, uniforms } = injectShaderIO(\n      this.gl,\n      layer,\n      shaderIO\n    );\n    // After all of the shader IO is established, let's calculate the appropriate buffering strategy\n    // For the layer.\n    getLayerBufferType(this.gl, layer, vertexAttributes, instanceAttributes);\n    // Generate the actual shaders to be used by injecting all of the necessary fragments and injecting\n    // Instancing fragments\n    const shaderMetrics = injectFragments(\n      layer,\n      shaderIO,\n      vertexAttributes,\n      instanceAttributes,\n      uniforms\n    );\n    // Generate the geometry this layer will be utilizing\n    const geometry = generateLayerGeometry(\n      layer,\n      shaderMetrics.maxInstancesPerBuffer,\n      vertexAttributes,\n      shaderIO.vertexCount\n    );\n    // This is the material that is generated for the layer that utilizes all of the generated and\n    // Injected shader IO and shader fragments\n    const material = generateLayerMaterial(\n      layer,\n      shaderMetrics.vs,\n      shaderMetrics.fs,\n      uniforms,\n      shaderMetrics.materialUniforms\n    );\n    // And now we can now generate the mesh that will be added to the scene\n    const model = generateLayerModel(layer, geometry, material);\n\n    // Now that all of the elements of the layer are complete, let us apply them to the layer\n    layer.geometry = geometry;\n    layer.instanceAttributes = instanceAttributes;\n    layer.instanceVertexCount = shaderIO.vertexCount;\n    layer.material = material;\n    layer.maxInstancesPerBuffer = shaderMetrics.maxInstancesPerBuffer;\n    layer.model = model;\n    layer.uniforms = uniforms;\n    layer.vertexAttributes = vertexAttributes;\n\n    // Generate the correct buffering strategy for the layer\n    makeLayerBufferManager(this.gl, layer, scene);\n\n    return layer;\n  }\n\n  /**\n   * Initializes elements for handling mouse interactions with the canvas.\n   */\n  private initMouseManager(options: ILayerSurfaceOptions) {\n    // We must inject an event manager to broadcast events through the layers themselves\n    const eventManagers: EventManager[] = ([\n      new LayerMouseEvents(this)\n    ] as EventManager[]).concat(options.eventManagers || []);\n\n    // Generate the mouse manager for the layer\n    this.mouseManager = new MouseEventManager(\n      this.context.canvas,\n      this.sceneViews,\n      eventManagers,\n      options.handlesWheelEvents\n    );\n  }\n\n  /**\n   * This initializes resources needed or requested such as textures or render surfaces.\n   */\n  private async initResources(options: ILayerSurfaceOptions) {\n    // Tell our manager to generate all of the atlas' requested for surface\n    if (options.atlasResources) {\n      for (const resource of options.atlasResources) {\n        await this.atlasManager.createAtlas(resource);\n      }\n    }\n\n    // Initialize our resource manager with the atlas manager\n    this.resourceManager = new AtlasResourceManager({\n      atlasManager: this.atlasManager\n    });\n  }\n\n  /**\n   * This finds the scene and view the layer belongs to based on the layer's props. For invalid or not provided\n   * props, the layer gets added to default scenes and views.\n   */\n  private addLayerToScene<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U>\n  ): Scene {\n    // Get the scene the layer will add itself to\n    let scene = this.scenes.get(layer.props.scene || \"\");\n\n    if (!scene) {\n      // If no scene is specified by the layer, or the scene identifier is invalid, then we add the layer\n      // To the default scene.\n      scene = this.defaultSceneElements.scene;\n\n      if (layer.props.scene) {\n        console.warn(\n          \"Layer specified a scene that is not within the layer surface manager. Layer will be added to the default scene.\"\n        );\n      }\n    }\n\n    // Add the layer to the scene for rendering\n    scene.addLayer(layer);\n\n    return scene;\n  }\n\n  /**\n   * Discontinues a layer's management by this surface. This will invalidate any resources\n   * the layer was using in association with the context. If the layer is re-insertted, it will\n   * be revaluated as though it were a new layer.\n   */\n  private removeLayer<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U> | null\n  ): Layer<T, U> | null {\n    // Make sure we are removing a layer that exists in the system\n    if (!layer) {\n      return null;\n    }\n    if (!this.layers.get(layer && layer.id)) {\n      console.warn(\n        \"Tried to remove a layer that is not in the manager.\",\n        layer\n      );\n      return layer;\n    }\n\n    layer.destroy();\n    this.layers.delete(layer.id);\n\n    return layer;\n  }\n\n  /**\n   * Used for reactive rendering and diffs out the layers for changed layers.\n   */\n  render(layerInitializers: LayerInitializer[]) {\n    if (!this.gl) return;\n\n    // Loop through all of the initializers and properly add and remove layers as needed\n    if (layerInitializers && layerInitializers.length > 0) {\n      layerInitializers.forEach(init => {\n        const layerClass = init[0];\n        const props = init[1];\n        const existingLayer = this.layers.get(props.key);\n\n        if (existingLayer) {\n          existingLayer.willUpdateProps(props);\n          Object.assign(existingLayer.props, props);\n          existingLayer.initializer[1] = existingLayer.props;\n          existingLayer.didUpdateProps();\n        } else {\n          const layer = new layerClass(\n            Object.assign({}, layerClass.defaultProps, props)\n          );\n          layer.initializer = init;\n          this.addLayer(layer);\n        }\n\n        this.willDisposeLayer.set(props.key, false);\n      });\n    }\n\n    // Take any layer that retained it's disposal flag and trash it\n    this.willDisposeLayer.forEach((dispose, layerId) => {\n      if (dispose) {\n        const layer = this.layers.get(layerId);\n        if (layer) {\n          this.removeLayer(layer);\n        } else {\n          console.warn(\n            \"this.willDisposeLayer applied to a layer that does not exist in the existing layer check.\"\n          );\n        }\n      }\n    });\n\n    // Resolve that all disposals occurred\n    this.willDisposeLayer.clear();\n\n    // Reflag every layer for removal again so creation of layers will determine\n    // Which layers remain for a reactive pattern\n    this.layers.forEach((_layer, id) => {\n      this.willDisposeLayer.set(id, true);\n    });\n  }\n\n  /**\n   * This must be executed when the canvas changes size so that we can re-calculate the scenes and views\n   * dimensions for handling all of our rendered elements.\n   */\n  fitContainer(_pixelRatio?: number) {\n    const container = this.context.canvas.parentElement;\n\n    if (container) {\n      const canvas = this.context.canvas;\n      canvas.className = \"\";\n      canvas.setAttribute(\"style\", \"\");\n      container.style.position = \"relative\";\n      canvas.style.position = \"absolute\";\n      canvas.style.left = \"0xp\";\n      canvas.style.top = \"0xp\";\n      canvas.style.width = \"100%\";\n      canvas.style.height = \"100%\";\n      canvas.setAttribute(\"width\", \"\");\n      canvas.setAttribute(\"height\", \"\");\n      const containerBox = container.getBoundingClientRect();\n      const box = canvas.getBoundingClientRect();\n\n      this.resize(box.width || 100, containerBox.height || 100);\n    }\n  }\n\n  /**\n   * This resizes the canvas and retains pixel ratios amongst all of the resources involved.\n   */\n  resize(width: number, height: number, pixelRatio?: number) {\n    this.pixelRatio = pixelRatio || this.pixelRatio;\n    this.sceneViews.forEach(\n      sceneView => (sceneView.view.pixelRatio = this.pixelRatio)\n    );\n    this.setRendererSize(width, height);\n    this.renderer.setPixelRatio(this.pixelRatio);\n    this.pickingRenderer.setPixelRatio(1.0);\n    this.mouseManager.resize();\n  }\n\n  /**\n   * This establishes the rendering canvas context for the surface.\n   */\n  private setContext(\n    context?: WebGLRenderingContext | HTMLCanvasElement | string\n  ) {\n    if (!context) {\n      return;\n    }\n\n    if (isWebGLContext(context)) {\n      this.context = context;\n    } else if (isCanvas(context)) {\n      const canvasContext =\n        context.getContext(\"webgl\") || context.getContext(\"experimental-webgl\");\n\n      if (!canvasContext) {\n        console.warn(\n          \"A valid GL context was not found for the context provided to the surface. This surface will not be able to operate.\"\n        );\n      } else {\n        this.context = canvasContext;\n      }\n    } else if (isString(context)) {\n      const element = document.getElementById(context);\n\n      if (isCanvas(element)) {\n        this.setContext(element);\n      }\n    }\n  }\n\n  /**\n   * This applies a new size to the renderer and resizes any additional resources that requires being\n   * sized along with the renderer.\n   */\n  private setRendererSize(width: number, height: number) {\n    width = width || 100;\n    height = height || 100;\n\n    this.renderer.setSize(width, height);\n    this.pickingRenderer.setSize(width, height);\n\n    if (!this.pickingTarget) {\n      this.pickingTarget = new WebGLRenderTarget(width, height, {\n        magFilter: Three.LinearFilter,\n        minFilter: Three.LinearFilter,\n        stencilBuffer: false\n      });\n    }\n\n    this.pickingTarget.setSize(width, height);\n  }\n\n  /**\n   * This triggers an update to all of the layers that perform picking, the pixel data\n   * within the specified mouse range.\n   */\n  updateColorPickRange(mouse: Vec2, views: View[]) {\n    // We will flag the color range as needing an update\n    this.updateColorPick = {\n      mouse,\n      views\n    };\n  }\n}\n","export * from \"./layer-surface\";\nexport * from \"./event-manager\";\nexport * from \"./layer-processing/generate-default-scene\";\nexport * from \"./layer-processing/generate-layer-geometry\";\nexport * from \"./layer-processing/generate-layer-material\";\nexport * from \"./layer-processing/generate-layer-model\";\nexport * from \"./layer-processing/inject-shader-io\";\nexport * from \"./layer\";\nexport * from \"./mouse-event-manager\";\nexport * from \"./scene\";\nexport * from \"./texture\";\nexport * from \"./view\";\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float borderSize;\\nvarying vec2 pointCoord;\\n${extendHeader}\\n\\nvarying float scale;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  scale = scaleFactor;\\n\\n  vertexColor = color * color.a;\\n  float size = radius * scaleFactor;\\n\\n  float ringWidth = mix(2.0 , thickness, float(thickness > 2.0));\\n\\n  borderSize = mix(\\n    (ringWidth) / size,\\n    ((ringWidth * pixelRatio) / size),\\n    float(pixelRatio > 1.0)\\n  );\\n\\n  edgeSharpness = min(0.2 / (ringWidth * scale),  0.1);\\n\\n  pointCoord = (position.xy + vec2(1.0, 1.0)) / 2.0;\\n\\n  // Center within clip space\\n  vec4 clipCenter = clipSpace(vec3(center, depth));\\n  // Center in screen space\\n  vec2 screenCenter = (clipCenter.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Position in screen space\\n  vec2 vertex = (position.xy * size) + screenCenter;\\n  // Position back to clip space\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), clipCenter.zw);\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\n\\n/** This is the color of the ring */\\nvarying vec4 vertexColor;\\n/**\\n * This is how sharp the ring renders. For tiny rings, it's best to have\\n * less sharpness to better convey the shape of a circle. A good starter setting:\\n * edgeSharpness = mix(0.8, 0.01, min(gl_PointSize / 45.0, 1.0));\\n */\\nvarying float edgeSharpness;\\n/**\\n * This should be a value that sets the thickness of the ring in normal space\\n * relative to the PointSize\\n */\\nvarying float borderSize;\\n/**\\n * Since this is now a quad instead of a point sprite, this provides what gl_PointCoord\\n * used to provide.\\n */\\nvarying vec2 pointCoord;\\n\\nvarying float scale;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius,\\n    dot(dist, dist) * 4.0\\n  );\\n\\n}\\n\\n${extendHeader}\\n\\nvoid main() {\\n  float outer_step_factor = circle(pointCoord, 1.0);\\n  float inner_step_factor = circle(pointCoord, 1.0 - borderSize * scale);\\n\\n  setColor(mix(\\n    mix(                        // Select the outer color outside of the inner radius\\n      vec4(0.0, 0.0, 0.0, 0.0),    // Select invisible outside of inner and outer radius\\n      vertexColor,                  // Select outer color outside of inner, but inside outer\\n      outer_step_factor\\n    ),\\n    vec4(0.0, 0.0, 0.0, 0.0),                 // Select inner color inside inner\\n    inner_step_factor\\n  ));\\n\\n  ${extend}\\n}\\n\"","import * as Three from \"three\";\nimport { InstanceProvider } from \"../../instance-provider\";\nimport { Bounds, IPoint } from \"../../primitives\";\nimport { ILayerProps, IModelType, Layer } from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  IProjection,\n  IShaderInitialization,\n  IUniform,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport { CommonMaterialOptions, IAutoEasingMethod, Vec } from \"../../util\";\nimport { RingInstance } from \"./ring-instance\";\nconst { max } = Math;\n\nexport interface IRingLayerProps<T extends RingInstance>\n  extends ILayerProps<T> {\n  /** This sets a scaling factor for the circle's radius */\n  scaleFactor?(): number;\n  animate?: {\n    color?: IAutoEasingMethod<Vec>;\n    center?: IAutoEasingMethod<Vec>;\n    radius?: IAutoEasingMethod<Vec>;\n  };\n}\n\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class RingLayer<\n  T extends RingInstance,\n  U extends IRingLayerProps<T>\n> extends Layer<T, U> {\n  static defaultProps: IRingLayerProps<RingInstance> = {\n    key: \"\",\n    data: new InstanceProvider<RingInstance>()\n  };\n\n  static attributeNames = {\n    center: \"center\",\n    radius: \"radius\",\n    depth: \"depth\",\n    color: \"color\",\n    thickness: \"thickness\"\n  };\n\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods() {\n    return {\n      // Provide the calculated AABB world bounds for a given circle\n      boundsAccessor: (ring: RingInstance) =>\n        new Bounds({\n          height: ring.radius * 2,\n          width: ring.radius * 2,\n          x: ring.center[0] - ring.radius,\n          y: ring.center[1] - ring.radius\n        }),\n\n      // Provide a precise hit test for the ring\n      hitTest: (ring: RingInstance, point: IPoint, view: IProjection) => {\n        const r = ring.radius / max(...view.camera.scale);\n        const delta = [point.x - ring.center[0], point.y - ring.center[1]];\n\n        return delta[0] * delta[0] + delta[1] * delta[1] < r * r;\n      }\n    };\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<RingInstance> {\n    const scaleFactor = this.props.scaleFactor || (() => 1);\n    const animations = this.props.animate || {};\n    const {\n      color: animateColor,\n      center: animateCenter,\n      radius: animateRadius\n    } = animations;\n\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      1: 1,\n      2: -1,\n      3: 1,\n      4: -1,\n      5: -1\n    };\n\n    const vertexToSide: { [key: number]: number } = {\n      0: -1,\n      1: -1,\n      2: -1,\n      3: 1,\n      4: 1,\n      5: 1\n    };\n\n    return {\n      fs: require(\"./ring-layer.fs\"),\n      instanceAttributes: [\n        {\n          easing: animateCenter,\n          name: RingLayer.attributeNames.center,\n          size: InstanceAttributeSize.TWO,\n          update: o => o.center\n        },\n        {\n          easing: animateRadius,\n          name: RingLayer.attributeNames.radius,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.radius]\n        },\n        {\n          name: RingLayer.attributeNames.depth,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth]\n        },\n        {\n          easing: animateColor,\n          name: RingLayer.attributeNames.color,\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.color\n        },\n        {\n          name: RingLayer.attributeNames.thickness,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.thickness]\n        }\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: (_: IUniform) => [scaleFactor()]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexToSide[vertex],\n            0\n          ]\n        }\n      ],\n      vertexCount: 6,\n      vs: require(\"./ring-layer.vs\")\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentShape;\n  }\n}\n","import { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { observable } from \"../../instance-provider/observable\";\nimport { Vec2 } from \"../../util\";\n\nexport interface IRingInstanceOptions extends IInstanceOptions {\n  /** The center of the ring */\n  center?: Vec2;\n  /** The color of this ring */\n  color?: [number, number, number, number];\n  /** The z depth of the ring (for draw ordering) */\n  depth?: number;\n  /** The outer radius of the ring */\n  radius?: number;\n  /** The thickness of the ring */\n  thickness?: number;\n}\n\nexport class RingInstance extends Instance {\n  @observable color: [number, number, number, number] = [1.0, 1.0, 1.0, 1.0];\n  @observable depth: number = 0;\n  @observable radius: number = 0;\n  @observable thickness: number = 1;\n  @observable center: Vec2 = [0, 0];\n\n  constructor(options: IRingInstanceOptions) {\n    super(options);\n\n    this.color = options.color || this.color;\n    this.depth = options.depth || this.depth;\n    this.radius = options.radius || this.radius;\n    this.thickness = options.thickness || this.thickness;\n    this.center = options.center || this.center;\n  }\n\n  get width() {\n    return this.radius * 2;\n  }\n\n  get height() {\n    return this.radius * 2;\n  }\n\n  get innerRadius() {\n    return this.radius - this.thickness;\n  }\n}\n","export * from \"./ring-instance\";\nexport * from \"./ring-layer\";\n","import { observable } from \"../../instance-provider\";\nimport { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { Anchor, AnchorType, ScaleType } from \"../types\";\n\nexport interface IRectangleInstanceOptions extends IInstanceOptions {\n  /**\n   * The point on the rectangle which will be placed in world space via the x, y coords. This is also the point\n   * which the rectangle will be scaled around.\n   */\n  anchor?: Anchor;\n  /** Depth sorting of the rectangle (or the z value of the lable) */\n  depth?: number;\n  /** The height of the rectangle as it is to be rendered in world space */\n  height?: number;\n  /** Sets the way the rectangle scales with the world */\n  scaling?: ScaleType;\n  /** The color the rectangle should render as */\n  color: [number, number, number, number];\n  /** The width of the rectangle as it is to be rendered in world space */\n  width?: number;\n  /** The x coordinate where the rectangle will be anchored to in world space */\n  x?: number;\n  /** The y coordinate where the rectangle will be anchored to in world space */\n  y?: number;\n}\n\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nconst anchorCalculator: {\n  [key: number]: (anchor: Anchor, rectangle: RectangleInstance) => void;\n} = {\n  [AnchorType.TopLeft]: (anchor: Anchor, _rectangle: RectangleInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopMiddle]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width / 2.0;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopRight]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width + anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.MiddleLeft]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = rectangle.height / 2;\n  },\n  [AnchorType.Middle]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width / 2.0;\n    anchor.y = rectangle.height / 2.0;\n  },\n  [AnchorType.MiddleRight]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width + anchor.padding;\n    anchor.y = rectangle.height / 2.0;\n  },\n  [AnchorType.BottomLeft]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = rectangle.height + anchor.padding;\n  },\n  [AnchorType.BottomMiddle]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width / 2.0;\n    anchor.y = rectangle.height + anchor.padding;\n  },\n  [AnchorType.BottomRight]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width + anchor.padding;\n    anchor.y = rectangle.height + anchor.padding;\n  },\n  [AnchorType.Custom]: (anchor: Anchor, _rectangle: RectangleInstance) => {\n    anchor.x = anchor.x || 0;\n    anchor.y = anchor.y || 0;\n  }\n};\n\n/**\n * This generates a new rectangle instance which will render a single line of text for a given layer.\n * There are restrictions surrounding rectangles due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a rectangle via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Rectangles should only be so long.\n * - Multiline is not supported inherently\n * - Once a rectangle is constructed, only SOME properties can be altered thereafter\n *\n * A rectangle that is constructed can only have some properties set upon creating the rectangle and are locked\n * thereafter. The only way to modify them would be to destroy the rectangle, then construct a new rectangle\n * with the modifications. This has to deal with performance regarding rasterizing the rectangle\n */\nexport class RectangleInstance extends Instance {\n  /** This is the rendered color of the rectangle */\n  @observable color: [number, number, number, number] = [0, 0, 0, 1];\n  /** Depth sorting of the rectangle (or the z value of the lable) */\n  @observable depth: number = 0;\n  /** The height of the rectangle as it is to be rendered in world space */\n  @observable height: number = 1;\n  /** Sets the way the rectangle scales with the world */\n  @observable scaling: ScaleType = ScaleType.BOUND_MAX;\n  /** The width of the rectangle as it is to be rendered in world space */\n  @observable width: number = 1;\n  /** The x coordinate where the rectangle will be anchored to in world space */\n  @observable x: number = 0;\n  /** The y coordinate where the rectangle will be anchored to in world space */\n  @observable y: number = 0;\n\n  // These are properties that can be altered, but have side effects from being changed\n\n  /** This is the anchor location on the  */\n  @observable\n  private _anchor: Anchor = {\n    padding: 0,\n    type: AnchorType.TopLeft,\n    x: 0,\n    y: 0\n  };\n\n  constructor(options: IRectangleInstanceOptions) {\n    super(options);\n\n    this.depth = options.depth || this.depth;\n    this.color = options.color || this.color;\n    this.scaling = options.scaling || this.scaling;\n    this.x = options.x || this.x;\n    this.y = options.y || this.y;\n    this.width = options.width || 1;\n    this.height = options.height || 1;\n\n    // Make sure the anchor is set to the appropriate location\n    options.anchor && this.setAnchor(options.anchor);\n  }\n\n  get anchor() {\n    return this._anchor;\n  }\n\n  /**\n   * This applies a new anchor to this rectangle and properly determines it's anchor position on the rectangle\n   */\n  setAnchor(anchor: Anchor) {\n    const newAnchor = {\n      padding: anchor.padding || 0,\n      type: anchor.type,\n      x: anchor.x || 0,\n      y: anchor.y || 0\n    };\n\n    // Calculate the new anchors position values\n    anchorCalculator[newAnchor.type](newAnchor, this);\n    // Apply the anchor\n    this._anchor = newAnchor;\n  }\n}\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the image as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the image is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y;\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float((cameraScale.x > cameraScale.y || cameraScale.y > cameraScale.x) && useScaleMode != 0.0);\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n  // Apply the image's tint as a tint to the image\\n  vertexColor = color * color.a;\\n\\n  // Correct aspect ratio.\\n  vec2 adjustedSize = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * size + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the image\\n  float imageScreenScale = mix(\\n    screenSize.y / adjustedSize.y,\\n    screenSize.x / adjustedSize.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the image is supposed to be, then we automagically\\n  // scale down our image to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / imageScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\n${extendHeader}\\n\\nvoid main() {\\n  setColor(vertexColor);\\n  ${extend}\\n}\\n\"","import * as Three from \"three\";\nimport { InstanceProvider } from \"../../instance-provider\";\nimport { Bounds, IPoint } from \"../../primitives\";\nimport { ILayerProps, IModelType, Layer } from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  IProjection,\n  IShaderInitialization,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport { CommonMaterialOptions } from \"../../util\";\nimport { ScaleType } from \"../types\";\nimport { RectangleInstance } from \"./rectangle-instance\";\n\nconst { min, max } = Math;\n\nexport interface IRectangleLayerProps<T extends RectangleInstance>\n  extends ILayerProps<T> {\n  atlas?: string;\n}\n\n/**\n * This layer displays Rectangles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class RectangleLayer<\n  T extends RectangleInstance,\n  U extends IRectangleLayerProps<T>\n> extends Layer<T, U> {\n  static defaultProps: IRectangleLayerProps<RectangleInstance> = {\n    key: \"\",\n    data: new InstanceProvider<RectangleInstance>()\n  };\n\n  static attributeNames = {\n    location: \"location\",\n    anchor: \"anchor\",\n    size: \"size\",\n    depth: \"depth\",\n    scaling: \"scaling\",\n    color: \"color\"\n  };\n\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods() {\n    return {\n      // Provide the calculated AABB world bounds for a given rectangle\n      boundsAccessor: (rectangle: RectangleInstance) => {\n        const anchorEffect = [0, 0];\n\n        if (rectangle.anchor) {\n          anchorEffect[0] = rectangle.anchor.x || 0;\n          anchorEffect[1] = rectangle.anchor.y || 0;\n        }\n        const topLeft = [\n          rectangle.x - anchorEffect[0],\n          rectangle.y - anchorEffect[1]\n        ];\n\n        return new Bounds({\n          height: rectangle.height,\n          width: rectangle.width,\n          x: topLeft[0],\n          y: topLeft[1]\n        });\n      },\n\n      // Provide a precise hit test for the circle\n      hitTest: (\n        rectangle: RectangleInstance,\n        point: IPoint,\n        projection: IProjection\n      ) => {\n        // The bounds of the rectangle is in world space, but it does not account for the scale mode of the rectangle.\n        // Here, we will apply the scale mode testing to the rectangle\n        const maxScale = max(...projection.camera.scale);\n        const minScale = min(...projection.camera.scale);\n\n        // If we scale always then the rectangle stays within it's initial world bounds at all times\n        if (rectangle.scaling === ScaleType.ALWAYS) {\n          return true;\n        }\n\n        // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n        // Rectangle the same size. If the camera zooms out then the bounds === the world bounds.\n        else if (rectangle.scaling === ScaleType.BOUND_MAX) {\n          // We are zooming out. the bounds will stay within the world bounds\n          if (minScale <= 1 && maxScale <= 1) {\n            return true;\n          }\n\n          // We are zooming in. The bounds will shrink to keep the rectangle at max font size\n          else {\n            // The location is within the world, but we reverse project the anchor spread\n            const anchorEffect = [0, 0];\n\n            if (rectangle.anchor) {\n              anchorEffect[0] = rectangle.anchor.x || 0;\n              anchorEffect[1] = rectangle.anchor.y || 0;\n            }\n\n            const topLeft = [\n              rectangle.x - anchorEffect[0] / maxScale,\n              rectangle.y - anchorEffect[1] / maxScale\n            ];\n\n            // Reverse project the size and we should be within the distorted world coordinates\n            return new Bounds({\n              height: rectangle.height / maxScale,\n              width: rectangle.width / maxScale,\n              x: topLeft[0],\n              y: topLeft[1]\n            }).containsPoint(point);\n          }\n        }\n\n        // If we never allow the rectangle to scale, then the bounds will grow and shrink to counter the effects\n        // Of the camera zoom\n        else if (rectangle.scaling === ScaleType.NEVER) {\n          // The location is within the world, but we reverse project the anchor spread\n          const anchorEffect = [0, 0];\n\n          if (rectangle.anchor) {\n            anchorEffect[0] = rectangle.anchor.x || 0;\n            anchorEffect[1] = rectangle.anchor.y || 0;\n          }\n\n          const topLeft = projection.worldToScreen({\n            x: rectangle.x - anchorEffect[0] / projection.camera.scale[0],\n            y: rectangle.y - anchorEffect[1] / projection.camera.scale[1]\n          });\n\n          const screenPoint = projection.worldToScreen(point);\n\n          // Reverse project the size and we should be within the distorted world coordinates\n          return new Bounds({\n            height: rectangle.height,\n            width: rectangle.width,\n            x: topLeft.x,\n            y: topLeft.y\n          }).containsPoint(screenPoint);\n        }\n\n        return true;\n      }\n    };\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<RectangleInstance> {\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      1: 1,\n      2: -1,\n      3: 1,\n      4: -1,\n      5: -1\n    };\n\n    const vertexToSide: { [key: number]: number } = {\n      0: 0,\n      1: 0,\n      2: 0,\n      3: 1,\n      4: 1,\n      5: 1\n    };\n\n    return {\n      fs: require(\"./rectangle-layer.fs\"),\n      instanceAttributes: [\n        {\n          name: RectangleLayer.attributeNames.location,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.x, o.y]\n        },\n        {\n          name: RectangleLayer.attributeNames.anchor,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.anchor.x || 0, o.anchor.y || 0]\n        },\n        {\n          name: RectangleLayer.attributeNames.size,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.width, o.height]\n        },\n        {\n          name: RectangleLayer.attributeNames.depth,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth]\n        },\n        {\n          name: RectangleLayer.attributeNames.scaling,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.scaling]\n        },\n        {\n          name: RectangleLayer.attributeNames.color,\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.color\n        }\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: _u => [1]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexToSide[vertex],\n            0\n          ]\n        }\n      ],\n      vertexCount: 6,\n      vs: require(\"./rectangle-layer.vs\")\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentShape;\n  }\n}\n","export * from \"./rectangle-layer\";\nexport * from \"./rectangle-instance\";\n","import { observable } from \"../../instance-provider\";\nimport { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { Label } from \"../../primitives/label\";\nimport { LabelAtlasResource, LabelRasterizer } from \"../../surface/texture\";\nimport { Anchor, AnchorType, ScaleType } from \"../types\";\n\nexport interface ILabelInstanceOptions\n  extends IInstanceOptions,\n    Partial<Label> {\n  /**\n   * The point on the label which will be placed in world space via the x, y coords. This is also the point\n   * which the label will be scaled around.\n   */\n  anchor?: Anchor;\n  /** The color the label should render as */\n  color: [number, number, number, number];\n  /** Depth sorting of the label (or the z value of the label) */\n  depth?: number;\n  /** The font of the label */\n  fontFamily?: string;\n  /** The font size of the label in px */\n  fontSize?: number;\n  /** Stylization of the font */\n  fontStyle?: Label[\"fontStyle\"];\n  /** The weight of the font */\n  fontWeight?: Label[\"fontWeight\"];\n  /** When this is set labels will only draw the label up to this size. If below, the label will automatically truncate with ellipses */\n  maxWidth?: number;\n  /** When in BOUND_MAX mode, this allows the label to scale up beyond it's max size */\n  maxScale?: number;\n  /** This allows for control over rasterization to the atlas */\n  rasterization?: {\n    /**\n     * This is the scale of the rasterization on the atlas. Higher numbers increase atlas usage, but can provide\n     * higher quality render outputs to the surface.\n     */\n    scale: number;\n  };\n  /** Sets the way the label scales with the world */\n  scaling?: ScaleType;\n  /** Scales the label uniformly */\n  scale?: number;\n  /** This will be the text that should render with  */\n  text: string;\n  /** The x coordinate where the label will be anchored to in world space */\n  x?: number;\n  /** The y coordinate where the label will be anchored to in world space */\n  y?: number;\n}\n\n/** This is to make a clear type that references label text values */\ntype TextValue = string;\n/** This is to make a clear type that references label css font values */\ntype CSSFont = string;\n/**\n * This is a reference for a rasterization that has reference counting. When the references go to zero,\n * the rasterization should be invalidated and resources freed for the rasterization.\n */\ntype RasterizationReference = {\n  resource: LabelAtlasResource;\n  references: number;\n};\n\n/**\n * This is a lookup to find existing rasterizations for a particularly created label so that every\n * new label does not have to go through the rasterization process.\n */\nconst rasterizationLookUp = new Map<\n  TextValue,\n  Map<CSSFont, RasterizationReference>\n>();\n\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nconst anchorCalculator: {\n  [key: number]: (anchor: Anchor, label: LabelInstance) => void;\n} = {\n  [AnchorType.TopLeft]: (anchor: Anchor, _label: LabelInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopMiddle]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width / 2.0;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopRight]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width + anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.MiddleLeft]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = label.height / 2;\n  },\n  [AnchorType.Middle]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width / 2.0;\n    anchor.y = label.height / 2.0;\n  },\n  [AnchorType.MiddleRight]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width + anchor.padding;\n    anchor.y = label.height / 2.0;\n  },\n  [AnchorType.BottomLeft]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = label.height + anchor.padding;\n  },\n  [AnchorType.BottomMiddle]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width / 2.0;\n    anchor.y = label.height + anchor.padding;\n  },\n  [AnchorType.BottomRight]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width + anchor.padding;\n    anchor.y = label.height + anchor.padding;\n  },\n  [AnchorType.Custom]: (anchor: Anchor, _label: LabelInstance) => {\n    anchor.x = anchor.x || 0;\n    anchor.y = anchor.y || 0;\n  }\n};\n\n/**\n * This generates a new label instance which will render a single line of text for a given layer.\n * There are restrictions surrounding labels due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a label via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Labels should only be so long.\n * - Multiline is not supported inherently\n * - Once a label is constructed, only SOME properties can be altered thereafter\n *\n * A label that is constructed can only have some properties set upon creating the label and are locked\n * thereafter. The only way to modify them would be to destroy the label, then construct a new label\n * with the modifications. This has to deal with performance regarding rasterizing the label\n */\nexport class LabelInstance extends Instance implements Label {\n  /**\n   * TODO: We should be implementing the destroy on LabelInstances to clean this up\n   * Frees up module scoped data.\n   */\n  static destroy() {\n    rasterizationLookUp.clear();\n  }\n\n  /** This is the rendered color of the label */\n  @observable color: [number, number, number, number] = [0, 0, 0, 1];\n  /** Depth sorting of the label (or the z value of the label) */\n  @observable depth: number = 0;\n  /** When in BOUND_MAX mode, this allows the label to scale up beyond it's max size */\n  @observable maxScale: number = 1;\n  /** Sets the way the label scales with the world */\n  @observable scaling: ScaleType = ScaleType.BOUND_MAX;\n  /** Scales the label uniformly */\n  @observable scale: number = 1.0;\n  /** The x coordinate where the label will be anchored to in world space */\n  @observable x: number = 0;\n  /** The y coordinate where the label will be anchored to in world space */\n  @observable y: number = 0;\n\n  // The following properties are properties that are locked in after creating this label\n  // As the properties are completely locked into how the label was rasterized and can not\n  // Nor should not be easily adjusted for performance concerns\n\n  private _cssFont: string = \"\";\n  private _fontFamily: string = \"Arial\";\n  private _fontSize: number = 12;\n  private _fontStyle: Label[\"fontStyle\"] = \"normal\";\n  private _fontWeight: Label[\"fontWeight\"] = 400;\n  private _maxWidth: number = 0;\n  private _text: string = \"\";\n\n  @observable private _width: number = 0;\n\n  @observable private _height: number = 0;\n\n  private _isDestroyed: boolean = false;\n\n  @observable private _rasterization: RasterizationReference;\n\n  // The following are the getters for the locked in parameters of the label so we can read\n  // The properties but not set any of them.\n\n  /**\n   * This is the full css string that represents this label. This + the text of the label is essentially\n   * a unique identifier for the rendering of the label and is used to key the rasterization of the label\n   * so that label rasterization can be shared for similar labels.\n   */\n  get cssFont() {\n    return this._cssFont;\n  }\n  /** This flag indicates if this label is valid anymore */\n  get isDestroyed() {\n    return this._isDestroyed;\n  }\n  /** This is the font family of the label */\n  get fontFamily() {\n    return this._fontFamily;\n  }\n  /**\n   * This is the size of the label in pixels. For Labels, this correlates to the rendering font size.\n   * The true pixel height of the label is calculated and placed into the height property for the label.\n   */\n  get fontSize() {\n    return this._fontSize;\n  }\n  /** This is the style of the font (italic, oblique, etc) */\n  get fontStyle() {\n    return this._fontStyle;\n  }\n  /** This is the font weight specified for the label (bold, normal, etc). */\n  get fontWeight() {\n    return this._fontWeight;\n  }\n  /** This is the max width in pixels this label can fill */\n  get maxWidth() {\n    return this._maxWidth;\n  }\n  /** This gets the atlas resource that is uniquely identified for this label */\n  get resource() {\n    return this._rasterization.resource;\n  }\n  /** This is the label's text. */\n  get text() {\n    return this._text;\n  }\n  /**\n   * If a maxWidth is specified, there is a chance the text will be truncated.\n   * This provides the calculated truncated text.\n   */\n  get truncatedText() {\n    return this._rasterization.resource.truncatedText || this.text;\n  }\n\n  /**\n   * This is the width in world space of the label. If there is no camera distortion,\n   * this would be the width of the label in pixels on the screen.\n   */\n  get width() {\n    return this._width;\n  }\n\n  /**\n   * This is the height in world space of the label. If there is no camera distortion,\n   * this would be the height of the label in pixels on the screen.\n   */\n  get height() {\n    return this._height;\n  }\n\n  // These are properties that can be altered, but have side effects from being changed\n\n  /** This is the anchor location on the  */\n  @observable\n  private _anchor: Anchor = {\n    padding: 0,\n    type: AnchorType.TopLeft,\n    x: 0,\n    y: 0\n  };\n\n  constructor(options: ILabelInstanceOptions) {\n    super(options);\n\n    this.depth = options.depth || this.depth;\n    this.color = options.color || this.color;\n    this.maxScale = options.maxScale || this.maxScale;\n    this.scaling = options.scaling || this.scaling;\n    this.scale = options.scale || this.scale;\n\n    this.x = options.x || this.x;\n    this.y = options.y || this.y;\n\n    this._fontFamily = options.fontFamily || this._fontFamily;\n    this._fontSize = options.fontSize || this._fontSize;\n    this._fontStyle = options.fontStyle || this._fontStyle;\n    this._fontWeight = options.fontWeight || this._fontWeight;\n    this._maxWidth = options.maxWidth || 0;\n    this._text = options.text || this._text;\n\n    // We get the CSS font string for this label so we can uniquely identify the rasterization\n    // Easily.\n    this._cssFont = LabelRasterizer.makeCSSFont(this, 1);\n    // This is css font used to look up rasterizations. This lookup includes the max width of the label\n    // Which the css font does not account for\n    const cssFontLookup = `${this._cssFont}_${this._maxWidth}`;\n    // Look for other same texts that have been rasterized\n    let rasterizations = rasterizationLookUp.get(this._text);\n    let rasterization: RasterizationReference | null | undefined;\n\n    if (rasterizations) {\n      // Look for those texts that have been rasterized in the same fashion that this label is requesting\n      rasterization = rasterizations.get(cssFontLookup);\n\n      // If a rasterization exists, we must increment the use reference\n      if (rasterization) {\n        rasterization.references++;\n      }\n    } else {\n      rasterizations = new Map<CSSFont, RasterizationReference>();\n    }\n\n    // If we have not found an existing rasterization\n    if (!rasterization) {\n      rasterization = {\n        references: 1,\n        resource: new LabelAtlasResource(this)\n      };\n\n      // Look to see if any rasterization options were specified\n      if (options.rasterization) {\n        rasterization.resource.sampleScale = options.rasterization.scale || 1.0;\n      }\n\n      // Ensure the sample scale is set. Defaults to 1.0\n      rasterization.resource.sampleScale =\n        rasterization.resource.sampleScale || 1.0;\n      // Rasterize the resource generated for this label. We need it immediately rasterized so\n      // That we can utilize the dimensions for calculations.\n      LabelRasterizer.renderSync(rasterization.resource);\n      // Now that we have an official rasterization for this text / label combo, we shall store it\n      // For others to look up\n      rasterizationLookUp.set(this._text, rasterizations);\n      rasterizations.set(cssFontLookup, rasterization);\n    }\n\n    this._rasterization = rasterization;\n    this._width = rasterization.resource.rasterization.world.width;\n    this._height = rasterization.resource.rasterization.world.height;\n\n    // Make sure the anchor is set to the appropriate location\n    options.anchor && this.setAnchor(options.anchor);\n  }\n\n  get anchor() {\n    return this._anchor;\n  }\n\n  /**\n   * Labels are a sort of unique case where the use of a label should be destroyed as rasterization\n   * resources are in a way kept alive through reference counting.\n   */\n  destroy() {\n    if (!this._isDestroyed) {\n      this._isDestroyed = true;\n      this._rasterization.references--;\n\n      // If all references are cleared, then the rasterization needs to be eradicated\n      if (this._rasterization.references === 0) {\n        this._rasterization.resource;\n      }\n    }\n  }\n\n  /**\n   * Triggers any attributes waiting on resources\n   */\n  resourceTrigger() {\n    // Trigger the accessed element that the layer utilizes for resource fetching.\n    this._rasterization = this._rasterization;\n    this._width = this._width;\n  }\n\n  /**\n   * This applies a new anchor to this label and properly determines it's anchor position on the label\n   */\n  setAnchor(anchor: Anchor) {\n    const newAnchor = {\n      padding: anchor.padding || 0,\n      type: anchor.type,\n      x: anchor.x || 0,\n      y: anchor.y || 0\n    };\n\n    // Calculate the new anchors position values\n    anchorCalculator[newAnchor.type](newAnchor, this);\n    // Apply the anchor\n    this._anchor = newAnchor;\n  }\n}\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Determine final screen size of label\\n  vec3 screenSize = cameraSpaceSize(vec3(size * scale / maxScale, 1.0));\\n\\n  // Test whether the label is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y || screenSize.x > size.x;\\n\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n\\n  // Correct aspect ratio.  Sufficient fix for most applications.\\n  // Will need another solution in the case of:\\n  //  (cameraScale y != cameraScale.x) && (cameraScale.x != 1 && cameraScale.y != 1)\\n\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float(cameraScale.x != cameraScale.y);\\n\\n  vec2 adjustedSize = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  vec2 scaledAnchor = anchor * scale;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + scaledAnchor;\\n\\n  vec2 adjustedAnchor = mix(\\n    scaledAnchor,\\n    (scaledAnchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // Get the position of the current vertex\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * scale * adjustedSize + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the label\\n  float labelScreenScale = mix(\\n    screenSize.y / adjustedSize.y,\\n    screenSize.x / adjustedSize.x,\\n    float((cameraScale.x != 1.0))\\n  );\\n\\n  float currentScale = labelScreenScale * scale;\\n\\n  // If our screen rendering is larger than the size the label is supposed to be, then we automagically\\n  // scale down our label to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / labelScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  // --Texture and Color\\n  // Get the tex coord from our inject texture info\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the label's color as a tint to the label (all labels are rendered white to the base texture)\\n  vertexColor = color;\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n${extendHeader}\\n\\nvoid main() {\\n  gl_FragColor = texture2D(labelAtlas, texCoord) * vertexColor;\\n  setColor(gl_FragColor * gl_FragColor.a);\\n  ${extend}\\n}\\n\"","import * as Three from \"three\";\nimport { InstanceProvider } from \"../../instance-provider\";\nimport { Bounds, IPoint } from \"../../primitives\";\nimport { ILayerProps, IModelType, Layer } from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  IProjection,\n  IShaderInitialization,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport {\n  CommonMaterialOptions,\n  IAutoEasingMethod,\n  Vec,\n  Vec2\n} from \"../../util\";\nimport { ScaleType } from \"../types\";\nimport { LabelInstance } from \"./label-instance\";\n\nexport interface ILabelLayerProps<T extends LabelInstance>\n  extends ILayerProps<T> {\n  atlas?: string;\n  animate?: {\n    color?: IAutoEasingMethod<Vec>;\n    location?: IAutoEasingMethod<Vec>;\n    size?: IAutoEasingMethod<Vec>;\n  };\n}\n\nconst { max, min } = Math;\n\n/**\n * This layer displays Labels and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class LabelLayer<\n  T extends LabelInstance,\n  U extends ILabelLayerProps<T>\n> extends Layer<T, U> {\n  static defaultProps: ILabelLayerProps<LabelInstance> = {\n    key: \"\",\n    data: new InstanceProvider<LabelInstance>()\n  };\n\n  static attributeNames = {\n    location: \"location\",\n    anchor: \"anchor\",\n    size: \"size\",\n    depth: \"depth\",\n    scaling: \"scaling\",\n    texture: \"texture\",\n    color: \"color\",\n    scale: \"scale\",\n    maxScale: \"maxScale\"\n  };\n\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods() {\n    return {\n      // Provide the calculated AABB world bounds for a given label\n      boundsAccessor: (label: LabelInstance) => {\n        const anchor: Vec2 = [label.anchor.x || 0, label.anchor.y || 0];\n\n        const topLeft = [label.x - anchor[0], label.y - anchor[1]];\n\n        return new Bounds({\n          height: label.height,\n          width: label.width,\n          x: topLeft[0],\n          y: topLeft[1]\n        });\n      },\n\n      // Provide a precise hit test for the circle\n      hitTest: (label: LabelInstance, point: IPoint, view: IProjection) => {\n        // The bounds of the label is in world space, but it does not account for the scale mode of the label.\n        // Here, we will apply the scale mode testing to the label\n        const maxScale = max(...view.camera.scale);\n        const minScale = min(...view.camera.scale);\n\n        // If we scale always then the label stays within it's initial world bounds at all times\n        if (label.scaling === ScaleType.ALWAYS) {\n          return true;\n        }\n\n        // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n        // Label the same size. If the camera zooms out then the bounds === the world bounds.\n        else if (label.scaling === ScaleType.BOUND_MAX) {\n          // We are zooming out. the bounds will stay within the world bounds\n          if (minScale <= 1 && maxScale <= 1) {\n            return true;\n          }\n\n          // We are zooming in. The bounds will shrink to keep the label at max font size\n          else {\n            const anchor: Vec2 = [label.anchor.x || 0, label.anchor.y || 0];\n\n            // The location is within the world, but we reverse project the anchor spread\n            const topLeft = view.worldToScreen({\n              x: label.x - anchor[0] / view.camera.scale[0],\n              y: label.y - anchor[1] / view.camera.scale[1]\n            });\n\n            const screenPoint = view.worldToScreen(point);\n\n            // Reverse project the size and we should be within the distorted world coordinates\n            return new Bounds({\n              height: label.height,\n              width: label.width,\n              x: topLeft.x,\n              y: topLeft.y\n            }).containsPoint(screenPoint);\n          }\n        }\n\n        // If we never allow the label to scale, then the bounds will grow and shrink to counter the effects\n        // Of the camera zoom\n        else if (label.scaling === ScaleType.NEVER) {\n          const anchor: Vec2 = [label.anchor.x || 0, label.anchor.y || 0];\n\n          // The location is within the world, but we reverse project the anchor spread\n          const topLeft = view.worldToScreen({\n            x: label.x - anchor[0] / view.camera.scale[0],\n            y: label.y - anchor[1] / view.camera.scale[1]\n          });\n\n          const screenPoint = view.worldToScreen(point);\n\n          // Reverse project the size and we should be within the distorted world coordinates\n          return new Bounds({\n            height: label.height,\n            width: label.width,\n            x: topLeft.x,\n            y: topLeft.y\n          }).containsPoint(screenPoint);\n        }\n\n        return true;\n      }\n    };\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<LabelInstance> {\n    const animations = this.props.animate || {};\n    const {\n      color: animateColor,\n      location: animateLocation,\n      size: animateSize\n    } = animations;\n\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      1: 1,\n      2: -1,\n      3: 1,\n      4: -1,\n      5: -1\n    };\n\n    const vertexToSide: { [key: number]: number } = {\n      0: 0,\n      1: 0,\n      2: 0,\n      3: 1,\n      4: 1,\n      5: 1\n    };\n\n    return {\n      fs: require(\"./label-layer.fs\"),\n      instanceAttributes: [\n        {\n          easing: animateLocation,\n          name: LabelLayer.attributeNames.location,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.x, o.y]\n        },\n        {\n          name: LabelLayer.attributeNames.anchor,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.anchor.x || 0, o.anchor.y || 0]\n        },\n        {\n          easing: animateSize,\n          name: LabelLayer.attributeNames.size,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.width, o.height]\n        },\n        {\n          name: LabelLayer.attributeNames.depth,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth]\n        },\n        {\n          name: LabelLayer.attributeNames.scaling,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.scaling]\n        },\n        {\n          atlas: {\n            key: this.props.atlas || \"\",\n            name: \"labelAtlas\"\n          },\n          name: LabelLayer.attributeNames.texture,\n          update: o => this.resource.request(this, o, o.resource)\n        },\n        {\n          easing: animateColor,\n          name: LabelLayer.attributeNames.color,\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.color\n        },\n        {\n          name: LabelLayer.attributeNames.scale,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.scale]\n        },\n        {\n          name: LabelLayer.attributeNames.maxScale,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.maxScale]\n        }\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: _u => [1]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexToSide[vertex],\n            0\n          ]\n        }\n      ],\n      vertexCount: 6,\n      vs: require(\"./label-layer.vs\")\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentImage;\n  }\n}\n","import { ImageAtlasResource } from \"./image-atlas-resource\";\n\nlet canvas: CanvasRenderingContext2D | null;\n\nexport interface IImageRasterizedMetrics {\n  canvas: HTMLCanvasElement;\n  height: number;\n  width: number;\n}\n\nexport class ImageRasterizer {\n  /**\n   * This loops until our canvas context is available\n   */\n  static async awaitContext() {\n    // Iterate till the browser provides a valid canvas to render elements into\n    while (!canvas) {\n      this.getContext();\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n  }\n\n  /**\n   * Attempts to populate the 'canvas' context for rendering images offscreen.\n   */\n  static getContext() {\n    if (!canvas) {\n      canvas = document.createElement(\"canvas\").getContext(\"2d\");\n    }\n\n    return canvas;\n  }\n\n  /**\n   * This renders our image to a sizeable canvas where we loop over the pixel data to determine\n   * the bounds of the image.\n   *\n   * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n   *                                 the size to be rendered to the texture to the size the image\n   *                                 should be within world space.\n   * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n   */\n  static calculateImageSize(\n    resource: ImageAtlasResource,\n    _sampleScale?: number\n  ) {\n    /** Get the image properties for rasterizing */\n    const image = resource.image.element;\n\n    if (!image) {\n      console.warn(\n        \"Image does not exist! Please ensure the resource contains a valid image.\"\n      );\n      return;\n    }\n\n    if (!canvas) {\n      console.warn(\n        \"The Image rasterizer was unable to establish a valid canvas context. Please ensure the system supports contexts and ensure the document is ready first.\"\n      );\n      return;\n    }\n\n    if (image.width === 0 || image.height === 0) {\n      console.warn(\n        \"Images provided shoud have valid dimensions! Please ensure the image is loaded first.\"\n      );\n      return;\n    }\n\n    // Just make sure th canvas is available\n    canvas.canvas.width = 100;\n    canvas.canvas.height = 100;\n    // Render the image into our canvas merely to ensure the image can be rendered\n    // This action often 'warms up' images such as images that have a data URL instead of a path\n    canvas.drawImage(image, 0, 0);\n\n    // Make sure the rasterization object is initialized\n    resource.rasterization = resource.rasterization || {\n      texture: { height: 0, width: 0 },\n      world: { height: 0, width: 0 }\n    };\n\n    // Update the calculated texture size.\n    resource.rasterization.texture = {\n      height: image.height * resource.sampleScale,\n      width: image.width * resource.sampleScale\n    };\n\n    resource.rasterization.world = {\n      height: image.height,\n      width: image.width\n    };\n\n    resource.rasterization.image = image;\n  }\n\n  /**\n   * Performs the rendering of the image\n   */\n  static async render(\n    resource: ImageAtlasResource\n  ): Promise<ImageAtlasResource> {\n    // Make sure our canvas object is ready for rendering\n    await this.awaitContext();\n\n    // Calculate all of the image metrics and ensure the image can be drawn\n    this.calculateImageSize(resource, resource.sampleScale);\n\n    return resource;\n  }\n\n  /**\n   * Performs the rendering of the image\n   */\n  static renderSync(resource: ImageAtlasResource): ImageAtlasResource {\n    // Ensure our offscreen canvas is prepped\n    this.getContext();\n\n    if (!canvas) {\n      console.warn(\n        \"Can not render a image synchronously without the canvas context being ready.\"\n      );\n      return resource;\n    }\n\n    // Calculate all of the image metrics and generate a canvas on the image that can\n    // Be rendered to the canvas.\n    this.calculateImageSize(resource, resource.sampleScale);\n\n    return resource;\n  }\n}\n","import { Bounds } from \"../../primitives/bounds\";\nimport { Atlas, IAtlasOptions } from \"./atlas\";\nimport { ColorAtlasResource } from \"./color-atlas-resource\";\nimport { ColorRasterizer } from \"./color-rasterizer\";\nimport { ImageAtlasResource } from \"./image-atlas-resource\";\nimport { LabelAtlasResource } from \"./label-atlas-resource\";\nimport { LabelRasterizer } from \"./label-rasterizer\";\nimport { ImageDimensions, PackNode } from \"./pack-node\";\nimport { SubTexture } from \"./sub-texture\";\n\nconst debug = require(\"debug\")(\"webgl-surface:Atlas\");\n\nconst ZERO_IMAGE: SubTexture = {\n  aspectRatio: 0,\n  atlasBL: { x: 0, y: 0 },\n  atlasBR: { x: 0, y: 0 },\n  atlasReferenceID: \"\",\n  atlasTexture: null,\n  atlasTL: { x: 0, y: 0 },\n  atlasTR: { x: 0, y: 0 },\n  heightOnAtlas: 0,\n  isValid: false,\n  pixelHeight: 0,\n  pixelWidth: 0,\n  widthOnAtlas: 0\n};\n\nexport type AtlasResource =\n  | ColorAtlasResource\n  | LabelAtlasResource\n  | ImageAtlasResource;\n\n/**\n * Determines if a SubTexture is a valid SubTexture for rendering\n */\nfunction isValidImage(image: SubTexture) {\n  let isValid = false;\n\n  if (image && image.isValid) {\n    if (image.pixelWidth && image.pixelHeight) {\n      isValid = true;\n    }\n  }\n\n  return isValid;\n}\n\n/**\n * Defines a manager of atlas', which includes generating the atlas and producing\n * textures defining those pieces of atlas.\n */\nexport class AtlasManager {\n  /** Stores all of the generated atlas' in a lookup by name */\n  allAtlas = new Map<string, Atlas>();\n\n  /**\n   * Atlas' must be created from scratch to update them. In order to properly\n   * update an existing one, you must destroy it then recreate it again.\n   * This is from not knowing how to update a texture via three js.\n   *\n   * @param resources The images with their image path set to be loaded into the atlas.\n   *               Images that keep an atlas ID of null indicates the image did not load\n   *               correctly\n   *\n   * @return {Texture} The Threejs texture that is created as our atlas. The images injected\n   *                   into the texture will be populated with the atlas'\n   */\n  async createAtlas(options: IAtlasOptions, resources?: AtlasResource[]) {\n    // Create the new Atlas object that tracks all of our atlas' metrics\n    const atlas = new Atlas(options);\n    // Set the manager to the atlas\n    atlas.setManager(this);\n    // Make the atlas identifiable by it's name\n    this.allAtlas.set(atlas.id, atlas);\n\n    // Now we load, pack in, and draw each requested resource\n    if (resources) {\n      await this.updateAtlas(atlas.id, resources);\n    }\n\n    debug(\"Atlas Created-> %o\", atlas);\n\n    return atlas;\n  }\n\n  /**\n   * Free ALL resources under this manager\n   */\n  destroy() {\n    this.allAtlas.forEach(value => value.destroy());\n  }\n\n  /**\n   * Disposes of the resources the atlas held and makes the atlas invalid for use\n   *\n   * @param atlasName\n   */\n  destroyAtlas(atlasName: string) {\n    const atlas = this.allAtlas.get(atlasName);\n\n    if (atlas) {\n      atlas.destroy();\n    }\n  }\n\n  private setDefaultImage(image: SubTexture, atlasName: string) {\n    image = Object.assign(image, ZERO_IMAGE, { atlasReferenceID: atlasName });\n    return image;\n  }\n\n  /**\n   * This loads, packs, and draws the indicated image into the specified canvas\n   * using the metrics that exists for the specified atlas.\n   *\n   * @param resource The image who should have it's image path loaded\n   * @param atlasName The name of the atlas to make the packing work\n   * @param canvas The canvas we will be drawing into to generate the complete image\n   *\n   * @return {Promise<boolean>} Promise that resolves to if the image successfully was drawn or not\n   */\n  private async draw(atlas: Atlas, resource: AtlasResource): Promise<boolean> {\n    const canvas = atlas.texture.image;\n    const atlasName = atlas.id;\n\n    // Register the resource with the atlas\n    if (!atlas.registerResource(resource)) {\n      console.warn(\n        \"Could not draw resource to the atlas as the resource was not properly registered to the atlas first\",\n        atlas,\n        resource\n      );\n      return Promise.resolve(false);\n    }\n\n    // First we must load the image\n    // Make a buffer to hold our new image\n    // Load the image into memory, default to keeping the alpha channel\n    const loadedImage: HTMLImageElement | null = await this.loadImage(resource);\n\n    // Only a non-null image means the image loaded correctly\n    if (loadedImage && isValidImage(resource.texture)) {\n      // Get the sub texture that is going to be applied to the atlas\n      const rasterization = resource.rasterization;\n      const texture = resource.texture;\n      // Now we create a Rectangle to store the image dimensions\n      const rect: Bounds = new Bounds({\n        bottom: rasterization.texture.height,\n        left: 0,\n        right: rasterization.texture.width,\n        top: 0\n      });\n      // Create ImageDimension to insert into our atlas mapper\n      const dimensions: ImageDimensions = {\n        first: texture,\n        second: rect\n      };\n\n      // Auto add a buffer in\n      dimensions.second.width += 1;\n      dimensions.second.height += 1;\n      // Get the atlas map node\n      const packing: PackNode = atlas.packing;\n      // Store the node resulting from the insert operation\n      const insertedNode: PackNode | null = packing.insert(dimensions);\n\n      // If the result was NULL we did not successfully insert the image into any map\n      if (insertedNode) {\n        debug(\"Atlas location determined: %o\", insertedNode);\n\n        // Apply the image to the node\n        insertedNode.nodeImage = texture;\n\n        // Set our image's atlas properties\n        const ux = insertedNode.nodeDimensions.x / atlas.width;\n        const uy = insertedNode.nodeDimensions.y / atlas.height;\n        const uw = insertedNode.nodeDimensions.width / atlas.width;\n        const uh = insertedNode.nodeDimensions.height / atlas.height;\n        const onePixelX = 1 / atlas.width;\n\n        const atlasDimensions: Bounds = new Bounds({\n          bottom: 1.0 - uy,\n          left: ux,\n          right: ux + uw,\n          top: 1.0 - (uy + uh)\n        });\n\n        const bottom = atlasDimensions.bottom;\n        const top = atlasDimensions.y;\n        const left = atlasDimensions.x;\n        const right = atlasDimensions.x + atlasDimensions.width - onePixelX;\n\n        texture.atlasReferenceID = atlasName;\n        texture.atlasTL = { x: left, y: top };\n        texture.atlasBR = { x: right, y: bottom };\n        texture.atlasBL = { x: left, y: bottom };\n        texture.atlasTR = { x: right, y: top };\n        texture.widthOnAtlas = Math.abs(texture.atlasTR.x - texture.atlasTL.x);\n        texture.heightOnAtlas = Math.abs(texture.atlasTR.y - texture.atlasBR.y);\n        texture.pixelWidth = rasterization.texture.width;\n        texture.pixelHeight = rasterization.texture.height;\n\n        // Now draw the image to the indicated canvas\n        canvas\n          .getContext(\"2d\")\n          .drawImage(\n            loadedImage,\n            insertedNode.nodeDimensions.x,\n            insertedNode.nodeDimensions.y\n          );\n\n        // We have finished inserting\n        return true;\n      } else {\n        // Log an error\n        console.error(`Could not fit resource into atlas`, resource);\n        resource.texture = this.setDefaultImage(resource.texture, atlasName);\n        return false;\n      }\n    } else {\n      if (!resource.texture.isValid) {\n        debug(\"Resource was invalidated during load:\", resource);\n      } else {\n        // Log an error and load a default sub texture\n        console.error(`Could not load resource:`, resource);\n      }\n\n      resource.texture = this.setDefaultImage(resource.texture, atlasName);\n      return false;\n    }\n  }\n\n  /**\n   * Retrieves the threejs texture for the atlas\n   *\n   * @param atlasName The identifier of the atlas\n   */\n  getAtlasTexture(atlasName: string): Atlas | undefined {\n    return this.allAtlas.get(atlasName);\n  }\n\n  /**\n   * This takes in any atlas resource and rasterizes it.\n   *\n   * @param {SubTexture} resource This is any atlas resource which will have it's image rasterized\n   *\n   * @return {Promise<HTMLImageElement>} A promise to resolve to the loaded image\n   *                                     or null if there was an error\n   */\n  private async loadImage(\n    resource: AtlasResource\n  ): Promise<HTMLImageElement | null> {\n    let imageSrc: string = \"\";\n\n    const subTexture = resource.texture || new SubTexture();\n    resource.texture = subTexture;\n\n    if (resource.texture.isValid === false) return null;\n\n    if (resource instanceof ImageAtlasResource) {\n      // If the texture was provided an image then we ensure the image is loaded\n      // Then hand it back\n      if (resource.image.element) {\n        if (\n          resource.image.element.width !== 0 &&\n          resource.image.element.height !== 0\n        ) {\n          const image = resource.image.element;\n          subTexture.pixelWidth = image.width;\n          subTexture.pixelHeight = image.height;\n          subTexture.aspectRatio = image.width / image.height;\n\n          return image;\n        }\n\n        const image = await new Promise<HTMLImageElement | null>(resolve => {\n          const image: HTMLImageElement | undefined = resource.image.element;\n\n          if (image) {\n            image.onload = function() {\n              subTexture.pixelWidth = image.width;\n              subTexture.pixelHeight = image.height;\n              subTexture.aspectRatio = image.width / image.height;\n              resolve(image);\n            };\n\n            image.onerror = function() {\n              resolve(null);\n            };\n          } else {\n            resolve(null);\n          }\n        });\n\n        return image;\n      }\n\n      // If a string was returned, we must load the image then return the image\n      else if (resource.image.path) {\n        imageSrc = resource.image.path;\n      }\n    } else if (resource instanceof LabelAtlasResource) {\n      // Ensure the label has been rasterized to a canvas element\n      if (!resource.rasterization.canvas) {\n        await LabelRasterizer.render(resource);\n      }\n\n      // Make sure the rasterization properly executed\n      if (resource.rasterization.canvas) {\n        debug(\"Rasterized label %o\", resource.rasterization);\n        imageSrc = resource.rasterization.canvas.toDataURL(\"image/png\");\n      } else {\n        console.warn(\"The label was not able to be rasterized\");\n      }\n    } else if (resource instanceof ColorAtlasResource) {\n      // Ensure the color has been rasterized to a canvas element\n      if (!resource.rasterization.canvas) {\n        await ColorRasterizer.render(resource);\n      }\n\n      // Make sure the rasterization properly executed\n      if (resource.rasterization.canvas) {\n        debug(\"Rasterized color %o\", resource.rasterization);\n        imageSrc = resource.rasterization.canvas.toDataURL(\"image/png\");\n      } else {\n        console.warn(\"The color was not able to be rasterized\");\n      }\n    }\n\n    if (imageSrc) {\n      const image = await new Promise<HTMLImageElement | null>(resolve => {\n        const image: HTMLImageElement = new Image();\n\n        image.onload = function() {\n          subTexture.pixelWidth = image.width;\n          subTexture.pixelHeight = image.height;\n          subTexture.aspectRatio = image.width / image.height;\n          resolve(image);\n        };\n\n        image.onerror = function() {\n          resolve(null);\n        };\n\n        image.src = imageSrc;\n      });\n\n      return image;\n    }\n\n    return null;\n  }\n\n  /**\n   * This targets an existing atlas and attempts to update it with the provided atlas resources.\n   *\n   * @param atlasName\n   * @param resources\n   */\n  async updateAtlas(atlasName: string, resources: AtlasResource[]) {\n    const atlas = this.allAtlas.get(atlasName);\n\n    if (atlas) {\n      for (const resource of resources) {\n        await this.draw(atlas, resource);\n      }\n\n      // Perform the best method for updating the underlying texture of the atlas to the latest changes\n      atlas.updateTexture();\n    } else {\n      console.warn(\n        \"Can not update non-existing atlas:\",\n        atlasName,\n        \"These resources will not be loaded:\",\n        resources\n      );\n    }\n  }\n}\n","import { Bounds } from \"../../primitives/bounds\";\nimport { SubTexture } from \"./sub-texture\";\n\n/**\n * Helps us track the bounds of the image being loaded in tied in with the\n * texture it represents\n */\nexport interface ImageDimensions {\n  first: SubTexture;\n  second: Bounds;\n}\n\n/**\n * This is used specifically by the atlas manager to aid in packing\n * in textures within an area. This will guarantee boundaries of textures are\n * not violated and provide proper feedback for where to draw a given image\n */\nexport class PackNode {\n  child: [PackNode | null, PackNode | null] = [null, null];\n  isLeaf: boolean = true;\n  nodeDimensions: Bounds;\n  nodeImage: SubTexture | null = null;\n\n  constructor(x: number, y: number, width: number, height: number) {\n    this.nodeDimensions = new Bounds({\n      height,\n      width,\n      x,\n      y\n    });\n  }\n\n  /**\n   * Deletes all of the sub nodes in this Mapping, thus clearing up memory usage\n   */\n  destroy() {\n    const child0 = this.child[0];\n    const child1 = this.child[1];\n    this.nodeImage = null;\n    if (child0) {\n      child0.destroy();\n    }\n    if (child1) {\n      child1.destroy();\n    }\n    this.child[0] = null;\n    this.child[1] = null;\n  }\n\n  /**\n   * Indicates if there is a child\n   */\n  hasChild(): boolean {\n    const child0 = this.child[0];\n    const child1 = this.child[1];\n    if (child0 && !child0.nodeImage) {\n      return !child0.isLeaf;\n    }\n    if (child1 && !child1.nodeImage) {\n      return !child1.isLeaf;\n    }\n    return false;\n  }\n\n  /**\n   * Inserts images into our mapping, fitting them appropriately\n   */\n  insert(image: ImageDimensions): PackNode | null {\n    let child0 = this.child[0];\n    let child1 = this.child[1];\n\n    if (!this.isLeaf && child0 && child1) {\n      // Try inserting into first child\n      const newNode: PackNode | null = child0.insert(image);\n      if (newNode !== null) {\n        return newNode;\n      }\n      // No room in first so insert into second\n      return child1.insert(image);\n    } else {\n      // If there's already an image here, return\n      if (this.nodeImage) {\n        return null;\n      }\n      // Check the fit status of the image in this nodes rectangle space\n      const fitFlag: number = this.nodeDimensions.fits(image.second);\n      // If we're too small, return null indicating can not fit\n      if (fitFlag === 0) {\n        return null;\n      }\n      // If we're just right, accept\n      if (fitFlag === 1) {\n        return this;\n      }\n\n      // Otherwise, gotta split this node and create some leaves\n      this.isLeaf = false;\n      // Get the image width\n      const imgWidth: number = image.second.width;\n      const imgHeight: number = image.second.height;\n      // Decide which way to split\n      const dWidth: number = this.nodeDimensions.width - imgWidth;\n      const dHeight: number = this.nodeDimensions.height - image.second.height;\n\n      if (dWidth > dHeight) {\n        child0 = this.child[0] = new PackNode(\n          this.nodeDimensions.x,\n          this.nodeDimensions.y,\n          imgWidth,\n          this.nodeDimensions.height\n        );\n        child1 = this.child[1] = new PackNode(\n          this.nodeDimensions.x + imgWidth,\n          this.nodeDimensions.y,\n          dWidth,\n          this.nodeDimensions.height\n        );\n      } else {\n        child0 = this.child[0] = new PackNode(\n          this.nodeDimensions.x,\n          this.nodeDimensions.y,\n          this.nodeDimensions.width,\n          imgHeight\n        );\n        child1 = this.child[1] = new PackNode(\n          this.nodeDimensions.x,\n          this.nodeDimensions.y + imgHeight,\n          this.nodeDimensions.width,\n          dHeight\n        );\n      }\n    }\n\n    // Insert into first child we created\n    return child0.insert(image);\n  }\n\n  /**\n   * Removes the image from the mapping and tries to open up as much space as possible.\n   *\n   * @param {AtlasTexture} image The image to insert into the\n   */\n  remove(image: SubTexture): boolean {\n    const child0 = this.child[0];\n    const child1 = this.child[1];\n\n    if (child1 && child0 && !this.isLeaf) {\n      // Try removing from first child\n      let removed: boolean = child0.remove(image);\n      if (removed) {\n        return true;\n      }\n      // Try remove from second\n      removed = child1.remove(image);\n\n      if (!child0.hasChild()) {\n        if (!child1.hasChild()) {\n          this.child[0] = null;\n          this.child[1] = null;\n        }\n      }\n\n      return removed;\n    } else {\n      if (this.nodeImage === image) {\n        this.nodeImage = null;\n        delete image.atlasReferenceID;\n        image.pixelWidth = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n}\n","import { observable } from \"../../instance-provider\";\nimport { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { Image } from \"../../primitives/image\";\nimport { ImageAtlasResource, ImageRasterizer } from \"../../surface/texture\";\nimport { Anchor, AnchorType, ScaleType } from \"../types\";\n\nconst { max } = Math;\n\nexport interface IImageInstanceOptions extends IInstanceOptions {\n  /**\n   * The point on the image which will be placed in world space via the x, y coords. This is also the point\n   * which the image will be scaled around.\n   */\n  anchor?: Anchor;\n  /** Depth sorting of the image (or the z value of the lable) */\n  depth?: number;\n  /** This is the HTMLImageElement that the image is to render. This element MUST be loaded completely before this instance is created. */\n  element: HTMLImageElement;\n  /** The height of the image as it is to be rendered in world space */\n  height?: number;\n  /** Sets the way the image scales with the world */\n  scaling?: ScaleType;\n  /** The color the image should render as */\n  tint: [number, number, number, number];\n  /** The width of the image as it is to be rendered in world space */\n  width?: number;\n  /** The x coordinate where the image will be anchored to in world space */\n  x?: number;\n  /** The y coordinate where the image will be anchored to in world space */\n  y?: number;\n}\n\n/**\n * This is a reference for a rasterization that has reference counting. When the references go to zero,\n * the rasterization should be invalidated and resources freed for the rasterization.\n */\ntype RasterizationReference = {\n  resource: ImageAtlasResource;\n  references: number;\n};\n\n/**\n * This is a lookup to find existing rasterizations for a particularly created image so that every\n * new image does not have to go through the rasterization process.\n */\nconst rasterizationLookUp = new Map<\n  string | HTMLImageElement,\n  RasterizationReference\n>();\n\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nconst anchorCalculator: {\n  [key: number]: (anchor: Anchor, image: ImageInstance) => void;\n} = {\n  [AnchorType.TopLeft]: (anchor: Anchor, _image: ImageInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopMiddle]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width / 2.0;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopRight]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width + anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.MiddleLeft]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = image.height / 2;\n  },\n  [AnchorType.Middle]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width / 2.0;\n    anchor.y = image.height / 2.0;\n  },\n  [AnchorType.MiddleRight]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width + anchor.padding;\n    anchor.y = image.height / 2.0;\n  },\n  [AnchorType.BottomLeft]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = image.height + anchor.padding;\n  },\n  [AnchorType.BottomMiddle]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width / 2.0;\n    anchor.y = image.height + anchor.padding;\n  },\n  [AnchorType.BottomRight]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width + anchor.padding;\n    anchor.y = image.height + anchor.padding;\n  },\n  [AnchorType.Custom]: (anchor: Anchor, _image: ImageInstance) => {\n    anchor.x = anchor.x || 0;\n    anchor.y = anchor.y || 0;\n  }\n};\n\n/**\n * This generates a new image instance.\n * There are restrictions surrounding images due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a image via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Images should only be so large.\n * - Once a image is constructed, only SOME properties can be altered thereafter\n *\n * An image that is constructed can only have some properties set upon creating the image and are locked\n * thereafter. The only way to modify them would be to destroy the image, then construct a new image\n * with the modifications. This has to deal with performance regarding rasterizing the image.\n */\nexport class ImageInstance extends Instance implements Image {\n  /**\n   * TODO: We should be implementing the destroy on ImageInstances to clean this up\n   * Frees up module scoped data.\n   */\n  static destroy() {\n    rasterizationLookUp.clear();\n  }\n\n  /** This is the rendered color of the image */\n  @observable tint: [number, number, number, number] = [0, 0, 0, 1];\n  /** Depth sorting of the image (or the z value of the lable) */\n  @observable depth: number = 0;\n  /** The height of the image as it is to be rendered in world space */\n  @observable height: number = 1;\n  /** Sets the way the image scales with the world */\n  @observable scaling: ScaleType = ScaleType.BOUND_MAX;\n  /** The width of the image as it is to be rendered in world space */\n  @observable width: number = 1;\n  /** The x coordinate where the image will be anchored to in world space */\n  @observable x: number = 0;\n  /** The y coordinate where the image will be anchored to in world space */\n  @observable y: number = 0;\n\n  get size() {\n    return max(this.width, this.height);\n  }\n  set size(value: number) {\n    const aspect = this.width / this.height;\n    this.width = value * aspect;\n    this.height = value;\n  }\n\n  // The following properties are properties that are locked in after creating this image\n  // As the properties are completely locked into how the image was rasterized and can not\n  // Nor should not be easily adjusted for performance concerns\n\n  private _sourceWidth: number = 0;\n  private _sourceHeight: number = 0;\n  private _isDestroyed: boolean = false;\n  @observable private _rasterization: RasterizationReference;\n  private _path: string;\n  private _element: HTMLImageElement;\n\n  // The following are the getters for the locked in parameters of the image so we can read\n  // The properties but not set any of them.\n\n  /** This is the provided element this image will be rendering */\n  get element() {\n    return this._element;\n  }\n  /** This flag indicates if this image is valid anymore */\n  get isDestroyed() {\n    return this._isDestroyed;\n  }\n  /** This is the path to the image's resource if it's available */\n  get path() {\n    return this._path;\n  }\n  /** This gets the atlas resource that is uniquely idenfied for this image */\n  get resource() {\n    return this._rasterization.resource;\n  }\n\n  /**\n   * This is the width in world space of the image. If there is no camera distortion,\n   * this would be the width of the image in pixels on the screen.\n   */\n  get sourceWidth() {\n    return this._sourceWidth;\n  }\n\n  /**\n   * This is the height in world space of the image. If there is no camera distortion,\n   * this would be the height of the image in pixels on the screen.\n   */\n  get sourceHeight() {\n    return this._sourceHeight;\n  }\n\n  // These are properties that can be altered, but have side effects from being changed\n\n  /** This is the anchor location on the  */\n  @observable\n  private _anchor: Anchor = {\n    padding: 0,\n    type: AnchorType.TopLeft,\n    x: 0,\n    y: 0\n  };\n\n  constructor(options: IImageInstanceOptions) {\n    super(options);\n\n    this.depth = options.depth || this.depth;\n    this.tint = options.tint || this.tint;\n    this.scaling = options.scaling || this.scaling;\n    this.x = options.x || this.x;\n    this.y = options.y || this.y;\n\n    // This is the image that is to be rendered\n    this._element = options.element;\n    // Look for other same texts that have been rasterized\n    let rasterization = rasterizationLookUp.get(this._path || this._element);\n\n    // If a rasterization exists, we must increment the use reference\n    if (rasterization) {\n      rasterization.references++;\n    }\n\n    // If we have not found an existing rasterization\n    if (!rasterization) {\n      rasterization = {\n        references: 1,\n        resource: new ImageAtlasResource(this)\n      };\n\n      // Ensure the sample scale is set. Defaults to 1.0\n      rasterization.resource.sampleScale =\n        rasterization.resource.sampleScale || 1.0;\n      // Rasterize the resource generated for this image. We need it immediately rasterized so\n      // That we can utilize the dimensions for calculations.\n      ImageRasterizer.renderSync(rasterization.resource);\n      // Now that we have an official rasterization for this image, we shall store it\n      // For others to look up\n      rasterizationLookUp.set(this._path || this._element, rasterization);\n    }\n\n    this._rasterization = rasterization;\n    this._sourceWidth = rasterization.resource.rasterization.world.width;\n    this._sourceHeight = rasterization.resource.rasterization.world.height;\n\n    this.width = options.width || this._sourceWidth || 1;\n    this.height = options.height || this._sourceHeight || 1;\n\n    // Make sure the anchor is set to the appropriate location\n    options.anchor && this.setAnchor(options.anchor);\n  }\n\n  get anchor() {\n    return this._anchor;\n  }\n\n  /**\n   * Images are a sort of unique case where the use of a image should be destroyed as rasterization\n   * resources are in a way kept alive through reference counting.\n   */\n  destroy() {\n    if (!this._isDestroyed) {\n      this._isDestroyed = true;\n      this._rasterization.references--;\n\n      // If all references are cleared, then the rasterization needs to be eradicated\n      if (this._rasterization.references === 0) {\n        this._rasterization.resource;\n        console.warn(\"The destroy method still needs completion\");\n      }\n    }\n  }\n\n  resourceTrigger() {\n    // Trigger the accessed element that the layer utilizes for resource fetching.\n    this._rasterization = this._rasterization;\n  }\n\n  /**\n   * This applies a new anchor to this image and properly determines it's anchor position on the image\n   */\n  setAnchor(anchor: Anchor) {\n    const newAnchor = {\n      padding: anchor.padding || 0,\n      type: anchor.type,\n      x: anchor.x || 0,\n      y: anchor.y || 0\n    };\n\n    // Calculate the new anchors position values\n    anchorCalculator[newAnchor.type](newAnchor, this);\n    // Apply the anchor\n    this._anchor = newAnchor;\n  }\n}\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the image as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the image is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y;\\n\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float(cameraScale.x != cameraScale.y);\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n\\n  // Get the tex coord from our inject texture info\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the image's tint as a tint to the image\\n  vertexColor = tint;\\n\\n  // Correct aspect ratio.\\n  vec2 adjustedSize = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * adjustedSize + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the image\\n  float imageScreenScale = mix(\\n    screenSize.y / adjustedSize.y,\\n    screenSize.x / adjustedSize.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the image is supposed to be, then we automagically\\n  // scale down our image to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / imageScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n${extendHeader}\\n\\nvoid main() {\\n  gl_FragColor = texture2D(imageAtlas, texCoord) * vertexColor;\\n  setColor(gl_FragColor * gl_FragColor.a);\\n  ${extend}\\n}\\n\"","import * as Three from \"three\";\nimport { InstanceProvider } from \"../../instance-provider\";\nimport { Bounds, IPoint } from \"../../primitives\";\nimport { ILayerProps, IModelType, Layer } from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  IProjection,\n  IShaderInitialization,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport { IAutoEasingMethod, Vec } from \"../../util\";\nimport { CommonMaterialOptions } from \"../../util/common-options\";\nimport { ScaleType } from \"../types\";\nimport { ImageInstance } from \"./image-instance\";\n\nconst { min, max } = Math;\n\nexport interface IImageLayerProps<T extends ImageInstance>\n  extends ILayerProps<T> {\n  atlas?: string;\n  animate?: {\n    tint?: IAutoEasingMethod<Vec>;\n    location?: IAutoEasingMethod<Vec>;\n    size?: IAutoEasingMethod<Vec>;\n  };\n}\n\n/**\n * This layer displays Images and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class ImageLayer<\n  T extends ImageInstance,\n  U extends IImageLayerProps<T>\n> extends Layer<T, U> {\n  static defaultProps: IImageLayerProps<any> = {\n    key: \"\",\n    data: new InstanceProvider<ImageInstance>()\n  };\n\n  static attributeNames = {\n    location: \"location\",\n    anchor: \"anchor\",\n    size: \"size\",\n    depth: \"depth\",\n    scaling: \"scaling\",\n    texture: \"texture\",\n    tint: \"tint\"\n  };\n\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods() {\n    return {\n      // Provide the calculated AABB world bounds for a given image\n      boundsAccessor: (image: ImageInstance) => {\n        const anchorEffect = [0, 0];\n\n        if (image.anchor) {\n          anchorEffect[0] = image.anchor.x || 0;\n          anchorEffect[1] = image.anchor.y || 0;\n        }\n\n        const topLeft = [image.x - anchorEffect[0], image.y - anchorEffect[1]];\n\n        return new Bounds({\n          height: image.height,\n          width: image.width,\n          x: topLeft[0],\n          y: topLeft[1]\n        });\n      },\n\n      // Provide a precise hit test for the circle\n      hitTest: (image: ImageInstance, point: IPoint, view: IProjection) => {\n        // The bounds of the image is in world space, but it does not account for the scale mode of the image.\n        // Here, we will apply the scale mode testing to the image\n        const maxScale = max(...view.camera.scale);\n        const minScale = min(...view.camera.scale);\n\n        // If we scale always then the image stays within it's initial world bounds at all times\n        if (image.scaling === ScaleType.ALWAYS) {\n          return true;\n        }\n\n        // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n        // Image the same size. If the camera zooms out then the bounds === the world bounds.\n        else if (image.scaling === ScaleType.BOUND_MAX) {\n          // We are zooming out. the bounds will stay within the world bounds\n          if (minScale <= 1 && maxScale <= 1) {\n            return true;\n          }\n\n          // We are zooming in. The bounds will shrink to keep the image at max font size\n          else {\n            // The location is within the world, but we reverse project the anchor spread\n            const anchorEffect = [0, 0];\n\n            if (image.anchor) {\n              anchorEffect[0] = image.anchor.x || 0;\n              anchorEffect[1] = image.anchor.y || 0;\n            }\n\n            const topLeft = view.worldToScreen({\n              x: image.x - anchorEffect[0] / view.camera.scale[0],\n              y: image.y - anchorEffect[1] / view.camera.scale[1]\n            });\n\n            const screenPoint = view.worldToScreen(point);\n\n            // Reverse project the size and we should be within the distorted world coordinates\n            return new Bounds({\n              height: image.height,\n              width: image.width,\n              x: topLeft.x,\n              y: topLeft.y\n            }).containsPoint(screenPoint);\n          }\n        }\n\n        // If we never allow the image to scale, then the bounds will grow and shrink to counter the effects\n        // Of the camera zoom\n        else if (image.scaling === ScaleType.NEVER) {\n          // The location is within the world, but we reverse project the anchor spread\n          const anchorEffect = [0, 0];\n\n          if (image.anchor) {\n            anchorEffect[0] = image.anchor.x || 0;\n            anchorEffect[1] = image.anchor.y || 0;\n          }\n\n          const topLeft = view.worldToScreen({\n            x: image.x - anchorEffect[0] / view.camera.scale[0],\n            y: image.y - anchorEffect[1] / view.camera.scale[1]\n          });\n\n          const screenPoint = view.worldToScreen(point);\n\n          // Reverse project the size and we should be within the distorted world coordinates\n          return new Bounds({\n            height: image.height,\n            width: image.width,\n            x: topLeft.x,\n            y: topLeft.y\n          }).containsPoint(screenPoint);\n        }\n\n        return true;\n      }\n    };\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<ImageInstance> {\n    const animations = this.props.animate || {};\n    const {\n      tint: animateTint,\n      location: animateLocation,\n      size: animateSize\n    } = animations;\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      1: 1,\n      2: -1,\n      3: 1,\n      4: -1,\n      5: -1\n    };\n\n    const vertexToSide: { [key: number]: number } = {\n      0: 0,\n      1: 0,\n      2: 0,\n      3: 1,\n      4: 1,\n      5: 1\n    };\n\n    return {\n      fs: require(\"./image-layer.fs\"),\n      instanceAttributes: [\n        {\n          easing: animateLocation,\n          name: ImageLayer.attributeNames.location,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.x, o.y]\n        },\n        {\n          name: ImageLayer.attributeNames.anchor,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.anchor.x || 0, o.anchor.y || 0]\n        },\n        {\n          easing: animateSize,\n          name: ImageLayer.attributeNames.size,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.width, o.height]\n        },\n        {\n          name: ImageLayer.attributeNames.depth,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth]\n        },\n        {\n          name: ImageLayer.attributeNames.scaling,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.scaling]\n        },\n        {\n          atlas: {\n            key: this.props.atlas || \"\",\n            name: \"imageAtlas\"\n          },\n          name: ImageLayer.attributeNames.texture,\n          update: o => this.resource.request(this, o, o.resource)\n        },\n        {\n          easing: animateTint,\n          name: ImageLayer.attributeNames.tint,\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.tint\n        }\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: _u => [1]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexToSide[vertex],\n            0\n          ]\n        }\n      ],\n      vertexCount: 6,\n      vs: require(\"./image-layer.vs\")\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentImage;\n  }\n}\n","import { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { observable } from \"../../instance-provider/observable\";\n\nexport interface IEdgeInstanceOptions extends IInstanceOptions {\n  /** The color of this edge at the start point. */\n  colorStart?: [number, number, number, number];\n  /** The color of this edge at the end point. */\n  colorEnd?: [number, number, number, number];\n  /** This is the list of control points  */\n  control?: [number, number][];\n  /** The z depth of the edge (for draw ordering) */\n  depth?: number;\n  /** End point of the edge. */\n  end: [number, number];\n  /** Beginning point of the edge. */\n  start: [number, number];\n  /** Start width of the edge. */\n  widthStart?: number;\n  /** End width of the edge */\n  widthEnd?: number;\n}\n\nexport type EdgeColor = [number, number, number, number];\n\nexport class EdgeInstance extends Instance {\n  @observable colorStart: EdgeColor = [1.0, 1.0, 1.0, 1.0];\n  @observable colorEnd: EdgeColor = [1.0, 1.0, 1.0, 1.0];\n  @observable control: [number, number][] = [[0, 0], [0, 0]];\n  @observable depth: number = 0;\n  @observable end: [number, number] = [0, 0];\n  @observable start: [number, number] = [0, 0];\n  @observable widthStart: number = 1.0;\n  @observable widthEnd: number = 1.0;\n\n  get length() {\n    const delta = [this.end[0] - this.start[0], this.end[1] - this.start[1]];\n\n    return Math.sqrt(delta[0] * delta[0] + delta[1] * delta[1]);\n  }\n\n  /**\n   * Calculates the midpoint of the edge\n   */\n  get midpoint() {\n    return 0;\n  }\n\n  /**\n   * Calculates a perpendicular direction vector to the edge\n   */\n  get perpendicular(): [number, number] {\n    const length = this.length;\n\n    return [\n      (this.end[1] - this.start[1]) / length,\n      -(this.end[0] - this.start[0]) / length\n    ];\n  }\n\n  /**\n   * Applies the edge width to the start and end\n   */\n  setEdgeWidth(width: number) {\n    if (width) {\n      this.widthEnd = width;\n      this.widthStart = width;\n    }\n  }\n\n  /**\n   * Applies the color to the start and end\n   */\n  setColor(color: EdgeColor) {\n    this.colorStart = color;\n    this.colorEnd = color;\n  }\n\n  constructor(options: IEdgeInstanceOptions) {\n    super(options);\n    this.colorStart = options.colorStart || this.colorStart;\n    this.colorEnd = options.colorEnd || this.colorEnd;\n    this.control = options.control || this.control;\n    this.depth = options.depth || this.depth;\n    this.end = options.end || this.end;\n    this.widthStart = options.widthStart || this.widthStart;\n    this.widthEnd = options.widthEnd || this.widthEnd;\n    this.start = options.start || this.start;\n  }\n}\n","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\n${extendHeader}\\n\\nvoid main() {\\n  setColor(vertexColor);\\n  ${extend}\\n}\\n\"","module.exports = \"/**\\n  This vertex shader calculates edges based in world space to make an edge based on\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nprecision highp float;\\n\\nvarying vec4 vertexColor;\\n\\n// Interpolation type injection\\n${interpolation}\\n\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n\\n  // Convert our world points to screen space\\n  vec4 startClip = clipSpace(vec3(start, depth));\\n  vec4 endClip = clipSpace(vec3(end, depth));\\n  vec2 startScreen = (startClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  vec2 endScreen = (endClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Controls for this mode are screen space deltas from the end points\\n  vec2 control1 = startScreen + vec2(control.x, -control.y) * scaleFactor;\\n  vec2 control2 = endScreen + vec2(control.z, -control.w) * scaleFactor;\\n\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, startScreen, endScreen, control1, control2);\\n  // Calculate the next and previous segment's location on the line\\n  vec2 prePosition = interpolation(interpolationTime - interpolationIncrement, startScreen, endScreen, control1, control2);\\n  vec2 nextPosition = interpolation(interpolationTime + interpolationIncrement, startScreen, endScreen, control1, control2);\\n\\n  vec2 preLine = prePosition - currentPosition;\\n  vec2 nextLine = nextPosition - currentPosition;\\n\\n  // Get a spliced nromal at the joining of two segments to make a crisper curve\\n  vec2 currentNormal = mix(\\n    // Pick this value if we're at the beginning of the line\\n    normalize(vec2(preLine.y, -preLine.x)),\\n    mix(\\n      // Pick this value when we're between the ends\\n      normalize(vec2(preLine.y, -preLine.x) + vec2(-nextLine.y, nextLine.x)),\\n      // Pick this value if we're at the end of the line\\n      normalize(vec2(-nextLine.y, nextLine.x)),\\n      float(position.x >= 1.0)\\n    ),\\n    float(position.x > 0.0)\\n  );\\n\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (-normal * lineThickness * scaleFactor);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a * layerOpacity;\\n\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), startClip.zw);\\n  gl_PointSize = 5.0;\\n\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\n/**\\n  This vertex shader calculates edges whose curve and width is in screen space where the curve is\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nvarying vec4 vertexColor;\\n\\n// Interpolation type injection\\n${interpolation}\\n\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, start, end, control.xy, control.zw);\\n  // Calculate the next and previous segment's location on the line\\n  vec2 prePosition = interpolation(interpolationTime - interpolationIncrement, start, end, control.xy, control.zw);\\n  vec2 nextPosition = interpolation(interpolationTime + interpolationIncrement, start, end, control.xy, control.zw);\\n\\n  vec2 preLine = prePosition - currentPosition;\\n  vec2 nextLine = nextPosition - currentPosition;\\n\\n  // Get a spliced nromal at the joining of two segments to make a crisper curve\\n  vec2 currentNormal = mix(\\n    // Pick this value if we're at the beginning of the line\\n    normalize(vec2(preLine.y, -preLine.x)),\\n    mix(\\n      // Pick this value when we're between the ends\\n      normalize(vec2(preLine.y, -preLine.x) + vec2(-nextLine.y, nextLine.x)),\\n      // Pick this value if we're at the end of the line\\n      normalize(vec2(-nextLine.y, nextLine.x)),\\n      float(position.x >= 1.0)\\n    ),\\n    float(position.x > 0.0)\\n  );\\n\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (normal * lineThickness);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a * layerOpacity;\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n  gl_PointSize = 5.0;\\n\\n  ${extend}\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  float t1 = 1.0 - t;\\n  return pow(t1, 3.0) * p1 + 3.0 * t * pow(t1, 2.0) * c1 + 3.0 * pow(t, 2.0) * t1 * c2 + pow(t, 3.0) * p2;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return (1.0 - t) * (1.0 - t) * p1 + 2.0 * t * (1.0 - t) * c1 + t * t * p2;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return p1 + (p2 - p1) * t;\\n}\\n\"","/**\n * This file contains the logic for handling edge picking via quad tree and hit tests.\n * The methods involved are fairly robust and would clutter the layer's code file.\n */\nimport { IPoint } from \"../../primitives\";\nimport { Bounds } from \"../../primitives/bounds\";\nimport { IPickingMethods } from \"../../surface/layer\";\nimport { IProjection } from \"../../types\";\nimport {\n  add2,\n  dot2,\n  length2,\n  scale2,\n  subtract2,\n  Vec2\n} from \"../../util/vector\";\nimport { EdgeInstance } from \"./edge-instance\";\nimport { IEdgeLayerProps } from \"./edge-layer\";\nimport { EdgeBroadphase, EdgeScaleType, EdgeType } from \"./types\";\nconst { pow } = Math;\n\ntype InterpolationMethod = (\n  t: number,\n  p1: Vec2,\n  p2: Vec2,\n  c1: Vec2,\n  c2: Vec2\n) => Vec2;\n\n/** This is an interpolation across a line */\nfunction linear(t: number, p1: Vec2, p2: Vec2, _c1: Vec2, _c2: Vec2): Vec2 {\n  return add2(scale2(subtract2(p2, p1), t), p1);\n}\n\n/** This is an interpolation across a bezier curve, single control */\nfunction bezier(t: number, p1: Vec2, p2: Vec2, c1: Vec2, _c2: Vec2): Vec2 {\n  return [\n    (1.0 - t) * (1.0 - t) * p1[0] + 2.0 * t * (1.0 - t) * c1[0] + t * t * p2[0],\n    (1.0 - t) * (1.0 - t) * p1[1] + 2.0 * t * (1.0 - t) * c1[1] + t * t * p2[1]\n  ];\n}\n\n/** This is an interpolation across a bezier curve, double control */\nfunction bezier2(t: number, p1: Vec2, p2: Vec2, c1: Vec2, c2: Vec2): Vec2 {\n  const t1 = 1.0 - t;\n\n  return [\n    pow(t1, 3.0) * p1[0] +\n      3.0 * t * pow(t1, 2.0) * c1[0] +\n      3.0 * pow(t, 2.0) * t1 * c2[0] +\n      pow(t, 3.0) * p2[0],\n    pow(t1, 3.0) * p1[1] +\n      3.0 * t * pow(t1, 2.0) * c1[1] +\n      3.0 * pow(t, 2.0) * t1 * c2[1] +\n      pow(t, 3.0) * p2[1]\n  ];\n}\n\n/** A quick lookup for an interpolation method based on Edge Type */\nconst interpolation: { [key: number]: InterpolationMethod } = {\n  [EdgeType.LINE]: linear,\n  [EdgeType.BEZIER]: bezier,\n  [EdgeType.BEZIER2]: bezier2\n};\n\n/** Converts a point array to a point object */\nfunction toPointObject(point: Vec2): IPoint {\n  return {\n    x: point[0],\n    y: point[1]\n  };\n}\n\n/** Converts a point object to a point array */\nfunction toPointArray(point: IPoint): Vec2 {\n  return [point.x, point.y];\n}\n\n/** Takes two points that forms a line then calculates the nearest distance from that line to the third point */\nfunction distanceTo(start: Vec2, end: Vec2, p: Vec2) {\n  // Make a vector from a line point to the indicated point\n  const vector: Vec2 = subtract2(start, p);\n  const lineDirection: Vec2 = subtract2(end, start);\n  const lineNormal: Vec2 = [lineDirection[1], -lineDirection[0]];\n  const distance: number =\n    Math.abs(dot2(vector, lineNormal)) / length2(lineDirection);\n\n  // The distance is d = |v . r| where v is a unit perpendicular vector to the Line\n  return distance;\n}\n\n// This sets the number of iterations along a curve we sample to test collisions with\nconst TEST_RESOLUTION = 50;\n\n/**\n * This generates the picking methods needed for managing PickType.ALL for the edge layer.\n */\nexport function edgePicking<T extends EdgeInstance>(\n  props: IEdgeLayerProps<T>\n): IPickingMethods<EdgeInstance> {\n  const { broadphase, minPickDistance = 0, scaleType, type } = props;\n  const interpolate = interpolation[props.type];\n\n  const boundsAccessor = (edge: EdgeInstance) => {\n    const edgeWidthStart = edge.widthStart / 2 + minPickDistance;\n    const edgeWidthEnd = edge.widthEnd / 2 + minPickDistance;\n    // Encapsulate the endpoints as they are guaranteed to be included in the shape\n    // Each endpoint will be a box that includes the endpoint thickness\n    const bounds = new Bounds({\n      height: edge.widthStart,\n      width: edge.widthStart,\n      x: edge.start[0] - edgeWidthStart,\n      y: edge.start[1] - edgeWidthStart\n    });\n\n    bounds.encapsulate(\n      new Bounds({\n        height: edge.widthEnd,\n        width: edge.widthEnd,\n        x: edge.end[0] - edgeWidthEnd,\n        y: edge.end[1] - edgeWidthEnd\n      })\n    );\n\n    // Encapsulating the bezier control points is enough of a broadphase for beziers\n    if (props.type === EdgeType.BEZIER) {\n      bounds.encapsulate({\n        x: edge.control[0][0],\n        y: edge.control[0][1]\n      });\n    }\n\n    // Encapsulating the bezier control points is enough of a broadphase for beziers\n    else if (props.type === EdgeType.BEZIER2) {\n      bounds.encapsulate({\n        x: edge.control[0][0],\n        y: edge.control[0][1]\n      });\n\n      bounds.encapsulate({\n        x: edge.control[1][0],\n        y: edge.control[1][1]\n      });\n    }\n\n    if (broadphase === EdgeBroadphase.PASS_X) {\n      bounds.x = Number.MIN_SAFE_INTEGER / 2;\n      bounds.width = Number.MAX_SAFE_INTEGER;\n    }\n\n    if (broadphase === EdgeBroadphase.PASS_Y) {\n      bounds.y = Number.MIN_SAFE_INTEGER / 2;\n      bounds.height = Number.MAX_SAFE_INTEGER;\n    }\n\n    return bounds;\n  };\n\n  if (scaleType === EdgeScaleType.SCREEN_CURVE) {\n    return {\n      // Provide the calculated AABB world bounds for a given circle\n      boundsAccessor,\n\n      // Provide a precise hit test for the edge. This method performs all of the rendering\n      // And hit tests within screen space as opposed to world space.\n      hitTest: (edge: EdgeInstance, point: IPoint, view: IProjection) => {\n        point = view.worldToScreen(point);\n        const mouse: Vec2 = [point.x, point.y];\n        let closestIndex = 0;\n        let closestDistance = Number.MAX_VALUE;\n        let secondClosestIndex = 0;\n        let secondClosestDistance = Number.MAX_VALUE;\n\n        const start = view.worldToScreen(toPointObject(edge.start));\n        const end = view.worldToScreen(toPointObject(edge.end));\n        let control1: Vec2 = [0, 0];\n        let control2: Vec2 = [0, 0];\n\n        if (type === EdgeType.BEZIER) {\n          control1 = add2(toPointArray(start), edge.control[0]);\n        } else if (type === EdgeType.BEZIER2) {\n          control1 = add2(toPointArray(start), edge.control[0]);\n          control2 = add2(toPointArray(end), edge.control[1]);\n        }\n\n        const startPoint = toPointArray(start);\n        const endPoint = toPointArray(end);\n\n        control1 = edge.control.length > 0 ? control1 : [0, 0];\n        control2 = edge.control.length > 1 ? control2 : [0, 0];\n\n        // Loop through sample points on the line and find one that is closest to the mouse point as possible\n        for (let i = 0; i < TEST_RESOLUTION; ++i) {\n          const linePoint = interpolate(\n            i / TEST_RESOLUTION,\n            startPoint,\n            endPoint,\n            control1,\n            control2\n          );\n          const distance = length2(subtract2(mouse, linePoint));\n\n          if (distance < closestDistance) {\n            secondClosestIndex = closestIndex;\n            secondClosestDistance = closestDistance;\n            closestIndex = i;\n            closestDistance = distance;\n          } else if (distance < secondClosestDistance) {\n            secondClosestIndex = i;\n            closestDistance = distance;\n          }\n        }\n\n        const t = closestIndex / TEST_RESOLUTION;\n        const lineWidth =\n          (edge.widthEnd - edge.widthStart) * t + edge.widthStart;\n\n        if (closestIndex === secondClosestIndex) {\n          return false;\n        }\n\n        const startSegment = interpolate(\n          closestIndex / TEST_RESOLUTION,\n          startPoint,\n          endPoint,\n          control1,\n          control2\n        );\n\n        const endSegment = interpolate(\n          secondClosestIndex / TEST_RESOLUTION,\n          startPoint,\n          endPoint,\n          control1,\n          control2\n        );\n\n        // See how close the mouse is to the line between the two closest points for a more accurate\n        // Test\n        closestDistance = distanceTo(startSegment, endSegment, mouse);\n\n        // This helps determine if the mouse is beyond the end point\n        if (\n          dot2(\n            subtract2(endSegment, startSegment),\n            subtract2(mouse, startSegment)\n          ) < 0\n        ) {\n          return false;\n        }\n\n        return closestDistance < lineWidth / 2.0 + minPickDistance;\n      }\n    };\n  }\n\n  return {\n    // Provide the calculated AABB world bounds for a given circle\n    boundsAccessor,\n\n    // Provide a precise hit test for the edge\n    hitTest: (edge: EdgeInstance, point: IPoint, _view: IProjection) => {\n      const mouse: [number, number] = [point.x, point.y];\n      let closestIndex = 0;\n      let closestDistance = Number.MAX_VALUE;\n\n      // Loop through sample points on the line and find one that is closest to the mouse point as possible\n      for (let i = 0; i < TEST_RESOLUTION; ++i) {\n        const linePoint = interpolate(\n          i / TEST_RESOLUTION,\n          edge.start,\n          edge.end,\n          edge.control.length > 0 ? edge.control[0] : [0, 0],\n          edge.control.length > 1 ? edge.control[1] : [0, 0]\n        );\n        const distance = length2(subtract2(mouse, linePoint));\n\n        if (distance < closestDistance) {\n          closestIndex = i;\n          closestDistance = distance;\n        }\n      }\n\n      const t = closestIndex / TEST_RESOLUTION;\n      const lineWidth = (edge.widthEnd - edge.widthStart) * t + edge.widthStart;\n\n      return closestDistance < lineWidth / 2.0;\n    }\n  };\n}\n","import * as Three from \"three\";\nimport { InstanceProvider } from \"../../instance-provider\";\nimport { templateVars } from \"../../shaders/template-vars\";\nimport {\n  ILayerProps,\n  IModelType,\n  IPickingMethods,\n  Layer\n} from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  InstanceIOValue,\n  IShaderInitialization,\n  IUniform,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport {\n  CommonMaterialOptions,\n  IAutoEasingMethod,\n  shaderTemplate,\n  Vec\n} from \"../../util\";\nimport { EdgeInstance } from \"./edge-instance\";\nimport { edgePicking } from \"./edge-picking\";\nimport { EdgeBroadphase, EdgeScaleType, EdgeType } from \"./types\";\n\nexport interface IEdgeLayerProps<T extends EdgeInstance>\n  extends ILayerProps<T> {\n  /** Properties for animating attributes */\n  animate?: {\n    end?: IAutoEasingMethod<Vec>;\n    start?: IAutoEasingMethod<Vec>;\n    colorStart?: IAutoEasingMethod<Vec>;\n    colorEnd?: IAutoEasingMethod<Vec>;\n    control?: IAutoEasingMethod<Vec>;\n  };\n  /** Allows adjustments for broadphase interactions for an edge */\n  broadphase?: EdgeBroadphase;\n  /** Any distance to the mouse from an edge that is less than this distance will be picked */\n  minPickDistance?: number;\n  /** The transparency of the layer as a whole. (Makes for very efficient fading of all elements) */\n  opacity?: number;\n  /** This sets a scaling factor for the edge's line width and curve  */\n  scaleFactor?(): number;\n  /**\n   * If this is set, then the thickness of the line and the curvature of the line exists in screen space\n   * rather than world space.\n   */\n  scaleType?: EdgeScaleType;\n  /** Specifies how the edge is formed */\n  type: EdgeType;\n}\n\nexport interface IEdgeLayerState {}\n\n/** Converts a control list to an IO value */\nfunction toInstanceIOValue(value: [number, number][]): InstanceIOValue {\n  return [value[0][0], value[0][1], value[1][0], value[1][1]];\n}\n\n/** This picks the appropriate shader for the edge type desired */\nconst pickVS = {\n  [EdgeType.LINE]: require(\"./shader/edge-layer-line.vs\"),\n  [EdgeType.BEZIER]: require(\"./shader/edge-layer-bezier.vs\"),\n  [EdgeType.BEZIER2]: require(\"./shader/edge-layer-bezier2.vs\")\n};\n\n/** This is the base edge layer which is a template that can be filled with the needed specifics for a given line type */\nconst baseVS = require(\"./shader/edge-layer.vs\");\nconst screenVS = require(\"./shader/edge-layer-screen-curve.vs\");\nconst edgeFS = require(\"./shader/edge-layer.fs\");\n\n/**\n * This layer displays edges and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class EdgeLayer<\n  T extends EdgeInstance,\n  U extends IEdgeLayerProps<T>\n> extends Layer<T, U> {\n  // Set default props for the layer\n  static defaultProps: IEdgeLayerProps<EdgeInstance> = {\n    broadphase: EdgeBroadphase.ALL,\n    data: new InstanceProvider<EdgeInstance>(),\n    key: \"none\",\n    scaleType: EdgeScaleType.NONE,\n    type: EdgeType.LINE\n  };\n\n  static attributeNames = {\n    start: \"start\",\n    end: \"end\",\n    widthStart: \"widthStart\",\n    widthEnd: \"widthEnd\",\n    depth: \"depth\",\n    colorStart: \"colorStart\",\n    colorEnd: \"colorEnd\",\n    control: \"control\"\n  };\n\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods(): IPickingMethods<EdgeInstance> {\n    return edgePicking(this.props);\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<EdgeInstance> {\n    const {\n      animate = {},\n      scaleFactor = () => 1,\n      type,\n      scaleType = EdgeScaleType.NONE\n    } = this.props;\n\n    const {\n      end: animateEnd,\n      start: animateStart,\n      colorStart: animateColorStart,\n      colorEnd: animateColorEnd,\n      control: animateControl\n    } = animate;\n\n    const MAX_SEGMENTS = type === EdgeType.LINE ? 2 : 50;\n\n    // Calculate the normals and interpolations for our vertices\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      [MAX_SEGMENTS * 2 + 2]: -1\n    };\n\n    const vertexInterpolation: { [key: number]: number } = {\n      0: 0,\n      [MAX_SEGMENTS * 2 + 2]: 1\n    };\n\n    let sign = 1;\n    for (let i = 0; i < MAX_SEGMENTS * 2; ++i) {\n      vertexToNormal[i + 1] = sign;\n      vertexInterpolation[i + 1] = Math.floor(i / 2) / (MAX_SEGMENTS - 1);\n      sign *= -1;\n    }\n\n    const vs = shaderTemplate({\n      options: {\n        // Retain the attributes injection\n        attributes: \"${attributes}\",\n        // Inject the proper interpolation method\n        interpolation: pickVS[type]\n      },\n      required: {\n        name: \"Edge Layer\",\n        values: [\"interpolation\"]\n      },\n      shader: scaleType === EdgeScaleType.NONE ? baseVS : screenVS,\n\n      // We do not want to remove any extension macros\n      onToken: (token, replace) => {\n        if (\n          token === templateVars.extendHeader ||\n          token === templateVars.extend\n        ) {\n          return `$\\{${token}}`;\n        }\n\n        return replace;\n      }\n    });\n\n    return {\n      fs: edgeFS,\n      instanceAttributes: [\n        {\n          easing: animateStart,\n          name: EdgeLayer.attributeNames.start,\n          size: InstanceAttributeSize.TWO,\n          update: o => o.start\n        },\n        {\n          easing: animateEnd,\n          name: EdgeLayer.attributeNames.end,\n          size: InstanceAttributeSize.TWO,\n          update: o => o.end\n        },\n        {\n          name: EdgeLayer.attributeNames.widthStart,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.widthStart]\n        },\n        {\n          name: EdgeLayer.attributeNames.widthEnd,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.widthEnd]\n        },\n        {\n          name: EdgeLayer.attributeNames.depth,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth]\n        },\n        {\n          easing: animateColorStart,\n          name: EdgeLayer.attributeNames.colorStart,\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.colorStart\n        },\n        {\n          easing: animateColorEnd,\n          name: EdgeLayer.attributeNames.colorEnd,\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.colorEnd\n        },\n        type === EdgeType.LINE\n          ? {\n              easing: animateControl,\n              name: EdgeLayer.attributeNames.control,\n              size: InstanceAttributeSize.FOUR,\n              update: _o => [0, 0, 0, 0]\n            }\n          : null,\n        type === EdgeType.BEZIER\n          ? {\n              easing: animateControl,\n              name: EdgeLayer.attributeNames.control,\n              size: InstanceAttributeSize.FOUR,\n              update: o => [o.control[0][0], o.control[0][1], 0, 0]\n            }\n          : null,\n        type === EdgeType.BEZIER2\n          ? {\n              easing: animateControl,\n              name: EdgeLayer.attributeNames.control,\n              size: InstanceAttributeSize.FOUR,\n              update: o => toInstanceIOValue(o.control)\n            }\n          : null\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: (_uniform: IUniform) => [scaleFactor()]\n        },\n        {\n          name: \"layerOpacity\",\n          size: UniformSize.ONE,\n          update: (_uniform: IUniform) => [\n            this.props.opacity === undefined ? 1.0 : this.props.opacity\n          ]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexInterpolation[vertex],\n            // The number of vertices\n            MAX_SEGMENTS * 2\n          ]\n        }\n      ],\n      vertexCount: MAX_SEGMENTS * 2 + 2,\n      vs: vs.shader\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentShape;\n  }\n}\n","export * from \"./edge-layer\";\nexport * from \"./edge-instance\";\nexport * from \"./types\";\n","import { observable } from \"../../instance-provider\";\nimport { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { Vec2 } from \"../../util\";\n\nexport interface ICircleInstanceOptions extends IInstanceOptions {\n  /** Center x position of the circle */\n  center: Vec2;\n  /** The radius of the circle */\n  radius: number;\n  /** The color of this circle */\n  color?: [number, number, number, number];\n  /** The z depth of the circle (for draw ordering) */\n  depth?: number;\n}\n\nexport class CircleInstance extends Instance {\n  @observable color: [number, number, number, number] = [1.0, 1.0, 1.0, 1.0];\n  @observable depth: number = 0;\n  @observable radius: number = 0;\n  @observable center: Vec2 = [0, 0];\n\n  constructor(options: ICircleInstanceOptions) {\n    super(options);\n\n    this.color = options.color || this.color;\n    this.radius = options.radius || this.radius;\n    this.center = options.center || this.center;\n    this.depth = options.depth || this.depth;\n  }\n\n  get width() {\n    return this.radius * 2;\n  }\n\n  get height() {\n    return this.radius * 2;\n  }\n}\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float edgeSharpnessBase;\\nvarying vec2 pointCoord;\\n\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  vertexColor = color * color.a * layerOpacity;\\n  float size = radius * scaleFactor;\\n  edgeSharpness = mix(0.8, 0.0, min((size * 6.0 * pixelRatio) / (45.0 * pixelRatio), 1.0));\\n  edgeSharpnessBase = mix(0.1, 0.0, min((size * 6.0 * pixelRatio) / (45.0 * pixelRatio), 1.0));\\n  pointCoord = (position.xy + vec2(1.0, 1.0)) / 2.0;\\n\\n  // Center within clip space\\n  vec4 clipCenter = clipSpace(vec3(center, depth));\\n  // Center in screen space\\n  vec2 screenCenter = (clipCenter.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Position in screen space\\n  vec2 vertex = (position.xy * size) + screenCenter;\\n  // Position back to clip space\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), clipCenter.zw);\\n\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float edgeSharpnessBase;\\nvarying vec2 pointCoord;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius + (radius * edgeSharpnessBase),\\n    dot(dist, dist) * 4.0\\n  );\\n}\\n\\n${extendHeader}\\n\\nvoid main() {\\n  float step_factor = circle(pointCoord.xy, 1.0);\\n\\n  setColor(mix(\\n    vec4(0.0, 0.0, 0.0, 0.0),\\n    vertexColor,\\n    step_factor\\n  ));\\n\\n  ${extend}\\n}\\n\"","/**\n * Defines a 2d point within a coordinate plane\n */\nexport interface IPoint {\n  x: number;\n  y: number;\n}\n\n/**\n * Calculates the distance between two points, but keeps the distance in dquared form\n * thus performing Math.sqrt() on the output of this distance would provide the true\n * distance between the points.\n *\n * It is often faster and all that is needed to compare squared distances vs real distances\n * thus eliminating multiple Math.sqrt operations\n *\n * NOTE: For vectors this is the same as (pseudo code):\n * let vector3 = vector2.subtract(vector1)\n * return vector3.dot(vector3)\n *\n * @param p1 The point to find the distance from the second point\n * @param p2 The point to find the distance from the first point\n *\n * @return {number} The distance * distance between the two points\n */\nfunction squareDistance(p1: IPoint, p2: IPoint): number {\n  const dx = p1.x - p2.x;\n  const dy = p1.y - p2.y;\n\n  return dx * dx + dy * dy;\n}\n\n/**\n * Contains methods for managing or manipulating points\n *\n * @export\n * @class Point\n */\nexport class Point {\n  /**\n   * Adds two points together\n   *\n   * @static\n   * @param {IPoint} p1\n   * @param {IPoint} p2\n   * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n   *\n   * @return {IPoint} The two points added together\n   */\n  static add(p1: IPoint, p2: IPoint, out?: IPoint): IPoint {\n    if (out) {\n      out.x = p1.x + p2.x;\n      out.y = p1.y + p2.y;\n      return out;\n    }\n\n    return {\n      x: p1.x + p2.x,\n      y: p1.y + p2.y\n    };\n  }\n\n  /**\n   * @static\n   * This analyzes a test point against a list of points and determines which of the points is\n   * the closest to the test point. If there are equi-distant points in the list, this will return\n   * the first found in the list.\n   *\n   * @param {IPoint} testPoint The point to compare against other points\n   * @param {IPoint[]} points The list of points to be compared against\n   *\n   * @return {IPoint} The closest point to the test point\n   */\n  static getClosest(testPoint: IPoint, points: IPoint[]): IPoint {\n    let closestDistance = Number.MAX_VALUE;\n    let closestPoint: IPoint = testPoint;\n    let distance: number;\n\n    const findClosest = function(point: IPoint) {\n      distance = squareDistance(point, testPoint);\n\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestPoint = point;\n      }\n    };\n\n    points.forEach(findClosest);\n\n    return closestPoint;\n  }\n\n  /**\n   * @static\n   * This analyzes a test point against a list of points and determines which of the points is\n   * the closest to the test point. If there are equi-distant points in the list, this will return\n   * the first found in the list.\n   *\n   * This just returns the index of the found point and not the point itself\n   *\n   * @param {IPoint} testPoint The point to compare against other points\n   * @param {IPoint[]} points The list of points to be compared against\n   *\n   * @return {number} The index of the closest point to the test point\n   */\n  static getClosestIndex(testPoint: IPoint, points: IPoint[]): number {\n    let closestDistance = Number.MAX_VALUE;\n    let closestPoint: number = 0;\n    let distance: number;\n\n    const findClosest = function(point: IPoint, i: number) {\n      distance = squareDistance(point, testPoint);\n\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestPoint = i;\n      }\n    };\n\n    points.forEach(findClosest);\n\n    return closestPoint;\n  }\n\n  /**\n   * @static\n   * This will calculate a direction vector between two points that points toward p2\n   *\n   * @param {IPoint} amount The start of the direction\n   * @param {IPoint} from The direction to point the vector towards\n   * @param {boolean} normalize If true, this will make the vector have a magnitude of 1\n   *\n   * @returns {number}\n   */\n  static subtract(\n    amount: IPoint,\n    from: IPoint,\n    normalize: boolean = false\n  ): IPoint {\n    let dx = from.x - amount.x;\n    let dy = from.y - amount.y;\n\n    if (normalize) {\n      const magnitude = Math.sqrt(dx * dx + dy * dy);\n      dx /= magnitude;\n      dy /= magnitude;\n    }\n\n    return {\n      x: dx,\n      y: dy\n    };\n  }\n\n  /**\n   * @static\n   * Gets the distance between two points\n   *\n   * @param {IPoint} p1\n   * @param {IPoint} p2\n   * @param {boolean} squared If set to true, returns the distance * distance (performs faster)\n   *\n   * @returns {number} The real distance between two points\n   */\n  static getDistance(p1: IPoint, p2: IPoint, squared: boolean = false): number {\n    if (squared) {\n      return squareDistance(p1, p2);\n    }\n\n    return Math.sqrt(squareDistance(p1, p2));\n  }\n\n  /**\n   * @static\n   * Gets a point perfectly between two points\n   *\n   * @param {IPoint} p1\n   * @param {IPoint} p2\n   *\n   * @returns {IPoint} The point between the two provided points\n   */\n  static getMidpoint(p1: IPoint, p2: IPoint) {\n    const direction = Point.subtract(p1, p2);\n\n    return {\n      x: direction.x / 2 + p1.x,\n      y: direction.y / 2 + p1.y\n    };\n  }\n\n  static make(x: number, y: number) {\n    return { x, y };\n  }\n\n  /**\n   * Scales a point by a given amount\n   *\n   * @static\n   * @param {IPoint} p1\n   * @param {number} s The amount to scale the point by\n   * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n   *\n   * @memberof Point\n   */\n  static scale(p1: IPoint, s: number, out?: IPoint): IPoint {\n    if (out) {\n      out.x = p1.x * s;\n      out.y = p1.y * s;\n      return out;\n    }\n\n    return {\n      x: p1.x * s,\n      y: p1.y * s\n    };\n  }\n\n  /**\n   * Makes a new point initialized to {0,0}\n   *\n   * @static\n   * @returns {IPoint} A new point object at {0,0}\n   */\n  static zero(): IPoint {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n}\n","import * as Three from \"three\";\nimport { InstanceProvider } from \"../../instance-provider\";\nimport { Bounds, IPoint } from \"../../primitives\";\nimport { ILayerProps, IModelType, Layer } from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  IProjection,\n  IShaderInitialization,\n  IUniform,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport { CommonMaterialOptions, Vec } from \"../../util\";\nimport { IAutoEasingMethod } from \"../../util/auto-easing-method\";\nimport { CircleInstance } from \"./circle-instance\";\n\nexport interface ICircleLayerProps<T extends CircleInstance>\n  extends ILayerProps<T> {\n  /** This sets the  */\n  fadeOutOversized?: number;\n  /** This sets a scaling factor for the circle's radius */\n  scaleFactor?(): number;\n  /** Flags this layer to draw  */\n  disableDepthTest?: boolean;\n  /** Opacity of the layer as a whole */\n  opacity?: number;\n  /**\n   * This is the properties that can toggle on animations.\n   *\n   * NOTE: The more properties declared as animated will reduce the performance of the layer.\n   * if animated properties are created, it can be beneficial to have other layers with no\n   * animations be available for the Instances to 'rest' in when not moving.\n   */\n  animate?: {\n    center?: IAutoEasingMethod<Vec>;\n    radius?: IAutoEasingMethod<Vec>;\n    color?: IAutoEasingMethod<Vec>;\n  };\n}\n\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class CircleLayer<\n  T extends CircleInstance,\n  U extends ICircleLayerProps<T>\n> extends Layer<T, U> {\n  static defaultProps: ICircleLayerProps<CircleInstance> = {\n    data: new InstanceProvider<CircleInstance>(),\n    fadeOutOversized: -1,\n    key: \"\",\n    scaleFactor: () => 1\n  };\n\n  static attributeNames = {\n    center: \"center\",\n    radius: \"radius\",\n    depth: \"depth\",\n    color: \"color\"\n  };\n\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods() {\n    const noScaleFactor = () => 1;\n\n    return {\n      // Provide the calculated AABB world bounds for a given circle\n      boundsAccessor: (circle: CircleInstance) =>\n        new Bounds({\n          height: circle.radius * 2,\n          width: circle.radius * 2,\n          x: circle.center[0] - circle.radius,\n          y: circle.center[1] - circle.radius\n        }),\n\n      // Provide a precise hit test for the circle\n      hitTest: (circle: CircleInstance, point: IPoint, view: IProjection) => {\n        const circleScreenCenter = view.worldToScreen({\n          x: circle.center[0],\n          y: circle.center[1]\n        });\n        const mouseScreen = view.worldToScreen(point);\n        const r = circle.radius * (this.props.scaleFactor || noScaleFactor)();\n\n        const delta = [\n          mouseScreen.x - circleScreenCenter.x,\n          mouseScreen.y - circleScreenCenter.y\n        ];\n\n        return delta[0] * delta[0] + delta[1] * delta[1] < r * r;\n      }\n    };\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<CircleInstance> {\n    const scaleFactor = this.props.scaleFactor || (() => 1);\n    const animations = this.props.animate || {};\n    const {\n      center: animateCenter,\n      radius: animateRadius,\n      color: animateColor\n    } = animations;\n\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      1: 1,\n      2: -1,\n      3: 1,\n      4: -1,\n      5: -1\n    };\n\n    const vertexToSide: { [key: number]: number } = {\n      0: -1,\n      1: -1,\n      2: -1,\n      3: 1,\n      4: 1,\n      5: 1\n    };\n\n    return {\n      fs: require(\"./circle-layer.fs\"),\n      instanceAttributes: [\n        {\n          easing: animateCenter,\n          name: CircleLayer.attributeNames.center,\n          size: InstanceAttributeSize.TWO,\n          update: circle => circle.center\n        },\n        {\n          easing: animateRadius,\n          name: CircleLayer.attributeNames.radius,\n          size: InstanceAttributeSize.ONE,\n          update: circle => [circle.radius]\n        },\n        {\n          name: CircleLayer.attributeNames.depth,\n          size: InstanceAttributeSize.ONE,\n          update: circle => [circle.depth]\n        },\n        {\n          easing: animateColor,\n          name: CircleLayer.attributeNames.color,\n          size: InstanceAttributeSize.FOUR,\n          update: circle => circle.color\n        }\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: (_uniform: IUniform) => [scaleFactor()]\n        },\n        {\n          name: \"layerOpacity\",\n          size: UniformSize.ONE,\n          update: (_uniform: IUniform) => [\n            this.props.opacity === undefined ? 1.0 : this.props.opacity\n          ]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexToSide[vertex],\n            0\n          ]\n        }\n      ],\n      vertexCount: 6,\n      vs: require(\"./circle-layer.vs\")\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentShape;\n  }\n}\n","export * from \"./circle-layer\";\nexport * from \"./circle-instance\";\n","import { observable } from \"../../instance-provider\";\nimport { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { Vec2, Vec4 } from \"../../util\";\n\nexport interface IArcInstanceOptions extends IInstanceOptions {\n  /** The start and end angle of the arc */\n  angle: Vec2;\n  /** The center point where the arc wraps around */\n  center: Vec2;\n  /** This is the end color of the arc */\n  colorEnd: Vec4;\n  /** This is the start color of the arc */\n  colorStart: Vec4;\n  /** Depth sorting of the arc (or the z value of the lable) */\n  depth: number;\n  /** The radius of how far the middle of the arc is from the center point */\n  radius: number;\n  /** The start to end thickness of the arc */\n  thickness: Vec2;\n}\n\n/**\n * This generates a new arc instance. An arc is a shape with a center and an angle that\n * is spans. This effectively can be used for a 'pie slice' or just the edge line on the pie\n * slice.\n */\nexport class ArcInstance extends Instance {\n  /** The start and end angle of the arc */\n  @observable angle: Vec2 = [0, Math.PI];\n  /** This is the end color of the arc */\n  @observable colorEnd: Vec4 = [0, 0, 0, 1];\n  /** This is the start color of the arc */\n  @observable colorStart: Vec4 = [0, 0, 0, 1];\n  /** The center point where the arc wraps around */\n  @observable center: Vec2 = [0, 0];\n  /** Depth sorting of the arc (or the z value of the lable) */\n  @observable depth: number = 0;\n  /** The radius of how far the middle of the arc is from the center point */\n  @observable radius: number = 1;\n  /** The start to end thickness of the arc */\n  @observable thickness: Vec2 = [1, 1];\n\n  constructor(options: IArcInstanceOptions) {\n    super(options);\n\n    this.angle = options.angle || this.angle;\n    this.colorEnd = options.colorEnd || this.colorEnd;\n    this.colorStart = options.colorStart || this.colorStart;\n    this.center = options.center || this.center;\n    this.depth = options.depth || this.depth;\n    this.radius = options.radius || this.radius;\n    this.thickness = options.thickness || this.thickness;\n  }\n}\n","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\n${extendHeader}\\n\\nvoid main() {\\n  setColor(vertexColor);\\n  gl_FragColor = vertexColor;\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\n/**\\n  This vertex shader calculates edges whose curve and width is in screen space where the curve is\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nvarying vec4 vertexColor;\\n\\nvec2 interpolation(float t, vec2 center, float radius, float start, float end) {\\n  float angle = (end - start) * t + start;\\n  return center + vec2(cos(angle) * radius, sin(angle) * radius);\\n}\\n\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure some of the vec injections\\n  float startAngle = angle.x;\\n  float endAngle = angle.y;\\n  float widthStart = thickness.x;\\n  float widthEnd = thickness.y;\\n\\n  // Convert world points to screen space\\n  vec4 centerClip = clipSpace(vec3(center, depth));\\n  vec2 centerScreen = (centerClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, centerScreen, radius, startAngle, endAngle);\\n  // Get normal with currentPosition and center\\n  vec2 currentNormal = normalize(currentPosition - centerScreen);\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (normal * lineThickness);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a;\\n\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), centerClip.zw);\\n  gl_PointSize = 5.0;\\n\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\nfloat PI = 3.14159265;\\nfloat PI_2 = 6.2831853;\\n\\n/**\\n * This is an approximation of sin that allows us to bypass hardware precision\\n * limitations for sin.\\n *\\n * http://lab.polygonal.de/2007/07/18/fast-and-accurate-sinecosine-approximation/\\n * This is a GPU adaptation of this method to provide optimal GPU performance for the operation\\n */\\nfloat fsin(float x) {\\n  float sine;\\n\\n  // Always wrap input angle to -PI..PI\\n  x += mix(\\n    mix(\\n      0.0,\\n      -PI_2, float(x > PI)\\n    ),\\n    PI_2, float(x < -PI)\\n  );\\n\\n  // Compute sine\\n  sine = 1.27323954 * x;\\n  sine += mix(-1.0, 1.0, float(x < 0.0)) * 0.405284735 * x * x;\\n  sine = 0.225 * (sine * (mix(1.0, -1.0, float(sine < 0.0)) * sine) - sine) + sine;\\n\\n  return sine;\\n}\\n\\n/**\\n * This is an approximation of cos that allows us to bypass hardware precision\\n * limitations for cos.\\n *\\n * http://lab.polygonal.de/2007/07/18/fast-and-accurate-sinecosine-approximation/\\n * This is a GPU adaptation of this method to provide optimal GPU performance for the operation\\n */\\nfloat fcos(float x) {\\n  float sine;\\n  // Cos is the same as sine but\\n  x += 1.57079632;\\n\\n  // Always wrap input angle to -PI..PI\\n  x += mix(\\n    mix(\\n      0.0,\\n      -PI_2, float(x > PI)\\n    ),\\n    PI_2, float(x < -PI)\\n  );\\n\\n  // Compute sine\\n  sine = 1.27323954 * x;\\n  sine += mix(-1.0, 1.0, float(x < 0.0)) * 0.405284735 * x * x;\\n  sine = 0.225 * (sine * (mix(1.0, -1.0, float(sine < 0.0)) * sine) - sine) + sine;\\n\\n  return sine;\\n}\\n\\n/**\\n  This vertex shader calculates edges whose curve and width is in screen space where the curve is\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nvarying vec4 vertexColor;\\n\\nvec2 interpolation(float t, vec2 center, float radius, float start, float end) {\\n  float angle = (end - start) * t + start;\\n  return center + vec2(fcos(angle) * radius, fsin(angle) * radius);\\n}\\n\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure some of the vec injections\\n  float startAngle = angle.x;\\n  float endAngle = angle.y;\\n  float widthStart = thickness.x;\\n  float widthEnd = thickness.y;\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, center, radius, startAngle, endAngle);\\n  // Get normal with currentPosition and center\\n  vec2 currentNormal = normalize(currentPosition - center);\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (normal * lineThickness);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a;\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n\\n  ${extend}\\n}\\n\"","module.exports = \"void main() {\\n  gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n}\"","module.exports = \"\"","import { Bounds } from \"../primitives\";\nimport { IPoint } from \"../primitives/point\";\nimport {\n  IColorPickingData,\n  InstanceHitTest,\n  IPickInfo,\n  IProjection,\n  PickType\n} from \"../types\";\nimport { Instance, TrackedQuadTree } from \"../util\";\nimport { UniformColorDiffProcessor } from \"./buffer-management/diff-processors/uniform-color-diff-processor\";\nimport { ILayerProps, Layer } from \"./layer\";\n\nfunction isColorProcessor<T extends Instance>(\n  val: any\n): val is UniformColorDiffProcessor<T> {\n  return val && val.colorPicking;\n}\n\n/**\n * This manages mouse gestures broadcast to the layer and handles appropriate actions such as determining\n * how to make the interaction translate to picking events for the layer's instances.\n *\n * This class, in summary, takes in the gestures to the view and converts them to gestures to the instances.\n */\nexport class LayerInteractionHandler<\n  T extends Instance,\n  U extends ILayerProps<T>\n> {\n  /** This is the color picking information most recently rendered */\n  colorPicking?: IColorPickingData;\n  /** This tracks the elements that have the mouse currently over them */\n  isMouseOver = new Map<T, boolean>();\n  /** This tracks the elements the mouse was down on */\n  isMouseDown = new Map<T, boolean>();\n  /** This is the layer the interaction handler manages events for */\n  layer: Layer<T, U>;\n\n  constructor(layer: Layer<T, U>) {\n    this.layer = layer;\n  }\n\n  /**\n   * Retrieves the color picking instance determined for the procedure.\n   */\n  getColorPickInstance() {\n    if (\n      this.colorPicking &&\n      isColorProcessor<T>(this.layer.diffManager.processor)\n    ) {\n      return this.layer.diffManager.processor.colorPicking.uidToInstance.get(\n        0xffffff - this.colorPicking.nearestColor\n      );\n    }\n\n    return null;\n  }\n\n  /**\n   * Handles mouse down gestures for a layer within a view\n   */\n  handleMouseOver(_view: IProjection, _mouse: IPoint) {\n    // This is the mouse over for the view itself. We should probably just let the mouse over events handle the interactions\n    // With the instances\n  }\n\n  /**\n   * Handles mouse down gestures for a layer within a view\n   */\n  handleMouseDown(view: IProjection, mouse: IPoint, button: number) {\n    // This handles interactions for PickType ALL layers\n    if (this.layer.picking && this.layer.picking.type !== PickType.NONE) {\n      const { onMouseDown } = this.layer.props;\n\n      // If we have a listener for either event we should continue to process the event in more detail\n      if (onMouseDown) {\n        const world = view.viewToWorld(mouse);\n        let hitTest: InstanceHitTest<T>;\n        let query: TrackedQuadTree<T>[\"query\"];\n        let querySpace;\n        let instances: T[] = [];\n\n        if (this.layer.picking.type === PickType.ALL) {\n          hitTest = this.layer.picking.hitTest;\n          query = this.layer.picking.quadTree.query.bind(\n            this.layer.picking.quadTree\n          );\n          querySpace = (check: Bounds | IPoint) =>\n            query(check).filter(o => hitTest(o, world, view));\n          instances = query(world).filter(o => hitTest(o, world, view));\n        } else if (this.layer.picking.type === PickType.SINGLE) {\n          // Get the instance for the nearest color\n          const instanceForColor = this.getColorPickInstance();\n\n          if (instanceForColor) {\n            instances.push(instanceForColor);\n          }\n        }\n\n        const info: IPickInfo<T> = {\n          button,\n          instances,\n          layer: this.layer.id,\n          projection: view,\n          querySpace,\n          screen: [mouse.x, mouse.y],\n          world: [world.x, world.y]\n        };\n\n        onMouseDown(info);\n\n        // We track all the elements the mouse is currently down on\n        this.isMouseDown.clear();\n        instances.forEach(o => this.isMouseDown.set(o, true));\n      }\n    }\n  }\n\n  /**\n   * Handles mouse out events for a layer within the view\n   */\n  handleMouseOut(view: IProjection, mouse: IPoint) {\n    // This will fire an instance mouse out for any over instances in the queue since we left the view\n    // Thus no instances shall be considered 'over'\n    if (this.layer.picking && this.layer.picking.type !== PickType.NONE) {\n      const { onMouseOut } = this.layer.props;\n\n      if (onMouseOut) {\n        const world = view.viewToWorld(mouse);\n        let hitTest: InstanceHitTest<T>;\n        let query: TrackedQuadTree<T>[\"query\"];\n        let querySpace;\n\n        if (this.layer.picking.type === PickType.ALL) {\n          hitTest = this.layer.picking.hitTest;\n          query = this.layer.picking.quadTree.query.bind(\n            this.layer.picking.quadTree\n          );\n          querySpace = (check: Bounds | IPoint) =>\n            query(check).filter(o => hitTest(o, world, view));\n        }\n\n        const info: IPickInfo<T> = {\n          instances: Array.from(this.isMouseOver.keys()),\n          layer: this.layer.id,\n          projection: view,\n          querySpace,\n          screen: [mouse.x, mouse.y],\n          world: [world.x, world.y]\n        };\n\n        onMouseOut(info);\n      }\n    }\n\n    // We clear as no instances are over anymore\n    this.isMouseOver.clear();\n    // We also clear all down elements as the mouse is no longer in proper context for the instances\n    // But since the mouse was never actually released, we do not fire an up\n    this.isMouseDown.clear();\n  }\n\n  /**\n   * Handles mouse up gestures for the layer within the provided view\n   */\n  handleMouseUp(view: IProjection, mouse: IPoint, button: number) {\n    // This handles interactions for PickType ALL layers\n    if (this.layer.picking && this.layer.picking.type !== PickType.NONE) {\n      const { onMouseUp } = this.layer.props;\n\n      // If we have a listener for either event we should continue to process the event in more detail\n      if (onMouseUp) {\n        const world = view.viewToWorld(mouse);\n        let hitTest: InstanceHitTest<T>;\n        let query: TrackedQuadTree<T>[\"query\"];\n        let querySpace;\n        let instances: T[] = [];\n\n        if (this.layer.picking.type === PickType.ALL) {\n          hitTest = this.layer.picking.hitTest;\n          query = this.layer.picking.quadTree.query.bind(\n            this.layer.picking.quadTree\n          );\n          querySpace = (check: Bounds | IPoint) =>\n            query(check).filter(o => hitTest(o, world, view));\n          instances = query(world).filter(o => hitTest(o, world, view));\n        } else if (this.layer.picking.type === PickType.SINGLE) {\n          // Get the instance for the nearest color\n          const instanceForColor = this.getColorPickInstance();\n\n          if (instanceForColor) {\n            instances.push(instanceForColor);\n          }\n        }\n\n        const info: IPickInfo<T> = {\n          button,\n          instances,\n          layer: this.layer.id,\n          projection: view,\n          querySpace,\n          screen: [mouse.x, mouse.y],\n          world: [world.x, world.y]\n        };\n\n        onMouseUp(info);\n      }\n    }\n  }\n\n  /**\n   * Mouse move events on the layer will detect when instances have their item newly over or just moved on\n   */\n  handleMouseMove(view: IProjection, mouse: IPoint) {\n    // This handles interactions for PickType ALL layers\n    const { onMouseOver, onMouseMove, onMouseOut } = this.layer.props;\n\n    if (this.layer.picking && this.layer.picking.type !== PickType.NONE) {\n      // If we have a listener for either event we should continue to process the event in more detail\n      if (onMouseOver || onMouseMove || onMouseOut) {\n        let info: IPickInfo<T>;\n        const world = view.viewToWorld(mouse);\n        let hitTest: InstanceHitTest<T>;\n        let query: TrackedQuadTree<T>[\"query\"];\n        let querySpace;\n        let instances: T[] = [];\n\n        if (this.layer.picking.type === PickType.ALL) {\n          hitTest = this.layer.picking.hitTest;\n          query = this.layer.picking.quadTree.query.bind(\n            this.layer.picking.quadTree\n          );\n          querySpace = (check: Bounds | IPoint) =>\n            query(check).filter(o => hitTest(o, world, view));\n          instances = query(world).filter(o => hitTest(o, world, view));\n        } else if (this.layer.picking.type === PickType.SINGLE) {\n          // Get the instance for the nearest color\n          const instanceForColor = this.getColorPickInstance();\n\n          if (instanceForColor) {\n            instances.push(instanceForColor);\n          }\n        }\n\n        // Broadcast the picking info for newly over instances to any of the layers listeners if needed\n        if (onMouseOver) {\n          const notOverInstances = instances.filter(\n            o => !this.isMouseOver.get(o)\n          );\n          info = {\n            instances: notOverInstances,\n            layer: this.layer.id,\n            projection: view,\n            querySpace,\n            screen: [mouse.x, mouse.y],\n            world: [world.x, world.y]\n          };\n\n          if (notOverInstances.length > 0) onMouseOver(info);\n        }\n\n        // Broadcast the the picking info for all instances that the mouse moved on\n        if (onMouseMove) {\n          // This is the pick info object we will broadcast from the layer\n          info = {\n            instances,\n            layer: this.layer.id,\n            projection: view,\n            querySpace,\n            screen: [mouse.x, mouse.y],\n            world: [world.x, world.y]\n          };\n\n          onMouseMove(info);\n        }\n\n        // We take the hovered instances\n        const isCurrentlyOver = new Map<T, boolean>();\n        instances.forEach(o => isCurrentlyOver.set(o, true));\n\n        // Broadcast the the picking info for all instances that the mouse moved off of\n        if (onMouseOut) {\n          const noLongerOver = Array.from(this.isMouseOver.keys()).filter(\n            o => !isCurrentlyOver.get(o)\n          );\n\n          // This is the pick info object we will broadcast from the layer\n          info = {\n            instances: noLongerOver,\n            layer: this.layer.id,\n            projection: view,\n            querySpace,\n            screen: [mouse.x, mouse.y],\n            world: [world.x, world.y]\n          };\n\n          if (noLongerOver.length > 0) onMouseOut(info);\n        }\n\n        // We store the current hovered over items as our over item list for next interaction\n        this.isMouseOver = isCurrentlyOver;\n      }\n    }\n  }\n\n  /**\n   * Handles click gestures on the layer within a view\n   */\n  handleMouseClick(view: IProjection, mouse: IPoint, button: number) {\n    // This handles interactions for PickType ALL layers\n    if (this.layer.picking && this.layer.picking.type !== PickType.NONE) {\n      const { onMouseClick } = this.layer.props;\n\n      // If we have a listener for either event we should continue to process the event in more detail\n      if (onMouseClick) {\n        const world = view.viewToWorld(mouse);\n        let hitTest: InstanceHitTest<T>;\n        let query: TrackedQuadTree<T>[\"query\"];\n        let querySpace;\n        let instances: T[] = [];\n\n        if (this.layer.picking.type === PickType.ALL) {\n          hitTest = this.layer.picking.hitTest;\n          query = this.layer.picking.quadTree.query.bind(\n            this.layer.picking.quadTree\n          );\n          querySpace = (check: Bounds | IPoint) =>\n            query(check).filter(o => hitTest(o, world, view));\n          instances = query(world).filter(o => hitTest(o, world, view));\n        } else if (this.layer.picking.type === PickType.SINGLE) {\n          // Get the instance for the nearest color\n          const instanceForColor = this.getColorPickInstance();\n\n          if (instanceForColor) {\n            instances.push(instanceForColor);\n          }\n        }\n\n        const info: IPickInfo<T> = {\n          button,\n          instances,\n          layer: this.layer.id,\n          projection: view,\n          querySpace,\n          screen: [mouse.x, mouse.y],\n          world: [world.x, world.y]\n        };\n\n        onMouseClick(info);\n      }\n    }\n  }\n\n  /**\n   * Handles drag gestures for the layer within the view\n   */\n  handleMouseDrag(_view: IProjection, _mouse: IPoint) {\n    // We probably should not broadcast drag events for the sake of instances. Instance dragging should be handled on\n    // An instance by instance basis rather than coming from the view's gestures\n  }\n}\n","import { Instance } from \"../../../instance-provider\";\nimport { IQuadTreePickingMetrics, PickType } from \"../../../types\";\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  isBufferLocation\n} from \"../buffer-manager-base\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\nimport { IUniformBufferLocation } from \"../uniform-buffer-manager\";\nimport { UniformDiffProcessor } from \"./uniform-diff-processor\";\n\nconst EMPTY: number[] = [];\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class UniformQuadDiffProcessor<\n  T extends Instance\n> extends UniformDiffProcessor<T> {\n  quadPicking: IQuadTreePickingMetrics<T>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>\n  ) {\n    super(layer, bufferManager);\n\n    if (layer.picking.type === PickType.ALL) {\n      this.quadPicking = layer.picking;\n    } else {\n      console.warn(\n        \"Diff Processing Error: A layer has a diff processor requesting Quad Processing but the picking type is not valid.\"\n      );\n    }\n  }\n\n  /**\n   * This processes add operations from changes in the instancing data and manages the layer's quad tree\n   * with the instance as well.\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (uniformCluster) {\n      manager.changeInstance(manager, instance, EMPTY, uniformCluster);\n    }\n\n    // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n    else {\n      const uniforms = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocation(uniforms)) {\n        instance.active = true;\n        instance.easingId = manager.layer.easingId;\n        manager.updateInstance(manager.layer, instance, uniforms);\n\n        // Ensure the instance has an updated injection in the quad tree\n        manager.quadPicking.quadTree.remove(instance);\n        manager.quadPicking.quadTree.add(instance);\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the uniforms\n    if (uniformCluster) {\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n\n      // Ensure the instance has an updated injection in the quad tree\n      manager.quadPicking.quadTree.remove(instance);\n      manager.quadPicking.quadTree.add(instance);\n    }\n\n    // If we don't have existing uniforms, then we must remove the instance\n    else {\n      manager.addInstance(manager, instance, EMPTY, uniformCluster);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation\n  ) {\n    if (uniformCluster) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // Remove the easing information the instance gained from being apart of the layer\n      instance.clearEasing();\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n      // Remove the instance from our quad tree\n      manager.quadPicking.quadTree.remove(instance);\n    }\n  }\n}\n","import { Instance } from \"../../../instance-provider\";\nimport { ISinglePickingMetrics, PickType } from \"../../../types\";\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  isBufferLocation\n} from \"../buffer-manager-base\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\nimport { IUniformBufferLocation } from \"../uniform-buffer-manager\";\nimport { UniformDiffProcessor } from \"./uniform-diff-processor\";\n\nconst EMPTY: number[] = [];\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class UniformColorDiffProcessor<\n  T extends Instance\n> extends UniformDiffProcessor<T> {\n  colorPicking: ISinglePickingMetrics<T>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>\n  ) {\n    super(layer, bufferManager);\n\n    if (layer.picking.type === PickType.SINGLE) {\n      this.colorPicking = layer.picking;\n      this.colorPicking.uidToInstance = new Map<number, T>();\n    } else {\n      console.warn(\n        \"Diff Processing Error: A layer has a diff processor requesting Color Processing but the picking type is not valid.\"\n      );\n    }\n  }\n\n  /**\n   * This processes add operations from changes in the instancing data and manages the layer's matching of\n   * color / UID to Instance\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster: IUniformBufferLocation\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (uniformCluster) {\n      manager.changeInstance(manager, instance, EMPTY, uniformCluster);\n    }\n\n    // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n    else {\n      const uniforms = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocation(uniforms)) {\n        instance.active = true;\n        instance.easingId = manager.layer.easingId;\n        manager.updateInstance(manager.layer, instance, uniforms);\n\n        // Make sure the instance is mapped to it's UID\n        manager.colorPicking.uidToInstance.set(instance.uid, instance);\n      } else {\n        console.warn(\n          \"A data cluster was not provided by the manager to associate an instance with.\"\n        );\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster: IUniformBufferLocation\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the uniforms\n    if (uniformCluster) {\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n    }\n\n    // If we don't have existing uniforms, then we must remove the instance\n    else {\n      manager.addInstance(manager, instance, EMPTY, uniformCluster);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster: IUniformBufferLocation\n  ) {\n    if (uniformCluster) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // Remove the easing information the instance gained from being apart of the layer\n      instance.clearEasing();\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n      // Remove the instance from our quad tree\n      manager.colorPicking.uidToInstance.delete(instance.uid);\n    }\n  }\n}\n","import { Instance } from \"../../../instance-provider\";\nimport { IQuadTreePickingMetrics, PickType } from \"../../../types\";\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  isBufferLocationGroup\n} from \"../buffer-manager-base\";\nimport { IInstanceAttributeBufferLocationGroup } from \"../instance-attribute-buffer-manager\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\nimport { InstanceAttributeDiffProcessor } from \"./instance-attribute-diff-processor\";\n\nconst EMPTY: number[] = [];\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class InstanceAttributeQuadDiffProcessor<\n  T extends Instance\n> extends InstanceAttributeDiffProcessor<T> {\n  quadPicking: IQuadTreePickingMetrics<T>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>\n  ) {\n    super(layer, bufferManager);\n\n    if (layer.picking.type === PickType.ALL) {\n      this.quadPicking = layer.picking;\n    } else {\n      console.warn(\n        \"Diff Processing Error: A layer has a diff processor requesting Quad Processing but the picking type is not valid.\"\n      );\n    }\n  }\n\n  /**\n   * This processes add operations from changes in the instancing data and manages the layer's quad tree\n   * with the instance as well.\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (bufferLocations) {\n      manager.changeInstance(manager, instance, EMPTY, bufferLocations);\n    }\n\n    // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n    else {\n      const locations = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocationGroup(locations)) {\n        instance.active = true;\n        instance.easingId = manager.layer.easingId;\n        manager.updateInstance(manager.layer, instance, EMPTY, locations);\n\n        // Ensure the instance has an updated injection in the quad tree\n        manager.quadPicking.quadTree.remove(instance);\n        manager.quadPicking.quadTree.add(instance);\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the uniforms\n    if (bufferLocations) {\n      manager.updateInstance(manager.layer, instance, propIds, bufferLocations);\n\n      // Ensure the instance has an updated injection in the quad tree\n      manager.quadPicking.quadTree.remove(instance);\n      manager.quadPicking.quadTree.add(instance);\n    }\n\n    // If we don't have existing uniforms, then we must remove the instance\n    else {\n      manager.addInstance(manager, instance, EMPTY, bufferLocations);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    if (bufferLocations) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // Remove the easing information the instance gained from being apart of the layer\n      instance.clearEasing();\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, EMPTY, bufferLocations);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n      // Remove the instance from our quad tree\n      manager.quadPicking.quadTree.remove(instance);\n    }\n  }\n}\n","import { Instance } from \"../../../instance-provider\";\nimport { ISinglePickingMetrics, PickType } from \"../../../types\";\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  isBufferLocationGroup\n} from \"../buffer-manager-base\";\nimport { IInstanceAttributeBufferLocationGroup } from \"../instance-attribute-buffer-manager\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\nimport { InstanceAttributeDiffProcessor } from \"./instance-attribute-diff-processor\";\n\nconst EMPTY: number[] = [];\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class InstanceAttributeColorDiffProcessor<\n  T extends Instance\n> extends InstanceAttributeDiffProcessor<T> {\n  colorPicking: ISinglePickingMetrics<T>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>\n  ) {\n    super(layer, bufferManager);\n\n    if (layer.picking.type === PickType.SINGLE) {\n      this.colorPicking = layer.picking;\n      this.colorPicking.uidToInstance = new Map<number, T>();\n    } else {\n      console.warn(\n        \"Diff Processing Error: A layer has a diff processor requesting Color Processing but the picking type is not valid.\"\n      );\n    }\n  }\n\n  /**\n   * This processes add operations from changes in the instancing data and manages the layer's matching of\n   * color / UID to Instance\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (bufferLocations) {\n      manager.changeInstance(manager, instance, EMPTY, bufferLocations);\n    }\n\n    // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n    else {\n      const locations = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocationGroup(locations)) {\n        instance.active = true;\n        instance.easingId = manager.layer.easingId;\n        manager.updateInstance(manager.layer, instance, EMPTY, locations);\n\n        // Make sure the instance is mapped to it's UID\n        manager.colorPicking.uidToInstance.set(instance.uid, instance);\n      } else {\n        console.warn(\n          \"A data cluster was not provided by the manager to associate an instance with.\"\n        );\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the uniforms\n    if (bufferLocations) {\n      manager.updateInstance(manager.layer, instance, propIds, bufferLocations);\n    }\n\n    // If we don't have existing uniforms, then we must remove the instance\n    else {\n      manager.addInstance(manager, instance, EMPTY, bufferLocations);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    if (bufferLocations) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // Remove the easing information the instance gained from being apart of the layer\n      instance.clearEasing();\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, EMPTY, bufferLocations);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n      // Remove the instance from our quad tree\n      manager.colorPicking.uidToInstance.delete(instance.uid);\n    }\n  }\n}\n","import * as Three from \"three\";\nimport { Instance } from \"../../instance-provider\";\nimport { makeInstanceUniformNameArray } from \"../../shaders/util/make-instance-uniform-name\";\nimport { IInstanceAttribute, PickType } from \"../../types\";\nimport { uid, Vec2 } from \"../../util\";\nimport { Layer } from \"../layer\";\nimport { generateLayerModel } from \"../layer-processing/generate-layer-model\";\nimport { Scene } from \"../scene\";\nimport { BufferManagerBase, IBufferLocation } from \"./buffer-manager-base\";\n\nexport interface IUniformBufferLocation extends IBufferLocation {\n  /** This is the index of the instance as it appears in the buffer */\n  instanceIndex: number;\n  /** This is the instance data uniform */\n  buffer: Three.IUniform;\n  /** This is the instance data range within the instanceData uniform */\n  range: Vec2;\n}\n\nexport interface InstanceUniformBuffer {\n  /** This tracks which instances are active. Helps optimize draw range */\n  activeInstances: boolean[];\n  /** This is all of the clusters within this buffer */\n  clusters: IUniformBufferLocation[];\n  /** The first instance in the draw range */\n  firstInstance: number;\n  /** The unique geometry object for the buffer: Used to set draw range */\n  geometry: Three.BufferGeometry;\n  /** The last instance in the draw range */\n  lastInstance: number;\n  /** The unique material for the buffer: Used to provide a new set of uniforms */\n  material: Three.ShaderMaterial;\n  /** The unique model generated for the buffer: Used to allow the buffer to be rendered by adding to a scene */\n  model: Three.Object3D;\n  /** Threejs can not have duplicate objects across Scenes */\n  pickModel?: Three.Object3D;\n}\n\n/**\n * This is a Buffer Management system that performs instancing via the uniforms available to the hardware.\n * This improves compatibility with instancing for systems DRAMATICALLY as ALL systems WILL support uniforms.\n * This will NOT perform the best against true hardware instancing support, but it will have edge cases where it\n * is needed.\n *\n * When a layer has too many instance + vertex attributes for the hardware, the system will defer to this buffer methodology.\n *\n * This class does a whoooooole lot of making the magical instancing optimization controls possible.\n *\n * Our instancing hackyness comes from the idea that uniforms are fast, and you don't have to commit\n * ALL of them when you touch just a little piece, and you don't have worry about drivers not supporting\n * partial vertex buffer updates.\n *\n * This also is WebGL 1.0 compatible without any extensions that are poorly implemented. And again: does\n * NOT require entire attribute buffer commits.\n *\n * Uniforms are limited for any given draw call. So we have to create multiple materials to support\n * chunks of the instances that need to be drawn. We then have to associate an instance with the set\n * of uniforms that is related to the instance and keep them paired together. If we have too many instances\n * we must generate more buffers to accomodate them.\n *\n * If we remove instances, we must free up the uniform set so that others can use the uniforms. While the uniforms\n * are not in use, the instance should not be rendering.\n */\nexport class UniformBufferManager<T extends Instance> extends BufferManagerBase<\n  T,\n  IUniformBufferLocation\n> {\n  /** The number of uniform blocks an instance requires */\n  private uniformBlocksPerInstance: number;\n  /** The generated buffers by this manager */\n  private buffers: InstanceUniformBuffer[] = [];\n  /** The uniform clusters that are free and can be used by an instance */\n  private availableClusters: IUniformBufferLocation[] = [];\n  /** A lookup of an instance to a cluster of uniforms associated with it */\n  private instanceToCluster: { [key: number]: IUniformBufferLocation } = {};\n  /** A map of a cluster of uniforms to the buffer it comes from */\n  private clusterToBuffer = new Map<\n    IUniformBufferLocation,\n    InstanceUniformBuffer\n  >();\n\n  constructor(layer: Layer<T, any>, scene: Scene) {\n    super(layer, scene);\n\n    let maxUniformBlock: number = 0;\n    layer.instanceAttributes.forEach((attributes: IInstanceAttribute<T>) => {\n      maxUniformBlock = Math.max(attributes.block || 0, maxUniformBlock);\n    });\n\n    this.uniformBlocksPerInstance = maxUniformBlock + 1;\n  }\n\n  /**\n   * This adds an instance to the manager and gives the instance an associative\n   * block of uniforms to work with.\n   */\n  add = function(instance: T) {\n    // If there are no available buffers, we must add a buffer\n    if (this.availableClusters.length <= 0) {\n      this.makeNewBuffer();\n    }\n\n    const cluster = this.availableClusters.pop();\n\n    if (cluster) {\n      this.instanceToCluster[instance.uid] = cluster;\n    } else {\n      console.warn(\n        \"No valid cluster available for instance added to uniform manager.\"\n      );\n    }\n\n    return cluster;\n  };\n\n  /**\n   * Free all resources this manager may be holding onto\n   */\n  destroy() {\n    this.buffers.forEach(buffer => {\n      buffer.geometry.dispose();\n      buffer.material.dispose();\n    });\n  }\n\n  /**\n   * This retireves the uniforms associated with an instance, or returns nothing\n   * if the instance has not been associated yet.\n   */\n  getBufferLocations(instance: T) {\n    return this.instanceToCluster[instance.uid];\n  }\n\n  /**\n   * TODO: The uniform buffer does not need to utilize this yet. it will be more necessary\n   * when this manager updates only changed properties.\n   */\n  getActiveAttributePropertyId() {\n    return -1;\n  }\n\n  /**\n   * TODO: This is irrelevant tot his manager for now.\n   * Number of instances this buffer manages.\n   */\n  getInstanceCount() {\n    return -1;\n  }\n\n  /**\n   * TODO: The uniform buffer updates ALL attributes every change for any property so far.\n   * This should be fixed for performance improvements on the compatibility mode.\n   */\n  getUpdateAllPropertyIdList() {\n    return [];\n  }\n\n  /**\n   * Disassociates an instance with it's group of uniforms and makes the instance\n   * in the buffer no longer drawable.\n   */\n  remove = function(instance: T) {\n    const cluster = this.instanceToCluster[instance.uid];\n\n    // If the instance is associated with a cluster, we can add the cluster back to being available\n    // For another instance.\n    if (cluster) {\n      delete this.instanceToCluster[instance.uid];\n      this.availableClusters.push(cluster);\n    }\n\n    return instance;\n  };\n\n  /**\n   * Clears all elements of this manager from the current scene it was in.\n   */\n  removeFromScene() {\n    const scene = this.scene;\n\n    if (scene.container) {\n      for (let i = 0, end = this.buffers.length; i < end; ++i) {\n        const buffer = this.buffers[i];\n        scene.container.remove(buffer.model);\n        buffer.pickModel &&\n          this.scene.pickingContainer.remove(buffer.pickModel);\n      }\n\n      delete this.scene;\n    }\n  }\n\n  /**\n   * Applies the buffers to the provided scene for rendering.\n   */\n  setScene(scene: Scene) {\n    if (scene.container) {\n      for (let i = 0, end = this.buffers.length; i < end; ++i) {\n        const buffer = this.buffers[i];\n        scene.container.add(buffer.model);\n        buffer.pickModel && scene.pickingContainer.add(buffer.pickModel);\n      }\n\n      this.scene = scene;\n    } else {\n      console.warn(\"Can not set a scene that has an undefined container.\");\n    }\n  }\n\n  /**\n   * This generates a new buffer of uniforms to associate instances with.\n   */\n  makeNewBuffer() {\n    // We generate a new geometry object for the buffer as the geometry\n    // Needs to have it's own unique draw range per buffer for optimal\n    // Performance\n    const newGeometry = new Three.BufferGeometry();\n    this.layer.vertexAttributes.forEach(attribute => {\n      if (attribute.materialAttribute) {\n        newGeometry.addAttribute(attribute.name, attribute.materialAttribute);\n      }\n    });\n\n    // Ensure the draw range covers every instance in the geometry.\n    newGeometry.drawRange.start = 0;\n    newGeometry.drawRange.count =\n      this.layer.maxInstancesPerBuffer * this.layer.instanceVertexCount;\n\n    // This is the material that is generated for the layer that utilizes all of the generated and\n    // Injected shader IO and shader fragments\n    const newMaterial = this.layer.material.clone();\n    // Now make a Model for the buffer so it can be rendered withn the scene\n    const newModel = generateLayerModel(this.layer, newGeometry, newMaterial);\n    // We render junkloads of instances in a buffer. Culling will have to happen\n    // On an instance level.\n    newModel.frustumCulled = false;\n\n    // Make our new buffer which will manage the geometry and everything necessary\n    const buffer: InstanceUniformBuffer = {\n      activeInstances: [],\n      clusters: [],\n      firstInstance: 0,\n      geometry: newGeometry,\n      lastInstance: 0,\n      material: newMaterial,\n      model: newModel,\n      pickModel:\n        this.layer.picking.type === PickType.SINGLE\n          ? newModel.clone()\n          : undefined\n    };\n\n    this.buffers.push(buffer);\n\n    // Now that we have created a new buffer, we have all of it's uniforms\n    // To use to render more instances. We must take the instancing uniforms\n    // And divvy them up into clusters for our available buffer.\n    let uniformIndex = 0;\n    const uniformName = makeInstanceUniformNameArray();\n    const instanceData = newMaterial.uniforms[uniformName];\n\n    // We must ensure the vector objects are TOTALLY unique otherwise they'll get shared across buffers\n    instanceData.value = instanceData.value.map(\n      () => new Three.Vector4(0.0, 0.0, 0.0, 0.0)\n    );\n\n    // TODO: This will go away! To satisfy the changing buffer manager interfaces, we make a\n    // fake internal attribute for now\n    const fakeAttribute = Object.assign({}, this.layer.instanceAttributes[0], {\n      bufferAttribute: new Three.InstancedBufferAttribute(\n        new Float32Array(1),\n        1\n      ),\n      uid: uid()\n    });\n\n    for (let i = 0, end = this.layer.maxInstancesPerBuffer; i < end; ++i) {\n      const cluster: IUniformBufferLocation = {\n        attribute: fakeAttribute, // TODO: This is not needed for the uniform method yet. When we break down\n        // the uniform updates into attributes, this will be utilized.\n        buffer: instanceData,\n        instanceIndex: i,\n        range: [uniformIndex, 0]\n      };\n\n      uniformIndex += this.uniformBlocksPerInstance;\n      cluster.range[1] = uniformIndex;\n\n      buffer.clusters.push(cluster);\n      this.availableClusters.push(cluster);\n      this.clusterToBuffer.set(cluster, buffer);\n    }\n\n    // Grab the global uniforms from the material and add it to the uniform's materialUniform list so that\n    // We can keep uniforms consistent across all Instances\n    for (let i = 0, end = this.layer.uniforms.length; i < end; ++i) {\n      const uniform = this.layer.uniforms[i];\n      uniform.materialUniforms.push(newMaterial.uniforms[uniform.name]);\n    }\n\n    // Now that we are ready to utilize the buffer, let's add it to the scene so it may be rendered.\n    // Each new buffer equates to one draw call.\n    if (this.scene && this.scene.container) {\n      this.scene.container.add(buffer.model);\n      buffer.pickModel && this.scene.pickingContainer.add(buffer.pickModel);\n    }\n  }\n}\n","let toEmit: { [key: string]: [Function, number, number] } = {};\n\nexport function emitOnce(\n  id: string,\n  callback: (calledCountBeforeEmit: number, id: string) => void\n) {\n  const emit = toEmit[id] || [callback, -1, 0];\n  toEmit[id] = emit;\n  emit[2]++;\n\n  clearTimeout(emit[1]);\n  emit[1] = window.setTimeout(() => {\n    callback(emit[2], id);\n    delete toEmit[id];\n  }, 1);\n}\n\nexport function flushEmitOnce() {\n  for (const id in toEmit) {\n    const emit = toEmit[id];\n    clearTimeout(emit[1]);\n    emit[0](emit[2], id);\n  }\n\n  toEmit = {};\n}\n","import * as Three from \"three\";\nimport { Instance, ObservableMonitoring } from \"../../instance-provider\";\nimport { instanceAttributeShaderName } from \"../../shaders/util/instance-attribute-shader-name\";\nimport {\n  IInstanceAttribute,\n  IInstanceAttributeInternal,\n  PickType\n} from \"../../types\";\nimport { uid } from \"../../util\";\nimport { emitOnce, flushEmitOnce } from \"../../util/emit-once\";\nimport { IModelConstructable, Layer } from \"../layer\";\nimport { generateLayerModel } from \"../layer-processing/generate-layer-model\";\nimport { Scene } from \"../scene\";\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  IBufferLocationGroup\n} from \"./buffer-manager-base\";\n\nconst { max } = Math;\n\n/**\n * This represents the location of data for an instance's property to the piece of attribute buffer\n * it will update when it changes.\n */\nexport interface IInstanceAttributeBufferLocation extends IBufferLocation {}\n\n/** Represents the Location Groupings for Instance attribute Buffer locations */\nexport type IInstanceAttributeBufferLocationGroup = IBufferLocationGroup<\n  IInstanceAttributeBufferLocation\n>;\n\n/**\n * This manages instances in how they associate with buffer data for an instanced attribute strategy.\n */\nexport class InstanceAttributeBufferManager<\n  T extends Instance\n> extends BufferManagerBase<T, IInstanceAttributeBufferLocation> {\n  /** This stores an attribute's name to the buffer locations generated for it */\n  private allBufferLocations: { [key: string]: IBufferLocation[] } = {};\n  /** This contains the buffer locations the system will have available to the  */\n  private availableLocations: IInstanceAttributeBufferLocationGroup[] = [];\n  /** This is the number of instances the buffer draws currently */\n  currentInstancedCount = 0;\n  /** This is the mapped buffer location to the provided Instance */\n  private instanceToBufferLocation: {\n    [key: number]: IInstanceAttributeBufferLocationGroup;\n  } = {};\n  /**\n   * This is the number of times the buffer has grown. This is used to determine how much the buffer will grow\n   * for next growth pass.\n   */\n  private growthCount: number = 0;\n  /** This is the number of instances the buffer currently supports */\n  private maxInstancedCount: number = 1000;\n\n  // These are the only Three objects that must be monitored for disposal\n  private geometry?: Three.InstancedBufferGeometry;\n  private material?: Three.ShaderMaterial;\n  private model?: IModelConstructable & Three.Object3D;\n  private pickModel?: IModelConstructable & Three.Object3D | undefined;\n  private attributes?: IInstanceAttributeInternal<T>[];\n\n  /** This is a mapping of all attributes to their associated property ids that, when the property changes, the attribute will be updated */\n  private attributeToPropertyIds = new Map<IInstanceAttribute<T>, number[]>();\n  /**\n   * This is a trimmed listing of minimum property ids needed to trigger an update on all properties.\n   * This is used by the diffing process mostly to handle adding a new instance.\n   */\n  private updateAllPropertyIdList: number[] = [];\n  /**\n   * This is the discovered property id of the active attribute for the instance type this manager manages.\n   * This is used by the diffing process to target updates related to deactivating an instance.\n   */\n  private activePropertyId: number = -1;\n\n  constructor(layer: Layer<T, any>, scene: Scene) {\n    super(layer, scene);\n    // Start our add method as a registration step.\n    this.add = this.doAddWithRegistration;\n  }\n\n  /**\n   * First instance to be added to this manager will be heavily analyzed for used observables per attribute.\n   */\n  private doAddWithRegistration(instance: T) {\n    // We need to find out how an instance interacts with the attributes, so we will\n    // loop through the instances, call their updates and get feedback\n    this.layer.instanceAttributes.forEach(attribute => {\n      // We don't need to register child attributes as they get updated as a consequence to parent attributes\n      if (attribute.parentAttribute) return;\n      // Activate monitoring of ids, this also resets the monitor's list\n      ObservableMonitoring.setObservableMonitor(true);\n      // Access the update which accesses an instances properties (usually)\n      attribute.update(instance);\n      // We now have all of the ids of the properties that were used in updating the attributes\n      const propertyIdsForAttribute = ObservableMonitoring.getObservableMonitorIds(\n        true\n      );\n      // Store the mapping of the property ids\n      this.attributeToPropertyIds.set(attribute, propertyIdsForAttribute);\n\n      // If this is the active attribute, then we track the property id that modifies it\n      // for handling internal instance management.\n      if (attribute === this.layer.activeAttribute) {\n        this.activePropertyId = propertyIdsForAttribute[0];\n      }\n    });\n\n    // SUPER IMPORTANT to deactivate this here. Leaving this turned on causes memory to be chewed up\n    // for every property getter.\n    ObservableMonitoring.setObservableMonitor(false);\n    // This analyzes the properties and how they affect the attributes. It determines the smallest\n    // list possible of property ids needed to trigger an update on all of the attributes.\n    this.makeUpdateAllPropertyIdList();\n    // Do the first resize which creates the buffer and makes all of the initial buffer locations\n    const locationInfo = this.resizeBuffer();\n    // After all of the property id to attribute associations are made, we must break down the buffers\n    // into locations and then group those locations which will become our instance to buffer location\n    // slots\n    this.gatherLocationsIntoGroups(\n      locationInfo.newLocations,\n      locationInfo.growth\n    );\n    // After the first registration add, we gear shift to a more efficient add method.\n    this.add = this.doAdd;\n\n    // Perform the add after all of the registration process is complete\n    return this.doAdd(instance);\n  }\n\n  /**\n   * After the registration add happens, we gear shift over to this add method which will only pair instances\n   * with their appropriate buffer location.\n   */\n  private doAdd(instance: T) {\n    // Ensure we have buffer locations available\n    if (this.availableLocations.length <= 0) {\n      // Resice the buffer to accommodate more instances\n      const locationInfo = this.resizeBuffer();\n      // Break down the newly generated buffers into property groupings for the instances\n      this.gatherLocationsIntoGroups(\n        locationInfo.newLocations,\n        locationInfo.growth\n      );\n    }\n\n    // Get the next available location\n    const bufferLocations = this.availableLocations.shift();\n\n    // Pair up the instance with it's buffer location\n    if (bufferLocations && this.geometry) {\n      this.instanceToBufferLocation[instance.uid] = bufferLocations;\n      this.currentInstancedCount = this.geometry.maxInstancedCount = max(\n        this.currentInstancedCount,\n        // Instance index + 1 because the indices are zero indexed and the maxInstancedCount is a count value\n        bufferLocations.instanceIndex + 1\n      );\n      this.geometry.drawRange = {\n        count: this.currentInstancedCount * this.layer.instanceVertexCount,\n        start: 0\n      };\n    } else {\n      console.error(\n        \"Add Error: Instance Attribute Buffer Manager failed to pair an instance with a buffer location\"\n      );\n    }\n\n    return bufferLocations;\n  }\n\n  destroy() {\n    if (this.geometry) this.geometry.dispose();\n    if (this.material) this.material.dispose();\n\n    if (this.scene && this.scene.container && this.model) {\n      this.scene.container.remove(this.model);\n    }\n  }\n\n  /**\n   * This retireves the buffer locations associated with an instance, or returns nothing\n   * if the instance has not been associated yet.\n   */\n  getBufferLocations(instance: T) {\n    return this.instanceToBufferLocation[instance.uid];\n  }\n\n  /**\n   * This is the property id of the active attribute.\n   */\n  getActiveAttributePropertyId() {\n    return this.activePropertyId;\n  }\n\n  /**\n   * This is the bare minimum property ids that, when triggered for update, will update ALL of the attribute buffers\n   * for the managed layer.\n   */\n  getUpdateAllPropertyIdList() {\n    return this.updateAllPropertyIdList;\n  }\n\n  /**\n   * Analyzes the list of attributes to the property ids that affects them. This populates the list\n   * of minimal property ids needed to trigger updates on all of the attributes.\n   */\n  private makeUpdateAllPropertyIdList() {\n    // Make a deduping list of ids\n    const updateAllPropertyIdList: { [key: number]: number } = {};\n\n    // Get unique ids that will target all attributes\n    this.attributeToPropertyIds.forEach(ids => {\n      updateAllPropertyIdList[ids[0]] = ids[0];\n    });\n\n    // Store the list for the diffing process to utilize\n    this.updateAllPropertyIdList = Object.values(\n      updateAllPropertyIdList\n    ).filter(Boolean);\n  }\n\n  /**\n   * Disassociates an instance with a buffer\n   */\n  remove = (instance: T) => {\n    const location = this.instanceToBufferLocation[instance.uid];\n\n    if (location) {\n      delete this.instanceToBufferLocation[instance.uid];\n      this.availableLocations.push(location);\n    }\n\n    return instance;\n  };\n\n  /**\n   * Clears all elements of this manager from the current scene it was in.\n   */\n  removeFromScene() {\n    if (this.scene && this.scene.container && this.model) {\n      this.scene.container.remove(this.model);\n    }\n    this.pickModel && this.scene.pickingContainer.remove(this.pickModel);\n    delete this.scene;\n  }\n\n  /**\n   * This generates a new buffer of uniforms to associate instances with.\n   */\n  private resizeBuffer() {\n    let growth = 0;\n    // Each attribute will generate lists of new buffer locations after being created or expanded\n    const attributeToNewBufferLocations = new Map<\n      string,\n      IInstanceAttributeBufferLocation[]\n    >();\n\n    // If our geometry is not created yet, then it need be made\n    if (!this.geometry) {\n      // The buffer grows from 0 to our initial instance count\n      growth = this.maxInstancedCount;\n      // We generate a new geometry object for the buffer as the geometry\n      // Needs to have it's own unique draw range per buffer for optimal\n      // Performance.\n      this.geometry = new Three.InstancedBufferGeometry();\n\n      // The geometry needs the vertex information (which should be shared amongst all instances of the layer)\n      for (const attribute of this.layer.vertexAttributes) {\n        if (attribute.materialAttribute) {\n          this.geometry.addAttribute(\n            attribute.name,\n            attribute.materialAttribute\n          );\n        }\n      }\n\n      this.attributes = [];\n\n      // We now take the instance attributes and add them as Instanced Attributes to our geometry\n      for (const attribute of this.layer.instanceAttributes) {\n        // We start with enough data in the buffer to accommodate 1024 instances\n        const size: number = attribute.size || 0;\n        const buffer = new Float32Array(size * this.maxInstancedCount);\n        const bufferAttribute = new Three.InstancedBufferAttribute(\n          buffer,\n          size\n        );\n        bufferAttribute.setDynamic(true);\n        this.geometry.addAttribute(\n          instanceAttributeShaderName(attribute),\n          bufferAttribute\n        );\n        let newBufferLocations = attributeToNewBufferLocations.get(\n          attribute.name\n        );\n\n        if (!newBufferLocations) {\n          newBufferLocations = [];\n          attributeToNewBufferLocations.set(attribute.name, newBufferLocations);\n        }\n\n        const allLocations = this.allBufferLocations[attribute.name] || [];\n        this.allBufferLocations[attribute.name] = allLocations;\n\n        const internalAttribute: IInstanceAttributeInternal<T> = Object.assign(\n          {},\n          attribute,\n          { uid: uid(), bufferAttribute: bufferAttribute }\n        );\n\n        for (let i = 0; i < this.maxInstancedCount; ++i) {\n          const newLocation: IBufferLocation = {\n            attribute: internalAttribute,\n            buffer: {\n              value: buffer\n            },\n            instanceIndex: i,\n            range: [i * size, i * size + size]\n          };\n\n          newBufferLocations.push(newLocation);\n          allLocations.push(newLocation);\n        }\n\n        // Make an internal instance attribute for tracking\n        this.attributes.push(internalAttribute);\n      }\n\n      // Ensure the draw range covers every instance in the geometry.\n      this.geometry.maxInstancedCount = 0;\n      // This is the material that is generated for the layer that utilizes all of the generated and\n      // Injected shader IO and shader fragments\n      this.material = this.layer.material.clone();\n\n      // Grab the global uniforms from the material and add it to the uniform's materialUniform list so that\n      // We can keep uniforms consistent across all Instances\n      for (let i = 0, end = this.layer.uniforms.length; i < end; ++i) {\n        const uniform = this.layer.uniforms[i];\n        uniform.materialUniforms.push(this.material.uniforms[uniform.name]);\n      }\n    }\n\n    // If the geometry is already created, then we will expand each instanced attribute to the next growth\n    // level and generate the new buffer locations based on the expansion\n    else {\n      // Since were are resizing the buffer, let's destroy the old buffer and make one anew\n      this.geometry.dispose();\n      this.geometry = new Three.InstancedBufferGeometry();\n      const previousInstanceAmount = this.maxInstancedCount;\n\n      // The geometry needs the vertex information (which should be shared amongst all instances of the layer)\n      for (const attribute of this.layer.vertexAttributes) {\n        if (attribute.materialAttribute) {\n          this.geometry.addAttribute(\n            attribute.name,\n            attribute.materialAttribute\n          );\n        }\n      }\n\n      // We grow our buffer by magnitudes of 10 * 1024\n      // First growth: 1000\n      // Next: 10000\n      // Next: 10000\n      // Next: 10000\n      // Next: 10000\n      // We cap at growth of 1 million to prevent a mass unused RAM void.\n      this.growthCount = Math.min(1, this.growthCount + 1);\n      growth = Math.pow(10, this.growthCount) * 1000;\n      this.maxInstancedCount += growth;\n\n      // Ensure attributes is still defined\n      this.attributes = this.attributes || [];\n\n      for (const attribute of this.attributes) {\n        const bufferAttribute = attribute.bufferAttribute;\n        const size: number = attribute.size || 0;\n\n        if (bufferAttribute.array instanceof Float32Array) {\n          // Make a new buffer that is the proper size\n          const buffer: Float32Array = new Float32Array(\n            this.maxInstancedCount * size\n          );\n          // Retain all of the information in the previous buffer\n          buffer.set(bufferAttribute.array, 0);\n          // Make our new attribute based on the grown buffer\n          const newAttribute = new Three.InstancedBufferAttribute(buffer, size);\n          // Set the attribute to dynamic so we can update ranges within it\n          newAttribute.setDynamic(true);\n          // Make sure our attribute is updated with the newly made attribute\n          attribute.bufferAttribute = newAttribute;\n          // Add the new attribute to our new geometry object\n          this.geometry.addAttribute(\n            instanceAttributeShaderName(attribute),\n            newAttribute\n          );\n          // Get the temp storage for new buffer locations\n          let newBufferLocations = attributeToNewBufferLocations.get(\n            attribute.name\n          );\n\n          // Since we have a new buffer object we are working with, we must update all of the existing buffer\n          // locations to utilize this new buffer. The locations keep everything else the same, but the buffer\n          // object itself should be updated\n          const allLocations = this.allBufferLocations[attribute.name] || [];\n          this.allBufferLocations[attribute.name] = allLocations;\n\n          for (let k = 0, endk = allLocations.length; k < endk; ++k) {\n            allLocations[k].buffer.value = buffer;\n          }\n\n          if (!newBufferLocations) {\n            newBufferLocations = [];\n            attributeToNewBufferLocations.set(\n              attribute.name,\n              newBufferLocations\n            );\n          }\n\n          for (\n            let i = previousInstanceAmount, end = this.maxInstancedCount;\n            i < end;\n            ++i\n          ) {\n            const newLocation: IBufferLocation = {\n              attribute,\n              buffer: {\n                value: buffer\n              },\n              instanceIndex: i,\n              range: [i * size, i * size + size]\n            };\n\n            newBufferLocations.push(newLocation);\n            allLocations.push(newLocation);\n          }\n        }\n      }\n\n      if (this.scene.container && this.model) {\n        this.scene.container.remove(this.model);\n      }\n    }\n\n    if (this.scene && this.model && this.scene.container) {\n      this.scene.container.remove(this.model);\n    }\n\n    if (this.scene && this.scene.pickingContainer && this.pickModel) {\n      this.scene.pickingContainer.remove(this.pickModel);\n    }\n\n    // Ensure material is defined\n    this.material = this.material || this.layer.material.clone();\n    // Remake the model with the generated geometry\n    this.model = generateLayerModel(this.layer, this.geometry, this.material);\n    // We render junkloads of instances for a given buffer. Culling will have to happen\n    // On an instance level.\n    this.model.frustumCulled = false;\n    // Make a picking model if we need it so we can render the model with a different uniform set\n    // for the picking procedure.\n    this.pickModel =\n      this.layer.picking.type === PickType.SINGLE\n        ? this.model.clone()\n        : undefined;\n\n    // Now that we are ready to utilize the buffer, let's add it to the scene so it may be rendered.\n    // Each new buffer equates to one draw call.\n    if (this.scene && this.scene.container) {\n      this.scene.container.add(this.model);\n\n      if (this.pickModel) {\n        this.scene.pickingContainer.add(this.pickModel);\n      }\n    }\n\n    return {\n      growth,\n      newLocations: attributeToNewBufferLocations\n    };\n  }\n\n  /**\n   * This takes newly created buffer locations and groups them by the property ids identified by the\n   * registration phase.\n   */\n  private gatherLocationsIntoGroups(\n    attributeToNewBufferLocations: Map<\n      string,\n      IInstanceAttributeBufferLocation[]\n    >,\n    totalNewInstances: number\n  ) {\n    if (this.attributeToPropertyIds.size === 0) return;\n\n    // Optimize inner loops by pre-fetching lookups by names\n    const attributesBufferLocations: {\n      attribute: IInstanceAttribute<T>;\n      bufferLocationsForAttribute: IInstanceAttributeBufferLocation[];\n      childBufferLocations: IInstanceAttributeBufferLocation[][];\n      ids: number[];\n    }[] = [];\n\n    this.attributeToPropertyIds.forEach((ids, attribute) => {\n      attributesBufferLocations.push({\n        attribute,\n        bufferLocationsForAttribute:\n          attributeToNewBufferLocations.get(attribute.name) || [],\n        childBufferLocations: (attribute.childAttributes || []).map(\n          attr => attributeToNewBufferLocations.get(attr.name) || []\n        ),\n        ids\n      });\n    });\n\n    // Loop through all of the new instances available and gather all of the buffer locations\n    for (let i = 0; i < totalNewInstances; ++i) {\n      const group: IInstanceAttributeBufferLocationGroup = {\n        instanceIndex: -1,\n        propertyToBufferLocation: {}\n      };\n\n      // Loop through all of the property ids that affect specific attributes. Each of these ids\n      // needs an association with the buffer location they modify.\n      for (let j = 0, endj = attributesBufferLocations.length; j < endj; ++j) {\n        const allLocations = attributesBufferLocations[j];\n        const attribute = allLocations.attribute;\n        const ids = allLocations.ids;\n        const bufferLocationsForAttribute =\n          allLocations.bufferLocationsForAttribute;\n\n        if (!bufferLocationsForAttribute) {\n          emitOnce(\n            \"Instance Attribute Buffer Error\",\n            (count: number, id: string) => {\n              console.warn(\n                `${id}: There is an error in forming buffer location groups in InstanceAttributeBufferManager. Error count: ${count}`\n              );\n            }\n          );\n          continue;\n        }\n\n        const bufferLocation = bufferLocationsForAttribute.shift();\n\n        if (!bufferLocation) {\n          emitOnce(\n            \"Instance Attribute Buffer Error\",\n            (count: number, id: string) => {\n              console.warn(\n                `${id}: There is an error in forming buffer location groups in InstanceAttributeBufferManager. Error count: ${count}`\n              );\n            }\n          );\n          continue;\n        }\n\n        if (group.instanceIndex === -1) {\n          group.instanceIndex = bufferLocation.instanceIndex;\n        } else if (bufferLocation.instanceIndex !== group.instanceIndex) {\n          emitOnce(\n            \"Instance Attribute Parallelism Error\",\n            (count: number, id: string) => {\n              console.warn(\n                `${id}: A buffer location does not have a matching instance index which means the buffer locations are not in parallel with each other somehow. Error count: ${count}`\n              );\n              console.warn(attribute.name, bufferLocation);\n            }\n          );\n          continue;\n        }\n\n        // If the attribute has children attributes. Then when the attribute is updated, the child attributes should\n        // be updated as well. Thus the buffer location needs the child attribute buffer locations.\n        if (attribute.childAttributes) {\n          const childLocations = [];\n\n          for (\n            let k = 0, endk = attribute.childAttributes.length;\n            k < endk;\n            ++k\n          ) {\n            const childAttribute = attribute.childAttributes[k];\n            const bufferLocationsForChildAttribute =\n              allLocations.childBufferLocations[k];\n\n            if (bufferLocationsForChildAttribute) {\n              const childBufferLocation = bufferLocationsForChildAttribute.shift();\n              if (childBufferLocation) {\n                childLocations.push(childBufferLocation);\n              } else {\n                emitOnce(\n                  \"Instance Attribute Child Attribute Error\",\n                  (count: number, id: string) => {\n                    console.warn(\n                      `${id}: A child attribute does not have a buffer location available. Error count: ${count}`\n                    );\n                    console.warn(\n                      `Parent Attribute: ${attribute.name} Child Attribute: ${\n                        childAttribute.name\n                      }`\n                    );\n                  }\n                );\n              }\n            }\n          }\n\n          bufferLocation.childLocations = childLocations;\n        }\n\n        // In the group, associate the property ids that affect a buffer location WITH the buffer location they affect\n        for (let k = 0, endk = ids.length; k < endk; ++k) {\n          const id = ids[k];\n          group.propertyToBufferLocation[id] = bufferLocation;\n        }\n      }\n\n      // Store this group as a group that is ready to be associated with an instance\n      this.availableLocations.push(group);\n    }\n\n    // This helps ensure errors get reported in a timely fashion in case this triggers some massive looping\n    flushEmitOnce();\n  }\n\n  /**\n   * Returns the total instances this buffer manages.\n   */\n  getInstanceCount() {\n    return this.maxInstancedCount;\n  }\n}\n","export * from \"./buffer-manager-base\";\nexport * from \"./instance-attribute-buffer-manager\";\nexport * from \"./uniform-buffer-manager\";\n","import { Instance } from \"../../instance-provider/instance\";\nimport {\n  IInstanceAttribute,\n  INonePickingMetrics,\n  IQuadTreePickingMetrics,\n  ISinglePickingMetrics,\n  PickType\n} from \"../../types\";\nimport { LayerBufferType } from \"../layer-processing/layer-buffer-type\";\nimport { AtlasResourceManager } from \"../texture/atlas-resource-manager\";\nimport { BufferManagerBase, IBufferLocation } from \"./buffer-manager-base\";\nimport { IBufferLocationGroup } from \"./buffer-manager-base\";\nimport { BaseDiffProcessor } from \"./diff-processors/base-diff-processor\";\nimport { InstanceAttributeColorDiffProcessor } from \"./diff-processors/instance-attribute-color-diff-processor\";\nimport { InstanceAttributeDiffProcessor } from \"./diff-processors/instance-attribute-diff-processor\";\nimport { InstanceAttributeQuadDiffProcessor } from \"./diff-processors/instance-attribute-quad-diff-processor\";\nimport { UniformColorDiffProcessor } from \"./diff-processors/uniform-color-diff-processor\";\nimport { UniformDiffProcessor } from \"./diff-processors/uniform-diff-processor\";\nimport { UniformQuadDiffProcessor } from \"./diff-processors/uniform-quad-diff-processor\";\n\n/** Signature of a method that handles a diff */\nexport type DiffHandler<T extends Instance> = (\n  manager: BaseDiffProcessor<T>,\n  instance: T,\n  propIds: number[],\n  bufferLocations?: IBufferLocation | IBufferLocationGroup<IBufferLocation>\n) => void;\n/** A set of diff handling methods in this order [change, add, remove] */\nexport type DiffLookup<T extends Instance> = DiffHandler<T>[];\n\n/**\n * This interface is the bare minimum properties needed for this diff manager to map instance updates to\n * uniform changes. We don't use a Layer as a target explicitly to avoid circular/hard dependencies\n */\nexport interface IInstanceDiffManagerTarget<T extends Instance> {\n  /** This is the attribute for the target that represents the _active injected value */\n  activeAttribute: IInstanceAttribute<T>;\n  /** This is used by the automated easing system and is the easing Ids used by the layer for given attributes */\n  easingId: { [key: string]: number };\n  /** This is all of the instance attributes applied to the target */\n  instanceAttributes: IInstanceAttribute<T>[];\n  /** This is the picking metrics for how Instances are picked with the mouse */\n  picking:\n    | IQuadTreePickingMetrics<T>\n    | ISinglePickingMetrics<T>\n    | INonePickingMetrics;\n  /** This is the resource manager for the target which let's us fetch information from an atlas for an instance */\n  resource: AtlasResourceManager;\n  /** This is the manager that links an instance to it's uniform cluster for populating the uniform buffer */\n  bufferManager: BufferManagerBase<T, IBufferLocation>;\n  /** This is the buffering strategy being used */\n  bufferType: LayerBufferType;\n}\n\n/**\n * This class manages the process of taking the diffs of a layer and executing methods on those diffs to perform\n * updates to the uniforms that control those instances.\n */\nexport class InstanceDiffManager<T extends Instance> {\n  bufferManager: BufferManagerBase<T, IBufferLocation>;\n  processor: BaseDiffProcessor<T>;\n  processing: DiffLookup<T>;\n  layer: IInstanceDiffManagerTarget<T>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>\n  ) {\n    this.layer = layer;\n    this.bufferManager = bufferManager;\n  }\n\n  /**\n   * This returns the proper diff processor for handling diffs\n   */\n  makeProcessor(): DiffLookup<T> {\n    // If this manager has already figured out which processor to use. Just return that processor.\n    if (this.processing) return this.processing;\n\n    if (this.layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE) {\n      // Now we look at the state of the layer to determine the best diff processor strategy\n      if (this.layer.picking) {\n        if (this.layer.picking.type === PickType.SINGLE) {\n          this.processor = new InstanceAttributeColorDiffProcessor(\n            this.layer,\n            this.bufferManager\n          );\n        } else if (this.layer.picking.type === PickType.ALL) {\n          this.processor = new InstanceAttributeQuadDiffProcessor(\n            this.layer,\n            this.bufferManager\n          );\n        }\n      }\n\n      if (!this.processor) {\n        this.processor = new InstanceAttributeDiffProcessor(\n          this.layer,\n          this.bufferManager\n        );\n      }\n    } else {\n      // Now we look at the state of the layer to determine the best diff processor strategy\n      if (this.layer.picking) {\n        if (this.layer.picking.type === PickType.ALL) {\n          this.processor = new UniformQuadDiffProcessor(\n            this.layer,\n            this.bufferManager\n          );\n        } else if (this.layer.picking.type === PickType.SINGLE) {\n          this.processor = new UniformColorDiffProcessor(\n            this.layer,\n            this.bufferManager\n          );\n        }\n      }\n\n      if (!this.processor) {\n        this.processor = new UniformDiffProcessor(\n          this.layer,\n          this.bufferManager\n        );\n      }\n    }\n\n    this.processing = [\n      this.processor.changeInstance,\n      this.processor.addInstance,\n      this.processor.removeInstance\n    ];\n\n    return this.processing;\n  }\n}\n","import { InstanceDiffType } from \"../types\";\nimport { Instance } from \"./instance\";\n\n/**\n * This is an entry within the change list of the provider. It represents the type of change\n * and stores the property id's of the properties on the instance that have changed.\n */\nexport type InstanceDiff<T extends Instance> = [\n  T,\n  InstanceDiffType,\n  { [key: number]: number }\n];\n\n/**\n * This is an optimized provider, that can provide instances that use the internal observable system\n * to deliver updates to the framework.\n */\nexport class InstanceProvider<T extends Instance> {\n  /** Stores the disposers that are called when the instance is no longer listened to */\n  private cleanObservation: { [key: number]: [T, Function] } = {};\n  /** This stores the changes to the instances themselves */\n  private instanceChanges = new Map<number, InstanceDiff<T>>();\n  /** This flag is true when resolving changes when the change list is retrieved. it blocks changes until the current list is resolved */\n  private allowChanges = true;\n\n  /**\n   * Retrieve all of the changes applied to instances\n   */\n  get changeList(): InstanceDiff<T>[] {\n    this.allowChanges = false;\n    const changes = Array.from(this.instanceChanges.values());\n\n    return changes;\n  }\n\n  /**\n   * Adds an instance to the provider which will stream observable changes of the instance to\n   * the framework.\n   */\n  add(instance: T) {\n    // No need to duplicate the addition\n    if (this.cleanObservation[instance.uid]) {\n      return instance;\n    }\n\n    if (this.allowChanges) {\n      instance.observer = this;\n      const disposer: Function = instance.observableDisposer;\n      // Store the disposers so we can clean up the observable properties\n      this.cleanObservation[instance.uid] = [instance, disposer];\n      // Indicate we have a new instance\n      this.instanceChanges.set(instance.uid, [\n        instance,\n        InstanceDiffType.INSERT,\n        instance.changes\n      ]);\n    }\n\n    return instance;\n  }\n\n  /**\n   * Removes all instances from this provider\n   */\n  clear() {\n    const values = Object.values(this.cleanObservation);\n\n    for (let i = 0, end = values.length; i < end; ++i) {\n      this.remove(values[i][0]);\n    }\n  }\n\n  /**\n   * Clear all resources held by this provider. It IS valid to lose reference to all instances\n   * and to this object, which would effectively cause this object to get GC'ed. But if you\n   * desire to hang onto the instance objects, then this should be called.\n   */\n  destroy() {\n    const values = Object.values(this.cleanObservation);\n\n    for (let i = 0, end = values.length; i < end; ++i) {\n      values[i][1]();\n    }\n\n    this.cleanObservation = {};\n    this.instanceChanges.clear();\n  }\n\n  /**\n   * This is called from observables to indicate it's parent has been updated\n   */\n  instanceUpdated(instance: T) {\n    if (this.allowChanges) {\n      // Flag the instance as having a property changed\n      this.instanceChanges.set(instance.uid, [\n        instance,\n        InstanceDiffType.CHANGE,\n        instance.changes\n      ]);\n    }\n  }\n\n  /**\n   * Removes the instance from being advertised changes and from providing the changes\n   * for the instance.\n   */\n  remove(instance: T) {\n    if (this.allowChanges) {\n      const disposer = this.cleanObservation[instance.uid];\n\n      if (disposer) {\n        disposer[1]();\n        delete this.cleanObservation[instance.uid];\n        this.instanceChanges.set(instance.uid, [\n          instance,\n          InstanceDiffType.REMOVE,\n          {}\n        ]);\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Flagged all changes as dealt with\n   */\n  resolve() {\n    this.allowChanges = true;\n    this.instanceChanges.clear();\n  }\n}\n","import * as Three from \"three\";\nimport { InstanceProvider } from \"../../instance-provider\";\nimport { ILayerProps, IModelType, Layer } from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  IShaderInitialization,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport { CommonMaterialOptions, IAutoEasingMethod, Vec } from \"../../util\";\nimport { ArcInstance } from \"./arc-instance\";\n\nexport enum ArcScaleType {\n  /** All dimensions are within world space */\n  NONE,\n  /**\n   * The thickness of the arc is in screen space. Thus, camera zoom changes will not affect it and\n   * must be controlled by scaleFactor alone.\n   */\n  SCREEN_CURVE\n}\n\nexport interface IArcLayerProps<T extends ArcInstance> extends ILayerProps<T> {\n  scaleType?: ArcScaleType;\n  animate?: {\n    angle?: IAutoEasingMethod<Vec>;\n    center?: IAutoEasingMethod<Vec>;\n    colorEnd?: IAutoEasingMethod<Vec>;\n    colorStart?: IAutoEasingMethod<Vec>;\n    radius?: IAutoEasingMethod<Vec>;\n    thickness?: IAutoEasingMethod<Vec>;\n  };\n}\n\n/**\n * This layer displays Arcs and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class ArcLayer<\n  T extends ArcInstance,\n  U extends IArcLayerProps<T>\n> extends Layer<T, U> {\n  static defaultProps: IArcLayerProps<ArcInstance> = {\n    data: new InstanceProvider<ArcInstance>(),\n    key: \"\",\n    scaleType: ArcScaleType.NONE\n  };\n\n  /** Easy lookup of all attribute names for the layer */\n  static attributeNames = {\n    angle: \"angle\",\n    center: \"center\",\n    colorEnd: \"colorEnd\",\n    colorStart: \"colorStart\",\n    depth: \"depth\",\n    radius: \"radius\",\n    thickness: \"thickness\"\n  };\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<ArcInstance> {\n    const { scaleType } = this.props;\n    const animations = this.props.animate || {};\n    const {\n      angle: animateAngle,\n      center: animateCenter,\n      radius: animateRadius,\n      thickness: animateThickness,\n      colorStart: animateColorStart,\n      colorEnd: animateColorEnd\n    } = animations;\n\n    const MAX_SEGMENTS = 150;\n\n    // Calculate the normals and interpolations for our vertices\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      [MAX_SEGMENTS * 2 + 2]: -1\n    };\n\n    const vertexInterpolation: { [key: number]: number } = {\n      0: 0,\n      [MAX_SEGMENTS * 2 + 2]: 1\n    };\n\n    let sign = 1;\n    for (let i = 0; i < MAX_SEGMENTS * 2; ++i) {\n      vertexToNormal[i + 1] = sign;\n      vertexInterpolation[i + 1] = Math.floor(i / 2) / (MAX_SEGMENTS - 1);\n      sign *= -1;\n    }\n\n    const vs =\n      scaleType === ArcScaleType.NONE\n        ? require(\"./arc-layer.vs\")\n        : require(\"./arc-layer-screen-space.vs\");\n\n    return {\n      fs: require(\"./arc-layer.fs\"),\n      instanceAttributes: [\n        {\n          easing: animateCenter,\n          name: ArcLayer.attributeNames.center,\n          size: InstanceAttributeSize.TWO,\n          update: o => o.center\n        },\n        {\n          easing: animateRadius,\n          name: ArcLayer.attributeNames.radius,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.radius]\n        },\n        {\n          name: ArcLayer.attributeNames.depth,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth]\n        },\n        {\n          easing: animateThickness,\n          name: ArcLayer.attributeNames.thickness,\n          size: InstanceAttributeSize.TWO,\n          update: o => o.thickness\n        },\n        {\n          easing: animateAngle,\n          name: ArcLayer.attributeNames.angle,\n          size: InstanceAttributeSize.TWO,\n          update: o => o.angle\n        },\n        {\n          easing: animateColorStart,\n          name: ArcLayer.attributeNames.colorStart,\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.colorStart\n        },\n        {\n          easing: animateColorEnd,\n          name: ArcLayer.attributeNames.colorEnd,\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.colorEnd\n        }\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: _u => [1]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexInterpolation[vertex],\n            // The number of vertices\n            MAX_SEGMENTS * 2\n          ]\n        }\n      ],\n      vertexCount: MAX_SEGMENTS * 2 + 2,\n      vs\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return Object.assign({}, CommonMaterialOptions.transparentShape, {\n      side: Three.DoubleSide\n    } as IMaterialOptions);\n  }\n}\n","export * from \"./arc-layer\";\nexport * from \"./arc-instance\";\n","export * from \"./arcs\";\nexport * from \"./circles\";\nexport * from \"./edges\";\nexport * from \"./images\";\nexport * from \"./labels\";\nexport * from \"./rectangle\";\nexport * from \"./rings\";\nexport * from \"./types\";\n","import { Instance } from \"../instance-provider/instance\";\nimport { Bounds } from \"../primitives/bounds\";\nimport { IPoint } from \"../primitives/point\";\n\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nconst maxPopulation: number = 5;\nconst maxDepth: number = 10;\n\nexport type BoundsAccessor<T extends Instance> = (o: T) => Bounds | null;\n\n/**\n * Allows typing of a callback argument\n */\nexport interface IVisitFunction<T extends Instance> {\n  /**\n   * A callback to use during add or query\n   *\n   * Called do provide aggregation or filtering like Array.reduce or\n   * Array.filter, but in a QuadTree instead.\n   *\n   * @param node  The node to effect the function upon\n   * @param child The child to add to the node\n   */\n  (node: Node<T>, child?: Bounds): void;\n}\n\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n */\nexport class Quadrants<T extends Instance> {\n  TL: Node<T>;\n  TR: Node<T>;\n  BL: Node<T>;\n  BR: Node<T>;\n\n  /**\n   * Ensures all memory is released for all nodes and all references are removed\n   * to potentially high memory consumption items\n   */\n  destroy() {\n    this.TL.destroy();\n    this.TR.destroy();\n    this.BL.destroy();\n    this.BR.destroy();\n    delete this.TL;\n    delete this.TR;\n    delete this.BL;\n    delete this.BR;\n  }\n\n  /**\n   * Creates an instance of Quadrants.\n   *\n   * @param bounds The bounds this will create quandrants for\n   * @param depth  The child depth of this element\n   */\n  constructor(\n    bounds: Bounds,\n    depth: number,\n    getBounds: BoundsAccessor<T>,\n    childToNode: Map<T, Node<T>>,\n    childToBounds: Map<T, Bounds | null>\n  ) {\n    const mid = bounds.mid;\n    this.TL = new Node<T>(bounds.x, mid.x, bounds.y, mid.y, getBounds, depth);\n    this.TR = new Node<T>(\n      mid.x,\n      bounds.right,\n      bounds.y,\n      mid.y,\n      getBounds,\n      depth\n    );\n    this.BL = new Node<T>(\n      bounds.x,\n      mid.x,\n      mid.y,\n      bounds.bottom,\n      getBounds,\n      depth\n    );\n    this.BR = new Node<T>(\n      mid.x,\n      bounds.right,\n      mid.y,\n      bounds.bottom,\n      getBounds,\n      depth\n    );\n    this.TL.childToNode = childToNode;\n    this.TR.childToNode = childToNode;\n    this.BL.childToNode = childToNode;\n    this.BR.childToNode = childToNode;\n    this.TL.childToBounds = childToBounds;\n    this.TR.childToBounds = childToBounds;\n    this.BL.childToBounds = childToBounds;\n    this.BR.childToBounds = childToBounds;\n  }\n}\n\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n */\nexport class Node<T extends Instance> {\n  /** This is the amount of space this node covers */\n  bounds: Bounds;\n  /** These are the child Instances of the node. */\n  children: T[] = [];\n  /**\n   * This tracks a quick lookup of a child to it's parent node. This is used so the child can\n   * be removed with ease and not require a traversal of the tree.\n   */\n  childToNode: Map<T, Node<T>>;\n  /** This tracks the bounds calcuated for the given instance */\n  childToBounds: Map<T, Bounds | null>;\n  /** This is how deep the node is within the tree */\n  depth: number = 0;\n  /** This is the accessor method that retrieves the bounds for an injected instance */\n  getBounds: BoundsAccessor<T>;\n  /** These are the child nodes of this quad node when this node is split. It is null if the node is not split yet */\n  nodes: Quadrants<T> | null = null;\n  /**\n   * These are children with null bounds that do not affect the splitting and ALWAYS get checked every query.\n   * They should only reside on the top node.\n   */\n  nullBounded: T[];\n\n  /**\n   * Destroys this node and ensures all child nodes are destroyed as well.\n   */\n  destroy() {\n    delete this.children;\n    delete this.bounds;\n\n    if (this.nodes) {\n      this.nodes.destroy();\n      this.nodes = null;\n    }\n  }\n\n  /**\n   * Creates an instance of Node.\n   */\n  constructor(\n    left: number,\n    right: number,\n    top: number,\n    bottom: number,\n    getBounds: BoundsAccessor<T>,\n    depth: number = 0\n  ) {\n    // If params insertted\n    if (arguments.length >= 4) {\n      this.bounds = new Bounds({ left, right, top, bottom });\n    } else {\n      // Otherwise, make tiny start area\n      this.bounds = new Bounds({ left: 0, right: 1, top: 1, bottom: 0 });\n    }\n\n    // Ensure the depth is set\n    this.depth = depth;\n    // Apply the bounds accessor method for instances\n    this.getBounds = getBounds;\n\n    // If this is the top level node, we need to instantiate the lookup that will be used\n    // Across all nodes.\n    if (this.depth === 0) {\n      this.nullBounded = [];\n      this.childToNode = new Map<T, Node<T>>();\n      this.childToBounds = new Map<T, Bounds>();\n    }\n  }\n\n  /**\n   * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n   * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n   * this quad tree spans (and this is the root node), the quad tree will expand to include\n   * the new child.\n   *\n   * @param child The Bounds type object to inject\n   * @param props Properties that can be retrieved with the child object if applicable\n   *\n   * @returns True if the insertion was successful\n   */\n  add(child: T): boolean {\n    let bounds = this.childToBounds.get(child);\n\n    if (!bounds) {\n      // First we access the bounds of the child and store it\n      bounds = this.getBounds(child);\n      this.childToBounds.set(child, bounds);\n    }\n\n    // This is the entry function for adding children, so we must first expand our top node\n    // To cover the area that the child is located.\n    // If we're in bounds, then let's just add the child\n    if (!bounds || bounds.isInside(this.bounds)) {\n      return this.doAdd(child, bounds);\n    } else {\n      // Otherwise, we need to expand first\n      this.cover(bounds);\n      return this.add(child);\n    }\n  }\n\n  /**\n   * Adds a list of new children to this quad tree. It performs the same operations as\n   * addChild for each child in the list, however, it more efficiently recalculates the\n   * bounds necessary to cover the area the children cover.\n   *\n   * @param children      List of Bounds objects to inject\n   */\n  addAll(children: T[]) {\n    // Make sure we cover the entire area of all the children.\n    // We can speed this up a lot if we first calculate the total bounds the new children covers\n    let minX = Number.MAX_VALUE;\n    let minY = Number.MAX_VALUE;\n    let maxX = -Number.MAX_VALUE;\n    let maxY = -Number.MAX_VALUE;\n\n    // Get the dimensions of the new bounds\n    children.forEach(child => {\n      const bounds = this.getBounds(child);\n      this.childToBounds.set(child, bounds);\n      if (!bounds) return;\n\n      if (bounds.x < minX) {\n        minX = bounds.x;\n      }\n      if (bounds.right > maxX) {\n        maxX = bounds.right;\n      }\n      if (bounds.bottom > maxY) {\n        maxY = bounds.bottom;\n      }\n      if (bounds.y < minY) {\n        minY = bounds.y;\n      }\n    });\n\n    // Ensure a valid cover dimension was established. If no valid dimension is established\n    // Then we don't cover, but we can still add the children as that have null Bounds which\n    // Means injecting at the top level.\n    if (\n      minX !== Number.MAX_VALUE &&\n      minY !== Number.MAX_VALUE &&\n      maxX !== -Number.MAX_VALUE &&\n      maxY !== -Number.MAX_VALUE\n    ) {\n      // Make sure our bounds includes the specified bounds\n      this.cover(\n        new Bounds({ left: minX, right: maxX, bottom: maxY, top: minY })\n      );\n    }\n\n    // Add all of the children into the tree.\n    children.forEach(child =>\n      this.doAdd(child, this.childToBounds.get(child) || null, true)\n    );\n  }\n\n  /**\n   * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n   * This will cause all children to be re-injected into the tree.\n   *\n   * @param bounds The bounds to include in the tree's coverage\n   */\n  cover(bounds: Bounds) {\n    // If we are already covering the area: abort\n    if (bounds.isInside(this.bounds)) {\n      return;\n    }\n\n    // Make our bounds cover the new area\n    this.bounds.encapsulate(bounds);\n    this.bounds.x -= 1;\n    this.bounds.y -= 1;\n    this.bounds.width += 2;\n    this.bounds.height += 2;\n    // Get all of the children underneath this node\n    const allChildren = this.gatherChildren([]);\n    this.children = [];\n\n    // Destroy the split nodes\n    if (this.nodes) {\n      // Completely...destroy...\n      this.nodes.destroy();\n      this.nodes = null;\n    }\n\n    // Clear out the child to node relations\n    this.childToNode.clear();\n    // Reinsert all children with the new dimensions in place\n    allChildren.forEach(child =>\n      this.doAdd(child, this.childToBounds.get(child) || null)\n    );\n  }\n\n  /**\n   * When adding children, this performs the actual action of injecting the child into the tree\n   * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n   *\n   * @param child The Bounds item to inject into the tree\n   * @param props The props to remain associated with the child\n   *\n   * @returns True if the injection was successful\n   */\n  private doAdd(child: T, bounds: Bounds | null, fromSplit?: boolean): boolean {\n    // If this is the top level node and the bounds are null, then we add to the null list\n    if (!bounds && this.depth === 0) {\n      this.nullBounded.push(child);\n      this.childToNode.set(child, this);\n\n      return true;\n    }\n\n    // If no bounds is available at this point, something went terribly wrong\n    if (!bounds) {\n      console.warn(\n        \"A null bounds was added to a Quad Tree node below the top node, which is invalid.\"\n      );\n      return false;\n    }\n\n    // If bounds are null, then just immediately add\n    // If nodes are present, then we have already exceeded the population of this node\n    if (this.nodes) {\n      if (bounds.isInside(this.nodes.TL.bounds)) {\n        return this.nodes.TL.doAdd(child, bounds, fromSplit);\n      }\n\n      if (bounds.isInside(this.nodes.TR.bounds)) {\n        return this.nodes.TR.doAdd(child, bounds, fromSplit);\n      }\n\n      if (bounds.isInside(this.nodes.BL.bounds)) {\n        return this.nodes.BL.doAdd(child, bounds, fromSplit);\n      }\n\n      if (bounds.isInside(this.nodes.BR.bounds)) {\n        return this.nodes.BR.doAdd(child, bounds, fromSplit);\n      }\n\n      // Otherwise, this is a child overlapping this border\n      this.children.push(child);\n      this.childToNode.set(child, this);\n\n      return true;\n    } else if (bounds.isInside(this.bounds)) {\n      // Otherwise, we have not had a split due to population limits being exceeded\n      this.children.push(child);\n      this.childToNode.set(child, this);\n\n      // If we exceeded our population for this quadrant, it is time to split up\n      if (this.children.length > maxPopulation && this.depth < maxDepth) {\n        this.split();\n      }\n\n      return true;\n    }\n\n    // This is when there is something wrong with the insertted child. The bounds\n    // For the quad should have grown without issue, but in this case the bounds\n    // Could not grow to accomodate the child.\n    if (isNaN(bounds.width + bounds.height + bounds.x + bounds.y)) {\n      console.error(\n        \"Child did not fit into bounds because a dimension is NaN\",\n        child,\n        bounds\n      );\n    } else if (bounds.area === 0) {\n      console.error(\n        \"Child did not fit into bounds because the area is zero\",\n        child,\n        bounds\n      );\n    } else {\n      console.error(\n        \"Child did not get insertted.\",\n        \"Parent:\",\n        this.bounds.toString(),\n        \"Child:\",\n        bounds.toString(),\n        \"Inside Checks:\",\n        bounds.x >= this.bounds.x,\n        bounds.right <= this.bounds.right,\n        bounds.y >= this.bounds.y,\n        bounds.bottom <= this.bounds.bottom\n      );\n    }\n\n    // Don't insert the child and continue\n    return true;\n  }\n\n  private doRemove(child: T) {\n    const index = this.children.indexOf(child);\n\n    if (index > -1) {\n      this.children.splice(index, 1);\n      this.childToNode.delete(child);\n      this.childToBounds.delete(child);\n    }\n  }\n\n  /**\n   * Collects all children of all the current and sub nodes into a single list.\n   *\n   * @param list The list we must aggregate children into\n   *\n   * @return The list specified as the list parameter\n   */\n  gatherChildren(list: T[]): T[] {\n    this.children.forEach(child => list.push(child));\n\n    if (this.nodes) {\n      this.nodes.TL.gatherChildren(list);\n      this.nodes.TR.gatherChildren(list);\n      this.nodes.BL.gatherChildren(list);\n      this.nodes.BR.gatherChildren(list);\n    }\n\n    return list;\n  }\n\n  /**\n   * Entry query for determining query type based on input object\n   *\n   * @param bounds Can be a Bounds or a Point object\n   * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n   *               information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return An array of children that intersects with the query\n   */\n  query(bounds: Bounds | IPoint, visit?: IVisitFunction<T>): T[] {\n    // This stores all of the found Instances when querying by bounds or point\n    let found: T[] = [];\n\n    // If this is the top level node then add in the null bunded items as the start\n    if (this.depth === 0) {\n      found = this.nullBounded.slice(0);\n    }\n\n    // Query a rectangle\n    if (bounds instanceof Bounds) {\n      if (bounds.hitBounds(this.bounds)) {\n        return this.queryBounds(bounds, found, visit);\n      }\n    }\n\n    // Query a point\n    if (this.bounds.containsPoint(bounds)) {\n      return this.queryPoint(bounds, found, visit);\n    }\n\n    // Return an empty array when nothing is collided with\n    return found;\n  }\n\n  /**\n   * Queries children for intersection with a bounds object\n   *\n   * @param b     The Bounds to test children against\n   * @param list  The list of children to aggregate into the query\n   * @param visit A callback function that will receive the Node as it is analyzed. This gives\n   *              information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return     Returns the exact same list that was input as the list param\n   */\n  queryBounds(b: Bounds, list: T[], visit?: IVisitFunction<T>): T[] {\n    this.children.forEach(c => {\n      const bounds = this.childToBounds.get(c);\n\n      if (bounds && bounds.hitBounds(b)) {\n        list.push(c);\n      }\n    });\n\n    if (visit) {\n      visit(this);\n    }\n\n    if (this.nodes) {\n      if (b.hitBounds(this.nodes.TL.bounds)) {\n        this.nodes.TL.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.TR.bounds)) {\n        this.nodes.TR.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.BL.bounds)) {\n        this.nodes.BL.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.BR.bounds)) {\n        this.nodes.BR.queryBounds(b, list, visit);\n      }\n    }\n\n    return list;\n  }\n\n  /**\n   * Queries children for intersection with a point\n   *\n   * @param p     The Point to test children against\n   * @param list  The list of children to aggregate into the query\n   * @param visit A callback function that will receive the Node as it is analyzed. This gives\n   *              information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return      Returns the exact same list that was input as the list param\n   */\n  queryPoint(p: any, list: T[], visit?: IVisitFunction<T>): T[] {\n    this.children.forEach(c => {\n      const bounds = this.childToBounds.get(c);\n\n      if (bounds && bounds.containsPoint(p)) {\n        list.push(c);\n      }\n    });\n\n    if (visit) {\n      visit(this);\n    }\n\n    if (this.nodes) {\n      if (this.nodes.TL.bounds.containsPoint(p)) {\n        this.nodes.TL.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.TR.bounds.containsPoint(p)) {\n        this.nodes.TR.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.BL.bounds.containsPoint(p)) {\n        this.nodes.BL.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.BR.bounds.containsPoint(p)) {\n        this.nodes.BR.queryPoint(p, list, visit);\n      }\n    }\n\n    return list;\n  }\n\n  /**\n   * Remove the provided item from the tree.\n   */\n  remove(child: T) {\n    if (this.childToNode) {\n      const node = this.childToNode.get(child);\n\n      // If the node is getting removed from the top level node, then it MAY be a null bounded item\n      // Which gets removed from the list\n      if (node && node.depth === 0) {\n        const index = node.nullBounded.indexOf(child);\n\n        if (index > -1) {\n          node.nullBounded.splice(index);\n          this.childToNode.delete(child);\n          this.childToBounds.delete(child);\n\n          return;\n        }\n      }\n\n      // Otherwise, just remove the node normally\n      if (node) {\n        node.doRemove(child);\n      }\n    }\n  }\n\n  /**\n   * Creates four sub quadrants for this node.\n   */\n  split() {\n    // Gather all items to be handed down\n    const allChildren = this.gatherChildren([]);\n    // Gather all props for the children to be handed down as well\n    this.nodes = new Quadrants<T>(\n      this.bounds,\n      this.depth + 1,\n      this.getBounds,\n      this.childToNode,\n      this.childToBounds\n    );\n    // Empty out the children as they are being re-injected\n    this.children = [];\n\n    for (let i = 0, end = allChildren.length; i < end; ++i) {\n      const child = allChildren[i];\n      this.doAdd(child, this.childToBounds.get(child) || null, true);\n    }\n  }\n\n  /**\n   * Traverses the quad tree returning every quadrant encountered\n   *\n   * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n   */\n  visit(cb: IVisitFunction<T>): void {\n    const finished = Boolean(cb(this));\n\n    if (this.nodes && !finished) {\n      this.nodes.TL.visit(cb);\n      this.nodes.TR.visit(cb);\n      this.nodes.BL.visit(cb);\n      this.nodes.BR.visit(cb);\n    }\n  }\n}\n\nexport class TrackedQuadTree<T extends Instance> extends Node<T> {}\n","import { ChartCamera } from \"./chart-camera\";\n\nexport interface IReferenceCameraOptions {\n  /** This is the base camera to monitor */\n  base: ChartCamera;\n  /**\n   * This is a filter applied to the offset that comes from the chart camera.\n   */\n  offsetFilter?(offset: [number, number, number]): [number, number, number];\n  /**\n   * This is a filter applied to the scale that comes from the chart camera.\n   */\n  scaleFilter?(scale: [number, number, number]): [number, number, number];\n}\n\n/**\n * This is a camera that is based on another camera. This can apply filters\n * to the information provided from the base camera.\n *\n * Useful for situations such as a chart having a chart area and a list on the\n * left. This can use the same camera the chart area uses, but filter the response\n * to only track the y offset of the base camera.\n *\n * That would allow easy tracking of the left list to track with elements in the\n * chart and only manipulate a single camera instead of managing many cameras and\n * tie them together with lots of events.\n */\nexport class ReferenceCamera extends ChartCamera {\n  private base: ChartCamera;\n  private offsetFilter = (offset: [number, number, number]) => offset;\n  private scaleFilter = (scale: [number, number, number]) => scale;\n\n  set offset(_val: any) {\n    /** no-op */\n  }\n\n  get offset() {\n    return this.offsetFilter(this.base.offset);\n  }\n\n  set scale(_val: any) {\n    /** no-op */\n  }\n\n  get scale() {\n    return this.scaleFilter(this.base.scale);\n  }\n\n  constructor(options: IReferenceCameraOptions) {\n    super();\n    Object.assign(this, options);\n  }\n}\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * Active `debug` instances.\n */\nexports.instances = [];\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  var prevTime;\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n  debug.destroy = destroy;\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  exports.instances.push(debug);\n\n  return debug;\n}\n\nfunction destroy () {\n  var index = exports.instances.indexOf(this);\n  if (index !== -1) {\n    exports.instances.splice(index, 1);\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var i;\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n\n  for (i = 0; i < exports.instances.length; i++) {\n    var instance = exports.instances[i];\n    instance.enabled = exports.enabled(instance.namespace);\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  if (name[name.length - 1] === '*') {\n    return true;\n  }\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__135__;","import { Instance } from \"../../instance-provider/instance\";\nimport { IShaderExtension, IShaderInitialization } from \"../../types\";\nimport {\n  IShaderTemplateRequirements,\n  shaderTemplate\n} from \"../../util/shader-templating\";\nimport { templateVars } from \"../template-vars\";\n\nexport function extendShader<T extends Instance>(\n  shaderIO: IShaderInitialization<T>,\n  vs?: IShaderExtension,\n  fs?: IShaderExtension\n) {\n  const baseVS = shaderIO.vs;\n  const baseFS = shaderIO.fs;\n\n  let extendedVS = { shader: baseVS };\n  let extendedFS = { shader: baseFS };\n\n  // Set the replacements for the extension locations, but also retain the extension modifier to allow for\n  // Further extensions if desired.\n  if (vs) {\n    const options: { [key: string]: string } = {};\n\n    options[templateVars.extendHeader] = vs.header\n      ? `${vs.header}\\n$\\{${templateVars.extendHeader}}`\n      : \"\";\n    options[templateVars.extend] = vs.body\n      ? `${vs.body}\\n$\\{${templateVars.extend}}`\n      : \"\";\n\n    // It is REQUIRED to have both header and body extensions to be a valid extendible shader\n    const required: IShaderTemplateRequirements = {\n      name: \"Extend VS Shader\",\n      values: [templateVars.extendHeader, templateVars.extend]\n    };\n\n    // Generated the extended shader\n    extendedVS = shaderTemplate({\n      options,\n      required,\n      shader: baseVS,\n\n      // We do not want to remove any template macros that do not deal with extension\n      onToken: (token, replace) => {\n        if (\n          token === templateVars.extendHeader ||\n          token === templateVars.extend\n        ) {\n          return replace;\n        }\n\n        return `$\\{${token}}`;\n      }\n    });\n  }\n\n  // Next, extend the fragment shader\n\n  // Set the replacements for the extension locations, but also retain the extension modifier to allow for\n  // Further extensions if desired.\n  if (fs) {\n    const options: { [key: string]: string } = {};\n\n    options[templateVars.extendHeader] = fs.header\n      ? `${fs.header}\\n$\\{${templateVars.extendHeader}}`\n      : \"\";\n    options[templateVars.extend] = fs.body\n      ? `${fs.body}\\n$\\{${templateVars.extend}}`\n      : \"\";\n\n    // It is REQUIRED to have both header and body extensions to be a valid extendible shader\n    const required = {\n      name: \"Extend FS Shader\",\n      values: [templateVars.extendHeader, templateVars.extend]\n    };\n\n    // Generate the extended shader\n    extendedFS = shaderTemplate({\n      options,\n      required,\n      shader: baseFS,\n\n      // We do not want to remove any template macros that do not deal with extension\n      onToken: (token, replace) => {\n        if (\n          token === templateVars.extendHeader ||\n          token === templateVars.extend\n        ) {\n          return replace;\n        }\n\n        return `$\\{${token}}`;\n      }\n    });\n  }\n\n  // Apply the extension to the shader io program\n  return {\n    fs: extendedFS.shader,\n    vs: extendedVS.shader\n  };\n}\n","import { Instance } from \"../instance-provider/instance\";\nimport { extendShader } from \"../shaders/util/extend-shader\";\nimport { IShaderInitialization, IShaderIOExtension } from \"../types\";\n\nexport function extendShaderInitialization<T extends Instance>(\n  shaderIO: IShaderInitialization<T>,\n  extend: IShaderIOExtension<T>\n): IShaderInitialization<T> {\n  const extendedShaders = extendShader(shaderIO, extend.vs, extend.fs);\n\n  return {\n    fs: extendedShaders.fs,\n    instanceAttributes: (shaderIO.instanceAttributes || []).concat(\n      extend.instanceAttributes || []\n    ),\n    uniforms: (shaderIO.uniforms || []).concat(extend.uniforms || []),\n    vertexAttributes: (shaderIO.vertexAttributes || []).concat(\n      extend.vertexAttributes || []\n    ),\n    vertexCount: shaderIO.vertexCount,\n    vs: extendedShaders.vs\n  };\n}\n","import { LayerSurface } from \"../surface\";\nimport { IAutoEasingMethod } from \"./auto-easing-method\";\nimport { Vec } from \"./vector\";\n\nexport type AnimationDelayAccessor = (\n  groupIndex: number,\n  currentDelay: number\n) => number;\nexport type AnimationInstanceModificationCallback = (\n  groupIndex: number\n) => void;\n\nfunction isNumber(val: any): val is number {\n  return !isNaN(val);\n}\n\n/**\n * This provides some methods that aids in more complicated animation tasks, such as\n * adjusting gpu animated properties with differing time delay values for each change.\n */\nexport class AnimationHelper {\n  surface: LayerSurface;\n\n  constructor(surface: LayerSurface) {\n    this.surface = surface;\n  }\n\n  /**\n   * When you want to animate properties of instances but you want them to start at differing times,\n   * use this method to ensure the timings starting between the elements is correct.\n   *\n   * @param easingMethod This is the easing method used for the layer's property to animate\n   * @param groupCount This is the number of animations desired for a given delay level\n   * @param delayGap This is the amount of delay between each group. This can be a static value or\n   *                 can be a dynamic callback\n   */\n  groupAnimation(\n    easingMethod: IAutoEasingMethod<Vec>,\n    groupCount: number,\n    baseDelay: number,\n    delayGap: number | AnimationDelayAccessor,\n    modifyInstances: AnimationInstanceModificationCallback\n  ) {\n    // Get the time of the current frame as our timing basis\n    const startFrameTime = this.surface.frameMetrics.currentTime;\n    // Do an initial commit to ensure all previous animated properties are committed based on the\n    // Delay specified for them\n    this.surface.commit(startFrameTime);\n\n    // Loop through the the number of grouped animations to work with\n    for (let i = 0; i < groupCount; ++i) {\n      // Determine how much extra delay is applied for the provided group\n      const gap = isNumber(delayGap)\n        ? delayGap\n        : delayGap(i, easingMethod.delay);\n      // Apply the delay\n      easingMethod.delay = baseDelay + gap * i;\n      // Make the instance modifications\n      modifyInstances(i);\n      // Commit the instance modifications based on the current delay settings\n      this.surface.commit(startFrameTime);\n    }\n  }\n}\n","import { Bounds } from \"../primitives/bounds\";\nimport { EventManager } from \"../surface/event-manager\";\nimport {\n  IDragMetrics,\n  IMouseInteraction,\n  IWheelMetrics\n} from \"../surface/mouse-event-manager\";\nimport { View } from \"../surface/view\";\nimport { add3, subtract3, Vec3 } from \"../util\";\nimport { ChartCamera } from \"../util/chart-camera\";\nexport enum CameraBoundsAnchor {\n  TOP_LEFT,\n  TOP_MIDDLE,\n  TOP_RIGHT,\n  MIDDLE_LEFT,\n  MIDDLE,\n  MIDDLE_RIGHT,\n  BOTTOM_LEFT,\n  BOTTOM_MIDDLE,\n  BOTTOM_RIGHT\n}\n\nconst { max, min } = Math;\n\n/**\n * This represents how the camera should be bounded in the world space. This gives enough information\n * to handle all cases of bounding, including screen padding and anchoring for cases where the viewed space\n * is smaller than the view.\n */\nexport interface ICameraBoundsOptions {\n  /** How the bounded world space should anchor itself within the view when the projected world space to the screen is smaller than the view */\n  anchor: CameraBoundsAnchor;\n  /** Minimum settings the camera can scale to */\n  scaleMin?: Vec3;\n  /** Maximum settings the camera can scale to */\n  scaleMax?: Vec3;\n  /** The actual screen pixels the bounds can exceed when the camera's view has reached the bounds of the world */\n  screenPadding: { left: number; right: number; top: number; bottom: number };\n  /** This is the view for which the bounds applies towards */\n  view: string;\n  /** The area the camera is bound inside */\n  worldBounds: Bounds;\n}\n\nexport interface IBasicCameraControllerOptions {\n  /** Takes in the options to be used for creating a new ViewBounds object on this controller. */\n  bounds?: ICameraBoundsOptions;\n  /** This is the camera this controller will manipulate */\n  camera: ChartCamera;\n  /** When this is set to true, the start view can be targetted even when behind other views */\n  ignoreCoverViews?: boolean;\n  /**\n   * This provides a control to filter panning that will be applied to the camera. The input and\n   * output of this will be the delta value to be applied.\n   */\n  panFilter?(\n    offset: [number, number, number],\n    view: View,\n    allViews: View[]\n  ): [number, number, number];\n  /**\n   * This adjusts how fast scaling is applied from the mouse wheel\n   */\n  scaleFactor?: number;\n  /**\n   * This provides a control to filter scaling that will be applied to the camera. The input and\n   * output of this will be the delta value to be applied.\n   */\n  scaleFilter?(\n    scale: [number, number, number],\n    view: View,\n    allViews: View[]\n  ): [number, number, number];\n  /**\n   * This is the view that MUST be the start view from the events.\n   * If not provided, then dragging anywhere will adjust the camera\n   */\n  startView?: string | string[];\n\n  /**\n   * This is a handler for when the camera has applied changes to the visible range of what is seen.\n   * Which most likely means offset or scale has been altered.\n   */\n  onRangeChanged?(camera: ChartCamera, targetView: View): void;\n}\n\n/**\n * This provides some very basic common needs for a camera control system. This is not a total solution\n * very every scenario. This should just often handle most basic needs.\n */\nexport class BasicCameraController extends EventManager {\n  /**\n   * If total bounds of worldbounds + screenpadding is smaller\n   * than width or height of view, anchor dictates placement.\n   */\n  bounds?: ICameraBoundsOptions;\n  /** This is the camera that this controller will manipulate */\n  camera: ChartCamera;\n  /** When this is set to true, the start view can be targetted even when behind other views */\n  ignoreCoverViews?: boolean;\n  /** Informative property indicating the controller is panning the chart or not */\n  isPanning: boolean = false;\n  /** This is the filter applied to panning operations */\n  private panFilter = (\n    offset: [number, number, number],\n    _view: View,\n    _allViews: View[]\n  ) => offset;\n  /** The rate scale is adjusted with the mouse wheel */\n  scaleFactor: number;\n  /** THis is the filter applied to tscaling operations */\n  private scaleFilter = (\n    scale: [number, number, number],\n    _view: View,\n    _allViews: View[]\n  ) => scale;\n  /** The view that must be the start or focus of the interactions in order for the interactions to occur */\n  startViews: string[] = [];\n\n  /**\n   * If an unconvered start view is not available, this is the next available covered view, if present\n   */\n  private coveredStartView: View;\n  /**\n   * Callback for when the range has changed for the camera in a view\n   */\n  private onRangeChanged = (_camera: ChartCamera, _targetView: View) => {\n    /* no-op */\n  };\n  /**\n   * This flag is set to true when a start view is targetted on mouse down even if it is not\n   * the top most view.\n   */\n  private startViewDidStart: boolean = false;\n\n  constructor(options: IBasicCameraControllerOptions) {\n    super();\n    if (options.bounds) {\n      this.setBounds(options.bounds);\n    }\n    this.camera = options.camera;\n    this.scaleFactor = options.scaleFactor || 1000.0;\n    this.ignoreCoverViews = options.ignoreCoverViews || false;\n\n    if (options.startView) {\n      this.startViews = Array.isArray(options.startView)\n        ? options.startView\n        : [options.startView];\n    }\n\n    this.panFilter = options.panFilter || this.panFilter;\n    this.scaleFilter = options.scaleFilter || this.scaleFilter;\n    this.onRangeChanged = options.onRangeChanged || this.onRangeChanged;\n  }\n\n  /**\n   * Corrects camera offset to respect current bounds and anchor.\n   */\n  applyBounds = () => {\n    if (this.bounds && this.camera) {\n      const targetView = this.getView(this.bounds.view);\n      this.applyScaleBounds();\n\n      // Next bound the positioning\n      if (targetView) {\n        this.camera.offset[0] = this.boundsHorizontalOffset(\n          targetView,\n          this.bounds\n        );\n        this.camera.offset[1] = this.boundsVerticalOffset(\n          targetView,\n          this.bounds\n        );\n      }\n    }\n  };\n\n  applyScaleBounds = () => {\n    if (this.camera && this.bounds) {\n      // First bound the scaling\n      if (this.bounds.scaleMin) {\n        this.camera.scale = [\n          max(this.camera.scale[0], this.bounds.scaleMin[0]),\n          max(this.camera.scale[1], this.bounds.scaleMin[1]),\n          max(this.camera.scale[2], this.bounds.scaleMin[2])\n        ];\n      }\n\n      if (this.bounds.scaleMax) {\n        this.camera.scale = [\n          min(this.camera.scale[0], this.bounds.scaleMax[0]),\n          min(this.camera.scale[1], this.bounds.scaleMax[1]),\n          min(this.camera.scale[2], this.bounds.scaleMax[2])\n        ];\n      }\n    }\n  };\n\n  /**\n   * Calculation for adhering to an anchor - x-axis offset only.\n   */\n  anchoredByBoundsHorizontal(targetView: View, bounds: ICameraBoundsOptions) {\n    switch (bounds.anchor) {\n      case CameraBoundsAnchor.TOP_LEFT:\n      case CameraBoundsAnchor.MIDDLE_LEFT:\n      case CameraBoundsAnchor.BOTTOM_LEFT:\n        return -(\n          bounds.worldBounds.left -\n          bounds.screenPadding.left / this.camera.scale[0]\n        );\n\n      case CameraBoundsAnchor.TOP_MIDDLE:\n      case CameraBoundsAnchor.MIDDLE:\n      case CameraBoundsAnchor.BOTTOM_MIDDLE:\n        return -(\n          bounds.worldBounds.right -\n          bounds.worldBounds.width / 2 -\n          0.5 *\n            ((targetView.screenBounds.width + bounds.screenPadding.right) /\n              this.camera.scale[0])\n        );\n\n      case CameraBoundsAnchor.TOP_RIGHT:\n      case CameraBoundsAnchor.MIDDLE_RIGHT:\n      case CameraBoundsAnchor.BOTTOM_RIGHT:\n        return -(\n          bounds.worldBounds.right -\n          (targetView.screenBounds.width - bounds.screenPadding.right) /\n            this.camera.scale[0]\n        );\n    }\n  }\n\n  /**\n   * Calculation for adhering to an anchor - y-axis offset only.\n   */\n  anchoredByBoundsVertical(targetView: View, bounds: ICameraBoundsOptions) {\n    switch (bounds.anchor) {\n      case CameraBoundsAnchor.TOP_LEFT:\n      case CameraBoundsAnchor.TOP_MIDDLE:\n      case CameraBoundsAnchor.TOP_RIGHT:\n        return (\n          -bounds.worldBounds.top - -bounds.screenPadding.top / this.scale[1]\n        );\n\n      case CameraBoundsAnchor.MIDDLE_LEFT:\n      case CameraBoundsAnchor.MIDDLE:\n      case CameraBoundsAnchor.MIDDLE_RIGHT:\n        return (\n          -(bounds.worldBounds.bottom - bounds.worldBounds.height / 2) +\n          0.5 *\n            (targetView.screenBounds.height - bounds.screenPadding.bottom) /\n            this.scale[1]\n        );\n\n      case CameraBoundsAnchor.BOTTOM_LEFT:\n      case CameraBoundsAnchor.BOTTOM_MIDDLE:\n      case CameraBoundsAnchor.BOTTOM_RIGHT:\n        return -(\n          bounds.worldBounds.bottom -\n          (targetView.screenBounds.height - bounds.screenPadding.bottom) /\n            this.scale[1]\n        );\n    }\n  }\n\n  /**\n   * Returns offset on x-axis due to current bounds and anchor.\n   */\n  boundsHorizontalOffset(targetView: View, bounds: ICameraBoundsOptions) {\n    const worldTLinScreenSpace = targetView.worldToScreen({\n      x: bounds.worldBounds.left,\n      y: bounds.worldBounds.top\n    });\n    const worldBRinScreenSpace = targetView.worldToScreen({\n      x: bounds.worldBounds.right,\n      y: bounds.worldBounds.bottom\n    });\n\n    const widthDifference =\n      worldBRinScreenSpace.x -\n      worldTLinScreenSpace.x +\n      bounds.screenPadding.left +\n      bounds.screenPadding.right -\n      targetView.screenBounds.width;\n\n    // If the worldBounds are smaller than the screenBounds,\n    // We offset according to the anchoring\n    if (widthDifference < 0) {\n      return this.anchoredByBoundsHorizontal(targetView, bounds);\n    }\n\n    if (\n      worldBRinScreenSpace.x <\n      targetView.screenBounds.right - bounds.screenPadding.right\n    ) {\n      return (\n        -bounds.worldBounds.right +\n        (targetView.screenBounds.width - bounds.screenPadding.right) /\n          this.camera.scale[0]\n      );\n    }\n\n    if (\n      worldTLinScreenSpace.x >\n      targetView.screenBounds.left + bounds.screenPadding.left\n    ) {\n      return (\n        -bounds.worldBounds.left +\n        bounds.screenPadding.left / this.camera.scale[0]\n      );\n    }\n\n    return this.camera.offset[0];\n  }\n\n  /**\n   * Returns offset on y-axis due to current bounds and anchor.\n   */\n  boundsVerticalOffset(targetView: View, bounds: ICameraBoundsOptions) {\n    const worldTLinScreenSpace = targetView.worldToScreen({\n      x: bounds.worldBounds.left,\n      y: bounds.worldBounds.top\n    });\n    const worldBRinScreenSpace = targetView.worldToScreen({\n      x: bounds.worldBounds.right,\n      y: bounds.worldBounds.bottom\n    });\n\n    const heightDifference =\n      worldBRinScreenSpace.y -\n      worldTLinScreenSpace.y +\n      bounds.screenPadding.top +\n      bounds.screenPadding.bottom -\n      targetView.screenBounds.height;\n\n    // If the viewBounds are larger than the screenBounds,\n    // We offset according to the anchoring\n    if (heightDifference < 0) {\n      return this.anchoredByBoundsVertical(targetView, bounds);\n    }\n\n    if (\n      worldTLinScreenSpace.y >\n      targetView.screenBounds.top - bounds.screenPadding.top\n    ) {\n      return -(\n        bounds.worldBounds.top -\n        bounds.screenPadding.top / this.camera.scale[1]\n      );\n    }\n\n    if (\n      worldBRinScreenSpace.y <\n      targetView.screenBounds.bottom + bounds.screenPadding.bottom\n    ) {\n      return -(\n        bounds.worldBounds.bottom +\n        (-targetView.screenBounds.height + bounds.screenPadding.bottom) /\n          this.camera.scale[1]\n      );\n    }\n\n    return this.camera.offset[1];\n  }\n\n  private canStart(viewId: string) {\n    return (\n      this.startViews.length === 0 ||\n      (this.startViews && this.startViews.indexOf(viewId) > -1) ||\n      (this.startViewDidStart && this.ignoreCoverViews)\n    );\n  }\n\n  private findCoveredStartView(e: IMouseInteraction) {\n    const found = e.viewsUnderMouse.find(\n      under => this.startViews.indexOf(under.view.id) > -1\n    );\n    this.startViewDidStart = Boolean(found);\n\n    if (found) {\n      this.coveredStartView = found.view;\n    }\n  }\n\n  private getTargetView(e: IMouseInteraction) {\n    // If we have a start view and we do not ignore covering views,\n    // Then our target view is the view we started with\n    if (this.startViews && !this.ignoreCoverViews) {\n      return e.target.view;\n    }\n\n    // Otherwise, we use the covered start view\n    else {\n      return this.coveredStartView;\n    }\n  }\n\n  /**\n   * Used to aid in handling the pan effect and determine the contextual view targetted.\n   */\n  handleMouseDown(e: IMouseInteraction, _button: number) {\n    if (this.startViews) {\n      // We look for valid covered views on mouse down so dragging will work\n      this.findCoveredStartView(e);\n      // If this is a valid start view, then we enter a panning state with the mouse down\n      if (e.start) {\n        this.isPanning = this.canStart(e.start.view.id) || this.isPanning;\n      }\n    }\n  }\n\n  /**\n   * Used to aid in handling the pan effect\n   */\n  handleMouseUp(_e: IMouseInteraction) {\n    this.startViewDidStart = false;\n    this.isPanning = false;\n  }\n\n  /**\n   * Applies a panning effect by adjusting the camera's offset.\n   */\n  handleDrag(e: IMouseInteraction, drag: IDragMetrics) {\n    if (e.start) {\n      if (this.canStart(e.start.view.id)) {\n        let pan: [number, number, number] = [\n          drag.screen.delta.x / this.camera.scale[0],\n          drag.screen.delta.y / this.camera.scale[1],\n          0\n        ];\n\n        if (this.panFilter) {\n          pan = this.panFilter(\n            pan,\n            e.start.view,\n            e.viewsUnderMouse.map(v => v.view)\n          );\n        }\n\n        this.camera.offset[0] += pan[0];\n        this.camera.offset[1] += pan[1];\n\n        // Add additional correction for bounds\n        this.applyBounds();\n        // Broadcast the change occurred\n        this.onRangeChanged(this.camera, e.start.view);\n        // Add additional correction for bounds\n        this.applyBounds();\n      }\n    }\n  }\n\n  /**\n   * Applies a scaling effect to the camera for mouse wheel events\n   */\n  handleWheel(e: IMouseInteraction, wheelMetrics: IWheelMetrics) {\n    // Every mouse wheel event must look to see if it's over a valid covered start view\n    this.findCoveredStartView(e);\n\n    if (this.canStart(e.target.view.id)) {\n      const targetView = this.getTargetView(e);\n      const beforeZoom = targetView.screenToWorld(e.screen.mouse);\n\n      const currentZoomX = this.camera.scale[0] || 1.0;\n      const currentZoomY = this.camera.scale[1] || 1.0;\n\n      let scale: [number, number, number] = [\n        wheelMetrics.wheel[1] / this.scaleFactor * currentZoomX,\n        wheelMetrics.wheel[1] / this.scaleFactor * currentZoomY,\n        1\n      ];\n\n      if (this.scaleFilter) {\n        scale = this.scaleFilter(\n          scale,\n          targetView,\n          e.viewsUnderMouse.map(v => v.view)\n        );\n      }\n\n      this.camera.scale[0] = currentZoomX + scale[0];\n      this.camera.scale[1] = currentZoomY + scale[1];\n\n      // Ensure the new scale values are within bounds before attempting to correct offsets\n      this.applyScaleBounds();\n\n      const afterZoom = targetView.screenToWorld(e.screen.mouse);\n      this.camera.offset[0] -= beforeZoom.x - afterZoom.x;\n      this.camera.offset[1] -= beforeZoom.y - afterZoom.y;\n\n      // Add additional correction for bounds\n      this.applyBounds();\n      // Broadcast the change occurred\n      this.onRangeChanged(this.camera, targetView);\n      // Add additional correction for bounds\n      this.applyBounds();\n    }\n  }\n\n  // These are the currently Unused responses for this controller\n  handleMouseOut(_e: IMouseInteraction) {\n    /*no-op*/\n  }\n  handleClick(_e: IMouseInteraction) {\n    /*no-op*/\n  }\n  handleMouseMove(_e: IMouseInteraction) {\n    /*no-op*/\n  }\n  handleMouseOver(_e: IMouseInteraction) {\n    /*no-op*/\n  }\n\n  /**\n   * Evaluates the world bounds the specified view is observing\n   *\n   * @param viewId The id of the view when the view was generated when the surface was made\n   */\n  getRange(viewId: string): Bounds {\n    /** Get the projections for the provided view */\n    const projection = this.getProjection(viewId);\n    /** Get the bounds on the screen for the indicated view */\n    const screenBounds = this.getViewScreenBounds(viewId);\n\n    // Make sure we have a valid projection and screen bounds to make the adjustment\n    if (projection && screenBounds) {\n      /** Get the current viewed world bounds of the view */\n      const topLeft = projection.screenToWorld(screenBounds);\n      const bottomRight = projection.screenToWorld({\n        x: screenBounds.right,\n        y: screenBounds.bottom\n      });\n\n      return new Bounds({\n        height: bottomRight.y - topLeft.y,\n        width: bottomRight.x - topLeft.x,\n        x: topLeft.x,\n        y: topLeft.y\n      });\n    }\n\n    return new Bounds({ x: 0, y: 0, width: 1, height: 1 });\n  }\n\n  /**\n   * Retrieves the current pan of the controlled camera\n   */\n  get pan(): Vec3 {\n    return this.camera.offset;\n  }\n\n  /**\n   * Sets bounds applicable to the supplied view.\n   * If no view is supplied, it uses the first in the startViews array\n   */\n  setBounds(bounds: ICameraBoundsOptions) {\n    this.bounds = bounds;\n    this.applyBounds();\n  }\n\n  /**\n   * Retrieves the current scale of the camera\n   */\n  get scale(): Vec3 {\n    return this.camera.scale;\n  }\n\n  /**\n   * This lets you set the visible range of a view based on the view's camera. This will probably not work\n   * as expected if the view indicated and this controller do not share the same camera.\n   *\n   * @param viewId The id of the view when the view was generated when the surface was made\n   */\n  setRange(newWorld: Bounds, viewId: string) {\n    /** Get the projections for the provided view */\n    const projection = this.getProjection(viewId);\n    /** Get the bounds on the screen for the indicated view */\n    const screenBounds = this.getViewScreenBounds(viewId);\n    /** Get the view the range is being applied towards */\n    const view = this.getView(viewId);\n\n    // Make sure we have a valid projection and screen bounds to make the adjustment\n    if (projection && screenBounds && view) {\n      const deltaScale = subtract3(\n        [\n          screenBounds.width / newWorld.width,\n          screenBounds.height / newWorld.height,\n          1\n        ],\n        this.camera.scale\n      );\n\n      this.camera.scale = add3(\n        this.camera.scale,\n        this.scaleFilter(deltaScale, view, [view])\n      );\n\n      const deltaPan = subtract3(\n        [-newWorld.x, -newWorld.y, 0],\n        this.camera.offset\n      );\n\n      this.camera.offset = add3(\n        this.camera.offset,\n        this.scaleFilter(deltaPan, view, [view])\n      );\n\n      // Bound the camera to the specified bounding range\n      this.applyBounds();\n      // Broadcast the change occurred\n      this.onRangeChanged(this.camera, view);\n      // Bound the camera to the specified bounding range\n      this.applyBounds();\n    }\n  }\n}\n","export * from \"./basic-camera-controller\";\n","export * from \"./base-event-managers\";\nexport * from \"./base-layers\";\nexport * from \"./instance-provider\";\nexport * from \"./primitives\";\nexport * from \"./surface\";\nexport * from \"./types\";\nexport * from \"./util\";\n","export * from \"./voidgl\";\n"],"sourceRoot":""}