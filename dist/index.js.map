{"version":3,"sources":["webpack://voidgl/webpack/universalModuleDefinition","webpack://voidgl/webpack/bootstrap","webpack://voidgl/external \"three\"","webpack://voidgl/./src/voidgl/types.ts","webpack://voidgl/./src/voidgl/primitives/bounds.ts","webpack://voidgl/external \"mobx\"","webpack://voidgl/./src/voidgl/base-layers/types.ts","webpack://voidgl/./src/voidgl/surface/layer.ts","webpack://voidgl/./src/voidgl/primitives/index.ts","webpack://voidgl/./src/voidgl/util/instance.ts","webpack://voidgl/./src/voidgl/util/index.ts","webpack://voidgl/./src/voidgl/surface/texture/index.ts","webpack://voidgl/./src/voidgl/util/identify-by-key.ts","webpack://voidgl/./src/voidgl/base-layers/edges/types.ts","webpack://voidgl/./src/voidgl/surface/texture/label-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/base-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/event-manager.ts","webpack://voidgl/./src/voidgl/surface/generate-layer-model.ts","webpack://voidgl/./src/voidgl/surface/view.ts","webpack://voidgl/./src/voidgl/surface/scene.ts","webpack://voidgl/./src/voidgl/util/view-camera.ts","webpack://voidgl/./src/voidgl/util/chart-camera.ts","webpack://voidgl/./src/voidgl/util/shader-templating.ts","webpack://voidgl/./src/voidgl/util/vector.ts","webpack://voidgl/./src/voidgl/surface/texture/label-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/image-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/color-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/color-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/sub-texture.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas.ts","webpack://voidgl/./node_modules/debug/src/browser.js","webpack://voidgl/./src/voidgl/util/mouse.ts","webpack://voidgl/./src/voidgl/surface/mouse-event-manager.ts","webpack://voidgl/./src/voidgl/surface/inject-shader-io.ts","webpack://voidgl/./src/voidgl/surface/generate-layer-material.ts","webpack://voidgl/./src/voidgl/surface/generate-layer-geometry.ts","webpack://voidgl/./src/voidgl/util/data-bounds.ts","webpack://voidgl/./src/voidgl/surface/generate-default-scene.ts","webpack://voidgl/./src/voidgl/util/make-instance-uniform-name.ts","webpack://voidgl/./src/voidgl/shaders/fragments/template-vars.ts","webpack://voidgl/./src/voidgl/util/webgl-stat.ts","webpack://voidgl/./src/voidgl/base-event-managers/basic-camera-controller.ts","webpack://voidgl/./src/voidgl/base-event-managers/index.ts","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.vs","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.fs","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.ts","webpack://voidgl/./src/voidgl/base-layers/rings/ring-instance.ts","webpack://voidgl/./src/voidgl/base-layers/rings/index.ts","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-instance.ts","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-layer.vs","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-layer.fs","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-layer.ts","webpack://voidgl/./src/voidgl/base-layers/rectangle/index.ts","webpack://voidgl/./src/voidgl/base-layers/labels/label-instance.ts","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.vs","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.fs","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.ts","webpack://voidgl/./src/voidgl/base-layers/labels/index.ts","webpack://voidgl/./src/voidgl/base-layers/images/image-instance.ts","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.vs","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.fs","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.ts","webpack://voidgl/./src/voidgl/base-layers/images/index.ts","webpack://voidgl/./src/voidgl/base-layers/edges/edge-instance.ts","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer.fs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-screen-curve.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-bezier2.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-bezier.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-line.vs","webpack://voidgl/./src/voidgl/base-layers/edges/edge-picking.ts","webpack://voidgl/./src/voidgl/base-layers/edges/edge-layer.ts","webpack://voidgl/./src/voidgl/base-layers/edges/index.ts","webpack://voidgl/./src/voidgl/base-layers/circles/circle-instance.ts","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.vs","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.fs","webpack://voidgl/./src/voidgl/primitives/point.ts","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.ts","webpack://voidgl/./src/voidgl/base-layers/circles/index.ts","webpack://voidgl/./src/voidgl/base-layers/index.ts","webpack://voidgl/./src/voidgl/shaders/base/no-op.vs","webpack://voidgl/./src/voidgl/shaders/base/no-op.fs","webpack://voidgl/./src/voidgl/surface/layer-interaction-handler.ts","webpack://voidgl/./src/voidgl/surface/instance-diff-manager.ts","webpack://voidgl/./src/voidgl/util/tracked-quad-tree.ts","webpack://voidgl/./src/voidgl/util/reference-camera.ts","webpack://voidgl/./src/voidgl/util/data-provider.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas-resource-manager.ts","webpack://voidgl/./src/voidgl/surface/texture/image-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas-manager.ts","webpack://voidgl/./src/voidgl/surface/texture/pack-node.ts","webpack://voidgl/./src/voidgl/surface/event-managers/layer-mouse-events.ts","webpack://voidgl/./src/voidgl/util/instance-uniform-manager.ts","webpack://voidgl/./src/voidgl/util/quad-tree.ts","webpack://voidgl/./node_modules/ms/index.js","webpack://voidgl/./node_modules/debug/src/debug.js","webpack://voidgl/./node_modules/process/browser.js","webpack://voidgl/external \"bowser\"","webpack://voidgl/./src/voidgl/primitives/absolute-position.ts","webpack://voidgl/./src/voidgl/shaders/fragments/projection-methods.vs","webpack://voidgl/./src/voidgl/shaders/fragments/shader-input.vs","webpack://voidgl/./src/voidgl/shaders/fragments/instance-destructuring-array.vs","webpack://voidgl/./src/voidgl/shaders/fragments/fragment-shader-composition.fs","webpack://voidgl/./src/voidgl/shaders/fragments/vertex-shader-composition.vs","webpack://voidgl/./src/voidgl/shaders/fragments/instance-retrieval-array.vs","webpack://voidgl/./src/voidgl/shaders/util/uniform-instance-block-array.ts","webpack://voidgl/./src/voidgl/shaders/util/attribute-generation.ts","webpack://voidgl/./src/voidgl/surface/layer-surface.ts","webpack://voidgl/./src/voidgl/surface/index.ts","webpack://voidgl/./src/voidgl/index.ts","webpack://voidgl/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__95__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","InstanceBlockIndex","InstanceAttributeSize","UniformSize","VertexAttributeSize","ShaderInjectionTarget","PickType","Bounds","options","this","x","y","width","height","left","top","bottom","right","emptyBounds","containsPoint","point","encapsulate","item","Math","abs","fits","bounds","hitBounds","isInside","toString","AnchorType","ScaleType","extendStatics","__extends","setPrototypeOf","__proto__","Array","b","__","constructor","create","Three","types_1","util_1","identify_by_key_1","instance_diff_manager_1","layer_interaction_handler_1","Layer","_super","props","_this","depth","instanceById","Map","instanceVertexCount","assign","defaultProps","_a","picking","NONE","ALL","pickingMethods","getInstancePickingMethods","hitTest","quadTree","TrackedQuadTree","boundsAccessor","type","diffManager","InstanceDiffManager","diffProcessor","getDiffProcessor","interactions","LayerInteractionHandler","destroy","didUpdateProps","draw","uniform","change","instance","uniforms","changeList","data","end","length","uniformManager","getUniforms","resolve","update","materialUniforms","forEach","materialUniform","Error","getModelType","drawMode","TrianglesDrawMode","modelType","Mesh","getMaterialOptions","initShader","fs","instanceAttributes","vertexAttributes","vertexCount","vs","makeInstanceAttribute","block","blockIndex","size","atlas","makeUniform","shaderInjection","qualifier","willUpdateInstances","changes","willUpdateProps","newProps","didUpdate","IdentifyByKey","__export","__decorate","decorators","target","key","desc","arguments","getOwnPropertyDescriptor","Reflect","decorate","mobx_1","Instance","_id","id","active","observable","EdgeScaleType","EdgeType","EdgeBroadphase","LabelAtlasResource","label","BaseAtlasResource","sampleScale","EventManager","getProjection","viewId","mouseManager","getView","getViewScreenBounds","view","screenBounds","setMouseManager","generateLayerModel","layer","geometry","material","modelInfo","model","Boolean","isMesh","absolute_position_1","bounds_1","view_camera_1","isOrthographic","val","ClearFlags","View","pixelRatio","devicePixelRatio","screenToPixelSpace","out","pixelSpaceToScreen","screenToView","viewBounds","viewToScreen","screenToWorld","world","camera","offset","scale","viewCamera","ViewCameraType","CUSTOM","console","warn","worldToScreen","screen","viewToWorld","worldToView","fitViewtoViewport","surfaceDimensions","CONTROLLED","baseCamera","getAbsolutePositionBounds","viewport","far","near","position","set","z","updateMatrix","updateMatrixWorld","updateProjectionMatrix","DEFAULT_VIEW_ID","sortByDepth","a","Scene","container","layers","sortIsDirty","viewById","frustumCulled","autoUpdate","addLayer","push","addView","removeLayer","index","indexOf","splice","sortLayers","sort","DEFAULT_SCENE_ID","ViewCamera","chartCameraUID","applyArray","source","apply","concat","ChartCamera","location","slice","shaderTemplate","shader","required","matched","noValueProvided","notFound","shaderOptions","shaderResults","replace","match","keys","option","results","resolvedShaderOptions","shaderProvidedOptions","unresolvedProvidedOptions","unresolvedShaderOptions","values","error","sqrt","add2","scale2","subtract2","dot2","add3","scale3","subtract3","dot3","add4","scale4","subtract4","dot4","multiply2","linear2","start","t","length2","multiply3","linear3","length3","multiply4","linear4","length4","canvas","__awaiter","thisArg","_arguments","P","generator","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","__generator","body","f","g","_","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","floor","max","min","LabelRasterizer","awaitContext","getContext","setTimeout","calculateLabelSize","resource","calculateTexture","calculateTrucatedText","sampleScaling","drawLabel","truncatedText","measureContents","minX","minY","maxX","maxY","rasterization","texture","createCroppedCanvas","maxWidth","text","firstTest","cursor","safety","substr","nextCursor","cropped","document","createElement","context","imageSmoothingEnabled","drawImage","fontSize","getLabelRasterizationFontSize","fillStyle","font","makeCSSFont","measureText","fillText","fontWeight","fontFamily","imageData","getImageData","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","k","render","renderSync","ImageAtlasResource","image","ColorRasterizer","limit","makeCSS","color","opacity","fillRect","ColorAtlasResource","SubTexture","aspectRatio","atlasReferenceID","atlasTexture","atlasTL","atlasTR","atlasBL","atlasBR","widthOnAtlas","heightOnAtlas","isValid","pixelWidth","pixelHeight","pack_node_1","sub_texture_1","AtlasSize","Atlas","validResources","textureSettings","packing","PackNode","updateTexture","invalidateResource","zero","setManager","manager","registerResource","undefined","removeResource","redoneCanvas","dispose","Texture","generateMipmaps","premultiplyAlpha","needsUpdate","process","load","storage","debug","env","DEBUG","log","Function","formatArgs","args","useColors","namespace","humanize","diff","lastC","save","namespaces","removeItem","navigator","userAgent","toLowerCase","documentElement","style","WebkitAppearance","firebug","exception","table","parseInt","RegExp","$1","chrome","local","localStorage","localstorage","colors","formatters","j","JSON","stringify","err","message","enable","normalizeWheel","browser","three_1","IE_ADJUSTMENT","OLD_IE_ADJUSTMENT","MAX_FIREFOX_WHEELDELTA","lowPassY","LOW_PASS_U0","LOW_PASS_U1","LOW_PASS_U2","LOW_PASS_U3","firefox","deltaX","wheel","deltaY","sign","unshift","Vector2","msie","version","wheelDeltaX","wheelDeltaY","wheelDelta","detail","msedge","multiplyScalar","eventElementPosition","relative","mouseX","mouseY","eventX","eventY","nativeEvent","event","pageX","pageY","clientX","clientY","scrollLeft","scrollTop","offsetParent","offsetLeft","offsetTop","mouse_1","quad_tree_1","MouseEventManager","views","controllers","handlesWheelEvents","_waitingForRender","getViewsUnderMouse","mouse","hitViews","query","resize","setViews","setControllers","addContextListeners","QuadTree","addAll","map","filter","element","startView","startPosition","onmousewheel","interaction","makeInteraction","makeWheel","controller","handleWheel","stopPropagation","preventDefault","onmouseleave","waitingForRender","handleMouseOut","onmousemove","handleMouseMove","onmousedown","downViews","canClick","clickStartTime","Date","now","currentPosition","handleMouseDown","button","delta","drag","makeDrag","handleDrag","onmouseup","onmouseover","handleMouseOver","handleMouseUp","handleClick","onselectstart","addTouchContextListeners","ontouchstart","ontouchend","ontouchmove","ontouchcancel","_i","previous","current","viewsUnderMouse","toVertexAttributeInternal","attribute","materialAttribute","toUniformInternal","sortByResourceAttributes","injectShaderIO","shaderIO","atlasInstanceAttributes","requestedAtlasInjections","FOUR","ONE","injection","FRAGMENT","injections","VERTEX","attributes","blocks","found","maxBlock","addedUniforms","instanceAttribute","ATLAS","getAtlasTexture","MATRIX4","projectionMatrix","elements","matrix","THREE","TWO","fillBlock","usedBlocks","addedInstanceAttributes","activeAttribute","_b","UNIFORM_SIZE_TO_MATERIAL_TYPE","MATRIX3","DEFAULT_UNIFORM_VALUE","toMaterialUniform","generateLayerMaterial","layerUniforms","instancingUniforms","materialParams","vertexShader","fragmentShader","generatedUniform","RawShaderMaterial","generateLayerGeometry","maxInstancesPerBuffer","vertexBuffers","attribute_1","Float32Array","buffer","formatError","endk","isArray","endj","instanceSize","endk_1","copyWithin","instancingBuffer","instanceStartIndex","BufferGeometry","attribute_3","BufferAttribute","addAttribute","DataBounds","chart_camera_1","scene_1","view_1","generateDefaultScene","viewSize","defaultCamera","OrthographicCamera","defaultChartCamera","defaultViewport","defaultView","defaultScene","scene","INSTANCE_UNIFORM_ATTRIBUTE_PREFIX","makeInstanceUniformNameArray","makeInstanceUniformNameTree","templateVars","attributeFragments","blocksPerInstance","instanceBlockCount","instanceDataBinaryTree","instanceDataRetrieval","instanceDestructuring","instanceFragments","instanceUniformDeclarations","projectionMethods","shaderInput","getProgramInfo","gl","program","attributeCount","uniformCount","activeUniforms","getProgramParameter","ACTIVE_UNIFORMS","activeAttributes","ACTIVE_ATTRIBUTES","enums","35664","35665","35666","35667","35668","35669","35670","35671","35672","35673","35674","35675","35676","35678","35680","5120","5121","5122","5123","5124","5125","5126","getActiveUniform","typeName","getActiveAttrib","WebGLStat","MAX_VERTEX_UNIFORMS","MAX_FRAGMENT_UNIFORMS","MAX_ATTRIBUTES","WEBGL_SUPPORTED","MAX_TEXTURE_SIZE","WebGLRenderingContext","getAContext","getParameter","MAX_VERTEX_UNIFORM_VECTORS","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_VERTEX_ATTRIBS","CameraBoundsAnchor","event_manager_1","BasicCameraController","isPanning","panFilter","allViews","scaleFilter","startViewDidStart","onRangeChanged","targetView","setBounds","scaleFactor","ignoreCoverViews","startViews","applyBounds","targetView_1","canStart","findCoveredStartView","find","under","coveredStartView","getTargetView","pan","wheelMetrics","beforeZoom","currentZoomX","currentZoomY","afterZoom","boundsHorizontalOffset","boundsVerticalOffset","worldTLinScreenSpace","worldBounds","worldBRinScreenSpace","screenPadding","anchoredByBoundsHorizontal","anchoredByBoundsVertical","anchor","TOP_LEFT","MIDDLE_LEFT","BOTTOM_LEFT","TOP_MIDDLE","MIDDLE","BOTTOM_MIDDLE","TOP_RIGHT","MIDDLE_RIGHT","BOTTOM_RIGHT","getRange","projection","topLeft","bottomRight","setRange","newWorld","deltaScale","deltaPan","primitives_1","layer_1","RingLayer","ring","radius","thickness","defaults","Points","blending","CustomBlending","blendSrc","OneFactor","premultipliedAlpha","transparent","RingInstance","computed","instance_1","anchorCalculator","TopLeft","rectangle","padding","TopMiddle","TopRight","MiddleLeft","Middle","MiddleRight","BottomLeft","BottomMiddle","BottomRight","Custom","RectangleInstance","scaling","BOUND_MAX","_anchor","setAnchor","newAnchor","types_2","RectangleLayer","maxScale","minScale","ALWAYS","NEVER","screenPoint","vertexToNormal","0","1","2","3","4","5","vertexToSide","u","vertex","TriangleStripDrawMode","texture_1","rasterizationLookUp","LabelInstance","_cssFont","_fontFamily","_fontSize","_fontStyle","_fontWeight","_maxWidth","_text","_width","_height","_isDestroyed","fontStyle","cssFontLookup","rasterizations","references","_rasterization","LabelLayer","request","ImageInstance","tint","_sourceWidth","_sourceHeight","_element","_path","ImageRasterizer","ImageLayer","EdgeInstance","colorStart","colorEnd","control","widthStart","widthEnd","setEdgeWidth","setColor","vector_1","pow","interpolation","LINE","p1","p2","c1","c2","BEZIER","BEZIER2","t1","toPointObject","toPointArray","TEST_RESOLUTION","edgePicking","broadphase","minPickDistance","scaleType","interpolate","edge","edgeWidthStart","edgeWidthEnd","PASS_X","PASS_Y","SCREEN_CURVE","control1","control2","closestIndex","closestDistance","MAX_VALUE","secondClosestIndex","secondClosestDistance","startPoint","endPoint","linePoint","distance","lineWidth","startSegment","endSegment","vector","lineDirection","lineNormal","distanceTo","edge_picking_1","pickVS","baseVS","screenVS","edgeFS","EdgeLayer","_c","MAX_SEGMENTS","_d","vertexInterpolation","_e","CircleInstance","squareDistance","dx","dy","Point","add","getClosest","testPoint","points","closestPoint","getClosestIndex","subtract","amount","from","normalize","magnitude","getDistance","squared","getMidpoint","direction","make","CircleLayer","circle","circleScreenCenter","mouseScreen","isMouseOver","isMouseDown","onMouseDown","world_1","hitTest_1","query_1","bind","instances","querySpace","check","clear","onMouseOut","world_2","query_2","hitTest_2","onMouseUp","world_3","hitTest_3","query_3","onMouseOver","onMouseMove","info","world_4","hitTest_4","query_4","notOverInstances","isCurrentlyOver_1","noLongerOver","handleMouseClick","onMouseClick","world_5","hitTest_5","query_5","handleMouseDrag","VECTOR_ACCESSORS","quadPicking","changeInstanceQuad","addInstanceQuad","removeInstanceQuad","changeInstance","addInstance","removeInstance","uniformCluster","updateInstance","remove","uniformRangeStart","uniformRange","instanceData","instanceUniform","setTargetAtlas","Quadrants","getBounds","childToNode","childToBounds","mid","TL","Node","TR","BL","BR","children","nodes","nullBounded","child","doAdd","cover","allChildren","gatherChildren","fromSplit","split","isNaN","area","doRemove","delete","list","visit","queryBounds","queryPoint","node","cb","finished","ReferenceCamera","offsetFilter","base","DiffType","UPDATE_FLAG","DataProvider","instanceDisposers","instanceChanges","isChanged","_changeList","monitorItem","CHANGE","_instances","observe","listDisposer","intercept","monitorList","changes_1","changeType","disposer","lookUp","disposers","removedCount","REMOVE","added","INSERT","label_atlas_resource_1","toInstanceIOValue","AtlasResourceManager","targetAtlas","requestQueue","requestLookup","atlasManager","dequeueRequests","didDequeue","_loop_1","this_1","resources","requests","atlasRequests_1","updateAtlas","request_1","entries","atlasRequests","existingRequests","calculateImageSize","atlas_1","color_atlas_resource_1","color_rasterizer_1","image_atlas_resource_1","label_rasterizer_1","ZERO_IMAGE","AtlasManager","allAtlas","createAtlas","destroyAtlas","atlasName","setDefaultImage","loadedImage","rect","dimensions","insertedNode","ux","uy","uw","uh","onePixelX","atlasDimensions","top_1","loadImage","first","second","insert","nodeImage","nodeDimensions","imageSrc","subTexture","image_1","onload","onerror","path","toDataURL","Image","src","resources_1","isLeaf","child0","child1","hasChild","newNode","fitFlag","imgWidth","imgHeight","dWidth","dHeight","removed","LayerMouseEvents","sceneViews","isOver","getSceneViewsUnderMouse","sceneViewByViewId","sceneView","viewItem","getMouseByViewId","viewMouseByViewId","handleInteraction","callback","sceneViews_1","handleSceneView","flag","allSceneViews","currentSceneViews","generate_layer_model_1","make_instance_uniform_name_1","InstanceUniformManager","buffers","availableClusters","instanceToCluster","clusterToBuffer","maxUniformBlock","uniformBlocksPerInstance","makeNewBuffer","cluster","shift","removeFromScene","setScene","newGeometry","drawRange","count","newMaterial","clone","newModel","activeInstances","clusters","firstInstance","lastInstance","uniformIndex","uniformName","Vector4","instanceIndex","filterQuery","queryValues","filtered","obj","childrenProps","h","plural","ms","ceil","str","String","exec","parseFloat","parse","long","round","fmtShort","createDebug","prevTime","enabled","self","curr","prev","coerce","format","formatter","hash","charCodeAt","selectColor","init","stack","disable","names","skips","len","test","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","array","noop","nextTick","title","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","data_bounds_1","ref","scaleRatio","num","reference","shader_templating_1","template_vars_1","instanceRetrievalArrayFragment","VECTOR_COMPONENTS","sizeToType","9","16","99","makeUniformArrayDeclaration","totalBlocks","fragment","fill","makeInstanceRetrievalArray","templateOptions","makeInstanceDestructuringArray","join","webgl_stat_1","uniform_instance_block_array_1","vertexShaderComposition","fragmentShaderComposition","instanceDestructuringArray","MAX_USE_PER_BLOCK","generateUniforms","injectionType","injectFragments","shaders","shaderInputMetrics","instancingInfo","instanceUniformBlockCount","calculateUniformBlockUseage","sortedInstanceAttributes","currentBlock","trueBlockIndex","blockUseage","innerBlockUseage","attributeSize","oldUseage","newUseage","innerUseage","branchesPerLevel","uniformMetrics","blockQualifierDedup","qualifiers","blockQualifiers","qualifierList","allQualifiers","declaration","makeInstanceUniformDeclaration","makeUniformInstanceDataOptions","metrics","generateInstanceDataLookupOptions","additionalOptions","generateVertexAttributes","generateShaderInputs","makeInstanceDestructuring","makeInstanceAttributeReferences","generateVertexShader","vertexShaderResults","generateFragmentShader","attribute_generation_1","generate_default_scene_1","generate_layer_geometry_1","generate_layer_material_1","inject_shader_io_1","mouse_event_manager_1","instance_uniform_manager_1","layer_mouse_events_1","atlas_resource_manager_1","DEFAULT_BACKGROUND_COLOR","Color","isCanvas","createLayer","layerClass","LayerSurface","scenes","willDisposeLayer","isBufferingAtlas","initLayer","didBuffer","drawSceneView","resourceManager","rendererSize","renderer","getSize","getPixelRatio","background","SCISSOR_TEST","scissor","clearColor","clearFlags","COLOR","COLOR_BUFFER_BIT","DEPTH","DEPTH_BUFFER_BIT","STENCIL","STENCIL_BUFFER_BIT","box","currentViewport","setViewport","getViewSize","getViewWorldBounds","setContext","initGL","initMouseManager","initResources","WebGLRenderer","alpha","antialias","preserveDrawingBuffer","autoClear","setFaceCulling","CullFaceNone","setSize","setPixelRatio","setClearColor","defaultSceneElements","sceneViewDepth","sceneOptions","newScene","viewOptions","newView","addLayerToScene","shaderMetrics","eventManagers","atlasResources","layerInitializers","existingLayer","layerId","fitContainer","parentElement","className","setAttribute","containerBox","getBoundingClientRect","isString","getElementById"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"three\"), require(\"mobx\"), require(\"bowser\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"three\", \"mobx\", \"bowser\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"voidgl\"] = factory(require(\"three\"), require(\"mobx\"), require(\"bowser\"));\n\telse\n\t\troot[\"voidgl\"] = factory(root[\"three\"], root[\"mobx\"], root[\"bowser\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__3__, __WEBPACK_EXTERNAL_MODULE__95__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 108);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar InstanceBlockIndex;\n(function (InstanceBlockIndex) {\n    InstanceBlockIndex[InstanceBlockIndex[\"ONE\"] = 1] = \"ONE\";\n    InstanceBlockIndex[InstanceBlockIndex[\"TWO\"] = 2] = \"TWO\";\n    InstanceBlockIndex[InstanceBlockIndex[\"THREE\"] = 3] = \"THREE\";\n    InstanceBlockIndex[InstanceBlockIndex[\"FOUR\"] = 4] = \"FOUR\";\n})(InstanceBlockIndex = exports.InstanceBlockIndex || (exports.InstanceBlockIndex = {}));\nvar InstanceAttributeSize;\n(function (InstanceAttributeSize) {\n    InstanceAttributeSize[InstanceAttributeSize[\"ONE\"] = 1] = \"ONE\";\n    InstanceAttributeSize[InstanceAttributeSize[\"TWO\"] = 2] = \"TWO\";\n    InstanceAttributeSize[InstanceAttributeSize[\"THREE\"] = 3] = \"THREE\";\n    InstanceAttributeSize[InstanceAttributeSize[\"FOUR\"] = 4] = \"FOUR\";\n    /** Special case for making instance attributes that can target Atlas resources */\n    InstanceAttributeSize[InstanceAttributeSize[\"ATLAS\"] = 99] = \"ATLAS\";\n})(InstanceAttributeSize = exports.InstanceAttributeSize || (exports.InstanceAttributeSize = {}));\nvar UniformSize;\n(function (UniformSize) {\n    UniformSize[UniformSize[\"ONE\"] = 1] = \"ONE\";\n    UniformSize[UniformSize[\"TWO\"] = 2] = \"TWO\";\n    UniformSize[UniformSize[\"THREE\"] = 3] = \"THREE\";\n    UniformSize[UniformSize[\"FOUR\"] = 4] = \"FOUR\";\n    UniformSize[UniformSize[\"MATRIX3\"] = 9] = \"MATRIX3\";\n    UniformSize[UniformSize[\"MATRIX4\"] = 16] = \"MATRIX4\";\n    UniformSize[UniformSize[\"ATLAS\"] = 99] = \"ATLAS\";\n})(UniformSize = exports.UniformSize || (exports.UniformSize = {}));\nvar VertexAttributeSize;\n(function (VertexAttributeSize) {\n    VertexAttributeSize[VertexAttributeSize[\"ONE\"] = 1] = \"ONE\";\n    VertexAttributeSize[VertexAttributeSize[\"TWO\"] = 2] = \"TWO\";\n    VertexAttributeSize[VertexAttributeSize[\"THREE\"] = 3] = \"THREE\";\n    VertexAttributeSize[VertexAttributeSize[\"FOUR\"] = 4] = \"FOUR\";\n})(VertexAttributeSize = exports.VertexAttributeSize || (exports.VertexAttributeSize = {}));\n/** These are flags for indicating which shaders receive certain injection elements */\nvar ShaderInjectionTarget;\n(function (ShaderInjectionTarget) {\n    /** ONLY the vertex shader will receive the injection */\n    ShaderInjectionTarget[ShaderInjectionTarget[\"VERTEX\"] = 0] = \"VERTEX\";\n    /** ONLY the fragment shader will receive the injection */\n    ShaderInjectionTarget[ShaderInjectionTarget[\"FRAGMENT\"] = 1] = \"FRAGMENT\";\n    /** Both the fragment and vertex shader will receive the injection */\n    ShaderInjectionTarget[ShaderInjectionTarget[\"ALL\"] = 2] = \"ALL\";\n})(ShaderInjectionTarget = exports.ShaderInjectionTarget || (exports.ShaderInjectionTarget = {}));\n/**\n * This is the type of picking assigned to a layer. Each mode has performance and functionality\n * tradeoffs.\n */\nvar PickType;\n(function (PickType) {\n    /** Disable any picking methodology */\n    PickType[PickType[\"NONE\"] = 0] = \"NONE\";\n    /** Pick all instances found underneath the mouse. The Layer must explicitly support this feature. */\n    PickType[PickType[\"ALL\"] = 1] = \"ALL\";\n    /**\n     * NOTE: NOT IMPLEMENTED YET\n     *\n     * Uses highly efficient color rendering method to detect an instance on a pixel by pixel check. Since it is\n     * based on rendering, it will only select the 'visually' top most rendered instance. This means instances can be occluded\n     * by other instances is an instance renders behind another.\n     *\n     * This is vastly more efficient and accurate than ALL. This also will be more readily supported than ALL.\n     */\n    PickType[PickType[\"SINGLE\"] = 2] = \"SINGLE\";\n})(PickType = exports.PickType || (exports.PickType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Class to manage the x, y, width, and height of an object\n *\n * @template T This specifies the data type associated with this shape and is accessible\n *             via the property 'd'\n */\nvar Bounds = /** @class */ (function () {\n    /**\n     * Create a new instance\n     *\n     * @param left  The left side (x coordinate) of the instance\n     * @param right The right side of the instance\n     * @param top The top (y coordinate) of the instance\n     * @param bottom The bottom of the instance\n     */\n    function Bounds(options) {\n        this.x = 0;\n        this.y = 0;\n        this.width = 0;\n        this.height = 0;\n        this.x = options.x || options.left || 0;\n        this.y = options.y || options.top || 0;\n        this.height = options.height || (options.bottom - this.y) || 0;\n        this.width = options.width || (options.right - this.x) || 0;\n    }\n    Object.defineProperty(Bounds.prototype, \"area\", {\n        get: function () {\n            return this.width * this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"bottom\", {\n        get: function () {\n            return this.y + this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"left\", {\n        get: function () {\n            return this.x;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"mid\", {\n        get: function () {\n            return {\n                x: this.x + this.width / 2.0,\n                y: this.y + this.height / 2.0,\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"right\", {\n        get: function () {\n            return this.x + this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"top\", {\n        get: function () {\n            return this.y;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Bounds.emptyBounds = function () {\n        return new Bounds({\n            height: 0,\n            width: 0,\n            x: 0,\n            y: 0,\n        });\n    };\n    /**\n     * Checks to see if a point is within this bounds object.\n     *\n     * @param point\n     */\n    Bounds.prototype.containsPoint = function (point) {\n        return !(point.x < this.x || point.y < this.y || point.x > this.right || point.y > this.bottom);\n    };\n    /**\n     * Grows this bounds object to cover the space of the provided bounds object\n     *\n     * @param item\n     */\n    Bounds.prototype.encapsulate = function (item) {\n        if (item instanceof Bounds) {\n            if (item.x < this.x) {\n                this.width += Math.abs(item.x - this.x);\n                this.x = item.x;\n            }\n            if (item.y < this.y) {\n                this.height += Math.abs(item.y - this.y);\n                this.y = item.y;\n            }\n            if (this.right < item.right) {\n                this.width += item.right - this.right;\n            }\n            if (this.bottom < item.bottom) {\n                this.height += item.bottom - this.bottom;\n            }\n            return true;\n        }\n        else {\n            if (item.x < this.x) {\n                this.width += this.x - item.x;\n                this.x = item.x;\n            }\n            if (item.x > this.right) {\n                this.width += item.x - this.x;\n            }\n            if (item.y < this.y) {\n                this.height += this.y - item.y;\n                this.y = item.y;\n            }\n            if (item.y > this.bottom) {\n                this.height += item.y - this.y;\n            }\n            return true;\n        }\n    };\n    /**\n     * Checks to see if the provided bounds object could fit within the dimensions of this bounds object\n     * This ignores position and just checks width and height.\n     *\n     * @param bounds\n     *\n     * @return {number} 0 if it doesn't fit. 1 if it fits perfectly. 2 if it just fits.\n     */\n    Bounds.prototype.fits = function (bounds) {\n        // If the same, the bounds fits exactly into this bounds\n        if (this.width === bounds.width && this.height === bounds.height) {\n            return 1;\n        }\n        // The bounds can fit within this, then it just fits\n        if (this.width >= bounds.width && this.height >= bounds.height) {\n            return 2;\n        }\n        // Otherwise, the bounds does not fit within this bounds\n        return 0;\n    };\n    /**\n     * Checks if a bounds object intersects another bounds object.\n     *\n     * @param bounds\n     */\n    Bounds.prototype.hitBounds = function (bounds) {\n        return !(this.right < bounds.x || this.x > bounds.right || this.bottom < bounds.y || this.y > bounds.height);\n    };\n    /**\n     * Sees if the provided bounds is completely within this bounds object. Unlike fits() this takes\n     * position into account.\n     *\n     * @param bounds\n     */\n    Bounds.prototype.isInside = function (bounds) {\n        return this.x >= bounds.x && this.right <= bounds.right && this.y >= bounds.y && this.bottom <= bounds.bottom;\n    };\n    /**\n     * Easy readout of this Bounds object.\n     */\n    Bounds.prototype.toString = function () {\n        return \"{x: \" + this.x + \" y:\" + this.y + \" w:\" + this.width + \" h:\" + this.height + \"}\";\n    };\n    return Bounds;\n}());\nexports.Bounds = Bounds;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AnchorType;\n(function (AnchorType) {\n    AnchorType[AnchorType[\"BottomLeft\"] = 0] = \"BottomLeft\";\n    AnchorType[AnchorType[\"BottomMiddle\"] = 1] = \"BottomMiddle\";\n    AnchorType[AnchorType[\"BottomRight\"] = 2] = \"BottomRight\";\n    AnchorType[AnchorType[\"Custom\"] = 3] = \"Custom\";\n    AnchorType[AnchorType[\"Middle\"] = 4] = \"Middle\";\n    AnchorType[AnchorType[\"MiddleLeft\"] = 5] = \"MiddleLeft\";\n    AnchorType[AnchorType[\"MiddleRight\"] = 6] = \"MiddleRight\";\n    AnchorType[AnchorType[\"TopLeft\"] = 7] = \"TopLeft\";\n    AnchorType[AnchorType[\"TopMiddle\"] = 8] = \"TopMiddle\";\n    AnchorType[AnchorType[\"TopRight\"] = 9] = \"TopRight\";\n})(AnchorType = exports.AnchorType || (exports.AnchorType = {}));\nvar ScaleType;\n(function (ScaleType) {\n    /** The size of the image will be tied to world space */\n    ScaleType[ScaleType[\"ALWAYS\"] = 1] = \"ALWAYS\";\n    /** The image will scale to it's font size then stop growing */\n    ScaleType[ScaleType[\"BOUND_MAX\"] = 2] = \"BOUND_MAX\";\n    /** The image will alwyas retain it's font size on screen */\n    ScaleType[ScaleType[\"NEVER\"] = 3] = \"NEVER\";\n})(ScaleType = exports.ScaleType || (exports.ScaleType = {}));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar types_1 = require(\"../types\");\nvar util_1 = require(\"../util\");\nvar identify_by_key_1 = require(\"../util/identify-by-key\");\nvar instance_diff_manager_1 = require(\"./instance-diff-manager\");\nvar layer_interaction_handler_1 = require(\"./layer-interaction-handler\");\n/**\n * A base class for generating drawable content\n */\nvar Layer = /** @class */ (function (_super) {\n    __extends(Layer, _super);\n    function Layer(props) {\n        var _this = \n        // We do not establish bounds in the layer. The surface manager will take care of that for us\n        // After associating the layer with the view it is a part of.\n        _super.call(this, props) || this;\n        /** This determines the drawing order of the layer within it's scene */\n        _this.depth = 0;\n        /** A lookup fo an instance by it's ID */\n        _this.instanceById = new Map();\n        /** Provides the number of vertices a single instance spans */\n        _this.instanceVertexCount = 0;\n        // Keep our props within the layer\n        _this.props = Object.assign({}, Layer.defaultProps || {}, props);\n        // Set up the pick type for the layer\n        var _a = _this.props.picking, picking = _a === void 0 ? types_1.PickType.NONE : _a;\n        // If ALL is specified we set up QUAD tree picking for our instances\n        if (picking === types_1.PickType.ALL) {\n            var pickingMethods = _this.getInstancePickingMethods();\n            _this.picking = {\n                hitTest: pickingMethods.hitTest,\n                quadTree: new util_1.TrackedQuadTree(0, 1, 0, 1, pickingMethods.boundsAccessor),\n                type: types_1.PickType.ALL,\n            };\n        }\n        _this.diffManager = new instance_diff_manager_1.InstanceDiffManager(_this);\n        _this.diffProcessor = _this.diffManager.getDiffProcessor();\n        _this.interactions = new layer_interaction_handler_1.LayerInteractionHandler(_this);\n        return _this;\n    }\n    /**\n     * Invalidate and free all resources assocated with this layer.\n     */\n    Layer.prototype.destroy = function () {\n        /** TODO: no-op for now */\n    };\n    Layer.prototype.didUpdateProps = function () {\n        /** LIFECYCLE */\n    };\n    /**\n     * This is where global uniforms should update their values. Executes every frame.\n     */\n    Layer.prototype.draw = function () {\n        var uniform;\n        var value;\n        // Consume the diffs for the instances to update each element\n        var changeList = this.props.data.changeList;\n        // Make some holder variables to prevent declaration within the loop\n        var change, instance, uniforms;\n        // Fast ref to the processor and manager\n        var diffProcessor = this.diffProcessor;\n        var diffManager = this.diffManager;\n        for (var i = 0, end = changeList.length; i < end; ++i) {\n            change = changeList[i];\n            instance = change[0];\n            uniforms = this.uniformManager.getUniforms(instance);\n            // The diff type is change[1] which we use to find the diff processing method to use\n            diffProcessor[change[1]](diffManager, instance, uniforms);\n        }\n        // Indicate the diffs are consumed\n        this.props.data.resolve();\n        // Loop through the uniforms that are across all instances\n        for (var i = 0, end = this.uniforms.length; i < end; ++i) {\n            uniform = this.uniforms[i];\n            value = uniform.update(uniform);\n            uniform.materialUniforms.forEach(function (materialUniform) { return materialUniform.value = value; });\n        }\n    };\n    /**\n     * This method is for layers to implement to specify how the bounds for an instance are retrieved or\n     * calculated and how the Instance interacts with a point. This is REQUIRED to support PickType.ALL on the layer.\n     */\n    Layer.prototype.getInstancePickingMethods = function () {\n        throw new Error('When picking is set to PickType.ALL, the layer MUST have this method implemented; otherwise, the layer is incompatible with this picking mode.');\n    };\n    /**\n     * The type of Three model as well as the preferred draw mode associated with it.\n     */\n    Layer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TrianglesDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    /**\n     * The options for a three material without uniforms.\n     */\n    Layer.prototype.getMaterialOptions = function () {\n        return {};\n    };\n    /**\n     * This sets up all of the data bindings that will transport data from the CPU\n     * to the Shader on the GPU.\n     *\n     * Instance Attributes: These are very frequently changing attributes\n     * Vertex Attributes: These are attributes that should be static on a vertex. Conisder it very costly to update.\n     *                    The only time making these modifieable is in the event of GL_POINTS.\n     * Uniforms: These set up the uniforms for the layer, thus having all normal implications of a uniform. Global\n     *           across the fragment and vertex shaders and can be modified with little consequence.\n     */\n    Layer.prototype.initShader = function () {\n        return {\n            fs: require('../shaders/base/no-op.fs'),\n            instanceAttributes: [],\n            uniforms: [],\n            vertexAttributes: [],\n            vertexCount: 0,\n            vs: require('../shaders/base/no-op.vs'),\n        };\n    };\n    /**\n     * Helper method for making an instance attribute. Depending on set up, this makes creating elements\n     * have better documentation when typing out the elements.\n     */\n    Layer.prototype.makeInstanceAttribute = function (block, blockIndex, name, size, update, atlas) {\n        return {\n            atlas: atlas,\n            block: block,\n            blockIndex: blockIndex,\n            name: name,\n            size: size,\n            update: update,\n        };\n    };\n    /**\n     * Helper method for making a uniform type. Depending on set up, this makes creating elements\n     * have better documentation when typing out the elements.\n     */\n    Layer.prototype.makeUniform = function (name, size, update, shaderInjection, qualifier) {\n        return {\n            name: name,\n            qualifier: qualifier,\n            shaderInjection: shaderInjection,\n            size: size,\n            update: update,\n        };\n    };\n    Layer.prototype.willUpdateInstances = function (changes) {\n        // HOOK: Simple hook so a class can review all of it's changed instances before\n        //       Getting applied to the Shader IO\n    };\n    Layer.prototype.willUpdateProps = function (newProps) {\n        /** LIFECYCLE */\n    };\n    Layer.prototype.didUpdate = function () {\n        this.props.data.resolve();\n    };\n    Layer.defaultProps = {};\n    return Layer;\n}(identify_by_key_1.IdentifyByKey));\nexports.Layer = Layer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./bounds\"));\n__export(require(\"./point\"));\n","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar Instance = /** @class */ (function () {\n    function Instance(options) {\n        this._id = options.id;\n        this.active = options.active;\n    }\n    Object.defineProperty(Instance.prototype, \"id\", {\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        mobx_1.observable\n    ], Instance.prototype, \"active\", void 0);\n    return Instance;\n}());\nexports.Instance = Instance;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./chart-camera\"));\n__export(require(\"./data-provider\"));\n__export(require(\"./instance\"));\n__export(require(\"./reference-camera\"));\n__export(require(\"./shader-templating\"));\n__export(require(\"./tracked-quad-tree\"));\n__export(require(\"./vector\"));\n__export(require(\"./view-camera\"));\n__export(require(\"./webgl-stat\"));\n__export(require(\"./mouse\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./atlas\"));\n__export(require(\"./atlas-manager\"));\n__export(require(\"./color-atlas-resource\"));\n__export(require(\"./color-rasterizer\"));\n__export(require(\"./image-atlas-resource\"));\n__export(require(\"./image-rasterizer\"));\n__export(require(\"./label-atlas-resource\"));\n__export(require(\"./label-rasterizer\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This is an object that specifically is generated with a 'key' option that can never\n * be modified on the object and is identified henceforth with the key applied as the\n * 'id' of the object.\n */\nvar IdentifyByKey = /** @class */ (function () {\n    function IdentifyByKey(options) {\n        this.key = options.key;\n    }\n    Object.defineProperty(IdentifyByKey.prototype, \"id\", {\n        /** READONLY id of the object. */\n        get: function () {\n            return this.key;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IdentifyByKey;\n}());\nexports.IdentifyByKey = IdentifyByKey;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EdgeScaleType;\n(function (EdgeScaleType) {\n    /** All dimensions are within world space */\n    EdgeScaleType[EdgeScaleType[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * The control points are a delta from the end points within screen space, and the line thickness is within\n     * screen space as well all measured in pixels. The scaleFactor scales both thickness and control delta values.\n     * The endpoints remain in world space\n     */\n    EdgeScaleType[EdgeScaleType[\"SCREEN_CURVE\"] = 1] = \"SCREEN_CURVE\";\n})(EdgeScaleType = exports.EdgeScaleType || (exports.EdgeScaleType = {}));\nvar EdgeType;\n(function (EdgeType) {\n    /** Makes a straight edge with no curve */\n    EdgeType[EdgeType[\"LINE\"] = 0] = \"LINE\";\n    /** Makes a single control point Bezier curve */\n    EdgeType[EdgeType[\"BEZIER\"] = 1] = \"BEZIER\";\n    /** Makes a two control point bezier curve */\n    EdgeType[EdgeType[\"BEZIER2\"] = 2] = \"BEZIER2\";\n})(EdgeType = exports.EdgeType || (exports.EdgeType = {}));\n/**\n * This is the broadphase control for edges to help handle quad tree adjustments for picking. If the edge scale type\n * is NONE, you don't need to utilize this. If you use screen space and have camera distortions along an axis, this\n * can help greatly.\n */\nvar EdgeBroadphase;\n(function (EdgeBroadphase) {\n    /** Use this if the broad phase detection should use both width and height of the edge's bounds */\n    EdgeBroadphase[EdgeBroadphase[\"ALL\"] = 0] = \"ALL\";\n    /** Use this to ensure a test against the edge is performed if the mouse aligns with it on the x-axis */\n    EdgeBroadphase[EdgeBroadphase[\"PASS_Y\"] = 1] = \"PASS_Y\";\n    /** Use this to ensure a test against the edge is performed if the mouse aligns with it on the y axis */\n    EdgeBroadphase[EdgeBroadphase[\"PASS_X\"] = 2] = \"PASS_X\";\n})(EdgeBroadphase = exports.EdgeBroadphase || (exports.EdgeBroadphase = {}));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_atlas_resource_1 = require(\"./base-atlas-resource\");\nvar LabelAtlasResource = /** @class */ (function (_super) {\n    __extends(LabelAtlasResource, _super);\n    function LabelAtlasResource(label) {\n        var _this = _super.call(this) || this;\n        _this.label = label;\n        return _this;\n    }\n    return LabelAtlasResource;\n}(base_atlas_resource_1.BaseAtlasResource));\nexports.LabelAtlasResource = LabelAtlasResource;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BaseAtlasResource = /** @class */ (function () {\n    function BaseAtlasResource() {\n        /**\n         * This sets the ratserization to be a larger value on the texture than is rendered within\n         * the world space. This allows for techniques to be applied in the shaders to incorporate super sampling\n         * or other processes which require higher levels of resolution.\n         *\n         * The default is 1 for a 1 to 1 sample scaling to world space rendering\n         */\n        this.sampleScale = 1;\n    }\n    return BaseAtlasResource;\n}());\nexports.BaseAtlasResource = BaseAtlasResource;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Classes can extend this and override the methods to respond to events.\n */\nvar EventManager = /** @class */ (function () {\n    function EventManager() {\n    }\n    /**\n     * This retrieves the projections for the view specified by the provided viewId.\n     */\n    EventManager.prototype.getProjection = function (viewId) {\n        return this.mouseManager.getView(viewId);\n    };\n    /**\n     * This retrieves the actual view for the view specified by the provided viewId.\n     */\n    EventManager.prototype.getView = function (viewId) {\n        return this.mouseManager.getView(viewId) || null;\n    };\n    /**\n     * This retrieves the screen bounds for the view specified by the provided viewId.\n     */\n    EventManager.prototype.getViewScreenBounds = function (viewId) {\n        var view = this.mouseManager.getView(viewId);\n        if (view) {\n            return view.screenBounds;\n        }\n        return null;\n    };\n    /**\n     * This is used internally which provides the parent MouseEventManager via the param mouseManager for this\n     * EventManager.\n     */\n    EventManager.prototype.setMouseManager = function (mouseManager) {\n        this.mouseManager = mouseManager;\n    };\n    return EventManager;\n}());\nexports.EventManager = EventManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isMesh(val) {\n    return Boolean(val.isMesh);\n}\nfunction generateLayerModel(layer, geometry, material) {\n    var modelInfo = layer.getModelType();\n    var model = new modelInfo.modelType(geometry, material);\n    if (isMesh(model)) {\n        model.drawMode = modelInfo.drawMode;\n    }\n    return model;\n}\nexports.generateLayerModel = generateLayerModel;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar absolute_position_1 = require(\"../primitives/absolute-position\");\nvar bounds_1 = require(\"../primitives/bounds\");\nvar identify_by_key_1 = require(\"../util/identify-by-key\");\nvar view_camera_1 = require(\"../util/view-camera\");\nvar ClearFlags;\n(function (ClearFlags) {\n    ClearFlags[ClearFlags[\"COLOR\"] = 1] = \"COLOR\";\n    ClearFlags[ClearFlags[\"DEPTH\"] = 2] = \"DEPTH\";\n    ClearFlags[ClearFlags[\"STENCIL\"] = 4] = \"STENCIL\";\n})(ClearFlags = exports.ClearFlags || (exports.ClearFlags = {}));\nfunction isOrthographic(val) {\n    return 'left' in val;\n}\n/**\n * This defines a view of a scene\n */\nvar View = /** @class */ (function (_super) {\n    __extends(View, _super);\n    function View(options) {\n        var _this = _super.call(this, options) || this;\n        /**\n         * This is the depth of the view. The higher the depth represents which layer is on top.\n         * Zero always represents the default view.\n         */\n        _this.depth = 0;\n        /** This is set to ensure the projections that happen properly translates the pixel ratio to normal Web coordinates */\n        _this.pixelRatio = window.devicePixelRatio;\n        Object.assign(_this, options);\n        return _this;\n    }\n    View.prototype.screenToPixelSpace = function (point, out) {\n        var p = out || { x: 0, y: 0 };\n        p.x = point.x * this.pixelRatio;\n        p.y = point.y * this.pixelRatio;\n        return p;\n    };\n    View.prototype.pixelSpaceToScreen = function (point, out) {\n        var p = out || { x: 0, y: 0 };\n        p.x = point.x / this.pixelRatio;\n        p.y = point.y / this.pixelRatio;\n        return p;\n    };\n    View.prototype.screenToView = function (point, out) {\n        var p = this.screenToPixelSpace(point, out);\n        p.x = p.x - this.viewBounds.x;\n        p.y = p.y - this.viewBounds.y;\n        return p;\n    };\n    View.prototype.viewToScreen = function (point, out) {\n        var p = { x: 0, y: 0 };\n        p.x = point.x + this.viewBounds.x;\n        p.y = point.y + this.viewBounds.y;\n        return this.pixelSpaceToScreen(p, out);\n    };\n    View.prototype.screenToWorld = function (point, out) {\n        var view = this.pixelSpaceToScreen(this.screenToView(point));\n        var world = out || { x: 0, y: 0 };\n        world.x = (view.x - (this.camera.offset[0] * this.camera.scale[0])) / this.camera.scale[0];\n        world.y = (view.y - (this.camera.offset[1] * this.camera.scale[1])) / this.camera.scale[1];\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        return world;\n    };\n    View.prototype.worldToScreen = function (point, out) {\n        var screen = { x: 0, y: 0 };\n        // Calculate from the camera to view space\n        screen.x = ((point.x * this.camera.scale[0]) + (this.camera.offset[0] * this.camera.scale[0])) * this.pixelRatio;\n        screen.y = ((point.y * this.camera.scale[1]) + (this.camera.offset[1] * this.camera.scale[1])) * this.pixelRatio;\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        // Convert from view to screen space\n        return this.viewToScreen(screen, out);\n    };\n    View.prototype.viewToWorld = function (point, out) {\n        var world = out || { x: 0, y: 0 };\n        var screen = this.pixelSpaceToScreen(point);\n        world.x = (screen.x - (this.camera.offset[0] * this.camera.scale[0])) / this.camera.scale[0];\n        world.y = (screen.y - (this.camera.offset[1] * this.camera.scale[1])) / this.camera.scale[1];\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        return world;\n    };\n    View.prototype.worldToView = function (point, out) {\n        var screen = out || { x: 0, y: 0 };\n        // Calculate from the camera to view space\n        screen.x = (point.x * this.camera.scale[0]) + (this.camera.offset[0] * this.camera.scale[0]);\n        screen.y = (point.y * this.camera.scale[1]) + (this.camera.offset[1] * this.camera.scale[1]);\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        return screen;\n    };\n    /**\n     * This operation makes sure we have the view camera adjusted to the new viewport's needs.\n     * For default behavior this ensures that the coordinate system has no distortion, orthographic,\n     * top left as 0,0 with +y axis pointing down.\n     */\n    View.prototype.fitViewtoViewport = function (surfaceDimensions) {\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CONTROLLED && isOrthographic(this.viewCamera.baseCamera)) {\n            var viewBounds = absolute_position_1.getAbsolutePositionBounds(this.viewport, surfaceDimensions, this.pixelRatio);\n            var width = viewBounds.width;\n            var height = viewBounds.height;\n            var viewport = {\n                bottom: -height / 2,\n                far: 10000000,\n                left: -width / 2,\n                near: -100,\n                right: width / 2,\n                top: height / 2,\n            };\n            var scaleX = 1;\n            var scaleY = 1;\n            var camera = this.viewCamera.baseCamera;\n            Object.assign(camera, viewport);\n            camera.position.set(-viewBounds.width / 2.0 * scaleX, viewBounds.height / 2.0 * scaleY, camera.position.z);\n            camera.scale.set(scaleX, -scaleY, 1.0);\n            camera.updateMatrix();\n            camera.updateMatrixWorld(true);\n            camera.updateProjectionMatrix();\n            this.viewBounds = viewBounds;\n            this.viewBounds.data = this;\n            this.screenBounds = new bounds_1.Bounds({\n                height: this.viewBounds.height / this.pixelRatio,\n                width: this.viewBounds.width / this.pixelRatio,\n                x: this.viewBounds.x / this.pixelRatio,\n                y: this.viewBounds.y / this.pixelRatio,\n            });\n        }\n        else if (!isOrthographic(this.viewCamera.baseCamera)) {\n            console.warn('Fit to viewport does not support non-orthographic cameras as a default behavior.');\n        }\n    };\n    View.DEFAULT_VIEW_ID = '__default__';\n    return View;\n}(identify_by_key_1.IdentifyByKey));\nexports.View = View;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar identify_by_key_1 = require(\"../util/identify-by-key\");\nfunction sortByDepth(a, b) {\n    return a.depth - b.depth;\n}\n/**\n * This defines a scene to which layers are added to. It also tracks the views that this scene\n * is rendered with.\n */\nvar Scene = /** @class */ (function (_super) {\n    __extends(Scene, _super);\n    function Scene(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the three scene which actually sets up the rendering objects */\n        _this.container = new Three.Scene();\n        /** This is all of the layers tracked to the scene */\n        _this.layers = [];\n        /** This indicates the sort is dirty for a set of layers */\n        _this.sortIsDirty = false;\n        /** This is the view */\n        _this.viewById = new Map();\n        _this.container.frustumCulled = false;\n        _this.container.autoUpdate = false;\n        return _this;\n    }\n    /**\n     * Adds a layer to the scene with the current view setting the layer contains.\n     * The layer can not jump between views or scenes. You must destroy and reconstruct\n     * the layer.\n     */\n    Scene.prototype.addLayer = function (layer) {\n        // Add the layer to the list of layers under the view\n        this.layers.push(layer);\n        this.sortIsDirty = true;\n    };\n    /**\n     * This adds a view to this scene to be used by the scene\n     */\n    Scene.prototype.addView = function (view) {\n        this.viewById.set(view.id, view);\n    };\n    /**\n     * Removes a layer from the scene. No resort is needed as remove operations\n     * do not adjust the sorting order.\n     */\n    Scene.prototype.removeLayer = function (layer) {\n        if (this.layers) {\n            var index = this.layers.indexOf(layer);\n            if (index >= 0) {\n                this.layers.splice(index, 1);\n                return;\n            }\n        }\n        console.warn('Could not remove a layer from the scene as the layer was not a part of the scene to start. Scene:', this.id, 'Layer:', layer.id);\n    };\n    Scene.prototype.sortLayers = function () {\n        if (this.sortIsDirty) {\n            this.layers.sort(sortByDepth);\n        }\n    };\n    Scene.DEFAULT_SCENE_ID = '__default__';\n    return Scene;\n}(identify_by_key_1.IdentifyByKey));\nexports.Scene = Scene;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ViewCameraType;\n(function (ViewCameraType) {\n    /**\n     * Indicates a camera that is forced by the system to follow:\n     * - Match width and height of the view port\n     * - +y axis points downward\n     * - gl origin is at the top left of the screen\n     */\n    ViewCameraType[ViewCameraType[\"CONTROLLED\"] = 0] = \"CONTROLLED\";\n    /**\n     * This allows a custom view camera to be applied to the scene.\n     */\n    ViewCameraType[ViewCameraType[\"CUSTOM\"] = 1] = \"CUSTOM\";\n})(ViewCameraType = exports.ViewCameraType || (exports.ViewCameraType = {}));\n/**\n * This is a camera that controls the view projection matrix. This is a much more\n * complicated way to handle views that is better suited for handling 3D applications\n * and is very overkill for most 2D charting systems. If you are working purely with\n * 2D components, it's recommended to leave this as a CONTROLLED camera and utilize\n * the ChartCamera for most of your needs.\n */\nvar ViewCamera = /** @class */ (function () {\n    function ViewCamera() {\n        this.type = ViewCameraType.CONTROLLED;\n    }\n    return ViewCamera;\n}());\nexports.ViewCamera = ViewCamera;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chartCameraUID = 0;\n/**\n * Quick method for applying a source array to a target array. This\n * ensures the arrays both are valid and applies the values without just making\n * a copy of the source.\n */\nfunction applyArray(target, source) {\n    target && source && target.splice.apply(target, [0, source.length].concat(source));\n}\nvar ChartCamera = /** @class */ (function () {\n    function ChartCamera(options) {\n        /** Internally set id */\n        this._id = chartCameraUID++;\n        /** Represents how much an element should be offset in world space */\n        this.offset = [0, 0, 0];\n        /** Represents how scaled each axis should be in world space */\n        this.scale = [1, 1, 1];\n        if (options) {\n            applyArray(this.offset, options.offset);\n            applyArray(this.scale, options.scale);\n        }\n    }\n    Object.defineProperty(ChartCamera.prototype, \"id\", {\n        /** Keep id as readonly */\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the location of the camera by adjusting the offsets to match.\n     */\n    ChartCamera.prototype.position = function (location) {\n        this.offset = location.slice(0);\n    };\n    return ChartCamera;\n}());\nexports.ChartCamera = ChartCamera;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction shaderTemplate(shader, options, required) {\n    var matched = new Map();\n    var noValueProvided = new Map();\n    var notFound = new Map();\n    var shaderOptions = new Map();\n    var shaderResults = shader.replace(/\\$\\{(\\w+)\\}/g, function (x, match) {\n        shaderOptions.set(match, (shaderOptions.get(match) || 0) + 1);\n        if (match in options) {\n            matched.set(match, (matched.get(match) || 0) + 1);\n            return options[match];\n        }\n        noValueProvided.set(match, (noValueProvided.get(match) || 0) + 1);\n        return '';\n    });\n    Object.keys(options).forEach(function (option) {\n        if (!matched.get(option)) {\n            notFound.set(option, (notFound.get(option) || 0) + 1);\n        }\n    });\n    // Provide metrics\n    var results = {\n        resolvedShaderOptions: matched,\n        shader: shaderResults,\n        shaderProvidedOptions: shaderOptions,\n        unresolvedProvidedOptions: notFound,\n        unresolvedShaderOptions: noValueProvided,\n    };\n    if (required) {\n        // This will ensure that BOTH the parameter input AND the shader provided the required options.\n        required.values.forEach(function (require) {\n            if (results.unresolvedProvidedOptions.get(require)) {\n                console.error(required.name + \": Could not resolve all the required inputs. Input:\", require);\n            }\n            else if (results.unresolvedShaderOptions.get(require)) {\n                console.error(required.name + \": A required option was not provided in the options parameter. Option:\", require);\n            }\n            else if (!results.resolvedShaderOptions.get(require)) {\n                console.error(required.name + \": A required option was not provided in the options parameter. Option:\", require);\n            }\n        });\n    }\n    return results;\n}\nexports.shaderTemplate = shaderTemplate;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar sqrt = Math.sqrt;\nfunction add2(left, right) {\n    return [\n        left[0] + right[0],\n        left[1] + right[1],\n    ];\n}\nexports.add2 = add2;\nfunction scale2(left, scale) {\n    return [\n        left[0] * scale,\n        left[1] * scale,\n    ];\n}\nexports.scale2 = scale2;\nfunction subtract2(left, right) {\n    return [\n        left[0] - right[0],\n        left[1] - right[1],\n    ];\n}\nexports.subtract2 = subtract2;\nfunction multiply2(left, right) {\n    return [\n        left[0] * right[0],\n        left[1] * right[1],\n    ];\n}\nexports.multiply2 = multiply2;\nfunction dot2(left, right) {\n    return (left[0] * right[0] +\n        left[1] * right[1]);\n}\nexports.dot2 = dot2;\nfunction linear2(start, end, t) {\n    return scale2(add2(subtract2(end, start), start), t);\n}\nexports.linear2 = linear2;\nfunction length2(start) {\n    return sqrt(dot2(start, start));\n}\nexports.length2 = length2;\nfunction add3(left, right) {\n    return [\n        left[0] + right[0],\n        left[1] + right[1],\n        left[2] + right[2],\n    ];\n}\nexports.add3 = add3;\nfunction scale3(left, scale) {\n    return [\n        left[0] * scale,\n        left[1] * scale,\n        left[2] * scale,\n    ];\n}\nexports.scale3 = scale3;\nfunction subtract3(left, right) {\n    return [\n        left[0] - right[0],\n        left[1] - right[1],\n        left[2] - right[2],\n    ];\n}\nexports.subtract3 = subtract3;\nfunction multiply3(left, right) {\n    return [\n        left[0] * right[0],\n        left[1] * right[1],\n        left[2] * right[2],\n    ];\n}\nexports.multiply3 = multiply3;\nfunction linear3(start, end, t) {\n    return scale3(add3(subtract3(end, start), start), t);\n}\nexports.linear3 = linear3;\nfunction length3(start) {\n    return sqrt(dot3(start, start));\n}\nexports.length3 = length3;\nfunction dot3(left, right) {\n    return (left[0] * right[0] +\n        left[1] * right[1] +\n        left[2] * right[2]);\n}\nexports.dot3 = dot3;\nfunction add4(left, right) {\n    return [\n        left[0] + right[0],\n        left[1] + right[1],\n        left[2] + right[2],\n        left[3] + right[3],\n    ];\n}\nexports.add4 = add4;\nfunction scale4(left, scale) {\n    return [\n        left[0] * scale,\n        left[1] * scale,\n        left[2] * scale,\n        left[3] * scale,\n    ];\n}\nexports.scale4 = scale4;\nfunction subtract4(left, right) {\n    return [\n        left[0] - right[0],\n        left[1] - right[1],\n        left[2] - right[2],\n        left[3] - right[3],\n    ];\n}\nexports.subtract4 = subtract4;\nfunction multiply4(left, right) {\n    return [\n        left[0] * right[0],\n        left[1] * right[1],\n        left[2] * right[2],\n        left[3] * right[3],\n    ];\n}\nexports.multiply4 = multiply4;\nfunction dot4(left, right) {\n    return (left[0] * right[0] +\n        left[1] * right[1] +\n        left[2] * right[2] +\n        left[3] * right[3]);\n}\nexports.dot4 = dot4;\nfunction linear4(start, end, t) {\n    return scale4(add4(subtract4(end, start), start), t);\n}\nexports.linear4 = linear4;\nfunction length4(start) {\n    return sqrt(dot4(start, start));\n}\nexports.length4 = length4;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar canvas;\nvar MAX_FONT_SIZE = 50;\nvar floor = Math.floor, max = Math.max, min = Math.min;\nvar LabelRasterizer = /** @class */ (function () {\n    function LabelRasterizer() {\n    }\n    /**\n     * This loops until our canvas context is available\n     */\n    LabelRasterizer.awaitContext = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!canvas) return [3 /*break*/, 2];\n                        this.getContext();\n                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 0];\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This renders our label to a sizeable canvas where we loop over the pixel data to determine\n     * the bounds of the label.\n     *\n     * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n     *                                 the size to be rendered to the texture to the size the label\n     *                                 should be within world space.\n     * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n     */\n    LabelRasterizer.calculateLabelSize = function (resource, sampleScale, calculateTexture) {\n        // If a max width is specified, then we must render and determine the potentially truncated text of the\n        // Label. We can do a binary search for the correct truncated label size.\n        if (calculateTexture) {\n            this.calculateTrucatedText(resource);\n        }\n        /** Get the label properties for rasterizing */\n        var label = resource.label;\n        // Get the scaling of the sample base\n        var sampleScaling = sampleScale || resource.sampleScale || 1.0;\n        // Draw our label to a canvas\n        this.drawLabel(label, resource.truncatedText, canvas, sampleScaling);\n        // Measure the contents of the canvas\n        var _a = this.measureContents(canvas), minX = _a.minX, minY = _a.minY, maxX = _a.maxX, maxY = _a.maxY;\n        // Make sure the rasterization object is initialized\n        resource.rasterization = resource.rasterization || {\n            texture: { height: 0, width: 0 },\n            world: { height: 0, width: 0 },\n        };\n        // When a forced sampling is present, it calculates that as the world space\n        if (!calculateTexture) {\n            // Update the calculated texture size.\n            resource.rasterization.world = {\n                height: maxY - minY,\n                width: maxX - minX,\n            };\n        }\n        // Otherwise we first calculate the texture rasterization for the label\n        else {\n            // Update the calculated texture size.\n            resource.rasterization.texture = {\n                height: maxY - minY,\n                width: maxX - minX,\n            };\n            resource.rasterization.canvas = this.createCroppedCanvas(resource, minY, minX);\n            this.calculateLabelSize(resource, 1.0, false);\n        }\n    };\n    /**\n     * This determines what the truncated text of the label will be. If there is no truncation\n     * then the truncated text === the label's text\n     */\n    LabelRasterizer.calculateTrucatedText = function (resource) {\n        var label = resource.label;\n        var maxWidth = label.maxWidth;\n        // If the label has no max width, then there will be no truncation\n        if (!maxWidth) {\n            resource.truncatedText = label.text;\n            return;\n        }\n        // We now do an initial rendering of the label as it will appear in world space\n        this.drawLabel(label, label.text, canvas, 1);\n        // We measure the contents of the rendered item to see if it violates the maxWidth\n        var firstTest = this.measureContents(canvas);\n        // If we're within spec, we do not need to truncate\n        if (firstTest.maxX - firstTest.minX <= maxWidth) {\n            resource.truncatedText = label.text;\n            return;\n        }\n        // At this point we need to binary search through chopping off letters to find a string\n        // That will fit within max width\n        var text = label.text;\n        var left = 0;\n        var right = text.length;\n        var cursor = floor((right - left) / 2.0);\n        var safety = 0;\n        var safetyMax = 50;\n        // Loop to perform the binary search\n        while (right > left && cursor !== 0 && safety++ < safetyMax) {\n            // Draw and measure\n            this.drawLabel(label, text.substr(0, cursor) + \"...\", canvas, 1);\n            var _a = this.measureContents(canvas), minX = _a.minX, maxX = _a.maxX;\n            // If we pass then we move left to cursor to make the test string longer\n            if (maxX - minX <= maxWidth) {\n                left = cursor;\n            }\n            // If we fail, we move right to cursor to make the test string shorter\n            else {\n                right = cursor;\n            }\n            // Get our next cursor position\n            var nextCursor = floor((right - left) / 2.0) + left;\n            // If the next cursor is the same as cursor, then we're done searching\n            if (nextCursor === cursor) {\n                break;\n            }\n            // Move our cursor\n            cursor = nextCursor;\n        }\n        // If cursor is zero, nothing passed and our truncation is just ellipses\n        if (cursor === 0) {\n            resource.truncatedText = '...';\n        }\n        // Otherwise we get the string that passes and use that as our truncated text\n        else {\n            resource.truncatedText = text.substr(0, cursor) + \"...\";\n        }\n    };\n    /**\n     * This generates a canvas that has the cropped version of the label where the label\n     * fits neatly in the canvas object.\n     */\n    LabelRasterizer.createCroppedCanvas = function (resource, top, left) {\n        var cropped = document.createElement('canvas');\n        var context = cropped.getContext('2d');\n        if (context) {\n            var texture = resource.rasterization.texture;\n            cropped.width = texture.width;\n            cropped.height = texture.height;\n            context.imageSmoothingEnabled = false;\n            // Draw just the region the label appears into the canvas\n            context.drawImage(canvas.canvas, left, top, texture.width, texture.height, 0, 0, texture.width, texture.height);\n        }\n        else {\n            console.warn('Could not create a canvas 2d context to generate a label\\'s cropped image.');\n        }\n        return cropped;\n    };\n    /**\n     * This actually renders a string to a canvas context using a label's settings\n     */\n    LabelRasterizer.drawLabel = function (label, text, canvas, sampleScaling) {\n        // Get the font size we will rasterize with\n        var fontSize = this.getLabelRasterizationFontSize(label, sampleScaling);\n        // Set the color of the label to white so we know what color to look for\n        canvas.fillStyle = 'white';\n        // Set the font to the canvas\n        canvas.font = this.makeCSSFont(label, sampleScaling);\n        // We will use the canvas measuring tool to give us a baseline for how wide\n        // The label will be. We add the font size to the width for the padding needed to ensure\n        // The entirety of the text is placed on the canvas.\n        canvas.canvas.width = canvas.measureText(label.text).width + fontSize;\n        // Make our test area the font size with one extra level of the font size\n        // For padding.\n        canvas.canvas.height = fontSize * 2.0;\n        // After adjusting the canvas dimensions we must re-set the font metrics\n        // Set the color of the label to white so we know what color to look for\n        canvas.fillStyle = 'white';\n        // Set the font to the canvas\n        canvas.font = this.makeCSSFont(label, sampleScaling);\n        // Render the text into our canvas for calculating\n        canvas.fillText(text, fontSize / 2.0, fontSize / 4.0 + fontSize);\n    };\n    /**\n     * Attempts to populate the 'canvas' context for rendering labels offscreen.\n     */\n    LabelRasterizer.getContext = function () {\n        if (!canvas) {\n            canvas = document.createElement('canvas').getContext('2d');\n        }\n        return canvas;\n    };\n    /**\n     * This retrieves the font size that will be used when rasterizing the label. This takes into\n     * account whether the label is requesting super sampling be present for the rendering.\n     */\n    LabelRasterizer.getLabelRasterizationFontSize = function (label, sampleScale) {\n        return label.fontSize * sampleScale;\n    };\n    /**\n     * Generates the CSS font string based on the label's values\n     */\n    LabelRasterizer.makeCSSFont = function (label, sampleScale) {\n        return label.fontWeight + \" \" + this.getLabelRasterizationFontSize(label, sampleScale) + \"px \" + label.fontFamily;\n    };\n    /**\n     * This measures the contents of what is inside the canvas assumming the rendered values are only white\n     */\n    LabelRasterizer.measureContents = function (canvas) {\n        var _a = canvas.canvas, width = _a.width, height = _a.height;\n        var imageData = canvas.getImageData(0, 0, width, height).data;\n        var r;\n        var minY = Number.MAX_SAFE_INTEGER;\n        var minX = Number.MAX_SAFE_INTEGER;\n        var maxX = Number.MIN_SAFE_INTEGER;\n        var maxY = Number.MIN_SAFE_INTEGER;\n        for (var i = 0; i < width; ++i) {\n            for (var k = 0; k < height; ++k) {\n                var redIndex = k * (width * 4) + i * 4;\n                r = imageData[redIndex];\n                if (r > 0.0) {\n                    minY = min(minY, k);\n                    minX = min(minX, i);\n                    maxX = max(maxX, i);\n                    maxY = max(maxY, k);\n                }\n            }\n        }\n        // The identified pixel needs to be encased and not a direct target\n        minY -= 1;\n        maxY += 2;\n        maxX += 2;\n        minX -= 1;\n        minY = max(minY, 0);\n        minX = max(minX, 0);\n        return { minX: minX, minY: minY, maxX: maxX, maxY: maxY };\n    };\n    /**\n     * Performs the rendering of the label\n     */\n    LabelRasterizer.render = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // Make sure our canvas object is ready for rendering\n                    return [4 /*yield*/, this.awaitContext()];\n                    case 1:\n                        // Make sure our canvas object is ready for rendering\n                        _a.sent();\n                        // Validate the label's input\n                        if (resource.label.fontSize > MAX_FONT_SIZE) {\n                            console.warn('Labels only support font sizes up to 50');\n                            return [2 /*return*/, resource];\n                        }\n                        // Calculate all of the label metrics and generate a canvas on the label that can\n                        // Be rendered to the canvas.\n                        this.calculateLabelSize(resource, resource.sampleScale, true);\n                        return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    /**\n     * Performs the rendering of the label\n     */\n    LabelRasterizer.renderSync = function (resource) {\n        // Ensure our offscreen canvas is prepped\n        this.getContext();\n        if (!canvas) {\n            console.warn('Can not render a label synchronously without the canvas context being ready.');\n            return resource;\n        }\n        // Validate the label's input\n        if (resource.label.fontSize > MAX_FONT_SIZE) {\n            console.warn('Labels only support font sizes up to 50');\n            return resource;\n        }\n        // Calculate all of the label metrics and generate a canvas on the label that can\n        // Be rendered to the canvas.\n        this.calculateLabelSize(resource, resource.sampleScale, true);\n        return resource;\n    };\n    return LabelRasterizer;\n}());\nexports.LabelRasterizer = LabelRasterizer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_atlas_resource_1 = require(\"./base-atlas-resource\");\nvar ImageAtlasResource = /** @class */ (function (_super) {\n    __extends(ImageAtlasResource, _super);\n    function ImageAtlasResource(image) {\n        var _this = _super.call(this) || this;\n        _this.image = image;\n        return _this;\n    }\n    return ImageAtlasResource;\n}(base_atlas_resource_1.BaseAtlasResource));\nexports.ImageAtlasResource = ImageAtlasResource;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// When ratserized to the image, this determines the size of the square rendered to the atlas.\nvar COLOR_RASTERIZATION_SIZE = 2;\n/**\n * Static class for rasterizing a color to a canvas object\n */\nvar ColorRasterizer = /** @class */ (function () {\n    function ColorRasterizer() {\n    }\n    /**\n     * This loops until our canvas context is available\n     */\n    ColorRasterizer.awaitContext = function (canvas) {\n        return __awaiter(this, void 0, void 0, function () {\n            var c, limit;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        c = canvas.getContext('2d'), limit = 0;\n                        _a.label = 1;\n                    case 1:\n                        if (!(!Boolean(c) && limit < 100)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        c = canvas.getContext('2d'), ++limit;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Generates the CSS string version of the color\n     */\n    ColorRasterizer.makeCSS = function (color) {\n        return \"rgba(\" + Math.floor(color.r * 256) + \", \" + Math.floor(color.g * 256) + \", \" + Math.floor(color.b * 256) + \", \" + color.opacity + \")\";\n    };\n    ColorRasterizer.render = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var canvas, context;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        canvas = document.createElement('canvas');\n                        context = canvas.getContext('2d');\n                        return [4 /*yield*/, this.awaitContext(canvas)];\n                    case 1:\n                        _a.sent();\n                        if (context) {\n                            canvas.width = COLOR_RASTERIZATION_SIZE;\n                            canvas.height = COLOR_RASTERIZATION_SIZE;\n                            context.imageSmoothingEnabled = false;\n                            context.fillStyle = this.makeCSS(resource.color);\n                            // Draw the color to the fill space\n                            context.fillRect(0, 0, COLOR_RASTERIZATION_SIZE, COLOR_RASTERIZATION_SIZE);\n                            // Update the resource with the rasterization\n                            resource.rasterization.canvas = canvas;\n                        }\n                        else {\n                            console.warn('Could not create a canvas 2d context to generate a color for rasterization.');\n                        }\n                        return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    return ColorRasterizer;\n}());\nexports.ColorRasterizer = ColorRasterizer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_atlas_resource_1 = require(\"./base-atlas-resource\");\nvar ColorAtlasResource = /** @class */ (function (_super) {\n    __extends(ColorAtlasResource, _super);\n    function ColorAtlasResource(color) {\n        var _this = _super.call(this) || this;\n        _this.color = color;\n        return _this;\n    }\n    return ColorAtlasResource;\n}(base_atlas_resource_1.BaseAtlasResource));\nexports.ColorAtlasResource = ColorAtlasResource;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Defines a texture that is located on an atlas\n */\nvar SubTexture = /** @class */ (function () {\n    function SubTexture() {\n        /** Stores the aspect ratio of the image for quick reference */\n        this.aspectRatio = 1.0;\n        /** The id of the atlas this texture is located on */\n        this.atlasReferenceID = '';\n        /** This is the actual texture of the atlas this resource is located on */\n        this.atlasTexture = null;\n        /** This is the top left UV coordinate of the sub texture on the atlas */\n        this.atlasTL = { x: 0, y: 0 };\n        /** This is the top right UV coordinate of the sub texture on the atlas */\n        this.atlasTR = { x: 0, y: 0 };\n        /** This is the bottom left UV coordinate of the sub texture on the atlas */\n        this.atlasBL = { x: 0, y: 0 };\n        /** This is the bottom right UV coordinate of the sub texture on the atlas */\n        this.atlasBR = { x: 0, y: 0 };\n        /** This is the normalized width of the sub texture on the atlas */\n        this.widthOnAtlas = 0;\n        /** This is the normalized height of the sub texture on the atlas */\n        this.heightOnAtlas = 0;\n        /** This flag is set to false when the underlying texture is no longer valid */\n        this.isValid = false;\n        /** Width in pixels of the image on the atlas */\n        this.pixelWidth = 0;\n        /** Height in pixels of the image on the atlas */\n        this.pixelHeight = 0;\n    }\n    return SubTexture;\n}());\nexports.SubTexture = SubTexture;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar identify_by_key_1 = require(\"../../util/identify-by-key\");\nvar pack_node_1 = require(\"./pack-node\");\nvar sub_texture_1 = require(\"./sub-texture\");\n/**\n * These are valid atlas sizes available. We force a power of 2 to be utilized.\n * We do not allow crazy large sizes as browsers have very real caps on resources.\n * This helps implementations be a little smarter about what they are using. Future\n * versions may increase this number as GPUs improve and standards allow greater\n * flexibility.\n */\nvar AtlasSize;\n(function (AtlasSize) {\n    AtlasSize[AtlasSize[\"_2\"] = 2] = \"_2\";\n    AtlasSize[AtlasSize[\"_4\"] = 4] = \"_4\";\n    AtlasSize[AtlasSize[\"_8\"] = 8] = \"_8\";\n    AtlasSize[AtlasSize[\"_16\"] = 16] = \"_16\";\n    AtlasSize[AtlasSize[\"_32\"] = 32] = \"_32\";\n    AtlasSize[AtlasSize[\"_64\"] = 64] = \"_64\";\n    AtlasSize[AtlasSize[\"_128\"] = 128] = \"_128\";\n    AtlasSize[AtlasSize[\"_256\"] = 256] = \"_256\";\n    AtlasSize[AtlasSize[\"_512\"] = 512] = \"_512\";\n    AtlasSize[AtlasSize[\"_1024\"] = 1024] = \"_1024\";\n    AtlasSize[AtlasSize[\"_2048\"] = 2048] = \"_2048\";\n    AtlasSize[AtlasSize[\"_4096\"] = 4096] = \"_4096\";\n})(AtlasSize = exports.AtlasSize || (exports.AtlasSize = {}));\n/**\n * This represents a single Texture on the gpu that is composed of several smaller textures\n * as a 'look up'.\n */\nvar Atlas = /** @class */ (function (_super) {\n    __extends(Atlas, _super);\n    function Atlas(options) {\n        var _this = _super.call(this, options) || this;\n        /**\n         * This is all of the resources associated with this atlas. The boolean flag indicates if the resource\n         * is flagged for removal. When set to false, the resource is no longer valid and can be removed from\n         * the atlas at any given moment.\n         */\n        _this.validResources = new Map();\n        var canvas = document.createElement('canvas');\n        _this.width = canvas.width = options.width;\n        _this.height = canvas.height = options.height;\n        _this.textureSettings = options.textureSettings;\n        // Set up the packing for this atlas\n        _this.packing = new pack_node_1.PackNode(0, 0, options.width, options.height);\n        // Make sure the texture is started and updated\n        _this.updateTexture(canvas);\n        return _this;\n    }\n    /**\n     * This invalidates the SubTexture of an atlas resource.\n     */\n    Atlas.prototype.invalidateResource = function (resource) {\n        var zero = { x: 0, y: 0 };\n        resource.texture.aspectRatio = 1;\n        resource.texture.atlasBL = zero;\n        resource.texture.atlasBR = zero;\n        resource.texture.atlasTL = zero;\n        resource.texture.atlasTR = zero;\n        resource.texture.atlasReferenceID = '';\n        resource.texture.pixelWidth = 0;\n        resource.texture.pixelHeight = 0;\n        resource.texture.isValid = false;\n    };\n    /**\n     * Sets the parent manager of this atlas\n     */\n    Atlas.prototype.setManager = function (manager) {\n        this.manager = manager;\n    };\n    /**\n     * Adds a resource to this atlas AND ensures the resource is flagged valid for use.\n     *\n     * @return {boolean} True if the resource successfully registered\n     */\n    Atlas.prototype.registerResource = function (resource) {\n        if (this.validResources.get(resource) === undefined) {\n            if (!resource.texture || !resource.texture.isValid) {\n                if (!resource.texture) {\n                    resource.texture = new sub_texture_1.SubTexture();\n                }\n                resource.texture.isValid = true;\n                this.validResources.set(resource, true);\n                return true;\n            }\n            else {\n                console.warn('Atlas Error:', this.id, 'Attempted to add a resource to an Atlas that is already a valid resource on another atlas.', 'Consider Creating a new resource to be loaded into this particular atlas.', 'Resource:', resource);\n            }\n        }\n        else {\n            console.warn('Atlas Error:', this.id, 'A resource was trying to be added to the atlas that has already been added before.', 'Consider creating a new resource to indicate what you want loaded to the atlas', 'Resource:', resource);\n        }\n        return false;\n    };\n    /**\n     * This flags a resource from removal from an atlas.\n     *\n     * NOTE: This does not immediately clear the resource fromt he atlas, nor does it even guarantee\n     * the resource will be cleared from the atlas for a while. It merely suggests the resource be removed\n     * and makes the SubTexture invalid. It could be a long while before the atlas gets regnerated and repacked\n     * to actually reflect the resource not existing on the atlas.\n     */\n    Atlas.prototype.removeResource = function (resource) {\n        if (this.validResources.get(resource)) {\n            this.validResources.set(resource, false);\n            this.invalidateResource(resource);\n        }\n        else {\n            console.warn('Atlas Error:', this.id, 'Attempted to remove a resource that does not exist on this atlas.', 'or the resource was already considered invalidated on this atlas.', 'Resource:', resource);\n        }\n    };\n    /**\n     * TODO:\n     * This performs the currently best known way to update a texture.\n     *\n     * This is the current best attempt at updating the atlas which is junk as it destroys the old texture\n     * And makes a new one. We REALLY should be just subTexture2D updating the texture, but Three makes that really\n     * Difficult\n     */\n    Atlas.prototype.updateTexture = function (canvas) {\n        if (this.texture) {\n            var redoneCanvas = this.texture.image;\n            this.texture.dispose();\n            this.texture = new Three.Texture(redoneCanvas);\n        }\n        else {\n            this.texture = new Three.Texture(canvas);\n        }\n        // Apply any relevant options to the texture desired to be set\n        this.texture.generateMipmaps = true;\n        this.texture.premultiplyAlpha = true;\n        this.textureSettings && Object.assign(this.texture, this.textureSettings);\n        this.texture.needsUpdate = true;\n    };\n    /**\n     * This frees up all the resources down to the GPU related to this atlas. It also\n     * loops through every resource and invalidates the texturing information within\n     * them so subsequent accidental renders will appear as a single color rather than\n     * an artifacted element.\n     */\n    Atlas.prototype.destroy = function () {\n        var _this = this;\n        this.texture.dispose();\n        this.validResources.forEach(function (isValid, resource) {\n            _this.invalidateResource(resource);\n        });\n    };\n    return Atlas;\n}(identify_by_key_1.IdentifyByKey));\nexports.Atlas = Atlas;\n","/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',\n  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',\n  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',\n  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',\n  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',\n  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',\n  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',\n  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',\n  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',\n  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',\n  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // Internet Explorer and Edge do not support colors.\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n    return false;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar browser = require(\"bowser\");\nvar three_1 = require(\"three\");\nvar debug = require('debug')('CommunicationsView:Mouse');\n/** Used to adjust the base whee delta for IE browsers */\nvar IE_ADJUSTMENT = 1 / 30;\n/** Used to adjust the rates for IE 11 */\nvar OLD_IE_ADJUSTMENT = -0.25;\n// This determines how large the delta can grow to in firefox\nvar MAX_FIREFOX_WHEELDELTA = 100;\n/**\n * Create a low pass filter memory bank so we can slow down rapid accelerations and let normal slower accelerations pass\n * Common use case for this is the discrepancy in firefox from mousewheels to trackpad scroll speeds\n */\nvar lowPassY = [0, 0, 0, 0];\n// These coefficients represent the coefficients of a FIR filter.\n// This FIR filter uses the lowPassY as the memory for the filter and is created for\n// The reasons specified for the lowPassY memory. To edit the coefficients, you simply\n// Ensure the coefficients added together === 1.0. If they do not, you may get an unstable\n// Result that goes to infinity rather quickly. Changing the distribution of these coefficients\n// Alters the rate at which the delta can approach MAX_FIREFOX_WHEELDELTA. Explaining exactly\n// How it affects the rate requires an understanding of FIR filters, so unless this is already\n// Known knowledge, it would be faster to just tweak the coefficients until a desired effect is\n// Attained.\nvar LOW_PASS_U0 = 0.1;\nvar LOW_PASS_U1 = 0.2;\nvar LOW_PASS_U2 = 0.2;\nvar LOW_PASS_U3 = 0.5;\nfunction normalizeFirefoxWheel(e) {\n    var wheel = e;\n    var deltaX = 0;\n    var deltaY = 0;\n    // Reset the filter if the direction changes to prevent lag in directional change\n    if (Math.sign(lowPassY[0]) !== Math.sign(deltaY)) {\n        lowPassY.splice(0, lowPassY.length, 0, 0, 0, 0);\n    }\n    deltaX = wheel.deltaX * MAX_FIREFOX_WHEELDELTA;\n    // Calculate the next value output from the FIR filter\n    deltaY = (wheel.deltaY * MAX_FIREFOX_WHEELDELTA) * LOW_PASS_U0 + lowPassY[0] * LOW_PASS_U1 + lowPassY[1] * LOW_PASS_U2 + lowPassY[2] * LOW_PASS_U3;\n    // Store the value of the filter in the FIR memory bank\n    lowPassY.unshift(deltaY);\n    // Keep our FIR memory clean and only the size of the number of coefficients\n    lowPassY.pop();\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeChromeWheel(e) {\n    var wheel = e;\n    return new three_1.Vector2(wheel.deltaX, -wheel.deltaY);\n}\nfunction normalizeIE11Wheel(e) {\n    var wheel = e;\n    var deltaX = wheel.deltaX;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    var deltaY = wheel.deltaY;\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = (wheel.wheelDelta || -wheel.detail) * OLD_IE_ADJUSTMENT;\n        }\n    }\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeIE12Wheel(e) {\n    var wheel = e;\n    var deltaX = wheel.deltaX, deltaY = wheel.deltaY;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = wheel.wheelDelta || -wheel.detail;\n        }\n    }\n    var v = new three_1.Vector2(deltaX, -deltaY);\n    v.multiplyScalar(0.25);\n    return v;\n}\n// Determine this browsers version of wheel normalization and apply it\nvar normalizeWheel;\nexports.normalizeWheel = normalizeWheel;\nif (browser.firefox) {\n    debug('Using mouse wheel for firefox');\n    exports.normalizeWheel = normalizeWheel = normalizeFirefoxWheel;\n}\nelse if (browser.msie && +browser.version >= 11) {\n    debug('Using mouse wheel for IE 11');\n    exports.normalizeWheel = normalizeWheel = normalizeIE11Wheel;\n}\nelse if (browser.msedge) {\n    debug('Using mouse wheel for MS EDGE');\n    exports.normalizeWheel = normalizeWheel = normalizeIE12Wheel;\n}\nelse {\n    debug('Using mouse wheel for Chrome');\n    exports.normalizeWheel = normalizeWheel = normalizeChromeWheel;\n}\n/**\n * Analyzes a MouseEvent and calculates the mouse coordinates (relative to the element).\n */\nfunction eventElementPosition(e, relative) {\n    var mouseX = 0, mouseY = 0, eventX = 0, eventY = 0, object = relative || (e.nativeEvent && e.nativeEvent.target) || e.target;\n    // Get mouse position on document crossbrowser\n    if (!e) {\n        e = window.event;\n    }\n    if (e.pageX || e.pageY) {\n        mouseX = e.pageX;\n        mouseY = e.pageY;\n    }\n    else if (e.clientX || e.clientY) {\n        mouseX = e.clientX + document.body.scrollLeft\n            + document.documentElement.scrollLeft;\n        mouseY = e.clientY + document.body.scrollTop\n            + document.documentElement.scrollTop;\n    }\n    // Get parent element position in document\n    if (object.offsetParent) {\n        do {\n            eventX += object.offsetLeft;\n            eventY += object.offsetTop;\n            object = object.offsetParent;\n        } while (object);\n    }\n    // Mouse position minus elm position is mouseposition relative to element:\n    return { x: mouseX - eventX, y: mouseY - eventY };\n}\nexports.eventElementPosition = eventElementPosition;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mouse_1 = require(\"../util/mouse\");\nvar quad_tree_1 = require(\"../util/quad-tree\");\n// If a mouse up after a mouse down happens before this many milliseconds, a click gesture will happen\nvar VALID_CLICK_DELAY = 1E3;\nfunction sortByDepth(a, b) {\n    return b.data.depth - a.data.depth;\n}\n/**\n * This manages mouse events on the provided canvas and provides some higher level\n * interactions with the surface.\n */\nvar MouseEventManager = /** @class */ (function () {\n    function MouseEventManager(canvas, views, controllers, handlesWheelEvents) {\n        var _this = this;\n        /**\n         * This flag is set when the system is waiting to render the elements to establish bounds.\n         * No Mouse interations will happen while this is set to true.\n         */\n        this._waitingForRender = true;\n        /**\n         * Retrieves the views underneath the mouse with the top most view as\n         * the first view in the list.\n         */\n        this.getViewsUnderMouse = function (mouse) {\n            // Find the views the mouse has interacted with\n            var hitViews = _this.quadTree.query(mouse);\n            // Sort them by depth\n            hitViews.sort(sortByDepth);\n            return hitViews;\n        };\n        /**\n         * When the renderer is resized, we must reform our quad tree\n         */\n        this.resize = function () {\n            _this._waitingForRender = true;\n        };\n        this.context = canvas;\n        this.setViews(views);\n        this.setControllers(controllers);\n        this.addContextListeners(handlesWheelEvents);\n    }\n    Object.defineProperty(MouseEventManager.prototype, \"waitingForRender\", {\n        get: function () {\n            return this._waitingForRender;\n        },\n        set: function (val) {\n            this._waitingForRender = val;\n            // When we're no longer waiting for render to occur we update all of our views in the quad tree\n            if (!val) {\n                this.quadTree = new quad_tree_1.QuadTree(0, 0, 0, 0);\n                this.quadTree.addAll(this.views.map(function (v) { return v.bounds; }).filter(Boolean));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This sets up the DOM events to listen to the events that are broadcasted by the canvas.\n     * These events are set up in such a way as to continue some events when the user\n     * drags the mouse off of the browser or off the canvas without releasing.\n     */\n    MouseEventManager.prototype.addContextListeners = function (handlesWheelEvents) {\n        var _this = this;\n        var element = this.context;\n        var startView = null;\n        var startPosition = null;\n        if (handlesWheelEvents) {\n            element.onmousewheel = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                var wheel = _this.makeWheel(event);\n                _this.controllers.forEach(function (controller) {\n                    controller.handleWheel(interaction, wheel);\n                });\n                event.stopPropagation();\n                event.preventDefault();\n            };\n        }\n        element.onmouseleave = function (event) {\n            // No interactions while waiting for the render to update\n            if (_this.waitingForRender)\n                return;\n            var mouse = mouse_1.eventElementPosition(event, element);\n            var interaction = _this.makeInteraction(mouse, startPosition, startView);\n            _this.controllers.forEach(function (controller) {\n                controller.handleMouseOut(interaction);\n            });\n        };\n        element.onmousemove = function (event) {\n            // No interactions while waiting for the render to update\n            if (_this.waitingForRender)\n                return;\n            var mouse = mouse_1.eventElementPosition(event, element);\n            var interaction = _this.makeInteraction(mouse, startPosition, startView);\n            _this.controllers.forEach(function (controller) {\n                controller.handleMouseMove(interaction);\n            });\n        };\n        element.onmousedown = function (event) {\n            // No interactions while waiting for the render to update\n            if (_this.waitingForRender)\n                return;\n            startPosition = mouse_1.eventElementPosition(event, element);\n            var downViews = _this.getViewsUnderMouse(startPosition);\n            // While this is true, when mouse up happens, the click gesture will execute\n            var canClick = true;\n            var clickStartTime = Date.now();\n            // If no views under this view, then we just quick exit with no interactions\n            if (downViews.length <= 0) {\n                return;\n            }\n            startView = downViews[0].data;\n            var interaction = _this.makeInteraction(startPosition, startPosition, startView);\n            var currentPosition = startPosition;\n            _this.controllers.forEach(function (controller) {\n                controller.handleMouseDown(interaction, event.button);\n            });\n            event.stopPropagation();\n            document.onmousemove = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                var delta = {\n                    x: mouse.x - currentPosition.x,\n                    y: mouse.y - currentPosition.y,\n                };\n                var drag = _this.makeDrag(mouse, startPosition, currentPosition, delta);\n                currentPosition = mouse;\n                _this.controllers.forEach(function (controller) {\n                    controller.handleDrag(interaction, drag);\n                });\n                // If we move after a mouse down, it's no longer a click\n                canClick = false;\n            };\n            document.onmouseup = function (event) {\n                document.onmousemove = null;\n                document.onmouseup = null;\n                document.onmouseover = null;\n            };\n            document.onmouseover = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                _this.controllers.forEach(function (controller) {\n                    controller.handleMouseOver(interaction);\n                });\n                event.stopPropagation();\n            };\n            element.onmouseup = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                _this.controllers.forEach(function (controller) {\n                    controller.handleMouseUp(interaction, event.button);\n                });\n                // If we release the mouse before the valid click delay\n                if (canClick && Date.now() - clickStartTime < VALID_CLICK_DELAY) {\n                    _this.controllers.forEach(function (controller) {\n                        controller.handleClick(interaction, event.button);\n                    });\n                }\n            };\n            // Text will not be selected when it is being dragged\n            element.onselectstart = function () {\n                return false;\n            };\n        };\n        // Enable touch support\n        this.addTouchContextListeners();\n    };\n    MouseEventManager.prototype.addTouchContextListeners = function () {\n        var element = this.context;\n        element.ontouchstart = function (event) {\n            // TODO: This is the start work for the touch events. And this retains sentimental value.\n            // For (let i = 0, end = event.changedTouches.length; i < end; ++i) {\n            // TODO\n            // Const touch = event.changedTouches.item(i);\n            // CurrentTouches.set(touch.identifier, to);\n            // }\n        };\n        element.ontouchend = function (event) {\n            // TODO\n        };\n        element.ontouchmove = function (event) {\n            // TODO\n        };\n        element.ontouchcancel = function (event) {\n            // TODO\n        };\n    };\n    /**\n     * Retrieves the view for the provided id\n     */\n    MouseEventManager.prototype.getView = function (viewId) {\n        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n            var view = _a[_i];\n            if (view.view.id === viewId) {\n                return view.view;\n            }\n        }\n        return null;\n    };\n    /**\n     * This generates the metrics for a drag gesture.\n     */\n    MouseEventManager.prototype.makeDrag = function (mouse, start, previous, delta) {\n        return {\n            screen: {\n                current: mouse,\n                delta: delta,\n                previous: previous,\n                start: start,\n            },\n        };\n    };\n    /**\n     * This makes the metrics for interactions with the views.\n     */\n    MouseEventManager.prototype.makeInteraction = function (mouse, start, startView) {\n        // Find the views the mouse has interacted with\n        var hitViews = this.getViewsUnderMouse(mouse);\n        return {\n            screen: {\n                mouse: mouse,\n            },\n            start: start && startView && {\n                mouse: startView.view.screenToView(mouse),\n                view: startView.view,\n            },\n            target: {\n                mouse: hitViews[0] && hitViews[0].data.view.screenToView(mouse),\n                view: hitViews[0] && hitViews[0].data.view,\n            },\n            viewsUnderMouse: hitViews.map(function (v) { return ({\n                mouse: v.data.view.screenToView(mouse),\n                view: v.data.view,\n            }); }),\n        };\n    };\n    MouseEventManager.prototype.makeWheel = function (event) {\n        var wheel = mouse_1.normalizeWheel(event);\n        return {\n            wheel: [wheel.x, wheel.y],\n        };\n    };\n    /**\n     * Sets the controllers to receive events from this manager.\n     */\n    MouseEventManager.prototype.setControllers = function (controllers) {\n        this.controllers = controllers;\n        for (var _i = 0, _a = this.controllers; _i < _a.length; _i++) {\n            var controller = _a[_i];\n            controller.setMouseManager(this);\n        }\n    };\n    /**\n     * Sets the views that gets queried for interactions.\n     */\n    MouseEventManager.prototype.setViews = function (views) {\n        this.views = views;\n    };\n    MouseEventManager.prototype.destroy = function () {\n        this.quadTree = null;\n        this.context.onmousedown = null;\n        this.context.onmousemove = null;\n    };\n    return MouseEventManager;\n}());\nexports.MouseEventManager = MouseEventManager;\n","\"use strict\";\n/**\n * This file is dedicted to the all important step of processing desired inputs from the layer\n * and coming up with automated generated uniforms and attributes that the shader's will need\n * in order to operate with the conveniences the library offers. This includes things such as\n * injecting camera projection uniforms, resource uniforms, animation adjustments etc etc.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\nfunction toVertexAttributeInternal(attribute) {\n    return Object.assign({}, attribute, { materialAttribute: null });\n}\nfunction toUniformInternal(uniform) {\n    return Object.assign({}, uniform, { materialUniforms: [] });\n}\n/**\n * This searches through attribute packing for the first empty slot it can find to fill.\n * If a slot is not available it will just start a new block.\n */\nfunction findEmptyBlock(attributes) {\n    var blocks = new Map();\n    var found = null;\n    var maxBlock = 0;\n    attributes.forEach(function (instanceAttribute) {\n        var block = instanceAttribute.block;\n        var index = instanceAttribute.blockIndex;\n        var size = instanceAttribute.size;\n        var usedBlocks = blocks.get(block);\n        maxBlock = Math.max(block, maxBlock);\n        if (!usedBlocks) {\n            usedBlocks = new Map();\n            blocks.set(block, usedBlocks);\n        }\n        for (var i = index, end = index + size; i < end; ++i) {\n            usedBlocks.set(i, true);\n        }\n    });\n    blocks.forEach(function (usedBlocks, block) {\n        if (!usedBlocks.get(1))\n            found = [block, types_1.InstanceBlockIndex.ONE];\n        if (!usedBlocks.get(2))\n            found = [block, types_1.InstanceBlockIndex.TWO];\n        if (!usedBlocks.get(3))\n            found = [block, types_1.InstanceBlockIndex.THREE];\n        if (!usedBlocks.get(4))\n            found = [block, types_1.InstanceBlockIndex.FOUR];\n    });\n    // If no block was ever found, then we take the max block detected and make\n    // A new block after it\n    if (!found) {\n        found = [maxBlock + 1, 0];\n    }\n    return found;\n}\nfunction sortByResourceAttributes(a, b) {\n    if (a.atlas && !b.atlas)\n        return -1;\n    return 1;\n}\nfunction injectShaderIO(layer, shaderIO) {\n    // Retrieve all of the instance attributes that are atlas references\n    var atlasInstanceAttributes = [];\n    // Key: The atlas uniform name requested\n    var requestedAtlasInjections = new Map();\n    // Get the atlas requests that have unique names. We only need one uniform\n    // For a single unique provided name. We also must merge the requests for\n    // Vertex and fragment injections\n    shaderIO.instanceAttributes.forEach(function (attribute) {\n        if (attribute.atlas) {\n            // Auto set the size of the attribute. Attribute's that are a resource automatically\n            // Consume a size of four\n            attribute.size = types_1.InstanceAttributeSize.FOUR;\n            attribute.blockIndex = types_1.InstanceBlockIndex.ONE;\n            // Get the atlas resource uniform (sampler2D) injection targets. We default to only the\n            // Fragment shader as it's the most commonly used location for sampler2Ds\n            var injection = attribute.atlas.shaderInjection || types_1.ShaderInjectionTarget.FRAGMENT;\n            // See if we already have an injection for the given injected uniform name for an atlas resource.\n            var injections = requestedAtlasInjections.get(attribute.atlas.name);\n            if (injections) {\n                requestedAtlasInjections.set(attribute.atlas.name, [\n                    injections[0] ||\n                        injection === types_1.ShaderInjectionTarget.VERTEX ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                    injections[1] ||\n                        injection === types_1.ShaderInjectionTarget.FRAGMENT ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                ]);\n            }\n            else {\n                atlasInstanceAttributes.push(attribute);\n                requestedAtlasInjections.set(attribute.atlas.name, [\n                    injection === types_1.ShaderInjectionTarget.VERTEX ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                    injection === types_1.ShaderInjectionTarget.FRAGMENT ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                ]);\n            }\n        }\n    });\n    // Make uniforms for all of the unique atlas requests.\n    var atlasUniforms = atlasInstanceAttributes.map(function (instanceAttribute) {\n        var injections = requestedAtlasInjections.get(instanceAttribute.atlas.name);\n        var injection = (injections[0] && injections[1] && types_1.ShaderInjectionTarget.ALL) ||\n            (injections[0] && !injections[1] && types_1.ShaderInjectionTarget.VERTEX) ||\n            (!injections[0] && injections[1] && types_1.ShaderInjectionTarget.FRAGMENT);\n        return {\n            name: instanceAttribute.atlas.name,\n            shaderInjection: injection,\n            size: types_1.UniformSize.ATLAS,\n            update: function () { return layer.resource.getAtlasTexture(instanceAttribute.atlas.key); },\n        };\n    });\n    // These are the uniforms that should be present in the shader for basic operation\n    var addedUniforms = atlasUniforms.concat([\n        // This injects the projection matrix from the view camera\n        {\n            name: 'projection',\n            size: types_1.UniformSize.MATRIX4,\n            update: function () { return layer.view.viewCamera.baseCamera.projectionMatrix.elements; },\n        },\n        // This injects the model view matrix from the view camera\n        {\n            name: 'modelView',\n            size: types_1.UniformSize.MATRIX4,\n            update: function () { return layer.view.viewCamera.baseCamera.matrix.elements; },\n        },\n        // This injects the camera offset uniforms that need to be present for projecting in a more\n        // Chart centric style\n        {\n            name: 'cameraOffset',\n            size: types_1.UniformSize.THREE,\n            update: function () { return layer.view.camera.offset; },\n        },\n        // This injects the camera scaling uniforms that need to be present for projecting in a more\n        // Chart centric style\n        {\n            name: 'cameraScale',\n            size: types_1.UniformSize.THREE,\n            update: function () { return layer.view.camera.scale; },\n        },\n        // This injects the camera scaling uniforms that need to be present for projecting in a more\n        // Chart centric style\n        {\n            name: 'viewSize',\n            size: types_1.UniformSize.TWO,\n            update: function () { return [layer.view.viewBounds.width, layer.view.viewBounds.height]; },\n        },\n        // This injects the current layer's pixel ratio so pixel ratio dependent items can react to it\n        // Things like gl_PointSize will need this metric if not working in clip space\n        {\n            name: 'pixelRatio',\n            size: types_1.UniformSize.ONE,\n            update: function () { return [layer.view.pixelRatio]; },\n        },\n    ]);\n    // Seek an empty block within the layer provided uniforms so we can fill a hole potentially\n    // With the _active attribute.\n    var fillBlock = findEmptyBlock(shaderIO.instanceAttributes);\n    var addedInstanceAttributes = [\n        // This is injected so the system can control when an instance should not be rendered.\n        // This allows for holes to be in the buffer without having to correct them immediately\n        {\n            block: fillBlock[0],\n            blockIndex: fillBlock[1],\n            name: '_active',\n            size: types_1.InstanceAttributeSize.ONE,\n            update: function (o) { return [o.active ? 1 : 0]; },\n        },\n    ];\n    // Set the active attribute to the layer for quick reference\n    layer.activeAttribute = addedInstanceAttributes[0];\n    var addedVertexAttributes = [\n        // We add an inherent instance attribute to our vertices so they can determine the instancing\n        // Data to retrieve.\n        {\n            name: 'instance',\n            size: types_1.VertexAttributeSize.ONE,\n            // We no op this as our geomtry generating routine will establish the values needed here\n            update: function () { return [0]; },\n        },\n    ];\n    // Aggregate all of the injected shaderIO with the layer's shaderIO\n    var vertexAttributes = addedVertexAttributes\n        .concat(shaderIO.vertexAttributes)\n        .map(toVertexAttributeInternal);\n    var uniforms = addedUniforms\n        .concat(shaderIO.uniforms)\n        .map(toUniformInternal);\n    var instanceAttributes = addedInstanceAttributes\n        .concat(shaderIO.instanceAttributes)\n        .sort(sortByResourceAttributes);\n    return {\n        instanceAttributes: instanceAttributes,\n        uniforms: uniforms,\n        vertexAttributes: vertexAttributes,\n    };\n}\nexports.injectShaderIO = injectShaderIO;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar types_1 = require(\"../types\");\nvar UNIFORM_SIZE_TO_MATERIAL_TYPE = (_a = {},\n    _a[types_1.UniformSize.ONE] = 'f',\n    _a[types_1.UniformSize.TWO] = 'v2',\n    _a[types_1.UniformSize.THREE] = 'v3',\n    _a[types_1.UniformSize.FOUR] = 'v4',\n    _a[types_1.UniformSize.MATRIX3] = 'Matrix3fv',\n    _a[types_1.UniformSize.MATRIX4] = 'Matrix4fv',\n    _a);\nvar DEFAULT_UNIFORM_VALUE = (_b = {},\n    _b[types_1.UniformSize.ONE] = [0],\n    _b[types_1.UniformSize.TWO] = [0, 0],\n    _b[types_1.UniformSize.THREE] = [0, 0, 0],\n    _b[types_1.UniformSize.FOUR] = [0, 0, 0, 0],\n    _b[types_1.UniformSize.MATRIX3] = [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    _b[types_1.UniformSize.MATRIX4] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    _b);\nfunction toMaterialUniform(uniform) {\n    return {\n        type: UNIFORM_SIZE_TO_MATERIAL_TYPE[uniform.size],\n        value: DEFAULT_UNIFORM_VALUE[uniform.size],\n    };\n}\nfunction generateLayerMaterial(layer, vs, fs, layerUniforms, instancingUniforms) {\n    // We now need to establish the material for the layer\n    var materialParams = layer.getMaterialOptions();\n    materialParams.vertexShader = vs;\n    materialParams.fragmentShader = fs;\n    // We must convert all of the uniforms to actual Three material initialization uniforms\n    materialParams.uniforms = {};\n    // Convert our non-instancing uniforms to our material uniforms\n    for (var i = 0, end = layerUniforms.length; i < end; ++i) {\n        var uniform = layerUniforms[i];\n        var materialUniform = toMaterialUniform(uniform);\n        materialParams.uniforms[uniform.name] = materialUniform;\n    }\n    // Add in the generated instancing uniforms\n    for (var i = 0, end = instancingUniforms.length; i < end; ++i) {\n        var generatedUniform = instancingUniforms[i];\n        materialParams.uniforms[generatedUniform.name] = {\n            type: generatedUniform.type,\n            value: generatedUniform.value,\n        };\n    }\n    return new Three.RawShaderMaterial(materialParams);\n}\nexports.generateLayerMaterial = generateLayerMaterial;\nvar _a, _b;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nfunction isNumberCluster(val) {\n    return !Array.isArray(val[0]);\n}\nfunction generateLayerGeometry(maxInstancesPerBuffer, vertexAttributes, vertexCount) {\n    // Make the new buffers to be updated\n    var vertexBuffers = [];\n    for (var i = 0, end = vertexAttributes.length; i < end; ++i) {\n        var attribute_1 = vertexAttributes[i];\n        vertexBuffers.push(new Float32Array((attribute_1.size) * vertexCount * maxInstancesPerBuffer));\n    }\n    // Let's now fill in the baseline geometry with the instances we will be generating\n    // First we ask the layer for a single instance's buffer setup\n    var endk = vertexAttributes.length;\n    var buffer;\n    var attribute;\n    var value;\n    var formatError;\n    for (var i = 0, end = vertexCount; i < end; ++i) {\n        for (var k = 0; k < endk; ++k) {\n            attribute = vertexAttributes[k];\n            buffer = vertexBuffers[k];\n            value = attribute.update(i);\n            if (isNumberCluster(value)) {\n                for (var j = i * attribute.size, endj = j + attribute.size, index = 0; j < endj; ++j, ++index) {\n                    buffer[j] = value[index];\n                }\n            }\n            else {\n                formatError = true;\n            }\n        }\n    }\n    if (formatError) {\n        console.warn('A vertex buffer updating method should not use arrays of arrays of numbers.');\n    }\n    // After getting the geometry for a single instance, we can now copy paste\n    // For subsequent instances using very fast FLoat32 methods\n    for (var i = 0, end = vertexAttributes.length; i < end; ++i) {\n        var attribute_2 = vertexAttributes[i];\n        var instanceSize = (attribute_2.size) * vertexCount;\n        // Copy the first buffer set into the rest of the buffer\n        for (var k = 1, endk_1 = maxInstancesPerBuffer; k < endk_1; ++k) {\n            vertexBuffers[i].copyWithin(instanceSize * k, 0, instanceSize);\n        }\n    }\n    // Lastly, we make the instance attribute reflect correctly so each instance\n    // Can have varied information\n    var instancingBuffer = vertexBuffers[0];\n    for (var i = 0, end = maxInstancesPerBuffer; i < end; ++i) {\n        var instanceStartIndex = i * vertexCount;\n        for (var k = 0; k < vertexCount; ++k) {\n            instancingBuffer[k + instanceStartIndex] = i;\n        }\n    }\n    // Now we can generate the attributes and apply them to a geometry object\n    var geometry = new Three.BufferGeometry();\n    for (var i = 0, end = vertexAttributes.length; i < end; ++i) {\n        var attribute_3 = vertexAttributes[i];\n        var materialAttribute = new Three.BufferAttribute(vertexBuffers[i], attribute_3.size);\n        attribute_3.materialAttribute = materialAttribute;\n        geometry.addAttribute(attribute_3.name, materialAttribute);\n    }\n    return geometry;\n}\nexports.generateLayerGeometry = generateLayerGeometry;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\nvar DataBounds = /** @class */ (function (_super) {\n    __extends(DataBounds, _super);\n    function DataBounds() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DataBounds.emptyBounds = function () {\n        return new DataBounds({\n            height: 0,\n            width: 0,\n            x: 0,\n            y: 0,\n        });\n    };\n    return DataBounds;\n}(bounds_1.Bounds));\nexports.DataBounds = DataBounds;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar chart_camera_1 = require(\"../util/chart-camera\");\nvar view_camera_1 = require(\"../util/view-camera\");\nvar scene_1 = require(\"./scene\");\nvar view_1 = require(\"./view\");\n/**\n * This generates all of the cameras/views/scenes necessary for default viewing of elements.\n *\n * These defaults are required to ensure the following:\n *\n * - Orthographic view\n * - top left corner of the canvas is 0,0\n * - y axis is +y downward\n * - entire canvas is the viewport.\n */\nfunction generateDefaultScene(context) {\n    // Generate a default view camera that is\n    // - Orthographic\n    // - (0, 0) is the top left of the canvas\n    // - the y axis is +y going downward\n    var height = context.canvas.height;\n    var width = context.canvas.width;\n    var aspectRatio = width / height;\n    var viewport = {\n        aspectRatio: aspectRatio,\n        bottom: -height / 2,\n        far: 10000000,\n        left: -width / 2,\n        near: -100,\n        right: width / 2,\n        top: height / 2,\n        viewSize: height,\n    };\n    var defaultCamera = new view_camera_1.ViewCamera();\n    defaultCamera.baseCamera = new Three.OrthographicCamera(viewport.left, viewport.right, viewport.top, viewport.bottom, viewport.near, viewport.far);\n    defaultCamera.baseCamera.scale.set(1.0, -1.0, 1.0);\n    defaultCamera.baseCamera.position.set(0.0, 0.0, -300.0);\n    defaultCamera.baseCamera.updateMatrixWorld(true);\n    defaultCamera.baseCamera.updateMatrix();\n    if (defaultCamera.baseCamera instanceof Three.OrthographicCamera) {\n        defaultCamera.baseCamera.updateProjectionMatrix();\n    }\n    // Generate a charting camera with all scales set to 1 and no offsets in any direction\n    var defaultChartCamera = new chart_camera_1.ChartCamera();\n    // This is a viewport that covers the entire context\n    var defaultViewport = {\n        bottom: 0,\n        left: 0,\n        right: 0,\n        top: 0,\n    };\n    // Make a view using our defaults\n    var defaultView = new view_1.View({\n        camera: defaultChartCamera,\n        key: view_1.View.DEFAULT_VIEW_ID,\n        viewCamera: defaultCamera,\n        viewport: defaultViewport,\n    });\n    // Make a scene with our defaults\n    var defaultScene = new scene_1.Scene({\n        key: scene_1.Scene.DEFAULT_SCENE_ID,\n        views: [],\n    });\n    // Make sure the default view is a part of the default scene\n    defaultScene.addView(defaultView);\n    return {\n        camera: defaultChartCamera,\n        scene: defaultScene,\n        view: defaultView,\n        viewCamera: defaultCamera,\n        viewport: defaultViewport,\n    };\n}\nexports.generateDefaultScene = generateDefaultScene;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar INSTANCE_UNIFORM_ATTRIBUTE_PREFIX = 'u';\nfunction makeInstanceUniformNameArray() {\n    return \"instanceData\";\n}\nexports.makeInstanceUniformNameArray = makeInstanceUniformNameArray;\nfunction makeInstanceUniformNameTree(index) {\n    return \"\" + INSTANCE_UNIFORM_ATTRIBUTE_PREFIX + index.toString(31);\n}\nexports.makeInstanceUniformNameTree = makeInstanceUniformNameTree;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.templateVars = {\n    attributeFragments: 'attributeFragments',\n    attributes: 'attributes',\n    blocksPerInstance: 'blocksPerInstance',\n    instanceBlockCount: 'instanceBlockCount',\n    instanceDataBinaryTree: 'instanceDataBinaryTree',\n    instanceDataRetrieval: 'instanceDataRetrieval',\n    instanceDestructuring: 'instanceDestructuring',\n    instanceFragments: 'instanceFragments',\n    instanceUniformDeclarations: 'instanceUniformDeclarations',\n    layerUniforms: 'layerUniforms',\n    projectionMethods: 'projectionMethods',\n    shader: 'shader',\n    shaderInput: 'shaderInput',\n    vertexAttributes: 'vertexAttributes',\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getProgramInfo(gl, program) {\n    var result = {\n        attributeCount: 0,\n        attributes: new Array(),\n        uniformCount: 0,\n        uniforms: new Array(),\n    }, activeUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS), activeAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    // Taken from the WebGl spec:\n    // Http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14\n    var enums = {\n        0x8B50: 'FLOAT_VEC2',\n        0x8B51: 'FLOAT_VEC3',\n        0x8B52: 'FLOAT_VEC4',\n        0x8B53: 'INT_VEC2',\n        0x8B54: 'INT_VEC3',\n        0x8B55: 'INT_VEC4',\n        0x8B56: 'BOOL',\n        0x8B57: 'BOOL_VEC2',\n        0x8B58: 'BOOL_VEC3',\n        0x8B59: 'BOOL_VEC4',\n        0x8B5A: 'FLOAT_MAT2',\n        0x8B5B: 'FLOAT_MAT3',\n        0x8B5C: 'FLOAT_MAT4',\n        0x8B5E: 'SAMPLER_2D',\n        0x8B60: 'SAMPLER_CUBE',\n        0x1400: 'BYTE',\n        0x1401: 'UNSIGNED_BYTE',\n        0x1402: 'SHORT',\n        0x1403: 'UNSIGNED_SHORT',\n        0x1404: 'INT',\n        0x1405: 'UNSIGNED_INT',\n        0x1406: 'FLOAT',\n    };\n    var blocks = {\n        0x8B50: 1,\n        0x8B51: 1,\n        0x8B52: 1,\n        0x8B53: 1,\n        0x8B54: 1,\n        0x8B55: 1,\n        0x8B56: 1,\n        0x8B57: 1,\n        0x8B58: 1,\n        0x8B59: 1,\n        0x8B5A: 1,\n        0x8B5B: 3,\n        0x8B5C: 4,\n        0x8B5E: 1,\n        0x8B60: 1,\n        0x1400: 1,\n        0x1401: 1,\n        0x1402: 1,\n        0x1403: 1,\n        0x1404: 1,\n        0x1405: 1,\n        0x1406: 1,\n    };\n    // Loop through active uniforms\n    for (var i = 0; i < activeUniforms; ++i) {\n        var uniform = gl.getActiveUniform(program, i);\n        uniform.typeName = enums[uniform.type];\n        result.uniforms.push(uniform);\n        result.uniformCount += uniform.size;\n        uniform.size = uniform.size * blocks[uniform.type];\n    }\n    // Loop through active attributes\n    for (var i = 0; i < activeAttributes; i++) {\n        var attribute = gl.getActiveAttrib(program, i);\n        attribute.typeName = enums[attribute.type];\n        result.attributes.push(attribute);\n        result.attributeCount += attribute.size;\n    }\n    return result;\n}\nexports.getProgramInfo = getProgramInfo;\nvar WebGLStat = /** @class */ (function () {\n    function WebGLStat() {\n    }\n    WebGLStat.MAX_VERTEX_UNIFORMS = 0;\n    WebGLStat.MAX_FRAGMENT_UNIFORMS = 0;\n    WebGLStat.MAX_ATTRIBUTES = 0;\n    WebGLStat.WEBGL_SUPPORTED = false;\n    WebGLStat.MAX_TEXTURE_SIZE = 0;\n    return WebGLStat;\n}());\nexports.WebGLStat = WebGLStat;\nfunction initStats() {\n    // Let's perform some immediate operations to do some gl querying for useful information\n    function getAContext() {\n        try {\n            var canvas = document.createElement('canvas');\n            return window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    // Attempt to retrieve a context for webgl\n    var gl = getAContext();\n    // If the context exists, then we know gl is supported and we can fill in some metrics\n    if (gl) {\n        WebGLStat.WEBGL_SUPPORTED = true;\n        WebGLStat.MAX_VERTEX_UNIFORMS = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n        WebGLStat.MAX_FRAGMENT_UNIFORMS = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n        WebGLStat.MAX_ATTRIBUTES = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n        WebGLStat.MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    }\n}\ninitStats();\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\nvar event_manager_1 = require(\"../surface/event-manager\");\nvar util_1 = require(\"../util\");\nvar CameraBoundsAnchor;\n(function (CameraBoundsAnchor) {\n    CameraBoundsAnchor[CameraBoundsAnchor[\"TOP_LEFT\"] = 0] = \"TOP_LEFT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"TOP_MIDDLE\"] = 1] = \"TOP_MIDDLE\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"TOP_RIGHT\"] = 2] = \"TOP_RIGHT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"MIDDLE_LEFT\"] = 3] = \"MIDDLE_LEFT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"MIDDLE\"] = 4] = \"MIDDLE\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"MIDDLE_RIGHT\"] = 5] = \"MIDDLE_RIGHT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"BOTTOM_LEFT\"] = 6] = \"BOTTOM_LEFT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"BOTTOM_MIDDLE\"] = 7] = \"BOTTOM_MIDDLE\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"BOTTOM_RIGHT\"] = 8] = \"BOTTOM_RIGHT\";\n})(CameraBoundsAnchor = exports.CameraBoundsAnchor || (exports.CameraBoundsAnchor = {}));\n/**\n * This provides some very basic common needs for a camera control system. This is not a total solution\n * very every scenario. This should just often handle most basic needs.\n */\nvar BasicCameraController = /** @class */ (function (_super) {\n    __extends(BasicCameraController, _super);\n    function BasicCameraController(options) {\n        var _this = _super.call(this) || this;\n        /** Informative property indicating the controller is panning the chart or not */\n        _this.isPanning = false;\n        /** This is the filter applied to panning operations */\n        _this.panFilter = function (offset, view, allViews) { return offset; };\n        /** THis is the filter applied to tscaling operations */\n        _this.scaleFilter = function (scale, view, allViews) { return scale; };\n        /**\n         * This flag is set to true when a start view is targetted on mouse down even if it is not\n         * the top most view.\n         */\n        _this.startViewDidStart = false;\n        /**\n         * Callback for when the range has changed for the camera in a view\n         */\n        _this.onRangeChanged = function (camera, targetView) { };\n        _this.setBounds(options.bounds);\n        _this.camera = options.camera;\n        _this.scaleFactor = options.scaleFactor || 1000.0;\n        _this.ignoreCoverViews = options.ignoreCoverViews || false;\n        if (options.startView) {\n            _this.startViews = Array.isArray(options.startView) ? options.startView : [options.startView];\n        }\n        _this.panFilter = options.panFilter || _this.panFilter;\n        _this.scaleFilter = options.scaleFilter || _this.scaleFilter;\n        _this.onRangeChanged = options.onRangeChanged || _this.onRangeChanged;\n        return _this;\n    }\n    /**\n     * Sets bounds applicable to the supplied view.\n     * If no view is supplied, it uses the first in the startViews array\n     */\n    BasicCameraController.prototype.setBounds = function (bounds, targetView) {\n        this.bounds = bounds;\n        if (targetView) {\n            this.applyBounds(targetView);\n        }\n        else if (this.startViews && this.startViews.length >= 1) {\n            var targetView_1 = this.getView(this.startViews[0]);\n            this.applyBounds(targetView_1);\n        }\n    };\n    Object.defineProperty(BasicCameraController.prototype, \"pan\", {\n        get: function () {\n            return this.camera.offset;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BasicCameraController.prototype, \"scale\", {\n        get: function () {\n            return this.camera.scale;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BasicCameraController.prototype.canStart = function (viewId) {\n        return (!this.startViews ||\n            this.startViews.length === 0 ||\n            (this.startViews && this.startViews.indexOf(viewId) > -1) ||\n            this.startViewDidStart && this.ignoreCoverViews);\n    };\n    BasicCameraController.prototype.findCoveredStartView = function (e) {\n        var _this = this;\n        var found = e.viewsUnderMouse.find(function (under) { return _this.startViews.indexOf(under.view.id) > -1; });\n        this.startViewDidStart = Boolean(found);\n        if (found) {\n            this.coveredStartView = found.view;\n        }\n    };\n    BasicCameraController.prototype.getTargetView = function (e) {\n        // If we have a start view and we do not ignore covering views,\n        // Then our target view is the view we started with\n        if (this.startViews && !this.ignoreCoverViews) {\n            return e.target.view;\n        }\n        // Otherwise, we use the covered start view\n        else {\n            return this.coveredStartView;\n        }\n    };\n    BasicCameraController.prototype.handleMouseDown = function (e, button) {\n        // We look for valid covered views on mouse down so dragging will work\n        this.findCoveredStartView(e);\n        // If this is a valid start view, then we enter a panning state with the mouse down\n        this.isPanning = this.canStart(e.start.view.id);\n    };\n    BasicCameraController.prototype.handleMouseUp = function (e) {\n        this.startViewDidStart = false;\n        this.isPanning = false;\n    };\n    BasicCameraController.prototype.handleDrag = function (e, drag) {\n        if (this.canStart(e.start.view.id)) {\n            var pan = [(drag.screen.delta.x / this.camera.scale[0]),\n                (drag.screen.delta.y / this.camera.scale[1]),\n                0];\n            if (this.panFilter) {\n                pan = this.panFilter(pan, e.start.view, e.viewsUnderMouse.map(function (v) { return v.view; }));\n            }\n            this.camera.offset[0] += pan[0];\n            this.camera.offset[1] += pan[1];\n            // Add additional correction for bounds\n            if (this.bounds && e.start.view.id === this.bounds.view) {\n                this.applyBounds(e.start.view);\n            }\n            // Broadcast the change occurred\n            this.onRangeChanged(this.camera, e.start.view);\n        }\n    };\n    BasicCameraController.prototype.handleWheel = function (e, wheelMetrics) {\n        // Every mouse wheel event must look to see if it's over a valid covered start view\n        this.findCoveredStartView(e);\n        if (this.canStart(e.target.view.id)) {\n            var targetView = this.getTargetView(e);\n            var beforeZoom = targetView.screenToWorld(e.screen.mouse);\n            var currentZoomX = this.camera.scale[0] || 1.0;\n            var currentZoomY = this.camera.scale[1] || 1.0;\n            var scale = [wheelMetrics.wheel[1] / this.scaleFactor *\n                    currentZoomX, wheelMetrics.wheel[1] / this.scaleFactor * currentZoomY, 1];\n            if (this.scaleFilter) {\n                scale = this.scaleFilter(scale, targetView, e.viewsUnderMouse.map(function (v) { return v.view; }));\n            }\n            this.camera.scale[0] = currentZoomX + scale[0];\n            this.camera.scale[1] = currentZoomY + scale[1];\n            var afterZoom = targetView.screenToWorld(e.screen.mouse);\n            this.camera.offset[0] -= (beforeZoom.x - afterZoom.x);\n            this.camera.offset[1] -= (beforeZoom.y - afterZoom.y);\n            // Add additional correction for bounds\n            if (this.bounds && (targetView.id === this.bounds.view)) {\n                this.applyBounds(targetView);\n            }\n            // Broadcast the change occurred\n            this.onRangeChanged(this.camera, targetView);\n        }\n    };\n    /**\n     * Corrects camera offset to respect current bounds and anchor.\n     */\n    BasicCameraController.prototype.applyBounds = function (targetView) {\n        this.camera.offset[0] = this.boundsHorizontalOffset(targetView);\n        this.camera.offset[1] = this.boundsVerticalOffset(targetView);\n    };\n    /**\n     * Returns offset on x-axis due to current bounds and anchor.\n     */\n    BasicCameraController.prototype.boundsHorizontalOffset = function (targetView) {\n        var worldTLinScreenSpace = targetView.worldToScreen({ x: this.bounds.worldBounds.left, y: this.bounds.worldBounds.top });\n        var worldBRinScreenSpace = targetView.worldToScreen({ x: this.bounds.worldBounds.right, y: this.bounds.worldBounds.bottom });\n        var widthDifference = (worldBRinScreenSpace.x - worldTLinScreenSpace.x) +\n            this.bounds.screenPadding.left +\n            this.bounds.screenPadding.right -\n            targetView.screenBounds.width;\n        // If the worldBounds are smaller than the screenBounds,\n        // We offset according to the anchoring\n        if (widthDifference < 0) {\n            return this.anchoredByBoundsHorizontal(targetView);\n        }\n        if (worldBRinScreenSpace.x < (targetView.screenBounds.right - this.bounds.screenPadding.right)) {\n            return (-this.bounds.worldBounds.right + (targetView.screenBounds.width - this.bounds.screenPadding.right) / this.camera.scale[0]);\n        }\n        if (worldTLinScreenSpace.x > (targetView.screenBounds.left + this.bounds.screenPadding.left)) {\n            return (-this.bounds.worldBounds.left + (this.bounds.screenPadding.left / this.camera.scale[0]));\n        }\n        return this.camera.offset[0];\n    };\n    /**\n     * Returns offset on y-axis due to current bounds and anchor.\n     */\n    BasicCameraController.prototype.boundsVerticalOffset = function (targetView) {\n        var worldTLinScreenSpace = targetView.worldToScreen({ x: this.bounds.worldBounds.left, y: this.bounds.worldBounds.top });\n        var worldBRinScreenSpace = targetView.worldToScreen({ x: this.bounds.worldBounds.right, y: this.bounds.worldBounds.bottom });\n        var heightDifference = (worldBRinScreenSpace.y - worldTLinScreenSpace.y) +\n            this.bounds.screenPadding.top +\n            this.bounds.screenPadding.bottom -\n            targetView.screenBounds.height;\n        // If the viewBounds are larger than the screenBounds,\n        // We offset according to the anchoring\n        if (heightDifference < 0) {\n            return this.anchoredByBoundsVertical(targetView);\n        }\n        if (worldTLinScreenSpace.y > targetView.screenBounds.top - this.bounds.screenPadding.top) {\n            return (-(this.bounds.worldBounds.top - (this.bounds.screenPadding.top / this.camera.scale[1])));\n        }\n        if (worldBRinScreenSpace.y < targetView.screenBounds.bottom + this.bounds.screenPadding.bottom) {\n            return (-(this.bounds.worldBounds.bottom + ((-targetView.screenBounds.height + this.bounds.screenPadding.bottom) / this.camera.scale[1])));\n        }\n        return this.camera.offset[1];\n    };\n    /**\n     * Calculation for adhering to an anchor - x-axis offset only.\n     */\n    BasicCameraController.prototype.anchoredByBoundsHorizontal = function (targetView) {\n        switch (this.bounds.anchor) {\n            case CameraBoundsAnchor.TOP_LEFT:\n            case CameraBoundsAnchor.MIDDLE_LEFT:\n            case CameraBoundsAnchor.BOTTOM_LEFT:\n                return -(this.bounds.worldBounds.left -\n                    this.bounds.screenPadding.left / this.camera.scale[0]);\n            case CameraBoundsAnchor.TOP_MIDDLE:\n            case CameraBoundsAnchor.MIDDLE:\n            case CameraBoundsAnchor.BOTTOM_MIDDLE:\n                return -(this.bounds.worldBounds.right - (this.bounds.worldBounds.width / 2) -\n                    (0.5 * ((targetView.screenBounds.width + this.bounds.screenPadding.right) / this.camera.scale[0])));\n            case CameraBoundsAnchor.TOP_RIGHT:\n            case CameraBoundsAnchor.MIDDLE_RIGHT:\n            case CameraBoundsAnchor.BOTTOM_RIGHT:\n                return -(this.bounds.worldBounds.right - ((targetView.screenBounds.width - this.bounds.screenPadding.right) / this.camera.scale[0]));\n        }\n    };\n    /**\n     * Calculation for adhering to an anchor - y-axis offset only.\n     */\n    BasicCameraController.prototype.anchoredByBoundsVertical = function (targetView) {\n        switch (this.bounds.anchor) {\n            case CameraBoundsAnchor.TOP_LEFT:\n            case CameraBoundsAnchor.TOP_MIDDLE:\n            case CameraBoundsAnchor.TOP_RIGHT:\n                return -(this.bounds.worldBounds.top) -\n                    (-this.bounds.screenPadding.top / this.scale[1]);\n            case CameraBoundsAnchor.MIDDLE_LEFT:\n            case CameraBoundsAnchor.MIDDLE:\n            case CameraBoundsAnchor.MIDDLE_RIGHT:\n                return -(this.bounds.worldBounds.bottom - (this.bounds.worldBounds.height / 2)) +\n                    ((0.5 * (targetView.screenBounds.height - this.bounds.screenPadding.bottom) / this.scale[1]));\n            case CameraBoundsAnchor.BOTTOM_LEFT:\n            case CameraBoundsAnchor.BOTTOM_MIDDLE:\n            case CameraBoundsAnchor.BOTTOM_RIGHT:\n                return -(this.bounds.worldBounds.bottom -\n                    (targetView.screenBounds.height - this.bounds.screenPadding.bottom) / this.scale[1]);\n        }\n    };\n    // These are the currently Unused responses for this controller\n    BasicCameraController.prototype.handleMouseOut = function (e) { };\n    BasicCameraController.prototype.handleClick = function (e) { };\n    BasicCameraController.prototype.handleMouseMove = function (e) { };\n    BasicCameraController.prototype.handleMouseOver = function (e) { };\n    /**\n     * Evaluates the world bounds the specified view is observing\n     *\n     * @param viewId The id of the view when the view was generated when the surface was made\n     */\n    BasicCameraController.prototype.getRange = function (viewId) {\n        /** Get the projections for the provided view */\n        var projection = this.getProjection(viewId);\n        /** Get the bounds on the screen for the indicated view */\n        var screenBounds = this.getViewScreenBounds(viewId);\n        // Make sure we have a valid projection and screen bounds to make the adjustment\n        if (projection && screenBounds) {\n            /** Get the current viewed world bounds of the view */\n            var topLeft = projection.screenToWorld(screenBounds);\n            var bottomRight = projection.screenToWorld({ x: screenBounds.right, y: screenBounds.bottom });\n            return new bounds_1.Bounds({\n                height: bottomRight.y - topLeft.y,\n                width: bottomRight.x - topLeft.x,\n                x: topLeft.x,\n                y: topLeft.y,\n            });\n        }\n        return new bounds_1.Bounds({ x: 0, y: 0, width: 1, height: 1 });\n    };\n    /**\n     * This lets you set the visible range of a view based on the view's camera. This will probably not work\n     * as expected if the view indicated and this controller do not share the same camera.\n     *\n     * @param viewId The id of the view when the view was generated when the surface was made\n     */\n    BasicCameraController.prototype.setRange = function (newWorld, viewId) {\n        /** Get the projections for the provided view */\n        var projection = this.getProjection(viewId);\n        /** Get the bounds on the screen for the indicated view */\n        var screenBounds = this.getViewScreenBounds(viewId);\n        /** Get the view the range is being applied towards */\n        var view = this.getView(viewId);\n        // Make sure we have a valid projection and screen bounds to make the adjustment\n        if (projection && screenBounds && view) {\n            var deltaScale = util_1.subtract3([\n                screenBounds.width / newWorld.width,\n                screenBounds.height / newWorld.height,\n                1,\n            ], this.camera.scale);\n            this.camera.scale = util_1.add3(this.camera.scale, this.scaleFilter(deltaScale, view, [view]));\n            var deltaPan = util_1.subtract3([\n                -newWorld.x,\n                -newWorld.y,\n                0,\n            ], this.camera.offset);\n            this.camera.offset = util_1.add3(this.camera.offset, this.scaleFilter(deltaPan, view, [view]));\n            // Bound the camera to the specified bounding range\n            this.applyBounds(view);\n            // Broadcast the change occurred\n            this.onRangeChanged(this.camera, view);\n        }\n    };\n    return BasicCameraController;\n}(event_manager_1.EventManager));\nexports.BasicCameraController = BasicCameraController;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./basic-camera-controller\"));\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float borderSize;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  vertexColor = color * color.a;\\n  gl_PointSize = radius * 2.0 * pixelRatio;\\n  borderSize = ((thickness * pixelRatio) / gl_PointSize) * 2.0;\\n  edgeSharpness = mix(0.8, 0.01, min(gl_PointSize / (45.0 * pixelRatio), 1.0));\\n  gl_Position = clipSpace(vec3(center, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\n/** This is the color of the ring */\\nvarying vec4 vertexColor;\\n/**\\n * This is how sharp the ring renders. For tiny rings, it's best to have\\n * less sharpness to better convey the shape of a circle. A good starter setting:\\n * edgeSharpness = mix(0.8, 0.01, min(gl_PointSize / 45.0, 1.0));\\n */\\nvarying float edgeSharpness;\\n/**\\n * This should be a value that sets the thickness of the ring in normal space\\n * relative to the PointSize\\n */\\nvarying float borderSize;\\n/**\\n * This is the ([0 - 1], [0 - 1])\\n */\\nvarying vec2 pointCoord;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius + (radius * 0.01),\\n    dot(dist, dist) * 4.0\\n  );\\n}\\n\\nvoid main() {\\n  float outer_step_factor = circle(gl_PointCoord.xy, 1.0);\\n  float inner_step_factor = circle(gl_PointCoord.xy, 1.0 - borderSize);\\n\\n  gl_FragColor = mix(\\n    mix(                        // Select the outer color outside of the inner radius\\n      vec4(0.0, 0.0, 0.0, 0.0),    // Select invisible outside of inner and outer radius\\n      vertexColor,                  // Select outer color outside of inner, but inside outer\\n      outer_step_factor\\n    ),\\n    vec4(0.0, 0.0, 0.0, 0.0),                 // Select inner color inside inner\\n    inner_step_factor\\n  );\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar max = Math.max;\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar RingLayer = /** @class */ (function (_super) {\n    __extends(RingLayer, _super);\n    function RingLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    RingLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given circle\n            boundsAccessor: function (ring) { return new primitives_1.Bounds({\n                height: ring.radius * 2,\n                width: ring.radius * 2,\n                x: ring.x - ring.radius,\n                y: ring.y - ring.radius,\n            }); },\n            // Provide a precise hit test for the ring\n            hitTest: function (ring, point, view) {\n                var r = ring.radius / max.apply(void 0, view.camera.scale);\n                var delta = [\n                    point.x - ring.x,\n                    point.y - ring.y,\n                ];\n                return (delta[0] * delta[0] + delta[1] * delta[1]) < (r * r);\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    RingLayer.prototype.initShader = function () {\n        return {\n            fs: require('./ring-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'center',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'radius',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.radius]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.color; },\n                },\n                {\n                    block: 2,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'thickness',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.thickness]; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (_) { return [1]; },\n                },\n                {\n                    name: 'atlas',\n                    size: types_1.UniformSize.ONE,\n                    update: function (_) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    defaults: [0],\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (_) { return [0, 0, 0]; },\n                },\n            ],\n            vertexCount: 1,\n            vs: require('./ring-layer.vs'),\n        };\n    };\n    RingLayer.prototype.getModelType = function () {\n        return {\n            modelType: Three.Points,\n        };\n    };\n    RingLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return RingLayer;\n}(layer_1.Layer));\nexports.RingLayer = RingLayer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar util_1 = require(\"../../util\");\nvar RingInstance = /** @class */ (function (_super) {\n    __extends(RingInstance, _super);\n    function RingInstance(options) {\n        var _this = _super.call(this, options) || this;\n        _this.color = [1.0, 1.0, 1.0, 1.0];\n        _this.depth = 0;\n        _this.radius = 0;\n        _this.thickness = 1;\n        _this.x = 0;\n        _this.y = 0;\n        _this.color = options.color || [1, 1, 1, 1];\n        _this.depth = options.depth || 0;\n        _this.radius = options.radius;\n        _this.thickness = options.thickness || _this.thickness;\n        _this.x = options.x;\n        _this.y = options.y;\n        return _this;\n    }\n    Object.defineProperty(RingInstance.prototype, \"width\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RingInstance.prototype, \"height\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RingInstance.prototype, \"innerRadius\", {\n        get: function () {\n            return this.radius - this.thickness;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        mobx_1.observable\n    ], RingInstance.prototype, \"color\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RingInstance.prototype, \"depth\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RingInstance.prototype, \"radius\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RingInstance.prototype, \"thickness\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RingInstance.prototype, \"x\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RingInstance.prototype, \"y\", void 0);\n    __decorate([\n        mobx_1.computed\n    ], RingInstance.prototype, \"width\", null);\n    __decorate([\n        mobx_1.computed\n    ], RingInstance.prototype, \"height\", null);\n    __decorate([\n        mobx_1.computed\n    ], RingInstance.prototype, \"innerRadius\", null);\n    return RingInstance;\n}(util_1.Instance));\nexports.RingInstance = RingInstance;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./ring-instance\"));\n__export(require(\"./ring-layer\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar instance_1 = require(\"../../util/instance\");\nvar types_1 = require(\"../types\");\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nvar anchorCalculator = (_a = {},\n    _a[types_1.AnchorType.TopLeft] = function (anchor, rectangle) {\n        anchor.x = -anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopMiddle] = function (anchor, rectangle) {\n        anchor.x = rectangle.width / 2.0;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopRight] = function (anchor, rectangle) {\n        anchor.x = rectangle.width + anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.MiddleLeft] = function (anchor, rectangle) {\n        anchor.x = -anchor.padding;\n        anchor.y = rectangle.height / 2;\n    },\n    _a[types_1.AnchorType.Middle] = function (anchor, rectangle) {\n        anchor.x = rectangle.width / 2.0;\n        anchor.y = rectangle.height / 2.0;\n    },\n    _a[types_1.AnchorType.MiddleRight] = function (anchor, rectangle) {\n        anchor.x = rectangle.width + anchor.padding;\n        anchor.y = rectangle.height / 2.0;\n    },\n    _a[types_1.AnchorType.BottomLeft] = function (anchor, rectangle) {\n        anchor.x = -anchor.padding;\n        anchor.y = rectangle.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomMiddle] = function (anchor, rectangle) {\n        anchor.x = rectangle.width / 2.0;\n        anchor.y = rectangle.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomRight] = function (anchor, rectangle) {\n        anchor.x = rectangle.width + anchor.padding;\n        anchor.y = rectangle.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.Custom] = function (anchor, rectangle) {\n        anchor.x = anchor.x || 0;\n        anchor.y = anchor.y || 0;\n    },\n    _a);\n/**\n * This generates a new rectangle instance which will render a single line of text for a given layer.\n * There are restrictions surrounding rectangles due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a rectangle via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Rectangles should only be so long.\n * - Multiline is not supported inherently\n * - Once a rectangle is constructed, only SOME properties can be altered thereafter\n *\n * A rectangle that is constructed can only have some properties set upon creating the rectangle and are locked\n * thereafter. The only way to modify them would be to destroy the rectangle, then construct a new rectangle\n * with the modifications. This has to deal with performance regarding rasterizing the rectangle\n */\nvar RectangleInstance = /** @class */ (function (_super) {\n    __extends(RectangleInstance, _super);\n    function RectangleInstance(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the rendered color of the rectangle */\n        _this.color = [0, 0, 0, 1];\n        /** Depth sorting of the rectangle (or the z value of the lable) */\n        _this.depth = 0;\n        /** The height of the rectangle as it is to be rendered in world space */\n        _this.height = 1;\n        /** Sets the way the rectangle scales with the world */\n        _this.scaling = types_1.ScaleType.BOUND_MAX;\n        /** The width of the rectangle as it is to be rendered in world space */\n        _this.width = 1;\n        /** The x coordinate where the rectangle will be anchored to in world space */\n        _this.x = 0;\n        /** The y coordinate where the rectangle will be anchored to in world space */\n        _this.y = 0;\n        // These are properties that can be altered, but have side effects from being changed\n        /** This is the anchor location on the  */\n        _this._anchor = {\n            padding: 0,\n            type: types_1.AnchorType.TopLeft,\n            x: 0,\n            y: 0,\n        };\n        _this.depth = options.depth || _this.depth;\n        _this.color = options.color || _this.color;\n        _this.scaling = options.scaling || _this.scaling;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        _this.width = options.width || 1;\n        _this.height = options.height || 1;\n        // Make sure the anchor is set to the appropriate location\n        options.anchor && _this.setAnchor(options.anchor);\n        return _this;\n    }\n    Object.defineProperty(RectangleInstance.prototype, \"anchor\", {\n        get: function () {\n            return this._anchor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This applies a new anchor to this rectangle and properly determines it's anchor position on the rectangle\n     */\n    RectangleInstance.prototype.setAnchor = function (anchor) {\n        var newAnchor = {\n            padding: anchor.padding || 0,\n            type: anchor.type,\n            x: anchor.x || 0,\n            y: anchor.y || 0,\n        };\n        // Calculate the new anchors position values\n        anchorCalculator[newAnchor.type](newAnchor, this);\n        // Apply the anchor\n        this._anchor = newAnchor;\n    };\n    __decorate([\n        mobx_1.observable\n    ], RectangleInstance.prototype, \"color\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RectangleInstance.prototype, \"depth\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RectangleInstance.prototype, \"height\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RectangleInstance.prototype, \"scaling\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RectangleInstance.prototype, \"width\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RectangleInstance.prototype, \"x\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RectangleInstance.prototype, \"y\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RectangleInstance.prototype, \"_anchor\", void 0);\n    __decorate([\n        mobx_1.computed\n    ], RectangleInstance.prototype, \"anchor\", null);\n    return RectangleInstance;\n}(instance_1.Instance));\nexports.RectangleInstance = RectangleInstance;\nvar _a;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the image as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the image is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y;\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float((cameraScale.x > cameraScale.y || cameraScale.y > cameraScale.x) && useScaleMode != 0.0);\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n  // Apply the image's tint as a tint to the image\\n  vertexColor = color * color.a;\\n\\n  // Correct aspect ratio.\\n  size = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * size + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the image\\n  float imageScreenScale = mix(\\n    screenSize.y / size.y,\\n    screenSize.x / size.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the image is supposed to be, then we automagically\\n  // scale down our image to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / imageScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\n\\nvoid main() {\\n  gl_FragColor = vertexColor;\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar types_2 = require(\"../types\");\nvar min = Math.min, max = Math.max;\n/**\n * This layer displays Rectangles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar RectangleLayer = /** @class */ (function (_super) {\n    __extends(RectangleLayer, _super);\n    function RectangleLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    RectangleLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given rectangle\n            boundsAccessor: function (rectangle) {\n                var topLeft = [\n                    rectangle.x - rectangle.anchor.x,\n                    rectangle.y - rectangle.anchor.y,\n                ];\n                return new primitives_1.Bounds({\n                    height: rectangle.height,\n                    width: rectangle.width,\n                    x: topLeft[0],\n                    y: topLeft[1],\n                });\n            },\n            // Provide a precise hit test for the circle\n            hitTest: function (rectangle, point, projection) {\n                // The bounds of the rectangle is in world space, but it does not account for the scale mode of the rectangle.\n                // Here, we will apply the scale mode testing to the rectangle\n                var maxScale = max.apply(void 0, projection.camera.scale);\n                var minScale = min.apply(void 0, projection.camera.scale);\n                // If we scale always then the rectangle stays within it's initial world bounds at all times\n                if (rectangle.scaling === types_2.ScaleType.ALWAYS) {\n                    return true;\n                }\n                // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n                // Rectangle the same size. If the camera zooms out then the bounds === the world bounds.\n                else if (rectangle.scaling === types_2.ScaleType.BOUND_MAX) {\n                    // We are zooming out. the bounds will stay within the world bounds\n                    if (minScale <= 1 && maxScale <= 1) {\n                        return true;\n                    }\n                    // We are zooming in. The bounds will shrink to keep the rectangle at max font size\n                    else {\n                        // The location is within the world, but we reverse project the anchor spread\n                        var topLeft = [\n                            rectangle.x - (rectangle.anchor.x / maxScale),\n                            rectangle.y - (rectangle.anchor.y / maxScale),\n                        ];\n                        // Reverse project the size and we should be within the distorted world coordinates\n                        return new primitives_1.Bounds({\n                            height: rectangle.height / maxScale,\n                            width: rectangle.width / maxScale,\n                            x: topLeft[0],\n                            y: topLeft[1],\n                        }).containsPoint(point);\n                    }\n                }\n                // If we never allow the rectangle to scale, then the bounds will grow and shrink to counter the effects\n                // Of the camera zoom\n                else if (rectangle.scaling === types_2.ScaleType.NEVER) {\n                    // The location is within the world, but we reverse project the anchor spread\n                    var topLeft = projection.worldToScreen({\n                        x: rectangle.x - (rectangle.anchor.x / projection.camera.scale[0]),\n                        y: rectangle.y - (rectangle.anchor.y / projection.camera.scale[1]),\n                    });\n                    var screenPoint = projection.worldToScreen(point);\n                    // Reverse project the size and we should be within the distorted world coordinates\n                    return new primitives_1.Bounds({\n                        height: rectangle.height,\n                        width: rectangle.width,\n                        x: topLeft.x,\n                        y: topLeft.y,\n                    }).containsPoint(screenPoint);\n                }\n                return true;\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    RectangleLayer.prototype.initShader = function () {\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: 0,\n            1: 0,\n            2: 0,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./rectangle-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'location',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'anchor',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.anchor.x, o.anchor.y]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'size',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.width, o.height]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'scaling',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scaling]; },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.color; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (u) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./rectangle-layer.vs'),\n        };\n    };\n    RectangleLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    RectangleLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return RectangleLayer;\n}(layer_1.Layer));\nexports.RectangleLayer = RectangleLayer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./rectangle-layer\"));\n__export(require(\"./rectangle-instance\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar texture_1 = require(\"../../surface/texture\");\nvar instance_1 = require(\"../../util/instance\");\nvar types_1 = require(\"../types\");\n/**\n * This is a lookup to find existing rasterizations for a particularly created label so that every\n * new label does not have to go through the rasterization process.\n */\nvar rasterizationLookUp = new Map();\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nvar anchorCalculator = (_a = {},\n    _a[types_1.AnchorType.TopLeft] = function (anchor, label) {\n        anchor.x = -anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopMiddle] = function (anchor, label) {\n        anchor.x = label.width / 2.0;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopRight] = function (anchor, label) {\n        anchor.x = label.width + anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.MiddleLeft] = function (anchor, label) {\n        anchor.x = -anchor.padding;\n        anchor.y = label.height / 2;\n    },\n    _a[types_1.AnchorType.Middle] = function (anchor, label) {\n        anchor.x = label.width / 2.0;\n        anchor.y = label.height / 2.0;\n    },\n    _a[types_1.AnchorType.MiddleRight] = function (anchor, label) {\n        anchor.x = label.width + anchor.padding;\n        anchor.y = label.height / 2.0;\n    },\n    _a[types_1.AnchorType.BottomLeft] = function (anchor, label) {\n        anchor.x = -anchor.padding;\n        anchor.y = label.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomMiddle] = function (anchor, label) {\n        anchor.x = label.width / 2.0;\n        anchor.y = label.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomRight] = function (anchor, label) {\n        anchor.x = label.width + anchor.padding;\n        anchor.y = label.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.Custom] = function (anchor, label) {\n        anchor.x = anchor.x || 0;\n        anchor.y = anchor.y || 0;\n    },\n    _a);\n/**\n * This generates a new label instance which will render a single line of text for a given layer.\n * There are restrictions surrounding labels due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a label via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Labels should only be so long.\n * - Multiline is not supported inherently\n * - Once a label is constructed, only SOME properties can be altered thereafter\n *\n * A label that is constructed can only have some properties set upon creating the label and are locked\n * thereafter. The only way to modify them would be to destroy the label, then construct a new label\n * with the modifications. This has to deal with performance regarding rasterizing the label\n */\nvar LabelInstance = /** @class */ (function (_super) {\n    __extends(LabelInstance, _super);\n    function LabelInstance(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the rendered color of the label */\n        _this.color = [0, 0, 0, 1];\n        /** Depth sorting of the label (or the z value of the label) */\n        _this.depth = 0;\n        /** Sets the way the label scales with the world */\n        _this.scaling = types_1.ScaleType.BOUND_MAX;\n        /** Scales the label uniformly */\n        _this.scale = 1.0;\n        /** The x coordinate where the label will be anchored to in world space */\n        _this.x = 0;\n        /** The y coordinate where the label will be anchored to in world space */\n        _this.y = 0;\n        // The following properties are properties that are locked in after creating this label\n        // As the properties are completely locked into how the label was rasterized and can not\n        // Nor should not be easily adjusted for performance concerns\n        _this._cssFont = '';\n        _this._fontFamily = 'Arial';\n        _this._fontSize = 12;\n        _this._fontStyle = 'normal';\n        _this._fontWeight = 400;\n        _this._maxWidth = 0;\n        _this._text = '';\n        _this._width = 0;\n        _this._height = 0;\n        _this._isDestroyed = false;\n        // These are properties that can be altered, but have side effects from being changed\n        /** This is the anchor location on the  */\n        _this._anchor = {\n            padding: 0,\n            type: types_1.AnchorType.TopLeft,\n            x: 0,\n            y: 0,\n        };\n        _this.depth = options.depth || _this.depth;\n        _this.color = options.color || _this.color;\n        _this.scaling = options.scaling || _this.scaling;\n        _this.scale = options.scale || _this.scale;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        _this._fontFamily = options.fontFamily || _this._fontFamily;\n        _this._fontSize = options.fontSize || _this._fontSize;\n        _this._fontStyle = options.fontStyle || _this._fontStyle;\n        _this._fontWeight = options.fontWeight || _this._fontWeight;\n        _this._maxWidth = options.maxWidth || 0;\n        _this._text = options.text || _this._text;\n        // We get the CSS font string for this label so we can uniquely identify the rasterization\n        // Easily.\n        _this._cssFont = texture_1.LabelRasterizer.makeCSSFont(_this, 1);\n        // This is css font used to look up rasterizations. This lookup includes the max width of the label\n        // Which the css font does not account for\n        var cssFontLookup = _this._cssFont + \"_\" + _this._maxWidth;\n        // Look for other same texts that have been rasterized\n        var rasterizations = rasterizationLookUp.get(_this._text);\n        var rasterization;\n        if (rasterizations) {\n            // Look for those texts that have been rasterized in the same fashion that this label is requesting\n            rasterization = rasterizations.get(cssFontLookup);\n            // If a rasterization exists, we must increment the use reference\n            if (rasterization) {\n                rasterization.references++;\n            }\n        }\n        else {\n            rasterizations = new Map();\n        }\n        // If we have not found an existing rasterization\n        if (!rasterization) {\n            rasterization = {\n                references: 1,\n                resource: new texture_1.LabelAtlasResource(_this),\n            };\n            // Look to see if any rasterization options were specified\n            if (options.rasterization) {\n                rasterization.resource.sampleScale = options.rasterization.scale || 1.0;\n            }\n            // Ensure the sample scale is set. Defaults to 1.0\n            rasterization.resource.sampleScale = rasterization.resource.sampleScale || 1.0;\n            // Rasterize the resource generated for this label. We need it immediately rasterized so\n            // That we can utilize the dimensions for calculations.\n            texture_1.LabelRasterizer.renderSync(rasterization.resource);\n            // Now that we have an official rasterization for this text / label combo, we shall store it\n            // For others to look up\n            rasterizationLookUp.set(_this._text, rasterizations);\n            rasterizations.set(cssFontLookup, rasterization);\n        }\n        _this._rasterization = rasterization;\n        _this._width = rasterization.resource.rasterization.world.width;\n        _this._height = rasterization.resource.rasterization.world.height;\n        // Make sure the anchor is set to the appropriate location\n        options.anchor && _this.setAnchor(options.anchor);\n        return _this;\n    }\n    Object.defineProperty(LabelInstance.prototype, \"cssFont\", {\n        // The following are the getters for the locked in parameters of the label so we can read\n        // The properties but not set any of them.\n        /**\n         * This is the full css string that represents this label. This + the text of the label is essentially\n         * a unique identifier for the rendering of the label and is used to key the rasterization of the label\n         * so that label rasterization can be shared for similar labels.\n         */\n        get: function () { return this._cssFont; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"isDestroyed\", {\n        /** This flag indicates if this label is valid anymore */\n        get: function () { return this._isDestroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontFamily\", {\n        /** This is the font family of the label */\n        get: function () { return this._fontFamily; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontSize\", {\n        /**\n         * This is the size of the label in pixels. For Labels, this correlates to the rendering font size.\n         * The true pixel height of the label is calculated and placed into the height property for the label.\n         */\n        get: function () { return this._fontSize; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontStyle\", {\n        /** This is the style of the font (italic, oblique, etc) */\n        get: function () { return this._fontStyle; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontWeight\", {\n        /** This is the font weight specified for the label (bold, normal, etc). */\n        get: function () { return this._fontWeight; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"maxWidth\", {\n        /** This is the max width in pixels this label can fill */\n        get: function () { return this._maxWidth; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"resource\", {\n        /** This gets the atlas resource that is uniquely identified for this label */\n        get: function () { return this._rasterization.resource; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"text\", {\n        /** This is the label's text. */\n        get: function () { return this._text; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"truncatedText\", {\n        /**\n         * If a maxWidth is specified, there is a chance the text will be truncated.\n         * This provides the calculated truncated text.\n         */\n        get: function () { return this._rasterization.resource.truncatedText || this.text; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"width\", {\n        /**\n         * This is the width in world space of the label. If there is no camera distortion,\n         * this would be the width of the label in pixels on the screen.\n         */\n        get: function () {\n            return this._width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"height\", {\n        /**\n         * This is the height in world space of the label. If there is no camera distortion,\n         * this would be the height of the label in pixels on the screen.\n         */\n        get: function () {\n            return this._height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Labels are a sort of unique case where the use of a label should be destroyed as rasterization\n     * resources are in a way kept alive through reference counting.\n     */\n    LabelInstance.prototype.destroy = function () {\n        if (!this._isDestroyed) {\n            this._isDestroyed = true;\n            this._rasterization.references--;\n            // If all references are cleared, then the rasterization needs to be eradicated\n            if (this._rasterization.references === 0) {\n                this._rasterization.resource;\n            }\n        }\n    };\n    Object.defineProperty(LabelInstance.prototype, \"anchor\", {\n        get: function () {\n            return this._anchor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This applies a new anchor to this label and properly determines it's anchor position on the label\n     */\n    LabelInstance.prototype.setAnchor = function (anchor) {\n        var newAnchor = {\n            padding: anchor.padding || 0,\n            type: anchor.type,\n            x: anchor.x || 0,\n            y: anchor.y || 0,\n        };\n        // Calculate the new anchors position values\n        anchorCalculator[newAnchor.type](newAnchor, this);\n        // Apply the anchor\n        this._anchor = newAnchor;\n    };\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"color\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"depth\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"scaling\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"scale\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"x\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"y\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"_anchor\", void 0);\n    __decorate([\n        mobx_1.computed\n    ], LabelInstance.prototype, \"anchor\", null);\n    return LabelInstance;\n}(instance_1.Instance));\nexports.LabelInstance = LabelInstance;\nvar _a;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the label as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the label is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y || screenSize.x > size.x;\\n\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float(cameraScale.x != cameraScale.y);\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n\\n  // Correct aspect ratio.\\n  size = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // apply scaling\\n  size *= scale;\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // Get the position of the current vertex\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * size + location - adjustedAnchor;\\n  // Get the tex coord from our inject texture info\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the label's color as a tint to the label (all labels are rendered white to the base texture)\\n  vertexColor = color;\\n\\n  // See how scaled the size on screen will be from the actual height of the label\\n  float labelScreenScale = mix(\\n    screenSize.y / size.y,\\n    screenSize.x / size.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the label is supposed to be, then we automagically\\n  // scale down our label to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / labelScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  gl_FragColor = texture2D(labelAtlas, texCoord) * vertexColor;\\n  gl_FragColor *= gl_FragColor.a;\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar types_2 = require(\"../types\");\nvar max = Math.max, min = Math.min;\n/**\n * This layer displays Labels and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar LabelLayer = /** @class */ (function (_super) {\n    __extends(LabelLayer, _super);\n    function LabelLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    LabelLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given label\n            boundsAccessor: function (label) {\n                var topLeft = [\n                    label.x - label.anchor.x,\n                    label.y - label.anchor.y,\n                ];\n                return new primitives_1.Bounds({\n                    height: label.height,\n                    width: label.width,\n                    x: topLeft[0],\n                    y: topLeft[1],\n                });\n            },\n            // Provide a precise hit test for the circle\n            hitTest: function (label, point, view) {\n                // The bounds of the label is in world space, but it does not account for the scale mode of the label.\n                // Here, we will apply the scale mode testing to the label\n                var maxScale = max.apply(void 0, view.camera.scale);\n                var minScale = min.apply(void 0, view.camera.scale);\n                // If we scale always then the label stays within it's initial world bounds at all times\n                if (label.scaling === types_2.ScaleType.ALWAYS) {\n                    return true;\n                }\n                // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n                // Label the same size. If the camera zooms out then the bounds === the world bounds.\n                else if (label.scaling === types_2.ScaleType.BOUND_MAX) {\n                    // We are zooming out. the bounds will stay within the world bounds\n                    if (minScale <= 1 && maxScale <= 1) {\n                        return true;\n                    }\n                    // We are zooming in. The bounds will shrink to keep the label at max font size\n                    else {\n                        // The location is within the world, but we reverse project the anchor spread\n                        var topLeft = view.worldToScreen({\n                            x: label.x - (label.anchor.x / view.camera.scale[0]),\n                            y: label.y - (label.anchor.y / view.camera.scale[1]),\n                        });\n                        var screenPoint = view.worldToScreen(point);\n                        // Reverse project the size and we should be within the distorted world coordinates\n                        return new primitives_1.Bounds({\n                            height: label.height,\n                            width: label.width,\n                            x: topLeft.x,\n                            y: topLeft.y,\n                        }).containsPoint(screenPoint);\n                    }\n                }\n                // If we never allow the label to scale, then the bounds will grow and shrink to counter the effects\n                // Of the camera zoom\n                else if (label.scaling === types_2.ScaleType.NEVER) {\n                    // The location is within the world, but we reverse project the anchor spread\n                    var topLeft = view.worldToScreen({\n                        x: label.x - (label.anchor.x / view.camera.scale[0]),\n                        y: label.y - (label.anchor.y / view.camera.scale[1]),\n                    });\n                    var screenPoint = view.worldToScreen(point);\n                    // Reverse project the size and we should be within the distorted world coordinates\n                    return new primitives_1.Bounds({\n                        height: label.height,\n                        width: label.width,\n                        x: topLeft.x,\n                        y: topLeft.y,\n                    }).containsPoint(screenPoint);\n                }\n                return true;\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    LabelLayer.prototype.initShader = function () {\n        var _this = this;\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: 0,\n            1: 0,\n            2: 0,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./label-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'location',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'anchor',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.anchor.x, o.anchor.y]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'size',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.width, o.height]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'scaling',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scaling]; },\n                },\n                {\n                    atlas: {\n                        key: this.props.atlas,\n                        name: 'labelAtlas',\n                    },\n                    block: 2,\n                    name: 'texture',\n                    update: function (o) { return _this.resource.request(_this, o, o.resource); },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.color; },\n                },\n                {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'scale',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scale]; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (u) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./label-layer.vs'),\n        };\n    };\n    LabelLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    LabelLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return LabelLayer;\n}(layer_1.Layer));\nexports.LabelLayer = LabelLayer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./label-layer\"));\n__export(require(\"./label-instance\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar texture_1 = require(\"../../surface/texture\");\nvar instance_1 = require(\"../../util/instance\");\nvar types_1 = require(\"../types\");\n/**\n * This is a lookup to find existing rasterizations for a particularly created image so that every\n * new image does not have to go through the rasterization process.\n */\nvar rasterizationLookUp = new Map();\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nvar anchorCalculator = (_a = {},\n    _a[types_1.AnchorType.TopLeft] = function (anchor, image) {\n        anchor.x = -anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopMiddle] = function (anchor, image) {\n        anchor.x = image.width / 2.0;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopRight] = function (anchor, image) {\n        anchor.x = image.width + anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.MiddleLeft] = function (anchor, image) {\n        anchor.x = -anchor.padding;\n        anchor.y = image.height / 2;\n    },\n    _a[types_1.AnchorType.Middle] = function (anchor, image) {\n        anchor.x = image.width / 2.0;\n        anchor.y = image.height / 2.0;\n    },\n    _a[types_1.AnchorType.MiddleRight] = function (anchor, image) {\n        anchor.x = image.width + anchor.padding;\n        anchor.y = image.height / 2.0;\n    },\n    _a[types_1.AnchorType.BottomLeft] = function (anchor, image) {\n        anchor.x = -anchor.padding;\n        anchor.y = image.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomMiddle] = function (anchor, image) {\n        anchor.x = image.width / 2.0;\n        anchor.y = image.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomRight] = function (anchor, image) {\n        anchor.x = image.width + anchor.padding;\n        anchor.y = image.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.Custom] = function (anchor, image) {\n        anchor.x = anchor.x || 0;\n        anchor.y = anchor.y || 0;\n    },\n    _a);\n/**\n * This generates a new image instance which will render a single line of text for a given layer.\n * There are restrictions surrounding images due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a image via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Images should only be so long.\n * - Multiline is not supported inherently\n * - Once a image is constructed, only SOME properties can be altered thereafter\n *\n * A image that is constructed can only have some properties set upon creating the image and are locked\n * thereafter. The only way to modify them would be to destroy the image, then construct a new image\n * with the modifications. This has to deal with performance regarding rasterizing the image\n */\nvar ImageInstance = /** @class */ (function (_super) {\n    __extends(ImageInstance, _super);\n    function ImageInstance(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the rendered color of the image */\n        _this.tint = [0, 0, 0, 1];\n        /** Depth sorting of the image (or the z value of the lable) */\n        _this.depth = 0;\n        /** The height of the image as it is to be rendered in world space */\n        _this.height = 1;\n        /** Sets the way the image scales with the world */\n        _this.scaling = types_1.ScaleType.BOUND_MAX;\n        /** The width of the image as it is to be rendered in world space */\n        _this.width = 1;\n        /** The x coordinate where the image will be anchored to in world space */\n        _this.x = 0;\n        /** The y coordinate where the image will be anchored to in world space */\n        _this.y = 0;\n        // The following properties are properties that are locked in after creating this image\n        // As the properties are completely locked into how the image was rasterized and can not\n        // Nor should not be easily adjusted for performance concerns\n        _this._sourceWidth = 0;\n        _this._sourceHeight = 0;\n        _this._isDestroyed = false;\n        // These are properties that can be altered, but have side effects from being changed\n        /** This is the anchor location on the  */\n        _this._anchor = {\n            padding: 0,\n            type: types_1.AnchorType.TopLeft,\n            x: 0,\n            y: 0,\n        };\n        _this.depth = options.depth || _this.depth;\n        _this.tint = options.tint || _this.tint;\n        _this.scaling = options.scaling || _this.scaling;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        // This is the image that is to be rendered\n        _this._element = options.element;\n        // Look for other same texts that have been rasterized\n        var rasterization = rasterizationLookUp.get(_this._path || _this._element);\n        // If a rasterization exists, we must increment the use reference\n        if (rasterization) {\n            rasterization.references++;\n        }\n        // If we have not found an existing rasterization\n        if (!rasterization) {\n            rasterization = {\n                references: 1,\n                resource: new texture_1.ImageAtlasResource(_this),\n            };\n            // Ensure the sample scale is set. Defaults to 1.0\n            rasterization.resource.sampleScale = rasterization.resource.sampleScale || 1.0;\n            // Rasterize the resource generated for this image. We need it immediately rasterized so\n            // That we can utilize the dimensions for calculations.\n            texture_1.ImageRasterizer.renderSync(rasterization.resource);\n            // Now that we have an official rasterization for this image, we shall store it\n            // For others to look up\n            rasterizationLookUp.set(_this._path || _this._element, rasterization);\n        }\n        _this._rasterization = rasterization;\n        _this._sourceWidth = rasterization.resource.rasterization.world.width;\n        _this._sourceHeight = rasterization.resource.rasterization.world.height;\n        _this.width = options.width || _this._sourceWidth || 1;\n        _this.height = options.height || _this._sourceHeight || 1;\n        // Make sure the anchor is set to the appropriate location\n        options.anchor && _this.setAnchor(options.anchor);\n        return _this;\n    }\n    Object.defineProperty(ImageInstance.prototype, \"element\", {\n        // The following are the getters for the locked in parameters of the image so we can read\n        // The properties but not set any of them.\n        /** This is the provided element this image will be rendering */\n        get: function () { return this._element; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"isDestroyed\", {\n        /** This flag indicates if this image is valid anymore */\n        get: function () { return this._isDestroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"path\", {\n        /** This is the path to the image's resource if it's available */\n        get: function () { return this._path; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"resource\", {\n        /** This gets the atlas resource that is uniquely idenfied for this image */\n        get: function () { return this._rasterization.resource; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"sourceWidth\", {\n        /**\n         * This is the width in world space of the image. If there is no camera distortion,\n         * this would be the width of the image in pixels on the screen.\n         */\n        get: function () {\n            return this._sourceWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"sourceHeight\", {\n        /**\n         * This is the height in world space of the image. If there is no camera distortion,\n         * this would be the height of the image in pixels on the screen.\n         */\n        get: function () {\n            return this._sourceHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Images are a sort of unique case where the use of a image should be destroyed as rasterization\n     * resources are in a way kept alive through reference counting.\n     */\n    ImageInstance.prototype.destroy = function () {\n        if (!this._isDestroyed) {\n            this._isDestroyed = true;\n            this._rasterization.references--;\n            // If all references are cleared, then the rasterization needs to be eradicated\n            if (this._rasterization.references === 0) {\n                this._rasterization.resource;\n                console.warn('The destroy method still needs completion');\n            }\n        }\n    };\n    Object.defineProperty(ImageInstance.prototype, \"anchor\", {\n        get: function () {\n            return this._anchor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This applies a new anchor to this image and properly determines it's anchor position on the image\n     */\n    ImageInstance.prototype.setAnchor = function (anchor) {\n        var newAnchor = {\n            padding: anchor.padding || 0,\n            type: anchor.type,\n            x: anchor.x || 0,\n            y: anchor.y || 0,\n        };\n        // Calculate the new anchors position values\n        anchorCalculator[newAnchor.type](newAnchor, this);\n        // Apply the anchor\n        this._anchor = newAnchor;\n    };\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"tint\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"depth\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"height\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"scaling\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"width\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"x\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"y\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"_anchor\", void 0);\n    __decorate([\n        mobx_1.computed\n    ], ImageInstance.prototype, \"anchor\", null);\n    return ImageInstance;\n}(instance_1.Instance));\nexports.ImageInstance = ImageInstance;\nvar _a;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the image as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the image is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y;\\n\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float(cameraScale.x != cameraScale.y);\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n\\n  // Get the tex coord from our inject texture info\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the image's tint as a tint to the image\\n  vertexColor = tint;\\n\\n  // Correct aspect ratio.\\n  size = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * size + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the image\\n  float imageScreenScale = mix(\\n    screenSize.y / size.y,\\n    screenSize.x / size.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the image is supposed to be, then we automagically\\n  // scale down our image to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / imageScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  gl_FragColor = texture2D(imageAtlas, texCoord) * vertexColor;\\n  gl_FragColor *= gl_FragColor.a;\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar types_2 = require(\"../types\");\nvar min = Math.min, max = Math.max;\n/**\n * This layer displays Images and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar ImageLayer = /** @class */ (function (_super) {\n    __extends(ImageLayer, _super);\n    function ImageLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    ImageLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given image\n            boundsAccessor: function (image) {\n                var topLeft = [\n                    image.x - image.anchor.x,\n                    image.y - image.anchor.y,\n                ];\n                return new primitives_1.Bounds({\n                    height: image.height,\n                    width: image.width,\n                    x: topLeft[0],\n                    y: topLeft[1],\n                });\n            },\n            // Provide a precise hit test for the circle\n            hitTest: function (image, point, view) {\n                // The bounds of the image is in world space, but it does not account for the scale mode of the image.\n                // Here, we will apply the scale mode testing to the image\n                var maxScale = max.apply(void 0, view.camera.scale);\n                var minScale = min.apply(void 0, view.camera.scale);\n                // If we scale always then the image stays within it's initial world bounds at all times\n                if (image.scaling === types_2.ScaleType.ALWAYS) {\n                    return true;\n                }\n                // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n                // Image the same size. If the camera zooms out then the bounds === the world bounds.\n                else if (image.scaling === types_2.ScaleType.BOUND_MAX) {\n                    // We are zooming out. the bounds will stay within the world bounds\n                    if (minScale <= 1 && maxScale <= 1) {\n                        return true;\n                    }\n                    // We are zooming in. The bounds will shrink to keep the image at max font size\n                    else {\n                        // The location is within the world, but we reverse project the anchor spread\n                        var topLeft = view.worldToScreen({\n                            x: image.x - (image.anchor.x / view.camera.scale[0]),\n                            y: image.y - (image.anchor.y / view.camera.scale[1]),\n                        });\n                        var screenPoint = view.worldToScreen(point);\n                        // Reverse project the size and we should be within the distorted world coordinates\n                        return new primitives_1.Bounds({\n                            height: image.height,\n                            width: image.width,\n                            x: topLeft.x,\n                            y: topLeft.y,\n                        }).containsPoint(screenPoint);\n                    }\n                }\n                // If we never allow the image to scale, then the bounds will grow and shrink to counter the effects\n                // Of the camera zoom\n                else if (image.scaling === types_2.ScaleType.NEVER) {\n                    // The location is within the world, but we reverse project the anchor spread\n                    var topLeft = view.worldToScreen({\n                        x: image.x - (image.anchor.x / view.camera.scale[0]),\n                        y: image.y - (image.anchor.y / view.camera.scale[1]),\n                    });\n                    var screenPoint = view.worldToScreen(point);\n                    // Reverse project the size and we should be within the distorted world coordinates\n                    return new primitives_1.Bounds({\n                        height: image.height,\n                        width: image.width,\n                        x: topLeft.x,\n                        y: topLeft.y,\n                    }).containsPoint(screenPoint);\n                }\n                return true;\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    ImageLayer.prototype.initShader = function () {\n        var _this = this;\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: 0,\n            1: 0,\n            2: 0,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./image-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'location',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'anchor',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.anchor.x, o.anchor.y]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'size',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.width, o.height]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'scaling',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scaling]; },\n                },\n                {\n                    atlas: {\n                        key: this.props.atlas,\n                        name: 'imageAtlas',\n                    },\n                    block: 2,\n                    name: 'texture',\n                    update: function (o) { return _this.resource.request(_this, o, o.resource); },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'tint',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.tint; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (u) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./image-layer.vs'),\n        };\n    };\n    ImageLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    ImageLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return ImageLayer;\n}(layer_1.Layer));\nexports.ImageLayer = ImageLayer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./image-layer\"));\n__export(require(\"./image-instance\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar instance_1 = require(\"../../util/instance\");\nvar EdgeInstance = /** @class */ (function (_super) {\n    __extends(EdgeInstance, _super);\n    function EdgeInstance(options) {\n        var _this = _super.call(this, options) || this;\n        _this.colorStart = [1.0, 1.0, 1.0, 1.0];\n        _this.colorEnd = [1.0, 1.0, 1.0, 1.0];\n        _this.control = [[0, 0], [0, 0]];\n        _this.depth = 0;\n        _this.end = [0, 0];\n        _this.start = [0, 0];\n        _this.widthStart = 1.0;\n        _this.widthEnd = 1.0;\n        _this.colorStart = options.colorStart || _this.colorStart;\n        _this.colorEnd = options.colorEnd || _this.colorEnd;\n        _this.control = options.control || _this.control;\n        _this.depth = options.depth || _this.depth;\n        _this.end = options.end || _this.end;\n        _this.widthStart = options.widthStart || _this.widthStart;\n        _this.widthEnd = options.widthEnd || _this.widthEnd;\n        _this.start = options.start || _this.start;\n        return _this;\n    }\n    Object.defineProperty(EdgeInstance.prototype, \"length\", {\n        get: function () {\n            var delta = [\n                this.end[0] - this.start[0],\n                this.end[1] - this.start[1],\n            ];\n            return Math.sqrt(delta[0] * delta[0] + delta[1] * delta[1]);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EdgeInstance.prototype, \"midpoint\", {\n        /**\n         * Calculates the midpoint of the edge\n         */\n        get: function () {\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EdgeInstance.prototype, \"perpendicular\", {\n        /**\n         * Calculates a perpendicular direction vector to the edge\n         */\n        get: function () {\n            var length = this.length;\n            return [\n                (this.end[1] - this.start[1]) / length,\n                -(this.end[0] - this.start[0]) / length,\n            ];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Applies the edge width to the start and end\n     */\n    EdgeInstance.prototype.setEdgeWidth = function (width) {\n        if (width) {\n            this.widthEnd = width;\n            this.widthStart = width;\n        }\n    };\n    /**\n     * Applies the color to the start and end\n     */\n    EdgeInstance.prototype.setColor = function (color) {\n        this.colorStart = color;\n        this.colorEnd = color;\n    };\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"colorStart\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"colorEnd\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"control\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"depth\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"end\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"start\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"widthStart\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"widthEnd\", void 0);\n    __decorate([\n        mobx_1.computed\n    ], EdgeInstance.prototype, \"length\", null);\n    __decorate([\n        mobx_1.computed\n    ], EdgeInstance.prototype, \"midpoint\", null);\n    __decorate([\n        mobx_1.computed\n    ], EdgeInstance.prototype, \"perpendicular\", null);\n    return EdgeInstance;\n}(instance_1.Instance));\nexports.EdgeInstance = EdgeInstance;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\n\\nvoid main() {\\n  gl_FragColor = vertexColor;\\n}\\n\"","module.exports = \"/**\\n  This vertex shader calculates edges based in world space to make an edge based on\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nprecision highp float;\\n\\nvarying vec4 vertexColor;\\n\\n// Interpolation type injection\\n${interpolation}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n\\n  // Convert our world points to screen space\\n  vec4 startClip = clipSpace(vec3(start, depth));\\n  vec4 endClip = clipSpace(vec3(end, depth));\\n  vec2 startScreen = (startClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  vec2 endScreen = (endClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Controls for this mode are screen space deltas from the end points\\n  vec2 control1 = startScreen + vec2(control.x, -control.y) * scaleFactor;\\n  vec2 control2 = endScreen + vec2(control.z, -control.w) * scaleFactor;\\n\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, startScreen, endScreen, control1, control2);\\n  // Calculate the next and previous segment's location on the line\\n  vec2 prePosition = interpolation(interpolationTime - interpolationIncrement, startScreen, endScreen, control1, control2);\\n  vec2 nextPosition = interpolation(interpolationTime + interpolationIncrement, startScreen, endScreen, control1, control2);\\n\\n  vec2 preLine = prePosition - currentPosition;\\n  vec2 nextLine = nextPosition - currentPosition;\\n\\n  // Get a spliced nromal at the joining of two segments to make a crisper curve\\n  vec2 currentNormal = mix(\\n    // Pick this value if we're at the beginning of the line\\n    normalize(vec2(preLine.y, -preLine.x)),\\n    mix(\\n      // Pick this value when we're between the ends\\n      normalize(vec2(preLine.y, -preLine.x) + vec2(-nextLine.y, nextLine.x)),\\n      // Pick this value if we're at the end of the line\\n      normalize(vec2(-nextLine.y, nextLine.x)),\\n      float(position.x >= 1.0)\\n    ),\\n    float(position.x > 0.0)\\n  );\\n\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (-normal * lineThickness * scaleFactor);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a;\\n\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), startClip.zw);\\n  gl_PointSize = 5.0;\\n}\\n\"","module.exports = \"precision highp float;\\n\\n/**\\n  This vertex shader calculates edges whose curve and width is in screen space where the curve is\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nvarying vec4 vertexColor;\\n\\n// Interpolation type injection\\n${interpolation}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, start, end, control.xy, control.zw);\\n  // Calculate the next and previous segment's location on the line\\n  vec2 prePosition = interpolation(interpolationTime - interpolationIncrement, start, end, control.xy, control.zw);\\n  vec2 nextPosition = interpolation(interpolationTime + interpolationIncrement, start, end, control.xy, control.zw);\\n\\n  vec2 preLine = prePosition - currentPosition;\\n  vec2 nextLine = nextPosition - currentPosition;\\n\\n  // Get a spliced nromal at the joining of two segments to make a crisper curve\\n  vec2 currentNormal = mix(\\n    // Pick this value if we're at the beginning of the line\\n    normalize(vec2(preLine.y, -preLine.x)),\\n    mix(\\n      // Pick this value when we're between the ends\\n      normalize(vec2(preLine.y, -preLine.x) + vec2(-nextLine.y, nextLine.x)),\\n      // Pick this value if we're at the end of the line\\n      normalize(vec2(-nextLine.y, nextLine.x)),\\n      float(position.x >= 1.0)\\n    ),\\n    float(position.x > 0.0)\\n  );\\n\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (normal * lineThickness);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a;\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n  gl_PointSize = 5.0;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  float t1 = 1.0 - t;\\n  return pow(t1, 3.0) * p1 + 3.0 * t * pow(t1, 2.0) * c1 + 3.0 * pow(t, 2.0) * t1 * c2 + pow(t, 3.0) * p2;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return (1.0 - t) * (1.0 - t) * p1 + 2.0 * t * (1.0 - t) * c1 + t * t * p2;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return p1 + (p2 - p1) * t;\\n}\\n\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\nvar vector_1 = require(\"../../util/vector\");\nvar types_1 = require(\"./types\");\nvar pow = Math.pow;\n/** This is an interpolation across a line */\nfunction linear(t, p1, p2, c1, c2) {\n    return vector_1.add2(vector_1.scale2(vector_1.subtract2(p2, p1), t), p1);\n}\n/** This is an interpolation across a bezier curve, single control */\nfunction bezier(t, p1, p2, c1, c2) {\n    return [\n        (1.0 - t) * (1.0 - t) * p1[0] + 2.0 * t * (1.0 - t) * c1[0] + t * t * p2[0],\n        (1.0 - t) * (1.0 - t) * p1[1] + 2.0 * t * (1.0 - t) * c1[1] + t * t * p2[1],\n    ];\n}\n/** This is an interpolation across a bezier curve, double control */\nfunction bezier2(t, p1, p2, c1, c2) {\n    var t1 = 1.0 - t;\n    return [\n        (pow(t1, 3.0) * p1[0]) + (3.0 * t * pow(t1, 2.0) * c1[0]) + (3.0 * pow(t, 2.0) * t1 * c2[0]) + (pow(t, 3.0) * p2[0]),\n        (pow(t1, 3.0) * p1[1]) + (3.0 * t * pow(t1, 2.0) * c1[1]) + (3.0 * pow(t, 2.0) * t1 * c2[1]) + (pow(t, 3.0) * p2[1]),\n    ];\n}\n/** A quick lookup for an interpolation method based on Edge Type */\nvar interpolation = (_a = {},\n    _a[types_1.EdgeType.LINE] = linear,\n    _a[types_1.EdgeType.BEZIER] = bezier,\n    _a[types_1.EdgeType.BEZIER2] = bezier2,\n    _a);\n/** Converts a point array to a point object */\nfunction toPointObject(point) {\n    return {\n        x: point[0],\n        y: point[1],\n    };\n}\n/** Converts a point object to a point array */\nfunction toPointArray(point) {\n    return [\n        point.x,\n        point.y,\n    ];\n}\n/** Takes two points that forms a line then calculates the nearest distance from that line to the third point */\nfunction distanceTo(start, end, p) {\n    // Make a vector from a line point to the indicated point\n    var vector = vector_1.subtract2(start, p);\n    var lineDirection = vector_1.subtract2(end, start);\n    var lineNormal = [lineDirection[1], -lineDirection[0]];\n    var distance = Math.abs(vector_1.dot2(vector, lineNormal)) / vector_1.length2(lineDirection);\n    // The distance is d = |v . r| where v is a unit perpendicular vector to the Line\n    return distance;\n}\n// This sets the number of iterations along a curve we sample to test collisions with\nvar TEST_RESOLUTION = 50;\n/**\n * This generates the picking methods needed for managing PickType.ALL for the edge layer.\n */\nfunction edgePicking(props) {\n    var broadphase = props.broadphase, _a = props.minPickDistance, minPickDistance = _a === void 0 ? 0 : _a, scaleType = props.scaleType, type = props.type;\n    var interpolate = interpolation[props.type];\n    var boundsAccessor = function (edge) {\n        var edgeWidthStart = edge.widthStart / 2 + minPickDistance;\n        var edgeWidthEnd = edge.widthEnd / 2 + minPickDistance;\n        // Encapsulate the endpoints as they are guaranteed to be included in the shape\n        // Each endpoint will be a box that includes the endpoint thickness\n        var bounds = new bounds_1.Bounds({\n            height: edge.widthStart,\n            width: edge.widthStart,\n            x: edge.start[0] - edgeWidthStart,\n            y: edge.start[1] - edgeWidthStart,\n        });\n        bounds.encapsulate(new bounds_1.Bounds({\n            height: edge.widthEnd,\n            width: edge.widthEnd,\n            x: edge.end[0] - edgeWidthEnd,\n            y: edge.end[1] - edgeWidthEnd,\n        }));\n        // Encapsulating the bezier control points is enough of a broadphase for beziers\n        if (props.type === types_1.EdgeType.BEZIER) {\n            bounds.encapsulate({\n                x: edge.control[0][0],\n                y: edge.control[0][1],\n            });\n        }\n        // Encapsulating the bezier control points is enough of a broadphase for beziers\n        else if (props.type === types_1.EdgeType.BEZIER2) {\n            bounds.encapsulate({\n                x: edge.control[0][0],\n                y: edge.control[0][1],\n            });\n            bounds.encapsulate({\n                x: edge.control[1][0],\n                y: edge.control[1][1],\n            });\n        }\n        if (broadphase === types_1.EdgeBroadphase.PASS_X) {\n            bounds.x = Number.MIN_SAFE_INTEGER / 2;\n            bounds.width = Number.MAX_SAFE_INTEGER;\n        }\n        if (broadphase === types_1.EdgeBroadphase.PASS_Y) {\n            bounds.y = Number.MIN_SAFE_INTEGER / 2;\n            bounds.height = Number.MAX_SAFE_INTEGER;\n        }\n        return bounds;\n    };\n    if (scaleType === types_1.EdgeScaleType.SCREEN_CURVE) {\n        return {\n            // Provide the calculated AABB world bounds for a given circle\n            boundsAccessor: boundsAccessor,\n            // Provide a precise hit test for the edge. This method performs all of the rendering\n            // And hit tests within screen space as opposed to world space.\n            hitTest: function (edge, point, view) {\n                point = view.worldToScreen(point);\n                var mouse = [point.x, point.y];\n                var closestIndex = 0;\n                var closestDistance = Number.MAX_VALUE;\n                var secondClosestIndex = 0;\n                var secondClosestDistance = Number.MAX_VALUE;\n                var start = view.worldToScreen(toPointObject(edge.start));\n                var end = view.worldToScreen(toPointObject(edge.end));\n                var control1, control2;\n                if (type === types_1.EdgeType.BEZIER) {\n                    control1 = vector_1.add2(toPointArray(start), edge.control[0]);\n                }\n                else if (type === types_1.EdgeType.BEZIER2) {\n                    control1 = vector_1.add2(toPointArray(start), edge.control[0]);\n                    control2 = vector_1.add2(toPointArray(end), edge.control[1]);\n                }\n                var startPoint = toPointArray(start);\n                var endPoint = toPointArray(end);\n                control1 = edge.control.length > 0 ? control1 : [0, 0];\n                control2 = edge.control.length > 1 ? control2 : [0, 0];\n                // Loop through sample points on the line and find one that is closest to the mouse point as possible\n                for (var i = 0; i < TEST_RESOLUTION; ++i) {\n                    var linePoint = interpolate(i / TEST_RESOLUTION, startPoint, endPoint, control1, control2);\n                    var distance = vector_1.length2(vector_1.subtract2(mouse, linePoint));\n                    if (distance < closestDistance) {\n                        secondClosestIndex = closestIndex;\n                        secondClosestDistance = closestDistance;\n                        closestIndex = i;\n                        closestDistance = distance;\n                    }\n                    else if (distance < secondClosestDistance) {\n                        secondClosestIndex = i;\n                        closestDistance = distance;\n                    }\n                }\n                var t = closestIndex / TEST_RESOLUTION;\n                var lineWidth = (edge.widthEnd - edge.widthStart) * t + edge.widthStart;\n                if (closestIndex === secondClosestIndex) {\n                    return false;\n                }\n                var startSegment = interpolate(closestIndex / TEST_RESOLUTION, startPoint, endPoint, control1, control2);\n                var endSegment = interpolate(secondClosestIndex / TEST_RESOLUTION, startPoint, endPoint, control1, control2);\n                // See how close the mouse is to the line between the two closest points for a more accurate\n                // Test\n                closestDistance = distanceTo(startSegment, endSegment, mouse);\n                // This helps determine if the mouse is beyond the end point\n                if (vector_1.dot2(vector_1.subtract2(endSegment, startSegment), vector_1.subtract2(mouse, startSegment)) < 0) {\n                    return false;\n                }\n                return closestDistance < ((lineWidth / 2.0) + minPickDistance);\n            },\n        };\n    }\n    return {\n        // Provide the calculated AABB world bounds for a given circle\n        boundsAccessor: boundsAccessor,\n        // Provide a precise hit test for the edge\n        hitTest: function (edge, point, view) {\n            var mouse = [point.x, point.y];\n            var closestIndex = 0;\n            var closestDistance = Number.MAX_VALUE;\n            // Loop through sample points on the line and find one that is closest to the mouse point as possible\n            for (var i = 0; i < TEST_RESOLUTION; ++i) {\n                var linePoint = interpolate(i / TEST_RESOLUTION, edge.start, edge.end, edge.control.length > 0 ? edge.control[0] : [0, 0], edge.control.length > 1 ? edge.control[1] : [0, 0]);\n                var distance = vector_1.length2(vector_1.subtract2(mouse, linePoint));\n                if (distance < closestDistance) {\n                    closestIndex = i;\n                    closestDistance = distance;\n                }\n            }\n            var t = closestIndex / TEST_RESOLUTION;\n            var lineWidth = (edge.widthEnd - edge.widthStart) * t + edge.widthStart;\n            return closestDistance < (lineWidth / 2.0);\n        },\n    };\n}\nexports.edgePicking = edgePicking;\nvar _a;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar util_1 = require(\"../../util\");\nvar edge_picking_1 = require(\"./edge-picking\");\nvar types_2 = require(\"./types\");\n/** Converts a control list to an IO value */\nfunction toInstanceIOValue(value) {\n    return [\n        value[0][0],\n        value[0][1],\n        value[1][0],\n        value[1][1],\n    ];\n}\n/** This picks the appropriate shader for the edge type desired */\nvar pickVS = (_a = {},\n    _a[types_2.EdgeType.LINE] = require('./shader/edge-layer-line.vs'),\n    _a[types_2.EdgeType.BEZIER] = require('./shader/edge-layer-bezier.vs'),\n    _a[types_2.EdgeType.BEZIER2] = require('./shader/edge-layer-bezier2.vs'),\n    _a);\n/** This is the base edge layer which is a template that can be filled with the needed specifics for a given line type */\nvar baseVS = require('./shader/edge-layer.vs');\nvar screenVS = require('./shader/edge-layer-screen-curve.vs');\nvar edgeFS = require('./shader/edge-layer.fs');\n/**\n * This layer displays edges and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar EdgeLayer = /** @class */ (function (_super) {\n    __extends(EdgeLayer, _super);\n    function EdgeLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    EdgeLayer.prototype.getInstancePickingMethods = function () {\n        return edge_picking_1.edgePicking(this.props);\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    EdgeLayer.prototype.initShader = function () {\n        var _a = this.props, _b = _a.scaleFactor, scaleFactor = _b === void 0 ? function () { return 1; } : _b, type = _a.type, _c = _a.scaleType, scaleType = _c === void 0 ? types_2.EdgeScaleType.NONE : _c;\n        var MAX_SEGMENTS = type === types_2.EdgeType.LINE ? 2 : 50;\n        // Calculate the normals and interpolations for our vertices\n        var vertexToNormal = (_d = {\n                0: 1\n            },\n            _d[MAX_SEGMENTS * 2 + 2] = -1,\n            _d);\n        var vertexInterpolation = (_e = {\n                0: 0\n            },\n            _e[MAX_SEGMENTS * 2 + 2] = 1,\n            _e);\n        var sign = 1;\n        for (var i = 0; i < MAX_SEGMENTS * 2; ++i) {\n            vertexToNormal[i + 1] = sign;\n            vertexInterpolation[i + 1] = Math.floor(i / 2) / (MAX_SEGMENTS - 1);\n            sign *= -1;\n        }\n        var vs = util_1.shaderTemplate(scaleType === types_2.EdgeScaleType.NONE ? baseVS : screenVS, {\n            // Retain the attributes injection\n            attributes: '${attributes}',\n            // Inject the proper interpolation method\n            interpolation: pickVS[type],\n        }, {\n            name: 'Edge Layer',\n            values: [\n                'interpolation',\n            ],\n        });\n        return {\n            fs: edgeFS,\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'start',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return o.start; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'end',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return o.end; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'widthStart',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.widthStart]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.TWO,\n                    name: 'widthEnd',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.widthEnd]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 2,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'colorStart',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.colorStart; },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'colorEnd',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.colorEnd; },\n                },\n                type === types_2.EdgeType.LINE ? {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'control',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return [0, 0, 0, 0]; },\n                } : null,\n                type === types_2.EdgeType.BEZIER ? {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'control',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return [o.control[0][0], o.control[0][1], 0, 0]; },\n                } : null,\n                type === types_2.EdgeType.BEZIER2 ? {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'control',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return toInstanceIOValue(o.control); },\n                } : null,\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (uniform) { return [scaleFactor()]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexInterpolation[vertex],\n                        // The number of vertices\n                        MAX_SEGMENTS * 2,\n                    ]; },\n                },\n            ],\n            vertexCount: MAX_SEGMENTS * 2 + 2,\n            vs: vs.shader,\n        };\n        var _d, _e;\n    };\n    EdgeLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    EdgeLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    // Set default props for the layer\n    EdgeLayer.defaultProps = {\n        broadphase: types_2.EdgeBroadphase.ALL,\n        data: null,\n        key: 'none',\n        scaleType: types_2.EdgeScaleType.NONE,\n        type: types_2.EdgeType.LINE,\n    };\n    return EdgeLayer;\n}(layer_1.Layer));\nexports.EdgeLayer = EdgeLayer;\nvar _a;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./edge-layer\"));\n__export(require(\"./edge-instance\"));\n__export(require(\"./types\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar instance_1 = require(\"../../util/instance\");\nvar CircleInstance = /** @class */ (function (_super) {\n    __extends(CircleInstance, _super);\n    function CircleInstance(options) {\n        var _this = _super.call(this, options) || this;\n        _this.color = [1.0, 1.0, 1.0, 1.0];\n        _this.radius = 0;\n        _this.x = 0;\n        _this.y = 0;\n        _this.depth = 0;\n        _this.color = options.color || _this.color;\n        _this.radius = options.radius || _this.radius;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        _this.depth = options.depth || _this.depth;\n        return _this;\n    }\n    Object.defineProperty(CircleInstance.prototype, \"width\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CircleInstance.prototype, \"height\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        mobx_1.observable\n    ], CircleInstance.prototype, \"color\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], CircleInstance.prototype, \"radius\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], CircleInstance.prototype, \"x\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], CircleInstance.prototype, \"y\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], CircleInstance.prototype, \"depth\", void 0);\n    __decorate([\n        mobx_1.computed\n    ], CircleInstance.prototype, \"width\", null);\n    __decorate([\n        mobx_1.computed\n    ], CircleInstance.prototype, \"height\", null);\n    return CircleInstance;\n}(instance_1.Instance));\nexports.CircleInstance = CircleInstance;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  vertexColor = color * color.a;\\n  gl_PointSize = radius * 2.0 * pixelRatio * scaleFactor;\\n  edgeSharpness = mix(0.8, 0.01, min(gl_PointSize / (45.0 * pixelRatio), 1.0));\\n  gl_Position = clipSpace(vec3(center, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius + (radius * 0.01),\\n    dot(dist, dist) * 4.0\\n  );\\n}\\n\\nvoid main() {\\n  float step_factor = circle(gl_PointCoord.xy, 1.0);\\n  gl_FragColor = mix(\\n    vec4(0.0, 0.0, 0.0, 0.0),\\n    vertexColor,\\n    step_factor\\n  );\\n}\\n\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Calculates the distance between two points, but keeps the distance in dquared form\n * thus performing Math.sqrt() on the output of this distance would provide the true\n * distance between the points.\n *\n * It is often faster and all that is needed to compare squared distances vs real distances\n * thus eliminating multiple Math.sqrt operations\n *\n * NOTE: For vectors this is the same as (pseudo code):\n * let vector3 = vector2.subtract(vector1)\n * return vector3.dot(vector3)\n *\n * @param p1 The point to find the distance from the second point\n * @param p2 The point to find the distance from the first point\n *\n * @return {number} The distance * distance between the two points\n */\nfunction squareDistance(p1, p2) {\n    var dx = p1.x - p2.x;\n    var dy = p1.y - p2.y;\n    return dx * dx + dy * dy;\n}\n/**\n * Contains methods for managing or manipulating points\n *\n * @export\n * @class Point\n */\nvar Point = /** @class */ (function () {\n    function Point() {\n    }\n    /**\n     * Adds two points together\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @return {IPoint} The two points added together\n     */\n    Point.add = function (p1, p2, out) {\n        if (out) {\n            out.x = p1.x + p2.x;\n            out.y = p1.y + p2.y;\n            return out;\n        }\n        return {\n            x: p1.x + p2.x,\n            y: p1.y + p2.y,\n        };\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {IPoint} The closest point to the test point\n     */\n    Point.getClosest = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = null;\n        var distance;\n        var findClosest = function (point) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = point;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * This just returns the index of the found point and not the point itself\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {number} The index of the closest point to the test point\n     */\n    Point.getClosestIndex = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = 0;\n        var distance;\n        var findClosest = function (point, i) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = i;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This will calculate a direction vector between two points that points toward p2\n     *\n     * @param {IPoint} amount The start of the direction\n     * @param {IPoint} from The direction to point the vector towards\n     * @param {boolean} normalize If true, this will make the vector have a magnitude of 1\n     *\n     * @returns {number}\n     */\n    Point.subtract = function (amount, from, normalize) {\n        if (normalize === void 0) { normalize = false; }\n        var dx = from.x - amount.x;\n        var dy = from.y - amount.y;\n        if (normalize) {\n            var magnitude = Math.sqrt(dx * dx + dy * dy);\n            dx /= magnitude;\n            dy /= magnitude;\n        }\n        return {\n            x: dx,\n            y: dy,\n        };\n    };\n    /**\n     * @static\n     * Gets the distance between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {boolean} squared If set to true, returns the distance * distance (performs faster)\n     *\n     * @returns {number} The real distance between two points\n     */\n    Point.getDistance = function (p1, p2, squared) {\n        if (squared === void 0) { squared = false; }\n        if (squared) {\n            return squareDistance(p1, p2);\n        }\n        return Math.sqrt(squareDistance(p1, p2));\n    };\n    /**\n     * @static\n     * Gets a point perfectly between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     *\n     * @returns {IPoint} The point between the two provided points\n     */\n    Point.getMidpoint = function (p1, p2) {\n        var direction = Point.subtract(p1, p2);\n        return {\n            x: direction.x / 2 + p1.x,\n            y: direction.y / 2 + p1.y,\n        };\n    };\n    Point.make = function (x, y) {\n        return { x: x, y: y };\n    };\n    /**\n     * Scales a point by a given amount\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {number} s The amount to scale the point by\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @memberof Point\n     */\n    Point.scale = function (p1, s, out) {\n        if (out) {\n            out.x = p1.x * s;\n            out.y = p1.y * s;\n            return out;\n        }\n        return {\n            x: p1.x * s,\n            y: p1.y * s,\n        };\n    };\n    /**\n     * Makes a new point initialized to {0,0}\n     *\n     * @static\n     * @returns {IPoint} A new point object at {0,0}\n     */\n    Point.zero = function () {\n        return {\n            x: 0,\n            y: 0,\n        };\n    };\n    return Point;\n}());\nexports.Point = Point;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar CircleLayer = /** @class */ (function (_super) {\n    __extends(CircleLayer, _super);\n    function CircleLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    CircleLayer.prototype.getInstancePickingMethods = function () {\n        var _this = this;\n        return {\n            // Provide the calculated AABB world bounds for a given circle\n            boundsAccessor: function (circle) { return new primitives_1.Bounds({\n                height: circle.radius * 2,\n                width: circle.radius * 2,\n                x: circle.x - circle.radius,\n                y: circle.y - circle.radius,\n            }); },\n            // Provide a precise hit test for the circle\n            hitTest: function (circle, point, view) {\n                var circleScreenCenter = view.worldToScreen(circle);\n                var mouseScreen = view.worldToScreen(point);\n                var r = circle.radius * _this.props.scaleFactor();\n                var delta = [\n                    mouseScreen.x - circleScreenCenter.x,\n                    mouseScreen.y - circleScreenCenter.y,\n                ];\n                return (delta[0] * delta[0] + delta[1] * delta[1]) < (r * r);\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    CircleLayer.prototype.initShader = function () {\n        var scaleFactor = this.props.scaleFactor || (function () { return 1; });\n        return {\n            fs: require('./circle-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'center',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (circle) { return [circle.x, circle.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'radius',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (circle) { return [circle.radius]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (circle) { return [circle.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (circle) { return circle.color; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (uniform) { return [scaleFactor()]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    defaults: [0],\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [0, 0, 0]; },\n                },\n            ],\n            vertexCount: 1,\n            vs: require('./circle-layer.vs'),\n        };\n    };\n    CircleLayer.prototype.getModelType = function () {\n        return {\n            modelType: Three.Points,\n        };\n    };\n    CircleLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return CircleLayer;\n}(layer_1.Layer));\nexports.CircleLayer = CircleLayer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./circle-layer\"));\n__export(require(\"./circle-instance\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./circles\"));\n__export(require(\"./edges\"));\n__export(require(\"./images\"));\n__export(require(\"./labels\"));\n__export(require(\"./rectangle\"));\n__export(require(\"./rings\"));\n__export(require(\"./types\"));\n","module.exports = \"void main() {\\n  gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n}\"","module.exports = \"\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\n/**\n * This manages mouse gestures broadcast to the layer and handles appropriate actions such as determining\n * how to make the interaction translate to picking events for the layer's instances.\n *\n * This class, in summary, takes in the gestures to the view and converts them to gestures to the instances.\n */\nvar LayerInteractionHandler = /** @class */ (function () {\n    function LayerInteractionHandler(layer) {\n        /** This tracks the elements that have the mouse currently over them */\n        this.isMouseOver = new Map();\n        /** This tracks the elements the mouse was down on */\n        this.isMouseDown = new Map();\n        this.layer = layer;\n    }\n    /**\n     * Handles mouse down gestures for a layer within a view\n     */\n    LayerInteractionHandler.prototype.handleMouseOver = function (view, mouse) {\n        // This is the mouse over for the view itself. We should probably just let the mouse over events handle the interactions\n        // With the instances\n    };\n    /**\n     * Handles mouse down gestures for a layer within a view\n     */\n    LayerInteractionHandler.prototype.handleMouseDown = function (view, mouse, button) {\n        var _this = this;\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type === types_1.PickType.ALL) {\n            var onMouseDown = this.layer.props.onMouseDown;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseDown) {\n                var world_1 = view.viewToWorld(mouse);\n                var hitTest_1 = this.layer.picking.hitTest;\n                var query_1 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                var instances = query_1(world_1).filter(function (o) { return hitTest_1(o, world_1, view); });\n                var info = {\n                    button: button,\n                    instances: instances,\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: function (check) { return query_1(check).filter(function (o) { return hitTest_1(o, world_1, view); }); },\n                    screen: [mouse.x, mouse.y],\n                    world: [world_1.x, world_1.y],\n                };\n                onMouseDown(info);\n                // We track all the elements the mouse is currently down on\n                this.isMouseDown.clear();\n                instances.forEach(function (o) { return _this.isMouseDown.set(o, true); });\n            }\n        }\n    };\n    /**\n     * Handles mouse out events for a layer within the view\n     */\n    LayerInteractionHandler.prototype.handleMouseOut = function (view, mouse) {\n        // This will fire an instance mouse out for any over instances in the queue since we left the view\n        // Thus no instances shall be considered 'over'\n        if (this.layer.picking && this.layer.picking.type === types_1.PickType.ALL) {\n            var onMouseOut = this.layer.props.onMouseOut;\n            if (onMouseOut) {\n                var world_2 = view.viewToWorld(mouse);\n                var query_2 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                var hitTest_2 = this.layer.picking.hitTest;\n                var info = {\n                    instances: Array.from(this.isMouseOver.keys()),\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: function (check) { return query_2(check).filter(function (o) { return hitTest_2(o, world_2, view); }); },\n                    screen: [mouse.x, mouse.y],\n                    world: [world_2.x, world_2.y],\n                };\n                onMouseOut(info);\n            }\n        }\n        // We clear as no instances are over anymore\n        this.isMouseOver.clear();\n        // We also clear all down elements as the mouse is no longer in proper context for the instances\n        // But since the mouse was never actually released, we do not fire an up\n        this.isMouseDown.clear();\n    };\n    /**\n     * Handles mouse up gestures for the layer within the provided view\n     */\n    LayerInteractionHandler.prototype.handleMouseUp = function (view, mouse, button) {\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type === types_1.PickType.ALL) {\n            var onMouseUp = this.layer.props.onMouseUp;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseUp) {\n                var world_3 = view.viewToWorld(mouse);\n                var hitTest_3 = this.layer.picking.hitTest;\n                var query_3 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                var instances = query_3(world_3).filter(function (o) { return hitTest_3(o, world_3, view); });\n                var info = {\n                    button: button,\n                    instances: instances,\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: function (check) { return query_3(check).filter(function (o) { return hitTest_3(o, world_3, view); }); },\n                    screen: [mouse.x, mouse.y],\n                    world: [world_3.x, world_3.y],\n                };\n                onMouseUp(info);\n            }\n        }\n    };\n    /**\n     * Mouse move events on the layer will detect when instances have their item newly over or just moved on\n     */\n    LayerInteractionHandler.prototype.handleMouseMove = function (view, mouse) {\n        var _this = this;\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type === types_1.PickType.ALL) {\n            var _a = this.layer.props, onMouseOver = _a.onMouseOver, onMouseMove = _a.onMouseMove, onMouseOut = _a.onMouseOut;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseOver || onMouseMove || onMouseOut) {\n                var info = void 0;\n                var world_4 = view.viewToWorld(mouse);\n                var hitTest_4 = this.layer.picking.hitTest;\n                var query_4 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                var instances = query_4(world_4).filter(function (o) { return hitTest_4(o, world_4, view); });\n                // Broadcast the picking info for newly over instances to any of the layers listeners if needed\n                if (onMouseOver) {\n                    var notOverInstances = instances.filter(function (o) { return !_this.isMouseOver.get(o); });\n                    info = {\n                        instances: notOverInstances,\n                        layer: this.layer.id,\n                        projection: view,\n                        querySpace: function (check) { return query_4(check).filter(function (o) { return hitTest_4(o, world_4, view); }); },\n                        screen: [mouse.x, mouse.y],\n                        world: [world_4.x, world_4.y],\n                    };\n                    if (notOverInstances.length > 0)\n                        onMouseOver(info);\n                }\n                // Broadcast the the picking info for all instances that the mouse moved on\n                if (onMouseMove) {\n                    // This is the pick info object we will broadcast from the layer\n                    info = {\n                        instances: instances,\n                        layer: this.layer.id,\n                        projection: view,\n                        querySpace: function (check) { return query_4(check).filter(function (o) { return hitTest_4(o, world_4, view); }); },\n                        screen: [mouse.x, mouse.y],\n                        world: [world_4.x, world_4.y],\n                    };\n                    onMouseMove(info);\n                }\n                // We take the hovered instances\n                var isCurrentlyOver_1 = new Map();\n                instances.forEach(function (o) { return isCurrentlyOver_1.set(o, true); });\n                // Broadcast the the picking info for all instances that the mouse moved off of\n                if (onMouseOut) {\n                    var noLongerOver = Array.from(this.isMouseOver.keys()).filter(function (o) { return !isCurrentlyOver_1.get(o); });\n                    // This is the pick info object we will broadcast from the layer\n                    info = {\n                        instances: noLongerOver,\n                        layer: this.layer.id,\n                        projection: view,\n                        querySpace: function (check) { return query_4(check).filter(function (o) { return hitTest_4(o, world_4, view); }); },\n                        screen: [mouse.x, mouse.y],\n                        world: [world_4.x, world_4.y],\n                    };\n                    if (noLongerOver.length > 0)\n                        onMouseOut(info);\n                }\n                // We store the current hovered over items as our over item list for next interaction\n                this.isMouseOver = isCurrentlyOver_1;\n            }\n        }\n    };\n    /**\n     * Handles click gestures on the layer within a view\n     */\n    LayerInteractionHandler.prototype.handleMouseClick = function (view, mouse, button) {\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type === types_1.PickType.ALL) {\n            var onMouseClick = this.layer.props.onMouseClick;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseClick) {\n                var world_5 = view.viewToWorld(mouse);\n                var hitTest_5 = this.layer.picking.hitTest;\n                var query_5 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                var instances = query_5(world_5).filter(function (o) { return hitTest_5(o, world_5, view); });\n                var info = {\n                    button: button,\n                    instances: instances,\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: function (check) { return query_5(check).filter(function (o) { return hitTest_5(o, world_5, view); }); },\n                    screen: [mouse.x, mouse.y],\n                    world: [world_5.x, world_5.y],\n                };\n                onMouseClick(info);\n            }\n        }\n    };\n    /**\n     * Handles drag gestures for the layer within the view\n     */\n    LayerInteractionHandler.prototype.handleMouseDrag = function (view, mouse) {\n        // We probably should not broadcast drag events for the sake of instances. Instance dragging should be handled on\n        // An instance by instance basis rather than coming from the view's gestures\n    };\n    return LayerInteractionHandler;\n}());\nexports.LayerInteractionHandler = LayerInteractionHandler;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\n// This is a mapping of the vector properties as they relate to an array order\nvar VECTOR_ACCESSORS = ['x', 'y', 'z', 'w'];\n/**\n * This class manages the process of taking the diffs of a layer and executing methods on those diffs to perform\n * updates to the uniforms that control those instances.\n */\nvar InstanceDiffManager = /** @class */ (function () {\n    function InstanceDiffManager(layer) {\n        this.layer = layer;\n    }\n    /**\n     * This returns the proper diff processor for handling diffs\n     */\n    InstanceDiffManager.prototype.getDiffProcessor = function () {\n        if (this.layer.picking) {\n            if (this.layer.picking.type === types_1.PickType.ALL) {\n                this.quadPicking = this.layer.picking;\n                return [\n                    this.changeInstanceQuad,\n                    this.addInstanceQuad,\n                    this.removeInstanceQuad,\n                ];\n            }\n        }\n        return [\n            this.changeInstance,\n            this.addInstance,\n            this.removeInstance,\n        ];\n    };\n    /**\n     * This processes add operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.addInstance = function (manager, instance, uniformCluster) {\n        // If the uniform cluster already exists, then we swap over to a change update\n        if (uniformCluster) {\n            manager.changeInstance(manager, instance, uniformCluster);\n        }\n        // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n        else {\n            var uniforms = manager.layer.uniformManager.add(instance);\n            instance.active = true;\n            manager.updateInstance(instance, uniforms);\n        }\n    };\n    /**\n     * This processes add operations from changes in the instancing data and manages the layer's quad tree\n     * with the instance as well.\n     */\n    InstanceDiffManager.prototype.addInstanceQuad = function (manager, instance, uniformCluster) {\n        // If the uniform cluster already exists, then we swap over to a change update\n        if (uniformCluster) {\n            manager.changeInstanceQuad(manager, instance, uniformCluster);\n        }\n        // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n        else {\n            var uniforms = manager.layer.uniformManager.add(instance);\n            instance.active = true;\n            manager.updateInstance(instance, uniforms);\n            // Ensure the instance has an updated injection in the quad tree\n            manager.quadPicking.quadTree.remove(instance);\n            manager.quadPicking.quadTree.add(instance);\n        }\n    };\n    /**\n     * This processes change operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.changeInstance = function (manager, instance, uniformCluster) {\n        // If there is an existing uniform cluster for this instance, then we can update the uniforms\n        if (uniformCluster) {\n            manager.updateInstance(instance, uniformCluster);\n        }\n        // If we don't have existing uniforms, then we must remove the instance\n        else {\n            manager.addInstance(manager, instance, uniformCluster);\n        }\n    };\n    /**\n     * This processes change operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.changeInstanceQuad = function (manager, instance, uniformCluster) {\n        // If there is an existing uniform cluster for this instance, then we can update the uniforms\n        if (uniformCluster) {\n            manager.updateInstance(instance, uniformCluster);\n            // Ensure the instance has an updated injection in the quad tree\n            manager.quadPicking.quadTree.remove(instance);\n            manager.quadPicking.quadTree.add(instance);\n        }\n        // If we don't have existing uniforms, then we must remove the instance\n        else {\n            manager.addInstanceQuad(manager, instance, uniformCluster);\n        }\n    };\n    /**\n     * This processes remove operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.removeInstance = function (manager, instance, uniformCluster) {\n        if (uniformCluster) {\n            // We deactivate the instance so it does not render anymore\n            instance.active = false;\n            // We do one last update on the instance to update to it's deactivated state\n            manager.updateInstance(instance, uniformCluster);\n            // Unlink the instance from the uniform cluster\n            manager.layer.uniformManager.remove(instance);\n        }\n    };\n    /**\n     * This processes remove operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.removeInstanceQuad = function (manager, instance, uniformCluster) {\n        if (uniformCluster) {\n            // We deactivate the instance so it does not render anymore\n            instance.active = false;\n            // We do one last update on the instance to update to it's deactivated state\n            manager.updateInstance(instance, uniformCluster);\n            // Unlink the instance from the uniform cluster\n            manager.layer.uniformManager.remove(instance);\n            // Remove the instance from our quad tree\n            manager.quadPicking.quadTree.remove(instance);\n        }\n    };\n    InstanceDiffManager.prototype.updateInstance = function (instance, uniformCluster) {\n        if (instance.active) {\n            var uniforms = uniformCluster.uniform;\n            var uniformRangeStart = uniformCluster.uniformRange[0];\n            var instanceData = uniforms.value;\n            var instanceUniform = void 0, value = void 0, block = void 0, start = void 0;\n            var k = void 0, endk = void 0;\n            // Loop through the instance attributes and update the uniform cluster with the valaues\n            // Calculated for the instance\n            for (var i = 0, end = this.layer.instanceAttributes.length; i < end; ++i) {\n                instanceUniform = this.layer.instanceAttributes[i];\n                value = instanceUniform.update(instance);\n                block = instanceData[uniformRangeStart + instanceUniform.block];\n                instanceUniform.atlas && this.layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n                start = instanceUniform.blockIndex;\n                // Hyper optimized vector filling routine. It uses properties that are globally scoped\n                // To greatly reduce overhead\n                for (k = start, endk = value.length + start; k < endk; ++k) {\n                    block[VECTOR_ACCESSORS[k]] = value[k - start];\n                }\n            }\n            uniforms.value = instanceData;\n        }\n        else {\n            var uniforms = uniformCluster.uniform;\n            var uniformRangeStart = uniformCluster.uniformRange[0];\n            var instanceData = uniforms.value;\n            var instanceUniform = void 0, value = void 0, block = void 0, start = void 0;\n            // Only update the _active attribute to ensure it is false. When it is false, there is no\n            // Point to updating any other uniform\n            instanceUniform = this.layer.activeAttribute;\n            value = instanceUniform.update(instance);\n            block = instanceData[uniformRangeStart + instanceUniform.block];\n            instanceUniform.atlas && this.layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n            start = instanceUniform.blockIndex;\n            // Hyper optimized vector filling routine. It uses properties that are globally scoped\n            // To greatly reduce overhead\n            for (var k = start, endk = value.length + start; k < endk; ++k) {\n                block[VECTOR_ACCESSORS[k]] = value[k - start];\n            }\n            uniforms.value = instanceData;\n        }\n    };\n    return InstanceDiffManager;\n}());\nexports.InstanceDiffManager = InstanceDiffManager;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nvar maxPopulation = 5;\nvar maxDepth = 10;\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n */\nvar Quadrants = /** @class */ (function () {\n    /**\n     * Creates an instance of Quadrants.\n     *\n     * @param bounds The bounds this will create quandrants for\n     * @param depth  The child depth of this element\n     */\n    function Quadrants(bounds, depth, getBounds, childToNode, childToBounds) {\n        var mid = bounds.mid;\n        this.TL = new Node(bounds.x, mid.x, bounds.y, mid.y, getBounds, depth);\n        this.TR = new Node(mid.x, bounds.right, bounds.y, mid.y, getBounds, depth);\n        this.BL = new Node(bounds.x, mid.x, mid.y, bounds.bottom, getBounds, depth);\n        this.BR = new Node(mid.x, bounds.right, mid.y, bounds.bottom, getBounds, depth);\n        this.TL.childToNode = childToNode;\n        this.TR.childToNode = childToNode;\n        this.BL.childToNode = childToNode;\n        this.BR.childToNode = childToNode;\n        this.TL.childToBounds = childToBounds;\n        this.TR.childToBounds = childToBounds;\n        this.BL.childToBounds = childToBounds;\n        this.BR.childToBounds = childToBounds;\n    }\n    /**\n     * Ensures all memory is released for all nodes and all references are removed\n     * to potentially high memory consumption items\n     */\n    Quadrants.prototype.destroy = function () {\n        this.TL.destroy();\n        this.TR.destroy();\n        this.BL.destroy();\n        this.BR.destroy();\n        delete this.TL;\n        delete this.TR;\n        delete this.BL;\n        delete this.BR;\n    };\n    return Quadrants;\n}());\nexports.Quadrants = Quadrants;\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n */\nvar Node = /** @class */ (function () {\n    /**\n     * Creates an instance of Node.\n     */\n    function Node(left, right, top, bottom, getBounds, depth) {\n        if (depth === void 0) { depth = 0; }\n        /** These are the child Instances of the node. */\n        this.children = [];\n        /** This is how deep the node is within the tree */\n        this.depth = 0;\n        /** These are the child nodes of this quad node when this node is split. It is null if the node is not split yet */\n        this.nodes = null;\n        // If params insertted\n        if (arguments.length >= 4) {\n            this.bounds = new bounds_1.Bounds({ left: left, right: right, top: top, bottom: bottom });\n        }\n        else {\n            // Otherwise, make tiny start area\n            this.bounds = new bounds_1.Bounds({ left: 0, right: 1, top: 1, bottom: 0 });\n        }\n        // Ensure the depth is set\n        this.depth = depth;\n        // Apply the bounds accessor method for instances\n        this.getBounds = getBounds;\n        // If this is the top level node, we need to instantiate the lookup that will be used\n        // Across all nodes.\n        if (this.depth === 0) {\n            this.nullBounded = [];\n            this.childToNode = new Map();\n            this.childToBounds = new Map();\n        }\n    }\n    /**\n     * Destroys this node and ensures all child nodes are destroyed as well.\n     */\n    Node.prototype.destroy = function () {\n        delete this.children;\n        delete this.bounds;\n        if (this.nodes) {\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n    };\n    /**\n     * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n     * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n     * this quad tree spans (and this is the root node), the quad tree will expand to include\n     * the new child.\n     *\n     * @param child The Bounds type object to inject\n     * @param props Properties that can be retrieved with the child object if applicable\n     *\n     * @returns True if the insertion was successful\n     */\n    Node.prototype.add = function (child) {\n        var bounds = this.childToBounds.get(child);\n        if (!bounds) {\n            // First we access the bounds of the child and store it\n            bounds = this.getBounds(child);\n            this.childToBounds.set(child, bounds);\n        }\n        // This is the entry function for adding children, so we must first expand our top node\n        // To cover the area that the child is located.\n        // If we're in bounds, then let's just add the child\n        if (!bounds || bounds.isInside(this.bounds)) {\n            return this.doAdd(child, bounds);\n        }\n        else {\n            // Otherwise, we need to expand first\n            this.cover(bounds);\n            return this.add(child);\n        }\n    };\n    /**\n     * Adds a list of new children to this quad tree. It performs the same operations as\n     * addChild for each child in the list, however, it more efficiently recalculates the\n     * bounds necessary to cover the area the children cover.\n     *\n     * @param children      List of Bounds objects to inject\n     */\n    Node.prototype.addAll = function (children) {\n        var _this = this;\n        // Make sure we cover the entire area of all the children.\n        // We can speed this up a lot if we first calculate the total bounds the new children covers\n        var minX = Number.MAX_VALUE;\n        var minY = Number.MAX_VALUE;\n        var maxX = -Number.MAX_VALUE;\n        var maxY = -Number.MAX_VALUE;\n        // Get the dimensions of the new bounds\n        children.forEach(function (child) {\n            var bounds = _this.getBounds(child);\n            _this.childToBounds.set(child, bounds);\n            if (!bounds)\n                return;\n            if (bounds.x < minX) {\n                minX = bounds.x;\n            }\n            if (bounds.right > maxX) {\n                maxX = bounds.right;\n            }\n            if (bounds.bottom > maxY) {\n                maxY = bounds.bottom;\n            }\n            if (bounds.y < minY) {\n                minY = bounds.y;\n            }\n        });\n        // Ensure a valid cover dimension was established. If no valid dimension is established\n        // Then we don't cover, but we can still add the children as that have null Bounds which\n        // Means injecting at the top level.\n        if (minX !== Number.MAX_VALUE &&\n            minY !== Number.MAX_VALUE &&\n            maxX !== -Number.MAX_VALUE &&\n            maxY !== -Number.MAX_VALUE) {\n            // Make sure our bounds includes the specified bounds\n            this.cover(new bounds_1.Bounds({ left: minX, right: maxX, bottom: maxY, top: minY }));\n        }\n        // Add all of the children into the tree.\n        children.forEach(function (child, index) { return _this.doAdd(child, _this.childToBounds.get(child) || null, true); });\n    };\n    /**\n     * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n     * This will cause all children to be re-injected into the tree.\n     *\n     * @param bounds The bounds to include in the tree's coverage\n     */\n    Node.prototype.cover = function (bounds) {\n        var _this = this;\n        // If we are already covering the area: abort\n        if (bounds.isInside(this.bounds)) {\n            return;\n        }\n        // Make our bounds cover the new area\n        this.bounds.encapsulate(bounds);\n        this.bounds.x -= 1;\n        this.bounds.y -= 1;\n        this.bounds.width += 2;\n        this.bounds.height += 2;\n        // Get all of the children underneath this node\n        var allChildren = this.gatherChildren([]);\n        this.children = [];\n        // Destroy the split nodes\n        if (this.nodes) {\n            // Completely...destroy...\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n        // Clear out the child to node relations\n        this.childToNode.clear();\n        // Reinsert all children with the new dimensions in place\n        allChildren.forEach(function (child, index) { return _this.doAdd(child, _this.childToBounds.get(child) || null); });\n    };\n    /**\n     * When adding children, this performs the actual action of injecting the child into the tree\n     * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n     *\n     * @param child The Bounds item to inject into the tree\n     * @param props The props to remain associated with the child\n     *\n     * @returns True if the injection was successful\n     */\n    Node.prototype.doAdd = function (child, bounds, fromSplit) {\n        // If this is the top level node and the bounds are null, then we add to the null list\n        if (!bounds && this.depth === 0) {\n            this.nullBounded.push(child);\n            this.childToNode.set(child, this);\n            return true;\n        }\n        // If no bounds is available at this point, something went terribly wrong\n        if (!bounds) {\n            console.warn('A null bounds was added to a Quad Tree node below the top node, which is invalid.');\n            return false;\n        }\n        // If bounds are null, then just immediately add\n        // If nodes are present, then we have already exceeded the population of this node\n        if (this.nodes) {\n            if (bounds.isInside(this.nodes.TL.bounds)) {\n                return this.nodes.TL.doAdd(child, bounds, fromSplit);\n            }\n            if (bounds.isInside(this.nodes.TR.bounds)) {\n                return this.nodes.TR.doAdd(child, bounds, fromSplit);\n            }\n            if (bounds.isInside(this.nodes.BL.bounds)) {\n                return this.nodes.BL.doAdd(child, bounds, fromSplit);\n            }\n            if (bounds.isInside(this.nodes.BR.bounds)) {\n                return this.nodes.BR.doAdd(child, bounds, fromSplit);\n            }\n            // Otherwise, this is a child overlapping this border\n            this.children.push(child);\n            this.childToNode.set(child, this);\n            return true;\n        }\n        else if (bounds.isInside(this.bounds)) {\n            // Otherwise, we have not had a split due to population limits being exceeded\n            this.children.push(child);\n            this.childToNode.set(child, this);\n            // If we exceeded our population for this quadrant, it is time to split up\n            if (this.children.length > maxPopulation && this.depth < maxDepth) {\n                this.split();\n            }\n            return true;\n        }\n        // This is when there is something wrong with the insertted child. The bounds\n        // For the quad should have grown without issue, but in this case the bounds\n        // Could not grow to accomodate the child.\n        if (isNaN(bounds.width + bounds.height + bounds.x + bounds.y)) {\n            console.error('Child did not fit into bounds because a dimension is NaN', child, bounds);\n        }\n        else if (bounds.area === 0) {\n            console.error('Child did not fit into bounds because the area is zero', child, bounds);\n        }\n        else {\n            console.error('Child did not get insertted.', 'Parent:', this.bounds.toString(), 'Child:', bounds.toString(), 'Inside Checks:', bounds.x >= this.bounds.x, bounds.right <= this.bounds.right, bounds.y >= this.bounds.y, bounds.bottom <= this.bounds.bottom);\n        }\n        // Don't insert the child and continue\n        return true;\n    };\n    Node.prototype.doRemove = function (child) {\n        var index = this.children.indexOf(child);\n        if (index > -1) {\n            this.children.splice(index, 1);\n            this.childToNode.delete(child);\n            this.childToBounds.delete(child);\n        }\n    };\n    /**\n     * Collects all children of all the current and sub nodes into a single list.\n     *\n     * @param list The list we must aggregate children into\n     *\n     * @return The list specified as the list parameter\n     */\n    Node.prototype.gatherChildren = function (list) {\n        this.children.forEach(function (child) { return list.push(child); });\n        if (this.nodes) {\n            this.nodes.TL.gatherChildren(list);\n            this.nodes.TR.gatherChildren(list);\n            this.nodes.BL.gatherChildren(list);\n            this.nodes.BR.gatherChildren(list);\n        }\n        return list;\n    };\n    /**\n     * Entry query for determining query type based on input object\n     *\n     * @param bounds Can be a Bounds or a Point object\n     * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n     *               information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return An array of children that intersects with the query\n     */\n    Node.prototype.query = function (bounds, visit) {\n        // This stores all of the found Instances when querying by bounds or point\n        var found = [];\n        // If this is the top level node then add in the null bunded items as the start\n        if (this.depth === 0) {\n            found = this.nullBounded.slice(0);\n        }\n        // Query a rectangle\n        if (bounds instanceof bounds_1.Bounds) {\n            if (bounds.hitBounds(this.bounds)) {\n                return this.queryBounds(bounds, found, visit);\n            }\n        }\n        // Query a point\n        if (this.bounds.containsPoint(bounds)) {\n            return this.queryPoint(bounds, found, visit);\n        }\n        // Return an empty array when nothing is collided with\n        return found;\n    };\n    /**\n     * Queries children for intersection with a bounds object\n     *\n     * @param b     The Bounds to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return     Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryBounds = function (b, list, visit) {\n        var _this = this;\n        this.children.forEach(function (c) {\n            var bounds = _this.childToBounds.get(c);\n            if (bounds && bounds.hitBounds(b)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (b.hitBounds(this.nodes.TL.bounds)) {\n                this.nodes.TL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.TR.bounds)) {\n                this.nodes.TR.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BL.bounds)) {\n                this.nodes.BL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BR.bounds)) {\n                this.nodes.BR.queryBounds(b, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Queries children for intersection with a point\n     *\n     * @param p     The Point to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return      Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryPoint = function (p, list, visit) {\n        var _this = this;\n        this.children.forEach(function (c) {\n            var bounds = _this.childToBounds.get(c);\n            if (bounds && bounds.containsPoint(p)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (this.nodes.TL.bounds.containsPoint(p)) {\n                this.nodes.TL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.TR.bounds.containsPoint(p)) {\n                this.nodes.TR.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BL.bounds.containsPoint(p)) {\n                this.nodes.BL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BR.bounds.containsPoint(p)) {\n                this.nodes.BR.queryPoint(p, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Remove the provided item from the tree.\n     */\n    Node.prototype.remove = function (child) {\n        if (this.childToNode) {\n            var node = this.childToNode.get(child);\n            // If the node is getting removed from the top level node, then it MAY be a null bounded item\n            // Which gets removed from the list\n            if (node && node.depth === 0) {\n                var index = node.nullBounded.indexOf(child);\n                if (index > -1) {\n                    node.nullBounded.splice(index);\n                    this.childToNode.delete(child);\n                    this.childToBounds.delete(child);\n                    return;\n                }\n            }\n            // Otherwise, just remove the node normally\n            if (node) {\n                node.doRemove(child);\n            }\n        }\n    };\n    /**\n     * Creates four sub quadrants for this node.\n     */\n    Node.prototype.split = function () {\n        // Gather all items to be handed down\n        var allChildren = this.gatherChildren([]);\n        // Gather all props for the children to be handed down as well\n        this.nodes = new Quadrants(this.bounds, this.depth + 1, this.getBounds, this.childToNode, this.childToBounds);\n        // Empty out the children as they are being re-injected\n        this.children = [];\n        for (var i = 0, end = allChildren.length; i < end; ++i) {\n            var child = allChildren[i];\n            this.doAdd(child, this.childToBounds.get(child) || null, true);\n        }\n    };\n    /**\n     * Traverses the quad tree returning every quadrant encountered\n     *\n     * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n     */\n    Node.prototype.visit = function (cb) {\n        var finished = Boolean(cb(this));\n        if (this.nodes && !finished) {\n            this.nodes.TL.visit(cb);\n            this.nodes.TR.visit(cb);\n            this.nodes.BL.visit(cb);\n            this.nodes.BR.visit(cb);\n        }\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar TrackedQuadTree = /** @class */ (function (_super) {\n    __extends(TrackedQuadTree, _super);\n    function TrackedQuadTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return TrackedQuadTree;\n}(Node));\nexports.TrackedQuadTree = TrackedQuadTree;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chart_camera_1 = require(\"./chart-camera\");\n/**\n * This is a camera that is based on another camera. This can apply filters\n * to the information provided from the base camera.\n *\n * Useful for situations such as a chart having a chart area and a list on the\n * left. This can use the same camera the chart area uses, but filter the response\n * to only track the y offset of the base camera.\n *\n * That would allow easy tracking of the left list to track with elements in the\n * chart and only manipulate a single camera instead of managing many cameras and\n * tie them together with lots of events.\n */\nvar ReferenceCamera = /** @class */ (function (_super) {\n    __extends(ReferenceCamera, _super);\n    function ReferenceCamera(options) {\n        var _this = _super.call(this) || this;\n        _this.offsetFilter = function (offset) { return offset; };\n        _this.scaleFilter = function (scale) { return scale; };\n        Object.assign(_this, options);\n        return _this;\n    }\n    Object.defineProperty(ReferenceCamera.prototype, \"offset\", {\n        get: function () {\n            return this.offsetFilter(this.base.offset);\n        },\n        set: function (val) {\n            /** no-op */\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ReferenceCamera.prototype, \"scale\", {\n        get: function () {\n            return this.scaleFilter(this.base.scale);\n        },\n        set: function (val) {\n            /** no-op */\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ReferenceCamera;\n}(chart_camera_1.ChartCamera));\nexports.ReferenceCamera = ReferenceCamera;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar DiffType;\n(function (DiffType) {\n    DiffType[DiffType[\"CHANGE\"] = 0] = \"CHANGE\";\n    DiffType[DiffType[\"INSERT\"] = 1] = \"INSERT\";\n    DiffType[DiffType[\"REMOVE\"] = 2] = \"REMOVE\";\n})(DiffType = exports.DiffType || (exports.DiffType = {}));\nfunction isObservableArray(val) {\n    return Boolean(val.observe);\n}\nvar UPDATE_FLAG = 'update';\nvar SPLICE_FLAG = 'splice';\n/**\n * This is a generic DataProvider that provides instance data to a layer. It monitors\n * changes to a list of instance items and records those changes for consumption by\n * internal layer processes. This allows for extremely easy editing of instance data\n * that reflects highly targetted changes to the system with very little overhead\n * allowing for very large datasets with rapidly changing parts.\n */\nvar DataProvider = /** @class */ (function () {\n    function DataProvider(data) {\n        var _this = this;\n        // When active, this provider is recording changes. Deactivate to temporarily disable\n        // Change tracking.\n        this.active = true;\n        this.instanceDisposers = new Map();\n        this.instanceChanges = new Map();\n        this.instanceById = new Map();\n        this.isChanged = false;\n        this._changeList = [];\n        /**\n         * This generates a method for an interceptor to monitor individual items within a list and record\n         * any changes found to the changelist\n         *\n         * @param changes This is the change list which records the changes to the items\n         */\n        this.monitorItem = function (changes) { return function (change) {\n            if (_this.active) {\n                if (change.type === UPDATE_FLAG) {\n                    changes.set(change.object, DiffType.CHANGE);\n                    _this.isChanged = true;\n                }\n                else {\n                    console.warn('Received an update type not supported by monitorItem:', change.type);\n                }\n            }\n            return change;\n        }; };\n        this._instances = mobx_1.observable(data || []);\n        if (isObservableArray(this._instances)) {\n            this.listDisposer = mobx_1.intercept(this._instances, this.monitorList(this._instances, this.instanceChanges, this.instanceById, this.instanceDisposers));\n        }\n    }\n    Object.defineProperty(DataProvider.prototype, \"instances\", {\n        // We very explicitly shut off the ability to set the top level properties on\n        // This element. Mutations on the properties are allowed (and are thus trackable)\n        // But modifying the root properties will not have a very clean way to monitor that.\n        // So we make the properties accessible without being replaceable.\n        get: function () {\n            return this._instances;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataProvider.prototype, \"changeList\", {\n        get: function () {\n            // When the changelist is retrieved, we deactivate change recording until the provider\n            // Is resolved\n            this.active = false;\n            if (this.isChanged) {\n                var changes_1 = [];\n                this.instanceChanges.forEach(function (changeType, instance) {\n                    changes_1.push([instance, changeType]);\n                });\n                this._changeList = changes_1;\n            }\n            return this._changeList;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Clears out all disposers and items in the dataset\n     */\n    DataProvider.prototype.destroy = function () {\n        this.listDisposer();\n        this.instanceDisposers.forEach(function (disposer) { return disposer(); });\n        this._instances = null;\n        this.instanceChanges.clear();\n        this._changeList = null;\n    };\n    /**\n     * This generates a method for an interceptor that will monitor and collect change information\n     * on the list of items specified.\n     *\n     * @param list The list of items to monitor\n     * @param changes The changelist for the list of given item type\n     * @param lookUp A lookup so items that have changed can get their source easily\n     */\n    DataProvider.prototype.monitorList = function (list, changes, lookUp, disposers) {\n        var _this = this;\n        return function (change) {\n            if (_this.active) {\n                // We only handle splice types for changes, these indicate elements have been added or removed\n                if (change.type === SPLICE_FLAG) {\n                    // Record the removals and clear out any interceptors\n                    for (var i = change.index, end = change.index + change.removedCount; i < end; ++i) {\n                        var item = change.object[i];\n                        changes.set(item, DiffType.REMOVE);\n                        _this.isChanged = true;\n                        var dispose = disposers.get(item);\n                        if (dispose) {\n                            dispose();\n                        }\n                    }\n                    // Record the additions and add intercepts for each item. Also generate a lookup for the item\n                    for (var i = 0, end = change.added.length; i < end; ++i) {\n                        var item = change.added[i] = mobx_1.observable(change.added[i]);\n                        changes.set(item, DiffType.INSERT);\n                        _this.isChanged = true;\n                        lookUp.set(item.id, item);\n                        disposers.set(item, mobx_1.intercept(item, _this.monitorItem(changes)));\n                    }\n                }\n                else {\n                    console.warn('Received an update type not supported by monitorList:', change.type);\n                }\n            }\n            return change;\n        };\n    };\n    /**\n     * This resolves all of the changes found and makes them disappear.\n     */\n    DataProvider.prototype.resolve = function () {\n        this.instanceById.clear();\n        this.instanceChanges.clear();\n        this._changeList = [];\n        this.active = true;\n    };\n    return DataProvider;\n}());\nexports.DataProvider = DataProvider;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar label_atlas_resource_1 = require(\"./label-atlas-resource\");\nfunction toInstanceIOValue(texture) {\n    // If the texture is not defined we just output an empty reference\n    if (!texture) {\n        return [0, 0, 0, 0];\n    }\n    // Otherwise, we return the atlas information of the texture\n    return [\n        texture.atlasTL.x,\n        texture.atlasTL.y,\n        texture.atlasBR.x,\n        texture.atlasBR.y,\n    ];\n}\n/**\n * This class is responsible for tracking resources requested to be placed on an Atlas.\n * This makes sure the resource is uploaded and then properly cached so similar requests\n * return already existing resources. This also manages instances waiting for the resource\n * to be made available.\n */\nvar AtlasResourceManager = /** @class */ (function () {\n    function AtlasResourceManager(options) {\n        /** This is the atlas currently targetted by requests */\n        this.targetAtlas = '';\n        /** This stores all of the requests awaiting dequeueing */\n        this.requestQueue = new Map();\n        /**\n         * This tracks if a resource is already in the request queue. This also stores ALL instances awaiting the resource.\n         */\n        this.requestLookup = new Map();\n        this.atlasManager = options.atlasManager;\n    }\n    /**\n     * This dequeues all instance requests for a resource and processes the request which will\n     * inevitably make the instance active\n     */\n    AtlasResourceManager.prototype.dequeueRequests = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var didDequeue, _loop_1, this_1, _i, _a, _b, targetAtlas, resources;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        didDequeue = false;\n                        _loop_1 = function (targetAtlas, resources) {\n                            var requests, atlasRequests_1;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        if (!(resources.length > 0)) return [3 /*break*/, 2];\n                                        // We did dequeue\n                                        didDequeue = true;\n                                        requests = resources.slice(0);\n                                        // Empty the queue to begin taking in new requests as needed\n                                        resources.length = 0;\n                                        // Tell the atlas manager to update with all of the requested resources\n                                        return [4 /*yield*/, this_1.atlasManager.updateAtlas(targetAtlas, requests)];\n                                    case 1:\n                                        // Tell the atlas manager to update with all of the requested resources\n                                        _a.sent();\n                                        atlasRequests_1 = this_1.requestLookup.get(targetAtlas);\n                                        if (atlasRequests_1) {\n                                            // Once the manager has been updated, we can now flag all of the instances waiting for the resources\n                                            // As active, which should thus trigger an update to the layers to perform a diff for each instance\n                                            requests.forEach(function (resource) {\n                                                var request = atlasRequests_1.get(resource);\n                                                atlasRequests_1.delete(resource);\n                                                if (request) {\n                                                    for (var _i = 0, request_1 = request; _i < request_1.length; _i++) {\n                                                        var _a = request_1[_i], layer = _a[0], instance = _a[1];\n                                                        // If the instance is still associated with a cluster, then the instance can be activated. Having\n                                                        // A cluster is indicative the instance has not been deleted.\n                                                        if (layer.uniformManager.getUniforms(instance)) {\n                                                            instance.active = true;\n                                                        }\n                                                    }\n                                                }\n                                            });\n                                        }\n                                        _a.label = 2;\n                                    case 2: return [2 /*return*/];\n                                }\n                            });\n                        };\n                        this_1 = this;\n                        _i = 0, _a = Array.from(this.requestQueue.entries());\n                        _c.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3 /*break*/, 4];\n                        _b = _a[_i], targetAtlas = _b[0], resources = _b[1];\n                        return [5 /*yield**/, _loop_1(targetAtlas, resources)];\n                    case 2:\n                        _c.sent();\n                        _c.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/, didDequeue];\n                }\n            });\n        });\n    };\n    /**\n     * This retrieves the actual atlas texture that should be applied to a uniform's\n     * value.\n     */\n    AtlasResourceManager.prototype.getAtlasTexture = function (key) {\n        var atlas = this.atlasManager.getAtlasTexture(key);\n        if (atlas) {\n            return atlas.texture;\n        }\n        return null;\n    };\n    /**\n     * This is a request for atlas texture resources. It will produce either the coordinates needed to\n     * make valid texture lookups, or it will trigger a loading of resources to an atlas and cause an\n     * automated deactivation and reactivation of the instance.\n     */\n    AtlasResourceManager.prototype.request = function (layer, instance, resource) {\n        var texture = resource.texture;\n        // If the texture is ready and available, then we simply return the IO values\n        if (texture) {\n            return toInstanceIOValue(texture);\n        }\n        if (resource instanceof label_atlas_resource_1.LabelAtlasResource) {\n            if (!resource.label.text) {\n                return toInstanceIOValue(texture);\n            }\n        }\n        // If a request is already made, then we must save the instance making the request for deactivation and\n        // Reactivation but without any additional atlas loading\n        var atlasRequests = this.requestLookup.get(this.targetAtlas);\n        if (atlasRequests) {\n            var existingRequests = atlasRequests.get(resource);\n            if (existingRequests) {\n                existingRequests.push([layer, instance]);\n                instance.active = false;\n                return toInstanceIOValue(texture);\n            }\n        }\n        else {\n            atlasRequests = new Map();\n            this.requestLookup.set(this.targetAtlas, atlasRequests);\n        }\n        // If the texture is not available, then we must load the resource, deactivate the instance\n        // And wait for the resource to become available. Once the resource is available, the system\n        // Must activate the instance to render the resource.\n        instance.active = false;\n        var requests = this.requestQueue.get(this.targetAtlas);\n        if (!requests) {\n            requests = [];\n            this.requestQueue.set(this.targetAtlas, requests);\n        }\n        requests.push(resource);\n        atlasRequests.set(resource, [[layer, instance]]);\n        // This returns essentially returns blank values for the resource lookup\n        return toInstanceIOValue(texture);\n    };\n    /**\n     * This is used by the system to target the correct atlas for subsequent requests to a resource.\n     */\n    AtlasResourceManager.prototype.setTargetAtlas = function (target) {\n        this.targetAtlas = target;\n    };\n    return AtlasResourceManager;\n}());\nexports.AtlasResourceManager = AtlasResourceManager;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar canvas;\nvar ImageRasterizer = /** @class */ (function () {\n    function ImageRasterizer() {\n    }\n    /**\n     * This loops until our canvas context is available\n     */\n    ImageRasterizer.awaitContext = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!canvas) return [3 /*break*/, 2];\n                        this.getContext();\n                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 0];\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Attempts to populate the 'canvas' context for rendering images offscreen.\n     */\n    ImageRasterizer.getContext = function () {\n        if (!canvas) {\n            canvas = document.createElement('canvas').getContext('2d');\n        }\n        return canvas;\n    };\n    /**\n     * This renders our image to a sizeable canvas where we loop over the pixel data to determine\n     * the bounds of the image.\n     *\n     * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n     *                                 the size to be rendered to the texture to the size the image\n     *                                 should be within world space.\n     * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n     */\n    ImageRasterizer.calculateImageSize = function (resource, sampleScale) {\n        /** Get the image properties for rasterizing */\n        var image = resource.image.element;\n        if (image.width === 0 || image.height === 0) {\n            console.warn('Images provided shoud have valid dimensions! Please ensure the image is loaded first.');\n            return;\n        }\n        // Just make sure th canvas is available\n        canvas.canvas.width = 100;\n        canvas.canvas.height = 100;\n        // Render the image into our canvas merely to ensure the image can be rendered\n        // This action often 'warms up' images such as images that have a data URL instead of a path\n        canvas.drawImage(image, 0, 0);\n        // Make sure the rasterization object is initialized\n        resource.rasterization = resource.rasterization || {\n            texture: { height: 0, width: 0 },\n            world: { height: 0, width: 0 },\n        };\n        // Update the calculated texture size.\n        resource.rasterization.texture = {\n            height: image.height * resource.sampleScale,\n            width: image.width * resource.sampleScale,\n        };\n        resource.rasterization.world = {\n            height: image.height,\n            width: image.width,\n        };\n        resource.rasterization.image = image;\n    };\n    /**\n     * Performs the rendering of the image\n     */\n    ImageRasterizer.render = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // Make sure our canvas object is ready for rendering\n                    return [4 /*yield*/, this.awaitContext()];\n                    case 1:\n                        // Make sure our canvas object is ready for rendering\n                        _a.sent();\n                        // Calculate all of the image metrics and ensure the image can be drawn\n                        this.calculateImageSize(resource, resource.sampleScale);\n                        return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    /**\n     * Performs the rendering of the image\n     */\n    ImageRasterizer.renderSync = function (resource) {\n        // Ensure our offscreen canvas is prepped\n        this.getContext();\n        if (!canvas) {\n            console.warn('Can not render a image synchronously without the canvas context being ready.');\n            return resource;\n        }\n        // Calculate all of the image metrics and generate a canvas on the image that can\n        // Be rendered to the canvas.\n        this.calculateImageSize(resource, resource.sampleScale);\n        return resource;\n    };\n    return ImageRasterizer;\n}());\nexports.ImageRasterizer = ImageRasterizer;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\nvar atlas_1 = require(\"./atlas\");\nvar color_atlas_resource_1 = require(\"./color-atlas-resource\");\nvar color_rasterizer_1 = require(\"./color-rasterizer\");\nvar image_atlas_resource_1 = require(\"./image-atlas-resource\");\nvar label_atlas_resource_1 = require(\"./label-atlas-resource\");\nvar label_rasterizer_1 = require(\"./label-rasterizer\");\nvar sub_texture_1 = require(\"./sub-texture\");\nvar debug = require('debug')('webgl-surface:Atlas');\nvar ZERO_IMAGE = {\n    aspectRatio: 0,\n    atlasBL: { x: 0, y: 0 },\n    atlasBR: { x: 0, y: 0 },\n    atlasReferenceID: '',\n    atlasTexture: null,\n    atlasTL: { x: 0, y: 0 },\n    atlasTR: { x: 0, y: 0 },\n    heightOnAtlas: 0,\n    isValid: false,\n    pixelHeight: 0,\n    pixelWidth: 0,\n    widthOnAtlas: 0,\n};\n/**\n * Determines if a SubTexture is a valid SubTexture for rendering\n */\nfunction isValidImage(image) {\n    var isValid = false;\n    if (image && image.isValid) {\n        if (image.pixelWidth && image.pixelHeight) {\n            isValid = true;\n        }\n    }\n    return isValid;\n}\n/**\n * Defines a manager of atlas', which includes generating the atlas and producing\n * textures defining those pieces of atlas.\n */\nvar AtlasManager = /** @class */ (function () {\n    function AtlasManager() {\n        /** Stores all of the generated atlas' in a lookup by name */\n        this.allAtlas = new Map();\n    }\n    /**\n     * Atlas' must be created from scratch to update them. In order to properly\n     * update an existing one, you must destroy it then recreate it again.\n     * This is from not knowing how to update a texture via three js.\n     *\n     * @param resources The images with their image path set to be loaded into the atlas.\n     *               Images that keep an atlas ID of null indicates the image did not load\n     *               correctly\n     *\n     * @return {Texture} The Threejs texture that is created as our atlas. The images injected\n     *                   into the texture will be populated with the atlas'\n     */\n    AtlasManager.prototype.createAtlas = function (options, resources) {\n        return __awaiter(this, void 0, void 0, function () {\n            var atlas;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        atlas = new atlas_1.Atlas(options);\n                        // Set the manager to the atlas\n                        atlas.setManager(this);\n                        // Make the atlas identifiable by it's name\n                        this.allAtlas.set(atlas.id, atlas);\n                        if (!resources) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.updateAtlas(atlas.id, resources)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        debug('Atlas Created-> %o', atlas);\n                        return [2 /*return*/, atlas];\n                }\n            });\n        });\n    };\n    /**\n     * Disposes of the resources the atlas held and makes the atlas invalid for use\n     *\n     * @param atlasName\n     */\n    AtlasManager.prototype.destroyAtlas = function (atlasName) {\n        var atlas = this.allAtlas.get(atlasName);\n        if (atlas) {\n            atlas.destroy();\n        }\n    };\n    AtlasManager.prototype.setDefaultImage = function (image, atlasName) {\n        image = Object.assign(image, ZERO_IMAGE, { atlasReferenceID: atlasName });\n        return image;\n    };\n    /**\n     * This loads, packs, and draws the indicated image into the specified canvas\n     * using the metrics that exists for the specified atlas.\n     *\n     * @param resource The image who should have it's image path loaded\n     * @param atlasName The name of the atlas to make the packing work\n     * @param canvas The canvas we will be drawing into to generate the complete image\n     *\n     * @return {Promise<boolean>} Promise that resolves to if the image successfully was drawn or not\n     */\n    AtlasManager.prototype.draw = function (atlas, resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var canvas, atlasName, loadedImage, rasterization, texture, rect, dimensions, packing, insertedNode, ux, uy, uw, uh, onePixelX, atlasDimensions, bottom, top_1, left, right;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        canvas = atlas.texture.image;\n                        atlasName = atlas.id;\n                        // Register the resource with the atlas\n                        if (!atlas.registerResource(resource)) {\n                            console.warn('Could not draw resource to the atlas as the resource was not properly registered to the atlas first', atlas, resource);\n                            return [2 /*return*/, Promise.resolve(false)];\n                        }\n                        return [4 /*yield*/, this.loadImage(resource)];\n                    case 1:\n                        loadedImage = _a.sent();\n                        // Only a non-null image means the image loaded correctly\n                        if (loadedImage && isValidImage(resource.texture)) {\n                            rasterization = resource.rasterization;\n                            texture = resource.texture;\n                            rect = new bounds_1.Bounds({ left: 0, right: rasterization.texture.width, top: 0, bottom: rasterization.texture.height });\n                            dimensions = {\n                                first: texture,\n                                second: rect,\n                            };\n                            // Auto add a buffer in\n                            dimensions.second.width += 1;\n                            dimensions.second.height += 1;\n                            packing = atlas.packing;\n                            insertedNode = packing.insert(dimensions);\n                            // If the result was NULL we did not successfully insert the image into any map\n                            if (insertedNode) {\n                                debug('Atlas location determined: %o', insertedNode);\n                                // Apply the image to the node\n                                insertedNode.nodeImage = texture;\n                                ux = insertedNode.nodeDimensions.x / atlas.width;\n                                uy = insertedNode.nodeDimensions.y / atlas.height;\n                                uw = insertedNode.nodeDimensions.width / atlas.width;\n                                uh = insertedNode.nodeDimensions.height / atlas.height;\n                                onePixelX = 1 / atlas.width;\n                                atlasDimensions = new bounds_1.Bounds({\n                                    bottom: 1.0 - uy,\n                                    left: ux,\n                                    right: ux + uw,\n                                    top: 1.0 - (uy + uh),\n                                });\n                                bottom = atlasDimensions.bottom;\n                                top_1 = atlasDimensions.y;\n                                left = atlasDimensions.x;\n                                right = atlasDimensions.x + atlasDimensions.width - onePixelX;\n                                texture.atlasReferenceID = atlasName;\n                                texture.atlasTL = { x: left, y: top_1 };\n                                texture.atlasBR = { x: right, y: bottom };\n                                texture.atlasBL = { x: left, y: bottom };\n                                texture.atlasTR = { x: right, y: top_1 };\n                                texture.widthOnAtlas = Math.abs(texture.atlasTR.x - texture.atlasTL.x);\n                                texture.heightOnAtlas = Math.abs(texture.atlasTR.y - texture.atlasBR.y);\n                                texture.pixelWidth = rasterization.texture.width;\n                                texture.pixelHeight = rasterization.texture.height;\n                                // Now draw the image to the indicated canvas\n                                canvas.getContext('2d').drawImage(loadedImage, insertedNode.nodeDimensions.x, insertedNode.nodeDimensions.y);\n                                // We have finished inserting\n                                return [2 /*return*/, true];\n                            }\n                            else {\n                                // Log an error\n                                console.error(\"Could not fit resource into atlas\", resource);\n                                resource.texture = this.setDefaultImage(resource.texture, atlasName);\n                                return [2 /*return*/, false];\n                            }\n                        }\n                        else {\n                            // Log an error and load a default sub texture\n                            console.error(\"Could not load resource:\", resource);\n                            resource.texture = this.setDefaultImage(resource.texture, atlasName);\n                            return [2 /*return*/, false];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Retrieves the threejs texture for the atlas\n     *\n     * @param atlasName The identifier of the atlas\n     */\n    AtlasManager.prototype.getAtlasTexture = function (atlasName) {\n        return this.allAtlas.get(atlasName);\n    };\n    /**\n     * This takes in any atlas resource and rasterizes it.\n     *\n     * @param {SubTexture} resource This is any atlas resource which will have it's image rasterized\n     *\n     * @return {Promise<HTMLImageElement>} A promise to resolve to the loaded image\n     *                                     or null if there was an error\n     */\n    AtlasManager.prototype.loadImage = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var imageSrc, subTexture, image_1, image, image;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        subTexture = resource.texture || new sub_texture_1.SubTexture();\n                        resource.texture = subTexture;\n                        if (!(resource instanceof image_atlas_resource_1.ImageAtlasResource)) return [3 /*break*/, 4];\n                        if (!resource.image.element) return [3 /*break*/, 2];\n                        if (resource.image.element.width !== 0 && resource.image.element.height !== 0) {\n                            image_1 = resource.image.element;\n                            subTexture.pixelWidth = image_1.width;\n                            subTexture.pixelHeight = image_1.height;\n                            subTexture.aspectRatio = image_1.width / image_1.height;\n                            return [2 /*return*/, image_1];\n                        }\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                var image = resource.image.element;\n                                image.onload = function () {\n                                    subTexture.pixelWidth = image.width;\n                                    subTexture.pixelHeight = image.height;\n                                    subTexture.aspectRatio = image.width / image.height;\n                                    resolve(image);\n                                };\n                                image.onerror = function () {\n                                    resolve(null);\n                                };\n                            })];\n                    case 1:\n                        image = _a.sent();\n                        return [2 /*return*/, image];\n                    case 2:\n                        if (resource.image.path) {\n                            imageSrc = resource.image.path;\n                        }\n                        _a.label = 3;\n                    case 3: return [3 /*break*/, 10];\n                    case 4:\n                        if (!(resource instanceof label_atlas_resource_1.LabelAtlasResource)) return [3 /*break*/, 7];\n                        if (!!resource.rasterization.canvas) return [3 /*break*/, 6];\n                        return [4 /*yield*/, label_rasterizer_1.LabelRasterizer.render(resource)];\n                    case 5:\n                        _a.sent();\n                        _a.label = 6;\n                    case 6:\n                        // Make sure the rasterization properly executed\n                        if (resource.rasterization.canvas) {\n                            debug('Rasterized label %o', resource.rasterization);\n                            imageSrc = resource.rasterization.canvas.toDataURL('image/png');\n                        }\n                        else {\n                            console.warn('The label was not able to be rasterized');\n                        }\n                        return [3 /*break*/, 10];\n                    case 7:\n                        if (!(resource instanceof color_atlas_resource_1.ColorAtlasResource)) return [3 /*break*/, 10];\n                        if (!!resource.rasterization.canvas) return [3 /*break*/, 9];\n                        return [4 /*yield*/, color_rasterizer_1.ColorRasterizer.render(resource)];\n                    case 8:\n                        _a.sent();\n                        _a.label = 9;\n                    case 9:\n                        // Make sure the rasterization properly executed\n                        if (resource.rasterization.canvas) {\n                            debug('Rasterized color %o', resource.rasterization);\n                            imageSrc = resource.rasterization.canvas.toDataURL('image/png');\n                        }\n                        else {\n                            console.warn('The color was not able to be rasterized');\n                        }\n                        _a.label = 10;\n                    case 10:\n                        if (!imageSrc) return [3 /*break*/, 12];\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                var image = new Image();\n                                image.onload = function () {\n                                    subTexture.pixelWidth = image.width;\n                                    subTexture.pixelHeight = image.height;\n                                    subTexture.aspectRatio = image.width / image.height;\n                                    resolve(image);\n                                };\n                                image.onerror = function () {\n                                    resolve(null);\n                                };\n                                image.src = imageSrc;\n                            })];\n                    case 11:\n                        image = _a.sent();\n                        return [2 /*return*/, image];\n                    case 12: return [2 /*return*/, null];\n                }\n            });\n        });\n    };\n    /**\n     * This targets an existing atlas and attempts to update it with the provided atlas resources.\n     *\n     * @param atlasName\n     * @param resources\n     */\n    AtlasManager.prototype.updateAtlas = function (atlasName, resources) {\n        return __awaiter(this, void 0, void 0, function () {\n            var atlas, _i, resources_1, resource;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        atlas = this.allAtlas.get(atlasName);\n                        if (!atlas) return [3 /*break*/, 5];\n                        _i = 0, resources_1 = resources;\n                        _a.label = 1;\n                    case 1:\n                        if (!(_i < resources_1.length)) return [3 /*break*/, 4];\n                        resource = resources_1[_i];\n                        return [4 /*yield*/, this.draw(atlas, resource)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        // Perform the best method for updating the underlying texture of the atlas to the latest changes\n                        atlas.updateTexture();\n                        return [3 /*break*/, 6];\n                    case 5:\n                        console.warn('Can not update non-existing atlas:', atlasName, 'These resources will not be loaded:', resources);\n                        _a.label = 6;\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return AtlasManager;\n}());\nexports.AtlasManager = AtlasManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\n/**\n * This is used specifically by the atlas manager to aid in packing\n * in textures within an area. This will guarantee boundaries of textures are\n * not violated and provide proper feedback for where to draw a given image\n */\nvar PackNode = /** @class */ (function () {\n    function PackNode(x, y, width, height) {\n        this.child = [null, null];\n        this.isLeaf = true;\n        this.nodeImage = null;\n        this.nodeDimensions = new bounds_1.Bounds({\n            height: height,\n            width: width,\n            x: x,\n            y: y,\n        });\n    }\n    /**\n     * Deletes all of the sub nodes in this Mapping, thus clearing up memory usage\n     */\n    PackNode.prototype.destroy = function () {\n        var child0 = this.child[0];\n        var child1 = this.child[1];\n        this.nodeImage = null;\n        if (child0) {\n            child0.destroy();\n        }\n        if (child1) {\n            child1.destroy();\n        }\n        this.child[0] = null;\n        this.child[1] = null;\n    };\n    /**\n     * Indicates if there is a child\n     */\n    PackNode.prototype.hasChild = function () {\n        var child0 = this.child[0];\n        var child1 = this.child[1];\n        if (child0 && !child0.nodeImage) {\n            return !child0.isLeaf;\n        }\n        if (child1 && !child1.nodeImage) {\n            return !child1.isLeaf;\n        }\n        return false;\n    };\n    /**\n     * Inserts images into our mapping, fitting them appropriately\n     */\n    PackNode.prototype.insert = function (image) {\n        var child0 = this.child[0];\n        var child1 = this.child[1];\n        if (!this.isLeaf && child0 && child1) {\n            // Try inserting into first child\n            var newNode = child0.insert(image);\n            if (newNode !== null) {\n                return newNode;\n            }\n            // No room in first so insert into second\n            return child1.insert(image);\n        }\n        else {\n            // If there's already an image here, return\n            if (this.nodeImage) {\n                return null;\n            }\n            // Check the fit status of the image in this nodes rectangle space\n            var fitFlag = this.nodeDimensions.fits(image.second);\n            // If we're too small, return null indicating can not fit\n            if (fitFlag === 0) {\n                return null;\n            }\n            // If we're just right, accept\n            if (fitFlag === 1) {\n                return this;\n            }\n            // Otherwise, gotta split this node and create some leaves\n            this.isLeaf = false;\n            // Get the image width\n            var imgWidth = image.second.width;\n            var imgHeight = image.second.height;\n            // Decide which way to split\n            var dWidth = this.nodeDimensions.width - imgWidth;\n            var dHeight = this.nodeDimensions.height - image.second.height;\n            if (dWidth > dHeight) {\n                this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, imgWidth, this.nodeDimensions.height);\n                this.child[1] = new PackNode(this.nodeDimensions.x + imgWidth, this.nodeDimensions.y, dWidth, this.nodeDimensions.height);\n            }\n            else {\n                this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, this.nodeDimensions.width, imgHeight);\n                this.child[1] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y + imgHeight, this.nodeDimensions.width, dHeight);\n            }\n        }\n        // Insert into first child we created\n        return this.child[0].insert(image);\n    };\n    /**\n     * Removes the image from the mapping and tries to open up as much space as possible.\n     *\n     * @param {AtlasTexture} image The image to insert into the\n     */\n    PackNode.prototype.remove = function (image) {\n        if (!this.isLeaf) {\n            // Try removing from first child\n            var removed = this.child[0].remove(image);\n            if (removed) {\n                return true;\n            }\n            // Try remove from second\n            removed = this.child[1].remove(image);\n            if (!this.child[0].hasChild()) {\n                if (!this.child[1].hasChild()) {\n                    this.child[0] = null;\n                    this.child[1] = null;\n                }\n            }\n            return removed;\n        }\n        else {\n            if (this.nodeImage === image) {\n                this.nodeImage = null;\n                image.atlasReferenceID = null;\n                image.pixelWidth = 0;\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n    };\n    return PackNode;\n}());\nexports.PackNode = PackNode;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../../types\");\nvar event_manager_1 = require(\"../event-manager\");\n/**\n * This class is an injected event manager for the surface, it specifically handles taking in mouse events intended for view interactions\n * and broadcasts them to the layers that have picking enabled, thus allowing the layers to respond to\n * mouse view locations and broadcast Instance interactions based on the interaction with the View the layer is a part of\n *\n * In Summary: This is an adapter that takes in interactions to the views and injects those events into the layers associated with\n * the views so that the layers can translate the events to gestures.\n */\nvar LayerMouseEvents = /** @class */ (function (_super) {\n    __extends(LayerMouseEvents, _super);\n    function LayerMouseEvents(sceneViews) {\n        var _this = _super.call(this) || this;\n        /** This tracks which views have the mouse over them so we can properly broadcast view is out events */\n        _this.isOver = new Map();\n        _this.sceneViews = sceneViews;\n        return _this;\n    }\n    LayerMouseEvents.prototype.getSceneViewsUnderMouse = function (e) {\n        var sceneViewByViewId = new Map();\n        // Map the scene views by the view's identifiers\n        for (var _i = 0, _a = this.sceneViews; _i < _a.length; _i++) {\n            var sceneView = _a[_i];\n            sceneViewByViewId.set(sceneView.view.id, sceneView);\n        }\n        // Now retrieve and convert each view under the mouse to the scene view it coincides with\n        return e.viewsUnderMouse.map(function (viewItem) { return sceneViewByViewId.get(viewItem.view.id); });\n    };\n    LayerMouseEvents.prototype.getMouseByViewId = function (e) {\n        // This is the mouse position for the provided view in view space\n        var viewMouseByViewId = new Map();\n        for (var _i = 0, _a = e.viewsUnderMouse; _i < _a.length; _i++) {\n            var viewItem = _a[_i];\n            viewMouseByViewId.set(viewItem.view.id, viewItem.mouse);\n        }\n        return viewMouseByViewId;\n    };\n    LayerMouseEvents.prototype.handleClick = function (e, button) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseClick(view, mouse, button); });\n    };\n    LayerMouseEvents.prototype.handleDrag = function (e, drag) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseDrag(view, mouse); });\n    };\n    LayerMouseEvents.prototype.handleInteraction = function (e, callback) {\n        // Get all of the scenes under the mouse\n        var sceneViews = this.getSceneViewsUnderMouse(e);\n        // Get a lookup of a view id to the mouse position in the view\n        var viewMouseByViewId = this.getMouseByViewId(e);\n        // For every view of every scene, we must tell it's layers it's world space is receiving mouse interactions\n        for (var _i = 0, sceneViews_1 = sceneViews; _i < sceneViews_1.length; _i++) {\n            var sceneView = sceneViews_1[_i];\n            this.handleSceneView(sceneView, viewMouseByViewId, callback);\n        }\n        return sceneViews;\n    };\n    LayerMouseEvents.prototype.handleMouseDown = function (e, button) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseDown(view, mouse, button); });\n    };\n    LayerMouseEvents.prototype.handleMouseUp = function (e, button) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseUp(view, mouse, button); });\n    };\n    LayerMouseEvents.prototype.handleMouseOver = function (e) {\n        // We let the mouse move event handle the registration of moused over views\n    };\n    LayerMouseEvents.prototype.handleMouseOut = function (e) {\n        var _this = this;\n        // Get a lookup of a view id to the mouse position in the view\n        var viewMouseByViewId = this.getMouseByViewId(e);\n        var screen = e.screen.mouse;\n        // All views that are moused over should no longer be considered over and broadcast a mouse out\n        this.isOver.forEach(function (flag, sceneView) {\n            // Since we are leaving the view we must make the view relative cooridinates fromt he screen space coords\n            viewMouseByViewId.set(sceneView.view.id, sceneView.view.screenToView(screen));\n            _this.handleSceneView(sceneView, viewMouseByViewId, function (layer, view, mouse) { return layer.interactions.handleMouseOut(view, mouse); });\n        });\n        // Nothing is over anymore\n        this.isOver.clear();\n    };\n    LayerMouseEvents.prototype.handleMouseMove = function (e) {\n        var _this = this;\n        // Get all of the scenes we have interacted with, and broadcast a move event for each\n        var allSceneViews = this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseMove(view, mouse); });\n        // Get a lookup of a view id to the mouse position in the view\n        var viewMouseByViewId = this.getMouseByViewId(e);\n        // Get the position of the mouse on the screen\n        var screen = e.screen.mouse;\n        // For quick lookups map all of the current SceneViews that are over\n        var currentSceneViews = new Map();\n        allSceneViews.forEach(function (v) { return currentSceneViews.set(v, true); });\n        // Detect which of the views are newly over\n        currentSceneViews.forEach(function (flag, sceneView) {\n            if (!_this.isOver.get(sceneView)) {\n                _this.handleSceneView(sceneView, viewMouseByViewId, function (layer, view, mouse) { return layer.interactions.handleMouseOver(view, mouse); });\n            }\n        });\n        // Detect which of the views are no longer over\n        this.isOver.forEach(function (flag, sceneView) {\n            if (!currentSceneViews.get(sceneView)) {\n                // Since these views were not interacted with, we must create the mouse interaction position\n                viewMouseByViewId.set(sceneView.view.id, sceneView.view.screenToView(screen));\n                _this.handleSceneView(sceneView, viewMouseByViewId, function (layer, view, mouse) { return layer.interactions.handleMouseOut(view, mouse); });\n            }\n        });\n        // Update the current views that are over to the currently over views for next event\n        this.isOver = currentSceneViews;\n    };\n    LayerMouseEvents.prototype.handleSceneView = function (sceneView, viewMouseByViewId, callback) {\n        var view = sceneView.view;\n        var mouse = viewMouseByViewId.get(view.id);\n        for (var _i = 0, _a = sceneView.scene.layers; _i < _a.length; _i++) {\n            var layer = _a[_i];\n            if (layer.picking && layer.picking.type === types_1.PickType.ALL) {\n                callback(layer, view, mouse);\n            }\n        }\n    };\n    LayerMouseEvents.prototype.handleWheel = function (e) {\n        // TODO: This may need to be implemented. As of right now, there is no particular benefit\n    };\n    return LayerMouseEvents;\n}(event_manager_1.EventManager));\nexports.LayerMouseEvents = LayerMouseEvents;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar generate_layer_model_1 = require(\"../surface/generate-layer-model\");\nvar make_instance_uniform_name_1 = require(\"./make-instance-uniform-name\");\n/**\n * This class does a whoooooole lot of making the magical instancing optimization controls possible.\n *\n * Our instancing hackyness comes from the idea that uniforms are fast, and you don't have to commit\n * ALL of them when you touch just a little piece, and you don't have worry about drivers not supporting\n * partial vertex buffer updates.\n *\n * This also is WebGL 1.0 compatible without any extensions that are poorly implemented. And again: does\n * NOT require entire attribute buffer commits.\n *\n * Uniforms are limited for any given draw call. So we have to create multiple materials to support\n * chunks of the instances that need to be drawn. We then have to associate an instance with the set\n * of uniforms that is related to the instance and keep them paired together. If we have too many instances\n * we must generate more buffers to accomodate them.\n *\n * If we remove instances, we must free up the uniform set so that others can use the uniforms. While the uniforms\n * are not in use, the instance should not be rendering.\n */\nvar InstanceUniformManager = /** @class */ (function () {\n    function InstanceUniformManager(layer, scene) {\n        /** The generated buffers by this manager */\n        this.buffers = [];\n        /** The uniform clusters that are free and can be used by an instance */\n        this.availableClusters = [];\n        /** A lookup of an instance to a cluster of uniforms associated with it */\n        this.instanceToCluster = new Map();\n        /** A map of a cluster of uniforms to the buffer it comes from */\n        this.clusterToBuffer = new Map();\n        this.layer = layer;\n        var maxUniformBlock = 0;\n        layer.instanceAttributes.forEach(function (attributes) {\n            maxUniformBlock = Math.max(attributes.block, maxUniformBlock);\n        });\n        this.uniformBlocksPerInstance = maxUniformBlock + 1;\n        this.scene = scene;\n    }\n    /**\n     * This adds an instance to the manager and gives the instance an associative\n     * block of uniforms to work with.\n     */\n    InstanceUniformManager.prototype.add = function (instance) {\n        // If there are no available buffers, we must add a buffer\n        if (this.availableClusters.length <= 0) {\n            this.makeNewBuffer();\n        }\n        var cluster = this.availableClusters.shift();\n        if (cluster) {\n            this.instanceToCluster.set(instance, cluster);\n        }\n        else {\n            console.warn('No valid cluster available for instance added to uniform manager.');\n        }\n        return cluster;\n    };\n    /**\n     * This retireves the uniforms associated with an instance, or returns nothing\n     * if the instance has not been associated yet.\n     */\n    InstanceUniformManager.prototype.getUniforms = function (instance) {\n        return this.instanceToCluster.get(instance);\n    };\n    /**\n     * Disassociates an instance with it's group of uniforms and makes the instance\n     * in the buffer no longer drawable.\n     */\n    InstanceUniformManager.prototype.remove = function (instance) {\n        var cluster = this.instanceToCluster.get(instance);\n        // If the instance is associated with a cluster, we can add the cluster back to being available\n        // For another instance.\n        if (cluster) {\n            this.instanceToCluster.delete(instance);\n            this.availableClusters.unshift(cluster);\n        }\n        return cluster;\n    };\n    /**\n     * Clears all elements of this manager from the current scene it was in.\n     */\n    InstanceUniformManager.prototype.removeFromScene = function () {\n        var _this = this;\n        this.buffers.forEach(function (buffer, index) {\n            _this.scene.container.remove(buffer.model);\n        });\n        this.scene = null;\n    };\n    /**\n     * Applies the buffers to the provided scene for rendering.\n     */\n    InstanceUniformManager.prototype.setScene = function (scene) {\n        var _this = this;\n        this.buffers.forEach(function (buffer, index) {\n            _this.scene.container.add(buffer.model);\n        });\n        this.scene = scene;\n    };\n    /**\n     * This generates a new buffer of uniforms to associate instances with.\n     */\n    InstanceUniformManager.prototype.makeNewBuffer = function () {\n        // We generate a new geometry object for the buffer as the geometry\n        // Needs to have it's own unique draw range per buffer for optimal\n        // Performance\n        var newGeometry = new Three.BufferGeometry();\n        this.layer.vertexAttributes.forEach(function (attribute) {\n            newGeometry.addAttribute(attribute.name, attribute.materialAttribute);\n        });\n        // Ensure the draw range covers every instance in the geometry.\n        newGeometry.drawRange.start = 0;\n        newGeometry.drawRange.count = this.layer.maxInstancesPerBuffer * this.layer.instanceVertexCount;\n        // This is the material that is generated for the layer that utilizes all of the generated and\n        // Injected shader IO and shader fragments\n        var newMaterial = this.layer.material.clone();\n        // Now make a Model for the buffer so it can be rendered withn the scene\n        var newModel = generate_layer_model_1.generateLayerModel(this.layer, newGeometry, newMaterial);\n        // We render junkloads of instances in a buffer. Culling will have to happen\n        // On an instance level.\n        newModel.frustumCulled = false;\n        // Make our new buffer which will manage the geometry and everything necessary\n        var buffer = {\n            activeInstances: [],\n            clusters: [],\n            firstInstance: 0,\n            geometry: newGeometry,\n            lastInstance: 0,\n            material: newMaterial,\n            model: newModel,\n        };\n        this.buffers.push(buffer);\n        // Now that we have created a new buffer, we have all of it's uniforms\n        // To use to render more instances. We must take the instancing uniforms\n        // And divvy them up into clusters for our available buffer.\n        var uniformIndex = 0;\n        var uniformName = make_instance_uniform_name_1.makeInstanceUniformNameArray();\n        var instanceData = newMaterial.uniforms[uniformName];\n        // We must ensure the vector objects are TOTALLY unique otherwise they'll get shared across buffers\n        instanceData.value = instanceData.value.map(function () { return new Three.Vector4(0.0, 0.0, 0.0, 0.0); });\n        for (var i = 0, end = this.layer.maxInstancesPerBuffer; i < end; ++i) {\n            var cluster = {\n                instanceIndex: i,\n                uniform: instanceData,\n                uniformRange: [uniformIndex, 0],\n            };\n            uniformIndex += this.uniformBlocksPerInstance;\n            cluster.uniformRange[1] = uniformIndex;\n            buffer.clusters.push(cluster);\n            this.availableClusters.push(cluster);\n            this.clusterToBuffer.set(cluster, buffer);\n        }\n        // Grab the global uniforms from the material and add it to the uniform's materialUniform list so that\n        // We can keep uniforms consistent across all Instances\n        for (var i = 0, end = this.layer.uniforms.length; i < end; ++i) {\n            var uniform = this.layer.uniforms[i];\n            uniform.materialUniforms.push(newMaterial.uniforms[uniform.name]);\n        }\n        // Now that we are ready to utilize the buffer, let's add it to the scene so it may be rendered.\n        // Each new buffer equates to one draw call.\n        if (this.scene) {\n            this.scene.container.add(buffer.model);\n        }\n    };\n    return InstanceUniformManager;\n}());\nexports.InstanceUniformManager = InstanceUniformManager;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nvar maxPopulation = 5;\nvar maxDepth = 10;\n/**\n * This filters a quad tree query by type\n *\n * @export\n * @template T\n */\nfunction filterQuery(type, queryValues) {\n    var filtered = [];\n    queryValues.forEach(function (obj) {\n        if (type.find(function (t) { return obj instanceof t; })) {\n            filtered.push(obj);\n        }\n    });\n    return filtered;\n}\nexports.filterQuery = filterQuery;\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n *\n * @class Quadrants\n */\nvar Quadrants = /** @class */ (function () {\n    /**\n     * Creates an instance of Quadrants.\n     *\n     * @param bounds The bounds this will create quandrants for\n     * @param depth  The child depth of this element\n     *\n     * @memberOf Quadrants\n     */\n    function Quadrants(bounds, depth) {\n        var mid = bounds.mid;\n        this.TL = new Node(bounds.x, mid.x, bounds.y, mid.y, depth);\n        this.TR = new Node(mid.x, bounds.right, bounds.y, mid.y, depth);\n        this.BL = new Node(bounds.x, mid.x, mid.y, bounds.bottom, depth);\n        this.BR = new Node(mid.x, bounds.right, mid.y, bounds.bottom, depth);\n    }\n    /**\n     * Ensures all memory is released for all nodes and all references are removed\n     * to potentially high memory consumption items\n     *\n     * @memberOf Quadrants\n     */\n    Quadrants.prototype.destroy = function () {\n        this.TL.destroy();\n        this.TR.destroy();\n        this.BL.destroy();\n        this.BR.destroy();\n        delete this.TL;\n        delete this.TR;\n        delete this.BL;\n        delete this.BR;\n    };\n    return Quadrants;\n}());\nexports.Quadrants = Quadrants;\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n *\n * @export\n * @class Node\n */\nvar Node = /** @class */ (function () {\n    /**\n     * Creates an instance of Node.\n     *\n     * @param l     The bounding left wall of the space this node covers\n     * @param r     The bounding right wall of the space this node covers\n     * @param t     The bounding top wall of the space this node covers\n     * @param b     The bounding bottom wall of the space this node covers\n     * @param depth The depth within the quad tree this node resides\n     *\n     * @memberOf Node\n     */\n    function Node(left, right, top, bottom, depth) {\n        this.children = [];\n        this.depth = 0;\n        // If params insertted\n        if (arguments.length >= 4) {\n            this.bounds = new bounds_1.Bounds({\n                height: top - bottom,\n                width: right - left,\n                x: left,\n                y: top,\n            });\n        }\n        // Otherwise, make tiny start area\n        else {\n            this.bounds = new bounds_1.Bounds({\n                height: 1,\n                width: 1,\n                x: 0,\n                y: 0,\n            });\n        }\n        // Ensure the depth is set\n        this.depth = depth || 0;\n    }\n    /**\n     * Destroys this node and ensures all child nodes are destroyed as well.\n     *\n     * @memberOf Node\n     */\n    Node.prototype.destroy = function () {\n        delete this.children;\n        delete this.bounds;\n        if (this.nodes) {\n            this.nodes.destroy();\n            delete this.nodes;\n        }\n    };\n    /**\n     * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n     * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n     * this quad tree spans (and this is the root node), the quad tree will expand to include\n     * the new child.\n     *\n     * @param child The Bounds type object to inject\n     * @param props Properties that can be retrieved with the child object if applicable\n     *\n     * @returns True if the insertion was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.add = function (child, props) {\n        // This is the entry function for adding children, so we must first expand our top node\n        // To cover the area that the child is located.\n        // If we're in bounds, then let's just add the child\n        if (child.isInside(this.bounds)) {\n            return this.doAdd(child);\n        }\n        // Otherwise, we need to expand first\n        else {\n            this.cover(child);\n            return this.add(child, props);\n        }\n    };\n    /**\n     * Adds a list of new children to this quad tree. It performs the same operations as\n     * addChild for each child in the list, however, it more efficiently recalculates the\n     * bounds necessary to cover the area the children cover.\n     *\n     * @param children      List of Bounds objects to inject\n     * @param childrenProps List of props to associate with each element\n     *\n     * @memberOf Node\n     */\n    Node.prototype.addAll = function (children, childrenProps) {\n        var _this = this;\n        // Ensure the properties are at least defined\n        childrenProps = childrenProps || [];\n        // Make sure we cover the entire area of all the children.\n        // We can speed this up a lot if we first calculate the total bounds the new children covers\n        var minX = Number.MAX_VALUE;\n        var minY = Number.MAX_VALUE;\n        var maxX = -Number.MAX_VALUE;\n        var maxY = -Number.MAX_VALUE;\n        // Get the dimensions of the new bounds\n        children.forEach(function (child) {\n            if (child.x < minX) {\n                minX = child.x;\n            }\n            if (child.right > maxX) {\n                maxX = child.right;\n            }\n            if (child.bottom > maxY) {\n                maxY = child.bottom;\n            }\n            if (child.y < minY) {\n                minY = child.y;\n            }\n        });\n        // Make sure our bounds includes the specified bounds\n        this.cover(new bounds_1.Bounds({\n            height: maxY - minY,\n            width: maxX - minX,\n            x: minX,\n            y: minY,\n        }));\n        // Add all of the children into the tree\n        children.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n     * This will cause all children to be re-injected into the tree.\n     *\n     * @param bounds The bounds to include in the tree's coverage\n     *\n     * @memberOf Node\n     */\n    Node.prototype.cover = function (bounds) {\n        var _this = this;\n        // If we are already covering the area: abort\n        if (bounds.isInside(this.bounds)) {\n            return;\n        }\n        // Make our bounds cover the new area\n        this.bounds.encapsulate(bounds);\n        this.bounds.x -= 1;\n        this.bounds.y -= 1;\n        this.bounds.width += 2;\n        this.bounds.height += 4;\n        // Get all of the children underneath this node\n        var allChildren = this.gatherChildren([]);\n        // Destroy the split nodes\n        if (this.nodes) {\n            // Completely...destroy...\n            this.nodes.destroy();\n            delete this.nodes;\n        }\n        // Reinsert all children with the new dimensions in place\n        allChildren.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * When adding children, this performs the actual action of injecting the child into the tree\n     * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n     *\n     * @param child The Bounds item to inject into the tree\n     * @param props The props to remain associated with the child\n     *\n     * @returns True if the injection was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.doAdd = function (child) {\n        // If nodes are present, then we have already exceeded the population of this node\n        if (this.nodes) {\n            if (child.isInside(this.nodes.TL.bounds)) {\n                return this.nodes.TL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.TR.bounds)) {\n                return this.nodes.TR.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BL.bounds)) {\n                return this.nodes.BL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BR.bounds)) {\n                return this.nodes.BR.doAdd(child);\n            }\n            // Otherwise, this is a child overlapping this border\n            this.children.push(child);\n            return true;\n        }\n        // Otherwise, we have not had a split due to population limits being exceeded\n        else if (child.isInside(this.bounds)) {\n            this.children.push(child);\n            // If we exceeded our population for this quadrant, it is time to split up\n            if (this.children.length > maxPopulation && this.depth < maxDepth) {\n                this.split();\n            }\n            return true;\n        }\n        // This is when there is something wrong with the insertted child. The bounds\n        // For the quad should have grown without issue, but in this case the bounds\n        // Could not grow to accomodate the child.\n        if (isNaN(child.width + child.height + child.x + child.y)) {\n            console.error('Child did not fit into bounds because a dimension is NaN', child);\n        }\n        else if (child.area === 0) {\n            console.error('Child did not fit into bounds because the area is zero', child);\n        }\n        // Don't insert the child and continue\n        return true;\n    };\n    /**\n     * Collects all children of all the current and sub nodes into a single list.\n     *\n     * @param list The list we must aggregate children into\n     *\n     * @return The list specified as the list parameter\n     */\n    Node.prototype.gatherChildren = function (list) {\n        list = list.concat(this.children);\n        if (this.nodes) {\n            this.nodes.TL.gatherChildren(list);\n            this.nodes.TR.gatherChildren(list);\n            this.nodes.BL.gatherChildren(list);\n            this.nodes.BR.gatherChildren(list);\n        }\n        return list;\n    };\n    /**\n     * Entry query for determining query type based on input object\n     *\n     * @param bounds Can be a Bounds or a Point object\n     * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n     *               information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return An array of children that intersects with the query\n     */\n    Node.prototype.query = function (bounds, visit) {\n        // Query a rectangle\n        if (bounds instanceof bounds_1.Bounds) {\n            if (bounds.hitBounds(this.bounds)) {\n                return this.queryBounds(bounds, [], visit);\n            }\n            // Return an empty array when nothing is collided with\n            return [];\n        }\n        // Query a point\n        if (this.bounds.containsPoint(bounds)) {\n            return this.queryPoint(bounds, [], visit);\n        }\n        // Return an empty array when nothing is collided with\n        return [];\n    };\n    /**\n     * Queries children for intersection with a bounds object\n     *\n     * @param b     The Bounds to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return     Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryBounds = function (b, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.hitBounds(b)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (b.hitBounds(this.nodes.TL.bounds)) {\n                this.nodes.TL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.TR.bounds)) {\n                this.nodes.TR.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BL.bounds)) {\n                this.nodes.BL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BR.bounds)) {\n                this.nodes.BR.queryBounds(b, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Queries children for intersection with a point\n     *\n     * @param p     The Point to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return      Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryPoint = function (p, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.containsPoint(p)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (this.nodes.TL.bounds.containsPoint(p)) {\n                this.nodes.TL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.TR.bounds.containsPoint(p)) {\n                this.nodes.TR.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BL.bounds.containsPoint(p)) {\n                this.nodes.BL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BR.bounds.containsPoint(p)) {\n                this.nodes.BR.queryPoint(p, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Creates four sub quadrants for this node.\n     */\n    Node.prototype.split = function () {\n        // Gather all items to be handed down\n        var allChildren = this.gatherChildren([]);\n        // Gather all props for the children to be handed down as well\n        this.nodes = new Quadrants(this.bounds, this.depth + 1);\n        this.children = [];\n        while (allChildren.length > 0) {\n            var child = allChildren.pop();\n            if (child)\n                this.doAdd(child);\n        }\n    };\n    /**\n     * Traverses the quad tree returning every quadrant encountered\n     *\n     * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n     */\n    Node.prototype.visit = function (cb) {\n        var finished = Boolean(cb(this));\n        if (this.nodes && !finished) {\n            this.nodes.TL.visit(cb);\n            this.nodes.TR.visit(cb);\n            this.nodes.BL.visit(cb);\n            this.nodes.BR.visit(cb);\n        }\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar QuadTree = /** @class */ (function (_super) {\n    __extends(QuadTree, _super);\n    function QuadTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return QuadTree;\n}(Node));\nexports.QuadTree = QuadTree;\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * Active `debug` instances.\n */\nexports.instances = [];\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  var prevTime;\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n  debug.destroy = destroy;\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  exports.instances.push(debug);\n\n  return debug;\n}\n\nfunction destroy () {\n  var index = exports.instances.indexOf(this);\n  if (index !== -1) {\n    exports.instances.splice(index, 1);\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var i;\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n\n  for (i = 0; i < exports.instances.length; i++) {\n    var instance = exports.instances[i];\n    instance.enabled = exports.enabled(instance.namespace);\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  if (name[name.length - 1] === '*') {\n    return true;\n  }\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__95__;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar data_bounds_1 = require(\"../util/data-bounds\");\nfunction value(val, ref, scaleRatio) {\n    var parse = \"\" + val;\n    var num = parseFloat(parse);\n    if (isNaN(num)) {\n        return 0;\n    }\n    // If this is a percentage use the reference as the num to multiply against\n    if (parse.indexOf('%') > -1) {\n        return (num / 100.0) * ref;\n    }\n    return num * scaleRatio;\n}\n/**\n * This evaluates an absolute position with a reference to produce meaningful bounds.\n *\n * The scaleRatio provided should be available in or for percents to have the same weighting\n * as whole number values.\n */\nfunction getAbsolutePositionBounds(item, reference, scaleRatio) {\n    if (reference.width === 0 || reference.height === 0) {\n        console.warn('An AbsolutePosition evaluated to invalid dimensions.', 'Please ensure that the object provided and the reference has valid dimensions', 'to produce dimensions with width and height that are non-zero.', 'item:', item, 'reference:', reference.toString());\n    }\n    var bounds = data_bounds_1.DataBounds.emptyBounds();\n    var width;\n    var height;\n    // Calculate the horizontal values\n    if (item.width) {\n        bounds.width = value(item.width, reference.width, scaleRatio);\n        if ('left' in item) {\n            bounds.x = value(item.left, reference.width, scaleRatio);\n        }\n        else if ('right' in item) {\n            bounds.x = reference.width - value(item.right, reference.width, scaleRatio) - bounds.width;\n        }\n    }\n    else {\n        var left = value(item.left, reference.width, scaleRatio);\n        var right = reference.width - value(item.right, reference.width, scaleRatio);\n        width = right - left;\n        if (width < 0) {\n            console.warn('An AbsolutePosition evaluated to invalid dimensions.', 'Please ensure that the object provided and the reference has valid dimensions', 'to produce dimensions with width and height that are greater than zero.', 'item:', item, 'reference:', reference.toString());\n        }\n        bounds.x = left;\n        bounds.width = width;\n    }\n    // Calculate the vertical values\n    if (item.height) {\n        bounds.height = value(item.height, reference.height, scaleRatio);\n        if ('top' in item) {\n            bounds.y = value(item.top, reference.height, scaleRatio);\n        }\n        else if ('bottom' in item) {\n            bounds.y = reference.height - value(item.bottom, reference.height, scaleRatio) - bounds.height;\n        }\n    }\n    else {\n        var top_1 = value(item.top, reference.height, scaleRatio);\n        var bottom = reference.height - value(item.bottom, reference.height, scaleRatio);\n        height = bottom - top_1;\n        if (width < 0) {\n            console.warn('An AbsolutePosition evaluated to invalid dimensions.', 'Please ensure that the object provided and the reference has valid dimensions', 'to produce dimensions with width and height that are greater than zero.', 'item:', item, 'reference:', reference.toString());\n        }\n        bounds.y = top_1;\n        bounds.height = height;\n    }\n    if (bounds.width === 0 || bounds.height === 0 || isNaN(bounds.x + bounds.y + bounds.width + bounds.height)) {\n        bounds.x = 0;\n        bounds.y = 0;\n        bounds.width = reference.width;\n        bounds.height = reference.height;\n    }\n    return bounds;\n}\nexports.getAbsolutePositionBounds = getAbsolutePositionBounds;\n","module.exports = \"// These are projection methods utilizing the simpler camera breakdown approach\\n\\nvec3 cameraSpace(vec3 world) {\\n  return (world + cameraOffset) * cameraScale;\\n}\\n\\nvec3 cameraSpaceSize(vec3 worldSize) {\\n  return worldSize * cameraScale;\\n}\\n\\nvec4 clipSpace(vec3 world) {\\n  return vec4(((projection * modelView) * vec4(cameraSpace(world), 1.0)).xyz, 1.0);\\n}\\n\\nvec4 clipSpaceSize(vec3 worldSize) {\\n  return vec4(((projection * modelView) * vec4(cameraSpaceSize(worldSize), 0.0)).xyz, 1.0);\\n}\\n\"","module.exports = \"// When instancing is enabled, it causes a major list of uniforms to be generated\\n// it also generates a massive search tree to retrieve the correct unforms in question.\\n${instanceUniformDeclarations}\\n\\n// This is the uniforms provided by the system along with the uniforms created by the layer\\n${layerUniforms}\\n\\n// This is the attributes generated for vertex attributes\\n${vertexAttributes}\\n\\n// This is the methods and set up needed to retrieve a block of data for an instance\\n${instanceDataRetrieval}\\n\"","module.exports = \"// This is the injected dereferencing of the instance attributes\\n  int instanceIndex = int(instance);\\n  ${instanceDestructuring}\\n\\n  // This is a special injected instance attribute. It lets the system\\n  // control specific instances ability to draw, which allows the backend\\n  // system greater control on how it optimizes draw calls and it's buffers.\\n  if (_active == 0.0) {\\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n\\n    // Quick exit to prevent any geometry from arising from the instance\\n    return;\\n  }\\n\"","module.exports = \"// This is the fragment shader generated by the system\\n${layerUniforms}\\n\\n// --------------- The fragment shader provided by the layer ------------------\\n${shader}\\n\"","module.exports = \"// This is the vertex shader generated by the system\\n${shaderInput}\\n${projectionMethods}\\n// --------------- Vertex shader provided by the layer -----------------\\n${shader}\\n\"","module.exports = \"int instanceSize = ${instanceBlockCount};\\n\\nvec4 getBlock(int index, int instanceIndex) {\\n  return instanceData[(instanceSize * instanceIndex) + index];\\n}\\n\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar types_1 = require(\"../../types\");\nvar make_instance_uniform_name_1 = require(\"../../util/make-instance-uniform-name\");\nvar shader_templating_1 = require(\"../../util/shader-templating\");\nvar template_vars_1 = require(\"../fragments/template-vars\");\nvar instanceRetrievalArrayFragment = require('../fragments/instance-retrieval-array.vs');\n/** Defines the elements for destructuring out of a vector */\nvar VECTOR_COMPONENTS = ['x', 'y', 'z', 'w'];\n/** Converts a size to a shader type */\nvar sizeToType = {\n    1: 'float',\n    2: 'vec2',\n    3: 'vec3',\n    4: 'vec4',\n    9: 'mat3',\n    16: 'mat4',\n    /** This is the special case for instance attributes that want an atlas resource */\n    99: 'vec4',\n};\nfunction makeUniformArrayDeclaration(totalBlocks) {\n    return {\n        fragment: \"uniform vec4 \" + make_instance_uniform_name_1.makeInstanceUniformNameArray() + \"[\" + totalBlocks + \"];\",\n        materialUniforms: [\n            {\n                name: make_instance_uniform_name_1.makeInstanceUniformNameArray(),\n                type: '4fv',\n                value: new Array(totalBlocks)\n                    .fill(0)\n                    .map(function () { return new Three.Vector4(0, 0, 0, 0); }),\n            },\n        ],\n    };\n}\nexports.makeUniformArrayDeclaration = makeUniformArrayDeclaration;\nfunction makeInstanceRetrievalArray(blocksPerInstance) {\n    var templateOptions = {};\n    templateOptions[template_vars_1.templateVars.instanceBlockCount] = \"\" + blocksPerInstance;\n    var required = {\n        name: 'makeInstanceRetrievalArray',\n        values: [\n            template_vars_1.templateVars.instanceBlockCount,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(instanceRetrievalArrayFragment, templateOptions, required);\n    return results.shader;\n}\nexports.makeInstanceRetrievalArray = makeInstanceRetrievalArray;\nfunction makeInstanceDestructuringArray(instanceAttributes, blocksPerInstance) {\n    var out = '';\n    // Generate the blocks\n    for (var i = 0; i < blocksPerInstance; ++i) {\n        out += \"  vec4 block\" + i + \" = getBlock(\" + i + \", instanceIndex);\\n\";\n    }\n    instanceAttributes.forEach(function (attribute) {\n        var block = attribute.block;\n        // If we have a size the size of a block, then don't swizzle the vector\n        if (attribute.size === types_1.InstanceAttributeSize.FOUR) {\n            out += \"  \" + sizeToType[attribute.size] + \" \" + attribute.name + \" = block\" + block + \";\\n\";\n        }\n        // If the attribute is an atlas, then we use the special ATLAS size and don't swizzle the vector\n        else if (attribute.atlas) {\n            out += \"  \" + sizeToType[types_1.InstanceAttributeSize.ATLAS] + \" \" + attribute.name + \" = block\" + block + \";\\n\";\n        }\n        // Do normal destructuring with any other size and type\n        else {\n            out += \"  \" + sizeToType[attribute.size] + \" \" + attribute.name + \" = block\" + block + \".\" + makeVectorSwizzle(attribute.blockIndex, attribute.size) + \";\\n\";\n        }\n    });\n    return out;\n}\nexports.makeInstanceDestructuringArray = makeInstanceDestructuringArray;\nfunction makeVectorSwizzle(start, size) {\n    return VECTOR_COMPONENTS.slice(start, start + size).join('');\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * The goal of this file is to take in model attributes and instance attributes specified\n * and inject the proper attributes into the shaders so the implementor of the shader does\n * not worry about syncing attribute and uniform names between the JS\n */\nvar types_1 = require(\"../../types\");\nvar shader_templating_1 = require(\"../../util/shader-templating\");\nvar webgl_stat_1 = require(\"../../util/webgl-stat\");\nvar template_vars_1 = require(\"../fragments/template-vars\");\nvar uniform_instance_block_array_1 = require(\"./uniform-instance-block-array\");\n// These are all of the necessary fragments that will comprise our shader that is generated\nvar vertexShaderComposition = require('../fragments/vertex-shader-composition.vs');\nvar fragmentShaderComposition = require('../fragments/fragment-shader-composition.fs');\nvar instanceDestructuringArray = require('../fragments/instance-destructuring-array.vs');\nvar shaderInput = require('../fragments/shader-input.vs');\nvar projectionMethods = require('../fragments/projection-methods.vs');\n// Constants\n/**\n * Defines how many floats are available in a uniform block\n * What is a uniform block you ask? Why let me tell you! It is how opengl stores and communicates uniforms\n * to the GPU. Whenever you declare a uniform, it will use a hunk of memory. You can see how many uniforms\n * a GPU can have via the paramter MAX_VERTEX_UNIFORM_VECTORS. The number returned is the number of blocks\n * we can use for uniforms in the vertex shader. A BLOCK is an entire vec4.\n *\n * When you declare a uniform in your shader, it will use an entire BLOCK at the MINIMUM.\n *\n * A uniform float uses 1 block. vec2 uses 1 block. vec3 uses one block. vec4 uses one block.\n * mat4 uses 4 blocks. mat3 uses 3 blocks.\n *\n * etc etc.\n */\nvar MAX_USE_PER_BLOCK = 4;\n/** Converts a size to a shader type */\nvar sizeToType = {\n    1: 'float',\n    2: 'vec2',\n    3: 'vec3',\n    4: 'vec4',\n    9: 'mat3',\n    16: 'mat4',\n    99: 'sampler2D',\n};\nfunction calculateUniformBlockUseage(uniforms) {\n    var count = 0;\n    for (var i = 0, end = uniforms.length; i < end; ++i) {\n        count += Math.ceil(uniforms[i].size / 4);\n    }\n    return count;\n}\n/**\n * This method is the main algorithm for piecing together all of the attributes necessary\n * and injecting them into the shaders.\n *\n * @param shaders\n * @param vertexAttributes\n * @param instanceAttributes\n */\nfunction injectFragments(shaders, vertexAttributes, instanceAttributes, uniforms) {\n    var shaderInputMetrics = generateShaderInputs(vertexAttributes, instanceAttributes, uniforms);\n    var templateOptions = (_a = {},\n        _a[template_vars_1.templateVars.projectionMethods] = generateProjectionMethods(),\n        _a[template_vars_1.templateVars.shaderInput] = shaderInputMetrics.fragment,\n        _a[template_vars_1.templateVars.shader] = generateVertexShader(shaders, instanceAttributes, shaderInputMetrics.metrics.maxInstancesPerBuffer, shaderInputMetrics.metrics.blocksPerInstance),\n        _a);\n    var required = {\n        name: 'vertex shader composition',\n        values: [\n            template_vars_1.templateVars.projectionMethods,\n            template_vars_1.templateVars.shaderInput,\n            template_vars_1.templateVars.shader,\n        ],\n    };\n    var vertexShaderResults = shader_templating_1.shaderTemplate(vertexShaderComposition, templateOptions, required);\n    templateOptions = (_b = {},\n        _b[template_vars_1.templateVars.layerUniforms] = generateUniforms(uniforms, types_1.ShaderInjectionTarget.FRAGMENT),\n        _b[template_vars_1.templateVars.shader] = generateFragmentShader(shaders),\n        _b);\n    required = {\n        name: 'fragment shader composition',\n        values: [\n            template_vars_1.templateVars.layerUniforms,\n            template_vars_1.templateVars.shader,\n        ],\n    };\n    var fragmentShaderResults = shader_templating_1.shaderTemplate(fragmentShaderComposition, templateOptions, required);\n    return {\n        fs: fragmentShaderResults.shader,\n        materialUniforms: shaderInputMetrics.materialUniforms,\n        maxInstancesPerBuffer: shaderInputMetrics.metrics.maxInstancesPerBuffer,\n        vs: vertexShaderResults.shader,\n    };\n    var _a, _b;\n}\nexports.injectFragments = injectFragments;\n/**\n * Creates the projection method fragment\n */\nfunction generateProjectionMethods() {\n    var templateOptions = {};\n    var required = {\n        name: 'projection methods',\n        values: [],\n    };\n    var results = shader_templating_1.shaderTemplate(projectionMethods, templateOptions, required);\n    return results.shader;\n}\n/**\n * Generates the fragments for shader IO such as vertex and instance attributes\n */\nfunction generateShaderInputs(vertexAttributes, instanceAttributes, uniforms) {\n    var templateOptions = {};\n    var instancingInfo = generateInstanceDataLookupOptions(templateOptions, instanceAttributes, uniforms);\n    var additionalOptions = (_a = {},\n        _a[template_vars_1.templateVars.layerUniforms] = generateUniforms(uniforms, types_1.ShaderInjectionTarget.VERTEX),\n        _a[template_vars_1.templateVars.vertexAttributes] = generateVertexAttributes(vertexAttributes),\n        _a);\n    Object.assign(templateOptions, additionalOptions);\n    var required = {\n        name: 'shader input',\n        values: [\n            template_vars_1.templateVars.instanceDataRetrieval,\n            template_vars_1.templateVars.instanceUniformDeclarations,\n            template_vars_1.templateVars.layerUniforms,\n            template_vars_1.templateVars.vertexAttributes,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(shaderInput, templateOptions, required);\n    return {\n        fragment: results.shader,\n        materialUniforms: instancingInfo.materialUniforms,\n        metrics: instancingInfo.metrics,\n    };\n    var _a;\n}\n/**\n *\n * @param uniforms\n */\nfunction generateUniforms(uniforms, injectionType) {\n    var out = '';\n    var injection = injectionType || types_1.ShaderInjectionTarget.VERTEX;\n    uniforms.forEach(function (uniform) {\n        uniform.shaderInjection = uniform.shaderInjection || types_1.ShaderInjectionTarget.VERTEX;\n        if (uniform.shaderInjection === injection || uniform.shaderInjection === types_1.ShaderInjectionTarget.ALL) {\n            out += \"uniform \" + (uniform.qualifier || '') + (uniform.qualifier ? ' ' : '') + sizeToType[uniform.size] + \" \" + uniform.name + \";\\n\";\n        }\n    });\n    return out;\n}\n/**\n * This takes in the layer's vertex shader and transforms any required templating within the\n * shader.\n */\nfunction generateVertexShader(shaders, instanceAttributes, maxInstancesPerBuffer, blocksPerInstance) {\n    var templateOptions = (_a = {},\n        _a[template_vars_1.templateVars.attributes] = makeInstanceAttributeReferences(instanceAttributes, blocksPerInstance),\n        _a);\n    var required = {\n        name: 'layer vertex shader',\n        values: [\n            template_vars_1.templateVars.attributes,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(shaders.vs, templateOptions, required);\n    return results.shader;\n    var _a;\n}\nfunction generateFragmentShader(shaders) {\n    var templateOptions = {};\n    var required = {\n        name: 'layer fragment shader',\n        values: [],\n    };\n    var results = shader_templating_1.shaderTemplate(shaders.fs, templateOptions, required);\n    return results.shader;\n}\n/**\n * This generates the inline attribute references needed to be able to reference instance attribute\n * vars.\n */\nfunction makeInstanceAttributeReferences(instanceAttributes, blocksPerInstance) {\n    var templateOptions = {};\n    templateOptions[template_vars_1.templateVars.blocksPerInstance] = \"\" + blocksPerInstance;\n    templateOptions[template_vars_1.templateVars.instanceDestructuring] = makeInstanceDestructuring(instanceAttributes, blocksPerInstance);\n    var required = {\n        name: 'instance attributes fragment',\n        values: [\n            template_vars_1.templateVars.instanceDestructuring,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(instanceDestructuringArray, templateOptions, required);\n    return results.shader;\n}\n/**\n * This generates an in method destructuring pattern to make instance attributes available within a method.\n */\nfunction makeInstanceDestructuring(instanceAttributes, blocksPerInstance) {\n    return uniform_instance_block_array_1.makeInstanceDestructuringArray(instanceAttributes, blocksPerInstance);\n}\n/**\n * This generates the model attribute declarations\n */\nfunction generateVertexAttributes(vertexAttributes) {\n    var out = '';\n    vertexAttributes.forEach(function (attribute) {\n        out += \"attribute \" + sizeToType[attribute.size] + \" \" + (attribute.qualifier || '') + ((attribute.qualifier && ' ') || '') + attribute.name + \";\\n\";\n    });\n    return out;\n}\n/**\n * This method generates the chunk of shader that is responsible for providing\n */\nfunction generateInstanceDataLookupOptions(templateOptions, instanceAttributes, uniforms) {\n    // This is how many uniform blocks the current device can utilize in a shader\n    var maxUniforms = webgl_stat_1.WebGLStat.MAX_VERTEX_UNIFORMS;\n    // This reflects how many uniform blocks are available for instancing\n    var instanceUniformBlockCount = maxUniforms - calculateUniformBlockUseage(uniforms);\n    // Go through the attributes provided and calculate the number of blocks requested\n    // Also sort the attributes by block and pack the block useage down.\n    var sortedInstanceAttributes = instanceAttributes.slice(0).sort(function (a, b) { return a.block - b.block; });\n    var currentBlock = sortedInstanceAttributes[0].block;\n    var trueBlockIndex = 0;\n    // This tracks how much a block is used\n    var blockUseage = new Map();\n    var innerBlockUseage = new Map();\n    sortedInstanceAttributes.forEach(function (attribute) {\n        if (attribute.block !== currentBlock) {\n            currentBlock = attribute.block;\n            trueBlockIndex++;\n        }\n        var attributeSize = attribute.size;\n        var oldUseage = blockUseage.get(trueBlockIndex) || 0;\n        var newUseage = oldUseage + attributeSize;\n        // Make sure the block isn't over used thus losing attribute information\n        if (newUseage > MAX_USE_PER_BLOCK) {\n            console.error(\"An instance attribute was specified that over fills the maximum allowed useage for a block.\", \"\\nMax Allowed per block \" + MAX_USE_PER_BLOCK, \"\\nAttribute: \" + attribute.name + \" Block Specified: \" + attribute.block, \"\\nTotal blocks used with this attribute: \" + newUseage);\n            return;\n        }\n        // Store how much of the block is utilized\n        blockUseage.set(trueBlockIndex, newUseage);\n        // We can now auto specify the inner index of where the attribute lines up within the block\n        attribute.blockIndex = oldUseage;\n        // Now we examine the attributes request of use inside the block and make sure there is no\n        // Overlap\n        var innerUseage = innerBlockUseage.get(trueBlockIndex) || new Map();\n        if (attribute.blockIndex + attributeSize > MAX_USE_PER_BLOCK) {\n            console.error(\"An instance attribute was specified that would fill indices greater than the block allows.\", \"\\nMax index per block \" + MAX_USE_PER_BLOCK, \"\\nAttribute: \" + attribute.name + \" Block Index: \" + attribute.blockIndex + \" Size: \" + attribute.size + \" Block Index + Size: \" + (attribute.blockIndex + attribute.size));\n            return;\n        }\n        for (var i = attribute.blockIndex; i < attribute.blockIndex + attributeSize; ++i) {\n            if (innerUseage.get(i)) {\n                console.error(\"An instance attribute was specified who's block index overaps another attributes useage\", \"\\nMax index per block \" + MAX_USE_PER_BLOCK, \"\\nAttribute: \" + attribute.name + \" Block Index: \" + attribute.blockIndex + \" Size: \" + attribute.size + \" Block Index + Size: \" + (attribute.blockIndex + attribute.size));\n                return;\n            }\n        }\n        // Adjust the attribute to reflect the actual bock it is using\n        attribute.block = trueBlockIndex;\n    });\n    /**\n     * We now must create a decision tree large enough to accomodate our instances.\n     * Explanation:\n     * Our shaders CANNOT do switch case statements, NOR can they handle large amounts of\n     * chained if else statements (it will produce a memory exhausted error on many systems).\n     * There is even limits on how deep if else statements can be nested within each other.\n     * Lastly: We do NOT want to create an array in memory in the shader to create a lookup for our\n     * instance data as it would need to be allocated EVERY vertex operation.\n     *\n     * So, our best workaround is to make a decision tree that balances how many decisions per\n     * node it can make vs the depth of decisions. The more decisions per node, the less deep the\n     * tree will be, but will suffer some performance cost. But the less deep the tree, the better\n     * chance you will not get a 'memory exhausted' error.\n     */\n    var branchesPerLevel = 4;\n    var blocksPerInstance = trueBlockIndex + 1;\n    // This determines how many instances our allowed uniforms will allow for a single draw call\n    var maxInstancesPerBuffer = Math.floor(instanceUniformBlockCount / blocksPerInstance);\n    // Generate the decision tree and uniform declarations\n    var instancingMetrics = makeUniformInstanceDataOptions(templateOptions, maxInstancesPerBuffer, branchesPerLevel, blocksPerInstance, sortedInstanceAttributes);\n    return {\n        materialUniforms: instancingMetrics.materialUniforms,\n        metrics: {\n            blocksPerInstance: blocksPerInstance,\n            maxInstancesPerBuffer: maxInstancesPerBuffer,\n        },\n    };\n}\n/**\n * This generates all of the necessary templating information from uniform-instance-data\n * in order to provide an instance data getter for the application.\n */\nfunction makeUniformInstanceDataOptions(templateOptions, maxInstancesPerBuffer, branchesPerLevel, blocksPerInstance, instanceAttributes) {\n    // Make a list containing all instance indicies that will be utilized and will be split\n    // Out into the decision tree\n    var instances = [];\n    for (var i = 0; i < maxInstancesPerBuffer; ++i) {\n        instances.push(i);\n    }\n    // Make the uniform declaration. Uniform declaration simultaneously gives us the material uniforms necessary\n    // To apply to our three material.\n    var uniformMetrics = makeInstanceUniformDeclaration(maxInstancesPerBuffer * blocksPerInstance, instanceAttributes);\n    templateOptions[template_vars_1.templateVars.instanceUniformDeclarations] = uniformMetrics.fragment;\n    templateOptions[template_vars_1.templateVars.instanceBlockCount] = \"\" + blocksPerInstance;\n    // This way produced the data retrieval method for decision tree instancing\n    // *templateOptions[templateVars.instanceDataRetrieval] = makeInstanceRetrievalDecisionTree(blocksPerInstance, instances, branchesPerLevel);\n    // This method produces the data retrieval method for array instancing\n    templateOptions[template_vars_1.templateVars.instanceDataRetrieval] = uniform_instance_block_array_1.makeInstanceRetrievalArray(blocksPerInstance);\n    return {\n        materialUniforms: uniformMetrics.materialUniforms,\n    };\n}\n/**\n * This generates the declaration of all of the individual uniform registers for instancing.\n */\nfunction makeInstanceUniformDeclaration(instanceUniformBlockCount, attributes) {\n    var out = '';\n    var blockQualifierDedup = new Map();\n    var maxBlock = 0;\n    // Dedup the attributes specified for the\n    attributes.forEach(function (attribute) {\n        var qualifiers = blockQualifierDedup.get(attribute.block) || new Map();\n        // Make sure the qualifier is added for the block\n        qualifiers.set(attribute.qualifier, true);\n        // Get the max block in use\n        maxBlock = Math.max(maxBlock, attribute.block);\n    });\n    // Generate the full string for the specified qualifiers\n    var blockQualifiers = new Map();\n    blockQualifierDedup.forEach(function (qualifierList, block) {\n        var allQualifiers = Array.from(qualifierList.keys());\n        blockQualifiers.set(block, allQualifiers.join(' ') + \" \");\n    });\n    // Generate our uniform declarations\n    // Const blockCount = maxBlock + 1;\n    // This method produces the instancing declaration for a search tree.\n    // *out += makeUniformDecisionTreeDeclarations(instanceUniformBlockCount, blockCount, blockQualifiers, materialUniforms);\n    // This method produces the instancing declaration for an instancing array\n    var declaration = uniform_instance_block_array_1.makeUniformArrayDeclaration(instanceUniformBlockCount);\n    out += declaration.fragment;\n    out += \"\\n\";\n    return {\n        fragment: out,\n        materialUniforms: declaration.materialUniforms,\n    };\n}\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar bounds_1 = require(\"../primitives/bounds\");\nvar attribute_generation_1 = require(\"../shaders/util/attribute-generation\");\nvar generate_default_scene_1 = require(\"../surface/generate-default-scene\");\nvar generate_layer_geometry_1 = require(\"../surface/generate-layer-geometry\");\nvar generate_layer_material_1 = require(\"../surface/generate-layer-material\");\nvar generate_layer_model_1 = require(\"../surface/generate-layer-model\");\nvar inject_shader_io_1 = require(\"../surface/inject-shader-io\");\nvar mouse_event_manager_1 = require(\"../surface/mouse-event-manager\");\nvar scene_1 = require(\"../surface/scene\");\nvar view_1 = require(\"../surface/view\");\nvar data_bounds_1 = require(\"../util/data-bounds\");\nvar instance_uniform_manager_1 = require(\"../util/instance-uniform-manager\");\nvar layer_mouse_events_1 = require(\"./event-managers/layer-mouse-events\");\nvar texture_1 = require(\"./texture\");\nvar atlas_resource_manager_1 = require(\"./texture/atlas-resource-manager\");\nvar DEFAULT_BACKGROUND_COLOR = new Three.Color(1.0, 1.0, 1.0);\nfunction isCanvas(val) {\n    return Boolean(val.getContext);\n}\nfunction isString(val) {\n    return Boolean(val.substr);\n}\nfunction isWebGLContext(val) {\n    return Boolean(val.canvas);\n}\n/**\n * Used for reactive layer generation and updates.\n */\nfunction createLayer(layerClass, props) {\n    return [layerClass, props];\n}\nexports.createLayer = createLayer;\n/**\n * This is a manager for layers. It will use voidgl layers to intelligently render resources\n * as efficiently as possible. Layers will be rendered in the order they are provided and this\n * surface will provide some basic camera controls by default.\n */\nvar LayerSurface = /** @class */ (function () {\n    function LayerSurface() {\n        /** This is the atlas manager that will help with modifying and tracking atlas' generated for the layers */\n        this.atlasManager = new texture_1.AtlasManager();\n        /** This is all of the layers in this manager by their id */\n        this.layers = new Map();\n        /** This is the density the rendering renders for the surface */\n        this.pixelRatio = window.devicePixelRatio;\n        /**\n         * This is all of the available scenes and their views for this surface. Layers reference the IDs\n         * of the scenes and the views to be a part of their rendering state.\n         */\n        this.scenes = new Map();\n        /**\n         * This is all of the views currently generated for this surface paired with the scene they render.\n         */\n        this.sceneViews = [];\n        /**\n         * This flags all layers by id for disposal at the end of every render. A Layer must be recreated\n         * after each render in order to clear it's disposal flag. This is the trick to making this a\n         * reactive system.\n         */\n        this.willDisposeLayer = new Map();\n        /**\n         * This is used to help resolve concurrent draws. There are some very async operations that should\n         * not overlap in draw calls.\n         */\n        this.isBufferingAtlas = false;\n    }\n    Object.defineProperty(LayerSurface.prototype, \"gl\", {\n        /** Read only getter for the gl context */\n        get: function () {\n            return this.context;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This adds a layer to the manager which will manage all of the resource lifecycles of the layer\n     * as well as additional helper injections to aid in instancing and shader i/o.\n     */\n    LayerSurface.prototype.addLayer = function (layer) {\n        if (!layer.id) {\n            console.warn('All layers must have an id');\n            return layer;\n        }\n        if (this.layers.get(layer.id)) {\n            console.warn('All layer\\'s ids must be unique per layer manager');\n            return layer;\n        }\n        // We add the layer to our management\n        this.layers.set(layer.id, layer);\n        // Now we initialize the layer's gl components\n        this.initLayer(layer);\n        return layer;\n    };\n    LayerSurface.prototype.destroy = function () {\n        this.mouseManager.destroy();\n    };\n    /**\n     * This is the draw loop that must be called per frame for updates to take effect and display.\n     */\n    LayerSurface.prototype.draw = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var scenes, i, end, scene, views, layers, k, endk, view, j, endj, layer, didBuffer;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        scenes = Array.from(this.scenes.values());\n                        // Loop through scenes\n                        for (i = 0, end = scenes.length; i < end; ++i) {\n                            scene = scenes[i];\n                            views = Array.from(scene.viewById.values());\n                            layers = scene.layers;\n                            // Make sure the layers are depth sorted\n                            scene.sortLayers();\n                            // Loop through the views\n                            for (k = 0, endk = views.length; k < endk; ++k) {\n                                view = views[k];\n                                // We must perform any operations necessary to make the view camera fit the viewport\n                                // Correctly\n                                view.fitViewtoViewport(new bounds_1.Bounds({\n                                    height: this.context.canvas.height,\n                                    width: this.context.canvas.width,\n                                    x: 0,\n                                    y: 0,\n                                }));\n                                // Let the layers update their uniforms before the draw\n                                for (j = 0, endj = layers.length; j < endj; ++j) {\n                                    layer = layers[j];\n                                    // Update the layer with the view it is about to be rendered with\n                                    layer.view = view;\n                                    // Make sure the layer is given the opportunity to update all of it's uniforms\n                                    // To match the view state and update any unresolved diffs internally\n                                    layer.draw();\n                                }\n                                // Now perform the rendering\n                                this.drawSceneView(scene.container, view);\n                            }\n                        }\n                        // After we have drawn our views of our scenes, we can now ensure all of the bounds\n                        // Are updated in the interactions and flag our interactions ready for mouse input\n                        if (this.mouseManager.waitingForRender) {\n                            this.sceneViews.forEach(function (sceneView) {\n                                sceneView.bounds = new data_bounds_1.DataBounds(sceneView.view.screenBounds);\n                                sceneView.bounds.data = sceneView;\n                            });\n                            this.mouseManager.waitingForRender = false;\n                        }\n                        if (!!this.isBufferingAtlas) return [3 /*break*/, 2];\n                        this.isBufferingAtlas = true;\n                        return [4 /*yield*/, this.resourceManager.dequeueRequests()];\n                    case 1:\n                        didBuffer = _a.sent();\n                        this.isBufferingAtlas = false;\n                        // If buffering did occur and completed, then we should be performing a draw to ensure all of the\n                        // Changes are committed and pushed out.\n                        if (didBuffer)\n                            this.draw();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This finalizes everything and sets up viewports and clears colors and\n     */\n    LayerSurface.prototype.drawSceneView = function (scene, view) {\n        var offset = { x: view.viewBounds.left, y: view.viewBounds.top };\n        var size = view.viewBounds;\n        var rendererSize = this.renderer.getSize();\n        rendererSize.width *= this.renderer.getPixelRatio();\n        rendererSize.height *= this.renderer.getPixelRatio();\n        var background = view.background;\n        // Set the scissor rectangle.\n        this.context.enable(this.context.SCISSOR_TEST);\n        this.context.scissor(offset.x, rendererSize.height - offset.y - size.height, size.width, size.height);\n        // If a background is established, we should clear the background color\n        // Specified for this context\n        if (view.background) {\n            // Clear the rect of color and depth so the region is totally it's own\n            this.context.clearColor(background[0], background[1], background[2], background[3]);\n        }\n        // Get the view's clearing preferences\n        if (view.clearFlags) {\n            this.context.clear((view.clearFlags.indexOf(view_1.ClearFlags.COLOR) > -1 ? this.context.COLOR_BUFFER_BIT : 0x0) |\n                (view.clearFlags.indexOf(view_1.ClearFlags.DEPTH) > -1 ? this.context.DEPTH_BUFFER_BIT : 0x0) |\n                (view.clearFlags.indexOf(view_1.ClearFlags.STENCIL) > -1 ? this.context.STENCIL_BUFFER_BIT : 0x0));\n        }\n        // Default clearing is depth and color\n        else {\n            this.context.clear(this.context.COLOR_BUFFER_BIT | this.context.DEPTH_BUFFER_BIT);\n        }\n        // Only if the viewport is different from last viewport should we attempt a viewport state\n        // Change.\n        var box = this.currentViewport;\n        if (!box || box.x !== offset.x || box.y !== offset.y || box.width !== size.width || box.height !== size.height) {\n            this.renderer.setViewport(offset.x / this.pixelRatio, offset.y / this.pixelRatio, size.width, size.height);\n            this.currentViewport = {\n                height: size.height,\n                width: size.width,\n                x: offset.x,\n                y: offset.y,\n            };\n        }\n        // Render the scene with the provided view metrics\n        this.renderer.render(scene, view.viewCamera.baseCamera);\n    };\n    /**\n     * This allows for querying a view's screen bounds. Null is returned if the view id\n     * specified does not exist.\n     */\n    LayerSurface.prototype.getViewSize = function (viewId) {\n        for (var _i = 0, _a = this.sceneViews; _i < _a.length; _i++) {\n            var sceneView = _a[_i];\n            if (sceneView.view.id === viewId) {\n                return sceneView.view.screenBounds;\n            }\n        }\n        return null;\n    };\n    /**\n     * This queries a view's window into a world's space.\n     */\n    LayerSurface.prototype.getViewWorldBounds = function (viewId) {\n        for (var _i = 0, _a = this.sceneViews; _i < _a.length; _i++) {\n            var sceneView = _a[_i];\n            if (sceneView.view.id === viewId) {\n                var view = sceneView.view;\n                if (view.screenBounds) {\n                    var topLeft = view.viewToWorld({ x: 0, y: 0 });\n                    var bottomRight = view.screenToWorld({ x: view.screenBounds.right, y: view.screenBounds.bottom });\n                    return new bounds_1.Bounds({\n                        bottom: bottomRight.y,\n                        left: topLeft.x,\n                        right: bottomRight.x,\n                        top: topLeft.y,\n                    });\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n        return null;\n    };\n    /**\n     * This is the beginning of the system. This should be called immediately after the surface is constructed.\n     * We make this mandatory outside of the constructor so we can make it follow an async pattern.\n     */\n    LayerSurface.prototype.init = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Make sure our desired pixel ratio is set up\n                        this.pixelRatio = options.pixelRatio || this.pixelRatio;\n                        // Make sure we have a gl context to work with\n                        this.setContext(options.context);\n                        // Initialize our GL needs that set the basis for rendering\n                        this.initGL(options);\n                        // Initialize our event manager that handles mouse interactions/gestures with the canvas\n                        this.initMouseManager(options);\n                        // Initialize any resources requested or needed, such as textures or rendering surfaces\n                        return [4 /*yield*/, this.initResources(options)];\n                    case 1:\n                        // Initialize any resources requested or needed, such as textures or rendering surfaces\n                        _a.sent();\n                        return [2 /*return*/, this];\n                }\n            });\n        });\n    };\n    /**\n     * This initializes the Canvas GL contexts needed for rendering.\n     */\n    LayerSurface.prototype.initGL = function (options) {\n        var _this = this;\n        if (!this.context) {\n            console.error('Can not initialize Layer Surface as a valid GL context was not established.');\n            return;\n        }\n        // Get the canvas of our context to set up our Three settings\n        var canvas = this.context.canvas;\n        // Get the starting width and height so adjustments don't affect it\n        var width = canvas.width;\n        var height = canvas.height;\n        // Generate the renderer along with it's properties\n        this.renderer = new Three.WebGLRenderer({\n            // Context supports rendering to an alpha canvas only if the background color has a transparent\n            // Alpha value.\n            alpha: options.background && (options.background[3] < 1.0),\n            // Yes to antialias! Make it preeeeetty!\n            antialias: true,\n            // Make three use an existing canvas rather than generate another\n            canvas: canvas,\n            // TODO: This should be toggleable. If it's true it allows us to snapshot the rendering in the canvas\n            //       But we dont' always want it as it makes performance drop a bit.\n            preserveDrawingBuffer: true,\n        });\n        // We want clearing to be controlled via the layer\n        this.renderer.autoClear = false;\n        // Charts don't really have face culling. Just 2D shapes\n        this.renderer.setFaceCulling(Three.CullFaceNone);\n        // This sets the pixel ratio to handle differing pixel densities in screens\n        this.renderer.setSize(width, height);\n        // Set the pixel ratio to match the pixel density of the monitor in use\n        this.renderer.setPixelRatio(this.pixelRatio);\n        // Applies the background color and establishes whether or not the context supports\n        // Alpha or not\n        if (options.background) {\n            this.renderer.setClearColor(new Three.Color(options.background[0], options.background[1], options.background[2]), options.background[3]);\n        }\n        // If a background color was not established, then we set a default background color\n        else {\n            this.renderer.setClearColor(DEFAULT_BACKGROUND_COLOR);\n        }\n        // Once we have made our renderer we now make us a default scene to which we can add objects\n        this.defaultSceneElements = generate_default_scene_1.generateDefaultScene(this.context);\n        this.defaultSceneElements.view.background = options.background;\n        // Set the default scene\n        this.scenes.set(this.defaultSceneElements.scene.id, this.defaultSceneElements.scene);\n        // Make a scene view depth tracker so we can track the order each scene view combo is drawn\n        var sceneViewDepth = 0;\n        // Make a SceneView for the default scene and view for mouse interactions\n        this.sceneViews.push({\n            depth: ++sceneViewDepth,\n            scene: this.defaultSceneElements.scene,\n            view: this.defaultSceneElements.view,\n        });\n        // Turn on the scissor test to keep the rendering clipped within the\n        // Render region of the context\n        this.context.enable(this.context.SCISSOR_TEST);\n        // Add the requested scenes to the surface and apply the necessary defaults\n        if (options.scenes) {\n            options.scenes.forEach(function (sceneOptions) {\n                // Make us a new scene based on the requested options\n                var newScene = new scene_1.Scene(sceneOptions);\n                // Make sure the default view is available for each scene\n                // IFF no view is provided for the scene\n                if (sceneOptions.views.length === 0) {\n                    newScene.addView(_this.defaultSceneElements.view);\n                    _this.sceneViews.push({\n                        depth: ++sceneViewDepth,\n                        scene: newScene,\n                        view: _this.defaultSceneElements.view,\n                    });\n                }\n                // Generate the views requested for the scene\n                sceneOptions.views.forEach(function (viewOptions) {\n                    var newView = new view_1.View(viewOptions);\n                    newView.camera = newView.camera || _this.defaultSceneElements.camera;\n                    newView.viewCamera = newView.viewCamera || _this.defaultSceneElements.viewCamera;\n                    newView.viewport = newView.viewport || _this.defaultSceneElements.viewport;\n                    newView.pixelRatio = _this.pixelRatio;\n                    newScene.addView(newView);\n                    for (var _i = 0, _a = _this.sceneViews; _i < _a.length; _i++) {\n                        var sceneView = _a[_i];\n                        if (sceneView.view.id === newView.id) {\n                            console.warn('You can NOT have two views with the same id. Please use unique identifiers for every view generated.');\n                        }\n                    }\n                    _this.sceneViews.push({\n                        depth: ++sceneViewDepth,\n                        scene: newScene,\n                        view: newView,\n                    });\n                });\n                _this.scenes.set(sceneOptions.key, newScene);\n            });\n        }\n    };\n    /**\n     * This does special initialization by gathering the layers shader IO, generates a material\n     * and injects special automated uniforms and attributes to make instancing work for the\n     * shader.\n     */\n    LayerSurface.prototype.initLayer = function (layer) {\n        // Set the resource manager this surface utilizes to the layer\n        layer.resource = this.resourceManager;\n        // For the sake of initializing uniforms to the correct values, we must first add the layer to it's appropriate\n        // Scene so that the necessary values will be in place for the sahder IO\n        var scene = this.addLayerToScene(layer);\n        // Get the shader metrics the layer desires\n        var shaderIO = layer.initShader();\n        // Clean out nulls provided as a convenience to the layer\n        shaderIO.instanceAttributes = shaderIO.instanceAttributes.filter(Boolean);\n        shaderIO.vertexAttributes = shaderIO.vertexAttributes.filter(Boolean);\n        shaderIO.uniforms = shaderIO.uniforms.filter(Boolean);\n        // Get the injected shader IO attributes and uniforms\n        var _a = inject_shader_io_1.injectShaderIO(layer, shaderIO), vertexAttributes = _a.vertexAttributes, instanceAttributes = _a.instanceAttributes, uniforms = _a.uniforms;\n        // Generate the actual shaders to be used by injecting all of the necessary fragments and injecting\n        // Instancing fragments\n        var shaderMetrics = attribute_generation_1.injectFragments(shaderIO, vertexAttributes, instanceAttributes, uniforms);\n        // Generate the geometry this layer will be utilizing\n        var geometry = generate_layer_geometry_1.generateLayerGeometry(shaderMetrics.maxInstancesPerBuffer, vertexAttributes, shaderIO.vertexCount);\n        // This is the material that is generated for the layer that utilizes all of the generated and\n        // Injected shader IO and shader fragments\n        var material = generate_layer_material_1.generateLayerMaterial(layer, shaderMetrics.vs, shaderMetrics.fs, uniforms, shaderMetrics.materialUniforms);\n        // And now we can now generate the mesh that will be added to the scene\n        var model = generate_layer_model_1.generateLayerModel(layer, geometry, material);\n        // Now that all of the elements of the layer are complete, let us apply them to the layer\n        layer.geometry = geometry;\n        layer.instanceAttributes = instanceAttributes;\n        layer.instanceVertexCount = shaderIO.vertexCount;\n        layer.material = material;\n        layer.maxInstancesPerBuffer = shaderMetrics.maxInstancesPerBuffer;\n        layer.model = model;\n        layer.uniforms = uniforms;\n        layer.vertexAttributes = vertexAttributes;\n        // The layer now needs a specialized uniform manager to provide instances with an appropriate set of uniforms\n        // To be able to render.\n        layer.uniformManager = new instance_uniform_manager_1.InstanceUniformManager(layer, scene);\n        return layer;\n    };\n    /**\n     * Initializes elements for handling mouse interactions with the canvas.\n     */\n    LayerSurface.prototype.initMouseManager = function (options) {\n        // We must inject an event manager to broadcast events through the layers themselves\n        var eventManagers = (options.eventManagers || []).concat([\n            new layer_mouse_events_1.LayerMouseEvents(this.sceneViews),\n        ]);\n        // Generate the mouse manager for the layer\n        this.mouseManager = new mouse_event_manager_1.MouseEventManager(this.context.canvas, this.sceneViews, eventManagers, options.handlesWheelEvents);\n    };\n    /**\n     * This initializes resources needed or requested such as textures or render surfaces.\n     */\n    LayerSurface.prototype.initResources = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _i, _a, resource;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!options.atlasResources) return [3 /*break*/, 4];\n                        _i = 0, _a = options.atlasResources;\n                        _b.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3 /*break*/, 4];\n                        resource = _a[_i];\n                        return [4 /*yield*/, this.atlasManager.createAtlas(resource)];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        // Initialize our resource manager with the atlas manager\n                        this.resourceManager = new atlas_resource_manager_1.AtlasResourceManager({\n                            atlasManager: this.atlasManager,\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This finds the scene and view the layer belongs to based on the layer's props. For invalid or not provided\n     * props, the layer gets added to default scenes and views.\n     */\n    LayerSurface.prototype.addLayerToScene = function (layer) {\n        // Get the scene the layer will add itself to\n        var scene = this.scenes.get(layer.props.scene);\n        if (!scene) {\n            // If no scene is specified by the layer, or the scene identifier is invalid, then we add the layer\n            // To the default scene.\n            scene = this.defaultSceneElements.scene;\n            if (layer.props.scene) {\n                console.warn('Layer specified a scene that is not within the layer surface manager. Layer will be added to the default scene.');\n            }\n        }\n        // Add the layer to the scene for rendering\n        scene.addLayer(layer);\n        return scene;\n    };\n    /**\n     * Discontinues a layer's management by this surface. This will invalidate any resources\n     * the layer was using in association with the context. If the layer is re-insertted, it will\n     * be revaluated as though it were a new layer.\n     */\n    LayerSurface.prototype.removeLayer = function (layer) {\n        // Make sure we are removing a layer that exists in the system\n        if (!this.layers.get(layer && layer.id)) {\n            console.warn('Tried to remove a layer that is not in the manager.', layer);\n            return layer;\n        }\n        layer.uniformManager.removeFromScene();\n        layer.destroy();\n        this.layers.delete(layer.id);\n        return layer;\n    };\n    /**\n     * Used for reactive rendering and diffs out the layers for changed layers.\n     */\n    LayerSurface.prototype.render = function (layerInitializers) {\n        var _this = this;\n        // Loop through all of the initializers and properly add and remove layers as needed\n        if (layerInitializers && layerInitializers.length > 0) {\n            layerInitializers.forEach(function (init) {\n                var layerClass = init[0];\n                var props = init[1];\n                var existingLayer = _this.layers.get(props.key);\n                if (existingLayer) {\n                    existingLayer.willUpdateProps(props);\n                    Object.assign(existingLayer.props, props);\n                    existingLayer.didUpdateProps();\n                }\n                else {\n                    _this.addLayer(new layerClass(Object.assign({}, layerClass.defaultProps, props)));\n                }\n                _this.willDisposeLayer.set(props.key, false);\n            });\n        }\n        // Take any layer that retained it's disposal flag and trash it\n        this.willDisposeLayer.forEach(function (dispose, layerId) {\n            if (dispose) {\n                _this.removeLayer(_this.layers.get(layerId));\n            }\n        });\n        // Resolve that all disposals occurred\n        this.willDisposeLayer.clear();\n        // Reflag every layer for removal again so creation of layers will determine\n        // Which layers remain for a reactive pattern\n        this.layers.forEach(function (layer, id) {\n            _this.willDisposeLayer.set(id, true);\n        });\n    };\n    /**\n     * This must be executed when the canvas changes size so that we can re-calculate the scenes and views\n     * dimensions for handling all of our rendered elements.\n     */\n    LayerSurface.prototype.fitContainer = function (pixelRatio) {\n        var container = this.context.canvas.parentElement;\n        if (container) {\n            var canvas = this.context.canvas;\n            canvas.className = '';\n            canvas.setAttribute('style', '');\n            container.style.position = 'relative';\n            canvas.style.position = 'absolute';\n            canvas.style.left = '0xp';\n            canvas.style.top = '0xp';\n            canvas.style.width = '100%';\n            canvas.style.height = '100%';\n            canvas.setAttribute('width', '');\n            canvas.setAttribute('height', '');\n            var containerBox = container.getBoundingClientRect();\n            var box = canvas.getBoundingClientRect();\n            this.resize(box.width || 100, containerBox.height || 100);\n        }\n    };\n    LayerSurface.prototype.resize = function (width, height, pixelRatio) {\n        var _this = this;\n        this.pixelRatio = pixelRatio || this.pixelRatio;\n        this.sceneViews.forEach(function (sceneView) { return sceneView.view.pixelRatio = _this.pixelRatio; });\n        this.renderer.setSize(width || 100, height || 100);\n        this.renderer.setPixelRatio(this.pixelRatio);\n        this.mouseManager.resize();\n    };\n    /**\n     * This establishes the rendering canvas context for the surface.\n     */\n    LayerSurface.prototype.setContext = function (context) {\n        if (!context) {\n            return;\n        }\n        if (isWebGLContext(context)) {\n            this.context = context;\n        }\n        else if (isCanvas(context)) {\n            this.context = context.getContext('webgl') || context.getContext('experimental-webgl');\n        }\n        else if (isString(context)) {\n            var element = document.getElementById(context);\n            if (isCanvas(element)) {\n                this.setContext(element);\n            }\n        }\n    };\n    return LayerSurface;\n}());\nexports.LayerSurface = LayerSurface;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./layer-surface\"));\n__export(require(\"./event-manager\"));\n__export(require(\"./generate-default-scene\"));\n__export(require(\"./generate-layer-geometry\"));\n__export(require(\"./generate-layer-material\"));\n__export(require(\"./generate-layer-model\"));\n__export(require(\"./inject-shader-io\"));\n__export(require(\"./layer\"));\n__export(require(\"./mouse-event-manager\"));\n__export(require(\"./scene\"));\n__export(require(\"./texture\"));\n__export(require(\"./view\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./surface\"));\n__export(require(\"./util\"));\n__export(require(\"./base-layers\"));\n__export(require(\"./base-event-managers\"));\n__export(require(\"./types\"));\n__export(require(\"./primitives\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./voidgl\"));\n"],"sourceRoot":""}