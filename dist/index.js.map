{"version":3,"sources":["webpack://voidgl/webpack/universalModuleDefinition","webpack://voidgl/webpack/bootstrap","webpack://voidgl/external \"three\"","webpack://voidgl/./src/voidgl/types.ts","webpack://voidgl/./src/voidgl/instance-provider/index.ts","webpack://voidgl/./src/voidgl/primitives/bounds.ts","webpack://voidgl/./src/voidgl/base-layers/types.ts","webpack://voidgl/./src/voidgl/surface/layer.ts","webpack://voidgl/./src/voidgl/primitives/index.ts","webpack://voidgl/./src/voidgl/util/instance.ts","webpack://voidgl/./src/voidgl/util/index.ts","webpack://voidgl/./src/voidgl/surface/texture/index.ts","webpack://voidgl/./src/voidgl/util/identify-by-key.ts","webpack://voidgl/./src/voidgl/surface/generate-layer-model.ts","webpack://voidgl/./src/voidgl/surface/view.ts","webpack://voidgl/./src/voidgl/surface/scene.ts","webpack://voidgl/./src/voidgl/surface/texture/label-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/base-atlas-resource.ts","webpack://voidgl/./src/voidgl/base-layers/edges/types.ts","webpack://voidgl/./src/voidgl/util/view-camera.ts","webpack://voidgl/./src/voidgl/util/vector.ts","webpack://voidgl/./src/voidgl/util/shader-templating.ts","webpack://voidgl/./src/voidgl/util/chart-camera.ts","webpack://voidgl/./src/voidgl/surface/event-manager.ts","webpack://voidgl/./src/voidgl/surface/mouse-event-manager.ts","webpack://voidgl/./src/voidgl/surface/inject-shader-io.ts","webpack://voidgl/./src/voidgl/surface/generate-layer-material.ts","webpack://voidgl/./src/voidgl/surface/generate-layer-geometry.ts","webpack://voidgl/./src/voidgl/util/data-bounds.ts","webpack://voidgl/./src/voidgl/surface/generate-default-scene.ts","webpack://voidgl/./src/voidgl/util/make-instance-uniform-name.ts","webpack://voidgl/./src/voidgl/util/auto-easing-method.ts","webpack://voidgl/./src/voidgl/shaders/fragments/template-vars.ts","webpack://voidgl/./src/voidgl/base-layers/labels/index.ts","webpack://voidgl/./src/voidgl/surface/texture/label-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/image-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/color-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/color-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/sub-texture.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas.ts","webpack://voidgl/./src/voidgl/base-layers/images/index.ts","webpack://voidgl/./src/voidgl/util/webgl-stat.ts","webpack://voidgl/./node_modules/debug/src/browser.js","webpack://voidgl/./src/voidgl/util/mouse.ts","webpack://voidgl/./src/voidgl/instance-provider/observable-manager.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas-resource-manager.ts","webpack://voidgl/./src/voidgl/surface/event-managers/layer-mouse-events.ts","webpack://voidgl/./src/voidgl/util/instance-uniform-manager.ts","webpack://voidgl/./src/voidgl/util/color-picking-analysis.ts","webpack://voidgl/./src/voidgl/util/quad-tree.ts","webpack://voidgl/./src/voidgl/primitives/absolute-position.ts","webpack://voidgl/./src/voidgl/shaders/fragments/color-picking-assignment.vs","webpack://voidgl/./src/voidgl/shaders/fragments/color-picking-disabled.fs","webpack://voidgl/./src/voidgl/shaders/fragments/color-picking-method.fs","webpack://voidgl/./src/voidgl/shaders/fragments/color-picking-vertex-header.vs","webpack://voidgl/./src/voidgl/shaders/fragments/projection-methods.vs","webpack://voidgl/./src/voidgl/shaders/fragments/shader-input.vs","webpack://voidgl/./src/voidgl/shaders/fragments/instance-destructuring-array.vs","webpack://voidgl/./src/voidgl/shaders/fragments/fragment-shader-composition.fs","webpack://voidgl/./src/voidgl/shaders/fragments/vertex-shader-composition.vs","webpack://voidgl/./src/voidgl/shaders/fragments/instance-retrieval-array.vs","webpack://voidgl/./src/voidgl/shaders/util/uniform-instance-block-array.ts","webpack://voidgl/./src/voidgl/shaders/util/attribute-generation.ts","webpack://voidgl/./src/voidgl/surface/layer-surface.ts","webpack://voidgl/./src/voidgl/surface/index.ts","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.vs","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.fs","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.ts","webpack://voidgl/./src/voidgl/base-layers/rings/ring-instance.ts","webpack://voidgl/./src/voidgl/base-layers/rings/index.ts","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-instance.ts","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-layer.vs","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-layer.fs","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-layer.ts","webpack://voidgl/./src/voidgl/base-layers/rectangle/index.ts","webpack://voidgl/./src/voidgl/base-layers/labels/label-instance.ts","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.vs","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.fs","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.ts","webpack://voidgl/./src/voidgl/surface/texture/image-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas-manager.ts","webpack://voidgl/./src/voidgl/surface/texture/pack-node.ts","webpack://voidgl/./src/voidgl/base-layers/images/image-instance.ts","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.vs","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.fs","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.ts","webpack://voidgl/./src/voidgl/base-layers/edges/edge-instance.ts","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer.fs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-screen-curve.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-bezier2.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-bezier.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-line.vs","webpack://voidgl/./src/voidgl/base-layers/edges/edge-picking.ts","webpack://voidgl/./src/voidgl/base-layers/edges/edge-layer.ts","webpack://voidgl/./src/voidgl/base-layers/edges/index.ts","webpack://voidgl/./src/voidgl/base-layers/circles/circle-instance.ts","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.vs","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.fs","webpack://voidgl/./src/voidgl/shaders/base/no-op.vs","webpack://voidgl/./src/voidgl/shaders/base/no-op.fs","webpack://voidgl/./src/voidgl/surface/layer-interaction-handler.ts","webpack://voidgl/./src/voidgl/surface/instance-diff-manager.ts","webpack://voidgl/./src/voidgl/primitives/point.ts","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.ts","webpack://voidgl/./src/voidgl/base-layers/circles/index.ts","webpack://voidgl/./src/voidgl/base-layers/index.ts","webpack://voidgl/./src/voidgl/util/uid.ts","webpack://voidgl/./src/voidgl/util/tracked-quad-tree.ts","webpack://voidgl/./src/voidgl/util/reference-camera.ts","webpack://voidgl/./node_modules/ms/index.js","webpack://voidgl/./node_modules/debug/src/debug.js","webpack://voidgl/./node_modules/process/browser.js","webpack://voidgl/external \"bowser\"","webpack://voidgl/./src/voidgl/instance-provider/instance-provider.ts","webpack://voidgl/./src/voidgl/instance-provider/observable.ts","webpack://voidgl/./src/voidgl/base-event-managers/basic-camera-controller.ts","webpack://voidgl/./src/voidgl/base-event-managers/index.ts","webpack://voidgl/./src/voidgl/index.ts","webpack://voidgl/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__111__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","InstanceBlockIndex","InstanceAttributeSize","UniformSize","VertexAttributeSize","ShaderInjectionTarget","PickType","InstanceDiffType","__export","Bounds","options","this","x","y","width","height","left","top","bottom","right","emptyBounds","containsPoint","point","encapsulate","item","Math","abs","fits","bounds","hitBounds","isInside","toString","AnchorType","ScaleType","extendStatics","__extends","setPrototypeOf","__proto__","Array","b","__","constructor","create","Three","types_1","util_1","identify_by_key_1","instance_diff_manager_1","layer_interaction_handler_1","Layer","_super","props","_this","depth","instanceById","Map","instanceVertexCount","assign","defaultProps","_a","picking","NONE","ALL","pickingMethods","getInstancePickingMethods","currentPickMode","hitTest","quadTree","TrackedQuadTree","boundsAccessor","type","SINGLE","uidToInstance","diffManager","InstanceDiffManager","diffProcessor","getDiffProcessor","interactions","LayerInteractionHandler","destroy","uniformManager","didUpdateProps","draw","uniform","change","instance","uniforms","changeList","data","end","length","getUniforms","resolve","update","materialUniforms","forEach","materialUniform","Error","getModelType","drawMode","TrianglesDrawMode","modelType","Mesh","getMaterialOptions","initShader","fs","instanceAttributes","vertexAttributes","vertexCount","vs","makeInstanceAttribute","block","blockIndex","size","atlas","makeUniform","shaderInjection","qualifier","willUpdateInstances","changes","willUpdateProps","newProps","didUpdate","IdentifyByKey","__decorate","decorators","target","key","desc","arguments","getOwnPropertyDescriptor","Reflect","decorate","instance_provider_1","instanceUID","Instance","_uid","newUID","_easing","_id","id","active","observable","generateLayerModel","layer","geometry","material","modelInfo","model","Boolean","isMesh","undefined","TriangleStripDrawMode","absolute_position_1","bounds_1","view_camera_1","isOrthographic","val","ClearFlags","View","pixelRatio","devicePixelRatio","screenToPixelSpace","out","pixelSpaceToScreen","screenToView","viewBounds","viewToScreen","screenToWorld","view","world","camera","offset","scale","viewCamera","ViewCameraType","CUSTOM","console","warn","worldToScreen","screen","viewToWorld","worldToView","fitViewtoViewport","surfaceDimensions","CONTROLLED","baseCamera","getAbsolutePositionBounds","viewport","far","near","position","set","z","updateMatrix","updateMatrixWorld","updateProjectionMatrix","screenBounds","DEFAULT_VIEW_ID","sortByDepth","a","Scene","container","pickingContainer","layers","sortIsDirty","viewById","frustumCulled","autoUpdate","addLayer","push","addView","removeLayer","index","indexOf","splice","sortLayers","sort","DEFAULT_SCENE_ID","LabelAtlasResource","label","BaseAtlasResource","sampleScale","EdgeScaleType","EdgeType","EdgeBroadphase","ViewCamera","sqrt","add1","scale1","vec","subtract1","multiply1","dot1","linear1","start","t","length1","add2","scale2","subtract2","multiply2","dot2","linear2","length2","add3","scale3","subtract3","multiply3","linear3","length3","dot3","add4","scale4","subtract4","multiply4","dot4","linear4","length4","VecMath","add","dot","linear","multiply","subtract","shaderTemplate","shader","required","matched","noValueProvided","notFound","shaderOptions","shaderResults","replace","match","keys","option","results","resolvedShaderOptions","shaderProvidedOptions","unresolvedProvidedOptions","unresolvedShaderOptions","values","error","chartCameraUID","applyArray","source","apply","concat","ChartCamera","location","slice","EventManager","getProjection","viewId","mouseManager","getView","getViewScreenBounds","setMouseManager","mouse_1","quad_tree_1","isDefined","MouseEventManager","canvas","views","controllers","handlesWheelEvents","eventCleanup","_waitingForRender","getViewsUnderMouse","mouse","hitViews","query","resize","context","setViews","setControllers","addContextListeners","QuadTree","addAll","map","v","filter","startView","startPosition","element","wheelHandler","event","eventElementPosition","interaction","makeInteraction","wheel","makeWheel","controller","handleWheel","stopPropagation","preventDefault","onwheel","addEventListener","onmouseleave","waitingForRender","handleMouseOut","onmousemove","handleMouseMove","onmousedown","downViews","canClick","clickStartTime","Date","now","currentPosition","handleMouseDown","button","document","delta","drag","makeDrag","handleDrag","onmouseup","onmouseover","handleMouseOver","handleMouseUp","handleClick","onselectstart","addTouchContextListeners","ontouchstart","ontouchend","ontouchmove","ontouchcancel","_i","previous","current","viewsUnderMouse","normalizeWheel","onmousewheel","removeEventListener","_b","auto_easing_method_1","testStartVector","ONE","TWO","THREE","FOUR","testEndVector","emptyTexture","Texture","isInstanceAttribute","attr","isVertexAttribute","isUniform","toVertexAttributeInternal","attribute","materialAttribute","toUniformInternal","findEmptyBlock","attributes","seekingSize","usedBlocks","maxBlock","instanceAttribute","max","ind","breadth","sortNeedsUpdateFirstToTop","easing","generateAtlasResourceUniforms","atlasInstanceAttributes","requestedAtlasInjections","injection","FRAGMENT","injections","VERTEX","ATLAS","resource","getAtlasTexture","compareVec","round","injectShaderIO","shaderIO","testStart","testEnd","test","cpu","validateInstanceAttributes","easingAttributes","instanceAttributes_1","_loop_1","easingValues","loop","name_1","easingUID","uid","delay","duration","currentTime","surface","frameMetrics","startTime","timeValue","AutoEasingLoopStyle","REPEAT","REFLECT","timePassed","slot","startAttr","startTimeAttr","durationAttr","easingAttributes_1","generateEasingAttributes","addedUniforms","MATRIX4","projectionMatrix","elements","matrix","generateBaseUniforms","generatePickingUniforms","addedInstanceAttributes","fillBlock","generateBaseInstanceAttributes","emptyFillBlock","color","generatePickingAttributes","addedVertexAttributes","activeAttribute","allVertexAttributes","allUniforms","UNIFORM_SIZE_TO_MATERIAL_TYPE","MATRIX3","DEFAULT_UNIFORM_VALUE","toMaterialUniform","generateLayerMaterial","layerUniforms","instancingUniforms","materialParams","vertexShader","fragmentShader","generatedUniform","RawShaderMaterial","generateLayerGeometry","maxInstancesPerBuffer","vertexBuffers","attribute_1","Float32Array","buffer","endk","formatError","k","isArray","j","endj","instanceSize","endk_1","copyWithin","instancingBuffer","instanceStartIndex","BufferGeometry","attribute_3","BufferAttribute","addAttribute","DataBounds","chart_camera_1","scene_1","view_1","generateDefaultScene","aspectRatio","viewSize","defaultCamera","OrthographicCamera","defaultChartCamera","defaultViewport","defaultView","defaultScene","scene","INSTANCE_UNIFORM_ATTRIBUTE_PREFIX","makeInstanceUniformNameArray","makeInstanceUniformNameTree","vector_1","min","pow","sin","PI","GPU_PI","clamp","minVal","maxVal","easeOutElasticGPU","easeBackInGPU","AutoEasingMethod","gpu","method","methodName","immediate","easeInQuad","time","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeOutElastic","easeBackIn","easeBackOut","t1","easeBackInOut","a1","t2","templateVars","attributeFragments","blocksPerInstance","easingMethod","easingMethods","instanceBlockCount","instanceDataBinaryTree","instanceDataRetrieval","instanceDestructuring","instanceFragments","instanceUniformDeclarations","projectionMethods","shaderInput","__awaiter","thisArg","_arguments","P","generator","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","__generator","body","f","g","_","sent","trys","ops","verb","throw","return","Symbol","iterator","op","TypeError","pop","floor","LabelRasterizer","awaitContext","getContext","setTimeout","calculateLabelSize","calculateTexture","calculateTrucatedText","sampleScaling","drawLabel","truncatedText","measureContents","minX","minY","maxX","maxY","rasterization","texture","createCroppedCanvas","maxWidth","text","firstTest","cursor","safety","substr","nextCursor","cropped","createElement","imageSmoothingEnabled","drawImage","fontSize","getLabelRasterizationFontSize","fillStyle","font","makeCSSFont","measureText","fillText","potentialCanvas","fontWeight","fontFamily","imageData","getImageData","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","render","renderSync","ImageAtlasResource","image","ColorRasterizer","limit","makeCSS","opacity","fillRect","ColorAtlasResource","SubTexture","atlasReferenceID","atlasTexture","atlasTL","atlasTR","atlasBL","atlasBR","widthOnAtlas","heightOnAtlas","isValid","pixelWidth","pixelHeight","pack_node_1","sub_texture_1","AtlasSize","Atlas","validResources","textureSettings","packing","PackNode","updateTexture","invalidateResource","zero","setManager","manager","registerResource","removeResource","redoneCanvas","dispose","generateMipmaps","premultiplyAlpha","needsUpdate","getProgramInfo","gl","program","attributeCount","uniformCount","activeUniforms","getProgramParameter","ACTIVE_UNIFORMS","activeAttributes","ACTIVE_ATTRIBUTES","enums","35664","35665","35666","35667","35668","35669","35670","35671","35672","35673","35674","35675","35676","35678","35680","5120","5121","5122","5123","5124","5125","5126","blocks","getActiveUniform","typeName","getActiveAttrib","WebGLStat","MAX_VERTEX_UNIFORMS","MAX_FRAGMENT_UNIFORMS","MAX_ATTRIBUTES","WEBGL_SUPPORTED","MAX_TEXTURE_SIZE","WebGLRenderingContext","getAContext","getParameter","MAX_VERTEX_UNIFORM_VECTORS","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_VERTEX_ATTRIBS","process","load","storage","debug","env","DEBUG","log","Function","formatArgs","args","useColors","namespace","humanize","diff","lastC","save","namespaces","removeItem","navigator","userAgent","toLowerCase","documentElement","style","WebkitAppearance","firebug","exception","table","parseInt","RegExp","$1","chrome","local","localStorage","localstorage","colors","formatters","JSON","stringify","err","message","enable","browser","three_1","IE_ADJUSTMENT","OLD_IE_ADJUSTMENT","MAX_FIREFOX_WHEELDELTA","lowPassY","LOW_PASS_U0","LOW_PASS_U1","LOW_PASS_U2","LOW_PASS_U3","firefox","deltaX","deltaY","sign","unshift","Vector2","msie","version","wheelDeltaX","wheelDeltaY","wheelDelta","detail","msedge","multiplyScalar","relative","mouseX","mouseY","eventX","eventY","nativeEvent","pageX","pageY","clientX","clientY","scrollLeft","scrollTop","offsetParent","offsetLeft","offsetTop","ObservableManagerMode","ObservableManager","mode","BROADCAST","label_atlas_resource_1","toInstanceIOValue","AtlasResourceManager","targetAtlas","requestQueue","requestLookup","atlasManager","dequeueRequests","didDequeue","this_1","resources","_c","requests","atlasRequests_1","updateAtlas","request","delete","request_1","from","entries","atlasRequests","existingRequests","setTargetAtlas","LayerMouseEvents","isOver","sceneViews","getSceneViewsUnderMouse","sceneViewByViewId","sceneView","viewItem","getMouseByViewId","viewMouseByViewId","handleInteraction","handleMouseClick","handleMouseDrag","callback","sceneViews_1","handleSceneView","flag","clear","updateColorPickRange","allSceneViews","currentSceneViews","generate_layer_model_1","make_instance_uniform_name_1","InstanceUniformManager","buffers","availableClusters","instanceToCluster","clusterToBuffer","maxUniformBlock","uniformBlocksPerInstance","makeNewBuffer","cluster","remove","removeFromScene","pickModel","setScene","newGeometry","drawRange","count","newMaterial","clone","newModel","activeInstances","clusters","firstInstance","lastInstance","uniformIndex","uniformName","instanceData","Vector4","instanceIndex","uniformRange","analyzeColorPickingRendering","pickingData","allColors","colorData","dataHeight","dataWidth","nearestColor","uniqueColors","pixelIndex","distance","row","dx","dy","testDistance","filterQuery","queryValues","filtered","obj","find","Quadrants","mid","TL","Node","TR","BL","BR","children","nodes","child","doAdd","cover","childrenProps","MAX_VALUE","allChildren","gatherChildren","split","isNaN","area","list","visit","queryBounds","queryPoint","cb","finished","data_bounds_1","ref","scaleRatio","parse","num","parseFloat","reference","top_1","shader_templating_1","template_vars_1","instanceRetrievalArrayFragment","VECTOR_COMPONENTS","sizeToType","1","2","3","4","9","16","99","orderByPriority","makeVectorSwizzle","join","makeUniformArrayDeclaration","totalBlocks","fragment","fill","makeInstanceRetrievalArray","templateOptions","makeInstanceDestructuringArray","orderedAttributes","webgl_stat_1","uniform_instance_block_array_1","vertexShaderComposition","fragmentShaderComposition","instanceDestructuringArray","MAX_USE_PER_BLOCK","generateUniforms","injectionType","injectFragments","shaders","shaderInputMetrics","instancingInfo","instanceUniformBlockCount","ceil","calculateUniformBlockUseage","sortedInstanceAttributes","currentBlock","trueBlockIndex","blockUseage","innerBlockUseage","attributeSize","oldUseage","newUseage","innerUseage","instances","uniformMetrics","blockQualifierDedup","qualifiers","blockQualifiers","qualifierList","allQualifiers","declaration","makeInstanceUniformDeclaration","makeUniformInstanceDataOptions","metrics","generateInstanceDataLookupOptions","additionalOptions","generateVertexAttributes","methods","methodSizes","sizeType","generateEasingMethods","generateShaderInputs","generateVertexPicking","makeInstanceDestructuring","makePickingDestructuring","makeInstanceAttributeReferences","generateVertexShader","vertexShaderResults","generateFragmentShader","generateFragmentPickingMethod","images_1","labels_1","attribute_generation_1","generate_default_scene_1","generate_layer_geometry_1","generate_layer_material_1","inject_shader_io_1","mouse_event_manager_1","color_picking_analysis_1","instance_uniform_manager_1","layer_mouse_events_1","texture_1","atlas_resource_manager_1","DEFAULT_BACKGROUND_COLOR","Color","isCanvas","createLayer","layerClass","LayerSurface","AtlasManager","currentViewport","currentFrame","previousTime","isBufferingAtlas","scenes","willDisposeLayer","initLayer","resourceManager","renderer","pickingRenderer","LabelInstance","ImageInstance","pickingPass","views_1","flags","pickWidth","pickHeight","didBuffer","drawSceneView","updateColorPick","defaultSceneElements","clearFlags","COLOR","DEPTH","pickingTarget","Uint8Array","readRenderTargetPixels","colorPicking","rendererSize","getSize","getPixelRatio","background","SCISSOR_TEST","scissor","clearColor","setSize","setRenderTarget","STENCIL","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","setViewport","getViewSize","getViewWorldBounds","topLeft","bottomRight","init","setContext","initGL","initMouseManager","initResources","WebGLRenderer","alpha","antialias","preserveDrawingBuffer","autoClear","setFaceCulling","CullFaceNone","setRendererSize","setPixelRatio","setClearColor","sceneViewDepth","sceneOptions","newScene","viewOptions","newView","addLayerToScene","shaderMetrics","eventManagers","atlasResources","createAtlas","layerInitializers","existingLayer","layerId","fitContainer","parentElement","className","setAttribute","containerBox","getBoundingClientRect","box","canvasContext","isString","getElementById","WebGLRenderTarget","magFilter","LinearFilter","minFilter","stencilBuffer","primitives_1","layer_1","RingLayer","ring","radius","scaleFactor","vertexToNormal","0","5","vertexToSide","thickness","vertex","premultipliedAlpha","transparent","RingInstance","instance_1","anchorCalculator","TopLeft","anchor","rectangle","padding","TopMiddle","TopRight","MiddleLeft","Middle","MiddleRight","BottomLeft","BottomMiddle","BottomRight","Custom","RectangleInstance","scaling","BOUND_MAX","_anchor","setAnchor","newAnchor","types_2","RectangleLayer","anchorEffect","projection","maxScale","minScale","ALWAYS","NEVER","screenPoint","u","blending","CustomBlending","blendSrc","OneFactor","rasterizationLookUp","_cssFont","_fontFamily","_fontSize","_fontStyle","_fontWeight","_maxWidth","_text","_width","_height","_isDestroyed","fontStyle","cssFontLookup","rasterizations","references","_rasterization","LabelLayer","ImageRasterizer","calculateImageSize","atlas_1","color_atlas_resource_1","color_rasterizer_1","image_atlas_resource_1","label_rasterizer_1","ZERO_IMAGE","allAtlas","destroyAtlas","atlasName","setDefaultImage","loadedImage","rect","dimensions","insertedNode","ux","uy","uw","uh","onePixelX","atlasDimensions","loadImage","first","second","insert","nodeImage","nodeDimensions","imageSrc","subTexture","image_1","onload","onerror","path","toDataURL","Image","src","resources_1","isLeaf","child0","child1","hasChild","newNode","fitFlag","imgWidth","imgHeight","dWidth","dHeight","removed","tint","_sourceWidth","_sourceHeight","_element","_path","aspect","ImageLayer","EdgeInstance","colorStart","colorEnd","control","widthStart","widthEnd","setEdgeWidth","setColor","interpolation","LINE","p1","p2","c1","c2","BEZIER","BEZIER2","toPointObject","toPointArray","TEST_RESOLUTION","edgePicking","broadphase","minPickDistance","scaleType","interpolate","edge","edgeWidthStart","edgeWidthEnd","PASS_X","PASS_Y","SCREEN_CURVE","closestIndex","closestDistance","secondClosestIndex","secondClosestDistance","control1","control2","startPoint","endPoint","linePoint","lineWidth","startSegment","endSegment","vector","lineDirection","lineNormal","distanceTo","edge_picking_1","pickVS","baseVS","screenVS","edgeFS","EdgeLayer","MAX_SEGMENTS","_d","vertexInterpolation","_e","InstanceProvider","CircleInstance","isMouseOver","isMouseDown","getColorPickInstance","onMouseDown","hitTest_1","query_1","world_1","querySpace","check","bind","instanceForColor","onMouseOut","hitTest_2","query_2","world_2","onMouseUp","hitTest_3","query_3","world_3","onMouseOver","onMouseMove","hitTest_4","query_4","info","world_4","notOverInstances","isCurrentlyOver_1","noLongerOver","onMouseClick","hitTest_5","query_5","world_5","VECTOR_ACCESSORS","quadPicking","changeInstanceQuad","addInstanceQuad","removeInstanceQuad","changeInstanceColorPick","addInstanceColorPick","removeInstanceColorPick","changeInstance","addInstance","removeInstance","uniformCluster","updateInstance","uniformRangeStart","instanceUniform","squareDistance","Point","getClosest","testPoint","points","closestPoint","getClosestIndex","amount","normalize","magnitude","getDistance","squared","getMidpoint","direction","make","CircleLayer","circle","circleScreenCenter","mouseScreen","animations","animate","animateCenter","center","animateRadius","animateColor","fadeOutOversized","UID","CUID","colorUID","getBounds","childToNode","childToBounds","nullBounded","fromSplit","doRemove","found","node","ReferenceCamera","offsetFilter","scaleFilter","base","h","plural","ms","str","String","exec","long","fmtShort","createDebug","prevTime","enabled","self","curr","prev","coerce","format","formatter","hash","charCodeAt","selectColor","stack","disable","names","skips","len","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","array","noop","nextTick","title","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","observable_manager_1","cleanObservation","instanceChanges","allowChanges","GATHER_OBSERVABLES","observer","disposer","$$register","INSERT","instanceUpdated","CHANGE","$$dispose","REMOVE","observerKey","newVal","CameraBoundsAnchor","event_manager_1","BasicCameraController","isPanning","panFilter","allViews","startViews","onRangeChanged","targetView","startViewDidStart","applyBounds","applyScaleBounds","boundsHorizontalOffset","boundsVerticalOffset","scaleMin","scaleMax","setBounds","ignoreCoverViews","anchoredByBoundsHorizontal","TOP_LEFT","MIDDLE_LEFT","BOTTOM_LEFT","worldBounds","screenPadding","TOP_MIDDLE","MIDDLE","BOTTOM_MIDDLE","TOP_RIGHT","MIDDLE_RIGHT","BOTTOM_RIGHT","anchoredByBoundsVertical","worldTLinScreenSpace","worldBRinScreenSpace","canStart","findCoveredStartView","under","coveredStartView","getTargetView","pan","wheelMetrics","beforeZoom","currentZoomX","currentZoomY","afterZoom","getRange","setRange","newWorld","deltaScale","deltaPan"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"three\"), require(\"bowser\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"three\", \"bowser\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"voidgl\"] = factory(require(\"three\"), require(\"bowser\"));\n\telse\n\t\troot[\"voidgl\"] = factory(root[\"three\"], root[\"bowser\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__111__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 117);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar InstanceBlockIndex;\n(function (InstanceBlockIndex) {\n    InstanceBlockIndex[InstanceBlockIndex[\"ONE\"] = 1] = \"ONE\";\n    InstanceBlockIndex[InstanceBlockIndex[\"TWO\"] = 2] = \"TWO\";\n    InstanceBlockIndex[InstanceBlockIndex[\"THREE\"] = 3] = \"THREE\";\n    InstanceBlockIndex[InstanceBlockIndex[\"FOUR\"] = 4] = \"FOUR\";\n})(InstanceBlockIndex = exports.InstanceBlockIndex || (exports.InstanceBlockIndex = {}));\nvar InstanceAttributeSize;\n(function (InstanceAttributeSize) {\n    InstanceAttributeSize[InstanceAttributeSize[\"ONE\"] = 1] = \"ONE\";\n    InstanceAttributeSize[InstanceAttributeSize[\"TWO\"] = 2] = \"TWO\";\n    InstanceAttributeSize[InstanceAttributeSize[\"THREE\"] = 3] = \"THREE\";\n    InstanceAttributeSize[InstanceAttributeSize[\"FOUR\"] = 4] = \"FOUR\";\n    /** Special case for making instance attributes that can target Atlas resources */\n    InstanceAttributeSize[InstanceAttributeSize[\"ATLAS\"] = 99] = \"ATLAS\";\n})(InstanceAttributeSize = exports.InstanceAttributeSize || (exports.InstanceAttributeSize = {}));\nvar UniformSize;\n(function (UniformSize) {\n    UniformSize[UniformSize[\"ONE\"] = 1] = \"ONE\";\n    UniformSize[UniformSize[\"TWO\"] = 2] = \"TWO\";\n    UniformSize[UniformSize[\"THREE\"] = 3] = \"THREE\";\n    UniformSize[UniformSize[\"FOUR\"] = 4] = \"FOUR\";\n    UniformSize[UniformSize[\"MATRIX3\"] = 9] = \"MATRIX3\";\n    UniformSize[UniformSize[\"MATRIX4\"] = 16] = \"MATRIX4\";\n    UniformSize[UniformSize[\"ATLAS\"] = 99] = \"ATLAS\";\n})(UniformSize = exports.UniformSize || (exports.UniformSize = {}));\nvar VertexAttributeSize;\n(function (VertexAttributeSize) {\n    VertexAttributeSize[VertexAttributeSize[\"ONE\"] = 1] = \"ONE\";\n    VertexAttributeSize[VertexAttributeSize[\"TWO\"] = 2] = \"TWO\";\n    VertexAttributeSize[VertexAttributeSize[\"THREE\"] = 3] = \"THREE\";\n    VertexAttributeSize[VertexAttributeSize[\"FOUR\"] = 4] = \"FOUR\";\n})(VertexAttributeSize = exports.VertexAttributeSize || (exports.VertexAttributeSize = {}));\n/** These are flags for indicating which shaders receive certain injection elements */\nvar ShaderInjectionTarget;\n(function (ShaderInjectionTarget) {\n    /** ONLY the vertex shader will receive the injection */\n    ShaderInjectionTarget[ShaderInjectionTarget[\"VERTEX\"] = 1] = \"VERTEX\";\n    /** ONLY the fragment shader will receive the injection */\n    ShaderInjectionTarget[ShaderInjectionTarget[\"FRAGMENT\"] = 2] = \"FRAGMENT\";\n    /** Both the fragment and vertex shader will receive the injection */\n    ShaderInjectionTarget[ShaderInjectionTarget[\"ALL\"] = 3] = \"ALL\";\n})(ShaderInjectionTarget = exports.ShaderInjectionTarget || (exports.ShaderInjectionTarget = {}));\n/**\n * This is the type of picking assigned to a layer. Each mode has performance and functionality\n * tradeoffs.\n */\nvar PickType;\n(function (PickType) {\n    /** Disable any picking methodology */\n    PickType[PickType[\"NONE\"] = 0] = \"NONE\";\n    /** Pick all instances found underneath the mouse. The Layer must explicitly support this feature. */\n    PickType[PickType[\"ALL\"] = 1] = \"ALL\";\n    /**\n     * NOTE: NOT IMPLEMENTED YET\n     *\n     * Uses highly efficient color rendering method to detect an instance on a pixel by pixel check. Since it is\n     * based on rendering, it will only select the 'visually' top most rendered instance. This means instances can be occluded\n     * by other instances is an instance renders behind another.\n     *\n     * This is vastly more efficient and accurate than ALL. This also will be more readily supported than ALL.\n     */\n    PickType[PickType[\"SINGLE\"] = 2] = \"SINGLE\";\n})(PickType = exports.PickType || (exports.PickType = {}));\n/**\n * Diff types that an instance can go through. Used to help the system consume the diff\n * and apply it to the GL framework.\n */\nvar InstanceDiffType;\n(function (InstanceDiffType) {\n    InstanceDiffType[InstanceDiffType[\"CHANGE\"] = 0] = \"CHANGE\";\n    InstanceDiffType[InstanceDiffType[\"INSERT\"] = 1] = \"INSERT\";\n    InstanceDiffType[InstanceDiffType[\"REMOVE\"] = 2] = \"REMOVE\";\n})(InstanceDiffType = exports.InstanceDiffType || (exports.InstanceDiffType = {}));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./observable\"));\n__export(require(\"./instance-provider\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Class to manage the x, y, width, and height of an object\n *\n * @template T This specifies the data type associated with this shape and is accessible\n *             via the property 'd'\n */\nvar Bounds = /** @class */ (function () {\n    /**\n     * Create a new instance\n     *\n     * @param left  The left side (x coordinate) of the instance\n     * @param right The right side of the instance\n     * @param top The top (y coordinate) of the instance\n     * @param bottom The bottom of the instance\n     */\n    function Bounds(options) {\n        this.x = 0;\n        this.y = 0;\n        this.width = 0;\n        this.height = 0;\n        this.x = options.x || options.left || 0;\n        this.y = options.y || options.top || 0;\n        this.height = options.height || ((options.bottom || 0) - this.y) || 0;\n        this.width = options.width || ((options.right || 0) - this.x) || 0;\n    }\n    Object.defineProperty(Bounds.prototype, \"area\", {\n        get: function () {\n            return this.width * this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"bottom\", {\n        get: function () {\n            return this.y + this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"left\", {\n        get: function () {\n            return this.x;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"mid\", {\n        get: function () {\n            return {\n                x: this.x + this.width / 2.0,\n                y: this.y + this.height / 2.0,\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"right\", {\n        get: function () {\n            return this.x + this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"top\", {\n        get: function () {\n            return this.y;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Bounds.emptyBounds = function () {\n        return new Bounds({\n            height: 0,\n            width: 0,\n            x: 0,\n            y: 0,\n        });\n    };\n    /**\n     * Checks to see if a point is within this bounds object.\n     *\n     * @param point\n     */\n    Bounds.prototype.containsPoint = function (point) {\n        return !(point.x < this.x || point.y < this.y || point.x > this.right || point.y > this.bottom);\n    };\n    /**\n     * Grows this bounds object to cover the space of the provided bounds object\n     *\n     * @param item\n     */\n    Bounds.prototype.encapsulate = function (item) {\n        if (item instanceof Bounds) {\n            if (item.x < this.x) {\n                this.width += Math.abs(item.x - this.x);\n                this.x = item.x;\n            }\n            if (item.y < this.y) {\n                this.height += Math.abs(item.y - this.y);\n                this.y = item.y;\n            }\n            if (this.right < item.right) {\n                this.width += item.right - this.right;\n            }\n            if (this.bottom < item.bottom) {\n                this.height += item.bottom - this.bottom;\n            }\n            return true;\n        }\n        else {\n            if (item.x < this.x) {\n                this.width += this.x - item.x;\n                this.x = item.x;\n            }\n            if (item.x > this.right) {\n                this.width += item.x - this.x;\n            }\n            if (item.y < this.y) {\n                this.height += this.y - item.y;\n                this.y = item.y;\n            }\n            if (item.y > this.bottom) {\n                this.height += item.y - this.y;\n            }\n            return true;\n        }\n    };\n    /**\n     * Checks to see if the provided bounds object could fit within the dimensions of this bounds object\n     * This ignores position and just checks width and height.\n     *\n     * @param bounds\n     *\n     * @return {number} 0 if it doesn't fit. 1 if it fits perfectly. 2 if it just fits.\n     */\n    Bounds.prototype.fits = function (bounds) {\n        // If the same, the bounds fits exactly into this bounds\n        if (this.width === bounds.width && this.height === bounds.height) {\n            return 1;\n        }\n        // The bounds can fit within this, then it just fits\n        if (this.width >= bounds.width && this.height >= bounds.height) {\n            return 2;\n        }\n        // Otherwise, the bounds does not fit within this bounds\n        return 0;\n    };\n    /**\n     * Checks if a bounds object intersects another bounds object.\n     *\n     * @param bounds\n     */\n    Bounds.prototype.hitBounds = function (bounds) {\n        return !(this.right < bounds.x || this.x > bounds.right || this.bottom < bounds.y || this.y > bounds.height);\n    };\n    /**\n     * Sees if the provided bounds is completely within this bounds object. Unlike fits() this takes\n     * position into account.\n     *\n     * @param bounds\n     */\n    Bounds.prototype.isInside = function (bounds) {\n        return this.x >= bounds.x && this.right <= bounds.right && this.y >= bounds.y && this.bottom <= bounds.bottom;\n    };\n    /**\n     * Easy readout of this Bounds object.\n     */\n    Bounds.prototype.toString = function () {\n        return \"{x: \" + this.x + \" y:\" + this.y + \" w:\" + this.width + \" h:\" + this.height + \"}\";\n    };\n    return Bounds;\n}());\nexports.Bounds = Bounds;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AnchorType;\n(function (AnchorType) {\n    AnchorType[AnchorType[\"BottomLeft\"] = 0] = \"BottomLeft\";\n    AnchorType[AnchorType[\"BottomMiddle\"] = 1] = \"BottomMiddle\";\n    AnchorType[AnchorType[\"BottomRight\"] = 2] = \"BottomRight\";\n    AnchorType[AnchorType[\"Custom\"] = 3] = \"Custom\";\n    AnchorType[AnchorType[\"Middle\"] = 4] = \"Middle\";\n    AnchorType[AnchorType[\"MiddleLeft\"] = 5] = \"MiddleLeft\";\n    AnchorType[AnchorType[\"MiddleRight\"] = 6] = \"MiddleRight\";\n    AnchorType[AnchorType[\"TopLeft\"] = 7] = \"TopLeft\";\n    AnchorType[AnchorType[\"TopMiddle\"] = 8] = \"TopMiddle\";\n    AnchorType[AnchorType[\"TopRight\"] = 9] = \"TopRight\";\n})(AnchorType = exports.AnchorType || (exports.AnchorType = {}));\nvar ScaleType;\n(function (ScaleType) {\n    /** The size of the image will be tied to world space */\n    ScaleType[ScaleType[\"ALWAYS\"] = 1] = \"ALWAYS\";\n    /** The image will scale to it's font size then stop growing */\n    ScaleType[ScaleType[\"BOUND_MAX\"] = 2] = \"BOUND_MAX\";\n    /** The image will alwyas retain it's font size on screen */\n    ScaleType[ScaleType[\"NEVER\"] = 3] = \"NEVER\";\n})(ScaleType = exports.ScaleType || (exports.ScaleType = {}));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar types_1 = require(\"../types\");\nvar util_1 = require(\"../util\");\nvar identify_by_key_1 = require(\"../util/identify-by-key\");\nvar instance_diff_manager_1 = require(\"./instance-diff-manager\");\nvar layer_interaction_handler_1 = require(\"./layer-interaction-handler\");\n/**\n * A base class for generating drawable content\n */\nvar Layer = /** @class */ (function (_super) {\n    __extends(Layer, _super);\n    function Layer(props) {\n        var _this = \n        // We do not establish bounds in the layer. The surface manager will take care of that for us\n        // After associating the layer with the view it is a part of.\n        _super.call(this, props) || this;\n        /** This determines the drawing order of the layer within it's scene */\n        _this.depth = 0;\n        /** A lookup fo an instance by it's ID */\n        _this.instanceById = new Map();\n        /** Provides the number of vertices a single instance spans */\n        _this.instanceVertexCount = 0;\n        // Keep our props within the layer\n        _this.props = Object.assign({}, Layer.defaultProps || {}, props);\n        // Set up the pick type for the layer\n        var _a = _this.props.picking, picking = _a === void 0 ? types_1.PickType.NONE : _a;\n        // If ALL is specified we set up QUAD tree picking for our instances\n        if (picking === types_1.PickType.ALL) {\n            var pickingMethods = _this.getInstancePickingMethods();\n            _this.picking = {\n                currentPickMode: types_1.PickType.NONE,\n                hitTest: pickingMethods.hitTest,\n                quadTree: new util_1.TrackedQuadTree(0, 1, 0, 1, pickingMethods.boundsAccessor),\n                type: types_1.PickType.ALL,\n            };\n        }\n        else if (picking === types_1.PickType.SINGLE) {\n            _this.picking = {\n                currentPickMode: types_1.PickType.NONE,\n                type: types_1.PickType.SINGLE,\n                uidToInstance: new Map(),\n            };\n        }\n        else {\n            _this.picking = {\n                currentPickMode: types_1.PickType.NONE,\n                type: types_1.PickType.NONE,\n            };\n        }\n        _this.diffManager = new instance_diff_manager_1.InstanceDiffManager(_this);\n        _this.diffProcessor = _this.diffManager.getDiffProcessor();\n        _this.interactions = new layer_interaction_handler_1.LayerInteractionHandler(_this);\n        return _this;\n    }\n    /**\n     * Invalidate and free all resources assocated with this layer.\n     */\n    Layer.prototype.destroy = function () {\n        this.uniformManager.destroy();\n    };\n    Layer.prototype.didUpdateProps = function () {\n        /** LIFECYCLE */\n    };\n    /**\n     * This is where global uniforms should update their values. Executes every frame.\n     */\n    Layer.prototype.draw = function () {\n        var uniform;\n        var value;\n        // Consume the diffs for the instances to update each element\n        var changeList = this.props.data.changeList;\n        // Make some holder variables to prevent declaration within the loop\n        var change, instance, uniforms;\n        // Fast ref to the processor and manager\n        var diffProcessor = this.diffProcessor;\n        var diffManager = this.diffManager;\n        for (var i = 0, end = changeList.length; i < end; ++i) {\n            change = changeList[i];\n            instance = change[0];\n            uniforms = this.uniformManager.getUniforms(instance);\n            // The diff type is change[1] which we use to find the diff processing method to use\n            diffProcessor[change[1]](diffManager, instance, uniforms);\n        }\n        // Indicate the diffs are consumed\n        this.props.data.resolve();\n        // Loop through the uniforms that are across all instances\n        for (var i = 0, end = this.uniforms.length; i < end; ++i) {\n            uniform = this.uniforms[i];\n            value = uniform.update(uniform);\n            uniform.materialUniforms.forEach(function (materialUniform) { return materialUniform.value = value; });\n        }\n    };\n    /**\n     * This method is for layers to implement to specify how the bounds for an instance are retrieved or\n     * calculated and how the Instance interacts with a point. This is REQUIRED to support PickType.ALL on the layer.\n     */\n    Layer.prototype.getInstancePickingMethods = function () {\n        throw new Error('When picking is set to PickType.ALL, the layer MUST have this method implemented; otherwise, the layer is incompatible with this picking mode.');\n    };\n    /**\n     * The type of Three model as well as the preferred draw mode associated with it.\n     */\n    Layer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TrianglesDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    /**\n     * The options for a three material without uniforms.\n     */\n    Layer.prototype.getMaterialOptions = function () {\n        return {};\n    };\n    /**\n     * This sets up all of the data bindings that will transport data from the CPU\n     * to the Shader on the GPU.\n     *\n     * Instance Attributes: These are very frequently changing attributes\n     * Vertex Attributes: These are attributes that should be static on a vertex. Conisder it very costly to update.\n     *                    The only time making these modifieable is in the event of GL_POINTS.\n     * Uniforms: These set up the uniforms for the layer, thus having all normal implications of a uniform. Global\n     *           across the fragment and vertex shaders and can be modified with little consequence.\n     */\n    Layer.prototype.initShader = function () {\n        return {\n            fs: require('../shaders/base/no-op.fs'),\n            instanceAttributes: [],\n            uniforms: [],\n            vertexAttributes: [],\n            vertexCount: 0,\n            vs: require('../shaders/base/no-op.vs'),\n        };\n    };\n    /**\n     * Helper method for making an instance attribute. Depending on set up, this makes creating elements\n     * have better documentation when typing out the elements.\n     */\n    Layer.prototype.makeInstanceAttribute = function (block, blockIndex, name, size, update, atlas) {\n        return {\n            atlas: atlas,\n            block: block,\n            blockIndex: blockIndex,\n            name: name,\n            size: size,\n            update: update,\n        };\n    };\n    /**\n     * Helper method for making a uniform type. Depending on set up, this makes creating elements\n     * have better documentation when typing out the elements.\n     */\n    Layer.prototype.makeUniform = function (name, size, update, shaderInjection, qualifier) {\n        return {\n            name: name,\n            qualifier: qualifier,\n            shaderInjection: shaderInjection,\n            size: size,\n            update: update,\n        };\n    };\n    Layer.prototype.willUpdateInstances = function (changes) {\n        // HOOK: Simple hook so a class can review all of it's changed instances before\n        //       Getting applied to the Shader IO\n    };\n    Layer.prototype.willUpdateProps = function (newProps) {\n        /** LIFECYCLE */\n    };\n    Layer.prototype.didUpdate = function () {\n        this.props.data.resolve();\n    };\n    Layer.defaultProps = {};\n    return Layer;\n}(identify_by_key_1.IdentifyByKey));\nexports.Layer = Layer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./bounds\"));\n__export(require(\"./point\"));\n","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_provider_1 = require(\"../instance-provider\");\nvar instanceUID = 0;\nvar Instance = /** @class */ (function () {\n    function Instance(options) {\n        /** A numerical look up for the instance. Numerical identifiers run faster than objects or strings */\n        this._uid = Instance.newUID;\n        /** This is an internal easing object to track properties for automated easing */\n        this._easing = new Map();\n        this._id = options.id || '';\n        this.active = options.active || this.active;\n    }\n    Object.defineProperty(Instance, \"newUID\", {\n        get: function () { return (instanceUID = (++instanceUID) % 0xFFFFFF); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * The system will call this on the instance when it believes the instance may be\n     * harboring resources that are not released.\n     */\n    Instance.prototype.destroy = function () {\n        // Generally a No-op\n    };\n    Object.defineProperty(Instance.prototype, \"easing\", {\n        get: function () {\n            return this._easing;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Instance.prototype, \"id\", {\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Instance.prototype, \"uid\", {\n        get: function () {\n            return this._uid;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        instance_provider_1.observable\n    ], Instance.prototype, \"active\", void 0);\n    return Instance;\n}());\nexports.Instance = Instance;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./chart-camera\"));\n__export(require(\"./instance\"));\n__export(require(\"./mouse\"));\n__export(require(\"./reference-camera\"));\n__export(require(\"./shader-templating\"));\n__export(require(\"./tracked-quad-tree\"));\n__export(require(\"./uid\"));\n__export(require(\"./vector\"));\n__export(require(\"./view-camera\"));\n__export(require(\"./webgl-stat\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./atlas\"));\n__export(require(\"./atlas-manager\"));\n__export(require(\"./color-atlas-resource\"));\n__export(require(\"./color-rasterizer\"));\n__export(require(\"./image-atlas-resource\"));\n__export(require(\"./image-rasterizer\"));\n__export(require(\"./label-atlas-resource\"));\n__export(require(\"./label-rasterizer\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This is an object that specifically is generated with a 'key' option that can never\n * be modified on the object and is identified henceforth with the key applied as the\n * 'id' of the object.\n */\nvar IdentifyByKey = /** @class */ (function () {\n    function IdentifyByKey(options) {\n        this.key = options.key;\n    }\n    Object.defineProperty(IdentifyByKey.prototype, \"id\", {\n        /** READONLY id of the object. */\n        get: function () {\n            return this.key;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IdentifyByKey;\n}());\nexports.IdentifyByKey = IdentifyByKey;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nfunction isMesh(val) {\n    return Boolean(val.isMesh);\n}\nfunction generateLayerModel(layer, geometry, material) {\n    var modelInfo = layer.getModelType();\n    var model = new modelInfo.modelType(geometry, material);\n    if (isMesh(model)) {\n        model.drawMode = modelInfo.drawMode === undefined ? Three.TriangleStripDrawMode : modelInfo.drawMode;\n    }\n    return model;\n}\nexports.generateLayerModel = generateLayerModel;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar absolute_position_1 = require(\"../primitives/absolute-position\");\nvar bounds_1 = require(\"../primitives/bounds\");\nvar identify_by_key_1 = require(\"../util/identify-by-key\");\nvar view_camera_1 = require(\"../util/view-camera\");\nvar ClearFlags;\n(function (ClearFlags) {\n    ClearFlags[ClearFlags[\"COLOR\"] = 1] = \"COLOR\";\n    ClearFlags[ClearFlags[\"DEPTH\"] = 2] = \"DEPTH\";\n    ClearFlags[ClearFlags[\"STENCIL\"] = 4] = \"STENCIL\";\n})(ClearFlags = exports.ClearFlags || (exports.ClearFlags = {}));\nfunction isOrthographic(val) {\n    return 'left' in val;\n}\n/**\n * This defines a view of a scene\n */\nvar View = /** @class */ (function (_super) {\n    __extends(View, _super);\n    function View(options) {\n        var _this = _super.call(this, options) || this;\n        /**\n         * This is the depth of the view. The higher the depth represents which layer is on top.\n         * Zero always represents the default view.\n         */\n        _this.depth = 0;\n        /** This is set to ensure the projections that happen properly translates the pixel ratio to normal Web coordinates */\n        _this.pixelRatio = window.devicePixelRatio;\n        Object.assign(_this, options);\n        return _this;\n    }\n    View.prototype.screenToPixelSpace = function (point, out) {\n        var p = out || { x: 0, y: 0 };\n        p.x = point.x * this.pixelRatio;\n        p.y = point.y * this.pixelRatio;\n        return p;\n    };\n    View.prototype.pixelSpaceToScreen = function (point, out) {\n        var p = out || { x: 0, y: 0 };\n        p.x = point.x / this.pixelRatio;\n        p.y = point.y / this.pixelRatio;\n        return p;\n    };\n    View.prototype.screenToView = function (point, out) {\n        var p = this.screenToPixelSpace(point, out);\n        p.x = p.x - this.viewBounds.x;\n        p.y = p.y - this.viewBounds.y;\n        return p;\n    };\n    View.prototype.viewToScreen = function (point, out) {\n        var p = { x: 0, y: 0 };\n        p.x = point.x + this.viewBounds.x;\n        p.y = point.y + this.viewBounds.y;\n        return this.pixelSpaceToScreen(p, out);\n    };\n    View.prototype.screenToWorld = function (point, out) {\n        var view = this.pixelSpaceToScreen(this.screenToView(point));\n        var world = out || { x: 0, y: 0 };\n        world.x = (view.x - (this.camera.offset[0] * this.camera.scale[0])) / this.camera.scale[0];\n        world.y = (view.y - (this.camera.offset[1] * this.camera.scale[1])) / this.camera.scale[1];\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        return world;\n    };\n    View.prototype.worldToScreen = function (point, out) {\n        var screen = { x: 0, y: 0 };\n        // Calculate from the camera to view space\n        screen.x = ((point.x * this.camera.scale[0]) + (this.camera.offset[0] * this.camera.scale[0])) * this.pixelRatio;\n        screen.y = ((point.y * this.camera.scale[1]) + (this.camera.offset[1] * this.camera.scale[1])) * this.pixelRatio;\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        // Convert from view to screen space\n        return this.viewToScreen(screen, out);\n    };\n    View.prototype.viewToWorld = function (point, out) {\n        var world = out || { x: 0, y: 0 };\n        var screen = this.pixelSpaceToScreen(point);\n        world.x = (screen.x - (this.camera.offset[0] * this.camera.scale[0])) / this.camera.scale[0];\n        world.y = (screen.y - (this.camera.offset[1] * this.camera.scale[1])) / this.camera.scale[1];\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        return world;\n    };\n    View.prototype.worldToView = function (point, out) {\n        var screen = out || { x: 0, y: 0 };\n        // Calculate from the camera to view space\n        screen.x = (point.x * this.camera.scale[0]) + (this.camera.offset[0] * this.camera.scale[0]);\n        screen.y = (point.y * this.camera.scale[1]) + (this.camera.offset[1] * this.camera.scale[1]);\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        return screen;\n    };\n    /**\n     * This operation makes sure we have the view camera adjusted to the new viewport's needs.\n     * For default behavior this ensures that the coordinate system has no distortion, orthographic,\n     * top left as 0,0 with +y axis pointing down.\n     */\n    View.prototype.fitViewtoViewport = function (surfaceDimensions) {\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CONTROLLED && isOrthographic(this.viewCamera.baseCamera)) {\n            var viewBounds = absolute_position_1.getAbsolutePositionBounds(this.viewport, surfaceDimensions, this.pixelRatio);\n            var width = viewBounds.width;\n            var height = viewBounds.height;\n            var viewport = {\n                bottom: -height / 2,\n                far: 10000000,\n                left: -width / 2,\n                near: -100,\n                right: width / 2,\n                top: height / 2,\n            };\n            var scaleX = 1;\n            var scaleY = 1;\n            var camera = this.viewCamera.baseCamera;\n            Object.assign(camera, viewport);\n            camera.position.set(-viewBounds.width / 2.0 * scaleX, viewBounds.height / 2.0 * scaleY, camera.position.z);\n            camera.scale.set(scaleX, -scaleY, 1.0);\n            camera.updateMatrix();\n            camera.updateMatrixWorld(true);\n            camera.updateProjectionMatrix();\n            this.viewBounds = viewBounds;\n            this.viewBounds.data = this;\n            this.screenBounds = new bounds_1.Bounds({\n                height: this.viewBounds.height / this.pixelRatio,\n                width: this.viewBounds.width / this.pixelRatio,\n                x: this.viewBounds.x / this.pixelRatio,\n                y: this.viewBounds.y / this.pixelRatio,\n            });\n        }\n        else if (!isOrthographic(this.viewCamera.baseCamera)) {\n            console.warn('Fit to viewport does not support non-orthographic cameras as a default behavior.');\n        }\n    };\n    View.DEFAULT_VIEW_ID = '__default__';\n    return View;\n}(identify_by_key_1.IdentifyByKey));\nexports.View = View;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar identify_by_key_1 = require(\"../util/identify-by-key\");\nfunction sortByDepth(a, b) {\n    return a.depth - b.depth;\n}\n/**\n * This defines a scene to which layers are added to. It also tracks the views that this scene\n * is rendered with.\n */\nvar Scene = /** @class */ (function (_super) {\n    __extends(Scene, _super);\n    function Scene(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the three scene which actually sets up the rendering objects */\n        _this.container = new Three.Scene();\n        // TODO: This 'could' be smarter when Three is gone. The pipeline could IMMEDIATELY render\n        /** We make a picking container specifically for the cases where objects must be rendered for picking */\n        _this.pickingContainer = new Three.Scene();\n        /** This is all of the layers tracked to the scene */\n        _this.layers = [];\n        /** This indicates the sort is dirty for a set of layers */\n        _this.sortIsDirty = false;\n        /** This is the view */\n        _this.viewById = new Map();\n        _this.container.frustumCulled = false;\n        _this.container.autoUpdate = false;\n        return _this;\n    }\n    /**\n     * Adds a layer to the scene with the current view setting the layer contains.\n     * The layer can not jump between views or scenes. You must destroy and reconstruct\n     * the layer.\n     */\n    Scene.prototype.addLayer = function (layer) {\n        // Add the layer to the list of layers under the view\n        this.layers.push(layer);\n        this.sortIsDirty = true;\n    };\n    /**\n     * This adds a view to this scene to be used by the scene\n     */\n    Scene.prototype.addView = function (view) {\n        this.viewById.set(view.id, view);\n    };\n    /**\n     * Release any resources this may be hanging onto\n     */\n    Scene.prototype.destroy = function () {\n        delete this.container;\n    };\n    /**\n     * Removes a layer from the scene. No resort is needed as remove operations\n     * do not adjust the sorting order.\n     */\n    Scene.prototype.removeLayer = function (layer) {\n        if (this.layers) {\n            var index = this.layers.indexOf(layer);\n            if (index >= 0) {\n                this.layers.splice(index, 1);\n                return;\n            }\n        }\n        console.warn('Could not remove a layer from the scene as the layer was not a part of the scene to start. Scene:', this.id, 'Layer:', layer.id);\n    };\n    Scene.prototype.sortLayers = function () {\n        if (this.sortIsDirty) {\n            this.layers.sort(sortByDepth);\n        }\n    };\n    Scene.DEFAULT_SCENE_ID = '__default__';\n    return Scene;\n}(identify_by_key_1.IdentifyByKey));\nexports.Scene = Scene;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_atlas_resource_1 = require(\"./base-atlas-resource\");\nvar LabelAtlasResource = /** @class */ (function (_super) {\n    __extends(LabelAtlasResource, _super);\n    function LabelAtlasResource(label) {\n        var _this = _super.call(this) || this;\n        _this.label = label;\n        return _this;\n    }\n    return LabelAtlasResource;\n}(base_atlas_resource_1.BaseAtlasResource));\nexports.LabelAtlasResource = LabelAtlasResource;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BaseAtlasResource = /** @class */ (function () {\n    function BaseAtlasResource() {\n        /**\n         * This sets the ratserization to be a larger value on the texture than is rendered within\n         * the world space. This allows for techniques to be applied in the shaders to incorporate super sampling\n         * or other processes which require higher levels of resolution.\n         *\n         * The default is 1 for a 1 to 1 sample scaling to world space rendering\n         */\n        this.sampleScale = 1;\n    }\n    return BaseAtlasResource;\n}());\nexports.BaseAtlasResource = BaseAtlasResource;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EdgeScaleType;\n(function (EdgeScaleType) {\n    /** All dimensions are within world space */\n    EdgeScaleType[EdgeScaleType[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * The control points are a delta from the end points within screen space, and the line thickness is within\n     * screen space as well all measured in pixels. The scaleFactor scales both thickness and control delta values.\n     * The endpoints remain in world space\n     */\n    EdgeScaleType[EdgeScaleType[\"SCREEN_CURVE\"] = 1] = \"SCREEN_CURVE\";\n})(EdgeScaleType = exports.EdgeScaleType || (exports.EdgeScaleType = {}));\nvar EdgeType;\n(function (EdgeType) {\n    /** Makes a straight edge with no curve */\n    EdgeType[EdgeType[\"LINE\"] = 0] = \"LINE\";\n    /** Makes a single control point Bezier curve */\n    EdgeType[EdgeType[\"BEZIER\"] = 1] = \"BEZIER\";\n    /** Makes a two control point bezier curve */\n    EdgeType[EdgeType[\"BEZIER2\"] = 2] = \"BEZIER2\";\n})(EdgeType = exports.EdgeType || (exports.EdgeType = {}));\n/**\n * This is the broadphase control for edges to help handle quad tree adjustments for picking. If the edge scale type\n * is NONE, you don't need to utilize this. If you use screen space and have camera distortions along an axis, this\n * can help greatly.\n */\nvar EdgeBroadphase;\n(function (EdgeBroadphase) {\n    /** Use this if the broad phase detection should use both width and height of the edge's bounds */\n    EdgeBroadphase[EdgeBroadphase[\"ALL\"] = 0] = \"ALL\";\n    /** Use this to ensure a test against the edge is performed if the mouse aligns with it on the x-axis */\n    EdgeBroadphase[EdgeBroadphase[\"PASS_Y\"] = 1] = \"PASS_Y\";\n    /** Use this to ensure a test against the edge is performed if the mouse aligns with it on the y axis */\n    EdgeBroadphase[EdgeBroadphase[\"PASS_X\"] = 2] = \"PASS_X\";\n})(EdgeBroadphase = exports.EdgeBroadphase || (exports.EdgeBroadphase = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ViewCameraType;\n(function (ViewCameraType) {\n    /**\n     * Indicates a camera that is forced by the system to follow:\n     * - Match width and height of the view port\n     * - +y axis points downward\n     * - gl origin is at the top left of the screen\n     */\n    ViewCameraType[ViewCameraType[\"CONTROLLED\"] = 0] = \"CONTROLLED\";\n    /**\n     * This allows a custom view camera to be applied to the scene.\n     */\n    ViewCameraType[ViewCameraType[\"CUSTOM\"] = 1] = \"CUSTOM\";\n})(ViewCameraType = exports.ViewCameraType || (exports.ViewCameraType = {}));\n/**\n * This is a camera that controls the view projection matrix. This is a much more\n * complicated way to handle views that is better suited for handling 3D applications\n * and is very overkill for most 2D charting systems. If you are working purely with\n * 2D components, it's recommended to leave this as a CONTROLLED camera and utilize\n * the ChartCamera for most of your needs.\n */\nvar ViewCamera = /** @class */ (function () {\n    function ViewCamera() {\n        this.type = ViewCameraType.CONTROLLED;\n    }\n    return ViewCamera;\n}());\nexports.ViewCamera = ViewCamera;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar sqrt = Math.sqrt;\nfunction add1(left, right) {\n    return [\n        left[0] + right[0],\n    ];\n}\nexports.add1 = add1;\nfunction scale1(vec, scale) {\n    return [\n        vec[0] * scale,\n    ];\n}\nexports.scale1 = scale1;\nfunction subtract1(left, right) {\n    return [\n        left[0] - right[0],\n    ];\n}\nexports.subtract1 = subtract1;\nfunction multiply1(left, right) {\n    return [\n        left[0] * right[0],\n    ];\n}\nexports.multiply1 = multiply1;\nfunction dot1(left, right) {\n    return (left[0] * right[0]);\n}\nexports.dot1 = dot1;\nfunction linear1(start, end, t) {\n    return scale1(add1(subtract1(end, start), start), t);\n}\nexports.linear1 = linear1;\nfunction length1(start) {\n    return sqrt(dot1(start, start));\n}\nexports.length1 = length1;\nfunction add2(left, right) {\n    return [\n        left[0] + right[0],\n        left[1] + right[1],\n    ];\n}\nexports.add2 = add2;\nfunction scale2(left, scale) {\n    return [\n        left[0] * scale,\n        left[1] * scale,\n    ];\n}\nexports.scale2 = scale2;\nfunction subtract2(left, right) {\n    return [\n        left[0] - right[0],\n        left[1] - right[1],\n    ];\n}\nexports.subtract2 = subtract2;\nfunction multiply2(left, right) {\n    return [\n        left[0] * right[0],\n        left[1] * right[1],\n    ];\n}\nexports.multiply2 = multiply2;\nfunction dot2(left, right) {\n    return (left[0] * right[0] +\n        left[1] * right[1]);\n}\nexports.dot2 = dot2;\nfunction linear2(start, end, t) {\n    return scale2(add2(subtract2(end, start), start), t);\n}\nexports.linear2 = linear2;\nfunction length2(start) {\n    return sqrt(dot2(start, start));\n}\nexports.length2 = length2;\nfunction add3(left, right) {\n    return [\n        left[0] + right[0],\n        left[1] + right[1],\n        left[2] + right[2],\n    ];\n}\nexports.add3 = add3;\nfunction scale3(left, scale) {\n    return [\n        left[0] * scale,\n        left[1] * scale,\n        left[2] * scale,\n    ];\n}\nexports.scale3 = scale3;\nfunction subtract3(left, right) {\n    return [\n        left[0] - right[0],\n        left[1] - right[1],\n        left[2] - right[2],\n    ];\n}\nexports.subtract3 = subtract3;\nfunction multiply3(left, right) {\n    return [\n        left[0] * right[0],\n        left[1] * right[1],\n        left[2] * right[2],\n    ];\n}\nexports.multiply3 = multiply3;\nfunction linear3(start, end, t) {\n    return scale3(add3(subtract3(end, start), start), t);\n}\nexports.linear3 = linear3;\nfunction length3(start) {\n    return sqrt(dot3(start, start));\n}\nexports.length3 = length3;\nfunction dot3(left, right) {\n    return (left[0] * right[0] +\n        left[1] * right[1] +\n        left[2] * right[2]);\n}\nexports.dot3 = dot3;\nfunction add4(left, right) {\n    return [\n        left[0] + right[0],\n        left[1] + right[1],\n        left[2] + right[2],\n        left[3] + right[3],\n    ];\n}\nexports.add4 = add4;\nfunction scale4(left, scale) {\n    return [\n        left[0] * scale,\n        left[1] * scale,\n        left[2] * scale,\n        left[3] * scale,\n    ];\n}\nexports.scale4 = scale4;\nfunction subtract4(left, right) {\n    return [\n        left[0] - right[0],\n        left[1] - right[1],\n        left[2] - right[2],\n        left[3] - right[3],\n    ];\n}\nexports.subtract4 = subtract4;\nfunction multiply4(left, right) {\n    return [\n        left[0] * right[0],\n        left[1] * right[1],\n        left[2] * right[2],\n        left[3] * right[3],\n    ];\n}\nexports.multiply4 = multiply4;\nfunction dot4(left, right) {\n    return (left[0] * right[0] +\n        left[1] * right[1] +\n        left[2] * right[2] +\n        left[3] * right[3]);\n}\nexports.dot4 = dot4;\nfunction linear4(start, end, t) {\n    return scale4(add4(subtract4(end, start), start), t);\n}\nexports.linear4 = linear4;\nfunction length4(start) {\n    return sqrt(dot4(start, start));\n}\nexports.length4 = length4;\nfunction VecMath(vec) {\n    var methods;\n    if (vec.length === 1) {\n        methods = {\n            add: add1,\n            dot: dot1,\n            length: length1,\n            linear: linear1,\n            multiply: multiply1,\n            scale: scale1,\n            subtract: subtract1,\n        };\n        return methods;\n    }\n    else if (vec.length === 2) {\n        methods = {\n            add: add2,\n            dot: dot2,\n            length: length2,\n            linear: linear2,\n            multiply: multiply2,\n            scale: scale2,\n            subtract: subtract2,\n        };\n        return methods;\n    }\n    else if (vec.length === 3) {\n        methods = {\n            add: add3,\n            dot: dot3,\n            length: length3,\n            linear: linear3,\n            multiply: multiply3,\n            scale: scale3,\n            subtract: subtract3,\n        };\n        return methods;\n    }\n    methods = {\n        add: add4,\n        dot: dot4,\n        length: length4,\n        linear: linear4,\n        multiply: multiply4,\n        scale: scale4,\n        subtract: subtract4,\n    };\n    return methods;\n}\nexports.VecMath = VecMath;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction shaderTemplate(shader, options, required) {\n    var matched = new Map();\n    var noValueProvided = new Map();\n    var notFound = new Map();\n    var shaderOptions = new Map();\n    var shaderResults = shader.replace(/\\$\\{(\\w+)\\}/g, function (x, match) {\n        shaderOptions.set(match, (shaderOptions.get(match) || 0) + 1);\n        if (match in options) {\n            matched.set(match, (matched.get(match) || 0) + 1);\n            return options[match];\n        }\n        noValueProvided.set(match, (noValueProvided.get(match) || 0) + 1);\n        return '';\n    });\n    Object.keys(options).forEach(function (option) {\n        if (!matched.get(option)) {\n            notFound.set(option, (notFound.get(option) || 0) + 1);\n        }\n    });\n    // Provide metrics\n    var results = {\n        resolvedShaderOptions: matched,\n        shader: shaderResults,\n        shaderProvidedOptions: shaderOptions,\n        unresolvedProvidedOptions: notFound,\n        unresolvedShaderOptions: noValueProvided,\n    };\n    if (required) {\n        // This will ensure that BOTH the parameter input AND the shader provided the required options.\n        required.values.forEach(function (require) {\n            if (results.unresolvedProvidedOptions.get(require)) {\n                console.error(required.name + \": Could not resolve all the required inputs. Input:\", require);\n            }\n            else if (results.unresolvedShaderOptions.get(require)) {\n                console.error(required.name + \": A required option was not provided in the options parameter. Option:\", require);\n            }\n            else if (!results.resolvedShaderOptions.get(require)) {\n                console.error(required.name + \": A required option was not provided in the options parameter. Option:\", require);\n            }\n        });\n    }\n    return results;\n}\nexports.shaderTemplate = shaderTemplate;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chartCameraUID = 0;\n/**\n * Quick method for applying a source array to a target array. This\n * ensures the arrays both are valid and applies the values without just making\n * a copy of the source.\n */\nfunction applyArray(target, source) {\n    target && source && target.splice.apply(target, [0, source.length].concat(source));\n}\nvar ChartCamera = /** @class */ (function () {\n    function ChartCamera(options) {\n        /** Internally set id */\n        this._id = chartCameraUID++;\n        /** Represents how much an element should be offset in world space */\n        this.offset = [0, 0, 0];\n        /** Represents how scaled each axis should be in world space */\n        this.scale = [1, 1, 1];\n        if (options) {\n            applyArray(this.offset, options.offset);\n            applyArray(this.scale, options.scale);\n        }\n    }\n    Object.defineProperty(ChartCamera.prototype, \"id\", {\n        /** Keep id as readonly */\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the location of the camera by adjusting the offsets to match.\n     */\n    ChartCamera.prototype.position = function (location) {\n        this.offset = location.slice(0);\n    };\n    return ChartCamera;\n}());\nexports.ChartCamera = ChartCamera;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Classes can extend this and override the methods to respond to events.\n */\nvar EventManager = /** @class */ (function () {\n    function EventManager() {\n    }\n    /**\n     * This retrieves the projections for the view specified by the provided viewId.\n     */\n    EventManager.prototype.getProjection = function (viewId) {\n        return this.mouseManager.getView(viewId);\n    };\n    /**\n     * This retrieves the actual view for the view specified by the provided viewId.\n     */\n    EventManager.prototype.getView = function (viewId) {\n        return (this.mouseManager && this.mouseManager.getView(viewId)) || null;\n    };\n    /**\n     * This retrieves the screen bounds for the view specified by the provided viewId.\n     */\n    EventManager.prototype.getViewScreenBounds = function (viewId) {\n        var view = this.mouseManager.getView(viewId);\n        if (view) {\n            return view.screenBounds;\n        }\n        return null;\n    };\n    /**\n     * This is used internally which provides the parent MouseEventManager via the param mouseManager for this\n     * EventManager.\n     */\n    EventManager.prototype.setMouseManager = function (mouseManager) {\n        this.mouseManager = mouseManager;\n    };\n    return EventManager;\n}());\nexports.EventManager = EventManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mouse_1 = require(\"../util/mouse\");\nvar quad_tree_1 = require(\"../util/quad-tree\");\n// If a mouse up after a mouse down happens before this many milliseconds, a click gesture will happen\nvar VALID_CLICK_DELAY = 1E3;\nfunction sortByDepth(a, b) {\n    return b.data.depth - a.data.depth;\n}\nfunction isDefined(val) {\n    return Boolean(val);\n}\n/**\n * This manages mouse events on the provided canvas and provides some higher level\n * interactions with the surface.\n */\nvar MouseEventManager = /** @class */ (function () {\n    function MouseEventManager(canvas, views, controllers, handlesWheelEvents) {\n        var _this = this;\n        this.eventCleanup = [];\n        /**\n         * This flag is set when the system is waiting to render the elements to establish bounds.\n         * No Mouse interations will happen while this is set to true.\n         */\n        this._waitingForRender = true;\n        /**\n         * Retrieves the views underneath the mouse with the top most view as\n         * the first view in the list.\n         */\n        this.getViewsUnderMouse = function (mouse) {\n            // Find the views the mouse has interacted with\n            var hitViews = _this.quadTree.query(mouse);\n            // Sort them by depth\n            hitViews.sort(sortByDepth);\n            return hitViews;\n        };\n        /**\n         * When the renderer is resized, we must reform our quad tree\n         */\n        this.resize = function () {\n            _this._waitingForRender = true;\n        };\n        this.context = canvas;\n        this.setViews(views);\n        this.setControllers(controllers);\n        this.addContextListeners(handlesWheelEvents);\n    }\n    Object.defineProperty(MouseEventManager.prototype, \"waitingForRender\", {\n        get: function () {\n            return this._waitingForRender;\n        },\n        set: function (val) {\n            this._waitingForRender = val;\n            // When we're no longer waiting for render to occur we update all of our views in the quad tree\n            if (!val) {\n                this.quadTree = new quad_tree_1.QuadTree(0, 0, 0, 0);\n                this.quadTree.addAll(this.views.map(function (v) { return v.bounds; }).filter(isDefined));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This sets up the DOM events to listen to the events that are broadcasted by the canvas.\n     * These events are set up in such a way as to continue some events when the user\n     * drags the mouse off of the browser or off the canvas without releasing.\n     */\n    MouseEventManager.prototype.addContextListeners = function (handlesWheelEvents) {\n        var _this = this;\n        var element = this.context;\n        var startView;\n        var startPosition;\n        if (handlesWheelEvents) {\n            var wheelHandler = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                var wheel = _this.makeWheel(event);\n                _this.controllers.forEach(function (controller) {\n                    controller.handleWheel(interaction, wheel);\n                });\n                event.stopPropagation();\n                event.preventDefault();\n            };\n            if ('onwheel' in element) {\n                element.onwheel = wheelHandler;\n            }\n            if ('addEventListener' in element) {\n                element.addEventListener('DOMMouseScroll', wheelHandler);\n                this.eventCleanup.push(['DOMMouseScroll', wheelHandler]);\n            }\n        }\n        element.onmouseleave = function (event) {\n            // No interactions while waiting for the render to update\n            if (_this.waitingForRender)\n                return;\n            var mouse = mouse_1.eventElementPosition(event, element);\n            var interaction = _this.makeInteraction(mouse, startPosition, startView);\n            _this.controllers.forEach(function (controller) {\n                controller.handleMouseOut(interaction);\n            });\n        };\n        element.onmousemove = function (event) {\n            // No interactions while waiting for the render to update\n            if (_this.waitingForRender)\n                return;\n            var mouse = mouse_1.eventElementPosition(event, element);\n            var interaction = _this.makeInteraction(mouse, startPosition, startView);\n            _this.controllers.forEach(function (controller) {\n                controller.handleMouseMove(interaction);\n            });\n        };\n        element.onmousedown = function (event) {\n            // No interactions while waiting for the render to update\n            if (_this.waitingForRender)\n                return;\n            startPosition = mouse_1.eventElementPosition(event, element);\n            var downViews = _this.getViewsUnderMouse(startPosition);\n            // While this is true, when mouse up happens, the click gesture will execute\n            var canClick = true;\n            var clickStartTime = Date.now();\n            // If no views under this view, then we just quick exit with no interactions\n            if (downViews.length <= 0) {\n                return;\n            }\n            startView = downViews[0].data;\n            var interaction = _this.makeInteraction(startPosition, startPosition, startView);\n            var currentPosition = startPosition;\n            _this.controllers.forEach(function (controller) {\n                controller.handleMouseDown(interaction, event.button);\n            });\n            event.stopPropagation();\n            document.onmousemove = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                var delta = {\n                    x: mouse.x - currentPosition.x,\n                    y: mouse.y - currentPosition.y,\n                };\n                var drag = _this.makeDrag(mouse, startPosition || { x: 0, y: 0 }, currentPosition, delta);\n                currentPosition = mouse;\n                _this.controllers.forEach(function (controller) {\n                    controller.handleDrag(interaction, drag);\n                });\n                // If we move after a mouse down, it's no longer a click\n                canClick = false;\n            };\n            document.onmouseup = function (event) {\n                document.onmousemove = null;\n                document.onmouseup = null;\n                document.onmouseover = null;\n            };\n            document.onmouseover = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                _this.controllers.forEach(function (controller) {\n                    controller.handleMouseOver(interaction);\n                });\n                event.stopPropagation();\n            };\n            element.onmouseup = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                _this.controllers.forEach(function (controller) {\n                    controller.handleMouseUp(interaction, event.button);\n                });\n                // If we release the mouse before the valid click delay\n                if (canClick && Date.now() - clickStartTime < VALID_CLICK_DELAY) {\n                    _this.controllers.forEach(function (controller) {\n                        controller.handleClick(interaction, event.button);\n                    });\n                }\n            };\n            // Text will not be selected when it is being dragged\n            element.onselectstart = function () {\n                return false;\n            };\n        };\n        // Enable touch support\n        this.addTouchContextListeners();\n    };\n    MouseEventManager.prototype.addTouchContextListeners = function () {\n        var element = this.context;\n        element.ontouchstart = function (event) {\n            // TODO: This is the start work for the touch events. And this retains sentimental value.\n            // For (let i = 0, end = event.changedTouches.length; i < end; ++i) {\n            // TODO\n            // Const touch = event.changedTouches.item(i);\n            // CurrentTouches.set(touch.identifier, to);\n            // }\n        };\n        element.ontouchend = function (event) {\n            // TODO\n        };\n        element.ontouchmove = function (event) {\n            // TODO\n        };\n        element.ontouchcancel = function (event) {\n            // TODO\n        };\n    };\n    /**\n     * Retrieves the view for the provided id\n     */\n    MouseEventManager.prototype.getView = function (viewId) {\n        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n            var view = _a[_i];\n            if (view.view.id === viewId) {\n                return view.view;\n            }\n        }\n        return null;\n    };\n    /**\n     * This generates the metrics for a drag gesture.\n     */\n    MouseEventManager.prototype.makeDrag = function (mouse, start, previous, delta) {\n        return {\n            screen: {\n                current: mouse,\n                delta: delta,\n                previous: previous,\n                start: start,\n            },\n        };\n    };\n    /**\n     * This makes the metrics for interactions with the views.\n     */\n    MouseEventManager.prototype.makeInteraction = function (mouse, start, startView) {\n        // Find the views the mouse has interacted with\n        var hitViews = this.getViewsUnderMouse(mouse);\n        return {\n            screen: {\n                mouse: mouse,\n            },\n            start: start && startView && {\n                mouse: startView.view.screenToView(mouse),\n                view: startView.view,\n            },\n            target: {\n                mouse: hitViews[0] && hitViews[0].data.view.screenToView(mouse),\n                view: hitViews[0] && hitViews[0].data.view,\n            },\n            viewsUnderMouse: hitViews.map(function (v) { return ({\n                mouse: v.data.view.screenToView(mouse),\n                view: v.data.view,\n            }); }),\n        };\n    };\n    MouseEventManager.prototype.makeWheel = function (event) {\n        var wheel = mouse_1.normalizeWheel(event);\n        return {\n            wheel: [wheel.x, wheel.y],\n        };\n    };\n    /**\n     * Sets the controllers to receive events from this manager.\n     */\n    MouseEventManager.prototype.setControllers = function (controllers) {\n        this.controllers = controllers;\n        for (var _i = 0, _a = this.controllers; _i < _a.length; _i++) {\n            var controller = _a[_i];\n            controller.setMouseManager(this);\n        }\n    };\n    /**\n     * Sets the views that gets queried for interactions.\n     */\n    MouseEventManager.prototype.setViews = function (views) {\n        this.views = views;\n    };\n    MouseEventManager.prototype.destroy = function () {\n        var _this = this;\n        delete this.quadTree;\n        this.context.onmousedown = null;\n        this.context.onmousemove = null;\n        this.context.onmouseleave = null;\n        this.context.onmousewheel = null;\n        this.eventCleanup.forEach(function (event) {\n            _this.context.removeEventListener(event[0], event[1]);\n        });\n    };\n    return MouseEventManager;\n}());\nexports.MouseEventManager = MouseEventManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This file is dedicted to the all important step of processing desired inputs from the layer\n * and coming up with automated generated uniforms and attributes that the shader's will need\n * in order to operate with the conveniences the library offers. This includes things such as\n * injecting camera projection uniforms, resource uniforms, animation adjustments etc etc.\n */\nvar Three = require(\"three\");\nvar types_1 = require(\"../types\");\nvar util_1 = require(\"../util\");\nvar auto_easing_method_1 = require(\"../util/auto-easing-method\");\nvar abs = Math.abs;\n/**\n * This is a lookup for a test vector for the provided size\n */\nvar testStartVector = (_a = {},\n    _a[types_1.InstanceAttributeSize.ONE] = [1],\n    _a[types_1.InstanceAttributeSize.TWO] = [1, 2],\n    _a[types_1.InstanceAttributeSize.THREE] = [1, 2, 3],\n    _a[types_1.InstanceAttributeSize.FOUR] = [1, 2, 3, 4],\n    _a);\n/**\n * This is a lookup for a test vector for the provided size\n */\nvar testEndVector = (_b = {},\n    _b[types_1.InstanceAttributeSize.ONE] = [4],\n    _b[types_1.InstanceAttributeSize.TWO] = [4, 3],\n    _b[types_1.InstanceAttributeSize.THREE] = [4, 3, 2],\n    _b[types_1.InstanceAttributeSize.FOUR] = [4, 3, 2, 1],\n    _b);\nvar emptyTexture = new Three.Texture();\nfunction isAtlasAttribute(attr) {\n    return Boolean(attr) && attr.atlas;\n}\nfunction isEasingAttribute(attr) {\n    return Boolean(attr) && attr.easing && attr.size !== undefined;\n}\nfunction isInstanceAttribute(attr) {\n    return Boolean(attr);\n}\nfunction isVertexAttribute(attr) {\n    return Boolean(attr);\n}\nfunction isUniform(attr) {\n    return Boolean(attr);\n}\nfunction toVertexAttributeInternal(attribute) {\n    return Object.assign({}, attribute, { materialAttribute: null });\n}\nfunction toUniformInternal(uniform) {\n    return Object.assign({}, uniform, { materialUniforms: [] });\n}\n/**\n * This finds a block and an index that can accomodate a provided size\n * @param attributes\n * @param seekingSize\n */\nfunction findEmptyBlock(attributes, seekingSize) {\n    var usedBlocks = [];\n    var maxBlock = 0;\n    if (seekingSize === undefined) {\n        seekingSize = 1;\n    }\n    attributes.forEach(function (instanceAttribute) {\n        var block = instanceAttribute.block;\n        var index = instanceAttribute.blockIndex === undefined ? 0 : instanceAttribute.blockIndex;\n        var size = instanceAttribute.size === undefined ? 0 : instanceAttribute.size;\n        maxBlock = Math.max(block, maxBlock);\n        while (usedBlocks.length - 1 < block) {\n            usedBlocks.push([false, false, false, false]);\n        }\n        for (var i = index - 1, end = index - 1 + size; i < end; ++i) {\n            usedBlocks[block][i] = true;\n        }\n    });\n    for (var x = 0; x < usedBlocks.length; x++) {\n        for (var ind = 0; ind < 4; ind++) {\n            if (usedBlocks[x][ind]) {\n                continue;\n            }\n            else {\n                for (var breadth = ind; breadth < 4; breadth++) {\n                    if (!usedBlocks[x][breadth]) {\n                        if ((breadth - ind + 1) === seekingSize) {\n                            return [x, ind + 1];\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // If no block was ever found, then we take the max block detected and make\n    // A new block after it\n    return [maxBlock + 1, types_1.InstanceBlockIndex.ONE];\n}\n/**\n * This sorts the attributes such that the attributes that MUST be updated first are put to the top.\n * This is necessary for complex attributes like atlas and easing attributes who have other attributes\n * that have dependent behaviors based on their source attribute.\n */\nfunction sortNeedsUpdateFirstToTop(a, b) {\n    if (a.atlas && !b.atlas)\n        return -1;\n    if (a.easing && !b.easing)\n        return -1;\n    return 1;\n}\n/**\n * This generates any uniforms needed for when a layer is requesting\n */\nfunction generateAtlasResourceUniforms(layer, instanceAttributes) {\n    // Retrieve all of the instance attributes that are atlas references\n    var atlasInstanceAttributes = [];\n    // Key: The atlas uniform name requested\n    var requestedAtlasInjections = new Map();\n    // Get the atlas requests that have unique names. We only need one uniform\n    // For a single unique provided name. We also must merge the requests for\n    // Vertex and fragment injections\n    instanceAttributes.forEach(function (attribute) {\n        if (isAtlasAttribute(attribute)) {\n            // Auto set the size of the attribute. Attribute's that are a resource automatically\n            // Consume a size of four\n            attribute.size = types_1.InstanceAttributeSize.FOUR;\n            attribute.blockIndex = types_1.InstanceBlockIndex.ONE;\n            // Get the atlas resource uniform (sampler2D) injection targets. We default to only the\n            // Fragment shader as it's the most commonly used location for sampler2Ds\n            var injection = attribute.atlas.shaderInjection || types_1.ShaderInjectionTarget.FRAGMENT;\n            // See if we already have an injection for the given injected uniform name for an atlas resource.\n            var injections = requestedAtlasInjections.get(attribute.atlas.name);\n            if (injections) {\n                requestedAtlasInjections.set(attribute.atlas.name, [\n                    injections[0] ||\n                        injection === types_1.ShaderInjectionTarget.VERTEX ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                    injections[1] ||\n                        injection === types_1.ShaderInjectionTarget.FRAGMENT ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                ]);\n            }\n            else {\n                atlasInstanceAttributes.push(attribute);\n                requestedAtlasInjections.set(attribute.atlas.name, [\n                    injection === types_1.ShaderInjectionTarget.VERTEX ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                    injection === types_1.ShaderInjectionTarget.FRAGMENT ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                ]);\n            }\n        }\n    });\n    // Make uniforms for all of the unique atlas requests.\n    return atlasInstanceAttributes.map(function (instanceAttribute) {\n        var injection = types_1.ShaderInjectionTarget.FRAGMENT;\n        if (instanceAttribute.atlas) {\n            var injections = requestedAtlasInjections.get(instanceAttribute.atlas.name);\n            if (injections) {\n                injection =\n                    (injections[0] && injections[1] && types_1.ShaderInjectionTarget.ALL) ||\n                        (injections[0] && !injections[1] && types_1.ShaderInjectionTarget.VERTEX) ||\n                        (!injections[0] && injections[1] && types_1.ShaderInjectionTarget.FRAGMENT) ||\n                        injection;\n            }\n        }\n        return {\n            name: instanceAttribute.atlas.name,\n            shaderInjection: injection,\n            size: types_1.UniformSize.ATLAS,\n            update: function () { return layer.resource.getAtlasTexture(instanceAttribute.atlas.key) || emptyTexture; },\n        };\n    });\n}\n/**\n * This modifies the instance attributes in a way that produces enough attributes to handle the easing equations\n * being performed on the gpu.\n */\nfunction generateEasingAttributes(layer, instanceAttributes) {\n    var easingAttributes = [];\n    // We gather all of the easing attributes first so we can modify the attribute array\n    // On next pass\n    for (var _i = 0, instanceAttributes_1 = instanceAttributes; _i < instanceAttributes_1.length; _i++) {\n        var attribute = instanceAttributes_1[_i];\n        if (isEasingAttribute(attribute)) {\n            easingAttributes.push(attribute);\n        }\n    }\n    var _loop_1 = function (attribute) {\n        var _a = attribute.easing, easing = _a.cpu, loop = _a.loop;\n        var name_1 = attribute.name, size = attribute.size, update = attribute.update;\n        var easingUID = util_1.uid();\n        // We keep this in a scope above the update as we utilize the fact that the attributes will update\n        // In order for a single instance to our advantage.\n        var easingValues;\n        // Hijack the update from the attribute to a new update method which will\n        // Be able to interact with the values for the easing methodology\n        attribute.update = function (o) {\n            // We retrieve properties that we want to be dynamic from the easing equation\n            var _a = attribute.easing, delay = _a.delay, duration = _a.duration;\n            // First get the value that is to be our new destination\n            var end = update(o);\n            var currentTime = layer.surface.frameMetrics.currentTime;\n            // Get the easing values specific to an instance\n            easingValues = o.easing.get(easingUID) || {\n                duration: duration,\n                end: end,\n                start: end,\n                startTime: currentTime,\n            };\n            // Previous position time value\n            var timeValue = 1;\n            switch (loop) {\n                // Repeat means going from 0 to 1 then 0 to 1 etc etc\n                case auto_easing_method_1.AutoEasingLoopStyle.REPEAT:\n                    timeValue = ((currentTime - easingValues.startTime) / duration) % 1;\n                    break;\n                // Reflect means going from 0 to 1 then 1 to 0 then 0 to 1 etc etc\n                case auto_easing_method_1.AutoEasingLoopStyle.REFLECT:\n                    var timePassed = ((currentTime - easingValues.startTime) / duration);\n                    // This is a triangle wave for an input\n                    timeValue = abs(((timePassed / 2.0) % 1) - 0.5) * 2.0;\n                    break;\n                // No loop means just linear time\n                case auto_easing_method_1.AutoEasingLoopStyle.NONE:\n                default:\n                    timeValue = (currentTime - easingValues.startTime) / duration;\n                    break;\n            }\n            // Now get the value of where our instance currently is located this frame\n            easingValues.start = easing(easingValues.start, easingValues.end, timeValue);\n            // Set the current time as the start time of our animation\n            easingValues.startTime = currentTime + delay;\n            // Set the provided value as our destination\n            easingValues.end = end;\n            // Make sure the instance contains the current easing values\n            o.easing.set(easingUID, easingValues);\n            return end;\n        };\n        // Find a slot available for our new start value\n        var slot = findEmptyBlock(instanceAttributes, size);\n        var startAttr = {\n            block: slot[0],\n            blockIndex: slot[1],\n            name: \"_\" + name_1 + \"_start\",\n            size: size,\n            update: function (o) { return easingValues.start; },\n        };\n        instanceAttributes.push(startAttr);\n        // Find a slot available for our new start time\n        slot = findEmptyBlock(instanceAttributes, types_1.InstanceAttributeSize.ONE);\n        var startTimeAttr = {\n            block: slot[0],\n            blockIndex: slot[1],\n            name: \"_\" + name_1 + \"_start_time\",\n            size: types_1.InstanceAttributeSize.ONE,\n            update: function (o) { return [easingValues.startTime]; },\n        };\n        instanceAttributes.push(startTimeAttr);\n        // Find a slot available for our duration\n        slot = findEmptyBlock(instanceAttributes, types_1.InstanceAttributeSize.ONE);\n        var durationAttr = {\n            block: slot[0],\n            blockIndex: slot[1],\n            name: \"_\" + name_1 + \"_duration\",\n            size: types_1.InstanceAttributeSize.ONE,\n            update: function (o) { return [easingValues.duration]; },\n        };\n        instanceAttributes.push(durationAttr);\n    };\n    // Now loop through each easing attribute and generate attributes needed for the easing method\n    for (var _a = 0, easingAttributes_1 = easingAttributes; _a < easingAttributes_1.length; _a++) {\n        var attribute = easingAttributes_1[_a];\n        _loop_1(attribute);\n    }\n}\nfunction generatePickingUniforms(layer) {\n    if (layer.picking.type === types_1.PickType.SINGLE) {\n        return [{\n                name: 'pickingActive',\n                shaderInjection: types_1.ShaderInjectionTarget.ALL,\n                size: types_1.UniformSize.ONE,\n                update: function () { return [layer.picking.currentPickMode === types_1.PickType.SINGLE ? 1.0 : 0.0]; },\n            }];\n    }\n    return [];\n}\nfunction generatePickingAttributes(layer, instanceAttributes) {\n    if (layer.picking.type === types_1.PickType.SINGLE) {\n        // Find a compltely empty block within all instance attributes provided and injected\n        var emptyFillBlock = findEmptyBlock(instanceAttributes, types_1.InstanceAttributeSize.FOUR);\n        return [{\n                block: emptyFillBlock[0],\n                blockIndex: emptyFillBlock[1],\n                name: '_pickingColor',\n                size: types_1.InstanceAttributeSize.FOUR,\n                update: function (o) {\n                    // We start from white and move down so the colors are more visible\n                    // For debugging\n                    var color = 0xFFFFFF - o.uid;\n                    // Do bit maths do get float components out of the int color\n                    return [\n                        (color >> 16) / 255.0,\n                        ((color & 0x00FF00) >> 8) / 255.0,\n                        (color & 0x0000FF) / 255.0,\n                        1,\n                    ];\n                },\n            }];\n    }\n    return [];\n}\nfunction generateBaseUniforms(layer) {\n    return [\n        // This injects the projection matrix from the view camera\n        {\n            name: 'projection',\n            size: types_1.UniformSize.MATRIX4,\n            update: function () { return layer.view.viewCamera.baseCamera.projectionMatrix.elements; },\n        },\n        // This injects the model view matrix from the view camera\n        {\n            name: 'modelView',\n            size: types_1.UniformSize.MATRIX4,\n            update: function () { return layer.view.viewCamera.baseCamera.matrix.elements; },\n        },\n        // This injects the camera offset uniforms that need to be present for projecting in a more\n        // Chart centric style\n        {\n            name: 'cameraOffset',\n            size: types_1.UniformSize.THREE,\n            update: function () { return layer.view.camera.offset; },\n        },\n        // This injects the camera scaling uniforms that need to be present for projecting in a more\n        // Chart centric style\n        {\n            name: 'cameraScale',\n            size: types_1.UniformSize.THREE,\n            update: function () { return layer.view.camera.scale; },\n        },\n        // This injects the camera scaling uniforms that need to be present for projecting in a more\n        // Chart centric style\n        {\n            name: 'viewSize',\n            size: types_1.UniformSize.TWO,\n            update: function () { return [layer.view.viewBounds.width, layer.view.viewBounds.height]; },\n        },\n        // This injects the current layer's pixel ratio so pixel ratio dependent items can react to it\n        // Things like gl_PointSize will need this metric if not working in clip space\n        {\n            name: 'pixelRatio',\n            size: types_1.UniformSize.ONE,\n            update: function () { return [layer.view.pixelRatio]; },\n        },\n        // This will be the current frame's current time which is updated in the layer's surface draw call\n        {\n            name: 'currentTime',\n            size: types_1.UniformSize.ONE,\n            update: function () { return [layer.surface.frameMetrics.currentTime]; },\n        },\n    ];\n}\n/**\n * This creates the base instance attributes that are ALWAYS present\n */\nfunction generateBaseInstanceAttributes(instanceAttributes) {\n    var fillBlock = findEmptyBlock(instanceAttributes, types_1.InstanceAttributeSize.ONE);\n    return [\n        // This is injected so the system can control when an instance should not be rendered.\n        // This allows for holes to be in the buffer without having to correct them immediately\n        {\n            block: fillBlock[0],\n            blockIndex: fillBlock[1],\n            name: '_active',\n            size: types_1.InstanceAttributeSize.ONE,\n            update: function (o) { return [o.active ? 1 : 0]; },\n        },\n    ];\n}\n/**\n * This creates the base vertex attributes that are ALWAYS present\n */\nfunction generateBaseVertexAttributes() {\n    return [\n        // We add an inherent instance attribute to our vertices so they can determine the instancing\n        // Data to retrieve.\n        {\n            name: 'instance',\n            size: types_1.VertexAttributeSize.ONE,\n            // We no op this as our geomtry generating routine will establish the values needed here\n            update: function () { return [0]; },\n        },\n    ];\n}\nfunction compareVec(a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (var i = 0, end = a.length; i < end; ++i) {\n        if (Math.round(a[i] * 100) / 100 !== Math.round(b[i] * 100) / 100)\n            return false;\n    }\n    return true;\n}\nfunction validateInstanceAttributes(instanceAttributes) {\n    instanceAttributes.forEach(function (attribute) {\n        if (attribute.easing && attribute.atlas) {\n            console.warn('An instance attribute can not have both easing and atlas properties. Undefined behavior will occur.');\n            console.warn(attribute);\n        }\n        if (!attribute.atlas) {\n            if (attribute.size === undefined) {\n                console.warn('An instance attribute requires the size to be defined.');\n                console.warn(attribute);\n            }\n        }\n        if (attribute.easing) {\n            if (attribute.size !== undefined) {\n                var testStart = testStartVector[attribute.size];\n                var testEnd = testEndVector[attribute.size];\n                var test = attribute.easing.cpu(testStart, testEnd, 0);\n                if (!compareVec(test, testStart)) {\n                    console.warn('Auto Easing Validation Failed: using a time of 0 does not produce the start value');\n                    console.warn('Start:', testStart, 'End:', testEnd, 'Result:', test);\n                    console.warn(attribute);\n                }\n                test = attribute.easing.cpu(testStart, testEnd, 1);\n                if (!compareVec(test, testEnd)) {\n                    console.warn('Auto Easing Validation Failed: using a time of 1 does not produce the end value');\n                    console.warn('Start:', testStart, 'End:', testEnd, 'Result:', test);\n                    console.warn(attribute);\n                }\n                test = attribute.easing.cpu(testStart, testEnd, -1);\n                if (!compareVec(test, testStart)) {\n                    console.warn('Auto Easing Validation Failed: using a time of -1 does not produce the start value');\n                    console.warn('Start:', testStart, 'End:', testEnd, 'Result:', test);\n                    console.warn(attribute);\n                }\n                test = attribute.easing.cpu(testStart, testEnd, 2);\n                if (!compareVec(test, testEnd)) {\n                    console.warn('Auto Easing Validation Failed: using a time of 2 does not produce the end value');\n                    console.warn('Start:', testStart, 'End:', testEnd, 'Result:', test);\n                    console.warn(attribute);\n                }\n            }\n            else {\n                console.warn('An Instance Attribute with easing MUST have a size declared');\n            }\n        }\n    });\n}\n/**\n * This is the primary method that analyzes all shader IO and determines which elements needs to be automatically injected\n * into the shader.\n */\nfunction injectShaderIO(layer, shaderIO) {\n    // All of the instance attributes with nulls filtered out\n    var instanceAttributes = (shaderIO.instanceAttributes || []).filter(isInstanceAttribute);\n    // All of the vertex attributes with nulls filtered out\n    var vertexAttributes = (shaderIO.vertexAttributes || []).filter(isVertexAttribute);\n    // All of the uniforms with nulls filtered out\n    var uniforms = (shaderIO.uniforms || []).filter(isUniform);\n    // Do a validation pass of the attributes injected so we can provide feedback as to why things behave odd\n    validateInstanceAttributes(instanceAttributes);\n    // Generates all of the attributes needed to make attributes automagically be eased when changed\n    generateEasingAttributes(layer, instanceAttributes);\n    // Get the uniforms needed to facilitate atlas resource requests if any exists\n    var addedUniforms = uniforms.concat(generateAtlasResourceUniforms(layer, instanceAttributes));\n    // These are the uniforms that should be present in the shader for basic operation\n    addedUniforms = addedUniforms.concat(generateBaseUniforms(layer));\n    // Add in uniforms for picking\n    addedUniforms = addedUniforms.concat(generatePickingUniforms(layer));\n    // Create the base instance attributes that must be present\n    var addedInstanceAttributes = instanceAttributes\n        .concat(generateBaseInstanceAttributes(instanceAttributes));\n    // Add in attributes for picking\n    addedInstanceAttributes = addedInstanceAttributes.concat(generatePickingAttributes(layer, addedInstanceAttributes));\n    // Create the base vertex attributes that must be present\n    var addedVertexAttributes = generateBaseVertexAttributes();\n    // Set the active attribute to the layer for quick reference\n    layer.activeAttribute = addedInstanceAttributes[0];\n    // Aggregate all of the injected shaderIO with the layer's shaderIO\n    var allVertexAttributes = addedVertexAttributes\n        .concat(vertexAttributes || [])\n        .map(toVertexAttributeInternal);\n    var allUniforms = addedUniforms\n        .map(toUniformInternal);\n    var allInstanceAttributes = addedInstanceAttributes\n        .sort(sortNeedsUpdateFirstToTop);\n    return {\n        instanceAttributes: allInstanceAttributes,\n        uniforms: allUniforms,\n        vertexAttributes: allVertexAttributes,\n    };\n}\nexports.injectShaderIO = injectShaderIO;\nvar _a, _b;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar types_1 = require(\"../types\");\nvar UNIFORM_SIZE_TO_MATERIAL_TYPE = (_a = {},\n    _a[types_1.UniformSize.ONE] = 'f',\n    _a[types_1.UniformSize.TWO] = 'v2',\n    _a[types_1.UniformSize.THREE] = 'v3',\n    _a[types_1.UniformSize.FOUR] = 'v4',\n    _a[types_1.UniformSize.MATRIX3] = 'Matrix3fv',\n    _a[types_1.UniformSize.MATRIX4] = 'Matrix4fv',\n    _a);\nvar DEFAULT_UNIFORM_VALUE = (_b = {},\n    _b[types_1.UniformSize.ONE] = [0],\n    _b[types_1.UniformSize.TWO] = [0, 0],\n    _b[types_1.UniformSize.THREE] = [0, 0, 0],\n    _b[types_1.UniformSize.FOUR] = [0, 0, 0, 0],\n    _b[types_1.UniformSize.MATRIX3] = [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    _b[types_1.UniformSize.MATRIX4] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    _b);\nfunction toMaterialUniform(uniform) {\n    return {\n        type: UNIFORM_SIZE_TO_MATERIAL_TYPE[uniform.size],\n        value: DEFAULT_UNIFORM_VALUE[uniform.size],\n    };\n}\nfunction generateLayerMaterial(layer, vs, fs, layerUniforms, instancingUniforms) {\n    // We now need to establish the material for the layer\n    var materialParams = layer.getMaterialOptions();\n    materialParams.vertexShader = vs;\n    materialParams.fragmentShader = fs;\n    // We must convert all of the uniforms to actual Three material initialization uniforms\n    materialParams.uniforms = {};\n    // Convert our non-instancing uniforms to our material uniforms\n    for (var i = 0, end = layerUniforms.length; i < end; ++i) {\n        var uniform = layerUniforms[i];\n        var materialUniform = toMaterialUniform(uniform);\n        materialParams.uniforms[uniform.name] = materialUniform;\n    }\n    // Add in the generated instancing uniforms\n    for (var i = 0, end = instancingUniforms.length; i < end; ++i) {\n        var generatedUniform = instancingUniforms[i];\n        materialParams.uniforms[generatedUniform.name] = {\n            type: generatedUniform.type,\n            value: generatedUniform.value,\n        };\n    }\n    return new Three.RawShaderMaterial(materialParams);\n}\nexports.generateLayerMaterial = generateLayerMaterial;\nvar _a, _b;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nfunction isNumberCluster(val) {\n    return !Array.isArray(val[0]);\n}\nfunction generateLayerGeometry(maxInstancesPerBuffer, vertexAttributes, vertexCount) {\n    // Make the new buffers to be updated\n    var vertexBuffers = [];\n    for (var i = 0, end = vertexAttributes.length; i < end; ++i) {\n        var attribute_1 = vertexAttributes[i];\n        vertexBuffers.push(new Float32Array((attribute_1.size) * vertexCount * maxInstancesPerBuffer));\n    }\n    // Let's now fill in the baseline geometry with the instances we will be generating\n    // First we ask the layer for a single instance's buffer setup\n    var endk = vertexAttributes.length;\n    var buffer;\n    var attribute;\n    var value;\n    var formatError = false;\n    for (var i = 0, end = vertexCount; i < end; ++i) {\n        for (var k = 0; k < endk; ++k) {\n            attribute = vertexAttributes[k];\n            buffer = vertexBuffers[k];\n            value = attribute.update(i);\n            if (isNumberCluster(value)) {\n                for (var j = i * attribute.size, endj = j + attribute.size, index = 0; j < endj; ++j, ++index) {\n                    buffer[j] = value[index];\n                }\n            }\n            else {\n                formatError = true;\n            }\n        }\n    }\n    if (formatError) {\n        console.warn('A vertex buffer updating method should not use arrays of arrays of numbers.');\n    }\n    // After getting the geometry for a single instance, we can now copy paste\n    // For subsequent instances using very fast FLoat32 methods\n    for (var i = 0, end = vertexAttributes.length; i < end; ++i) {\n        var attribute_2 = vertexAttributes[i];\n        var instanceSize = (attribute_2.size) * vertexCount;\n        // Copy the first buffer set into the rest of the buffer\n        for (var k = 1, endk_1 = maxInstancesPerBuffer; k < endk_1; ++k) {\n            vertexBuffers[i].copyWithin(instanceSize * k, 0, instanceSize);\n        }\n    }\n    // Lastly, we make the instance attribute reflect correctly so each instance\n    // Can have varied information\n    var instancingBuffer = vertexBuffers[0];\n    for (var i = 0, end = maxInstancesPerBuffer; i < end; ++i) {\n        var instanceStartIndex = i * vertexCount;\n        for (var k = 0; k < vertexCount; ++k) {\n            instancingBuffer[k + instanceStartIndex] = i;\n        }\n    }\n    // Now we can generate the attributes and apply them to a geometry object\n    var geometry = new Three.BufferGeometry();\n    for (var i = 0, end = vertexAttributes.length; i < end; ++i) {\n        var attribute_3 = vertexAttributes[i];\n        var materialAttribute = new Three.BufferAttribute(vertexBuffers[i], attribute_3.size);\n        attribute_3.materialAttribute = materialAttribute;\n        geometry.addAttribute(attribute_3.name, materialAttribute);\n    }\n    return geometry;\n}\nexports.generateLayerGeometry = generateLayerGeometry;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\nvar DataBounds = /** @class */ (function (_super) {\n    __extends(DataBounds, _super);\n    function DataBounds() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DataBounds.emptyBounds = function () {\n        return new DataBounds({\n            height: 0,\n            width: 0,\n            x: 0,\n            y: 0,\n        });\n    };\n    return DataBounds;\n}(bounds_1.Bounds));\nexports.DataBounds = DataBounds;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar chart_camera_1 = require(\"../util/chart-camera\");\nvar view_camera_1 = require(\"../util/view-camera\");\nvar scene_1 = require(\"./scene\");\nvar view_1 = require(\"./view\");\n/**\n * This generates all of the cameras/views/scenes necessary for default viewing of elements.\n *\n * These defaults are required to ensure the following:\n *\n * - Orthographic view\n * - top left corner of the canvas is 0,0\n * - y axis is +y downward\n * - entire canvas is the viewport.\n */\nfunction generateDefaultScene(context) {\n    // Generate a default view camera that is\n    // - Orthographic\n    // - (0, 0) is the top left of the canvas\n    // - the y axis is +y going downward\n    var height = context.canvas.height;\n    var width = context.canvas.width;\n    var aspectRatio = width / height;\n    var viewport = {\n        aspectRatio: aspectRatio,\n        bottom: -height / 2,\n        far: 10000000,\n        left: -width / 2,\n        near: -100,\n        right: width / 2,\n        top: height / 2,\n        viewSize: height,\n    };\n    var defaultCamera = new view_camera_1.ViewCamera();\n    defaultCamera.baseCamera = new Three.OrthographicCamera(viewport.left, viewport.right, viewport.top, viewport.bottom, viewport.near, viewport.far);\n    defaultCamera.baseCamera.scale.set(1.0, -1.0, 1.0);\n    defaultCamera.baseCamera.position.set(0.0, 0.0, -300.0);\n    defaultCamera.baseCamera.updateMatrixWorld(true);\n    defaultCamera.baseCamera.updateMatrix();\n    if (defaultCamera.baseCamera instanceof Three.OrthographicCamera) {\n        defaultCamera.baseCamera.updateProjectionMatrix();\n    }\n    // Generate a charting camera with all scales set to 1 and no offsets in any direction\n    var defaultChartCamera = new chart_camera_1.ChartCamera();\n    // This is a viewport that covers the entire context\n    var defaultViewport = {\n        bottom: 0,\n        left: 0,\n        right: 0,\n        top: 0,\n    };\n    // Make a view using our defaults\n    var defaultView = new view_1.View({\n        camera: defaultChartCamera,\n        key: view_1.View.DEFAULT_VIEW_ID,\n        viewCamera: defaultCamera,\n        viewport: defaultViewport,\n    });\n    // Make a scene with our defaults\n    var defaultScene = new scene_1.Scene({\n        key: scene_1.Scene.DEFAULT_SCENE_ID,\n        views: [],\n    });\n    // Make sure the default view is a part of the default scene\n    defaultScene.addView(defaultView);\n    return {\n        camera: defaultChartCamera,\n        scene: defaultScene,\n        view: defaultView,\n        viewCamera: defaultCamera,\n        viewport: defaultViewport,\n    };\n}\nexports.generateDefaultScene = generateDefaultScene;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar INSTANCE_UNIFORM_ATTRIBUTE_PREFIX = 'u';\nfunction makeInstanceUniformNameArray() {\n    return \"instanceData\";\n}\nexports.makeInstanceUniformNameArray = makeInstanceUniformNameArray;\nfunction makeInstanceUniformNameTree(index) {\n    return \"\" + INSTANCE_UNIFORM_ATTRIBUTE_PREFIX + index.toString(31);\n}\nexports.makeInstanceUniformNameTree = makeInstanceUniformNameTree;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar vector_1 = require(\"./vector\");\nvar min = Math.min, max = Math.max, pow = Math.pow, round = Math.round, sin = Math.sin, PI = Math.PI;\nvar GPU_PI = round(PI * 1000) / 1000;\nfunction clamp(x, minVal, maxVal) {\n    return min(max(x, minVal), maxVal);\n}\nvar AutoEasingLoopStyle;\n(function (AutoEasingLoopStyle) {\n    /** Time will go from 0 -> 1 then stop at 1 */\n    AutoEasingLoopStyle[AutoEasingLoopStyle[\"NONE\"] = 1] = \"NONE\";\n    /** Time will continuously go 0 -> 1 then 0 -> 1 then 0 -> 1 etc etc */\n    AutoEasingLoopStyle[AutoEasingLoopStyle[\"REPEAT\"] = 2] = \"REPEAT\";\n    /** Time will continously go 0 -> 1 then 1 -> 0 then 0 -> 1 then 1 -> 0 etc etc */\n    AutoEasingLoopStyle[AutoEasingLoopStyle[\"REFLECT\"] = 3] = \"REFLECT\";\n})(AutoEasingLoopStyle = exports.AutoEasingLoopStyle || (exports.AutoEasingLoopStyle = {}));\n// GPU easing methods! Written here because it's cleaner to write `` style strings\n// Against the left side of the editor\nvar immediateGPU = \"\\n${easingMethod} {\\n  return end;\\n}\\n\";\nvar linearGPU = \"\\n${easingMethod} {\\n  return (end - start) * t + start;\\n}\\n\";\nvar easeInQuadGPU = \"\\n${easingMethod} {\\n  float time = t * t;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeOutQuadGPU = \"\\n${easingMethod} {\\n  float time = t * (2.0 - t);\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeInOutQuadGPU = \"\\n${easingMethod} {\\n  float time = t < 0.5 ? 2.0 * t * t : -1.0 + (4.0 - 2.0 * t) * t;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeInCubicGPU = \"\\n${easingMethod} {\\n  float time = t * t * t;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeOutCubicGPU = \"\\n${easingMethod} {\\n  float t1 = t - 1.0;\\n  float time = t1 * t1 * t1 + 1.0;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeInOutCubicGPU = \"\\n${easingMethod} {\\n  float time = t < 0.5 ? 4.0 * t * t * t : (t - 1.0) * (2.0 * t - 2.0) * (2.0 * t - 2.0) + 1.0;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeInQuartGPU = \"\\n${easingMethod} {\\n  float time = t * t * t * t;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeOutQuartGPU = \"\\n${easingMethod} {\\n  float t1 = t - 1.0;\\n  float time = 1.0 - t1 * t1 * t1 * t1;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeInOutQuartGPU = \"\\n${easingMethod} {\\n  float t1 = t - 1.0;\\n  float time = t < 0.5 ? 8.0 * t * t * t * t : 1.0 - 8.0 * t1 * t1 * t1 * t1;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeInQuintGPU = \"\\n${easingMethod} {\\n  float time = t * t * t * t * t;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeOutQuintGPU = \"\\n${easingMethod} {\\n  float t1 = t - 1.0;\\n  float time = 1.0 + t1 * t1 * t1 * t1 * t1;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeInOutQuintGPU = \"\\n${easingMethod} {\\n  float t1 = t - 1.0;\\n  float time = t < 0.5 ? 16.0 * t * t * t * t * t : 1.0 + 16.0 * t1 * t1 * t1 * t1 * t1;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeOutElasticGPU = \"\\n${easingMethod} {\\n  float p = 0.3;\\n  float time = pow(2.0, -10.0 * t) * sin((t - p / 4.0) * (2.0 * \" + GPU_PI + \") / p) + 1.0;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeBackInGPU = \"\\n${easingMethod} {\\n  float time = t * t * t - t * 1.05 * sin(t * \" + GPU_PI + \");\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeBackOutGPU = \"\\n${easingMethod} {\\n  float t1 = t - 1.0;\\n  float a = 1.7;\\n  float time = (t1 * t1 * ((a + 1.0) * t1 + a) + 1.0);\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeBackInOutGPU = \"\\n${easingMethod} {\\n  float a = 1.4;\\n  float a1 = a * 1.525;\\n  float t1 = t / 0.5;\\n  float t2 = t1 - 2.0;\\n  float time =\\n    (t1 < 1.0) ? 0.5 * (t1 * t1 * (a1 + 1.0) * t1 - a1) :\\n    0.5 * (t2 * t2 * ((a1 + 1.0) * t2 + a1) + 2.0)\\n  ;\\n\\n  return (end - start) * time + start;\\n}\\n\";\n/**\n * Class of base AutoEasingMethods as well as helper constructs for making the methods.\n */\nvar AutoEasingMethod = /** @class */ (function () {\n    function AutoEasingMethod(cpu, gpu, duration, method) {\n        /** Time before a delay  */\n        this.delay = 0;\n        /** The time in ms is takes to complete the animation */\n        this.duration = 500;\n        /** The looping style of the animation */\n        this.loop = AutoEasingLoopStyle.NONE;\n        this.cpu = cpu;\n        this.gpu = gpu;\n        this.duration = duration || 500;\n        this.methodName = method || 'easingMethod';\n    }\n    /**\n     * Autoeasing methods for linear easing\n     */\n    AutoEasingMethod.immediate = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) { return end; },\n            delay: delay,\n            duration: duration,\n            gpu: immediateGPU,\n            loop: loop,\n            methodName: 'immediate',\n        };\n    };\n    /**\n     * Autoeasing methods for linear easing\n     */\n    AutoEasingMethod.linear = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                t = clamp(t, 0, 1);\n                return add(scale(subtract(end, start), t), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: linearGPU,\n            loop: loop,\n            methodName: 'linear',\n        };\n    };\n    /**\n     * Auto easing for Accelerating to end\n     */\n    AutoEasingMethod.easeInQuad = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeInQuadGPU,\n            loop: loop,\n            methodName: 'easeInQuad',\n        };\n    };\n    /**\n     * Auto easing for decelerating to end\n     */\n    AutoEasingMethod.easeOutQuad = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t * (2 - t);\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeOutQuadGPU,\n            loop: loop,\n            methodName: 'easeOutQuad',\n        };\n    };\n    /**\n     * Auto easing for Accelerate to mid, then decelerate to end\n     */\n    AutoEasingMethod.easeInOutQuad = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeInOutQuadGPU,\n            loop: loop,\n            methodName: 'easeInOutQuad',\n        };\n    };\n    /**\n     * Auto easing for Slower acceleration\n     */\n    AutoEasingMethod.easeInCubic = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t * t * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeInCubicGPU,\n            loop: loop,\n            methodName: 'easeInCubic',\n        };\n    };\n    /**\n     * Auto easing for Slower deceleration\n     */\n    AutoEasingMethod.easeOutCubic = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = (--t) * t * t + 1;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeOutCubicGPU,\n            loop: loop,\n            methodName: 'easeOutCubic',\n        };\n    };\n    /**\n     * Auto easing for Slower acceleration to mid, and slower deceleration to end\n     */\n    AutoEasingMethod.easeInOutCubic = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeInOutCubicGPU,\n            loop: loop,\n            methodName: 'easeInOutCubic',\n        };\n    };\n    /**\n     * Auto easing for even Slower acceleration to end\n     */\n    AutoEasingMethod.easeInQuart = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t * t * t * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeInQuartGPU,\n            loop: loop,\n            methodName: 'easeInQuart',\n        };\n    };\n    /**\n     * Auto easing for even Slower deceleration to end\n     */\n    AutoEasingMethod.easeOutQuart = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = 1 - (--t) * t * t * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeOutQuartGPU,\n            loop: loop,\n            methodName: 'easeOutQuart',\n        };\n    };\n    /**\n     * Auto easing for even Slower acceleration to mid, and even slower deceleration to end\n     */\n    AutoEasingMethod.easeInOutQuart = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t < 0.5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeInOutQuartGPU,\n            loop: loop,\n            methodName: 'easeInOutQuart',\n        };\n    };\n    /**\n     * Auto easing for super slow accelerating to the end\n     */\n    AutoEasingMethod.easeInQuint = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t * t * t * t * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeInQuintGPU,\n            loop: loop,\n            methodName: 'easeInQuint',\n        };\n    };\n    /**\n     * Auto easing for super slow decelerating to the end\n     */\n    AutoEasingMethod.easeOutQuint = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = 1 + (--t) * t * t * t * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeOutQuintGPU,\n            loop: loop,\n            methodName: 'easeOutQuint',\n        };\n    };\n    /**\n     * Auto easing for super slow accelerating to mid and super slow decelerating to the end\n     */\n    AutoEasingMethod.easeInOutQuint = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeInOutQuintGPU,\n            loop: loop,\n            methodName: 'easeInOutQuint',\n        };\n    };\n    /**\n     * Auto easing for elastic effect\n     */\n    AutoEasingMethod.easeOutElastic = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var p = 0.3;\n                var time = pow(2, -10 * t) * sin((t - p / 4) * (2 * PI) / p) + 1;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeOutElasticGPU,\n            loop: loop,\n            methodName: 'easeOutElastic',\n        };\n    };\n    /**\n     * Auto easing for retracting first then shooting to the end\n     */\n    AutoEasingMethod.easeBackIn = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var a = 1.05;\n                var time = t * t * t - t * a * sin(t * PI);\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeBackInGPU,\n            loop: loop,\n            methodName: 'easeBackIn',\n        };\n    };\n    /**\n     * Auto easing for overshooting at the end\n     */\n    AutoEasingMethod.easeBackOut = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var a = 1.7;\n                var t1 = t - 1;\n                var time = t1 * t1 * ((a + 1) * t1 + a) + 1;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeBackOutGPU,\n            loop: loop,\n            methodName: 'easeBackOut',\n        };\n    };\n    /**\n     * Auto easing for overshooting at the end\n     */\n    AutoEasingMethod.easeBackInOut = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var a = 1.7;\n                var a1 = a * 1.525;\n                var t1 = t / 0.5;\n                var t2 = t1 - 2;\n                var time = (t1 < 1) ? 0.5 * (t1 * t1 * (a1 + 1) * t1 - a1) :\n                    0.5 * (t2 * t2 * ((a1 + 1) * t2 + a1) + 2);\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeBackInOutGPU,\n            loop: loop,\n            methodName: 'easeBackInOut',\n        };\n    };\n    return AutoEasingMethod;\n}());\nexports.AutoEasingMethod = AutoEasingMethod;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.templateVars = {\n    attributeFragments: 'attributeFragments',\n    attributes: 'attributes',\n    blocksPerInstance: 'blocksPerInstance',\n    easingMethod: 'easingMethod',\n    easingMethods: 'easingMethods',\n    instanceBlockCount: 'instanceBlockCount',\n    instanceDataBinaryTree: 'instanceDataBinaryTree',\n    instanceDataRetrieval: 'instanceDataRetrieval',\n    instanceDestructuring: 'instanceDestructuring',\n    instanceFragments: 'instanceFragments',\n    instanceUniformDeclarations: 'instanceUniformDeclarations',\n    layerUniforms: 'layerUniforms',\n    picking: 'picking',\n    projectionMethods: 'projectionMethods',\n    shader: 'shader',\n    shaderInput: 'shaderInput',\n    vertexAttributes: 'vertexAttributes',\n};\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./label-layer\"));\n__export(require(\"./label-instance\"));\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar canvas;\nvar MAX_FONT_SIZE = 50;\nvar floor = Math.floor, max = Math.max, min = Math.min;\nvar LabelRasterizer = /** @class */ (function () {\n    function LabelRasterizer() {\n    }\n    /**\n     * This loops until our canvas context is available\n     */\n    LabelRasterizer.awaitContext = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!canvas) return [3 /*break*/, 2];\n                        this.getContext();\n                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 0];\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This renders our label to a sizeable canvas where we loop over the pixel data to determine\n     * the bounds of the label.\n     *\n     * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n     *                                 the size to be rendered to the texture to the size the label\n     *                                 should be within world space.\n     * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n     */\n    LabelRasterizer.calculateLabelSize = function (resource, sampleScale, calculateTexture) {\n        // If a max width is specified, then we must render and determine the potentially truncated text of the\n        // Label. We can do a binary search for the correct truncated label size.\n        if (calculateTexture) {\n            this.calculateTrucatedText(resource);\n        }\n        /** Get the label properties for rasterizing */\n        var label = resource.label;\n        // Get the scaling of the sample base\n        var sampleScaling = sampleScale || resource.sampleScale || 1.0;\n        // Draw our label to a canvas\n        this.drawLabel(label, resource.truncatedText, canvas, sampleScaling);\n        // Measure the contents of the canvas\n        var _a = this.measureContents(canvas), minX = _a.minX, minY = _a.minY, maxX = _a.maxX, maxY = _a.maxY;\n        // Make sure the rasterization object is initialized\n        resource.rasterization = resource.rasterization || {\n            texture: { height: 0, width: 0 },\n            world: { height: 0, width: 0 },\n        };\n        // When a forced sampling is present, it calculates that as the world space\n        if (!calculateTexture) {\n            // Update the calculated texture size.\n            resource.rasterization.world = {\n                height: maxY - minY,\n                width: maxX - minX,\n            };\n        }\n        // Otherwise we first calculate the texture rasterization for the label\n        else {\n            // Update the calculated texture size.\n            resource.rasterization.texture = {\n                height: maxY - minY,\n                width: maxX - minX,\n            };\n            resource.rasterization.canvas = this.createCroppedCanvas(resource, minY, minX);\n            this.calculateLabelSize(resource, 1.0, false);\n        }\n    };\n    /**\n     * This determines what the truncated text of the label will be. If there is no truncation\n     * then the truncated text === the label's text\n     */\n    LabelRasterizer.calculateTrucatedText = function (resource) {\n        var label = resource.label;\n        var maxWidth = label.maxWidth;\n        // If the label has no max width, then there will be no truncation\n        if (!maxWidth) {\n            resource.truncatedText = label.text;\n            return;\n        }\n        // We now do an initial rendering of the label as it will appear in world space\n        this.drawLabel(label, label.text, canvas, 1);\n        // We measure the contents of the rendered item to see if it violates the maxWidth\n        var firstTest = this.measureContents(canvas);\n        // If we're within spec, we do not need to truncate\n        if (firstTest.maxX - firstTest.minX <= maxWidth) {\n            resource.truncatedText = label.text;\n            return;\n        }\n        // At this point we need to binary search through chopping off letters to find a string\n        // That will fit within max width\n        var text = label.text;\n        var left = 0;\n        var right = text.length;\n        var cursor = floor((right - left) / 2.0);\n        var safety = 0;\n        var safetyMax = 50;\n        // Loop to perform the binary search\n        while (right > left && cursor !== 0 && safety++ < safetyMax) {\n            // Draw and measure\n            this.drawLabel(label, text.substr(0, cursor) + \"...\", canvas, 1);\n            var _a = this.measureContents(canvas), minX = _a.minX, maxX = _a.maxX;\n            // If we pass then we move left to cursor to make the test string longer\n            if (maxX - minX <= maxWidth) {\n                left = cursor;\n            }\n            // If we fail, we move right to cursor to make the test string shorter\n            else {\n                right = cursor;\n            }\n            // Get our next cursor position\n            var nextCursor = floor((right - left) / 2.0) + left;\n            // If the next cursor is the same as cursor, then we're done searching\n            if (nextCursor === cursor) {\n                break;\n            }\n            // Move our cursor\n            cursor = nextCursor;\n        }\n        // If cursor is zero, nothing passed and our truncation is just ellipses\n        if (cursor === 0) {\n            resource.truncatedText = '...';\n        }\n        // Otherwise we get the string that passes and use that as our truncated text\n        else {\n            resource.truncatedText = text.substr(0, cursor) + \"...\";\n        }\n    };\n    /**\n     * This generates a canvas that has the cropped version of the label where the label\n     * fits neatly in the canvas object.\n     */\n    LabelRasterizer.createCroppedCanvas = function (resource, top, left) {\n        var cropped = document.createElement('canvas');\n        var context = cropped.getContext('2d');\n        if (context) {\n            var texture = resource.rasterization.texture;\n            cropped.width = texture.width;\n            cropped.height = texture.height;\n            context.imageSmoothingEnabled = false;\n            // Draw just the region the label appears into the canvas\n            context.drawImage(canvas.canvas, left, top, texture.width, texture.height, 0, 0, texture.width, texture.height);\n        }\n        else {\n            console.warn('Could not create a canvas 2d context to generate a label\\'s cropped image.');\n        }\n        return cropped;\n    };\n    /**\n     * This actually renders a string to a canvas context using a label's settings\n     */\n    LabelRasterizer.drawLabel = function (label, text, canvas, sampleScaling) {\n        // Get the font size we will rasterize with\n        var fontSize = this.getLabelRasterizationFontSize(label, sampleScaling);\n        // Set the color of the label to white so we know what color to look for\n        canvas.fillStyle = 'white';\n        // Set the font to the canvas\n        canvas.font = this.makeCSSFont(label, sampleScaling);\n        // We will use the canvas measuring tool to give us a baseline for how wide\n        // The label will be. We add the font size to the width for the padding needed to ensure\n        // The entirety of the text is placed on the canvas.\n        canvas.canvas.width = canvas.measureText(label.text).width + fontSize;\n        // Make our test area the font size with one extra level of the font size\n        // For padding.\n        canvas.canvas.height = fontSize * 2.0;\n        // After adjusting the canvas dimensions we must re-set the font metrics\n        // Set the color of the label to white so we know what color to look for\n        canvas.fillStyle = 'white';\n        // Set the font to the canvas\n        canvas.font = this.makeCSSFont(label, sampleScaling);\n        // Render the text into our canvas for calculating\n        canvas.fillText(text, fontSize / 2.0, fontSize / 4.0 + fontSize);\n    };\n    /**\n     * Attempts to populate the 'canvas' context for rendering labels offscreen.\n     */\n    LabelRasterizer.getContext = function () {\n        if (!canvas) {\n            var potentialCanvas = document.createElement('canvas').getContext('2d');\n            if (potentialCanvas) {\n                canvas = potentialCanvas;\n            }\n            return potentialCanvas;\n        }\n        return canvas;\n    };\n    /**\n     * This retrieves the font size that will be used when rasterizing the label. This takes into\n     * account whether the label is requesting super sampling be present for the rendering.\n     */\n    LabelRasterizer.getLabelRasterizationFontSize = function (label, sampleScale) {\n        return label.fontSize * sampleScale;\n    };\n    /**\n     * Generates the CSS font string based on the label's values\n     */\n    LabelRasterizer.makeCSSFont = function (label, sampleScale) {\n        return label.fontWeight + \" \" + this.getLabelRasterizationFontSize(label, sampleScale) + \"px \" + label.fontFamily;\n    };\n    /**\n     * This measures the contents of what is inside the canvas assumming the rendered values are only white\n     */\n    LabelRasterizer.measureContents = function (canvas) {\n        var _a = canvas.canvas, width = _a.width, height = _a.height;\n        var imageData = canvas.getImageData(0, 0, width, height).data;\n        var r;\n        var minY = Number.MAX_SAFE_INTEGER;\n        var minX = Number.MAX_SAFE_INTEGER;\n        var maxX = Number.MIN_SAFE_INTEGER;\n        var maxY = Number.MIN_SAFE_INTEGER;\n        for (var i = 0; i < width; ++i) {\n            for (var k = 0; k < height; ++k) {\n                var redIndex = k * (width * 4) + i * 4;\n                r = imageData[redIndex];\n                if (r > 0.0) {\n                    minY = min(minY, k);\n                    minX = min(minX, i);\n                    maxX = max(maxX, i);\n                    maxY = max(maxY, k);\n                }\n            }\n        }\n        // The identified pixel needs to be encased and not a direct target\n        minY -= 1;\n        maxY += 2;\n        maxX += 2;\n        minX -= 1;\n        minY = max(minY, 0);\n        minX = max(minX, 0);\n        return { minX: minX, minY: minY, maxX: maxX, maxY: maxY };\n    };\n    /**\n     * Performs the rendering of the label\n     */\n    LabelRasterizer.render = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // Make sure our canvas object is ready for rendering\n                    return [4 /*yield*/, this.awaitContext()];\n                    case 1:\n                        // Make sure our canvas object is ready for rendering\n                        _a.sent();\n                        // Validate the label's input\n                        if (resource.label.fontSize > MAX_FONT_SIZE) {\n                            console.warn('Labels only support font sizes up to 50');\n                            return [2 /*return*/, resource];\n                        }\n                        // Calculate all of the label metrics and generate a canvas on the label that can\n                        // Be rendered to the canvas.\n                        this.calculateLabelSize(resource, resource.sampleScale, true);\n                        return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    /**\n     * Performs the rendering of the label\n     */\n    LabelRasterizer.renderSync = function (resource) {\n        // Ensure our offscreen canvas is prepped\n        this.getContext();\n        if (!canvas) {\n            console.warn('Can not render a label synchronously without the canvas context being ready.');\n            return resource;\n        }\n        // Validate the label's input\n        if (resource.label.fontSize > MAX_FONT_SIZE) {\n            console.warn('Labels only support font sizes up to 50');\n            return resource;\n        }\n        // Calculate all of the label metrics and generate a canvas on the label that can\n        // Be rendered to the canvas.\n        this.calculateLabelSize(resource, resource.sampleScale, true);\n        return resource;\n    };\n    return LabelRasterizer;\n}());\nexports.LabelRasterizer = LabelRasterizer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_atlas_resource_1 = require(\"./base-atlas-resource\");\nvar ImageAtlasResource = /** @class */ (function (_super) {\n    __extends(ImageAtlasResource, _super);\n    function ImageAtlasResource(image) {\n        var _this = _super.call(this) || this;\n        _this.image = image;\n        return _this;\n    }\n    return ImageAtlasResource;\n}(base_atlas_resource_1.BaseAtlasResource));\nexports.ImageAtlasResource = ImageAtlasResource;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// When ratserized to the image, this determines the size of the square rendered to the atlas.\nvar COLOR_RASTERIZATION_SIZE = 2;\n/**\n * Static class for rasterizing a color to a canvas object\n */\nvar ColorRasterizer = /** @class */ (function () {\n    function ColorRasterizer() {\n    }\n    /**\n     * This loops until our canvas context is available\n     */\n    ColorRasterizer.awaitContext = function (canvas) {\n        return __awaiter(this, void 0, void 0, function () {\n            var c, limit;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        c = canvas.getContext('2d'), limit = 0;\n                        _a.label = 1;\n                    case 1:\n                        if (!(!Boolean(c) && limit < 100)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        c = canvas.getContext('2d'), ++limit;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Generates the CSS string version of the color\n     */\n    ColorRasterizer.makeCSS = function (color) {\n        return \"rgba(\" + Math.floor(color.r * 256) + \", \" + Math.floor(color.g * 256) + \", \" + Math.floor(color.b * 256) + \", \" + color.opacity + \")\";\n    };\n    ColorRasterizer.render = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var canvas, context;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        canvas = document.createElement('canvas');\n                        context = canvas.getContext('2d');\n                        return [4 /*yield*/, this.awaitContext(canvas)];\n                    case 1:\n                        _a.sent();\n                        if (context) {\n                            canvas.width = COLOR_RASTERIZATION_SIZE;\n                            canvas.height = COLOR_RASTERIZATION_SIZE;\n                            context.imageSmoothingEnabled = false;\n                            context.fillStyle = this.makeCSS(resource.color);\n                            // Draw the color to the fill space\n                            context.fillRect(0, 0, COLOR_RASTERIZATION_SIZE, COLOR_RASTERIZATION_SIZE);\n                            // Update the resource with the rasterization\n                            resource.rasterization.canvas = canvas;\n                        }\n                        else {\n                            console.warn('Could not create a canvas 2d context to generate a color for rasterization.');\n                        }\n                        return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    return ColorRasterizer;\n}());\nexports.ColorRasterizer = ColorRasterizer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_atlas_resource_1 = require(\"./base-atlas-resource\");\nvar ColorAtlasResource = /** @class */ (function (_super) {\n    __extends(ColorAtlasResource, _super);\n    function ColorAtlasResource(color) {\n        var _this = _super.call(this) || this;\n        _this.color = color;\n        return _this;\n    }\n    return ColorAtlasResource;\n}(base_atlas_resource_1.BaseAtlasResource));\nexports.ColorAtlasResource = ColorAtlasResource;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Defines a texture that is located on an atlas\n */\nvar SubTexture = /** @class */ (function () {\n    function SubTexture() {\n        /** Stores the aspect ratio of the image for quick reference */\n        this.aspectRatio = 1.0;\n        /** The id of the atlas this texture is located on */\n        this.atlasReferenceID = '';\n        /** This is the actual texture of the atlas this resource is located on */\n        this.atlasTexture = null;\n        /** This is the top left UV coordinate of the sub texture on the atlas */\n        this.atlasTL = { x: 0, y: 0 };\n        /** This is the top right UV coordinate of the sub texture on the atlas */\n        this.atlasTR = { x: 0, y: 0 };\n        /** This is the bottom left UV coordinate of the sub texture on the atlas */\n        this.atlasBL = { x: 0, y: 0 };\n        /** This is the bottom right UV coordinate of the sub texture on the atlas */\n        this.atlasBR = { x: 0, y: 0 };\n        /** This is the normalized width of the sub texture on the atlas */\n        this.widthOnAtlas = 0;\n        /** This is the normalized height of the sub texture on the atlas */\n        this.heightOnAtlas = 0;\n        /** This flag is set to false when the underlying texture is no longer valid */\n        this.isValid = false;\n        /** Width in pixels of the image on the atlas */\n        this.pixelWidth = 0;\n        /** Height in pixels of the image on the atlas */\n        this.pixelHeight = 0;\n    }\n    return SubTexture;\n}());\nexports.SubTexture = SubTexture;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar identify_by_key_1 = require(\"../../util/identify-by-key\");\nvar pack_node_1 = require(\"./pack-node\");\nvar sub_texture_1 = require(\"./sub-texture\");\n/**\n * These are valid atlas sizes available. We force a power of 2 to be utilized.\n * We do not allow crazy large sizes as browsers have very real caps on resources.\n * This helps implementations be a little smarter about what they are using. Future\n * versions may increase this number as GPUs improve and standards allow greater\n * flexibility.\n */\nvar AtlasSize;\n(function (AtlasSize) {\n    AtlasSize[AtlasSize[\"_2\"] = 2] = \"_2\";\n    AtlasSize[AtlasSize[\"_4\"] = 4] = \"_4\";\n    AtlasSize[AtlasSize[\"_8\"] = 8] = \"_8\";\n    AtlasSize[AtlasSize[\"_16\"] = 16] = \"_16\";\n    AtlasSize[AtlasSize[\"_32\"] = 32] = \"_32\";\n    AtlasSize[AtlasSize[\"_64\"] = 64] = \"_64\";\n    AtlasSize[AtlasSize[\"_128\"] = 128] = \"_128\";\n    AtlasSize[AtlasSize[\"_256\"] = 256] = \"_256\";\n    AtlasSize[AtlasSize[\"_512\"] = 512] = \"_512\";\n    AtlasSize[AtlasSize[\"_1024\"] = 1024] = \"_1024\";\n    AtlasSize[AtlasSize[\"_2048\"] = 2048] = \"_2048\";\n    AtlasSize[AtlasSize[\"_4096\"] = 4096] = \"_4096\";\n})(AtlasSize = exports.AtlasSize || (exports.AtlasSize = {}));\n/**\n * This represents a single Texture on the gpu that is composed of several smaller textures\n * as a 'look up'.\n */\nvar Atlas = /** @class */ (function (_super) {\n    __extends(Atlas, _super);\n    function Atlas(options) {\n        var _this = _super.call(this, options) || this;\n        /**\n         * This is all of the resources associated with this atlas. The boolean flag indicates if the resource\n         * is flagged for removal. When set to false, the resource is no longer valid and can be removed from\n         * the atlas at any given moment.\n         */\n        _this.validResources = new Map();\n        var canvas = document.createElement('canvas');\n        _this.width = canvas.width = options.width;\n        _this.height = canvas.height = options.height;\n        _this.textureSettings = options.textureSettings;\n        // Set up the packing for this atlas\n        _this.packing = new pack_node_1.PackNode(0, 0, options.width, options.height);\n        // Make sure the texture is started and updated\n        _this.updateTexture(canvas);\n        return _this;\n    }\n    /**\n     * This invalidates the SubTexture of an atlas resource.\n     */\n    Atlas.prototype.invalidateResource = function (resource) {\n        var zero = { x: 0, y: 0 };\n        resource.texture.aspectRatio = 1;\n        resource.texture.atlasBL = zero;\n        resource.texture.atlasBR = zero;\n        resource.texture.atlasTL = zero;\n        resource.texture.atlasTR = zero;\n        resource.texture.atlasReferenceID = '';\n        resource.texture.pixelWidth = 0;\n        resource.texture.pixelHeight = 0;\n        resource.texture.isValid = false;\n    };\n    /**\n     * Sets the parent manager of this atlas\n     */\n    Atlas.prototype.setManager = function (manager) {\n        this.manager = manager;\n    };\n    /**\n     * Adds a resource to this atlas AND ensures the resource is flagged valid for use.\n     *\n     * @return {boolean} True if the resource successfully registered\n     */\n    Atlas.prototype.registerResource = function (resource) {\n        if (this.validResources.get(resource) === undefined) {\n            if (!resource.texture || !resource.texture.isValid) {\n                if (!resource.texture) {\n                    resource.texture = new sub_texture_1.SubTexture();\n                }\n                resource.texture.isValid = true;\n                this.validResources.set(resource, true);\n                return true;\n            }\n            else {\n                console.warn('Atlas Error:', this.id, 'Attempted to add a resource to an Atlas that is already a valid resource on another atlas.', 'Consider Creating a new resource to be loaded into this particular atlas.', 'Resource:', resource);\n            }\n        }\n        else {\n            console.warn('Atlas Error:', this.id, 'A resource was trying to be added to the atlas that has already been added before.', 'Consider creating a new resource to indicate what you want loaded to the atlas', 'Resource:', resource);\n        }\n        return false;\n    };\n    /**\n     * This flags a resource from removal from an atlas.\n     *\n     * NOTE: This does not immediately clear the resource fromt he atlas, nor does it even guarantee\n     * the resource will be cleared from the atlas for a while. It merely suggests the resource be removed\n     * and makes the SubTexture invalid. It could be a long while before the atlas gets regnerated and repacked\n     * to actually reflect the resource not existing on the atlas.\n     */\n    Atlas.prototype.removeResource = function (resource) {\n        if (this.validResources.get(resource)) {\n            this.validResources.set(resource, false);\n            this.invalidateResource(resource);\n        }\n        else {\n            console.warn('Atlas Error:', this.id, 'Attempted to remove a resource that does not exist on this atlas.', 'or the resource was already considered invalidated on this atlas.', 'Resource:', resource);\n        }\n    };\n    /**\n     * TODO:\n     * This performs the currently best known way to update a texture.\n     *\n     * This is the current best attempt at updating the atlas which is junk as it destroys the old texture\n     * And makes a new one. We REALLY should be just subTexture2D updating the texture, but Three makes that really\n     * Difficult\n     */\n    Atlas.prototype.updateTexture = function (canvas) {\n        if (this.texture) {\n            var redoneCanvas = this.texture.image;\n            this.texture.dispose();\n            this.texture = new Three.Texture(redoneCanvas);\n        }\n        else {\n            this.texture = new Three.Texture(canvas);\n        }\n        // Apply any relevant options to the texture desired to be set\n        this.texture.generateMipmaps = true;\n        this.texture.premultiplyAlpha = true;\n        this.textureSettings && Object.assign(this.texture, this.textureSettings);\n        this.texture.needsUpdate = true;\n    };\n    /**\n     * This frees up all the resources down to the GPU related to this atlas. It also\n     * loops through every resource and invalidates the texturing information within\n     * them so subsequent accidental renders will appear as a single color rather than\n     * an artifacted element.\n     */\n    Atlas.prototype.destroy = function () {\n        var _this = this;\n        this.texture.dispose();\n        this.validResources.forEach(function (isValid, resource) {\n            _this.invalidateResource(resource);\n        });\n    };\n    return Atlas;\n}(identify_by_key_1.IdentifyByKey));\nexports.Atlas = Atlas;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./image-layer\"));\n__export(require(\"./image-instance\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getProgramInfo(gl, program) {\n    var result = {\n        attributeCount: 0,\n        attributes: new Array(),\n        uniformCount: 0,\n        uniforms: new Array(),\n    }, activeUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS), activeAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    // Taken from the WebGl spec:\n    // Http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14\n    var enums = {\n        0x8B50: 'FLOAT_VEC2',\n        0x8B51: 'FLOAT_VEC3',\n        0x8B52: 'FLOAT_VEC4',\n        0x8B53: 'INT_VEC2',\n        0x8B54: 'INT_VEC3',\n        0x8B55: 'INT_VEC4',\n        0x8B56: 'BOOL',\n        0x8B57: 'BOOL_VEC2',\n        0x8B58: 'BOOL_VEC3',\n        0x8B59: 'BOOL_VEC4',\n        0x8B5A: 'FLOAT_MAT2',\n        0x8B5B: 'FLOAT_MAT3',\n        0x8B5C: 'FLOAT_MAT4',\n        0x8B5E: 'SAMPLER_2D',\n        0x8B60: 'SAMPLER_CUBE',\n        0x1400: 'BYTE',\n        0x1401: 'UNSIGNED_BYTE',\n        0x1402: 'SHORT',\n        0x1403: 'UNSIGNED_SHORT',\n        0x1404: 'INT',\n        0x1405: 'UNSIGNED_INT',\n        0x1406: 'FLOAT',\n    };\n    var blocks = {\n        0x8B50: 1,\n        0x8B51: 1,\n        0x8B52: 1,\n        0x8B53: 1,\n        0x8B54: 1,\n        0x8B55: 1,\n        0x8B56: 1,\n        0x8B57: 1,\n        0x8B58: 1,\n        0x8B59: 1,\n        0x8B5A: 1,\n        0x8B5B: 3,\n        0x8B5C: 4,\n        0x8B5E: 1,\n        0x8B60: 1,\n        0x1400: 1,\n        0x1401: 1,\n        0x1402: 1,\n        0x1403: 1,\n        0x1404: 1,\n        0x1405: 1,\n        0x1406: 1,\n    };\n    // Loop through active uniforms\n    for (var i = 0; i < activeUniforms; ++i) {\n        var uniform = gl.getActiveUniform(program, i);\n        uniform.typeName = enums[uniform.type];\n        result.uniforms.push(uniform);\n        result.uniformCount += uniform.size;\n        uniform.size = uniform.size * blocks[uniform.type];\n    }\n    // Loop through active attributes\n    for (var i = 0; i < activeAttributes; i++) {\n        var attribute = gl.getActiveAttrib(program, i);\n        attribute.typeName = enums[attribute.type];\n        result.attributes.push(attribute);\n        result.attributeCount += attribute.size;\n    }\n    return result;\n}\nexports.getProgramInfo = getProgramInfo;\nvar WebGLStat = /** @class */ (function () {\n    function WebGLStat() {\n    }\n    WebGLStat.MAX_VERTEX_UNIFORMS = 0;\n    WebGLStat.MAX_FRAGMENT_UNIFORMS = 0;\n    WebGLStat.MAX_ATTRIBUTES = 0;\n    WebGLStat.WEBGL_SUPPORTED = false;\n    WebGLStat.MAX_TEXTURE_SIZE = 0;\n    return WebGLStat;\n}());\nexports.WebGLStat = WebGLStat;\nfunction initStats() {\n    // Let's perform some immediate operations to do some gl querying for useful information\n    function getAContext() {\n        try {\n            var canvas = document.createElement('canvas');\n            return window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    // Attempt to retrieve a context for webgl\n    var gl = getAContext();\n    // If the context exists, then we know gl is supported and we can fill in some metrics\n    if (gl) {\n        WebGLStat.WEBGL_SUPPORTED = true;\n        WebGLStat.MAX_VERTEX_UNIFORMS = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n        WebGLStat.MAX_FRAGMENT_UNIFORMS = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n        WebGLStat.MAX_ATTRIBUTES = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n        WebGLStat.MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    }\n}\ninitStats();\n","/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',\n  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',\n  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',\n  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',\n  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',\n  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',\n  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',\n  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',\n  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',\n  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',\n  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // Internet Explorer and Edge do not support colors.\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n    return false;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar browser = require(\"bowser\");\nvar three_1 = require(\"three\");\nvar debug = require('debug')('CommunicationsView:Mouse');\n/** Used to adjust the base whee delta for IE browsers */\nvar IE_ADJUSTMENT = 1 / 30;\n/** Used to adjust the rates for IE 11 */\nvar OLD_IE_ADJUSTMENT = -0.25;\n// This determines how large the delta can grow to in firefox\nvar MAX_FIREFOX_WHEELDELTA = 100;\n/**\n * Create a low pass filter memory bank so we can slow down rapid accelerations and let normal slower accelerations pass\n * Common use case for this is the discrepancy in firefox from mousewheels to trackpad scroll speeds\n */\nvar lowPassY = [0, 0, 0, 0];\n// These coefficients represent the coefficients of a FIR filter.\n// This FIR filter uses the lowPassY as the memory for the filter and is created for\n// The reasons specified for the lowPassY memory. To edit the coefficients, you simply\n// Ensure the coefficients added together === 1.0. If they do not, you may get an unstable\n// Result that goes to infinity rather quickly. Changing the distribution of these coefficients\n// Alters the rate at which the delta can approach MAX_FIREFOX_WHEELDELTA. Explaining exactly\n// How it affects the rate requires an understanding of FIR filters, so unless this is already\n// Known knowledge, it would be faster to just tweak the coefficients until a desired effect is\n// Attained.\nvar LOW_PASS_U0 = 0.02;\nvar LOW_PASS_U1 = 0.1;\nvar LOW_PASS_U2 = 0.18;\nvar LOW_PASS_U3 = 0.7;\nfunction normalizeFirefoxWheel(e) {\n    var wheel = e;\n    var deltaX = 0;\n    var deltaY = 0;\n    // Reset the filter if the direction changes to prevent lag in directional change\n    if (Math.sign(lowPassY[0]) !== Math.sign(deltaY)) {\n        lowPassY.splice(0, lowPassY.length, 0, 0, 0, 0);\n    }\n    deltaX = wheel.deltaX * MAX_FIREFOX_WHEELDELTA;\n    // Calculate the next value output from the FIR filter\n    deltaY = (wheel.deltaY * MAX_FIREFOX_WHEELDELTA) * LOW_PASS_U0 + lowPassY[0] * LOW_PASS_U1 + lowPassY[1] * LOW_PASS_U2 + lowPassY[2] * LOW_PASS_U3;\n    // Store the value of the filter in the FIR memory bank\n    lowPassY.unshift(deltaY);\n    // Keep our FIR memory clean and only the size of the number of coefficients\n    lowPassY.pop();\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeChromeWheel(e) {\n    var wheel = e;\n    return new three_1.Vector2(wheel.deltaX, -wheel.deltaY);\n}\nfunction normalizeIE11Wheel(e) {\n    var wheel = e;\n    var deltaX = wheel.deltaX;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    var deltaY = wheel.deltaY;\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = (wheel.wheelDelta || -wheel.detail) * OLD_IE_ADJUSTMENT;\n        }\n    }\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeIE12Wheel(e) {\n    var wheel = e;\n    var deltaX = wheel.deltaX, deltaY = wheel.deltaY;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = wheel.wheelDelta || -wheel.detail;\n        }\n    }\n    var v = new three_1.Vector2(deltaX, -deltaY);\n    v.multiplyScalar(0.25);\n    return v;\n}\n// Determine this browsers version of wheel normalization and apply it\nvar normalizeWheel;\nexports.normalizeWheel = normalizeWheel;\nif (browser.firefox) {\n    debug('Using mouse wheel for firefox');\n    exports.normalizeWheel = normalizeWheel = normalizeFirefoxWheel;\n}\nelse if (browser.msie && +browser.version >= 11) {\n    debug('Using mouse wheel for IE 11');\n    exports.normalizeWheel = normalizeWheel = normalizeIE11Wheel;\n}\nelse if (browser.msedge) {\n    debug('Using mouse wheel for MS EDGE');\n    exports.normalizeWheel = normalizeWheel = normalizeIE12Wheel;\n}\nelse {\n    debug('Using mouse wheel for Chrome');\n    exports.normalizeWheel = normalizeWheel = normalizeChromeWheel;\n}\n/**\n * Analyzes a MouseEvent and calculates the mouse coordinates (relative to the element).\n */\nfunction eventElementPosition(e, relative) {\n    var mouseX = 0, mouseY = 0, eventX = 0, eventY = 0, object = relative || (e.nativeEvent && e.nativeEvent.target) || e.target;\n    // Get mouse position on document crossbrowser\n    if (!e) {\n        e = window.event;\n    }\n    if (e.pageX || e.pageY) {\n        mouseX = e.pageX;\n        mouseY = e.pageY;\n    }\n    else if (e.clientX || e.clientY) {\n        mouseX = e.clientX + document.body.scrollLeft\n            + document.documentElement.scrollLeft;\n        mouseY = e.clientY + document.body.scrollTop\n            + document.documentElement.scrollTop;\n    }\n    // Get parent element position in document\n    if (object.offsetParent) {\n        do {\n            eventX += object.offsetLeft;\n            eventY += object.offsetTop;\n            object = object.offsetParent;\n        } while (object);\n    }\n    // Mouse position minus elm position is mouseposition relative to element:\n    return { x: mouseX - eventX, y: mouseY - eventY };\n}\nexports.eventElementPosition = eventElementPosition;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ObservableManagerMode;\n(function (ObservableManagerMode) {\n    ObservableManagerMode[ObservableManagerMode[\"GATHER_OBSERVABLES\"] = 0] = \"GATHER_OBSERVABLES\";\n    ObservableManagerMode[ObservableManagerMode[\"BROADCAST\"] = 1] = \"BROADCAST\";\n})(ObservableManagerMode = exports.ObservableManagerMode || (exports.ObservableManagerMode = {}));\nvar ObservableManager = /** @class */ (function () {\n    function ObservableManager() {\n    }\n    ObservableManager.mode = ObservableManagerMode.BROADCAST;\n    return ObservableManager;\n}());\nexports.ObservableManager = ObservableManager;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar label_atlas_resource_1 = require(\"./label-atlas-resource\");\nfunction toInstanceIOValue(texture) {\n    // If the texture is not defined we just output an empty reference\n    if (!texture) {\n        return [0, 0, 0, 0];\n    }\n    // Otherwise, we return the atlas information of the texture\n    return [\n        texture.atlasTL.x,\n        texture.atlasTL.y,\n        texture.atlasBR.x,\n        texture.atlasBR.y,\n    ];\n}\n/**\n * This class is responsible for tracking resources requested to be placed on an Atlas.\n * This makes sure the resource is uploaded and then properly cached so similar requests\n * return already existing resources. This also manages instances waiting for the resource\n * to be made available.\n */\nvar AtlasResourceManager = /** @class */ (function () {\n    function AtlasResourceManager(options) {\n        /** This is the atlas currently targetted by requests */\n        this.targetAtlas = '';\n        /** This stores all of the requests awaiting dequeueing */\n        this.requestQueue = new Map();\n        /**\n         * This tracks if a resource is already in the request queue. This also stores ALL instances awaiting the resource.\n         */\n        this.requestLookup = new Map();\n        this.atlasManager = options.atlasManager;\n    }\n    /**\n     * This dequeues all instance requests for a resource and processes the request which will\n     * inevitably make the instance active\n     */\n    AtlasResourceManager.prototype.dequeueRequests = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var didDequeue, _loop_1, this_1, _i, _a, _b, targetAtlas, resources;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        didDequeue = false;\n                        _loop_1 = function (targetAtlas, resources) {\n                            var requests, atlasRequests_1;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        if (!(resources.length > 0)) return [3 /*break*/, 2];\n                                        // We did dequeue\n                                        didDequeue = true;\n                                        requests = resources.slice(0);\n                                        // Empty the queue to begin taking in new requests as needed\n                                        resources.length = 0;\n                                        // Tell the atlas manager to update with all of the requested resources\n                                        return [4 /*yield*/, this_1.atlasManager.updateAtlas(targetAtlas, requests)];\n                                    case 1:\n                                        // Tell the atlas manager to update with all of the requested resources\n                                        _a.sent();\n                                        atlasRequests_1 = this_1.requestLookup.get(targetAtlas);\n                                        if (atlasRequests_1) {\n                                            // Once the manager has been updated, we can now flag all of the instances waiting for the resources\n                                            // As active, which should thus trigger an update to the layers to perform a diff for each instance\n                                            requests.forEach(function (resource) {\n                                                var request = atlasRequests_1.get(resource);\n                                                atlasRequests_1.delete(resource);\n                                                if (request) {\n                                                    for (var _i = 0, request_1 = request; _i < request_1.length; _i++) {\n                                                        var _a = request_1[_i], layer = _a[0], instance = _a[1];\n                                                        // If the instance is still associated with a cluster, then the instance can be activated. Having\n                                                        // A cluster is indicative the instance has not been deleted.\n                                                        if (layer.uniformManager.getUniforms(instance)) {\n                                                            instance.active = true;\n                                                        }\n                                                    }\n                                                }\n                                            });\n                                        }\n                                        _a.label = 2;\n                                    case 2: return [2 /*return*/];\n                                }\n                            });\n                        };\n                        this_1 = this;\n                        _i = 0, _a = Array.from(this.requestQueue.entries());\n                        _c.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3 /*break*/, 4];\n                        _b = _a[_i], targetAtlas = _b[0], resources = _b[1];\n                        return [5 /*yield**/, _loop_1(targetAtlas, resources)];\n                    case 2:\n                        _c.sent();\n                        _c.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/, didDequeue];\n                }\n            });\n        });\n    };\n    /**\n     * Free ALL resources managed under this resource manager\n     */\n    AtlasResourceManager.prototype.destroy = function () {\n        this.atlasManager.destroy();\n    };\n    /**\n     * This retrieves the actual atlas texture that should be applied to a uniform's\n     * value.\n     */\n    AtlasResourceManager.prototype.getAtlasTexture = function (key) {\n        var atlas = this.atlasManager.getAtlasTexture(key);\n        if (atlas) {\n            return atlas.texture;\n        }\n        return null;\n    };\n    /**\n     * This is a request for atlas texture resources. It will produce either the coordinates needed to\n     * make valid texture lookups, or it will trigger a loading of resources to an atlas and cause an\n     * automated deactivation and reactivation of the instance.\n     */\n    AtlasResourceManager.prototype.request = function (layer, instance, resource) {\n        var texture = resource.texture;\n        // If the texture is ready and available, then we simply return the IO values\n        if (texture) {\n            return toInstanceIOValue(texture);\n        }\n        if (resource instanceof label_atlas_resource_1.LabelAtlasResource) {\n            if (!resource.label.text) {\n                return toInstanceIOValue(texture);\n            }\n        }\n        // If a request is already made, then we must save the instance making the request for deactivation and\n        // Reactivation but without any additional atlas loading\n        var atlasRequests = this.requestLookup.get(this.targetAtlas);\n        if (atlasRequests) {\n            var existingRequests = atlasRequests.get(resource);\n            if (existingRequests) {\n                existingRequests.push([layer, instance]);\n                instance.active = false;\n                return toInstanceIOValue(texture);\n            }\n        }\n        else {\n            atlasRequests = new Map();\n            this.requestLookup.set(this.targetAtlas, atlasRequests);\n        }\n        // If the texture is not available, then we must load the resource, deactivate the instance\n        // And wait for the resource to become available. Once the resource is available, the system\n        // Must activate the instance to render the resource.\n        instance.active = false;\n        var requests = this.requestQueue.get(this.targetAtlas);\n        if (!requests) {\n            requests = [];\n            this.requestQueue.set(this.targetAtlas, requests);\n        }\n        requests.push(resource);\n        atlasRequests.set(resource, [[layer, instance]]);\n        // This returns essentially returns blank values for the resource lookup\n        return toInstanceIOValue(texture);\n    };\n    /**\n     * This is used by the system to target the correct atlas for subsequent requests to a resource.\n     */\n    AtlasResourceManager.prototype.setTargetAtlas = function (target) {\n        this.targetAtlas = target;\n    };\n    return AtlasResourceManager;\n}());\nexports.AtlasResourceManager = AtlasResourceManager;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../../types\");\nvar event_manager_1 = require(\"../event-manager\");\nfunction isDefined(val) {\n    return Boolean(val);\n}\n/**\n * This class is an injected event manager for the surface, it specifically handles taking in mouse events intended for view interactions\n * and broadcasts them to the layers that have picking enabled, thus allowing the layers to respond to\n * mouse view locations and broadcast Instance interactions based on the interaction with the View the layer is a part of\n *\n * In Summary: This is an adapter that takes in interactions to the views and injects those events into the layers associated with\n * the views so that the layers can translate the events to gestures.\n */\nvar LayerMouseEvents = /** @class */ (function (_super) {\n    __extends(LayerMouseEvents, _super);\n    function LayerMouseEvents(surface) {\n        var _this = _super.call(this) || this;\n        /** This tracks which views have the mouse over them so we can properly broadcast view is out events */\n        _this.isOver = new Map();\n        _this.surface = surface;\n        _this.sceneViews = surface.sceneViews;\n        return _this;\n    }\n    LayerMouseEvents.prototype.getSceneViewsUnderMouse = function (e) {\n        var sceneViewByViewId = new Map();\n        // Map the scene views by the view's identifiers\n        for (var _i = 0, _a = this.sceneViews; _i < _a.length; _i++) {\n            var sceneView = _a[_i];\n            sceneViewByViewId.set(sceneView.view.id, sceneView);\n        }\n        // Now retrieve and convert each view under the mouse to the scene view it coincides with\n        return e.viewsUnderMouse.map(function (viewItem) { return sceneViewByViewId.get(viewItem.view.id); }).filter(isDefined);\n    };\n    LayerMouseEvents.prototype.getMouseByViewId = function (e) {\n        // This is the mouse position for the provided view in view space\n        var viewMouseByViewId = new Map();\n        for (var _i = 0, _a = e.viewsUnderMouse; _i < _a.length; _i++) {\n            var viewItem = _a[_i];\n            viewMouseByViewId.set(viewItem.view.id, viewItem.mouse);\n        }\n        return viewMouseByViewId;\n    };\n    LayerMouseEvents.prototype.handleClick = function (e, button) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseClick(view, mouse, button); });\n    };\n    LayerMouseEvents.prototype.handleDrag = function (e, drag) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseDrag(view, mouse); });\n    };\n    LayerMouseEvents.prototype.handleInteraction = function (e, callback) {\n        // Get all of the scenes under the mouse\n        var sceneViews = this.getSceneViewsUnderMouse(e);\n        // Get a lookup of a view id to the mouse position in the view\n        var viewMouseByViewId = this.getMouseByViewId(e);\n        // For every view of every scene, we must tell it's layers it's world space is receiving mouse interactions\n        for (var _i = 0, sceneViews_1 = sceneViews; _i < sceneViews_1.length; _i++) {\n            var sceneView = sceneViews_1[_i];\n            this.handleSceneView(sceneView, viewMouseByViewId, callback);\n        }\n        return sceneViews;\n    };\n    LayerMouseEvents.prototype.handleMouseDown = function (e, button) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseDown(view, mouse, button); });\n    };\n    LayerMouseEvents.prototype.handleMouseUp = function (e, button) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseUp(view, mouse, button); });\n    };\n    LayerMouseEvents.prototype.handleMouseOver = function (e) {\n        // We let the mouse move event handle the registration of moused over views\n    };\n    LayerMouseEvents.prototype.handleMouseOut = function (e) {\n        var _this = this;\n        // Get a lookup of a view id to the mouse position in the view\n        var viewMouseByViewId = this.getMouseByViewId(e);\n        var screen = e.screen.mouse;\n        // All views that are moused over should no longer be considered over and broadcast a mouse out\n        this.isOver.forEach(function (flag, sceneView) {\n            // Since we are leaving the view we must make the view relative cooridinates fromt he screen space coords\n            viewMouseByViewId.set(sceneView.view.id, sceneView.view.screenToView(screen));\n            _this.handleSceneView(sceneView, viewMouseByViewId, function (layer, view, mouse) { return layer.interactions.handleMouseOut(view, mouse); });\n        });\n        // Nothing is over anymore\n        this.isOver.clear();\n    };\n    LayerMouseEvents.prototype.handleMouseMove = function (e) {\n        var _this = this;\n        if (this.surface) {\n            this.surface.updateColorPickRange([e.screen.mouse.x, e.screen.mouse.y], e.viewsUnderMouse.map(function (v) { return v.view; }));\n        }\n        // Get all of the scenes we have interacted with, and broadcast a move event for each\n        var allSceneViews = this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseMove(view, mouse); });\n        // Get a lookup of a view id to the mouse position in the view\n        var viewMouseByViewId = this.getMouseByViewId(e);\n        // Get the position of the mouse on the screen\n        var screen = e.screen.mouse;\n        // For quick lookups map all of the current SceneViews that are over\n        var currentSceneViews = new Map();\n        allSceneViews.forEach(function (v) { return currentSceneViews.set(v, true); });\n        // Detect which of the views are newly over\n        currentSceneViews.forEach(function (flag, sceneView) {\n            if (!_this.isOver.get(sceneView)) {\n                _this.handleSceneView(sceneView, viewMouseByViewId, function (layer, view, mouse) { return layer.interactions.handleMouseOver(view, mouse); });\n            }\n        });\n        // Detect which of the views are no longer over\n        this.isOver.forEach(function (flag, sceneView) {\n            if (!currentSceneViews.get(sceneView)) {\n                // Since these views were not interacted with, we must create the mouse interaction position\n                viewMouseByViewId.set(sceneView.view.id, sceneView.view.screenToView(screen));\n                _this.handleSceneView(sceneView, viewMouseByViewId, function (layer, view, mouse) { return layer.interactions.handleMouseOut(view, mouse); });\n            }\n        });\n        // Update the current views that are over to the currently over views for next event\n        this.isOver = currentSceneViews;\n    };\n    LayerMouseEvents.prototype.handleSceneView = function (sceneView, viewMouseByViewId, callback) {\n        var view = sceneView.view;\n        var mouse = viewMouseByViewId.get(view.id);\n        if (mouse) {\n            for (var _i = 0, _a = sceneView.scene.layers; _i < _a.length; _i++) {\n                var layer = _a[_i];\n                if (layer.picking && layer.picking.type !== types_1.PickType.NONE) {\n                    callback(layer, view, mouse);\n                }\n            }\n        }\n    };\n    LayerMouseEvents.prototype.handleWheel = function (e) {\n        // TODO: This may need to be implemented. As of right now, there is no particular benefit\n    };\n    return LayerMouseEvents;\n}(event_manager_1.EventManager));\nexports.LayerMouseEvents = LayerMouseEvents;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar generate_layer_model_1 = require(\"../surface/generate-layer-model\");\nvar types_1 = require(\"../types\");\nvar make_instance_uniform_name_1 = require(\"./make-instance-uniform-name\");\n/**\n * This class does a whoooooole lot of making the magical instancing optimization controls possible.\n *\n * Our instancing hackyness comes from the idea that uniforms are fast, and you don't have to commit\n * ALL of them when you touch just a little piece, and you don't have worry about drivers not supporting\n * partial vertex buffer updates.\n *\n * This also is WebGL 1.0 compatible without any extensions that are poorly implemented. And again: does\n * NOT require entire attribute buffer commits.\n *\n * Uniforms are limited for any given draw call. So we have to create multiple materials to support\n * chunks of the instances that need to be drawn. We then have to associate an instance with the set\n * of uniforms that is related to the instance and keep them paired together. If we have too many instances\n * we must generate more buffers to accomodate them.\n *\n * If we remove instances, we must free up the uniform set so that others can use the uniforms. While the uniforms\n * are not in use, the instance should not be rendering.\n */\nvar InstanceUniformManager = /** @class */ (function () {\n    function InstanceUniformManager(layer, scene) {\n        /** The generated buffers by this manager */\n        this.buffers = [];\n        /** The uniform clusters that are free and can be used by an instance */\n        this.availableClusters = [];\n        /** A lookup of an instance to a cluster of uniforms associated with it */\n        this.instanceToCluster = new Map();\n        /** A map of a cluster of uniforms to the buffer it comes from */\n        this.clusterToBuffer = new Map();\n        this.layer = layer;\n        var maxUniformBlock = 0;\n        layer.instanceAttributes.forEach(function (attributes) {\n            maxUniformBlock = Math.max(attributes.block, maxUniformBlock);\n        });\n        this.uniformBlocksPerInstance = maxUniformBlock + 1;\n        this.scene = scene;\n    }\n    /**\n     * This adds an instance to the manager and gives the instance an associative\n     * block of uniforms to work with.\n     */\n    InstanceUniformManager.prototype.add = function (instance) {\n        // If there are no available buffers, we must add a buffer\n        if (this.availableClusters.length <= 0) {\n            this.makeNewBuffer();\n        }\n        var cluster = this.availableClusters.pop();\n        if (cluster) {\n            this.instanceToCluster.set(instance.uid, cluster);\n        }\n        else {\n            console.warn('No valid cluster available for instance added to uniform manager.');\n        }\n        return cluster;\n    };\n    /**\n     * Free all resources this manager may be holding onto\n     */\n    InstanceUniformManager.prototype.destroy = function () {\n        this.buffers.forEach(function (buffer) {\n            buffer.geometry.dispose();\n            buffer.material.dispose();\n        });\n    };\n    /**\n     * This retireves the uniforms associated with an instance, or returns nothing\n     * if the instance has not been associated yet.\n     */\n    InstanceUniformManager.prototype.getUniforms = function (instance) {\n        return this.instanceToCluster.get(instance.uid);\n    };\n    /**\n     * Disassociates an instance with it's group of uniforms and makes the instance\n     * in the buffer no longer drawable.\n     */\n    InstanceUniformManager.prototype.remove = function (instance) {\n        var cluster = this.instanceToCluster.get(instance.uid);\n        // If the instance is associated with a cluster, we can add the cluster back to being available\n        // For another instance.\n        if (cluster) {\n            this.instanceToCluster.delete(instance.uid);\n            this.availableClusters.push(cluster);\n        }\n        return cluster;\n    };\n    /**\n     * Clears all elements of this manager from the current scene it was in.\n     */\n    InstanceUniformManager.prototype.removeFromScene = function () {\n        var _this = this;\n        this.buffers.forEach(function (buffer, index) {\n            _this.scene.container.remove(buffer.model);\n            buffer.pickModel && _this.scene.pickingContainer.remove(buffer.pickModel);\n        });\n        delete this.scene;\n    };\n    /**\n     * Applies the buffers to the provided scene for rendering.\n     */\n    InstanceUniformManager.prototype.setScene = function (scene) {\n        var _this = this;\n        this.buffers.forEach(function (buffer, index) {\n            _this.scene.container.add(buffer.model);\n            buffer.pickModel && _this.scene.pickingContainer.add(buffer.pickModel);\n        });\n        this.scene = scene;\n    };\n    /**\n     * This generates a new buffer of uniforms to associate instances with.\n     */\n    InstanceUniformManager.prototype.makeNewBuffer = function () {\n        // We generate a new geometry object for the buffer as the geometry\n        // Needs to have it's own unique draw range per buffer for optimal\n        // Performance\n        var newGeometry = new Three.BufferGeometry();\n        this.layer.vertexAttributes.forEach(function (attribute) {\n            if (attribute.materialAttribute) {\n                newGeometry.addAttribute(attribute.name, attribute.materialAttribute);\n            }\n        });\n        // Ensure the draw range covers every instance in the geometry.\n        newGeometry.drawRange.start = 0;\n        newGeometry.drawRange.count = this.layer.maxInstancesPerBuffer * this.layer.instanceVertexCount;\n        // This is the material that is generated for the layer that utilizes all of the generated and\n        // Injected shader IO and shader fragments\n        var newMaterial = this.layer.material.clone();\n        // Now make a Model for the buffer so it can be rendered withn the scene\n        var newModel = generate_layer_model_1.generateLayerModel(this.layer, newGeometry, newMaterial);\n        // We render junkloads of instances in a buffer. Culling will have to happen\n        // On an instance level.\n        newModel.frustumCulled = false;\n        // Make our new buffer which will manage the geometry and everything necessary\n        var buffer = {\n            activeInstances: [],\n            clusters: [],\n            firstInstance: 0,\n            geometry: newGeometry,\n            lastInstance: 0,\n            material: newMaterial,\n            model: newModel,\n            pickModel: this.layer.picking.type === types_1.PickType.SINGLE ? newModel.clone() : undefined,\n        };\n        this.buffers.push(buffer);\n        // Now that we have created a new buffer, we have all of it's uniforms\n        // To use to render more instances. We must take the instancing uniforms\n        // And divvy them up into clusters for our available buffer.\n        var uniformIndex = 0;\n        var uniformName = make_instance_uniform_name_1.makeInstanceUniformNameArray();\n        var instanceData = newMaterial.uniforms[uniformName];\n        // We must ensure the vector objects are TOTALLY unique otherwise they'll get shared across buffers\n        instanceData.value = instanceData.value.map(function () { return new Three.Vector4(0.0, 0.0, 0.0, 0.0); });\n        for (var i = 0, end = this.layer.maxInstancesPerBuffer; i < end; ++i) {\n            var cluster = {\n                instanceIndex: i,\n                uniform: instanceData,\n                uniformRange: [uniformIndex, 0],\n            };\n            uniformIndex += this.uniformBlocksPerInstance;\n            cluster.uniformRange[1] = uniformIndex;\n            buffer.clusters.push(cluster);\n            this.availableClusters.push(cluster);\n            this.clusterToBuffer.set(cluster, buffer);\n        }\n        // Grab the global uniforms from the material and add it to the uniform's materialUniform list so that\n        // We can keep uniforms consistent across all Instances\n        for (var i = 0, end = this.layer.uniforms.length; i < end; ++i) {\n            var uniform = this.layer.uniforms[i];\n            uniform.materialUniforms.push(newMaterial.uniforms[uniform.name]);\n        }\n        // Now that we are ready to utilize the buffer, let's add it to the scene so it may be rendered.\n        // Each new buffer equates to one draw call.\n        if (this.scene) {\n            this.scene.container.add(buffer.model);\n            buffer.pickModel && this.scene.pickingContainer.add(buffer.pickModel);\n        }\n    };\n    return InstanceUniformManager;\n}());\nexports.InstanceUniformManager = InstanceUniformManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This analyzes the rendered data for color picking and outputs the metrics and data needed\n * for the operation.\n */\nfunction analyzeColorPickingRendering(mouse, data, width, height) {\n    var pickingData = {\n        allColors: [],\n        colorData: data,\n        dataHeight: height,\n        dataWidth: width,\n        mouse: mouse,\n        nearestColor: 0,\n    };\n    var uniqueColors = new Map();\n    var pixelIndex = 0;\n    var colors = [];\n    var mouseX = width / 2;\n    var mouseY = height / 2;\n    var nearestColor = 0x000000;\n    var distance = Number.MAX_SAFE_INTEGER;\n    for (var i = 0; i < height; ++i) {\n        var row = [];\n        colors.push(row);\n        for (var k = 0; k < width; ++k) {\n            var r = data[pixelIndex];\n            var g = data[pixelIndex + 1];\n            var b = data[pixelIndex + 2];\n            pixelIndex += 4;\n            var color = r << 16 | g << 8 | b;\n            uniqueColors.set(color, true);\n            row.push(color);\n            // If the color is not black, let's test the distance against currnet nearest color\n            if (color !== 0x000000) {\n                var dx = k - mouseX;\n                var dy = i - mouseY;\n                var testDistance = dx * dx + dy * dy;\n                if (testDistance < distance) {\n                    distance = testDistance;\n                    nearestColor = color;\n                }\n            }\n        }\n    }\n    // Apply all o fthe unique colors that were discovered within the rendering\n    pickingData.allColors = Array.from(uniqueColors.keys());\n    // The nearest color will be the element in the middle of the array of colors\n    pickingData.nearestColor = nearestColor;\n    return pickingData;\n}\nexports.analyzeColorPickingRendering = analyzeColorPickingRendering;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nvar maxPopulation = 5;\nvar maxDepth = 10;\n/**\n * This filters a quad tree query by type\n *\n * @export\n * @template T\n */\nfunction filterQuery(type, queryValues) {\n    var filtered = [];\n    queryValues.forEach(function (obj) {\n        if (type.find(function (t) { return obj instanceof t; })) {\n            filtered.push(obj);\n        }\n    });\n    return filtered;\n}\nexports.filterQuery = filterQuery;\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n *\n * @class Quadrants\n */\nvar Quadrants = /** @class */ (function () {\n    /**\n     * Creates an instance of Quadrants.\n     *\n     * @param bounds The bounds this will create quandrants for\n     * @param depth  The child depth of this element\n     *\n     * @memberOf Quadrants\n     */\n    function Quadrants(bounds, depth) {\n        var mid = bounds.mid;\n        this.TL = new Node(bounds.x, mid.x, bounds.y, mid.y, depth);\n        this.TR = new Node(mid.x, bounds.right, bounds.y, mid.y, depth);\n        this.BL = new Node(bounds.x, mid.x, mid.y, bounds.bottom, depth);\n        this.BR = new Node(mid.x, bounds.right, mid.y, bounds.bottom, depth);\n    }\n    /**\n     * Ensures all memory is released for all nodes and all references are removed\n     * to potentially high memory consumption items\n     *\n     * @memberOf Quadrants\n     */\n    Quadrants.prototype.destroy = function () {\n        this.TL.destroy();\n        this.TR.destroy();\n        this.BL.destroy();\n        this.BR.destroy();\n        delete this.TL;\n        delete this.TR;\n        delete this.BL;\n        delete this.BR;\n    };\n    return Quadrants;\n}());\nexports.Quadrants = Quadrants;\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n *\n * @export\n * @class Node\n */\nvar Node = /** @class */ (function () {\n    /**\n     * Creates an instance of Node.\n     *\n     * @param l     The bounding left wall of the space this node covers\n     * @param r     The bounding right wall of the space this node covers\n     * @param t     The bounding top wall of the space this node covers\n     * @param b     The bounding bottom wall of the space this node covers\n     * @param depth The depth within the quad tree this node resides\n     *\n     * @memberOf Node\n     */\n    function Node(left, right, top, bottom, depth) {\n        this.children = [];\n        this.depth = 0;\n        // If params insertted\n        if (arguments.length >= 4) {\n            this.bounds = new bounds_1.Bounds({\n                height: top - bottom,\n                width: right - left,\n                x: left,\n                y: top,\n            });\n        }\n        // Otherwise, make tiny start area\n        else {\n            this.bounds = new bounds_1.Bounds({\n                height: 1,\n                width: 1,\n                x: 0,\n                y: 0,\n            });\n        }\n        // Ensure the depth is set\n        this.depth = depth || 0;\n    }\n    /**\n     * Destroys this node and ensures all child nodes are destroyed as well.\n     *\n     * @memberOf Node\n     */\n    Node.prototype.destroy = function () {\n        delete this.children;\n        delete this.bounds;\n        if (this.nodes) {\n            this.nodes.destroy();\n            delete this.nodes;\n        }\n    };\n    /**\n     * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n     * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n     * this quad tree spans (and this is the root node), the quad tree will expand to include\n     * the new child.\n     *\n     * @param child The Bounds type object to inject\n     * @param props Properties that can be retrieved with the child object if applicable\n     *\n     * @returns True if the insertion was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.add = function (child, props) {\n        // This is the entry function for adding children, so we must first expand our top node\n        // To cover the area that the child is located.\n        // If we're in bounds, then let's just add the child\n        if (child.isInside(this.bounds)) {\n            return this.doAdd(child);\n        }\n        // Otherwise, we need to expand first\n        else {\n            this.cover(child);\n            return this.add(child, props);\n        }\n    };\n    /**\n     * Adds a list of new children to this quad tree. It performs the same operations as\n     * addChild for each child in the list, however, it more efficiently recalculates the\n     * bounds necessary to cover the area the children cover.\n     *\n     * @param children      List of Bounds objects to inject\n     * @param childrenProps List of props to associate with each element\n     *\n     * @memberOf Node\n     */\n    Node.prototype.addAll = function (children, childrenProps) {\n        var _this = this;\n        // Ensure the properties are at least defined\n        childrenProps = childrenProps || [];\n        // Make sure we cover the entire area of all the children.\n        // We can speed this up a lot if we first calculate the total bounds the new children covers\n        var minX = Number.MAX_VALUE;\n        var minY = Number.MAX_VALUE;\n        var maxX = -Number.MAX_VALUE;\n        var maxY = -Number.MAX_VALUE;\n        // Get the dimensions of the new bounds\n        children.forEach(function (child) {\n            if (child.x < minX) {\n                minX = child.x;\n            }\n            if (child.right > maxX) {\n                maxX = child.right;\n            }\n            if (child.bottom > maxY) {\n                maxY = child.bottom;\n            }\n            if (child.y < minY) {\n                minY = child.y;\n            }\n        });\n        // Make sure our bounds includes the specified bounds\n        this.cover(new bounds_1.Bounds({\n            height: maxY - minY,\n            width: maxX - minX,\n            x: minX,\n            y: minY,\n        }));\n        // Add all of the children into the tree\n        children.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n     * This will cause all children to be re-injected into the tree.\n     *\n     * @param bounds The bounds to include in the tree's coverage\n     *\n     * @memberOf Node\n     */\n    Node.prototype.cover = function (bounds) {\n        var _this = this;\n        // If we are already covering the area: abort\n        if (bounds.isInside(this.bounds)) {\n            return;\n        }\n        // Make our bounds cover the new area\n        this.bounds.encapsulate(bounds);\n        this.bounds.x -= 1;\n        this.bounds.y -= 1;\n        this.bounds.width += 2;\n        this.bounds.height += 4;\n        // Get all of the children underneath this node\n        var allChildren = this.gatherChildren([]);\n        // Destroy the split nodes\n        if (this.nodes) {\n            // Completely...destroy...\n            this.nodes.destroy();\n            delete this.nodes;\n        }\n        // Reinsert all children with the new dimensions in place\n        allChildren.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * When adding children, this performs the actual action of injecting the child into the tree\n     * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n     *\n     * @param child The Bounds item to inject into the tree\n     * @param props The props to remain associated with the child\n     *\n     * @returns True if the injection was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.doAdd = function (child) {\n        // If nodes are present, then we have already exceeded the population of this node\n        if (this.nodes) {\n            if (child.isInside(this.nodes.TL.bounds)) {\n                return this.nodes.TL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.TR.bounds)) {\n                return this.nodes.TR.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BL.bounds)) {\n                return this.nodes.BL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BR.bounds)) {\n                return this.nodes.BR.doAdd(child);\n            }\n            // Otherwise, this is a child overlapping this border\n            this.children.push(child);\n            return true;\n        }\n        // Otherwise, we have not had a split due to population limits being exceeded\n        else if (child.isInside(this.bounds)) {\n            this.children.push(child);\n            // If we exceeded our population for this quadrant, it is time to split up\n            if (this.children.length > maxPopulation && this.depth < maxDepth) {\n                this.split();\n            }\n            return true;\n        }\n        // This is when there is something wrong with the insertted child. The bounds\n        // For the quad should have grown without issue, but in this case the bounds\n        // Could not grow to accomodate the child.\n        if (isNaN(child.width + child.height + child.x + child.y)) {\n            console.error('Child did not fit into bounds because a dimension is NaN', child);\n        }\n        else if (child.area === 0) {\n            console.error('Child did not fit into bounds because the area is zero', child);\n        }\n        // Don't insert the child and continue\n        return true;\n    };\n    /**\n     * Collects all children of all the current and sub nodes into a single list.\n     *\n     * @param list The list we must aggregate children into\n     *\n     * @return The list specified as the list parameter\n     */\n    Node.prototype.gatherChildren = function (list) {\n        list = list.concat(this.children);\n        if (this.nodes) {\n            this.nodes.TL.gatherChildren(list);\n            this.nodes.TR.gatherChildren(list);\n            this.nodes.BL.gatherChildren(list);\n            this.nodes.BR.gatherChildren(list);\n        }\n        return list;\n    };\n    /**\n     * Entry query for determining query type based on input object\n     *\n     * @param bounds Can be a Bounds or a Point object\n     * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n     *               information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return An array of children that intersects with the query\n     */\n    Node.prototype.query = function (bounds, visit) {\n        // Query a rectangle\n        if (bounds instanceof bounds_1.Bounds) {\n            if (bounds.hitBounds(this.bounds)) {\n                return this.queryBounds(bounds, [], visit);\n            }\n            // Return an empty array when nothing is collided with\n            return [];\n        }\n        // Query a point\n        if (this.bounds.containsPoint(bounds)) {\n            return this.queryPoint(bounds, [], visit);\n        }\n        // Return an empty array when nothing is collided with\n        return [];\n    };\n    /**\n     * Queries children for intersection with a bounds object\n     *\n     * @param b     The Bounds to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return     Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryBounds = function (b, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.hitBounds(b)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (b.hitBounds(this.nodes.TL.bounds)) {\n                this.nodes.TL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.TR.bounds)) {\n                this.nodes.TR.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BL.bounds)) {\n                this.nodes.BL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BR.bounds)) {\n                this.nodes.BR.queryBounds(b, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Queries children for intersection with a point\n     *\n     * @param p     The Point to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return      Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryPoint = function (p, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.containsPoint(p)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (this.nodes.TL.bounds.containsPoint(p)) {\n                this.nodes.TL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.TR.bounds.containsPoint(p)) {\n                this.nodes.TR.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BL.bounds.containsPoint(p)) {\n                this.nodes.BL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BR.bounds.containsPoint(p)) {\n                this.nodes.BR.queryPoint(p, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Creates four sub quadrants for this node.\n     */\n    Node.prototype.split = function () {\n        // Gather all items to be handed down\n        var allChildren = this.gatherChildren([]);\n        // Gather all props for the children to be handed down as well\n        this.nodes = new Quadrants(this.bounds, this.depth + 1);\n        this.children = [];\n        while (allChildren.length > 0) {\n            var child = allChildren.pop();\n            if (child)\n                this.doAdd(child);\n        }\n    };\n    /**\n     * Traverses the quad tree returning every quadrant encountered\n     *\n     * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n     */\n    Node.prototype.visit = function (cb) {\n        var finished = Boolean(cb(this));\n        if (this.nodes && !finished) {\n            this.nodes.TL.visit(cb);\n            this.nodes.TR.visit(cb);\n            this.nodes.BL.visit(cb);\n            this.nodes.BR.visit(cb);\n        }\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar QuadTree = /** @class */ (function (_super) {\n    __extends(QuadTree, _super);\n    function QuadTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return QuadTree;\n}(Node));\nexports.QuadTree = QuadTree;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar data_bounds_1 = require(\"../util/data-bounds\");\nfunction value(val, ref, scaleRatio) {\n    var parse = \"\" + val;\n    var num = parseFloat(parse);\n    if (isNaN(num)) {\n        return 0;\n    }\n    // If this is a percentage use the reference as the num to multiply against\n    if (parse.indexOf('%') > -1) {\n        return (num / 100.0) * ref;\n    }\n    return num * scaleRatio;\n}\n/**\n * This evaluates an absolute position with a reference to produce meaningful bounds.\n *\n * The scaleRatio provided should be available in or for percents to have the same weighting\n * as whole number values.\n */\nfunction getAbsolutePositionBounds(item, reference, scaleRatio) {\n    if (reference.width === 0 || reference.height === 0) {\n        console.warn('An AbsolutePosition evaluated to invalid dimensions.', 'Please ensure that the object provided and the reference has valid dimensions', 'to produce dimensions with width and height that are non-zero.', 'item:', item, 'reference:', reference.toString());\n    }\n    var bounds = data_bounds_1.DataBounds.emptyBounds();\n    var width;\n    var height;\n    // Calculate the horizontal values\n    if (item.width) {\n        bounds.width = value(item.width, reference.width, scaleRatio);\n        if (item.left !== undefined) {\n            bounds.x = value(item.left, reference.width, scaleRatio);\n        }\n        else if (item.right !== undefined) {\n            bounds.x = reference.width - value(item.right, reference.width, scaleRatio) - bounds.width;\n        }\n    }\n    else {\n        var left = value(item.left || 0, reference.width, scaleRatio);\n        var right = reference.width - value(item.right || 0, reference.width, scaleRatio);\n        width = right - left;\n        if (width < 0) {\n            console.warn('An AbsolutePosition evaluated to invalid dimensions.', 'Please ensure that the object provided and the reference has valid dimensions', 'to produce dimensions with width and height that are greater than zero.', 'item:', item, 'reference:', reference.toString());\n        }\n        bounds.x = left;\n        bounds.width = width;\n    }\n    // Calculate the vertical values\n    if (item.height) {\n        bounds.height = value(item.height, reference.height, scaleRatio);\n        if (item.top !== undefined) {\n            bounds.y = value(item.top, reference.height, scaleRatio);\n        }\n        else if (item.bottom !== undefined) {\n            bounds.y = reference.height - value(item.bottom, reference.height, scaleRatio) - bounds.height;\n        }\n    }\n    else {\n        var top_1 = value(item.top || 0, reference.height, scaleRatio);\n        var bottom = reference.height - value(item.bottom || 0, reference.height, scaleRatio);\n        height = bottom - top_1;\n        if (height === undefined || height < 0) {\n            console.warn('An AbsolutePosition evaluated to invalid dimensions.', 'Please ensure that the object provided and the reference has valid dimensions', 'to produce dimensions with width and height that are greater than zero.', 'item:', item, 'reference:', reference.toString());\n        }\n        bounds.y = top_1;\n        bounds.height = height;\n    }\n    if (bounds.width === 0 || bounds.height === 0 || isNaN(bounds.x + bounds.y + bounds.width + bounds.height)) {\n        bounds.x = 0;\n        bounds.y = 0;\n        bounds.width = reference.width;\n        bounds.height = reference.height;\n    }\n    return bounds;\n}\nexports.getAbsolutePositionBounds = getAbsolutePositionBounds;\n","module.exports = \"// This portion is where the shader assigns the picking color that gets passed to the fragment shader\\n  _picking_color_pass_ = _pickingColor;\\n\"","module.exports = \"lowp vec4 setColor(vec4 color) {\\n  gl_FragColor = color;\\n  return gl_FragColor;\\n}\\n\"","module.exports = \"precision lowp float;\\n\\n// This contains the method required to be used on a fragment shader when a layer desires to use\\n// PickType.SINGLE (color picking).\\nvarying vec4 _picking_color_pass_;\\n\\nvec4 setColor(vec4 color) {\\n  gl_FragColor = mix(color, _picking_color_pass_, pickingActive);\\n\\n  if (color.a == 0.0) {\\n    discard;\\n  }\\n\\n  return gl_FragColor;\\n}\\n\"","module.exports = \"// This is the varying auto generated for the fragment shader that is needed in the vertex shader to pass the\\n// color for the instance through to the fragment shader\\nvarying vec4 _picking_color_pass_;\\n\"","module.exports = \"// These are projection methods utilizing the simpler camera breakdown approach\\n\\nvec3 cameraSpace(vec3 world) {\\n  return (world + cameraOffset) * cameraScale;\\n}\\n\\nvec3 cameraSpaceSize(vec3 worldSize) {\\n  return worldSize * cameraScale;\\n}\\n\\nvec4 clipSpace(vec3 world) {\\n  return vec4(((projection * modelView) * vec4(cameraSpace(world), 1.0)).xyz, 1.0);\\n}\\n\\nvec4 clipSpaceSize(vec3 worldSize) {\\n  return vec4(((projection * modelView) * vec4(cameraSpaceSize(worldSize), 0.0)).xyz, 1.0);\\n}\\n\"","module.exports = \"// When instancing is enabled, it causes a major list of uniforms to be generated\\n// it also generates a massive search tree to retrieve the correct unforms in question.\\n${instanceUniformDeclarations}\\n\\n// This is the uniforms provided by the system along with the uniforms created by the layer\\n${layerUniforms}\\n\\n// This is the attributes generated for vertex attributes\\n${vertexAttributes}\\n\\n// This is the methods and set up needed to retrieve a block of data for an instance\\n${instanceDataRetrieval}\\n\\n// This is the methods generated for the automated easing of attributes\\n${easingMethods}\\n\"","module.exports = \"// This is the injected dereferencing of the instance attributes\\n  int instanceIndex = int(instance);\\n  ${instanceDestructuring}\\n\\n  // This is a special injected instance attribute. It lets the system\\n  // control specific instances ability to draw, which allows the backend\\n  // system greater control on how it optimizes draw calls and it's buffers.\\n  if (_active == 0.0) {\\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n\\n    // Quick exit to prevent any geometry from arising from the instance\\n    return;\\n  }\\n\\n  ${picking}\\n\"","module.exports = \"precision highp float;\\n\\n// This is the fragment shader generated by the system\\n${layerUniforms}\\n\\n${picking}\\n\\n// --------------- The fragment shader provided by the layer ------------------\\n${shader}\\n\"","module.exports = \"// This is the vertex shader generated by the system\\n${shaderInput}\\n${projectionMethods}\\n${picking}\\n// --------------- Vertex shader provided by the layer -----------------\\n${shader}\\n\"","module.exports = \"int instanceSize = ${instanceBlockCount};\\n\\nvec4 getBlock(int index, int instanceIndex) {\\n  return instanceData[(instanceSize * instanceIndex) + index];\\n}\\n\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar types_1 = require(\"../../types\");\nvar auto_easing_method_1 = require(\"../../util/auto-easing-method\");\nvar make_instance_uniform_name_1 = require(\"../../util/make-instance-uniform-name\");\nvar shader_templating_1 = require(\"../../util/shader-templating\");\nvar template_vars_1 = require(\"../fragments/template-vars\");\nvar instanceRetrievalArrayFragment = require('../fragments/instance-retrieval-array.vs');\n/** Defines the elements for destructuring out of a vector */\nvar VECTOR_COMPONENTS = ['x', 'y', 'z', 'w'];\n/** Converts a size to a shader type */\nvar sizeToType = {\n    1: 'float',\n    2: 'vec2',\n    3: 'vec3',\n    4: 'vec4',\n    9: 'mat3',\n    16: 'mat4',\n    /** This is the special case for instance attributes that want an atlas resource */\n    99: 'vec4',\n};\n/**\n * This sorts attributes specific to how they need to be destructured. For example:\n * easing attributes MUST appear AFTER all of the specially integrated attributes that were generated\n * such as start times and durations.\n */\nfunction orderByPriority(a, b) {\n    if (a.easing && !b.easing)\n        return 1;\n    return -1;\n}\nfunction makeUniformArrayDeclaration(totalBlocks) {\n    return {\n        fragment: \"uniform vec4 \" + make_instance_uniform_name_1.makeInstanceUniformNameArray() + \"[\" + totalBlocks + \"];\",\n        materialUniforms: [\n            {\n                name: make_instance_uniform_name_1.makeInstanceUniformNameArray(),\n                type: '4fv',\n                value: new Array(totalBlocks)\n                    .fill(0)\n                    .map(function () { return new Three.Vector4(0, 0, 0, 0); }),\n            },\n        ],\n    };\n}\nexports.makeUniformArrayDeclaration = makeUniformArrayDeclaration;\nfunction makeInstanceRetrievalArray(blocksPerInstance) {\n    var templateOptions = {};\n    templateOptions[template_vars_1.templateVars.instanceBlockCount] = \"\" + blocksPerInstance;\n    var required = {\n        name: 'makeInstanceRetrievalArray',\n        values: [\n            template_vars_1.templateVars.instanceBlockCount,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(instanceRetrievalArrayFragment, templateOptions, required);\n    return results.shader;\n}\nexports.makeInstanceRetrievalArray = makeInstanceRetrievalArray;\nfunction makeInstanceDestructuringArray(instanceAttributes, blocksPerInstance) {\n    var out = '';\n    var orderedAttributes = instanceAttributes.slice(0).sort(orderByPriority);\n    // Generate the blocks\n    for (var i = 0; i < blocksPerInstance; ++i) {\n        out += \"  vec4 block\" + i + \" = getBlock(\" + i + \", instanceIndex);\\n\";\n    }\n    orderedAttributes.forEach(function (attribute) {\n        var block = attribute.block;\n        // If this is the source easing attribute, we must add it in as an eased method along with a calculation for the\n        // Easing interpolation time value based on the current time and the injected start time of the change.\n        if (attribute.easing && attribute.size) {\n            if (attribute.size === types_1.InstanceAttributeSize.FOUR) {\n                out += \"  \" + sizeToType[attribute.size] + \" _\" + attribute.name + \"_end = block\" + block + \";\\n\";\n            }\n            else {\n                out += \"  \" + sizeToType[attribute.size || 1] + \" _\" + attribute.name + \"_end = block\" + block + \".\" + makeVectorSwizzle(attribute.blockIndex || 0, attribute.size || 1) + \";\\n\";\n            }\n            switch (attribute.easing.loop) {\n                // Repeat means going from 0 to 1 then 0 to 1 etc etc\n                case auto_easing_method_1.AutoEasingLoopStyle.REPEAT:\n                    out += \"  float _\" + attribute.name + \"_time = clamp(fract((currentTime - _\" + attribute.name + \"_start_time) / _\" + attribute.name + \"_duration), 0.0, 1.0);\\n\";\n                    break;\n                // Reflect means going from 0 to 1 then 1 to 0 then 0 to 1 etc etc\n                case auto_easing_method_1.AutoEasingLoopStyle.REFLECT:\n                    // Get the time passed in a linear fashion\n                    out += \"  float _\" + attribute.name + \"_timePassed = (currentTime - _\" + attribute.name + \"_start_time) / _\" + attribute.name + \"_duration;\\n\";\n                    // Make a triangle wave from the time passed to ping pong the value\n                    out += \"  float _\" + attribute.name + \"_pingPong = abs((fract(_\" + attribute.name + \"_timePassed / 2.0)) - 0.5) * 2.0;\\n\";\n                    // Ensure we're clamped to the right values\n                    out += \"  float _\" + attribute.name + \"_time = clamp(_\" + attribute.name + \"_pingPong, 0.0, 1.0);\\n\";\n                    break;\n                // No loop means just linear time\n                case auto_easing_method_1.AutoEasingLoopStyle.NONE:\n                default:\n                    out += \"  float _\" + attribute.name + \"_time = clamp((currentTime - _\" + attribute.name + \"_start_time) / _\" + attribute.name + \"_duration, 0.0, 1.0);\\n\";\n                    break;\n            }\n            out += \"  \" + sizeToType[attribute.size] + \" \" + attribute.name + \" = \" + attribute.easing.methodName + \"(_\" + attribute.name + \"_start, _\" + attribute.name + \"_end, _\" + attribute.name + \"_time);\\n\";\n        }\n        // If we have a size the size of a block, then don't swizzle the vector\n        else if (attribute.size === types_1.InstanceAttributeSize.FOUR) {\n            out += \"  \" + sizeToType[attribute.size] + \" \" + attribute.name + \" = block\" + block + \";\\n\";\n        }\n        // If the attribute is an atlas, then we use the special ATLAS size and don't swizzle the vector\n        else if (attribute.atlas) {\n            out += \"  \" + sizeToType[types_1.InstanceAttributeSize.ATLAS] + \" \" + attribute.name + \" = block\" + block + \";\\n\";\n        }\n        // Do normal destructuring with any other size and type\n        else {\n            out += \"  \" + sizeToType[attribute.size || 1] + \" \" + attribute.name + \" = block\" + block + \".\" + makeVectorSwizzle(attribute.blockIndex || 0, attribute.size || 1) + \";\\n\";\n        }\n    });\n    return out;\n}\nexports.makeInstanceDestructuringArray = makeInstanceDestructuringArray;\nfunction makeVectorSwizzle(start, size) {\n    return VECTOR_COMPONENTS.slice(start, start + size).join('');\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../../types\");\nvar shader_templating_1 = require(\"../../util/shader-templating\");\nvar webgl_stat_1 = require(\"../../util/webgl-stat\");\nvar template_vars_1 = require(\"../fragments/template-vars\");\nvar uniform_instance_block_array_1 = require(\"./uniform-instance-block-array\");\n// These are all of the necessary fragments that will comprise our shader that is generated\nvar vertexShaderComposition = require('../fragments/vertex-shader-composition.vs');\nvar fragmentShaderComposition = require('../fragments/fragment-shader-composition.fs');\nvar instanceDestructuringArray = require('../fragments/instance-destructuring-array.vs');\nvar shaderInput = require('../fragments/shader-input.vs');\nvar projectionMethods = require('../fragments/projection-methods.vs');\n// Constants\n/**\n * Defines how many floats are available in a uniform block\n * What is a uniform block you ask? Why let me tell you! It is how opengl stores and communicates uniforms\n * to the GPU. Whenever you declare a uniform, it will use a hunk of memory. You can see how many uniforms\n * a GPU can have via the paramter MAX_VERTEX_UNIFORM_VECTORS. The number returned is the number of blocks\n * we can use for uniforms in the vertex shader. A BLOCK is an entire vec4.\n *\n * When you declare a uniform in your shader, it will use an entire BLOCK at the MINIMUM.\n *\n * A uniform float uses 1 block. vec2 uses 1 block. vec3 uses one block. vec4 uses one block.\n * mat4 uses 4 blocks. mat3 uses 3 blocks.\n *\n * etc etc.\n */\nvar MAX_USE_PER_BLOCK = 4;\n/** Converts a size to a shader type */\nvar sizeToType = {\n    1: 'float',\n    2: 'vec2',\n    3: 'vec3',\n    4: 'vec4',\n    9: 'mat3',\n    16: 'mat4',\n    99: 'sampler2D',\n};\nfunction calculateUniformBlockUseage(uniforms) {\n    var count = 0;\n    for (var i = 0, end = uniforms.length; i < end; ++i) {\n        count += Math.ceil(uniforms[i].size / 4);\n    }\n    return count;\n}\n/**\n * This method is the main algorithm for piecing together all of the attributes necessary\n * and injecting them into the shaders.\n *\n * @param shaders\n * @param vertexAttributes\n * @param instanceAttributes\n */\nfunction injectFragments(layer, shaders, vertexAttributes, instanceAttributes, uniforms) {\n    var shaderInputMetrics = generateShaderInputs(layer, vertexAttributes, instanceAttributes, uniforms);\n    var templateOptions = (_a = {},\n        _a[template_vars_1.templateVars.projectionMethods] = generateProjectionMethods(),\n        _a[template_vars_1.templateVars.picking] = generateVertexPicking(layer),\n        _a[template_vars_1.templateVars.shaderInput] = shaderInputMetrics.fragment,\n        _a[template_vars_1.templateVars.shader] = generateVertexShader(layer, shaders, instanceAttributes, shaderInputMetrics.metrics.maxInstancesPerBuffer, shaderInputMetrics.metrics.blocksPerInstance),\n        _a);\n    var required = {\n        name: 'vertex shader composition',\n        values: [\n            template_vars_1.templateVars.projectionMethods,\n            template_vars_1.templateVars.shaderInput,\n            template_vars_1.templateVars.shader,\n        ],\n    };\n    // If our layer is using color picking, then we must require the shader to include the ${picking} annotation\n    // To receive the fragment picking method\n    if (layer.picking.type === types_1.PickType.SINGLE) {\n        required.values.push(template_vars_1.templateVars.picking);\n    }\n    var vertexShaderResults = shader_templating_1.shaderTemplate(vertexShaderComposition, templateOptions, required);\n    templateOptions = (_b = {},\n        _b[template_vars_1.templateVars.layerUniforms] = generateUniforms(uniforms, types_1.ShaderInjectionTarget.FRAGMENT),\n        _b[template_vars_1.templateVars.shader] = generateFragmentShader(shaders),\n        _b[template_vars_1.templateVars.picking] = generateFragmentPickingMethod(layer),\n        _b);\n    required = {\n        name: 'fragment shader composition',\n        values: [\n            template_vars_1.templateVars.layerUniforms,\n            template_vars_1.templateVars.shader,\n        ],\n    };\n    // If our layer is using color picking, then we must require the shader to include the ${picking} annotation\n    // To receive the fragment picking method\n    if (layer.picking.type === types_1.PickType.SINGLE) {\n        required.values.push(template_vars_1.templateVars.picking);\n    }\n    var fragmentShaderResults = shader_templating_1.shaderTemplate(fragmentShaderComposition, templateOptions, required);\n    return {\n        fs: fragmentShaderResults.shader,\n        materialUniforms: shaderInputMetrics.materialUniforms,\n        maxInstancesPerBuffer: shaderInputMetrics.metrics.maxInstancesPerBuffer,\n        vs: vertexShaderResults.shader,\n    };\n    var _a, _b;\n}\nexports.injectFragments = injectFragments;\n/**\n * Creates the projection method fragment\n */\nfunction generateProjectionMethods() {\n    var templateOptions = {};\n    var required = {\n        name: 'projection methods',\n        values: [],\n    };\n    var results = shader_templating_1.shaderTemplate(projectionMethods, templateOptions, required);\n    return results.shader;\n}\n/**\n * Generates the fragments for shader IO such as vertex and instance attributes\n */\nfunction generateShaderInputs(layer, vertexAttributes, instanceAttributes, uniforms) {\n    var templateOptions = {};\n    var instancingInfo = generateInstanceDataLookupOptions(layer, templateOptions, instanceAttributes, uniforms);\n    var additionalOptions = (_a = {},\n        _a[template_vars_1.templateVars.layerUniforms] = generateUniforms(uniforms, types_1.ShaderInjectionTarget.VERTEX),\n        _a[template_vars_1.templateVars.vertexAttributes] = generateVertexAttributes(vertexAttributes),\n        _a[template_vars_1.templateVars.easingMethods] = generateEasingMethods(instanceAttributes),\n        _a);\n    Object.assign(templateOptions, additionalOptions);\n    var required = {\n        name: 'shader input',\n        values: [\n            template_vars_1.templateVars.instanceDataRetrieval,\n            template_vars_1.templateVars.instanceUniformDeclarations,\n            template_vars_1.templateVars.layerUniforms,\n            template_vars_1.templateVars.vertexAttributes,\n            template_vars_1.templateVars.easingMethods,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(shaderInput, templateOptions, required);\n    return {\n        fragment: results.shader,\n        materialUniforms: instancingInfo.materialUniforms,\n        metrics: instancingInfo.metrics,\n    };\n    var _a;\n}\n/**\n * Generates the easing methods for the Shader specified by each attribute\n */\nfunction generateEasingMethods(instanceAttributes) {\n    var methods = new Map();\n    var out = '';\n    // First dedup the methods needed by their method name\n    instanceAttributes.forEach(function (attribute) {\n        if (attribute.easing && attribute.size) {\n            var methodSizes = methods.get(attribute.easing.methodName);\n            if (!methodSizes) {\n                methodSizes = new Map();\n                methods.set(attribute.easing.methodName, methodSizes);\n            }\n            methodSizes.set(attribute.size, attribute.easing.gpu);\n        }\n    });\n    var required = {\n        name: 'Easing Method Generation',\n        values: [\n            template_vars_1.templateVars.easingMethod,\n        ],\n    };\n    // Now generate the full blown method for each element. We create overloaded methods for\n    // Each method name for each vector size required\n    methods.forEach(function (methodSizes, methodName) {\n        methodSizes.forEach(function (method, size) {\n            var sizeType = sizeToType[size];\n            var templateOptions = (_a = {},\n                _a[template_vars_1.templateVars.easingMethod] = sizeType + \" \" + methodName + \"(\" + sizeType + \" start, \" + sizeType + \" end, float t)\",\n                _a);\n            var results = shader_templating_1.shaderTemplate(method, templateOptions, required);\n            out += results.shader + \"\\n\";\n            var _a;\n        });\n    });\n    return out;\n}\n/**\n * Generates all of the uniforms that are provided by the shader IO.\n */\nfunction generateUniforms(uniforms, injectionType) {\n    var out = '';\n    var injection = injectionType || types_1.ShaderInjectionTarget.VERTEX;\n    uniforms.forEach(function (uniform) {\n        uniform.shaderInjection = uniform.shaderInjection || types_1.ShaderInjectionTarget.VERTEX;\n        if (uniform.shaderInjection === injection || uniform.shaderInjection === types_1.ShaderInjectionTarget.ALL) {\n            out += \"uniform \" + (uniform.qualifier || '') + (uniform.qualifier ? ' ' : '') + sizeToType[uniform.size] + \" \" + uniform.name + \";\\n\";\n        }\n    });\n    return out;\n}\n/**\n * This takes in the layer's vertex shader and transforms any required templating within the\n * shader.\n */\nfunction generateVertexShader(layer, shaders, instanceAttributes, maxInstancesPerBuffer, blocksPerInstance) {\n    var templateOptions = (_a = {},\n        _a[template_vars_1.templateVars.attributes] = makeInstanceAttributeReferences(layer, instanceAttributes, blocksPerInstance),\n        _a);\n    var required = {\n        name: 'layer vertex shader',\n        values: [\n            template_vars_1.templateVars.attributes,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(shaders.vs, templateOptions, required);\n    return results.shader;\n    var _a;\n}\n/**\n * This generates the header portion required for vertex picking to work\n */\nfunction generateVertexPicking(layer) {\n    if (layer.picking.type === types_1.PickType.SINGLE) {\n        return require('../fragments/color-picking-vertex-header.vs');\n    }\n    return '';\n}\n/**\n * This generates the fragment that defines the picking methods\n */\nfunction generateFragmentPickingMethod(layer) {\n    if (layer.picking.type === types_1.PickType.SINGLE) {\n        return require('../fragments/color-picking-method.fs');\n    }\n    return require('../fragments/color-picking-disabled.fs');\n}\nfunction generateFragmentShader(shaders) {\n    var templateOptions = {};\n    var required = {\n        name: 'layer fragment shader',\n        values: [],\n    };\n    var results = shader_templating_1.shaderTemplate(shaders.fs, templateOptions, required);\n    return results.shader;\n}\n/**\n * This generates the inline attribute references needed to be able to reference instance attribute\n * vars.\n */\nfunction makeInstanceAttributeReferences(layer, instanceAttributes, blocksPerInstance) {\n    var templateOptions = {};\n    templateOptions[template_vars_1.templateVars.blocksPerInstance] = \"\" + blocksPerInstance;\n    templateOptions[template_vars_1.templateVars.instanceDestructuring] = makeInstanceDestructuring(instanceAttributes, blocksPerInstance);\n    templateOptions[template_vars_1.templateVars.picking] = makePickingDestructuring(layer);\n    var required = {\n        name: 'instance attributes fragment',\n        values: [\n            template_vars_1.templateVars.instanceDestructuring,\n        ],\n    };\n    // If picking is enabled, then we require the picking set up that we inject into the destructuring portion\n    // Of the shader\n    if (layer.picking.type === types_1.PickType.SINGLE) {\n        required.values.push(template_vars_1.templateVars.picking);\n    }\n    var results = shader_templating_1.shaderTemplate(instanceDestructuringArray, templateOptions, required);\n    return results.shader;\n}\n/**\n * This generates an in method destructuring pattern to make instance attributes available within a method.\n */\nfunction makeInstanceDestructuring(instanceAttributes, blocksPerInstance) {\n    return uniform_instance_block_array_1.makeInstanceDestructuringArray(instanceAttributes, blocksPerInstance);\n}\n/**\n * This generates the portion of picking logic that is injected into the destructuring portion of the shader\n */\nfunction makePickingDestructuring(layer) {\n    if (layer.picking.type === types_1.PickType.SINGLE) {\n        return require('../fragments/color-picking-assignment.vs');\n    }\n    return '';\n}\n/**\n * This generates the model attribute declarations\n */\nfunction generateVertexAttributes(vertexAttributes) {\n    var out = '';\n    vertexAttributes.forEach(function (attribute) {\n        out += \"attribute \" + sizeToType[attribute.size] + \" \" + (attribute.qualifier || '') + ((attribute.qualifier && ' ') || '') + attribute.name + \";\\n\";\n    });\n    return out;\n}\n/**\n * This method generates the chunk of shader that is responsible for providing\n */\nfunction generateInstanceDataLookupOptions(layer, templateOptions, instanceAttributes, uniforms) {\n    // This is how many uniform blocks the current device can utilize in a shader\n    var maxUniforms = webgl_stat_1.WebGLStat.MAX_VERTEX_UNIFORMS;\n    // This reflects how many uniform blocks are available for instancing\n    var instanceUniformBlockCount = maxUniforms - calculateUniformBlockUseage(uniforms);\n    // Go through the attributes provided and calculate the number of blocks requested\n    // Also sort the attributes by block and pack the block useage down.\n    var sortedInstanceAttributes = instanceAttributes.slice(0).sort(function (a, b) { return a.block - b.block; });\n    var currentBlock = sortedInstanceAttributes[0].block;\n    var trueBlockIndex = 0;\n    // This tracks how much a block is used\n    var blockUseage = new Map();\n    var innerBlockUseage = new Map();\n    sortedInstanceAttributes.forEach(function (attribute) {\n        if (attribute.block !== currentBlock) {\n            currentBlock = attribute.block;\n            trueBlockIndex++;\n        }\n        var attributeSize = attribute.size || 1;\n        var oldUseage = blockUseage.get(trueBlockIndex) || 0;\n        var newUseage = oldUseage + attributeSize;\n        // Make sure the block isn't over used thus losing attribute information\n        if (newUseage > MAX_USE_PER_BLOCK) {\n            console.error(\"An instance attribute was specified that over fills the maximum allowed useage for a block.\", \"\\nSource Layer: \" + layer.id, \"\\nMax Allowed per block \" + MAX_USE_PER_BLOCK, \"\\nAttribute: \" + attribute.name + \" Block Specified: \" + attribute.block, \"\\nTotal blocks used with this attribute: \" + newUseage);\n            return;\n        }\n        // Store how much of the block is utilized\n        blockUseage.set(trueBlockIndex, newUseage);\n        // We can now auto specify the inner index of where the attribute lines up within the block\n        attribute.blockIndex = oldUseage;\n        // Now we examine the attributes request of use inside the block and make sure there is no\n        // Overlap\n        var innerUseage = innerBlockUseage.get(trueBlockIndex) || new Map();\n        if (attribute.blockIndex + attributeSize > MAX_USE_PER_BLOCK) {\n            console.error(\"An instance attribute was specified that would fill indices greater than the block allows.\", \"\\nMax index per block \" + MAX_USE_PER_BLOCK, \"\\nAttribute: \" + attribute.name + \" Block Index: \" + attribute.blockIndex + \" Size: \" + attribute.size + \" Block Index + Size: \" + (attribute.blockIndex + (attribute.size || 1)));\n            return;\n        }\n        for (var i = attribute.blockIndex; i < attribute.blockIndex + attributeSize; ++i) {\n            if (innerUseage.get(i)) {\n                console.error(\"An instance attribute was specified who's block index overaps another attributes useage\", \"\\nMax index per block \" + MAX_USE_PER_BLOCK, \"\\nAttribute: \" + attribute.name + \" Block Index: \" + attribute.blockIndex + \" Size: \" + attribute.size + \" Block Index + Size: \" + (attribute.blockIndex + (attribute.size || 1)));\n                return;\n            }\n        }\n        // Adjust the attribute to reflect the actual bock it is using\n        attribute.block = trueBlockIndex;\n    });\n    var blocksPerInstance = trueBlockIndex + 1;\n    // This determines how many instances our allowed uniforms will allow for a single draw call\n    var maxInstancesPerBuffer = Math.floor(instanceUniformBlockCount / blocksPerInstance);\n    // Generate the decision tree and uniform declarations\n    var instancingMetrics = makeUniformInstanceDataOptions(templateOptions, maxInstancesPerBuffer, blocksPerInstance, sortedInstanceAttributes);\n    return {\n        materialUniforms: instancingMetrics.materialUniforms,\n        metrics: {\n            blocksPerInstance: blocksPerInstance,\n            maxInstancesPerBuffer: maxInstancesPerBuffer,\n        },\n    };\n}\n/**\n * This generates all of the necessary templating information from uniform-instance-data\n * in order to provide an instance data getter for the application.\n */\nfunction makeUniformInstanceDataOptions(templateOptions, maxInstancesPerBuffer, blocksPerInstance, instanceAttributes) {\n    // Make a list containing all instance indicies that will be utilized and will be split\n    // Out into the decision tree\n    var instances = [];\n    for (var i = 0; i < maxInstancesPerBuffer; ++i) {\n        instances.push(i);\n    }\n    // Make the uniform declaration. Uniform declaration simultaneously gives us the material uniforms necessary\n    // To apply to our three material.\n    var uniformMetrics = makeInstanceUniformDeclaration(maxInstancesPerBuffer * blocksPerInstance, instanceAttributes);\n    templateOptions[template_vars_1.templateVars.instanceUniformDeclarations] = uniformMetrics.fragment;\n    templateOptions[template_vars_1.templateVars.instanceBlockCount] = \"\" + blocksPerInstance;\n    // This method produces the data retrieval method for array instancing\n    templateOptions[template_vars_1.templateVars.instanceDataRetrieval] = uniform_instance_block_array_1.makeInstanceRetrievalArray(blocksPerInstance);\n    return {\n        materialUniforms: uniformMetrics.materialUniforms,\n    };\n}\n/**\n * This generates the declaration of all of the individual uniform registers for instancing.\n */\nfunction makeInstanceUniformDeclaration(instanceUniformBlockCount, attributes) {\n    var out = '';\n    var blockQualifierDedup = new Map();\n    var maxBlock = 0;\n    // Dedup the attributes specified for the\n    attributes.forEach(function (attribute) {\n        var qualifiers = blockQualifierDedup.get(attribute.block) || new Map();\n        // Make sure the qualifier is added for the block!\n        if (attribute.qualifier) {\n            qualifiers.set(attribute.qualifier, true);\n        }\n        // Get the max block in use\n        maxBlock = Math.max(maxBlock, attribute.block);\n    });\n    // Generate the full string for the specified qualifiers\n    var blockQualifiers = new Map();\n    blockQualifierDedup.forEach(function (qualifierList, block) {\n        var allQualifiers = Array.from(qualifierList.keys());\n        blockQualifiers.set(block, allQualifiers.join(' ') + \" \");\n    });\n    // Generate our uniform declarations\n    // Const blockCount = maxBlock + 1;\n    // This method produces the instancing declaration for a search tree.\n    // *out += makeUniformDecisionTreeDeclarations(instanceUniformBlockCount, blockCount, blockQualifiers, materialUniforms);\n    // This method produces the instancing declaration for an instancing array\n    var declaration = uniform_instance_block_array_1.makeUniformArrayDeclaration(instanceUniformBlockCount);\n    out += declaration.fragment;\n    out += \"\\n\";\n    return {\n        fragment: out,\n        materialUniforms: declaration.materialUniforms,\n    };\n}\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar three_1 = require(\"three\");\nvar images_1 = require(\"../base-layers/images\");\nvar labels_1 = require(\"../base-layers/labels\");\nvar bounds_1 = require(\"../primitives/bounds\");\nvar attribute_generation_1 = require(\"../shaders/util/attribute-generation\");\nvar generate_default_scene_1 = require(\"../surface/generate-default-scene\");\nvar generate_layer_geometry_1 = require(\"../surface/generate-layer-geometry\");\nvar generate_layer_material_1 = require(\"../surface/generate-layer-material\");\nvar generate_layer_model_1 = require(\"../surface/generate-layer-model\");\nvar inject_shader_io_1 = require(\"../surface/inject-shader-io\");\nvar mouse_event_manager_1 = require(\"../surface/mouse-event-manager\");\nvar scene_1 = require(\"../surface/scene\");\nvar view_1 = require(\"../surface/view\");\nvar types_1 = require(\"../types\");\nvar color_picking_analysis_1 = require(\"../util/color-picking-analysis\");\nvar data_bounds_1 = require(\"../util/data-bounds\");\nvar instance_uniform_manager_1 = require(\"../util/instance-uniform-manager\");\nvar layer_mouse_events_1 = require(\"./event-managers/layer-mouse-events\");\nvar texture_1 = require(\"./texture\");\nvar atlas_resource_manager_1 = require(\"./texture/atlas-resource-manager\");\nvar DEFAULT_BACKGROUND_COLOR = new Three.Color(1.0, 1.0, 1.0);\nfunction isCanvas(val) {\n    return Boolean(val.getContext);\n}\nfunction isString(val) {\n    return Boolean(val.substr);\n}\nfunction isWebGLContext(val) {\n    return Boolean(val.canvas);\n}\n/**\n * Used for reactive layer generation and updates.\n */\nfunction createLayer(layerClass, props) {\n    return [layerClass, props];\n}\nexports.createLayer = createLayer;\n/**\n * This is a manager for layers. It will use voidgl layers to intelligently render resources\n * as efficiently as possible. Layers will be rendered in the order they are provided and this\n * surface will provide some basic camera controls by default.\n */\nvar LayerSurface = /** @class */ (function () {\n    function LayerSurface() {\n        /** This is the atlas manager that will help with modifying and tracking atlas' generated for the layers */\n        this.atlasManager = new texture_1.AtlasManager();\n        /** This is the current viewport the renderer state is in */\n        this.currentViewport = new Map();\n        /**\n         * This is the metrics of the current running frame\n         */\n        this.frameMetrics = {\n            currentFrame: 0,\n            currentTime: Date.now() | 0,\n            previousTime: Date.now() | 0,\n        };\n        /**\n         * This is used to help resolve concurrent draws. There are some very async operations that should\n         * not overlap in draw calls.\n         */\n        this.isBufferingAtlas = false;\n        /** This is all of the layers in this manager by their id */\n        this.layers = new Map();\n        /** This is the density the rendering renders for the surface */\n        this.pixelRatio = window.devicePixelRatio;\n        /**\n         * This is all of the available scenes and their views for this surface. Layers reference the IDs\n         * of the scenes and the views to be a part of their rendering state.\n         */\n        this.scenes = new Map();\n        /**\n         * This is all of the views currently generated for this surface paired with the scene they render.\n         */\n        this.sceneViews = [];\n        /**\n         * This flags all layers by id for disposal at the end of every render. A Layer must be recreated\n         * after each render in order to clear it's disposal flag. This is the trick to making this a\n         * reactive system.\n         */\n        this.willDisposeLayer = new Map();\n    }\n    Object.defineProperty(LayerSurface.prototype, \"gl\", {\n        /** Read only getter for the gl context */\n        get: function () {\n            return this.context;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This adds a layer to the manager which will manage all of the resource lifecycles of the layer\n     * as well as additional helper injections to aid in instancing and shader i/o.\n     */\n    LayerSurface.prototype.addLayer = function (layer) {\n        if (!layer.id) {\n            console.warn('All layers must have an id');\n            return layer;\n        }\n        if (this.layers.get(layer.id)) {\n            console.warn('All layer\\'s ids must be unique per layer manager');\n            return layer;\n        }\n        // We add the layer to our management\n        this.layers.set(layer.id, layer);\n        // Now we initialize the layer's gl components\n        this.initLayer(layer);\n        return layer;\n    };\n    /**\n     * Free all resources consumed by this surface that gets applied to the GPU.\n     */\n    LayerSurface.prototype.destroy = function () {\n        this.layers.forEach(function (layer) { return layer.destroy(); });\n        this.resourceManager.destroy();\n        this.mouseManager.destroy();\n        this.sceneViews.forEach(function (sceneView) { return sceneView.scene.destroy(); });\n        this.renderer.dispose();\n        this.pickingRenderer.dispose();\n        this.currentViewport.clear();\n        // TODO: Instances should be implementing destroy for these clean ups.\n        labels_1.LabelInstance.destroy();\n        images_1.ImageInstance.destroy();\n    };\n    /**\n     * This is the draw loop that must be called per frame for updates to take effect and display.\n     *\n     * @param time This is an optional time flag so one can manually control the time flag for the frame.\n     *             This will affect animations and other automated gpu processes.\n     */\n    LayerSurface.prototype.draw = function (time) {\n        return __awaiter(this, void 0, void 0, function () {\n            var scenes, i, end, scene, views, layers, k, endk, view, pickingPass, j, endj, layer, mouse, views_1, flags, j, endj, layer, pickWidth, pickHeight, numBytesPerColor, out, pickingData, j, endj, layer, didBuffer;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.gl)\n                            return [2 /*return*/];\n                        // We are rendering a new frame so increment our frame count\n                        this.frameMetrics.currentFrame++;\n                        this.frameMetrics.previousTime = this.frameMetrics.currentTime;\n                        // If no manual time was provided, we shall use Date.now in 32 bit format\n                        if (time === undefined) {\n                            this.frameMetrics.currentTime = Date.now() | 0;\n                        }\n                        else {\n                            // If this is our first frame and we have a manual time entry, then we first need to sync up\n                            // The manual time as our previous timing.\n                            if (this.frameMetrics.previousTime === this.frameMetrics.currentTime) {\n                                this.frameMetrics.previousTime = time;\n                            }\n                            this.frameMetrics.currentTime = time;\n                        }\n                        scenes = Array.from(this.scenes.values());\n                        // Loop through scenes\n                        for (i = 0, end = scenes.length; i < end; ++i) {\n                            scene = scenes[i];\n                            views = Array.from(scene.viewById.values());\n                            layers = scene.layers;\n                            // Make sure the layers are depth sorted\n                            scene.sortLayers();\n                            // Loop through the views\n                            for (k = 0, endk = views.length; k < endk; ++k) {\n                                view = views[k];\n                                pickingPass = [];\n                                // We must perform any operations necessary to make the view camera fit the viewport\n                                // Correctly\n                                view.fitViewtoViewport(new bounds_1.Bounds({\n                                    height: this.context.canvas.height,\n                                    width: this.context.canvas.width,\n                                    x: 0,\n                                    y: 0,\n                                }));\n                                // Let the layers update their uniforms before the draw\n                                for (j = 0, endj = layers.length; j < endj; ++j) {\n                                    layer = layers[j];\n                                    // Update the layer with the view it is about to be rendered with\n                                    layer.view = view;\n                                    // Make sure the layer is given the opportunity to update all of it's uniforms\n                                    // To match the view state and update any unresolved diffs internally\n                                    layer.draw();\n                                    // If this layer specifies a picking draw pass, then we shall store it in the current draw order\n                                    // For that next step\n                                    if (layer.picking.type === types_1.PickType.SINGLE) {\n                                        pickingPass.push(layer);\n                                    }\n                                }\n                                // Now perform the rendering\n                                this.drawSceneView(scene.container, view);\n                                // If a layer needs a picking pass, then perform a picking draw pass only\n                                // if a request for the color pick has been made, then we query the pixels rendered to our picking target\n                                if (pickingPass.length > 0 && this.updateColorPick) {\n                                    mouse = this.updateColorPick.mouse;\n                                    views_1 = this.updateColorPick.views;\n                                    // Only if the view is interacted with should we both with rendering\n                                    if (view.id !== this.defaultSceneElements.view.id && views_1.indexOf(view) > -1) {\n                                        // Picking uses a pixel ratio of 1\n                                        view.pixelRatio = 1.0;\n                                        flags = view.clearFlags.slice(0);\n                                        // Set color rendering flasg\n                                        view.clearFlags = [view_1.ClearFlags.COLOR, view_1.ClearFlags.DEPTH];\n                                        // We must perform any operations necessary to make the view camera fit the viewport\n                                        // Correctly with the possibly adjusted pixel ratio\n                                        view.fitViewtoViewport(new bounds_1.Bounds({\n                                            height: this.context.canvas.height / this.pixelRatio,\n                                            width: this.context.canvas.width / this.pixelRatio,\n                                            x: 0,\n                                            y: 0,\n                                        }));\n                                        // We must redraw the layers so they will update their uniforms to adapt to a picking pass\n                                        for (j = 0, endj = pickingPass.length; j < endj; ++j) {\n                                            layer = pickingPass[j];\n                                            layer.picking.currentPickMode = types_1.PickType.SINGLE;\n                                            layer.draw();\n                                            layer.picking.currentPickMode = types_1.PickType.NONE;\n                                        }\n                                        // Draw the picking container for the scene with our view long with our specialized picking renderer\n                                        // NOTE: Neat trick, just remove 'this.pickingTarget' from the argument and add\n                                        // canvas.parentNode.appendChild(this.pickingRenderer.getContext().canvas);\n                                        // below where the picking Target is created and you will see what is being rendered to the color picking buffer\n                                        this.drawSceneView(scene.pickingContainer, view, this.pickingRenderer, this.pickingTarget);\n                                        pickWidth = 5;\n                                        pickHeight = 5;\n                                        numBytesPerColor = 4;\n                                        out = new Uint8Array(pickWidth * pickHeight * numBytesPerColor);\n                                        // Read the pixels out\n                                        // TODO: We need to defer this reading to next frame as the rendering MUST be completed before a readPixels\n                                        // operation can complete. Thus in complex rendering situations that pushes the GPU, this could be a MAJOR bottleneck.\n                                        this.pickingRenderer.readRenderTargetPixels(this.pickingTarget, mouse[0] - view.screenBounds.x - pickWidth / 2, view.screenBounds.height - (mouse[1] - view.screenBounds.y) - pickHeight / 2, pickWidth, pickHeight, out);\n                                        pickingData = color_picking_analysis_1.analyzeColorPickingRendering(mouse, out, pickWidth, pickHeight);\n                                        // We must redraw the layers so they will update their uniforms to adapt to a picking pass\n                                        for (j = 0, endj = pickingPass.length; j < endj; ++j) {\n                                            layer = pickingPass[j];\n                                            if (layer.picking.type === types_1.PickType.SINGLE) {\n                                                layer.interactions.colorPicking = pickingData;\n                                            }\n                                        }\n                                        // Return the pixel ratio back to the rendered ratio\n                                        view.pixelRatio = this.pixelRatio;\n                                        // Return the view's clear flags\n                                        view.clearFlags = flags;\n                                        // After reverting the pixel ratio, we must return to the state we came from so that mouse interactions\n                                        // will work properly\n                                        view.fitViewtoViewport(new bounds_1.Bounds({\n                                            height: this.context.canvas.height,\n                                            width: this.context.canvas.width,\n                                            x: 0,\n                                            y: 0,\n                                        }));\n                                    }\n                                }\n                            }\n                        }\n                        // After we have drawn our views of our scenes, we can now ensure all of the bounds\n                        // Are updated in the interactions and flag our interactions ready for mouse input\n                        if (this.mouseManager.waitingForRender) {\n                            this.sceneViews.forEach(function (sceneView) {\n                                sceneView.bounds = new data_bounds_1.DataBounds(sceneView.view.screenBounds);\n                                sceneView.bounds.data = sceneView;\n                            });\n                            this.mouseManager.waitingForRender = false;\n                        }\n                        if (!!this.isBufferingAtlas) return [3 /*break*/, 2];\n                        this.isBufferingAtlas = true;\n                        return [4 /*yield*/, this.resourceManager.dequeueRequests()];\n                    case 1:\n                        didBuffer = _a.sent();\n                        this.isBufferingAtlas = false;\n                        // If buffering did occur and completed, then we should be performing a draw to ensure all of the\n                        // Changes are committed and pushed out.\n                        if (didBuffer)\n                            this.draw();\n                        _a.label = 2;\n                    case 2:\n                        // Clear out the flag requesting a pick pass so we don't perform a pick render pass unless we have\n                        // another requested from mouse interactions\n                        delete this.updateColorPick;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This finalizes everything and sets up viewports and clears colors and performs the actual render step\n     */\n    LayerSurface.prototype.drawSceneView = function (scene, view, renderer, target) {\n        renderer = renderer || this.renderer;\n        var offset = { x: view.viewBounds.left, y: view.viewBounds.top };\n        var size = view.viewBounds;\n        var rendererSize = renderer.getSize();\n        var pixelRatio = renderer.getPixelRatio();\n        rendererSize.width *= pixelRatio;\n        rendererSize.height *= pixelRatio;\n        var background = view.background;\n        var context = renderer.getContext();\n        // Something is up with threejs that does not allow us to set viewport x and y values. So for targets\n        // We simply size the target to the view size and render. Thus scissoring is not required\n        if (!target) {\n            // Set the scissor rectangle.\n            context.enable(context.SCISSOR_TEST);\n            context.scissor(offset.x, rendererSize.height - offset.y - size.height, size.width, size.height);\n            // If a background is established, we should clear the background color\n            // Specified for this context\n            if (view.background) {\n                // Clear the rect of color and depth so the region is totally it's own\n                context.clearColor(background[0], background[1], background[2], background[3]);\n            }\n        }\n        // Get the view's clearing preferences\n        if (view.clearFlags) {\n            // For targets, we must also perform clear operations\n            if (target) {\n                // TODO: This is frustrating. Right now we can't specify and set the viewport for a render target\n                // Possibly with Threejs going away we can actually be more explcit for the render area to a render target\n                // and not cause this overhead of resizing the render target for every picking pass\n                target.setSize(size.width, size.height);\n                renderer.setRenderTarget(target);\n                renderer.clear(view.clearFlags.indexOf(view_1.ClearFlags.COLOR) > -1, view.clearFlags.indexOf(view_1.ClearFlags.DEPTH) > -1, view.clearFlags.indexOf(view_1.ClearFlags.STENCIL) > -1);\n            }\n            else {\n                renderer.getContext().clear((view.clearFlags.indexOf(view_1.ClearFlags.COLOR) > -1 ? context.COLOR_BUFFER_BIT : 0x0) |\n                    (view.clearFlags.indexOf(view_1.ClearFlags.DEPTH) > -1 ? context.DEPTH_BUFFER_BIT : 0x0) |\n                    (view.clearFlags.indexOf(view_1.ClearFlags.STENCIL) > -1 ? context.STENCIL_BUFFER_BIT : 0x0));\n            }\n        }\n        // Default clearing is depth and color\n        else {\n            // For targets, we must also perform clear operations\n            if (target) {\n                // TODO: This is frustrating. Right now we can't specify and set the viewport for a render target\n                // Possibly with Threejs going away we can actually be more explcit for the render area to a render target\n                // and not cause this overhead of resizing the render target for every picking pass\n                target.setSize(size.width, size.height);\n                renderer.setRenderTarget(target);\n                renderer.clear(true, true);\n            }\n            else {\n                context.clear(context.COLOR_BUFFER_BIT | context.DEPTH_BUFFER_BIT);\n            }\n        }\n        // Make sure the viewport is set properly for the next render\n        renderer.setViewport(offset.x / pixelRatio, offset.y / pixelRatio, size.width, size.height);\n        // Render the scene with the provided view metrics\n        renderer.render(scene, view.viewCamera.baseCamera, target);\n    };\n    /**\n     * This allows for querying a view's screen bounds. Null is returned if the view id\n     * specified does not exist.\n     */\n    LayerSurface.prototype.getViewSize = function (viewId) {\n        for (var _i = 0, _a = this.sceneViews; _i < _a.length; _i++) {\n            var sceneView = _a[_i];\n            if (sceneView.view.id === viewId) {\n                return sceneView.view.screenBounds;\n            }\n        }\n        return null;\n    };\n    /**\n     * This queries a view's window into a world's space.\n     */\n    LayerSurface.prototype.getViewWorldBounds = function (viewId) {\n        for (var _i = 0, _a = this.sceneViews; _i < _a.length; _i++) {\n            var sceneView = _a[_i];\n            if (sceneView.view.id === viewId) {\n                var view = sceneView.view;\n                if (view.screenBounds) {\n                    var topLeft = view.viewToWorld({ x: 0, y: 0 });\n                    var bottomRight = view.screenToWorld({ x: view.screenBounds.right, y: view.screenBounds.bottom });\n                    return new bounds_1.Bounds({\n                        bottom: bottomRight.y,\n                        left: topLeft.x,\n                        right: bottomRight.x,\n                        top: topLeft.y,\n                    });\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n        return null;\n    };\n    /**\n     * This is the beginning of the system. This should be called immediately after the surface is constructed.\n     * We make this mandatory outside of the constructor so we can make it follow an async pattern.\n     */\n    LayerSurface.prototype.init = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Make sure our desired pixel ratio is set up\n                        this.pixelRatio = options.pixelRatio || this.pixelRatio;\n                        // Make sure we have a gl context to work with\n                        this.setContext(options.context);\n                        if (!this.gl) return [3 /*break*/, 2];\n                        // Initialize our GL needs that set the basis for rendering\n                        this.initGL(options);\n                        // Initialize our event manager that handles mouse interactions/gestures with the canvas\n                        this.initMouseManager(options);\n                        // Initialize any resources requested or needed, such as textures or rendering surfaces\n                        return [4 /*yield*/, this.initResources(options)];\n                    case 1:\n                        // Initialize any resources requested or needed, such as textures or rendering surfaces\n                        _a.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        console.warn('Could not establish a GL context. Layer Surface will be unable to render');\n                        _a.label = 3;\n                    case 3: return [2 /*return*/, this];\n                }\n            });\n        });\n    };\n    /**\n     * This initializes the Canvas GL contexts needed for rendering.\n     */\n    LayerSurface.prototype.initGL = function (options) {\n        var _this = this;\n        if (!this.context) {\n            console.error('Can not initialize Layer Surface as a valid GL context was not established.');\n            return;\n        }\n        // Get the canvas of our context to set up our Three settings\n        var canvas = this.context.canvas;\n        // Get the starting width and height so adjustments don't affect it\n        var width = canvas.width;\n        var height = canvas.height;\n        // Generate the renderer along with it's properties\n        this.renderer = new Three.WebGLRenderer({\n            // Context supports rendering to an alpha canvas only if the background color has a transparent\n            // Alpha value.\n            alpha: options.background && (options.background[3] < 1.0),\n            // Yes to antialias! Make it preeeeetty!\n            antialias: true,\n            // Make three use an existing canvas rather than generate another\n            canvas: canvas,\n            // TODO: This should be toggleable. If it's true it allows us to snapshot the rendering in the canvas\n            //       But we dont' always want it as it makes performance drop a bit.\n            preserveDrawingBuffer: true,\n        });\n        // Generate a renderer for the picking pass\n        this.pickingRenderer = new Three.WebGLRenderer({\n            // Context supports rendering to an alpha canvas only if the background color has a transparent\n            // Alpha value.\n            alpha: false,\n            // Picking shall not\n            antialias: false,\n            // Do not need this for picking\n            preserveDrawingBuffer: true,\n        });\n        // NOTE: Uncomment this plus remove this.pickingTarget from the drawSceneView of the color picking pass\n        // to view the colors rendered to the color picking buffer. This disables the interactions but helps\n        // debug what's going on with shaders etc\n        // canvas.parentNode.appendChild(this.pickingRenderer.getContext().canvas);\n        // We want clearing to be controlled via the layer\n        this.renderer.autoClear = false;\n        // Charts don't really have face culling. Just 2D shapes\n        this.renderer.setFaceCulling(Three.CullFaceNone);\n        // This sets the pixel ratio to handle differing pixel densities in screens\n        this.setRendererSize(width, height);\n        // Set the pixel ratio to match the pixel density of the monitor in use\n        this.renderer.setPixelRatio(this.pixelRatio);\n        // Applies the background color and establishes whether or not the context supports\n        // Alpha or not\n        if (options.background) {\n            this.renderer.setClearColor(new Three.Color(options.background[0], options.background[1], options.background[2]), options.background[3]);\n        }\n        // If a background color was not established, then we set a default background color\n        else {\n            this.renderer.setClearColor(DEFAULT_BACKGROUND_COLOR);\n        }\n        // We want clearing to be controlled via the layer\n        this.pickingRenderer.autoClear = false;\n        // Charts don't really have face culling. Just 2D shapes\n        this.pickingRenderer.setFaceCulling(Three.CullFaceNone);\n        // Picking does not need retina style precision\n        this.pickingRenderer.setPixelRatio(1.0);\n        // Applies the background color and establishes whether or not the context supports\n        // Alpha or not\n        this.pickingRenderer.setClearColor(new Three.Color(0, 0, 0), 1);\n        // Once we have made our renderer we now make us a default scene to which we can add objects\n        this.defaultSceneElements = generate_default_scene_1.generateDefaultScene(this.context);\n        this.defaultSceneElements.view.background = options.background;\n        // Set the default scene\n        this.scenes.set(this.defaultSceneElements.scene.id, this.defaultSceneElements.scene);\n        // Make a scene view depth tracker so we can track the order each scene view combo is drawn\n        var sceneViewDepth = 0;\n        // Make a SceneView for the default scene and view for mouse interactions\n        this.sceneViews.push({\n            depth: ++sceneViewDepth,\n            scene: this.defaultSceneElements.scene,\n            view: this.defaultSceneElements.view,\n        });\n        // Turn on the scissor test to keep the rendering clipped within the\n        // Render region of the context\n        this.context.enable(this.context.SCISSOR_TEST);\n        // Add the requested scenes to the surface and apply the necessary defaults\n        if (options.scenes) {\n            options.scenes.forEach(function (sceneOptions) {\n                // Make us a new scene based on the requested options\n                var newScene = new scene_1.Scene(sceneOptions);\n                // Make sure the default view is available for each scene\n                // IFF no view is provided for the scene\n                if (sceneOptions.views.length === 0) {\n                    newScene.addView(_this.defaultSceneElements.view);\n                    _this.sceneViews.push({\n                        depth: ++sceneViewDepth,\n                        scene: newScene,\n                        view: _this.defaultSceneElements.view,\n                    });\n                }\n                // Generate the views requested for the scene\n                sceneOptions.views.forEach(function (viewOptions) {\n                    var newView = new view_1.View(viewOptions);\n                    newView.camera = newView.camera || _this.defaultSceneElements.camera;\n                    newView.viewCamera = newView.viewCamera || _this.defaultSceneElements.viewCamera;\n                    newView.viewport = newView.viewport || _this.defaultSceneElements.viewport;\n                    newView.pixelRatio = _this.pixelRatio;\n                    newScene.addView(newView);\n                    for (var _i = 0, _a = _this.sceneViews; _i < _a.length; _i++) {\n                        var sceneView = _a[_i];\n                        if (sceneView.view.id === newView.id) {\n                            console.warn('You can NOT have two views with the same id. Please use unique identifiers for every view generated.');\n                        }\n                    }\n                    _this.sceneViews.push({\n                        depth: ++sceneViewDepth,\n                        scene: newScene,\n                        view: newView,\n                    });\n                });\n                _this.scenes.set(sceneOptions.key, newScene);\n            });\n        }\n    };\n    /**\n     * This does special initialization by gathering the layers shader IO, generates a material\n     * and injects special automated uniforms and attributes to make instancing work for the\n     * shader.\n     */\n    LayerSurface.prototype.initLayer = function (layer) {\n        // Set the layer's parent surface here\n        layer.surface = this;\n        // Set the resource manager this surface utilizes to the layer\n        layer.resource = this.resourceManager;\n        // For the sake of initializing uniforms to the correct values, we must first add the layer to it's appropriate\n        // Scene so that the necessary values will be in place for the sahder IO\n        var scene = this.addLayerToScene(layer);\n        // Get the shader metrics the layer desires\n        var shaderIO = layer.initShader();\n        // Clean out nulls provided as a convenience to the layer\n        shaderIO.instanceAttributes = (shaderIO.instanceAttributes || []).filter(Boolean);\n        shaderIO.vertexAttributes = (shaderIO.vertexAttributes || []).filter(Boolean);\n        shaderIO.uniforms = (shaderIO.uniforms || []).filter(Boolean);\n        // Get the injected shader IO attributes and uniforms\n        var _a = inject_shader_io_1.injectShaderIO(layer, shaderIO), vertexAttributes = _a.vertexAttributes, instanceAttributes = _a.instanceAttributes, uniforms = _a.uniforms;\n        // Generate the actual shaders to be used by injecting all of the necessary fragments and injecting\n        // Instancing fragments\n        var shaderMetrics = attribute_generation_1.injectFragments(layer, shaderIO, vertexAttributes, instanceAttributes, uniforms);\n        // Generate the geometry this layer will be utilizing\n        var geometry = generate_layer_geometry_1.generateLayerGeometry(shaderMetrics.maxInstancesPerBuffer, vertexAttributes, shaderIO.vertexCount);\n        // This is the material that is generated for the layer that utilizes all of the generated and\n        // Injected shader IO and shader fragments\n        var material = generate_layer_material_1.generateLayerMaterial(layer, shaderMetrics.vs, shaderMetrics.fs, uniforms, shaderMetrics.materialUniforms);\n        // And now we can now generate the mesh that will be added to the scene\n        var model = generate_layer_model_1.generateLayerModel(layer, geometry, material);\n        // Now that all of the elements of the layer are complete, let us apply them to the layer\n        layer.geometry = geometry;\n        layer.instanceAttributes = instanceAttributes;\n        layer.instanceVertexCount = shaderIO.vertexCount;\n        layer.material = material;\n        layer.maxInstancesPerBuffer = shaderMetrics.maxInstancesPerBuffer;\n        layer.model = model;\n        layer.uniforms = uniforms;\n        layer.vertexAttributes = vertexAttributes;\n        // The layer now needs a specialized uniform manager to provide instances with an appropriate set of uniforms\n        // To be able to render.\n        layer.uniformManager = new instance_uniform_manager_1.InstanceUniformManager(layer, scene);\n        return layer;\n    };\n    /**\n     * Initializes elements for handling mouse interactions with the canvas.\n     */\n    LayerSurface.prototype.initMouseManager = function (options) {\n        // We must inject an event manager to broadcast events through the layers themselves\n        var eventManagers = [\n            new layer_mouse_events_1.LayerMouseEvents(this),\n        ].concat(options.eventManagers || []);\n        // Generate the mouse manager for the layer\n        this.mouseManager = new mouse_event_manager_1.MouseEventManager(this.context.canvas, this.sceneViews, eventManagers, options.handlesWheelEvents);\n    };\n    /**\n     * This initializes resources needed or requested such as textures or render surfaces.\n     */\n    LayerSurface.prototype.initResources = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _i, _a, resource;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!options.atlasResources) return [3 /*break*/, 4];\n                        _i = 0, _a = options.atlasResources;\n                        _b.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3 /*break*/, 4];\n                        resource = _a[_i];\n                        return [4 /*yield*/, this.atlasManager.createAtlas(resource)];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        // Initialize our resource manager with the atlas manager\n                        this.resourceManager = new atlas_resource_manager_1.AtlasResourceManager({\n                            atlasManager: this.atlasManager,\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This finds the scene and view the layer belongs to based on the layer's props. For invalid or not provided\n     * props, the layer gets added to default scenes and views.\n     */\n    LayerSurface.prototype.addLayerToScene = function (layer) {\n        // Get the scene the layer will add itself to\n        var scene = this.scenes.get(layer.props.scene || '');\n        if (!scene) {\n            // If no scene is specified by the layer, or the scene identifier is invalid, then we add the layer\n            // To the default scene.\n            scene = this.defaultSceneElements.scene;\n            if (layer.props.scene) {\n                console.warn('Layer specified a scene that is not within the layer surface manager. Layer will be added to the default scene.');\n            }\n        }\n        // Add the layer to the scene for rendering\n        scene.addLayer(layer);\n        return scene;\n    };\n    /**\n     * Discontinues a layer's management by this surface. This will invalidate any resources\n     * the layer was using in association with the context. If the layer is re-insertted, it will\n     * be revaluated as though it were a new layer.\n     */\n    LayerSurface.prototype.removeLayer = function (layer) {\n        // Make sure we are removing a layer that exists in the system\n        if (!layer) {\n            return null;\n        }\n        if (!this.layers.get(layer && layer.id)) {\n            console.warn('Tried to remove a layer that is not in the manager.', layer);\n            return layer;\n        }\n        layer.uniformManager.removeFromScene();\n        layer.destroy();\n        this.layers.delete(layer.id);\n        return layer;\n    };\n    /**\n     * Used for reactive rendering and diffs out the layers for changed layers.\n     */\n    LayerSurface.prototype.render = function (layerInitializers) {\n        var _this = this;\n        if (!this.gl)\n            return;\n        // Loop through all of the initializers and properly add and remove layers as needed\n        if (layerInitializers && layerInitializers.length > 0) {\n            layerInitializers.forEach(function (init) {\n                var layerClass = init[0];\n                var props = init[1];\n                var existingLayer = _this.layers.get(props.key);\n                if (existingLayer) {\n                    existingLayer.willUpdateProps(props);\n                    Object.assign(existingLayer.props, props);\n                    existingLayer.didUpdateProps();\n                }\n                else {\n                    _this.addLayer(new layerClass(Object.assign({}, layerClass.defaultProps, props)));\n                }\n                _this.willDisposeLayer.set(props.key, false);\n            });\n        }\n        // Take any layer that retained it's disposal flag and trash it\n        this.willDisposeLayer.forEach(function (dispose, layerId) {\n            if (dispose) {\n                var layer = _this.layers.get(layerId);\n                if (layer) {\n                    _this.removeLayer(layer);\n                }\n                else {\n                    console.warn('this.willDisposeLayer called on non-gettable layer.');\n                }\n            }\n        });\n        // Resolve that all disposals occurred\n        this.willDisposeLayer.clear();\n        // Reflag every layer for removal again so creation of layers will determine\n        // Which layers remain for a reactive pattern\n        this.layers.forEach(function (layer, id) {\n            _this.willDisposeLayer.set(id, true);\n        });\n    };\n    /**\n     * This must be executed when the canvas changes size so that we can re-calculate the scenes and views\n     * dimensions for handling all of our rendered elements.\n     */\n    LayerSurface.prototype.fitContainer = function (pixelRatio) {\n        var container = this.context.canvas.parentElement;\n        if (container) {\n            var canvas = this.context.canvas;\n            canvas.className = '';\n            canvas.setAttribute('style', '');\n            container.style.position = 'relative';\n            canvas.style.position = 'absolute';\n            canvas.style.left = '0xp';\n            canvas.style.top = '0xp';\n            canvas.style.width = '100%';\n            canvas.style.height = '100%';\n            canvas.setAttribute('width', '');\n            canvas.setAttribute('height', '');\n            var containerBox = container.getBoundingClientRect();\n            var box = canvas.getBoundingClientRect();\n            this.resize(box.width || 100, containerBox.height || 100);\n        }\n    };\n    /**\n     * This resizes the canvas and retains pixel ratios amongst all of the resources involved.\n     */\n    LayerSurface.prototype.resize = function (width, height, pixelRatio) {\n        var _this = this;\n        this.pixelRatio = pixelRatio || this.pixelRatio;\n        this.sceneViews.forEach(function (sceneView) { return sceneView.view.pixelRatio = _this.pixelRatio; });\n        this.setRendererSize(width, height);\n        this.renderer.setPixelRatio(this.pixelRatio);\n        this.pickingRenderer.setPixelRatio(1.0);\n        this.mouseManager.resize();\n    };\n    /**\n     * This establishes the rendering canvas context for the surface.\n     */\n    LayerSurface.prototype.setContext = function (context) {\n        if (!context) {\n            return;\n        }\n        if (isWebGLContext(context)) {\n            this.context = context;\n        }\n        else if (isCanvas(context)) {\n            var canvasContext = context.getContext('webgl') || context.getContext('experimental-webgl');\n            if (!canvasContext) {\n                console.warn('A valid GL context was not found for the context provided to the surface. This surface will not be able to operate.');\n            }\n            else {\n                this.context = canvasContext;\n            }\n        }\n        else if (isString(context)) {\n            var element = document.getElementById(context);\n            if (isCanvas(element)) {\n                this.setContext(element);\n            }\n        }\n    };\n    /**\n     * This applies a new size to the renderer and resizes any additional resources that requires being\n     * sized along with the renderer.\n     */\n    LayerSurface.prototype.setRendererSize = function (width, height) {\n        width = width || 100;\n        height = height || 100;\n        this.renderer.setSize(width, height);\n        this.pickingRenderer.setSize(width, height);\n        if (!this.pickingTarget) {\n            this.pickingTarget = new three_1.WebGLRenderTarget(width, height, {\n                magFilter: Three.LinearFilter,\n                minFilter: Three.LinearFilter,\n                stencilBuffer: false,\n            });\n        }\n        this.pickingTarget.setSize(width, height);\n    };\n    /**\n     * This triggers an update to all of the layers that perform picking, the pixel data\n     * within the specified mouse range.\n     */\n    LayerSurface.prototype.updateColorPickRange = function (mouse, views) {\n        // We will flag the color range as needing an update\n        this.updateColorPick = {\n            mouse: mouse,\n            views: views,\n        };\n    };\n    return LayerSurface;\n}());\nexports.LayerSurface = LayerSurface;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./layer-surface\"));\n__export(require(\"./event-manager\"));\n__export(require(\"./generate-default-scene\"));\n__export(require(\"./generate-layer-geometry\"));\n__export(require(\"./generate-layer-material\"));\n__export(require(\"./generate-layer-model\"));\n__export(require(\"./inject-shader-io\"));\n__export(require(\"./layer\"));\n__export(require(\"./mouse-event-manager\"));\n__export(require(\"./scene\"));\n__export(require(\"./texture\"));\n__export(require(\"./view\"));\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float borderSize;\\nvarying vec2 pointCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  vertexColor = color * color.a;\\n  float size = radius * scaleFactor;\\n  borderSize = mix(\\n    (thickness + 1.5) / size,\\n    ((thickness * pixelRatio) / size),\\n    float(pixelRatio > 1.0)\\n  );\\n  edgeSharpness = mix(0.8, 0.01, min((size * 3.0 * pixelRatio) / (45.0 * pixelRatio), 1.0));\\n  pointCoord = (position.xy + vec2(1.0, 1.0)) / 2.0;\\n\\n  // Center within clip space\\n  vec4 clipCenter = clipSpace(vec3(center, depth));\\n  // Center in screen space\\n  vec2 screenCenter = (clipCenter.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Position in screen space\\n  vec2 vertex = (position.xy * size) + screenCenter;\\n  // Position back to clip space\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), clipCenter.zw);\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\n\\n/** This is the color of the ring */\\nvarying vec4 vertexColor;\\n/**\\n * This is how sharp the ring renders. For tiny rings, it's best to have\\n * less sharpness to better convey the shape of a circle. A good starter setting:\\n * edgeSharpness = mix(0.8, 0.01, min(gl_PointSize / 45.0, 1.0));\\n */\\nvarying float edgeSharpness;\\n/**\\n * This should be a value that sets the thickness of the ring in normal space\\n * relative to the PointSize\\n */\\nvarying float borderSize;\\n/**\\n * Since this is now a quad instead of a point sprite, this provides what gl_PointCoord\\n * used to provide.\\n */\\nvarying vec2 pointCoord;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius + (radius * 0.01),\\n    dot(dist, dist) * 4.0\\n  );\\n}\\n\\nvoid main() {\\n  float outer_step_factor = circle(pointCoord, 1.0);\\n  float inner_step_factor = circle(pointCoord, 1.0 - borderSize);\\n\\n  setColor(mix(\\n    mix(                        // Select the outer color outside of the inner radius\\n      vec4(0.0, 0.0, 0.0, 0.0),    // Select invisible outside of inner and outer radius\\n      vertexColor,                  // Select outer color outside of inner, but inside outer\\n      outer_step_factor\\n    ),\\n    vec4(0.0, 0.0, 0.0, 0.0),                 // Select inner color inside inner\\n    inner_step_factor\\n  ));\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar max = Math.max;\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar RingLayer = /** @class */ (function (_super) {\n    __extends(RingLayer, _super);\n    function RingLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    RingLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given circle\n            boundsAccessor: function (ring) { return new primitives_1.Bounds({\n                height: ring.radius * 2,\n                width: ring.radius * 2,\n                x: ring.x - ring.radius,\n                y: ring.y - ring.radius,\n            }); },\n            // Provide a precise hit test for the ring\n            hitTest: function (ring, point, view) {\n                var r = ring.radius / max.apply(void 0, view.camera.scale);\n                var delta = [\n                    point.x - ring.x,\n                    point.y - ring.y,\n                ];\n                return (delta[0] * delta[0] + delta[1] * delta[1]) < (r * r);\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    RingLayer.prototype.initShader = function () {\n        var scaleFactor = this.props.scaleFactor || (function () { return 1; });\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: -1,\n            1: -1,\n            2: -1,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./ring-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'center',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'radius',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.radius]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.color; },\n                },\n                {\n                    block: 2,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'thickness',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.thickness]; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (_) { return [scaleFactor()]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./ring-layer.vs'),\n        };\n    };\n    RingLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    RingLayer.prototype.getMaterialOptions = function () {\n        return {\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return RingLayer;\n}(layer_1.Layer));\nexports.RingLayer = RingLayer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar util_1 = require(\"../../util\");\nvar RingInstance = /** @class */ (function (_super) {\n    __extends(RingInstance, _super);\n    function RingInstance(options) {\n        var _this = _super.call(this, options) || this;\n        _this.color = [1.0, 1.0, 1.0, 1.0];\n        _this.depth = 0;\n        _this.radius = 0;\n        _this.thickness = 1;\n        _this.x = 0;\n        _this.y = 0;\n        _this.color = options.color || [1, 1, 1, 1];\n        _this.depth = options.depth || 0;\n        _this.radius = options.radius;\n        _this.thickness = options.thickness || _this.thickness;\n        _this.x = options.x;\n        _this.y = options.y;\n        return _this;\n    }\n    Object.defineProperty(RingInstance.prototype, \"width\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RingInstance.prototype, \"height\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RingInstance.prototype, \"innerRadius\", {\n        get: function () {\n            return this.radius - this.thickness;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        instance_provider_1.observable\n    ], RingInstance.prototype, \"color\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RingInstance.prototype, \"depth\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RingInstance.prototype, \"radius\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RingInstance.prototype, \"thickness\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RingInstance.prototype, \"x\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RingInstance.prototype, \"y\", void 0);\n    return RingInstance;\n}(util_1.Instance));\nexports.RingInstance = RingInstance;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./ring-instance\"));\n__export(require(\"./ring-layer\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar instance_1 = require(\"../../util/instance\");\nvar types_1 = require(\"../types\");\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nvar anchorCalculator = (_a = {},\n    _a[types_1.AnchorType.TopLeft] = function (anchor, rectangle) {\n        anchor.x = -anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopMiddle] = function (anchor, rectangle) {\n        anchor.x = rectangle.width / 2.0;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopRight] = function (anchor, rectangle) {\n        anchor.x = rectangle.width + anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.MiddleLeft] = function (anchor, rectangle) {\n        anchor.x = -anchor.padding;\n        anchor.y = rectangle.height / 2;\n    },\n    _a[types_1.AnchorType.Middle] = function (anchor, rectangle) {\n        anchor.x = rectangle.width / 2.0;\n        anchor.y = rectangle.height / 2.0;\n    },\n    _a[types_1.AnchorType.MiddleRight] = function (anchor, rectangle) {\n        anchor.x = rectangle.width + anchor.padding;\n        anchor.y = rectangle.height / 2.0;\n    },\n    _a[types_1.AnchorType.BottomLeft] = function (anchor, rectangle) {\n        anchor.x = -anchor.padding;\n        anchor.y = rectangle.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomMiddle] = function (anchor, rectangle) {\n        anchor.x = rectangle.width / 2.0;\n        anchor.y = rectangle.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomRight] = function (anchor, rectangle) {\n        anchor.x = rectangle.width + anchor.padding;\n        anchor.y = rectangle.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.Custom] = function (anchor, rectangle) {\n        anchor.x = anchor.x || 0;\n        anchor.y = anchor.y || 0;\n    },\n    _a);\n/**\n * This generates a new rectangle instance which will render a single line of text for a given layer.\n * There are restrictions surrounding rectangles due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a rectangle via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Rectangles should only be so long.\n * - Multiline is not supported inherently\n * - Once a rectangle is constructed, only SOME properties can be altered thereafter\n *\n * A rectangle that is constructed can only have some properties set upon creating the rectangle and are locked\n * thereafter. The only way to modify them would be to destroy the rectangle, then construct a new rectangle\n * with the modifications. This has to deal with performance regarding rasterizing the rectangle\n */\nvar RectangleInstance = /** @class */ (function (_super) {\n    __extends(RectangleInstance, _super);\n    function RectangleInstance(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the rendered color of the rectangle */\n        _this.color = [0, 0, 0, 1];\n        /** Depth sorting of the rectangle (or the z value of the lable) */\n        _this.depth = 0;\n        /** The height of the rectangle as it is to be rendered in world space */\n        _this.height = 1;\n        /** Sets the way the rectangle scales with the world */\n        _this.scaling = types_1.ScaleType.BOUND_MAX;\n        /** The width of the rectangle as it is to be rendered in world space */\n        _this.width = 1;\n        /** The x coordinate where the rectangle will be anchored to in world space */\n        _this.x = 0;\n        /** The y coordinate where the rectangle will be anchored to in world space */\n        _this.y = 0;\n        // These are properties that can be altered, but have side effects from being changed\n        /** This is the anchor location on the  */\n        _this._anchor = {\n            padding: 0,\n            type: types_1.AnchorType.TopLeft,\n            x: 0,\n            y: 0,\n        };\n        _this.depth = options.depth || _this.depth;\n        _this.color = options.color || _this.color;\n        _this.scaling = options.scaling || _this.scaling;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        _this.width = options.width || 1;\n        _this.height = options.height || 1;\n        // Make sure the anchor is set to the appropriate location\n        options.anchor && _this.setAnchor(options.anchor);\n        return _this;\n    }\n    Object.defineProperty(RectangleInstance.prototype, \"anchor\", {\n        get: function () {\n            return this._anchor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This applies a new anchor to this rectangle and properly determines it's anchor position on the rectangle\n     */\n    RectangleInstance.prototype.setAnchor = function (anchor) {\n        var newAnchor = {\n            padding: anchor.padding || 0,\n            type: anchor.type,\n            x: anchor.x || 0,\n            y: anchor.y || 0,\n        };\n        // Calculate the new anchors position values\n        anchorCalculator[newAnchor.type](newAnchor, this);\n        // Apply the anchor\n        this._anchor = newAnchor;\n    };\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"color\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"depth\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"height\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"scaling\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"width\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"x\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"y\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"_anchor\", void 0);\n    return RectangleInstance;\n}(instance_1.Instance));\nexports.RectangleInstance = RectangleInstance;\nvar _a;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the image as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the image is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y;\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float((cameraScale.x > cameraScale.y || cameraScale.y > cameraScale.x) && useScaleMode != 0.0);\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n  // Apply the image's tint as a tint to the image\\n  vertexColor = color * color.a;\\n\\n  // Correct aspect ratio.\\n  size = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * size + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the image\\n  float imageScreenScale = mix(\\n    screenSize.y / size.y,\\n    screenSize.x / size.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the image is supposed to be, then we automagically\\n  // scale down our image to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / imageScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\n\\nvoid main() {\\n  setColor(vertexColor);\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar types_2 = require(\"../types\");\nvar min = Math.min, max = Math.max;\n/**\n * This layer displays Rectangles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar RectangleLayer = /** @class */ (function (_super) {\n    __extends(RectangleLayer, _super);\n    function RectangleLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    RectangleLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given rectangle\n            boundsAccessor: function (rectangle) {\n                var anchorEffect = [0, 0];\n                if (rectangle.anchor) {\n                    anchorEffect[0] = rectangle.anchor.x || 0;\n                    anchorEffect[1] = rectangle.anchor.y || 0;\n                }\n                var topLeft = [\n                    rectangle.x - anchorEffect[0],\n                    rectangle.y - anchorEffect[1],\n                ];\n                return new primitives_1.Bounds({\n                    height: rectangle.height,\n                    width: rectangle.width,\n                    x: topLeft[0],\n                    y: topLeft[1],\n                });\n            },\n            // Provide a precise hit test for the circle\n            hitTest: function (rectangle, point, projection) {\n                // The bounds of the rectangle is in world space, but it does not account for the scale mode of the rectangle.\n                // Here, we will apply the scale mode testing to the rectangle\n                var maxScale = max.apply(void 0, projection.camera.scale);\n                var minScale = min.apply(void 0, projection.camera.scale);\n                // If we scale always then the rectangle stays within it's initial world bounds at all times\n                if (rectangle.scaling === types_2.ScaleType.ALWAYS) {\n                    return true;\n                }\n                // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n                // Rectangle the same size. If the camera zooms out then the bounds === the world bounds.\n                else if (rectangle.scaling === types_2.ScaleType.BOUND_MAX) {\n                    // We are zooming out. the bounds will stay within the world bounds\n                    if (minScale <= 1 && maxScale <= 1) {\n                        return true;\n                    }\n                    // We are zooming in. The bounds will shrink to keep the rectangle at max font size\n                    else {\n                        // The location is within the world, but we reverse project the anchor spread\n                        var anchorEffect = [0, 0];\n                        if (rectangle.anchor) {\n                            anchorEffect[0] = rectangle.anchor.x || 0;\n                            anchorEffect[1] = rectangle.anchor.y || 0;\n                        }\n                        var topLeft = [\n                            rectangle.x - (anchorEffect[0] / maxScale),\n                            rectangle.y - (anchorEffect[1] / maxScale),\n                        ];\n                        // Reverse project the size and we should be within the distorted world coordinates\n                        return new primitives_1.Bounds({\n                            height: rectangle.height / maxScale,\n                            width: rectangle.width / maxScale,\n                            x: topLeft[0],\n                            y: topLeft[1],\n                        }).containsPoint(point);\n                    }\n                }\n                // If we never allow the rectangle to scale, then the bounds will grow and shrink to counter the effects\n                // Of the camera zoom\n                else if (rectangle.scaling === types_2.ScaleType.NEVER) {\n                    // The location is within the world, but we reverse project the anchor spread\n                    var anchorEffect = [0, 0];\n                    if (rectangle.anchor) {\n                        anchorEffect[0] = rectangle.anchor.x || 0;\n                        anchorEffect[1] = rectangle.anchor.y || 0;\n                    }\n                    var topLeft = projection.worldToScreen({\n                        x: rectangle.x - (anchorEffect[0] / projection.camera.scale[0]),\n                        y: rectangle.y - (anchorEffect[1] / projection.camera.scale[1]),\n                    });\n                    var screenPoint = projection.worldToScreen(point);\n                    // Reverse project the size and we should be within the distorted world coordinates\n                    return new primitives_1.Bounds({\n                        height: rectangle.height,\n                        width: rectangle.width,\n                        x: topLeft.x,\n                        y: topLeft.y,\n                    }).containsPoint(screenPoint);\n                }\n                return true;\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    RectangleLayer.prototype.initShader = function () {\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: 0,\n            1: 0,\n            2: 0,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./rectangle-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'location',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'anchor',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.anchor.x || 0, o.anchor.y || 0]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'size',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.width, o.height]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'scaling',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scaling]; },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.color; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (u) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./rectangle-layer.vs'),\n        };\n    };\n    RectangleLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    RectangleLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return RectangleLayer;\n}(layer_1.Layer));\nexports.RectangleLayer = RectangleLayer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./rectangle-layer\"));\n__export(require(\"./rectangle-instance\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar texture_1 = require(\"../../surface/texture\");\nvar instance_1 = require(\"../../util/instance\");\nvar types_1 = require(\"../types\");\n/**\n * This is a lookup to find existing rasterizations for a particularly created label so that every\n * new label does not have to go through the rasterization process.\n */\nvar rasterizationLookUp = new Map();\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nvar anchorCalculator = (_a = {},\n    _a[types_1.AnchorType.TopLeft] = function (anchor, label) {\n        anchor.x = -anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopMiddle] = function (anchor, label) {\n        anchor.x = label.width / 2.0;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopRight] = function (anchor, label) {\n        anchor.x = label.width + anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.MiddleLeft] = function (anchor, label) {\n        anchor.x = -anchor.padding;\n        anchor.y = label.height / 2;\n    },\n    _a[types_1.AnchorType.Middle] = function (anchor, label) {\n        anchor.x = label.width / 2.0;\n        anchor.y = label.height / 2.0;\n    },\n    _a[types_1.AnchorType.MiddleRight] = function (anchor, label) {\n        anchor.x = label.width + anchor.padding;\n        anchor.y = label.height / 2.0;\n    },\n    _a[types_1.AnchorType.BottomLeft] = function (anchor, label) {\n        anchor.x = -anchor.padding;\n        anchor.y = label.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomMiddle] = function (anchor, label) {\n        anchor.x = label.width / 2.0;\n        anchor.y = label.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomRight] = function (anchor, label) {\n        anchor.x = label.width + anchor.padding;\n        anchor.y = label.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.Custom] = function (anchor, label) {\n        anchor.x = anchor.x || 0;\n        anchor.y = anchor.y || 0;\n    },\n    _a);\n/**\n * This generates a new label instance which will render a single line of text for a given layer.\n * There are restrictions surrounding labels due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a label via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Labels should only be so long.\n * - Multiline is not supported inherently\n * - Once a label is constructed, only SOME properties can be altered thereafter\n *\n * A label that is constructed can only have some properties set upon creating the label and are locked\n * thereafter. The only way to modify them would be to destroy the label, then construct a new label\n * with the modifications. This has to deal with performance regarding rasterizing the label\n */\nvar LabelInstance = /** @class */ (function (_super) {\n    __extends(LabelInstance, _super);\n    function LabelInstance(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the rendered color of the label */\n        _this.color = [0, 0, 0, 1];\n        /** Depth sorting of the label (or the z value of the label) */\n        _this.depth = 0;\n        /** When in BOUND_MAX mode, this allows the label to scale up beyond it's max size */\n        _this.maxScale = 1;\n        /** Sets the way the label scales with the world */\n        _this.scaling = types_1.ScaleType.BOUND_MAX;\n        /** Scales the label uniformly */\n        _this.scale = 1.0;\n        /** The x coordinate where the label will be anchored to in world space */\n        _this.x = 0;\n        /** The y coordinate where the label will be anchored to in world space */\n        _this.y = 0;\n        // The following properties are properties that are locked in after creating this label\n        // As the properties are completely locked into how the label was rasterized and can not\n        // Nor should not be easily adjusted for performance concerns\n        _this._cssFont = '';\n        _this._fontFamily = 'Arial';\n        _this._fontSize = 12;\n        _this._fontStyle = 'normal';\n        _this._fontWeight = 400;\n        _this._maxWidth = 0;\n        _this._text = '';\n        _this._width = 0;\n        _this._height = 0;\n        _this._isDestroyed = false;\n        // These are properties that can be altered, but have side effects from being changed\n        /** This is the anchor location on the  */\n        _this._anchor = {\n            padding: 0,\n            type: types_1.AnchorType.TopLeft,\n            x: 0,\n            y: 0,\n        };\n        _this.depth = options.depth || _this.depth;\n        _this.color = options.color || _this.color;\n        _this.maxScale = options.maxScale || _this.maxScale;\n        _this.scaling = options.scaling || _this.scaling;\n        _this.scale = options.scale || _this.scale;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        _this._fontFamily = options.fontFamily || _this._fontFamily;\n        _this._fontSize = options.fontSize || _this._fontSize;\n        _this._fontStyle = options.fontStyle || _this._fontStyle;\n        _this._fontWeight = options.fontWeight || _this._fontWeight;\n        _this._maxWidth = options.maxWidth || 0;\n        _this._text = options.text || _this._text;\n        // We get the CSS font string for this label so we can uniquely identify the rasterization\n        // Easily.\n        _this._cssFont = texture_1.LabelRasterizer.makeCSSFont(_this, 1);\n        // This is css font used to look up rasterizations. This lookup includes the max width of the label\n        // Which the css font does not account for\n        var cssFontLookup = _this._cssFont + \"_\" + _this._maxWidth;\n        // Look for other same texts that have been rasterized\n        var rasterizations = rasterizationLookUp.get(_this._text);\n        var rasterization;\n        if (rasterizations) {\n            // Look for those texts that have been rasterized in the same fashion that this label is requesting\n            rasterization = rasterizations.get(cssFontLookup);\n            // If a rasterization exists, we must increment the use reference\n            if (rasterization) {\n                rasterization.references++;\n            }\n        }\n        else {\n            rasterizations = new Map();\n        }\n        // If we have not found an existing rasterization\n        if (!rasterization) {\n            rasterization = {\n                references: 1,\n                resource: new texture_1.LabelAtlasResource(_this),\n            };\n            // Look to see if any rasterization options were specified\n            if (options.rasterization) {\n                rasterization.resource.sampleScale = options.rasterization.scale || 1.0;\n            }\n            // Ensure the sample scale is set. Defaults to 1.0\n            rasterization.resource.sampleScale = rasterization.resource.sampleScale || 1.0;\n            // Rasterize the resource generated for this label. We need it immediately rasterized so\n            // That we can utilize the dimensions for calculations.\n            texture_1.LabelRasterizer.renderSync(rasterization.resource);\n            // Now that we have an official rasterization for this text / label combo, we shall store it\n            // For others to look up\n            rasterizationLookUp.set(_this._text, rasterizations);\n            rasterizations.set(cssFontLookup, rasterization);\n        }\n        _this._rasterization = rasterization;\n        _this._width = rasterization.resource.rasterization.world.width;\n        _this._height = rasterization.resource.rasterization.world.height;\n        // Make sure the anchor is set to the appropriate location\n        options.anchor && _this.setAnchor(options.anchor);\n        return _this;\n    }\n    /**\n     * TODO: We should be implementing the destroy on LabelInstances to clean this up\n     * Frees up module scoped data.\n     */\n    LabelInstance.destroy = function () {\n        rasterizationLookUp.clear();\n    };\n    Object.defineProperty(LabelInstance.prototype, \"cssFont\", {\n        // The following are the getters for the locked in parameters of the label so we can read\n        // The properties but not set any of them.\n        /**\n         * This is the full css string that represents this label. This + the text of the label is essentially\n         * a unique identifier for the rendering of the label and is used to key the rasterization of the label\n         * so that label rasterization can be shared for similar labels.\n         */\n        get: function () { return this._cssFont; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"isDestroyed\", {\n        /** This flag indicates if this label is valid anymore */\n        get: function () { return this._isDestroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontFamily\", {\n        /** This is the font family of the label */\n        get: function () { return this._fontFamily; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontSize\", {\n        /**\n         * This is the size of the label in pixels. For Labels, this correlates to the rendering font size.\n         * The true pixel height of the label is calculated and placed into the height property for the label.\n         */\n        get: function () { return this._fontSize; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontStyle\", {\n        /** This is the style of the font (italic, oblique, etc) */\n        get: function () { return this._fontStyle; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontWeight\", {\n        /** This is the font weight specified for the label (bold, normal, etc). */\n        get: function () { return this._fontWeight; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"maxWidth\", {\n        /** This is the max width in pixels this label can fill */\n        get: function () { return this._maxWidth; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"resource\", {\n        /** This gets the atlas resource that is uniquely identified for this label */\n        get: function () { return this._rasterization.resource; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"text\", {\n        /** This is the label's text. */\n        get: function () { return this._text; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"truncatedText\", {\n        /**\n         * If a maxWidth is specified, there is a chance the text will be truncated.\n         * This provides the calculated truncated text.\n         */\n        get: function () { return this._rasterization.resource.truncatedText || this.text; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"width\", {\n        /**\n         * This is the width in world space of the label. If there is no camera distortion,\n         * this would be the width of the label in pixels on the screen.\n         */\n        get: function () {\n            return this._width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"height\", {\n        /**\n         * This is the height in world space of the label. If there is no camera distortion,\n         * this would be the height of the label in pixels on the screen.\n         */\n        get: function () {\n            return this._height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Labels are a sort of unique case where the use of a label should be destroyed as rasterization\n     * resources are in a way kept alive through reference counting.\n     */\n    LabelInstance.prototype.destroy = function () {\n        if (!this._isDestroyed) {\n            this._isDestroyed = true;\n            this._rasterization.references--;\n            // If all references are cleared, then the rasterization needs to be eradicated\n            if (this._rasterization.references === 0) {\n                this._rasterization.resource;\n            }\n        }\n    };\n    Object.defineProperty(LabelInstance.prototype, \"anchor\", {\n        get: function () {\n            return this._anchor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This applies a new anchor to this label and properly determines it's anchor position on the label\n     */\n    LabelInstance.prototype.setAnchor = function (anchor) {\n        var newAnchor = {\n            padding: anchor.padding || 0,\n            type: anchor.type,\n            x: anchor.x || 0,\n            y: anchor.y || 0,\n        };\n        // Calculate the new anchors position values\n        anchorCalculator[newAnchor.type](newAnchor, this);\n        // Apply the anchor\n        this._anchor = newAnchor;\n    };\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"color\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"depth\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"maxScale\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"scaling\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"scale\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"x\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"y\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"_anchor\", void 0);\n    return LabelInstance;\n}(instance_1.Instance));\nexports.LabelInstance = LabelInstance;\nvar _a;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Determine final screen size of label\\n  vec3 screenSize = cameraSpaceSize(vec3(size * scale / maxScale, 1.0));\\n\\n  // Test whether the label is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y || screenSize.x > size.x;\\n\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n\\n  // Correct aspect ratio.  Sufficient fix for most applications.\\n  // Will need another solution in the case of:\\n  //  (cameraScale y != cameraScale.x) && (cameraScale.x != 1 && cameraScale.y != 1)\\n\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float(cameraScale.x != cameraScale.y);\\n\\n  size = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  vec2 scaledAnchor = anchor * scale;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + scaledAnchor;\\n\\n  vec2 adjustedAnchor = mix(\\n    scaledAnchor,\\n    (scaledAnchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // Get the position of the current vertex\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * scale * size + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the label\\n  float labelScreenScale = mix(\\n    screenSize.y / size.y,\\n    screenSize.x / size.x,\\n    float((cameraScale.x != 1.0))\\n  );\\n\\n  float currentScale = labelScreenScale * scale;\\n\\n  // If our screen rendering is larger than the size the label is supposed to be, then we automagically\\n  // scale down our label to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / labelScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  // --Texture and Color\\n  // Get the tex coord from our inject texture info\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the label's color as a tint to the label (all labels are rendered white to the base texture)\\n  vertexColor = color;\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  gl_FragColor = texture2D(labelAtlas, texCoord) * vertexColor;\\n  setColor(gl_FragColor * gl_FragColor.a);\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar types_2 = require(\"../types\");\nvar max = Math.max, min = Math.min;\n/**\n * This layer displays Labels and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar LabelLayer = /** @class */ (function (_super) {\n    __extends(LabelLayer, _super);\n    function LabelLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    LabelLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given label\n            boundsAccessor: function (label) {\n                var anchor = [label.anchor.x || 0, label.anchor.y || 0];\n                var topLeft = [\n                    label.x - anchor[0],\n                    label.y - anchor[1],\n                ];\n                return new primitives_1.Bounds({\n                    height: label.height,\n                    width: label.width,\n                    x: topLeft[0],\n                    y: topLeft[1],\n                });\n            },\n            // Provide a precise hit test for the circle\n            hitTest: function (label, point, view) {\n                // The bounds of the label is in world space, but it does not account for the scale mode of the label.\n                // Here, we will apply the scale mode testing to the label\n                var maxScale = max.apply(void 0, view.camera.scale);\n                var minScale = min.apply(void 0, view.camera.scale);\n                // If we scale always then the label stays within it's initial world bounds at all times\n                if (label.scaling === types_2.ScaleType.ALWAYS) {\n                    return true;\n                }\n                // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n                // Label the same size. If the camera zooms out then the bounds === the world bounds.\n                else if (label.scaling === types_2.ScaleType.BOUND_MAX) {\n                    // We are zooming out. the bounds will stay within the world bounds\n                    if (minScale <= 1 && maxScale <= 1) {\n                        return true;\n                    }\n                    // We are zooming in. The bounds will shrink to keep the label at max font size\n                    else {\n                        var anchor = [label.anchor.x || 0, label.anchor.y || 0];\n                        // The location is within the world, but we reverse project the anchor spread\n                        var topLeft = view.worldToScreen({\n                            x: label.x - (anchor[0] / view.camera.scale[0]),\n                            y: label.y - (anchor[1] / view.camera.scale[1]),\n                        });\n                        var screenPoint = view.worldToScreen(point);\n                        // Reverse project the size and we should be within the distorted world coordinates\n                        return new primitives_1.Bounds({\n                            height: label.height,\n                            width: label.width,\n                            x: topLeft.x,\n                            y: topLeft.y,\n                        }).containsPoint(screenPoint);\n                    }\n                }\n                // If we never allow the label to scale, then the bounds will grow and shrink to counter the effects\n                // Of the camera zoom\n                else if (label.scaling === types_2.ScaleType.NEVER) {\n                    var anchor = [label.anchor.x || 0, label.anchor.y || 0];\n                    // The location is within the world, but we reverse project the anchor spread\n                    var topLeft = view.worldToScreen({\n                        x: label.x - (anchor[0] / view.camera.scale[0]),\n                        y: label.y - (anchor[1] / view.camera.scale[1]),\n                    });\n                    var screenPoint = view.worldToScreen(point);\n                    // Reverse project the size and we should be within the distorted world coordinates\n                    return new primitives_1.Bounds({\n                        height: label.height,\n                        width: label.width,\n                        x: topLeft.x,\n                        y: topLeft.y,\n                    }).containsPoint(screenPoint);\n                }\n                return true;\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    LabelLayer.prototype.initShader = function () {\n        var _this = this;\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: 0,\n            1: 0,\n            2: 0,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./label-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'location',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'anchor',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.anchor.x || 0, o.anchor.y || 0]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'size',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.width, o.height]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'scaling',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scaling]; },\n                },\n                {\n                    atlas: {\n                        key: this.props.atlas || '',\n                        name: 'labelAtlas',\n                    },\n                    block: 2,\n                    name: 'texture',\n                    update: function (o) { return _this.resource.request(_this, o, o.resource); },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.color; },\n                },\n                {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'scale',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scale]; },\n                },\n                {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.TWO,\n                    name: 'maxScale',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.maxScale]; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (u) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./label-layer.vs'),\n        };\n    };\n    LabelLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    LabelLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return LabelLayer;\n}(layer_1.Layer));\nexports.LabelLayer = LabelLayer;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar canvas;\nvar ImageRasterizer = /** @class */ (function () {\n    function ImageRasterizer() {\n    }\n    /**\n     * This loops until our canvas context is available\n     */\n    ImageRasterizer.awaitContext = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!canvas) return [3 /*break*/, 2];\n                        this.getContext();\n                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 0];\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Attempts to populate the 'canvas' context for rendering images offscreen.\n     */\n    ImageRasterizer.getContext = function () {\n        if (!canvas) {\n            canvas = document.createElement('canvas').getContext('2d');\n        }\n        return canvas;\n    };\n    /**\n     * This renders our image to a sizeable canvas where we loop over the pixel data to determine\n     * the bounds of the image.\n     *\n     * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n     *                                 the size to be rendered to the texture to the size the image\n     *                                 should be within world space.\n     * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n     */\n    ImageRasterizer.calculateImageSize = function (resource, sampleScale) {\n        /** Get the image properties for rasterizing */\n        var image = resource.image.element;\n        if (!image) {\n            console.warn('Image does not exist! Please ensure the resource contains a valid image.');\n            return;\n        }\n        if (!canvas) {\n            console.warn('The Image rasterizer was unable to establish a valid canvas context. Please ensure the system supports contexts and ensure the document is ready first.');\n            return;\n        }\n        if (image.width === 0 || image.height === 0) {\n            console.warn('Images provided shoud have valid dimensions! Please ensure the image is loaded first.');\n            return;\n        }\n        // Just make sure th canvas is available\n        canvas.canvas.width = 100;\n        canvas.canvas.height = 100;\n        // Render the image into our canvas merely to ensure the image can be rendered\n        // This action often 'warms up' images such as images that have a data URL instead of a path\n        canvas.drawImage(image, 0, 0);\n        // Make sure the rasterization object is initialized\n        resource.rasterization = resource.rasterization || {\n            texture: { height: 0, width: 0 },\n            world: { height: 0, width: 0 },\n        };\n        // Update the calculated texture size.\n        resource.rasterization.texture = {\n            height: image.height * resource.sampleScale,\n            width: image.width * resource.sampleScale,\n        };\n        resource.rasterization.world = {\n            height: image.height,\n            width: image.width,\n        };\n        resource.rasterization.image = image;\n    };\n    /**\n     * Performs the rendering of the image\n     */\n    ImageRasterizer.render = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // Make sure our canvas object is ready for rendering\n                    return [4 /*yield*/, this.awaitContext()];\n                    case 1:\n                        // Make sure our canvas object is ready for rendering\n                        _a.sent();\n                        // Calculate all of the image metrics and ensure the image can be drawn\n                        this.calculateImageSize(resource, resource.sampleScale);\n                        return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    /**\n     * Performs the rendering of the image\n     */\n    ImageRasterizer.renderSync = function (resource) {\n        // Ensure our offscreen canvas is prepped\n        this.getContext();\n        if (!canvas) {\n            console.warn('Can not render a image synchronously without the canvas context being ready.');\n            return resource;\n        }\n        // Calculate all of the image metrics and generate a canvas on the image that can\n        // Be rendered to the canvas.\n        this.calculateImageSize(resource, resource.sampleScale);\n        return resource;\n    };\n    return ImageRasterizer;\n}());\nexports.ImageRasterizer = ImageRasterizer;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\nvar atlas_1 = require(\"./atlas\");\nvar color_atlas_resource_1 = require(\"./color-atlas-resource\");\nvar color_rasterizer_1 = require(\"./color-rasterizer\");\nvar image_atlas_resource_1 = require(\"./image-atlas-resource\");\nvar label_atlas_resource_1 = require(\"./label-atlas-resource\");\nvar label_rasterizer_1 = require(\"./label-rasterizer\");\nvar sub_texture_1 = require(\"./sub-texture\");\nvar debug = require('debug')('webgl-surface:Atlas');\nvar ZERO_IMAGE = {\n    aspectRatio: 0,\n    atlasBL: { x: 0, y: 0 },\n    atlasBR: { x: 0, y: 0 },\n    atlasReferenceID: '',\n    atlasTexture: null,\n    atlasTL: { x: 0, y: 0 },\n    atlasTR: { x: 0, y: 0 },\n    heightOnAtlas: 0,\n    isValid: false,\n    pixelHeight: 0,\n    pixelWidth: 0,\n    widthOnAtlas: 0,\n};\n/**\n * Determines if a SubTexture is a valid SubTexture for rendering\n */\nfunction isValidImage(image) {\n    var isValid = false;\n    if (image && image.isValid) {\n        if (image.pixelWidth && image.pixelHeight) {\n            isValid = true;\n        }\n    }\n    return isValid;\n}\n/**\n * Defines a manager of atlas', which includes generating the atlas and producing\n * textures defining those pieces of atlas.\n */\nvar AtlasManager = /** @class */ (function () {\n    function AtlasManager() {\n        /** Stores all of the generated atlas' in a lookup by name */\n        this.allAtlas = new Map();\n    }\n    /**\n     * Atlas' must be created from scratch to update them. In order to properly\n     * update an existing one, you must destroy it then recreate it again.\n     * This is from not knowing how to update a texture via three js.\n     *\n     * @param resources The images with their image path set to be loaded into the atlas.\n     *               Images that keep an atlas ID of null indicates the image did not load\n     *               correctly\n     *\n     * @return {Texture} The Threejs texture that is created as our atlas. The images injected\n     *                   into the texture will be populated with the atlas'\n     */\n    AtlasManager.prototype.createAtlas = function (options, resources) {\n        return __awaiter(this, void 0, void 0, function () {\n            var atlas;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        atlas = new atlas_1.Atlas(options);\n                        // Set the manager to the atlas\n                        atlas.setManager(this);\n                        // Make the atlas identifiable by it's name\n                        this.allAtlas.set(atlas.id, atlas);\n                        if (!resources) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.updateAtlas(atlas.id, resources)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        debug('Atlas Created-> %o', atlas);\n                        return [2 /*return*/, atlas];\n                }\n            });\n        });\n    };\n    /**\n     * Free ALL resources under this manager\n     */\n    AtlasManager.prototype.destroy = function () {\n        this.allAtlas.forEach(function (value) { return value.destroy(); });\n    };\n    /**\n     * Disposes of the resources the atlas held and makes the atlas invalid for use\n     *\n     * @param atlasName\n     */\n    AtlasManager.prototype.destroyAtlas = function (atlasName) {\n        var atlas = this.allAtlas.get(atlasName);\n        if (atlas) {\n            atlas.destroy();\n        }\n    };\n    AtlasManager.prototype.setDefaultImage = function (image, atlasName) {\n        image = Object.assign(image, ZERO_IMAGE, { atlasReferenceID: atlasName });\n        return image;\n    };\n    /**\n     * This loads, packs, and draws the indicated image into the specified canvas\n     * using the metrics that exists for the specified atlas.\n     *\n     * @param resource The image who should have it's image path loaded\n     * @param atlasName The name of the atlas to make the packing work\n     * @param canvas The canvas we will be drawing into to generate the complete image\n     *\n     * @return {Promise<boolean>} Promise that resolves to if the image successfully was drawn or not\n     */\n    AtlasManager.prototype.draw = function (atlas, resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var canvas, atlasName, loadedImage, rasterization, texture, rect, dimensions, packing, insertedNode, ux, uy, uw, uh, onePixelX, atlasDimensions, bottom, top_1, left, right;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        canvas = atlas.texture.image;\n                        atlasName = atlas.id;\n                        // Register the resource with the atlas\n                        if (!atlas.registerResource(resource)) {\n                            console.warn('Could not draw resource to the atlas as the resource was not properly registered to the atlas first', atlas, resource);\n                            return [2 /*return*/, Promise.resolve(false)];\n                        }\n                        return [4 /*yield*/, this.loadImage(resource)];\n                    case 1:\n                        loadedImage = _a.sent();\n                        // Only a non-null image means the image loaded correctly\n                        if (loadedImage && isValidImage(resource.texture)) {\n                            rasterization = resource.rasterization;\n                            texture = resource.texture;\n                            rect = new bounds_1.Bounds({ left: 0, right: rasterization.texture.width, top: 0, bottom: rasterization.texture.height });\n                            dimensions = {\n                                first: texture,\n                                second: rect,\n                            };\n                            // Auto add a buffer in\n                            dimensions.second.width += 1;\n                            dimensions.second.height += 1;\n                            packing = atlas.packing;\n                            insertedNode = packing.insert(dimensions);\n                            // If the result was NULL we did not successfully insert the image into any map\n                            if (insertedNode) {\n                                debug('Atlas location determined: %o', insertedNode);\n                                // Apply the image to the node\n                                insertedNode.nodeImage = texture;\n                                ux = insertedNode.nodeDimensions.x / atlas.width;\n                                uy = insertedNode.nodeDimensions.y / atlas.height;\n                                uw = insertedNode.nodeDimensions.width / atlas.width;\n                                uh = insertedNode.nodeDimensions.height / atlas.height;\n                                onePixelX = 1 / atlas.width;\n                                atlasDimensions = new bounds_1.Bounds({\n                                    bottom: 1.0 - uy,\n                                    left: ux,\n                                    right: ux + uw,\n                                    top: 1.0 - (uy + uh),\n                                });\n                                bottom = atlasDimensions.bottom;\n                                top_1 = atlasDimensions.y;\n                                left = atlasDimensions.x;\n                                right = atlasDimensions.x + atlasDimensions.width - onePixelX;\n                                texture.atlasReferenceID = atlasName;\n                                texture.atlasTL = { x: left, y: top_1 };\n                                texture.atlasBR = { x: right, y: bottom };\n                                texture.atlasBL = { x: left, y: bottom };\n                                texture.atlasTR = { x: right, y: top_1 };\n                                texture.widthOnAtlas = Math.abs(texture.atlasTR.x - texture.atlasTL.x);\n                                texture.heightOnAtlas = Math.abs(texture.atlasTR.y - texture.atlasBR.y);\n                                texture.pixelWidth = rasterization.texture.width;\n                                texture.pixelHeight = rasterization.texture.height;\n                                // Now draw the image to the indicated canvas\n                                canvas.getContext('2d').drawImage(loadedImage, insertedNode.nodeDimensions.x, insertedNode.nodeDimensions.y);\n                                // We have finished inserting\n                                return [2 /*return*/, true];\n                            }\n                            else {\n                                // Log an error\n                                console.error(\"Could not fit resource into atlas\", resource);\n                                resource.texture = this.setDefaultImage(resource.texture, atlasName);\n                                return [2 /*return*/, false];\n                            }\n                        }\n                        else {\n                            // Log an error and load a default sub texture\n                            console.error(\"Could not load resource:\", resource);\n                            resource.texture = this.setDefaultImage(resource.texture, atlasName);\n                            return [2 /*return*/, false];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Retrieves the threejs texture for the atlas\n     *\n     * @param atlasName The identifier of the atlas\n     */\n    AtlasManager.prototype.getAtlasTexture = function (atlasName) {\n        return this.allAtlas.get(atlasName);\n    };\n    /**\n     * This takes in any atlas resource and rasterizes it.\n     *\n     * @param {SubTexture} resource This is any atlas resource which will have it's image rasterized\n     *\n     * @return {Promise<HTMLImageElement>} A promise to resolve to the loaded image\n     *                                     or null if there was an error\n     */\n    AtlasManager.prototype.loadImage = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var imageSrc, subTexture, image_1, image, image;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        imageSrc = '';\n                        subTexture = resource.texture || new sub_texture_1.SubTexture();\n                        resource.texture = subTexture;\n                        if (!(resource instanceof image_atlas_resource_1.ImageAtlasResource)) return [3 /*break*/, 4];\n                        if (!resource.image.element) return [3 /*break*/, 2];\n                        if (resource.image.element.width !== 0 && resource.image.element.height !== 0) {\n                            image_1 = resource.image.element;\n                            subTexture.pixelWidth = image_1.width;\n                            subTexture.pixelHeight = image_1.height;\n                            subTexture.aspectRatio = image_1.width / image_1.height;\n                            return [2 /*return*/, image_1];\n                        }\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                var image = resource.image.element;\n                                if (image) {\n                                    image.onload = function () {\n                                        subTexture.pixelWidth = image.width;\n                                        subTexture.pixelHeight = image.height;\n                                        subTexture.aspectRatio = image.width / image.height;\n                                        resolve(image);\n                                    };\n                                    image.onerror = function () {\n                                        resolve(null);\n                                    };\n                                }\n                                else {\n                                    resolve(null);\n                                }\n                            })];\n                    case 1:\n                        image = _a.sent();\n                        return [2 /*return*/, image];\n                    case 2:\n                        if (resource.image.path) {\n                            imageSrc = resource.image.path;\n                        }\n                        _a.label = 3;\n                    case 3: return [3 /*break*/, 10];\n                    case 4:\n                        if (!(resource instanceof label_atlas_resource_1.LabelAtlasResource)) return [3 /*break*/, 7];\n                        if (!!resource.rasterization.canvas) return [3 /*break*/, 6];\n                        return [4 /*yield*/, label_rasterizer_1.LabelRasterizer.render(resource)];\n                    case 5:\n                        _a.sent();\n                        _a.label = 6;\n                    case 6:\n                        // Make sure the rasterization properly executed\n                        if (resource.rasterization.canvas) {\n                            debug('Rasterized label %o', resource.rasterization);\n                            imageSrc = resource.rasterization.canvas.toDataURL('image/png');\n                        }\n                        else {\n                            console.warn('The label was not able to be rasterized');\n                        }\n                        return [3 /*break*/, 10];\n                    case 7:\n                        if (!(resource instanceof color_atlas_resource_1.ColorAtlasResource)) return [3 /*break*/, 10];\n                        if (!!resource.rasterization.canvas) return [3 /*break*/, 9];\n                        return [4 /*yield*/, color_rasterizer_1.ColorRasterizer.render(resource)];\n                    case 8:\n                        _a.sent();\n                        _a.label = 9;\n                    case 9:\n                        // Make sure the rasterization properly executed\n                        if (resource.rasterization.canvas) {\n                            debug('Rasterized color %o', resource.rasterization);\n                            imageSrc = resource.rasterization.canvas.toDataURL('image/png');\n                        }\n                        else {\n                            console.warn('The color was not able to be rasterized');\n                        }\n                        _a.label = 10;\n                    case 10:\n                        if (!imageSrc) return [3 /*break*/, 12];\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                var image = new Image();\n                                image.onload = function () {\n                                    subTexture.pixelWidth = image.width;\n                                    subTexture.pixelHeight = image.height;\n                                    subTexture.aspectRatio = image.width / image.height;\n                                    resolve(image);\n                                };\n                                image.onerror = function () {\n                                    resolve(null);\n                                };\n                                image.src = imageSrc;\n                            })];\n                    case 11:\n                        image = _a.sent();\n                        return [2 /*return*/, image];\n                    case 12: return [2 /*return*/, null];\n                }\n            });\n        });\n    };\n    /**\n     * This targets an existing atlas and attempts to update it with the provided atlas resources.\n     *\n     * @param atlasName\n     * @param resources\n     */\n    AtlasManager.prototype.updateAtlas = function (atlasName, resources) {\n        return __awaiter(this, void 0, void 0, function () {\n            var atlas, _i, resources_1, resource;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        atlas = this.allAtlas.get(atlasName);\n                        if (!atlas) return [3 /*break*/, 5];\n                        _i = 0, resources_1 = resources;\n                        _a.label = 1;\n                    case 1:\n                        if (!(_i < resources_1.length)) return [3 /*break*/, 4];\n                        resource = resources_1[_i];\n                        return [4 /*yield*/, this.draw(atlas, resource)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        // Perform the best method for updating the underlying texture of the atlas to the latest changes\n                        atlas.updateTexture();\n                        return [3 /*break*/, 6];\n                    case 5:\n                        console.warn('Can not update non-existing atlas:', atlasName, 'These resources will not be loaded:', resources);\n                        _a.label = 6;\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return AtlasManager;\n}());\nexports.AtlasManager = AtlasManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\n/**\n * This is used specifically by the atlas manager to aid in packing\n * in textures within an area. This will guarantee boundaries of textures are\n * not violated and provide proper feedback for where to draw a given image\n */\nvar PackNode = /** @class */ (function () {\n    function PackNode(x, y, width, height) {\n        this.child = [null, null];\n        this.isLeaf = true;\n        this.nodeImage = null;\n        this.nodeDimensions = new bounds_1.Bounds({\n            height: height,\n            width: width,\n            x: x,\n            y: y,\n        });\n    }\n    /**\n     * Deletes all of the sub nodes in this Mapping, thus clearing up memory usage\n     */\n    PackNode.prototype.destroy = function () {\n        var child0 = this.child[0];\n        var child1 = this.child[1];\n        this.nodeImage = null;\n        if (child0) {\n            child0.destroy();\n        }\n        if (child1) {\n            child1.destroy();\n        }\n        this.child[0] = null;\n        this.child[1] = null;\n    };\n    /**\n     * Indicates if there is a child\n     */\n    PackNode.prototype.hasChild = function () {\n        var child0 = this.child[0];\n        var child1 = this.child[1];\n        if (child0 && !child0.nodeImage) {\n            return !child0.isLeaf;\n        }\n        if (child1 && !child1.nodeImage) {\n            return !child1.isLeaf;\n        }\n        return false;\n    };\n    /**\n     * Inserts images into our mapping, fitting them appropriately\n     */\n    PackNode.prototype.insert = function (image) {\n        var child0 = this.child[0];\n        var child1 = this.child[1];\n        if (!this.isLeaf && child0 && child1) {\n            // Try inserting into first child\n            var newNode = child0.insert(image);\n            if (newNode !== null) {\n                return newNode;\n            }\n            // No room in first so insert into second\n            return child1.insert(image);\n        }\n        else {\n            // If there's already an image here, return\n            if (this.nodeImage) {\n                return null;\n            }\n            // Check the fit status of the image in this nodes rectangle space\n            var fitFlag = this.nodeDimensions.fits(image.second);\n            // If we're too small, return null indicating can not fit\n            if (fitFlag === 0) {\n                return null;\n            }\n            // If we're just right, accept\n            if (fitFlag === 1) {\n                return this;\n            }\n            // Otherwise, gotta split this node and create some leaves\n            this.isLeaf = false;\n            // Get the image width\n            var imgWidth = image.second.width;\n            var imgHeight = image.second.height;\n            // Decide which way to split\n            var dWidth = this.nodeDimensions.width - imgWidth;\n            var dHeight = this.nodeDimensions.height - image.second.height;\n            if (dWidth > dHeight) {\n                child0 = this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, imgWidth, this.nodeDimensions.height);\n                child1 = this.child[1] = new PackNode(this.nodeDimensions.x + imgWidth, this.nodeDimensions.y, dWidth, this.nodeDimensions.height);\n            }\n            else {\n                child0 = this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, this.nodeDimensions.width, imgHeight);\n                child1 = this.child[1] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y + imgHeight, this.nodeDimensions.width, dHeight);\n            }\n        }\n        // Insert into first child we created\n        return child0.insert(image);\n    };\n    /**\n     * Removes the image from the mapping and tries to open up as much space as possible.\n     *\n     * @param {AtlasTexture} image The image to insert into the\n     */\n    PackNode.prototype.remove = function (image) {\n        var child0 = this.child[0];\n        var child1 = this.child[1];\n        if (child1 && child0 && !this.isLeaf) {\n            // Try removing from first child\n            var removed = child0.remove(image);\n            if (removed) {\n                return true;\n            }\n            // Try remove from second\n            removed = child1.remove(image);\n            if (!child0.hasChild()) {\n                if (!child1.hasChild()) {\n                    this.child[0] = null;\n                    this.child[1] = null;\n                }\n            }\n            return removed;\n        }\n        else {\n            if (this.nodeImage === image) {\n                this.nodeImage = null;\n                delete image.atlasReferenceID;\n                image.pixelWidth = 0;\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n    };\n    return PackNode;\n}());\nexports.PackNode = PackNode;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar texture_1 = require(\"../../surface/texture\");\nvar instance_1 = require(\"../../util/instance\");\nvar types_1 = require(\"../types\");\nvar max = Math.max;\n/**\n * This is a lookup to find existing rasterizations for a particularly created image so that every\n * new image does not have to go through the rasterization process.\n */\nvar rasterizationLookUp = new Map();\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nvar anchorCalculator = (_a = {},\n    _a[types_1.AnchorType.TopLeft] = function (anchor, image) {\n        anchor.x = -anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopMiddle] = function (anchor, image) {\n        anchor.x = image.width / 2.0;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopRight] = function (anchor, image) {\n        anchor.x = image.width + anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.MiddleLeft] = function (anchor, image) {\n        anchor.x = -anchor.padding;\n        anchor.y = image.height / 2;\n    },\n    _a[types_1.AnchorType.Middle] = function (anchor, image) {\n        anchor.x = image.width / 2.0;\n        anchor.y = image.height / 2.0;\n    },\n    _a[types_1.AnchorType.MiddleRight] = function (anchor, image) {\n        anchor.x = image.width + anchor.padding;\n        anchor.y = image.height / 2.0;\n    },\n    _a[types_1.AnchorType.BottomLeft] = function (anchor, image) {\n        anchor.x = -anchor.padding;\n        anchor.y = image.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomMiddle] = function (anchor, image) {\n        anchor.x = image.width / 2.0;\n        anchor.y = image.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomRight] = function (anchor, image) {\n        anchor.x = image.width + anchor.padding;\n        anchor.y = image.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.Custom] = function (anchor, image) {\n        anchor.x = anchor.x || 0;\n        anchor.y = anchor.y || 0;\n    },\n    _a);\n/**\n * This generates a new image instance which will render a single line of text for a given layer.\n * There are restrictions surrounding images due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a image via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Images should only be so long.\n * - Multiline is not supported inherently\n * - Once a image is constructed, only SOME properties can be altered thereafter\n *\n * A image that is constructed can only have some properties set upon creating the image and are locked\n * thereafter. The only way to modify them would be to destroy the image, then construct a new image\n * with the modifications. This has to deal with performance regarding rasterizing the image\n */\nvar ImageInstance = /** @class */ (function (_super) {\n    __extends(ImageInstance, _super);\n    function ImageInstance(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the rendered color of the image */\n        _this.tint = [0, 0, 0, 1];\n        /** Depth sorting of the image (or the z value of the lable) */\n        _this.depth = 0;\n        /** The height of the image as it is to be rendered in world space */\n        _this.height = 1;\n        /** Sets the way the image scales with the world */\n        _this.scaling = types_1.ScaleType.BOUND_MAX;\n        /** The width of the image as it is to be rendered in world space */\n        _this.width = 1;\n        /** The x coordinate where the image will be anchored to in world space */\n        _this.x = 0;\n        /** The y coordinate where the image will be anchored to in world space */\n        _this.y = 0;\n        // The following properties are properties that are locked in after creating this image\n        // As the properties are completely locked into how the image was rasterized and can not\n        // Nor should not be easily adjusted for performance concerns\n        _this._sourceWidth = 0;\n        _this._sourceHeight = 0;\n        _this._isDestroyed = false;\n        // These are properties that can be altered, but have side effects from being changed\n        /** This is the anchor location on the  */\n        _this._anchor = {\n            padding: 0,\n            type: types_1.AnchorType.TopLeft,\n            x: 0,\n            y: 0,\n        };\n        _this.depth = options.depth || _this.depth;\n        _this.tint = options.tint || _this.tint;\n        _this.scaling = options.scaling || _this.scaling;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        // This is the image that is to be rendered\n        _this._element = options.element;\n        // Look for other same texts that have been rasterized\n        var rasterization = rasterizationLookUp.get(_this._path || _this._element);\n        // If a rasterization exists, we must increment the use reference\n        if (rasterization) {\n            rasterization.references++;\n        }\n        // If we have not found an existing rasterization\n        if (!rasterization) {\n            rasterization = {\n                references: 1,\n                resource: new texture_1.ImageAtlasResource(_this),\n            };\n            // Ensure the sample scale is set. Defaults to 1.0\n            rasterization.resource.sampleScale = rasterization.resource.sampleScale || 1.0;\n            // Rasterize the resource generated for this image. We need it immediately rasterized so\n            // That we can utilize the dimensions for calculations.\n            texture_1.ImageRasterizer.renderSync(rasterization.resource);\n            // Now that we have an official rasterization for this image, we shall store it\n            // For others to look up\n            rasterizationLookUp.set(_this._path || _this._element, rasterization);\n        }\n        _this._rasterization = rasterization;\n        _this._sourceWidth = rasterization.resource.rasterization.world.width;\n        _this._sourceHeight = rasterization.resource.rasterization.world.height;\n        _this.width = options.width || _this._sourceWidth || 1;\n        _this.height = options.height || _this._sourceHeight || 1;\n        // Make sure the anchor is set to the appropriate location\n        options.anchor && _this.setAnchor(options.anchor);\n        return _this;\n    }\n    /**\n     * TODO: We should be implementing the destroy on ImageInstances to clean this up\n     * Frees up module scoped data.\n     */\n    ImageInstance.destroy = function () {\n        rasterizationLookUp.clear();\n    };\n    Object.defineProperty(ImageInstance.prototype, \"size\", {\n        get: function () { return max(this.width, this.height); },\n        set: function (value) {\n            var aspect = this.width / this.height;\n            this.width = value * aspect;\n            this.height = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"element\", {\n        // The following are the getters for the locked in parameters of the image so we can read\n        // The properties but not set any of them.\n        /** This is the provided element this image will be rendering */\n        get: function () { return this._element; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"isDestroyed\", {\n        /** This flag indicates if this image is valid anymore */\n        get: function () { return this._isDestroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"path\", {\n        /** This is the path to the image's resource if it's available */\n        get: function () { return this._path; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"resource\", {\n        /** This gets the atlas resource that is uniquely idenfied for this image */\n        get: function () { return this._rasterization.resource; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"sourceWidth\", {\n        /**\n         * This is the width in world space of the image. If there is no camera distortion,\n         * this would be the width of the image in pixels on the screen.\n         */\n        get: function () {\n            return this._sourceWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"sourceHeight\", {\n        /**\n         * This is the height in world space of the image. If there is no camera distortion,\n         * this would be the height of the image in pixels on the screen.\n         */\n        get: function () {\n            return this._sourceHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Images are a sort of unique case where the use of a image should be destroyed as rasterization\n     * resources are in a way kept alive through reference counting.\n     */\n    ImageInstance.prototype.destroy = function () {\n        if (!this._isDestroyed) {\n            this._isDestroyed = true;\n            this._rasterization.references--;\n            // If all references are cleared, then the rasterization needs to be eradicated\n            if (this._rasterization.references === 0) {\n                this._rasterization.resource;\n                console.warn('The destroy method still needs completion');\n            }\n        }\n    };\n    Object.defineProperty(ImageInstance.prototype, \"anchor\", {\n        get: function () {\n            return this._anchor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This applies a new anchor to this image and properly determines it's anchor position on the image\n     */\n    ImageInstance.prototype.setAnchor = function (anchor) {\n        var newAnchor = {\n            padding: anchor.padding || 0,\n            type: anchor.type,\n            x: anchor.x || 0,\n            y: anchor.y || 0,\n        };\n        // Calculate the new anchors position values\n        anchorCalculator[newAnchor.type](newAnchor, this);\n        // Apply the anchor\n        this._anchor = newAnchor;\n    };\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"tint\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"depth\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"height\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"scaling\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"width\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"x\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"y\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"_anchor\", void 0);\n    return ImageInstance;\n}(instance_1.Instance));\nexports.ImageInstance = ImageInstance;\nvar _a;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the image as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the image is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y;\\n\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float(cameraScale.x != cameraScale.y);\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n\\n  // Get the tex coord from our inject texture info\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the image's tint as a tint to the image\\n  vertexColor = tint;\\n\\n  // Correct aspect ratio.\\n  size = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * size + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the image\\n  float imageScreenScale = mix(\\n    screenSize.y / size.y,\\n    screenSize.x / size.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the image is supposed to be, then we automagically\\n  // scale down our image to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / imageScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  gl_FragColor = texture2D(imageAtlas, texCoord) * vertexColor;\\n  setColor(gl_FragColor * gl_FragColor.a);\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar types_2 = require(\"../types\");\nvar min = Math.min, max = Math.max;\n/**\n * This layer displays Images and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar ImageLayer = /** @class */ (function (_super) {\n    __extends(ImageLayer, _super);\n    function ImageLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    ImageLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given image\n            boundsAccessor: function (image) {\n                var anchorEffect = [0, 0];\n                if (image.anchor) {\n                    anchorEffect[0] = image.anchor.x || 0;\n                    anchorEffect[1] = image.anchor.y || 0;\n                }\n                var topLeft = [\n                    image.x - anchorEffect[0],\n                    image.y - anchorEffect[1],\n                ];\n                return new primitives_1.Bounds({\n                    height: image.height,\n                    width: image.width,\n                    x: topLeft[0],\n                    y: topLeft[1],\n                });\n            },\n            // Provide a precise hit test for the circle\n            hitTest: function (image, point, view) {\n                // The bounds of the image is in world space, but it does not account for the scale mode of the image.\n                // Here, we will apply the scale mode testing to the image\n                var maxScale = max.apply(void 0, view.camera.scale);\n                var minScale = min.apply(void 0, view.camera.scale);\n                // If we scale always then the image stays within it's initial world bounds at all times\n                if (image.scaling === types_2.ScaleType.ALWAYS) {\n                    return true;\n                }\n                // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n                // Image the same size. If the camera zooms out then the bounds === the world bounds.\n                else if (image.scaling === types_2.ScaleType.BOUND_MAX) {\n                    // We are zooming out. the bounds will stay within the world bounds\n                    if (minScale <= 1 && maxScale <= 1) {\n                        return true;\n                    }\n                    // We are zooming in. The bounds will shrink to keep the image at max font size\n                    else {\n                        // The location is within the world, but we reverse project the anchor spread\n                        var anchorEffect = [0, 0];\n                        if (image.anchor) {\n                            anchorEffect[0] = image.anchor.x || 0;\n                            anchorEffect[1] = image.anchor.y || 0;\n                        }\n                        var topLeft = view.worldToScreen({\n                            x: image.x - (anchorEffect[0] / view.camera.scale[0]),\n                            y: image.y - (anchorEffect[1] / view.camera.scale[1]),\n                        });\n                        var screenPoint = view.worldToScreen(point);\n                        // Reverse project the size and we should be within the distorted world coordinates\n                        return new primitives_1.Bounds({\n                            height: image.height,\n                            width: image.width,\n                            x: topLeft.x,\n                            y: topLeft.y,\n                        }).containsPoint(screenPoint);\n                    }\n                }\n                // If we never allow the image to scale, then the bounds will grow and shrink to counter the effects\n                // Of the camera zoom\n                else if (image.scaling === types_2.ScaleType.NEVER) {\n                    // The location is within the world, but we reverse project the anchor spread\n                    var anchorEffect = [0, 0];\n                    if (image.anchor) {\n                        anchorEffect[0] = image.anchor.x || 0;\n                        anchorEffect[1] = image.anchor.y || 0;\n                    }\n                    var topLeft = view.worldToScreen({\n                        x: image.x - (anchorEffect[0] / view.camera.scale[0]),\n                        y: image.y - (anchorEffect[1] / view.camera.scale[1]),\n                    });\n                    var screenPoint = view.worldToScreen(point);\n                    // Reverse project the size and we should be within the distorted world coordinates\n                    return new primitives_1.Bounds({\n                        height: image.height,\n                        width: image.width,\n                        x: topLeft.x,\n                        y: topLeft.y,\n                    }).containsPoint(screenPoint);\n                }\n                return true;\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    ImageLayer.prototype.initShader = function () {\n        var _this = this;\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: 0,\n            1: 0,\n            2: 0,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./image-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'location',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'anchor',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.anchor.x || 0, o.anchor.y || 0]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'size',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.width, o.height]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'scaling',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scaling]; },\n                },\n                {\n                    atlas: {\n                        key: this.props.atlas || '',\n                        name: 'imageAtlas',\n                    },\n                    block: 2,\n                    name: 'texture',\n                    update: function (o) { return _this.resource.request(_this, o, o.resource); },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'tint',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.tint; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (u) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./image-layer.vs'),\n        };\n    };\n    ImageLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    ImageLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return ImageLayer;\n}(layer_1.Layer));\nexports.ImageLayer = ImageLayer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar instance_1 = require(\"../../util/instance\");\nvar EdgeInstance = /** @class */ (function (_super) {\n    __extends(EdgeInstance, _super);\n    function EdgeInstance(options) {\n        var _this = _super.call(this, options) || this;\n        _this.colorStart = [1.0, 1.0, 1.0, 1.0];\n        _this.colorEnd = [1.0, 1.0, 1.0, 1.0];\n        _this.control = [[0, 0], [0, 0]];\n        _this.depth = 0;\n        _this.end = [0, 0];\n        _this.start = [0, 0];\n        _this.widthStart = 1.0;\n        _this.widthEnd = 1.0;\n        _this.colorStart = options.colorStart || _this.colorStart;\n        _this.colorEnd = options.colorEnd || _this.colorEnd;\n        _this.control = options.control || _this.control;\n        _this.depth = options.depth || _this.depth;\n        _this.end = options.end || _this.end;\n        _this.widthStart = options.widthStart || _this.widthStart;\n        _this.widthEnd = options.widthEnd || _this.widthEnd;\n        _this.start = options.start || _this.start;\n        return _this;\n    }\n    Object.defineProperty(EdgeInstance.prototype, \"length\", {\n        get: function () {\n            var delta = [\n                this.end[0] - this.start[0],\n                this.end[1] - this.start[1],\n            ];\n            return Math.sqrt(delta[0] * delta[0] + delta[1] * delta[1]);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EdgeInstance.prototype, \"midpoint\", {\n        /**\n         * Calculates the midpoint of the edge\n         */\n        get: function () {\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EdgeInstance.prototype, \"perpendicular\", {\n        /**\n         * Calculates a perpendicular direction vector to the edge\n         */\n        get: function () {\n            var length = this.length;\n            return [\n                (this.end[1] - this.start[1]) / length,\n                -(this.end[0] - this.start[0]) / length,\n            ];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Applies the edge width to the start and end\n     */\n    EdgeInstance.prototype.setEdgeWidth = function (width) {\n        if (width) {\n            this.widthEnd = width;\n            this.widthStart = width;\n        }\n    };\n    /**\n     * Applies the color to the start and end\n     */\n    EdgeInstance.prototype.setColor = function (color) {\n        this.colorStart = color;\n        this.colorEnd = color;\n    };\n    __decorate([\n        instance_provider_1.observable\n    ], EdgeInstance.prototype, \"colorStart\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], EdgeInstance.prototype, \"colorEnd\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], EdgeInstance.prototype, \"control\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], EdgeInstance.prototype, \"depth\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], EdgeInstance.prototype, \"end\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], EdgeInstance.prototype, \"start\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], EdgeInstance.prototype, \"widthStart\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], EdgeInstance.prototype, \"widthEnd\", void 0);\n    return EdgeInstance;\n}(instance_1.Instance));\nexports.EdgeInstance = EdgeInstance;\n","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\n\\nvoid main() {\\n  setColor(vertexColor);\\n}\\n\"","module.exports = \"/**\\n  This vertex shader calculates edges based in world space to make an edge based on\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nprecision highp float;\\n\\nvarying vec4 vertexColor;\\n\\n// Interpolation type injection\\n${interpolation}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n\\n  // Convert our world points to screen space\\n  vec4 startClip = clipSpace(vec3(start, depth));\\n  vec4 endClip = clipSpace(vec3(end, depth));\\n  vec2 startScreen = (startClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  vec2 endScreen = (endClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Controls for this mode are screen space deltas from the end points\\n  vec2 control1 = startScreen + vec2(control.x, -control.y) * scaleFactor;\\n  vec2 control2 = endScreen + vec2(control.z, -control.w) * scaleFactor;\\n\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, startScreen, endScreen, control1, control2);\\n  // Calculate the next and previous segment's location on the line\\n  vec2 prePosition = interpolation(interpolationTime - interpolationIncrement, startScreen, endScreen, control1, control2);\\n  vec2 nextPosition = interpolation(interpolationTime + interpolationIncrement, startScreen, endScreen, control1, control2);\\n\\n  vec2 preLine = prePosition - currentPosition;\\n  vec2 nextLine = nextPosition - currentPosition;\\n\\n  // Get a spliced nromal at the joining of two segments to make a crisper curve\\n  vec2 currentNormal = mix(\\n    // Pick this value if we're at the beginning of the line\\n    normalize(vec2(preLine.y, -preLine.x)),\\n    mix(\\n      // Pick this value when we're between the ends\\n      normalize(vec2(preLine.y, -preLine.x) + vec2(-nextLine.y, nextLine.x)),\\n      // Pick this value if we're at the end of the line\\n      normalize(vec2(-nextLine.y, nextLine.x)),\\n      float(position.x >= 1.0)\\n    ),\\n    float(position.x > 0.0)\\n  );\\n\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (-normal * lineThickness * scaleFactor);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a;\\n\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), startClip.zw);\\n  gl_PointSize = 5.0;\\n}\\n\"","module.exports = \"precision highp float;\\n\\n/**\\n  This vertex shader calculates edges whose curve and width is in screen space where the curve is\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nvarying vec4 vertexColor;\\n\\n// Interpolation type injection\\n${interpolation}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, start, end, control.xy, control.zw);\\n  // Calculate the next and previous segment's location on the line\\n  vec2 prePosition = interpolation(interpolationTime - interpolationIncrement, start, end, control.xy, control.zw);\\n  vec2 nextPosition = interpolation(interpolationTime + interpolationIncrement, start, end, control.xy, control.zw);\\n\\n  vec2 preLine = prePosition - currentPosition;\\n  vec2 nextLine = nextPosition - currentPosition;\\n\\n  // Get a spliced nromal at the joining of two segments to make a crisper curve\\n  vec2 currentNormal = mix(\\n    // Pick this value if we're at the beginning of the line\\n    normalize(vec2(preLine.y, -preLine.x)),\\n    mix(\\n      // Pick this value when we're between the ends\\n      normalize(vec2(preLine.y, -preLine.x) + vec2(-nextLine.y, nextLine.x)),\\n      // Pick this value if we're at the end of the line\\n      normalize(vec2(-nextLine.y, nextLine.x)),\\n      float(position.x >= 1.0)\\n    ),\\n    float(position.x > 0.0)\\n  );\\n\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (normal * lineThickness);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a;\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n  gl_PointSize = 5.0;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  float t1 = 1.0 - t;\\n  return pow(t1, 3.0) * p1 + 3.0 * t * pow(t1, 2.0) * c1 + 3.0 * pow(t, 2.0) * t1 * c2 + pow(t, 3.0) * p2;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return (1.0 - t) * (1.0 - t) * p1 + 2.0 * t * (1.0 - t) * c1 + t * t * p2;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return p1 + (p2 - p1) * t;\\n}\\n\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\nvar vector_1 = require(\"../../util/vector\");\nvar types_1 = require(\"./types\");\nvar pow = Math.pow;\n/** This is an interpolation across a line */\nfunction linear(t, p1, p2, c1, c2) {\n    return vector_1.add2(vector_1.scale2(vector_1.subtract2(p2, p1), t), p1);\n}\n/** This is an interpolation across a bezier curve, single control */\nfunction bezier(t, p1, p2, c1, c2) {\n    return [\n        (1.0 - t) * (1.0 - t) * p1[0] + 2.0 * t * (1.0 - t) * c1[0] + t * t * p2[0],\n        (1.0 - t) * (1.0 - t) * p1[1] + 2.0 * t * (1.0 - t) * c1[1] + t * t * p2[1],\n    ];\n}\n/** This is an interpolation across a bezier curve, double control */\nfunction bezier2(t, p1, p2, c1, c2) {\n    var t1 = 1.0 - t;\n    return [\n        (pow(t1, 3.0) * p1[0]) + (3.0 * t * pow(t1, 2.0) * c1[0]) + (3.0 * pow(t, 2.0) * t1 * c2[0]) + (pow(t, 3.0) * p2[0]),\n        (pow(t1, 3.0) * p1[1]) + (3.0 * t * pow(t1, 2.0) * c1[1]) + (3.0 * pow(t, 2.0) * t1 * c2[1]) + (pow(t, 3.0) * p2[1]),\n    ];\n}\n/** A quick lookup for an interpolation method based on Edge Type */\nvar interpolation = (_a = {},\n    _a[types_1.EdgeType.LINE] = linear,\n    _a[types_1.EdgeType.BEZIER] = bezier,\n    _a[types_1.EdgeType.BEZIER2] = bezier2,\n    _a);\n/** Converts a point array to a point object */\nfunction toPointObject(point) {\n    return {\n        x: point[0],\n        y: point[1],\n    };\n}\n/** Converts a point object to a point array */\nfunction toPointArray(point) {\n    return [\n        point.x,\n        point.y,\n    ];\n}\n/** Takes two points that forms a line then calculates the nearest distance from that line to the third point */\nfunction distanceTo(start, end, p) {\n    // Make a vector from a line point to the indicated point\n    var vector = vector_1.subtract2(start, p);\n    var lineDirection = vector_1.subtract2(end, start);\n    var lineNormal = [lineDirection[1], -lineDirection[0]];\n    var distance = Math.abs(vector_1.dot2(vector, lineNormal)) / vector_1.length2(lineDirection);\n    // The distance is d = |v . r| where v is a unit perpendicular vector to the Line\n    return distance;\n}\n// This sets the number of iterations along a curve we sample to test collisions with\nvar TEST_RESOLUTION = 50;\n/**\n * This generates the picking methods needed for managing PickType.ALL for the edge layer.\n */\nfunction edgePicking(props) {\n    var broadphase = props.broadphase, _a = props.minPickDistance, minPickDistance = _a === void 0 ? 0 : _a, scaleType = props.scaleType, type = props.type;\n    var interpolate = interpolation[props.type];\n    var boundsAccessor = function (edge) {\n        var edgeWidthStart = edge.widthStart / 2 + minPickDistance;\n        var edgeWidthEnd = edge.widthEnd / 2 + minPickDistance;\n        // Encapsulate the endpoints as they are guaranteed to be included in the shape\n        // Each endpoint will be a box that includes the endpoint thickness\n        var bounds = new bounds_1.Bounds({\n            height: edge.widthStart,\n            width: edge.widthStart,\n            x: edge.start[0] - edgeWidthStart,\n            y: edge.start[1] - edgeWidthStart,\n        });\n        bounds.encapsulate(new bounds_1.Bounds({\n            height: edge.widthEnd,\n            width: edge.widthEnd,\n            x: edge.end[0] - edgeWidthEnd,\n            y: edge.end[1] - edgeWidthEnd,\n        }));\n        // Encapsulating the bezier control points is enough of a broadphase for beziers\n        if (props.type === types_1.EdgeType.BEZIER) {\n            bounds.encapsulate({\n                x: edge.control[0][0],\n                y: edge.control[0][1],\n            });\n        }\n        // Encapsulating the bezier control points is enough of a broadphase for beziers\n        else if (props.type === types_1.EdgeType.BEZIER2) {\n            bounds.encapsulate({\n                x: edge.control[0][0],\n                y: edge.control[0][1],\n            });\n            bounds.encapsulate({\n                x: edge.control[1][0],\n                y: edge.control[1][1],\n            });\n        }\n        if (broadphase === types_1.EdgeBroadphase.PASS_X) {\n            bounds.x = Number.MIN_SAFE_INTEGER / 2;\n            bounds.width = Number.MAX_SAFE_INTEGER;\n        }\n        if (broadphase === types_1.EdgeBroadphase.PASS_Y) {\n            bounds.y = Number.MIN_SAFE_INTEGER / 2;\n            bounds.height = Number.MAX_SAFE_INTEGER;\n        }\n        return bounds;\n    };\n    if (scaleType === types_1.EdgeScaleType.SCREEN_CURVE) {\n        return {\n            // Provide the calculated AABB world bounds for a given circle\n            boundsAccessor: boundsAccessor,\n            // Provide a precise hit test for the edge. This method performs all of the rendering\n            // And hit tests within screen space as opposed to world space.\n            hitTest: function (edge, point, view) {\n                point = view.worldToScreen(point);\n                var mouse = [point.x, point.y];\n                var closestIndex = 0;\n                var closestDistance = Number.MAX_VALUE;\n                var secondClosestIndex = 0;\n                var secondClosestDistance = Number.MAX_VALUE;\n                var start = view.worldToScreen(toPointObject(edge.start));\n                var end = view.worldToScreen(toPointObject(edge.end));\n                var control1 = [0, 0];\n                var control2 = [0, 0];\n                if (type === types_1.EdgeType.BEZIER) {\n                    control1 = vector_1.add2(toPointArray(start), edge.control[0]);\n                }\n                else if (type === types_1.EdgeType.BEZIER2) {\n                    control1 = vector_1.add2(toPointArray(start), edge.control[0]);\n                    control2 = vector_1.add2(toPointArray(end), edge.control[1]);\n                }\n                var startPoint = toPointArray(start);\n                var endPoint = toPointArray(end);\n                control1 = edge.control.length > 0 ? control1 : [0, 0];\n                control2 = edge.control.length > 1 ? control2 : [0, 0];\n                // Loop through sample points on the line and find one that is closest to the mouse point as possible\n                for (var i = 0; i < TEST_RESOLUTION; ++i) {\n                    var linePoint = interpolate(i / TEST_RESOLUTION, startPoint, endPoint, control1, control2);\n                    var distance = vector_1.length2(vector_1.subtract2(mouse, linePoint));\n                    if (distance < closestDistance) {\n                        secondClosestIndex = closestIndex;\n                        secondClosestDistance = closestDistance;\n                        closestIndex = i;\n                        closestDistance = distance;\n                    }\n                    else if (distance < secondClosestDistance) {\n                        secondClosestIndex = i;\n                        closestDistance = distance;\n                    }\n                }\n                var t = closestIndex / TEST_RESOLUTION;\n                var lineWidth = (edge.widthEnd - edge.widthStart) * t + edge.widthStart;\n                if (closestIndex === secondClosestIndex) {\n                    return false;\n                }\n                var startSegment = interpolate(closestIndex / TEST_RESOLUTION, startPoint, endPoint, control1, control2);\n                var endSegment = interpolate(secondClosestIndex / TEST_RESOLUTION, startPoint, endPoint, control1, control2);\n                // See how close the mouse is to the line between the two closest points for a more accurate\n                // Test\n                closestDistance = distanceTo(startSegment, endSegment, mouse);\n                // This helps determine if the mouse is beyond the end point\n                if (vector_1.dot2(vector_1.subtract2(endSegment, startSegment), vector_1.subtract2(mouse, startSegment)) < 0) {\n                    return false;\n                }\n                return closestDistance < ((lineWidth / 2.0) + minPickDistance);\n            },\n        };\n    }\n    return {\n        // Provide the calculated AABB world bounds for a given circle\n        boundsAccessor: boundsAccessor,\n        // Provide a precise hit test for the edge\n        hitTest: function (edge, point, view) {\n            var mouse = [point.x, point.y];\n            var closestIndex = 0;\n            var closestDistance = Number.MAX_VALUE;\n            // Loop through sample points on the line and find one that is closest to the mouse point as possible\n            for (var i = 0; i < TEST_RESOLUTION; ++i) {\n                var linePoint = interpolate(i / TEST_RESOLUTION, edge.start, edge.end, edge.control.length > 0 ? edge.control[0] : [0, 0], edge.control.length > 1 ? edge.control[1] : [0, 0]);\n                var distance = vector_1.length2(vector_1.subtract2(mouse, linePoint));\n                if (distance < closestDistance) {\n                    closestIndex = i;\n                    closestDistance = distance;\n                }\n            }\n            var t = closestIndex / TEST_RESOLUTION;\n            var lineWidth = (edge.widthEnd - edge.widthStart) * t + edge.widthStart;\n            return closestDistance < (lineWidth / 2.0);\n        },\n    };\n}\nexports.edgePicking = edgePicking;\nvar _a;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar util_1 = require(\"../../util\");\nvar edge_picking_1 = require(\"./edge-picking\");\nvar types_2 = require(\"./types\");\n/** Converts a control list to an IO value */\nfunction toInstanceIOValue(value) {\n    return [\n        value[0][0],\n        value[0][1],\n        value[1][0],\n        value[1][1],\n    ];\n}\n/** This picks the appropriate shader for the edge type desired */\nvar pickVS = (_a = {},\n    _a[types_2.EdgeType.LINE] = require('./shader/edge-layer-line.vs'),\n    _a[types_2.EdgeType.BEZIER] = require('./shader/edge-layer-bezier.vs'),\n    _a[types_2.EdgeType.BEZIER2] = require('./shader/edge-layer-bezier2.vs'),\n    _a);\n/** This is the base edge layer which is a template that can be filled with the needed specifics for a given line type */\nvar baseVS = require('./shader/edge-layer.vs');\nvar screenVS = require('./shader/edge-layer-screen-curve.vs');\nvar edgeFS = require('./shader/edge-layer.fs');\n/**\n * This layer displays edges and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar EdgeLayer = /** @class */ (function (_super) {\n    __extends(EdgeLayer, _super);\n    function EdgeLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    EdgeLayer.prototype.getInstancePickingMethods = function () {\n        return edge_picking_1.edgePicking(this.props);\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    EdgeLayer.prototype.initShader = function () {\n        var _a = this.props, _b = _a.scaleFactor, scaleFactor = _b === void 0 ? function () { return 1; } : _b, type = _a.type, _c = _a.scaleType, scaleType = _c === void 0 ? types_2.EdgeScaleType.NONE : _c;\n        var MAX_SEGMENTS = type === types_2.EdgeType.LINE ? 2 : 50;\n        // Calculate the normals and interpolations for our vertices\n        var vertexToNormal = (_d = {\n                0: 1\n            },\n            _d[MAX_SEGMENTS * 2 + 2] = -1,\n            _d);\n        var vertexInterpolation = (_e = {\n                0: 0\n            },\n            _e[MAX_SEGMENTS * 2 + 2] = 1,\n            _e);\n        var sign = 1;\n        for (var i = 0; i < MAX_SEGMENTS * 2; ++i) {\n            vertexToNormal[i + 1] = sign;\n            vertexInterpolation[i + 1] = Math.floor(i / 2) / (MAX_SEGMENTS - 1);\n            sign *= -1;\n        }\n        var vs = util_1.shaderTemplate(scaleType === types_2.EdgeScaleType.NONE ? baseVS : screenVS, {\n            // Retain the attributes injection\n            attributes: '${attributes}',\n            // Inject the proper interpolation method\n            interpolation: pickVS[type],\n        }, {\n            name: 'Edge Layer',\n            values: [\n                'interpolation',\n            ],\n        });\n        return {\n            fs: edgeFS,\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'start',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return o.start; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'end',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return o.end; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'widthStart',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.widthStart]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.TWO,\n                    name: 'widthEnd',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.widthEnd]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 2,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'colorStart',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.colorStart; },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'colorEnd',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.colorEnd; },\n                },\n                type === types_2.EdgeType.LINE ? {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'control',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return [0, 0, 0, 0]; },\n                } : null,\n                type === types_2.EdgeType.BEZIER ? {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'control',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return [o.control[0][0], o.control[0][1], 0, 0]; },\n                } : null,\n                type === types_2.EdgeType.BEZIER2 ? {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'control',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return toInstanceIOValue(o.control); },\n                } : null,\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (uniform) { return [scaleFactor()]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexInterpolation[vertex],\n                        // The number of vertices\n                        MAX_SEGMENTS * 2,\n                    ]; },\n                },\n            ],\n            vertexCount: MAX_SEGMENTS * 2 + 2,\n            vs: vs.shader,\n        };\n        var _d, _e;\n    };\n    EdgeLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    EdgeLayer.prototype.getMaterialOptions = function () {\n        return {\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    // Set default props for the layer\n    EdgeLayer.defaultProps = {\n        broadphase: types_2.EdgeBroadphase.ALL,\n        data: new instance_provider_1.InstanceProvider(),\n        key: 'none',\n        scaleType: types_2.EdgeScaleType.NONE,\n        type: types_2.EdgeType.LINE,\n    };\n    return EdgeLayer;\n}(layer_1.Layer));\nexports.EdgeLayer = EdgeLayer;\nvar _a;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./edge-layer\"));\n__export(require(\"./edge-instance\"));\n__export(require(\"./types\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar instance_1 = require(\"../../util/instance\");\nvar CircleInstance = /** @class */ (function (_super) {\n    __extends(CircleInstance, _super);\n    function CircleInstance(options) {\n        var _this = _super.call(this, options) || this;\n        _this.color = [1.0, 1.0, 1.0, 1.0];\n        _this.depth = 0;\n        _this.radius = 0;\n        _this.x = 0;\n        _this.y = 0;\n        _this.color = options.color || _this.color;\n        _this.radius = options.radius || _this.radius;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        _this.depth = options.depth || _this.depth;\n        return _this;\n    }\n    Object.defineProperty(CircleInstance.prototype, \"width\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CircleInstance.prototype, \"height\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        instance_provider_1.observable\n    ], CircleInstance.prototype, \"color\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], CircleInstance.prototype, \"depth\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], CircleInstance.prototype, \"radius\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], CircleInstance.prototype, \"x\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], CircleInstance.prototype, \"y\", void 0);\n    return CircleInstance;\n}(instance_1.Instance));\nexports.CircleInstance = CircleInstance;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float edgeSharpnessBase;\\nvarying vec2 pointCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  vertexColor = color * color.a;\\n  float size = radius * scaleFactor;\\n  edgeSharpness = mix(0.8, 0.0, min((size * 6.0 * pixelRatio) / (45.0 * pixelRatio), 1.0));\\n  edgeSharpnessBase = mix(0.1, 0.0, min((size * 6.0 * pixelRatio) / (45.0 * pixelRatio), 1.0));\\n  pointCoord = (position.xy + vec2(1.0, 1.0)) / 2.0;\\n\\n  // Center within clip space\\n  vec4 clipCenter = clipSpace(vec3(center, depth));\\n  // Center in screen space\\n  vec2 screenCenter = (clipCenter.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Position in screen space\\n  vec2 vertex = (position.xy * size) + screenCenter;\\n  // Position back to clip space\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), clipCenter.zw);\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float edgeSharpnessBase;\\nvarying vec2 pointCoord;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius + (radius * edgeSharpnessBase),\\n    dot(dist, dist) * 4.0\\n  );\\n}\\n\\nvoid main() {\\n  float step_factor = circle(pointCoord.xy, 1.0);\\n\\n  setColor(mix(\\n    vec4(0.0, 0.0, 0.0, 0.0),\\n    vertexColor,\\n    step_factor\\n  ));\\n}\\n\"","module.exports = \"void main() {\\n  gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n}\"","module.exports = \"\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\n/**\n * This manages mouse gestures broadcast to the layer and handles appropriate actions such as determining\n * how to make the interaction translate to picking events for the layer's instances.\n *\n * This class, in summary, takes in the gestures to the view and converts them to gestures to the instances.\n */\nvar LayerInteractionHandler = /** @class */ (function () {\n    function LayerInteractionHandler(layer) {\n        /** This tracks the elements that have the mouse currently over them */\n        this.isMouseOver = new Map();\n        /** This tracks the elements the mouse was down on */\n        this.isMouseDown = new Map();\n        this.layer = layer;\n    }\n    /**\n     * Retrieves the color picking instance determined for the procedure.\n     */\n    LayerInteractionHandler.prototype.getColorPickInstance = function () {\n        if (this.colorPicking) {\n            return this.layer.diffManager.colorPicking.uidToInstance.get(0xFFFFFF - this.colorPicking.nearestColor);\n        }\n        return null;\n    };\n    /**\n     * Handles mouse down gestures for a layer within a view\n     */\n    LayerInteractionHandler.prototype.handleMouseOver = function (view, mouse) {\n        // This is the mouse over for the view itself. We should probably just let the mouse move events handle the interactions\n        // With the instances\n    };\n    /**\n     * Handles mouse down gestures for a layer within a view\n     */\n    LayerInteractionHandler.prototype.handleMouseDown = function (view, mouse, button) {\n        var _this = this;\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type !== types_1.PickType.NONE) {\n            var onMouseDown = this.layer.props.onMouseDown;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseDown) {\n                var world_1 = view.viewToWorld(mouse);\n                var hitTest_1;\n                var query_1;\n                var querySpace = void 0;\n                var instances = [];\n                if (this.layer.picking.type === types_1.PickType.ALL) {\n                    hitTest_1 = this.layer.picking.hitTest;\n                    query_1 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                    querySpace = function (check) { return query_1(check).filter(function (o) { return hitTest_1(o, world_1, view); }); };\n                    instances = query_1(world_1).filter(function (o) { return hitTest_1(o, world_1, view); });\n                }\n                else if (this.layer.picking.type === types_1.PickType.SINGLE) {\n                    // Get the instance for the nearest color\n                    var instanceForColor = this.getColorPickInstance();\n                    if (instanceForColor) {\n                        instances.push(instanceForColor);\n                    }\n                }\n                var info = {\n                    button: button,\n                    instances: instances,\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: querySpace,\n                    screen: [mouse.x, mouse.y],\n                    world: [world_1.x, world_1.y],\n                };\n                onMouseDown(info);\n                // We track all the elements the mouse is currently down on\n                this.isMouseDown.clear();\n                instances.forEach(function (o) { return _this.isMouseDown.set(o, true); });\n            }\n        }\n    };\n    /**\n     * Handles mouse out events for a layer within the view\n     */\n    LayerInteractionHandler.prototype.handleMouseOut = function (view, mouse) {\n        // This will fire an instance mouse out for any over instances in the queue since we left the view\n        // Thus no instances shall be considered 'over'\n        if (this.layer.picking && this.layer.picking.type !== types_1.PickType.NONE) {\n            var onMouseOut = this.layer.props.onMouseOut;\n            if (onMouseOut) {\n                var world_2 = view.viewToWorld(mouse);\n                var hitTest_2;\n                var query_2;\n                var querySpace = void 0;\n                if (this.layer.picking.type === types_1.PickType.ALL) {\n                    hitTest_2 = this.layer.picking.hitTest;\n                    query_2 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                    querySpace = function (check) { return query_2(check).filter(function (o) { return hitTest_2(o, world_2, view); }); };\n                }\n                var info = {\n                    instances: Array.from(this.isMouseOver.keys()),\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: querySpace,\n                    screen: [mouse.x, mouse.y],\n                    world: [world_2.x, world_2.y],\n                };\n                onMouseOut(info);\n            }\n        }\n        // We clear as no instances are over anymore\n        this.isMouseOver.clear();\n        // We also clear all down elements as the mouse is no longer in proper context for the instances\n        // But since the mouse was never actually released, we do not fire an up\n        this.isMouseDown.clear();\n    };\n    /**\n     * Handles mouse up gestures for the layer within the provided view\n     */\n    LayerInteractionHandler.prototype.handleMouseUp = function (view, mouse, button) {\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type !== types_1.PickType.NONE) {\n            var onMouseUp = this.layer.props.onMouseUp;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseUp) {\n                var world_3 = view.viewToWorld(mouse);\n                var hitTest_3;\n                var query_3;\n                var querySpace = void 0;\n                var instances = [];\n                if (this.layer.picking.type === types_1.PickType.ALL) {\n                    hitTest_3 = this.layer.picking.hitTest;\n                    query_3 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                    querySpace = function (check) { return query_3(check).filter(function (o) { return hitTest_3(o, world_3, view); }); };\n                    instances = query_3(world_3).filter(function (o) { return hitTest_3(o, world_3, view); });\n                }\n                else if (this.layer.picking.type === types_1.PickType.SINGLE) {\n                    // Get the instance for the nearest color\n                    var instanceForColor = this.getColorPickInstance();\n                    if (instanceForColor) {\n                        instances.push(instanceForColor);\n                    }\n                }\n                var info = {\n                    button: button,\n                    instances: instances,\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: querySpace,\n                    screen: [mouse.x, mouse.y],\n                    world: [world_3.x, world_3.y],\n                };\n                onMouseUp(info);\n            }\n        }\n    };\n    /**\n     * Mouse move events on the layer will detect when instances have their item newly over or just moved on\n     */\n    LayerInteractionHandler.prototype.handleMouseMove = function (view, mouse) {\n        var _this = this;\n        // This handles interactions for PickType ALL layers\n        var _a = this.layer.props, onMouseOver = _a.onMouseOver, onMouseMove = _a.onMouseMove, onMouseOut = _a.onMouseOut;\n        if (this.layer.picking && this.layer.picking.type !== types_1.PickType.NONE) {\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseOver || onMouseMove || onMouseOut) {\n                var info = void 0;\n                var world_4 = view.viewToWorld(mouse);\n                var hitTest_4;\n                var query_4;\n                var querySpace = void 0;\n                var instances = [];\n                if (this.layer.picking.type === types_1.PickType.ALL) {\n                    hitTest_4 = this.layer.picking.hitTest;\n                    query_4 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                    querySpace = function (check) { return query_4(check).filter(function (o) { return hitTest_4(o, world_4, view); }); };\n                    instances = query_4(world_4).filter(function (o) { return hitTest_4(o, world_4, view); });\n                }\n                else if (this.layer.picking.type === types_1.PickType.SINGLE) {\n                    // Get the instance for the nearest color\n                    var instanceForColor = this.getColorPickInstance();\n                    if (instanceForColor) {\n                        instances.push(instanceForColor);\n                    }\n                }\n                // Broadcast the picking info for newly over instances to any of the layers listeners if needed\n                if (onMouseOver) {\n                    var notOverInstances = instances.filter(function (o) { return !_this.isMouseOver.get(o); });\n                    info = {\n                        instances: notOverInstances,\n                        layer: this.layer.id,\n                        projection: view,\n                        querySpace: querySpace,\n                        screen: [mouse.x, mouse.y],\n                        world: [world_4.x, world_4.y],\n                    };\n                    if (notOverInstances.length > 0)\n                        onMouseOver(info);\n                }\n                // Broadcast the the picking info for all instances that the mouse moved on\n                if (onMouseMove) {\n                    // This is the pick info object we will broadcast from the layer\n                    info = {\n                        instances: instances,\n                        layer: this.layer.id,\n                        projection: view,\n                        querySpace: querySpace,\n                        screen: [mouse.x, mouse.y],\n                        world: [world_4.x, world_4.y],\n                    };\n                    onMouseMove(info);\n                }\n                // We take the hovered instances\n                var isCurrentlyOver_1 = new Map();\n                instances.forEach(function (o) { return isCurrentlyOver_1.set(o, true); });\n                // Broadcast the the picking info for all instances that the mouse moved off of\n                if (onMouseOut) {\n                    var noLongerOver = Array.from(this.isMouseOver.keys()).filter(function (o) { return !isCurrentlyOver_1.get(o); });\n                    // This is the pick info object we will broadcast from the layer\n                    info = {\n                        instances: noLongerOver,\n                        layer: this.layer.id,\n                        projection: view,\n                        querySpace: querySpace,\n                        screen: [mouse.x, mouse.y],\n                        world: [world_4.x, world_4.y],\n                    };\n                    if (noLongerOver.length > 0)\n                        onMouseOut(info);\n                }\n                // We store the current hovered over items as our over item list for next interaction\n                this.isMouseOver = isCurrentlyOver_1;\n            }\n        }\n    };\n    /**\n     * Handles click gestures on the layer within a view\n     */\n    LayerInteractionHandler.prototype.handleMouseClick = function (view, mouse, button) {\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type !== types_1.PickType.NONE) {\n            var onMouseClick = this.layer.props.onMouseClick;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseClick) {\n                var world_5 = view.viewToWorld(mouse);\n                var hitTest_5;\n                var query_5;\n                var querySpace = void 0;\n                var instances = [];\n                if (this.layer.picking.type === types_1.PickType.ALL) {\n                    hitTest_5 = this.layer.picking.hitTest;\n                    query_5 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                    querySpace = function (check) { return query_5(check).filter(function (o) { return hitTest_5(o, world_5, view); }); };\n                    instances = query_5(world_5).filter(function (o) { return hitTest_5(o, world_5, view); });\n                }\n                else if (this.layer.picking.type === types_1.PickType.SINGLE) {\n                    // Get the instance for the nearest color\n                    var instanceForColor = this.getColorPickInstance();\n                    if (instanceForColor) {\n                        instances.push(instanceForColor);\n                    }\n                }\n                var info = {\n                    button: button,\n                    instances: instances,\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: querySpace,\n                    screen: [mouse.x, mouse.y],\n                    world: [world_5.x, world_5.y],\n                };\n                onMouseClick(info);\n            }\n        }\n    };\n    /**\n     * Handles drag gestures for the layer within the view\n     */\n    LayerInteractionHandler.prototype.handleMouseDrag = function (view, mouse) {\n        // We probably should not broadcast drag events for the sake of instances. Instance dragging should be handled on\n        // An instance by instance basis rather than coming from the view's gestures\n    };\n    return LayerInteractionHandler;\n}());\nexports.LayerInteractionHandler = LayerInteractionHandler;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\n// This is a mapping of the vector properties as they relate to an array order\nvar VECTOR_ACCESSORS = ['x', 'y', 'z', 'w'];\n/**\n * This class manages the process of taking the diffs of a layer and executing methods on those diffs to perform\n * updates to the uniforms that control those instances.\n */\nvar InstanceDiffManager = /** @class */ (function () {\n    function InstanceDiffManager(layer) {\n        this.layer = layer;\n    }\n    /**\n     * This returns the proper diff processor for handling diffs\n     */\n    InstanceDiffManager.prototype.getDiffProcessor = function () {\n        if (this.layer.picking) {\n            if (this.layer.picking.type === types_1.PickType.ALL) {\n                this.quadPicking = this.layer.picking;\n                return [\n                    this.changeInstanceQuad,\n                    this.addInstanceQuad,\n                    this.removeInstanceQuad,\n                ];\n            }\n            else if (this.layer.picking.type === types_1.PickType.SINGLE) {\n                this.colorPicking = this.layer.picking;\n                this.colorPicking.uidToInstance = new Map();\n                return [\n                    this.changeInstanceColorPick,\n                    this.addInstanceColorPick,\n                    this.removeInstanceColorPick,\n                ];\n            }\n        }\n        return [\n            this.changeInstance,\n            this.addInstance,\n            this.removeInstance,\n        ];\n    };\n    /**\n     * This processes add operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.addInstance = function (manager, instance, uniformCluster) {\n        // If the uniform cluster already exists, then we swap over to a change update\n        if (uniformCluster) {\n            manager.changeInstance(manager, instance, uniformCluster);\n        }\n        // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n        else {\n            var uniforms = manager.layer.uniformManager.add(instance);\n            if (uniforms) {\n                instance.active = true;\n                manager.updateInstance(instance, uniforms);\n            }\n        }\n    };\n    /**\n     * This processes add operations from changes in the instancing data and manages the layer's quad tree\n     * with the instance as well.\n     */\n    InstanceDiffManager.prototype.addInstanceQuad = function (manager, instance, uniformCluster) {\n        // If the uniform cluster already exists, then we swap over to a change update\n        if (uniformCluster) {\n            manager.changeInstanceQuad(manager, instance, uniformCluster);\n        }\n        // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n        else {\n            var uniforms = manager.layer.uniformManager.add(instance);\n            if (uniforms) {\n                instance.active = true;\n                manager.updateInstance(instance, uniforms);\n                // Ensure the instance has an updated injection in the quad tree\n                manager.quadPicking.quadTree.remove(instance);\n                manager.quadPicking.quadTree.add(instance);\n            }\n        }\n    };\n    /**\n     * This processes add operations from changes in the instancing data and manages the layer's matching of\n     * color / UID to Instance\n     */\n    InstanceDiffManager.prototype.addInstanceColorPick = function (manager, instance, uniformCluster) {\n        // If the uniform cluster already exists, then we swap over to a change update\n        if (uniformCluster) {\n            manager.changeInstanceColorPick(manager, instance, uniformCluster);\n        }\n        // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n        else {\n            var uniforms = manager.layer.uniformManager.add(instance);\n            if (uniforms) {\n                instance.active = true;\n                manager.updateInstance(instance, uniforms);\n                // Make sure the instance is mapped to it's UID\n                manager.colorPicking.uidToInstance.set(instance.uid, instance);\n            }\n            else {\n                console.warn('A data cluster was not provided by the manager to associate an instance with.');\n            }\n        }\n    };\n    /**\n     * This processes change operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.changeInstance = function (manager, instance, uniformCluster) {\n        // If there is an existing uniform cluster for this instance, then we can update the uniforms\n        if (uniformCluster) {\n            manager.updateInstance(instance, uniformCluster);\n        }\n        // If we don't have existing uniforms, then we must remove the instance\n        else {\n            manager.addInstance(manager, instance, uniformCluster);\n        }\n    };\n    /**\n     * This processes change operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.changeInstanceQuad = function (manager, instance, uniformCluster) {\n        // If there is an existing uniform cluster for this instance, then we can update the uniforms\n        if (uniformCluster) {\n            manager.updateInstance(instance, uniformCluster);\n            // Ensure the instance has an updated injection in the quad tree\n            manager.quadPicking.quadTree.remove(instance);\n            manager.quadPicking.quadTree.add(instance);\n        }\n        // If we don't have existing uniforms, then we must remove the instance\n        else {\n            manager.addInstanceQuad(manager, instance, uniformCluster);\n        }\n    };\n    /**\n     * This processes change operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.changeInstanceColorPick = function (manager, instance, uniformCluster) {\n        // If there is an existing uniform cluster for this instance, then we can update the uniforms\n        if (uniformCluster) {\n            manager.updateInstance(instance, uniformCluster);\n        }\n        // If we don't have existing uniforms, then we must remove the instance\n        else {\n            manager.addInstanceColorPick(manager, instance, uniformCluster);\n        }\n    };\n    /**\n     * This processes remove operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.removeInstance = function (manager, instance, uniformCluster) {\n        if (uniformCluster) {\n            // We deactivate the instance so it does not render anymore\n            instance.active = false;\n            // We do one last update on the instance to update to it's deactivated state\n            manager.updateInstance(instance, uniformCluster);\n            // Unlink the instance from the uniform cluster\n            manager.layer.uniformManager.remove(instance);\n        }\n    };\n    /**\n     * This processes remove operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.removeInstanceQuad = function (manager, instance, uniformCluster) {\n        if (uniformCluster) {\n            // We deactivate the instance so it does not render anymore\n            instance.active = false;\n            // We do one last update on the instance to update to it's deactivated state\n            manager.updateInstance(instance, uniformCluster);\n            // Unlink the instance from the uniform cluster\n            manager.layer.uniformManager.remove(instance);\n            // Remove the instance from our quad tree\n            manager.quadPicking.quadTree.remove(instance);\n        }\n    };\n    /**\n     * This processes remove operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.removeInstanceColorPick = function (manager, instance, uniformCluster) {\n        if (uniformCluster) {\n            // We deactivate the instance so it does not render anymore\n            instance.active = false;\n            // We do one last update on the instance to update to it's deactivated state\n            manager.updateInstance(instance, uniformCluster);\n            // Unlink the instance from the uniform cluster\n            manager.layer.uniformManager.remove(instance);\n            // Remove the instance from our quad tree\n            manager.colorPicking.uidToInstance.delete(instance.uid);\n        }\n    };\n    InstanceDiffManager.prototype.updateInstance = function (instance, uniformCluster) {\n        if (instance.active) {\n            var uniforms = uniformCluster.uniform;\n            var uniformRangeStart = uniformCluster.uniformRange[0];\n            var instanceData = uniforms.value;\n            var instanceUniform = void 0, value = void 0, block = void 0, start = void 0;\n            var k = void 0, endk = void 0;\n            // Loop through the instance attributes and update the uniform cluster with the valaues\n            // Calculated for the instance\n            for (var i = 0, end = this.layer.instanceAttributes.length; i < end; ++i) {\n                instanceUniform = this.layer.instanceAttributes[i];\n                value = instanceUniform.update(instance);\n                block = instanceData[uniformRangeStart + instanceUniform.block];\n                instanceUniform.atlas && this.layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n                start = instanceUniform.blockIndex;\n                if (start === undefined) {\n                    continue;\n                }\n                // Hyper optimized vector filling routine. It uses properties that are globally scoped\n                // To greatly reduce overhead\n                for (k = start, endk = value.length + start; k < endk; ++k) {\n                    block[VECTOR_ACCESSORS[k]] = value[k - start];\n                }\n            }\n            uniforms.value = instanceData;\n        }\n        else {\n            var uniforms = uniformCluster.uniform;\n            var uniformRangeStart = uniformCluster.uniformRange[0];\n            var instanceData = uniforms.value;\n            var instanceUniform = void 0, value = void 0, block = void 0, start = void 0;\n            // Only update the _active attribute to ensure it is false. When it is false, there is no\n            // Point to updating any other uniform\n            instanceUniform = this.layer.activeAttribute;\n            value = instanceUniform.update(instance);\n            block = instanceData[uniformRangeStart + instanceUniform.block];\n            instanceUniform.atlas && this.layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n            start = instanceUniform.blockIndex;\n            if (start !== undefined) {\n                // Hyper optimized vector filling routine. It uses properties that are globally scoped\n                // To greatly reduce overhead\n                for (var k = start, endk = value.length + start; k < endk; ++k) {\n                    block[VECTOR_ACCESSORS[k]] = value[k - start];\n                }\n            }\n            uniforms.value = instanceData;\n        }\n    };\n    return InstanceDiffManager;\n}());\nexports.InstanceDiffManager = InstanceDiffManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Calculates the distance between two points, but keeps the distance in dquared form\n * thus performing Math.sqrt() on the output of this distance would provide the true\n * distance between the points.\n *\n * It is often faster and all that is needed to compare squared distances vs real distances\n * thus eliminating multiple Math.sqrt operations\n *\n * NOTE: For vectors this is the same as (pseudo code):\n * let vector3 = vector2.subtract(vector1)\n * return vector3.dot(vector3)\n *\n * @param p1 The point to find the distance from the second point\n * @param p2 The point to find the distance from the first point\n *\n * @return {number} The distance * distance between the two points\n */\nfunction squareDistance(p1, p2) {\n    var dx = p1.x - p2.x;\n    var dy = p1.y - p2.y;\n    return dx * dx + dy * dy;\n}\n/**\n * Contains methods for managing or manipulating points\n *\n * @export\n * @class Point\n */\nvar Point = /** @class */ (function () {\n    function Point() {\n    }\n    /**\n     * Adds two points together\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @return {IPoint} The two points added together\n     */\n    Point.add = function (p1, p2, out) {\n        if (out) {\n            out.x = p1.x + p2.x;\n            out.y = p1.y + p2.y;\n            return out;\n        }\n        return {\n            x: p1.x + p2.x,\n            y: p1.y + p2.y,\n        };\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {IPoint} The closest point to the test point\n     */\n    Point.getClosest = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = testPoint;\n        var distance;\n        var findClosest = function (point) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = point;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * This just returns the index of the found point and not the point itself\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {number} The index of the closest point to the test point\n     */\n    Point.getClosestIndex = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = 0;\n        var distance;\n        var findClosest = function (point, i) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = i;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This will calculate a direction vector between two points that points toward p2\n     *\n     * @param {IPoint} amount The start of the direction\n     * @param {IPoint} from The direction to point the vector towards\n     * @param {boolean} normalize If true, this will make the vector have a magnitude of 1\n     *\n     * @returns {number}\n     */\n    Point.subtract = function (amount, from, normalize) {\n        if (normalize === void 0) { normalize = false; }\n        var dx = from.x - amount.x;\n        var dy = from.y - amount.y;\n        if (normalize) {\n            var magnitude = Math.sqrt(dx * dx + dy * dy);\n            dx /= magnitude;\n            dy /= magnitude;\n        }\n        return {\n            x: dx,\n            y: dy,\n        };\n    };\n    /**\n     * @static\n     * Gets the distance between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {boolean} squared If set to true, returns the distance * distance (performs faster)\n     *\n     * @returns {number} The real distance between two points\n     */\n    Point.getDistance = function (p1, p2, squared) {\n        if (squared === void 0) { squared = false; }\n        if (squared) {\n            return squareDistance(p1, p2);\n        }\n        return Math.sqrt(squareDistance(p1, p2));\n    };\n    /**\n     * @static\n     * Gets a point perfectly between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     *\n     * @returns {IPoint} The point between the two provided points\n     */\n    Point.getMidpoint = function (p1, p2) {\n        var direction = Point.subtract(p1, p2);\n        return {\n            x: direction.x / 2 + p1.x,\n            y: direction.y / 2 + p1.y,\n        };\n    };\n    Point.make = function (x, y) {\n        return { x: x, y: y };\n    };\n    /**\n     * Scales a point by a given amount\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {number} s The amount to scale the point by\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @memberof Point\n     */\n    Point.scale = function (p1, s, out) {\n        if (out) {\n            out.x = p1.x * s;\n            out.y = p1.y * s;\n            return out;\n        }\n        return {\n            x: p1.x * s,\n            y: p1.y * s,\n        };\n    };\n    /**\n     * Makes a new point initialized to {0,0}\n     *\n     * @static\n     * @returns {IPoint} A new point object at {0,0}\n     */\n    Point.zero = function () {\n        return {\n            x: 0,\n            y: 0,\n        };\n    };\n    return Point;\n}());\nexports.Point = Point;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar CircleLayer = /** @class */ (function (_super) {\n    __extends(CircleLayer, _super);\n    function CircleLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    CircleLayer.prototype.getInstancePickingMethods = function () {\n        var _this = this;\n        var noScaleFactor = function () { return 1; };\n        return {\n            // Provide the calculated AABB world bounds for a given circle\n            boundsAccessor: function (circle) { return new primitives_1.Bounds({\n                height: circle.radius * 2,\n                width: circle.radius * 2,\n                x: circle.x - circle.radius,\n                y: circle.y - circle.radius,\n            }); },\n            // Provide a precise hit test for the circle\n            hitTest: function (circle, point, view) {\n                var circleScreenCenter = view.worldToScreen(circle);\n                var mouseScreen = view.worldToScreen(point);\n                var r = circle.radius * (_this.props.scaleFactor || noScaleFactor)();\n                var delta = [\n                    mouseScreen.x - circleScreenCenter.x,\n                    mouseScreen.y - circleScreenCenter.y,\n                ];\n                return (delta[0] * delta[0] + delta[1] * delta[1]) < (r * r);\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    CircleLayer.prototype.initShader = function () {\n        var scaleFactor = this.props.scaleFactor || (function () { return 1; });\n        var animations = this.props.animate || {};\n        var animateCenter = animations.center, animateRadius = animations.radius, animateColor = animations.color;\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: -1,\n            1: -1,\n            2: -1,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./circle-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    easing: animateCenter,\n                    name: 'center',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (circle) { return [circle.x, circle.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    easing: animateRadius,\n                    name: 'radius',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (circle) { return [circle.radius]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (circle) { return [circle.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    easing: animateColor,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (circle) { return circle.color; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (uniform) { return [scaleFactor()]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./circle-layer.vs'),\n        };\n    };\n    CircleLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    CircleLayer.prototype.getMaterialOptions = function () {\n        return {\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    CircleLayer.defaultProps = {\n        data: new instance_provider_1.InstanceProvider(),\n        fadeOutOversized: -1,\n        key: '',\n        scaleFactor: function () { return 1; },\n    };\n    return CircleLayer;\n}(layer_1.Layer));\nexports.CircleLayer = CircleLayer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./circle-layer\"));\n__export(require(\"./circle-instance\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./circles\"));\n__export(require(\"./edges\"));\n__export(require(\"./images\"));\n__export(require(\"./labels\"));\n__export(require(\"./rectangle\"));\n__export(require(\"./rings\"));\n__export(require(\"./types\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar UID = 0;\n/**\n * Provides a 64 bit UID.\n *\n * Note: all uids generated with uid() are unique amongst uid() calls and NOT unique amongst\n * other types of uid calls.\n */\nfunction uid() {\n    return ++UID;\n}\nexports.uid = uid;\nvar CUID = 0;\n/**\n * Provides a 24 bit UID (keeps the UID within non-alpha color ranges)\n *\n * Note: all uids generated with colorUID() are unique amongst colorUID() calls and NOT unique amongst\n * other types of uid calls.\n */\nfunction colorUID() {\n    return (++CUID) % 0xFFFFFF;\n}\nexports.colorUID = colorUID;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nvar maxPopulation = 5;\nvar maxDepth = 10;\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n */\nvar Quadrants = /** @class */ (function () {\n    /**\n     * Creates an instance of Quadrants.\n     *\n     * @param bounds The bounds this will create quandrants for\n     * @param depth  The child depth of this element\n     */\n    function Quadrants(bounds, depth, getBounds, childToNode, childToBounds) {\n        var mid = bounds.mid;\n        this.TL = new Node(bounds.x, mid.x, bounds.y, mid.y, getBounds, depth);\n        this.TR = new Node(mid.x, bounds.right, bounds.y, mid.y, getBounds, depth);\n        this.BL = new Node(bounds.x, mid.x, mid.y, bounds.bottom, getBounds, depth);\n        this.BR = new Node(mid.x, bounds.right, mid.y, bounds.bottom, getBounds, depth);\n        this.TL.childToNode = childToNode;\n        this.TR.childToNode = childToNode;\n        this.BL.childToNode = childToNode;\n        this.BR.childToNode = childToNode;\n        this.TL.childToBounds = childToBounds;\n        this.TR.childToBounds = childToBounds;\n        this.BL.childToBounds = childToBounds;\n        this.BR.childToBounds = childToBounds;\n    }\n    /**\n     * Ensures all memory is released for all nodes and all references are removed\n     * to potentially high memory consumption items\n     */\n    Quadrants.prototype.destroy = function () {\n        this.TL.destroy();\n        this.TR.destroy();\n        this.BL.destroy();\n        this.BR.destroy();\n        delete this.TL;\n        delete this.TR;\n        delete this.BL;\n        delete this.BR;\n    };\n    return Quadrants;\n}());\nexports.Quadrants = Quadrants;\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n */\nvar Node = /** @class */ (function () {\n    /**\n     * Creates an instance of Node.\n     */\n    function Node(left, right, top, bottom, getBounds, depth) {\n        if (depth === void 0) { depth = 0; }\n        /** These are the child Instances of the node. */\n        this.children = [];\n        /** This is how deep the node is within the tree */\n        this.depth = 0;\n        /** These are the child nodes of this quad node when this node is split. It is null if the node is not split yet */\n        this.nodes = null;\n        // If params insertted\n        if (arguments.length >= 4) {\n            this.bounds = new bounds_1.Bounds({ left: left, right: right, top: top, bottom: bottom });\n        }\n        else {\n            // Otherwise, make tiny start area\n            this.bounds = new bounds_1.Bounds({ left: 0, right: 1, top: 1, bottom: 0 });\n        }\n        // Ensure the depth is set\n        this.depth = depth;\n        // Apply the bounds accessor method for instances\n        this.getBounds = getBounds;\n        // If this is the top level node, we need to instantiate the lookup that will be used\n        // Across all nodes.\n        if (this.depth === 0) {\n            this.nullBounded = [];\n            this.childToNode = new Map();\n            this.childToBounds = new Map();\n        }\n    }\n    /**\n     * Destroys this node and ensures all child nodes are destroyed as well.\n     */\n    Node.prototype.destroy = function () {\n        delete this.children;\n        delete this.bounds;\n        if (this.nodes) {\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n    };\n    /**\n     * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n     * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n     * this quad tree spans (and this is the root node), the quad tree will expand to include\n     * the new child.\n     *\n     * @param child The Bounds type object to inject\n     * @param props Properties that can be retrieved with the child object if applicable\n     *\n     * @returns True if the insertion was successful\n     */\n    Node.prototype.add = function (child) {\n        var bounds = this.childToBounds.get(child);\n        if (!bounds) {\n            // First we access the bounds of the child and store it\n            bounds = this.getBounds(child);\n            this.childToBounds.set(child, bounds);\n        }\n        // This is the entry function for adding children, so we must first expand our top node\n        // To cover the area that the child is located.\n        // If we're in bounds, then let's just add the child\n        if (!bounds || bounds.isInside(this.bounds)) {\n            return this.doAdd(child, bounds);\n        }\n        else {\n            // Otherwise, we need to expand first\n            this.cover(bounds);\n            return this.add(child);\n        }\n    };\n    /**\n     * Adds a list of new children to this quad tree. It performs the same operations as\n     * addChild for each child in the list, however, it more efficiently recalculates the\n     * bounds necessary to cover the area the children cover.\n     *\n     * @param children      List of Bounds objects to inject\n     */\n    Node.prototype.addAll = function (children) {\n        var _this = this;\n        // Make sure we cover the entire area of all the children.\n        // We can speed this up a lot if we first calculate the total bounds the new children covers\n        var minX = Number.MAX_VALUE;\n        var minY = Number.MAX_VALUE;\n        var maxX = -Number.MAX_VALUE;\n        var maxY = -Number.MAX_VALUE;\n        // Get the dimensions of the new bounds\n        children.forEach(function (child) {\n            var bounds = _this.getBounds(child);\n            _this.childToBounds.set(child, bounds);\n            if (!bounds)\n                return;\n            if (bounds.x < minX) {\n                minX = bounds.x;\n            }\n            if (bounds.right > maxX) {\n                maxX = bounds.right;\n            }\n            if (bounds.bottom > maxY) {\n                maxY = bounds.bottom;\n            }\n            if (bounds.y < minY) {\n                minY = bounds.y;\n            }\n        });\n        // Ensure a valid cover dimension was established. If no valid dimension is established\n        // Then we don't cover, but we can still add the children as that have null Bounds which\n        // Means injecting at the top level.\n        if (minX !== Number.MAX_VALUE &&\n            minY !== Number.MAX_VALUE &&\n            maxX !== -Number.MAX_VALUE &&\n            maxY !== -Number.MAX_VALUE) {\n            // Make sure our bounds includes the specified bounds\n            this.cover(new bounds_1.Bounds({ left: minX, right: maxX, bottom: maxY, top: minY }));\n        }\n        // Add all of the children into the tree.\n        children.forEach(function (child, index) { return _this.doAdd(child, _this.childToBounds.get(child) || null, true); });\n    };\n    /**\n     * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n     * This will cause all children to be re-injected into the tree.\n     *\n     * @param bounds The bounds to include in the tree's coverage\n     */\n    Node.prototype.cover = function (bounds) {\n        var _this = this;\n        // If we are already covering the area: abort\n        if (bounds.isInside(this.bounds)) {\n            return;\n        }\n        // Make our bounds cover the new area\n        this.bounds.encapsulate(bounds);\n        this.bounds.x -= 1;\n        this.bounds.y -= 1;\n        this.bounds.width += 2;\n        this.bounds.height += 2;\n        // Get all of the children underneath this node\n        var allChildren = this.gatherChildren([]);\n        this.children = [];\n        // Destroy the split nodes\n        if (this.nodes) {\n            // Completely...destroy...\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n        // Clear out the child to node relations\n        this.childToNode.clear();\n        // Reinsert all children with the new dimensions in place\n        allChildren.forEach(function (child, index) { return _this.doAdd(child, _this.childToBounds.get(child) || null); });\n    };\n    /**\n     * When adding children, this performs the actual action of injecting the child into the tree\n     * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n     *\n     * @param child The Bounds item to inject into the tree\n     * @param props The props to remain associated with the child\n     *\n     * @returns True if the injection was successful\n     */\n    Node.prototype.doAdd = function (child, bounds, fromSplit) {\n        // If this is the top level node and the bounds are null, then we add to the null list\n        if (!bounds && this.depth === 0) {\n            this.nullBounded.push(child);\n            this.childToNode.set(child, this);\n            return true;\n        }\n        // If no bounds is available at this point, something went terribly wrong\n        if (!bounds) {\n            console.warn('A null bounds was added to a Quad Tree node below the top node, which is invalid.');\n            return false;\n        }\n        // If bounds are null, then just immediately add\n        // If nodes are present, then we have already exceeded the population of this node\n        if (this.nodes) {\n            if (bounds.isInside(this.nodes.TL.bounds)) {\n                return this.nodes.TL.doAdd(child, bounds, fromSplit);\n            }\n            if (bounds.isInside(this.nodes.TR.bounds)) {\n                return this.nodes.TR.doAdd(child, bounds, fromSplit);\n            }\n            if (bounds.isInside(this.nodes.BL.bounds)) {\n                return this.nodes.BL.doAdd(child, bounds, fromSplit);\n            }\n            if (bounds.isInside(this.nodes.BR.bounds)) {\n                return this.nodes.BR.doAdd(child, bounds, fromSplit);\n            }\n            // Otherwise, this is a child overlapping this border\n            this.children.push(child);\n            this.childToNode.set(child, this);\n            return true;\n        }\n        else if (bounds.isInside(this.bounds)) {\n            // Otherwise, we have not had a split due to population limits being exceeded\n            this.children.push(child);\n            this.childToNode.set(child, this);\n            // If we exceeded our population for this quadrant, it is time to split up\n            if (this.children.length > maxPopulation && this.depth < maxDepth) {\n                this.split();\n            }\n            return true;\n        }\n        // This is when there is something wrong with the insertted child. The bounds\n        // For the quad should have grown without issue, but in this case the bounds\n        // Could not grow to accomodate the child.\n        if (isNaN(bounds.width + bounds.height + bounds.x + bounds.y)) {\n            console.error('Child did not fit into bounds because a dimension is NaN', child, bounds);\n        }\n        else if (bounds.area === 0) {\n            console.error('Child did not fit into bounds because the area is zero', child, bounds);\n        }\n        else {\n            console.error('Child did not get insertted.', 'Parent:', this.bounds.toString(), 'Child:', bounds.toString(), 'Inside Checks:', bounds.x >= this.bounds.x, bounds.right <= this.bounds.right, bounds.y >= this.bounds.y, bounds.bottom <= this.bounds.bottom);\n        }\n        // Don't insert the child and continue\n        return true;\n    };\n    Node.prototype.doRemove = function (child) {\n        var index = this.children.indexOf(child);\n        if (index > -1) {\n            this.children.splice(index, 1);\n            this.childToNode.delete(child);\n            this.childToBounds.delete(child);\n        }\n    };\n    /**\n     * Collects all children of all the current and sub nodes into a single list.\n     *\n     * @param list The list we must aggregate children into\n     *\n     * @return The list specified as the list parameter\n     */\n    Node.prototype.gatherChildren = function (list) {\n        this.children.forEach(function (child) { return list.push(child); });\n        if (this.nodes) {\n            this.nodes.TL.gatherChildren(list);\n            this.nodes.TR.gatherChildren(list);\n            this.nodes.BL.gatherChildren(list);\n            this.nodes.BR.gatherChildren(list);\n        }\n        return list;\n    };\n    /**\n     * Entry query for determining query type based on input object\n     *\n     * @param bounds Can be a Bounds or a Point object\n     * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n     *               information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return An array of children that intersects with the query\n     */\n    Node.prototype.query = function (bounds, visit) {\n        // This stores all of the found Instances when querying by bounds or point\n        var found = [];\n        // If this is the top level node then add in the null bunded items as the start\n        if (this.depth === 0) {\n            found = this.nullBounded.slice(0);\n        }\n        // Query a rectangle\n        if (bounds instanceof bounds_1.Bounds) {\n            if (bounds.hitBounds(this.bounds)) {\n                return this.queryBounds(bounds, found, visit);\n            }\n        }\n        // Query a point\n        if (this.bounds.containsPoint(bounds)) {\n            return this.queryPoint(bounds, found, visit);\n        }\n        // Return an empty array when nothing is collided with\n        return found;\n    };\n    /**\n     * Queries children for intersection with a bounds object\n     *\n     * @param b     The Bounds to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return     Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryBounds = function (b, list, visit) {\n        var _this = this;\n        this.children.forEach(function (c) {\n            var bounds = _this.childToBounds.get(c);\n            if (bounds && bounds.hitBounds(b)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (b.hitBounds(this.nodes.TL.bounds)) {\n                this.nodes.TL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.TR.bounds)) {\n                this.nodes.TR.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BL.bounds)) {\n                this.nodes.BL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BR.bounds)) {\n                this.nodes.BR.queryBounds(b, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Queries children for intersection with a point\n     *\n     * @param p     The Point to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return      Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryPoint = function (p, list, visit) {\n        var _this = this;\n        this.children.forEach(function (c) {\n            var bounds = _this.childToBounds.get(c);\n            if (bounds && bounds.containsPoint(p)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (this.nodes.TL.bounds.containsPoint(p)) {\n                this.nodes.TL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.TR.bounds.containsPoint(p)) {\n                this.nodes.TR.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BL.bounds.containsPoint(p)) {\n                this.nodes.BL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BR.bounds.containsPoint(p)) {\n                this.nodes.BR.queryPoint(p, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Remove the provided item from the tree.\n     */\n    Node.prototype.remove = function (child) {\n        if (this.childToNode) {\n            var node = this.childToNode.get(child);\n            // If the node is getting removed from the top level node, then it MAY be a null bounded item\n            // Which gets removed from the list\n            if (node && node.depth === 0) {\n                var index = node.nullBounded.indexOf(child);\n                if (index > -1) {\n                    node.nullBounded.splice(index);\n                    this.childToNode.delete(child);\n                    this.childToBounds.delete(child);\n                    return;\n                }\n            }\n            // Otherwise, just remove the node normally\n            if (node) {\n                node.doRemove(child);\n            }\n        }\n    };\n    /**\n     * Creates four sub quadrants for this node.\n     */\n    Node.prototype.split = function () {\n        // Gather all items to be handed down\n        var allChildren = this.gatherChildren([]);\n        // Gather all props for the children to be handed down as well\n        this.nodes = new Quadrants(this.bounds, this.depth + 1, this.getBounds, this.childToNode, this.childToBounds);\n        // Empty out the children as they are being re-injected\n        this.children = [];\n        for (var i = 0, end = allChildren.length; i < end; ++i) {\n            var child = allChildren[i];\n            this.doAdd(child, this.childToBounds.get(child) || null, true);\n        }\n    };\n    /**\n     * Traverses the quad tree returning every quadrant encountered\n     *\n     * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n     */\n    Node.prototype.visit = function (cb) {\n        var finished = Boolean(cb(this));\n        if (this.nodes && !finished) {\n            this.nodes.TL.visit(cb);\n            this.nodes.TR.visit(cb);\n            this.nodes.BL.visit(cb);\n            this.nodes.BR.visit(cb);\n        }\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar TrackedQuadTree = /** @class */ (function (_super) {\n    __extends(TrackedQuadTree, _super);\n    function TrackedQuadTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return TrackedQuadTree;\n}(Node));\nexports.TrackedQuadTree = TrackedQuadTree;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chart_camera_1 = require(\"./chart-camera\");\n/**\n * This is a camera that is based on another camera. This can apply filters\n * to the information provided from the base camera.\n *\n * Useful for situations such as a chart having a chart area and a list on the\n * left. This can use the same camera the chart area uses, but filter the response\n * to only track the y offset of the base camera.\n *\n * That would allow easy tracking of the left list to track with elements in the\n * chart and only manipulate a single camera instead of managing many cameras and\n * tie them together with lots of events.\n */\nvar ReferenceCamera = /** @class */ (function (_super) {\n    __extends(ReferenceCamera, _super);\n    function ReferenceCamera(options) {\n        var _this = _super.call(this) || this;\n        _this.offsetFilter = function (offset) { return offset; };\n        _this.scaleFilter = function (scale) { return scale; };\n        Object.assign(_this, options);\n        return _this;\n    }\n    Object.defineProperty(ReferenceCamera.prototype, \"offset\", {\n        get: function () {\n            return this.offsetFilter(this.base.offset);\n        },\n        set: function (val) {\n            /** no-op */\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ReferenceCamera.prototype, \"scale\", {\n        get: function () {\n            return this.scaleFilter(this.base.scale);\n        },\n        set: function (val) {\n            /** no-op */\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ReferenceCamera;\n}(chart_camera_1.ChartCamera));\nexports.ReferenceCamera = ReferenceCamera;\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * Active `debug` instances.\n */\nexports.instances = [];\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  var prevTime;\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n  debug.destroy = destroy;\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  exports.instances.push(debug);\n\n  return debug;\n}\n\nfunction destroy () {\n  var index = exports.instances.indexOf(this);\n  if (index !== -1) {\n    exports.instances.splice(index, 1);\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var i;\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n\n  for (i = 0; i < exports.instances.length; i++) {\n    var instance = exports.instances[i];\n    instance.enabled = exports.enabled(instance.namespace);\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  if (name[name.length - 1] === '*') {\n    return true;\n  }\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__111__;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\nvar observable_manager_1 = require(\"./observable-manager\");\nvar noop = function () { };\nfunction isObservable(val) {\n    return val.$$register;\n}\n/**\n * This is an optimized provider, that can provide instances that use the internal observable system\n * to deliver updates to the framework.\n */\nvar InstanceProvider = /** @class */ (function () {\n    function InstanceProvider() {\n        /** Stores the disposers that are called when the instance is no longer listened to */\n        this.cleanObservation = new Map();\n        /** This stores the changes to the instances themselves */\n        this.instanceChanges = new Map();\n        /** This flag is true when resolving changes when the change list is retrieved. it blocks changes until the current list is resolved */\n        this.allowChanges = true;\n    }\n    Object.defineProperty(InstanceProvider.prototype, \"changeList\", {\n        get: function () {\n            this.allowChanges = false;\n            return Array.from(this.instanceChanges.entries());\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Adds an instance to the provider which will stream observable changes of the instance to\n     * the framework.\n     */\n    InstanceProvider.prototype.add = function (instance) {\n        // No need to duplicate the addition\n        if (this.cleanObservation.get(instance)) {\n            return instance;\n        }\n        if (this.allowChanges) {\n            // Set the observable manager mode to gather observables\n            observable_manager_1.ObservableManager.mode = observable_manager_1.ObservableManagerMode.GATHER_OBSERVABLES;\n            // Set this as the current observer so registrations are made\n            observable_manager_1.ObservableManager.observer = this;\n            // This is the disposer\n            var disposer = noop;\n            if (isObservable(instance)) {\n                disposer = instance.$$register;\n            }\n            // Store the disposers so we can clean up the observable properties\n            this.cleanObservation.set(instance, disposer);\n            // Indicate we have a new instance\n            this.instanceChanges.set(instance, types_1.InstanceDiffType.INSERT);\n            // Change the mode back to broadcasting so we don't keep trying to record observables\n            observable_manager_1.ObservableManager.mode = observable_manager_1.ObservableManagerMode.BROADCAST;\n        }\n        return instance;\n    };\n    /**\n     * Removes all instances from this provider\n     */\n    InstanceProvider.prototype.clear = function () {\n        for (var _i = 0, _a = Array.from(this.cleanObservation.keys()); _i < _a.length; _i++) {\n            var instance = _a[_i];\n            this.remove(instance);\n        }\n    };\n    /**\n     * Clear all resources held by this provider. It IS valid to lose reference to all instances\n     * and to this object, which would effectively cause this object to get GC'ed. But if you\n     * desire to hang onto the instance objects, then this should be called.\n     */\n    InstanceProvider.prototype.destroy = function () {\n        var _this = this;\n        var toRemove = Array.from(this.cleanObservation.keys());\n        toRemove.forEach(function (instance) { return _this.remove(instance); });\n        this.cleanObservation.clear();\n        this.instanceChanges.clear();\n    };\n    /**\n     * THis is called from observables to indicate it's parent has been updated\n     */\n    InstanceProvider.prototype.instanceUpdated = function (instance) {\n        if (this.allowChanges) {\n            // Flag the instance as having a property changed\n            this.instanceChanges.set(instance, types_1.InstanceDiffType.CHANGE);\n        }\n    };\n    /**\n     * Removes the instance from being advertised changes and from providing the changes\n     * for the instance.\n     */\n    InstanceProvider.prototype.remove = function (instance) {\n        if (this.allowChanges) {\n            instance.$$dispose;\n            this.cleanObservation.delete(instance);\n            this.instanceChanges.set(instance, types_1.InstanceDiffType.REMOVE);\n        }\n        return false;\n    };\n    /**\n     * Flagged all changes were dealt with\n     */\n    InstanceProvider.prototype.resolve = function () {\n        this.allowChanges = true;\n        this.instanceChanges.clear();\n    };\n    return InstanceProvider;\n}());\nexports.InstanceProvider = InstanceProvider;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar observable_manager_1 = require(\"./observable-manager\");\nvar noop = function () { };\nvar observerKey = '$$';\nfunction observable(target, key) {\n    // This is the privatized version of the property where the actual value is stored\n    var storage = \"_$\" + key;\n    // Property getter\n    function getter() {\n        return this[storage];\n    }\n    // Property setter\n    function setter(newVal) {\n        // Update the privatized value\n        this[storage] = newVal;\n        // Broadcast change\n        var observer = this[observerKey];\n        observer && observer.instanceUpdated(this);\n    }\n    function register() {\n        var _this = this;\n        if (observable_manager_1.ObservableManager.mode === observable_manager_1.ObservableManagerMode.GATHER_OBSERVABLES) {\n            this[observerKey] = observable_manager_1.ObservableManager.observer;\n            return function () { return (_this[observerKey] = null); };\n        }\n        return noop;\n    }\n    function dispose() {\n        this[observerKey] = null;\n    }\n    Object.defineProperty(target, '$$dispose', {\n        configurable: true,\n        enumerable: false,\n        get: dispose,\n    });\n    Object.defineProperty(target, '$$register', {\n        configurable: true,\n        enumerable: false,\n        get: register,\n    });\n    // Create new property with custom getter and setter\n    Object.defineProperty(target, key, {\n        configurable: true,\n        enumerable: true,\n        get: getter,\n        set: setter,\n    });\n}\nexports.observable = observable;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\nvar event_manager_1 = require(\"../surface/event-manager\");\nvar util_1 = require(\"../util\");\nvar CameraBoundsAnchor;\n(function (CameraBoundsAnchor) {\n    CameraBoundsAnchor[CameraBoundsAnchor[\"TOP_LEFT\"] = 0] = \"TOP_LEFT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"TOP_MIDDLE\"] = 1] = \"TOP_MIDDLE\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"TOP_RIGHT\"] = 2] = \"TOP_RIGHT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"MIDDLE_LEFT\"] = 3] = \"MIDDLE_LEFT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"MIDDLE\"] = 4] = \"MIDDLE\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"MIDDLE_RIGHT\"] = 5] = \"MIDDLE_RIGHT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"BOTTOM_LEFT\"] = 6] = \"BOTTOM_LEFT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"BOTTOM_MIDDLE\"] = 7] = \"BOTTOM_MIDDLE\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"BOTTOM_RIGHT\"] = 8] = \"BOTTOM_RIGHT\";\n})(CameraBoundsAnchor = exports.CameraBoundsAnchor || (exports.CameraBoundsAnchor = {}));\nvar max = Math.max, min = Math.min;\n/**\n * This provides some very basic common needs for a camera control system. This is not a total solution\n * very every scenario. This should just often handle most basic needs.\n */\nvar BasicCameraController = /** @class */ (function (_super) {\n    __extends(BasicCameraController, _super);\n    function BasicCameraController(options) {\n        var _this = _super.call(this) || this;\n        /** Informative property indicating the controller is panning the chart or not */\n        _this.isPanning = false;\n        /** This is the filter applied to panning operations */\n        _this.panFilter = function (offset, view, allViews) { return offset; };\n        /** THis is the filter applied to tscaling operations */\n        _this.scaleFilter = function (scale, view, allViews) { return scale; };\n        /** The view that must be the start or focus of the interactions in order for the interactions to occur */\n        _this.startViews = [];\n        /**\n         * Callback for when the range has changed for the camera in a view\n         */\n        _this.onRangeChanged = function (camera, targetView) { };\n        /**\n         * This flag is set to true when a start view is targetted on mouse down even if it is not\n         * the top most view.\n         */\n        _this.startViewDidStart = false;\n        /**\n         * Corrects camera offset to respect current bounds and anchor.\n         */\n        _this.applyBounds = function () {\n            if (_this.bounds && _this.camera) {\n                var targetView = _this.getView(_this.bounds.view);\n                _this.applyScaleBounds();\n                // Next bound the positioning\n                if (targetView) {\n                    _this.camera.offset[0] = _this.boundsHorizontalOffset(targetView, _this.bounds);\n                    _this.camera.offset[1] = _this.boundsVerticalOffset(targetView, _this.bounds);\n                }\n            }\n        };\n        _this.applyScaleBounds = function () {\n            if (_this.camera && _this.bounds) {\n                // First bound the scaling\n                if (_this.bounds.scaleMin) {\n                    _this.camera.scale = [\n                        max(_this.camera.scale[0], _this.bounds.scaleMin[0]),\n                        max(_this.camera.scale[1], _this.bounds.scaleMin[1]),\n                        max(_this.camera.scale[2], _this.bounds.scaleMin[2]),\n                    ];\n                }\n                if (_this.bounds.scaleMax) {\n                    _this.camera.scale = [\n                        min(_this.camera.scale[0], _this.bounds.scaleMax[0]),\n                        min(_this.camera.scale[1], _this.bounds.scaleMax[1]),\n                        min(_this.camera.scale[2], _this.bounds.scaleMax[2]),\n                    ];\n                }\n            }\n        };\n        if (options.bounds) {\n            _this.setBounds(options.bounds);\n        }\n        _this.camera = options.camera;\n        _this.scaleFactor = options.scaleFactor || 1000.0;\n        _this.ignoreCoverViews = options.ignoreCoverViews || false;\n        if (options.startView) {\n            _this.startViews = Array.isArray(options.startView) ? options.startView : [options.startView];\n        }\n        _this.panFilter = options.panFilter || _this.panFilter;\n        _this.scaleFilter = options.scaleFilter || _this.scaleFilter;\n        _this.onRangeChanged = options.onRangeChanged || _this.onRangeChanged;\n        return _this;\n    }\n    /**\n     * Calculation for adhering to an anchor - x-axis offset only.\n     */\n    BasicCameraController.prototype.anchoredByBoundsHorizontal = function (targetView, bounds) {\n        switch (bounds.anchor) {\n            case CameraBoundsAnchor.TOP_LEFT:\n            case CameraBoundsAnchor.MIDDLE_LEFT:\n            case CameraBoundsAnchor.BOTTOM_LEFT:\n                return -(bounds.worldBounds.left -\n                    bounds.screenPadding.left / this.camera.scale[0]);\n            case CameraBoundsAnchor.TOP_MIDDLE:\n            case CameraBoundsAnchor.MIDDLE:\n            case CameraBoundsAnchor.BOTTOM_MIDDLE:\n                return -(bounds.worldBounds.right - (bounds.worldBounds.width / 2) -\n                    (0.5 * ((targetView.screenBounds.width + bounds.screenPadding.right) / this.camera.scale[0])));\n            case CameraBoundsAnchor.TOP_RIGHT:\n            case CameraBoundsAnchor.MIDDLE_RIGHT:\n            case CameraBoundsAnchor.BOTTOM_RIGHT:\n                return -(bounds.worldBounds.right - ((targetView.screenBounds.width - bounds.screenPadding.right) / this.camera.scale[0]));\n        }\n    };\n    /**\n     * Calculation for adhering to an anchor - y-axis offset only.\n     */\n    BasicCameraController.prototype.anchoredByBoundsVertical = function (targetView, bounds) {\n        switch (bounds.anchor) {\n            case CameraBoundsAnchor.TOP_LEFT:\n            case CameraBoundsAnchor.TOP_MIDDLE:\n            case CameraBoundsAnchor.TOP_RIGHT:\n                return -(bounds.worldBounds.top) -\n                    (-bounds.screenPadding.top / this.scale[1]);\n            case CameraBoundsAnchor.MIDDLE_LEFT:\n            case CameraBoundsAnchor.MIDDLE:\n            case CameraBoundsAnchor.MIDDLE_RIGHT:\n                return -(bounds.worldBounds.bottom - (bounds.worldBounds.height / 2)) +\n                    ((0.5 * (targetView.screenBounds.height - bounds.screenPadding.bottom) / this.scale[1]));\n            case CameraBoundsAnchor.BOTTOM_LEFT:\n            case CameraBoundsAnchor.BOTTOM_MIDDLE:\n            case CameraBoundsAnchor.BOTTOM_RIGHT:\n                return -(bounds.worldBounds.bottom -\n                    (targetView.screenBounds.height - bounds.screenPadding.bottom) / this.scale[1]);\n        }\n    };\n    /**\n     * Returns offset on x-axis due to current bounds and anchor.\n     */\n    BasicCameraController.prototype.boundsHorizontalOffset = function (targetView, bounds) {\n        var worldTLinScreenSpace = targetView.worldToScreen({ x: bounds.worldBounds.left, y: bounds.worldBounds.top });\n        var worldBRinScreenSpace = targetView.worldToScreen({ x: bounds.worldBounds.right, y: bounds.worldBounds.bottom });\n        var widthDifference = (worldBRinScreenSpace.x - worldTLinScreenSpace.x) +\n            bounds.screenPadding.left +\n            bounds.screenPadding.right -\n            targetView.screenBounds.width;\n        // If the worldBounds are smaller than the screenBounds,\n        // We offset according to the anchoring\n        if (widthDifference < 0) {\n            return this.anchoredByBoundsHorizontal(targetView, bounds);\n        }\n        if (worldBRinScreenSpace.x < (targetView.screenBounds.right - bounds.screenPadding.right)) {\n            return (-bounds.worldBounds.right + (targetView.screenBounds.width - bounds.screenPadding.right) / this.camera.scale[0]);\n        }\n        if (worldTLinScreenSpace.x > (targetView.screenBounds.left + bounds.screenPadding.left)) {\n            return (-bounds.worldBounds.left + (bounds.screenPadding.left / this.camera.scale[0]));\n        }\n        return this.camera.offset[0];\n    };\n    /**\n     * Returns offset on y-axis due to current bounds and anchor.\n     */\n    BasicCameraController.prototype.boundsVerticalOffset = function (targetView, bounds) {\n        var worldTLinScreenSpace = targetView.worldToScreen({ x: bounds.worldBounds.left, y: bounds.worldBounds.top });\n        var worldBRinScreenSpace = targetView.worldToScreen({ x: bounds.worldBounds.right, y: bounds.worldBounds.bottom });\n        var heightDifference = (worldBRinScreenSpace.y - worldTLinScreenSpace.y) +\n            bounds.screenPadding.top +\n            bounds.screenPadding.bottom -\n            targetView.screenBounds.height;\n        // If the viewBounds are larger than the screenBounds,\n        // We offset according to the anchoring\n        if (heightDifference < 0) {\n            return this.anchoredByBoundsVertical(targetView, bounds);\n        }\n        if (worldTLinScreenSpace.y > targetView.screenBounds.top - bounds.screenPadding.top) {\n            return (-(bounds.worldBounds.top - (bounds.screenPadding.top / this.camera.scale[1])));\n        }\n        if (worldBRinScreenSpace.y < targetView.screenBounds.bottom + bounds.screenPadding.bottom) {\n            return (-(bounds.worldBounds.bottom + ((-targetView.screenBounds.height + bounds.screenPadding.bottom) / this.camera.scale[1])));\n        }\n        return this.camera.offset[1];\n    };\n    BasicCameraController.prototype.canStart = function (viewId) {\n        return (this.startViews.length === 0 ||\n            (this.startViews && this.startViews.indexOf(viewId) > -1) ||\n            this.startViewDidStart && this.ignoreCoverViews);\n    };\n    BasicCameraController.prototype.findCoveredStartView = function (e) {\n        var _this = this;\n        var found = e.viewsUnderMouse.find(function (under) { return _this.startViews.indexOf(under.view.id) > -1; });\n        this.startViewDidStart = Boolean(found);\n        if (found) {\n            this.coveredStartView = found.view;\n        }\n    };\n    BasicCameraController.prototype.getTargetView = function (e) {\n        // If we have a start view and we do not ignore covering views,\n        // Then our target view is the view we started with\n        if (this.startViews && !this.ignoreCoverViews) {\n            return e.target.view;\n        }\n        // Otherwise, we use the covered start view\n        else {\n            return this.coveredStartView;\n        }\n    };\n    /**\n     * Used to aid in handling the pan effect and determine the contextual view targetted.\n     */\n    BasicCameraController.prototype.handleMouseDown = function (e, button) {\n        if (this.startViews) {\n            // We look for valid covered views on mouse down so dragging will work\n            this.findCoveredStartView(e);\n            // If this is a valid start view, then we enter a panning state with the mouse down\n            if (e.start) {\n                this.isPanning = (this.canStart(e.start.view.id) || this.isPanning);\n            }\n        }\n    };\n    /**\n     * Used to aid in handling the pan effect\n     */\n    BasicCameraController.prototype.handleMouseUp = function (e) {\n        this.startViewDidStart = false;\n        this.isPanning = false;\n    };\n    /**\n     * Applies a panning effect by adjusting the camera's offset.\n     */\n    BasicCameraController.prototype.handleDrag = function (e, drag) {\n        if (e.start) {\n            if (this.canStart(e.start.view.id)) {\n                var pan = [(drag.screen.delta.x / this.camera.scale[0]),\n                    (drag.screen.delta.y / this.camera.scale[1]),\n                    0];\n                if (this.panFilter) {\n                    pan = this.panFilter(pan, e.start.view, e.viewsUnderMouse.map(function (v) { return v.view; }));\n                }\n                this.camera.offset[0] += pan[0];\n                this.camera.offset[1] += pan[1];\n                // Add additional correction for bounds\n                this.applyBounds();\n                // Broadcast the change occurred\n                this.onRangeChanged(this.camera, e.start.view);\n                // Add additional correction for bounds\n                this.applyBounds();\n            }\n        }\n    };\n    /**\n     * Applies a scaling effect to the camera for mouse wheel events\n     */\n    BasicCameraController.prototype.handleWheel = function (e, wheelMetrics) {\n        // Every mouse wheel event must look to see if it's over a valid covered start view\n        this.findCoveredStartView(e);\n        if (this.canStart(e.target.view.id)) {\n            var targetView = this.getTargetView(e);\n            var beforeZoom = targetView.screenToWorld(e.screen.mouse);\n            var currentZoomX = this.camera.scale[0] || 1.0;\n            var currentZoomY = this.camera.scale[1] || 1.0;\n            var scale = [wheelMetrics.wheel[1] / this.scaleFactor *\n                    currentZoomX, wheelMetrics.wheel[1] / this.scaleFactor * currentZoomY, 1];\n            if (this.scaleFilter) {\n                scale = this.scaleFilter(scale, targetView, e.viewsUnderMouse.map(function (v) { return v.view; }));\n            }\n            this.camera.scale[0] = currentZoomX + scale[0];\n            this.camera.scale[1] = currentZoomY + scale[1];\n            // Ensure the new scale values are within bounds before attempting to correct offsets\n            this.applyScaleBounds();\n            var afterZoom = targetView.screenToWorld(e.screen.mouse);\n            this.camera.offset[0] -= (beforeZoom.x - afterZoom.x);\n            this.camera.offset[1] -= (beforeZoom.y - afterZoom.y);\n            // Add additional correction for bounds\n            this.applyBounds();\n            // Broadcast the change occurred\n            this.onRangeChanged(this.camera, targetView);\n            // Add additional correction for bounds\n            this.applyBounds();\n        }\n    };\n    // These are the currently Unused responses for this controller\n    BasicCameraController.prototype.handleMouseOut = function (e) { };\n    BasicCameraController.prototype.handleClick = function (e) { };\n    BasicCameraController.prototype.handleMouseMove = function (e) { };\n    BasicCameraController.prototype.handleMouseOver = function (e) { };\n    /**\n     * Evaluates the world bounds the specified view is observing\n     *\n     * @param viewId The id of the view when the view was generated when the surface was made\n     */\n    BasicCameraController.prototype.getRange = function (viewId) {\n        /** Get the projections for the provided view */\n        var projection = this.getProjection(viewId);\n        /** Get the bounds on the screen for the indicated view */\n        var screenBounds = this.getViewScreenBounds(viewId);\n        // Make sure we have a valid projection and screen bounds to make the adjustment\n        if (projection && screenBounds) {\n            /** Get the current viewed world bounds of the view */\n            var topLeft = projection.screenToWorld(screenBounds);\n            var bottomRight = projection.screenToWorld({ x: screenBounds.right, y: screenBounds.bottom });\n            return new bounds_1.Bounds({\n                height: bottomRight.y - topLeft.y,\n                width: bottomRight.x - topLeft.x,\n                x: topLeft.x,\n                y: topLeft.y,\n            });\n        }\n        return new bounds_1.Bounds({ x: 0, y: 0, width: 1, height: 1 });\n    };\n    Object.defineProperty(BasicCameraController.prototype, \"pan\", {\n        /**\n         * Retrieves the current pan of the controlled camera\n         */\n        get: function () {\n            return this.camera.offset;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets bounds applicable to the supplied view.\n     * If no view is supplied, it uses the first in the startViews array\n     */\n    BasicCameraController.prototype.setBounds = function (bounds) {\n        this.bounds = bounds;\n        this.applyBounds();\n    };\n    Object.defineProperty(BasicCameraController.prototype, \"scale\", {\n        /**\n         * Retrieves the current scale of the camera\n         */\n        get: function () {\n            return this.camera.scale;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This lets you set the visible range of a view based on the view's camera. This will probably not work\n     * as expected if the view indicated and this controller do not share the same camera.\n     *\n     * @param viewId The id of the view when the view was generated when the surface was made\n     */\n    BasicCameraController.prototype.setRange = function (newWorld, viewId) {\n        /** Get the projections for the provided view */\n        var projection = this.getProjection(viewId);\n        /** Get the bounds on the screen for the indicated view */\n        var screenBounds = this.getViewScreenBounds(viewId);\n        /** Get the view the range is being applied towards */\n        var view = this.getView(viewId);\n        // Make sure we have a valid projection and screen bounds to make the adjustment\n        if (projection && screenBounds && view) {\n            var deltaScale = util_1.subtract3([\n                screenBounds.width / newWorld.width,\n                screenBounds.height / newWorld.height,\n                1,\n            ], this.camera.scale);\n            this.camera.scale = util_1.add3(this.camera.scale, this.scaleFilter(deltaScale, view, [view]));\n            var deltaPan = util_1.subtract3([\n                -newWorld.x,\n                -newWorld.y,\n                0,\n            ], this.camera.offset);\n            this.camera.offset = util_1.add3(this.camera.offset, this.scaleFilter(deltaPan, view, [view]));\n            // Bound the camera to the specified bounding range\n            this.applyBounds();\n            // Broadcast the change occurred\n            this.onRangeChanged(this.camera, view);\n            // Bound the camera to the specified bounding range\n            this.applyBounds();\n        }\n    };\n    return BasicCameraController;\n}(event_manager_1.EventManager));\nexports.BasicCameraController = BasicCameraController;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./basic-camera-controller\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./base-event-managers\"));\n__export(require(\"./base-layers\"));\n__export(require(\"./instance-provider\"));\n__export(require(\"./primitives\"));\n__export(require(\"./surface\"));\n__export(require(\"./types\"));\n__export(require(\"./util\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./voidgl\"));\n"],"sourceRoot":""}