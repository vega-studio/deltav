{"version":3,"sources":["webpack://voidgl/webpack/universalModuleDefinition","webpack://voidgl/webpack/bootstrap","webpack://voidgl/external \"three\"","webpack://voidgl/./src/voidgl/types.ts","webpack://voidgl/./src/voidgl/primitives/bounds.ts","webpack://voidgl/external \"mobx\"","webpack://voidgl/./src/voidgl/util/instance.ts","webpack://voidgl/./src/voidgl/surface/layer.ts","webpack://voidgl/./src/voidgl/util/index.ts","webpack://voidgl/./src/voidgl/surface/texture/index.ts","webpack://voidgl/./src/voidgl/surface/event-manager.ts","webpack://voidgl/./src/voidgl/util/identify-by-key.ts","webpack://voidgl/./src/voidgl/base-layers/types.ts","webpack://voidgl/./src/voidgl/surface/texture/base-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/generate-layer-model.ts","webpack://voidgl/./src/voidgl/surface/view.ts","webpack://voidgl/./src/voidgl/surface/scene.ts","webpack://voidgl/./src/voidgl/util/view-camera.ts","webpack://voidgl/./src/voidgl/util/chart-camera.ts","webpack://voidgl/./src/voidgl/util/shader-templating.ts","webpack://voidgl/./src/voidgl/primitives/index.ts","webpack://voidgl/./src/voidgl/surface/texture/label-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/label-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/image-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/color-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/color-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/sub-texture.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas.ts","webpack://voidgl/./node_modules/debug/src/browser.js","webpack://voidgl/./src/voidgl/surface/mouse-event-manager.ts","webpack://voidgl/./src/voidgl/surface/inject-shader-io.ts","webpack://voidgl/./src/voidgl/surface/generate-layer-material.ts","webpack://voidgl/./src/voidgl/surface/generate-layer-geometry.ts","webpack://voidgl/./src/voidgl/util/data-bounds.ts","webpack://voidgl/./src/voidgl/surface/generate-default-scene.ts","webpack://voidgl/./src/voidgl/util/make-instance-uniform-name.ts","webpack://voidgl/./src/voidgl/shaders/fragments/template-vars.ts","webpack://voidgl/./src/voidgl/util/webgl-stat.ts","webpack://voidgl/./src/voidgl/base-event-managers/basic-camera-controller.ts","webpack://voidgl/./src/voidgl/base-event-managers/log-controller.ts","webpack://voidgl/./src/voidgl/base-event-managers/index.ts","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.vs","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.fs","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.ts","webpack://voidgl/./src/voidgl/base-layers/rings/ring-instance.ts","webpack://voidgl/./src/voidgl/base-layers/rings/index.ts","webpack://voidgl/./src/voidgl/base-layers/labels/label-instance.ts","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.vs","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.fs","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.ts","webpack://voidgl/./src/voidgl/base-layers/labels/index.ts","webpack://voidgl/./src/voidgl/base-layers/images/image-instance.ts","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.vs","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.fs","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.ts","webpack://voidgl/./src/voidgl/base-layers/images/index.ts","webpack://voidgl/./src/voidgl/base-layers/edges/edge-instance.ts","webpack://voidgl/./src/voidgl/base-layers/edges/edge-layer.fs","webpack://voidgl/./src/voidgl/base-layers/edges/edge-layer.vs","webpack://voidgl/./src/voidgl/base-layers/edges/edge-layer-bezier2.vs","webpack://voidgl/./src/voidgl/base-layers/edges/edge-layer-bezier.vs","webpack://voidgl/./src/voidgl/base-layers/edges/edge-layer-line.vs","webpack://voidgl/./src/voidgl/base-layers/edges/edge-layer.ts","webpack://voidgl/./src/voidgl/base-layers/edges/index.ts","webpack://voidgl/./src/voidgl/base-layers/circles/circle-instance.ts","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.vs","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.fs","webpack://voidgl/./src/voidgl/primitives/point.ts","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.ts","webpack://voidgl/./src/voidgl/base-layers/circles/index.ts","webpack://voidgl/./src/voidgl/base-layers/index.ts","webpack://voidgl/./src/voidgl/shaders/base/no-op.vs","webpack://voidgl/./src/voidgl/shaders/base/no-op.fs","webpack://voidgl/./src/voidgl/surface/layer-interaction-handler.ts","webpack://voidgl/./src/voidgl/surface/instance-diff-manager.ts","webpack://voidgl/./src/voidgl/util/tracked-quad-tree.ts","webpack://voidgl/./src/voidgl/util/reference-camera.ts","webpack://voidgl/./src/voidgl/util/data-provider.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas-resource-manager.ts","webpack://voidgl/./src/voidgl/surface/texture/image-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas-manager.ts","webpack://voidgl/./src/voidgl/surface/texture/pack-node.ts","webpack://voidgl/./src/voidgl/surface/event-managers/layer-mouse-events.ts","webpack://voidgl/./src/voidgl/util/instance-uniform-manager.ts","webpack://voidgl/./src/voidgl/util/quad-tree.ts","webpack://voidgl/./node_modules/ms/index.js","webpack://voidgl/./node_modules/debug/src/debug.js","webpack://voidgl/./node_modules/process/browser.js","webpack://voidgl/external \"bowser\"","webpack://voidgl/./src/voidgl/util/mouse.ts","webpack://voidgl/./src/voidgl/primitives/absolute-position.ts","webpack://voidgl/./src/voidgl/shaders/fragments/projection-methods.vs","webpack://voidgl/./src/voidgl/shaders/fragments/shader-input.vs","webpack://voidgl/./src/voidgl/shaders/fragments/instance-destructuring-array.vs","webpack://voidgl/./src/voidgl/shaders/fragments/fragment-shader-composition.fs","webpack://voidgl/./src/voidgl/shaders/fragments/vertex-shader-composition.vs","webpack://voidgl/./src/voidgl/shaders/fragments/instance-retrieval-array.vs","webpack://voidgl/./src/voidgl/shaders/util/uniform-instance-block-array.ts","webpack://voidgl/./src/voidgl/shaders/util/attribute-generation.ts","webpack://voidgl/./src/voidgl/surface/layer-surface.ts","webpack://voidgl/./src/voidgl/surface/index.ts","webpack://voidgl/./src/voidgl/index.ts","webpack://voidgl/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__86__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","InstanceBlockIndex","InstanceAttributeSize","UniformSize","VertexAttributeSize","ShaderInjectionTarget","PickType","Bounds","options","this","x","y","width","height","left","top","bottom","right","emptyBounds","containsPoint","point","encapsulate","bounds","Math","min","fits","hitBounds","isInside","toString","__decorate","decorators","target","key","desc","arguments","length","getOwnPropertyDescriptor","Reflect","decorate","mobx_1","Instance","_id","id","active","observable","extendStatics","__extends","setPrototypeOf","__proto__","Array","b","__","constructor","create","Three","types_1","util_1","identify_by_key_1","instance_diff_manager_1","layer_interaction_handler_1","Layer","_super","props","_this","depth","instanceById","Map","instanceVertexCount","assign","defaultProps","_a","picking","NONE","ALL","pickingMethods","getInstancePickingMethods","hitTest","quadTree","TrackedQuadTree","boundsAccessor","type","diffManager","InstanceDiffManager","diffProcessor","getDiffProcessor","interactions","LayerInteractionHandler","destroy","didUpdateProps","draw","uniform","change","instance","uniforms","changeList","data","end","uniformManager","getUniforms","resolve","update","materialUniforms","forEach","materialUniform","Error","getModelType","drawMode","TrianglesDrawMode","modelType","Mesh","getMaterialOptions","initShader","fs","instanceAttributes","vertexAttributes","vertexCount","vs","makeInstanceAttribute","block","blockIndex","size","atlas","makeUniform","shaderInjection","qualifier","willUpdateInstances","changes","willUpdateProps","newProps","didUpdate","IdentifyByKey","__export","EventManager","handleMouseDown","e","button","handleMouseUp","handleMouseOver","handleMouseOut","handleMouseMove","handleClick","handleDrag","drag","handleWheel","wheel","AnchorType","ScaleType","BaseAtlasResource","sampleScale","generateLayerModel","layer","geometry","material","modelInfo","model","Boolean","isMesh","absolute_position_1","bounds_1","view_camera_1","isOrthographic","val","ClearFlags","View","pixelRatio","devicePixelRatio","screenToPixelSpace","out","pixelSpaceToScreen","screenToView","viewBounds","viewToScreen","screenToWorld","view","world","camera","offset","scale","viewCamera","ViewCameraType","CUSTOM","console","warn","worldToScreen","screen","viewToWorld","worldToView","fitViewtoViewport","surfaceDimensions","CONTROLLED","baseCamera","getAbsolutePositionBounds","viewport","far","near","position","set","z","updateMatrix","updateMatrixWorld","updateProjectionMatrix","screenBounds","DEFAULT_VIEW_ID","sortByDepth","a","Scene","container","layers","sortIsDirty","viewById","frustumCulled","autoUpdate","addLayer","push","addView","removeLayer","index","indexOf","splice","sortLayers","sort","DEFAULT_SCENE_ID","ViewCamera","chartCameraUID","applyArray","source","apply","concat","ChartCamera","location","slice","shaderTemplate","shader","required","matched","noValueProvided","notFound","shaderOptions","shaderResults","replace","match","keys","option","results","resolvedShaderOptions","shaderProvidedOptions","unresolvedProvidedOptions","unresolvedShaderOptions","values","error","canvas","__awaiter","thisArg","_arguments","P","generator","Promise","reject","fulfilled","step","next","rejected","result","done","then","__generator","body","f","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","LabelRasterizer","awaitContext","getContext","setTimeout","document","createElement","calculateLabelSize","resource","calculateTexture","sampleScaling","fontSize","getLabelRasterizationFontSize","fillStyle","font","makeCSSFont","measureText","text","fillText","imageData","getImageData","minY","Number","MAX_SAFE_INTEGER","minX","maxX","MIN_SAFE_INTEGER","maxY","max","k","rasterization","texture","createCroppedCanvas","cropped","context","imageSmoothingEnabled","drawImage","fontWeight","fontFamily","render","renderSync","LabelAtlasResource","ImageAtlasResource","image","ColorRasterizer","limit","makeCSS","color","floor","opacity","fillRect","ColorAtlasResource","SubTexture","aspectRatio","pack_node_1","sub_texture_1","AtlasSize","Atlas","validResources","textureSettings","packing","PackNode","updateTexture","invalidateResource","zero","atlasBL","atlasBR","atlasTL","atlasTR","atlasReferenceID","pixelWidth","pixelHeight","isValid","setManager","manager","registerResource","undefined","removeResource","redoneCanvas","dispose","Texture","generateMipmaps","premultiplyAlpha","needsUpdate","process","load","storage","debug","env","DEBUG","log","Function","formatArgs","args","useColors","namespace","humanize","diff","lastC","save","namespaces","removeItem","navigator","userAgent","toLowerCase","documentElement","style","WebkitAppearance","firebug","exception","table","parseInt","RegExp","$1","chrome","local","localStorage","localstorage","colors","formatters","j","JSON","stringify","err","message","enable","mouse_1","quad_tree_1","MouseEventManager","views","controllers","handlesWheelEvents","_waitingForRender","getViewsUnderMouse","mouse","hitViews","query","resize","setViews","setControllers","addContextListeners","QuadTree","addAll","map","filter","element","startView","startPosition","onmousewheel","event","eventElementPosition","interaction","makeInteraction","makeWheel","controller","stopPropagation","preventDefault","onmouseleave","waitingForRender","onmousemove","onmousedown","downViews","canClick","clickStartTime","Date","now","currentPosition","delta","makeDrag","onmouseup","onmouseover","onselectstart","addTouchContextListeners","ontouchstart","ontouchend","ontouchmove","ontouchcancel","start","previous","current","viewsUnderMouse","normalizeWheel","toVertexAttributeInternal","attribute","materialAttribute","toUniformInternal","sortByResourceAttributes","injectShaderIO","shaderIO","atlasInstanceAttributes","requestedAtlasInjections","FOUR","ONE","injection","FRAGMENT","injections","VERTEX","attributes","blocks","found","maxBlock","addedUniforms","instanceAttribute","ATLAS","getAtlasTexture","MATRIX4","projectionMatrix","elements","matrix","THREE","TWO","fillBlock","usedBlocks","addedInstanceAttributes","activeAttribute","_b","UNIFORM_SIZE_TO_MATERIAL_TYPE","MATRIX3","DEFAULT_UNIFORM_VALUE","toMaterialUniform","generateLayerMaterial","layerUniforms","instancingUniforms","materialParams","vertexShader","fragmentShader","generatedUniform","RawShaderMaterial","generateLayerGeometry","maxInstancesPerBuffer","vertexBuffers","attribute_1","Float32Array","buffer","formatError","endk","isArray","endj","instanceSize","endk_1","copyWithin","instancingBuffer","instanceStartIndex","BufferGeometry","attribute_3","BufferAttribute","addAttribute","DataBounds","chart_camera_1","scene_1","view_1","generateDefaultScene","viewSize","defaultCamera","OrthographicCamera","defaultChartCamera","defaultViewport","defaultView","defaultScene","scene","INSTANCE_UNIFORM_ATTRIBUTE_PREFIX","makeInstanceUniformNameArray","makeInstanceUniformNameTree","templateVars","attributeFragments","blocksPerInstance","instanceBlockCount","instanceDataBinaryTree","instanceDataRetrieval","instanceDestructuring","instanceFragments","instanceUniformDeclarations","projectionMethods","shaderInput","getProgramInfo","gl","program","attributeCount","uniformCount","activeUniforms","getProgramParameter","ACTIVE_UNIFORMS","activeAttributes","ACTIVE_ATTRIBUTES","enums","35664","35665","35666","35667","35668","35669","35670","35671","35672","35673","35674","35675","35676","35678","35680","5120","5121","5122","5123","5124","5125","5126","getActiveUniform","typeName","getActiveAttrib","WebGLStat","MAX_VERTEX_UNIFORMS","MAX_FRAGMENT_UNIFORMS","MAX_ATTRIBUTES","WEBGL_SUPPORTED","MAX_TEXTURE_SIZE","WebGLRenderingContext","getAContext","getParameter","MAX_VERTEX_UNIFORM_VECTORS","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_VERTEX_ATTRIBS","BasicCameraController","startViewDidStart","scaleFactor","ignoreCoverViews","startViews","findCoveredStartView","find","under","coveredStartView","getTargetView","canStart","wheelMetrics","targetView","beforeZoom","currentZoomX","currentZoomY","afterZoom","viewId","LogController","layer_1","RingLayer","radius","thickness","defaults","Points","blending","CustomBlending","blendSrc","OneFactor","premultipliedAlpha","transparent","RingInstance","computed","texture_1","instance_1","rasterizationLookUp","anchorCalculator","TopLeft","anchor","padding","TopMiddle","TopRight","MiddleLeft","Middle","MiddleRight","BottomLeft","BottomMiddle","BottomRight","Custom","LabelInstance","scaling","BOUND_MAX","_cssFont","_fontFamily","_fontSize","_fontStyle","_fontWeight","_text","_width","_height","_isDestroyed","_anchor","fontStyle","rasterizations","references","_rasterization","setAnchor","newAnchor","LabelLayer","vertexToNormal","0","1","2","3","4","5","vertexToSide","request","u","vertex","TriangleStripDrawMode","ImageInstance","tint","_sourceWidth","_sourceHeight","_element","_path","ImageRasterizer","ImageLayer","EdgeInstance","colorStart","colorEnd","control","widthStart","widthEnd","setEdgeWidth","setColor","EdgeType","pickVS","LINE","BEZIER","BEZIER2","baseVS","EdgeLayer","MAX_SEGMENTS","vertexInterpolation","sign","interpolation","CircleInstance","squareDistance","p1","p2","dx","dy","Point","add","getClosest","testPoint","points","distance","closestDistance","MAX_VALUE","closestPoint","getClosestIndex","subtract","amount","from","normalize","magnitude","sqrt","getDistance","squared","getMidpoint","direction","make","primitives_1","CircleLayer","circle","isMouseOver","isMouseDown","onMouseDown","world_1","hitTest_1","instances","queryPoint","clear","onMouseOut","onMouseUp","world_2","hitTest_2","onMouseOver","onMouseMove","world_3","hitTest_3","isCurrentlyOver_1","handleMouseClick","onMouseClick","world_4","hitTest_4","handleMouseDrag","VECTOR_ACCESSORS","quadPicking","changeInstanceQuad","addInstanceQuad","removeInstanceQuad","changeInstance","addInstance","removeInstance","uniformCluster","updateInstance","remove","uniformRangeStart","uniformRange","instanceData","instanceUniform","setTargetAtlas","Quadrants","getBounds","childToNode","childToBounds","mid","TL","Node","TR","BL","BR","children","nodes","child","doAdd","cover","allChildren","gatherChildren","fromSplit","split","isNaN","area","doRemove","delete","list","visit","queryBounds","node","cb","finished","ReferenceCamera","offsetFilter","scaleFilter","base","DiffType","UPDATE_FLAG","DataProvider","instanceDisposers","instanceChanges","isChanged","_changeList","monitorItem","CHANGE","_instances","observe","listDisposer","intercept","monitorList","changes_1","changeType","disposer","lookUp","disposers","removedCount","item","REMOVE","added","INSERT","toInstanceIOValue","AtlasResourceManager","targetAtlas","requestQueue","requestLookup","atlasManager","dequeueRequests","requests","updateAtlas","waiting","existingRequests","calculateImageSize","atlas_1","color_atlas_resource_1","color_rasterizer_1","image_atlas_resource_1","label_atlas_resource_1","label_rasterizer_1","ZERO_IMAGE","atlasTexture","heightOnAtlas","widthOnAtlas","AtlasManager","allAtlas","createAtlas","resources","destroyAtlas","atlasName","setDefaultImage","loadedImage","rect","dimensions","insertedNode","ux","uy","uw","uh","onePixelX","atlasDimensions","top_1","loadImage","first","second","insert","nodeImage","nodeDimensions","abs","imageSrc","subTexture","image_1","onload","onerror","path","toDataURL","Image","src","_i","resources_1","isLeaf","hasChild","newNode","fitFlag","imgWidth","imgHeight","dWidth","dHeight","removed","LayerMouseEvents","sceneViews","isOver","getSceneViewsUnderMouse","sceneViewByViewId","sceneView","viewItem","getMouseByViewId","viewMouseByViewId","handleInteraction","callback","sceneViews_1","handleSceneView","flag","allSceneViews","currentSceneViews","generate_layer_model_1","make_instance_uniform_name_1","InstanceUniformManager","buffers","availableClusters","instanceToCluster","clusterToBuffer","maxUniformBlock","uniformBlocksPerInstance","makeNewBuffer","cluster","shift","unshift","removeFromScene","setScene","newGeometry","drawRange","count","newMaterial","clone","newModel","activeInstances","clusters","firstInstance","lastInstance","uniformIndex","uniformName","Vector4","instanceIndex","filterQuery","queryValues","filtered","obj","childrenProps","h","plural","ms","ceil","str","String","exec","parseFloat","parse","long","round","fmtShort","createDebug","prevTime","enabled","self","curr","prev","coerce","format","formatter","bind","hash","charCodeAt","selectColor","init","stack","disable","names","skips","len","substr","test","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","array","noop","nextTick","title","browser","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","three_1","IE_ADJUSTMENT","OLD_IE_ADJUSTMENT","MAX_FIREFOX_WHEELDELTA","lowPassY","LOW_PASS_U0","LOW_PASS_U1","LOW_PASS_U2","LOW_PASS_U3","firefox","deltaX","deltaY","Vector2","msie","wheelDeltaX","wheelDeltaY","wheelDelta","detail","msedge","multiplyScalar","relative","mouseX","mouseY","eventX","eventY","nativeEvent","pageX","pageY","clientX","clientY","scrollLeft","scrollTop","offsetParent","offsetLeft","offsetTop","data_bounds_1","ref","num","reference","shader_templating_1","template_vars_1","instanceRetrievalArrayFragment","VECTOR_COMPONENTS","sizeToType","9","16","99","makeUniformArrayDeclaration","totalBlocks","fragment","fill","makeInstanceRetrievalArray","templateOptions","makeInstanceDestructuringArray","join","webgl_stat_1","uniform_instance_block_array_1","vertexShaderComposition","fragmentShaderComposition","instanceDestructuringArray","MAX_USE_PER_BLOCK","generateUniforms","injectionType","injectFragments","shaders","shaderInputMetrics","instancingInfo","instanceUniformBlockCount","calculateUniformBlockUseage","sortedInstanceAttributes","currentBlock","trueBlockIndex","blockUseage","innerBlockUseage","attributeSize","oldUseage","newUseage","innerUseage","branchesPerLevel","uniformMetrics","blockQualifierDedup","qualifiers","blockQualifiers","qualifierList","allQualifiers","declaration","makeInstanceUniformDeclaration","makeUniformInstanceDataOptions","metrics","generateInstanceDataLookupOptions","additionalOptions","generateVertexAttributes","generateShaderInputs","makeInstanceDestructuring","makeInstanceAttributeReferences","generateVertexShader","vertexShaderResults","generateFragmentShader","attribute_generation_1","generate_default_scene_1","generate_layer_geometry_1","generate_layer_material_1","inject_shader_io_1","mouse_event_manager_1","instance_uniform_manager_1","layer_mouse_events_1","atlas_resource_manager_1","DEFAULT_BACKGROUND_COLOR","Color","isCanvas","createLayer","layerClass","LayerSurface","scenes","willDisposeLayer","initLayer","mouseManager","drawSceneView","resourceManager","rendererSize","renderer","getSize","getPixelRatio","background","SCISSOR_TEST","scissor","clearColor","clearFlags","COLOR","COLOR_BUFFER_BIT","DEPTH","DEPTH_BUFFER_BIT","STENCIL","STENCIL_BUFFER_BIT","box","currentViewport","setViewport","setContext","initGL","initMouseManager","initResources","WebGLRenderer","alpha","antialias","preserveDrawingBuffer","autoClear","setFaceCulling","CullFaceNone","setSize","setPixelRatio","setClearColor","defaultSceneElements","sceneViewDepth","sceneOptions","newScene","viewOptions","newView","addLayerToScene","shaderMetrics","eventManagers","atlasResources","layerInitializers","existingLayer","layerId","fitContainer","parentElement","className","setAttribute","containerBox","getBoundingClientRect","isString","getElementById"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,EAAAG,QAAA,SAAAA,QAAA,QAAAA,QAAA,WACA,mBAAAC,eAAAC,IACAD,QAAA,yBAAAJ,GACA,iBAAAC,QACAA,QAAA,OAAAD,EAAAG,QAAA,SAAAA,QAAA,QAAAA,QAAA,WAEAJ,EAAA,OAAAC,EAAAD,EAAA,MAAAA,EAAA,KAAAA,EAAA,QARA,CASCO,OAAA,SAAAC,EAAAC,EAAAC,GACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAX,QAGA,IAAAC,EAAAQ,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAb,YAUA,OANAc,EAAAH,GAAAI,KAAAd,EAAAD,QAAAC,IAAAD,QAAAU,GAGAT,EAAAY,GAAA,EAGAZ,EAAAD,QA2CA,OAtCAU,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAlB,EAAAmB,EAAAC,GACAV,EAAAW,EAAArB,EAAAmB,IACAG,OAAAC,eAAAvB,EAAAmB,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAA3B,GACAsB,OAAAC,eAAAvB,EAAA,cAAiD4B,OAAA,KAIjDlB,EAAAmB,EAAA,SAAA5B,GACA,IAAAmB,EAAAnB,KAAA6B,WACA,WAA2B,OAAA7B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAS,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAU,EAAAC,GAAsD,OAAAV,OAAAW,UAAAC,eAAAnB,KAAAgB,EAAAC,IAGtDtB,EAAAyB,EAAA,IAIAzB,IAAA0B,EAAA,qBCnEAnC,EAAAD,QAAAM,gCCCAgB,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAE9C,SAAAS,GACAA,IAAA,aACAA,IAAA,aACAA,IAAA,iBACAA,IAAA,eAJA,CAKCrC,EAAAqC,qBAAArC,EAAAqC,wBAED,SAAAC,GACAA,IAAA,aACAA,IAAA,aACAA,IAAA,iBACAA,IAAA,eAEAA,IAAA,kBANA,CAOCtC,EAAAsC,wBAAAtC,EAAAsC,2BAED,SAAAC,GACAA,IAAA,aACAA,IAAA,aACAA,IAAA,iBACAA,IAAA,eACAA,IAAA,qBACAA,IAAA,sBACAA,IAAA,kBAPA,CAQCvC,EAAAuC,cAAAvC,EAAAuC,iBAED,SAAAC,GACAA,IAAA,aACAA,IAAA,aACAA,IAAA,iBACAA,IAAA,eAJA,CAKCxC,EAAAwC,sBAAAxC,EAAAwC,yBAGD,SAAAC,GAEAA,IAAA,mBAEAA,IAAA,uBAEAA,IAAA,aANA,CAOCzC,EAAAyC,wBAAAzC,EAAAyC,2BAMD,SAAAC,GAEAA,IAAA,eAEAA,IAAA,aAUAA,IAAA,mBAdA,CAeC1C,EAAA0C,WAAA1C,EAAA0C,4CChEDpB,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAO9C,IAAAe,EAAA,WASA,SAAAA,EAAAC,GACAC,KAAAC,EAAA,EACAD,KAAAE,EAAA,EACAF,KAAAG,MAAA,EACAH,KAAAI,OAAA,EACAJ,KAAAC,EAAAF,EAAAE,GAAAF,EAAAM,MAAA,EACAL,KAAAE,EAAAH,EAAAG,GAAAH,EAAAO,KAAA,EACAN,KAAAI,OAAAL,EAAAK,QAAAL,EAAAQ,OAAAP,KAAAE,GAAA,EACAF,KAAAG,MAAAJ,EAAAI,OAAAJ,EAAAS,MAAAR,KAAAC,GAAA,EA0HA,OAxHAxB,OAAAC,eAAAoB,EAAAV,UAAA,QACAP,IAAA,WACA,OAAAmB,KAAAG,MAAAH,KAAAI,QAEAxB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAAoB,EAAAV,UAAA,UACAP,IAAA,WACA,OAAAmB,KAAAE,EAAAF,KAAAI,QAEAxB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAAoB,EAAAV,UAAA,QACAP,IAAA,WACA,OAAAmB,KAAAC,GAEArB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAAoB,EAAAV,UAAA,OACAP,IAAA,WACA,OACAoB,EAAAD,KAAAC,EAAAD,KAAAG,MAAA,EACAD,EAAAF,KAAAE,EAAAF,KAAAI,OAAA,IAGAxB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAAoB,EAAAV,UAAA,SACAP,IAAA,WACA,OAAAmB,KAAAC,EAAAD,KAAAG,OAEAvB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAAoB,EAAAV,UAAA,OACAP,IAAA,WACA,OAAAmB,KAAAE,GAEAtB,YAAA,EACAD,cAAA,IAEAmB,EAAAW,YAAA,WACA,WAAAX,GACAM,OAAA,EACAD,MAAA,EACAF,EAAA,EACAC,EAAA,KAQAJ,EAAAV,UAAAsB,cAAA,SAAAC,GACA,QAAAA,EAAAV,EAAAD,KAAAC,GAAAU,EAAAT,EAAAF,KAAAE,GAAAS,EAAAV,EAAAD,KAAAQ,OAAAG,EAAAT,EAAAF,KAAAO,SAOAT,EAAAV,UAAAwB,YAAA,SAAAC,GASA,OARAb,KAAAC,EAAAa,KAAAC,IAAAf,KAAAC,EAAAY,EAAAZ,GACAD,KAAAE,EAAAY,KAAAC,IAAAf,KAAAE,EAAAW,EAAAX,GACAF,KAAAQ,MAAAK,EAAAL,QACAR,KAAAG,OAAAU,EAAAL,MAAAR,KAAAQ,OAEAR,KAAAO,OAAAM,EAAAN,SACAP,KAAAI,QAAAS,EAAAN,OAAAP,KAAAO,SAEA,GAUAT,EAAAV,UAAA4B,KAAA,SAAAH,GAEA,OAAAb,KAAAG,QAAAU,EAAAV,OAAAH,KAAAI,SAAAS,EAAAT,OACA,EAGAJ,KAAAG,OAAAU,EAAAV,OAAAH,KAAAI,QAAAS,EAAAT,OACA,EAGA,GAOAN,EAAAV,UAAA6B,UAAA,SAAAJ,GACA,QAAAb,KAAAQ,MAAAK,EAAAZ,GAAAD,KAAAC,EAAAY,EAAAL,OAAAR,KAAAO,OAAAM,EAAAX,GAAAF,KAAAE,EAAAW,EAAAT,SAQAN,EAAAV,UAAA8B,SAAA,SAAAL,GACA,OAAAb,KAAAC,GAAAY,EAAAZ,GAAAD,KAAAQ,OAAAK,EAAAL,OAAAR,KAAAE,GAAAW,EAAAX,GAAAF,KAAAO,QAAAM,EAAAN,QAKAT,EAAAV,UAAA+B,SAAA,WACA,aAAiBnB,KAAAC,EAAA,MAAAD,KAAAE,EAAA,MAAAF,KAAAG,MAAA,MAAAH,KAAAI,OAAA,KAEjBN,EA3IA,GA6IA3C,EAAA2C,wBCrJA1C,EAAAD,QAAAO,gCCCA,IAAA0D,EAAApB,WAAAoB,YAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAnD,EAAAD,EAAAqD,UAAAC,OAAA5C,EAAAV,EAAA,EAAAkD,EAAA,OAAAE,IAAA/C,OAAAkD,yBAAAL,EAAAC,GAAAC,EACA,oBAAAI,SAAA,mBAAAA,QAAAC,SAAA/C,EAAA8C,QAAAC,SAAAR,EAAAC,EAAAC,EAAAC,QACA,QAAAzD,EAAAsD,EAAAK,OAAA,EAA4C3D,GAAA,EAAQA,KAAAM,EAAAgD,EAAAtD,MAAAe,GAAAV,EAAA,EAAAC,EAAAS,GAAAV,EAAA,EAAAC,EAAAiD,EAAAC,EAAAzC,GAAAT,EAAAiD,EAAAC,KAAAzC,GACpD,OAAAV,EAAA,GAAAU,GAAAL,OAAAC,eAAA4C,EAAAC,EAAAzC,MAEAL,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAA+C,EAAAjE,EAAA,GACAkE,EAAA,WACA,SAAAA,EAAAhC,GACAC,KAAAgC,IAAAjC,EAAAkC,GACAjC,KAAAkC,OAAAnC,EAAAmC,OAYA,OAVAzD,OAAAC,eAAAqD,EAAA3C,UAAA,MACAP,IAAA,WACA,OAAAmB,KAAAgC,KAEApD,YAAA,EACAD,cAAA,IAEAyC,GACAU,EAAAK,YACAJ,EAAA3C,UAAA,iBACA2C,EAfA,GAiBA5E,EAAA4E,yCCzBA,IACAK,EADAC,EAAArC,WAAAqC,YACAD,EAAA3D,OAAA6D,iBACUC,wBAAgBC,OAAA,SAAAnE,EAAAoE,GAAsCpE,EAAAkE,UAAAE,IAChE,SAAApE,EAAAoE,GAAyB,QAAAnD,KAAAmD,IAAApD,eAAAC,KAAAjB,EAAAiB,GAAAmD,EAAAnD,KACzB,SAAAjB,EAAAoE,GAEA,SAAAC,IAAuB1C,KAAA2C,YAAAtE,EADvB+D,EAAA/D,EAAAoE,GAEApE,EAAAe,UAAA,OAAAqD,EAAAhE,OAAAmE,OAAAH,IAAAC,EAAAtD,UAAAqD,EAAArD,UAAA,IAAAsD,KAGAjE,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAA8D,EAAAhF,EAAA,GACAiF,EAAAjF,EAAA,GACAkF,EAAAlF,EAAA,GACAmF,EAAAnF,EAAA,GACAoF,EAAApF,EAAA,IACAqF,EAAArF,EAAA,IAIAsF,EAAA,SAAAC,GAEA,SAAAD,EAAAE,GACA,IAAAC,EAGAF,EAAAlF,KAAA8B,KAAAqD,IAAArD,KAEAsD,EAAAC,MAAA,EAEAD,EAAAE,aAAA,IAAAC,IAEAH,EAAAI,oBAAA,EAEAJ,EAAAD,MAAA5E,OAAAkF,UAAsCR,EAAAS,iBAA0BP,GAEhE,IAAAQ,EAAAP,EAAAD,MAAAS,QAEA,SAFA,IAAAD,EAAAf,EAAAjD,SAAAkE,KAAAF,KAEAf,EAAAjD,SAAAmE,IAAA,CACA,IAAAC,EAAAX,EAAAY,4BACAZ,EAAAQ,SACAK,QAAAF,EAAAE,QACAC,SAAA,IAAArB,EAAAsB,gBAAA,QAAAJ,EAAAK,gBACAC,KAAAzB,EAAAjD,SAAAmE,KAMA,OAHAV,EAAAkB,YAAA,IAAAvB,EAAAwB,oBAAAnB,GACAA,EAAAoB,cAAApB,EAAAkB,YAAAG,mBACArB,EAAAsB,aAAA,IAAA1B,EAAA2B,wBAAAvB,GACAA,EAwHA,OApJAjB,EAAAc,EAAAC,GAiCAD,EAAA/D,UAAA0F,QAAA,aAGA3B,EAAA/D,UAAA2F,eAAA,aAMA5B,EAAA/D,UAAA4F,KAAA,WAUA,IATA,IAAAC,EACAlG,EAIAmG,EAAAC,EAAAC,EAFAC,EAAArF,KAAAqD,MAAAiC,KAAAD,WAIAX,EAAA1E,KAAA0E,cACAF,EAAAxE,KAAAwE,YACAzG,EAAA,EAAAwH,EAAAF,EAAA3D,OAAgD3D,EAAAwH,IAASxH,EAEzDoH,GADAD,EAAAG,EAAAtH,IACA,GACAqH,EAAApF,KAAAwF,eAAAC,YAAAN,GAEAT,EAAAQ,EAAA,IAAAV,EAAAW,EAAAC,GAGApF,KAAAqD,MAAAiC,KAAAI,UAEA,IAAA3H,EAAA,EAAAwH,EAAAvF,KAAAoF,SAAA1D,OAAA,EAAuD3D,EAAAwH,IAASxH,EAChEkH,EAAAjF,KAAAoF,SAAArH,GACAgB,EAAAkG,EAAAU,OAAAV,GACAA,EAAAW,iBAAAC,QAAA,SAAAC,GAAyE,OAAAA,EAAA/G,WAOzEoE,EAAA/D,UAAA8E,0BAAA,WACA,UAAA6B,MAAA,mJAKA5C,EAAA/D,UAAA4G,aAAA,WACA,OACAC,SAAApD,EAAAqD,kBACAC,UAAAtD,EAAAuD,OAMAjD,EAAA/D,UAAAiH,mBAAA,WACA,UAYAlD,EAAA/D,UAAAkH,WAAA,WACA,OACAC,GAAA1I,EAAA,IACA2I,sBACApB,YACAqB,oBACAC,YAAA,EACAC,GAAA9I,EAAA,MAOAsF,EAAA/D,UAAAwH,sBAAA,SAAAC,EAAAC,EAAAxI,EAAAyI,EAAApB,EAAAqB,GACA,OACAA,QACAH,QACAC,aACAxI,OACAyI,OACApB,WAOAxC,EAAA/D,UAAA6H,YAAA,SAAA3I,EAAAyI,EAAApB,EAAAuB,EAAAC,GACA,OACA7I,OACA6I,YACAD,kBACAH,OACApB,WAGAxC,EAAA/D,UAAAgI,oBAAA,SAAAC,KAIAlE,EAAA/D,UAAAkI,gBAAA,SAAAC,KAGApE,EAAA/D,UAAAoI,UAAA,WACAxH,KAAAqD,MAAAiC,KAAAI,WAEAvC,EAAAS,gBACAT,EArJA,CAsJCH,EAAAyE,eACDtK,EAAAgG,sCC3KA,SAAAuE,EAAAvJ,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAEAb,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C2I,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,IACA6J,EAAA7J,EAAA,IACA6J,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,mCCZA,SAAA6J,EAAAvJ,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAEAb,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C2I,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,mCCXAY,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAI9C,IAAA4I,EAAA,WACA,SAAAA,KA0BA,OAxBAA,EAAAvI,UAAAwI,gBAAA,SAAAC,EAAAC,KAGAH,EAAAvI,UAAA2I,cAAA,SAAAF,KAGAF,EAAAvI,UAAA4I,gBAAA,SAAAH,KAGAF,EAAAvI,UAAA6I,eAAA,SAAAJ,KAGAF,EAAAvI,UAAA8I,gBAAA,SAAAL,KAGAF,EAAAvI,UAAA+I,YAAA,SAAAN,EAAAC,KAGAH,EAAAvI,UAAAgJ,WAAA,SAAAP,EAAAQ,KAGAV,EAAAvI,UAAAkJ,YAAA,SAAAT,EAAAU,KAGAZ,EA3BA,GA6BAxK,EAAAwK,6CCjCAlJ,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAM9C,IAAA0I,EAAA,WACA,SAAAA,EAAA1H,GACAC,KAAAuB,IAAAxB,EAAAwB,IAUA,OARA9C,OAAAC,eAAA+I,EAAArI,UAAA,MAEAP,IAAA,WACA,OAAAmB,KAAAuB,KAEA3C,YAAA,EACAD,cAAA,IAEA8I,EAZA,GAcAtK,EAAAsK,8CCpBAhJ,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAE9C,SAAAyJ,GACAA,IAAA,2BACAA,IAAA,+BACAA,IAAA,6BACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,qBACAA,IAAA,yBACAA,IAAA,uBAVA,CAWCrL,EAAAqL,aAAArL,EAAAqL,gBAED,SAAAC,GAEAA,IAAA,mBAEAA,IAAA,yBAEAA,IAAA,iBANA,CAOCtL,EAAAsL,YAAAtL,EAAAsL,6CCtBDhK,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAA2J,EAAA,WAWA,OAVA,WAQA1I,KAAA2I,YAAA,GATA,GAaAxL,EAAAuL,kDCdAjK,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAY9C5B,EAAAyL,mBARA,SAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAH,EAAA7C,eACAiD,EAAA,IAAAD,EAAA7C,UAAA2C,EAAAC,GAIA,OARAG,QAKAD,EALAE,UAMAF,EAAAhD,SAAA+C,EAAA/C,UAEAgD,iCCVA,IACA7G,EADAC,EAAArC,WAAAqC,YACAD,EAAA3D,OAAA6D,iBACUC,wBAAgBC,OAAA,SAAAnE,EAAAoE,GAAsCpE,EAAAkE,UAAAE,IAChE,SAAApE,EAAAoE,GAAyB,QAAAnD,KAAAmD,IAAApD,eAAAC,KAAAjB,EAAAiB,GAAAmD,EAAAnD,KACzB,SAAAjB,EAAAoE,GAEA,SAAAC,IAAuB1C,KAAA2C,YAAAtE,EADvB+D,EAAA/D,EAAAoE,GAEApE,EAAAe,UAAA,OAAAqD,EAAAhE,OAAAmE,OAAAH,IAAAC,EAAAtD,UAAAqD,EAAArD,UAAA,IAAAsD,KAGAjE,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAqK,EAAAvL,EAAA,IACAwL,EAAAxL,EAAA,GACAmF,EAAAnF,EAAA,GACAyL,EAAAzL,EAAA,IAOA,SAAA0L,EAAAC,GACA,eAAAA,GANA,SAAAC,GACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,qBAHA,CAICtM,EAAAsM,aAAAtM,EAAAsM,gBAOD,IAAAC,EAAA,SAAAtG,GAEA,SAAAsG,EAAA3J,GACA,IAAAuD,EAAAF,EAAAlF,KAAA8B,KAAAD,IAAAC,KASA,OAJAsD,EAAAC,MAAA,EAEAD,EAAAqG,WAAAnM,OAAAoM,iBACAnL,OAAAkF,OAAAL,EAAAvD,GACAuD,EAgHA,OA3HAjB,EAAAqH,EAAAtG,GAaAsG,EAAAtK,UAAAyK,mBAAA,SAAAlJ,EAAAmJ,GACA,IAAAxK,EAAAwK,IAAwB7J,EAAA,EAAAC,EAAA,GAGxB,OAFAZ,EAAAW,EAAAU,EAAAV,EAAAD,KAAA2J,WACArK,EAAAY,EAAAS,EAAAT,EAAAF,KAAA2J,WACArK,GAEAoK,EAAAtK,UAAA2K,mBAAA,SAAApJ,EAAAmJ,GACA,IAAAxK,EAAAwK,IAAwB7J,EAAA,EAAAC,EAAA,GAGxB,OAFAZ,EAAAW,EAAAU,EAAAV,EAAAD,KAAA2J,WACArK,EAAAY,EAAAS,EAAAT,EAAAF,KAAA2J,WACArK,GAEAoK,EAAAtK,UAAA4K,aAAA,SAAArJ,EAAAmJ,GACA,IAAAxK,EAAAU,KAAA6J,mBAAAlJ,EAAAmJ,GAGA,OAFAxK,EAAAW,EAAAX,EAAAW,EAAAD,KAAAiK,WAAAhK,EACAX,EAAAY,EAAAZ,EAAAY,EAAAF,KAAAiK,WAAA/J,EACAZ,GAEAoK,EAAAtK,UAAA8K,aAAA,SAAAvJ,EAAAmJ,GACA,IAAAxK,GAAiBW,EAAA,EAAAC,EAAA,GAGjB,OAFAZ,EAAAW,EAAAU,EAAAV,EAAAD,KAAAiK,WAAAhK,EACAX,EAAAY,EAAAS,EAAAT,EAAAF,KAAAiK,WAAA/J,EACAF,KAAA+J,mBAAAzK,EAAAwK,IAEAJ,EAAAtK,UAAA+K,cAAA,SAAAxJ,EAAAmJ,GACA,IAAAM,EAAApK,KAAAgK,aAAArJ,GACA0J,EAAAP,IAA4B7J,EAAA,EAAAC,EAAA,GAO5B,OANAmK,EAAApK,GAAAmK,EAAAnK,EAAAD,KAAAsK,OAAAC,OAAA,GAAAvK,KAAAsK,OAAAE,MAAA,IAAAxK,KAAAsK,OAAAE,MAAA,GACAH,EAAAnK,GAAAkK,EAAAlK,EAAAF,KAAAsK,OAAAC,OAAA,GAAAvK,KAAAsK,OAAAE,MAAA,IAAAxK,KAAAsK,OAAAE,MAAA,GAEAxK,KAAAyK,WAAAlG,OAAA+E,EAAAoB,eAAAC,QACAC,QAAAC,KAAA,oDAEAR,GAEAX,EAAAtK,UAAA0L,cAAA,SAAAnK,EAAAmJ,GACA,IAAAiB,GAAsB9K,EAAA,EAAAC,EAAA,GAStB,OAPA6K,EAAA9K,EAAAU,EAAAV,EAAAD,KAAAsK,OAAAE,MAAA,GAAAxK,KAAAsK,OAAAC,OAAA,GAAAvK,KAAAsK,OAAAE,MAAA,GACAO,EAAA7K,EAAAS,EAAAT,EAAAF,KAAAsK,OAAAE,MAAA,GAAAxK,KAAAsK,OAAAC,OAAA,GAAAvK,KAAAsK,OAAAE,MAAA,GAEAxK,KAAAyK,WAAAlG,OAAA+E,EAAAoB,eAAAC,QACAC,QAAAC,KAAA,oDAGA7K,KAAAkK,aAAAa,EAAAjB,IAEAJ,EAAAtK,UAAA4L,YAAA,SAAArK,EAAAmJ,GACA,IAAAO,EAAAP,IAA4B7J,EAAA,EAAAC,EAAA,GAC5B6K,EAAA/K,KAAA+J,mBAAApJ,GAOA,OANA0J,EAAApK,GAAA8K,EAAA9K,EAAAD,KAAAsK,OAAAC,OAAA,GAAAvK,KAAAsK,OAAAE,MAAA,IAAAxK,KAAAsK,OAAAE,MAAA,GACAH,EAAAnK,GAAA6K,EAAA7K,EAAAF,KAAAsK,OAAAC,OAAA,GAAAvK,KAAAsK,OAAAE,MAAA,IAAAxK,KAAAsK,OAAAE,MAAA,GAEAxK,KAAAyK,WAAAlG,OAAA+E,EAAAoB,eAAAC,QACAC,QAAAC,KAAA,oDAEAR,GAEAX,EAAAtK,UAAA6L,YAAA,SAAAtK,EAAAmJ,GACA,IAAAiB,EAAAjB,IAA6B7J,EAAA,EAAAC,EAAA,GAQ7B,OANA6K,EAAA9K,EAAAU,EAAAV,EAAAD,KAAAsK,OAAAE,MAAA,GAAAxK,KAAAsK,OAAAC,OAAA,GAAAvK,KAAAsK,OAAAE,MAAA,GACAO,EAAA7K,EAAAS,EAAAT,EAAAF,KAAAsK,OAAAE,MAAA,GAAAxK,KAAAsK,OAAAC,OAAA,GAAAvK,KAAAsK,OAAAE,MAAA,GAEAxK,KAAAyK,WAAAlG,OAAA+E,EAAAoB,eAAAC,QACAC,QAAAC,KAAA,oDAEAE,GAOArB,EAAAtK,UAAA8L,kBAAA,SAAAC,GACA,GAAAnL,KAAAyK,WAAAlG,OAAA+E,EAAAoB,eAAAU,YAAA7B,EAAAvJ,KAAAyK,WAAAY,YAAA,CACA,IAAApB,EAAAb,EAAAkC,0BAAAtL,KAAAuL,SAAAJ,GACAhL,EAAA8J,EAAA9J,MACAC,EAAA6J,EAAA7J,OACAmL,GACAhL,QAAAH,EAAA,EACAoL,IAAA,IACAnL,MAAAF,EAAA,EACAsL,MAAA,IACAjL,MAAAL,EAAA,EACAG,IAAAF,EAAA,GAIAkK,EAAAtK,KAAAyK,WAAAY,WACA5M,OAAAkF,OAAA2G,EAAAiB,GACAjB,EAAAoB,SAAAC,KAAA1B,EAAA9J,MAAA,EAJA,EAIA8J,EAAA7J,OAAA,EAHA,EAGAkK,EAAAoB,SAAAE,GACAtB,EAAAE,MAAAmB,IALA,GACA,EAIA,GACArB,EAAAuB,eACAvB,EAAAwB,mBAAA,GACAxB,EAAAyB,yBACA/L,KAAAiK,aACAjK,KAAAiK,WAAA3E,KAAAtF,KACAA,KAAAgM,aAAA,IAAA3C,EAAAvJ,QACAM,OAAAJ,KAAAiK,WAAA7J,OAAAJ,KAAA2J,WACAxJ,MAAAH,KAAAiK,WAAA9J,MAAAH,KAAA2J,WACA1J,EAAAD,KAAAiK,WAAAhK,EAAAD,KAAA2J,WACAzJ,EAAAF,KAAAiK,WAAA/J,EAAAF,KAAA2J,kBAGAJ,EAAAvJ,KAAAyK,WAAAY,aACAT,QAAAC,KAAA,qFAGAnB,EAAAuC,gBAAA,cACAvC,EA5HA,CA6HC1G,EAAAyE,eACDtK,EAAAuM,qCCzJA,IACAtH,EADAC,EAAArC,WAAAqC,YACAD,EAAA3D,OAAA6D,iBACUC,wBAAgBC,OAAA,SAAAnE,EAAAoE,GAAsCpE,EAAAkE,UAAAE,IAChE,SAAApE,EAAAoE,GAAyB,QAAAnD,KAAAmD,IAAApD,eAAAC,KAAAjB,EAAAiB,GAAAmD,EAAAnD,KACzB,SAAAjB,EAAAoE,GAEA,SAAAC,IAAuB1C,KAAA2C,YAAAtE,EADvB+D,EAAA/D,EAAAoE,GAEApE,EAAAe,UAAA,OAAAqD,EAAAhE,OAAAmE,OAAAH,IAAAC,EAAAtD,UAAAqD,EAAArD,UAAA,IAAAsD,KAGAjE,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAA8D,EAAAhF,EAAA,GAEA,SAAAqO,EAAAC,EAAA1J,GACA,OAAA0J,EAAA5I,MAAAd,EAAAc,MAMA,IAAA6I,EAAA,SAAAhJ,GAEA,SAAAgJ,EAAArM,GACA,IAAAuD,EAAAF,EAAAlF,KAAA8B,KAAAD,IAAAC,KAWA,OATAsD,EAAA+I,UAAA,IAAAxJ,EAAAuJ,MAEA9I,EAAAgJ,UAEAhJ,EAAAiJ,aAAA,EAEAjJ,EAAAkJ,SAAA,IAAA/I,IACAH,EAAA+I,UAAAI,eAAA,EACAnJ,EAAA+I,UAAAK,YAAA,EACApJ,EAsCA,OAnDAjB,EAAA+J,EAAAhJ,GAoBAgJ,EAAAhN,UAAAuN,SAAA,SAAA9D,GAEA7I,KAAAsM,OAAAM,KAAA/D,GACA7I,KAAAuM,aAAA,GAKAH,EAAAhN,UAAAyN,QAAA,SAAAzC,GACApK,KAAAwM,SAAAb,IAAAvB,EAAAnI,GAAAmI,IAMAgC,EAAAhN,UAAA0N,YAAA,SAAAjE,GACA,GAAA7I,KAAAsM,OAAA,CACA,IAAAS,EAAA/M,KAAAsM,OAAAU,QAAAnE,GACA,GAAAkE,GAAA,EAEA,YADA/M,KAAAsM,OAAAW,OAAAF,EAAA,GAIAnC,QAAAC,KAAA,oGAAA7K,KAAAiC,GAAA,SAAA4G,EAAA5G,KAEAmK,EAAAhN,UAAA8N,WAAA,WACAlN,KAAAuM,aACAvM,KAAAsM,OAAAa,KAAAjB,IAGAE,EAAAgB,iBAAA,cACAhB,EApDA,CARAvO,EAAA,GA6DC4J,eACDtK,EAAAiP,sCCzEA,IAAA1B,EADAjM,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAE9C,SAAA2L,GAOAA,IAAA,2BAIAA,IAAA,mBAXA,CAYCA,EAAAvN,EAAAuN,iBAAAvN,EAAAuN,oBAQD,IAAA2C,EAAA,WAIA,OAHA,WACArN,KAAAuE,KAAAmG,EAAAU,YAFA,GAMAjO,EAAAkQ,2CC5BA5O,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAuO,EAAA,EAMA,SAAAC,EAAAjM,EAAAkM,GACAlM,GAAAkM,GAAAlM,EAAA2L,OAAAQ,MAAAnM,GAAA,EAAAkM,EAAA9L,QAAAgM,OAAAF,IAEA,IAAAG,EAAA,WACA,SAAAA,EAAA5N,GAEAC,KAAAgC,IAAAsL,IAEAtN,KAAAuK,QAAA,OAEAvK,KAAAwK,OAAA,OACAzK,IACAwN,EAAAvN,KAAAuK,OAAAxK,EAAAwK,QACAgD,EAAAvN,KAAAwK,MAAAzK,EAAAyK,QAiBA,OAdA/L,OAAAC,eAAAiP,EAAAvO,UAAA,MAEAP,IAAA,WACA,OAAAmB,KAAAgC,KAEApD,YAAA,EACAD,cAAA,IAKAgP,EAAAvO,UAAAsM,SAAA,SAAAkC,GACA5N,KAAAuK,OAAAqD,EAAAC,MAAA,IAEAF,EA3BA,GA6BAxQ,EAAAwQ,4CCvCAlP,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IA4C9C5B,EAAA2Q,eA3CA,SAAAC,EAAAhO,EAAAiO,GACA,IAAAC,EAAA,IAAAxK,IACAyK,EAAA,IAAAzK,IACA0K,EAAA,IAAA1K,IACA2K,EAAA,IAAA3K,IACA4K,EAAAN,EAAAO,QAAA,eAAmD,SAAArO,EAAAsO,GAEnD,OADAH,EAAAzC,IAAA4C,GAAAH,EAAAvP,IAAA0P,IAAA,MACAA,KAAAxO,GACAkO,EAAAtC,IAAA4C,GAAAN,EAAApP,IAAA0P,IAAA,MACAxO,EAAAwO,KAEAL,EAAAvC,IAAA4C,GAAAL,EAAArP,IAAA0P,IAAA,MACA,MAEA9P,OAAA+P,KAAAzO,GAAA8F,QAAA,SAAA4I,GACAR,EAAApP,IAAA4P,IACAN,EAAAxC,IAAA8C,GAAAN,EAAAtP,IAAA4P,IAAA,QAIA,IAAAC,GACAC,sBAAAV,EACAF,OAAAM,EACAO,sBAAAR,EACAS,0BAAAV,EACAW,wBAAAZ,GAgBA,OAdAF,GAEAA,EAAAe,OAAAlJ,QAAA,SAAAxI,GACAqR,EAAAG,0BAAAhQ,IAAAxB,GACAuN,QAAAoE,MAAAhB,EAAA1P,KAAA,sDAAAjB,GAEAqR,EAAAI,wBAAAjQ,IAAAxB,GACAuN,QAAAoE,MAAAhB,EAAA1P,KAAA,yEAAAjB,GAEAqR,EAAAC,sBAAA9P,IAAAxB,IACAuN,QAAAoE,MAAAhB,EAAA1P,KAAA,yEAAAjB,KAIAqR,iCC1CA,SAAAhH,EAAAvJ,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAEAb,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C2I,EAAA7J,EAAA,IACA6J,EAAA7J,EAAA,mCCLA,IAoCAoR,EApCAC,EAAAlP,WAAAkP,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,WAAAD,MAAAE,UAAA,SAAA7J,EAAA8J,GACA,SAAAC,EAAA1Q,GAAmC,IAAM2Q,EAAAJ,EAAAK,KAAA5Q,IAA+B,MAAA8I,GAAY2H,EAAA3H,IACpF,SAAA+H,EAAA7Q,GAAkC,IAAM2Q,EAAAJ,EAAA,MAAAvQ,IAAmC,MAAA8I,GAAY2H,EAAA3H,IACvF,SAAA6H,EAAAG,GAA+BA,EAAAC,KAAApK,EAAAmK,EAAA9Q,OAAA,IAAAsQ,EAAA,SAAA3J,GAAiEA,EAAAmK,EAAA9Q,SAAyBgR,KAAAN,EAAAG,GACzHF,GAAAJ,IAAA7B,MAAA0B,EAAAC,QAAAO,WAGAK,EAAAhQ,WAAAgQ,aAAA,SAAAb,EAAAc,GACA,IAAwGC,EAAAhQ,EAAAiQ,EAAAC,EAAxGC,GAAaC,MAAA,EAAAC,KAAA,WAA6B,KAAAJ,EAAA,SAAAA,EAAA,GAA0B,OAAAA,EAAA,IAAeK,QAAAC,QACnF,OAAAL,GAAgBT,KAAAe,EAAA,GAAAC,MAAAD,EAAA,GAAAE,OAAAF,EAAA,IAAqD,mBAAAG,SAAAT,EAAAS,OAAAC,UAAA,WAAoE,OAAA9Q,OAAeoQ,EACxJ,SAAAM,EAAA1R,GAAsB,gBAAA+R,GAAsB,OAC5C,SAAAC,GACA,GAAAd,EAAA,UAAAe,UAAA,mCACA,KAAAZ,GAAA,IACA,GAAAH,EAAA,EAAAhQ,IAAAiQ,EAAAjQ,EAAA,EAAA8Q,EAAA,YAAAA,EAAA,uBAAAb,IAAAjS,KAAAgC,EAAA8Q,EAAA,KAAAlB,KAAA,OAAAK,EAEA,OADAjQ,EAAA,EAAAiQ,IAAAa,GAAA,EAAAb,EAAApR,QACAiS,EAAA,IACA,cAAAb,EAAAa,EAAuC,MACvC,OAAkC,OAAlCX,EAAAC,SAA2CvR,MAAAiS,EAAA,GAAAlB,MAAA,GAC3C,OAAAO,EAAAC,QAAkCpQ,EAAA8Q,EAAA,GAAWA,GAAA,GAAU,SACvD,OAAAA,EAAAX,EAAAI,IAAAS,MAAyCb,EAAAG,KAAAU,MAAc,SACvD,QACA,KAAAf,KAAAE,EAAAG,MAAA9O,OAAA,GAAAyO,IAAAzO,OAAA,UAAAsP,EAAA,QAAAA,EAAA,KAA6GX,EAAA,EAAO,SACpH,OAAAW,EAAA,MAAAb,GAAAa,EAAA,GAAAb,EAAA,IAAAa,EAAA,GAAAb,EAAA,KAAgFE,EAAAC,MAAAU,EAAA,GAAiB,MACjG,OAAAA,EAAA,IAAAX,EAAAC,MAAAH,EAAA,IAAwDE,EAAAC,MAAAH,EAAA,GAAgBA,EAAAa,EAAQ,MAChF,GAAAb,GAAAE,EAAAC,MAAAH,EAAA,IAA8CE,EAAAC,MAAAH,EAAA,GAAgBE,EAAAI,IAAA7D,KAAAoE,GAAgB,MAC9Eb,EAAA,IAAAE,EAAAI,IAAAS,MACAb,EAAAG,KAAAU,MAAiC,SAEjCF,EAAAf,EAAA/R,KAAAiR,EAAAkB,GACS,MAAAxI,GAAYmJ,GAAA,EAAAnJ,GAAa3H,EAAA,EAAS,QAAUgQ,EAAAC,EAAA,EACrD,KAAAa,EAAA,SAAAA,EAAA,GAAmC,OAASjS,MAAAiS,EAAA,GAAAA,EAAA,UAAAlB,MAAA,GArBAJ,EAAA1Q,EAAA+R,OAwB5CtS,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAE9C,IACAoS,EAAA,WACA,SAAAA,KAmMA,OA9LAA,EAAAC,aAAA,WACA,OAAAlC,EAAAlP,UAAA,oBACA,OAAAgQ,EAAAhQ,KAAA,SAAA6D,GACA,OAAAA,EAAAyM,OACA,OACA,OAAArB,GAAA,MACAjP,KAAAqR,cACA,MAAA9B,QAAA,SAAA7J,GAA6E,OAAA4L,WAAA5L,EAAA,QAC7E,OAEA,OADA7B,EAAA0M,QACA,KACA,uBAQAY,EAAAE,WAAA,WAIA,OAHApC,IACAA,EAAAsC,SAAAC,cAAA,UAAAH,WAAA,OAEApC,GAWAkC,EAAAM,mBAAA,SAAAC,EAAA/I,EAAAgJ,GAEA,IAAArB,EAAAoB,EAAApB,MAEAsB,EAAAjJ,GAAA+I,EAAA/I,aAAA,EAEAkJ,EAAA7R,KAAA8R,8BAAAxB,EAAAsB,GAEA3C,EAAA8C,UAAA,QAEA9C,EAAA+C,KAAAhS,KAAAiS,YAAA3B,EAAAsB,GAIA3C,SAAA9O,MAAA8O,EAAAiD,YAAA5B,EAAA6B,MAAAhS,MAAA0R,EAGA5C,SAAA7O,OAAA,EAAAyR,EAGA5C,EAAA8C,UAAA,QAEA9C,EAAA+C,KAAAhS,KAAAiS,YAAA3B,EAAAsB,GAEA3C,EAAAmD,SAAA9B,EAAA6B,KAAAN,EAAA,EAAAA,EAAA,EAAAA,GAUA,IARA,IAAAhO,EAAAoL,SAAA9O,EAAA0D,EAAA1D,MAAAC,EAAAyD,EAAAzD,OACAiS,EAAApD,EAAAqD,aAAA,IAAAnS,EAAAC,GAAAkF,KAEAiN,EAAAC,OAAAC,iBACAC,EAAAF,OAAAC,iBACAE,EAAAH,OAAAI,iBACAC,EAAAL,OAAAI,iBACA7R,EAAAD,KAAAC,IAAA+R,EAAAhS,KAAAgS,IACA/U,EAAA,EAAuBA,EAAAoC,IAAWpC,EAClC,QAAAgV,EAAA,EAA2BA,EAAA3S,IAAY2S,EAAA,CAEvCV,EADAU,GAAA,EAAA5S,GAAA,EAAApC,GAEA,IACAwU,EAAAxR,EAAAwR,EAAAQ,GACAL,EAAA3R,EAAA2R,EAAA3U,GACA4U,EAAAG,EAAAH,EAAA5U,GACA8U,EAAAC,EAAAD,EAAAE,IAKAR,GAAA,EACAM,GAAA,EACAF,GAAA,EACAD,GAAA,EACAH,EAAAzR,KAAAgS,IAAAP,EAAA,GACAG,EAAA5R,KAAAgS,IAAAJ,EAAA,GAEAhB,EAAAsB,cAAAtB,EAAAsB,gBACAC,SAAsB7S,OAAA,EAAAD,MAAA,GACtBkK,OAAoBjK,OAAA,EAAAD,MAAA,IAGpBwR,GAUAD,EAAAsB,cAAAC,SACA7S,OAAAyS,EAAAN,EACApS,MAAAwS,EAAAD,GAEAhB,EAAAsB,cAAA/D,OAAAjP,KAAAkT,oBAAAxB,EAAAa,EAAAG,GACA1S,KAAAyR,mBAAAC,EAAA,OAbAA,EAAAsB,cAAA3I,OACAjK,OAAAyS,EAAAN,EACApS,MAAAwS,EAAAD,IAkBAvB,EAAA+B,oBAAA,SAAAxB,EAAApR,EAAAD,GACA,IAAA8S,EAAA5B,SAAAC,cAAA,UACA4B,EAAAD,EAAA9B,WAAA,MACA,GAAA+B,EAAA,CACA,IAAAH,EAAAvB,EAAAsB,cAAAC,QACAE,EAAAhT,MAAA8S,EAAA9S,MACAgT,EAAA/S,OAAA6S,EAAA7S,OACAgT,EAAAC,uBAAA,EAEAD,EAAAE,UAAArE,SAAA5O,EAAAC,EAAA2S,EAAA9S,MAAA8S,EAAA7S,OAAA,IAAA6S,EAAA9S,MAAA8S,EAAA7S,aAGAwK,QAAAC,KAAA,6EAEA,OAAAsI,GAMAhC,EAAAW,8BAAA,SAAAxB,EAAA3H,GACA,OAAA2H,EAAAuB,SAAAlJ,GAKAwI,EAAAc,YAAA,SAAA3B,EAAA3H,GACA,OAAA2H,EAAAiD,WAAA,IAAAvT,KAAA8R,8BAAAxB,EAAA3H,GAAA,MAAA2H,EAAAkD,YAKArC,EAAAsC,OAAA,SAAA/B,GACA,OAAAxC,EAAAlP,UAAA,oBACA,OAAAgQ,EAAAhQ,KAAA,SAAA6D,GACA,OAAAA,EAAAyM,OACA,OAEA,SAAAtQ,KAAAoR,gBACA,OAIA,OAFAvN,EAAA0M,OAEAmB,EAAApB,MAAAuB,SArKA,IAsKAjH,QAAAC,KAAA,4CACA,EAAA6G,KAIA1R,KAAAyR,mBAAAC,IAAA/I,aAAA,IACA,EAAA+I,UAQAP,EAAAuC,WAAA,SAAAhC,GAGA,OADA1R,KAAAqR,aACApC,EAKAyC,EAAApB,MAAAuB,SA5LA,IA6LAjH,QAAAC,KAAA,2CACA6G,IAIA1R,KAAAyR,mBAAAC,IAAA/I,aAAA,GACA+I,IAXA9G,QAAAC,KAAA,gFACA6G,IAYAP,EApMA,GAsMAhU,EAAAgU,gDC5OA,IACA/O,EADAC,EAAArC,WAAAqC,YACAD,EAAA3D,OAAA6D,iBACUC,wBAAgBC,OAAA,SAAAnE,EAAAoE,GAAsCpE,EAAAkE,UAAAE,IAChE,SAAApE,EAAAoE,GAAyB,QAAAnD,KAAAmD,IAAApD,eAAAC,KAAAjB,EAAAiB,GAAAmD,EAAAnD,KACzB,SAAAjB,EAAAoE,GAEA,SAAAC,IAAuB1C,KAAA2C,YAAAtE,EADvB+D,EAAA/D,EAAAoE,GAEApE,EAAAe,UAAA,OAAAqD,EAAAhE,OAAAmE,OAAAH,IAAAC,EAAAtD,UAAAqD,EAAArD,UAAA,IAAAsD,KAGAjE,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IACA4U,EAAA,SAAAvQ,GAEA,SAAAuQ,EAAArD,GACA,IAAAhN,EAAAF,EAAAlF,KAAA8B,YAEA,OADAsD,EAAAgN,QACAhN,EAEA,OANAjB,EAAAsR,EAAAvQ,GAMAuQ,EAPA,CADA9V,EAAA,IASC6K,mBACDvL,EAAAwW,mDCrBA,IACAvR,EADAC,EAAArC,WAAAqC,YACAD,EAAA3D,OAAA6D,iBACUC,wBAAgBC,OAAA,SAAAnE,EAAAoE,GAAsCpE,EAAAkE,UAAAE,IAChE,SAAApE,EAAAoE,GAAyB,QAAAnD,KAAAmD,IAAApD,eAAAC,KAAAjB,EAAAiB,GAAAmD,EAAAnD,KACzB,SAAAjB,EAAAoE,GAEA,SAAAC,IAAuB1C,KAAA2C,YAAAtE,EADvB+D,EAAA/D,EAAAoE,GAEApE,EAAAe,UAAA,OAAAqD,EAAAhE,OAAAmE,OAAAH,IAAAC,EAAAtD,UAAAqD,EAAArD,UAAA,IAAAsD,KAGAjE,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IACA6U,EAAA,SAAAxQ,GAEA,SAAAwQ,EAAAC,GACA,IAAAvQ,EAAAF,EAAAlF,KAAA8B,YAEA,OADAsD,EAAAuQ,QACAvQ,EAEA,OANAjB,EAAAuR,EAAAxQ,GAMAwQ,EAPA,CADA/V,EAAA,IASC6K,mBACDvL,EAAAyW,mDCrBA,IAAA1E,EAAAlP,WAAAkP,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,WAAAD,MAAAE,UAAA,SAAA7J,EAAA8J,GACA,SAAAC,EAAA1Q,GAAmC,IAAM2Q,EAAAJ,EAAAK,KAAA5Q,IAA+B,MAAA8I,GAAY2H,EAAA3H,IACpF,SAAA+H,EAAA7Q,GAAkC,IAAM2Q,EAAAJ,EAAA,MAAAvQ,IAAmC,MAAA8I,GAAY2H,EAAA3H,IACvF,SAAA6H,EAAAG,GAA+BA,EAAAC,KAAApK,EAAAmK,EAAA9Q,OAAA,IAAAsQ,EAAA,SAAA3J,GAAiEA,EAAAmK,EAAA9Q,SAAyBgR,KAAAN,EAAAG,GACzHF,GAAAJ,IAAA7B,MAAA0B,EAAAC,QAAAO,WAGAK,EAAAhQ,WAAAgQ,aAAA,SAAAb,EAAAc,GACA,IAAwGC,EAAAhQ,EAAAiQ,EAAAC,EAAxGC,GAAaC,MAAA,EAAAC,KAAA,WAA6B,KAAAJ,EAAA,SAAAA,EAAA,GAA0B,OAAAA,EAAA,IAAeK,QAAAC,QACnF,OAAAL,GAAgBT,KAAAe,EAAA,GAAAC,MAAAD,EAAA,GAAAE,OAAAF,EAAA,IAAqD,mBAAAG,SAAAT,EAAAS,OAAAC,UAAA,WAAoE,OAAA9Q,OAAeoQ,EACxJ,SAAAM,EAAA1R,GAAsB,gBAAA+R,GAAsB,OAC5C,SAAAC,GACA,GAAAd,EAAA,UAAAe,UAAA,mCACA,KAAAZ,GAAA,IACA,GAAAH,EAAA,EAAAhQ,IAAAiQ,EAAAjQ,EAAA,EAAA8Q,EAAA,YAAAA,EAAA,uBAAAb,IAAAjS,KAAAgC,EAAA8Q,EAAA,KAAAlB,KAAA,OAAAK,EAEA,OADAjQ,EAAA,EAAAiQ,IAAAa,GAAA,EAAAb,EAAApR,QACAiS,EAAA,IACA,cAAAb,EAAAa,EAAuC,MACvC,OAAkC,OAAlCX,EAAAC,SAA2CvR,MAAAiS,EAAA,GAAAlB,MAAA,GAC3C,OAAAO,EAAAC,QAAkCpQ,EAAA8Q,EAAA,GAAWA,GAAA,GAAU,SACvD,OAAAA,EAAAX,EAAAI,IAAAS,MAAyCb,EAAAG,KAAAU,MAAc,SACvD,QACA,KAAAf,KAAAE,EAAAG,MAAA9O,OAAA,GAAAyO,IAAAzO,OAAA,UAAAsP,EAAA,QAAAA,EAAA,KAA6GX,EAAA,EAAO,SACpH,OAAAW,EAAA,MAAAb,GAAAa,EAAA,GAAAb,EAAA,IAAAa,EAAA,GAAAb,EAAA,KAAgFE,EAAAC,MAAAU,EAAA,GAAiB,MACjG,OAAAA,EAAA,IAAAX,EAAAC,MAAAH,EAAA,IAAwDE,EAAAC,MAAAH,EAAA,GAAgBA,EAAAa,EAAQ,MAChF,GAAAb,GAAAE,EAAAC,MAAAH,EAAA,IAA8CE,EAAAC,MAAAH,EAAA,GAAgBE,EAAAI,IAAA7D,KAAAoE,GAAgB,MAC9Eb,EAAA,IAAAE,EAAAI,IAAAS,MACAb,EAAAG,KAAAU,MAAiC,SAEjCF,EAAAf,EAAA/R,KAAAiR,EAAAkB,GACS,MAAAxI,GAAYmJ,GAAA,EAAAnJ,GAAa3H,EAAA,EAAS,QAAUgQ,EAAAC,EAAA,EACrD,KAAAa,EAAA,SAAAA,EAAA,GAAmC,OAASjS,MAAAiS,EAAA,GAAAA,EAAA,UAAAlB,MAAA,GArBAJ,EAAA1Q,EAAA+R,OAwB5CtS,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAE9C,IAIA+U,EAAA,WACA,SAAAA,KA8DA,OAzDAA,EAAA1C,aAAA,SAAAnC,GACA,OAAAC,EAAAlP,UAAA,oBACA,IAAA5B,EAAA2V,EACA,OAAA/D,EAAAhQ,KAAA,SAAA6D,GACA,OAAAA,EAAAyM,OACA,OACAlS,EAAA6Q,EAAAoC,WAAA,MAAA0C,EAAA,EACAlQ,EAAAyM,MAAA,EACA,OACA,OAAApH,QAAA9K,IAAA2V,EAAA,KACA,MAAAxE,QAAA,SAAA7J,GAA6E,OAAA4L,WAAA5L,EAAA,QAD7E,KAEA,OACA7B,EAAA0M,OACA1M,EAAAyM,MAAA,EACA,OAEA,OADAlS,EAAA6Q,EAAAoC,WAAA,QAAA0C,GACA,KACA,uBAQAD,EAAAE,QAAA,SAAAC,GACA,cAAAnT,KAAAoT,MAAA,IAAAD,EAAAnV,GAAA,KAAAgC,KAAAoT,MAAA,IAAAD,EAAA7D,GAAA,KAAAtP,KAAAoT,MAAA,IAAAD,EAAAxR,GAAA,KAAAwR,EAAAE,QAAA,KAEAL,EAAAL,OAAA,SAAA/B,GACA,OAAAxC,EAAAlP,UAAA,oBACA,IAAAiP,EAAAmE,EACA,OAAApD,EAAAhQ,KAAA,SAAA6D,GACA,OAAAA,EAAAyM,OACA,OAGA,OAFArB,EAAAsC,SAAAC,cAAA,UACA4B,EAAAnE,EAAAoC,WAAA,OACA,EAAArR,KAAAoR,aAAAnC,IACA,OAeA,OAdApL,EAAA0M,OACA6C,GACAnE,EAAA9O,MAlDA,EAmDA8O,EAAA7O,OAnDA,EAoDAgT,EAAAC,uBAAA,EACAD,EAAArB,UAAA/R,KAAAgU,QAAAtC,EAAAuC,OAEAb,EAAAgB,SAAA,IAvDA,KAyDA1C,EAAAsB,cAAA/D,UAGArE,QAAAC,KAAA,gFAEA,EAAA6G,SAKAoC,EA/DA,GAiEA3W,EAAA2W,gDC1GA,IACA1R,EADAC,EAAArC,WAAAqC,YACAD,EAAA3D,OAAA6D,iBACUC,wBAAgBC,OAAA,SAAAnE,EAAAoE,GAAsCpE,EAAAkE,UAAAE,IAChE,SAAApE,EAAAoE,GAAyB,QAAAnD,KAAAmD,IAAApD,eAAAC,KAAAjB,EAAAiB,GAAAmD,EAAAnD,KACzB,SAAAjB,EAAAoE,GAEA,SAAAC,IAAuB1C,KAAA2C,YAAAtE,EADvB+D,EAAA/D,EAAAoE,GAEApE,EAAAe,UAAA,OAAAqD,EAAAhE,OAAAmE,OAAAH,IAAAC,EAAAtD,UAAAqD,EAAArD,UAAA,IAAAsD,KAGAjE,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IACAsV,EAAA,SAAAjR,GAEA,SAAAiR,EAAAJ,GACA,IAAA3Q,EAAAF,EAAAlF,KAAA8B,YAEA,OADAsD,EAAA2Q,QACA3Q,EAEA,OANAjB,EAAAgS,EAAAjR,GAMAiR,EAPA,CADAxW,EAAA,IASC6K,mBACDvL,EAAAkX,mDCrBA5V,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAI9C,IAAAuV,EAAA,WAKA,OAJA,WAEAtU,KAAAuU,YAAA,GAHA,GAOApX,EAAAmX,2CCXA,IACAlS,EADAC,EAAArC,WAAAqC,YACAD,EAAA3D,OAAA6D,iBACUC,wBAAgBC,OAAA,SAAAnE,EAAAoE,GAAsCpE,EAAAkE,UAAAE,IAChE,SAAApE,EAAAoE,GAAyB,QAAAnD,KAAAmD,IAAApD,eAAAC,KAAAjB,EAAAiB,GAAAmD,EAAAnD,KACzB,SAAAjB,EAAAoE,GAEA,SAAAC,IAAuB1C,KAAA2C,YAAAtE,EADvB+D,EAAA/D,EAAAoE,GAEApE,EAAAe,UAAA,OAAAqD,EAAAhE,OAAAmE,OAAAH,IAAAC,EAAAtD,UAAAqD,EAAArD,UAAA,IAAAsD,KAGAjE,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAA8D,EAAAhF,EAAA,GACAmF,EAAAnF,EAAA,GACA2W,EAAA3W,EAAA,IACA4W,EAAA5W,EAAA,KASA,SAAA6W,GACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,cACAA,IAAA,cACAA,IAAA,cACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,oBAZA,CAaCvX,EAAAuX,YAAAvX,EAAAuX,eAKD,IAAAC,EAAA,SAAAvR,GAEA,SAAAuR,EAAA5U,GACA,IAAAuD,EAAAF,EAAAlF,KAAA8B,KAAAD,IAAAC,KAMAsD,EAAAsR,eAAA,IAAAnR,IACA,IAAAwL,EAAAsC,SAAAC,cAAA,UAQA,OAPAlO,EAAAnD,MAAA8O,EAAA9O,MAAAJ,EAAAI,MACAmD,EAAAlD,OAAA6O,EAAA7O,OAAAL,EAAAK,OACAkD,EAAAuR,gBAAA9U,EAAA8U,gBAEAvR,EAAAwR,QAAA,IAAAN,EAAAO,SAAA,IAAAhV,EAAAI,MAAAJ,EAAAK,QAEAkD,EAAA0R,cAAA/F,GACA3L,EAoGA,OArHAjB,EAAAsS,EAAAvR,GAsBAuR,EAAAvV,UAAA6V,mBAAA,SAAAvD,GACA,IAAAwD,GAAoBjV,EAAA,EAAAC,EAAA,GACpBwR,EAAAuB,QAAAsB,YAAA,EACA7C,EAAAuB,QAAAkC,QAAAD,EACAxD,EAAAuB,QAAAmC,QAAAF,EACAxD,EAAAuB,QAAAoC,QAAAH,EACAxD,EAAAuB,QAAAqC,QAAAJ,EACAxD,EAAAuB,QAAAsC,iBAAA,GACA7D,EAAAuB,QAAAuC,WAAA,EACA9D,EAAAuB,QAAAwC,YAAA,EACA/D,EAAAuB,QAAAyC,SAAA,GAKAf,EAAAvV,UAAAuW,WAAA,SAAAC,GACA5V,KAAA4V,WAOAjB,EAAAvV,UAAAyW,iBAAA,SAAAnE,GACA,QAAAoE,IAAA9V,KAAA4U,eAAA/V,IAAA6S,GAAA,CACA,IAAAA,EAAAuB,UAAAvB,EAAAuB,QAAAyC,QAMA,OALAhE,EAAAuB,UACAvB,EAAAuB,QAAA,IAAAwB,EAAAH,YAEA5C,EAAAuB,QAAAyC,SAAA,EACA1V,KAAA4U,eAAAjJ,IAAA+F,GAAA,IACA,EAGA9G,QAAAC,KAAA,eAAA7K,KAAAiC,GAAA,qLAAAyP,QAIA9G,QAAAC,KAAA,eAAA7K,KAAAiC,GAAA,kLAAAyP,GAEA,UAUAiD,EAAAvV,UAAA2W,eAAA,SAAArE,GACA1R,KAAA4U,eAAA/V,IAAA6S,IACA1R,KAAA4U,eAAAjJ,IAAA+F,GAAA,GACA1R,KAAAiV,mBAAAvD,IAGA9G,QAAAC,KAAA,eAAA7K,KAAAiC,GAAA,oJAAAyP,IAWAiD,EAAAvV,UAAA4V,cAAA,SAAA/F,GACA,GAAAjP,KAAAiT,QAAA,CACA,IAAA+C,EAAAhW,KAAAiT,QAAAY,MACA7T,KAAAiT,QAAAgD,UACAjW,KAAAiT,QAAA,IAAApQ,EAAAqT,QAAAF,QAGAhW,KAAAiT,QAAA,IAAApQ,EAAAqT,QAAAjH,GAGAjP,KAAAiT,QAAAkD,iBAAA,EACAnW,KAAAiT,QAAAmD,kBAAA,EACApW,KAAA6U,iBAAApW,OAAAkF,OAAA3D,KAAAiT,QAAAjT,KAAA6U,iBACA7U,KAAAiT,QAAAoD,aAAA,GAQA1B,EAAAvV,UAAA0F,QAAA,WACA,IAAAxB,EAAAtD,KACAA,KAAAiT,QAAAgD,UACAjW,KAAA4U,eAAA/O,QAAA,SAAA6P,EAAAhE,GACApO,EAAA2R,mBAAAvD,MAGAiD,EAtHA,CAuHC3R,EAAAyE,eACDtK,EAAAwX,0BClKA,SAAA2B,GA+JA,SAAAC,IACA,IAAAzX,EACA,IACAA,EAAA3B,EAAAqZ,QAAAC,MACG,MAAA5O,IAOH,OAJA/I,QAAA,IAAAwX,GAAA,QAAAA,IACAxX,EAAAwX,EAAAI,IAAAC,OAGA7X,GApKA3B,EAAAC,EAAAD,QAAAU,EAAA,KACA+Y,IAwHA,WAGA,uBAAAhM,SACAA,QAAAgM,KACAC,SAAAzX,UAAAqO,MAAAvP,KAAA0M,QAAAgM,IAAAhM,QAAAnJ,YA5HAtE,EAAA2Z,WA+EA,SAAAC,GACA,IAAAC,EAAAhX,KAAAgX,UASA,GAPAD,EAAA,IAAAC,EAAA,SACAhX,KAAAiX,WACAD,EAAA,WACAD,EAAA,IACAC,EAAA,WACA,IAAA7Z,EAAA+Z,SAAAlX,KAAAmX,OAEAH,EAAA,OAEA,IAAA5Y,EAAA,UAAA4B,KAAAiU,MACA8C,EAAA9J,OAAA,IAAA7O,EAAA,kBAKA,IAAA2O,EAAA,EACAqK,EAAA,EACAL,EAAA,GAAAzI,QAAA,uBAAAC,GACA,OAAAA,GAEA,OAAAA,IAGA6I,IAJArK,KAQAgK,EAAA9J,OAAAmK,EAAA,EAAAhZ,IA5GAjB,EAAAka,KAqIA,SAAAC,GACA,IACA,MAAAA,EACAna,EAAAqZ,QAAAe,WAAA,SAEApa,EAAAqZ,QAAAC,MAAAa,EAEG,MAAAzP,MA3IH1K,EAAAoZ,OACApZ,EAAA6Z,UAgCA,WAIA,uBAAAxZ,eAAA8Y,SAAA,aAAA9Y,OAAA8Y,QAAA/R,KACA,SAIA,uBAAAiT,qBAAAC,WAAAD,UAAAC,UAAAC,cAAAnJ,MAAA,yBACA,SAKA,0BAAAgD,mBAAAoG,iBAAApG,SAAAoG,gBAAAC,OAAArG,SAAAoG,gBAAAC,MAAAC,kBAEA,oBAAAra,eAAAoN,UAAApN,OAAAoN,QAAAkN,SAAAta,OAAAoN,QAAAmN,WAAAva,OAAAoN,QAAAoN,QAGA,oBAAAR,qBAAAC,WAAAD,UAAAC,UAAAC,cAAAnJ,MAAA,mBAAA0J,SAAAC,OAAAC,GAAA,SAEA,oBAAAX,qBAAAC,WAAAD,UAAAC,UAAAC,cAAAnJ,MAAA,uBArDApR,EAAAqZ,QAAA,oBAAA4B,aACA,IAAAA,OAAA5B,QACA4B,OAAA5B,QAAA6B,MAgLA,WACA,IACA,OAAA7a,OAAA8a,aACG,MAAAzQ,KAlLH0Q,GAMApb,EAAAqb,QACA,sEACA,sEACA,sEACA,sEACA,sEACA,sEACA,sEACA,sEACA,sEACA,sEACA,6DAwCArb,EAAAsb,WAAAC,EAAA,SAAA3H,GACA,IACA,OAAA4H,KAAAC,UAAA7H,GACG,MAAA8H,GACH,qCAAAA,EAAAC,UAqGA3b,EAAA4b,OAAAxC,sDChLA9X,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAia,EAAAnb,EAAA,IACAob,EAAApb,EAAA,IAGA,SAAAqO,EAAAC,EAAA1J,GACA,OAAAA,EAAA6C,KAAA/B,MAAA4I,EAAA7G,KAAA/B,MAMA,IAAA2V,EAAA,WACA,SAAAA,EAAAjK,EAAAkK,EAAAC,EAAAC,GACA,IAAA/V,EAAAtD,KAKAA,KAAAsZ,mBAAA,EAKAtZ,KAAAuZ,mBAAA,SAAAC,GAEA,IAAAC,EAAAnW,EAAAc,SAAAsV,MAAAF,GAGA,OADAC,EAAAtM,KAAAjB,GACAuN,GAKAzZ,KAAA2Z,OAAA,WACArW,EAAAgW,mBAAA,GAEAtZ,KAAAoT,QAAAnE,EACAjP,KAAA4Z,SAAAT,GACAnZ,KAAA6Z,eAAAT,GACApZ,KAAA8Z,oBAAAT,GAgNA,OA9MA5a,OAAAC,eAAAwa,EAAA9Z,UAAA,oBACAP,IAAA,WACA,OAAAmB,KAAAsZ,mBAEA3N,IAAA,SAAAnC,GACAxJ,KAAAsZ,kBAAA9P,EAEAA,IACAxJ,KAAAoE,SAAA,IAAA6U,EAAAc,SAAA,SACA/Z,KAAAoE,SAAA4V,OAAAha,KAAAmZ,MAAAc,IAAA,SAAAlJ,GAAkE,OAAAA,EAAAlQ,SAAmBqZ,OAAAhR,YAGrFtK,YAAA,EACAD,cAAA,IAOAua,EAAA9Z,UAAA0a,oBAAA,SAAAT,GACA,IAAA/V,EAAAtD,KACAma,EAAAna,KAAAoT,QACAgH,EAAA,KACAC,EAAA,KACAhB,IACAc,EAAAG,aAAA,SAAAC,GACA,IAAAf,EAAAR,EAAAwB,qBAAAD,EAAAJ,GACAM,EAAAnX,EAAAoX,gBAAAlB,EAAAa,EAAAD,GACA7R,EAAAjF,EAAAqX,UAAAJ,GACAjX,EAAA8V,YAAAvT,QAAA,SAAA+U,GACAA,EAAAtS,YAAAmS,EAAAlS,KAEAgS,EAAAM,kBACAN,EAAAO,mBAGAX,EAAAY,aAAA,SAAAR,GAEA,IAAAjX,EAAA0X,iBAAA,CAEA,IAAAxB,EAAAR,EAAAwB,qBAAAD,EAAAJ,GACAM,EAAAnX,EAAAoX,gBAAAlB,EAAAa,EAAAD,GACA9W,EAAA8V,YAAAvT,QAAA,SAAA+U,GACAA,EAAA3S,eAAAwS,OAGAN,EAAAc,YAAA,SAAAV,GAEA,IAAAjX,EAAA0X,iBAAA,CAEA,IAAAxB,EAAAR,EAAAwB,qBAAAD,EAAAJ,GACAM,EAAAnX,EAAAoX,gBAAAlB,EAAAa,EAAAD,GACA9W,EAAA8V,YAAAvT,QAAA,SAAA+U,GACAA,EAAA1S,gBAAAuS,OAGAN,EAAAe,YAAA,SAAAX,GAEA,IAAAjX,EAAA0X,iBAAA,CAEAX,EAAArB,EAAAwB,qBAAAD,EAAAJ,GACA,IAAAgB,EAAA7X,EAAAiW,mBAAAc,GAEAe,GAAA,EACAC,EAAAC,KAAAC,MAEA,KAAAJ,EAAAzZ,QAAA,IAGA0Y,EAAAe,EAAA,GAAA7V,KACA,IAAAmV,EAAAnX,EAAAoX,gBAAAL,IAAAD,GACAoB,EAAAnB,EACA/W,EAAA8V,YAAAvT,QAAA,SAAA+U,GACAA,EAAAhT,gBAAA6S,EAAAF,EAAAzS,UAEAyS,EAAAM,kBACAtJ,SAAA0J,YAAA,SAAAV,GACA,IAAAf,EAAAR,EAAAwB,qBAAAD,EAAAJ,GACAM,EAAAnX,EAAAoX,gBAAAlB,EAAAa,EAAAD,GACAqB,GACAxb,EAAAuZ,EAAAvZ,EAAAub,EAAAvb,EACAC,EAAAsZ,EAAAtZ,EAAAsb,EAAAtb,GAEAmI,EAAA/E,EAAAoY,SAAAlC,EAAAa,EAAAmB,EAAAC,GACAD,EAAAhC,EACAlW,EAAA8V,YAAAvT,QAAA,SAAA+U,GACAA,EAAAxS,WAAAqS,EAAApS,KAGA+S,GAAA,GAEA7J,SAAAoK,UAAA,SAAApB,GACAhJ,SAAA0J,YAAA,KACA1J,SAAAoK,UAAA,KACApK,SAAAqK,YAAA,MAEArK,SAAAqK,YAAA,SAAArB,GACA,IAAAf,EAAAR,EAAAwB,qBAAAD,EAAAJ,GACAM,EAAAnX,EAAAoX,gBAAAlB,EAAAa,EAAAD,GACA9W,EAAA8V,YAAAvT,QAAA,SAAA+U,GACAA,EAAA5S,gBAAAyS,KAEAF,EAAAM,mBAEAV,EAAAwB,UAAA,SAAApB,GACA,IAAAf,EAAAR,EAAAwB,qBAAAD,EAAAJ,GACAM,EAAAnX,EAAAoX,gBAAAlB,EAAAa,EAAAD,GACA9W,EAAA8V,YAAAvT,QAAA,SAAA+U,GACAA,EAAA7S,cAAA0S,KAGAW,GAAAE,KAAAC,MAAAF,EAtJA,KAuJA/X,EAAA8V,YAAAvT,QAAA,SAAA+U,GACAA,EAAAzS,YAAAsS,EAAAF,EAAAzS,WAKAqS,EAAA0B,cAAA,WACA,aAIA7b,KAAA8b,4BAEA5C,EAAA9Z,UAAA0c,yBAAA,WACA,IAAA3B,EAAAna,KAAAoT,QACA+G,EAAA4B,aAAA,SAAAxB,KAQAJ,EAAA6B,WAAA,SAAAzB,KAGAJ,EAAA8B,YAAA,SAAA1B,KAGAJ,EAAA+B,cAAA,SAAA3B,MAOArB,EAAA9Z,UAAAsc,SAAA,SAAAlC,EAAA2C,EAAAC,EAAAX,GACA,OACA1Q,QACAsR,QAAA7C,EACAiC,QACAW,WACAD,WAOAjD,EAAA9Z,UAAAsb,gBAAA,SAAAlB,EAAA2C,EAAA/B,GAEA,IAAAX,EAAAzZ,KAAAuZ,mBAAAC,GACA,OACAzO,QACAyO,SAEA2C,SAAA/B,IACAZ,MAAAY,EAAAhQ,KAAAJ,aAAAwP,GACApP,KAAAgQ,EAAAhQ,MAEA9I,QACAkY,MAAAC,EAAA,IAAAA,EAAA,GAAAnU,KAAA8E,KAAAJ,aAAAwP,GACApP,KAAAqP,EAAA,IAAAA,EAAA,GAAAnU,KAAA8E,MAEAkS,gBAAA7C,EAAAQ,IAAA,SAAAlJ,GAAwD,OACxDyI,MAAAzI,EAAAzL,KAAA8E,KAAAJ,aAAAwP,GACApP,KAAA2G,EAAAzL,KAAA8E,UAIA8O,EAAA9Z,UAAAub,UAAA,SAAAJ,GACA,IAAAhS,EAAAyQ,EAAAuD,eAAAhC,GACA,OACAhS,SAAAtI,EAAAsI,EAAArI,KAMAgZ,EAAA9Z,UAAAya,eAAA,SAAAT,GACApZ,KAAAoZ,eAKAF,EAAA9Z,UAAAwa,SAAA,SAAAT,GACAnZ,KAAAmZ,SAEAD,EAAA9Z,UAAA0F,QAAA,WACA9E,KAAAoE,SAAA,KACApE,KAAAoT,QAAA8H,YAAA,KACAlb,KAAAoT,QAAA6H,YAAA,MAEA/B,EA5OA,GA8OA/b,EAAA+b,kDCpPAza,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAA+D,EAAAjF,EAAA,GACA,SAAA2e,EAAAC,GACA,OAAAhe,OAAAkF,UAA2B8Y,GAAcC,kBAAA,OAEzC,SAAAC,EAAA1X,GACA,OAAAxG,OAAAkF,UAA2BsB,GAAYW,sBAyCvC,SAAAgX,EAAAzQ,EAAA1J,GACA,OAAA0J,EAAAnF,QAAAvE,EAAAuE,OACA,EACA,EA4IA7J,EAAA0f,eA1IA,SAAAhU,EAAAiU,GAEA,IAAAC,KAEAC,EAAA,IAAAvZ,IAIAqZ,EAAAtW,mBAAAX,QAAA,SAAA4W,GACA,GAAAA,EAAAzV,MAAA,CAGAyV,EAAA1V,KAAAjE,EAAArD,sBAAAwd,KACAR,EAAA3V,WAAAhE,EAAAtD,mBAAA0d,IAGA,IAAAC,EAAAV,EAAAzV,MAAAE,iBAAApE,EAAAlD,sBAAAwd,SAEAC,EAAAL,EAAAne,IAAA4d,EAAAzV,MAAA1I,MACA+e,EACAL,EAAArR,IAAA8Q,EAAAzV,MAAA1I,MACA+e,EAAA,IACAF,IAAAra,EAAAlD,sBAAA0d,QACAH,IAAAra,EAAAlD,sBAAAoE,IACAqZ,EAAA,IACAF,IAAAra,EAAAlD,sBAAAwd,UACAD,IAAAra,EAAAlD,sBAAAoE,OAIA+Y,EAAAnQ,KAAA6P,GACAO,EAAArR,IAAA8Q,EAAAzV,MAAA1I,MACA6e,IAAAra,EAAAlD,sBAAA0d,QACAH,IAAAra,EAAAlD,sBAAAoE,IACAmZ,IAAAra,EAAAlD,sBAAAwd,UACAD,IAAAra,EAAAlD,sBAAAoE,UAMA,IAjFAuZ,EACAC,EACAC,EACAC,EA2FAC,EAbAZ,EAAA9C,IAAA,SAAA2D,GACA,IAAAP,EAAAL,EAAAne,IAAA+e,EAAA5W,MAAA1I,MACA6e,EAAAE,EAAA,IAAAA,EAAA,IAAAva,EAAAlD,sBAAAoE,KACAqZ,EAAA,KAAAA,EAAA,IAAAva,EAAAlD,sBAAA0d,SACAD,EAAA,IAAAA,EAAA,IAAAva,EAAAlD,sBAAAwd,SACA,OACA9e,KAAAsf,EAAA5W,MAAA1I,KACA4I,gBAAAiW,EACApW,KAAAjE,EAAApD,YAAAme,MACAlY,OAAA,WAAiC,OAAAkD,EAAA6I,SAAAoM,gBAAAF,EAAA5W,MAAAzF,SAIjCmM,SAGApP,KAAA,aACAyI,KAAAjE,EAAApD,YAAAqe,QACApY,OAAA,WAAiC,OAAAkD,EAAAuB,KAAAK,WAAAY,WAAA2S,iBAAAC,YAIjC3f,KAAA,YACAyI,KAAAjE,EAAApD,YAAAqe,QACApY,OAAA,WAAiC,OAAAkD,EAAAuB,KAAAK,WAAAY,WAAA6S,OAAAD,YAKjC3f,KAAA,eACAyI,KAAAjE,EAAApD,YAAAye,MACAxY,OAAA,WAAiC,OAAAkD,EAAAuB,KAAAE,OAAAC,UAKjCjM,KAAA,cACAyI,KAAAjE,EAAApD,YAAAye,MACAxY,OAAA,WAAiC,OAAAkD,EAAAuB,KAAAE,OAAAE,SAKjClM,KAAA,WACAyI,KAAAjE,EAAApD,YAAA0e,IACAzY,OAAA,WAAiC,OAAAkD,EAAAuB,KAAAH,WAAA9J,MAAA0I,EAAAuB,KAAAH,WAAA7J,WAKjC9B,KAAA,aACAyI,KAAAjE,EAAApD,YAAAwd,IACAvX,OAAA,WAAiC,OAAAkD,EAAAuB,KAAAT,gBAKjC0U,GA1IAd,EA0IAT,EAAAtW,mBAzIAgX,EAAA,IAAA/Z,IACAga,EAAA,KACAC,EAAA,EACAH,EAAA1X,QAAA,SAAA+X,GACA,IAAA/W,EAAA+W,EAAA/W,MACAkG,EAAA6Q,EAAA9W,WACAC,EAAA6W,EAAA7W,KACAuX,EAAAd,EAAA3e,IAAAgI,GACA6W,EAAA5c,KAAAgS,IAAAjM,EAAA6W,GACAY,IACAA,EAAA,IAAA7a,IACA+Z,EAAA7R,IAAA9E,EAAAyX,IAEA,QAAAvgB,EAAAgP,EAAAxH,EAAAwH,EAAAhG,EAA+ChJ,EAAAwH,IAASxH,EACxDugB,EAAA3S,IAAA5N,GAAA,KAGAyf,EAAA3X,QAAA,SAAAyY,EAAAzX,GACAyX,EAAAzf,IAAA,KACA4e,GAAA5W,EAAA/D,EAAAtD,mBAAA0d,MACAoB,EAAAzf,IAAA,KACA4e,GAAA5W,EAAA/D,EAAAtD,mBAAA4e,MACAE,EAAAzf,IAAA,KACA4e,GAAA5W,EAAA/D,EAAAtD,mBAAA2e,QACAG,EAAAzf,IAAA,KACA4e,GAAA5W,EAAA/D,EAAAtD,mBAAAyd,SAIAQ,IACAA,GAAAC,EAAA,MAEAD,GA0GAc,IAIA1X,MAAAwX,EAAA,GACAvX,WAAAuX,EAAA,GACA/f,KAAA,UACAyI,KAAAjE,EAAArD,sBAAAyd,IACAvX,OAAA,SAAAnH,GAAkC,OAAAA,EAAA0D,OAAA,QAIlC2G,EAAA2V,gBAAAD,EAAA,GACA,IAWA9X,IAPAnI,KAAA,WACAyI,KAAAjE,EAAAnD,oBAAAud,IAEAvX,OAAA,WAAiC,aAKjC+H,OAAAoP,EAAArW,kBACAwT,IAAAuC,GACApX,EAAAuY,EACAjQ,OAAAoP,EAAA1X,UACA6U,IAAA0C,GAIA,OACAnW,mBAJA+X,EACA7Q,OAAAoP,EAAAtW,oBACA2G,KAAAyP,GAGAxX,WACAqB,mDCjMAhI,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAgDA8E,EAAA4a,EAhDA5b,EAAAhF,EAAA,GACAiF,EAAAjF,EAAA,GACA6gB,IAAA7a,MACAf,EAAApD,YAAAwd,KAAA,IACArZ,EAAAf,EAAApD,YAAA0e,KAAA,KACAva,EAAAf,EAAApD,YAAAye,OAAA,KACAta,EAAAf,EAAApD,YAAAud,MAAA,KACApZ,EAAAf,EAAApD,YAAAif,SAAA,YACA9a,EAAAf,EAAApD,YAAAqe,SAAA,YACAla,GACA+a,IAAAH,MACA3b,EAAApD,YAAAwd,MAAA,GACAuB,EAAA3b,EAAApD,YAAA0e,MAAA,KACAK,EAAA3b,EAAApD,YAAAye,QAAA,OACAM,EAAA3b,EAAApD,YAAAud,OAAA,SACAwB,EAAA3b,EAAApD,YAAAif,UAAA,mBACAF,EAAA3b,EAAApD,YAAAqe,UAAA,iCACAU,GACA,SAAAI,EAAA5Z,GACA,OACAV,KAAAma,EAAAzZ,EAAA8B,MACAhI,MAAA6f,EAAA3Z,EAAA8B,OA0BA5J,EAAA2hB,sBAvBA,SAAAjW,EAAAlC,EAAAJ,EAAAwY,EAAAC,GAEA,IAAAC,EAAApW,EAAAxC,qBACA4Y,EAAAC,aAAAvY,EACAsY,EAAAE,eAAA5Y,EAEA0Y,EAAA7Z,YAEA,QAAArH,EAAA,EAAAwH,EAAAwZ,EAAArd,OAA+C3D,EAAAwH,IAASxH,EAAA,CACxD,IAAAkH,EAAA8Z,EAAAhhB,GACA+H,EAAA+Y,EAAA5Z,GACAga,EAAA7Z,SAAAH,EAAA3G,MAAAwH,EAGA,IAAA/H,EAAA,EAAAwH,EAAAyZ,EAAAtd,OAAoD3D,EAAAwH,IAASxH,EAAA,CAC7D,IAAAqhB,EAAAJ,EAAAjhB,GACAkhB,EAAA7Z,SAAAga,EAAA9gB,OACAiG,KAAA6a,EAAA7a,KACAxF,MAAAqgB,EAAArgB,OAGA,WAAA8D,EAAAwc,kBAAAJ,kCC9CAxgB,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAA8D,EAAAhF,EAAA,GAiEAV,EAAAmiB,sBA7DA,SAAAC,EAAA9Y,EAAAC,GAGA,IADA,IAAA8Y,KACAzhB,EAAA,EAAAwH,EAAAkB,EAAA/E,OAAkD3D,EAAAwH,IAASxH,EAAA,CAC3D,IAAA0hB,EAAAhZ,EAAA1I,GACAyhB,EAAA5S,KAAA,IAAA8S,aAAAD,EAAA,KAAA/Y,EAAA6Y,IAIA,IACAI,EACAlD,EACA1d,EACA6gB,EAhBApW,EAYAqW,EAAApZ,EAAA/E,OAKA,IAAA3D,EAAA,EAAAwH,EAAAmB,EAAsC3I,EAAAwH,IAASxH,EAC/C,QAAAgV,EAAA,EAAuBA,EAAA8M,IAAU9M,EAIjC,GAHA0J,EAAAhW,EAAAsM,GACA4M,EAAAH,EAAAzM,GACAhU,EAAA0d,EAAA9W,OAAA5H,GArBAyL,EAsBAzK,EArBAyD,MAAAsd,QAAAtW,EAAA,IA2BAoW,GAAA,OALA,QAAAlH,EAAA3a,EAAA0e,EAAA1V,KAAAgZ,EAAArH,EAAA+D,EAAA1V,KAAAgG,EAAA,EAAsF2L,EAAAqH,IAAUrH,IAAA3L,EAChG4S,EAAAjH,GAAA3Z,EAAAgO,GAaA,IALA6S,GACAhV,QAAAC,KAAA,+EAIA9M,EAAA,EAAAwH,EAAAkB,EAAA/E,OAAkD3D,EAAAwH,IAASxH,EAI3D,IAHA,IACAiiB,EADAvZ,EAAA1I,GACA,KAAA2I,EAEAuZ,GAAAlN,EAAA,EAAAwM,GAAuDxM,EAAAkN,IAAYlN,EACnEyM,EAAAzhB,GAAAmiB,WAAAF,EAAAjN,EAAA,EAAAiN,GAKA,IAAAG,EAAAX,EAAA,GACA,IAAAzhB,EAAA,EAAAwH,EAAAga,EAAgDxhB,EAAAwH,IAASxH,EACzD,KAAAqiB,EAAAriB,EAAA2I,EACA,IAAAqM,EAAA,EAAuBA,EAAArM,IAAiBqM,EACxCoN,EAAApN,EAAAqN,GAAAriB,EAIA,IAAA+K,EAAA,IAAAjG,EAAAwd,eACA,IAAAtiB,EAAA,EAAAwH,EAAAkB,EAAA/E,OAAkD3D,EAAAwH,IAASxH,EAAA,CAC3D,IAAAuiB,EAAA7Z,EAAA1I,GACA2e,EAAA,IAAA7Z,EAAA0d,gBAAAf,EAAAzhB,GAAAuiB,EAAAvZ,MACAuZ,EAAA5D,oBACA5T,EAAA0X,aAAAF,EAAAhiB,KAAAoe,GAEA,OAAA5T,iCChEA,IACA1G,EADAC,EAAArC,WAAAqC,YACAD,EAAA3D,OAAA6D,iBACUC,wBAAgBC,OAAA,SAAAnE,EAAAoE,GAAsCpE,EAAAkE,UAAAE,IAChE,SAAApE,EAAAoE,GAAyB,QAAAnD,KAAAmD,IAAApD,eAAAC,KAAAjB,EAAAiB,GAAAmD,EAAAnD,KACzB,SAAAjB,EAAAoE,GAEA,SAAAC,IAAuB1C,KAAA2C,YAAAtE,EADvB+D,EAAA/D,EAAAoE,GAEApE,EAAAe,UAAA,OAAAqD,EAAAhE,OAAAmE,OAAAH,IAAAC,EAAAtD,UAAAqD,EAAArD,UAAA,IAAAsD,KAGAjE,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IACA0hB,EAAA,SAAArd,GAEA,SAAAqd,IACA,cAAArd,KAAAqK,MAAAzN,KAAAyB,YAAAzB,KAUA,OAZAqC,EAAAoe,EAAArd,GAIAqd,EAAAhgB,YAAA,WACA,WAAAggB,GACArgB,OAAA,EACAD,MAAA,EACAF,EAAA,EACAC,EAAA,KAGAugB,EAbA,CADA5iB,EAAA,GAeCiC,QACD3C,EAAAsjB,2CC3BAhiB,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAA8D,EAAAhF,EAAA,GACA6iB,EAAA7iB,EAAA,IACAyL,EAAAzL,EAAA,IACA8iB,EAAA9iB,EAAA,IACA+iB,EAAA/iB,EAAA,IAqEAV,EAAA0jB,qBA1DA,SAAAzN,GAKA,IAAAhT,EAAAgT,EAAAnE,OAAA7O,OACAD,EAAAiT,EAAAnE,OAAA9O,MAEAoL,GACAgJ,YAFApU,EAAAC,EAGAG,QAAAH,EAAA,EACAoL,IAAA,IACAnL,MAAAF,EAAA,EACAsL,MAAA,IACAjL,MAAAL,EAAA,EACAG,IAAAF,EAAA,EACA0gB,SAAA1gB,GAEA2gB,EAAA,IAAAzX,EAAA+D,WACA0T,EAAA1V,WAAA,IAAAxI,EAAAme,mBAAAzV,EAAAlL,KAAAkL,EAAA/K,MAAA+K,EAAAjL,IAAAiL,EAAAhL,OAAAgL,EAAAE,KAAAF,EAAAC,KACAuV,EAAA1V,WAAAb,MAAAmB,IAAA,QACAoV,EAAA1V,WAAAK,SAAAC,IAAA,UACAoV,EAAA1V,WAAAS,mBAAA,GACAiV,EAAA1V,WAAAQ,eACAkV,EAAA1V,sBAAAxI,EAAAme,oBACAD,EAAA1V,WAAAU,yBAGA,IAAAkV,EAAA,IAAAP,EAAA/S,YAEAuT,GACA3gB,OAAA,EACAF,KAAA,EACAG,MAAA,EACAF,IAAA,GAGA6gB,EAAA,IAAAP,EAAAlX,MACAY,OAAA2W,EACA1f,IAAAqf,EAAAlX,KAAAuC,gBACAxB,WAAAsW,EACAxV,SAAA2V,IAGAE,EAAA,IAAAT,EAAAvU,OACA7K,IAAAof,EAAAvU,MAAAgB,iBACA+L,WAIA,OADAiI,EAAAvU,QAAAsU,IAEA7W,OAAA2W,EACAI,MAAAD,EACAhX,KAAA+W,EACA1W,WAAAsW,EACAxV,SAAA2V,kCCvEAziB,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAuiB,EAAA,IAIAnkB,EAAAokB,6BAHA,WACA,sBAMApkB,EAAAqkB,4BAHA,SAAAzU,GACA,SAAAuU,EAAAvU,EAAA5L,SAAA,mCCPA1C,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C5B,EAAAskB,cACAC,mBAAA,qBACAnE,WAAA,aACAoE,kBAAA,oBACAC,mBAAA,qBACAC,uBAAA,yBACAC,sBAAA,wBACAC,sBAAA,wBACAC,kBAAA,oBACAC,4BAAA,8BACAlD,cAAA,gBACAmD,kBAAA,oBACAnU,OAAA,SACAoU,YAAA,cACA1b,iBAAA,kDCfAhI,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IA2E9C5B,EAAAilB,eA1EA,SAAAC,EAAAC,GA0DA,IAzDA,IAAAzS,GACA0S,eAAA,EACAhF,WAAA,IAAA/a,MACAggB,aAAA,EACApd,SAAA,IAAA5C,OACKigB,EAAAJ,EAAAK,oBAAAJ,EAAAD,EAAAM,iBAAAC,EAAAP,EAAAK,oBAAAJ,EAAAD,EAAAQ,mBAGLC,GACAC,MAAA,aACAC,MAAA,aACAC,MAAA,aACAC,MAAA,WACAC,MAAA,WACAC,MAAA,WACAC,MAAA,OACAC,MAAA,YACAC,MAAA,YACAC,MAAA,YACAC,MAAA,aACAC,MAAA,aACAC,MAAA,aACAC,MAAA,aACAC,MAAA,eACAC,KAAA,OACAC,KAAA,gBACAC,KAAA,QACAC,KAAA,iBACAC,KAAA,MACAC,KAAA,eACAC,KAAA,SAEA5G,GACAuF,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,KAAA,EACAC,KAAA,EACAC,KAAA,EACAC,KAAA,EACAC,KAAA,EACAC,KAAA,EACAC,KAAA,GAGArmB,EAAA,EAAmBA,EAAA0kB,IAAoB1kB,EAAA,CACvC,IAAAkH,EAAAod,EAAAgC,iBAAA/B,EAAAvkB,GACAkH,EAAAqf,SAAAxB,EAAA7d,EAAAV,MACAsL,EAAAzK,SAAAwH,KAAA3H,GACA4K,EAAA2S,cAAAvd,EAAA8B,KACA9B,EAAA8B,KAAA9B,EAAA8B,KAAAyW,EAAAvY,EAAAV,MAGA,IAAAxG,EAAA,EAAmBA,EAAA6kB,EAAsB7kB,IAAA,CACzC,IAAA0e,EAAA4F,EAAAkC,gBAAAjC,EAAAvkB,GACA0e,EAAA6H,SAAAxB,EAAArG,EAAAlY,MACAsL,EAAA0N,WAAA3Q,KAAA6P,GACA5M,EAAA0S,gBAAA9F,EAAA1V,KAEA,OAAA8I,GAGA,IAuBAwS,EAvBAmC,EAAA,WACA,SAAAA,KAOA,OALAA,EAAAC,oBAAA,EACAD,EAAAE,sBAAA,EACAF,EAAAG,eAAA,EACAH,EAAAI,iBAAA,EACAJ,EAAAK,iBAAA,EACAL,EARA,GAUArnB,EAAAqnB,aAaAnC,EAVA,WACA,IACA,IAAApT,EAAAsC,SAAAC,cAAA,UACA,OAAAhU,OAAAsnB,wBAAA7V,EAAAoC,WAAA,UAAApC,EAAAoC,WAAA,uBAEA,MAAAxJ,GACA,UAIAkd,MAGAP,EAAAI,iBAAA,EACAJ,EAAAC,oBAAApC,EAAA2C,aAAA3C,EAAA4C,4BACAT,EAAAE,sBAAArC,EAAA2C,aAAA3C,EAAA6C,8BACAV,EAAAG,eAAAtC,EAAA2C,aAAA3C,EAAA8C,oBACAX,EAAAK,iBAAAxC,EAAA2C,aAAA3C,EAAAwC,iDC1GA,IACAziB,EADAC,EAAArC,WAAAqC,YACAD,EAAA3D,OAAA6D,iBACUC,wBAAgBC,OAAA,SAAAnE,EAAAoE,GAAsCpE,EAAAkE,UAAAE,IAChE,SAAApE,EAAAoE,GAAyB,QAAAnD,KAAAmD,IAAApD,eAAAC,KAAAjB,EAAAiB,GAAAmD,EAAAnD,KACzB,SAAAjB,EAAAoE,GAEA,SAAAC,IAAuB1C,KAAA2C,YAAAtE,EADvB+D,EAAA/D,EAAAoE,GAEApE,EAAAe,UAAA,OAAAqD,EAAAhE,OAAAmE,OAAAH,IAAAC,EAAAtD,UAAAqD,EAAArD,UAAA,IAAAsD,KAGAjE,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IACAqmB,EAAA,SAAAhiB,GAEA,SAAAgiB,EAAArlB,GACA,IAAAuD,EAAAF,EAAAlF,KAAA8B,YAYA,OAPAsD,EAAA+hB,mBAAA,EACA/hB,EAAAgH,OAAAvK,EAAAuK,OACAhH,EAAAgiB,YAAAvlB,EAAAulB,aAAA,IACAhiB,EAAAiiB,iBAAAxlB,EAAAwlB,mBAAA,EACAxlB,EAAAqa,YACA9W,EAAAkiB,WAAAhjB,MAAAsd,QAAA/f,EAAAqa,WAAAra,EAAAqa,WAAAra,EAAAqa,YAEA9W,EAuDA,OArEAjB,EAAA+iB,EAAAhiB,GAgBAgiB,EAAAhmB,UAAAqmB,qBAAA,SAAA5d,GACA,IAAAvE,EAAAtD,KACAyd,EAAA5V,EAAAyU,gBAAAoJ,KAAA,SAAAC,GAA6D,OAAAriB,EAAAkiB,WAAAxY,QAAA2Y,EAAAvb,KAAAnI,KAAA,IAC7DjC,KAAAqlB,kBAAAnc,QAAAuU,GACAA,IACAzd,KAAA4lB,iBAAAnI,EAAArT,OAGAgb,EAAAhmB,UAAAymB,cAAA,SAAAhe,GAGA,OAAA7H,KAAAwlB,aAAAxlB,KAAAulB,iBACA1d,EAAAvG,OAAA8I,KAIApK,KAAA4lB,kBAGAR,EAAAhmB,UAAAwI,gBAAA,SAAAC,EAAAC,GAEA9H,KAAAylB,qBAAA5d,IAEAud,EAAAhmB,UAAA2I,cAAA,SAAAF,GACA7H,KAAAqlB,mBAAA,GAEAD,EAAAhmB,UAAAgJ,WAAA,SAAAP,EAAAQ,GACArI,KAAA8lB,SAAAje,EAAAsU,MAAA/R,KAAAnI,MACAjC,KAAAsK,OAAAC,OAAA,IAAAlC,EAAA0C,OAAA0Q,MAAAxb,EAAAD,KAAAsK,OAAAE,MAAA,GACAxK,KAAAsK,OAAAC,OAAA,IAAAlC,EAAA0C,OAAA0Q,MAAAvb,EAAAF,KAAAsK,OAAAE,MAAA,KAGA4a,EAAAhmB,UAAAkJ,YAAA,SAAAT,EAAAke,GAGA,GADA/lB,KAAAylB,qBAAA5d,GACA7H,KAAA8lB,SAAAje,EAAAvG,OAAA8I,KAAAnI,IAAA,CACA,IAAA+jB,EAAAhmB,KAAA6lB,cAAAhe,GACAoe,EAAAD,EAAA7b,cAAAtC,EAAAkD,OAAAyO,OACA0M,EAAAlmB,KAAAsK,OAAAE,MAAA,MACAxK,KAAAsK,OAAAE,MAAA,GAAA0b,EAAAH,EAAAxd,MAAA,GAAAvI,KAAAslB,YAAAY,EACA,IAAAC,EAAAnmB,KAAAsK,OAAAE,MAAA,MACAxK,KAAAsK,OAAAE,MAAA,GAAA2b,EAAAJ,EAAAxd,MAAA,GAAAvI,KAAAslB,YAAAa,EACA,IAAAC,EAAAJ,EAAA7b,cAAAtC,EAAAkD,OAAAyO,OACAxZ,KAAAsK,OAAAC,OAAA,KAAA0b,EAAAhmB,EAAAmmB,EAAAnmB,GAAA+lB,EAAArc,WACA3J,KAAAsK,OAAAC,OAAA,KAAA0b,EAAA/lB,EAAAkmB,EAAAlmB,GAAA8lB,EAAArc,aAGAyb,EAAAhmB,UAAA0mB,SAAA,SAAAO,GACA,OAAArmB,KAAAwlB,YACA,IAAAxlB,KAAAwlB,WAAA9jB,QACA1B,KAAAwlB,YAAAxlB,KAAAwlB,WAAAxY,QAAAqZ,IAAA,GACArmB,KAAAqlB,mBAAArlB,KAAAulB,kBAEAH,EAtEA,CADAvnB,EAAA,GAwEC8J,cACDxK,EAAAioB,sDCpFA,IACAhjB,EADAC,EAAArC,WAAAqC,YACAD,EAAA3D,OAAA6D,iBACUC,wBAAgBC,OAAA,SAAAnE,EAAAoE,GAAsCpE,EAAAkE,UAAAE,IAChE,SAAApE,EAAAoE,GAAyB,QAAAnD,KAAAmD,IAAApD,eAAAC,KAAAjB,EAAAiB,GAAAmD,EAAAnD,KACzB,SAAAjB,EAAAoE,GAEA,SAAAC,IAAuB1C,KAAA2C,YAAAtE,EADvB+D,EAAA/D,EAAAoE,GAEApE,EAAAe,UAAA,OAAAqD,EAAAhE,OAAAmE,OAAAH,IAAAC,EAAAtD,UAAAqD,EAAArD,UAAA,IAAAsD,KAGAjE,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAIAunB,EAAA,SAAAljB,GAEA,SAAAkjB,IACA,cAAAljB,KAAAqK,MAAAzN,KAAAyB,YAAAzB,KAuBA,OAzBAqC,EAAAikB,EAAAljB,GAIAkjB,EAAAlnB,UAAAwI,gBAAA,SAAAC,EAAAC,GACA8C,QAAAC,KAAA,aAAAhD,EAAAC,IAEAwe,EAAAlnB,UAAA2I,cAAA,SAAAF,GACA+C,QAAAC,KAAA,WAAAhD,IAEAye,EAAAlnB,UAAA4I,gBAAA,SAAAH,GACA+C,QAAAC,KAAA,aAAAhD,IAEAye,EAAAlnB,UAAA6I,eAAA,SAAAJ,GACA+C,QAAAC,KAAA,YAAAhD,IAEAye,EAAAlnB,UAAA8I,gBAAA,SAAAL,GACA+C,QAAAC,KAAA,aAAAhD,IAEAye,EAAAlnB,UAAA+I,YAAA,SAAAN,EAAAC,GACA8C,QAAAC,KAAA,QAAAhD,EAAAC,IAEAwe,EAAAlnB,UAAAgJ,WAAA,SAAAP,EAAAQ,GACAuC,QAAAC,KAAA,OAAAhD,EAAAQ,IAEAie,EA1BA,CAJAzoB,EAAA,GA+BC8J,cACDxK,EAAAmpB,8CC3CA,SAAA5e,EAAAvJ,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAEAb,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C2I,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,oBCNAT,EAAAD,QAAA,+aCAAC,EAAAD,QAAA,o4CCCA,IACAiF,EADAC,EAAArC,WAAAqC,YACAD,EAAA3D,OAAA6D,iBACUC,wBAAgBC,OAAA,SAAAnE,EAAAoE,GAAsCpE,EAAAkE,UAAAE,IAChE,SAAApE,EAAAoE,GAAyB,QAAAnD,KAAAmD,IAAApD,eAAAC,KAAAjB,EAAAiB,GAAAmD,EAAAnD,KACzB,SAAAjB,EAAAoE,GAEA,SAAAC,IAAuB1C,KAAA2C,YAAAtE,EADvB+D,EAAA/D,EAAAoE,GAEApE,EAAAe,UAAA,OAAAqD,EAAAhE,OAAAmE,OAAAH,IAAAC,EAAAtD,UAAAqD,EAAArD,UAAA,IAAAsD,KAGAjE,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAA8D,EAAAhF,EAAA,GACA0oB,EAAA1oB,EAAA,GACAiF,EAAAjF,EAAA,GAKA2oB,EAAA,SAAApjB,GAEA,SAAAojB,IACA,cAAApjB,KAAAqK,MAAAzN,KAAAyB,YAAAzB,KAqFA,OAvFAqC,EAAAmkB,EAAApjB,GAOAojB,EAAApnB,UAAAkH,WAAA,WACA,OACAC,GAAA1I,EAAA,IACA2I,qBAEAK,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA0d,IACA5e,KAAA,SACAyI,KAAAjE,EAAArD,sBAAA2e,IACAzY,OAAA,SAAAnH,GAA0C,OAAAA,EAAAyB,EAAAzB,EAAA0B,MAG1C2G,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA2e,MACA7f,KAAA,SACAyI,KAAAjE,EAAArD,sBAAAyd,IACAvX,OAAA,SAAAnH,GAA0C,OAAAA,EAAAioB,WAG1C5f,MAAA,EACAC,WAAAhE,EAAAtD,mBAAAyd,KACA3e,KAAA,QACAyI,KAAAjE,EAAArD,sBAAAyd,IACAvX,OAAA,SAAAnH,GAA0C,OAAAA,EAAA+E,UAG1CsD,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA0d,IACA5e,KAAA,QACAyI,KAAAjE,EAAArD,sBAAAwd,KACAtX,OAAA,SAAAnH,GAA0C,OAAAA,EAAAyV,SAG1CpN,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA0d,IACA5e,KAAA,YACAyI,KAAAjE,EAAArD,sBAAAyd,IACAvX,OAAA,SAAAnH,GAA0C,OAAAA,EAAAkoB,cAG1CthB,WAEA9G,KAAA,cACAyI,KAAAjE,EAAApD,YAAAwd,IACAvX,OAAA,SAAA0K,GAA0C,aAG1C/R,KAAA,QACAyI,KAAAjE,EAAApD,YAAAwd,IACAvX,OAAA,SAAA0K,GAA0C,aAG1C5J,mBAKAkgB,UAAA,GACAroB,KAAA,WACAyI,KAAAjE,EAAAnD,oBAAAwe,MACAxY,OAAA,SAAA0K,GAA0C,iBAG1C3J,YAAA,EACAC,GAAA9I,EAAA,MAGA2oB,EAAApnB,UAAA4G,aAAA,WACA,OACAG,UAAAtD,EAAA+jB,SAGAJ,EAAApnB,UAAAiH,mBAAA,WACA,OACAwgB,SAAAhkB,EAAAikB,eACAC,SAAAlkB,EAAAmkB,UACAC,oBAAA,EACAC,aAAA,IAGAV,EAxFA,CAyFCD,EAAApjB,OACDhG,EAAAqpB,0CC5GA,IACApkB,EADAC,EAAArC,WAAAqC,YACAD,EAAA3D,OAAA6D,iBACUC,wBAAgBC,OAAA,SAAAnE,EAAAoE,GAAsCpE,EAAAkE,UAAAE,IAChE,SAAApE,EAAAoE,GAAyB,QAAAnD,KAAAmD,IAAApD,eAAAC,KAAAjB,EAAAiB,GAAAmD,EAAAnD,KACzB,SAAAjB,EAAAoE,GAEA,SAAAC,IAAuB1C,KAAA2C,YAAAtE,EADvB+D,EAAA/D,EAAAoE,GAEApE,EAAAe,UAAA,OAAAqD,EAAAhE,OAAAmE,OAAAH,IAAAC,EAAAtD,UAAAqD,EAAArD,UAAA,IAAAsD,KAGAtB,EAAApB,WAAAoB,YAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAnD,EAAAD,EAAAqD,UAAAC,OAAA5C,EAAAV,EAAA,EAAAkD,EAAA,OAAAE,IAAA/C,OAAAkD,yBAAAL,EAAAC,GAAAC,EACA,oBAAAI,SAAA,mBAAAA,QAAAC,SAAA/C,EAAA8C,QAAAC,SAAAR,EAAAC,EAAAC,EAAAC,QACA,QAAAzD,EAAAsD,EAAAK,OAAA,EAA4C3D,GAAA,EAAQA,KAAAM,EAAAgD,EAAAtD,MAAAe,GAAAV,EAAA,EAAAC,EAAAS,GAAAV,EAAA,EAAAC,EAAAiD,EAAAC,EAAAzC,GAAAT,EAAAiD,EAAAC,KAAAzC,GACpD,OAAAV,EAAA,GAAAU,GAAAL,OAAAC,eAAA4C,EAAAC,EAAAzC,MAEAL,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAA+C,EAAAjE,EAAA,GAEAspB,EAAA,SAAA/jB,GAEA,SAAA+jB,EAAApnB,GACA,IAAAuD,EAAAF,EAAAlF,KAAA8B,KAAAD,IAAAC,KAaA,OAZAsD,EAAA2Q,OAAA,SACA3Q,EAAAC,MAAA,EACAD,EAAAmjB,OAAA,EACAnjB,EAAAojB,UAAA,EACApjB,EAAArD,EAAA,EACAqD,EAAApD,EAAA,EACAoD,EAAA2Q,MAAAlU,EAAAkU,QAAA,SACA3Q,EAAAC,MAAAxD,EAAAwD,OAAA,EACAD,EAAAmjB,OAAA1mB,EAAA0mB,OACAnjB,EAAAojB,UAAA3mB,EAAA2mB,WAAApjB,EAAAojB,UACApjB,EAAArD,EAAAF,EAAAE,EACAqD,EAAApD,EAAAH,EAAAG,EACAoD,EAkDA,OAjEAjB,EAAA8kB,EAAA/jB,GAiBA3E,OAAAC,eAAAyoB,EAAA/nB,UAAA,SACAP,IAAA,WACA,SAAAmB,KAAAymB,QAEA7nB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAAyoB,EAAA/nB,UAAA,UACAP,IAAA,WACA,SAAAmB,KAAAymB,QAEA7nB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAAyoB,EAAA/nB,UAAA,eACAP,IAAA,WACA,OAAAmB,KAAAymB,OAAAzmB,KAAA0mB,WAEA9nB,YAAA,EACAD,cAAA,IAEAyC,GACAU,EAAAK,YACAglB,EAAA/nB,UAAA,gBACAgC,GACAU,EAAAK,YACAglB,EAAA/nB,UAAA,gBACAgC,GACAU,EAAAK,YACAglB,EAAA/nB,UAAA,iBACAgC,GACAU,EAAAK,YACAglB,EAAA/nB,UAAA,oBACAgC,GACAU,EAAAK,YACAglB,EAAA/nB,UAAA,YACAgC,GACAU,EAAAK,YACAglB,EAAA/nB,UAAA,YACAgC,GACAU,EAAAslB,UACAD,EAAA/nB,UAAA,cACAgC,GACAU,EAAAslB,UACAD,EAAA/nB,UAAA,eACAgC,GACAU,EAAAslB,UACAD,EAAA/nB,UAAA,oBACA+nB,EAlEA,CADAtpB,EAAA,GAoECkE,UACD5E,EAAAgqB,6CCvFA,SAAAzf,EAAAvJ,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAEAb,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C2I,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,mCCLA,IACAuE,EADAC,EAAArC,WAAAqC,YACAD,EAAA3D,OAAA6D,iBACUC,wBAAgBC,OAAA,SAAAnE,EAAAoE,GAAsCpE,EAAAkE,UAAAE,IAChE,SAAApE,EAAAoE,GAAyB,QAAAnD,KAAAmD,IAAApD,eAAAC,KAAAjB,EAAAiB,GAAAmD,EAAAnD,KACzB,SAAAjB,EAAAoE,GAEA,SAAAC,IAAuB1C,KAAA2C,YAAAtE,EADvB+D,EAAA/D,EAAAoE,GAEApE,EAAAe,UAAA,OAAAqD,EAAAhE,OAAAmE,OAAAH,IAAAC,EAAAtD,UAAAqD,EAAArD,UAAA,IAAAsD,KAGAtB,EAAApB,WAAAoB,YAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAnD,EAAAD,EAAAqD,UAAAC,OAAA5C,EAAAV,EAAA,EAAAkD,EAAA,OAAAE,IAAA/C,OAAAkD,yBAAAL,EAAAC,GAAAC,EACA,oBAAAI,SAAA,mBAAAA,QAAAC,SAAA/C,EAAA8C,QAAAC,SAAAR,EAAAC,EAAAC,EAAAC,QACA,QAAAzD,EAAAsD,EAAAK,OAAA,EAA4C3D,GAAA,EAAQA,KAAAM,EAAAgD,EAAAtD,MAAAe,GAAAV,EAAA,EAAAC,EAAAS,GAAAV,EAAA,EAAAC,EAAAiD,EAAAC,EAAAzC,GAAAT,EAAAiD,EAAAC,KAAAzC,GACpD,OAAAV,EAAA,GAAAU,GAAAL,OAAAC,eAAA4C,EAAAC,EAAAzC,MAEAL,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAySA8E,EAzSA/B,EAAAjE,EAAA,GACAwpB,EAAAxpB,EAAA,GACAypB,EAAAzpB,EAAA,GACAiF,EAAAjF,EAAA,IAKA0pB,EAAA,IAAA9jB,IAKA+jB,IAAA3jB,MACAf,EAAA0F,WAAAif,SAAA,SAAAC,EAAApX,GACAoX,EAAAznB,GAAAynB,EAAAC,QACAD,EAAAxnB,GAAAwnB,EAAAC,SAEA9jB,EAAAf,EAAA0F,WAAAof,WAAA,SAAAF,EAAApX,GACAoX,EAAAznB,EAAAqQ,EAAAnQ,MAAA,EACAunB,EAAAxnB,GAAAwnB,EAAAC,SAEA9jB,EAAAf,EAAA0F,WAAAqf,UAAA,SAAAH,EAAApX,GACAoX,EAAAznB,EAAAqQ,EAAAnQ,MAAAunB,EAAAC,QACAD,EAAAxnB,GAAAwnB,EAAAC,SAEA9jB,EAAAf,EAAA0F,WAAAsf,YAAA,SAAAJ,EAAApX,GACAoX,EAAAznB,GAAAynB,EAAAC,QACAD,EAAAxnB,EAAAoQ,EAAAlQ,OAAA,GAEAyD,EAAAf,EAAA0F,WAAAuf,QAAA,SAAAL,EAAApX,GACAoX,EAAAznB,EAAAqQ,EAAAnQ,MAAA,EACAunB,EAAAxnB,EAAAoQ,EAAAlQ,OAAA,GAEAyD,EAAAf,EAAA0F,WAAAwf,aAAA,SAAAN,EAAApX,GACAoX,EAAAznB,EAAAqQ,EAAAnQ,MAAAunB,EAAAC,QACAD,EAAAxnB,EAAAoQ,EAAAlQ,OAAA,GAEAyD,EAAAf,EAAA0F,WAAAyf,YAAA,SAAAP,EAAApX,GACAoX,EAAAznB,GAAAynB,EAAAC,QACAD,EAAAxnB,EAAAoQ,EAAAlQ,OAAAsnB,EAAAC,SAEA9jB,EAAAf,EAAA0F,WAAA0f,cAAA,SAAAR,EAAApX,GACAoX,EAAAznB,EAAAqQ,EAAAnQ,MAAA,EACAunB,EAAAxnB,EAAAoQ,EAAAlQ,OAAAsnB,EAAAC,SAEA9jB,EAAAf,EAAA0F,WAAA2f,aAAA,SAAAT,EAAApX,GACAoX,EAAAznB,EAAAqQ,EAAAnQ,MAAAunB,EAAAC,QACAD,EAAAxnB,EAAAoQ,EAAAlQ,OAAAsnB,EAAAC,SAEA9jB,EAAAf,EAAA0F,WAAA4f,QAAA,SAAAV,EAAApX,GACAoX,EAAAznB,EAAAynB,EAAAznB,GAAA,EACAynB,EAAAxnB,EAAAwnB,EAAAxnB,GAAA,GAEA2D,GAgBAwkB,EAAA,SAAAjlB,GAEA,SAAAilB,EAAAtoB,GACA,IAAAuD,EAAAF,EAAAlF,KAAA8B,KAAAD,IAAAC,KAEAsD,EAAA2Q,OAAA,SAEA3Q,EAAAC,MAAA,EAEAD,EAAAglB,QAAAxlB,EAAA2F,UAAA8f,UAEAjlB,EAAArD,EAAA,EAEAqD,EAAApD,EAAA,EAIAoD,EAAAklB,SAAA,GACAllB,EAAAmlB,YAAA,QACAnlB,EAAAolB,UAAA,GACAplB,EAAAqlB,WAAA,SACArlB,EAAAslB,YAAA,IACAtlB,EAAAulB,MAAA,GACAvlB,EAAAwlB,OAAA,EACAxlB,EAAAylB,QAAA,EACAzlB,EAAA0lB,cAAA,EAGA1lB,EAAA2lB,SACAtB,QAAA,EACApjB,KAAAzB,EAAA0F,WAAAif,QACAxnB,EAAA,EACAC,EAAA,GAEAoD,EAAAC,MAAAxD,EAAAwD,OAAAD,EAAAC,MACAD,EAAA2Q,MAAAlU,EAAAkU,OAAA3Q,EAAA2Q,MACA3Q,EAAAglB,QAAAvoB,EAAAuoB,SAAAhlB,EAAAglB,QACAhlB,EAAArD,EAAAF,EAAAE,GAAAqD,EAAArD,EACAqD,EAAApD,EAAAH,EAAAG,GAAAoD,EAAApD,EACAoD,EAAAmlB,YAAA1oB,EAAAyT,YAAAlQ,EAAAmlB,YACAnlB,EAAAolB,UAAA3oB,EAAA8R,UAAAvO,EAAAolB,UACAplB,EAAAqlB,WAAA5oB,EAAAmpB,WAAA5lB,EAAAqlB,WACArlB,EAAAslB,YAAA7oB,EAAAwT,YAAAjQ,EAAAslB,YACAtlB,EAAAulB,MAAA9oB,EAAAoS,MAAA7O,EAAAulB,MAGAvlB,EAAAklB,SAAAnB,EAAAlW,gBAAAc,YAAA3O,EAAA,GAEA,IACA0P,EADAmW,EAAA5B,EAAA1oB,IAAAyE,EAAAulB,OAsCA,OApCAM,GAEAnW,EAAAmW,EAAAtqB,IAAAyE,EAAAklB,YAGAxV,EAAAoW,aAIAD,EAAA,IAAA1lB,IAGAuP,IACAA,GACAoW,WAAA,EACA1X,SAAA,IAAA2V,EAAA1T,mBAAArQ,IAGAvD,EAAAiT,gBACAA,EAAAtB,SAAA/I,YAAA5I,EAAAiT,cAAAxI,OAAA,GAGAwI,EAAAtB,SAAA/I,YAAAqK,EAAAtB,SAAA/I,aAAA,EAGA0e,EAAAlW,gBAAAuC,WAAAV,EAAAtB,UAGA6V,EAAA5b,IAAArI,EAAAulB,MAAAM,GACAA,EAAAxd,IAAArI,EAAAklB,SAAAxV,IAEA1P,EAAA+lB,eAAArW,EACA1P,EAAAwlB,OAAA9V,EAAAtB,SAAAsB,cAAA3I,MAAAlK,MACAmD,EAAAylB,QAAA/V,EAAAtB,SAAAsB,cAAA3I,MAAAjK,OAEAL,EAAA2nB,QAAApkB,EAAAgmB,UAAAvpB,EAAA2nB,QACApkB,EA0IA,OA/NAjB,EAAAgmB,EAAAjlB,GAuFA3E,OAAAC,eAAA2pB,EAAAjpB,UAAA,WAQAP,IAAA,WAA0B,OAAAmB,KAAAwoB,UAC1B5pB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA2pB,EAAAjpB,UAAA,eAEAP,IAAA,WAA0B,OAAAmB,KAAAgpB,cAC1BpqB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA2pB,EAAAjpB,UAAA,cAEAP,IAAA,WAA0B,OAAAmB,KAAAyoB,aAC1B7pB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA2pB,EAAAjpB,UAAA,YAKAP,IAAA,WAA0B,OAAAmB,KAAA0oB,WAC1B9pB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA2pB,EAAAjpB,UAAA,aAEAP,IAAA,WAA0B,OAAAmB,KAAA2oB,YAC1B/pB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA2pB,EAAAjpB,UAAA,cAEAP,IAAA,WAA0B,OAAAmB,KAAA4oB,aAC1BhqB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA2pB,EAAAjpB,UAAA,YAEAP,IAAA,WAA0B,OAAAmB,KAAAqpB,eAAA3X,UAC1B9S,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA2pB,EAAAjpB,UAAA,QAEAP,IAAA,WAA0B,OAAAmB,KAAA6oB,OAC1BjqB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA2pB,EAAAjpB,UAAA,SAKAP,IAAA,WACA,OAAAmB,KAAA8oB,QAEAlqB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA2pB,EAAAjpB,UAAA,UAKAP,IAAA,WACA,OAAAmB,KAAA+oB,SAEAnqB,YAAA,EACAD,cAAA,IAMA0pB,EAAAjpB,UAAA0F,QAAA,WACA9E,KAAAgpB,eACAhpB,KAAAgpB,cAAA,EACAhpB,KAAAqpB,eAAAD,aAEA,IAAAppB,KAAAqpB,eAAAD,YACAppB,KAAAqpB,eAAA3X,WAIAjT,OAAAC,eAAA2pB,EAAAjpB,UAAA,UACAP,IAAA,WACA,OAAAmB,KAAAipB,SAEArqB,YAAA,EACAD,cAAA,IAKA0pB,EAAAjpB,UAAAkqB,UAAA,SAAA5B,GACA,IAAA6B,GACA5B,QAAAD,EAAAC,SAAA,EACApjB,KAAAmjB,EAAAnjB,KACAtE,EAAAynB,EAAAznB,GAAA,EACAC,EAAAwnB,EAAAxnB,GAAA,GAGAsnB,EAAA+B,EAAAhlB,MAAAglB,EAAAvpB,MAEAA,KAAAipB,QAAAM,GAEAnoB,GACAU,EAAAK,YACAkmB,EAAAjpB,UAAA,gBACAgC,GACAU,EAAAK,YACAkmB,EAAAjpB,UAAA,gBACAgC,GACAU,EAAAK,YACAkmB,EAAAjpB,UAAA,kBACAgC,GACAU,EAAAK,YACAkmB,EAAAjpB,UAAA,YACAgC,GACAU,EAAAK,YACAkmB,EAAAjpB,UAAA,YACAgC,GACAU,EAAAK,YACAkmB,EAAAjpB,UAAA,kBACAgC,GACAU,EAAAslB,UACAiB,EAAAjpB,UAAA,eACAipB,EAhOA,CAiOCf,EAAAvlB,UACD5E,EAAAkrB,+BC1TAjrB,EAAAD,QAAA,2jFCAAC,EAAAD,QAAA,mMCCA,IACAiF,EADAC,EAAArC,WAAAqC,YACAD,EAAA3D,OAAA6D,iBACUC,wBAAgBC,OAAA,SAAAnE,EAAAoE,GAAsCpE,EAAAkE,UAAAE,IAChE,SAAApE,EAAAoE,GAAyB,QAAAnD,KAAAmD,IAAApD,eAAAC,KAAAjB,EAAAiB,GAAAmD,EAAAnD,KACzB,SAAAjB,EAAAoE,GAEA,SAAAC,IAAuB1C,KAAA2C,YAAAtE,EADvB+D,EAAA/D,EAAAoE,GAEApE,EAAAe,UAAA,OAAAqD,EAAAhE,OAAAmE,OAAAH,IAAAC,EAAAtD,UAAAqD,EAAArD,UAAA,IAAAsD,KAGAjE,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAA8D,EAAAhF,EAAA,GACA0oB,EAAA1oB,EAAA,GACAiF,EAAAjF,EAAA,GAKA2rB,EAAA,SAAApmB,GAEA,SAAAomB,IACA,cAAApmB,KAAAqK,MAAAzN,KAAAyB,YAAAzB,KAuHA,OAzHAqC,EAAAmnB,EAAApmB,GAOAomB,EAAApqB,UAAAkH,WAAA,WACA,IAAAhD,EAAAtD,KACAypB,GACAC,EAAA,EACAC,EAAA,EACAC,GAAA,EACAC,EAAA,EACAC,GAAA,EACAC,GAAA,GAEAC,GACAN,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,GAEA,OACAxjB,GAAA1I,EAAA,IACA2I,qBAEAK,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA0d,IACA5e,KAAA,WACAyI,KAAAjE,EAAArD,sBAAA2e,IACAzY,OAAA,SAAAnH,GAA0C,OAAAA,EAAAyB,EAAAzB,EAAA0B,MAG1C2G,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA2e,MACA7f,KAAA,SACAyI,KAAAjE,EAAArD,sBAAA2e,IACAzY,OAAA,SAAAnH,GAA0C,OAAAA,EAAAkpB,OAAAznB,EAAAzB,EAAAkpB,OAAAxnB,MAG1C2G,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA0d,IACA5e,KAAA,OACAyI,KAAAjE,EAAArD,sBAAA2e,IACAzY,OAAA,SAAAnH,GAA0C,OAAAA,EAAA2B,MAAA3B,EAAA4B,WAG1CyG,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA2e,MACA7f,KAAA,QACAyI,KAAAjE,EAAArD,sBAAAyd,IACAvX,OAAA,SAAAnH,GAA0C,OAAAA,EAAA+E,UAG1CsD,MAAA,EACAC,WAAAhE,EAAAtD,mBAAAyd,KACA3e,KAAA,UACAyI,KAAAjE,EAAArD,sBAAAyd,IACAvX,OAAA,SAAAnH,GAA0C,OAAAA,EAAA8pB,YAG1CthB,OACAzF,IAAAvB,KAAAqD,MAAA2D,MACA1I,KAAA,cAEAuI,MAAA,EACAvI,KAAA,UACAqH,OAAA,SAAAnH,GAA0C,OAAA8E,EAAAoO,SAAAuY,QAAA3mB,EAAA9E,IAAAkT,aAG1C7K,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA0d,IACA5e,KAAA,QACAyI,KAAAjE,EAAArD,sBAAAwd,KACAtX,OAAA,SAAAnH,GAA0C,OAAAA,EAAAyV,SAG1C7O,WAEA9G,KAAA,cACAyI,KAAAjE,EAAApD,YAAAwd,IACAvX,OAAA,SAAAukB,GAA0C,aAG1CzjB,mBAKAnI,KAAA,WACAyI,KAAAjE,EAAAnD,oBAAAwe,MACAxY,OAAA,SAAAwkB,GAA+C,OAE/CV,EAAAU,GAEAH,EAAAG,GACA,MAIAzjB,YAAA,EACAC,GAAA9I,EAAA,MAGA2rB,EAAApqB,UAAA4G,aAAA,WACA,OACAC,SAAApD,EAAAunB,sBACAjkB,UAAAtD,EAAAuD,OAGAojB,EAAApqB,UAAAiH,mBAAA,WACA,OACAwgB,SAAAhkB,EAAAikB,eACAC,SAAAlkB,EAAAmkB,UACAC,oBAAA,EACAC,aAAA,IAGAsC,EA1HA,CA2HCjD,EAAApjB,OACDhG,EAAAqsB,2CC9IA,SAAA9hB,EAAAvJ,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAEAb,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C2I,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,mCCLA,IACAuE,EADAC,EAAArC,WAAAqC,YACAD,EAAA3D,OAAA6D,iBACUC,wBAAgBC,OAAA,SAAAnE,EAAAoE,GAAsCpE,EAAAkE,UAAAE,IAChE,SAAApE,EAAAoE,GAAyB,QAAAnD,KAAAmD,IAAApD,eAAAC,KAAAjB,EAAAiB,GAAAmD,EAAAnD,KACzB,SAAAjB,EAAAoE,GAEA,SAAAC,IAAuB1C,KAAA2C,YAAAtE,EADvB+D,EAAA/D,EAAAoE,GAEApE,EAAAe,UAAA,OAAAqD,EAAAhE,OAAAmE,OAAAH,IAAAC,EAAAtD,UAAAqD,EAAArD,UAAA,IAAAsD,KAGAtB,EAAApB,WAAAoB,YAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAnD,EAAAD,EAAAqD,UAAAC,OAAA5C,EAAAV,EAAA,EAAAkD,EAAA,OAAAE,IAAA/C,OAAAkD,yBAAAL,EAAAC,GAAAC,EACA,oBAAAI,SAAA,mBAAAA,QAAAC,SAAA/C,EAAA8C,QAAAC,SAAAR,EAAAC,EAAAC,EAAAC,QACA,QAAAzD,EAAAsD,EAAAK,OAAA,EAA4C3D,GAAA,EAAQA,KAAAM,EAAAgD,EAAAtD,MAAAe,GAAAV,EAAA,EAAAC,EAAAS,GAAAV,EAAA,EAAAC,EAAAiD,EAAAC,EAAAzC,GAAAT,EAAAiD,EAAAC,KAAAzC,GACpD,OAAAV,EAAA,GAAAU,GAAAL,OAAAC,eAAA4C,EAAAC,EAAAzC,MAEAL,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IA8PA8E,EA9PA/B,EAAAjE,EAAA,GACAwpB,EAAAxpB,EAAA,GACAypB,EAAAzpB,EAAA,GACAiF,EAAAjF,EAAA,IAKA0pB,EAAA,IAAA9jB,IAKA+jB,IAAA3jB,MACAf,EAAA0F,WAAAif,SAAA,SAAAC,EAAA7T,GACA6T,EAAAznB,GAAAynB,EAAAC,QACAD,EAAAxnB,GAAAwnB,EAAAC,SAEA9jB,EAAAf,EAAA0F,WAAAof,WAAA,SAAAF,EAAA7T,GACA6T,EAAAznB,EAAA4T,EAAA1T,MAAA,EACAunB,EAAAxnB,GAAAwnB,EAAAC,SAEA9jB,EAAAf,EAAA0F,WAAAqf,UAAA,SAAAH,EAAA7T,GACA6T,EAAAznB,EAAA4T,EAAA1T,MAAAunB,EAAAC,QACAD,EAAAxnB,GAAAwnB,EAAAC,SAEA9jB,EAAAf,EAAA0F,WAAAsf,YAAA,SAAAJ,EAAA7T,GACA6T,EAAAznB,GAAAynB,EAAAC,QACAD,EAAAxnB,EAAA2T,EAAAzT,OAAA,GAEAyD,EAAAf,EAAA0F,WAAAuf,QAAA,SAAAL,EAAA7T,GACA6T,EAAAznB,EAAA4T,EAAA1T,MAAA,EACAunB,EAAAxnB,EAAA2T,EAAAzT,OAAA,GAEAyD,EAAAf,EAAA0F,WAAAwf,aAAA,SAAAN,EAAA7T,GACA6T,EAAAznB,EAAA4T,EAAA1T,MAAAunB,EAAAC,QACAD,EAAAxnB,EAAA2T,EAAAzT,OAAA,GAEAyD,EAAAf,EAAA0F,WAAAyf,YAAA,SAAAP,EAAA7T,GACA6T,EAAAznB,GAAAynB,EAAAC,QACAD,EAAAxnB,EAAA2T,EAAAzT,OAAAsnB,EAAAC,SAEA9jB,EAAAf,EAAA0F,WAAA0f,cAAA,SAAAR,EAAA7T,GACA6T,EAAAznB,EAAA4T,EAAA1T,MAAA,EACAunB,EAAAxnB,EAAA2T,EAAAzT,OAAAsnB,EAAAC,SAEA9jB,EAAAf,EAAA0F,WAAA2f,aAAA,SAAAT,EAAA7T,GACA6T,EAAAznB,EAAA4T,EAAA1T,MAAAunB,EAAAC,QACAD,EAAAxnB,EAAA2T,EAAAzT,OAAAsnB,EAAAC,SAEA9jB,EAAAf,EAAA0F,WAAA4f,QAAA,SAAAV,EAAA7T,GACA6T,EAAAznB,EAAAynB,EAAAznB,GAAA,EACAynB,EAAAxnB,EAAAwnB,EAAAxnB,GAAA,GAEA2D,GAgBAwmB,EAAA,SAAAjnB,GAEA,SAAAinB,EAAAtqB,GACA,IAAAuD,EAAAF,EAAAlF,KAAA8B,KAAAD,IAAAC,KAEAsD,EAAAgnB,MAAA,SAEAhnB,EAAAC,MAAA,EAEAD,EAAAlD,OAAA,EAEAkD,EAAAglB,QAAAxlB,EAAA2F,UAAA8f,UAEAjlB,EAAAnD,MAAA,EAEAmD,EAAArD,EAAA,EAEAqD,EAAApD,EAAA,EAIAoD,EAAAinB,aAAA,EACAjnB,EAAAknB,cAAA,EACAlnB,EAAA0lB,cAAA,EAGA1lB,EAAA2lB,SACAtB,QAAA,EACApjB,KAAAzB,EAAA0F,WAAAif,QACAxnB,EAAA,EACAC,EAAA,GAEAoD,EAAAC,MAAAxD,EAAAwD,OAAAD,EAAAC,MACAD,EAAAgnB,KAAAvqB,EAAAuqB,MAAAhnB,EAAAgnB,KACAhnB,EAAAglB,QAAAvoB,EAAAuoB,SAAAhlB,EAAAglB,QACAhlB,EAAArD,EAAAF,EAAAE,GAAAqD,EAAArD,EACAqD,EAAApD,EAAAH,EAAAG,GAAAoD,EAAApD,EAEAoD,EAAAmnB,SAAA1qB,EAAAoa,QAEA,IAAAnH,EAAAuU,EAAA1oB,IAAAyE,EAAAonB,OAAApnB,EAAAmnB,UA2BA,OAzBAzX,GACAA,EAAAoW,aAGApW,KACAA,GACAoW,WAAA,EACA1X,SAAA,IAAA2V,EAAAzT,mBAAAtQ,KAGAoO,SAAA/I,YAAAqK,EAAAtB,SAAA/I,aAAA,EAGA0e,EAAAsD,gBAAAjX,WAAAV,EAAAtB,UAGA6V,EAAA5b,IAAArI,EAAAonB,OAAApnB,EAAAmnB,SAAAzX,IAEA1P,EAAA+lB,eAAArW,EACA1P,EAAAinB,aAAAvX,EAAAtB,SAAAsB,cAAA3I,MAAAlK,MACAmD,EAAAknB,cAAAxX,EAAAtB,SAAAsB,cAAA3I,MAAAjK,OACAkD,EAAAnD,MAAAJ,EAAAI,OAAAmD,EAAAinB,cAAA,EACAjnB,EAAAlD,OAAAL,EAAAK,QAAAkD,EAAAknB,eAAA,EAEAzqB,EAAA2nB,QAAApkB,EAAAgmB,UAAAvpB,EAAA2nB,QACApkB,EAkHA,OApLAjB,EAAAgoB,EAAAjnB,GAoEA3E,OAAAC,eAAA2rB,EAAAjrB,UAAA,WAIAP,IAAA,WAA0B,OAAAmB,KAAAyqB,UAC1B7rB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA2rB,EAAAjrB,UAAA,eAEAP,IAAA,WAA0B,OAAAmB,KAAAgpB,cAC1BpqB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA2rB,EAAAjrB,UAAA,QAEAP,IAAA,WAA0B,OAAAmB,KAAA0qB,OAC1B9rB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA2rB,EAAAjrB,UAAA,YAEAP,IAAA,WAA0B,OAAAmB,KAAAqpB,eAAA3X,UAC1B9S,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA2rB,EAAAjrB,UAAA,eAKAP,IAAA,WACA,OAAAmB,KAAAuqB,cAEA3rB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA2rB,EAAAjrB,UAAA,gBAKAP,IAAA,WACA,OAAAmB,KAAAwqB,eAEA5rB,YAAA,EACAD,cAAA,IAMA0rB,EAAAjrB,UAAA0F,QAAA,WACA9E,KAAAgpB,eACAhpB,KAAAgpB,cAAA,EACAhpB,KAAAqpB,eAAAD,aAEA,IAAAppB,KAAAqpB,eAAAD,aACAppB,KAAAqpB,eAAA3X,SACA9G,QAAAC,KAAA,gDAIApM,OAAAC,eAAA2rB,EAAAjrB,UAAA,UACAP,IAAA,WACA,OAAAmB,KAAAipB,SAEArqB,YAAA,EACAD,cAAA,IAKA0rB,EAAAjrB,UAAAkqB,UAAA,SAAA5B,GACA,IAAA6B,GACA5B,QAAAD,EAAAC,SAAA,EACApjB,KAAAmjB,EAAAnjB,KACAtE,EAAAynB,EAAAznB,GAAA,EACAC,EAAAwnB,EAAAxnB,GAAA,GAGAsnB,EAAA+B,EAAAhlB,MAAAglB,EAAAvpB,MAEAA,KAAAipB,QAAAM,GAEAnoB,GACAU,EAAAK,YACAkoB,EAAAjrB,UAAA,eACAgC,GACAU,EAAAK,YACAkoB,EAAAjrB,UAAA,gBACAgC,GACAU,EAAAK,YACAkoB,EAAAjrB,UAAA,iBACAgC,GACAU,EAAAK,YACAkoB,EAAAjrB,UAAA,kBACAgC,GACAU,EAAAK,YACAkoB,EAAAjrB,UAAA,gBACAgC,GACAU,EAAAK,YACAkoB,EAAAjrB,UAAA,YACAgC,GACAU,EAAAK,YACAkoB,EAAAjrB,UAAA,YACAgC,GACAU,EAAAK,YACAkoB,EAAAjrB,UAAA,kBACAgC,GACAU,EAAAslB,UACAiD,EAAAjrB,UAAA,eACAirB,EArLA,CAsLC/C,EAAAvlB,UACD5E,EAAAktB,+BC/QAjtB,EAAAD,QAAA,ugFCAAC,EAAAD,QAAA,mMCCA,IACAiF,EADAC,EAAArC,WAAAqC,YACAD,EAAA3D,OAAA6D,iBACUC,wBAAgBC,OAAA,SAAAnE,EAAAoE,GAAsCpE,EAAAkE,UAAAE,IAChE,SAAApE,EAAAoE,GAAyB,QAAAnD,KAAAmD,IAAApD,eAAAC,KAAAjB,EAAAiB,GAAAmD,EAAAnD,KACzB,SAAAjB,EAAAoE,GAEA,SAAAC,IAAuB1C,KAAA2C,YAAAtE,EADvB+D,EAAA/D,EAAAoE,GAEApE,EAAAe,UAAA,OAAAqD,EAAAhE,OAAAmE,OAAAH,IAAAC,EAAAtD,UAAAqD,EAAArD,UAAA,IAAAsD,KAGAjE,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAA8D,EAAAhF,EAAA,GACA0oB,EAAA1oB,EAAA,GACAiF,EAAAjF,EAAA,GAKA+sB,EAAA,SAAAxnB,GAEA,SAAAwnB,IACA,cAAAxnB,KAAAqK,MAAAzN,KAAAyB,YAAAzB,KAuHA,OAzHAqC,EAAAuoB,EAAAxnB,GAOAwnB,EAAAxrB,UAAAkH,WAAA,WACA,IAAAhD,EAAAtD,KACAypB,GACAC,EAAA,EACAC,EAAA,EACAC,GAAA,EACAC,EAAA,EACAC,GAAA,EACAC,GAAA,GAEAC,GACAN,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,GAEA,OACAxjB,GAAA1I,EAAA,IACA2I,qBAEAK,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA0d,IACA5e,KAAA,WACAyI,KAAAjE,EAAArD,sBAAA2e,IACAzY,OAAA,SAAAnH,GAA0C,OAAAA,EAAAyB,EAAAzB,EAAA0B,MAG1C2G,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA2e,MACA7f,KAAA,SACAyI,KAAAjE,EAAArD,sBAAA2e,IACAzY,OAAA,SAAAnH,GAA0C,OAAAA,EAAAkpB,OAAAznB,EAAAzB,EAAAkpB,OAAAxnB,MAG1C2G,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA0d,IACA5e,KAAA,OACAyI,KAAAjE,EAAArD,sBAAA2e,IACAzY,OAAA,SAAAnH,GAA0C,OAAAA,EAAA2B,MAAA3B,EAAA4B,WAG1CyG,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA2e,MACA7f,KAAA,QACAyI,KAAAjE,EAAArD,sBAAAyd,IACAvX,OAAA,SAAAnH,GAA0C,OAAAA,EAAA+E,UAG1CsD,MAAA,EACAC,WAAAhE,EAAAtD,mBAAAyd,KACA3e,KAAA,UACAyI,KAAAjE,EAAArD,sBAAAyd,IACAvX,OAAA,SAAAnH,GAA0C,OAAAA,EAAA8pB,YAG1CthB,OACAzF,IAAAvB,KAAAqD,MAAA2D,MACA1I,KAAA,cAEAuI,MAAA,EACAvI,KAAA,UACAqH,OAAA,SAAAnH,GAA0C,OAAA8E,EAAAoO,SAAAuY,QAAA3mB,EAAA9E,IAAAkT,aAG1C7K,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA0d,IACA5e,KAAA,OACAyI,KAAAjE,EAAArD,sBAAAwd,KACAtX,OAAA,SAAAnH,GAA0C,OAAAA,EAAA8rB,QAG1CllB,WAEA9G,KAAA,cACAyI,KAAAjE,EAAApD,YAAAwd,IACAvX,OAAA,SAAAukB,GAA0C,aAG1CzjB,mBAKAnI,KAAA,WACAyI,KAAAjE,EAAAnD,oBAAAwe,MACAxY,OAAA,SAAAwkB,GAA+C,OAE/CV,EAAAU,GAEAH,EAAAG,GACA,MAIAzjB,YAAA,EACAC,GAAA9I,EAAA,MAGA+sB,EAAAxrB,UAAA4G,aAAA,WACA,OACAC,SAAApD,EAAAunB,sBACAjkB,UAAAtD,EAAAuD,OAGAwkB,EAAAxrB,UAAAiH,mBAAA,WACA,OACAwgB,SAAAhkB,EAAAikB,eACAC,SAAAlkB,EAAAmkB,UACAC,oBAAA,EACAC,aAAA,IAGA0D,EA1HA,CA2HCrE,EAAApjB,OACDhG,EAAAytB,2CC9IA,SAAAljB,EAAAvJ,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAEAb,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C2I,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,mCCLA,IACAuE,EADAC,EAAArC,WAAAqC,YACAD,EAAA3D,OAAA6D,iBACUC,wBAAgBC,OAAA,SAAAnE,EAAAoE,GAAsCpE,EAAAkE,UAAAE,IAChE,SAAApE,EAAAoE,GAAyB,QAAAnD,KAAAmD,IAAApD,eAAAC,KAAAjB,EAAAiB,GAAAmD,EAAAnD,KACzB,SAAAjB,EAAAoE,GAEA,SAAAC,IAAuB1C,KAAA2C,YAAAtE,EADvB+D,EAAA/D,EAAAoE,GAEApE,EAAAe,UAAA,OAAAqD,EAAAhE,OAAAmE,OAAAH,IAAAC,EAAAtD,UAAAqD,EAAArD,UAAA,IAAAsD,KAGAtB,EAAApB,WAAAoB,YAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAnD,EAAAD,EAAAqD,UAAAC,OAAA5C,EAAAV,EAAA,EAAAkD,EAAA,OAAAE,IAAA/C,OAAAkD,yBAAAL,EAAAC,GAAAC,EACA,oBAAAI,SAAA,mBAAAA,QAAAC,SAAA/C,EAAA8C,QAAAC,SAAAR,EAAAC,EAAAC,EAAAC,QACA,QAAAzD,EAAAsD,EAAAK,OAAA,EAA4C3D,GAAA,EAAQA,KAAAM,EAAAgD,EAAAtD,MAAAe,GAAAV,EAAA,EAAAC,EAAAS,GAAAV,EAAA,EAAAC,EAAAiD,EAAAC,EAAAzC,GAAAT,EAAAiD,EAAAC,KAAAzC,GACpD,OAAAV,EAAA,GAAAU,GAAAL,OAAAC,eAAA4C,EAAAC,EAAAzC,MAEAL,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAA+C,EAAAjE,EAAA,GAEAgtB,EAAA,SAAAznB,GAEA,SAAAynB,EAAA9qB,GACA,IAAAuD,EAAAF,EAAAlF,KAAA8B,KAAAD,IAAAC,KAiBA,OAhBAsD,EAAAwnB,YAAA,SACAxnB,EAAAynB,UAAA,SACAznB,EAAA0nB,UAAA,YACA1nB,EAAAC,MAAA,EACAD,EAAAiC,KAAA,KACAjC,EAAA6Y,OAAA,KACA7Y,EAAA2nB,WAAA,EACA3nB,EAAA4nB,SAAA,EACA5nB,EAAAwnB,WAAA/qB,EAAA+qB,YAAAxnB,EAAAwnB,WACAxnB,EAAAynB,SAAAhrB,EAAAgrB,UAAAznB,EAAAynB,SACAznB,EAAA0nB,QAAAjrB,EAAAirB,SAAA1nB,EAAA0nB,QACA1nB,EAAAC,MAAAxD,EAAAwD,OAAAD,EAAAC,MACAD,EAAAiC,IAAAxF,EAAAwF,KAAAjC,EAAAiC,IACAjC,EAAA2nB,WAAAlrB,EAAAkrB,YAAA3nB,EAAA2nB,WACA3nB,EAAA4nB,SAAAnrB,EAAAmrB,UAAA5nB,EAAA4nB,SACA5nB,EAAA6Y,MAAApc,EAAAoc,OAAA7Y,EAAA6Y,MACA7Y,EA8EA,OAjGAjB,EAAAwoB,EAAAznB,GAqBA3E,OAAAC,eAAAmsB,EAAAzrB,UAAA,UACAP,IAAA,WACA,UAEAD,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAAmsB,EAAAzrB,UAAA,iBAIAP,IAAA,WACA,UAEAD,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAAmsB,EAAAzrB,UAAA,YAIAP,IAAA,WACA,UAEAD,YAAA,EACAD,cAAA,IAKAksB,EAAAzrB,UAAA+rB,aAAA,SAAAhrB,GACAA,IACAH,KAAAkrB,SAAA/qB,EACAH,KAAAirB,WAAA9qB,IAMA0qB,EAAAzrB,UAAAgsB,SAAA,SAAAnX,GACAjU,KAAA8qB,WAAA7W,EACAjU,KAAA+qB,SAAA9W,GAEA7S,GACAU,EAAAK,YACA0oB,EAAAzrB,UAAA,qBACAgC,GACAU,EAAAK,YACA0oB,EAAAzrB,UAAA,mBACAgC,GACAU,EAAAK,YACA0oB,EAAAzrB,UAAA,kBACAgC,GACAU,EAAAK,YACA0oB,EAAAzrB,UAAA,gBACAgC,GACAU,EAAAK,YACA0oB,EAAAzrB,UAAA,cACAgC,GACAU,EAAAK,YACA0oB,EAAAzrB,UAAA,gBACAgC,GACAU,EAAAK,YACA0oB,EAAAzrB,UAAA,qBACAgC,GACAU,EAAAK,YACA0oB,EAAAzrB,UAAA,mBACAgC,GACAU,EAAAslB,UACAyD,EAAAzrB,UAAA,eACAgC,GACAU,EAAAslB,UACAyD,EAAAzrB,UAAA,sBACAgC,GACAU,EAAAslB,UACAyD,EAAAzrB,UAAA,iBACAyrB,EAlGA,CADAhtB,EAAA,GAoGCkE,UACD5E,EAAA0tB,8BCxHAztB,EAAAD,QAAA,0HCAAC,EAAAD,QAAA,44DCAAC,EAAAD,QAAA,mgBCAAC,EAAAD,QAAA,ikBCAAC,EAAAD,QAAA,2bCCA,IACAiF,EADAC,EAAArC,WAAAqC,YACAD,EAAA3D,OAAA6D,iBACUC,wBAAgBC,OAAA,SAAAnE,EAAAoE,GAAsCpE,EAAAkE,UAAAE,IAChE,SAAApE,EAAAoE,GAAyB,QAAAnD,KAAAmD,IAAApD,eAAAC,KAAAjB,EAAAiB,GAAAmD,EAAAnD,KACzB,SAAAjB,EAAAoE,GAEA,SAAAC,IAAuB1C,KAAA2C,YAAAtE,EADvB+D,EAAA/D,EAAAoE,GAEApE,EAAAe,UAAA,OAAAqD,EAAAhE,OAAAmE,OAAAH,IAAAC,EAAAtD,UAAAqD,EAAArD,UAAA,IAAAsD,KAGAjE,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAIAssB,EAJAxoB,EAAAhF,EAAA,GACA0oB,EAAA1oB,EAAA,GACAiF,EAAAjF,EAAA,GACAkF,EAAAlF,EAAA,IAEA,SAAAwtB,GAEAA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,qBANA,CAOCA,EAAAluB,EAAAkuB,WAAAluB,EAAAkuB,cAWD,IA0KAxnB,EA1KAynB,IAAAznB,MACAwnB,EAAAE,MAAA1tB,EAAA,IACAgG,EAAAwnB,EAAAG,QAAA3tB,EAAA,IACAgG,EAAAwnB,EAAAI,SAAA5tB,EAAA,IACAgG,GAEA6nB,EAAA7tB,EAAA,IAKA8tB,EAAA,SAAAvoB,GAEA,SAAAuoB,IACA,cAAAvoB,KAAAqK,MAAAzN,KAAAyB,YAAAzB,KAyJA,OA3JAqC,EAAAspB,EAAAvoB,GAOAuoB,EAAAvsB,UAAAkH,WAAA,WAeA,IAdA,IAAA/B,EAAAvE,KAAAqD,MAAAkB,KACAqnB,EAAArnB,IAAA8mB,EAAAE,KAAA,KAEA9B,IAAA5lB,GACA6lB,EAAA,IAEA,EAAAkC,EAAA,MACA/nB,GACAgoB,IAAApN,GACAiL,EAAA,IAEA,EAAAkC,EAAA,KACAnN,GACAqN,EAAA,EACA/tB,EAAA,EAAuBA,EAAA,EAAA6tB,IAAsB7tB,EAC7C0rB,EAAA1rB,EAAA,GAAA+tB,EACAD,EAAA9tB,EAAA,GAAA+C,KAAAoT,MAAAnW,EAAA,IAAA6tB,EAAA,GACAE,IAAA,EAEA,IA0GAjoB,EAAA4a,EA1GA9X,EAAA5D,EAAA+K,eAAA4d,GAEAnO,WAAA,gBAEAwO,cAAAT,EAAA/mB,KAEAjG,KAAA,aACAyQ,QACA,mBAGA,OACAxI,GAAA1I,EAAA,IACA2I,qBAEAK,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA0d,IACA5e,KAAA,QACAyI,KAAAjE,EAAArD,sBAAA2e,IACAzY,OAAA,SAAAnH,GAA0C,OAAAA,EAAA2d,SAG1CtV,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA2e,MACA7f,KAAA,MACAyI,KAAAjE,EAAArD,sBAAA2e,IACAzY,OAAA,SAAAnH,GAA0C,OAAAA,EAAA+G,OAG1CsB,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA0d,IACA5e,KAAA,aACAyI,KAAAjE,EAAArD,sBAAAyd,IACAvX,OAAA,SAAAnH,GAA0C,OAAAA,EAAAysB,eAG1CpkB,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA4e,IACA9f,KAAA,WACAyI,KAAAjE,EAAArD,sBAAAyd,IACAvX,OAAA,SAAAnH,GAA0C,OAAAA,EAAA0sB,aAG1CrkB,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA2e,MACA7f,KAAA,QACAyI,KAAAjE,EAAArD,sBAAAyd,IACAvX,OAAA,SAAAnH,GAA0C,OAAAA,EAAA+E,UAG1CsD,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA0d,IACA5e,KAAA,aACAyI,KAAAjE,EAAArD,sBAAAwd,KACAtX,OAAA,SAAAnH,GAA0C,OAAAA,EAAAssB,cAG1CjkB,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA0d,IACA5e,KAAA,WACAyI,KAAAjE,EAAArD,sBAAAwd,KACAtX,OAAA,SAAAnH,GAA0C,OAAAA,EAAAusB,WAE1CxmB,IAAA8mB,EAAAE,MACA1kB,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA0d,IACA5e,KAAA,UACAyI,KAAAjE,EAAArD,sBAAAwd,KACAtX,OAAA,SAAAnH,GAA0C,kBACzB,KACjB+F,IAAA8mB,EAAAG,QACA3kB,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA0d,IACA5e,KAAA,UACAyI,KAAAjE,EAAArD,sBAAAwd,KACAtX,OAAA,SAAAnH,GAA0C,OAAAA,EAAAwsB,QAAA,MAAAxsB,EAAAwsB,QAAA,aACzB,KACjBzmB,IAAA8mB,EAAAI,SACA5kB,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA0d,IACA5e,KAAA,UACAyI,KAAAjE,EAAArD,sBAAAwd,KACAtX,OAAA,SAAAnH,GAA0C,QAlI1CO,EAkI0CP,EAAAwsB,SAhI1C,MACAjsB,EAAA,MACAA,EAAA,MACAA,EAAA,OALA,IAAAA,IAmIiB,MAEjBqG,YACAqB,mBAKAnI,KAAA,WACAyI,KAAAjE,EAAAnD,oBAAAwe,MACAxY,OAAA,SAAAwkB,GAA+C,OAE/CV,EAAAU,GAEA0B,EAAA1B,GAEA,EAAAyB,MAIAllB,YAAA,EAAAklB,EAAA,EACAjlB,KAAAoH,SAIA4d,EAAAvsB,UAAA4G,aAAA,WACA,OACAC,SAAApD,EAAAunB,sBACAjkB,UAAAtD,EAAAuD,OAGAulB,EAAAvsB,UAAAiH,mBAAA,WACA,OACAwgB,SAAAhkB,EAAAikB,eACAC,SAAAlkB,EAAAmkB,UACAC,oBAAA,EACAC,aAAA,IAIAyE,EAAA/nB,cACA0B,KAAA,KACA/D,IAAA,OACAgD,KAAA8mB,EAAAE,MAEAI,EA5JA,CA6JCpF,EAAApjB,OACDhG,EAAAwuB,0CC3MA,SAAAjkB,EAAAvJ,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAEAb,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C2I,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,mCCLA,IACAuE,EADAC,EAAArC,WAAAqC,YACAD,EAAA3D,OAAA6D,iBACUC,wBAAgBC,OAAA,SAAAnE,EAAAoE,GAAsCpE,EAAAkE,UAAAE,IAChE,SAAApE,EAAAoE,GAAyB,QAAAnD,KAAAmD,IAAApD,eAAAC,KAAAjB,EAAAiB,GAAAmD,EAAAnD,KACzB,SAAAjB,EAAAoE,GAEA,SAAAC,IAAuB1C,KAAA2C,YAAAtE,EADvB+D,EAAA/D,EAAAoE,GAEApE,EAAAe,UAAA,OAAAqD,EAAAhE,OAAAmE,OAAAH,IAAAC,EAAAtD,UAAAqD,EAAArD,UAAA,IAAAsD,KAGAtB,EAAApB,WAAAoB,YAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAnD,EAAAD,EAAAqD,UAAAC,OAAA5C,EAAAV,EAAA,EAAAkD,EAAA,OAAAE,IAAA/C,OAAAkD,yBAAAL,EAAAC,GAAAC,EACA,oBAAAI,SAAA,mBAAAA,QAAAC,SAAA/C,EAAA8C,QAAAC,SAAAR,EAAAC,EAAAC,EAAAC,QACA,QAAAzD,EAAAsD,EAAAK,OAAA,EAA4C3D,GAAA,EAAQA,KAAAM,EAAAgD,EAAAtD,MAAAe,GAAAV,EAAA,EAAAC,EAAAS,GAAAV,EAAA,EAAAC,EAAAiD,EAAAC,EAAAzC,GAAAT,EAAAiD,EAAAC,KAAAzC,GACpD,OAAAV,EAAA,GAAAU,GAAAL,OAAAC,eAAA4C,EAAAC,EAAAzC,MAEAL,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAA+C,EAAAjE,EAAA,GAEAmuB,EAAA,SAAA5oB,GAEA,SAAA4oB,EAAAjsB,GACA,IAAAuD,EAAAF,EAAAlF,KAAA8B,KAAAD,IAAAC,KAWA,OAVAsD,EAAA2Q,OAAA,SACA3Q,EAAAmjB,OAAA,EACAnjB,EAAArD,EAAA,EACAqD,EAAApD,EAAA,EACAoD,EAAAC,MAAA,EACAD,EAAA2Q,MAAAlU,EAAAkU,OAAA3Q,EAAA2Q,MACA3Q,EAAAmjB,OAAA1mB,EAAA0mB,QAAAnjB,EAAAmjB,OACAnjB,EAAArD,EAAAF,EAAAE,GAAAqD,EAAArD,EACAqD,EAAApD,EAAAH,EAAAG,GAAAoD,EAAApD,EACAoD,EAAAC,MAAAxD,EAAAwD,OAAAD,EAAAC,MACAD,EAqCA,OAlDAjB,EAAA2pB,EAAA5oB,GAeA3E,OAAAC,eAAAstB,EAAA5sB,UAAA,SACAP,IAAA,WACA,SAAAmB,KAAAymB,QAEA7nB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAAstB,EAAA5sB,UAAA,UACAP,IAAA,WACA,SAAAmB,KAAAymB,QAEA7nB,YAAA,EACAD,cAAA,IAEAyC,GACAU,EAAAK,YACA6pB,EAAA5sB,UAAA,gBACAgC,GACAU,EAAAK,YACA6pB,EAAA5sB,UAAA,iBACAgC,GACAU,EAAAK,YACA6pB,EAAA5sB,UAAA,YACAgC,GACAU,EAAAK,YACA6pB,EAAA5sB,UAAA,YACAgC,GACAU,EAAAK,YACA6pB,EAAA5sB,UAAA,gBACAgC,GACAU,EAAAslB,UACA4E,EAAA5sB,UAAA,cACAgC,GACAU,EAAAslB,UACA4E,EAAA5sB,UAAA,eACA4sB,EAnDA,CADAnuB,EAAA,GAqDCkE,UACD5E,EAAA6uB,gCCzEA5uB,EAAAD,QAAA,mVCAAC,EAAAD,QAAA,mfCmBA,SAAA8uB,EAAAC,EAAAC,GACA,IAAAC,EAAAF,EAAAjsB,EAAAksB,EAAAlsB,EACAosB,EAAAH,EAAAhsB,EAAAisB,EAAAjsB,EACA,OAAAksB,IAAAC,IArBA5tB,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IA6B9C,IAAAutB,EAAA,WACA,SAAAA,KAwKA,OA5JAA,EAAAC,IAAA,SAAAL,EAAAC,EAAAriB,GACA,OAAAA,GACAA,EAAA7J,EAAAisB,EAAAjsB,EAAAksB,EAAAlsB,EACA6J,EAAA5J,EAAAgsB,EAAAhsB,EAAAisB,EAAAjsB,EACA4J,IAGA7J,EAAAisB,EAAAjsB,EAAAksB,EAAAlsB,EACAC,EAAAgsB,EAAAhsB,EAAAisB,EAAAjsB,IAcAosB,EAAAE,WAAA,SAAAC,EAAAC,GACA,IAEAC,EAFAC,EAAApa,OAAAqa,UACAC,EAAA,KAUA,OADAJ,EAAA7mB,QAPA,SAAAlF,IACAgsB,EAAAV,EAAAtrB,EAAA8rB,IACAG,IACAA,EAAAD,EACAG,EAAAnsB,KAIAmsB,GAeAR,EAAAS,gBAAA,SAAAN,EAAAC,GACA,IAEAC,EAFAC,EAAApa,OAAAqa,UACAC,EAAA,EAUA,OADAJ,EAAA7mB,QAPA,SAAAlF,EAAA5C,IACA4uB,EAAAV,EAAAtrB,EAAA8rB,IACAG,IACAA,EAAAD,EACAG,EAAA/uB,KAIA+uB,GAYAR,EAAAU,SAAA,SAAAC,EAAAC,EAAAC,QACA,IAAAA,IAAmCA,GAAA,GACnC,IAAAf,EAAAc,EAAAjtB,EAAAgtB,EAAAhtB,EACAosB,EAAAa,EAAAhtB,EAAA+sB,EAAA/sB,EACA,GAAAitB,EAAA,CACA,IAAAC,EAAAtsB,KAAAusB,KAAAjB,IAAAC,KACAD,GAAAgB,EACAf,GAAAe,EAEA,OACAntB,EAAAmsB,EACAlsB,EAAAmsB,IAaAC,EAAAgB,YAAA,SAAApB,EAAAC,EAAAoB,GAEA,YADA,IAAAA,IAAiCA,GAAA,GACjCA,EACAtB,EAAAC,EAAAC,GAEArrB,KAAAusB,KAAApB,EAAAC,EAAAC,KAWAG,EAAAkB,YAAA,SAAAtB,EAAAC,GACA,IAAAsB,EAAAnB,EAAAU,SAAAd,EAAAC,GACA,OACAlsB,EAAAwtB,EAAAxtB,EAAA,EAAAisB,EAAAjsB,EACAC,EAAAutB,EAAAvtB,EAAA,EAAAgsB,EAAAhsB,IAGAosB,EAAAoB,KAAA,SAAAztB,EAAAC,GACA,OAAgBD,IAAAC,MAYhBosB,EAAA9hB,MAAA,SAAA0hB,EAAA3sB,EAAAuK,GACA,OAAAA,GACAA,EAAA7J,EAAAisB,EAAAjsB,EAAAV,EACAuK,EAAA5J,EAAAgsB,EAAAhsB,EAAAX,EACAuK,IAGA7J,EAAAisB,EAAAjsB,EAAAV,EACAW,EAAAgsB,EAAAhsB,EAAAX,IASA+sB,EAAApX,KAAA,WACA,OACAjV,EAAA,EACAC,EAAA,IAGAosB,EAzKA,GA2KAnvB,EAAAmvB,sCCxMA,IACAlqB,EADAC,EAAArC,WAAAqC,YACAD,EAAA3D,OAAA6D,iBACUC,wBAAgBC,OAAA,SAAAnE,EAAAoE,GAAsCpE,EAAAkE,UAAAE,IAChE,SAAApE,EAAAoE,GAAyB,QAAAnD,KAAAmD,IAAApD,eAAAC,KAAAjB,EAAAiB,GAAAmD,EAAAnD,KACzB,SAAAjB,EAAAoE,GAEA,SAAAC,IAAuB1C,KAAA2C,YAAAtE,EADvB+D,EAAA/D,EAAAoE,GAEApE,EAAAe,UAAA,OAAAqD,EAAAhE,OAAAmE,OAAAH,IAAAC,EAAAtD,UAAAqD,EAAArD,UAAA,IAAAsD,KAGAjE,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAA8D,EAAAhF,EAAA,GACA8vB,EAAA9vB,EAAA,IACA0oB,EAAA1oB,EAAA,GACAiF,EAAAjF,EAAA,GACAiV,EAAAhS,KAAAgS,IAKA8a,EAAA,SAAAxqB,GAEA,SAAAwqB,IACA,cAAAxqB,KAAAqK,MAAAzN,KAAAyB,YAAAzB,KAiGA,OAnGAqC,EAAAurB,EAAAxqB,GAQAwqB,EAAAxuB,UAAA8E,0BAAA,WACA,OAEAI,eAAA,SAAAupB,GAA+C,WAAAF,EAAA7tB,QAC/CM,OAAA,EAAAytB,EAAApH,OACAtmB,MAAA,EAAA0tB,EAAApH,OACAxmB,EAAA4tB,EAAA5tB,EAAA4tB,EAAApH,OACAvmB,EAAA2tB,EAAA3tB,EAAA2tB,EAAApH,UAGAtiB,QAAA,SAAA0pB,EAAAltB,EAAAyJ,GACA,IAAAtL,EAAA+uB,EAAApH,OAAA3T,EAAArF,WAAA,EAAArD,EAAAE,OAAAE,OACAiR,GACA9a,EAAAV,EAAA4tB,EAAA5tB,EACAU,EAAAT,EAAA2tB,EAAA3tB,GAEA,OAAAub,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAA3c,OAOA8uB,EAAAxuB,UAAAkH,WAAA,WACA,OACAC,GAAA1I,EAAA,IACA2I,qBAEAK,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA0d,IACA5e,KAAA,SACAyI,KAAAjE,EAAArD,sBAAA2e,IACAzY,OAAA,SAAAkoB,GAA+C,OAAAA,EAAA5tB,EAAA4tB,EAAA3tB,MAG/C2G,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA2e,MACA7f,KAAA,SACAyI,KAAAjE,EAAArD,sBAAAyd,IACAvX,OAAA,SAAAkoB,GAA+C,OAAAA,EAAApH,WAG/C5f,MAAA,EACAC,WAAAhE,EAAAtD,mBAAAyd,KACA3e,KAAA,QACAyI,KAAAjE,EAAArD,sBAAAyd,IACAvX,OAAA,SAAAkoB,GAA+C,OAAAA,EAAAtqB,UAG/CsD,MAAA,EACAC,WAAAhE,EAAAtD,mBAAA0d,IACA5e,KAAA,QACAyI,KAAAjE,EAAArD,sBAAAwd,KACAtX,OAAA,SAAAkoB,GAA+C,OAAAA,EAAA5Z,SAG/C7O,WAEA9G,KAAA,cACAyI,KAAAjE,EAAApD,YAAAwd,IACAvX,OAAA,SAAAV,GAAgD,aAGhDwB,mBAKAkgB,UAAA,GACAroB,KAAA,WACAyI,KAAAjE,EAAAnD,oBAAAwe,MACAxY,OAAA,SAAAwkB,GAA+C,iBAG/CzjB,YAAA,EACAC,GAAA9I,EAAA,MAGA+vB,EAAAxuB,UAAA4G,aAAA,WACA,OACAG,UAAAtD,EAAA+jB,SAGAgH,EAAAxuB,UAAAiH,mBAAA,WACA,OACAwgB,SAAAhkB,EAAAikB,eACAC,SAAAlkB,EAAAmkB,UACAC,oBAAA,EACAC,aAAA,IAGA0G,EApGA,CAqGCrH,EAAApjB,OACDhG,EAAAywB,4CC1HA,SAAAlmB,EAAAvJ,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAEAb,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C2I,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,mCCLA,SAAA6J,EAAAvJ,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAEAb,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C2I,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,oBCVAT,EAAAD,QAAA,6ECAAC,EAAAD,QAAA,iCCCAsB,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAA+D,EAAAjF,EAAA,GAOAgH,EAAA,WACA,SAAAA,EAAAgE,GAEA7I,KAAA8tB,YAAA,IAAArqB,IAEAzD,KAAA+tB,YAAA,IAAAtqB,IACAzD,KAAA6I,QAmKA,OA9JAhE,EAAAzF,UAAA4I,gBAAA,SAAAoC,EAAAoP,KAOA3U,EAAAzF,UAAAwI,gBAAA,SAAAwC,EAAAoP,GACA,IAAAlW,EAAAtD,KAEA,GAAAA,KAAA6I,MAAA/E,SAAA9D,KAAA6I,MAAA/E,QAAAS,OAAAzB,EAAAjD,SAAAmE,IAAA,CACA,IAAAgqB,EAAAhuB,KAAA6I,MAAAxF,MAAA2qB,YAEA,GAAAA,EAAA,CACA,IAAAC,EAAA7jB,EAAAY,YAAAwO,GACA0U,EAAAluB,KAAA6I,MAAA/E,QAAAK,QACAgqB,EAAAnuB,KAAA6I,MAAA/E,QAAAM,SAAAgqB,WAAAH,MAOAD,GAJAG,UAFAA,IAAAjU,OAAA,SAAA1b,GAA2D,OAAA0vB,EAAA1vB,EAAAyvB,EAAA7jB,KAG3DvB,MAAA7I,KAAA6I,MAAA5G,GACAoI,OAAA4jB,EAAAhuB,EAAAguB,EAAA/tB,KAIAF,KAAA+tB,YAAAM,QACAF,EAAAtoB,QAAA,SAAArH,GAAgD,OAAA8E,EAAAyqB,YAAApiB,IAAAnN,GAAA,QAOhDqG,EAAAzF,UAAA6I,eAAA,SAAAmC,EAAAoP,GAGA,GAAAxZ,KAAA6I,MAAA/E,SAAA9D,KAAA6I,MAAA/E,QAAAS,OAAAzB,EAAAjD,SAAAmE,IAAA,CACA,IAAAsqB,EAAAtuB,KAAA6I,MAAAxF,MAAAirB,WACA,GAAAA,EAAA,CACA,IAAAjkB,EAAAD,EAAAY,YAAAwO,GAMA8U,GAJAH,UAAA3rB,MAAA0qB,KAAAltB,KAAA8tB,YAAAtf,QACA3F,MAAA7I,KAAA6I,MAAA5G,GACAoI,SAAApK,EAAAoK,EAAAnK,MAMAF,KAAA8tB,YAAAO,QAGAruB,KAAA+tB,YAAAM,SAKAxpB,EAAAzF,UAAA2I,cAAA,SAAAqC,EAAAoP,GAEA,GAAAxZ,KAAA6I,MAAA/E,SAAA9D,KAAA6I,MAAA/E,QAAAS,OAAAzB,EAAAjD,SAAAmE,IAAA,CACA,IAAAuqB,EAAAvuB,KAAA6I,MAAAxF,MAAAkrB,UAEA,GAAAA,EAAA,CACA,IAAAC,EAAApkB,EAAAY,YAAAwO,GACAiV,EAAAzuB,KAAA6I,MAAA/E,QAAAK,QACAgqB,EAAAnuB,KAAA6I,MAAA/E,QAAAM,SAAAgqB,WAAAI,MAOAD,GAJAJ,UAFAA,IAAAjU,OAAA,SAAA1b,GAA2D,OAAAiwB,EAAAjwB,EAAAgwB,EAAApkB,KAG3DvB,MAAA7I,KAAA6I,MAAA5G,GACAoI,OAAAmkB,EAAAvuB,EAAAuuB,EAAAtuB,QASA2E,EAAAzF,UAAA8I,gBAAA,SAAAkC,EAAAoP,GACA,IAAAlW,EAAAtD,KAEA,GAAAA,KAAA6I,MAAA/E,SAAA9D,KAAA6I,MAAA/E,QAAAS,OAAAzB,EAAAjD,SAAAmE,IAAA,CACA,IAAAH,EAAA7D,KAAA6I,MAAAxF,MAAAqrB,EAAA7qB,EAAA6qB,YAAAC,EAAA9qB,EAAA8qB,YAAAL,EAAAzqB,EAAAyqB,WAEA,GAAAI,GAAAC,GAAAL,EAAA,CACA,IAAAM,EAAAxkB,EAAAY,YAAAwO,GACAqV,EAAA7uB,KAAA6I,MAAA/E,QAAAK,QACAgqB,EAAAnuB,KAAA6I,MAAA/E,QAAAM,SAAAgqB,WAAAQ,MAGA,GAFAT,IAAAjU,OAAA,SAAA1b,GAA2D,OAAAqwB,EAAArwB,EAAAowB,EAAAxkB,KAE3DskB,EAOAA,GAJAP,UAFAA,EAAAjU,OAAA,SAAA1b,GAA0E,OAAA8E,EAAAwqB,YAAAjvB,IAAAL,KAG1EqK,MAAA7I,KAAA6I,MAAA5G,GACAoI,OAAAukB,EAAA3uB,EAAA2uB,EAAA1uB,KAKA,GAAAyuB,EAOAA,GAJAR,YACAtlB,MAAA7I,KAAA6I,MAAA5G,GACAoI,OAAAukB,EAAA3uB,EAAA2uB,EAAA1uB,KAKA,IAAA4uB,EAAA,IAAArrB,IAGA,GAFA0qB,EAAAtoB,QAAA,SAAArH,GAAgD,OAAAswB,EAAAnjB,IAAAnN,GAAA,KAEhD8vB,EAQAA,GAJAH,UAHA3rB,MAAA0qB,KAAAltB,KAAA8tB,YAAAtf,QAAA0L,OAAA,SAAA1b,GAAgG,OAAAswB,EAAAjwB,IAAAL,KAIhGqK,MAAA7I,KAAA6I,MAAA5G,GACAoI,OAAAukB,EAAA3uB,EAAA2uB,EAAA1uB,KAKAF,KAAA8tB,YAAAgB,KAOAjqB,EAAAzF,UAAA2vB,iBAAA,SAAA3kB,EAAAoP,GAEA,GAAAxZ,KAAA6I,MAAA/E,SAAA9D,KAAA6I,MAAA/E,QAAAS,OAAAzB,EAAAjD,SAAAmE,IAAA,CACA,IAAAgrB,EAAAhvB,KAAA6I,MAAAxF,MAAA2rB,aAEA,GAAAA,EAAA,CACA,IAAAC,EAAA7kB,EAAAY,YAAAwO,GACA0V,EAAAlvB,KAAA6I,MAAA/E,QAAAK,QACAgqB,EAAAnuB,KAAA6I,MAAA/E,QAAAM,SAAAgqB,WAAAa,MAOAD,GAJAb,UAFAA,IAAAjU,OAAA,SAAA1b,GAA2D,OAAA0wB,EAAA1wB,EAAAywB,EAAA7kB,KAG3DvB,MAAA7I,KAAA6I,MAAA5G,GACAoI,OAAA4kB,EAAAhvB,EAAAgvB,EAAA/uB,QASA2E,EAAAzF,UAAA+vB,gBAAA,SAAA/kB,EAAAoP,KAIA3U,EAzKA,GA2KA1H,EAAA0H,wDCnLApG,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAA+D,EAAAjF,EAAA,GAEAuxB,GAAA,iBAKA3qB,EAAA,WACA,SAAAA,EAAAoE,GACA7I,KAAA6I,QA4JA,OAvJApE,EAAArF,UAAAuF,iBAAA,WACA,OAAA3E,KAAA6I,MAAA/E,SACA9D,KAAA6I,MAAA/E,QAAAS,OAAAzB,EAAAjD,SAAAmE,KACAhE,KAAAqvB,YAAArvB,KAAA6I,MAAA/E,SAEA9D,KAAAsvB,mBACAtvB,KAAAuvB,gBACAvvB,KAAAwvB,sBAKAxvB,KAAAyvB,eACAzvB,KAAA0vB,YACA1vB,KAAA2vB,iBAMAlrB,EAAArF,UAAAswB,YAAA,SAAA9Z,EAAAzQ,EAAAyqB,GAEA,GAAAA,EACAha,EAAA6Z,eAAA7Z,EAAAzQ,EAAAyqB,OAGA,CACA,IAAAxqB,EAAAwQ,EAAA/M,MAAArD,eAAA+mB,IAAApnB,GACAA,EAAAjD,QAAA,EACA0T,EAAAia,eAAA1qB,EAAAC,KAOAX,EAAArF,UAAAmwB,gBAAA,SAAA3Z,EAAAzQ,EAAAyqB,GAEA,GAAAA,EACAha,EAAA6Z,eAAA7Z,EAAAzQ,EAAAyqB,OAGA,CACA,IAAAxqB,EAAAwQ,EAAA/M,MAAArD,eAAA+mB,IAAApnB,GACAA,EAAAjD,QAAA,EACA0T,EAAAia,eAAA1qB,EAAAC,GAEAwQ,EAAAyZ,YAAAjrB,SAAA0rB,OAAA3qB,GACAyQ,EAAAyZ,YAAAjrB,SAAAmoB,IAAApnB,KAMAV,EAAArF,UAAAqwB,eAAA,SAAA7Z,EAAAzQ,EAAAyqB,GAEAA,EACAha,EAAAia,eAAA1qB,EAAAyqB,GAIAha,EAAA8Z,YAAA9Z,EAAAzQ,EAAAyqB,IAMAnrB,EAAArF,UAAAkwB,mBAAA,SAAA1Z,EAAAzQ,EAAAyqB,GAEAA,GACAha,EAAAia,eAAA1qB,EAAAyqB,GAEAha,EAAAyZ,YAAAjrB,SAAA0rB,OAAA3qB,GACAyQ,EAAAyZ,YAAAjrB,SAAAmoB,IAAApnB,IAIAyQ,EAAA8Z,YAAA9Z,EAAAzQ,EAAAyqB,IAMAnrB,EAAArF,UAAAuwB,eAAA,SAAA/Z,EAAAzQ,EAAAyqB,GACAA,IAEAzqB,EAAAjD,QAAA,EAEA0T,EAAAia,eAAA1qB,EAAAyqB,GAEAha,EAAA/M,MAAArD,eAAAsqB,OAAA3qB,KAMAV,EAAArF,UAAAowB,mBAAA,SAAA5Z,EAAAzQ,EAAAyqB,GACAA,IAEAzqB,EAAAjD,QAAA,EAEA0T,EAAAia,eAAA1qB,EAAAyqB,GAEAha,EAAA/M,MAAArD,eAAAsqB,OAAA3qB,GAEAyQ,EAAAyZ,YAAAjrB,SAAA0rB,OAAA3qB,KAGAV,EAAArF,UAAAywB,eAAA,SAAA1qB,EAAAyqB,GACA,GAAAzqB,EAAAjD,OAAA,CAQA,IAPA,IAAAkD,EAAAwqB,EAAA3qB,QACA8qB,EAAAH,EAAAI,aAAA,GACAC,EAAA7qB,EAAArG,MACAmxB,OAAA,EAAAnxB,OAAA,EAAA8H,OAAA,EAAAsV,OAAA,EACApJ,OAAA,EAAA8M,OAAA,EAGA9hB,EAAA,EAAAwH,EAAAvF,KAAA6I,MAAArC,mBAAA9E,OAAuE3D,EAAAwH,IAASxH,EAQhF,IANAgB,GADAmxB,EAAAlwB,KAAA6I,MAAArC,mBAAAzI,IACA4H,OAAAR,GACA0B,EAAAopB,EAAAF,EAAAG,EAAArpB,OACAqpB,EAAAlpB,OAAAhH,KAAA6I,MAAA6I,SAAAye,eAAAD,EAAAlpB,MAAAzF,KAIAwR,EAHAoJ,EAAA+T,EAAAppB,WAGA+Y,EAAA9gB,EAAA2C,OAAAya,EAA4DpJ,EAAA8M,IAAU9M,EACtElM,EAAAuoB,EAAArc,IAAAhU,EAAAgU,EAAAoJ,GAGA/W,EAAArG,MAAAkxB,MAEA,CACA7qB,EAAAwqB,EAAA3qB,QACA8qB,EAAAH,EAAAI,aAAA,GACAC,EAAA7qB,EAAArG,MACAmxB,OAAA,EAAAnxB,OAAA,EAAA8H,OAAA,EAAAsV,OAAA,EAIApd,GADAmxB,EAAAlwB,KAAA6I,MAAA2V,iBACA7Y,OAAAR,GACA0B,EAAAopB,EAAAF,EAAAG,EAAArpB,OACAqpB,EAAAlpB,OAAAhH,KAAA6I,MAAA6I,SAAAye,eAAAD,EAAAlpB,MAAAzF,KAIA,IAAAwR,EAHAoJ,EAAA+T,EAAAppB,WAGA+Y,EAAA9gB,EAAA2C,OAAAya,EAA4DpJ,EAAA8M,IAAU9M,EACtElM,EAAAuoB,EAAArc,IAAAhU,EAAAgU,EAAAoJ,GAEA/W,EAAArG,MAAAkxB,IAGAxrB,EA9JA,GAgKAtH,EAAAsH,oDCxKA,IACArC,EADAC,EAAArC,WAAAqC,YACAD,EAAA3D,OAAA6D,iBACUC,wBAAgBC,OAAA,SAAAnE,EAAAoE,GAAsCpE,EAAAkE,UAAAE,IAChE,SAAApE,EAAAoE,GAAyB,QAAAnD,KAAAmD,IAAApD,eAAAC,KAAAjB,EAAAiB,GAAAmD,EAAAnD,KACzB,SAAAjB,EAAAoE,GAEA,SAAAC,IAAuB1C,KAAA2C,YAAAtE,EADvB+D,EAAA/D,EAAAoE,GAEApE,EAAAe,UAAA,OAAAqD,EAAAhE,OAAAmE,OAAAH,IAAAC,EAAAtD,UAAAqD,EAAArD,UAAA,IAAAsD,KAGAjE,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAsK,EAAAxL,EAAA,GAUAuyB,EAAA,WAOA,SAAAA,EAAAvvB,EAAA0C,EAAA8sB,EAAAC,EAAAC,GACA,IAAAC,EAAA3vB,EAAA2vB,IACAxwB,KAAAywB,GAAA,IAAAC,EAAA7vB,EAAAZ,EAAAuwB,EAAAvwB,EAAAY,EAAAX,EAAAswB,EAAAtwB,EAAAmwB,EAAA9sB,GACAvD,KAAA2wB,GAAA,IAAAD,EAAAF,EAAAvwB,EAAAY,EAAAL,MAAAK,EAAAX,EAAAswB,EAAAtwB,EAAAmwB,EAAA9sB,GACAvD,KAAA4wB,GAAA,IAAAF,EAAA7vB,EAAAZ,EAAAuwB,EAAAvwB,EAAAuwB,EAAAtwB,EAAAW,EAAAN,OAAA8vB,EAAA9sB,GACAvD,KAAA6wB,GAAA,IAAAH,EAAAF,EAAAvwB,EAAAY,EAAAL,MAAAgwB,EAAAtwB,EAAAW,EAAAN,OAAA8vB,EAAA9sB,GACAvD,KAAAywB,GAAAH,cACAtwB,KAAA2wB,GAAAL,cACAtwB,KAAA4wB,GAAAN,cACAtwB,KAAA6wB,GAAAP,cACAtwB,KAAAywB,GAAAF,gBACAvwB,KAAA2wB,GAAAJ,gBACAvwB,KAAA4wB,GAAAL,gBACAvwB,KAAA6wB,GAAAN,gBAgBA,OAVAH,EAAAhxB,UAAA0F,QAAA,WACA9E,KAAAywB,GAAA3rB,UACA9E,KAAA2wB,GAAA7rB,UACA9E,KAAA4wB,GAAA9rB,UACA9E,KAAA6wB,GAAA/rB,iBACA9E,KAAAywB,UACAzwB,KAAA2wB,UACA3wB,KAAA4wB,UACA5wB,KAAA6wB,IAEAT,EApCA,GAsCAjzB,EAAAizB,YAMA,IAAAM,EAAA,WAIA,SAAAA,EAAArwB,EAAAG,EAAAF,EAAAC,EAAA8vB,EAAA9sB,GACAvD,KAAA8wB,YACA9wB,KAAAuD,MAAA,EACAvD,KAAA+wB,MAAA,KAEAtvB,UAAAC,QAAA,EACA1B,KAAAa,OAAA,IAAAwI,EAAAvJ,QAA+CO,OAAAG,QAAAF,MAAAC,WAI/CP,KAAAa,OAAA,IAAAwI,EAAAvJ,QAA+CO,KAAA,EAAAG,MAAA,EAAAF,IAAA,EAAAC,OAAA,IAG/CP,KAAAuD,SAAA,EAEAvD,KAAAqwB,YAGA,IAAArwB,KAAAuD,QACAvD,KAAAswB,YAAA,IAAA7sB,IACAzD,KAAAuwB,cAAA,IAAA9sB,KA4UA,OAtUAitB,EAAAtxB,UAAA0F,QAAA,kBACA9E,KAAA8wB,gBACA9wB,KAAAa,OACAb,KAAA+wB,QACA/wB,KAAA+wB,MAAAjsB,UACA9E,KAAA+wB,MAAA,OAcAL,EAAAtxB,UAAAmtB,IAAA,SAAAyE,GACA,IAAAnwB,EAAAb,KAAAuwB,cAAA1xB,IAAAmyB,GASA,OARAnwB,IAEAA,EAAAb,KAAAqwB,UAAAW,GACAhxB,KAAAuwB,cAAA5kB,IAAAqlB,EAAAnwB,IAKAA,EAAAK,SAAAlB,KAAAa,QACAb,KAAAixB,MAAAD,EAAAnwB,IAIAb,KAAAkxB,MAAArwB,GACAb,KAAAusB,IAAAyE,KAUAN,EAAAtxB,UAAA4a,OAAA,SAAA8W,GACA,IAAAxtB,EAAAtD,KAGA0S,EAAAF,OAAAqa,UACAta,EAAAC,OAAAqa,UACAla,GAAAH,OAAAqa,UACAha,GAAAL,OAAAqa,UAEAiE,EAAAjrB,QAAA,SAAAmrB,GACA,IAAAnwB,EAAAyC,EAAA+sB,UAAAW,GACA1tB,EAAAitB,cAAA5kB,IAAAqlB,EAAAnwB,GACAA,EAAAZ,EAAAyS,IACAA,EAAA7R,EAAAZ,GAEAY,EAAAL,MAAAmS,IACAA,EAAA9R,EAAAL,OAEAK,EAAAN,OAAAsS,IACAA,EAAAhS,EAAAN,QAEAM,EAAAX,EAAAqS,IACAA,EAAA1R,EAAAX,KAIAF,KAAAkxB,MAAA,IAAA7nB,EAAAvJ,QAAwCO,KAAAqS,EAAAlS,MAAAmS,EAAApS,OAAAsS,EAAAvS,IAAAiS,KAExCue,EAAAjrB,QAAA,SAAAmrB,EAAAjkB,GAAkD,OAAAzJ,EAAA2tB,MAAAD,EAAA1tB,EAAAitB,cAAA1xB,IAAAmyB,IAAA,MAQlDN,EAAAtxB,UAAA8xB,MAAA,SAAArwB,GACA,IAAAyC,EAAAtD,KAEA,IAAAa,EAAAK,SAAAlB,KAAAa,QAAA,CAIAb,KAAAa,OAAAD,YAAAC,GACAb,KAAAa,OAAAZ,GAAA,EACAD,KAAAa,OAAAX,GAAA,EACAF,KAAAa,OAAAV,OAAA,EACAH,KAAAa,OAAAT,QAAA,EAEA,IAAA+wB,EAAAnxB,KAAAoxB,mBACApxB,KAAA8wB,YAEA9wB,KAAA+wB,QAEA/wB,KAAA+wB,MAAAjsB,UACA9E,KAAA+wB,MAAA,MAGA/wB,KAAAswB,YAAAjC,QAEA8C,EAAAtrB,QAAA,SAAAmrB,EAAAjkB,GAAqD,OAAAzJ,EAAA2tB,MAAAD,EAAA1tB,EAAAitB,cAAA1xB,IAAAmyB,QAWrDN,EAAAtxB,UAAA6xB,MAAA,SAAAD,EAAAnwB,EAAAwwB,GAEA,OAAArxB,KAAA+wB,MACAlwB,EAAAK,SAAAlB,KAAA+wB,MAAAN,GAAA5vB,QACAb,KAAA+wB,MAAAN,GAAAQ,MAAAD,EAAAnwB,EAAAwwB,GAEAxwB,EAAAK,SAAAlB,KAAA+wB,MAAAJ,GAAA9vB,QACAb,KAAA+wB,MAAAJ,GAAAM,MAAAD,EAAAnwB,EAAAwwB,GAEAxwB,EAAAK,SAAAlB,KAAA+wB,MAAAH,GAAA/vB,QACAb,KAAA+wB,MAAAH,GAAAK,MAAAD,EAAAnwB,EAAAwwB,GAEAxwB,EAAAK,SAAAlB,KAAA+wB,MAAAF,GAAAhwB,QACAb,KAAA+wB,MAAAF,GAAAI,MAAAD,EAAAnwB,EAAAwwB,IAGArxB,KAAA8wB,SAAAlkB,KAAAokB,GACAhxB,KAAAswB,YAAA3kB,IAAAqlB,EAAAhxB,OACA,GAEAa,EAAAK,SAAAlB,KAAAa,SAEAb,KAAA8wB,SAAAlkB,KAAAokB,GACAhxB,KAAAswB,YAAA3kB,IAAAqlB,EAAAhxB,MAEAA,KAAA8wB,SAAApvB,OA7NA,GA6NA1B,KAAAuD,MA5NA,IA6NAvD,KAAAsxB,SAEA,IAKAC,MAAA1wB,EAAAV,MAAAU,EAAAT,OAAAS,EAAAZ,EAAAY,EAAAX,GACA0K,QAAAoE,MAAA,2DAAAgiB,EAAAnwB,GAEA,IAAAA,EAAA2wB,KACA5mB,QAAAoE,MAAA,yDAAAgiB,EAAAnwB,GAGA+J,QAAAoE,MAAA,gCAGA,IAEA0hB,EAAAtxB,UAAAqyB,SAAA,SAAAT,GACA,IAAAjkB,EAAA/M,KAAA8wB,SAAA9jB,QAAAgkB,GACAjkB,GAAA,GACA/M,KAAA8wB,SAAA7jB,OAAAF,EAAA,GACA/M,KAAAswB,YAAAoB,OAAAV,GACAhxB,KAAAuwB,cAAAmB,OAAAV,IAGApmB,QAAAC,KAAA,yLAUA6lB,EAAAtxB,UAAAgyB,eAAA,SAAAO,GAQA,OAPA3xB,KAAA8wB,SAAAjrB,QAAA,SAAAmrB,GAAgD,OAAAW,EAAA/kB,KAAAokB,KAChDhxB,KAAA+wB,QACA/wB,KAAA+wB,MAAAN,GAAAW,eAAAO,GACA3xB,KAAA+wB,MAAAJ,GAAAS,eAAAO,GACA3xB,KAAA+wB,MAAAH,GAAAQ,eAAAO,GACA3xB,KAAA+wB,MAAAF,GAAAO,eAAAO,IAEAA,GAWAjB,EAAAtxB,UAAAsa,MAAA,SAAA7Y,EAAA+wB,GAEA,OAAA/wB,aAAAwI,EAAAvJ,OACAe,EAAAI,UAAAjB,KAAAa,QACAb,KAAA6xB,YAAAhxB,KAAA+wB,MAMA5xB,KAAAa,OAAAH,cAAAG,GACAb,KAAAouB,WAAAvtB,KAAA+wB,OAeAlB,EAAAtxB,UAAAyyB,YAAA,SAAApvB,EAAAkvB,EAAAC,GACA,IAAAtuB,EAAAtD,KAuBA,OAtBAA,KAAA8wB,SAAAjrB,QAAA,SAAAzH,EAAA2O,GACAzJ,EAAAitB,cAAA1xB,IAAAT,GAAA6C,UAAAwB,IACAkvB,EAAA/kB,KAAAxO,KAGAwzB,GACAA,EAAA5xB,MAEAA,KAAA+wB,QACAtuB,EAAAxB,UAAAjB,KAAA+wB,MAAAN,GAAA5vB,SACAb,KAAA+wB,MAAAN,GAAAoB,YAAApvB,EAAAkvB,EAAAC,GAEAnvB,EAAAxB,UAAAjB,KAAA+wB,MAAAJ,GAAA9vB,SACAb,KAAA+wB,MAAAJ,GAAAkB,YAAApvB,EAAAkvB,EAAAC,GAEAnvB,EAAAxB,UAAAjB,KAAA+wB,MAAAH,GAAA/vB,SACAb,KAAA+wB,MAAAH,GAAAiB,YAAApvB,EAAAkvB,EAAAC,GAEAnvB,EAAAxB,UAAAjB,KAAA+wB,MAAAF,GAAAhwB,SACAb,KAAA+wB,MAAAF,GAAAgB,YAAApvB,EAAAkvB,EAAAC,IAGAD,GAYAjB,EAAAtxB,UAAAgvB,WAAA,SAAA9uB,EAAAqyB,EAAAC,GACA,IAAAtuB,EAAAtD,KAuBA,OAtBAA,KAAA8wB,SAAAjrB,QAAA,SAAAzH,EAAA2O,GACAzJ,EAAAitB,cAAA1xB,IAAAT,GAAAsC,cAAApB,IACAqyB,EAAA/kB,KAAAxO,KAGAwzB,GACAA,EAAA5xB,MAEAA,KAAA+wB,QACA/wB,KAAA+wB,MAAAN,GAAA5vB,OAAAH,cAAApB,IACAU,KAAA+wB,MAAAN,GAAArC,WAAA9uB,EAAAqyB,EAAAC,GAEA5xB,KAAA+wB,MAAAJ,GAAA9vB,OAAAH,cAAApB,IACAU,KAAA+wB,MAAAJ,GAAAvC,WAAA9uB,EAAAqyB,EAAAC,GAEA5xB,KAAA+wB,MAAAH,GAAA/vB,OAAAH,cAAApB,IACAU,KAAA+wB,MAAAH,GAAAxC,WAAA9uB,EAAAqyB,EAAAC,GAEA5xB,KAAA+wB,MAAAF,GAAAhwB,OAAAH,cAAApB,IACAU,KAAA+wB,MAAAF,GAAAzC,WAAA9uB,EAAAqyB,EAAAC,IAGAD,GAKAjB,EAAAtxB,UAAA0wB,OAAA,SAAAkB,GACA,GAAAhxB,KAAAswB,YAAA,CACA,IAAAwB,EAAA9xB,KAAAswB,YAAAzxB,IAAAmyB,GACAc,GACAA,EAAAL,SAAAT,KAOAN,EAAAtxB,UAAAkyB,MAAA,WAEA,IAAAH,EAAAnxB,KAAAoxB,mBAEApxB,KAAA+wB,MAAA,IAAAX,EAAApwB,KAAAa,OAAAb,KAAAuD,MAAA,EAAAvD,KAAAqwB,UAAArwB,KAAAswB,YAAAtwB,KAAAuwB,eAEAvwB,KAAA8wB,YACA,QAAA/yB,EAAA,EAAAwH,EAAA4rB,EAAAzvB,OAAiD3D,EAAAwH,IAASxH,EAAA,CAC1D,IAAAizB,EAAAG,EAAApzB,GACAiC,KAAAixB,MAAAD,EAAAhxB,KAAAuwB,cAAA1xB,IAAAmyB,IAAA,KAQAN,EAAAtxB,UAAAwyB,MAAA,SAAAG,GACA,IAAAC,EAAA9oB,QAAA6oB,EAAA/xB,OACAA,KAAA+wB,QAAAiB,IACAhyB,KAAA+wB,MAAAN,GAAAmB,MAAAG,GACA/xB,KAAA+wB,MAAAJ,GAAAiB,MAAAG,GACA/xB,KAAA+wB,MAAAH,GAAAgB,MAAAG,GACA/xB,KAAA+wB,MAAAF,GAAAe,MAAAG,KAGArB,EApWA,GAsWAvzB,EAAAuzB,OACA,IAAArsB,EAAA,SAAAjB,GAEA,SAAAiB,IACA,cAAAjB,KAAAqK,MAAAzN,KAAAyB,YAAAzB,KAEA,OAJAqC,EAAAgC,EAAAjB,GAIAiB,EALA,CAMCqsB,GACDvzB,EAAAkH,gDC/aA,IACAjC,EADAC,EAAArC,WAAAqC,YACAD,EAAA3D,OAAA6D,iBACUC,wBAAgBC,OAAA,SAAAnE,EAAAoE,GAAsCpE,EAAAkE,UAAAE,IAChE,SAAApE,EAAAoE,GAAyB,QAAAnD,KAAAmD,IAAApD,eAAAC,KAAAjB,EAAAiB,GAAAmD,EAAAnD,KACzB,SAAAjB,EAAAoE,GAEA,SAAAC,IAAuB1C,KAAA2C,YAAAtE,EADvB+D,EAAA/D,EAAAoE,GAEApE,EAAAe,UAAA,OAAAqD,EAAAhE,OAAAmE,OAAAH,IAAAC,EAAAtD,UAAAqD,EAAArD,UAAA,IAAAsD,KAGAjE,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAaAkzB,EAAA,SAAA7uB,GAEA,SAAA6uB,EAAAlyB,GACA,IAAAuD,EAAAF,EAAAlF,KAAA8B,YAIA,OAHAsD,EAAA4uB,aAAA,SAAA3nB,GAAgD,OAAAA,GAChDjH,EAAA6uB,YAAA,SAAA3nB,GAA8C,OAAAA,GAC9C/L,OAAAkF,OAAAL,EAAAvD,GACAuD,EAsBA,OA5BAjB,EAAA4vB,EAAA7uB,GAQA3E,OAAAC,eAAAuzB,EAAA7yB,UAAA,UACAP,IAAA,WACA,OAAAmB,KAAAkyB,aAAAlyB,KAAAoyB,KAAA7nB,SAEAoB,IAAA,SAAAnC,KAGA5K,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAAuzB,EAAA7yB,UAAA,SACAP,IAAA,WACA,OAAAmB,KAAAmyB,YAAAnyB,KAAAoyB,KAAA5nB,QAEAmB,IAAA,SAAAnC,KAGA5K,YAAA,EACAD,cAAA,IAEAszB,EA7BA,CAbAp0B,EAAA,IA2CC8P,aACDxQ,EAAA80B,gDCvDAxzB,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IACAszB,EADAvwB,EAAAjE,EAAA,IAEA,SAAAw0B,GACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,mBAHA,CAICA,EAAAl1B,EAAAk1B,WAAAl1B,EAAAk1B,cAID,IAAAC,EAAA,SASAC,EAAA,WACA,SAAAA,EAAAjtB,GACA,IAdAkE,EAcAlG,EAAAtD,KAGAA,KAAAkC,QAAA,EACAlC,KAAAwyB,kBAAA,IAAA/uB,IACAzD,KAAAyyB,gBAAA,IAAAhvB,IACAzD,KAAAwD,aAAA,IAAAC,IACAzD,KAAA0yB,WAAA,EACA1yB,KAAA2yB,eAOA3yB,KAAA4yB,YAAA,SAAAvrB,GAA+C,gBAAAnC,GAU/C,OATA5B,EAAApB,SACAgD,EAAAX,OAAA+tB,GACAjrB,EAAAsE,IAAAzG,EAAAhG,OAAAmzB,EAAAQ,QACAvvB,EAAAovB,WAAA,GAGA9nB,QAAAC,KAAA,wDAAA3F,EAAAX,OAGAW,IAEAlF,KAAA8yB,WAAAhxB,EAAAK,WAAAmD,OAzCAkE,EA0CAxJ,KAAA8yB,WAzCA5pB,QAAAM,EAAAupB,WA0CA/yB,KAAAgzB,aAAAlxB,EAAAmxB,UAAAjzB,KAAA8yB,WAAA9yB,KAAAkzB,YAAAlzB,KAAA8yB,WAAA9yB,KAAAyyB,gBAAAzyB,KAAAwD,aAAAxD,KAAAwyB,qBA0FA,OAvFA/zB,OAAAC,eAAA6zB,EAAAnzB,UAAA,aAKAP,IAAA,WACA,OAAAmB,KAAA8yB,YAEAl0B,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA6zB,EAAAnzB,UAAA,cACAP,IAAA,WAIA,GADAmB,KAAAkC,QAAA,EACAlC,KAAA0yB,UAAA,CACA,IAAAS,KACAnzB,KAAAyyB,gBAAA5sB,QAAA,SAAAutB,EAAAjuB,GACAguB,EAAAvmB,MAAAzH,EAAAiuB,MAEApzB,KAAA2yB,YAAAQ,EAEA,OAAAnzB,KAAA2yB,aAEA/zB,YAAA,EACAD,cAAA,IAKA4zB,EAAAnzB,UAAA0F,QAAA,WACA9E,KAAAgzB,eACAhzB,KAAAwyB,kBAAA3sB,QAAA,SAAAwtB,GAA4D,OAAAA,MAC5DrzB,KAAA8yB,WAAA,KACA9yB,KAAAyyB,gBAAApE,QACAruB,KAAA2yB,YAAA,MAUAJ,EAAAnzB,UAAA8zB,YAAA,SAAAvB,EAAAtqB,EAAAisB,EAAAC,GACA,IAAAjwB,EAAAtD,KACA,gBAAAkF,GACA,GAAA5B,EAAApB,OAEA,GA7FA,WA6FAgD,EAAAX,KAAA,CAEA,QAAAxG,EAAAmH,EAAA6H,MAAAxH,EAAAL,EAAA6H,MAAA7H,EAAAsuB,aAAwFz1B,EAAAwH,IAASxH,EAAA,CACjG,IAAA01B,EAAAvuB,EAAAhG,OAAAnB,GACAsJ,EAAAsE,IAAA8nB,EAAApB,EAAAqB,QACApwB,EAAAovB,WAAA,EACA,IAAAzc,EAAAsd,EAAA10B,IAAA40B,GACAxd,GACAA,IAIA,IAAAlY,EAAA,EAAAwH,EAAAL,EAAAyuB,MAAAjyB,OAA8D3D,EAAAwH,IAASxH,EAAA,CACvE01B,EAAAvuB,EAAAyuB,MAAA51B,GAAA+D,EAAAK,WAAA+C,EAAAyuB,MAAA51B,IACAsJ,EAAAsE,IAAA8nB,EAAApB,EAAAuB,QACAtwB,EAAAovB,WAAA,EACAY,EAAA3nB,IAAA8nB,EAAAxxB,GAAAwxB,GACAF,EAAA5nB,IAAA8nB,EAAA3xB,EAAAmxB,UAAAQ,EAAAnwB,EAAAsvB,YAAAvrB,WAIAuD,QAAAC,KAAA,wDAAA3F,EAAAX,MAGA,OAAAW,IAMAqtB,EAAAnzB,UAAAsG,QAAA,WACA1F,KAAAwD,aAAA6qB,QACAruB,KAAAyyB,gBAAApE,QACAruB,KAAA2yB,eACA3yB,KAAAkC,QAAA,GAEAqwB,EAzHA,GA2HAp1B,EAAAo1B,6CC/IA,IAAArjB,EAAAlP,WAAAkP,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,WAAAD,MAAAE,UAAA,SAAA7J,EAAA8J,GACA,SAAAC,EAAA1Q,GAAmC,IAAM2Q,EAAAJ,EAAAK,KAAA5Q,IAA+B,MAAA8I,GAAY2H,EAAA3H,IACpF,SAAA+H,EAAA7Q,GAAkC,IAAM2Q,EAAAJ,EAAA,MAAAvQ,IAAmC,MAAA8I,GAAY2H,EAAA3H,IACvF,SAAA6H,EAAAG,GAA+BA,EAAAC,KAAApK,EAAAmK,EAAA9Q,OAAA,IAAAsQ,EAAA,SAAA3J,GAAiEA,EAAAmK,EAAA9Q,SAAyBgR,KAAAN,EAAAG,GACzHF,GAAAJ,IAAA7B,MAAA0B,EAAAC,QAAAO,WAGAK,EAAAhQ,WAAAgQ,aAAA,SAAAb,EAAAc,GACA,IAAwGC,EAAAhQ,EAAAiQ,EAAAC,EAAxGC,GAAaC,MAAA,EAAAC,KAAA,WAA6B,KAAAJ,EAAA,SAAAA,EAAA,GAA0B,OAAAA,EAAA,IAAeK,QAAAC,QACnF,OAAAL,GAAgBT,KAAAe,EAAA,GAAAC,MAAAD,EAAA,GAAAE,OAAAF,EAAA,IAAqD,mBAAAG,SAAAT,EAAAS,OAAAC,UAAA,WAAoE,OAAA9Q,OAAeoQ,EACxJ,SAAAM,EAAA1R,GAAsB,gBAAA+R,GAAsB,OAC5C,SAAAC,GACA,GAAAd,EAAA,UAAAe,UAAA,mCACA,KAAAZ,GAAA,IACA,GAAAH,EAAA,EAAAhQ,IAAAiQ,EAAAjQ,EAAA,EAAA8Q,EAAA,YAAAA,EAAA,uBAAAb,IAAAjS,KAAAgC,EAAA8Q,EAAA,KAAAlB,KAAA,OAAAK,EAEA,OADAjQ,EAAA,EAAAiQ,IAAAa,GAAA,EAAAb,EAAApR,QACAiS,EAAA,IACA,cAAAb,EAAAa,EAAuC,MACvC,OAAkC,OAAlCX,EAAAC,SAA2CvR,MAAAiS,EAAA,GAAAlB,MAAA,GAC3C,OAAAO,EAAAC,QAAkCpQ,EAAA8Q,EAAA,GAAWA,GAAA,GAAU,SACvD,OAAAA,EAAAX,EAAAI,IAAAS,MAAyCb,EAAAG,KAAAU,MAAc,SACvD,QACA,KAAAf,KAAAE,EAAAG,MAAA9O,OAAA,GAAAyO,IAAAzO,OAAA,UAAAsP,EAAA,QAAAA,EAAA,KAA6GX,EAAA,EAAO,SACpH,OAAAW,EAAA,MAAAb,GAAAa,EAAA,GAAAb,EAAA,IAAAa,EAAA,GAAAb,EAAA,KAAgFE,EAAAC,MAAAU,EAAA,GAAiB,MACjG,OAAAA,EAAA,IAAAX,EAAAC,MAAAH,EAAA,IAAwDE,EAAAC,MAAAH,EAAA,GAAgBA,EAAAa,EAAQ,MAChF,GAAAb,GAAAE,EAAAC,MAAAH,EAAA,IAA8CE,EAAAC,MAAAH,EAAA,GAAgBE,EAAAI,IAAA7D,KAAAoE,GAAgB,MAC9Eb,EAAA,IAAAE,EAAAI,IAAAS,MACAb,EAAAG,KAAAU,MAAiC,SAEjCF,EAAAf,EAAA/R,KAAAiR,EAAAkB,GACS,MAAAxI,GAAYmJ,GAAA,EAAAnJ,GAAa3H,EAAA,EAAS,QAAUgQ,EAAAC,EAAA,EACrD,KAAAa,EAAA,SAAAA,EAAA,GAAmC,OAASjS,MAAAiS,EAAA,GAAAA,EAAA,UAAAlB,MAAA,GArBAJ,EAAA1Q,EAAA+R,OAyB5C,SAAA8iB,EAAA5gB,GAEA,OAAAA,GAKAA,EAAAoC,QAAApV,EACAgT,EAAAoC,QAAAnV,EACA+S,EAAAmC,QAAAnV,EACAgT,EAAAmC,QAAAlV,IAPA,SAJAzB,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAoB9C,IAAA+0B,EAAA,WACA,SAAAA,EAAA/zB,GAEAC,KAAA+zB,YAAA,GAEA/zB,KAAAg0B,gBAEAh0B,KAAAi0B,cAAA,IAAAxwB,IACAzD,KAAAk0B,aAAAn0B,EAAAm0B,aAsFA,OAhFAJ,EAAA10B,UAAA+0B,gBAAA,WACA,OAAAjlB,EAAAlP,UAAA,oBACA,IACAo0B,EADA9wB,EAAAtD,KAEA,OAAAgQ,EAAAhQ,KAAA,SAAA6D,GACA,OAAAA,EAAAyM,OACA,OACA,OAAAtQ,KAAAg0B,aAAAtyB,QACA0yB,EAAAp0B,KAAAg0B,aAAAnmB,MAAA,GAEA7N,KAAAg0B,iBAEA,EAAAh0B,KAAAk0B,aAAAG,YAAAr0B,KAAA+zB,YAAAK,MALA,KAMA,OAEAvwB,EAAA0M,OAGA6jB,EAAAvuB,QAAA,SAAA6L,GACApO,EAAA2wB,cAAAp1B,IAAA6S,GAAA7L,QAAA,SAAAyuB,GACA,IAAAzrB,EAAAyrB,EAAA,GACAnvB,EAAAmvB,EAAA,GAGAzrB,EAAArD,eAAAC,YAAAN,KACAA,EAAAjD,QAAA,OAIA2B,EAAAyM,MAAA,EACA,uBASAwjB,EAAA10B,UAAA0e,gBAAA,SAAAvc,GACA,IAAAyF,EAAAhH,KAAAk0B,aAAApW,gBAAAvc,GACA,OAAAyF,EACAA,EAAAiM,QAEA,MAOA6gB,EAAA10B,UAAA6qB,QAAA,SAAAphB,EAAA1D,EAAAuM,GACA,IAAAuB,EAAAvB,EAAAuB,QAEA,GAAAA,EACA,OAAA4gB,EAAA5gB,GAIA,IAAAshB,EAAAv0B,KAAAi0B,cAAAp1B,IAAA6S,GACA,OAAA6iB,GACAA,EAAA3nB,MAAA/D,EAAA1D,IACAA,EAAAjD,QAAA,EACA2xB,EAAA5gB,KAKA9N,EAAAjD,QAAA,EACAlC,KAAAg0B,aAAApnB,KAAA8E,GACA1R,KAAAi0B,cAAAtoB,IAAA+F,IAAA7I,EAAA1D,KAEA0uB,EAAA5gB,KAKA6gB,EAAA10B,UAAA+wB,eAAA,SAAA7uB,GACAtB,KAAA+zB,YAAAzyB,GAEAwyB,EA9FA,GAgGA32B,EAAA22B,qDCvJA,IAoCA7kB,EApCAC,EAAAlP,WAAAkP,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,WAAAD,MAAAE,UAAA,SAAA7J,EAAA8J,GACA,SAAAC,EAAA1Q,GAAmC,IAAM2Q,EAAAJ,EAAAK,KAAA5Q,IAA+B,MAAA8I,GAAY2H,EAAA3H,IACpF,SAAA+H,EAAA7Q,GAAkC,IAAM2Q,EAAAJ,EAAA,MAAAvQ,IAAmC,MAAA8I,GAAY2H,EAAA3H,IACvF,SAAA6H,EAAAG,GAA+BA,EAAAC,KAAApK,EAAAmK,EAAA9Q,OAAA,IAAAsQ,EAAA,SAAA3J,GAAiEA,EAAAmK,EAAA9Q,SAAyBgR,KAAAN,EAAAG,GACzHF,GAAAJ,IAAA7B,MAAA0B,EAAAC,QAAAO,WAGAK,EAAAhQ,WAAAgQ,aAAA,SAAAb,EAAAc,GACA,IAAwGC,EAAAhQ,EAAAiQ,EAAAC,EAAxGC,GAAaC,MAAA,EAAAC,KAAA,WAA6B,KAAAJ,EAAA,SAAAA,EAAA,GAA0B,OAAAA,EAAA,IAAeK,QAAAC,QACnF,OAAAL,GAAgBT,KAAAe,EAAA,GAAAC,MAAAD,EAAA,GAAAE,OAAAF,EAAA,IAAqD,mBAAAG,SAAAT,EAAAS,OAAAC,UAAA,WAAoE,OAAA9Q,OAAeoQ,EACxJ,SAAAM,EAAA1R,GAAsB,gBAAA+R,GAAsB,OAC5C,SAAAC,GACA,GAAAd,EAAA,UAAAe,UAAA,mCACA,KAAAZ,GAAA,IACA,GAAAH,EAAA,EAAAhQ,IAAAiQ,EAAAjQ,EAAA,EAAA8Q,EAAA,YAAAA,EAAA,uBAAAb,IAAAjS,KAAAgC,EAAA8Q,EAAA,KAAAlB,KAAA,OAAAK,EAEA,OADAjQ,EAAA,EAAAiQ,IAAAa,GAAA,EAAAb,EAAApR,QACAiS,EAAA,IACA,cAAAb,EAAAa,EAAuC,MACvC,OAAkC,OAAlCX,EAAAC,SAA2CvR,MAAAiS,EAAA,GAAAlB,MAAA,GAC3C,OAAAO,EAAAC,QAAkCpQ,EAAA8Q,EAAA,GAAWA,GAAA,GAAU,SACvD,OAAAA,EAAAX,EAAAI,IAAAS,MAAyCb,EAAAG,KAAAU,MAAc,SACvD,QACA,KAAAf,KAAAE,EAAAG,MAAA9O,OAAA,GAAAyO,IAAAzO,OAAA,UAAAsP,EAAA,QAAAA,EAAA,KAA6GX,EAAA,EAAO,SACpH,OAAAW,EAAA,MAAAb,GAAAa,EAAA,GAAAb,EAAA,IAAAa,EAAA,GAAAb,EAAA,KAAgFE,EAAAC,MAAAU,EAAA,GAAiB,MACjG,OAAAA,EAAA,IAAAX,EAAAC,MAAAH,EAAA,IAAwDE,EAAAC,MAAAH,EAAA,GAAgBA,EAAAa,EAAQ,MAChF,GAAAb,GAAAE,EAAAC,MAAAH,EAAA,IAA8CE,EAAAC,MAAAH,EAAA,GAAgBE,EAAAI,IAAA7D,KAAAoE,GAAgB,MAC9Eb,EAAA,IAAAE,EAAAI,IAAAS,MACAb,EAAAG,KAAAU,MAAiC,SAEjCF,EAAAf,EAAA/R,KAAAiR,EAAAkB,GACS,MAAAxI,GAAYmJ,GAAA,EAAAnJ,GAAa3H,EAAA,EAAS,QAAUgQ,EAAAC,EAAA,EACrD,KAAAa,EAAA,SAAAA,EAAA,GAAmC,OAASjS,MAAAiS,EAAA,GAAAA,EAAA,UAAAlB,MAAA,GArBAJ,EAAA1Q,EAAA+R,OAwB5CtS,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAE9C,IAAA4rB,EAAA,WACA,SAAAA,KAuGA,OAlGAA,EAAAvZ,aAAA,WACA,OAAAlC,EAAAlP,UAAA,oBACA,OAAAgQ,EAAAhQ,KAAA,SAAA6D,GACA,OAAAA,EAAAyM,OACA,OACA,OAAArB,GAAA,MACAjP,KAAAqR,cACA,MAAA9B,QAAA,SAAA7J,GAA6E,OAAA4L,WAAA5L,EAAA,QAC7E,OAEA,OADA7B,EAAA0M,QACA,KACA,uBAQAoa,EAAAtZ,WAAA,WAIA,OAHApC,IACAA,EAAAsC,SAAAC,cAAA,UAAAH,WAAA,OAEApC,GAWA0b,EAAA6J,mBAAA,SAAA9iB,EAAA/I,GAEA,IAAAkL,EAAAnC,EAAAmC,MAAAsG,QACA,IAAAtG,EAAA1T,OAAA,IAAA0T,EAAAzT,QAKA6O,SAAA9O,MAAA,IACA8O,SAAA7O,OAAA,IAGA6O,EAAAqE,UAAAO,EAAA,KAEAnC,EAAAsB,cAAAtB,EAAAsB,gBACAC,SAAsB7S,OAAA,EAAAD,MAAA,GACtBkK,OAAoBjK,OAAA,EAAAD,MAAA,IAGpBuR,EAAAsB,cAAAC,SACA7S,OAAAyT,EAAAzT,OAAAsR,EAAA/I,YACAxI,MAAA0T,EAAA1T,MAAAuR,EAAA/I,aAEA+I,EAAAsB,cAAA3I,OACAjK,OAAAyT,EAAAzT,OACAD,MAAA0T,EAAA1T,OAEAuR,EAAAsB,cAAAa,SAvBAjJ,QAAAC,KAAA,0FA4BA8f,EAAAlX,OAAA,SAAA/B,GACA,OAAAxC,EAAAlP,UAAA,oBACA,OAAAgQ,EAAAhQ,KAAA,SAAA6D,GACA,OAAAA,EAAAyM,OACA,OAEA,SAAAtQ,KAAAoR,gBACA,OAKA,OAHAvN,EAAA0M,OAEAvQ,KAAAw0B,mBAAA9iB,IAAA/I,cACA,EAAA+I,SAQAiZ,EAAAjX,WAAA,SAAAhC,GAGA,OADA1R,KAAAqR,aACApC,GAMAjP,KAAAw0B,mBAAA9iB,IAAA/I,aACA+I,IANA9G,QAAAC,KAAA,gFACA6G,IAOAiZ,EAxGA,GA0GAxtB,EAAAwtB,gDC/IA,IAAAzb,EAAAlP,WAAAkP,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,WAAAD,MAAAE,UAAA,SAAA7J,EAAA8J,GACA,SAAAC,EAAA1Q,GAAmC,IAAM2Q,EAAAJ,EAAAK,KAAA5Q,IAA+B,MAAA8I,GAAY2H,EAAA3H,IACpF,SAAA+H,EAAA7Q,GAAkC,IAAM2Q,EAAAJ,EAAA,MAAAvQ,IAAmC,MAAA8I,GAAY2H,EAAA3H,IACvF,SAAA6H,EAAAG,GAA+BA,EAAAC,KAAApK,EAAAmK,EAAA9Q,OAAA,IAAAsQ,EAAA,SAAA3J,GAAiEA,EAAAmK,EAAA9Q,SAAyBgR,KAAAN,EAAAG,GACzHF,GAAAJ,IAAA7B,MAAA0B,EAAAC,QAAAO,WAGAK,EAAAhQ,WAAAgQ,aAAA,SAAAb,EAAAc,GACA,IAAwGC,EAAAhQ,EAAAiQ,EAAAC,EAAxGC,GAAaC,MAAA,EAAAC,KAAA,WAA6B,KAAAJ,EAAA,SAAAA,EAAA,GAA0B,OAAAA,EAAA,IAAeK,QAAAC,QACnF,OAAAL,GAAgBT,KAAAe,EAAA,GAAAC,MAAAD,EAAA,GAAAE,OAAAF,EAAA,IAAqD,mBAAAG,SAAAT,EAAAS,OAAAC,UAAA,WAAoE,OAAA9Q,OAAeoQ,EACxJ,SAAAM,EAAA1R,GAAsB,gBAAA+R,GAAsB,OAC5C,SAAAC,GACA,GAAAd,EAAA,UAAAe,UAAA,mCACA,KAAAZ,GAAA,IACA,GAAAH,EAAA,EAAAhQ,IAAAiQ,EAAAjQ,EAAA,EAAA8Q,EAAA,YAAAA,EAAA,uBAAAb,IAAAjS,KAAAgC,EAAA8Q,EAAA,KAAAlB,KAAA,OAAAK,EAEA,OADAjQ,EAAA,EAAAiQ,IAAAa,GAAA,EAAAb,EAAApR,QACAiS,EAAA,IACA,cAAAb,EAAAa,EAAuC,MACvC,OAAkC,OAAlCX,EAAAC,SAA2CvR,MAAAiS,EAAA,GAAAlB,MAAA,GAC3C,OAAAO,EAAAC,QAAkCpQ,EAAA8Q,EAAA,GAAWA,GAAA,GAAU,SACvD,OAAAA,EAAAX,EAAAI,IAAAS,MAAyCb,EAAAG,KAAAU,MAAc,SACvD,QACA,KAAAf,KAAAE,EAAAG,MAAA9O,OAAA,GAAAyO,IAAAzO,OAAA,UAAAsP,EAAA,QAAAA,EAAA,KAA6GX,EAAA,EAAO,SACpH,OAAAW,EAAA,MAAAb,GAAAa,EAAA,GAAAb,EAAA,IAAAa,EAAA,GAAAb,EAAA,KAAgFE,EAAAC,MAAAU,EAAA,GAAiB,MACjG,OAAAA,EAAA,IAAAX,EAAAC,MAAAH,EAAA,IAAwDE,EAAAC,MAAAH,EAAA,GAAgBA,EAAAa,EAAQ,MAChF,GAAAb,GAAAE,EAAAC,MAAAH,EAAA,IAA8CE,EAAAC,MAAAH,EAAA,GAAgBE,EAAAI,IAAA7D,KAAAoE,GAAgB,MAC9Eb,EAAA,IAAAE,EAAAI,IAAAS,MACAb,EAAAG,KAAAU,MAAiC,SAEjCF,EAAAf,EAAA/R,KAAAiR,EAAAkB,GACS,MAAAxI,GAAYmJ,GAAA,EAAAnJ,GAAa3H,EAAA,EAAS,QAAUgQ,EAAAC,EAAA,EACrD,KAAAa,EAAA,SAAAA,EAAA,GAAmC,OAASjS,MAAAiS,EAAA,GAAAA,EAAA,UAAAlB,MAAA,GArBAJ,EAAA1Q,EAAA+R,OAwB5CtS,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAsK,EAAAxL,EAAA,GACA42B,EAAA52B,EAAA,IACA62B,EAAA72B,EAAA,IACA82B,EAAA92B,EAAA,IACA+2B,EAAA/2B,EAAA,IACAg3B,EAAAh3B,EAAA,IACAi3B,EAAAj3B,EAAA,IACA4W,EAAA5W,EAAA,IACA4Y,EAAA5Y,EAAA,GAAAA,CAAA,uBACAk3B,GACAxgB,YAAA,EACAY,SAAclV,EAAA,EAAAC,EAAA,GACdkV,SAAcnV,EAAA,EAAAC,EAAA,GACdqV,iBAAA,GACAyf,aAAA,KACA3f,SAAcpV,EAAA,EAAAC,EAAA,GACdoV,SAAcrV,EAAA,EAAAC,EAAA,GACd+0B,cAAA,EACAvf,SAAA,EACAD,YAAA,EACAD,WAAA,EACA0f,aAAA,GAkBA,IAAAC,EAAA,WACA,SAAAA,IAEAn1B,KAAAo1B,SAAA,IAAA3xB,IAqSA,OAvRA0xB,EAAA/1B,UAAAi2B,YAAA,SAAAt1B,EAAAu1B,GACA,OAAApmB,EAAAlP,UAAA,oBACA,IAAAgH,EACA,OAAAgJ,EAAAhQ,KAAA,SAAA6D,GACA,OAAAA,EAAAyM,OACA,OAMA,OALAtJ,EAAA,IAAAytB,EAAA9f,MAAA5U,IAEA4V,WAAA3V,MAEAA,KAAAo1B,SAAAzpB,IAAA3E,EAAA/E,GAAA+E,GACAsuB,GACA,EAAAt1B,KAAAq0B,YAAArtB,EAAA/E,GAAAqzB,KADA,KAEA,OACAzxB,EAAA0M,OACA1M,EAAAyM,MAAA,EACA,OAEA,OADAmG,EAAA,qBAAAzP,IACA,EAAAA,SAUAmuB,EAAA/1B,UAAAm2B,aAAA,SAAAC,GACA,IAAAxuB,EAAAhH,KAAAo1B,SAAAv2B,IAAA22B,GACAxuB,GACAA,EAAAlC,WAGAqwB,EAAA/1B,UAAAq2B,gBAAA,SAAA5hB,EAAA2hB,GAEA,OADA3hB,EAAApV,OAAAkF,OAAAkQ,EAAAkhB,GAAkDxf,iBAAAigB,KAalDL,EAAA/1B,UAAA4F,KAAA,SAAAgC,EAAA0K,GACA,OAAAxC,EAAAlP,UAAA,oBACA,IAAAiP,EAAAumB,EAAAE,EAAA1iB,EAAAC,EAAA0iB,EAAAC,EAAA9gB,EAAA+gB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA51B,EAAA61B,EAAA/1B,EAAAG,EACA,OAAAwP,EAAAhQ,KAAA,SAAA6D,GACA,OAAAA,EAAAyM,OACA,OAIA,OAHArB,EAAAjI,EAAAiM,QAAAY,MACA2hB,EAAAxuB,EAAA/E,GAEA+E,EAAA6O,iBAAAnE,IAIA,EAAA1R,KAAAq2B,UAAA3kB,KAHA9G,QAAAC,KAAA,sGAAA7D,EAAA0K,IACA,EAAAnC,QAAA7J,SAAA,KAGA,OAGA,OAFAgwB,EAAA7xB,EAAA0M,UA7FAsD,EA+FAnC,EAAAuB,QA9FAyC,GAAA,EACA7B,KAAA6B,SACA7B,EAAA2B,YAAA3B,EAAA4B,cACAC,GAAA,GAGAA,IAyFA1C,EAAAtB,EAAAsB,cACAC,EAAAvB,EAAAuB,QACA0iB,EAAA,IAAAtsB,EAAAvJ,QAAwDO,KAAA,EAAAG,MAAAwS,EAAAC,QAAA9S,MAAAG,IAAA,EAAAC,OAAAyS,EAAAC,QAAA7S,UACxDw1B,GACAU,MAAArjB,EACAsjB,OAAAZ,IAGAY,OAAAp2B,OAAA,EACAy1B,EAAAW,OAAAn2B,QAAA,EACA0U,EAAA9N,EAAA8N,SACA+gB,EAAA/gB,EAAA0hB,OAAAZ,KAGAnf,EAAA,gCAAAof,GAEAA,EAAAY,UAAAxjB,EACA6iB,EAAAD,EAAAa,eAAAz2B,EAAA+G,EAAA7G,MACA41B,EAAAF,EAAAa,eAAAx2B,EAAA8G,EAAA5G,OACA41B,EAAAH,EAAAa,eAAAv2B,MAAA6G,EAAA7G,MACA81B,EAAAJ,EAAAa,eAAAt2B,OAAA4G,EAAA5G,OACA81B,EAAA,EAAAlvB,EAAA7G,MACAg2B,EAAA,IAAA9sB,EAAAvJ,QACAS,OAAA,EAAAw1B,EACA11B,KAAAy1B,EACAt1B,MAAAs1B,EAAAE,EACA11B,IAAA,GAAAy1B,EAAAE,KAEA11B,EAAA41B,EAAA51B,OACA61B,EAAAD,EAAAj2B,EACAG,EAAA81B,EAAAl2B,EACAO,EAAA21B,EAAAl2B,EAAAk2B,EAAAh2B,MAAA+1B,EACAjjB,EAAAsC,iBAAAigB,EACAviB,EAAAoC,SAAmDpV,EAAAI,EAAAH,EAAAk2B,GACnDnjB,EAAAmC,SAAmDnV,EAAAO,EAAAN,EAAAK,GACnD0S,EAAAkC,SAAmDlV,EAAAI,EAAAH,EAAAK,GACnD0S,EAAAqC,SAAmDrV,EAAAO,EAAAN,EAAAk2B,GACnDnjB,EAAAiiB,aAAAp0B,KAAA61B,IAAA1jB,EAAAqC,QAAArV,EAAAgT,EAAAoC,QAAApV,GACAgT,EAAAgiB,cAAAn0B,KAAA61B,IAAA1jB,EAAAqC,QAAApV,EAAA+S,EAAAmC,QAAAlV,GACA+S,EAAAuC,WAAAxC,EAAAC,QAAA9S,MACA8S,EAAAwC,YAAAzC,EAAAC,QAAA7S,OAEA6O,EAAAoC,WAAA,MAAAiC,UAAAoiB,EAAAG,EAAAa,eAAAz2B,EAAA41B,EAAAa,eAAAx2B,IAEA,QAIA0K,QAAAoE,MAAA,oCAAA0C,GACAA,EAAAuB,QAAAjT,KAAAy1B,gBAAA/jB,EAAAuB,QAAAuiB,IACA,SAKA5qB,QAAAoE,MAAA,2BAAA0C,GACAA,EAAAuB,QAAAjT,KAAAy1B,gBAAA/jB,EAAAuB,QAAAuiB,IACA,OAzJA,IAAA3hB,EACA6B,OAoKAyf,EAAA/1B,UAAA0e,gBAAA,SAAA0X,GACA,OAAAx1B,KAAAo1B,SAAAv2B,IAAA22B,IAUAL,EAAA/1B,UAAAi3B,UAAA,SAAA3kB,GACA,OAAAxC,EAAAlP,UAAA,oBACA,IAAA42B,EAAAC,EAAAC,EACA,OAAA9mB,EAAAhQ,KAAA,SAAA6D,GACA,OAAAA,EAAAyM,OACA,OAGA,OAFAumB,EAAAnlB,EAAAuB,SAAA,IAAAwB,EAAAH,WACA5C,EAAAuB,QAAA4jB,EACAnlB,aAAAkjB,EAAAhhB,mBACAlC,EAAAmC,MAAAsG,QACA,IAAAzI,EAAAmC,MAAAsG,QAAAha,OAAA,IAAAuR,EAAAmC,MAAAsG,QAAA/Z,QACA02B,EAAAplB,EAAAmC,MAAAsG,QACA0c,EAAArhB,WAAAshB,EAAA32B,MACA02B,EAAAphB,YAAAqhB,EAAA12B,OACAy2B,EAAAtiB,YAAAuiB,EAAA32B,MAAA22B,EAAA12B,QACA,EAAA02B,KAEA,MAAAvnB,QAAA,SAAA7J,EAAA8J,GACA,IAAAqE,EAAAnC,EAAAmC,MAAAsG,QACAtG,EAAAkjB,OAAA,WACAF,EAAArhB,WAAA3B,EAAA1T,MACA02B,EAAAphB,YAAA5B,EAAAzT,OACAy2B,EAAAtiB,YAAAV,EAAA1T,MAAA0T,EAAAzT,OACAsF,EAAAmO,IAEAA,EAAAmjB,QAAA,WACAtxB,EAAA,WAjBA,MADA,KAqBA,OAEA,SADA7B,EAAA0M,QAEA,OACAmB,EAAAmC,MAAAojB,OACAL,EAAAllB,EAAAmC,MAAAojB,MAEApzB,EAAAyM,MAAA,EACA,oBACA,OACA,OAAAoB,aAAAmjB,EAAAlhB,mBACAjC,EAAAsB,cAAA/D,QAAA,MACA,EAAA6lB,EAAA3jB,gBAAAsC,OAAA/B,KAFA,KAGA,OACA7N,EAAA0M,OACA1M,EAAAyM,MAAA,EACA,OASA,OAPAoB,EAAAsB,cAAA/D,QACAwH,EAAA,sBAAA/E,EAAAsB,eACA4jB,EAAAllB,EAAAsB,cAAA/D,OAAAioB,UAAA,cAGAtsB,QAAAC,KAAA,4CAEA,MACA,OACA,OAAA6G,aAAAgjB,EAAArgB,mBACA3C,EAAAsB,cAAA/D,QAAA,MACA,EAAA0lB,EAAA7gB,gBAAAL,OAAA/B,KAFA,MAGA,OACA7N,EAAA0M,OACA1M,EAAAyM,MAAA,EACA,OAEAoB,EAAAsB,cAAA/D,QACAwH,EAAA,sBAAA/E,EAAAsB,eACA4jB,EAAAllB,EAAAsB,cAAA/D,OAAAioB,UAAA,cAGAtsB,QAAAC,KAAA,2CAEAhH,EAAAyM,MAAA,GACA,QACA,OAAAsmB,GACA,MAAArnB,QAAA,SAAA7J,EAAA8J,GACA,IAAAqE,EAAA,IAAAsjB,MACAtjB,EAAAkjB,OAAA,WACAF,EAAArhB,WAAA3B,EAAA1T,MACA02B,EAAAphB,YAAA5B,EAAAzT,OACAy2B,EAAAtiB,YAAAV,EAAA1T,MAAA0T,EAAAzT,OACAsF,EAAAmO,IAEAA,EAAAmjB,QAAA,WACAtxB,EAAA,OAEAmO,EAAAujB,IAAAR,MAZA,MAcA,QAEA,SADA/yB,EAAA0M,QAEA,6BAWA4kB,EAAA/1B,UAAAi1B,YAAA,SAAAmB,EAAAF,GACA,OAAApmB,EAAAlP,UAAA,oBACA,IAAAgH,EAAAqwB,EAAAC,EAAA5lB,EACA,OAAA1B,EAAAhQ,KAAA,SAAA6D,GACA,OAAAA,EAAAyM,OACA,OAEA,KADAtJ,EAAAhH,KAAAo1B,SAAAv2B,IAAA22B,IACA,YACA6B,EAAA,EAAAC,EAAAhC,EACAzxB,EAAAyM,MAAA,EACA,OACA,OAAA+mB,EAAAC,EAAA51B,QACAgQ,EAAA4lB,EAAAD,IACA,EAAAr3B,KAAAgF,KAAAgC,EAAA0K,MAFA,KAGA,OACA7N,EAAA0M,OACA1M,EAAAyM,MAAA,EACA,OAEA,OADA+mB,KACA,KACA,OAGA,OADArwB,EAAAgO,iBACA,KACA,OACApK,QAAAC,KAAA,qCAAA2qB,EAAA,sCAAAF,GACAzxB,EAAAyM,MAAA,EACA,uBAKA6kB,EAxSA,GA0SAh4B,EAAAg4B,6CCrXA12B,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAsK,EAAAxL,EAAA,GAMAkX,EAAA,WACA,SAAAA,EAAA9U,EAAAC,EAAAC,EAAAC,GACAJ,KAAAgxB,OAAA,WACAhxB,KAAAu3B,QAAA,EACAv3B,KAAAy2B,UAAA,KACAz2B,KAAA02B,eAAA,IAAArtB,EAAAvJ,QACAM,SACAD,QACAF,IACAC,MA+GA,OAzGA6U,EAAA3V,UAAA0F,QAAA,WACA9E,KAAAy2B,UAAA,KACAz2B,KAAAgxB,MAAA,IACAhxB,KAAAgxB,MAAA,GAAAlsB,UAEA9E,KAAAgxB,MAAA,IACAhxB,KAAAgxB,MAAA,GAAAlsB,UAEA9E,KAAAgxB,MAAA,QAAAlb,EACA9V,KAAAgxB,MAAA,QAAAlb,GAKAf,EAAA3V,UAAAo4B,SAAA,WACA,OAAAx3B,KAAAgxB,MAAA,KAAAhxB,KAAAgxB,MAAA,GAAAyF,WACAz2B,KAAAgxB,MAAA,GAAAuG,UAEAv3B,KAAAgxB,MAAA,IAAAhxB,KAAAgxB,MAAA,GAAAyF,aACAz2B,KAAAgxB,MAAA,GAAAuG,QAOAxiB,EAAA3V,UAAAo3B,OAAA,SAAA3iB,GACA,IAAA7T,KAAAu3B,OAAA,CAEA,IAAAE,EAAAz3B,KAAAgxB,MAAA,GAAAwF,OAAA3iB,GACA,cAAA4jB,EACAA,EAGAz3B,KAAAgxB,MAAA,GAAAwF,OAAA3iB,GAIA,GAAA7T,KAAAy2B,UACA,YAGA,IAAAiB,EAAA13B,KAAA02B,eAAA11B,KAAA6S,EAAA0iB,QAEA,OAAAmB,EACA,YAGA,OAAAA,EACA,OAAA13B,KAGAA,KAAAu3B,QAAA,EAEA,IAAAI,EAAA9jB,EAAA0iB,OAAAp2B,MACAy3B,EAAA/jB,EAAA0iB,OAAAn2B,OAEAy3B,EAAA73B,KAAA02B,eAAAv2B,MAAAw3B,EACAG,EAAA93B,KAAA02B,eAAAt2B,OAAAyT,EAAA0iB,OAAAn2B,OAWA,OAVAy3B,EAAAC,GACA93B,KAAAgxB,MAAA,OAAAjc,EAAA/U,KAAA02B,eAAAz2B,EAAAD,KAAA02B,eAAAx2B,EAAAy3B,EAAA33B,KAAA02B,eAAAt2B,QACAJ,KAAAgxB,MAAA,OAAAjc,EAAA/U,KAAA02B,eAAAz2B,EAAA03B,EAAA33B,KAAA02B,eAAAx2B,EAAA23B,EAAA73B,KAAA02B,eAAAt2B,UAGAJ,KAAAgxB,MAAA,OAAAjc,EAAA/U,KAAA02B,eAAAz2B,EAAAD,KAAA02B,eAAAx2B,EAAAF,KAAA02B,eAAAv2B,MAAAy3B,GACA53B,KAAAgxB,MAAA,OAAAjc,EAAA/U,KAAA02B,eAAAz2B,EAAAD,KAAA02B,eAAAx2B,EAAA03B,EAAA53B,KAAA02B,eAAAv2B,MAAA23B,IAIA93B,KAAAgxB,MAAA,GAAAwF,OAAA3iB,IAOAkB,EAAA3V,UAAA0wB,OAAA,SAAAjc,GACA,GAAA7T,KAAAu3B,OAiBA,OAAAv3B,KAAAy2B,YAAA5iB,IACA7T,KAAAy2B,UAAA,KACA5iB,EAAA0B,iBAAA,KACA1B,EAAA2B,WAAA,GACA,GAnBA,IAAAuiB,EAAA/3B,KAAAgxB,MAAA,GAAAlB,OAAAjc,GACA,QAAAkkB,IAIAA,EAAA/3B,KAAAgxB,MAAA,GAAAlB,OAAAjc,GACA7T,KAAAgxB,MAAA,GAAAwG,YACAx3B,KAAAgxB,MAAA,GAAAwG,aACAx3B,KAAAgxB,MAAA,QACAhxB,KAAAgxB,MAAA,SAGA+G,IAcAhjB,EAxHA,GA0HA5X,EAAA4X,yCCjIA,IACA3S,EADAC,EAAArC,WAAAqC,YACAD,EAAA3D,OAAA6D,iBACUC,wBAAgBC,OAAA,SAAAnE,EAAAoE,GAAsCpE,EAAAkE,UAAAE,IAChE,SAAApE,EAAAoE,GAAyB,QAAAnD,KAAAmD,IAAApD,eAAAC,KAAAjB,EAAAiB,GAAAmD,EAAAnD,KACzB,SAAAjB,EAAAoE,GAEA,SAAAC,IAAuB1C,KAAA2C,YAAAtE,EADvB+D,EAAA/D,EAAAoE,GAEApE,EAAAe,UAAA,OAAAqD,EAAAhE,OAAAmE,OAAAH,IAAAC,EAAAtD,UAAAqD,EAAArD,UAAA,IAAAsD,KAGAjE,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAA+D,EAAAjF,EAAA,GAUAm6B,EAAA,SAAA50B,GAEA,SAAA40B,EAAAC,GACA,IAAA30B,EAAAF,EAAAlF,KAAA8B,YAIA,OAFAsD,EAAA40B,OAAA,IAAAz0B,IACAH,EAAA20B,aACA30B,EAoGA,OA1GAjB,EAAA21B,EAAA50B,GAQA40B,EAAA54B,UAAA+4B,wBAAA,SAAAtwB,GAGA,IAFA,IAAAuwB,EAAA,IAAA30B,IAEA4zB,EAAA,EAAAxzB,EAAA7D,KAAAi4B,WAA8CZ,EAAAxzB,EAAAnC,OAAgB21B,IAAA,CAC9D,IAAAgB,EAAAx0B,EAAAwzB,GACAe,EAAAzsB,IAAA0sB,EAAAjuB,KAAAnI,GAAAo2B,GAGA,OAAAxwB,EAAAyU,gBAAArC,IAAA,SAAAqe,GAA0D,OAAAF,EAAAv5B,IAAAy5B,EAAAluB,KAAAnI,OAE1D+1B,EAAA54B,UAAAm5B,iBAAA,SAAA1wB,GAGA,IADA,IAAA2wB,EAAA,IAAA/0B,IACA4zB,EAAA,EAAAxzB,EAAAgE,EAAAyU,gBAAgD+a,EAAAxzB,EAAAnC,OAAgB21B,IAAA,CAChE,IAAAiB,EAAAz0B,EAAAwzB,GACAmB,EAAA7sB,IAAA2sB,EAAAluB,KAAAnI,GAAAq2B,EAAA9e,OAEA,OAAAgf,GAEAR,EAAA54B,UAAA+I,YAAA,SAAAN,EAAAC,GACA9H,KAAAy4B,kBAAA5wB,EAAA,SAAAgB,EAAAuB,EAAAoP,GAAiE,OAAA3Q,EAAAjE,aAAAmqB,iBAAA3kB,EAAAoP,MAEjEwe,EAAA54B,UAAAgJ,WAAA,SAAAP,EAAAQ,GACArI,KAAAy4B,kBAAA5wB,EAAA,SAAAgB,EAAAuB,EAAAoP,GAAiE,OAAA3Q,EAAAjE,aAAAuqB,gBAAA/kB,EAAAoP,MAEjEwe,EAAA54B,UAAAq5B,kBAAA,SAAA5wB,EAAA6wB,GAMA,IAJA,IAAAT,EAAAj4B,KAAAm4B,wBAAAtwB,GAEA2wB,EAAAx4B,KAAAu4B,iBAAA1wB,GAEAwvB,EAAA,EAAAsB,EAAAV,EAAmDZ,EAAAsB,EAAAj3B,OAA0B21B,IAAA,CAC7E,IAAAgB,EAAAM,EAAAtB,GACAr3B,KAAA44B,gBAAAP,EAAAG,EAAAE,GAEA,OAAAT,GAEAD,EAAA54B,UAAAwI,gBAAA,SAAAC,EAAAC,GACA9H,KAAAy4B,kBAAA5wB,EAAA,SAAAgB,EAAAuB,EAAAoP,GAAiE,OAAA3Q,EAAAjE,aAAAgD,gBAAAwC,EAAAoP,MAEjEwe,EAAA54B,UAAA2I,cAAA,SAAAF,GACA7H,KAAAy4B,kBAAA5wB,EAAA,SAAAgB,EAAAuB,EAAAoP,GAAiE,OAAA3Q,EAAAjE,aAAAmD,cAAAqC,EAAAoP,MAEjEwe,EAAA54B,UAAA4I,gBAAA,SAAAH,KAGAmwB,EAAA54B,UAAA6I,eAAA,SAAAJ,GACA,IAAAvE,EAAAtD,KAEAw4B,EAAAx4B,KAAAu4B,iBAAA1wB,GACAkD,EAAAlD,EAAAkD,OAAAyO,MAEAxZ,KAAAk4B,OAAAryB,QAAA,SAAAgzB,EAAAR,GAEAG,EAAA7sB,IAAA0sB,EAAAjuB,KAAAnI,GAAAo2B,EAAAjuB,KAAAJ,aAAAe,IACAzH,EAAAs1B,gBAAAP,EAAAG,EAAA,SAAA3vB,EAAAuB,EAAAoP,GAA+F,OAAA3Q,EAAAjE,aAAAqD,eAAAmC,EAAAoP,OAG/FxZ,KAAAk4B,OAAA7J,SAEA2J,EAAA54B,UAAA8I,gBAAA,SAAAL,GACA,IAAAvE,EAAAtD,KAEA84B,EAAA94B,KAAAy4B,kBAAA5wB,EAAA,SAAAgB,EAAAuB,EAAAoP,GAAqF,OAAA3Q,EAAAjE,aAAAsD,gBAAAkC,EAAAoP,KAErFgf,EAAAx4B,KAAAu4B,iBAAA1wB,GAEAkD,EAAAlD,EAAAkD,OAAAyO,MAEAuf,EAAA,IAAAt1B,IACAq1B,EAAAjzB,QAAA,SAAAkL,GAA4C,OAAAgoB,EAAAptB,IAAAoF,GAAA,KAE5CgoB,EAAAlzB,QAAA,SAAAgzB,EAAAR,GACA/0B,EAAA40B,OAAAr5B,IAAAw5B,IACA/0B,EAAAs1B,gBAAAP,EAAAG,EAAA,SAAA3vB,EAAAuB,EAAAoP,GAAmG,OAAA3Q,EAAAjE,aAAAoD,gBAAAoC,EAAAoP,OAInGxZ,KAAAk4B,OAAAryB,QAAA,SAAAgzB,EAAAR,GACAU,EAAAl6B,IAAAw5B,KAEAG,EAAA7sB,IAAA0sB,EAAAjuB,KAAAnI,GAAAo2B,EAAAjuB,KAAAJ,aAAAe,IACAzH,EAAAs1B,gBAAAP,EAAAG,EAAA,SAAA3vB,EAAAuB,EAAAoP,GAAmG,OAAA3Q,EAAAjE,aAAAqD,eAAAmC,EAAAoP,QAInGxZ,KAAAk4B,OAAAa,GAEAf,EAAA54B,UAAAw5B,gBAAA,SAAAP,EAAAG,EAAAE,GAGA,IAFA,IAAAtuB,EAAAiuB,EAAAjuB,KACAoP,EAAAgf,EAAA35B,IAAAuL,EAAAnI,IACAo1B,EAAA,EAAAxzB,EAAAw0B,EAAAhX,MAAA/U,OAAqD+qB,EAAAxzB,EAAAnC,OAAgB21B,IAAA,CACrE,IAAAxuB,EAAAhF,EAAAwzB,GACAxuB,EAAA/E,SAAA+E,EAAA/E,QAAAS,OAAAzB,EAAAjD,SAAAmE,KACA00B,EAAA7vB,EAAAuB,EAAAoP,KAIAwe,EA3GA,CATAn6B,EAAA,GAqHC8J,cACDxK,EAAA66B,iDClIAv5B,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAA8D,EAAAhF,EAAA,GACAm7B,EAAAn7B,EAAA,IACAo7B,EAAAp7B,EAAA,IAmBAq7B,EAAA,WACA,SAAAA,EAAArwB,EAAAwY,GAEArhB,KAAAm5B,WAEAn5B,KAAAo5B,qBAEAp5B,KAAAq5B,kBAAA,IAAA51B,IAEAzD,KAAAs5B,gBAAA,IAAA71B,IACAzD,KAAA6I,QACA,IAAA0wB,EAAA,EACA1wB,EAAArC,mBAAAX,QAAA,SAAA0X,GACAgc,EAAAz4B,KAAAgS,IAAAyK,EAAA1W,MAAA0yB,KAEAv5B,KAAAw5B,yBAAAD,EAAA,EACAv5B,KAAAqhB,QA8HA,OAxHA6X,EAAA95B,UAAAmtB,IAAA,SAAApnB,GAEAnF,KAAAo5B,kBAAA13B,QAAA,GACA1B,KAAAy5B,gBAEA,IAAAC,EAAA15B,KAAAo5B,kBAAAO,QAOA,OANAD,EACA15B,KAAAq5B,kBAAA1tB,IAAAxG,EAAAu0B,GAGA9uB,QAAAC,KAAA,qEAEA6uB,GAMAR,EAAA95B,UAAAqG,YAAA,SAAAN,GACA,OAAAnF,KAAAq5B,kBAAAx6B,IAAAsG,IAMA+zB,EAAA95B,UAAA0wB,OAAA,SAAA3qB,GACA,IAAAu0B,EAAA15B,KAAAq5B,kBAAAx6B,IAAAsG,GAOA,OAJAu0B,IACA15B,KAAAq5B,kBAAA3H,OAAAvsB,GACAnF,KAAAo5B,kBAAAQ,QAAAF,IAEAA,GAKAR,EAAA95B,UAAAy6B,gBAAA,WACA,IAAAv2B,EAAAtD,KACAA,KAAAm5B,QAAAtzB,QAAA,SAAA8Z,EAAA5S,GACAzJ,EAAA+d,MAAAhV,UAAAyjB,OAAAnQ,EAAA1W,SAEAjJ,KAAAqhB,MAAA,MAKA6X,EAAA95B,UAAA06B,SAAA,SAAAzY,GACA,IAAA/d,EAAAtD,KACAA,KAAAm5B,QAAAtzB,QAAA,SAAA8Z,EAAA5S,GACAzJ,EAAA+d,MAAAhV,UAAAkgB,IAAA5M,EAAA1W,SAEAjJ,KAAAqhB,SAKA6X,EAAA95B,UAAAq6B,cAAA,WAIA,IAAAM,EAAA,IAAAl3B,EAAAwd,eACArgB,KAAA6I,MAAApC,iBAAAZ,QAAA,SAAA4W,GACAsd,EAAAvZ,aAAA/D,EAAAne,KAAAme,EAAAC,qBAGAqd,EAAAC,UAAA7d,MAAA,EACA4d,EAAAC,UAAAC,MAAAj6B,KAAA6I,MAAA0W,sBAAAvf,KAAA6I,MAAAnF,oBAGA,IAAAw2B,EAAAl6B,KAAA6I,MAAAE,SAAAoxB,QAEAC,EAAApB,EAAApwB,mBAAA5I,KAAA6I,MAAAkxB,EAAAG,GAGAE,EAAA3tB,eAAA,EAEA,IAAAkT,GACA0a,mBACAC,YACAC,cAAA,EACAzxB,SAAAixB,EACAS,aAAA,EACAzxB,SAAAmxB,EACAjxB,MAAAmxB,GAEAp6B,KAAAm5B,QAAAvsB,KAAA+S,GAIA,IAAA8a,EAAA,EACAC,EAAAzB,EAAA1X,+BACA0O,EAAAiK,EAAA90B,SAAAs1B,GAEAzK,EAAAlxB,MAAAkxB,EAAAlxB,MAAAkb,IAAA,WAAiE,WAAApX,EAAA83B,QAAA,WACjE,QAAA58B,EAAA,EAAAwH,EAAAvF,KAAA6I,MAAA0W,sBAA+DxhB,EAAAwH,IAASxH,EAAA,CACxE,IAAA27B,GACAkB,cAAA78B,EACAkH,QAAAgrB,EACAD,cAAAyK,EAAA,IAEAA,GAAAz6B,KAAAw5B,yBACAE,EAAA1J,aAAA,GAAAyK,EACA9a,EAAA2a,SAAA1tB,KAAA8sB,GACA15B,KAAAo5B,kBAAAxsB,KAAA8sB,GACA15B,KAAAs5B,gBAAA3tB,IAAA+tB,EAAA/Z,GAIA,IAAA5hB,EAAA,EAAAwH,EAAAvF,KAAA6I,MAAAzD,SAAA1D,OAAyD3D,EAAAwH,IAASxH,EAAA,CAClE,IAAAkH,EAAAjF,KAAA6I,MAAAzD,SAAArH,GACAkH,EAAAW,iBAAAgH,KAAAstB,EAAA90B,SAAAH,EAAA3G,OAIA0B,KAAAqhB,OACArhB,KAAAqhB,MAAAhV,UAAAkgB,IAAA5M,EAAA1W,QAGAiwB,EA9IA,GAgJA/7B,EAAA+7B,uDCtKA,IACA92B,EADAC,EAAArC,WAAAqC,YACAD,EAAA3D,OAAA6D,iBACUC,wBAAgBC,OAAA,SAAAnE,EAAAoE,GAAsCpE,EAAAkE,UAAAE,IAChE,SAAApE,EAAAoE,GAAyB,QAAAnD,KAAAmD,IAAApD,eAAAC,KAAAjB,EAAAiB,GAAAmD,EAAAnD,KACzB,SAAAjB,EAAAoE,GAEA,SAAAC,IAAuB1C,KAAA2C,YAAAtE,EADvB+D,EAAA/D,EAAAoE,GAEApE,EAAAe,UAAA,OAAAqD,EAAAhE,OAAAmE,OAAAH,IAAAC,EAAAtD,UAAAqD,EAAArD,UAAA,IAAAsD,KAGAjE,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAsK,EAAAxL,EAAA,GAqBAV,EAAA09B,YATA,SAAAt2B,EAAAu2B,GACA,IAAAC,KAMA,OALAD,EAAAj1B,QAAA,SAAAm1B,GACAz2B,EAAAmhB,KAAA,SAAAvV,GAAoC,OAAA6qB,aAAA7qB,KACpC4qB,EAAAnuB,KAAAouB,KAGAD,GASA,IAAA3K,EAAA,WASA,SAAAA,EAAAvvB,EAAA0C,GACAvD,KAAAywB,GAAA,KACAzwB,KAAA2wB,GAAA,KACA3wB,KAAA4wB,GAAA,KACA5wB,KAAA6wB,GAAA,KACA,IAAAL,EAAA3vB,EAAA2vB,IACAxwB,KAAAywB,GAAA,IAAAC,EAAA7vB,EAAAZ,EAAAuwB,EAAAvwB,EAAAY,EAAAX,EAAAswB,EAAAtwB,EAAAqD,GACAvD,KAAA2wB,GAAA,IAAAD,EAAAF,EAAAvwB,EAAAY,EAAAL,MAAAK,EAAAX,EAAAswB,EAAAtwB,EAAAqD,GACAvD,KAAA4wB,GAAA,IAAAF,EAAA7vB,EAAAZ,EAAAuwB,EAAAvwB,EAAAuwB,EAAAtwB,EAAAW,EAAAN,OAAAgD,GACAvD,KAAA6wB,GAAA,IAAAH,EAAAF,EAAAvwB,EAAAY,EAAAL,MAAAgwB,EAAAtwB,EAAAW,EAAAN,OAAAgD,GAkBA,OAVA6sB,EAAAhxB,UAAA0F,QAAA,WACA9E,KAAAywB,GAAA3rB,UACA9E,KAAA2wB,GAAA7rB,UACA9E,KAAA4wB,GAAA9rB,UACA9E,KAAA6wB,GAAA/rB,UACA9E,KAAAywB,GAAA,KACAzwB,KAAA2wB,GAAA,KACA3wB,KAAA4wB,GAAA,KACA5wB,KAAA6wB,GAAA,MAEAT,EApCA,GAsCAjzB,EAAAizB,YASA,IAAAM,EAAA,WAYA,SAAAA,EAAArwB,EAAAG,EAAAF,EAAAC,EAAAgD,GACAvD,KAAAa,OAAA,KACAb,KAAA8wB,YACA9wB,KAAAuD,MAAA,EACAvD,KAAA+wB,MAAA,KAEAtvB,UAAAC,QAAA,EACA1B,KAAAa,OAAA,IAAAwI,EAAAvJ,QACAM,OAAAE,EAAAC,EACAJ,MAAAK,EAAAH,EACAJ,EAAAI,EACAH,EAAAI,IAKAN,KAAAa,OAAA,IAAAwI,EAAAvJ,QACAM,OAAA,EACAD,MAAA,EACAF,EAAA,EACAC,EAAA,IAIAF,KAAAuD,SAAA,EAmTA,OA5SAmtB,EAAAtxB,UAAA0F,QAAA,WACA9E,KAAA8wB,SAAA,KACA9wB,KAAAa,OAAA,KACAb,KAAA+wB,QACA/wB,KAAA+wB,MAAAjsB,UACA9E,KAAA+wB,MAAA,OAgBAL,EAAAtxB,UAAAmtB,IAAA,SAAAyE,EAAA3tB,GAIA,OAAA2tB,EAAA9vB,SAAAlB,KAAAa,QACAb,KAAAixB,MAAAD,IAIAhxB,KAAAkxB,MAAAF,GACAhxB,KAAAusB,IAAAyE,EAAA3tB,KAaAqtB,EAAAtxB,UAAA4a,OAAA,SAAA8W,EAAAmK,GACA,IAAA33B,EAAAtD,KAEAi7B,QAGA,IAAAvoB,EAAAF,OAAAqa,UACAta,EAAAC,OAAAqa,UACAla,GAAAH,OAAAqa,UACAha,GAAAL,OAAAqa,UAEAiE,EAAAjrB,QAAA,SAAAmrB,GACAA,EAAA/wB,EAAAyS,IACAA,EAAAse,EAAA/wB,GAEA+wB,EAAAxwB,MAAAmS,IACAA,EAAAqe,EAAAxwB,OAEAwwB,EAAAzwB,OAAAsS,IACAA,EAAAme,EAAAzwB,QAEAywB,EAAA9wB,EAAAqS,IACAA,EAAAye,EAAA9wB,KAIAF,KAAAkxB,MAAA,IAAA7nB,EAAAvJ,QACAM,OAAAyS,EAAAN,EACApS,MAAAwS,EAAAD,EACAzS,EAAAyS,EACAxS,EAAAqS,KAGAue,EAAAjrB,QAAA,SAAAmrB,EAAAjkB,GAAkD,OAAAzJ,EAAA2tB,MAAAD,MAUlDN,EAAAtxB,UAAA8xB,MAAA,SAAArwB,GACA,IAAAyC,EAAAtD,KAEA,IAAAa,EAAAK,SAAAlB,KAAAa,QAAA,CAIAb,KAAAa,OAAAD,YAAAC,GACAb,KAAAa,OAAAZ,GAAA,EACAD,KAAAa,OAAAX,GAAA,EACAF,KAAAa,OAAAV,OAAA,EACAH,KAAAa,OAAAT,QAAA,EAEA,IAAA+wB,EAAAnxB,KAAAoxB,mBAEApxB,KAAA+wB,QAEA/wB,KAAA+wB,MAAAjsB,UACA9E,KAAA+wB,MAAA,MAGAI,EAAAtrB,QAAA,SAAAmrB,EAAAjkB,GAAqD,OAAAzJ,EAAA2tB,MAAAD,OAarDN,EAAAtxB,UAAA6xB,MAAA,SAAAD,GAEA,OAAAhxB,KAAA+wB,MACAC,EAAA9vB,SAAAlB,KAAA+wB,MAAAN,GAAA5vB,QACAb,KAAA+wB,MAAAN,GAAAQ,MAAAD,GAEAA,EAAA9vB,SAAAlB,KAAA+wB,MAAAJ,GAAA9vB,QACAb,KAAA+wB,MAAAJ,GAAAM,MAAAD,GAEAA,EAAA9vB,SAAAlB,KAAA+wB,MAAAH,GAAA/vB,QACAb,KAAA+wB,MAAAH,GAAAK,MAAAD,GAEAA,EAAA9vB,SAAAlB,KAAA+wB,MAAAF,GAAAhwB,QACAb,KAAA+wB,MAAAF,GAAAI,MAAAD,IAGAhxB,KAAA8wB,SAAAlkB,KAAAokB,IACA,GAGAA,EAAA9vB,SAAAlB,KAAAa,SACAb,KAAA8wB,SAAAlkB,KAAAokB,GAEAhxB,KAAA8wB,SAAApvB,OAlQA,GAkQA1B,KAAAuD,MAjQA,IAkQAvD,KAAAsxB,SAEA,IAKAC,MAAAP,EAAA7wB,MAAA6wB,EAAA5wB,OAAA4wB,EAAA/wB,EAAA+wB,EAAA9wB,GACA0K,QAAAoE,MAAA,2DAAAgiB,GAEA,IAAAA,EAAAQ,MACA5mB,QAAAoE,MAAA,yDAAAgiB,IAGA,IASAN,EAAAtxB,UAAAgyB,eAAA,SAAAO,GAQA,OAPAA,IAAAjkB,OAAA1N,KAAA8wB,UACA9wB,KAAA+wB,QACA/wB,KAAA+wB,MAAAN,GAAAW,eAAAO,GACA3xB,KAAA+wB,MAAAJ,GAAAS,eAAAO,GACA3xB,KAAA+wB,MAAAH,GAAAQ,eAAAO,GACA3xB,KAAA+wB,MAAAF,GAAAO,eAAAO,IAEAA,GAWAjB,EAAAtxB,UAAAsa,MAAA,SAAA7Y,EAAA+wB,GAEA,OAAA/wB,aAAAwI,EAAAvJ,OACAe,EAAAI,UAAAjB,KAAAa,QACAb,KAAA6xB,YAAAhxB,KAAA+wB,MAMA5xB,KAAAa,OAAAH,cAAAG,GACAb,KAAAouB,WAAAvtB,KAAA+wB,OAeAlB,EAAAtxB,UAAAyyB,YAAA,SAAApvB,EAAAkvB,EAAAC,GAuBA,OAtBA5xB,KAAA8wB,SAAAjrB,QAAA,SAAAzH,EAAA2O,GACA3O,EAAA6C,UAAAwB,IACAkvB,EAAA/kB,KAAAxO,KAGAwzB,GACAA,EAAA5xB,MAEAA,KAAA+wB,QACAtuB,EAAAxB,UAAAjB,KAAA+wB,MAAAN,GAAA5vB,SACAb,KAAA+wB,MAAAN,GAAAoB,YAAApvB,EAAAkvB,EAAAC,GAEAnvB,EAAAxB,UAAAjB,KAAA+wB,MAAAJ,GAAA9vB,SACAb,KAAA+wB,MAAAJ,GAAAkB,YAAApvB,EAAAkvB,EAAAC,GAEAnvB,EAAAxB,UAAAjB,KAAA+wB,MAAAH,GAAA/vB,SACAb,KAAA+wB,MAAAH,GAAAiB,YAAApvB,EAAAkvB,EAAAC,GAEAnvB,EAAAxB,UAAAjB,KAAA+wB,MAAAF,GAAAhwB,SACAb,KAAA+wB,MAAAF,GAAAgB,YAAApvB,EAAAkvB,EAAAC,IAGAD,GAYAjB,EAAAtxB,UAAAgvB,WAAA,SAAA9uB,EAAAqyB,EAAAC,GAuBA,OAtBA5xB,KAAA8wB,SAAAjrB,QAAA,SAAAzH,EAAA2O,GACA3O,EAAAsC,cAAApB,IACAqyB,EAAA/kB,KAAAxO,KAGAwzB,GACAA,EAAA5xB,MAEAA,KAAA+wB,QACA/wB,KAAA+wB,MAAAN,GAAA5vB,OAAAH,cAAApB,IACAU,KAAA+wB,MAAAN,GAAArC,WAAA9uB,EAAAqyB,EAAAC,GAEA5xB,KAAA+wB,MAAAJ,GAAA9vB,OAAAH,cAAApB,IACAU,KAAA+wB,MAAAJ,GAAAvC,WAAA9uB,EAAAqyB,EAAAC,GAEA5xB,KAAA+wB,MAAAH,GAAA/vB,OAAAH,cAAApB,IACAU,KAAA+wB,MAAAH,GAAAxC,WAAA9uB,EAAAqyB,EAAAC,GAEA5xB,KAAA+wB,MAAAF,GAAAhwB,OAAAH,cAAApB,IACAU,KAAA+wB,MAAAF,GAAAzC,WAAA9uB,EAAAqyB,EAAAC,IAGAD,GAKAjB,EAAAtxB,UAAAkyB,MAAA,WAEA,IAAAH,EAAAnxB,KAAAoxB,mBAIA,IAFApxB,KAAA+wB,MAAA,IAAAX,EAAApwB,KAAAa,OAAAb,KAAAuD,MAAA,GACAvD,KAAA8wB,YACAK,EAAAzvB,OAAA,GACA1B,KAAAixB,MAAAE,EAAAjgB,QAQAwf,EAAAtxB,UAAAwyB,MAAA,SAAAG,GACA,IAAAC,EAAA9oB,QAAA6oB,EAAA/xB,OACAA,KAAA+wB,QAAAiB,IACAhyB,KAAA+wB,MAAAN,GAAAmB,MAAAG,GACA/xB,KAAA+wB,MAAAJ,GAAAiB,MAAAG,GACA/xB,KAAA+wB,MAAAH,GAAAgB,MAAAG,GACA/xB,KAAA+wB,MAAAF,GAAAe,MAAAG,KAGArB,EAvVA,GAyVAvzB,EAAAuzB,OACA,IAAA3W,EAAA,SAAA3W,GAEA,SAAA2W,IACA,cAAA3W,KAAAqK,MAAAzN,KAAAyB,YAAAzB,KAEA,OAJAqC,EAAA0X,EAAA3W,GAIA2W,EALA,CAMC2W,GACDvzB,EAAA4c,0BCpbA,IAAAxa,EAAA,IACApB,EAAA,GAAAoB,EACA27B,EAAA,GAAA/8B,EACAE,EAAA,GAAA68B,EACAh7B,EAAA,OAAA7B,EAuIA,SAAA88B,EAAAC,EAAAp8B,EAAAV,GACA,KAAA88B,EAAAp8B,GAGA,OAAAo8B,EAAA,IAAAp8B,EACA8B,KAAAoT,MAAAknB,EAAAp8B,GAAA,IAAAV,EAEAwC,KAAAu6B,KAAAD,EAAAp8B,GAAA,IAAAV,EAAA,IA9HAlB,EAAAD,QAAA,SAAAqM,EAAAzJ,GACAA,QACA,IAyGAq7B,EAzGA72B,SAAAiF,EACA,cAAAjF,GAAAiF,EAAA9H,OAAA,EACA,OAkBA,SAAA45B,GAEA,IADAA,EAAAC,OAAAD,IACA55B,OAAA,IACA,OAEA,IAAA6M,EAAA,wHAAAitB,KACAF,GAEA,IAAA/sB,EACA,OAEA,IAAAvP,EAAAy8B,WAAAltB,EAAA,IAEA,QADAA,EAAA,UAAAmJ,eAEA,YACA,WACA,UACA,SACA,QACA,OAAA1Y,EAAAkB,EACA,WACA,UACA,QACA,OAAAlB,EAAAX,EACA,YACA,WACA,UACA,SACA,QACA,OAAAW,EAAAk8B,EACA,cACA,aACA,WACA,UACA,QACA,OAAAl8B,EAAAb,EACA,cACA,aACA,WACA,UACA,QACA,OAAAa,EAAAO,EACA,mBACA,kBACA,YACA,WACA,SACA,OAAAP,EACA,QACA,QAnEA08B,CAAAlyB,GACG,cAAAjF,IAAA,IAAAgtB,MAAA/nB,GACH,OAAAzJ,EAAA47B,KAsGAR,EADAC,EArGA5xB,EAsGAnL,EAAA,QACA88B,EAAAC,EAAAF,EAAA,SACAC,EAAAC,EAAAj9B,EAAA,WACAg9B,EAAAC,EAAA77B,EAAA,WACA67B,EAAA,MA7BA,SAAAA,GACA,GAAAA,GAAA/8B,EACA,OAAAyC,KAAA86B,MAAAR,EAAA/8B,GAAA,IAEA,GAAA+8B,GAAAF,EACA,OAAAp6B,KAAA86B,MAAAR,EAAAF,GAAA,IAEA,GAAAE,GAAAj9B,EACA,OAAA2C,KAAA86B,MAAAR,EAAAj9B,GAAA,IAEA,GAAAi9B,GAAA77B,EACA,OAAAuB,KAAA86B,MAAAR,EAAA77B,GAAA,IAEA,OAAA67B,EAAA,KA1FAS,CAAAryB,GAEA,UAAAzD,MACA,wDACA4S,KAAAC,UAAApP,sBC2BA,SAAAsyB,EAAA7kB,GAEA,IAAA8kB,EAEA,SAAAtlB,IAEA,GAAAA,EAAAulB,QAAA,CAEA,IAAAC,EAAAxlB,EAGAylB,GAAA,IAAA5gB,KACA8f,EAAAc,GAAAH,GAAAG,GACAD,EAAA9kB,KAAAikB,EACAa,EAAAE,KAAAJ,EACAE,EAAAC,OACAH,EAAAG,EAIA,IADA,IAAAnlB,EAAA,IAAAvU,MAAAf,UAAAC,QACA3D,EAAA,EAAmBA,EAAAgZ,EAAArV,OAAiB3D,IACpCgZ,EAAAhZ,GAAA0D,UAAA1D,GAGAgZ,EAAA,GAAA5Z,EAAAi/B,OAAArlB,EAAA,IAEA,iBAAAA,EAAA,IAEAA,EAAA6iB,QAAA,MAIA,IAAA7sB,EAAA,EACAgK,EAAA,GAAAA,EAAA,GAAAzI,QAAA,yBAAAC,EAAA8tB,GAEA,UAAA9tB,EAAA,OAAAA,EACAxB,IACA,IAAAuvB,EAAAn/B,EAAAsb,WAAA4jB,GACA,sBAAAC,EAAA,CACA,IAAA9yB,EAAAuN,EAAAhK,GACAwB,EAAA+tB,EAAAp+B,KAAA+9B,EAAAzyB,GAGAuN,EAAA9J,OAAAF,EAAA,GACAA,IAEA,OAAAwB,IAIApR,EAAA2Z,WAAA5Y,KAAA+9B,EAAAllB,IAEAN,EAAAG,KAAAzZ,EAAAyZ,KAAAhM,QAAAgM,IAAA2lB,KAAA3xB,UACA6C,MAAAwuB,EAAAllB,IAgBA,OAbAN,EAAAQ,YACAR,EAAAulB,QAAA7+B,EAAA6+B,QAAA/kB,GACAR,EAAAO,UAAA7Z,EAAA6Z,YACAP,EAAAxC,MA9EA,SAAAgD,GACA,IAAAlZ,EAAAy+B,EAAA,EAEA,IAAAz+B,KAAAkZ,EACAulB,MAAA,GAAAA,EAAAvlB,EAAAwlB,WAAA1+B,GACAy+B,GAAA,EAGA,OAAAr/B,EAAAqb,OAAA1X,KAAA61B,IAAA6F,GAAAr/B,EAAAqb,OAAA9W,QAsEAg7B,CAAAzlB,GACAR,EAAA3R,UAGA,mBAAA3H,EAAAw/B,MACAx/B,EAAAw/B,KAAAlmB,GAGAtZ,EAAAgxB,UAAAvhB,KAAA6J,GAEAA,EAGA,SAAA3R,IACA,IAAAiI,EAAA5P,EAAAgxB,UAAAnhB,QAAAhN,MACA,WAAA+M,IACA5P,EAAAgxB,UAAAlhB,OAAAF,EAAA,IACA,IAjIA5P,EAAAC,EAAAD,QAAA2+B,EAAArlB,MAAAqlB,EAAA,QAAAA,GACAM,OAoNA,SAAA5yB,GACA,OAAAA,aAAAzD,MAAAyD,EAAAozB,OAAApzB,EAAAsP,QACAtP,GArNArM,EAAA0/B,QA6KA,WACA1/B,EAAA4b,OAAA,KA7KA5b,EAAA4b,OA4IA,SAAAzB,GAMA,IAAAvZ,EALAZ,EAAAka,KAAAC,GAEAna,EAAA2/B,SACA3/B,EAAA4/B,SAGA,IAAAzL,GAAA,iBAAAha,IAAA,IAAAga,MAAA,UACA0L,EAAA1L,EAAA5vB,OAEA,IAAA3D,EAAA,EAAaA,EAAAi/B,EAASj/B,IACtBuzB,EAAAvzB,KAEA,OADAuZ,EAAAga,EAAAvzB,GAAAuQ,QAAA,cACA,GACAnR,EAAA4/B,MAAAnwB,KAAA,IAAAsL,OAAA,IAAAZ,EAAA2lB,OAAA,SAEA9/B,EAAA2/B,MAAAlwB,KAAA,IAAAsL,OAAA,IAAAZ,EAAA,OAIA,IAAAvZ,EAAA,EAAaA,EAAAZ,EAAAgxB,UAAAzsB,OAA8B3D,IAAA,CAC3C,IAAAoH,EAAAhI,EAAAgxB,UAAApwB,GACAoH,EAAA62B,QAAA7+B,EAAA6+B,QAAA72B,EAAA8R,aAjKA9Z,EAAA6+B,QAuLA,SAAA19B,GACA,SAAAA,IAAAoD,OAAA,GACA,SAEA,IAAA3D,EAAAi/B,EACA,IAAAj/B,EAAA,EAAAi/B,EAAA7/B,EAAA4/B,MAAAr7B,OAAyC3D,EAAAi/B,EAASj/B,IAClD,GAAAZ,EAAA4/B,MAAAh/B,GAAAm/B,KAAA5+B,GACA,SAGA,IAAAP,EAAA,EAAAi/B,EAAA7/B,EAAA2/B,MAAAp7B,OAAyC3D,EAAAi/B,EAASj/B,IAClD,GAAAZ,EAAA2/B,MAAA/+B,GAAAm/B,KAAA5+B,GACA,SAGA,UArMAnB,EAAA+Z,SAAArZ,EAAA,IAKAV,EAAAgxB,aAMAhxB,EAAA2/B,SACA3/B,EAAA4/B,SAQA5/B,EAAAsb,6BChCA,IAOA0kB,EACAC,EARA9mB,EAAAlZ,EAAAD,WAUA,SAAAkgC,IACA,UAAAt3B,MAAA,mCAEA,SAAAu3B,IACA,UAAAv3B,MAAA,qCAsBA,SAAAw3B,EAAAC,GACA,GAAAL,IAAA7rB,WAEA,OAAAA,WAAAksB,EAAA,GAGA,IAAAL,IAAAE,IAAAF,IAAA7rB,WAEA,OADA6rB,EAAA7rB,WACAA,WAAAksB,EAAA,GAEA,IAEA,OAAAL,EAAAK,EAAA,GACK,MAAA31B,GACL,IAEA,OAAAs1B,EAAAj/B,KAAA,KAAAs/B,EAAA,GACS,MAAA31B,GAET,OAAAs1B,EAAAj/B,KAAA8B,KAAAw9B,EAAA,MAvCA,WACA,IAEAL,EADA,mBAAA7rB,WACAA,WAEA+rB,EAEK,MAAAx1B,GACLs1B,EAAAE,EAEA,IAEAD,EADA,mBAAAK,aACAA,aAEAH,EAEK,MAAAz1B,GACLu1B,EAAAE,GAjBA,GAwEA,IAEAI,EAFAC,KACAC,GAAA,EAEAC,GAAA,EAEA,SAAAC,IACAF,GAAAF,IAGAE,GAAA,EACAF,EAAAh8B,OACAi8B,EAAAD,EAAAhwB,OAAAiwB,GAEAE,GAAA,EAEAF,EAAAj8B,QACAq8B,KAIA,SAAAA,IACA,IAAAH,EAAA,CAGA,IAAAI,EAAAT,EAAAO,GACAF,GAAA,EAGA,IADA,IAAAZ,EAAAW,EAAAj8B,OACAs7B,GAAA,CAGA,IAFAU,EAAAC,EACAA,OACAE,EAAAb,GACAU,GACAA,EAAAG,GAAAI,MAGAJ,GAAA,EACAb,EAAAW,EAAAj8B,OAEAg8B,EAAA,KACAE,GAAA,EAnEA,SAAAM,GACA,GAAAd,IAAAK,aAEA,OAAAA,aAAAS,GAGA,IAAAd,IAAAE,IAAAF,IAAAK,aAEA,OADAL,EAAAK,aACAA,aAAAS,GAEA,IAEAd,EAAAc,GACK,MAAAr2B,GACL,IAEA,OAAAu1B,EAAAl/B,KAAA,KAAAggC,GACS,MAAAr2B,GAGT,OAAAu1B,EAAAl/B,KAAA8B,KAAAk+B,KAgDAC,CAAAH,IAiBA,SAAAI,EAAAZ,EAAAa,GACAr+B,KAAAw9B,MACAx9B,KAAAq+B,QAYA,SAAAC,KA5BAhoB,EAAAioB,SAAA,SAAAf,GACA,IAAAzmB,EAAA,IAAAvU,MAAAf,UAAAC,OAAA,GACA,GAAAD,UAAAC,OAAA,EACA,QAAA3D,EAAA,EAAuBA,EAAA0D,UAAAC,OAAsB3D,IAC7CgZ,EAAAhZ,EAAA,GAAA0D,UAAA1D,GAGA4/B,EAAA/wB,KAAA,IAAAwxB,EAAAZ,EAAAzmB,IACA,IAAA4mB,EAAAj8B,QAAAk8B,GACAL,EAAAQ,IASAK,EAAAh/B,UAAA6+B,IAAA,WACAj+B,KAAAw9B,IAAA/vB,MAAA,KAAAzN,KAAAq+B,QAEA/nB,EAAAkoB,MAAA,UACAloB,EAAAmoB,SAAA,EACAnoB,EAAAI,OACAJ,EAAAooB,QACApoB,EAAAqoB,QAAA,GACAroB,EAAAsoB,YAIAtoB,EAAAuoB,GAAAP,EACAhoB,EAAAwoB,YAAAR,EACAhoB,EAAAyoB,KAAAT,EACAhoB,EAAA0oB,IAAAV,EACAhoB,EAAA2oB,eAAAX,EACAhoB,EAAA4oB,mBAAAZ,EACAhoB,EAAA6oB,KAAAb,EACAhoB,EAAA8oB,gBAAAd,EACAhoB,EAAA+oB,oBAAAf,EAEAhoB,EAAAgpB,UAAA,SAAAhhC,GAAqC,UAErCgY,EAAAipB,QAAA,SAAAjhC,GACA,UAAAyH,MAAA,qCAGAuQ,EAAAkpB,IAAA,WAA2B,WAC3BlpB,EAAAmpB,MAAA,SAAAC,GACA,UAAA35B,MAAA,mCAEAuQ,EAAAqpB,MAAA,WAA4B,yBCvL5BviC,EAAAD,QAAAQ,gCCCAc,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAoFAwd,EApFAkiB,EAAA5gC,EAAA,IACA+hC,EAAA/hC,EAAA,GACA4Y,EAAA5Y,EAAA,GAAAA,CAAA,4BAEAgiC,EAAA,KAEAC,GAAA,IAEAC,EAAA,IAKAC,GAAA,SAUAC,EAAA,GACAC,EAAA,GACAC,EAAA,GACAC,EAAA,GA2DAjjC,EAAAof,iBACAkiB,EAAA4B,SACA5pB,EAAA,iCACAtZ,EAAAof,iBA7DA,SAAA1U,GACA,IACAy4B,EADA/3B,EAAAV,EAEA04B,EAAA,EAYA,OAVAz/B,KAAAgrB,KAAAkU,EAAA,MAAAl/B,KAAAgrB,KAAAyU,IACAP,EAAA/yB,OAAA,EAAA+yB,EAAAt+B,OAAA,SAEA4+B,EAAA/3B,EAAA+3B,OAAAP,EAEAQ,EAAAh4B,EAAAg4B,OAAAR,EAAAE,EAAAD,EAAA,GAAAE,EAAAF,EAAA,GAAAG,EAAAH,EAAA,GAAAI,EAEAJ,EAAApG,QAAA2G,GAEAP,EAAA9uB,MACA,IAAA0uB,EAAAY,SAAAF,GAAAC,KAgDA9B,EAAAgC,OAAAhC,EAAAE,SAAA,IACAloB,EAAA,+BACAtZ,EAAAof,iBA5CA,SAAA1U,GACA,IAAAU,EAAAV,EACAy4B,EAAA/3B,EAAA+3B,YACAxqB,IAAAwqB,IACAA,OAAAxqB,IAAAvN,EAAAm4B,YAAAn4B,EAAAm4B,YAAAb,EAAA,GAEA,IAAAU,EAAAh4B,EAAAg4B,OASA,YARAzqB,IAAAyqB,IAEAA,OADAzqB,IAAAvN,EAAAo4B,YACAp4B,EAAAo4B,YAAAd,GAGAt3B,EAAAq4B,aAAAr4B,EAAAs4B,QAAAf,GAGA,IAAAF,EAAAY,SAAAF,GAAAC,KA+BA9B,EAAAqC,QACArqB,EAAA,iCACAtZ,EAAAof,iBA/BA,SAAA1U,GACA,IAAAU,EAAAV,EACAy4B,EAAA/3B,EAAA+3B,OAAAC,EAAAh4B,EAAAg4B,YACAzqB,IAAAwqB,IACAA,OAAAxqB,IAAAvN,EAAAm4B,YAAAn4B,EAAAm4B,YAAAb,EAAA,QAEA/pB,IAAAyqB,IAEAA,OADAzqB,IAAAvN,EAAAo4B,YACAp4B,EAAAo4B,YAAAd,EAGAt3B,EAAAq4B,aAAAr4B,EAAAs4B,QAGA,IAAA9vB,EAAA,IAAA6uB,EAAAY,QAAAF,GAAAC,GAEA,OADAxvB,EAAAgwB,eAAA,KACAhwB,KAkBA0F,EAAA,gCACAtZ,EAAAof,iBAxDA,SAAA1U,GACA,IAAAU,EAAAV,EACA,WAAA+3B,EAAAY,QAAAj4B,EAAA+3B,QAAA/3B,EAAAg4B,UAsFApjC,EAAAqd,qBA3BA,SAAA3S,EAAAm5B,GACA,IAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAliC,EAAA8hC,GAAAn5B,EAAAw5B,YAAA//B,OAgBA,GAdAuG,IACAA,EAAArK,OAAA+c,OAEA1S,EAAAy5B,OAAAz5B,EAAA05B,OACAN,EAAAp5B,EAAAy5B,MACAJ,EAAAr5B,EAAA05B,QAEA15B,EAAA25B,SAAA35B,EAAA45B,WACAR,EAAAp5B,EAAA25B,QAAAjwB,SAAAtB,KAAAyxB,WACAnwB,SAAAoG,gBAAA+pB,WACAR,EAAAr5B,EAAA45B,QAAAlwB,SAAAtB,KAAA0xB,UACApwB,SAAAoG,gBAAAgqB,WAGAziC,EAAA0iC,aACA,GACAT,GAAAjiC,EAAA2iC,WACAT,GAAAliC,EAAA4iC,UACA5iC,IAAA0iC,mBACS1iC,GAGT,OAAYe,EAAAghC,EAAAE,EAAAjhC,EAAAghC,EAAAE,kCCnIZ3iC,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAgjC,EAAAlkC,EAAA,IACA,SAAAkB,EAAAyK,EAAAw4B,GACA,IAAAtG,EAAA,GAAAlyB,EACAy4B,EAAAxG,WAAAC,GACA,OAAAnK,MAAA0Q,GACA,EAGAvG,EAAA1uB,QAAA,QACAi1B,EAAA,IAAAD,EAEAC,EA4DA9kC,EAAAmO,0BAvDA,SAAAmoB,EAAAyO,GACA,IAAAA,EAAA/hC,OAAA,IAAA+hC,EAAA9hC,QACAwK,QAAAC,KAAA,gNAAA4oB,EAAA,aAAAyO,EAAA/gC,YAEA,IACAhB,EACAC,EAFAS,EAAAkhC,EAAAthB,WAAAhgB,cAIA,GAAAgzB,EAAAtzB,MACAU,EAAAV,MAAApB,EAAA00B,EAAAtzB,MAAA+hC,EAAA/hC,OACA,SAAAszB,EACA5yB,EAAAZ,EAAAlB,EAAA00B,EAAApzB,KAAA6hC,EAAA/hC,OAEA,UAAAszB,IACA5yB,EAAAZ,EAAAiiC,EAAA/hC,MAAApB,EAAA00B,EAAAjzB,MAAA0hC,EAAA/hC,OAAAU,EAAAV,WAGA,CACA,IAAAE,EAAAtB,EAAA00B,EAAApzB,KAAA6hC,EAAA/hC,QAEAA,EADA+hC,EAAA/hC,MAAApB,EAAA00B,EAAAjzB,MAAA0hC,EAAA/hC,OACAE,GACA,GACAuK,QAAAC,KAAA,yNAAA4oB,EAAA,aAAAyO,EAAA/gC,YAEAN,EAAAZ,EAAAI,EACAQ,EAAAV,QAGA,GAAAszB,EAAArzB,OACAS,EAAAT,OAAArB,EAAA00B,EAAArzB,OAAA8hC,EAAA9hC,QACA,QAAAqzB,EACA5yB,EAAAX,EAAAnB,EAAA00B,EAAAnzB,IAAA4hC,EAAA9hC,QAEA,WAAAqzB,IACA5yB,EAAAX,EAAAgiC,EAAA9hC,OAAArB,EAAA00B,EAAAlzB,OAAA2hC,EAAA9hC,QAAAS,EAAAT,YAGA,CACA,IAAAg2B,EAAAr3B,EAAA00B,EAAAnzB,IAAA4hC,EAAA9hC,QAEAA,EADA8hC,EAAA9hC,OAAArB,EAAA00B,EAAAlzB,OAAA2hC,EAAA9hC,QACAg2B,EACAj2B,EAAA,GACAyK,QAAAC,KAAA,yNAAA4oB,EAAA,aAAAyO,EAAA/gC,YAEAN,EAAAX,EAAAk2B,EACAv1B,EAAAT,SAQA,OANA,IAAAS,EAAAV,OAAA,IAAAU,EAAAT,QAAAmxB,MAAA1wB,EAAAZ,EAAAY,EAAAX,EAAAW,EAAAV,MAAAU,EAAAT,WACAS,EAAAZ,EAAA,EACAY,EAAAX,EAAA,EACAW,EAAAV,MAAA+hC,EAAA/hC,MACAU,EAAAT,OAAA8hC,EAAA9hC,QAEAS,kBCvEAzD,EAAAD,QAAA,wgBCAAC,EAAAD,QAAA,mhBCAAC,EAAAD,QAAA,6hBCAAC,EAAAD,QAAA,0LCAAC,EAAAD,QAAA,mMCAAC,EAAAD,QAAA,gMCCAsB,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAA8D,EAAAhF,EAAA,GACAiF,EAAAjF,EAAA,GACAo7B,EAAAp7B,EAAA,IACAskC,EAAAtkC,EAAA,IACAukC,EAAAvkC,EAAA,IACAwkC,EAAAxkC,EAAA,IAEAykC,GAAA,iBAEAC,GACA5Y,EAAA,QACAC,EAAA,OACAC,EAAA,OACAC,EAAA,OACA0Y,EAAA,OACAC,GAAA,OAEAC,GAAA,QAgBAvlC,EAAAwlC,4BAdA,SAAAC,GACA,OACAC,SAAA,gBAAA5J,EAAA1X,+BAAA,IAAAqhB,EAAA,KACAh9B,mBAEAtH,KAAA26B,EAAA1X,+BACAhd,KAAA,MACAxF,MAAA,IAAAyD,MAAAogC,GACAE,KAAA,GACA7oB,IAAA,WAAsC,WAAApX,EAAA83B,QAAA,eAkBtCx9B,EAAA4lC,2BAZA,SAAAphB,GACA,IAAAqhB,KACAA,EAAAZ,EAAA3gB,aAAAG,oBAAA,GAAAD,EACA,IAAA3T,GACA1P,KAAA,6BACAyQ,QACAqzB,EAAA3gB,aAAAG,qBAIA,OADAugB,EAAAr0B,eAAAu0B,EAAAW,EAAAh1B,GACAD,QA0BA5Q,EAAA8lC,+BAvBA,SAAAz8B,EAAAmb,GAGA,IAFA,IAAA7X,EAAA,GAEA/L,EAAA,EAAmBA,EAAA4jB,IAAuB5jB,EAC1C+L,GAAA,eAAA/L,EAAA,eAAAA,EAAA,sBAiBA,OAfAyI,EAAAX,QAAA,SAAA4W,GACA,IAiBAN,EAAApV,EAjBAF,EAAA4V,EAAA5V,MAEA4V,EAAA1V,OAAAjE,EAAArD,sBAAAwd,KACAnT,GAAA,KAAAy4B,EAAA9lB,EAAA1V,MAAA,IAAA0V,EAAAne,KAAA,WAAAuI,EAAA,MAGA4V,EAAAzV,MACA8C,GAAA,KAAAy4B,EAAAz/B,EAAArD,sBAAAoe,OAAA,IAAApB,EAAAne,KAAA,WAAAuI,EAAA,MAIAiD,GAAA,KAAAy4B,EAAA9lB,EAAA1V,MAAA,IAAA0V,EAAAne,KAAA,WAAAuI,EAAA,KAMAsV,EANAM,EAAA3V,WAMAC,EANA0V,EAAA1V,KAOAu7B,EAAAz0B,MAAAsO,IAAApV,GAAAm8B,KAAA,KAPA,QAGAp5B,iCCrEArL,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAM9C,IAAA+D,EAAAjF,EAAA,GACAskC,EAAAtkC,EAAA,IACAslC,EAAAtlC,EAAA,IACAukC,EAAAvkC,EAAA,IACAulC,EAAAvlC,EAAA,IAEAwlC,EAAAxlC,EAAA,IACAylC,EAAAzlC,EAAA,IACA0lC,EAAA1lC,EAAA,IACAskB,EAAAtkB,EAAA,IACAqkB,EAAArkB,EAAA,IAgBA2lC,EAAA,EAEAjB,GACA5Y,EAAA,QACAC,EAAA,OACAC,EAAA,OACAC,EAAA,OACA0Y,EAAA,OACAC,GAAA,OACAC,GAAA,aAkGA,SAAAe,EAAAr+B,EAAAs+B,GACA,IAAA55B,EAAA,GACAqT,EAAAumB,GAAA5gC,EAAAlD,sBAAA0d,OAOA,OANAlY,EAAAS,QAAA,SAAAZ,GACAA,EAAAiC,gBAAAjC,EAAAiC,iBAAApE,EAAAlD,sBAAA0d,OACArY,EAAAiC,kBAAAiW,GAAAlY,EAAAiC,kBAAApE,EAAAlD,sBAAAoE,MACA8F,GAAA,YAAA7E,EAAAkC,WAAA,KAAAlC,EAAAkC,UAAA,QAAAo7B,EAAAt9B,EAAA8B,MAAA,IAAA9B,EAAA3G,KAAA,SAGAwL,EAtDA3M,EAAAwmC,gBApCA,SAAAC,EAAAn9B,EAAAD,EAAApB,GACA,IAiCAvB,EAAA4a,EAjCAolB,EAmDA,SAAAp9B,EAAAD,EAAApB,GACA,IAAA49B,KACAc,EAqGA,SAAAd,EAAAx8B,EAAApB,GAEA,IAEA2+B,EAFAZ,EAAA3e,UAAAC,oBA5KA,SAAArf,GAEA,IADA,IAAA60B,EAAA,EACAl8B,EAAA,EAAAwH,EAAAH,EAAA1D,OAA0C3D,EAAAwH,IAASxH,EACnDk8B,GAAAn5B,KAAAu6B,KAAAj2B,EAAArH,GAAAgJ,KAAA,GAEA,OAAAkzB,EAyKA+J,CAAA5+B,GAGA6+B,EAAAz9B,EAAAqH,MAAA,GAAAV,KAAA,SAAAhB,EAAA1J,GAAqF,OAAA0J,EAAAtF,MAAApE,EAAAoE,QACrFq9B,EAAAD,EAAA,GAAAp9B,MACAs9B,EAAA,EAEAC,EAAA,IAAA3gC,IACA4gC,EAAA,IAAA5gC,IACAwgC,EAAAp+B,QAAA,SAAA4W,GACAA,EAAA5V,QAAAq9B,IACAA,EAAAznB,EAAA5V,MACAs9B,KAEA,IAAAG,EAAA7nB,EAAA1V,KACAw9B,EAAAH,EAAAvlC,IAAAslC,IAAA,EACAK,EAAAD,EAAAD,EAEA,GAAAE,EAAAhB,EACA54B,QAAAoE,MAAA,yHAAAw0B,EAAA,gBAAA/mB,EAAAne,KAAA,qBAAAme,EAAA5V,MAAA,4CAAA29B,OADA,CAKAJ,EAAAz4B,IAAAw4B,EAAAK,GAEA/nB,EAAA3V,WAAAy9B,EAGA,IAAAE,EAAAJ,EAAAxlC,IAAAslC,IAAA,IAAA1gC,IACA,GAAAgZ,EAAA3V,WAAAw9B,EAAAd,EACA54B,QAAAoE,MAAA,sHAAAw0B,EAAA,gBAAA/mB,EAAAne,KAAA,iBAAAme,EAAA3V,WAAA,UAAA2V,EAAA1V,KAAA,yBAAA0V,EAAA3V,WAAA2V,EAAA1V,WADA,CAIA,QAAAhJ,EAAA0e,EAAA3V,WAA0C/I,EAAA0e,EAAA3V,WAAAw9B,IAA0CvmC,EACpF,GAAA0mC,EAAA5lC,IAAAd,GAEA,YADA6M,QAAAoE,MAAA,mHAAAw0B,EAAA,gBAAA/mB,EAAAne,KAAA,iBAAAme,EAAA3V,WAAA,UAAA2V,EAAA1V,KAAA,yBAAA0V,EAAA3V,WAAA2V,EAAA1V,OAKA0V,EAAA5V,MAAAs9B,MAgBA,IACAxiB,EAAAwiB,EAAA,EAEA5kB,EAAAze,KAAAoT,MAAA6vB,EAAApiB,GAGA,OACA/b,iBAWA,SAAAo9B,EAAAzjB,EAAAmlB,EAAA/iB,EAAAnb,GAIA,IADA,IAAA2nB,KACApwB,EAAA,EAAmBA,EAAAwhB,IAA2BxhB,EAC9CowB,EAAAvhB,KAAA7O,GAIA,IAAA4mC,EAcA,SAAAZ,EAAAxmB,GACA,IAAAzT,EAAA,GACA86B,EAAA,IAAAnhC,IACAia,EAAA,EAEAH,EAAA1X,QAAA,SAAA4W,GACA,IAAAooB,EAAAD,EAAA/lC,IAAA4d,EAAA5V,QAAA,IAAApD,IAEAohC,EAAAl5B,IAAA8Q,EAAAtV,WAAA,GAEAuW,EAAA5c,KAAAgS,IAAA4K,EAAAjB,EAAA5V,SAGA,IAAAi+B,EAAA,IAAArhC,IACAmhC,EAAA/+B,QAAA,SAAAk/B,EAAAl+B,GACA,IAAAm+B,EAAAxiC,MAAA0qB,KAAA6X,EAAAv2B,QACAs2B,EAAAn5B,IAAA9E,EAAAm+B,EAAA9B,KAAA,YAOA,IAAA+B,EAAA7B,EAAAT,4BAAAoB,GAGA,OAFAj6B,GAAAm7B,EAAApC,UAGAA,SAFA/4B,GAAA,KAGAlE,iBAAAq/B,EAAAr/B,kBA1CAs/B,CAAA3lB,EAAAoC,EAAAnb,GAOA,OANAw8B,EAAAZ,EAAA3gB,aAAAQ,6BAAA0iB,EAAA9B,SACAG,EAAAZ,EAAA3gB,aAAAG,oBAAA,GAAAD,EAIAqhB,EAAAZ,EAAA3gB,aAAAK,uBAAAshB,EAAAL,2BAAAphB,IAEA/b,iBAAA++B,EAAA/+B,kBA9BAu/B,CAAAnC,EAAAzjB,EALA,EAKAoC,EAAAsiB,GAEAr+B,iBACAw/B,SACAzjB,oBACApC,0BA3KA8lB,CAAArC,EAAAx8B,EAAApB,GACAkgC,IAAAzhC,MACAu+B,EAAA3gB,aAAA1C,eAAA0kB,EAAAr+B,EAAAtC,EAAAlD,sBAAA0d,QACAzZ,EAAAu+B,EAAA3gB,aAAAhb,kBAwFA,SAAAA,GACA,IAAAqD,EAAA,GAIA,OAHArD,EAAAZ,QAAA,SAAA4W,GACA3S,GAAA,aAAAy4B,EAAA9lB,EAAA1V,MAAA,KAAA0V,EAAAtV,WAAA,KAAAsV,EAAAtV,UAAA,QAAAsV,EAAAne,KAAA,QAEAwL,EA7FAy7B,CAAA9+B,GACA5C,GACApF,OAAAkF,OAAAq/B,EAAAsC,GACA,IAeAzhC,EAfAmK,GACA1P,KAAA,eACAyQ,QACAqzB,EAAA3gB,aAAAK,sBACAsgB,EAAA3gB,aAAAQ,4BACAmgB,EAAA3gB,aAAA1C,cACAqjB,EAAA3gB,aAAAhb,mBAIA,OACAo8B,SAFAV,EAAAr0B,eAAAqU,EAAA6gB,EAAAh1B,GAEAD,OACAnI,iBAAAk+B,EAAAl+B,iBACAw/B,QAAAtB,EAAAsB,SAxEAI,CAAA/+B,EAAAD,EAAApB,GACA49B,IAAAn/B,MACAu+B,EAAA3gB,aAAAS,mBA2CAigB,EAAAr0B,eAAAoU,MAHA5jB,KAAA,qBACAyQ,YAGAhB,OA3CAlK,EAAAu+B,EAAA3gB,aAAAU,aAAA0hB,EAAAhB,SACAh/B,EAAAu+B,EAAA3gB,aAAA1T,QA2FA,SAAA61B,EAAAp9B,EAAA+Y,EAAAoC,GACA,IAWA9d,EAXAm/B,IAAAn/B,MACAu+B,EAAA3gB,aAAAlE,YAyBA,SAAA/W,EAAAmb,GACA,IAAAqhB,KACAA,EAAAZ,EAAA3gB,aAAAE,mBAAA,GAAAA,EACAqhB,EAAAZ,EAAA3gB,aAAAM,uBAaA,SAAAvb,EAAAmb,GACA,OAAAyhB,EAAAH,+BAAAz8B,EAAAmb,GAdA8jB,CAAAj/B,EAAAmb,GACA,IAAA3T,GACA1P,KAAA,+BACAyQ,QACAqzB,EAAA3gB,aAAAM,wBAIA,OADAogB,EAAAr0B,eAAAy1B,EAAAP,EAAAh1B,GACAD,OApCA23B,CAAAl/B,EAAAmb,GACA9d,GACAmK,GACA1P,KAAA,sBACAyQ,QACAqzB,EAAA3gB,aAAAlE,aAIA,OADA4kB,EAAAr0B,eAAA81B,EAAAj9B,GAAAq8B,EAAAh1B,GACAD,OAtGA43B,CAAA/B,EAAAp9B,EAAAq9B,EAAAuB,QAAA7lB,sBAAAskB,EAAAuB,QAAAzjB,mBACA9d,GACAmK,GACA1P,KAAA,4BACAyQ,QACAqzB,EAAA3gB,aAAAS,kBACAkgB,EAAA3gB,aAAAU,YACAigB,EAAA3gB,aAAA1T,SAGA63B,EAAAzD,EAAAr0B,eAAAu1B,EAAAL,EAAAh1B,GAaA,OAZAyQ,MACA2jB,EAAA3gB,aAAA1C,eAAA0kB,EAAAr+B,EAAAtC,EAAAlD,sBAAAwd,UACAqB,EAAA2jB,EAAA3gB,aAAA1T,QA4FA,SAAA61B,GAOA,OADAzB,EAAAr0B,eAAA81B,EAAAr9B,OAHAjI,KAAA,wBACAyQ,YAGAhB,OAnGA83B,CAAAjC,GAFAZ,EAGAvkB,EACAzQ,GACA1P,KAAA,8BACAyQ,QACAqzB,EAAA3gB,aAAA1C,cACAqjB,EAAA3gB,aAAA1T,UAKAxH,GAFA47B,EAAAr0B,eAAAw1B,EAAAN,EAAAh1B,GAEAD,OACAnI,iBAAAi+B,EAAAj+B,iBACA2Z,sBAAAskB,EAAAuB,QAAA7lB,sBACA5Y,GAAAi/B,EAAA73B,uCC1FA,IAAAmB,EAAAlP,WAAAkP,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,WAAAD,MAAAE,UAAA,SAAA7J,EAAA8J,GACA,SAAAC,EAAA1Q,GAAmC,IAAM2Q,EAAAJ,EAAAK,KAAA5Q,IAA+B,MAAA8I,GAAY2H,EAAA3H,IACpF,SAAA+H,EAAA7Q,GAAkC,IAAM2Q,EAAAJ,EAAA,MAAAvQ,IAAmC,MAAA8I,GAAY2H,EAAA3H,IACvF,SAAA6H,EAAAG,GAA+BA,EAAAC,KAAApK,EAAAmK,EAAA9Q,OAAA,IAAAsQ,EAAA,SAAA3J,GAAiEA,EAAAmK,EAAA9Q,SAAyBgR,KAAAN,EAAAG,GACzHF,GAAAJ,IAAA7B,MAAA0B,EAAAC,QAAAO,WAGAK,EAAAhQ,WAAAgQ,aAAA,SAAAb,EAAAc,GACA,IAAwGC,EAAAhQ,EAAAiQ,EAAAC,EAAxGC,GAAaC,MAAA,EAAAC,KAAA,WAA6B,KAAAJ,EAAA,SAAAA,EAAA,GAA0B,OAAAA,EAAA,IAAeK,QAAAC,QACnF,OAAAL,GAAgBT,KAAAe,EAAA,GAAAC,MAAAD,EAAA,GAAAE,OAAAF,EAAA,IAAqD,mBAAAG,SAAAT,EAAAS,OAAAC,UAAA,WAAoE,OAAA9Q,OAAeoQ,EACxJ,SAAAM,EAAA1R,GAAsB,gBAAA+R,GAAsB,OAC5C,SAAAC,GACA,GAAAd,EAAA,UAAAe,UAAA,mCACA,KAAAZ,GAAA,IACA,GAAAH,EAAA,EAAAhQ,IAAAiQ,EAAAjQ,EAAA,EAAA8Q,EAAA,YAAAA,EAAA,uBAAAb,IAAAjS,KAAAgC,EAAA8Q,EAAA,KAAAlB,KAAA,OAAAK,EAEA,OADAjQ,EAAA,EAAAiQ,IAAAa,GAAA,EAAAb,EAAApR,QACAiS,EAAA,IACA,cAAAb,EAAAa,EAAuC,MACvC,OAAkC,OAAlCX,EAAAC,SAA2CvR,MAAAiS,EAAA,GAAAlB,MAAA,GAC3C,OAAAO,EAAAC,QAAkCpQ,EAAA8Q,EAAA,GAAWA,GAAA,GAAU,SACvD,OAAAA,EAAAX,EAAAI,IAAAS,MAAyCb,EAAAG,KAAAU,MAAc,SACvD,QACA,KAAAf,KAAAE,EAAAG,MAAA9O,OAAA,GAAAyO,IAAAzO,OAAA,UAAAsP,EAAA,QAAAA,EAAA,KAA6GX,EAAA,EAAO,SACpH,OAAAW,EAAA,MAAAb,GAAAa,EAAA,GAAAb,EAAA,IAAAa,EAAA,GAAAb,EAAA,KAAgFE,EAAAC,MAAAU,EAAA,GAAiB,MACjG,OAAAA,EAAA,IAAAX,EAAAC,MAAAH,EAAA,IAAwDE,EAAAC,MAAAH,EAAA,GAAgBA,EAAAa,EAAQ,MAChF,GAAAb,GAAAE,EAAAC,MAAAH,EAAA,IAA8CE,EAAAC,MAAAH,EAAA,GAAgBE,EAAAI,IAAA7D,KAAAoE,GAAgB,MAC9Eb,EAAA,IAAAE,EAAAI,IAAAS,MACAb,EAAAG,KAAAU,MAAiC,SAEjCF,EAAAf,EAAA/R,KAAAiR,EAAAkB,GACS,MAAAxI,GAAYmJ,GAAA,EAAAnJ,GAAa3H,EAAA,EAAS,QAAUgQ,EAAAC,EAAA,EACrD,KAAAa,EAAA,SAAAA,EAAA,GAAmC,OAASjS,MAAAiS,EAAA,GAAAA,EAAA,UAAAlB,MAAA,GArBAJ,EAAA1Q,EAAA+R,OAwB5CtS,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAA8D,EAAAhF,EAAA,GACAwL,EAAAxL,EAAA,GACAioC,EAAAjoC,EAAA,IACAkoC,EAAAloC,EAAA,IACAmoC,EAAAnoC,EAAA,IACAooC,EAAApoC,EAAA,IACAm7B,EAAAn7B,EAAA,IACAqoC,EAAAroC,EAAA,IACAsoC,EAAAtoC,EAAA,IACA8iB,EAAA9iB,EAAA,IACA+iB,EAAA/iB,EAAA,IACAkkC,EAAAlkC,EAAA,IACAuoC,EAAAvoC,EAAA,IACAwoC,EAAAxoC,EAAA,IACAwpB,EAAAxpB,EAAA,GACAyoC,EAAAzoC,EAAA,IACA0oC,EAAA,IAAA1jC,EAAA2jC,MAAA,OACA,SAAAC,EAAAj9B,GACA,OAAAN,QAAAM,EAAA6H,YAcAlU,EAAAupC,YAHA,SAAAC,EAAAtjC,GACA,OAAAsjC,EAAAtjC,IAQA,IAAAujC,EAAA,WACA,SAAAA,IAEA5mC,KAAAk0B,aAAA,IAAA7M,EAAA8N,aAEAn1B,KAAAsM,OAAA,IAAA7I,IAEAzD,KAAA2J,WAAAnM,OAAAoM,iBAKA5J,KAAA6mC,OAAA,IAAApjC,IAIAzD,KAAAi4B,cAMAj4B,KAAA8mC,iBAAA,IAAArjC,IA6cA,OA3cAhF,OAAAC,eAAAkoC,EAAAxnC,UAAA,MAEAP,IAAA,WACA,OAAAmB,KAAAoT,SAEAxU,YAAA,EACAD,cAAA,IAMAioC,EAAAxnC,UAAAuN,SAAA,SAAA9D,GACA,OAAAA,EAAA5G,GAIAjC,KAAAsM,OAAAzN,IAAAgK,EAAA5G,KACA2I,QAAAC,KAAA,oDACAhC,IAGA7I,KAAAsM,OAAAX,IAAA9C,EAAA5G,GAAA4G,GAEA7I,KAAA+mC,UAAAl+B,GACAA,IAXA+B,QAAAC,KAAA,8BACAhC,IAYA+9B,EAAAxnC,UAAA0F,QAAA,WACA9E,KAAAgnC,aAAAliC,WAKA8hC,EAAAxnC,UAAA4F,KAAA,WAIA,IAFA,IAAA6hC,EAAArkC,MAAA0qB,KAAAltB,KAAA6mC,OAAA93B,UAEAhR,EAAA,EAAAwH,EAAAshC,EAAAnlC,OAA4C3D,EAAAwH,IAASxH,EAAA,CACrD,IAAAsjB,EAAAwlB,EAAA9oC,GACAob,EAAA3W,MAAA0qB,KAAA7L,EAAA7U,SAAAuC,UACAzC,EAAA+U,EAAA/U,OAEA+U,EAAAnU,aAEA,QAAA6F,EAAA,EAAA8M,EAAA1G,EAAAzX,OAAgDqR,EAAA8M,IAAU9M,EAAA,CAC1D,IAAA3I,EAAA+O,EAAApG,GAGA3I,EAAAc,kBAAA,IAAA7B,EAAAvJ,QACAM,OAAAJ,KAAAoT,QAAAnE,OAAA7O,OACAD,MAAAH,KAAAoT,QAAAnE,OAAA9O,MACAF,EAAA,EACAC,EAAA,KAGA,QAAAwY,EAAA,EAAAqH,EAAAzT,EAAA5K,OAAqDgX,EAAAqH,IAAUrH,EAAA,CAE/D,IAAA7P,EAAAyD,EAAAoM,GAEA7P,EAAAuB,OAGAvB,EAAA7D,OAGAhF,KAAAinC,cAAA5lB,EAAAhV,UAAAjC,IAKApK,KAAAgnC,aAAAhsB,mBACAhb,KAAAi4B,WAAApyB,QAAA,SAAAwyB,GACAA,EAAAx3B,OAAA,IAAAkhC,EAAAthB,WAAA4X,EAAAjuB,KAAA4B,cACAqsB,EAAAx3B,OAAAyE,KAAA+yB,IAEAr4B,KAAAgnC,aAAAhsB,kBAAA,GAIAhb,KAAAknC,gBAAA/S,mBAKAyS,EAAAxnC,UAAA6nC,cAAA,SAAA5lB,EAAAjX,GACA,IAAAG,GAAsBtK,EAAAmK,EAAAH,WAAA5J,KAAAH,EAAAkK,EAAAH,WAAA3J,KACtByG,EAAAqD,EAAAH,WACAk9B,EAAAnnC,KAAAonC,SAAAC,UACAF,EAAAhnC,OAAAH,KAAAonC,SAAAE,gBACAH,EAAA/mC,QAAAJ,KAAAonC,SAAAE,gBACA,IAAAC,EAAAn9B,EAAAm9B,WAEAvnC,KAAAoT,QAAA2F,OAAA/Y,KAAAoT,QAAAo0B,cACAxnC,KAAAoT,QAAAq0B,QAAAl9B,EAAAtK,EAAAknC,EAAA/mC,OAAAmK,EAAArK,EAAA6G,EAAA3G,OAAA2G,EAAA5G,MAAA4G,EAAA3G,QAGAgK,EAAAm9B,YAEAvnC,KAAAoT,QAAAs0B,WAAAH,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAGAn9B,EAAAu9B,WACA3nC,KAAAoT,QAAAib,OAAAjkB,EAAAu9B,WAAA36B,QAAA4T,EAAAnX,WAAAm+B,QAAA,EAAA5nC,KAAAoT,QAAAy0B,iBAAA,IACAz9B,EAAAu9B,WAAA36B,QAAA4T,EAAAnX,WAAAq+B,QAAA,EAAA9nC,KAAAoT,QAAA20B,iBAAA,IACA39B,EAAAu9B,WAAA36B,QAAA4T,EAAAnX,WAAAu+B,UAAA,EAAAhoC,KAAAoT,QAAA60B,mBAAA,IAIAjoC,KAAAoT,QAAAib,MAAAruB,KAAAoT,QAAAy0B,iBAAA7nC,KAAAoT,QAAA20B,kBAIA,IAAAG,EAAAloC,KAAAmoC,gBACAD,KAAAjoC,IAAAsK,EAAAtK,GAAAioC,EAAAhoC,IAAAqK,EAAArK,GAAAgoC,EAAA/nC,QAAA4G,EAAA5G,OAAA+nC,EAAA9nC,SAAA2G,EAAA3G,SACAJ,KAAAonC,SAAAgB,YAAA79B,EAAAtK,EAAAD,KAAA2J,WAAAY,EAAArK,EAAAF,KAAA2J,WAAA5C,EAAA5G,MAAA4G,EAAA3G,QACAJ,KAAAmoC,iBACA/nC,OAAA2G,EAAA3G,OACAD,MAAA4G,EAAA5G,MACAF,EAAAsK,EAAAtK,EACAC,EAAAqK,EAAArK,IAIAF,KAAAonC,SAAA3zB,OAAA4N,EAAAjX,EAAAK,WAAAY,aAMAu7B,EAAAxnC,UAAAu9B,KAAA,SAAA58B,GACA,OAAAmP,EAAAlP,UAAA,oBACA,OAAAgQ,EAAAhQ,KAAA,SAAA6D,GACA,OAAAA,EAAAyM,OACA,OAUA,OARAtQ,KAAA2J,WAAA5J,EAAA4J,YAAA3J,KAAA2J,WAEA3J,KAAAqoC,WAAAtoC,EAAAqT,SAEApT,KAAAsoC,OAAAvoC,GAEAC,KAAAuoC,iBAAAxoC,IAEA,EAAAC,KAAAwoC,cAAAzoC,IACA,OAGA,OADA8D,EAAA0M,QACA,EAAAvQ,YAQA4mC,EAAAxnC,UAAAkpC,OAAA,SAAAvoC,GACA,IAAAuD,EAAAtD,KACA,GAAAA,KAAAoT,QAAA,CAKA,IAAAnE,EAAAjP,KAAAoT,QAAAnE,OAEA9O,EAAA8O,EAAA9O,MACAC,EAAA6O,EAAA7O,OAEAJ,KAAAonC,SAAA,IAAAvkC,EAAA4lC,eAGAC,MAAA3oC,EAAAwnC,YAAAxnC,EAAAwnC,WAAA,KAEAoB,WAAA,EAEA15B,SAGA25B,uBAAA,IAGA5oC,KAAAonC,SAAAyB,WAAA,EAEA7oC,KAAAonC,SAAA0B,eAAAjmC,EAAAkmC,cAEA/oC,KAAAonC,SAAA4B,QAAA7oC,EAAAC,GAEAJ,KAAAonC,SAAA6B,cAAAjpC,KAAA2J,YAGA5J,EAAAwnC,WACAvnC,KAAAonC,SAAA8B,cAAA,IAAArmC,EAAA2jC,MAAAzmC,EAAAwnC,WAAA,GAAAxnC,EAAAwnC,WAAA,GAAAxnC,EAAAwnC,WAAA,IAAAxnC,EAAAwnC,WAAA,IAIAvnC,KAAAonC,SAAA8B,cAAA3C,GAGAvmC,KAAAmpC,qBAAApD,EAAAllB,qBAAA7gB,KAAAoT,SACApT,KAAAmpC,qBAAA/+B,KAAAm9B,WAAAxnC,EAAAwnC,WAEAvnC,KAAA6mC,OAAAl7B,IAAA3L,KAAAmpC,qBAAA9nB,MAAApf,GAAAjC,KAAAmpC,qBAAA9nB,OAEA,IAAA+nB,EAAA,EAEAppC,KAAAi4B,WAAArrB,MACArJ,QAAA6lC,EACA/nB,MAAArhB,KAAAmpC,qBAAA9nB,MACAjX,KAAApK,KAAAmpC,qBAAA/+B,OAIApK,KAAAoT,QAAA2F,OAAA/Y,KAAAoT,QAAAo0B,cAEAznC,EAAA8mC,QACA9mC,EAAA8mC,OAAAhhC,QAAA,SAAAwjC,GAEA,IAAAC,EAAA,IAAA3oB,EAAAvU,MAAAi9B,GAGA,IAAAA,EAAAlwB,MAAAzX,SACA4nC,EAAAz8B,QAAAvJ,EAAA6lC,qBAAA/+B,MACA9G,EAAA20B,WAAArrB,MACArJ,QAAA6lC,EACA/nB,MAAAioB,EACAl/B,KAAA9G,EAAA6lC,qBAAA/+B,QAIAi/B,EAAAlwB,MAAAtT,QAAA,SAAA0jC,GACA,IAAAC,EAAA,IAAA5oB,EAAAlX,KAAA6/B,GACAC,EAAAl/B,OAAAk/B,EAAAl/B,QAAAhH,EAAA6lC,qBAAA7+B,OACAk/B,EAAA/+B,WAAA++B,EAAA/+B,YAAAnH,EAAA6lC,qBAAA1+B,WACA++B,EAAAj+B,SAAAi+B,EAAAj+B,UAAAjI,EAAA6lC,qBAAA59B,SACAi+B,EAAA7/B,WAAArG,EAAAqG,WACA2/B,EAAAz8B,QAAA28B,GACA,QAAAnS,EAAA,EAAAxzB,EAAAP,EAAA20B,WAA2DZ,EAAAxzB,EAAAnC,OAAgB21B,IAAA,CAC3ExzB,EAAAwzB,GACAjtB,KAAAnI,KAAAunC,EAAAvnC,IACA2I,QAAAC,KAAA,wGAGAvH,EAAA20B,WAAArrB,MACArJ,QAAA6lC,EACA/nB,MAAAioB,EACAl/B,KAAAo/B,MAGAlmC,EAAAujC,OAAAl7B,IAAA09B,EAAA9nC,IAAA+nC,UAzFA1+B,QAAAoE,MAAA,gFAkGA43B,EAAAxnC,UAAA2nC,UAAA,SAAAl+B,GAEAA,EAAA6I,SAAA1R,KAAAknC,gBAGA,IAAA7lB,EAAArhB,KAAAypC,gBAAA5gC,GAEAiU,EAAAjU,EAAAvC,aAEAwW,EAAAtW,mBAAAsW,EAAAtW,mBAAA0T,OAAAhR,SACA4T,EAAArW,iBAAAqW,EAAArW,iBAAAyT,OAAAhR,SACA4T,EAAA1X,SAAA0X,EAAA1X,SAAA8U,OAAAhR,SAEA,IAAArF,EAAAqiC,EAAArpB,eAAAhU,EAAAiU,GAAArW,EAAA5C,EAAA4C,iBAAAD,EAAA3C,EAAA2C,mBAAApB,EAAAvB,EAAAuB,SAGAskC,EAAA5D,EAAAnC,gBAAA7mB,EAAArW,EAAAD,EAAApB,GAEA0D,EAAAk9B,EAAA1mB,sBAAAoqB,EAAAnqB,sBAAA9Y,EAAAqW,EAAApW,aAGAqC,EAAAk9B,EAAAnnB,sBAAAjW,EAAA6gC,EAAA/iC,GAAA+iC,EAAAnjC,GAAAnB,EAAAskC,EAAA9jC,kBAEAqD,EAAA+vB,EAAApwB,mBAAAC,EAAAC,EAAAC,GAaA,OAXAF,EAAAC,WACAD,EAAArC,qBACAqC,EAAAnF,oBAAAoZ,EAAApW,YACAmC,EAAAE,WACAF,EAAA0W,sBAAAmqB,EAAAnqB,sBACA1W,EAAAI,QACAJ,EAAAzD,WACAyD,EAAApC,mBAGAoC,EAAArD,eAAA,IAAA4gC,EAAAlN,uBAAArwB,EAAAwY,GACAxY,GAKA+9B,EAAAxnC,UAAAmpC,iBAAA,SAAAxoC,GAEA,IAAA4pC,GAAA5pC,EAAA4pC,mBAAAj8B,QACA,IAAA24B,EAAArO,iBAAAh4B,KAAAi4B,cAGAj4B,KAAAgnC,aAAA,IAAAb,EAAAjtB,kBAAAlZ,KAAAoT,QAAAnE,OAAAjP,KAAAi4B,WAAA0R,EAAA5pC,EAAAsZ,qBAKAutB,EAAAxnC,UAAAopC,cAAA,SAAAzoC,GACA,OAAAmP,EAAAlP,UAAA,oBACA,IAAAq3B,EAAAxzB,EAAA6N,EACA,OAAA1B,EAAAhQ,KAAA,SAAAye,GACA,OAAAA,EAAAnO,OACA,OACA,IAAAvQ,EAAA6pC,eAAA,YACAvS,EAAA,EAAAxzB,EAAA9D,EAAA6pC,eACAnrB,EAAAnO,MAAA,EACA,OACA,OAAA+mB,EAAAxzB,EAAAnC,QACAgQ,EAAA7N,EAAAwzB,IACA,EAAAr3B,KAAAk0B,aAAAmB,YAAA3jB,MAFA,KAGA,OACA+M,EAAAlO,OACAkO,EAAAnO,MAAA,EACA,OAEA,OADA+mB,KACA,KACA,OAKA,OAHAr3B,KAAAknC,gBAAA,IAAAZ,EAAAxS,sBACAI,aAAAl0B,KAAAk0B,gBAEA,SASA0S,EAAAxnC,UAAAqqC,gBAAA,SAAA5gC,GAEA,IAAAwY,EAAArhB,KAAA6mC,OAAAhoC,IAAAgK,EAAAxF,MAAAge,OAWA,OAVAA,IAGAA,EAAArhB,KAAAmpC,qBAAA9nB,MACAxY,EAAAxF,MAAAge,OACAzW,QAAAC,KAAA,oHAIAwW,EAAA1U,SAAA9D,GACAwY,GAOAulB,EAAAxnC,UAAA0N,YAAA,SAAAjE,GAEA,OAAA7I,KAAAsM,OAAAzN,IAAAgK,KAAA5G,KAIA4G,EAAArD,eAAAq0B,kBACAhxB,EAAA/D,UACA9E,KAAAsM,OAAAolB,OAAA7oB,EAAA5G,IACA4G,IANA+B,QAAAC,KAAA,sDAAAhC,GACAA,IAUA+9B,EAAAxnC,UAAAqU,OAAA,SAAAo2B,GACA,IAAAvmC,EAAAtD,KAEA6pC,KAAAnoC,OAAA,GACAmoC,EAAAhkC,QAAA,SAAA82B,GACA,IAAAgK,EAAAhK,EAAA,GACAt5B,EAAAs5B,EAAA,GACAmN,EAAAxmC,EAAAgJ,OAAAzN,IAAAwE,EAAA9B,KACAuoC,GACAA,EAAAxiC,gBAAAjE,GACA5E,OAAAkF,OAAAmmC,EAAAzmC,SACAymC,EAAA/kC,kBAGAzB,EAAAqJ,SAAA,IAAAg6B,EAAAloC,OAAAkF,UAAkEgjC,EAAA/iC,aAAAP,KAElEC,EAAAwjC,iBAAAn7B,IAAAtI,EAAA9B,KAAA,KAIAvB,KAAA8mC,iBAAAjhC,QAAA,SAAAoQ,EAAA8zB,GACA9zB,GACA3S,EAAAwJ,YAAAxJ,EAAAgJ,OAAAzN,IAAAkrC,MAIA/pC,KAAA8mC,iBAAAzY,QAGAruB,KAAAsM,OAAAzG,QAAA,SAAAgD,EAAA5G,GACAqB,EAAAwjC,iBAAAn7B,IAAA1J,GAAA,MAOA2kC,EAAAxnC,UAAA4qC,aAAA,SAAArgC,GACA,IAAA0C,EAAArM,KAAAoT,QAAAnE,OAAAg7B,cACA,GAAA59B,EAAA,CACA,IAAA4C,EAAAjP,KAAAoT,QAAAnE,OACAA,EAAAi7B,UAAA,GACAj7B,EAAAk7B,aAAA,YACA99B,EAAAuL,MAAAlM,SAAA,WACAuD,EAAA2I,MAAAlM,SAAA,WACAuD,EAAA2I,MAAAvX,KAAA,MACA4O,EAAA2I,MAAAtX,IAAA,MACA2O,EAAA2I,MAAAzX,MAAA,OACA8O,EAAA2I,MAAAxX,OAAA,OACA6O,EAAAk7B,aAAA,YACAl7B,EAAAk7B,aAAA,aACA,IAAAC,EAAA/9B,EAAAg+B,wBACAnC,EAAAj5B,EAAAo7B,wBACArqC,KAAA2Z,OAAAuuB,EAAA/nC,OAAA,IAAAiqC,EAAAhqC,QAAA,OAGAwmC,EAAAxnC,UAAAua,OAAA,SAAAxZ,EAAAC,EAAAuJ,GACA,IAAArG,EAAAtD,KACAA,KAAA2J,cAAA3J,KAAA2J,WACA3J,KAAAi4B,WAAApyB,QAAA,SAAAwyB,GAAsD,OAAAA,EAAAjuB,KAAAT,WAAArG,EAAAqG,aACtD3J,KAAAonC,SAAA4B,QAAA7oC,GAAA,IAAAC,GAAA,KACAJ,KAAAonC,SAAA6B,cAAAjpC,KAAA2J,YACA3J,KAAAgnC,aAAArtB,UAKAitB,EAAAxnC,UAAAipC,WAAA,SAAAj1B,GACA,GAAAA,EAGA,GApeAlK,QAoeAkK,EApeAnE,QAqeAjP,KAAAoT,eAEA,GAAAqzB,EAAArzB,GACApT,KAAAoT,UAAA/B,WAAA,UAAA+B,EAAA/B,WAAA,2BAEA,GA9eA,SAAA7H,GACA,OAAAN,QAAAM,EAAAyzB,QA6eAqN,CAAAl3B,GAAA,CACA,IAAA+G,EAAA5I,SAAAg5B,eAAAn3B,GACAqzB,EAAAtsB,IACAna,KAAAqoC,WAAAluB,KAIAysB,EAneA,GAqeAzpC,EAAAypC,6CC/iBA,SAAAl/B,EAAAvJ,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAEAb,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C2I,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,IACA6J,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,IACA6J,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,IACA6J,EAAA7J,EAAA,mCCfA,SAAA6J,EAAAvJ,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAEAb,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C2I,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,IACA6J,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,KACA6J,EAAA7J,EAAA,IACA6J,EAAA7J,EAAA,mCCNAY,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAH9C,SAAAZ,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAGAoI,CAAA7J,EAAA","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"three\"), require(\"mobx\"), require(\"bowser\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"three\", \"mobx\", \"bowser\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"voidgl\"] = factory(require(\"three\"), require(\"mobx\"), require(\"bowser\"));\n\telse\n\t\troot[\"voidgl\"] = factory(root[\"three\"], root[\"mobx\"], root[\"bowser\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__3__, __WEBPACK_EXTERNAL_MODULE__86__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 100);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar InstanceBlockIndex;\n(function (InstanceBlockIndex) {\n    InstanceBlockIndex[InstanceBlockIndex[\"ONE\"] = 1] = \"ONE\";\n    InstanceBlockIndex[InstanceBlockIndex[\"TWO\"] = 2] = \"TWO\";\n    InstanceBlockIndex[InstanceBlockIndex[\"THREE\"] = 3] = \"THREE\";\n    InstanceBlockIndex[InstanceBlockIndex[\"FOUR\"] = 4] = \"FOUR\";\n})(InstanceBlockIndex = exports.InstanceBlockIndex || (exports.InstanceBlockIndex = {}));\nvar InstanceAttributeSize;\n(function (InstanceAttributeSize) {\n    InstanceAttributeSize[InstanceAttributeSize[\"ONE\"] = 1] = \"ONE\";\n    InstanceAttributeSize[InstanceAttributeSize[\"TWO\"] = 2] = \"TWO\";\n    InstanceAttributeSize[InstanceAttributeSize[\"THREE\"] = 3] = \"THREE\";\n    InstanceAttributeSize[InstanceAttributeSize[\"FOUR\"] = 4] = \"FOUR\";\n    /** Special case for making instance attributes that can target Atlas resources */\n    InstanceAttributeSize[InstanceAttributeSize[\"ATLAS\"] = 99] = \"ATLAS\";\n})(InstanceAttributeSize = exports.InstanceAttributeSize || (exports.InstanceAttributeSize = {}));\nvar UniformSize;\n(function (UniformSize) {\n    UniformSize[UniformSize[\"ONE\"] = 1] = \"ONE\";\n    UniformSize[UniformSize[\"TWO\"] = 2] = \"TWO\";\n    UniformSize[UniformSize[\"THREE\"] = 3] = \"THREE\";\n    UniformSize[UniformSize[\"FOUR\"] = 4] = \"FOUR\";\n    UniformSize[UniformSize[\"MATRIX3\"] = 9] = \"MATRIX3\";\n    UniformSize[UniformSize[\"MATRIX4\"] = 16] = \"MATRIX4\";\n    UniformSize[UniformSize[\"ATLAS\"] = 99] = \"ATLAS\";\n})(UniformSize = exports.UniformSize || (exports.UniformSize = {}));\nvar VertexAttributeSize;\n(function (VertexAttributeSize) {\n    VertexAttributeSize[VertexAttributeSize[\"ONE\"] = 1] = \"ONE\";\n    VertexAttributeSize[VertexAttributeSize[\"TWO\"] = 2] = \"TWO\";\n    VertexAttributeSize[VertexAttributeSize[\"THREE\"] = 3] = \"THREE\";\n    VertexAttributeSize[VertexAttributeSize[\"FOUR\"] = 4] = \"FOUR\";\n})(VertexAttributeSize = exports.VertexAttributeSize || (exports.VertexAttributeSize = {}));\n/** These are flags for indicating which shaders receive certain injection elements */\nvar ShaderInjectionTarget;\n(function (ShaderInjectionTarget) {\n    /** ONLY the vertex shader will receive the injection */\n    ShaderInjectionTarget[ShaderInjectionTarget[\"VERTEX\"] = 0] = \"VERTEX\";\n    /** ONLY the fragment shader will receive the injection */\n    ShaderInjectionTarget[ShaderInjectionTarget[\"FRAGMENT\"] = 1] = \"FRAGMENT\";\n    /** Both the fragment and vertex shader will receive the injection */\n    ShaderInjectionTarget[ShaderInjectionTarget[\"ALL\"] = 2] = \"ALL\";\n})(ShaderInjectionTarget = exports.ShaderInjectionTarget || (exports.ShaderInjectionTarget = {}));\n/**\n * This is the type of picking assigned to a layer. Each mode has performance and functionality\n * tradeoffs.\n */\nvar PickType;\n(function (PickType) {\n    /** Disable any picking methodology */\n    PickType[PickType[\"NONE\"] = 0] = \"NONE\";\n    /** Pick all instances found underneath the mouse. The Layer must explicitly support this feature. */\n    PickType[PickType[\"ALL\"] = 1] = \"ALL\";\n    /**\n     * NOTE: NOT IMPLEMENTED YET\n     *\n     * Uses highly efficient color rendering method to detect an instance on a pixel by pixel check. Since it is\n     * based on rendering, it will only select the 'visually' top most rendered instance. This means instances can be occluded\n     * by other instances is an instance renders behind another.\n     *\n     * This is vastly more efficient and accurate than ALL. This also will be more readily supported than ALL.\n     */\n    PickType[PickType[\"SINGLE\"] = 2] = \"SINGLE\";\n})(PickType = exports.PickType || (exports.PickType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Class to manage the x, y, width, and height of an object\n *\n * @template T This specifies the data type associated with this shape and is accessible\n *             via the property 'd'\n */\nvar Bounds = /** @class */ (function () {\n    /**\n     * Create a new instance\n     *\n     * @param left  The left side (x coordinate) of the instance\n     * @param right The right side of the instance\n     * @param top The top (y coordinate) of the instance\n     * @param bottom The bottom of the instance\n     */\n    function Bounds(options) {\n        this.x = 0;\n        this.y = 0;\n        this.width = 0;\n        this.height = 0;\n        this.x = options.x || options.left || 0;\n        this.y = options.y || options.top || 0;\n        this.height = options.height || (options.bottom - this.y) || 0;\n        this.width = options.width || (options.right - this.x) || 0;\n    }\n    Object.defineProperty(Bounds.prototype, \"area\", {\n        get: function () {\n            return this.width * this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"bottom\", {\n        get: function () {\n            return this.y + this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"left\", {\n        get: function () {\n            return this.x;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"mid\", {\n        get: function () {\n            return {\n                x: this.x + this.width / 2.0,\n                y: this.y + this.height / 2.0,\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"right\", {\n        get: function () {\n            return this.x + this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"top\", {\n        get: function () {\n            return this.y;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Bounds.emptyBounds = function () {\n        return new Bounds({\n            height: 0,\n            width: 0,\n            x: 0,\n            y: 0,\n        });\n    };\n    /**\n     * Checks to see if a point is within this bounds object.\n     *\n     * @param point\n     */\n    Bounds.prototype.containsPoint = function (point) {\n        return !(point.x < this.x || point.y < this.y || point.x > this.right || point.y > this.bottom);\n    };\n    /**\n     * Grows this bounds object to cover the space of the provided bounds object\n     *\n     * @param bounds\n     */\n    Bounds.prototype.encapsulate = function (bounds) {\n        this.x = Math.min(this.x, bounds.x);\n        this.y = Math.min(this.y, bounds.y);\n        if (this.right < bounds.right) {\n            this.width += bounds.right - this.right;\n        }\n        if (this.bottom < bounds.bottom) {\n            this.height += bounds.bottom - this.bottom;\n        }\n        return true;\n    };\n    /**\n     * Checks to see if the provided bounds object could fit within the dimensions of this bounds object\n     * This ignores position and just checks width and height.\n     *\n     * @param bounds\n     *\n     * @return {number} 0 if it doesn't fit. 1 if it fits perfectly. 2 if it just fits.\n     */\n    Bounds.prototype.fits = function (bounds) {\n        // If the same, the bounds fits exactly into this bounds\n        if (this.width === bounds.width && this.height === bounds.height) {\n            return 1;\n        }\n        // The bounds can fit within this, then it just fits\n        if (this.width >= bounds.width && this.height >= bounds.height) {\n            return 2;\n        }\n        // Otherwise, the bounds does not fit within this bounds\n        return 0;\n    };\n    /**\n     * Checks if a bounds object intersects another bounds object.\n     *\n     * @param bounds\n     */\n    Bounds.prototype.hitBounds = function (bounds) {\n        return !(this.right < bounds.x || this.x > bounds.right || this.bottom < bounds.y || this.y > bounds.height);\n    };\n    /**\n     * Sees if the provided bounds is completely within this bounds object. Unlike fits() this takes\n     * position into account.\n     *\n     * @param bounds\n     */\n    Bounds.prototype.isInside = function (bounds) {\n        return this.x >= bounds.x && this.right <= bounds.right && this.y >= bounds.y && this.bottom <= bounds.bottom;\n    };\n    /**\n     * Easy readout of this Bounds object.\n     */\n    Bounds.prototype.toString = function () {\n        return \"{x: \" + this.x + \" y:\" + this.y + \" w:\" + this.width + \" h:\" + this.height + \"}\";\n    };\n    return Bounds;\n}());\nexports.Bounds = Bounds;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar Instance = /** @class */ (function () {\n    function Instance(options) {\n        this._id = options.id;\n        this.active = options.active;\n    }\n    Object.defineProperty(Instance.prototype, \"id\", {\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        mobx_1.observable\n    ], Instance.prototype, \"active\", void 0);\n    return Instance;\n}());\nexports.Instance = Instance;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar types_1 = require(\"../types\");\nvar util_1 = require(\"../util\");\nvar identify_by_key_1 = require(\"../util/identify-by-key\");\nvar instance_diff_manager_1 = require(\"./instance-diff-manager\");\nvar layer_interaction_handler_1 = require(\"./layer-interaction-handler\");\n/**\n * A base class for generating drawable content\n */\nvar Layer = /** @class */ (function (_super) {\n    __extends(Layer, _super);\n    function Layer(props) {\n        var _this = \n        // We do not establish bounds in the layer. The surface manager will take care of that for us\n        // After associating the layer with the view it is a part of.\n        _super.call(this, props) || this;\n        /** This determines the drawing order of the layer within it's scene */\n        _this.depth = 0;\n        /** A lookup fo an instance by it's ID */\n        _this.instanceById = new Map();\n        /** Provides the number of vertices a single instance spans */\n        _this.instanceVertexCount = 0;\n        // Keep our props within the layer\n        _this.props = Object.assign({}, Layer.defaultProps || {}, props);\n        // Set up the pick type for the layer\n        var _a = _this.props.picking, picking = _a === void 0 ? types_1.PickType.NONE : _a;\n        // If ALL is specified we set up QUAD tree picking for our instances\n        if (picking === types_1.PickType.ALL) {\n            var pickingMethods = _this.getInstancePickingMethods();\n            _this.picking = {\n                hitTest: pickingMethods.hitTest,\n                quadTree: new util_1.TrackedQuadTree(0, 1, 0, 1, pickingMethods.boundsAccessor),\n                type: types_1.PickType.ALL,\n            };\n        }\n        _this.diffManager = new instance_diff_manager_1.InstanceDiffManager(_this);\n        _this.diffProcessor = _this.diffManager.getDiffProcessor();\n        _this.interactions = new layer_interaction_handler_1.LayerInteractionHandler(_this);\n        return _this;\n    }\n    /**\n     * Invalidate and free all resources assocated with this layer.\n     */\n    Layer.prototype.destroy = function () {\n        /** TODO: no-op for now */\n    };\n    Layer.prototype.didUpdateProps = function () {\n        /** LIFECYCLE */\n    };\n    /**\n     * This is where global uniforms should update their values. Executes every frame.\n     */\n    Layer.prototype.draw = function () {\n        var uniform;\n        var value;\n        // Consume the diffs for the instances to update each element\n        var changeList = this.props.data.changeList;\n        // Make some holder variables to prevent declaration within the loop\n        var change, instance, uniforms;\n        // Fast ref to the processor and manager\n        var diffProcessor = this.diffProcessor;\n        var diffManager = this.diffManager;\n        for (var i = 0, end = changeList.length; i < end; ++i) {\n            change = changeList[i];\n            instance = change[0];\n            uniforms = this.uniformManager.getUniforms(instance);\n            // The diff type is change[1] which we use to find the diff processing method to use\n            diffProcessor[change[1]](diffManager, instance, uniforms);\n        }\n        // Indicate the diffs are consumed\n        this.props.data.resolve();\n        // Loop through the uniforms that are across all instances\n        for (var i = 0, end = this.uniforms.length - 1; i < end; ++i) {\n            uniform = this.uniforms[i];\n            value = uniform.update(uniform);\n            uniform.materialUniforms.forEach(function (materialUniform) { return materialUniform.value = value; });\n        }\n    };\n    /**\n     * This method is for layers to implement to specify how the bounds for an instance are retrieved or\n     * calculated and how the Instance interacts with a point. This is REQUIRED to support PickType.ALL on the layer.\n     */\n    Layer.prototype.getInstancePickingMethods = function () {\n        throw new Error('When picking is set to PickType.ALL, the layer MUST have this method implemented; otherwise, the layer is incompatible with this picking mode.');\n    };\n    /**\n     * The type of Three model as well as the preferred draw mode associated with it.\n     */\n    Layer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TrianglesDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    /**\n     * The options for a three material without uniforms.\n     */\n    Layer.prototype.getMaterialOptions = function () {\n        return {};\n    };\n    /**\n     * This sets up all of the data bindings that will transport data from the CPU\n     * to the Shader on the GPU.\n     *\n     * Instance Attributes: These are very frequently changing attributes\n     * Vertex Attributes: These are attributes that should be static on a vertex. Conisder it very costly to update.\n     *                    The only time making these modifieable is in the event of GL_POINTS.\n     * Uniforms: These set up the uniforms for the layer, thus having all normal implications of a uniform. Global\n     *           across the fragment and vertex shaders and can be modified with little consequence.\n     */\n    Layer.prototype.initShader = function () {\n        return {\n            fs: require('../shaders/base/no-op.fs'),\n            instanceAttributes: [],\n            uniforms: [],\n            vertexAttributes: [],\n            vertexCount: 0,\n            vs: require('../shaders/base/no-op.vs'),\n        };\n    };\n    /**\n     * Helper method for making an instance attribute. Depending on set up, this makes creating elements\n     * have better documentation when typing out the elements.\n     */\n    Layer.prototype.makeInstanceAttribute = function (block, blockIndex, name, size, update, atlas) {\n        return {\n            atlas: atlas,\n            block: block,\n            blockIndex: blockIndex,\n            name: name,\n            size: size,\n            update: update,\n        };\n    };\n    /**\n     * Helper method for making a uniform type. Depending on set up, this makes creating elements\n     * have better documentation when typing out the elements.\n     */\n    Layer.prototype.makeUniform = function (name, size, update, shaderInjection, qualifier) {\n        return {\n            name: name,\n            qualifier: qualifier,\n            shaderInjection: shaderInjection,\n            size: size,\n            update: update,\n        };\n    };\n    Layer.prototype.willUpdateInstances = function (changes) {\n        // HOOK: Simple hook so a class can review all of it's changed instances before\n        //       Getting applied to the Shader IO\n    };\n    Layer.prototype.willUpdateProps = function (newProps) {\n        /** LIFECYCLE */\n    };\n    Layer.prototype.didUpdate = function () {\n        this.props.data.resolve();\n    };\n    Layer.defaultProps = {};\n    return Layer;\n}(identify_by_key_1.IdentifyByKey));\nexports.Layer = Layer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./chart-camera\"));\n__export(require(\"./data-provider\"));\n__export(require(\"./instance\"));\n__export(require(\"./instance\"));\n__export(require(\"./reference-camera\"));\n__export(require(\"./shader-templating\"));\n__export(require(\"./tracked-quad-tree\"));\n__export(require(\"./view-camera\"));\n__export(require(\"./webgl-stat\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./atlas\"));\n__export(require(\"./atlas-manager\"));\n__export(require(\"./color-atlas-resource\"));\n__export(require(\"./color-rasterizer\"));\n__export(require(\"./image-atlas-resource\"));\n__export(require(\"./image-rasterizer\"));\n__export(require(\"./label-atlas-resource\"));\n__export(require(\"./label-rasterizer\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Classes can extend this and override the methods to respond to events.\n */\nvar EventManager = /** @class */ (function () {\n    function EventManager() {\n    }\n    EventManager.prototype.handleMouseDown = function (e, button) {\n        // HOOK: This is for a subclass\n    };\n    EventManager.prototype.handleMouseUp = function (e) {\n        // HOOK: This is for a subclass\n    };\n    EventManager.prototype.handleMouseOver = function (e) {\n        // HOOK: This is for a subclass\n    };\n    EventManager.prototype.handleMouseOut = function (e) {\n        // HOOK: This is for a subclass\n    };\n    EventManager.prototype.handleMouseMove = function (e) {\n        // HOOK: This is for a subclass\n    };\n    EventManager.prototype.handleClick = function (e, button) {\n        // HOOK: This is for a subclass\n    };\n    EventManager.prototype.handleDrag = function (e, drag) {\n        // HOOK: This is for a subclass\n    };\n    EventManager.prototype.handleWheel = function (e, wheel) {\n        // HOOK: This is for a subclass\n    };\n    return EventManager;\n}());\nexports.EventManager = EventManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This is an object that specifically is generated with a 'key' option that can never\n * be modified on the object and is identified henceforth with the key applied as the\n * 'id' of the object.\n */\nvar IdentifyByKey = /** @class */ (function () {\n    function IdentifyByKey(options) {\n        this.key = options.key;\n    }\n    Object.defineProperty(IdentifyByKey.prototype, \"id\", {\n        /** READONLY id of the object. */\n        get: function () {\n            return this.key;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IdentifyByKey;\n}());\nexports.IdentifyByKey = IdentifyByKey;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AnchorType;\n(function (AnchorType) {\n    AnchorType[AnchorType[\"BottomLeft\"] = 0] = \"BottomLeft\";\n    AnchorType[AnchorType[\"BottomMiddle\"] = 1] = \"BottomMiddle\";\n    AnchorType[AnchorType[\"BottomRight\"] = 2] = \"BottomRight\";\n    AnchorType[AnchorType[\"Custom\"] = 3] = \"Custom\";\n    AnchorType[AnchorType[\"Middle\"] = 4] = \"Middle\";\n    AnchorType[AnchorType[\"MiddleLeft\"] = 5] = \"MiddleLeft\";\n    AnchorType[AnchorType[\"MiddleRight\"] = 6] = \"MiddleRight\";\n    AnchorType[AnchorType[\"TopLeft\"] = 7] = \"TopLeft\";\n    AnchorType[AnchorType[\"TopMiddle\"] = 8] = \"TopMiddle\";\n    AnchorType[AnchorType[\"TopRight\"] = 9] = \"TopRight\";\n})(AnchorType = exports.AnchorType || (exports.AnchorType = {}));\nvar ScaleType;\n(function (ScaleType) {\n    /** The size of the image will be tied to world space */\n    ScaleType[ScaleType[\"ALWAYS\"] = 1] = \"ALWAYS\";\n    /** The image will scale to it's font size then stop growing */\n    ScaleType[ScaleType[\"BOUND_MAX\"] = 2] = \"BOUND_MAX\";\n    /** The image will alwyas retain it's font size on screen */\n    ScaleType[ScaleType[\"NEVER\"] = 3] = \"NEVER\";\n})(ScaleType = exports.ScaleType || (exports.ScaleType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BaseAtlasResource = /** @class */ (function () {\n    function BaseAtlasResource() {\n        /**\n         * This sets the ratserization to be a larger value on the texture than is rendered within\n         * the world space. This allows for techniques to be applied in the shaders to incorporate super sampling\n         * or other processes which require higher levels of resolution.\n         *\n         * The default is 1 for a 1 to 1 sample scaling to world space rendering\n         */\n        this.sampleScale = 1;\n    }\n    return BaseAtlasResource;\n}());\nexports.BaseAtlasResource = BaseAtlasResource;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isMesh(val) {\n    return Boolean(val.isMesh);\n}\nfunction generateLayerModel(layer, geometry, material) {\n    var modelInfo = layer.getModelType();\n    var model = new modelInfo.modelType(geometry, material);\n    if (isMesh(model)) {\n        model.drawMode = modelInfo.drawMode;\n    }\n    return model;\n}\nexports.generateLayerModel = generateLayerModel;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar absolute_position_1 = require(\"../primitives/absolute-position\");\nvar bounds_1 = require(\"../primitives/bounds\");\nvar identify_by_key_1 = require(\"../util/identify-by-key\");\nvar view_camera_1 = require(\"../util/view-camera\");\nvar ClearFlags;\n(function (ClearFlags) {\n    ClearFlags[ClearFlags[\"COLOR\"] = 1] = \"COLOR\";\n    ClearFlags[ClearFlags[\"DEPTH\"] = 2] = \"DEPTH\";\n    ClearFlags[ClearFlags[\"STENCIL\"] = 4] = \"STENCIL\";\n})(ClearFlags = exports.ClearFlags || (exports.ClearFlags = {}));\nfunction isOrthographic(val) {\n    return 'left' in val;\n}\n/**\n * This defines a view of a scene\n */\nvar View = /** @class */ (function (_super) {\n    __extends(View, _super);\n    function View(options) {\n        var _this = _super.call(this, options) || this;\n        /**\n         * This is the depth of the view. The higher the depth represents which layer is on top.\n         * Zero always represents the default view.\n         */\n        _this.depth = 0;\n        /** This is set to ensure the projections that happen properly translates the pixel ratio to normal Web coordinates */\n        _this.pixelRatio = window.devicePixelRatio;\n        Object.assign(_this, options);\n        return _this;\n    }\n    View.prototype.screenToPixelSpace = function (point, out) {\n        var p = out || { x: 0, y: 0 };\n        p.x = point.x * this.pixelRatio;\n        p.y = point.y * this.pixelRatio;\n        return p;\n    };\n    View.prototype.pixelSpaceToScreen = function (point, out) {\n        var p = out || { x: 0, y: 0 };\n        p.x = point.x / this.pixelRatio;\n        p.y = point.y / this.pixelRatio;\n        return p;\n    };\n    View.prototype.screenToView = function (point, out) {\n        var p = this.screenToPixelSpace(point, out);\n        p.x = p.x - this.viewBounds.x;\n        p.y = p.y - this.viewBounds.y;\n        return p;\n    };\n    View.prototype.viewToScreen = function (point, out) {\n        var p = { x: 0, y: 0 };\n        p.x = point.x + this.viewBounds.x;\n        p.y = point.y + this.viewBounds.y;\n        return this.pixelSpaceToScreen(p, out);\n    };\n    View.prototype.screenToWorld = function (point, out) {\n        var view = this.screenToView(point);\n        var world = out || { x: 0, y: 0 };\n        world.x = (view.x - (this.camera.offset[0] * this.camera.scale[0])) / this.camera.scale[0];\n        world.y = (view.y - (this.camera.offset[1] * this.camera.scale[1])) / this.camera.scale[1];\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        return world;\n    };\n    View.prototype.worldToScreen = function (point, out) {\n        var screen = { x: 0, y: 0 };\n        // Calculate from the camera to view space\n        screen.x = (point.x * this.camera.scale[0]) + (this.camera.offset[0] * this.camera.scale[0]);\n        screen.y = (point.y * this.camera.scale[1]) + (this.camera.offset[1] * this.camera.scale[1]);\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        // Convert from view to screen space\n        return this.viewToScreen(screen, out);\n    };\n    View.prototype.viewToWorld = function (point, out) {\n        var world = out || { x: 0, y: 0 };\n        var screen = this.pixelSpaceToScreen(point);\n        world.x = (screen.x - (this.camera.offset[0] * this.camera.scale[0])) / this.camera.scale[0];\n        world.y = (screen.y - (this.camera.offset[1] * this.camera.scale[1])) / this.camera.scale[1];\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        return world;\n    };\n    View.prototype.worldToView = function (point, out) {\n        var screen = out || { x: 0, y: 0 };\n        // Calculate from the camera to view space\n        screen.x = (point.x * this.camera.scale[0]) + (this.camera.offset[0] * this.camera.scale[0]);\n        screen.y = (point.y * this.camera.scale[1]) + (this.camera.offset[1] * this.camera.scale[1]);\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        return screen;\n    };\n    /**\n     * This operation makes sure we have the view camera adjusted to the new viewport's needs.\n     * For default behavior this ensures that the coordinate system has no distortion, orthographic,\n     * top left as 0,0 with +y axis pointing down.\n     */\n    View.prototype.fitViewtoViewport = function (surfaceDimensions) {\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CONTROLLED && isOrthographic(this.viewCamera.baseCamera)) {\n            var viewBounds = absolute_position_1.getAbsolutePositionBounds(this.viewport, surfaceDimensions);\n            var width = viewBounds.width;\n            var height = viewBounds.height;\n            var viewport = {\n                bottom: -height / 2,\n                far: 10000000,\n                left: -width / 2,\n                near: -100,\n                right: width / 2,\n                top: height / 2,\n            };\n            var scaleX = 1;\n            var scaleY = 1;\n            var camera = this.viewCamera.baseCamera;\n            Object.assign(camera, viewport);\n            camera.position.set(-viewBounds.width / 2.0 * scaleX, viewBounds.height / 2.0 * scaleY, camera.position.z);\n            camera.scale.set(scaleX, -scaleY, 1.0);\n            camera.updateMatrix();\n            camera.updateMatrixWorld(true);\n            camera.updateProjectionMatrix();\n            this.viewBounds = viewBounds;\n            this.viewBounds.data = this;\n            this.screenBounds = new bounds_1.Bounds({\n                height: this.viewBounds.height / this.pixelRatio,\n                width: this.viewBounds.width / this.pixelRatio,\n                x: this.viewBounds.x / this.pixelRatio,\n                y: this.viewBounds.y / this.pixelRatio,\n            });\n        }\n        else if (!isOrthographic(this.viewCamera.baseCamera)) {\n            console.warn('Fit to viewport does not support non-orthographic cameras as a default behavior.');\n        }\n    };\n    View.DEFAULT_VIEW_ID = '__default__';\n    return View;\n}(identify_by_key_1.IdentifyByKey));\nexports.View = View;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar identify_by_key_1 = require(\"../util/identify-by-key\");\nfunction sortByDepth(a, b) {\n    return a.depth - b.depth;\n}\n/**\n * This defines a scene to which layers are added to. It also tracks the views that this scene\n * is rendered with.\n */\nvar Scene = /** @class */ (function (_super) {\n    __extends(Scene, _super);\n    function Scene(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the three scene which actually sets up the rendering objects */\n        _this.container = new Three.Scene();\n        /** This is all of the layers tracked to the scene */\n        _this.layers = [];\n        /** This indicates the sort is dirty for a set of layers */\n        _this.sortIsDirty = false;\n        /** This is the view */\n        _this.viewById = new Map();\n        _this.container.frustumCulled = false;\n        _this.container.autoUpdate = false;\n        return _this;\n    }\n    /**\n     * Adds a layer to the scene with the current view setting the layer contains.\n     * The layer can not jump between views or scenes. You must destroy and reconstruct\n     * the layer.\n     */\n    Scene.prototype.addLayer = function (layer) {\n        // Add the layer to the list of layers under the view\n        this.layers.push(layer);\n        this.sortIsDirty = true;\n    };\n    /**\n     * This adds a view to this scene to be used by the scene\n     */\n    Scene.prototype.addView = function (view) {\n        this.viewById.set(view.id, view);\n    };\n    /**\n     * Removes a layer from the scene. No resort is needed as remove operations\n     * do not adjust the sorting order.\n     */\n    Scene.prototype.removeLayer = function (layer) {\n        if (this.layers) {\n            var index = this.layers.indexOf(layer);\n            if (index >= 0) {\n                this.layers.splice(index, 1);\n                return;\n            }\n        }\n        console.warn('Could not remove a layer from the scene as the layer was not a part of the scene to start. Scene:', this.id, 'Layer:', layer.id);\n    };\n    Scene.prototype.sortLayers = function () {\n        if (this.sortIsDirty) {\n            this.layers.sort(sortByDepth);\n        }\n    };\n    Scene.DEFAULT_SCENE_ID = '__default__';\n    return Scene;\n}(identify_by_key_1.IdentifyByKey));\nexports.Scene = Scene;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ViewCameraType;\n(function (ViewCameraType) {\n    /**\n     * Indicates a camera that is forced by the system to follow:\n     * - Match width and height of the view port\n     * - +y axis points downward\n     * - gl origin is at the top left of the screen\n     */\n    ViewCameraType[ViewCameraType[\"CONTROLLED\"] = 0] = \"CONTROLLED\";\n    /**\n     * This allows a custom view camera to be applied to the scene.\n     */\n    ViewCameraType[ViewCameraType[\"CUSTOM\"] = 1] = \"CUSTOM\";\n})(ViewCameraType = exports.ViewCameraType || (exports.ViewCameraType = {}));\n/**\n * This is a camera that controls the view projection matrix. This is a much more\n * complicated way to handle views that is better suited for handling 3D applications\n * and is very overkill for most 2D charting systems. If you are working purely with\n * 2D components, it's recommended to leave this as a CONTROLLED camera and utilize\n * the ChartCamera for most of your needs.\n */\nvar ViewCamera = /** @class */ (function () {\n    function ViewCamera() {\n        this.type = ViewCameraType.CONTROLLED;\n    }\n    return ViewCamera;\n}());\nexports.ViewCamera = ViewCamera;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chartCameraUID = 0;\n/**\n * Quick method for applying a source array to a target array. This\n * ensures the arrays both are valid and applies the values without just making\n * a copy of the source.\n */\nfunction applyArray(target, source) {\n    target && source && target.splice.apply(target, [0, source.length].concat(source));\n}\nvar ChartCamera = /** @class */ (function () {\n    function ChartCamera(options) {\n        /** Internally set id */\n        this._id = chartCameraUID++;\n        /** Represents how much an element should be offset in world space */\n        this.offset = [0, 0, 0];\n        /** Represents how scaled each axis should be in world space */\n        this.scale = [1, 1, 1];\n        if (options) {\n            applyArray(this.offset, options.offset);\n            applyArray(this.scale, options.scale);\n        }\n    }\n    Object.defineProperty(ChartCamera.prototype, \"id\", {\n        /** Keep id as readonly */\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the location of the camera by adjusting the offsets to match.\n     */\n    ChartCamera.prototype.position = function (location) {\n        this.offset = location.slice(0);\n    };\n    return ChartCamera;\n}());\nexports.ChartCamera = ChartCamera;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction shaderTemplate(shader, options, required) {\n    var matched = new Map();\n    var noValueProvided = new Map();\n    var notFound = new Map();\n    var shaderOptions = new Map();\n    var shaderResults = shader.replace(/\\$\\{(\\w+)\\}/g, function (x, match) {\n        shaderOptions.set(match, (shaderOptions.get(match) || 0) + 1);\n        if (match in options) {\n            matched.set(match, (matched.get(match) || 0) + 1);\n            return options[match];\n        }\n        noValueProvided.set(match, (noValueProvided.get(match) || 0) + 1);\n        return '';\n    });\n    Object.keys(options).forEach(function (option) {\n        if (!matched.get(option)) {\n            notFound.set(option, (notFound.get(option) || 0) + 1);\n        }\n    });\n    // Provide metrics\n    var results = {\n        resolvedShaderOptions: matched,\n        shader: shaderResults,\n        shaderProvidedOptions: shaderOptions,\n        unresolvedProvidedOptions: notFound,\n        unresolvedShaderOptions: noValueProvided,\n    };\n    if (required) {\n        // This will ensure that BOTH the parameter input AND the shader provided the required options.\n        required.values.forEach(function (require) {\n            if (results.unresolvedProvidedOptions.get(require)) {\n                console.error(required.name + \": Could not resolve all the required inputs. Input:\", require);\n            }\n            else if (results.unresolvedShaderOptions.get(require)) {\n                console.error(required.name + \": A required option was not provided in the options parameter. Option:\", require);\n            }\n            else if (!results.resolvedShaderOptions.get(require)) {\n                console.error(required.name + \": A required option was not provided in the options parameter. Option:\", require);\n            }\n        });\n    }\n    return results;\n}\nexports.shaderTemplate = shaderTemplate;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./bounds\"));\n__export(require(\"./point\"));\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar canvas;\nvar MAX_FONT_SIZE = 50;\nvar LabelRasterizer = /** @class */ (function () {\n    function LabelRasterizer() {\n    }\n    /**\n     * This loops until our canvas context is available\n     */\n    LabelRasterizer.awaitContext = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!canvas) return [3 /*break*/, 2];\n                        this.getContext();\n                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 0];\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Attempts to populate the 'canvas' context for rendering labels offscreen.\n     */\n    LabelRasterizer.getContext = function () {\n        if (!canvas) {\n            canvas = document.createElement('canvas').getContext('2d');\n        }\n        return canvas;\n    };\n    /**\n     * This renders our label to a sizeable canvas where we loop over the pixel data to determine\n     * the bounds of the label.\n     *\n     * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n     *                                 the size to be rendered to the texture to the size the label\n     *                                 should be within world space.\n     * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n     */\n    LabelRasterizer.calculateLabelSize = function (resource, sampleScale, calculateTexture) {\n        /** Get the label properties for rasterizing */\n        var label = resource.label;\n        // Get the scaling of the sample base\n        var sampleScaling = sampleScale || resource.sampleScale || 1.0;\n        // Get the font size will will rasterize with\n        var fontSize = this.getLabelRasterizationFontSize(label, sampleScaling);\n        // Set the color of the label to white so we know what color to look for\n        canvas.fillStyle = 'white';\n        // Set the font to the canvas\n        canvas.font = this.makeCSSFont(label, sampleScaling);\n        // We will use the canvas measuring tool to give us a baseline for how wide\n        // The label will be. We add the font size to the width for the padding needed to ensure\n        // The entirety of the text is placed on the canvas.\n        canvas.canvas.width = canvas.measureText(label.text).width + fontSize;\n        // Make our test area the font size with one extra level of the font size\n        // For padding.\n        canvas.canvas.height = fontSize * 2.0;\n        // After adjusting the canvas dimensions we must re-set the font metrics\n        // Set the color of the label to white so we know what color to look for\n        canvas.fillStyle = 'white';\n        // Set the font to the canvas\n        canvas.font = this.makeCSSFont(label, sampleScaling);\n        // Render the text into our canvas for calculating\n        canvas.fillText(label.text, fontSize / 2.0, fontSize / 4.0 + fontSize);\n        // We will now render to our canvas with enough padding to ensure\n        var _a = canvas.canvas, width = _a.width, height = _a.height;\n        var imageData = canvas.getImageData(0, 0, width, height).data;\n        var r;\n        var minY = Number.MAX_SAFE_INTEGER;\n        var minX = Number.MAX_SAFE_INTEGER;\n        var maxX = Number.MIN_SAFE_INTEGER;\n        var maxY = Number.MIN_SAFE_INTEGER;\n        var min = Math.min, max = Math.max;\n        for (var i = 0; i < width; ++i) {\n            for (var k = 0; k < height; ++k) {\n                var redIndex = k * (width * 4) + i * 4;\n                r = imageData[redIndex];\n                if (r > 0.0) {\n                    minY = min(minY, k);\n                    minX = min(minX, i);\n                    maxX = max(maxX, i);\n                    maxY = max(maxY, k);\n                }\n            }\n        }\n        // The identified pixel needs to be encased and not a direct target\n        minY -= 1;\n        maxY += 2;\n        maxX += 2;\n        minX -= 1;\n        minY = Math.max(minY, 0);\n        minX = Math.max(minX, 0);\n        // Make sure the rasterization object is initialized\n        resource.rasterization = resource.rasterization || {\n            texture: { height: 0, width: 0 },\n            world: { height: 0, width: 0 },\n        };\n        // When a forced sampling is present, it calculates that as the world space\n        if (!calculateTexture) {\n            // Update the calculated texture size.\n            resource.rasterization.world = {\n                height: maxY - minY,\n                width: maxX - minX,\n            };\n        }\n        // Otherwise we first calculate the texture rasterization for the label\n        else {\n            // Update the calculated texture size.\n            resource.rasterization.texture = {\n                height: maxY - minY,\n                width: maxX - minX,\n            };\n            resource.rasterization.canvas = this.createCroppedCanvas(resource, minY, minX);\n            this.calculateLabelSize(resource, 1.0, false);\n        }\n    };\n    /**\n     * This generates a canvas that has the cropped version of the label where the label\n     * fits neatly in the canvas object.\n     */\n    LabelRasterizer.createCroppedCanvas = function (resource, top, left) {\n        var cropped = document.createElement('canvas');\n        var context = cropped.getContext('2d');\n        if (context) {\n            var texture = resource.rasterization.texture;\n            cropped.width = texture.width;\n            cropped.height = texture.height;\n            context.imageSmoothingEnabled = false;\n            // Draw just the region the label appears into the canvas\n            context.drawImage(canvas.canvas, left, top, texture.width, texture.height, 0, 0, texture.width, texture.height);\n        }\n        else {\n            console.warn('Could not create a canvas 2d context to generate a label\\'s cropped image.');\n        }\n        return cropped;\n    };\n    /**\n     * This retrieves the font size that will be used when rasterizing the label. This takes into\n     * account whether the label is requesting super sampling be present for the rendering.\n     */\n    LabelRasterizer.getLabelRasterizationFontSize = function (label, sampleScale) {\n        return label.fontSize * sampleScale;\n    };\n    /**\n     * Generates the CSS font string based on the label's values\n     */\n    LabelRasterizer.makeCSSFont = function (label, sampleScale) {\n        return label.fontWeight + \" \" + this.getLabelRasterizationFontSize(label, sampleScale) + \"px \" + label.fontFamily;\n    };\n    /**\n     * Performs the rendering of the label\n     */\n    LabelRasterizer.render = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // Make sure our canvas object is ready for rendering\n                    return [4 /*yield*/, this.awaitContext()];\n                    case 1:\n                        // Make sure our canvas object is ready for rendering\n                        _a.sent();\n                        // Validate the label's input\n                        if (resource.label.fontSize > MAX_FONT_SIZE) {\n                            console.warn('Labels only support font sizes up to 50');\n                            return [2 /*return*/, resource];\n                        }\n                        // Calculate all of the label metrics and generate a canvas on the label that can\n                        // Be rendered to the canvas.\n                        this.calculateLabelSize(resource, resource.sampleScale, true);\n                        return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    /**\n     * Performs the rendering of the label\n     */\n    LabelRasterizer.renderSync = function (resource) {\n        // Ensure our offscreen canvas is prepped\n        this.getContext();\n        if (!canvas) {\n            console.warn('Can not render a label synchronously without the canvas context being ready.');\n            return resource;\n        }\n        // Validate the label's input\n        if (resource.label.fontSize > MAX_FONT_SIZE) {\n            console.warn('Labels only support font sizes up to 50');\n            return resource;\n        }\n        // Calculate all of the label metrics and generate a canvas on the label that can\n        // Be rendered to the canvas.\n        this.calculateLabelSize(resource, resource.sampleScale, true);\n        return resource;\n    };\n    return LabelRasterizer;\n}());\nexports.LabelRasterizer = LabelRasterizer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_atlas_resource_1 = require(\"./base-atlas-resource\");\nvar LabelAtlasResource = /** @class */ (function (_super) {\n    __extends(LabelAtlasResource, _super);\n    function LabelAtlasResource(label) {\n        var _this = _super.call(this) || this;\n        _this.label = label;\n        return _this;\n    }\n    return LabelAtlasResource;\n}(base_atlas_resource_1.BaseAtlasResource));\nexports.LabelAtlasResource = LabelAtlasResource;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_atlas_resource_1 = require(\"./base-atlas-resource\");\nvar ImageAtlasResource = /** @class */ (function (_super) {\n    __extends(ImageAtlasResource, _super);\n    function ImageAtlasResource(image) {\n        var _this = _super.call(this) || this;\n        _this.image = image;\n        return _this;\n    }\n    return ImageAtlasResource;\n}(base_atlas_resource_1.BaseAtlasResource));\nexports.ImageAtlasResource = ImageAtlasResource;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// When ratserized to the image, this determines the size of the square rendered to the atlas.\nvar COLOR_RASTERIZATION_SIZE = 2;\n/**\n * Static class for rasterizing a color to a canvas object\n */\nvar ColorRasterizer = /** @class */ (function () {\n    function ColorRasterizer() {\n    }\n    /**\n     * This loops until our canvas context is available\n     */\n    ColorRasterizer.awaitContext = function (canvas) {\n        return __awaiter(this, void 0, void 0, function () {\n            var c, limit;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        c = canvas.getContext('2d'), limit = 0;\n                        _a.label = 1;\n                    case 1:\n                        if (!(!Boolean(c) && limit < 100)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        c = canvas.getContext('2d'), ++limit;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Generates the CSS string version of the color\n     */\n    ColorRasterizer.makeCSS = function (color) {\n        return \"rgba(\" + Math.floor(color.r * 256) + \", \" + Math.floor(color.g * 256) + \", \" + Math.floor(color.b * 256) + \", \" + color.opacity + \")\";\n    };\n    ColorRasterizer.render = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var canvas, context;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        canvas = document.createElement('canvas');\n                        context = canvas.getContext('2d');\n                        return [4 /*yield*/, this.awaitContext(canvas)];\n                    case 1:\n                        _a.sent();\n                        if (context) {\n                            canvas.width = COLOR_RASTERIZATION_SIZE;\n                            canvas.height = COLOR_RASTERIZATION_SIZE;\n                            context.imageSmoothingEnabled = false;\n                            context.fillStyle = this.makeCSS(resource.color);\n                            // Draw the color to the fill space\n                            context.fillRect(0, 0, COLOR_RASTERIZATION_SIZE, COLOR_RASTERIZATION_SIZE);\n                            // Update the resource with the rasterization\n                            resource.rasterization.canvas = canvas;\n                        }\n                        else {\n                            console.warn('Could not create a canvas 2d context to generate a color for rasterization.');\n                        }\n                        return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    return ColorRasterizer;\n}());\nexports.ColorRasterizer = ColorRasterizer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_atlas_resource_1 = require(\"./base-atlas-resource\");\nvar ColorAtlasResource = /** @class */ (function (_super) {\n    __extends(ColorAtlasResource, _super);\n    function ColorAtlasResource(color) {\n        var _this = _super.call(this) || this;\n        _this.color = color;\n        return _this;\n    }\n    return ColorAtlasResource;\n}(base_atlas_resource_1.BaseAtlasResource));\nexports.ColorAtlasResource = ColorAtlasResource;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Defines a texture that is located on an atlas\n */\nvar SubTexture = /** @class */ (function () {\n    function SubTexture() {\n        /** Stores the aspect ratio of the image for quick reference */\n        this.aspectRatio = 1.0;\n    }\n    return SubTexture;\n}());\nexports.SubTexture = SubTexture;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar identify_by_key_1 = require(\"../../util/identify-by-key\");\nvar pack_node_1 = require(\"./pack-node\");\nvar sub_texture_1 = require(\"./sub-texture\");\n/**\n * These are valid atlas sizes available. We force a power of 2 to be utilized.\n * We do not allow crazy large sizes as browsers have very real caps on resources.\n * This helps implementations be a little smarter about what they are using. Future\n * versions may increase this number as GPUs improve and standards allow greater\n * flexibility.\n */\nvar AtlasSize;\n(function (AtlasSize) {\n    AtlasSize[AtlasSize[\"_2\"] = 2] = \"_2\";\n    AtlasSize[AtlasSize[\"_4\"] = 4] = \"_4\";\n    AtlasSize[AtlasSize[\"_8\"] = 8] = \"_8\";\n    AtlasSize[AtlasSize[\"_16\"] = 16] = \"_16\";\n    AtlasSize[AtlasSize[\"_32\"] = 32] = \"_32\";\n    AtlasSize[AtlasSize[\"_64\"] = 64] = \"_64\";\n    AtlasSize[AtlasSize[\"_128\"] = 128] = \"_128\";\n    AtlasSize[AtlasSize[\"_256\"] = 256] = \"_256\";\n    AtlasSize[AtlasSize[\"_512\"] = 512] = \"_512\";\n    AtlasSize[AtlasSize[\"_1024\"] = 1024] = \"_1024\";\n    AtlasSize[AtlasSize[\"_2048\"] = 2048] = \"_2048\";\n    AtlasSize[AtlasSize[\"_4096\"] = 4096] = \"_4096\";\n})(AtlasSize = exports.AtlasSize || (exports.AtlasSize = {}));\n/**\n * This represents a single Texture on the gpu that is composed of several smaller textures\n * as a 'look up'.\n */\nvar Atlas = /** @class */ (function (_super) {\n    __extends(Atlas, _super);\n    function Atlas(options) {\n        var _this = _super.call(this, options) || this;\n        /**\n         * This is all of the resources associated with this atlas. The boolean flag indicates if the resource\n         * is flagged for removal. When set to false, the resource is no longer valid and can be removed from\n         * the atlas at any given moment.\n         */\n        _this.validResources = new Map();\n        var canvas = document.createElement('canvas');\n        _this.width = canvas.width = options.width;\n        _this.height = canvas.height = options.height;\n        _this.textureSettings = options.textureSettings;\n        // Set up the packing for this atlas\n        _this.packing = new pack_node_1.PackNode(0, 0, options.width, options.height);\n        // Make sure the texture is started and updated\n        _this.updateTexture(canvas);\n        return _this;\n    }\n    /**\n     * This invalidates the SubTexture of an atlas resource.\n     */\n    Atlas.prototype.invalidateResource = function (resource) {\n        var zero = { x: 0, y: 0 };\n        resource.texture.aspectRatio = 1;\n        resource.texture.atlasBL = zero;\n        resource.texture.atlasBR = zero;\n        resource.texture.atlasTL = zero;\n        resource.texture.atlasTR = zero;\n        resource.texture.atlasReferenceID = '';\n        resource.texture.pixelWidth = 0;\n        resource.texture.pixelHeight = 0;\n        resource.texture.isValid = false;\n    };\n    /**\n     * Sets the parent manager of this atlas\n     */\n    Atlas.prototype.setManager = function (manager) {\n        this.manager = manager;\n    };\n    /**\n     * Adds a resource to this atlas AND ensures the resource is flagged valid for use.\n     *\n     * @return {boolean} True if the resource successfully registered\n     */\n    Atlas.prototype.registerResource = function (resource) {\n        if (this.validResources.get(resource) === undefined) {\n            if (!resource.texture || !resource.texture.isValid) {\n                if (!resource.texture) {\n                    resource.texture = new sub_texture_1.SubTexture();\n                }\n                resource.texture.isValid = true;\n                this.validResources.set(resource, true);\n                return true;\n            }\n            else {\n                console.warn('Atlas Error:', this.id, 'Attempted to add a resource to an Atlas that is already a valid resource on another atlas.', 'Consider Creating a new resource to be loaded into this particular atlas.', 'Resource:', resource);\n            }\n        }\n        else {\n            console.warn('Atlas Error:', this.id, 'A resource was trying to be added to the atlas that has already been added before.', 'Consider creating a new resource to indicate what you want loaded to the atlas', 'Resource:', resource);\n        }\n        return false;\n    };\n    /**\n     * This flags a resource from removal from an atlas.\n     *\n     * NOTE: This does not immediately clear the resource fromt he atlas, nor does it even guarantee\n     * the resource will be cleared from the atlas for a while. It merely suggests the resource be removed\n     * and makes the SubTexture invalid. It could be a long while before the atlas gets regnerated and repacked\n     * to actually reflect the resource not existing on the atlas.\n     */\n    Atlas.prototype.removeResource = function (resource) {\n        if (this.validResources.get(resource)) {\n            this.validResources.set(resource, false);\n            this.invalidateResource(resource);\n        }\n        else {\n            console.warn('Atlas Error:', this.id, 'Attempted to remove a resource that does not exist on this atlas.', 'or the resource was already considered invalidated on this atlas.', 'Resource:', resource);\n        }\n    };\n    /**\n     * TODO:\n     * This performs the currently best known way to update a texture.\n     *\n     * This is the current best attempt at updating the atlas which is junk as it destroys the old texture\n     * And makes a new one. We REALLY should be just subTexture2D updating the texture, but Three makes that really\n     * Difficult\n     */\n    Atlas.prototype.updateTexture = function (canvas) {\n        if (this.texture) {\n            var redoneCanvas = this.texture.image;\n            this.texture.dispose();\n            this.texture = new Three.Texture(redoneCanvas);\n        }\n        else {\n            this.texture = new Three.Texture(canvas);\n        }\n        // Apply any relevant options to the texture desired to be set\n        this.texture.generateMipmaps = true;\n        this.texture.premultiplyAlpha = true;\n        this.textureSettings && Object.assign(this.texture, this.textureSettings);\n        this.texture.needsUpdate = true;\n    };\n    /**\n     * This frees up all the resources down to the GPU related to this atlas. It also\n     * loops through every resource and invalidates the texturing information within\n     * them so subsequent accidental renders will appear as a single color rather than\n     * an artifacted element.\n     */\n    Atlas.prototype.destroy = function () {\n        var _this = this;\n        this.texture.dispose();\n        this.validResources.forEach(function (isValid, resource) {\n            _this.invalidateResource(resource);\n        });\n    };\n    return Atlas;\n}(identify_by_key_1.IdentifyByKey));\nexports.Atlas = Atlas;\n","/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',\n  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',\n  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',\n  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',\n  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',\n  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',\n  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',\n  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',\n  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',\n  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',\n  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // Internet Explorer and Edge do not support colors.\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n    return false;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mouse_1 = require(\"../util/mouse\");\nvar quad_tree_1 = require(\"../util/quad-tree\");\n// If a mouse up after a mouse down happens before this many milliseconds, a click gesture will happen\nvar VALID_CLICK_DELAY = 1E3;\nfunction sortByDepth(a, b) {\n    return b.data.depth - a.data.depth;\n}\n/**\n * This manages mouse events on the provided canvas and provides some higher level\n * interactions with the surface.\n */\nvar MouseEventManager = /** @class */ (function () {\n    function MouseEventManager(canvas, views, controllers, handlesWheelEvents) {\n        var _this = this;\n        /**\n         * This flag is set when the system is waiting to render the elements to establish bounds.\n         * No Mouse interations will happen while this is set to true.\n         */\n        this._waitingForRender = true;\n        /**\n         * Retrieves the views underneath the mouse with the top most view as\n         * the first view in the list.\n         */\n        this.getViewsUnderMouse = function (mouse) {\n            // Find the views the mouse has interacted with\n            var hitViews = _this.quadTree.query(mouse);\n            // Sort them by depth\n            hitViews.sort(sortByDepth);\n            return hitViews;\n        };\n        /**\n         * When the renderer is resized, we must reform our quad tree\n         */\n        this.resize = function () {\n            _this._waitingForRender = true;\n        };\n        this.context = canvas;\n        this.setViews(views);\n        this.setControllers(controllers);\n        this.addContextListeners(handlesWheelEvents);\n    }\n    Object.defineProperty(MouseEventManager.prototype, \"waitingForRender\", {\n        get: function () {\n            return this._waitingForRender;\n        },\n        set: function (val) {\n            this._waitingForRender = val;\n            // When we're no longer waiting for render to occur we update all of our views in the quad tree\n            if (!val) {\n                this.quadTree = new quad_tree_1.QuadTree(0, 0, 0, 0);\n                this.quadTree.addAll(this.views.map(function (v) { return v.bounds; }).filter(Boolean));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This sets up the DOM events to listen to the events that are broadcasted by the canvas.\n     * These events are set up in such a way as to continue some events when the user\n     * drags the mouse off of the browser or off the canvas without releasing.\n     */\n    MouseEventManager.prototype.addContextListeners = function (handlesWheelEvents) {\n        var _this = this;\n        var element = this.context;\n        var startView = null;\n        var startPosition = null;\n        if (handlesWheelEvents) {\n            element.onmousewheel = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                var wheel = _this.makeWheel(event);\n                _this.controllers.forEach(function (controller) {\n                    controller.handleWheel(interaction, wheel);\n                });\n                event.stopPropagation();\n                event.preventDefault();\n            };\n        }\n        element.onmouseleave = function (event) {\n            // No interactions while waiting for the render to update\n            if (_this.waitingForRender)\n                return;\n            var mouse = mouse_1.eventElementPosition(event, element);\n            var interaction = _this.makeInteraction(mouse, startPosition, startView);\n            _this.controllers.forEach(function (controller) {\n                controller.handleMouseOut(interaction);\n            });\n        };\n        element.onmousemove = function (event) {\n            // No interactions while waiting for the render to update\n            if (_this.waitingForRender)\n                return;\n            var mouse = mouse_1.eventElementPosition(event, element);\n            var interaction = _this.makeInteraction(mouse, startPosition, startView);\n            _this.controllers.forEach(function (controller) {\n                controller.handleMouseMove(interaction);\n            });\n        };\n        element.onmousedown = function (event) {\n            // No interactions while waiting for the render to update\n            if (_this.waitingForRender)\n                return;\n            startPosition = mouse_1.eventElementPosition(event, element);\n            var downViews = _this.getViewsUnderMouse(startPosition);\n            // While this is true, when mouse up happens, the click gesture will execute\n            var canClick = true;\n            var clickStartTime = Date.now();\n            // If no views under this view, then we just quick exit with no interactions\n            if (downViews.length <= 0) {\n                return;\n            }\n            startView = downViews[0].data;\n            var interaction = _this.makeInteraction(startPosition, startPosition, startView);\n            var currentPosition = startPosition;\n            _this.controllers.forEach(function (controller) {\n                controller.handleMouseDown(interaction, event.button);\n            });\n            event.stopPropagation();\n            document.onmousemove = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                var delta = {\n                    x: mouse.x - currentPosition.x,\n                    y: mouse.y - currentPosition.y,\n                };\n                var drag = _this.makeDrag(mouse, startPosition, currentPosition, delta);\n                currentPosition = mouse;\n                _this.controllers.forEach(function (controller) {\n                    controller.handleDrag(interaction, drag);\n                });\n                // If we move after a mouse down, it's no longer a click\n                canClick = false;\n            };\n            document.onmouseup = function (event) {\n                document.onmousemove = null;\n                document.onmouseup = null;\n                document.onmouseover = null;\n            };\n            document.onmouseover = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                _this.controllers.forEach(function (controller) {\n                    controller.handleMouseOver(interaction);\n                });\n                event.stopPropagation();\n            };\n            element.onmouseup = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                _this.controllers.forEach(function (controller) {\n                    controller.handleMouseUp(interaction);\n                });\n                // If we release the mouse before the valid click delay\n                if (canClick && Date.now() - clickStartTime < VALID_CLICK_DELAY) {\n                    _this.controllers.forEach(function (controller) {\n                        controller.handleClick(interaction, event.button);\n                    });\n                }\n            };\n            // Text will not be selected when it is being dragged\n            element.onselectstart = function () {\n                return false;\n            };\n        };\n        // Enable touch support\n        this.addTouchContextListeners();\n    };\n    MouseEventManager.prototype.addTouchContextListeners = function () {\n        var element = this.context;\n        element.ontouchstart = function (event) {\n            // TODO: This is the start work for the touch events. And this retains sentimental value.\n            // For (let i = 0, end = event.changedTouches.length; i < end; ++i) {\n            // TODO\n            // Const touch = event.changedTouches.item(i);\n            // CurrentTouches.set(touch.identifier, to);\n            // }\n        };\n        element.ontouchend = function (event) {\n            // TODO\n        };\n        element.ontouchmove = function (event) {\n            // TODO\n        };\n        element.ontouchcancel = function (event) {\n            // TODO\n        };\n    };\n    /**\n     * This generates the metrics for a drag gesture.\n     */\n    MouseEventManager.prototype.makeDrag = function (mouse, start, previous, delta) {\n        return {\n            screen: {\n                current: mouse,\n                delta: delta,\n                previous: previous,\n                start: start,\n            },\n        };\n    };\n    /**\n     * This makes the metrics for interactions with the views.\n     */\n    MouseEventManager.prototype.makeInteraction = function (mouse, start, startView) {\n        // Find the views the mouse has interacted with\n        var hitViews = this.getViewsUnderMouse(mouse);\n        return {\n            screen: {\n                mouse: mouse,\n            },\n            start: start && startView && {\n                mouse: startView.view.screenToView(mouse),\n                view: startView.view,\n            },\n            target: {\n                mouse: hitViews[0] && hitViews[0].data.view.screenToView(mouse),\n                view: hitViews[0] && hitViews[0].data.view,\n            },\n            viewsUnderMouse: hitViews.map(function (v) { return ({\n                mouse: v.data.view.screenToView(mouse),\n                view: v.data.view,\n            }); }),\n        };\n    };\n    MouseEventManager.prototype.makeWheel = function (event) {\n        var wheel = mouse_1.normalizeWheel(event);\n        return {\n            wheel: [wheel.x, wheel.y],\n        };\n    };\n    /**\n     * Sets the controllers to receive events from this manager.\n     */\n    MouseEventManager.prototype.setControllers = function (controllers) {\n        this.controllers = controllers;\n    };\n    /**\n     * Sets the views that gets queried for interactions.\n     */\n    MouseEventManager.prototype.setViews = function (views) {\n        this.views = views;\n    };\n    MouseEventManager.prototype.destroy = function () {\n        this.quadTree = null;\n        this.context.onmousedown = null;\n        this.context.onmousemove = null;\n    };\n    return MouseEventManager;\n}());\nexports.MouseEventManager = MouseEventManager;\n","\"use strict\";\n/**\n * This file is dedicted to the all important step of processing desired inputs from the layer\n * and coming up with automated generated uniforms and attributes that the shader's will need\n * in order to operate with the conveniences the library offers. This includes things such as\n * injecting camera projection uniforms, resource uniforms, animation adjustments etc etc.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\nfunction toVertexAttributeInternal(attribute) {\n    return Object.assign({}, attribute, { materialAttribute: null });\n}\nfunction toUniformInternal(uniform) {\n    return Object.assign({}, uniform, { materialUniforms: [] });\n}\n/**\n * This searches through attribute packing for the first empty slot it can find to fill.\n * If a slot is not available it will just start a new block.\n */\nfunction findEmptyBlock(attributes) {\n    var blocks = new Map();\n    var found = null;\n    var maxBlock = 0;\n    attributes.forEach(function (instanceAttribute) {\n        var block = instanceAttribute.block;\n        var index = instanceAttribute.blockIndex;\n        var size = instanceAttribute.size;\n        var usedBlocks = blocks.get(block);\n        maxBlock = Math.max(block, maxBlock);\n        if (!usedBlocks) {\n            usedBlocks = new Map();\n            blocks.set(block, usedBlocks);\n        }\n        for (var i = index, end = index + size; i < end; ++i) {\n            usedBlocks.set(i, true);\n        }\n    });\n    blocks.forEach(function (usedBlocks, block) {\n        if (!usedBlocks.get(1))\n            found = [block, types_1.InstanceBlockIndex.ONE];\n        if (!usedBlocks.get(2))\n            found = [block, types_1.InstanceBlockIndex.TWO];\n        if (!usedBlocks.get(3))\n            found = [block, types_1.InstanceBlockIndex.THREE];\n        if (!usedBlocks.get(4))\n            found = [block, types_1.InstanceBlockIndex.FOUR];\n    });\n    // If no block was ever found, then we take the max block detected and make\n    // A new block after it\n    if (!found) {\n        found = [maxBlock + 1, 0];\n    }\n    return found;\n}\nfunction sortByResourceAttributes(a, b) {\n    if (a.atlas && !b.atlas)\n        return -1;\n    return 1;\n}\nfunction injectShaderIO(layer, shaderIO) {\n    // Retrieve all of the instance attributes that are atlas references\n    var atlasInstanceAttributes = [];\n    // Key: The atlas uniform name requested\n    var requestedAtlasInjections = new Map();\n    // Get the atlas requests that have unique names. We only need one uniform\n    // For a single unique provided name. We also must merge the requests for\n    // Vertex and fragment injections\n    shaderIO.instanceAttributes.forEach(function (attribute) {\n        if (attribute.atlas) {\n            // Auto set the size of the attribute. Attribute's that are a resource automatically\n            // Consume a size of four\n            attribute.size = types_1.InstanceAttributeSize.FOUR;\n            attribute.blockIndex = types_1.InstanceBlockIndex.ONE;\n            // Get the atlas resource uniform (sampler2D) injection targets. We default to only the\n            // Fragment shader as it's the most commonly used location for sampler2Ds\n            var injection = attribute.atlas.shaderInjection || types_1.ShaderInjectionTarget.FRAGMENT;\n            // See if we already have an injection for the given injected uniform name for an atlas resource.\n            var injections = requestedAtlasInjections.get(attribute.atlas.name);\n            if (injections) {\n                requestedAtlasInjections.set(attribute.atlas.name, [\n                    injections[0] ||\n                        injection === types_1.ShaderInjectionTarget.VERTEX ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                    injections[1] ||\n                        injection === types_1.ShaderInjectionTarget.FRAGMENT ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                ]);\n            }\n            else {\n                atlasInstanceAttributes.push(attribute);\n                requestedAtlasInjections.set(attribute.atlas.name, [\n                    injection === types_1.ShaderInjectionTarget.VERTEX ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                    injection === types_1.ShaderInjectionTarget.FRAGMENT ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                ]);\n            }\n        }\n    });\n    // Make uniforms for all of the unique atlas requests.\n    var atlasUniforms = atlasInstanceAttributes.map(function (instanceAttribute) {\n        var injections = requestedAtlasInjections.get(instanceAttribute.atlas.name);\n        var injection = (injections[0] && injections[1] && types_1.ShaderInjectionTarget.ALL) ||\n            (injections[0] && !injections[1] && types_1.ShaderInjectionTarget.VERTEX) ||\n            (!injections[0] && injections[1] && types_1.ShaderInjectionTarget.FRAGMENT);\n        return {\n            name: instanceAttribute.atlas.name,\n            shaderInjection: injection,\n            size: types_1.UniformSize.ATLAS,\n            update: function () { return layer.resource.getAtlasTexture(instanceAttribute.atlas.key); },\n        };\n    });\n    // These are the uniforms that should be present in the shader for basic operation\n    var addedUniforms = atlasUniforms.concat([\n        // This injects the projection matrix from the view camera\n        {\n            name: 'projection',\n            size: types_1.UniformSize.MATRIX4,\n            update: function () { return layer.view.viewCamera.baseCamera.projectionMatrix.elements; },\n        },\n        // This injects the model view matrix from the view camera\n        {\n            name: 'modelView',\n            size: types_1.UniformSize.MATRIX4,\n            update: function () { return layer.view.viewCamera.baseCamera.matrix.elements; },\n        },\n        // This injects the camera offset uniforms that need to be present for projecting in a more\n        // Chart centric style\n        {\n            name: 'cameraOffset',\n            size: types_1.UniformSize.THREE,\n            update: function () { return layer.view.camera.offset; },\n        },\n        // This injects the camera scaling uniforms that need to be present for projecting in a more\n        // Chart centric style\n        {\n            name: 'cameraScale',\n            size: types_1.UniformSize.THREE,\n            update: function () { return layer.view.camera.scale; },\n        },\n        // This injects the camera scaling uniforms that need to be present for projecting in a more\n        // Chart centric style\n        {\n            name: 'viewSize',\n            size: types_1.UniformSize.TWO,\n            update: function () { return [layer.view.viewBounds.width, layer.view.viewBounds.height]; },\n        },\n        // This injects the current layer's pixel ratio so pixel ratio dependent items can react to it\n        // Things like gl_PointSize will need this metric if not working in clip space\n        {\n            name: 'pixelRatio',\n            size: types_1.UniformSize.ONE,\n            update: function () { return [layer.view.pixelRatio]; },\n        },\n    ]);\n    // Seek an empty block within the layer provided uniforms so we can fill a hole potentially\n    // With the _active attribute.\n    var fillBlock = findEmptyBlock(shaderIO.instanceAttributes);\n    var addedInstanceAttributes = [\n        // This is injected so the system can control when an instance should not be rendered.\n        // This allows for holes to be in the buffer without having to correct them immediately\n        {\n            block: fillBlock[0],\n            blockIndex: fillBlock[1],\n            name: '_active',\n            size: types_1.InstanceAttributeSize.ONE,\n            update: function (o) { return [o.active ? 1 : 0]; },\n        },\n    ];\n    // Set the active attribute to the layer for quick reference\n    layer.activeAttribute = addedInstanceAttributes[0];\n    var addedVertexAttributes = [\n        // We add an inherent instance attribute to our vertices so they can determine the instancing\n        // Data to retrieve.\n        {\n            name: 'instance',\n            size: types_1.VertexAttributeSize.ONE,\n            // We no op this as our geomtry generating routine will establish the values needed here\n            update: function () { return [0]; },\n        },\n    ];\n    // Aggregate all of the injected shaderIO with the layer's shaderIO\n    var vertexAttributes = addedVertexAttributes\n        .concat(shaderIO.vertexAttributes)\n        .map(toVertexAttributeInternal);\n    var uniforms = addedUniforms\n        .concat(shaderIO.uniforms)\n        .map(toUniformInternal);\n    var instanceAttributes = addedInstanceAttributes\n        .concat(shaderIO.instanceAttributes)\n        .sort(sortByResourceAttributes);\n    return {\n        instanceAttributes: instanceAttributes,\n        uniforms: uniforms,\n        vertexAttributes: vertexAttributes,\n    };\n}\nexports.injectShaderIO = injectShaderIO;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar types_1 = require(\"../types\");\nvar UNIFORM_SIZE_TO_MATERIAL_TYPE = (_a = {},\n    _a[types_1.UniformSize.ONE] = 'f',\n    _a[types_1.UniformSize.TWO] = 'v2',\n    _a[types_1.UniformSize.THREE] = 'v3',\n    _a[types_1.UniformSize.FOUR] = 'v4',\n    _a[types_1.UniformSize.MATRIX3] = 'Matrix3fv',\n    _a[types_1.UniformSize.MATRIX4] = 'Matrix4fv',\n    _a);\nvar DEFAULT_UNIFORM_VALUE = (_b = {},\n    _b[types_1.UniformSize.ONE] = [0],\n    _b[types_1.UniformSize.TWO] = [0, 0],\n    _b[types_1.UniformSize.THREE] = [0, 0, 0],\n    _b[types_1.UniformSize.FOUR] = [0, 0, 0, 0],\n    _b[types_1.UniformSize.MATRIX3] = [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    _b[types_1.UniformSize.MATRIX4] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    _b);\nfunction toMaterialUniform(uniform) {\n    return {\n        type: UNIFORM_SIZE_TO_MATERIAL_TYPE[uniform.size],\n        value: DEFAULT_UNIFORM_VALUE[uniform.size],\n    };\n}\nfunction generateLayerMaterial(layer, vs, fs, layerUniforms, instancingUniforms) {\n    // We now need to establish the material for the layer\n    var materialParams = layer.getMaterialOptions();\n    materialParams.vertexShader = vs;\n    materialParams.fragmentShader = fs;\n    // We must convert all of the uniforms to actual Three material initialization uniforms\n    materialParams.uniforms = {};\n    // Convert our non-instancing uniforms to our material uniforms\n    for (var i = 0, end = layerUniforms.length; i < end; ++i) {\n        var uniform = layerUniforms[i];\n        var materialUniform = toMaterialUniform(uniform);\n        materialParams.uniforms[uniform.name] = materialUniform;\n    }\n    // Add in the generated instancing uniforms\n    for (var i = 0, end = instancingUniforms.length; i < end; ++i) {\n        var generatedUniform = instancingUniforms[i];\n        materialParams.uniforms[generatedUniform.name] = {\n            type: generatedUniform.type,\n            value: generatedUniform.value,\n        };\n    }\n    return new Three.RawShaderMaterial(materialParams);\n}\nexports.generateLayerMaterial = generateLayerMaterial;\nvar _a, _b;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nfunction isNumberCluster(val) {\n    return !Array.isArray(val[0]);\n}\nfunction generateLayerGeometry(maxInstancesPerBuffer, vertexAttributes, vertexCount) {\n    // Make the new buffers to be updated\n    var vertexBuffers = [];\n    for (var i = 0, end = vertexAttributes.length; i < end; ++i) {\n        var attribute_1 = vertexAttributes[i];\n        vertexBuffers.push(new Float32Array((attribute_1.size) * vertexCount * maxInstancesPerBuffer));\n    }\n    // Let's now fill in the baseline geometry with the instances we will be generating\n    // First we ask the layer for a single instance's buffer setup\n    var endk = vertexAttributes.length;\n    var buffer;\n    var attribute;\n    var value;\n    var formatError;\n    for (var i = 0, end = vertexCount; i < end; ++i) {\n        for (var k = 0; k < endk; ++k) {\n            attribute = vertexAttributes[k];\n            buffer = vertexBuffers[k];\n            value = attribute.update(i);\n            if (isNumberCluster(value)) {\n                for (var j = i * attribute.size, endj = j + attribute.size, index = 0; j < endj; ++j, ++index) {\n                    buffer[j] = value[index];\n                }\n            }\n            else {\n                formatError = true;\n            }\n        }\n    }\n    if (formatError) {\n        console.warn('A vertex buffer updating method should not use arrays of arrays of numbers.');\n    }\n    // After getting the geometry for a single instance, we can now copy paste\n    // For subsequent instances using very fast FLoat32 methods\n    for (var i = 0, end = vertexAttributes.length; i < end; ++i) {\n        var attribute_2 = vertexAttributes[i];\n        var instanceSize = (attribute_2.size) * vertexCount;\n        // Copy the first buffer set into the rest of the buffer\n        for (var k = 1, endk_1 = maxInstancesPerBuffer; k < endk_1; ++k) {\n            vertexBuffers[i].copyWithin(instanceSize * k, 0, instanceSize);\n        }\n    }\n    // Lastly, we make the instance attribute reflect correctly so each instance\n    // Can have varied information\n    var instancingBuffer = vertexBuffers[0];\n    for (var i = 0, end = maxInstancesPerBuffer; i < end; ++i) {\n        var instanceStartIndex = i * vertexCount;\n        for (var k = 0; k < vertexCount; ++k) {\n            instancingBuffer[k + instanceStartIndex] = i;\n        }\n    }\n    // Now we can generate the attributes and apply them to a geometry object\n    var geometry = new Three.BufferGeometry();\n    for (var i = 0, end = vertexAttributes.length; i < end; ++i) {\n        var attribute_3 = vertexAttributes[i];\n        var materialAttribute = new Three.BufferAttribute(vertexBuffers[i], attribute_3.size);\n        attribute_3.materialAttribute = materialAttribute;\n        geometry.addAttribute(attribute_3.name, materialAttribute);\n    }\n    return geometry;\n}\nexports.generateLayerGeometry = generateLayerGeometry;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\nvar DataBounds = /** @class */ (function (_super) {\n    __extends(DataBounds, _super);\n    function DataBounds() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DataBounds.emptyBounds = function () {\n        return new DataBounds({\n            height: 0,\n            width: 0,\n            x: 0,\n            y: 0,\n        });\n    };\n    return DataBounds;\n}(bounds_1.Bounds));\nexports.DataBounds = DataBounds;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar chart_camera_1 = require(\"../util/chart-camera\");\nvar view_camera_1 = require(\"../util/view-camera\");\nvar scene_1 = require(\"./scene\");\nvar view_1 = require(\"./view\");\n/**\n * This generates all of the cameras/views/scenes necessary for default viewing of elements.\n *\n * These defaults are required to ensure the following:\n *\n * - Orthographic view\n * - top left corner of the canvas is 0,0\n * - y axis is +y downward\n * - entire canvas is the viewport.\n */\nfunction generateDefaultScene(context) {\n    // Generate a default view camera that is\n    // - Orthographic\n    // - (0, 0) is the top left of the canvas\n    // - the y axis is +y going downward\n    var height = context.canvas.height;\n    var width = context.canvas.width;\n    var aspectRatio = width / height;\n    var viewport = {\n        aspectRatio: aspectRatio,\n        bottom: -height / 2,\n        far: 10000000,\n        left: -width / 2,\n        near: -100,\n        right: width / 2,\n        top: height / 2,\n        viewSize: height,\n    };\n    var defaultCamera = new view_camera_1.ViewCamera();\n    defaultCamera.baseCamera = new Three.OrthographicCamera(viewport.left, viewport.right, viewport.top, viewport.bottom, viewport.near, viewport.far);\n    defaultCamera.baseCamera.scale.set(1.0, -1.0, 1.0);\n    defaultCamera.baseCamera.position.set(0.0, 0.0, -300.0);\n    defaultCamera.baseCamera.updateMatrixWorld(true);\n    defaultCamera.baseCamera.updateMatrix();\n    if (defaultCamera.baseCamera instanceof Three.OrthographicCamera) {\n        defaultCamera.baseCamera.updateProjectionMatrix();\n    }\n    // Generate a charting camera with all scales set to 1 and no offsets in any direction\n    var defaultChartCamera = new chart_camera_1.ChartCamera();\n    // This is a viewport that covers the entire context\n    var defaultViewport = {\n        bottom: 0,\n        left: 0,\n        right: 0,\n        top: 0,\n    };\n    // Make a view using our defaults\n    var defaultView = new view_1.View({\n        camera: defaultChartCamera,\n        key: view_1.View.DEFAULT_VIEW_ID,\n        viewCamera: defaultCamera,\n        viewport: defaultViewport,\n    });\n    // Make a scene with our defaults\n    var defaultScene = new scene_1.Scene({\n        key: scene_1.Scene.DEFAULT_SCENE_ID,\n        views: [],\n    });\n    // Make sure the default view is a part of the default scene\n    defaultScene.addView(defaultView);\n    return {\n        camera: defaultChartCamera,\n        scene: defaultScene,\n        view: defaultView,\n        viewCamera: defaultCamera,\n        viewport: defaultViewport,\n    };\n}\nexports.generateDefaultScene = generateDefaultScene;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar INSTANCE_UNIFORM_ATTRIBUTE_PREFIX = 'u';\nfunction makeInstanceUniformNameArray() {\n    return \"instanceData\";\n}\nexports.makeInstanceUniformNameArray = makeInstanceUniformNameArray;\nfunction makeInstanceUniformNameTree(index) {\n    return \"\" + INSTANCE_UNIFORM_ATTRIBUTE_PREFIX + index.toString(31);\n}\nexports.makeInstanceUniformNameTree = makeInstanceUniformNameTree;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.templateVars = {\n    attributeFragments: 'attributeFragments',\n    attributes: 'attributes',\n    blocksPerInstance: 'blocksPerInstance',\n    instanceBlockCount: 'instanceBlockCount',\n    instanceDataBinaryTree: 'instanceDataBinaryTree',\n    instanceDataRetrieval: 'instanceDataRetrieval',\n    instanceDestructuring: 'instanceDestructuring',\n    instanceFragments: 'instanceFragments',\n    instanceUniformDeclarations: 'instanceUniformDeclarations',\n    layerUniforms: 'layerUniforms',\n    projectionMethods: 'projectionMethods',\n    shader: 'shader',\n    shaderInput: 'shaderInput',\n    vertexAttributes: 'vertexAttributes',\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getProgramInfo(gl, program) {\n    var result = {\n        attributeCount: 0,\n        attributes: new Array(),\n        uniformCount: 0,\n        uniforms: new Array(),\n    }, activeUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS), activeAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    // Taken from the WebGl spec:\n    // Http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14\n    var enums = {\n        0x8B50: 'FLOAT_VEC2',\n        0x8B51: 'FLOAT_VEC3',\n        0x8B52: 'FLOAT_VEC4',\n        0x8B53: 'INT_VEC2',\n        0x8B54: 'INT_VEC3',\n        0x8B55: 'INT_VEC4',\n        0x8B56: 'BOOL',\n        0x8B57: 'BOOL_VEC2',\n        0x8B58: 'BOOL_VEC3',\n        0x8B59: 'BOOL_VEC4',\n        0x8B5A: 'FLOAT_MAT2',\n        0x8B5B: 'FLOAT_MAT3',\n        0x8B5C: 'FLOAT_MAT4',\n        0x8B5E: 'SAMPLER_2D',\n        0x8B60: 'SAMPLER_CUBE',\n        0x1400: 'BYTE',\n        0x1401: 'UNSIGNED_BYTE',\n        0x1402: 'SHORT',\n        0x1403: 'UNSIGNED_SHORT',\n        0x1404: 'INT',\n        0x1405: 'UNSIGNED_INT',\n        0x1406: 'FLOAT',\n    };\n    var blocks = {\n        0x8B50: 1,\n        0x8B51: 1,\n        0x8B52: 1,\n        0x8B53: 1,\n        0x8B54: 1,\n        0x8B55: 1,\n        0x8B56: 1,\n        0x8B57: 1,\n        0x8B58: 1,\n        0x8B59: 1,\n        0x8B5A: 1,\n        0x8B5B: 3,\n        0x8B5C: 4,\n        0x8B5E: 1,\n        0x8B60: 1,\n        0x1400: 1,\n        0x1401: 1,\n        0x1402: 1,\n        0x1403: 1,\n        0x1404: 1,\n        0x1405: 1,\n        0x1406: 1,\n    };\n    // Loop through active uniforms\n    for (var i = 0; i < activeUniforms; ++i) {\n        var uniform = gl.getActiveUniform(program, i);\n        uniform.typeName = enums[uniform.type];\n        result.uniforms.push(uniform);\n        result.uniformCount += uniform.size;\n        uniform.size = uniform.size * blocks[uniform.type];\n    }\n    // Loop through active attributes\n    for (var i = 0; i < activeAttributes; i++) {\n        var attribute = gl.getActiveAttrib(program, i);\n        attribute.typeName = enums[attribute.type];\n        result.attributes.push(attribute);\n        result.attributeCount += attribute.size;\n    }\n    return result;\n}\nexports.getProgramInfo = getProgramInfo;\nvar WebGLStat = /** @class */ (function () {\n    function WebGLStat() {\n    }\n    WebGLStat.MAX_VERTEX_UNIFORMS = 0;\n    WebGLStat.MAX_FRAGMENT_UNIFORMS = 0;\n    WebGLStat.MAX_ATTRIBUTES = 0;\n    WebGLStat.WEBGL_SUPPORTED = false;\n    WebGLStat.MAX_TEXTURE_SIZE = 0;\n    return WebGLStat;\n}());\nexports.WebGLStat = WebGLStat;\nfunction initStats() {\n    // Let's perform some immediate operations to do some gl querying for useful information\n    function getAContext() {\n        try {\n            var canvas = document.createElement('canvas');\n            return window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    // Attempt to retrieve a context for webgl\n    var gl = getAContext();\n    // If the context exists, then we know gl is supported and we can fill in some metrics\n    if (gl) {\n        WebGLStat.WEBGL_SUPPORTED = true;\n        WebGLStat.MAX_VERTEX_UNIFORMS = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n        WebGLStat.MAX_FRAGMENT_UNIFORMS = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n        WebGLStat.MAX_ATTRIBUTES = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n        WebGLStat.MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    }\n}\ninitStats();\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar event_manager_1 = require(\"../surface/event-manager\");\nvar BasicCameraController = /** @class */ (function (_super) {\n    __extends(BasicCameraController, _super);\n    function BasicCameraController(options) {\n        var _this = _super.call(this) || this;\n        /**\n         * This flag is set to true when a start view is targetted on mouse down even if it is not\n         * the top most view.\n         */\n        _this.startViewDidStart = false;\n        _this.camera = options.camera;\n        _this.scaleFactor = options.scaleFactor || 1000.0;\n        _this.ignoreCoverViews = options.ignoreCoverViews || false;\n        if (options.startView) {\n            _this.startViews = Array.isArray(options.startView) ? options.startView : [options.startView];\n        }\n        return _this;\n    }\n    BasicCameraController.prototype.findCoveredStartView = function (e) {\n        var _this = this;\n        var found = e.viewsUnderMouse.find(function (under) { return _this.startViews.indexOf(under.view.id) > -1; });\n        this.startViewDidStart = Boolean(found);\n        if (found) {\n            this.coveredStartView = found.view;\n        }\n    };\n    BasicCameraController.prototype.getTargetView = function (e) {\n        // If we have a start view and we do not ignore covering views,\n        // Then our target view is the view we started with\n        if (this.startViews && !this.ignoreCoverViews) {\n            return e.target.view;\n        }\n        // Otherwise, we use the covered start view\n        else {\n            return this.coveredStartView;\n        }\n    };\n    BasicCameraController.prototype.handleMouseDown = function (e, button) {\n        // We look for valid covered views on mouse down so dragging will work\n        this.findCoveredStartView(e);\n    };\n    BasicCameraController.prototype.handleMouseUp = function (e) {\n        this.startViewDidStart = false;\n    };\n    BasicCameraController.prototype.handleDrag = function (e, drag) {\n        if (this.canStart(e.start.view.id)) {\n            this.camera.offset[0] += drag.screen.delta.x / this.camera.scale[0];\n            this.camera.offset[1] += drag.screen.delta.y / this.camera.scale[1];\n        }\n    };\n    BasicCameraController.prototype.handleWheel = function (e, wheelMetrics) {\n        // Every mouse wheel event must look to see if it's over a valid covered start view\n        this.findCoveredStartView(e);\n        if (this.canStart(e.target.view.id)) {\n            var targetView = this.getTargetView(e);\n            var beforeZoom = targetView.screenToWorld(e.screen.mouse);\n            var currentZoomX = this.camera.scale[0] || 1.0;\n            this.camera.scale[0] = currentZoomX + wheelMetrics.wheel[1] / this.scaleFactor * currentZoomX;\n            var currentZoomY = this.camera.scale[1] || 1.0;\n            this.camera.scale[1] = currentZoomY + wheelMetrics.wheel[1] / this.scaleFactor * currentZoomY;\n            var afterZoom = targetView.screenToWorld(e.screen.mouse);\n            this.camera.offset[0] -= (beforeZoom.x - afterZoom.x) / targetView.pixelRatio;\n            this.camera.offset[1] -= (beforeZoom.y - afterZoom.y) / targetView.pixelRatio;\n        }\n    };\n    BasicCameraController.prototype.canStart = function (viewId) {\n        return (!this.startViews ||\n            this.startViews.length === 0 ||\n            (this.startViews && this.startViews.indexOf(viewId) > -1) ||\n            this.startViewDidStart && this.ignoreCoverViews);\n    };\n    return BasicCameraController;\n}(event_manager_1.EventManager));\nexports.BasicCameraController = BasicCameraController;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar event_manager_1 = require(\"../surface/event-manager\");\n/**\n * This is merely a controller to log mouse events for debugging.\n */\nvar LogController = /** @class */ (function (_super) {\n    __extends(LogController, _super);\n    function LogController() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    LogController.prototype.handleMouseDown = function (e, button) {\n        console.warn('MOUSE DOWN', e, button);\n    };\n    LogController.prototype.handleMouseUp = function (e) {\n        console.warn('MOUSE UP', e);\n    };\n    LogController.prototype.handleMouseOver = function (e) {\n        console.warn('MOUSE OVER', e);\n    };\n    LogController.prototype.handleMouseOut = function (e) {\n        console.warn('MOUSE OUT', e);\n    };\n    LogController.prototype.handleMouseMove = function (e) {\n        console.warn('MOUSE MOVE', e);\n    };\n    LogController.prototype.handleClick = function (e, button) {\n        console.warn('CLICK', e, button);\n    };\n    LogController.prototype.handleDrag = function (e, drag) {\n        console.warn('DRAG', e, drag);\n    };\n    return LogController;\n}(event_manager_1.EventManager));\nexports.LogController = LogController;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./log-controller\"));\n__export(require(\"./basic-camera-controller\"));\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float borderSize;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  vertexColor = color;\\n  gl_PointSize = radius * 2.0 * pixelRatio;\\n  borderSize = ((thickness * pixelRatio) / gl_PointSize) * 2.0;\\n  edgeSharpness = mix(0.8, 0.01, min(gl_PointSize / (45.0 * pixelRatio), 1.0));\\n  gl_Position = clipSpace(vec3(center, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\n/** This is the color of the ring */\\nvarying vec4 vertexColor;\\n/**\\n * This is how sharp the ring renders. For tiny rings, it's best to have\\n * less sharpness to better convey the shape of a circle. A good starter setting:\\n * edgeSharpness = mix(0.8, 0.01, min(gl_PointSize / 45.0, 1.0));\\n */\\nvarying float edgeSharpness;\\n/**\\n * This should be a value that sets the thickness of the ring in normal space\\n * relative to the PointSize\\n */\\nvarying float borderSize;\\n/**\\n * This is the ([0 - 1], [0 - 1])\\n */\\nvarying vec2 pointCoord;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius + (radius * 0.01),\\n    dot(dist, dist) * 4.0\\n  );\\n}\\n\\nvoid main() {\\n  float outer_step_factor = circle(gl_PointCoord.xy, 1.0);\\n  float inner_step_factor = circle(gl_PointCoord.xy, 1.0 - borderSize);\\n\\n  gl_FragColor = mix(\\n    mix(                        // Select the outer color outside of the inner radius\\n      vec4(0.0, 0.0, 0.0, 0.0),    // Select invisible outside of inner and outer radius\\n      vertexColor,                  // Select outer color outside of inner, but inside outer\\n      outer_step_factor\\n    ),\\n    vec4(0.0, 0.0, 0.0, 0.0),                 // Select inner color inside inner\\n    inner_step_factor\\n  );\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar RingLayer = /** @class */ (function (_super) {\n    __extends(RingLayer, _super);\n    function RingLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Define our shader and it's inputs\n     */\n    RingLayer.prototype.initShader = function () {\n        return {\n            fs: require('./ring-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'center',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'radius',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.radius]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.color; },\n                },\n                {\n                    block: 2,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'thickness',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.thickness]; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (_) { return [1]; },\n                },\n                {\n                    name: 'atlas',\n                    size: types_1.UniformSize.ONE,\n                    update: function (_) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    defaults: [0],\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (_) { return [0, 0, 0]; },\n                },\n            ],\n            vertexCount: 1,\n            vs: require('./ring-layer.vs'),\n        };\n    };\n    RingLayer.prototype.getModelType = function () {\n        return {\n            modelType: Three.Points,\n        };\n    };\n    RingLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return RingLayer;\n}(layer_1.Layer));\nexports.RingLayer = RingLayer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar util_1 = require(\"../../util\");\nvar RingInstance = /** @class */ (function (_super) {\n    __extends(RingInstance, _super);\n    function RingInstance(options) {\n        var _this = _super.call(this, options) || this;\n        _this.color = [1.0, 1.0, 1.0, 1.0];\n        _this.depth = 0;\n        _this.radius = 0;\n        _this.thickness = 1;\n        _this.x = 0;\n        _this.y = 0;\n        _this.color = options.color || [1, 1, 1, 1];\n        _this.depth = options.depth || 0;\n        _this.radius = options.radius;\n        _this.thickness = options.thickness || _this.thickness;\n        _this.x = options.x;\n        _this.y = options.y;\n        return _this;\n    }\n    Object.defineProperty(RingInstance.prototype, \"width\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RingInstance.prototype, \"height\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RingInstance.prototype, \"innerRadius\", {\n        get: function () {\n            return this.radius - this.thickness;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        mobx_1.observable\n    ], RingInstance.prototype, \"color\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RingInstance.prototype, \"depth\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RingInstance.prototype, \"radius\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RingInstance.prototype, \"thickness\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RingInstance.prototype, \"x\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RingInstance.prototype, \"y\", void 0);\n    __decorate([\n        mobx_1.computed\n    ], RingInstance.prototype, \"width\", null);\n    __decorate([\n        mobx_1.computed\n    ], RingInstance.prototype, \"height\", null);\n    __decorate([\n        mobx_1.computed\n    ], RingInstance.prototype, \"innerRadius\", null);\n    return RingInstance;\n}(util_1.Instance));\nexports.RingInstance = RingInstance;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./ring-instance\"));\n__export(require(\"./ring-layer\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar texture_1 = require(\"../../surface/texture\");\nvar instance_1 = require(\"../../util/instance\");\nvar types_1 = require(\"../types\");\n/**\n * This is a lookup to find existing rasterizations for a particularly created label so that every\n * new label does not have to go through the rasterization process.\n */\nvar rasterizationLookUp = new Map();\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nvar anchorCalculator = (_a = {},\n    _a[types_1.AnchorType.TopLeft] = function (anchor, label) {\n        anchor.x = -anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopMiddle] = function (anchor, label) {\n        anchor.x = label.width / 2.0;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopRight] = function (anchor, label) {\n        anchor.x = label.width + anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.MiddleLeft] = function (anchor, label) {\n        anchor.x = -anchor.padding;\n        anchor.y = label.height / 2;\n    },\n    _a[types_1.AnchorType.Middle] = function (anchor, label) {\n        anchor.x = label.width / 2.0;\n        anchor.y = label.height / 2.0;\n    },\n    _a[types_1.AnchorType.MiddleRight] = function (anchor, label) {\n        anchor.x = label.width + anchor.padding;\n        anchor.y = label.height / 2.0;\n    },\n    _a[types_1.AnchorType.BottomLeft] = function (anchor, label) {\n        anchor.x = -anchor.padding;\n        anchor.y = label.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomMiddle] = function (anchor, label) {\n        anchor.x = label.width / 2.0;\n        anchor.y = label.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomRight] = function (anchor, label) {\n        anchor.x = label.width + anchor.padding;\n        anchor.y = label.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.Custom] = function (anchor, label) {\n        anchor.x = anchor.x || 0;\n        anchor.y = anchor.y || 0;\n    },\n    _a);\n/**\n * This generates a new label instance which will render a single line of text for a given layer.\n * There are restrictions surrounding labels due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a label via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Labels should only be so long.\n * - Multiline is not supported inherently\n * - Once a label is constructed, only SOME properties can be altered thereafter\n *\n * A label that is constructed can only have some properties set upon creating the label and are locked\n * thereafter. The only way to modify them would be to destroy the label, then construct a new label\n * with the modifications. This has to deal with performance regarding rasterizing the label\n */\nvar LabelInstance = /** @class */ (function (_super) {\n    __extends(LabelInstance, _super);\n    function LabelInstance(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the rendered color of the label */\n        _this.color = [0, 0, 0, 1];\n        /** Depth sorting of the label (or the z value of the lable) */\n        _this.depth = 0;\n        /** Sets the way the label scales with the world */\n        _this.scaling = types_1.ScaleType.BOUND_MAX;\n        /** The x coordinate where the label will be anchored to in world space */\n        _this.x = 0;\n        /** The y coordinate where the label will be anchored to in world space */\n        _this.y = 0;\n        // The following properties are properties that are locked in after creating this label\n        // As the properties are completely locked into how the label was rasterized and can not\n        // Nor should not be easily adjusted for performance concerns\n        _this._cssFont = '';\n        _this._fontFamily = 'Arial';\n        _this._fontSize = 12;\n        _this._fontStyle = 'normal';\n        _this._fontWeight = 400;\n        _this._text = '';\n        _this._width = 0;\n        _this._height = 0;\n        _this._isDestroyed = false;\n        // These are properties that can be altered, but have side effects from being changed\n        /** This is the anchor location on the  */\n        _this._anchor = {\n            padding: 0,\n            type: types_1.AnchorType.TopLeft,\n            x: 0,\n            y: 0,\n        };\n        _this.depth = options.depth || _this.depth;\n        _this.color = options.color || _this.color;\n        _this.scaling = options.scaling || _this.scaling;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        _this._fontFamily = options.fontFamily || _this._fontFamily;\n        _this._fontSize = options.fontSize || _this._fontSize;\n        _this._fontStyle = options.fontStyle || _this._fontStyle;\n        _this._fontWeight = options.fontWeight || _this._fontWeight;\n        _this._text = options.text || _this._text;\n        // We get the CSS font string for this label so we can uniquely identify the rasterization\n        // Easily.\n        _this._cssFont = texture_1.LabelRasterizer.makeCSSFont(_this, 1);\n        // Look for other same texts that have been rasterized\n        var rasterizations = rasterizationLookUp.get(_this._text);\n        var rasterization;\n        if (rasterizations) {\n            // Look for those texts that have been rasterized in the same fashion that this label is requesting\n            rasterization = rasterizations.get(_this._cssFont);\n            // If a rasterization exists, we must increment the use reference\n            if (rasterization) {\n                rasterization.references++;\n            }\n        }\n        else {\n            rasterizations = new Map();\n        }\n        // If we have not found an existing rasterization\n        if (!rasterization) {\n            rasterization = {\n                references: 1,\n                resource: new texture_1.LabelAtlasResource(_this),\n            };\n            // Look to see if any rasterization options were specified\n            if (options.rasterization) {\n                rasterization.resource.sampleScale = options.rasterization.scale || 1.0;\n            }\n            // Ensure the sample scale is set. Defaults to 1.0\n            rasterization.resource.sampleScale = rasterization.resource.sampleScale || 1.0;\n            // Rasterize the resource generated for this label. We need it immediately rasterized so\n            // That we can utilize the dimensions for calculations.\n            texture_1.LabelRasterizer.renderSync(rasterization.resource);\n            // Now that we have an official rasterization for this text / label combo, we shall store it\n            // For others to look up\n            rasterizationLookUp.set(_this._text, rasterizations);\n            rasterizations.set(_this._cssFont, rasterization);\n        }\n        _this._rasterization = rasterization;\n        _this._width = rasterization.resource.rasterization.world.width;\n        _this._height = rasterization.resource.rasterization.world.height;\n        // Make sure the anchor is set to the appropriate location\n        options.anchor && _this.setAnchor(options.anchor);\n        return _this;\n    }\n    Object.defineProperty(LabelInstance.prototype, \"cssFont\", {\n        // The following are the getters for the locked in parameters of the label so we can read\n        // The properties but not set any of them.\n        /**\n         * This is the full css string that represents this label. This + the text of the label is essentially\n         * a unique identifier for the rendering of the label and is used to key the rasterization of the label\n         * so that label rasterization can be shared for similar labels.\n         */\n        get: function () { return this._cssFont; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"isDestroyed\", {\n        /** This flag indicates if this label is valid anymore */\n        get: function () { return this._isDestroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontFamily\", {\n        /** This is the font family of the label */\n        get: function () { return this._fontFamily; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontSize\", {\n        /**\n         * This is the size of the label in pixels. For Labels, this correlates to the rendering font size.\n         * The true pixel height of the label is calculated and placed into the height property for the label.\n         */\n        get: function () { return this._fontSize; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontStyle\", {\n        /** This is the style of the font (italic, oblique, etc) */\n        get: function () { return this._fontStyle; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontWeight\", {\n        /** This is the font weight specified for the label (bold, normal, etc). */\n        get: function () { return this._fontWeight; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"resource\", {\n        /** This gets the atlas resource that is uniquely idenfied for this label */\n        get: function () { return this._rasterization.resource; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"text\", {\n        /** This is the label's text. */\n        get: function () { return this._text; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"width\", {\n        /**\n         * This is the width in world space of the label. If there is no camera distortion,\n         * this would be the width of the label in pixels on the screen.\n         */\n        get: function () {\n            return this._width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"height\", {\n        /**\n         * This is the height in world space of the label. If there is no camera distortion,\n         * this would be the height of the label in pixels on the screen.\n         */\n        get: function () {\n            return this._height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Labels are a sort of unique case where the use of a label should be destroyed as rasterization\n     * resources are in a way kept alive through reference counting.\n     */\n    LabelInstance.prototype.destroy = function () {\n        if (!this._isDestroyed) {\n            this._isDestroyed = true;\n            this._rasterization.references--;\n            // If all references are cleared, then the rasterization needs to be eradicated\n            if (this._rasterization.references === 0) {\n                this._rasterization.resource;\n            }\n        }\n    };\n    Object.defineProperty(LabelInstance.prototype, \"anchor\", {\n        get: function () {\n            return this._anchor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This applies a new anchor to this label and properly determines it's anchor position on the label\n     */\n    LabelInstance.prototype.setAnchor = function (anchor) {\n        var newAnchor = {\n            padding: anchor.padding || 0,\n            type: anchor.type,\n            x: anchor.x || 0,\n            y: anchor.y || 0,\n        };\n        // Calculate the new anchors position values\n        anchorCalculator[newAnchor.type](newAnchor, this);\n        // Apply the anchor\n        this._anchor = newAnchor;\n    };\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"color\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"depth\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"scaling\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"x\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"y\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"_anchor\", void 0);\n    __decorate([\n        mobx_1.computed\n    ], LabelInstance.prototype, \"anchor\", null);\n    return LabelInstance;\n}(instance_1.Instance));\nexports.LabelInstance = LabelInstance;\nvar _a;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the label as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the label is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y;\\n\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  bool unequalZooms = cameraScale.x > cameraScale.y || cameraScale.y > cameraScale.x;\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n\\n  // Correct aspect ratio.\\n  size = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    float(unequalZooms)\\n  );\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    float(unequalZooms)\\n  );\\n\\n  // Get the position of the current vertex\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * size + location - adjustedAnchor;\\n  // Get the tex coord from our inject texture info\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the label's color as a tint to the label (all labels are rendered white to the base texture)\\n  vertexColor = color;\\n\\n  // See how scaled the size on screen will be from the actual height of the label\\n  float labelScreenScale = mix(\\n    screenSize.y / size.y,\\n    screenSize.x / size.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the label is supposed to be, then we automagically\\n  // scale down our label to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / labelScreenScale) + location,\\n    float(\\n      (\\n        scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n        (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n      ) &&\\n      scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n    )\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  gl_FragColor = texture2D(labelAtlas, texCoord) * vertexColor;\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\n/**\n * This layer displays Labels and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar LabelLayer = /** @class */ (function (_super) {\n    __extends(LabelLayer, _super);\n    function LabelLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Define our shader and it's inputs\n     */\n    LabelLayer.prototype.initShader = function () {\n        var _this = this;\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: 0,\n            1: 0,\n            2: 0,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./label-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'location',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'anchor',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.anchor.x, o.anchor.y]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'size',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.width, o.height]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'scaling',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scaling]; },\n                },\n                {\n                    atlas: {\n                        key: this.props.atlas,\n                        name: 'labelAtlas',\n                    },\n                    block: 2,\n                    name: 'texture',\n                    update: function (o) { return _this.resource.request(_this, o, o.resource); },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.color; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (u) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./label-layer.vs'),\n        };\n    };\n    LabelLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    LabelLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return LabelLayer;\n}(layer_1.Layer));\nexports.LabelLayer = LabelLayer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./label-layer\"));\n__export(require(\"./label-instance\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar texture_1 = require(\"../../surface/texture\");\nvar instance_1 = require(\"../../util/instance\");\nvar types_1 = require(\"../types\");\n/**\n * This is a lookup to find existing rasterizations for a particularly created image so that every\n * new image does not have to go through the rasterization process.\n */\nvar rasterizationLookUp = new Map();\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nvar anchorCalculator = (_a = {},\n    _a[types_1.AnchorType.TopLeft] = function (anchor, image) {\n        anchor.x = -anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopMiddle] = function (anchor, image) {\n        anchor.x = image.width / 2.0;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopRight] = function (anchor, image) {\n        anchor.x = image.width + anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.MiddleLeft] = function (anchor, image) {\n        anchor.x = -anchor.padding;\n        anchor.y = image.height / 2;\n    },\n    _a[types_1.AnchorType.Middle] = function (anchor, image) {\n        anchor.x = image.width / 2.0;\n        anchor.y = image.height / 2.0;\n    },\n    _a[types_1.AnchorType.MiddleRight] = function (anchor, image) {\n        anchor.x = image.width + anchor.padding;\n        anchor.y = image.height / 2.0;\n    },\n    _a[types_1.AnchorType.BottomLeft] = function (anchor, image) {\n        anchor.x = -anchor.padding;\n        anchor.y = image.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomMiddle] = function (anchor, image) {\n        anchor.x = image.width / 2.0;\n        anchor.y = image.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomRight] = function (anchor, image) {\n        anchor.x = image.width + anchor.padding;\n        anchor.y = image.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.Custom] = function (anchor, image) {\n        anchor.x = anchor.x || 0;\n        anchor.y = anchor.y || 0;\n    },\n    _a);\n/**\n * This generates a new image instance which will render a single line of text for a given layer.\n * There are restrictions surrounding images due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a image via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Images should only be so long.\n * - Multiline is not supported inherently\n * - Once a image is constructed, only SOME properties can be altered thereafter\n *\n * A image that is constructed can only have some properties set upon creating the image and are locked\n * thereafter. The only way to modify them would be to destroy the image, then construct a new image\n * with the modifications. This has to deal with performance regarding rasterizing the image\n */\nvar ImageInstance = /** @class */ (function (_super) {\n    __extends(ImageInstance, _super);\n    function ImageInstance(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the rendered color of the image */\n        _this.tint = [0, 0, 0, 1];\n        /** Depth sorting of the image (or the z value of the lable) */\n        _this.depth = 0;\n        /** The height of the image as it is to be rendered in world space */\n        _this.height = 1;\n        /** Sets the way the image scales with the world */\n        _this.scaling = types_1.ScaleType.BOUND_MAX;\n        /** The width of the image as it is to be rendered in world space */\n        _this.width = 1;\n        /** The x coordinate where the image will be anchored to in world space */\n        _this.x = 0;\n        /** The y coordinate where the image will be anchored to in world space */\n        _this.y = 0;\n        // The following properties are properties that are locked in after creating this image\n        // As the properties are completely locked into how the image was rasterized and can not\n        // Nor should not be easily adjusted for performance concerns\n        _this._sourceWidth = 0;\n        _this._sourceHeight = 0;\n        _this._isDestroyed = false;\n        // These are properties that can be altered, but have side effects from being changed\n        /** This is the anchor location on the  */\n        _this._anchor = {\n            padding: 0,\n            type: types_1.AnchorType.TopLeft,\n            x: 0,\n            y: 0,\n        };\n        _this.depth = options.depth || _this.depth;\n        _this.tint = options.tint || _this.tint;\n        _this.scaling = options.scaling || _this.scaling;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        // This is the image that is to be rendered\n        _this._element = options.element;\n        // Look for other same texts that have been rasterized\n        var rasterization = rasterizationLookUp.get(_this._path || _this._element);\n        // If a rasterization exists, we must increment the use reference\n        if (rasterization) {\n            rasterization.references++;\n        }\n        // If we have not found an existing rasterization\n        if (!rasterization) {\n            rasterization = {\n                references: 1,\n                resource: new texture_1.ImageAtlasResource(_this),\n            };\n            // Ensure the sample scale is set. Defaults to 1.0\n            rasterization.resource.sampleScale = rasterization.resource.sampleScale || 1.0;\n            // Rasterize the resource generated for this image. We need it immediately rasterized so\n            // That we can utilize the dimensions for calculations.\n            texture_1.ImageRasterizer.renderSync(rasterization.resource);\n            // Now that we have an official rasterization for this image, we shall store it\n            // For others to look up\n            rasterizationLookUp.set(_this._path || _this._element, rasterization);\n        }\n        _this._rasterization = rasterization;\n        _this._sourceWidth = rasterization.resource.rasterization.world.width;\n        _this._sourceHeight = rasterization.resource.rasterization.world.height;\n        _this.width = options.width || _this._sourceWidth || 1;\n        _this.height = options.height || _this._sourceHeight || 1;\n        // Make sure the anchor is set to the appropriate location\n        options.anchor && _this.setAnchor(options.anchor);\n        return _this;\n    }\n    Object.defineProperty(ImageInstance.prototype, \"element\", {\n        // The following are the getters for the locked in parameters of the image so we can read\n        // The properties but not set any of them.\n        /** This is the provided element this image will be rendering */\n        get: function () { return this._element; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"isDestroyed\", {\n        /** This flag indicates if this image is valid anymore */\n        get: function () { return this._isDestroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"path\", {\n        /** This is the path to the image's resource if it's available */\n        get: function () { return this._path; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"resource\", {\n        /** This gets the atlas resource that is uniquely idenfied for this image */\n        get: function () { return this._rasterization.resource; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"sourceWidth\", {\n        /**\n         * This is the width in world space of the image. If there is no camera distortion,\n         * this would be the width of the image in pixels on the screen.\n         */\n        get: function () {\n            return this._sourceWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"sourceHeight\", {\n        /**\n         * This is the height in world space of the image. If there is no camera distortion,\n         * this would be the height of the image in pixels on the screen.\n         */\n        get: function () {\n            return this._sourceHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Images are a sort of unique case where the use of a image should be destroyed as rasterization\n     * resources are in a way kept alive through reference counting.\n     */\n    ImageInstance.prototype.destroy = function () {\n        if (!this._isDestroyed) {\n            this._isDestroyed = true;\n            this._rasterization.references--;\n            // If all references are cleared, then the rasterization needs to be eradicated\n            if (this._rasterization.references === 0) {\n                this._rasterization.resource;\n                console.warn('The destroy method still needs completion');\n            }\n        }\n    };\n    Object.defineProperty(ImageInstance.prototype, \"anchor\", {\n        get: function () {\n            return this._anchor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This applies a new anchor to this image and properly determines it's anchor position on the image\n     */\n    ImageInstance.prototype.setAnchor = function (anchor) {\n        var newAnchor = {\n            padding: anchor.padding || 0,\n            type: anchor.type,\n            x: anchor.x || 0,\n            y: anchor.y || 0,\n        };\n        // Calculate the new anchors position values\n        anchorCalculator[newAnchor.type](newAnchor, this);\n        // Apply the anchor\n        this._anchor = newAnchor;\n    };\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"tint\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"depth\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"height\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"scaling\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"width\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"x\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"y\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"_anchor\", void 0);\n    __decorate([\n        mobx_1.computed\n    ], ImageInstance.prototype, \"anchor\", null);\n    return ImageInstance;\n}(instance_1.Instance));\nexports.ImageInstance = ImageInstance;\nvar _a;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the image as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the image is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y;\\n\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  bool unequalZooms = cameraScale.x > cameraScale.y || cameraScale.y > cameraScale.x;\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n\\n  // Get the position of the current vertex\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the image's tint as a tint to the image\\n  vertexColor = tint;\\n\\n  // Correct aspect ratio.\\n  size = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    float(unequalZooms)\\n  );\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    float(unequalZooms)\\n  );\\n\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * size + location - adjustedAnchor;\\n  // Get the tex coord from our inject texture info\\n\\n  // See how scaled the size on screen will be from the actual height of the image\\n  float imageScreenScale = mix(\\n    screenSize.y / size.y,\\n    screenSize.x / size.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the image is supposed to be, then we automagically\\n  // scale down our image to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / imageScreenScale) + location,\\n    float(\\n      (\\n        scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n        (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n      ) &&\\n      scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n    )\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  gl_FragColor = texture2D(imageAtlas, texCoord) * vertexColor;\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\n/**\n * This layer displays Images and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar ImageLayer = /** @class */ (function (_super) {\n    __extends(ImageLayer, _super);\n    function ImageLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Define our shader and it's inputs\n     */\n    ImageLayer.prototype.initShader = function () {\n        var _this = this;\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: 0,\n            1: 0,\n            2: 0,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./image-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'location',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'anchor',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.anchor.x, o.anchor.y]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'size',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.width, o.height]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'scaling',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scaling]; },\n                },\n                {\n                    atlas: {\n                        key: this.props.atlas,\n                        name: 'imageAtlas',\n                    },\n                    block: 2,\n                    name: 'texture',\n                    update: function (o) { return _this.resource.request(_this, o, o.resource); },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'tint',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.tint; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (u) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./image-layer.vs'),\n        };\n    };\n    ImageLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    ImageLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return ImageLayer;\n}(layer_1.Layer));\nexports.ImageLayer = ImageLayer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./image-layer\"));\n__export(require(\"./image-instance\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar instance_1 = require(\"../../util/instance\");\nvar EdgeInstance = /** @class */ (function (_super) {\n    __extends(EdgeInstance, _super);\n    function EdgeInstance(options) {\n        var _this = _super.call(this, options) || this;\n        _this.colorStart = [1.0, 1.0, 1.0, 1.0];\n        _this.colorEnd = [1.0, 1.0, 1.0, 1.0];\n        _this.control = [[0, 0], [0, 0]];\n        _this.depth = 0;\n        _this.end = [0, 0];\n        _this.start = [0, 0];\n        _this.widthStart = 1.0;\n        _this.widthEnd = 1.0;\n        _this.colorStart = options.colorStart || _this.colorStart;\n        _this.colorEnd = options.colorEnd || _this.colorEnd;\n        _this.control = options.control || _this.control;\n        _this.depth = options.depth || _this.depth;\n        _this.end = options.end || _this.end;\n        _this.widthStart = options.widthStart || _this.widthStart;\n        _this.widthEnd = options.widthEnd || _this.widthEnd;\n        _this.start = options.start || _this.start;\n        return _this;\n    }\n    Object.defineProperty(EdgeInstance.prototype, \"length\", {\n        get: function () {\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EdgeInstance.prototype, \"perpendicular\", {\n        /**\n         * Calculates a perpendicular direction vector to the edge\n         */\n        get: function () {\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EdgeInstance.prototype, \"midpoint\", {\n        /**\n         * Calculates the midpoint of the edge\n         */\n        get: function () {\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Applies the edge width to the start and end\n     */\n    EdgeInstance.prototype.setEdgeWidth = function (width) {\n        if (width) {\n            this.widthEnd = width;\n            this.widthStart = width;\n        }\n    };\n    /**\n     * Applies the color to the start and end\n     */\n    EdgeInstance.prototype.setColor = function (color) {\n        this.colorStart = color;\n        this.colorEnd = color;\n    };\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"colorStart\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"colorEnd\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"control\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"depth\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"end\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"start\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"widthStart\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"widthEnd\", void 0);\n    __decorate([\n        mobx_1.computed\n    ], EdgeInstance.prototype, \"length\", null);\n    __decorate([\n        mobx_1.computed\n    ], EdgeInstance.prototype, \"perpendicular\", null);\n    __decorate([\n        mobx_1.computed\n    ], EdgeInstance.prototype, \"midpoint\", null);\n    return EdgeInstance;\n}(instance_1.Instance));\nexports.EdgeInstance = EdgeInstance;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\n\\nvoid main() {\\n  gl_FragColor = vertexColor;\\n}\\n\"","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\n// Interpolation type injection\\n${interpolation}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, start, end, control.xy, control.zw);\\n  // Calculate the next and previous segment's location on the line\\n  vec2 prePosition = interpolation(interpolationTime - interpolationIncrement, start, end, control.xy, control.zw);\\n  vec2 nextPosition = interpolation(interpolationTime + interpolationIncrement, start, end, control.xy, control.zw);\\n\\n  vec2 preLine = prePosition - currentPosition;\\n  vec2 nextLine = nextPosition - currentPosition;\\n\\n  // Get a spliced nromal at the joining of two segments to make a crisper curve\\n  vec2 currentNormal = mix(\\n    // Pick this value if we're at the beginning of the line\\n    normalize(vec2(preLine.y, -preLine.x)),\\n    mix(\\n      // Pick this value when we're between the ends\\n      normalize(vec2(preLine.y, -preLine.x) + vec2(-nextLine.y, nextLine.x)),\\n      // Pick this value if we're at the end of the line\\n      normalize(vec2(-nextLine.y, nextLine.x)),\\n      float(position.x >= 1.0)\\n    ),\\n    float(position.x > 0.0)\\n  );\\n\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (normal * lineThickness);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n  gl_PointSize = 5.0;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  float t1 = 1 - t;\\n  return pow(t1, 3) * p1 + 3 * t * pow(t1, 2) * c1 + 3 * pow(t, 2) * t1 * c2 + pow(t, 3) * p2;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return vec2(\\n    (1.0 - t) * (1.0 - t) * p1.x + 2.0 * t * (1.0 - t) * c1.x + t * t * p2.x,\\n    (1.0 - t) * (1.0 - t) * p1.y + 2.0 * t * (1.0 - t) * c1.y + t * t * p2.y\\n  );\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return p1 + (p2 - p1) * t;\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar util_1 = require(\"../../util\");\nvar EdgeType;\n(function (EdgeType) {\n    /** Makes a straight edge with no curve */\n    EdgeType[EdgeType[\"LINE\"] = 0] = \"LINE\";\n    /** Makes a single control point Bezier curve */\n    EdgeType[EdgeType[\"BEZIER\"] = 1] = \"BEZIER\";\n    /** Makes a two control point bezier curve */\n    EdgeType[EdgeType[\"BEZIER2\"] = 2] = \"BEZIER2\";\n})(EdgeType = exports.EdgeType || (exports.EdgeType = {}));\n/** Converts a control list to an IO value */\nfunction toInstanceIOValue(value) {\n    return [\n        value[0][0],\n        value[0][1],\n        value[1][0],\n        value[1][1],\n    ];\n}\n/** This picks the appropriate shader for the edge type desired */\nvar pickVS = (_a = {},\n    _a[EdgeType.LINE] = require('./edge-layer-line.vs'),\n    _a[EdgeType.BEZIER] = require('./edge-layer-bezier.vs'),\n    _a[EdgeType.BEZIER2] = require('./edge-layer-bezier2.vs'),\n    _a);\n/** This is the base edge layer which is a template that can be filled with the needed specifics for a given line type */\nvar baseVS = require('./edge-layer.vs');\n/**\n * This layer displays edges and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar EdgeLayer = /** @class */ (function (_super) {\n    __extends(EdgeLayer, _super);\n    function EdgeLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Define our shader and it's inputs\n     */\n    EdgeLayer.prototype.initShader = function () {\n        var type = this.props.type;\n        var MAX_SEGMENTS = type === EdgeType.LINE ? 2 : 50;\n        // Calculate the normals and interpolations for our vertices\n        var vertexToNormal = (_a = {\n                0: 1\n            },\n            _a[MAX_SEGMENTS * 2 + 2] = -1,\n            _a);\n        var vertexInterpolation = (_b = {\n                0: 0\n            },\n            _b[MAX_SEGMENTS * 2 + 2] = 1,\n            _b);\n        var sign = 1;\n        for (var i = 0; i < MAX_SEGMENTS * 2; ++i) {\n            vertexToNormal[i + 1] = sign;\n            vertexInterpolation[i + 1] = Math.floor(i / 2) / (MAX_SEGMENTS - 1);\n            sign *= -1;\n        }\n        var vs = util_1.shaderTemplate(baseVS, {\n            // Retain the attributes injection\n            attributes: '${attributes}',\n            // Inject the proper interpolation method\n            interpolation: pickVS[type],\n        }, {\n            name: 'Edge Layer',\n            values: [\n                'interpolation',\n            ],\n        });\n        return {\n            fs: require('./edge-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'start',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return o.start; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'end',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return o.end; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'widthStart',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.widthStart]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.TWO,\n                    name: 'widthEnd',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.widthEnd]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 2,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'colorStart',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.colorStart; },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'colorEnd',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.colorEnd; },\n                },\n                type === EdgeType.LINE ? {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'control',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return [0, 0, 0, 0]; },\n                } : null,\n                type === EdgeType.BEZIER ? {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'control',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return [o.control[0][0], o.control[0][1], 0, 0]; },\n                } : null,\n                type === EdgeType.BEZIER2 ? {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'control',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return toInstanceIOValue(o.control); },\n                } : null,\n            ],\n            uniforms: [],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexInterpolation[vertex],\n                        // The number of vertices\n                        MAX_SEGMENTS * 2,\n                    ]; },\n                },\n            ],\n            vertexCount: MAX_SEGMENTS * 2 + 2,\n            vs: vs.shader,\n        };\n        var _a, _b;\n    };\n    EdgeLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    EdgeLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    // Set default props for the layer\n    EdgeLayer.defaultProps = {\n        data: null,\n        key: 'none',\n        type: EdgeType.LINE,\n    };\n    return EdgeLayer;\n}(layer_1.Layer));\nexports.EdgeLayer = EdgeLayer;\nvar _a;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./edge-layer\"));\n__export(require(\"./edge-instance\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar instance_1 = require(\"../../util/instance\");\nvar CircleInstance = /** @class */ (function (_super) {\n    __extends(CircleInstance, _super);\n    function CircleInstance(options) {\n        var _this = _super.call(this, options) || this;\n        _this.color = [1.0, 1.0, 1.0, 1.0];\n        _this.radius = 0;\n        _this.x = 0;\n        _this.y = 0;\n        _this.depth = 0;\n        _this.color = options.color || _this.color;\n        _this.radius = options.radius || _this.radius;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        _this.depth = options.depth || _this.depth;\n        return _this;\n    }\n    Object.defineProperty(CircleInstance.prototype, \"width\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CircleInstance.prototype, \"height\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        mobx_1.observable\n    ], CircleInstance.prototype, \"color\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], CircleInstance.prototype, \"radius\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], CircleInstance.prototype, \"x\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], CircleInstance.prototype, \"y\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], CircleInstance.prototype, \"depth\", void 0);\n    __decorate([\n        mobx_1.computed\n    ], CircleInstance.prototype, \"width\", null);\n    __decorate([\n        mobx_1.computed\n    ], CircleInstance.prototype, \"height\", null);\n    return CircleInstance;\n}(instance_1.Instance));\nexports.CircleInstance = CircleInstance;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  vertexColor = color;\\n  gl_PointSize = radius * 2.0 * pixelRatio;\\n  edgeSharpness = mix(0.8, 0.01, min(gl_PointSize / (45.0 * pixelRatio), 1.0));\\n  gl_Position = clipSpace(vec3(center, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius + (radius * 0.01),\\n    dot(dist, dist) * 4.0\\n  );\\n}\\n\\nvoid main() {\\n  float step_factor = circle(gl_PointCoord.xy, 1.0);\\n  gl_FragColor = mix(\\n    vec4(0.0, 0.0, 0.0, 0.0),\\n    vertexColor,\\n    step_factor\\n  );\\n}\\n\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Calculates the distance between two points, but keeps the distance in dquared form\n * thus performing Math.sqrt() on the output of this distance would provide the true\n * distance between the points.\n *\n * It is often faster and all that is needed to compare squared distances vs real distances\n * thus eliminating multiple Math.sqrt operations\n *\n * NOTE: For vectors this is the same as (pseudo code):\n * let vector3 = vector2.subtract(vector1)\n * return vector3.dot(vector3)\n *\n * @param p1 The point to find the distance from the second point\n * @param p2 The point to find the distance from the first point\n *\n * @return {number} The distance * distance between the two points\n */\nfunction squareDistance(p1, p2) {\n    var dx = p1.x - p2.x;\n    var dy = p1.y - p2.y;\n    return dx * dx + dy * dy;\n}\n/**\n * Contains methods for managing or manipulating points\n *\n * @export\n * @class Point\n */\nvar Point = /** @class */ (function () {\n    function Point() {\n    }\n    /**\n     * Adds two points together\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @return {IPoint} The two points added together\n     */\n    Point.add = function (p1, p2, out) {\n        if (out) {\n            out.x = p1.x + p2.x;\n            out.y = p1.y + p2.y;\n            return out;\n        }\n        return {\n            x: p1.x + p2.x,\n            y: p1.y + p2.y,\n        };\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {IPoint} The closest point to the test point\n     */\n    Point.getClosest = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = null;\n        var distance;\n        var findClosest = function (point) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = point;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * This just returns the index of the found point and not the point itself\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {number} The index of the closest point to the test point\n     */\n    Point.getClosestIndex = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = 0;\n        var distance;\n        var findClosest = function (point, i) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = i;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This will calculate a direction vector between two points that points toward p2\n     *\n     * @param {IPoint} amount The start of the direction\n     * @param {IPoint} from The direction to point the vector towards\n     * @param {boolean} normalize If true, this will make the vector have a magnitude of 1\n     *\n     * @returns {number}\n     */\n    Point.subtract = function (amount, from, normalize) {\n        if (normalize === void 0) { normalize = false; }\n        var dx = from.x - amount.x;\n        var dy = from.y - amount.y;\n        if (normalize) {\n            var magnitude = Math.sqrt(dx * dx + dy * dy);\n            dx /= magnitude;\n            dy /= magnitude;\n        }\n        return {\n            x: dx,\n            y: dy,\n        };\n    };\n    /**\n     * @static\n     * Gets the distance between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {boolean} squared If set to true, returns the distance * distance (performs faster)\n     *\n     * @returns {number} The real distance between two points\n     */\n    Point.getDistance = function (p1, p2, squared) {\n        if (squared === void 0) { squared = false; }\n        if (squared) {\n            return squareDistance(p1, p2);\n        }\n        return Math.sqrt(squareDistance(p1, p2));\n    };\n    /**\n     * @static\n     * Gets a point perfectly between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     *\n     * @returns {IPoint} The point between the two provided points\n     */\n    Point.getMidpoint = function (p1, p2) {\n        var direction = Point.subtract(p1, p2);\n        return {\n            x: direction.x / 2 + p1.x,\n            y: direction.y / 2 + p1.y,\n        };\n    };\n    Point.make = function (x, y) {\n        return { x: x, y: y };\n    };\n    /**\n     * Scales a point by a given amount\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {number} s The amount to scale the point by\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @memberof Point\n     */\n    Point.scale = function (p1, s, out) {\n        if (out) {\n            out.x = p1.x * s;\n            out.y = p1.y * s;\n            return out;\n        }\n        return {\n            x: p1.x * s,\n            y: p1.y * s,\n        };\n    };\n    /**\n     * Makes a new point initialized to {0,0}\n     *\n     * @static\n     * @returns {IPoint} A new point object at {0,0}\n     */\n    Point.zero = function () {\n        return {\n            x: 0,\n            y: 0,\n        };\n    };\n    return Point;\n}());\nexports.Point = Point;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar max = Math.max;\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar CircleLayer = /** @class */ (function (_super) {\n    __extends(CircleLayer, _super);\n    function CircleLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    CircleLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given circle\n            boundsAccessor: function (circle) { return new primitives_1.Bounds({\n                height: circle.radius * 2,\n                width: circle.radius * 2,\n                x: circle.x - circle.radius,\n                y: circle.y - circle.radius,\n            }); },\n            // Provide a precise hit test for the circle\n            hitTest: function (circle, point, view) {\n                var r = circle.radius / max.apply(void 0, view.camera.scale);\n                var delta = [\n                    point.x - circle.x,\n                    point.y - circle.y,\n                ];\n                return (delta[0] * delta[0] + delta[1] * delta[1]) < (r * r);\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    CircleLayer.prototype.initShader = function () {\n        return {\n            fs: require('./circle-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'center',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (circle) { return [circle.x, circle.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'radius',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (circle) { return [circle.radius]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (circle) { return [circle.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (circle) { return circle.color; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (uniform) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    defaults: [0],\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [0, 0, 0]; },\n                },\n            ],\n            vertexCount: 1,\n            vs: require('./circle-layer.vs'),\n        };\n    };\n    CircleLayer.prototype.getModelType = function () {\n        return {\n            modelType: Three.Points,\n        };\n    };\n    CircleLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return CircleLayer;\n}(layer_1.Layer));\nexports.CircleLayer = CircleLayer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./circle-layer\"));\n__export(require(\"./circle-instance\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./circles\"));\n__export(require(\"./edges\"));\n__export(require(\"./images\"));\n__export(require(\"./labels\"));\n__export(require(\"./rings\"));\n__export(require(\"./types\"));\n","module.exports = \"void main() {\\n  gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n}\"","module.exports = \"\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\n/**\n * This manages mouse gestures broadcast to the layer and handles appropriate actions such as determining\n * how to make the interaction translate to picking events for the layer's instances.\n *\n * This class, in summary, takes in the gestures to the view and converts them to gestures to the instances.\n */\nvar LayerInteractionHandler = /** @class */ (function () {\n    function LayerInteractionHandler(layer) {\n        /** This tracks the elements that have the mouse currently over them */\n        this.isMouseOver = new Map();\n        /** This tracks the elements the mouse was down on */\n        this.isMouseDown = new Map();\n        this.layer = layer;\n    }\n    /**\n     * Handles mouse down gestures for a layer within a view\n     */\n    LayerInteractionHandler.prototype.handleMouseOver = function (view, mouse) {\n        // This is the mouse over for the view itself. We should probably just let the mouse over events handle the interactions\n        // With the instances\n    };\n    /**\n     * Handles mouse down gestures for a layer within a view\n     */\n    LayerInteractionHandler.prototype.handleMouseDown = function (view, mouse) {\n        var _this = this;\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type === types_1.PickType.ALL) {\n            var onMouseDown = this.layer.props.onMouseDown;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseDown) {\n                var world_1 = view.viewToWorld(mouse);\n                var hitTest_1 = this.layer.picking.hitTest;\n                var instances = this.layer.picking.quadTree.queryPoint(world_1, []);\n                instances = instances.filter(function (o) { return hitTest_1(o, world_1, view); });\n                var info = {\n                    instances: instances,\n                    layer: this.layer.id,\n                    world: [world_1.x, world_1.y],\n                };\n                onMouseDown(info);\n                // We track all the elements the mouse is currently down on\n                this.isMouseDown.clear();\n                instances.forEach(function (o) { return _this.isMouseDown.set(o, true); });\n            }\n        }\n    };\n    /**\n     * Handles mouse out events for a layer within the view\n     */\n    LayerInteractionHandler.prototype.handleMouseOut = function (view, mouse) {\n        // This will fire an instance mouse out for any over instances in the queue since we left the view\n        // Thus no instances shall be considered 'over'\n        if (this.layer.picking && this.layer.picking.type === types_1.PickType.ALL) {\n            var onMouseOut = this.layer.props.onMouseOut;\n            if (onMouseOut) {\n                var world = view.viewToWorld(mouse);\n                var info = {\n                    instances: Array.from(this.isMouseOver.keys()),\n                    layer: this.layer.id,\n                    world: [world.x, world.y],\n                };\n                onMouseOut(info);\n            }\n        }\n        // We clear as no instances are over anymore\n        this.isMouseOver.clear();\n        // We also clear all down elements as the mouse is no longer in proper context for the instances\n        // But since the mouse was never actually released, we do not fire an up\n        this.isMouseDown.clear();\n    };\n    /**\n     * Handles mouse up gestures for the layer within the provided view\n     */\n    LayerInteractionHandler.prototype.handleMouseUp = function (view, mouse) {\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type === types_1.PickType.ALL) {\n            var onMouseUp = this.layer.props.onMouseUp;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseUp) {\n                var world_2 = view.viewToWorld(mouse);\n                var hitTest_2 = this.layer.picking.hitTest;\n                var instances = this.layer.picking.quadTree.queryPoint(world_2, []);\n                instances = instances.filter(function (o) { return hitTest_2(o, world_2, view); });\n                var info = {\n                    instances: instances,\n                    layer: this.layer.id,\n                    world: [world_2.x, world_2.y],\n                };\n                onMouseUp(info);\n            }\n        }\n    };\n    /**\n     * Mouse move events on the layer will detect when instances have their item newly over or just moved on\n     */\n    LayerInteractionHandler.prototype.handleMouseMove = function (view, mouse) {\n        var _this = this;\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type === types_1.PickType.ALL) {\n            var _a = this.layer.props, onMouseOver = _a.onMouseOver, onMouseMove = _a.onMouseMove, onMouseOut = _a.onMouseOut;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseOver || onMouseMove || onMouseOut) {\n                var world_3 = view.viewToWorld(mouse);\n                var hitTest_3 = this.layer.picking.hitTest;\n                var instances = this.layer.picking.quadTree.queryPoint(world_3, []);\n                instances = instances.filter(function (o) { return hitTest_3(o, world_3, view); });\n                // Broadcast the picking info for newly over instances to any of the layers listeners if needed\n                if (onMouseOver) {\n                    var notOverInstances = instances.filter(function (o) { return !_this.isMouseOver.get(o); });\n                    var info = {\n                        instances: notOverInstances,\n                        layer: this.layer.id,\n                        world: [world_3.x, world_3.y],\n                    };\n                    onMouseOver(info);\n                }\n                // Broadcast the the picking info for all instances that the mouse moved on\n                if (onMouseMove) {\n                    // This is the pick info object we will broadcast from the layer\n                    var info = {\n                        instances: instances,\n                        layer: this.layer.id,\n                        world: [world_3.x, world_3.y],\n                    };\n                    onMouseMove(info);\n                }\n                // We take the hovered instances\n                var isCurrentlyOver_1 = new Map();\n                instances.forEach(function (o) { return isCurrentlyOver_1.set(o, true); });\n                // Broadcast the the picking info for all instances that the mouse moved off of\n                if (onMouseOut) {\n                    var noLongerOver = Array.from(this.isMouseOver.keys()).filter(function (o) { return !isCurrentlyOver_1.get(o); });\n                    // This is the pick info object we will broadcast from the layer\n                    var info = {\n                        instances: noLongerOver,\n                        layer: this.layer.id,\n                        world: [world_3.x, world_3.y],\n                    };\n                    onMouseOut(info);\n                }\n                // We store the current hovered over items as our over item list for next interaction\n                this.isMouseOver = isCurrentlyOver_1;\n            }\n        }\n    };\n    /**\n     * Handles click gestures on the layer within a view\n     */\n    LayerInteractionHandler.prototype.handleMouseClick = function (view, mouse) {\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type === types_1.PickType.ALL) {\n            var onMouseClick = this.layer.props.onMouseClick;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseClick) {\n                var world_4 = view.viewToWorld(mouse);\n                var hitTest_4 = this.layer.picking.hitTest;\n                var instances = this.layer.picking.quadTree.queryPoint(world_4, []);\n                instances = instances.filter(function (o) { return hitTest_4(o, world_4, view); });\n                var info = {\n                    instances: instances,\n                    layer: this.layer.id,\n                    world: [world_4.x, world_4.y],\n                };\n                onMouseClick(info);\n            }\n        }\n    };\n    /**\n     * Handles drag gestures for the layer within the view\n     */\n    LayerInteractionHandler.prototype.handleMouseDrag = function (view, mouse) {\n        // We probably should not broadcast drag events for the sake of instances. Instance dragging should be handled on\n        // An instance by instance basis rather than coming from the view's gestures\n    };\n    return LayerInteractionHandler;\n}());\nexports.LayerInteractionHandler = LayerInteractionHandler;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\n// This is a mapping of the vector properties as they relate to an array order\nvar VECTOR_ACCESSORS = ['x', 'y', 'z', 'w'];\n/**\n * This class manages the process of taking the diffs of a layer and executing methods on those diffs to perform\n * updates to the uniforms that control those instances.\n */\nvar InstanceDiffManager = /** @class */ (function () {\n    function InstanceDiffManager(layer) {\n        this.layer = layer;\n    }\n    /**\n     * This returns the proper diff processor for handling diffs\n     */\n    InstanceDiffManager.prototype.getDiffProcessor = function () {\n        if (this.layer.picking) {\n            if (this.layer.picking.type === types_1.PickType.ALL) {\n                this.quadPicking = this.layer.picking;\n                return [\n                    this.changeInstanceQuad,\n                    this.addInstanceQuad,\n                    this.removeInstanceQuad,\n                ];\n            }\n        }\n        return [\n            this.changeInstance,\n            this.addInstance,\n            this.removeInstance,\n        ];\n    };\n    /**\n     * This processes add operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.addInstance = function (manager, instance, uniformCluster) {\n        // If the uniform cluster already exists, then we swap over to a change update\n        if (uniformCluster) {\n            manager.changeInstance(manager, instance, uniformCluster);\n        }\n        // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n        else {\n            var uniforms = manager.layer.uniformManager.add(instance);\n            instance.active = true;\n            manager.updateInstance(instance, uniforms);\n        }\n    };\n    /**\n     * This processes add operations from changes in the instancing data and manages the layer's quad tree\n     * with the instance as well.\n     */\n    InstanceDiffManager.prototype.addInstanceQuad = function (manager, instance, uniformCluster) {\n        // If the uniform cluster already exists, then we swap over to a change update\n        if (uniformCluster) {\n            manager.changeInstance(manager, instance, uniformCluster);\n        }\n        // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n        else {\n            var uniforms = manager.layer.uniformManager.add(instance);\n            instance.active = true;\n            manager.updateInstance(instance, uniforms);\n            // Ensure the instance has an updated injection in the quad tree\n            manager.quadPicking.quadTree.remove(instance);\n            manager.quadPicking.quadTree.add(instance);\n        }\n    };\n    /**\n     * This processes change operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.changeInstance = function (manager, instance, uniformCluster) {\n        // If there is an existing uniform cluster for this instance, then we can update the uniforms\n        if (uniformCluster) {\n            manager.updateInstance(instance, uniformCluster);\n        }\n        // If we don't have existing uniforms, then we must remove the instance\n        else {\n            manager.addInstance(manager, instance, uniformCluster);\n        }\n    };\n    /**\n     * This processes change operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.changeInstanceQuad = function (manager, instance, uniformCluster) {\n        // If there is an existing uniform cluster for this instance, then we can update the uniforms\n        if (uniformCluster) {\n            manager.updateInstance(instance, uniformCluster);\n            // Ensure the instance has an updated injection in the quad tree\n            manager.quadPicking.quadTree.remove(instance);\n            manager.quadPicking.quadTree.add(instance);\n        }\n        // If we don't have existing uniforms, then we must remove the instance\n        else {\n            manager.addInstance(manager, instance, uniformCluster);\n        }\n    };\n    /**\n     * This processes remove operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.removeInstance = function (manager, instance, uniformCluster) {\n        if (uniformCluster) {\n            // We deactivate the instance so it does not render anymore\n            instance.active = false;\n            // We do one last update on the instance to update to it's deactivated state\n            manager.updateInstance(instance, uniformCluster);\n            // Unlink the instance from the uniform cluster\n            manager.layer.uniformManager.remove(instance);\n        }\n    };\n    /**\n     * This processes remove operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.removeInstanceQuad = function (manager, instance, uniformCluster) {\n        if (uniformCluster) {\n            // We deactivate the instance so it does not render anymore\n            instance.active = false;\n            // We do one last update on the instance to update to it's deactivated state\n            manager.updateInstance(instance, uniformCluster);\n            // Unlink the instance from the uniform cluster\n            manager.layer.uniformManager.remove(instance);\n            // Remove the instance from our quad tree\n            manager.quadPicking.quadTree.remove(instance);\n        }\n    };\n    InstanceDiffManager.prototype.updateInstance = function (instance, uniformCluster) {\n        if (instance.active) {\n            var uniforms = uniformCluster.uniform;\n            var uniformRangeStart = uniformCluster.uniformRange[0];\n            var instanceData = uniforms.value;\n            var instanceUniform = void 0, value = void 0, block = void 0, start = void 0;\n            var k = void 0, endk = void 0;\n            // Loop through the instance attributes and update the uniform cluster with the valaues\n            // Calculated for the instance\n            for (var i = 0, end = this.layer.instanceAttributes.length; i < end; ++i) {\n                instanceUniform = this.layer.instanceAttributes[i];\n                value = instanceUniform.update(instance);\n                block = instanceData[uniformRangeStart + instanceUniform.block];\n                instanceUniform.atlas && this.layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n                start = instanceUniform.blockIndex;\n                // Hyper optimized vector filling routine. It uses properties that are globally scoped\n                // To greatly reduce overhead\n                for (k = start, endk = value.length + start; k < endk; ++k) {\n                    block[VECTOR_ACCESSORS[k]] = value[k - start];\n                }\n            }\n            uniforms.value = instanceData;\n        }\n        else {\n            var uniforms = uniformCluster.uniform;\n            var uniformRangeStart = uniformCluster.uniformRange[0];\n            var instanceData = uniforms.value;\n            var instanceUniform = void 0, value = void 0, block = void 0, start = void 0;\n            // Only update the _active attribute to ensure it is false. When it is false, there is no\n            // Point to updating any other uniform\n            instanceUniform = this.layer.activeAttribute;\n            value = instanceUniform.update(instance);\n            block = instanceData[uniformRangeStart + instanceUniform.block];\n            instanceUniform.atlas && this.layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n            start = instanceUniform.blockIndex;\n            // Hyper optimized vector filling routine. It uses properties that are globally scoped\n            // To greatly reduce overhead\n            for (var k = start, endk = value.length + start; k < endk; ++k) {\n                block[VECTOR_ACCESSORS[k]] = value[k - start];\n            }\n            uniforms.value = instanceData;\n        }\n    };\n    return InstanceDiffManager;\n}());\nexports.InstanceDiffManager = InstanceDiffManager;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nvar maxPopulation = 5;\nvar maxDepth = 10;\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n */\nvar Quadrants = /** @class */ (function () {\n    /**\n     * Creates an instance of Quadrants.\n     *\n     * @param bounds The bounds this will create quandrants for\n     * @param depth  The child depth of this element\n     */\n    function Quadrants(bounds, depth, getBounds, childToNode, childToBounds) {\n        var mid = bounds.mid;\n        this.TL = new Node(bounds.x, mid.x, bounds.y, mid.y, getBounds, depth);\n        this.TR = new Node(mid.x, bounds.right, bounds.y, mid.y, getBounds, depth);\n        this.BL = new Node(bounds.x, mid.x, mid.y, bounds.bottom, getBounds, depth);\n        this.BR = new Node(mid.x, bounds.right, mid.y, bounds.bottom, getBounds, depth);\n        this.TL.childToNode = childToNode;\n        this.TR.childToNode = childToNode;\n        this.BL.childToNode = childToNode;\n        this.BR.childToNode = childToNode;\n        this.TL.childToBounds = childToBounds;\n        this.TR.childToBounds = childToBounds;\n        this.BL.childToBounds = childToBounds;\n        this.BR.childToBounds = childToBounds;\n    }\n    /**\n     * Ensures all memory is released for all nodes and all references are removed\n     * to potentially high memory consumption items\n     */\n    Quadrants.prototype.destroy = function () {\n        this.TL.destroy();\n        this.TR.destroy();\n        this.BL.destroy();\n        this.BR.destroy();\n        delete this.TL;\n        delete this.TR;\n        delete this.BL;\n        delete this.BR;\n    };\n    return Quadrants;\n}());\nexports.Quadrants = Quadrants;\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n */\nvar Node = /** @class */ (function () {\n    /**\n     * Creates an instance of Node.\n     */\n    function Node(left, right, top, bottom, getBounds, depth) {\n        this.children = [];\n        this.depth = 0;\n        this.nodes = null;\n        // If params insertted\n        if (arguments.length >= 4) {\n            this.bounds = new bounds_1.Bounds({ left: left, right: right, top: top, bottom: bottom });\n        }\n        else {\n            // Otherwise, make tiny start area\n            this.bounds = new bounds_1.Bounds({ left: 0, right: 1, top: 1, bottom: 0 });\n        }\n        // Ensure the depth is set\n        this.depth = depth || 0;\n        // Apply the bounds accessor method for instances\n        this.getBounds = getBounds;\n        // If this is the top level node, we need to instantiate the lookup that will be used\n        // Across all nodes.\n        if (this.depth === 0) {\n            this.childToNode = new Map();\n            this.childToBounds = new Map();\n        }\n    }\n    /**\n     * Destroys this node and ensures all child nodes are destroyed as well.\n     */\n    Node.prototype.destroy = function () {\n        delete this.children;\n        delete this.bounds;\n        if (this.nodes) {\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n    };\n    /**\n     * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n     * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n     * this quad tree spans (and this is the root node), the quad tree will expand to include\n     * the new child.\n     *\n     * @param child The Bounds type object to inject\n     * @param props Properties that can be retrieved with the child object if applicable\n     *\n     * @returns True if the insertion was successful\n     */\n    Node.prototype.add = function (child) {\n        var bounds = this.childToBounds.get(child);\n        if (!bounds) {\n            // First we access the bounds of the child and store it\n            bounds = this.getBounds(child);\n            this.childToBounds.set(child, bounds);\n        }\n        // This is the entry function for adding children, so we must first expand our top node\n        // To cover the area that the child is located.\n        // If we're in bounds, then let's just add the child\n        if (bounds.isInside(this.bounds)) {\n            return this.doAdd(child, bounds);\n        }\n        else {\n            // Otherwise, we need to expand first\n            this.cover(bounds);\n            return this.add(child);\n        }\n    };\n    /**\n     * Adds a list of new children to this quad tree. It performs the same operations as\n     * addChild for each child in the list, however, it more efficiently recalculates the\n     * bounds necessary to cover the area the children cover.\n     *\n     * @param children      List of Bounds objects to inject\n     */\n    Node.prototype.addAll = function (children) {\n        var _this = this;\n        // Make sure we cover the entire area of all the children.\n        // We can speed this up a lot if we first calculate the total bounds the new children covers\n        var minX = Number.MAX_VALUE;\n        var minY = Number.MAX_VALUE;\n        var maxX = -Number.MAX_VALUE;\n        var maxY = -Number.MAX_VALUE;\n        // Get the dimensions of the new bounds\n        children.forEach(function (child) {\n            var bounds = _this.getBounds(child);\n            _this.childToBounds.set(child, bounds);\n            if (bounds.x < minX) {\n                minX = bounds.x;\n            }\n            if (bounds.right > maxX) {\n                maxX = bounds.right;\n            }\n            if (bounds.bottom > maxY) {\n                maxY = bounds.bottom;\n            }\n            if (bounds.y < minY) {\n                minY = bounds.y;\n            }\n        });\n        // Make sure our bounds includes the specified bounds\n        this.cover(new bounds_1.Bounds({ left: minX, right: maxX, bottom: maxY, top: minY }));\n        // Add all of the children into the tree\n        children.forEach(function (child, index) { return _this.doAdd(child, _this.childToBounds.get(child), true); });\n    };\n    /**\n     * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n     * This will cause all children to be re-injected into the tree.\n     *\n     * @param bounds The bounds to include in the tree's coverage\n     */\n    Node.prototype.cover = function (bounds) {\n        var _this = this;\n        // If we are already covering the area: abort\n        if (bounds.isInside(this.bounds)) {\n            return;\n        }\n        // Make our bounds cover the new area\n        this.bounds.encapsulate(bounds);\n        this.bounds.x -= 1;\n        this.bounds.y -= 1;\n        this.bounds.width += 2;\n        this.bounds.height += 2;\n        // Get all of the children underneath this node\n        var allChildren = this.gatherChildren([]);\n        this.children = [];\n        // Destroy the split nodes\n        if (this.nodes) {\n            // Completely...destroy...\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n        // Clear out the child to node relations\n        this.childToNode.clear();\n        // Reinsert all children with the new dimensions in place\n        allChildren.forEach(function (child, index) { return _this.doAdd(child, _this.childToBounds.get(child)); });\n    };\n    /**\n     * When adding children, this performs the actual action of injecting the child into the tree\n     * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n     *\n     * @param child The Bounds item to inject into the tree\n     * @param props The props to remain associated with the child\n     *\n     * @returns True if the injection was successful\n     */\n    Node.prototype.doAdd = function (child, bounds, fromSplit) {\n        // If nodes are present, then we have already exceeded the population of this node\n        if (this.nodes) {\n            if (bounds.isInside(this.nodes.TL.bounds)) {\n                return this.nodes.TL.doAdd(child, bounds, fromSplit);\n            }\n            if (bounds.isInside(this.nodes.TR.bounds)) {\n                return this.nodes.TR.doAdd(child, bounds, fromSplit);\n            }\n            if (bounds.isInside(this.nodes.BL.bounds)) {\n                return this.nodes.BL.doAdd(child, bounds, fromSplit);\n            }\n            if (bounds.isInside(this.nodes.BR.bounds)) {\n                return this.nodes.BR.doAdd(child, bounds, fromSplit);\n            }\n            // Otherwise, this is a child overlapping this border\n            this.children.push(child);\n            this.childToNode.set(child, this);\n            return true;\n        }\n        else if (bounds.isInside(this.bounds)) {\n            // Otherwise, we have not had a split due to population limits being exceeded\n            this.children.push(child);\n            this.childToNode.set(child, this);\n            // If we exceeded our population for this quadrant, it is time to split up\n            if (this.children.length > maxPopulation && this.depth < maxDepth) {\n                this.split();\n            }\n            return true;\n        }\n        // This is when there is something wrong with the insertted child. The bounds\n        // For the quad should have grown without issue, but in this case the bounds\n        // Could not grow to accomodate the child.\n        if (isNaN(bounds.width + bounds.height + bounds.x + bounds.y)) {\n            console.error('Child did not fit into bounds because a dimension is NaN', child, bounds);\n        }\n        else if (bounds.area === 0) {\n            console.error('Child did not fit into bounds because the area is zero', child, bounds);\n        }\n        else {\n            console.error('Child did not get insertted');\n        }\n        // Don't insert the child and continue\n        return true;\n    };\n    Node.prototype.doRemove = function (child) {\n        var index = this.children.indexOf(child);\n        if (index > -1) {\n            this.children.splice(index, 1);\n            this.childToNode.delete(child);\n            this.childToBounds.delete(child);\n        }\n        else {\n            console.warn('Error: An invalid operation happened in the QuadTree.', 'A child was supposed to be a part of the tree, but no child was found.', 'The node\\'s children is out of sync with childToNode');\n        }\n    };\n    /**\n     * Collects all children of all the current and sub nodes into a single list.\n     *\n     * @param list The list we must aggregate children into\n     *\n     * @return The list specified as the list parameter\n     */\n    Node.prototype.gatherChildren = function (list) {\n        this.children.forEach(function (child) { return list.push(child); });\n        if (this.nodes) {\n            this.nodes.TL.gatherChildren(list);\n            this.nodes.TR.gatherChildren(list);\n            this.nodes.BL.gatherChildren(list);\n            this.nodes.BR.gatherChildren(list);\n        }\n        return list;\n    };\n    /**\n     * Entry query for determining query type based on input object\n     *\n     * @param bounds Can be a Bounds or a Point object\n     * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n     *               information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return An array of children that intersects with the query\n     */\n    Node.prototype.query = function (bounds, visit) {\n        // Query a rectangle\n        if (bounds instanceof bounds_1.Bounds) {\n            if (bounds.hitBounds(this.bounds)) {\n                return this.queryBounds(bounds, [], visit);\n            }\n            // Return an empty array when nothing is collided with\n            return [];\n        }\n        // Query a point\n        if (this.bounds.containsPoint(bounds)) {\n            return this.queryPoint(bounds, [], visit);\n        }\n        // Return an empty array when nothing is collided with\n        return [];\n    };\n    /**\n     * Queries children for intersection with a bounds object\n     *\n     * @param b     The Bounds to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return     Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryBounds = function (b, list, visit) {\n        var _this = this;\n        this.children.forEach(function (c, index) {\n            if (_this.childToBounds.get(c).hitBounds(b)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (b.hitBounds(this.nodes.TL.bounds)) {\n                this.nodes.TL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.TR.bounds)) {\n                this.nodes.TR.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BL.bounds)) {\n                this.nodes.BL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BR.bounds)) {\n                this.nodes.BR.queryBounds(b, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Queries children for intersection with a point\n     *\n     * @param p     The Point to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return      Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryPoint = function (p, list, visit) {\n        var _this = this;\n        this.children.forEach(function (c, index) {\n            if (_this.childToBounds.get(c).containsPoint(p)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (this.nodes.TL.bounds.containsPoint(p)) {\n                this.nodes.TL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.TR.bounds.containsPoint(p)) {\n                this.nodes.TR.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BL.bounds.containsPoint(p)) {\n                this.nodes.BL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BR.bounds.containsPoint(p)) {\n                this.nodes.BR.queryPoint(p, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Remove the provided item from the tree.\n     */\n    Node.prototype.remove = function (child) {\n        if (this.childToNode) {\n            var node = this.childToNode.get(child);\n            if (node) {\n                node.doRemove(child);\n            }\n        }\n    };\n    /**\n     * Creates four sub quadrants for this node.\n     */\n    Node.prototype.split = function () {\n        // Gather all items to be handed down\n        var allChildren = this.gatherChildren([]);\n        // Gather all props for the children to be handed down as well\n        this.nodes = new Quadrants(this.bounds, this.depth + 1, this.getBounds, this.childToNode, this.childToBounds);\n        // Empty out the children as they are being re-injected\n        this.children = [];\n        for (var i = 0, end = allChildren.length; i < end; ++i) {\n            var child = allChildren[i];\n            this.doAdd(child, this.childToBounds.get(child), true);\n        }\n    };\n    /**\n     * Traverses the quad tree returning every quadrant encountered\n     *\n     * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n     */\n    Node.prototype.visit = function (cb) {\n        var finished = Boolean(cb(this));\n        if (this.nodes && !finished) {\n            this.nodes.TL.visit(cb);\n            this.nodes.TR.visit(cb);\n            this.nodes.BL.visit(cb);\n            this.nodes.BR.visit(cb);\n        }\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar TrackedQuadTree = /** @class */ (function (_super) {\n    __extends(TrackedQuadTree, _super);\n    function TrackedQuadTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return TrackedQuadTree;\n}(Node));\nexports.TrackedQuadTree = TrackedQuadTree;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chart_camera_1 = require(\"./chart-camera\");\n/**\n * This is a camera that is based on another camera. This can apply filters\n * to the information provided from the base camera.\n *\n * Useful for situations such as a chart having a chart area and a list on the\n * left. This can use the same camera the chart area uses, but filter the response\n * to only track the y offset of the base camera.\n *\n * That would allow easy tracking of the left list to track with elements in the\n * chart and only manipulate a single camera instead of managing many cameras and\n * tie them together with lots of events.\n */\nvar ReferenceCamera = /** @class */ (function (_super) {\n    __extends(ReferenceCamera, _super);\n    function ReferenceCamera(options) {\n        var _this = _super.call(this) || this;\n        _this.offsetFilter = function (offset) { return offset; };\n        _this.scaleFilter = function (scale) { return scale; };\n        Object.assign(_this, options);\n        return _this;\n    }\n    Object.defineProperty(ReferenceCamera.prototype, \"offset\", {\n        get: function () {\n            return this.offsetFilter(this.base.offset);\n        },\n        set: function (val) {\n            /** no-op */\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ReferenceCamera.prototype, \"scale\", {\n        get: function () {\n            return this.scaleFilter(this.base.scale);\n        },\n        set: function (val) {\n            /** no-op */\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ReferenceCamera;\n}(chart_camera_1.ChartCamera));\nexports.ReferenceCamera = ReferenceCamera;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar DiffType;\n(function (DiffType) {\n    DiffType[DiffType[\"CHANGE\"] = 0] = \"CHANGE\";\n    DiffType[DiffType[\"INSERT\"] = 1] = \"INSERT\";\n    DiffType[DiffType[\"REMOVE\"] = 2] = \"REMOVE\";\n})(DiffType = exports.DiffType || (exports.DiffType = {}));\nfunction isObservableArray(val) {\n    return Boolean(val.observe);\n}\nvar UPDATE_FLAG = 'update';\nvar SPLICE_FLAG = 'splice';\n/**\n * This is a generic DataProvider that provides instance data to a layer. It monitors\n * changes to a list of instance items and records those changes for consumption by\n * internal layer processes. This allows for extremely easy editing of instance data\n * that reflects highly targetted changes to the system with very little overhead\n * allowing for very large datasets with rapidly changing parts.\n */\nvar DataProvider = /** @class */ (function () {\n    function DataProvider(data) {\n        var _this = this;\n        // When active, this provider is recording changes. Deactivate to temporarily disable\n        // Change tracking.\n        this.active = true;\n        this.instanceDisposers = new Map();\n        this.instanceChanges = new Map();\n        this.instanceById = new Map();\n        this.isChanged = false;\n        this._changeList = [];\n        /**\n         * This generates a method for an interceptor to monitor individual items within a list and record\n         * any changes found to the changelist\n         *\n         * @param changes This is the change list which records the changes to the items\n         */\n        this.monitorItem = function (changes) { return function (change) {\n            if (_this.active) {\n                if (change.type === UPDATE_FLAG) {\n                    changes.set(change.object, DiffType.CHANGE);\n                    _this.isChanged = true;\n                }\n                else {\n                    console.warn('Received an update type not supported by monitorItem:', change.type);\n                }\n            }\n            return change;\n        }; };\n        this._instances = mobx_1.observable(data || []);\n        if (isObservableArray(this._instances)) {\n            this.listDisposer = mobx_1.intercept(this._instances, this.monitorList(this._instances, this.instanceChanges, this.instanceById, this.instanceDisposers));\n        }\n    }\n    Object.defineProperty(DataProvider.prototype, \"instances\", {\n        // We very explicitly shut off the ability to set the top level properties on\n        // This element. Mutations on the properties are allowed (and are thus trackable)\n        // But modifying the root properties will not have a very clean way to monitor that.\n        // So we make the properties accessible without being replaceable.\n        get: function () {\n            return this._instances;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataProvider.prototype, \"changeList\", {\n        get: function () {\n            // When the changelist is retrieved, we deactivate change recording until the provider\n            // Is resolved\n            this.active = false;\n            if (this.isChanged) {\n                var changes_1 = [];\n                this.instanceChanges.forEach(function (changeType, instance) {\n                    changes_1.push([instance, changeType]);\n                });\n                this._changeList = changes_1;\n            }\n            return this._changeList;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Clears out all disposers and items in the dataset\n     */\n    DataProvider.prototype.destroy = function () {\n        this.listDisposer();\n        this.instanceDisposers.forEach(function (disposer) { return disposer(); });\n        this._instances = null;\n        this.instanceChanges.clear();\n        this._changeList = null;\n    };\n    /**\n     * This generates a method for an interceptor that will monitor and collect change information\n     * on the list of items specified.\n     *\n     * @param list The list of items to monitor\n     * @param changes The changelist for the list of given item type\n     * @param lookUp A lookup so items that have changed can get their source easily\n     */\n    DataProvider.prototype.monitorList = function (list, changes, lookUp, disposers) {\n        var _this = this;\n        return function (change) {\n            if (_this.active) {\n                // We only handle splice types for changes, these indicate elements have been added or removed\n                if (change.type === SPLICE_FLAG) {\n                    // Record the removals and clear out any interceptors\n                    for (var i = change.index, end = change.index + change.removedCount; i < end; ++i) {\n                        var item = change.object[i];\n                        changes.set(item, DiffType.REMOVE);\n                        _this.isChanged = true;\n                        var dispose = disposers.get(item);\n                        if (dispose) {\n                            dispose();\n                        }\n                    }\n                    // Record the additions and add intercepts for each item. Also generate a lookup for the item\n                    for (var i = 0, end = change.added.length; i < end; ++i) {\n                        var item = change.added[i] = mobx_1.observable(change.added[i]);\n                        changes.set(item, DiffType.INSERT);\n                        _this.isChanged = true;\n                        lookUp.set(item.id, item);\n                        disposers.set(item, mobx_1.intercept(item, _this.monitorItem(changes)));\n                    }\n                }\n                else {\n                    console.warn('Received an update type not supported by monitorList:', change.type);\n                }\n            }\n            return change;\n        };\n    };\n    /**\n     * This resolves all of the changes found and makes them disappear.\n     */\n    DataProvider.prototype.resolve = function () {\n        this.instanceById.clear();\n        this.instanceChanges.clear();\n        this._changeList = [];\n        this.active = true;\n    };\n    return DataProvider;\n}());\nexports.DataProvider = DataProvider;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction toInstanceIOValue(texture) {\n    // If the texture is not defined we just output an empty reference\n    if (!texture) {\n        return [0, 0, 0, 0];\n    }\n    // Otherwise, we return the atlas information of the texture\n    return [\n        texture.atlasTL.x,\n        texture.atlasTL.y,\n        texture.atlasBR.x,\n        texture.atlasBR.y,\n    ];\n}\n/**\n * This class is responsible for tracking resources requested to be placed on an Atlas.\n * This makes sure the resource is uploaded and then properly cached so similar requests\n * return already existing resources. This also manages instances waiting for the resource\n * to be made available.\n */\nvar AtlasResourceManager = /** @class */ (function () {\n    function AtlasResourceManager(options) {\n        /** This is the atlas currently targetted by requests */\n        this.targetAtlas = '';\n        /** This stores all of the requests awaiting queue */\n        this.requestQueue = [];\n        /** This tracks if a resource is already in the request queue. This also stores ALL instances awaiting the resource */\n        this.requestLookup = new Map();\n        this.atlasManager = options.atlasManager;\n    }\n    /**\n     * This dequeues all instance requests for a resource and processes the request which will\n     * inevitably make the instance active\n     */\n    AtlasResourceManager.prototype.dequeueRequests = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var requests;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.requestQueue.length) return [3 /*break*/, 2];\n                        requests = this.requestQueue.slice(0);\n                        // Empty the queue to begin taking in new requests as needed\n                        this.requestQueue = [];\n                        // Tell the atlas manager to update with all of the requested resources\n                        return [4 /*yield*/, this.atlasManager.updateAtlas(this.targetAtlas, requests)];\n                    case 1:\n                        // Tell the atlas manager to update with all of the requested resources\n                        _a.sent();\n                        // Once the manager has been updated, we can now flag all of the instances waiting for the resources\n                        // As active, which should thus trigger an update to the layers to perform a diff for each instance\n                        requests.forEach(function (resource) {\n                            _this.requestLookup.get(resource).forEach(function (waiting) {\n                                var layer = waiting[0];\n                                var instance = waiting[1];\n                                // If the instance is still associated with a cluster, then the instance can be activated. Having\n                                // A cluster is indicative the instance has not been deleted.\n                                if (layer.uniformManager.getUniforms(instance)) {\n                                    instance.active = true;\n                                }\n                            });\n                        });\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This retrieves the actual atlas texture that should be applied to a uniform's\n     * value.\n     */\n    AtlasResourceManager.prototype.getAtlasTexture = function (key) {\n        var atlas = this.atlasManager.getAtlasTexture(key);\n        if (atlas) {\n            return atlas.texture;\n        }\n        return null;\n    };\n    /**\n     * This is a request for atlas texture resources. It will produce either the coordinates needed to\n     * make valid texture lookups, or it will trigger a loading of resources to an atlas and cause an\n     * automated deactivation and reactivation of the instance.\n     */\n    AtlasResourceManager.prototype.request = function (layer, instance, resource) {\n        var texture = resource.texture;\n        // If the texture is ready and available, then we simply return the IO values\n        if (texture) {\n            return toInstanceIOValue(texture);\n        }\n        // If a request is already made, then we must save the instance making the request for deactivation and\n        // Reactivation but without any additional atlas loading\n        var existingRequests = this.requestLookup.get(resource);\n        if (existingRequests) {\n            existingRequests.push([layer, instance]);\n            instance.active = false;\n            return toInstanceIOValue(texture);\n        }\n        // If the texture is not available, then we must load the resource, deactivate the instance\n        // And wait for the resource to become available. Once the resource is available, the system\n        // Must activate the instance to render the resource.\n        instance.active = false;\n        this.requestQueue.push(resource);\n        this.requestLookup.set(resource, [[layer, instance]]);\n        // This returns essentially returns blank values for the resource lookup\n        return toInstanceIOValue(texture);\n    };\n    /**\n     * This is used by the system to target the correct atlas for subsequent requests to a resource.\n     */\n    AtlasResourceManager.prototype.setTargetAtlas = function (target) {\n        this.targetAtlas = target;\n    };\n    return AtlasResourceManager;\n}());\nexports.AtlasResourceManager = AtlasResourceManager;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar canvas;\nvar ImageRasterizer = /** @class */ (function () {\n    function ImageRasterizer() {\n    }\n    /**\n     * This loops until our canvas context is available\n     */\n    ImageRasterizer.awaitContext = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!canvas) return [3 /*break*/, 2];\n                        this.getContext();\n                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 0];\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Attempts to populate the 'canvas' context for rendering images offscreen.\n     */\n    ImageRasterizer.getContext = function () {\n        if (!canvas) {\n            canvas = document.createElement('canvas').getContext('2d');\n        }\n        return canvas;\n    };\n    /**\n     * This renders our image to a sizeable canvas where we loop over the pixel data to determine\n     * the bounds of the image.\n     *\n     * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n     *                                 the size to be rendered to the texture to the size the image\n     *                                 should be within world space.\n     * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n     */\n    ImageRasterizer.calculateImageSize = function (resource, sampleScale) {\n        /** Get the image properties for rasterizing */\n        var image = resource.image.element;\n        if (image.width === 0 || image.height === 0) {\n            console.warn('Images provided shoud have valid dimensions! Please ensure the image is loaded first.');\n            return;\n        }\n        // Just make sure th canvas is available\n        canvas.canvas.width = 100;\n        canvas.canvas.height = 100;\n        // Render the image into our canvas merely to ensure the image can be rendered\n        // This action often 'warms up' images such as images that have a data URL instead of a path\n        canvas.drawImage(image, 0, 0);\n        // Make sure the rasterization object is initialized\n        resource.rasterization = resource.rasterization || {\n            texture: { height: 0, width: 0 },\n            world: { height: 0, width: 0 },\n        };\n        // Update the calculated texture size.\n        resource.rasterization.texture = {\n            height: image.height * resource.sampleScale,\n            width: image.width * resource.sampleScale,\n        };\n        resource.rasterization.world = {\n            height: image.height,\n            width: image.width,\n        };\n        resource.rasterization.image = image;\n    };\n    /**\n     * Performs the rendering of the image\n     */\n    ImageRasterizer.render = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // Make sure our canvas object is ready for rendering\n                    return [4 /*yield*/, this.awaitContext()];\n                    case 1:\n                        // Make sure our canvas object is ready for rendering\n                        _a.sent();\n                        // Calculate all of the image metrics and ensure the image can be drawn\n                        this.calculateImageSize(resource, resource.sampleScale);\n                        return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    /**\n     * Performs the rendering of the image\n     */\n    ImageRasterizer.renderSync = function (resource) {\n        // Ensure our offscreen canvas is prepped\n        this.getContext();\n        if (!canvas) {\n            console.warn('Can not render a image synchronously without the canvas context being ready.');\n            return resource;\n        }\n        // Calculate all of the image metrics and generate a canvas on the image that can\n        // Be rendered to the canvas.\n        this.calculateImageSize(resource, resource.sampleScale);\n        return resource;\n    };\n    return ImageRasterizer;\n}());\nexports.ImageRasterizer = ImageRasterizer;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\nvar atlas_1 = require(\"./atlas\");\nvar color_atlas_resource_1 = require(\"./color-atlas-resource\");\nvar color_rasterizer_1 = require(\"./color-rasterizer\");\nvar image_atlas_resource_1 = require(\"./image-atlas-resource\");\nvar label_atlas_resource_1 = require(\"./label-atlas-resource\");\nvar label_rasterizer_1 = require(\"./label-rasterizer\");\nvar sub_texture_1 = require(\"./sub-texture\");\nvar debug = require('debug')('webgl-surface:Atlas');\nvar ZERO_IMAGE = {\n    aspectRatio: 0,\n    atlasBL: { x: 0, y: 0 },\n    atlasBR: { x: 0, y: 0 },\n    atlasReferenceID: '',\n    atlasTexture: null,\n    atlasTL: { x: 0, y: 0 },\n    atlasTR: { x: 0, y: 0 },\n    heightOnAtlas: 0,\n    isValid: false,\n    pixelHeight: 0,\n    pixelWidth: 0,\n    widthOnAtlas: 0,\n};\n/**\n * Determines if a SubTexture is a valid SubTexture for rendering\n */\nfunction isValidImage(image) {\n    var isValid = false;\n    if (image && image.isValid) {\n        if (image.pixelWidth && image.pixelHeight) {\n            isValid = true;\n        }\n    }\n    return isValid;\n}\n/**\n * Defines a manager of atlas', which includes generating the atlas and producing\n * textures defining those pieces of atlas.\n */\nvar AtlasManager = /** @class */ (function () {\n    function AtlasManager() {\n        /** Stores all of the generated atlas' in a lookup by name */\n        this.allAtlas = new Map();\n    }\n    /**\n     * Atlas' must be created from scratch to update them. In order to properly\n     * update an existing one, you must destroy it then recreate it again.\n     * This is from not knowing how to update a texture via three js.\n     *\n     * @param resources The images with their image path set to be loaded into the atlas.\n     *               Images that keep an atlas ID of null indicates the image did not load\n     *               correctly\n     *\n     * @return {Texture} The Threejs texture that is created as our atlas. The images injected\n     *                   into the texture will be populated with the atlas'\n     */\n    AtlasManager.prototype.createAtlas = function (options, resources) {\n        return __awaiter(this, void 0, void 0, function () {\n            var atlas;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        atlas = new atlas_1.Atlas(options);\n                        // Set the manager to the atlas\n                        atlas.setManager(this);\n                        // Make the atlas identifiable by it's name\n                        this.allAtlas.set(atlas.id, atlas);\n                        if (!resources) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.updateAtlas(atlas.id, resources)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        debug('Atlas Created-> %o', atlas);\n                        return [2 /*return*/, atlas];\n                }\n            });\n        });\n    };\n    /**\n     * Disposes of the resources the atlas held and makes the atlas invalid for use\n     *\n     * @param atlasName\n     */\n    AtlasManager.prototype.destroyAtlas = function (atlasName) {\n        var atlas = this.allAtlas.get(atlasName);\n        if (atlas) {\n            atlas.destroy();\n        }\n    };\n    AtlasManager.prototype.setDefaultImage = function (image, atlasName) {\n        image = Object.assign(image, ZERO_IMAGE, { atlasReferenceID: atlasName });\n        return image;\n    };\n    /**\n     * This loads, packs, and draws the indicated image into the specified canvas\n     * using the metrics that exists for the specified atlas.\n     *\n     * @param resource The image who should have it's image path loaded\n     * @param atlasName The name of the atlas to make the packing work\n     * @param canvas The canvas we will be drawing into to generate the complete image\n     *\n     * @return {Promise<boolean>} Promise that resolves to if the image successfully was drawn or not\n     */\n    AtlasManager.prototype.draw = function (atlas, resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var canvas, atlasName, loadedImage, rasterization, texture, rect, dimensions, packing, insertedNode, ux, uy, uw, uh, onePixelX, atlasDimensions, bottom, top_1, left, right;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        canvas = atlas.texture.image;\n                        atlasName = atlas.id;\n                        // Register the resource with the atlas\n                        if (!atlas.registerResource(resource)) {\n                            console.warn('Could not draw resource to the atlas as the resource was not properly registered to the atlas first', atlas, resource);\n                            return [2 /*return*/, Promise.resolve(false)];\n                        }\n                        return [4 /*yield*/, this.loadImage(resource)];\n                    case 1:\n                        loadedImage = _a.sent();\n                        // Only a non-null image means the image loaded correctly\n                        if (loadedImage && isValidImage(resource.texture)) {\n                            rasterization = resource.rasterization;\n                            texture = resource.texture;\n                            rect = new bounds_1.Bounds({ left: 0, right: rasterization.texture.width, top: 0, bottom: rasterization.texture.height });\n                            dimensions = {\n                                first: texture,\n                                second: rect,\n                            };\n                            // Auto add a buffer in\n                            dimensions.second.width += 1;\n                            dimensions.second.height += 1;\n                            packing = atlas.packing;\n                            insertedNode = packing.insert(dimensions);\n                            // If the result was NULL we did not successfully insert the image into any map\n                            if (insertedNode) {\n                                debug('Atlas location determined: %o', insertedNode);\n                                // Apply the image to the node\n                                insertedNode.nodeImage = texture;\n                                ux = insertedNode.nodeDimensions.x / atlas.width;\n                                uy = insertedNode.nodeDimensions.y / atlas.height;\n                                uw = insertedNode.nodeDimensions.width / atlas.width;\n                                uh = insertedNode.nodeDimensions.height / atlas.height;\n                                onePixelX = 1 / atlas.width;\n                                atlasDimensions = new bounds_1.Bounds({\n                                    bottom: 1.0 - uy,\n                                    left: ux,\n                                    right: ux + uw,\n                                    top: 1.0 - (uy + uh),\n                                });\n                                bottom = atlasDimensions.bottom;\n                                top_1 = atlasDimensions.y;\n                                left = atlasDimensions.x;\n                                right = atlasDimensions.x + atlasDimensions.width - onePixelX;\n                                texture.atlasReferenceID = atlasName;\n                                texture.atlasTL = { x: left, y: top_1 };\n                                texture.atlasBR = { x: right, y: bottom };\n                                texture.atlasBL = { x: left, y: bottom };\n                                texture.atlasTR = { x: right, y: top_1 };\n                                texture.widthOnAtlas = Math.abs(texture.atlasTR.x - texture.atlasTL.x);\n                                texture.heightOnAtlas = Math.abs(texture.atlasTR.y - texture.atlasBR.y);\n                                texture.pixelWidth = rasterization.texture.width;\n                                texture.pixelHeight = rasterization.texture.height;\n                                // Now draw the image to the indicated canvas\n                                canvas.getContext('2d').drawImage(loadedImage, insertedNode.nodeDimensions.x, insertedNode.nodeDimensions.y);\n                                // We have finished inserting\n                                return [2 /*return*/, true];\n                            }\n                            else {\n                                // Log an error\n                                console.error(\"Could not fit resource into atlas\", resource);\n                                resource.texture = this.setDefaultImage(resource.texture, atlasName);\n                                return [2 /*return*/, false];\n                            }\n                        }\n                        else {\n                            // Log an error and load a default sub texture\n                            console.error(\"Could not load resource:\", resource);\n                            resource.texture = this.setDefaultImage(resource.texture, atlasName);\n                            return [2 /*return*/, false];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Retrieves the threejs texture for the atlas\n     *\n     * @param atlasName The identifier of the atlas\n     */\n    AtlasManager.prototype.getAtlasTexture = function (atlasName) {\n        return this.allAtlas.get(atlasName);\n    };\n    /**\n     * This takes in any atlas resource and rasterizes it.\n     *\n     * @param {SubTexture} resource This is any atlas resource which will have it's image rasterized\n     *\n     * @return {Promise<HTMLImageElement>} A promise to resolve to the loaded image\n     *                                     or null if there was an error\n     */\n    AtlasManager.prototype.loadImage = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var imageSrc, subTexture, image_1, image, image;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        subTexture = resource.texture || new sub_texture_1.SubTexture();\n                        resource.texture = subTexture;\n                        if (!(resource instanceof image_atlas_resource_1.ImageAtlasResource)) return [3 /*break*/, 4];\n                        if (!resource.image.element) return [3 /*break*/, 2];\n                        if (resource.image.element.width !== 0 && resource.image.element.height !== 0) {\n                            image_1 = resource.image.element;\n                            subTexture.pixelWidth = image_1.width;\n                            subTexture.pixelHeight = image_1.height;\n                            subTexture.aspectRatio = image_1.width / image_1.height;\n                            return [2 /*return*/, image_1];\n                        }\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                var image = resource.image.element;\n                                image.onload = function () {\n                                    subTexture.pixelWidth = image.width;\n                                    subTexture.pixelHeight = image.height;\n                                    subTexture.aspectRatio = image.width / image.height;\n                                    resolve(image);\n                                };\n                                image.onerror = function () {\n                                    resolve(null);\n                                };\n                            })];\n                    case 1:\n                        image = _a.sent();\n                        return [2 /*return*/, image];\n                    case 2:\n                        if (resource.image.path) {\n                            imageSrc = resource.image.path;\n                        }\n                        _a.label = 3;\n                    case 3: return [3 /*break*/, 10];\n                    case 4:\n                        if (!(resource instanceof label_atlas_resource_1.LabelAtlasResource)) return [3 /*break*/, 7];\n                        if (!!resource.rasterization.canvas) return [3 /*break*/, 6];\n                        return [4 /*yield*/, label_rasterizer_1.LabelRasterizer.render(resource)];\n                    case 5:\n                        _a.sent();\n                        _a.label = 6;\n                    case 6:\n                        // Make sure the rasterization properly executed\n                        if (resource.rasterization.canvas) {\n                            debug('Rasterized label %o', resource.rasterization);\n                            imageSrc = resource.rasterization.canvas.toDataURL('image/png');\n                        }\n                        else {\n                            console.warn('The label was not able to be rasterized');\n                        }\n                        return [3 /*break*/, 10];\n                    case 7:\n                        if (!(resource instanceof color_atlas_resource_1.ColorAtlasResource)) return [3 /*break*/, 10];\n                        if (!!resource.rasterization.canvas) return [3 /*break*/, 9];\n                        return [4 /*yield*/, color_rasterizer_1.ColorRasterizer.render(resource)];\n                    case 8:\n                        _a.sent();\n                        _a.label = 9;\n                    case 9:\n                        // Make sure the rasterization properly executed\n                        if (resource.rasterization.canvas) {\n                            debug('Rasterized color %o', resource.rasterization);\n                            imageSrc = resource.rasterization.canvas.toDataURL('image/png');\n                        }\n                        else {\n                            console.warn('The color was not able to be rasterized');\n                        }\n                        _a.label = 10;\n                    case 10:\n                        if (!imageSrc) return [3 /*break*/, 12];\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                var image = new Image();\n                                image.onload = function () {\n                                    subTexture.pixelWidth = image.width;\n                                    subTexture.pixelHeight = image.height;\n                                    subTexture.aspectRatio = image.width / image.height;\n                                    resolve(image);\n                                };\n                                image.onerror = function () {\n                                    resolve(null);\n                                };\n                                image.src = imageSrc;\n                            })];\n                    case 11:\n                        image = _a.sent();\n                        return [2 /*return*/, image];\n                    case 12: return [2 /*return*/, null];\n                }\n            });\n        });\n    };\n    /**\n     * This targets an existing atlas and attempts to update it with the provided atlas resources.\n     *\n     * @param atlasName\n     * @param resources\n     */\n    AtlasManager.prototype.updateAtlas = function (atlasName, resources) {\n        return __awaiter(this, void 0, void 0, function () {\n            var atlas, _i, resources_1, resource;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        atlas = this.allAtlas.get(atlasName);\n                        if (!atlas) return [3 /*break*/, 5];\n                        _i = 0, resources_1 = resources;\n                        _a.label = 1;\n                    case 1:\n                        if (!(_i < resources_1.length)) return [3 /*break*/, 4];\n                        resource = resources_1[_i];\n                        return [4 /*yield*/, this.draw(atlas, resource)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        // Perform the best method for updating the underlying texture of the atlas to the laresr changes\n                        atlas.updateTexture();\n                        return [3 /*break*/, 6];\n                    case 5:\n                        console.warn('Can not update non-existing atlas:', atlasName, 'These resources will not be loaded:', resources);\n                        _a.label = 6;\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return AtlasManager;\n}());\nexports.AtlasManager = AtlasManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\n/**\n * This is used specifically by the atlas manager to aid in packing\n * in textures within an area. This will guarantee boundaries of textures are\n * not violated and provide proper feedback for where to draw a given image\n */\nvar PackNode = /** @class */ (function () {\n    function PackNode(x, y, width, height) {\n        this.child = [null, null];\n        this.isLeaf = true;\n        this.nodeImage = null;\n        this.nodeDimensions = new bounds_1.Bounds({\n            height: height,\n            width: width,\n            x: x,\n            y: y,\n        });\n    }\n    /**\n     * Deletes all of the sub nodes in this Mapping, thus clearing up memory usage\n     */\n    PackNode.prototype.destroy = function () {\n        this.nodeImage = null;\n        if (this.child[0]) {\n            this.child[0].destroy();\n        }\n        if (this.child[1]) {\n            this.child[1].destroy();\n        }\n        this.child[0] = undefined;\n        this.child[1] = undefined;\n    };\n    /**\n     * Indicates if there is a child\n     */\n    PackNode.prototype.hasChild = function () {\n        if (this.child[0] && !this.child[0].nodeImage) {\n            return !this.child[0].isLeaf;\n        }\n        if (this.child[1] && !this.child[1].nodeImage) {\n            return !this.child[1].isLeaf;\n        }\n        return false;\n    };\n    /**\n     * Inserts images into our mapping, fitting them appropriately\n     */\n    PackNode.prototype.insert = function (image) {\n        if (!this.isLeaf) {\n            // Try inserting into first child\n            var newNode = this.child[0].insert(image);\n            if (newNode !== null) {\n                return newNode;\n            }\n            // No room in first so insert into second\n            return this.child[1].insert(image);\n        }\n        else {\n            // If there's already an image here, return\n            if (this.nodeImage) {\n                return null;\n            }\n            // Check the fit status of the image in this nodes rectangle space\n            var fitFlag = this.nodeDimensions.fits(image.second);\n            // If we're too small, return null indicating can not fit\n            if (fitFlag === 0) {\n                return null;\n            }\n            // If we're just right, accept\n            if (fitFlag === 1) {\n                return this;\n            }\n            // Otherwise, gotta split this node and create some leaves\n            this.isLeaf = false;\n            // Get the image width\n            var imgWidth = image.second.width;\n            var imgHeight = image.second.height;\n            // Decide which way to split\n            var dWidth = this.nodeDimensions.width - imgWidth;\n            var dHeight = this.nodeDimensions.height - image.second.height;\n            if (dWidth > dHeight) {\n                this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, imgWidth, this.nodeDimensions.height);\n                this.child[1] = new PackNode(this.nodeDimensions.x + imgWidth, this.nodeDimensions.y, dWidth, this.nodeDimensions.height);\n            }\n            else {\n                this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, this.nodeDimensions.width, imgHeight);\n                this.child[1] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y + imgHeight, this.nodeDimensions.width, dHeight);\n            }\n        }\n        // Insert into first child we created\n        return this.child[0].insert(image);\n    };\n    /**\n     * Removes the image from the mapping and tries to open up as much space as possible.\n     *\n     * @param {AtlasTexture} image The image to insert into the\n     */\n    PackNode.prototype.remove = function (image) {\n        if (!this.isLeaf) {\n            // Try removing from first child\n            var removed = this.child[0].remove(image);\n            if (removed) {\n                return true;\n            }\n            // Try remove from second\n            removed = this.child[1].remove(image);\n            if (!this.child[0].hasChild()) {\n                if (!this.child[1].hasChild()) {\n                    this.child[0] = null;\n                    this.child[1] = null;\n                }\n            }\n            return removed;\n        }\n        else {\n            if (this.nodeImage === image) {\n                this.nodeImage = null;\n                image.atlasReferenceID = null;\n                image.pixelWidth = 0;\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n    };\n    return PackNode;\n}());\nexports.PackNode = PackNode;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../../types\");\nvar event_manager_1 = require(\"../event-manager\");\n/**\n * This class is an injected event manager for the surface, it specifically handles taking in mouse events intended for view interactions\n * and broadcasts them to the layers that have picking enabled, thus allowing the layers to respond to\n * mouse view locations and broadcast Instance interactions based on the interaction with the View the layer is a part of\n *\n * In Summary: This is an adapter that takes in interactions to the views and injects those events into the layers associated with\n * the views so that the layers can translate the events to gestures.\n */\nvar LayerMouseEvents = /** @class */ (function (_super) {\n    __extends(LayerMouseEvents, _super);\n    function LayerMouseEvents(sceneViews) {\n        var _this = _super.call(this) || this;\n        /** This tracks which views have the mouse over them so we can properly broadcast view is out events */\n        _this.isOver = new Map();\n        _this.sceneViews = sceneViews;\n        return _this;\n    }\n    LayerMouseEvents.prototype.getSceneViewsUnderMouse = function (e) {\n        var sceneViewByViewId = new Map();\n        // Map the scene views by the view's identifiers\n        for (var _i = 0, _a = this.sceneViews; _i < _a.length; _i++) {\n            var sceneView = _a[_i];\n            sceneViewByViewId.set(sceneView.view.id, sceneView);\n        }\n        // Now retrieve and convert each view under the mouse to the scene view it coincides with\n        return e.viewsUnderMouse.map(function (viewItem) { return sceneViewByViewId.get(viewItem.view.id); });\n    };\n    LayerMouseEvents.prototype.getMouseByViewId = function (e) {\n        // This is the mouse position for the provided view in view space\n        var viewMouseByViewId = new Map();\n        for (var _i = 0, _a = e.viewsUnderMouse; _i < _a.length; _i++) {\n            var viewItem = _a[_i];\n            viewMouseByViewId.set(viewItem.view.id, viewItem.mouse);\n        }\n        return viewMouseByViewId;\n    };\n    LayerMouseEvents.prototype.handleClick = function (e, button) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseClick(view, mouse); });\n    };\n    LayerMouseEvents.prototype.handleDrag = function (e, drag) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseDrag(view, mouse); });\n    };\n    LayerMouseEvents.prototype.handleInteraction = function (e, callback) {\n        // Get all of the scenes under the mouse\n        var sceneViews = this.getSceneViewsUnderMouse(e);\n        // Get a lookup of a view id to the mouse position in the view\n        var viewMouseByViewId = this.getMouseByViewId(e);\n        // For every view of every scene, we must tell it's layers it's world space is receiving mouse interactions\n        for (var _i = 0, sceneViews_1 = sceneViews; _i < sceneViews_1.length; _i++) {\n            var sceneView = sceneViews_1[_i];\n            this.handleSceneView(sceneView, viewMouseByViewId, callback);\n        }\n        return sceneViews;\n    };\n    LayerMouseEvents.prototype.handleMouseDown = function (e, button) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseDown(view, mouse); });\n    };\n    LayerMouseEvents.prototype.handleMouseUp = function (e) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseUp(view, mouse); });\n    };\n    LayerMouseEvents.prototype.handleMouseOver = function (e) {\n        // We let the mouse move event handle the registration of moused over views\n    };\n    LayerMouseEvents.prototype.handleMouseOut = function (e) {\n        var _this = this;\n        // Get a lookup of a view id to the mouse position in the view\n        var viewMouseByViewId = this.getMouseByViewId(e);\n        var screen = e.screen.mouse;\n        // All views that are moused over should no longer be considered over and broadcast a mouse out\n        this.isOver.forEach(function (flag, sceneView) {\n            // Since we are leaving the view we must make the view relative cooridinates fromt he screen space coords\n            viewMouseByViewId.set(sceneView.view.id, sceneView.view.screenToView(screen));\n            _this.handleSceneView(sceneView, viewMouseByViewId, function (layer, view, mouse) { return layer.interactions.handleMouseOut(view, mouse); });\n        });\n        // Nothing is over anymore\n        this.isOver.clear();\n    };\n    LayerMouseEvents.prototype.handleMouseMove = function (e) {\n        var _this = this;\n        // Get all of the scenes we have interacted with, and broadcast a move event for each\n        var allSceneViews = this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseMove(view, mouse); });\n        // Get a lookup of a view id to the mouse position in the view\n        var viewMouseByViewId = this.getMouseByViewId(e);\n        // Get the position of the mouse on the screen\n        var screen = e.screen.mouse;\n        // For quick lookups map all of the current SceneViews that are over\n        var currentSceneViews = new Map();\n        allSceneViews.forEach(function (v) { return currentSceneViews.set(v, true); });\n        // Detect which of the views are newly over\n        currentSceneViews.forEach(function (flag, sceneView) {\n            if (!_this.isOver.get(sceneView)) {\n                _this.handleSceneView(sceneView, viewMouseByViewId, function (layer, view, mouse) { return layer.interactions.handleMouseOver(view, mouse); });\n            }\n        });\n        // Detect which of the views are no longer over\n        this.isOver.forEach(function (flag, sceneView) {\n            if (!currentSceneViews.get(sceneView)) {\n                // Since these views were not interacted with, we must create the mouse interaction position\n                viewMouseByViewId.set(sceneView.view.id, sceneView.view.screenToView(screen));\n                _this.handleSceneView(sceneView, viewMouseByViewId, function (layer, view, mouse) { return layer.interactions.handleMouseOut(view, mouse); });\n            }\n        });\n        // Update the current views that are over to the currently over views for next event\n        this.isOver = currentSceneViews;\n    };\n    LayerMouseEvents.prototype.handleSceneView = function (sceneView, viewMouseByViewId, callback) {\n        var view = sceneView.view;\n        var mouse = viewMouseByViewId.get(view.id);\n        for (var _i = 0, _a = sceneView.scene.layers; _i < _a.length; _i++) {\n            var layer = _a[_i];\n            if (layer.picking && layer.picking.type === types_1.PickType.ALL) {\n                callback(layer, view, mouse);\n            }\n        }\n    };\n    return LayerMouseEvents;\n}(event_manager_1.EventManager));\nexports.LayerMouseEvents = LayerMouseEvents;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar generate_layer_model_1 = require(\"../surface/generate-layer-model\");\nvar make_instance_uniform_name_1 = require(\"./make-instance-uniform-name\");\n/**\n * This class does a whoooooole lot of making the magical instancing optimization controls possible.\n *\n * Our instancing hackyness comes from the idea that uniforms are fast, and you don't have to commit\n * ALL of them when you touch just a little piece, and you don't have worry about drivers not supporting\n * partial vertex buffer updates.\n *\n * This also is WebGL 1.0 compatible without any extensions that are poorly implemented. And again: does\n * NOT require entire attribute buffer commits.\n *\n * Uniforms are limited for any given draw call. So we have to create multiple materials to support\n * chunks of the instances that need to be drawn. We then have to associate an instance with the set\n * of uniforms that is related to the instance and keep them paired together. If we have too many instances\n * we must generate more buffers to accomodate them.\n *\n * If we remove instances, we must free up the uniform set so that others can use the uniforms. While the uniforms\n * are not in use, the instance should not be rendering.\n */\nvar InstanceUniformManager = /** @class */ (function () {\n    function InstanceUniformManager(layer, scene) {\n        /** The generated buffers by this manager */\n        this.buffers = [];\n        /** The uniform clusters that are free and can be used by an instance */\n        this.availableClusters = [];\n        /** A lookup of an instance to a cluster of uniforms associated with it */\n        this.instanceToCluster = new Map();\n        /** A map of a cluster of uniforms to the buffer it comes from */\n        this.clusterToBuffer = new Map();\n        this.layer = layer;\n        var maxUniformBlock = 0;\n        layer.instanceAttributes.forEach(function (attributes) {\n            maxUniformBlock = Math.max(attributes.block, maxUniformBlock);\n        });\n        this.uniformBlocksPerInstance = maxUniformBlock + 1;\n        this.scene = scene;\n    }\n    /**\n     * This adds an instance to the manager and gives the instance an associative\n     * block of uniforms to work with.\n     */\n    InstanceUniformManager.prototype.add = function (instance) {\n        // If there are no available buffers, we must add a buffer\n        if (this.availableClusters.length <= 0) {\n            this.makeNewBuffer();\n        }\n        var cluster = this.availableClusters.shift();\n        if (cluster) {\n            this.instanceToCluster.set(instance, cluster);\n        }\n        else {\n            console.warn('No valid cluster available for instance added to uniform manager.');\n        }\n        return cluster;\n    };\n    /**\n     * This retireves the uniforms associated with an instance, or returns nothing\n     * if the instance has not been associated yet.\n     */\n    InstanceUniformManager.prototype.getUniforms = function (instance) {\n        return this.instanceToCluster.get(instance);\n    };\n    /**\n     * Disassociates an instance with it's group of uniforms and makes the instance\n     * in the buffer no longer drawable.\n     */\n    InstanceUniformManager.prototype.remove = function (instance) {\n        var cluster = this.instanceToCluster.get(instance);\n        // If the instance is associated with a cluster, we can add the cluster back to being available\n        // For another instance.\n        if (cluster) {\n            this.instanceToCluster.delete(instance);\n            this.availableClusters.unshift(cluster);\n        }\n        return cluster;\n    };\n    /**\n     * Clears all elements of this manager from the current scene it was in.\n     */\n    InstanceUniformManager.prototype.removeFromScene = function () {\n        var _this = this;\n        this.buffers.forEach(function (buffer, index) {\n            _this.scene.container.remove(buffer.model);\n        });\n        this.scene = null;\n    };\n    /**\n     * Applies the buffers to the provided scene for rendering.\n     */\n    InstanceUniformManager.prototype.setScene = function (scene) {\n        var _this = this;\n        this.buffers.forEach(function (buffer, index) {\n            _this.scene.container.add(buffer.model);\n        });\n        this.scene = scene;\n    };\n    /**\n     * This generates a new buffer of uniforms to associate instances with.\n     */\n    InstanceUniformManager.prototype.makeNewBuffer = function () {\n        // We generate a new geometry object for the buffer as the geometry\n        // Needs to have it's own unique draw range per buffer for optimal\n        // Performance\n        var newGeometry = new Three.BufferGeometry();\n        this.layer.vertexAttributes.forEach(function (attribute) {\n            newGeometry.addAttribute(attribute.name, attribute.materialAttribute);\n        });\n        // Ensure the draw range covers every instance in the geometry.\n        newGeometry.drawRange.start = 0;\n        newGeometry.drawRange.count = this.layer.maxInstancesPerBuffer * this.layer.instanceVertexCount;\n        // This is the material that is generated for the layer that utilizes all of the generated and\n        // Injected shader IO and shader fragments\n        var newMaterial = this.layer.material.clone();\n        // Now make a Model for the buffer so it can be rendered withn the scene\n        var newModel = generate_layer_model_1.generateLayerModel(this.layer, newGeometry, newMaterial);\n        // We render junkloads of instances in a buffer. Culling will have to happen\n        // On an instance level.\n        newModel.frustumCulled = false;\n        // Make our new buffer which will manage the geometry and everything necessary\n        var buffer = {\n            activeInstances: [],\n            clusters: [],\n            firstInstance: 0,\n            geometry: newGeometry,\n            lastInstance: 0,\n            material: newMaterial,\n            model: newModel,\n        };\n        this.buffers.push(buffer);\n        // Now that we have created a new buffer, we have all of it's uniforms\n        // To use to render more instances. We must take the instancing uniforms\n        // And divvy them up into clusters for our available buffer.\n        var uniformIndex = 0;\n        var uniformName = make_instance_uniform_name_1.makeInstanceUniformNameArray();\n        var instanceData = newMaterial.uniforms[uniformName];\n        // We must ensure the vector objects are TOTALLY unique otherwise they'll get shared across buffers\n        instanceData.value = instanceData.value.map(function () { return new Three.Vector4(0.0, 0.0, 0.0, 0.0); });\n        for (var i = 0, end = this.layer.maxInstancesPerBuffer; i < end; ++i) {\n            var cluster = {\n                instanceIndex: i,\n                uniform: instanceData,\n                uniformRange: [uniformIndex, 0],\n            };\n            uniformIndex += this.uniformBlocksPerInstance;\n            cluster.uniformRange[1] = uniformIndex;\n            buffer.clusters.push(cluster);\n            this.availableClusters.push(cluster);\n            this.clusterToBuffer.set(cluster, buffer);\n        }\n        // Grab the global uniforms from the material and add it to the uniform's materialUniform list so that\n        // We can keep uniforms consistent across all Instances\n        for (var i = 0, end = this.layer.uniforms.length; i < end; ++i) {\n            var uniform = this.layer.uniforms[i];\n            uniform.materialUniforms.push(newMaterial.uniforms[uniform.name]);\n        }\n        // Now that we are ready to utilize the buffer, let's add it to the scene so it may be rendered.\n        // Each new buffer equates to one draw call.\n        if (this.scene) {\n            this.scene.container.add(buffer.model);\n        }\n    };\n    return InstanceUniformManager;\n}());\nexports.InstanceUniformManager = InstanceUniformManager;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nvar maxPopulation = 5;\nvar maxDepth = 10;\n/**\n * This filters a quad tree query by type\n *\n * @export\n * @template T\n */\nfunction filterQuery(type, queryValues) {\n    var filtered = [];\n    queryValues.forEach(function (obj) {\n        if (type.find(function (t) { return obj instanceof t; })) {\n            filtered.push(obj);\n        }\n    });\n    return filtered;\n}\nexports.filterQuery = filterQuery;\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n *\n * @class Quadrants\n */\nvar Quadrants = /** @class */ (function () {\n    /**\n     * Creates an instance of Quadrants.\n     *\n     * @param bounds The bounds this will create quandrants for\n     * @param depth  The child depth of this element\n     *\n     * @memberOf Quadrants\n     */\n    function Quadrants(bounds, depth) {\n        this.TL = null;\n        this.TR = null;\n        this.BL = null;\n        this.BR = null;\n        var mid = bounds.mid;\n        this.TL = new Node(bounds.x, mid.x, bounds.y, mid.y, depth);\n        this.TR = new Node(mid.x, bounds.right, bounds.y, mid.y, depth);\n        this.BL = new Node(bounds.x, mid.x, mid.y, bounds.bottom, depth);\n        this.BR = new Node(mid.x, bounds.right, mid.y, bounds.bottom, depth);\n    }\n    /**\n     * Ensures all memory is released for all nodes and all references are removed\n     * to potentially high memory consumption items\n     *\n     * @memberOf Quadrants\n     */\n    Quadrants.prototype.destroy = function () {\n        this.TL.destroy();\n        this.TR.destroy();\n        this.BL.destroy();\n        this.BR.destroy();\n        this.TL = null;\n        this.TR = null;\n        this.BL = null;\n        this.BR = null;\n    };\n    return Quadrants;\n}());\nexports.Quadrants = Quadrants;\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n *\n * @export\n * @class Node\n */\nvar Node = /** @class */ (function () {\n    /**\n     * Creates an instance of Node.\n     *\n     * @param l     The bounding left wall of the space this node covers\n     * @param r     The bounding right wall of the space this node covers\n     * @param t     The bounding top wall of the space this node covers\n     * @param b     The bounding bottom wall of the space this node covers\n     * @param depth The depth within the quad tree this node resides\n     *\n     * @memberOf Node\n     */\n    function Node(left, right, top, bottom, depth) {\n        this.bounds = null;\n        this.children = [];\n        this.depth = 0;\n        this.nodes = null;\n        // If params insertted\n        if (arguments.length >= 4) {\n            this.bounds = new bounds_1.Bounds({\n                height: top - bottom,\n                width: right - left,\n                x: left,\n                y: top,\n            });\n        }\n        // Otherwise, make tiny start area\n        else {\n            this.bounds = new bounds_1.Bounds({\n                height: 1,\n                width: 1,\n                x: 0,\n                y: 0,\n            });\n        }\n        // Ensure the depth is set\n        this.depth = depth || 0;\n    }\n    /**\n     * Destroys this node and ensures all child nodes are destroyed as well.\n     *\n     * @memberOf Node\n     */\n    Node.prototype.destroy = function () {\n        this.children = null;\n        this.bounds = null;\n        if (this.nodes) {\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n    };\n    /**\n     * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n     * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n     * this quad tree spans (and this is the root node), the quad tree will expand to include\n     * the new child.\n     *\n     * @param child The Bounds type object to inject\n     * @param props Properties that can be retrieved with the child object if applicable\n     *\n     * @returns True if the insertion was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.add = function (child, props) {\n        // This is the entry function for adding children, so we must first expand our top node\n        // To cover the area that the child is located.\n        // If we're in bounds, then let's just add the child\n        if (child.isInside(this.bounds)) {\n            return this.doAdd(child);\n        }\n        // Otherwise, we need to expand first\n        else {\n            this.cover(child);\n            return this.add(child, props);\n        }\n    };\n    /**\n     * Adds a list of new children to this quad tree. It performs the same operations as\n     * addChild for each child in the list, however, it more efficiently recalculates the\n     * bounds necessary to cover the area the children cover.\n     *\n     * @param children      List of Bounds objects to inject\n     * @param childrenProps List of props to associate with each element\n     *\n     * @memberOf Node\n     */\n    Node.prototype.addAll = function (children, childrenProps) {\n        var _this = this;\n        // Ensure the properties are at least defined\n        childrenProps = childrenProps || [];\n        // Make sure we cover the entire area of all the children.\n        // We can speed this up a lot if we first calculate the total bounds the new children covers\n        var minX = Number.MAX_VALUE;\n        var minY = Number.MAX_VALUE;\n        var maxX = -Number.MAX_VALUE;\n        var maxY = -Number.MAX_VALUE;\n        // Get the dimensions of the new bounds\n        children.forEach(function (child) {\n            if (child.x < minX) {\n                minX = child.x;\n            }\n            if (child.right > maxX) {\n                maxX = child.right;\n            }\n            if (child.bottom > maxY) {\n                maxY = child.bottom;\n            }\n            if (child.y < minY) {\n                minY = child.y;\n            }\n        });\n        // Make sure our bounds includes the specified bounds\n        this.cover(new bounds_1.Bounds({\n            height: maxY - minY,\n            width: maxX - minX,\n            x: minX,\n            y: minY,\n        }));\n        // Add all of the children into the tree\n        children.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n     * This will cause all children to be re-injected into the tree.\n     *\n     * @param bounds The bounds to include in the tree's coverage\n     *\n     * @memberOf Node\n     */\n    Node.prototype.cover = function (bounds) {\n        var _this = this;\n        // If we are already covering the area: abort\n        if (bounds.isInside(this.bounds)) {\n            return;\n        }\n        // Make our bounds cover the new area\n        this.bounds.encapsulate(bounds);\n        this.bounds.x -= 1;\n        this.bounds.y -= 1;\n        this.bounds.width += 2;\n        this.bounds.height += 4;\n        // Get all of the children underneath this node\n        var allChildren = this.gatherChildren([]);\n        // Destroy the split nodes\n        if (this.nodes) {\n            // Completely...destroy...\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n        // Reinsert all children with the new dimensions in place\n        allChildren.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * When adding children, this performs the actual action of injecting the child into the tree\n     * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n     *\n     * @param child The Bounds item to inject into the tree\n     * @param props The props to remain associated with the child\n     *\n     * @returns True if the injection was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.doAdd = function (child) {\n        // If nodes are present, then we have already exceeded the population of this node\n        if (this.nodes) {\n            if (child.isInside(this.nodes.TL.bounds)) {\n                return this.nodes.TL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.TR.bounds)) {\n                return this.nodes.TR.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BL.bounds)) {\n                return this.nodes.BL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BR.bounds)) {\n                return this.nodes.BR.doAdd(child);\n            }\n            // Otherwise, this is a child overlapping this border\n            this.children.push(child);\n            return true;\n        }\n        // Otherwise, we have not had a split due to population limits being exceeded\n        else if (child.isInside(this.bounds)) {\n            this.children.push(child);\n            // If we exceeded our population for this quadrant, it is time to split up\n            if (this.children.length > maxPopulation && this.depth < maxDepth) {\n                this.split();\n            }\n            return true;\n        }\n        // This is when there is something wrong with the insertted child. The bounds\n        // For the quad should have grown without issue, but in this case the bounds\n        // Could not grow to accomodate the child.\n        if (isNaN(child.width + child.height + child.x + child.y)) {\n            console.error('Child did not fit into bounds because a dimension is NaN', child);\n        }\n        else if (child.area === 0) {\n            console.error('Child did not fit into bounds because the area is zero', child);\n        }\n        // Don't insert the child and continue\n        return true;\n    };\n    /**\n     * Collects all children of all the current and sub nodes into a single list.\n     *\n     * @param list The list we must aggregate children into\n     *\n     * @return The list specified as the list parameter\n     */\n    Node.prototype.gatherChildren = function (list) {\n        list = list.concat(this.children);\n        if (this.nodes) {\n            this.nodes.TL.gatherChildren(list);\n            this.nodes.TR.gatherChildren(list);\n            this.nodes.BL.gatherChildren(list);\n            this.nodes.BR.gatherChildren(list);\n        }\n        return list;\n    };\n    /**\n     * Entry query for determining query type based on input object\n     *\n     * @param bounds Can be a Bounds or a Point object\n     * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n     *               information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return An array of children that intersects with the query\n     */\n    Node.prototype.query = function (bounds, visit) {\n        // Query a rectangle\n        if (bounds instanceof bounds_1.Bounds) {\n            if (bounds.hitBounds(this.bounds)) {\n                return this.queryBounds(bounds, [], visit);\n            }\n            // Return an empty array when nothing is collided with\n            return [];\n        }\n        // Query a point\n        if (this.bounds.containsPoint(bounds)) {\n            return this.queryPoint(bounds, [], visit);\n        }\n        // Return an empty array when nothing is collided with\n        return [];\n    };\n    /**\n     * Queries children for intersection with a bounds object\n     *\n     * @param b     The Bounds to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return     Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryBounds = function (b, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.hitBounds(b)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (b.hitBounds(this.nodes.TL.bounds)) {\n                this.nodes.TL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.TR.bounds)) {\n                this.nodes.TR.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BL.bounds)) {\n                this.nodes.BL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BR.bounds)) {\n                this.nodes.BR.queryBounds(b, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Queries children for intersection with a point\n     *\n     * @param p     The Point to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return      Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryPoint = function (p, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.containsPoint(p)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (this.nodes.TL.bounds.containsPoint(p)) {\n                this.nodes.TL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.TR.bounds.containsPoint(p)) {\n                this.nodes.TR.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BL.bounds.containsPoint(p)) {\n                this.nodes.BL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BR.bounds.containsPoint(p)) {\n                this.nodes.BR.queryPoint(p, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Creates four sub quadrants for this node.\n     */\n    Node.prototype.split = function () {\n        // Gather all items to be handed down\n        var allChildren = this.gatherChildren([]);\n        // Gather all props for the children to be handed down as well\n        this.nodes = new Quadrants(this.bounds, this.depth + 1);\n        this.children = [];\n        while (allChildren.length > 0) {\n            this.doAdd(allChildren.pop());\n        }\n    };\n    /**\n     * Traverses the quad tree returning every quadrant encountered\n     *\n     * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n     */\n    Node.prototype.visit = function (cb) {\n        var finished = Boolean(cb(this));\n        if (this.nodes && !finished) {\n            this.nodes.TL.visit(cb);\n            this.nodes.TR.visit(cb);\n            this.nodes.BL.visit(cb);\n            this.nodes.BR.visit(cb);\n        }\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar QuadTree = /** @class */ (function (_super) {\n    __extends(QuadTree, _super);\n    function QuadTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return QuadTree;\n}(Node));\nexports.QuadTree = QuadTree;\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * Active `debug` instances.\n */\nexports.instances = [];\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  var prevTime;\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n  debug.destroy = destroy;\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  exports.instances.push(debug);\n\n  return debug;\n}\n\nfunction destroy () {\n  var index = exports.instances.indexOf(this);\n  if (index !== -1) {\n    exports.instances.splice(index, 1);\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var i;\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n\n  for (i = 0; i < exports.instances.length; i++) {\n    var instance = exports.instances[i];\n    instance.enabled = exports.enabled(instance.namespace);\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  if (name[name.length - 1] === '*') {\n    return true;\n  }\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__86__;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar browser = require(\"bowser\");\nvar three_1 = require(\"three\");\nvar debug = require('debug')('CommunicationsView:Mouse');\n/** Used to adjust the base whee delta for IE browsers */\nvar IE_ADJUSTMENT = 1 / 30;\n/** Used to adjust the rates for IE 11 */\nvar OLD_IE_ADJUSTMENT = -0.25;\n// This determines how large the delta can grow to in firefox\nvar MAX_FIREFOX_WHEELDELTA = 100;\n/**\n * Create a low pass filter memory bank so we can slow down rapid accelerations and let normal slower accelerations pass\n * Common use case for this is the discrepancy in firefox from mousewheels to trackpad scroll speeds\n */\nvar lowPassY = [0, 0, 0, 0];\n// These coefficients represent the coefficients of a FIR filter.\n// This FIR filter uses the lowPassY as the memory for the filter and is created for\n// The reasons specified for the lowPassY memory. To edit the coefficients, you simply\n// Ensure the coefficients added together === 1.0. If they do not, you may get an unstable\n// Result that goes to infinity rather quickly. Changing the distribution of these coefficients\n// Alters the rate at which the delta can approach MAX_FIREFOX_WHEELDELTA. Explaining exactly\n// How it affects the rate requires an understanding of FIR filters, so unless this is already\n// Known knowledge, it would be faster to just tweak the coefficients until a desired effect is\n// Attained.\nvar LOW_PASS_U0 = 0.1;\nvar LOW_PASS_U1 = 0.2;\nvar LOW_PASS_U2 = 0.2;\nvar LOW_PASS_U3 = 0.5;\nfunction normalizeFirefoxWheel(e) {\n    var wheel = e;\n    var deltaX = 0;\n    var deltaY = 0;\n    // Reset the filter if the direction changes to prevent lag in directional change\n    if (Math.sign(lowPassY[0]) !== Math.sign(deltaY)) {\n        lowPassY.splice(0, lowPassY.length, 0, 0, 0, 0);\n    }\n    deltaX = wheel.deltaX * MAX_FIREFOX_WHEELDELTA;\n    // Calculate the next value output from the FIR filter\n    deltaY = (wheel.deltaY * MAX_FIREFOX_WHEELDELTA) * LOW_PASS_U0 + lowPassY[0] * LOW_PASS_U1 + lowPassY[1] * LOW_PASS_U2 + lowPassY[2] * LOW_PASS_U3;\n    // Store the value of the filter in the FIR memory bank\n    lowPassY.unshift(deltaY);\n    // Keep our FIR memory clean and only the size of the number of coefficients\n    lowPassY.pop();\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeChromeWheel(e) {\n    var wheel = e;\n    return new three_1.Vector2(wheel.deltaX, -wheel.deltaY);\n}\nfunction normalizeIE11Wheel(e) {\n    var wheel = e;\n    var deltaX = wheel.deltaX;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    var deltaY = wheel.deltaY;\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = (wheel.wheelDelta || -wheel.detail) * OLD_IE_ADJUSTMENT;\n        }\n    }\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeIE12Wheel(e) {\n    var wheel = e;\n    var deltaX = wheel.deltaX, deltaY = wheel.deltaY;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = wheel.wheelDelta || -wheel.detail;\n        }\n    }\n    var v = new three_1.Vector2(deltaX, -deltaY);\n    v.multiplyScalar(0.25);\n    return v;\n}\n// Determine this browsers version of wheel normalization and apply it\nvar normalizeWheel;\nexports.normalizeWheel = normalizeWheel;\nif (browser.firefox) {\n    debug('Using mouse wheel for firefox');\n    exports.normalizeWheel = normalizeWheel = normalizeFirefoxWheel;\n}\nelse if (browser.msie && +browser.version >= 11) {\n    debug('Using mouse wheel for IE 11');\n    exports.normalizeWheel = normalizeWheel = normalizeIE11Wheel;\n}\nelse if (browser.msedge) {\n    debug('Using mouse wheel for MS EDGE');\n    exports.normalizeWheel = normalizeWheel = normalizeIE12Wheel;\n}\nelse {\n    debug('Using mouse wheel for Chrome');\n    exports.normalizeWheel = normalizeWheel = normalizeChromeWheel;\n}\n/**\n * Analyzes a MouseEvent and calculates the mouse coordinates (relative to the element).\n */\nfunction eventElementPosition(e, relative) {\n    var mouseX = 0, mouseY = 0, eventX = 0, eventY = 0, object = relative || e.nativeEvent.target;\n    // Get mouse position on document crossbrowser\n    if (!e) {\n        e = window.event;\n    }\n    if (e.pageX || e.pageY) {\n        mouseX = e.pageX;\n        mouseY = e.pageY;\n    }\n    else if (e.clientX || e.clientY) {\n        mouseX = e.clientX + document.body.scrollLeft\n            + document.documentElement.scrollLeft;\n        mouseY = e.clientY + document.body.scrollTop\n            + document.documentElement.scrollTop;\n    }\n    // Get parent element position in document\n    if (object.offsetParent) {\n        do {\n            eventX += object.offsetLeft;\n            eventY += object.offsetTop;\n            object = object.offsetParent;\n        } while (object);\n    }\n    // Mouse position minus elm position is mouseposition relative to element:\n    return { x: mouseX - eventX, y: mouseY - eventY };\n}\nexports.eventElementPosition = eventElementPosition;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar data_bounds_1 = require(\"../util/data-bounds\");\nfunction value(val, ref) {\n    var parse = \"\" + val;\n    var num = parseFloat(parse);\n    if (isNaN(num)) {\n        return 0;\n    }\n    // If this is a percentage use the reference as the num to multiply against\n    if (parse.indexOf('%') > -1) {\n        return (num / 100.0) * ref;\n    }\n    return num;\n}\n/**\n * This evaluates an absolute position with a reference to produce meaningful bounds.\n */\nfunction getAbsolutePositionBounds(item, reference) {\n    if (reference.width === 0 || reference.height === 0) {\n        console.warn('An AbsolutePosition evaluated to invalid dimensions.', 'Please ensure that the object provided and the reference has valid dimensions', 'to produce dimensions with width and height that are non-zero.', 'item:', item, 'reference:', reference.toString());\n    }\n    var bounds = data_bounds_1.DataBounds.emptyBounds();\n    var width;\n    var height;\n    // Calculate the horizontal values\n    if (item.width) {\n        bounds.width = value(item.width, reference.width);\n        if ('left' in item) {\n            bounds.x = value(item.left, reference.width);\n        }\n        else if ('right' in item) {\n            bounds.x = reference.width - value(item.right, reference.width) - bounds.width;\n        }\n    }\n    else {\n        var left = value(item.left, reference.width);\n        var right = reference.width - value(item.right, reference.width);\n        width = right - left;\n        if (width < 0) {\n            console.warn('An AbsolutePosition evaluated to invalid dimensions.', 'Please ensure that the object provided and the reference has valid dimensions', 'to produce dimensions with width and height that are greater than zero.', 'item:', item, 'reference:', reference.toString());\n        }\n        bounds.x = left;\n        bounds.width = width;\n    }\n    // Calculate the vertical values\n    if (item.height) {\n        bounds.height = value(item.height, reference.height);\n        if ('top' in item) {\n            bounds.y = value(item.top, reference.height);\n        }\n        else if ('bottom' in item) {\n            bounds.y = reference.height - value(item.bottom, reference.height) - bounds.height;\n        }\n    }\n    else {\n        var top_1 = value(item.top, reference.height);\n        var bottom = reference.height - value(item.bottom, reference.height);\n        height = bottom - top_1;\n        if (width < 0) {\n            console.warn('An AbsolutePosition evaluated to invalid dimensions.', 'Please ensure that the object provided and the reference has valid dimensions', 'to produce dimensions with width and height that are greater than zero.', 'item:', item, 'reference:', reference.toString());\n        }\n        bounds.y = top_1;\n        bounds.height = height;\n    }\n    if (bounds.width === 0 || bounds.height === 0 || isNaN(bounds.x + bounds.y + bounds.width + bounds.height)) {\n        bounds.x = 0;\n        bounds.y = 0;\n        bounds.width = reference.width;\n        bounds.height = reference.height;\n    }\n    return bounds;\n}\nexports.getAbsolutePositionBounds = getAbsolutePositionBounds;\n","module.exports = \"// These are projection methods utilizing the simpler camera breakdown approach\\n\\nvec3 cameraSpace(vec3 world) {\\n  return (world + cameraOffset) * cameraScale;\\n}\\n\\nvec3 cameraSpaceSize(vec3 worldSize) {\\n  return worldSize * cameraScale;\\n}\\n\\nvec4 clipSpace(vec3 world) {\\n  return vec4(((projection * modelView) * vec4(cameraSpace(world), 1.0)).xyz, 1.0);\\n}\\n\\nvec4 clipSpaceSize(vec3 worldSize) {\\n  return vec4(((projection * modelView) * vec4(cameraSpaceSize(worldSize), 0.0)).xyz, 1.0);\\n}\\n\"","module.exports = \"// When instancing is enabled, it causes a major list of uniforms to be generated\\n// it also generates a massive search tree to retrieve the correct unforms in question.\\n${instanceUniformDeclarations}\\n\\n// This is the uniforms provided by the system along with the uniforms created by the layer\\n${layerUniforms}\\n\\n// This is the attributes generated for vertex attributes\\n${vertexAttributes}\\n\\n// This is the methods and set up needed to retrieve a block of data for an instance\\n${instanceDataRetrieval}\\n\"","module.exports = \"// This is the injected dereferencing of the instance attributes\\n  int instanceIndex = int(instance);\\n  ${instanceDestructuring}\\n\\n  // This is a special injected instance attribute. It lets the system\\n  // control specific instances ability to draw, which allows the backend\\n  // system greater control on how it optimizes draw calls and it's buffers.\\n  if (_active == 0.0) {\\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n\\n    // Quick exit to prevent any geometry from arising from the instance\\n    return;\\n  }\\n\"","module.exports = \"// This is the fragment shader generated by the system\\n${layerUniforms}\\n\\n// --------------- The fragment shader provided by the layer ------------------\\n${shader}\\n\"","module.exports = \"// This is the vertex shader generated by the system\\n${shaderInput}\\n${projectionMethods}\\n// --------------- Vertex shader provided by the layer -----------------\\n${shader}\\n\"","module.exports = \"int instanceSize = ${instanceBlockCount};\\n\\nvec4 getBlock(int index, int instanceIndex) {\\n  return instanceData[(instanceSize * instanceIndex) + index];\\n}\\n\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar types_1 = require(\"../../types\");\nvar make_instance_uniform_name_1 = require(\"../../util/make-instance-uniform-name\");\nvar shader_templating_1 = require(\"../../util/shader-templating\");\nvar template_vars_1 = require(\"../fragments/template-vars\");\nvar instanceRetrievalArrayFragment = require('../fragments/instance-retrieval-array.vs');\n/** Defines the elements for destructuring out of a vector */\nvar VECTOR_COMPONENTS = ['x', 'y', 'z', 'w'];\n/** Converts a size to a shader type */\nvar sizeToType = {\n    1: 'float',\n    2: 'vec2',\n    3: 'vec3',\n    4: 'vec4',\n    9: 'mat3',\n    16: 'mat4',\n    /** This is the special case for instance attributes that want an atlas resource */\n    99: 'vec4',\n};\nfunction makeUniformArrayDeclaration(totalBlocks) {\n    return {\n        fragment: \"uniform vec4 \" + make_instance_uniform_name_1.makeInstanceUniformNameArray() + \"[\" + totalBlocks + \"];\",\n        materialUniforms: [\n            {\n                name: make_instance_uniform_name_1.makeInstanceUniformNameArray(),\n                type: '4fv',\n                value: new Array(totalBlocks)\n                    .fill(0)\n                    .map(function () { return new Three.Vector4(0, 0, 0, 0); }),\n            },\n        ],\n    };\n}\nexports.makeUniformArrayDeclaration = makeUniformArrayDeclaration;\nfunction makeInstanceRetrievalArray(blocksPerInstance) {\n    var templateOptions = {};\n    templateOptions[template_vars_1.templateVars.instanceBlockCount] = \"\" + blocksPerInstance;\n    var required = {\n        name: 'makeInstanceRetrievalArray',\n        values: [\n            template_vars_1.templateVars.instanceBlockCount,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(instanceRetrievalArrayFragment, templateOptions, required);\n    return results.shader;\n}\nexports.makeInstanceRetrievalArray = makeInstanceRetrievalArray;\nfunction makeInstanceDestructuringArray(instanceAttributes, blocksPerInstance) {\n    var out = '';\n    // Generate the blocks\n    for (var i = 0; i < blocksPerInstance; ++i) {\n        out += \"  vec4 block\" + i + \" = getBlock(\" + i + \", instanceIndex);\\n\";\n    }\n    instanceAttributes.forEach(function (attribute) {\n        var block = attribute.block;\n        // If we have a size the size of a block, then don't swizzle the vector\n        if (attribute.size === types_1.InstanceAttributeSize.FOUR) {\n            out += \"  \" + sizeToType[attribute.size] + \" \" + attribute.name + \" = block\" + block + \";\\n\";\n        }\n        // If the attribute is an atlas, then we use the special ATLAS size and don't swizzle the vector\n        else if (attribute.atlas) {\n            out += \"  \" + sizeToType[types_1.InstanceAttributeSize.ATLAS] + \" \" + attribute.name + \" = block\" + block + \";\\n\";\n        }\n        // Do normal destructuring with any other size and type\n        else {\n            out += \"  \" + sizeToType[attribute.size] + \" \" + attribute.name + \" = block\" + block + \".\" + makeVectorSwizzle(attribute.blockIndex, attribute.size) + \";\\n\";\n        }\n    });\n    return out;\n}\nexports.makeInstanceDestructuringArray = makeInstanceDestructuringArray;\nfunction makeVectorSwizzle(start, size) {\n    return VECTOR_COMPONENTS.slice(start, start + size).join('');\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * The goal of this file is to take in model attributes and instance attributes specified\n * and inject the proper attributes into the shaders so the implementor of the shader does\n * not worry about syncing attribute and uniform names between the JS\n */\nvar types_1 = require(\"../../types\");\nvar shader_templating_1 = require(\"../../util/shader-templating\");\nvar webgl_stat_1 = require(\"../../util/webgl-stat\");\nvar template_vars_1 = require(\"../fragments/template-vars\");\nvar uniform_instance_block_array_1 = require(\"./uniform-instance-block-array\");\n// These are all of the necessary fragments that will comprise our shader that is generated\nvar vertexShaderComposition = require('../fragments/vertex-shader-composition.vs');\nvar fragmentShaderComposition = require('../fragments/fragment-shader-composition.fs');\nvar instanceDestructuringArray = require('../fragments/instance-destructuring-array.vs');\nvar shaderInput = require('../fragments/shader-input.vs');\nvar projectionMethods = require('../fragments/projection-methods.vs');\n// Constants\n/**\n * Defines how many floats are available in a uniform block\n * What is a uniform block you ask? Why let me tell you! It is how opengl stores and communicates uniforms\n * to the GPU. Whenever you declare a uniform, it will use a hunk of memory. You can see how many uniforms\n * a GPU can have via the paramter MAX_VERTEX_UNIFORM_VECTORS. The number returned is the number of blocks\n * we can use for uniforms in the vertex shader. A BLOCK is an entire vec4.\n *\n * When you declare a uniform in your shader, it will use an entire BLOCK at the MINIMUM.\n *\n * A uniform float uses 1 block. vec2 uses 1 block. vec3 uses one block. vec4 uses one block.\n * mat4 uses 4 blocks. mat3 uses 3 blocks.\n *\n * etc etc.\n */\nvar MAX_USE_PER_BLOCK = 4;\n/** Converts a size to a shader type */\nvar sizeToType = {\n    1: 'float',\n    2: 'vec2',\n    3: 'vec3',\n    4: 'vec4',\n    9: 'mat3',\n    16: 'mat4',\n    99: 'sampler2D',\n};\nfunction calculateUniformBlockUseage(uniforms) {\n    var count = 0;\n    for (var i = 0, end = uniforms.length; i < end; ++i) {\n        count += Math.ceil(uniforms[i].size / 4);\n    }\n    return count;\n}\n/**\n * This method is the main algorithm for piecing together all of the attributes necessary\n * and injecting them into the shaders.\n *\n * @param shaders\n * @param vertexAttributes\n * @param instanceAttributes\n */\nfunction injectFragments(shaders, vertexAttributes, instanceAttributes, uniforms) {\n    var shaderInputMetrics = generateShaderInputs(vertexAttributes, instanceAttributes, uniforms);\n    var templateOptions = (_a = {},\n        _a[template_vars_1.templateVars.projectionMethods] = generateProjectionMethods(),\n        _a[template_vars_1.templateVars.shaderInput] = shaderInputMetrics.fragment,\n        _a[template_vars_1.templateVars.shader] = generateVertexShader(shaders, instanceAttributes, shaderInputMetrics.metrics.maxInstancesPerBuffer, shaderInputMetrics.metrics.blocksPerInstance),\n        _a);\n    var required = {\n        name: 'vertex shader composition',\n        values: [\n            template_vars_1.templateVars.projectionMethods,\n            template_vars_1.templateVars.shaderInput,\n            template_vars_1.templateVars.shader,\n        ],\n    };\n    var vertexShaderResults = shader_templating_1.shaderTemplate(vertexShaderComposition, templateOptions, required);\n    templateOptions = (_b = {},\n        _b[template_vars_1.templateVars.layerUniforms] = generateUniforms(uniforms, types_1.ShaderInjectionTarget.FRAGMENT),\n        _b[template_vars_1.templateVars.shader] = generateFragmentShader(shaders),\n        _b);\n    required = {\n        name: 'fragment shader composition',\n        values: [\n            template_vars_1.templateVars.layerUniforms,\n            template_vars_1.templateVars.shader,\n        ],\n    };\n    var fragmentShaderResults = shader_templating_1.shaderTemplate(fragmentShaderComposition, templateOptions, required);\n    return {\n        fs: fragmentShaderResults.shader,\n        materialUniforms: shaderInputMetrics.materialUniforms,\n        maxInstancesPerBuffer: shaderInputMetrics.metrics.maxInstancesPerBuffer,\n        vs: vertexShaderResults.shader,\n    };\n    var _a, _b;\n}\nexports.injectFragments = injectFragments;\n/**\n * Creates the projection method fragment\n */\nfunction generateProjectionMethods() {\n    var templateOptions = {};\n    var required = {\n        name: 'projection methods',\n        values: [],\n    };\n    var results = shader_templating_1.shaderTemplate(projectionMethods, templateOptions, required);\n    return results.shader;\n}\n/**\n * Generates the fragments for shader IO such as vertex and instance attributes\n */\nfunction generateShaderInputs(vertexAttributes, instanceAttributes, uniforms) {\n    var templateOptions = {};\n    var instancingInfo = generateInstanceDataLookupOptions(templateOptions, instanceAttributes, uniforms);\n    var additionalOptions = (_a = {},\n        _a[template_vars_1.templateVars.layerUniforms] = generateUniforms(uniforms, types_1.ShaderInjectionTarget.VERTEX),\n        _a[template_vars_1.templateVars.vertexAttributes] = generateVertexAttributes(vertexAttributes),\n        _a);\n    Object.assign(templateOptions, additionalOptions);\n    var required = {\n        name: 'shader input',\n        values: [\n            template_vars_1.templateVars.instanceDataRetrieval,\n            template_vars_1.templateVars.instanceUniformDeclarations,\n            template_vars_1.templateVars.layerUniforms,\n            template_vars_1.templateVars.vertexAttributes,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(shaderInput, templateOptions, required);\n    return {\n        fragment: results.shader,\n        materialUniforms: instancingInfo.materialUniforms,\n        metrics: instancingInfo.metrics,\n    };\n    var _a;\n}\n/**\n *\n * @param uniforms\n */\nfunction generateUniforms(uniforms, injectionType) {\n    var out = '';\n    var injection = injectionType || types_1.ShaderInjectionTarget.VERTEX;\n    uniforms.forEach(function (uniform) {\n        uniform.shaderInjection = uniform.shaderInjection || types_1.ShaderInjectionTarget.VERTEX;\n        if (uniform.shaderInjection === injection || uniform.shaderInjection === types_1.ShaderInjectionTarget.ALL) {\n            out += \"uniform \" + (uniform.qualifier || '') + (uniform.qualifier ? ' ' : '') + sizeToType[uniform.size] + \" \" + uniform.name + \";\\n\";\n        }\n    });\n    return out;\n}\n/**\n * This takes in the layer's vertex shader and transforms any required templating within the\n * shader.\n */\nfunction generateVertexShader(shaders, instanceAttributes, maxInstancesPerBuffer, blocksPerInstance) {\n    var templateOptions = (_a = {},\n        _a[template_vars_1.templateVars.attributes] = makeInstanceAttributeReferences(instanceAttributes, blocksPerInstance),\n        _a);\n    var required = {\n        name: 'layer vertex shader',\n        values: [\n            template_vars_1.templateVars.attributes,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(shaders.vs, templateOptions, required);\n    return results.shader;\n    var _a;\n}\nfunction generateFragmentShader(shaders) {\n    var templateOptions = {};\n    var required = {\n        name: 'layer fragment shader',\n        values: [],\n    };\n    var results = shader_templating_1.shaderTemplate(shaders.fs, templateOptions, required);\n    return results.shader;\n}\n/**\n * This generates the inline attribute references needed to be able to reference instance attribute\n * vars.\n */\nfunction makeInstanceAttributeReferences(instanceAttributes, blocksPerInstance) {\n    var templateOptions = {};\n    templateOptions[template_vars_1.templateVars.blocksPerInstance] = \"\" + blocksPerInstance;\n    templateOptions[template_vars_1.templateVars.instanceDestructuring] = makeInstanceDestructuring(instanceAttributes, blocksPerInstance);\n    var required = {\n        name: 'instance attributes fragment',\n        values: [\n            template_vars_1.templateVars.instanceDestructuring,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(instanceDestructuringArray, templateOptions, required);\n    return results.shader;\n}\n/**\n * This generates an in method destructuring pattern to make instance attributes available within a method.\n */\nfunction makeInstanceDestructuring(instanceAttributes, blocksPerInstance) {\n    return uniform_instance_block_array_1.makeInstanceDestructuringArray(instanceAttributes, blocksPerInstance);\n}\n/**\n * This generates the model attribute declarations\n */\nfunction generateVertexAttributes(vertexAttributes) {\n    var out = '';\n    vertexAttributes.forEach(function (attribute) {\n        out += \"attribute \" + sizeToType[attribute.size] + \" \" + (attribute.qualifier || '') + ((attribute.qualifier && ' ') || '') + attribute.name + \";\\n\";\n    });\n    return out;\n}\n/**\n * This method generates the chunk of shader that is responsible for providing\n */\nfunction generateInstanceDataLookupOptions(templateOptions, instanceAttributes, uniforms) {\n    // This is how many uniform blocks the current device can utilize in a shader\n    var maxUniforms = webgl_stat_1.WebGLStat.MAX_VERTEX_UNIFORMS;\n    // This reflects how many uniform blocks are available for instancing\n    var instanceUniformBlockCount = maxUniforms - calculateUniformBlockUseage(uniforms);\n    // Go through the attributes provided and calculate the number of blocks requested\n    // Also sort the attributes by block and pack the block useage down.\n    var sortedInstanceAttributes = instanceAttributes.slice(0).sort(function (a, b) { return a.block - b.block; });\n    var currentBlock = sortedInstanceAttributes[0].block;\n    var trueBlockIndex = 0;\n    // This tracks how much a block is used\n    var blockUseage = new Map();\n    var innerBlockUseage = new Map();\n    sortedInstanceAttributes.forEach(function (attribute) {\n        if (attribute.block !== currentBlock) {\n            currentBlock = attribute.block;\n            trueBlockIndex++;\n        }\n        var attributeSize = attribute.size;\n        var oldUseage = blockUseage.get(trueBlockIndex) || 0;\n        var newUseage = oldUseage + attributeSize;\n        // Make sure the block isn't over used thus losing attribute information\n        if (newUseage > MAX_USE_PER_BLOCK) {\n            console.error(\"An instance attribute was specified that over fills the maximum allowed useage for a block.\", \"\\nMax Allowed per block \" + MAX_USE_PER_BLOCK, \"\\nAttribute: \" + attribute.name + \" Block Specified: \" + attribute.block, \"\\nTotal blocks used with this attribute: \" + newUseage);\n            return;\n        }\n        // Store how much of the block is utilized\n        blockUseage.set(trueBlockIndex, newUseage);\n        // We can now auto specify the inner index of where the attribute lines up within the block\n        attribute.blockIndex = oldUseage;\n        // Now we examine the attributes request of use inside the block and make sure there is no\n        // Overlap\n        var innerUseage = innerBlockUseage.get(trueBlockIndex) || new Map();\n        if (attribute.blockIndex + attributeSize > MAX_USE_PER_BLOCK) {\n            console.error(\"An instance attribute was specified that would fill indices greater than the block allows.\", \"\\nMax index per block \" + MAX_USE_PER_BLOCK, \"\\nAttribute: \" + attribute.name + \" Block Index: \" + attribute.blockIndex + \" Size: \" + attribute.size + \" Block Index + Size: \" + (attribute.blockIndex + attribute.size));\n            return;\n        }\n        for (var i = attribute.blockIndex; i < attribute.blockIndex + attributeSize; ++i) {\n            if (innerUseage.get(i)) {\n                console.error(\"An instance attribute was specified who's block index overaps another attributes useage\", \"\\nMax index per block \" + MAX_USE_PER_BLOCK, \"\\nAttribute: \" + attribute.name + \" Block Index: \" + attribute.blockIndex + \" Size: \" + attribute.size + \" Block Index + Size: \" + (attribute.blockIndex + attribute.size));\n                return;\n            }\n        }\n        // Adjust the attribute to reflect the actual bock it is using\n        attribute.block = trueBlockIndex;\n    });\n    /**\n     * We now must create a decision tree large enough to accomodate our instances.\n     * Explanation:\n     * Our shaders CANNOT do switch case statements, NOR can they handle large amounts of\n     * chained if else statements (it will produce a memory exhausted error on many systems).\n     * There is even limits on how deep if else statements can be nested within each other.\n     * Lastly: We do NOT want to create an array in memory in the shader to create a lookup for our\n     * instance data as it would need to be allocated EVERY vertex operation.\n     *\n     * So, our best workaround is to make a decision tree that balances how many decisions per\n     * node it can make vs the depth of decisions. The more decisions per node, the less deep the\n     * tree will be, but will suffer some performance cost. But the less deep the tree, the better\n     * chance you will not get a 'memory exhausted' error.\n     */\n    var branchesPerLevel = 4;\n    var blocksPerInstance = trueBlockIndex + 1;\n    // This determines how many instances our allowed uniforms will allow for a single draw call\n    var maxInstancesPerBuffer = Math.floor(instanceUniformBlockCount / blocksPerInstance);\n    // Generate the decision tree and uniform declarations\n    var instancingMetrics = makeUniformInstanceDataOptions(templateOptions, maxInstancesPerBuffer, branchesPerLevel, blocksPerInstance, sortedInstanceAttributes);\n    return {\n        materialUniforms: instancingMetrics.materialUniforms,\n        metrics: {\n            blocksPerInstance: blocksPerInstance,\n            maxInstancesPerBuffer: maxInstancesPerBuffer,\n        },\n    };\n}\n/**\n * This generates all of the necessary templating information from uniform-instance-data\n * in order to provide an instance data getter for the application.\n */\nfunction makeUniformInstanceDataOptions(templateOptions, maxInstancesPerBuffer, branchesPerLevel, blocksPerInstance, instanceAttributes) {\n    // Make a list containing all instance indicies that will be utilized and will be split\n    // Out into the decision tree\n    var instances = [];\n    for (var i = 0; i < maxInstancesPerBuffer; ++i) {\n        instances.push(i);\n    }\n    // Make the uniform declaration. Uniform declaration simultaneously gives us the material uniforms necessary\n    // To apply to our three material.\n    var uniformMetrics = makeInstanceUniformDeclaration(maxInstancesPerBuffer * blocksPerInstance, instanceAttributes);\n    templateOptions[template_vars_1.templateVars.instanceUniformDeclarations] = uniformMetrics.fragment;\n    templateOptions[template_vars_1.templateVars.instanceBlockCount] = \"\" + blocksPerInstance;\n    // This way produced the data retrieval method for decision tree instancing\n    // *templateOptions[templateVars.instanceDataRetrieval] = makeInstanceRetrievalDecisionTree(blocksPerInstance, instances, branchesPerLevel);\n    // This method produces the data retrieval method for array instancing\n    templateOptions[template_vars_1.templateVars.instanceDataRetrieval] = uniform_instance_block_array_1.makeInstanceRetrievalArray(blocksPerInstance);\n    return {\n        materialUniforms: uniformMetrics.materialUniforms,\n    };\n}\n/**\n * This generates the declaration of all of the individual uniform registers for instancing.\n */\nfunction makeInstanceUniformDeclaration(instanceUniformBlockCount, attributes) {\n    var out = '';\n    var blockQualifierDedup = new Map();\n    var maxBlock = 0;\n    // Dedup the attributes specified for the\n    attributes.forEach(function (attribute) {\n        var qualifiers = blockQualifierDedup.get(attribute.block) || new Map();\n        // Make sure the qualifier is added for the block\n        qualifiers.set(attribute.qualifier, true);\n        // Get the max block in use\n        maxBlock = Math.max(maxBlock, attribute.block);\n    });\n    // Generate the full string for the specified qualifiers\n    var blockQualifiers = new Map();\n    blockQualifierDedup.forEach(function (qualifierList, block) {\n        var allQualifiers = Array.from(qualifierList.keys());\n        blockQualifiers.set(block, allQualifiers.join(' ') + \" \");\n    });\n    // Generate our uniform declarations\n    // Const blockCount = maxBlock + 1;\n    // This method produces the instancing declaration for a search tree.\n    // *out += makeUniformDecisionTreeDeclarations(instanceUniformBlockCount, blockCount, blockQualifiers, materialUniforms);\n    // This method produces the instancing declaration for an instancing array\n    var declaration = uniform_instance_block_array_1.makeUniformArrayDeclaration(instanceUniformBlockCount);\n    out += declaration.fragment;\n    out += \"\\n\";\n    return {\n        fragment: out,\n        materialUniforms: declaration.materialUniforms,\n    };\n}\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar bounds_1 = require(\"../primitives/bounds\");\nvar attribute_generation_1 = require(\"../shaders/util/attribute-generation\");\nvar generate_default_scene_1 = require(\"../surface/generate-default-scene\");\nvar generate_layer_geometry_1 = require(\"../surface/generate-layer-geometry\");\nvar generate_layer_material_1 = require(\"../surface/generate-layer-material\");\nvar generate_layer_model_1 = require(\"../surface/generate-layer-model\");\nvar inject_shader_io_1 = require(\"../surface/inject-shader-io\");\nvar mouse_event_manager_1 = require(\"../surface/mouse-event-manager\");\nvar scene_1 = require(\"../surface/scene\");\nvar view_1 = require(\"../surface/view\");\nvar data_bounds_1 = require(\"../util/data-bounds\");\nvar instance_uniform_manager_1 = require(\"../util/instance-uniform-manager\");\nvar layer_mouse_events_1 = require(\"./event-managers/layer-mouse-events\");\nvar texture_1 = require(\"./texture\");\nvar atlas_resource_manager_1 = require(\"./texture/atlas-resource-manager\");\nvar DEFAULT_BACKGROUND_COLOR = new Three.Color(1.0, 1.0, 1.0);\nfunction isCanvas(val) {\n    return Boolean(val.getContext);\n}\nfunction isString(val) {\n    return Boolean(val.substr);\n}\nfunction isWebGLContext(val) {\n    return Boolean(val.canvas);\n}\n/**\n * Used for reactive layer generation and updates.\n */\nfunction createLayer(layerClass, props) {\n    return [layerClass, props];\n}\nexports.createLayer = createLayer;\n/**\n * This is a manager for layers. It will use voidgl layers to intelligently render resources\n * as efficiently as possible. Layers will be rendered in the order they are provided and this\n * surface will provide some basic camera controls by default.\n */\nvar LayerSurface = /** @class */ (function () {\n    function LayerSurface() {\n        /** This is the atlas manager that will help with modifying and tracking atlas' generated for the layers */\n        this.atlasManager = new texture_1.AtlasManager();\n        /** This is all of the layers in this manager by their id */\n        this.layers = new Map();\n        /** This is the density the rendering renders for the surface */\n        this.pixelRatio = window.devicePixelRatio;\n        /**\n         * This is all of the available scenes and their views for this surface. Layers reference the IDs\n         * of the scenes and the views to be a part of their rendering state.\n         */\n        this.scenes = new Map();\n        /**\n         * This is all of the views currently generated for this surface paired with the scene they render.\n         */\n        this.sceneViews = [];\n        /**\n         * This flags all layers by id for disposal at the end of every render. A Layer must be recreated\n         * after each render in order to clear it's disposal flag. This is the trick to making this a\n         * reactive system.\n         */\n        this.willDisposeLayer = new Map();\n    }\n    Object.defineProperty(LayerSurface.prototype, \"gl\", {\n        /** Read only getter for the gl context */\n        get: function () {\n            return this.context;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This adds a layer to the manager which will manage all of the resource lifecycles of the layer\n     * as well as additional helper injections to aid in instancing and shader i/o.\n     */\n    LayerSurface.prototype.addLayer = function (layer) {\n        if (!layer.id) {\n            console.warn('All layers must have an id');\n            return layer;\n        }\n        if (this.layers.get(layer.id)) {\n            console.warn('All layer\\'s ids must be unique per layer manager');\n            return layer;\n        }\n        // We add the layer to our management\n        this.layers.set(layer.id, layer);\n        // Now we initialize the layer's gl components\n        this.initLayer(layer);\n        return layer;\n    };\n    LayerSurface.prototype.destroy = function () {\n        this.mouseManager.destroy();\n    };\n    /**\n     * This is the draw loop that must be called per frame for updates to take effect and display.\n     */\n    LayerSurface.prototype.draw = function () {\n        // Get the scenes in their added order\n        var scenes = Array.from(this.scenes.values());\n        // Loop through scenes\n        for (var i = 0, end = scenes.length; i < end; ++i) {\n            var scene = scenes[i];\n            var views = Array.from(scene.viewById.values());\n            var layers = scene.layers;\n            // Make sure the layers are depth sorted\n            scene.sortLayers();\n            // Loop through the views\n            for (var k = 0, endk = views.length; k < endk; ++k) {\n                var view = views[k];\n                // We must perform any operations necessary to make the view camera fit the viewport\n                // Correctly\n                view.fitViewtoViewport(new bounds_1.Bounds({\n                    height: this.context.canvas.height,\n                    width: this.context.canvas.width,\n                    x: 0,\n                    y: 0,\n                }));\n                // Let the layers update their uniforms before the draw\n                for (var j = 0, endj = layers.length; j < endj; ++j) {\n                    // Get the layer to be rendered in the scene\n                    var layer = layers[j];\n                    // Update the layer with the view it is about to be rendered with\n                    layer.view = view;\n                    // Make sure the layer is given the opportunity to update all of it's uniforms\n                    // To match the view state and update any unresolved diffs internally\n                    layer.draw();\n                }\n                // Now perform the rendering\n                this.drawSceneView(scene.container, view);\n            }\n        }\n        // After we have drawn our views of our scenes, we can now ensure all of the bounds\n        // Are updated in the interactions and flag our interactions ready for mouse input\n        if (this.mouseManager.waitingForRender) {\n            this.sceneViews.forEach(function (sceneView) {\n                sceneView.bounds = new data_bounds_1.DataBounds(sceneView.view.screenBounds);\n                sceneView.bounds.data = sceneView;\n            });\n            this.mouseManager.waitingForRender = false;\n        }\n        // Now that all of our layers have performed updates to everything, we can now dequeue\n        // All resource requests and being their processing\n        this.resourceManager.dequeueRequests();\n    };\n    /**\n     * This finalizes everything and sets up viewports and clears colors and\n     */\n    LayerSurface.prototype.drawSceneView = function (scene, view) {\n        var offset = { x: view.viewBounds.left, y: view.viewBounds.top };\n        var size = view.viewBounds;\n        var rendererSize = this.renderer.getSize();\n        rendererSize.width *= this.renderer.getPixelRatio();\n        rendererSize.height *= this.renderer.getPixelRatio();\n        var background = view.background;\n        // Set the scissor rectangle.\n        this.context.enable(this.context.SCISSOR_TEST);\n        this.context.scissor(offset.x, rendererSize.height - offset.y - size.height, size.width, size.height);\n        // If a background is established, we should clear the background color\n        // Specified for this context\n        if (view.background) {\n            // Clear the rect of color and depth so the region is totally it's own\n            this.context.clearColor(background[0], background[1], background[2], background[3]);\n        }\n        // Get the view's clearing preferences\n        if (view.clearFlags) {\n            this.context.clear((view.clearFlags.indexOf(view_1.ClearFlags.COLOR) > -1 ? this.context.COLOR_BUFFER_BIT : 0x0) |\n                (view.clearFlags.indexOf(view_1.ClearFlags.DEPTH) > -1 ? this.context.DEPTH_BUFFER_BIT : 0x0) |\n                (view.clearFlags.indexOf(view_1.ClearFlags.STENCIL) > -1 ? this.context.STENCIL_BUFFER_BIT : 0x0));\n        }\n        // Default clearing is depth and color\n        else {\n            this.context.clear(this.context.COLOR_BUFFER_BIT | this.context.DEPTH_BUFFER_BIT);\n        }\n        // Only if the viewport is different from last viewport should we attempt a viewport state\n        // Change.\n        var box = this.currentViewport;\n        if (!box || box.x !== offset.x || box.y !== offset.y || box.width !== size.width || box.height !== size.height) {\n            this.renderer.setViewport(offset.x / this.pixelRatio, offset.y / this.pixelRatio, size.width, size.height);\n            this.currentViewport = {\n                height: size.height,\n                width: size.width,\n                x: offset.x,\n                y: offset.y,\n            };\n        }\n        // Render the scene with the provided view metrics\n        this.renderer.render(scene, view.viewCamera.baseCamera);\n    };\n    /**\n     * This is the beginning of the system. This should be called immediately after the surface is constructed.\n     * We make this mandatory outside of the constructor so we can make it follow an async pattern.\n     */\n    LayerSurface.prototype.init = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Make sure our desired pixel ratio is set up\n                        this.pixelRatio = options.pixelRatio || this.pixelRatio;\n                        // Make sure we have a gl context to work with\n                        this.setContext(options.context);\n                        // Initialize our GL needs that set the basis for rendering\n                        this.initGL(options);\n                        // Initialize our event manager that handles mouse interactions/gestures with the canvas\n                        this.initMouseManager(options);\n                        // Initialize any resources requested or needed, such as textures or rendering surfaces\n                        return [4 /*yield*/, this.initResources(options)];\n                    case 1:\n                        // Initialize any resources requested or needed, such as textures or rendering surfaces\n                        _a.sent();\n                        return [2 /*return*/, this];\n                }\n            });\n        });\n    };\n    /**\n     * This initializes the Canvas GL contexts needed for rendering.\n     */\n    LayerSurface.prototype.initGL = function (options) {\n        var _this = this;\n        if (!this.context) {\n            console.error('Can not initialize Layer Surface as a valid GL context was not established.');\n            return;\n        }\n        // Get the canvas of our context to set up our Three settings\n        var canvas = this.context.canvas;\n        // Get the starting width and height so adjustments don't affect it\n        var width = canvas.width;\n        var height = canvas.height;\n        // Generate the renderer along with it's properties\n        this.renderer = new Three.WebGLRenderer({\n            // Context supports rendering to an alpha canvas only if the background color has a transparent\n            // Alpha value.\n            alpha: options.background && (options.background[3] < 1.0),\n            // Yes to antialias! Make it preeeeetty!\n            antialias: true,\n            // Make three use an existing canvas rather than generate another\n            canvas: canvas,\n            // TODO: This should be toggleable. If it's true it allows us to snapshot the rendering in the canvas\n            //       But we dont' always want it as it makes performance drop a bit.\n            preserveDrawingBuffer: true,\n        });\n        // We want clearing to be controlled via the layer\n        this.renderer.autoClear = false;\n        // Charts don't really have face culling. Just 2D shapes\n        this.renderer.setFaceCulling(Three.CullFaceNone);\n        // This sets the pixel ratio to handle differing pixel densities in screens\n        this.renderer.setSize(width, height);\n        // Set the pixel ratio to match the pixel density of the monitor in use\n        this.renderer.setPixelRatio(this.pixelRatio);\n        // Applies the background color and establishes whether or not the context supports\n        // Alpha or not\n        if (options.background) {\n            this.renderer.setClearColor(new Three.Color(options.background[0], options.background[1], options.background[2]), options.background[3]);\n        }\n        // If a background color was not established, then we set a default background color\n        else {\n            this.renderer.setClearColor(DEFAULT_BACKGROUND_COLOR);\n        }\n        // Once we have made our renderer we now make us a default scene to which we can add objects\n        this.defaultSceneElements = generate_default_scene_1.generateDefaultScene(this.context);\n        this.defaultSceneElements.view.background = options.background;\n        // Set the default scene\n        this.scenes.set(this.defaultSceneElements.scene.id, this.defaultSceneElements.scene);\n        // Make a scene view depth tracker so we can track the order each scene view combo is drawn\n        var sceneViewDepth = 0;\n        // Make a SceneView for the default scene and view for mouse interactions\n        this.sceneViews.push({\n            depth: ++sceneViewDepth,\n            scene: this.defaultSceneElements.scene,\n            view: this.defaultSceneElements.view,\n        });\n        // Turn on the scissor test to keep the rendering clipped within the\n        // Render region of the context\n        this.context.enable(this.context.SCISSOR_TEST);\n        // Add the requested scenes to the surface and apply the necessary defaults\n        if (options.scenes) {\n            options.scenes.forEach(function (sceneOptions) {\n                // Make us a new scene based on the requested options\n                var newScene = new scene_1.Scene(sceneOptions);\n                // Make sure the default view is available for each scene\n                // IFF no view is provided for the scene\n                if (sceneOptions.views.length === 0) {\n                    newScene.addView(_this.defaultSceneElements.view);\n                    _this.sceneViews.push({\n                        depth: ++sceneViewDepth,\n                        scene: newScene,\n                        view: _this.defaultSceneElements.view,\n                    });\n                }\n                // Generate the views requested for the scene\n                sceneOptions.views.forEach(function (viewOptions) {\n                    var newView = new view_1.View(viewOptions);\n                    newView.camera = newView.camera || _this.defaultSceneElements.camera;\n                    newView.viewCamera = newView.viewCamera || _this.defaultSceneElements.viewCamera;\n                    newView.viewport = newView.viewport || _this.defaultSceneElements.viewport;\n                    newView.pixelRatio = _this.pixelRatio;\n                    newScene.addView(newView);\n                    for (var _i = 0, _a = _this.sceneViews; _i < _a.length; _i++) {\n                        var sceneView = _a[_i];\n                        if (sceneView.view.id === newView.id) {\n                            console.warn('You can NOT have two views with the same id. Please use unique identifiers for every view generated.');\n                        }\n                    }\n                    _this.sceneViews.push({\n                        depth: ++sceneViewDepth,\n                        scene: newScene,\n                        view: newView,\n                    });\n                });\n                _this.scenes.set(sceneOptions.key, newScene);\n            });\n        }\n    };\n    /**\n     * This does special initialization by gathering the layers shader IO, generates a material\n     * and injects special automated uniforms and attributes to make instancing work for the\n     * shader.\n     */\n    LayerSurface.prototype.initLayer = function (layer) {\n        // Set the resource manager this surface utilizes to the layer\n        layer.resource = this.resourceManager;\n        // For the sake of initializing uniforms to the correct values, we must first add the layer to it's appropriate\n        // Scene so that the necessary values will be in place for the sahder IO\n        var scene = this.addLayerToScene(layer);\n        // Get the shader metrics the layer desires\n        var shaderIO = layer.initShader();\n        // Clean out nulls provided as a convenience to the layer\n        shaderIO.instanceAttributes = shaderIO.instanceAttributes.filter(Boolean);\n        shaderIO.vertexAttributes = shaderIO.vertexAttributes.filter(Boolean);\n        shaderIO.uniforms = shaderIO.uniforms.filter(Boolean);\n        // Get the injected shader IO attributes and uniforms\n        var _a = inject_shader_io_1.injectShaderIO(layer, shaderIO), vertexAttributes = _a.vertexAttributes, instanceAttributes = _a.instanceAttributes, uniforms = _a.uniforms;\n        // Generate the actual shaders to be used by injecting all of the necessary fragments and injecting\n        // Instancing fragments\n        var shaderMetrics = attribute_generation_1.injectFragments(shaderIO, vertexAttributes, instanceAttributes, uniforms);\n        // Generate the geometry this layer will be utilizing\n        var geometry = generate_layer_geometry_1.generateLayerGeometry(shaderMetrics.maxInstancesPerBuffer, vertexAttributes, shaderIO.vertexCount);\n        // This is the material that is generated for the layer that utilizes all of the generated and\n        // Injected shader IO and shader fragments\n        var material = generate_layer_material_1.generateLayerMaterial(layer, shaderMetrics.vs, shaderMetrics.fs, uniforms, shaderMetrics.materialUniforms);\n        // And now we can now generate the mesh that will be added to the scene\n        var model = generate_layer_model_1.generateLayerModel(layer, geometry, material);\n        // Now that all of the elements of the layer are complete, let us apply them to the layer\n        layer.geometry = geometry;\n        layer.instanceAttributes = instanceAttributes;\n        layer.instanceVertexCount = shaderIO.vertexCount;\n        layer.material = material;\n        layer.maxInstancesPerBuffer = shaderMetrics.maxInstancesPerBuffer;\n        layer.model = model;\n        layer.uniforms = uniforms;\n        layer.vertexAttributes = vertexAttributes;\n        // The layer now needs a specialized uniform manager to provide instances with an appropriate set of uniforms\n        // To be able to render.\n        layer.uniformManager = new instance_uniform_manager_1.InstanceUniformManager(layer, scene);\n        return layer;\n    };\n    /**\n     * Initializes elements for handling mouse interactions with the canvas.\n     */\n    LayerSurface.prototype.initMouseManager = function (options) {\n        // We must inject an event manager to broadcast events through the layers themselves\n        var eventManagers = (options.eventManagers || []).concat([\n            new layer_mouse_events_1.LayerMouseEvents(this.sceneViews),\n        ]);\n        // Generate the mouse manager for the layer\n        this.mouseManager = new mouse_event_manager_1.MouseEventManager(this.context.canvas, this.sceneViews, eventManagers, options.handlesWheelEvents);\n    };\n    /**\n     * This initializes resources needed or requested such as textures or render surfaces.\n     */\n    LayerSurface.prototype.initResources = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _i, _a, resource;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!options.atlasResources) return [3 /*break*/, 4];\n                        _i = 0, _a = options.atlasResources;\n                        _b.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3 /*break*/, 4];\n                        resource = _a[_i];\n                        return [4 /*yield*/, this.atlasManager.createAtlas(resource)];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        // Initialize our resource manager with the atlas manager\n                        this.resourceManager = new atlas_resource_manager_1.AtlasResourceManager({\n                            atlasManager: this.atlasManager,\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This finds the scene and view the layer belongs to based on the layer's props. For invalid or not provided\n     * props, the layer gets added to default scenes and views.\n     */\n    LayerSurface.prototype.addLayerToScene = function (layer) {\n        // Get the scene the layer will add itself to\n        var scene = this.scenes.get(layer.props.scene);\n        if (!scene) {\n            // If no scene is specified by the layer, or the scene identifier is invalid, then we add the layer\n            // To the default scene.\n            scene = this.defaultSceneElements.scene;\n            if (layer.props.scene) {\n                console.warn('Layer specified a scene that is not within the layer surface manager. Layer will be added to the default scene.');\n            }\n        }\n        // Add the layer to the scene for rendering\n        scene.addLayer(layer);\n        return scene;\n    };\n    /**\n     * Discontinues a layer's management by this surface. This will invalidate any resources\n     * the layer was using in association with the context. If the layer is re-insertted, it will\n     * be revaluated as though it were a new layer.\n     */\n    LayerSurface.prototype.removeLayer = function (layer) {\n        // Make sure we are removing a layer that exists in the system\n        if (!this.layers.get(layer && layer.id)) {\n            console.warn('Tried to remove a layer that is not in the manager.', layer);\n            return layer;\n        }\n        layer.uniformManager.removeFromScene();\n        layer.destroy();\n        this.layers.delete(layer.id);\n        return layer;\n    };\n    /**\n     * Used for reactive rendering and diffs out the layers for changed layers.\n     */\n    LayerSurface.prototype.render = function (layerInitializers) {\n        var _this = this;\n        // Loop through all of the initializers and properly add and remove layers as needed\n        if (layerInitializers && layerInitializers.length > 0) {\n            layerInitializers.forEach(function (init) {\n                var layerClass = init[0];\n                var props = init[1];\n                var existingLayer = _this.layers.get(props.key);\n                if (existingLayer) {\n                    existingLayer.willUpdateProps(props);\n                    Object.assign(existingLayer.props, props);\n                    existingLayer.didUpdateProps();\n                }\n                else {\n                    _this.addLayer(new layerClass(Object.assign({}, layerClass.defaultProps, props)));\n                }\n                _this.willDisposeLayer.set(props.key, false);\n            });\n        }\n        // Take any layer that retained it's disposal flag and trash it\n        this.willDisposeLayer.forEach(function (dispose, layerId) {\n            if (dispose) {\n                _this.removeLayer(_this.layers.get(layerId));\n            }\n        });\n        // Resolve that all disposals occurred\n        this.willDisposeLayer.clear();\n        // Reflag every layer for removal again so creation of layers will determine\n        // Which layers remain for a reactive pattern\n        this.layers.forEach(function (layer, id) {\n            _this.willDisposeLayer.set(id, true);\n        });\n    };\n    /**\n     * This must be executed when the canvas changes size so that we can re-calculate the scenes and views\n     * dimensions for handling all of our rendered elements.\n     */\n    LayerSurface.prototype.fitContainer = function (pixelRatio) {\n        var container = this.context.canvas.parentElement;\n        if (container) {\n            var canvas = this.context.canvas;\n            canvas.className = '';\n            canvas.setAttribute('style', '');\n            container.style.position = 'relative';\n            canvas.style.position = 'absolute';\n            canvas.style.left = '0xp';\n            canvas.style.top = '0xp';\n            canvas.style.width = '100%';\n            canvas.style.height = '100%';\n            canvas.setAttribute('width', '');\n            canvas.setAttribute('height', '');\n            var containerBox = container.getBoundingClientRect();\n            var box = canvas.getBoundingClientRect();\n            this.resize(box.width || 100, containerBox.height || 100);\n        }\n    };\n    LayerSurface.prototype.resize = function (width, height, pixelRatio) {\n        var _this = this;\n        this.pixelRatio = pixelRatio || this.pixelRatio;\n        this.sceneViews.forEach(function (sceneView) { return sceneView.view.pixelRatio = _this.pixelRatio; });\n        this.renderer.setSize(width || 100, height || 100);\n        this.renderer.setPixelRatio(this.pixelRatio);\n        this.mouseManager.resize();\n    };\n    /**\n     * This establishes the rendering canvas context for the surface.\n     */\n    LayerSurface.prototype.setContext = function (context) {\n        if (!context) {\n            return;\n        }\n        if (isWebGLContext(context)) {\n            this.context = context;\n        }\n        else if (isCanvas(context)) {\n            this.context = context.getContext('webgl') || context.getContext('experimental-webgl');\n        }\n        else if (isString(context)) {\n            var element = document.getElementById(context);\n            if (isCanvas(element)) {\n                this.setContext(element);\n            }\n        }\n    };\n    return LayerSurface;\n}());\nexports.LayerSurface = LayerSurface;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./layer-surface\"));\n__export(require(\"./event-manager\"));\n__export(require(\"./generate-default-scene\"));\n__export(require(\"./generate-layer-geometry\"));\n__export(require(\"./generate-layer-material\"));\n__export(require(\"./generate-layer-model\"));\n__export(require(\"./inject-shader-io\"));\n__export(require(\"./layer\"));\n__export(require(\"./mouse-event-manager\"));\n__export(require(\"./scene\"));\n__export(require(\"./texture\"));\n__export(require(\"./view\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./surface\"));\n__export(require(\"./util\"));\n__export(require(\"./base-layers\"));\n__export(require(\"./base-event-managers\"));\n__export(require(\"./types\"));\n__export(require(\"./primitives\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./voidgl\"));\n"],"sourceRoot":""}