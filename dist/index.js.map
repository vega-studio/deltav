{"version":3,"sources":["webpack://voidgl/webpack/universalModuleDefinition","webpack://voidgl/webpack/bootstrap","webpack://voidgl/./src/voidgl/types.ts","webpack://voidgl/external \"three\"","webpack://voidgl/./src/voidgl/primitives/bounds.ts","webpack://voidgl/./src/voidgl/instance-provider/index.ts","webpack://voidgl/./src/voidgl/base-layers/types.ts","webpack://voidgl/./src/voidgl/surface/layer.ts","webpack://voidgl/./src/voidgl/primitives/index.ts","webpack://voidgl/./src/voidgl/util/instance.ts","webpack://voidgl/./src/voidgl/util/index.ts","webpack://voidgl/./src/voidgl/surface/texture/index.ts","webpack://voidgl/./src/voidgl/util/identify-by-key.ts","webpack://voidgl/./src/voidgl/surface/generate-layer-model.ts","webpack://voidgl/./src/voidgl/surface/view.ts","webpack://voidgl/./src/voidgl/surface/scene.ts","webpack://voidgl/./src/voidgl/surface/texture/label-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/base-atlas-resource.ts","webpack://voidgl/./src/voidgl/base-layers/edges/types.ts","webpack://voidgl/./src/voidgl/util/view-camera.ts","webpack://voidgl/./src/voidgl/util/shader-templating.ts","webpack://voidgl/./src/voidgl/util/chart-camera.ts","webpack://voidgl/./src/voidgl/surface/event-manager.ts","webpack://voidgl/./src/voidgl/surface/mouse-event-manager.ts","webpack://voidgl/./src/voidgl/surface/inject-shader-io.ts","webpack://voidgl/./src/voidgl/surface/generate-layer-material.ts","webpack://voidgl/./src/voidgl/surface/generate-layer-geometry.ts","webpack://voidgl/./src/voidgl/util/data-bounds.ts","webpack://voidgl/./src/voidgl/surface/generate-default-scene.ts","webpack://voidgl/./src/voidgl/util/make-instance-uniform-name.ts","webpack://voidgl/./src/voidgl/shaders/fragments/template-vars.ts","webpack://voidgl/./src/voidgl/base-layers/labels/index.ts","webpack://voidgl/./src/voidgl/surface/texture/label-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/image-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/color-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/color-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/sub-texture.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas.ts","webpack://voidgl/./src/voidgl/base-layers/images/index.ts","webpack://voidgl/./node_modules/debug/src/browser.js","webpack://voidgl/./src/voidgl/util/mouse.ts","webpack://voidgl/./src/voidgl/util/webgl-stat.ts","webpack://voidgl/./src/voidgl/util/vector.ts","webpack://voidgl/./src/voidgl/instance-provider/observable-manager.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas-resource-manager.ts","webpack://voidgl/./src/voidgl/surface/event-managers/layer-mouse-events.ts","webpack://voidgl/./src/voidgl/util/instance-uniform-manager.ts","webpack://voidgl/./src/voidgl/util/color-picking-analysis.ts","webpack://voidgl/./src/voidgl/util/quad-tree.ts","webpack://voidgl/./src/voidgl/primitives/absolute-position.ts","webpack://voidgl/./src/voidgl/shaders/fragments/color-picking-assignment.vs","webpack://voidgl/./src/voidgl/shaders/fragments/color-picking-disabled.fs","webpack://voidgl/./src/voidgl/shaders/fragments/color-picking-method.fs","webpack://voidgl/./src/voidgl/shaders/fragments/color-picking-vertex-header.vs","webpack://voidgl/./src/voidgl/shaders/fragments/projection-methods.vs","webpack://voidgl/./src/voidgl/shaders/fragments/shader-input.vs","webpack://voidgl/./src/voidgl/shaders/fragments/instance-destructuring-array.vs","webpack://voidgl/./src/voidgl/shaders/fragments/fragment-shader-composition.fs","webpack://voidgl/./src/voidgl/shaders/fragments/vertex-shader-composition.vs","webpack://voidgl/./src/voidgl/shaders/fragments/instance-retrieval-array.vs","webpack://voidgl/./src/voidgl/shaders/util/uniform-instance-block-array.ts","webpack://voidgl/./src/voidgl/shaders/util/attribute-generation.ts","webpack://voidgl/./src/voidgl/surface/layer-surface.ts","webpack://voidgl/./src/voidgl/surface/index.ts","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.vs","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.fs","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.ts","webpack://voidgl/./src/voidgl/base-layers/rings/ring-instance.ts","webpack://voidgl/./src/voidgl/base-layers/rings/index.ts","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-instance.ts","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-layer.vs","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-layer.fs","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-layer.ts","webpack://voidgl/./src/voidgl/base-layers/rectangle/index.ts","webpack://voidgl/./src/voidgl/base-layers/labels/label-instance.ts","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.vs","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.fs","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.ts","webpack://voidgl/./src/voidgl/surface/texture/image-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas-manager.ts","webpack://voidgl/./src/voidgl/surface/texture/pack-node.ts","webpack://voidgl/./src/voidgl/base-layers/images/image-instance.ts","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.vs","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.fs","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.ts","webpack://voidgl/./src/voidgl/base-layers/edges/edge-instance.ts","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer.fs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-screen-curve.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-bezier2.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-bezier.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-line.vs","webpack://voidgl/./src/voidgl/base-layers/edges/edge-picking.ts","webpack://voidgl/./src/voidgl/base-layers/edges/edge-layer.ts","webpack://voidgl/./src/voidgl/base-layers/edges/index.ts","webpack://voidgl/./src/voidgl/base-layers/circles/circle-instance.ts","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.vs","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.fs","webpack://voidgl/./src/voidgl/shaders/base/no-op.vs","webpack://voidgl/./src/voidgl/shaders/base/no-op.fs","webpack://voidgl/./src/voidgl/surface/layer-interaction-handler.ts","webpack://voidgl/./src/voidgl/surface/instance-diff-manager.ts","webpack://voidgl/./src/voidgl/primitives/point.ts","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.ts","webpack://voidgl/./src/voidgl/base-layers/circles/index.ts","webpack://voidgl/./src/voidgl/base-layers/index.ts","webpack://voidgl/./node_modules/ms/index.js","webpack://voidgl/./node_modules/debug/src/debug.js","webpack://voidgl/./node_modules/process/browser.js","webpack://voidgl/external \"bowser\"","webpack://voidgl/./src/voidgl/util/tracked-quad-tree.ts","webpack://voidgl/./src/voidgl/util/reference-camera.ts","webpack://voidgl/./src/voidgl/instance-provider/instance-provider.ts","webpack://voidgl/./src/voidgl/instance-provider/observable.ts","webpack://voidgl/external \"mobx\"","webpack://voidgl/./src/voidgl/util/data-provider.ts","webpack://voidgl/./src/voidgl/base-event-managers/basic-camera-controller.ts","webpack://voidgl/./src/voidgl/base-event-managers/index.ts","webpack://voidgl/./src/voidgl/index.ts","webpack://voidgl/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__107__","__WEBPACK_EXTERNAL_MODULE__112__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","InstanceBlockIndex","InstanceAttributeSize","UniformSize","VertexAttributeSize","ShaderInjectionTarget","PickType","InstanceDiffType","Bounds","options","this","x","y","width","height","left","top","bottom","right","emptyBounds","containsPoint","point","encapsulate","item","Math","abs","fits","bounds","hitBounds","isInside","toString","__export","AnchorType","ScaleType","extendStatics","__extends","setPrototypeOf","__proto__","Array","b","__","constructor","create","Three","types_1","util_1","identify_by_key_1","instance_diff_manager_1","layer_interaction_handler_1","Layer","_super","props","_this","depth","instanceById","Map","instanceVertexCount","assign","defaultProps","_a","picking","NONE","ALL","pickingMethods","getInstancePickingMethods","currentPickMode","hitTest","quadTree","TrackedQuadTree","boundsAccessor","type","SINGLE","uidToInstance","diffManager","InstanceDiffManager","diffProcessor","getDiffProcessor","interactions","LayerInteractionHandler","destroy","uniformManager","didUpdateProps","draw","uniform","change","instance","uniforms","changeList","data","end","length","getUniforms","resolve","update","materialUniforms","forEach","materialUniform","Error","getModelType","drawMode","TrianglesDrawMode","modelType","Mesh","getMaterialOptions","initShader","fs","instanceAttributes","vertexAttributes","vertexCount","vs","makeInstanceAttribute","block","blockIndex","size","atlas","makeUniform","shaderInjection","qualifier","willUpdateInstances","changes","willUpdateProps","newProps","didUpdate","IdentifyByKey","__decorate","decorators","target","key","desc","arguments","getOwnPropertyDescriptor","Reflect","decorate","instance_provider_1","instanceUID","Instance","_uid","newUID","_id","id","active","observable","generateLayerModel","layer","geometry","material","modelInfo","model","Boolean","isMesh","absolute_position_1","bounds_1","view_camera_1","isOrthographic","val","ClearFlags","View","pixelRatio","devicePixelRatio","screenToPixelSpace","out","pixelSpaceToScreen","screenToView","viewBounds","viewToScreen","screenToWorld","view","world","camera","offset","scale","viewCamera","ViewCameraType","CUSTOM","console","warn","worldToScreen","screen","viewToWorld","worldToView","fitViewtoViewport","surfaceDimensions","CONTROLLED","baseCamera","getAbsolutePositionBounds","viewport","far","near","position","set","z","updateMatrix","updateMatrixWorld","updateProjectionMatrix","screenBounds","DEFAULT_VIEW_ID","sortByDepth","a","Scene","container","pickingContainer","layers","sortIsDirty","viewById","frustumCulled","autoUpdate","addLayer","push","addView","removeLayer","index","indexOf","splice","sortLayers","sort","DEFAULT_SCENE_ID","LabelAtlasResource","label","BaseAtlasResource","sampleScale","EdgeScaleType","EdgeType","EdgeBroadphase","ViewCamera","shaderTemplate","shader","required","matched","noValueProvided","notFound","shaderOptions","shaderResults","replace","match","keys","option","results","resolvedShaderOptions","shaderProvidedOptions","unresolvedProvidedOptions","unresolvedShaderOptions","values","error","chartCameraUID","applyArray","source","apply","concat","ChartCamera","location","slice","EventManager","getProjection","viewId","mouseManager","getView","getViewScreenBounds","setMouseManager","mouse_1","quad_tree_1","MouseEventManager","canvas","views","controllers","handlesWheelEvents","_waitingForRender","getViewsUnderMouse","mouse","hitViews","query","resize","context","setViews","setControllers","addContextListeners","QuadTree","addAll","map","v","filter","element","startView","startPosition","onmousewheel","event","eventElementPosition","interaction","makeInteraction","wheel","makeWheel","controller","handleWheel","stopPropagation","preventDefault","onmouseleave","waitingForRender","handleMouseOut","onmousemove","handleMouseMove","onmousedown","downViews","canClick","clickStartTime","Date","now","currentPosition","handleMouseDown","button","document","delta","drag","makeDrag","handleDrag","onmouseup","onmouseover","handleMouseOver","handleMouseUp","handleClick","onselectstart","addTouchContextListeners","ontouchstart","ontouchend","ontouchmove","ontouchcancel","_i","start","previous","current","viewsUnderMouse","normalizeWheel","toVertexAttributeInternal","attribute","materialAttribute","toUniformInternal","sortByResourceAttributes","injectShaderIO","shaderIO","atlasInstanceAttributes","requestedAtlasInjections","FOUR","ONE","injection","FRAGMENT","injections","VERTEX","attributes","blocks","found","maxBlock","addedUniforms","instanceAttribute","ATLAS","resource","getAtlasTexture","MATRIX4","projectionMatrix","elements","matrix","THREE","TWO","fillBlock","usedBlocks","max","addedInstanceAttributes","emptyFillBlock","findEmpty4Block","color","uid","activeAttribute","_b","UNIFORM_SIZE_TO_MATERIAL_TYPE","MATRIX3","DEFAULT_UNIFORM_VALUE","toMaterialUniform","generateLayerMaterial","layerUniforms","instancingUniforms","materialParams","vertexShader","fragmentShader","generatedUniform","RawShaderMaterial","generateLayerGeometry","maxInstancesPerBuffer","vertexBuffers","attribute_1","Float32Array","buffer","formatError","endk","k","isArray","j","endj","instanceSize","endk_1","copyWithin","instancingBuffer","instanceStartIndex","BufferGeometry","attribute_3","BufferAttribute","addAttribute","DataBounds","chart_camera_1","scene_1","view_1","generateDefaultScene","aspectRatio","viewSize","defaultCamera","OrthographicCamera","defaultChartCamera","defaultViewport","defaultView","defaultScene","scene","INSTANCE_UNIFORM_ATTRIBUTE_PREFIX","makeInstanceUniformNameArray","makeInstanceUniformNameTree","templateVars","attributeFragments","blocksPerInstance","instanceBlockCount","instanceDataBinaryTree","instanceDataRetrieval","instanceDestructuring","instanceFragments","instanceUniformDeclarations","projectionMethods","shaderInput","__awaiter","thisArg","_arguments","P","generator","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","__generator","body","f","t","g","_","sent","trys","ops","verb","throw","return","Symbol","iterator","op","TypeError","pop","floor","min","LabelRasterizer","awaitContext","getContext","setTimeout","calculateLabelSize","calculateTexture","calculateTrucatedText","sampleScaling","drawLabel","truncatedText","measureContents","minX","minY","maxX","maxY","rasterization","texture","createCroppedCanvas","maxWidth","text","firstTest","cursor","safety","substr","nextCursor","cropped","createElement","imageSmoothingEnabled","drawImage","fontSize","getLabelRasterizationFontSize","fillStyle","font","makeCSSFont","measureText","fillText","fontWeight","fontFamily","imageData","getImageData","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","render","renderSync","ImageAtlasResource","image","ColorRasterizer","limit","makeCSS","opacity","fillRect","ColorAtlasResource","SubTexture","atlasReferenceID","atlasTexture","atlasTL","atlasTR","atlasBL","atlasBR","widthOnAtlas","heightOnAtlas","isValid","pixelWidth","pixelHeight","pack_node_1","sub_texture_1","AtlasSize","Atlas","validResources","textureSettings","packing","PackNode","updateTexture","invalidateResource","zero","setManager","manager","registerResource","undefined","removeResource","redoneCanvas","dispose","Texture","generateMipmaps","premultiplyAlpha","needsUpdate","process","load","storage","debug","env","DEBUG","log","Function","formatArgs","args","useColors","namespace","humanize","diff","lastC","save","namespaces","removeItem","navigator","userAgent","toLowerCase","documentElement","style","WebkitAppearance","firebug","exception","table","parseInt","RegExp","$1","chrome","local","localStorage","localstorage","colors","formatters","JSON","stringify","err","message","enable","browser","three_1","IE_ADJUSTMENT","OLD_IE_ADJUSTMENT","MAX_FIREFOX_WHEELDELTA","lowPassY","LOW_PASS_U0","LOW_PASS_U1","LOW_PASS_U2","LOW_PASS_U3","firefox","deltaX","deltaY","sign","unshift","Vector2","msie","version","wheelDeltaX","wheelDeltaY","wheelDelta","detail","msedge","multiplyScalar","relative","mouseX","mouseY","eventX","eventY","nativeEvent","pageX","pageY","clientX","clientY","scrollLeft","scrollTop","offsetParent","offsetLeft","offsetTop","getProgramInfo","gl","program","attributeCount","uniformCount","activeUniforms","getProgramParameter","ACTIVE_UNIFORMS","activeAttributes","ACTIVE_ATTRIBUTES","enums","35664","35665","35666","35667","35668","35669","35670","35671","35672","35673","35674","35675","35676","35678","35680","5120","5121","5122","5123","5124","5125","5126","getActiveUniform","typeName","getActiveAttrib","WebGLStat","MAX_VERTEX_UNIFORMS","MAX_FRAGMENT_UNIFORMS","MAX_ATTRIBUTES","WEBGL_SUPPORTED","MAX_TEXTURE_SIZE","WebGLRenderingContext","getAContext","getParameter","MAX_VERTEX_UNIFORM_VECTORS","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_VERTEX_ATTRIBS","sqrt","add2","scale2","subtract2","dot2","add3","scale3","subtract3","dot3","add4","scale4","subtract4","dot4","multiply2","linear2","length2","multiply3","linear3","length3","multiply4","linear4","length4","ObservableManagerMode","ObservableManager","mode","BROADCAST","label_atlas_resource_1","toInstanceIOValue","AtlasResourceManager","targetAtlas","requestQueue","requestLookup","atlasManager","dequeueRequests","didDequeue","_loop_1","this_1","resources","_c","requests","atlasRequests_1","updateAtlas","request","delete","request_1","from","entries","atlasRequests","existingRequests","setTargetAtlas","LayerMouseEvents","surface","isOver","sceneViews","getSceneViewsUnderMouse","sceneViewByViewId","sceneView","viewItem","getMouseByViewId","viewMouseByViewId","handleInteraction","handleMouseClick","handleMouseDrag","callback","sceneViews_1","handleSceneView","flag","clear","updateColorPickRange","allSceneViews","currentSceneViews","generate_layer_model_1","make_instance_uniform_name_1","InstanceUniformManager","buffers","availableClusters","instanceToCluster","clusterToBuffer","maxUniformBlock","uniformBlocksPerInstance","add","makeNewBuffer","cluster","remove","removeFromScene","pickModel","setScene","newGeometry","drawRange","count","newMaterial","clone","newModel","activeInstances","clusters","firstInstance","lastInstance","uniformIndex","uniformName","instanceData","Vector4","instanceIndex","uniformRange","analyzeColorPickingRendering","pickingData","allColors","colorData","dataHeight","dataWidth","nearestColor","uniqueColors","pixelIndex","distance","row","dx","dy","testDistance","filterQuery","queryValues","filtered","obj","find","Quadrants","mid","TL","Node","TR","BL","BR","children","nodes","child","doAdd","cover","childrenProps","MAX_VALUE","allChildren","gatherChildren","split","isNaN","area","list","visit","queryBounds","queryPoint","cb","finished","data_bounds_1","ref","scaleRatio","parse","num","parseFloat","reference","top_1","shader_templating_1","template_vars_1","instanceRetrievalArrayFragment","VECTOR_COMPONENTS","sizeToType","1","2","3","4","9","16","99","makeUniformArrayDeclaration","totalBlocks","fragment","fill","makeInstanceRetrievalArray","templateOptions","makeInstanceDestructuringArray","join","webgl_stat_1","uniform_instance_block_array_1","vertexShaderComposition","fragmentShaderComposition","instanceDestructuringArray","MAX_USE_PER_BLOCK","generateUniforms","injectionType","injectFragments","shaders","shaderInputMetrics","instancingInfo","instanceUniformBlockCount","ceil","calculateUniformBlockUseage","sortedInstanceAttributes","currentBlock","trueBlockIndex","blockUseage","innerBlockUseage","attributeSize","oldUseage","newUseage","innerUseage","instances","uniformMetrics","blockQualifierDedup","qualifiers","blockQualifiers","qualifierList","allQualifiers","declaration","makeInstanceUniformDeclaration","makeUniformInstanceDataOptions","metrics","generateInstanceDataLookupOptions","additionalOptions","generateVertexAttributes","generateShaderInputs","generateVertexPicking","makeInstanceDestructuring","makePickingDestructuring","makeInstanceAttributeReferences","generateVertexShader","vertexShaderResults","generateFragmentShader","generateFragmentPickingMethod","images_1","labels_1","attribute_generation_1","generate_default_scene_1","generate_layer_geometry_1","generate_layer_material_1","inject_shader_io_1","mouse_event_manager_1","color_picking_analysis_1","instance_uniform_manager_1","layer_mouse_events_1","texture_1","atlas_resource_manager_1","DEFAULT_BACKGROUND_COLOR","Color","isCanvas","createLayer","layerClass","LayerSurface","AtlasManager","currentViewport","scenes","willDisposeLayer","isBufferingAtlas","initLayer","resourceManager","renderer","pickingRenderer","LabelInstance","ImageInstance","pickingPass","views_1","flags","pickWidth","pickHeight","didBuffer","drawSceneView","updateColorPick","defaultSceneElements","clearFlags","COLOR","DEPTH","pickingTarget","Uint8Array","readRenderTargetPixels","colorPicking","rendererSize","getSize","getPixelRatio","background","SCISSOR_TEST","scissor","clearColor","setSize","setRenderTarget","STENCIL","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","setViewport","getViewSize","getViewWorldBounds","topLeft","bottomRight","init","setContext","initGL","initMouseManager","initResources","WebGLRenderer","alpha","antialias","preserveDrawingBuffer","autoClear","setFaceCulling","CullFaceNone","setRendererSize","setPixelRatio","setClearColor","sceneViewDepth","sceneOptions","newScene","viewOptions","newView","addLayerToScene","shaderMetrics","eventManagers","atlasResources","createAtlas","layerInitializers","existingLayer","layerId","fitContainer","parentElement","className","setAttribute","containerBox","getBoundingClientRect","box","isString","getElementById","WebGLRenderTarget","magFilter","LinearFilter","minFilter","stencilBuffer","primitives_1","layer_1","RingLayer","ring","radius","thickness","defaults","Points","transparent","RingInstance","instance_1","anchorCalculator","TopLeft","anchor","rectangle","padding","TopMiddle","TopRight","MiddleLeft","Middle","MiddleRight","BottomLeft","BottomMiddle","BottomRight","Custom","RectangleInstance","scaling","BOUND_MAX","_anchor","setAnchor","newAnchor","types_2","RectangleLayer","projection","maxScale","minScale","ALWAYS","NEVER","screenPoint","vertexToNormal","0","5","vertexToSide","u","vertex","TriangleStripDrawMode","blending","CustomBlending","blendSrc","OneFactor","premultipliedAlpha","rasterizationLookUp","_cssFont","_fontFamily","_fontSize","_fontStyle","_fontWeight","_maxWidth","_text","_width","_height","_isDestroyed","fontStyle","cssFontLookup","rasterizations","references","_rasterization","LabelLayer","ImageRasterizer","calculateImageSize","atlas_1","color_atlas_resource_1","color_rasterizer_1","image_atlas_resource_1","label_rasterizer_1","ZERO_IMAGE","allAtlas","destroyAtlas","atlasName","setDefaultImage","loadedImage","rect","dimensions","insertedNode","ux","uy","uw","uh","onePixelX","atlasDimensions","loadImage","first","second","insert","nodeImage","nodeDimensions","imageSrc","subTexture","image_1","onload","onerror","path","toDataURL","Image","src","resources_1","isLeaf","child0","child1","hasChild","newNode","fitFlag","imgWidth","imgHeight","dWidth","dHeight","removed","tint","_sourceWidth","_sourceHeight","_element","_path","ImageLayer","EdgeInstance","colorStart","colorEnd","control","widthStart","widthEnd","setEdgeWidth","setColor","vector_1","pow","interpolation","LINE","p1","p2","c1","c2","BEZIER","BEZIER2","t1","toPointObject","toPointArray","TEST_RESOLUTION","edgePicking","broadphase","minPickDistance","scaleType","interpolate","edge","edgeWidthStart","edgeWidthEnd","PASS_X","PASS_Y","SCREEN_CURVE","control1","control2","closestIndex","closestDistance","secondClosestIndex","secondClosestDistance","startPoint","endPoint","linePoint","lineWidth","startSegment","endSegment","vector","lineDirection","lineNormal","distanceTo","edge_picking_1","pickVS","baseVS","screenVS","edgeFS","EdgeLayer","scaleFactor","MAX_SEGMENTS","_d","vertexInterpolation","_e","CircleInstance","isMouseOver","isMouseDown","getColorPickInstance","onMouseDown","hitTest_1","query_1","world_1","querySpace","check","bind","instanceForColor","onMouseOut","hitTest_2","query_2","world_2","onMouseUp","hitTest_3","query_3","world_3","onMouseOver","onMouseMove","hitTest_4","query_4","info","world_4","notOverInstances","isCurrentlyOver_1","noLongerOver","onMouseClick","hitTest_5","query_5","world_5","VECTOR_ACCESSORS","quadPicking","changeInstanceQuad","addInstanceQuad","removeInstanceQuad","changeInstanceColorPick","addInstanceColorPick","removeInstanceColorPick","changeInstance","addInstance","removeInstance","uniformCluster","updateInstance","uniformRangeStart","instanceUniform","squareDistance","Point","getClosest","testPoint","points","closestPoint","getClosestIndex","subtract","amount","normalize","magnitude","getDistance","squared","getMidpoint","direction","make","CircleLayer","circle","circleScreenCenter","mouseScreen","h","plural","ms","str","String","exec","long","round","fmtShort","createDebug","prevTime","enabled","self","curr","prev","coerce","format","formatter","hash","charCodeAt","selectColor","stack","disable","names","skips","len","test","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","array","noop","nextTick","title","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","getBounds","childToNode","childToBounds","nullBounded","fromSplit","doRemove","node","ReferenceCamera","offsetFilter","scaleFilter","base","observable_manager_1","InstanceProvider","cleanObservation","instanceChanges","allowChanges","GATHER_OBSERVABLES","observer","disposer","$$register","INSERT","instanceUpdated","CHANGE","$$dispose","REMOVE","observerKey","newVal","mobx_1","UPDATE_FLAG","DataProvider","instanceDisposers","isChanged","_changeList","monitorItem","_instances","observe","listDisposer","intercept","monitorList","changes_1","changeType","lookUp","disposers","removedCount","added","CameraBoundsAnchor","event_manager_1","BasicCameraController","isPanning","panFilter","allViews","onRangeChanged","targetView","startViewDidStart","applyBounds","applyScaleBounds","boundsHorizontalOffset","boundsVerticalOffset","scaleMin","scaleMax","setBounds","ignoreCoverViews","startViews","anchoredByBoundsHorizontal","TOP_LEFT","MIDDLE_LEFT","BOTTOM_LEFT","worldBounds","screenPadding","TOP_MIDDLE","MIDDLE","BOTTOM_MIDDLE","TOP_RIGHT","MIDDLE_RIGHT","BOTTOM_RIGHT","anchoredByBoundsVertical","worldTLinScreenSpace","worldBRinScreenSpace","canStart","findCoveredStartView","under","coveredStartView","getTargetView","pan","wheelMetrics","beforeZoom","currentZoomX","currentZoomY","afterZoom","getRange","setRange","newWorld","deltaScale","deltaPan"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"three\"), require(\"bowser\"), require(\"mobx\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"three\", \"bowser\", \"mobx\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"voidgl\"] = factory(require(\"three\"), require(\"bowser\"), require(\"mobx\"));\n\telse\n\t\troot[\"voidgl\"] = factory(root[\"three\"], root[\"bowser\"], root[\"mobx\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__107__, __WEBPACK_EXTERNAL_MODULE__112__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 117);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar InstanceBlockIndex;\n(function (InstanceBlockIndex) {\n    InstanceBlockIndex[InstanceBlockIndex[\"ONE\"] = 1] = \"ONE\";\n    InstanceBlockIndex[InstanceBlockIndex[\"TWO\"] = 2] = \"TWO\";\n    InstanceBlockIndex[InstanceBlockIndex[\"THREE\"] = 3] = \"THREE\";\n    InstanceBlockIndex[InstanceBlockIndex[\"FOUR\"] = 4] = \"FOUR\";\n})(InstanceBlockIndex = exports.InstanceBlockIndex || (exports.InstanceBlockIndex = {}));\nvar InstanceAttributeSize;\n(function (InstanceAttributeSize) {\n    InstanceAttributeSize[InstanceAttributeSize[\"ONE\"] = 1] = \"ONE\";\n    InstanceAttributeSize[InstanceAttributeSize[\"TWO\"] = 2] = \"TWO\";\n    InstanceAttributeSize[InstanceAttributeSize[\"THREE\"] = 3] = \"THREE\";\n    InstanceAttributeSize[InstanceAttributeSize[\"FOUR\"] = 4] = \"FOUR\";\n    /** Special case for making instance attributes that can target Atlas resources */\n    InstanceAttributeSize[InstanceAttributeSize[\"ATLAS\"] = 99] = \"ATLAS\";\n})(InstanceAttributeSize = exports.InstanceAttributeSize || (exports.InstanceAttributeSize = {}));\nvar UniformSize;\n(function (UniformSize) {\n    UniformSize[UniformSize[\"ONE\"] = 1] = \"ONE\";\n    UniformSize[UniformSize[\"TWO\"] = 2] = \"TWO\";\n    UniformSize[UniformSize[\"THREE\"] = 3] = \"THREE\";\n    UniformSize[UniformSize[\"FOUR\"] = 4] = \"FOUR\";\n    UniformSize[UniformSize[\"MATRIX3\"] = 9] = \"MATRIX3\";\n    UniformSize[UniformSize[\"MATRIX4\"] = 16] = \"MATRIX4\";\n    UniformSize[UniformSize[\"ATLAS\"] = 99] = \"ATLAS\";\n})(UniformSize = exports.UniformSize || (exports.UniformSize = {}));\nvar VertexAttributeSize;\n(function (VertexAttributeSize) {\n    VertexAttributeSize[VertexAttributeSize[\"ONE\"] = 1] = \"ONE\";\n    VertexAttributeSize[VertexAttributeSize[\"TWO\"] = 2] = \"TWO\";\n    VertexAttributeSize[VertexAttributeSize[\"THREE\"] = 3] = \"THREE\";\n    VertexAttributeSize[VertexAttributeSize[\"FOUR\"] = 4] = \"FOUR\";\n})(VertexAttributeSize = exports.VertexAttributeSize || (exports.VertexAttributeSize = {}));\n/** These are flags for indicating which shaders receive certain injection elements */\nvar ShaderInjectionTarget;\n(function (ShaderInjectionTarget) {\n    /** ONLY the vertex shader will receive the injection */\n    ShaderInjectionTarget[ShaderInjectionTarget[\"VERTEX\"] = 0] = \"VERTEX\";\n    /** ONLY the fragment shader will receive the injection */\n    ShaderInjectionTarget[ShaderInjectionTarget[\"FRAGMENT\"] = 1] = \"FRAGMENT\";\n    /** Both the fragment and vertex shader will receive the injection */\n    ShaderInjectionTarget[ShaderInjectionTarget[\"ALL\"] = 2] = \"ALL\";\n})(ShaderInjectionTarget = exports.ShaderInjectionTarget || (exports.ShaderInjectionTarget = {}));\n/**\n * This is the type of picking assigned to a layer. Each mode has performance and functionality\n * tradeoffs.\n */\nvar PickType;\n(function (PickType) {\n    /** Disable any picking methodology */\n    PickType[PickType[\"NONE\"] = 0] = \"NONE\";\n    /** Pick all instances found underneath the mouse. The Layer must explicitly support this feature. */\n    PickType[PickType[\"ALL\"] = 1] = \"ALL\";\n    /**\n     * NOTE: NOT IMPLEMENTED YET\n     *\n     * Uses highly efficient color rendering method to detect an instance on a pixel by pixel check. Since it is\n     * based on rendering, it will only select the 'visually' top most rendered instance. This means instances can be occluded\n     * by other instances is an instance renders behind another.\n     *\n     * This is vastly more efficient and accurate than ALL. This also will be more readily supported than ALL.\n     */\n    PickType[PickType[\"SINGLE\"] = 2] = \"SINGLE\";\n})(PickType = exports.PickType || (exports.PickType = {}));\n/**\n * Diff types that an instance can go through. Used to help the system consume the diff\n * and apply it to the GL framework.\n */\nvar InstanceDiffType;\n(function (InstanceDiffType) {\n    InstanceDiffType[InstanceDiffType[\"CHANGE\"] = 0] = \"CHANGE\";\n    InstanceDiffType[InstanceDiffType[\"INSERT\"] = 1] = \"INSERT\";\n    InstanceDiffType[InstanceDiffType[\"REMOVE\"] = 2] = \"REMOVE\";\n})(InstanceDiffType = exports.InstanceDiffType || (exports.InstanceDiffType = {}));\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Class to manage the x, y, width, and height of an object\n *\n * @template T This specifies the data type associated with this shape and is accessible\n *             via the property 'd'\n */\nvar Bounds = /** @class */ (function () {\n    /**\n     * Create a new instance\n     *\n     * @param left  The left side (x coordinate) of the instance\n     * @param right The right side of the instance\n     * @param top The top (y coordinate) of the instance\n     * @param bottom The bottom of the instance\n     */\n    function Bounds(options) {\n        this.x = 0;\n        this.y = 0;\n        this.width = 0;\n        this.height = 0;\n        this.x = options.x || options.left || 0;\n        this.y = options.y || options.top || 0;\n        this.height = options.height || (options.bottom - this.y) || 0;\n        this.width = options.width || (options.right - this.x) || 0;\n    }\n    Object.defineProperty(Bounds.prototype, \"area\", {\n        get: function () {\n            return this.width * this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"bottom\", {\n        get: function () {\n            return this.y + this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"left\", {\n        get: function () {\n            return this.x;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"mid\", {\n        get: function () {\n            return {\n                x: this.x + this.width / 2.0,\n                y: this.y + this.height / 2.0,\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"right\", {\n        get: function () {\n            return this.x + this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"top\", {\n        get: function () {\n            return this.y;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Bounds.emptyBounds = function () {\n        return new Bounds({\n            height: 0,\n            width: 0,\n            x: 0,\n            y: 0,\n        });\n    };\n    /**\n     * Checks to see if a point is within this bounds object.\n     *\n     * @param point\n     */\n    Bounds.prototype.containsPoint = function (point) {\n        return !(point.x < this.x || point.y < this.y || point.x > this.right || point.y > this.bottom);\n    };\n    /**\n     * Grows this bounds object to cover the space of the provided bounds object\n     *\n     * @param item\n     */\n    Bounds.prototype.encapsulate = function (item) {\n        if (item instanceof Bounds) {\n            if (item.x < this.x) {\n                this.width += Math.abs(item.x - this.x);\n                this.x = item.x;\n            }\n            if (item.y < this.y) {\n                this.height += Math.abs(item.y - this.y);\n                this.y = item.y;\n            }\n            if (this.right < item.right) {\n                this.width += item.right - this.right;\n            }\n            if (this.bottom < item.bottom) {\n                this.height += item.bottom - this.bottom;\n            }\n            return true;\n        }\n        else {\n            if (item.x < this.x) {\n                this.width += this.x - item.x;\n                this.x = item.x;\n            }\n            if (item.x > this.right) {\n                this.width += item.x - this.x;\n            }\n            if (item.y < this.y) {\n                this.height += this.y - item.y;\n                this.y = item.y;\n            }\n            if (item.y > this.bottom) {\n                this.height += item.y - this.y;\n            }\n            return true;\n        }\n    };\n    /**\n     * Checks to see if the provided bounds object could fit within the dimensions of this bounds object\n     * This ignores position and just checks width and height.\n     *\n     * @param bounds\n     *\n     * @return {number} 0 if it doesn't fit. 1 if it fits perfectly. 2 if it just fits.\n     */\n    Bounds.prototype.fits = function (bounds) {\n        // If the same, the bounds fits exactly into this bounds\n        if (this.width === bounds.width && this.height === bounds.height) {\n            return 1;\n        }\n        // The bounds can fit within this, then it just fits\n        if (this.width >= bounds.width && this.height >= bounds.height) {\n            return 2;\n        }\n        // Otherwise, the bounds does not fit within this bounds\n        return 0;\n    };\n    /**\n     * Checks if a bounds object intersects another bounds object.\n     *\n     * @param bounds\n     */\n    Bounds.prototype.hitBounds = function (bounds) {\n        return !(this.right < bounds.x || this.x > bounds.right || this.bottom < bounds.y || this.y > bounds.height);\n    };\n    /**\n     * Sees if the provided bounds is completely within this bounds object. Unlike fits() this takes\n     * position into account.\n     *\n     * @param bounds\n     */\n    Bounds.prototype.isInside = function (bounds) {\n        return this.x >= bounds.x && this.right <= bounds.right && this.y >= bounds.y && this.bottom <= bounds.bottom;\n    };\n    /**\n     * Easy readout of this Bounds object.\n     */\n    Bounds.prototype.toString = function () {\n        return \"{x: \" + this.x + \" y:\" + this.y + \" w:\" + this.width + \" h:\" + this.height + \"}\";\n    };\n    return Bounds;\n}());\nexports.Bounds = Bounds;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./observable\"));\n__export(require(\"./instance-provider\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AnchorType;\n(function (AnchorType) {\n    AnchorType[AnchorType[\"BottomLeft\"] = 0] = \"BottomLeft\";\n    AnchorType[AnchorType[\"BottomMiddle\"] = 1] = \"BottomMiddle\";\n    AnchorType[AnchorType[\"BottomRight\"] = 2] = \"BottomRight\";\n    AnchorType[AnchorType[\"Custom\"] = 3] = \"Custom\";\n    AnchorType[AnchorType[\"Middle\"] = 4] = \"Middle\";\n    AnchorType[AnchorType[\"MiddleLeft\"] = 5] = \"MiddleLeft\";\n    AnchorType[AnchorType[\"MiddleRight\"] = 6] = \"MiddleRight\";\n    AnchorType[AnchorType[\"TopLeft\"] = 7] = \"TopLeft\";\n    AnchorType[AnchorType[\"TopMiddle\"] = 8] = \"TopMiddle\";\n    AnchorType[AnchorType[\"TopRight\"] = 9] = \"TopRight\";\n})(AnchorType = exports.AnchorType || (exports.AnchorType = {}));\nvar ScaleType;\n(function (ScaleType) {\n    /** The size of the image will be tied to world space */\n    ScaleType[ScaleType[\"ALWAYS\"] = 1] = \"ALWAYS\";\n    /** The image will scale to it's font size then stop growing */\n    ScaleType[ScaleType[\"BOUND_MAX\"] = 2] = \"BOUND_MAX\";\n    /** The image will alwyas retain it's font size on screen */\n    ScaleType[ScaleType[\"NEVER\"] = 3] = \"NEVER\";\n})(ScaleType = exports.ScaleType || (exports.ScaleType = {}));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar types_1 = require(\"../types\");\nvar util_1 = require(\"../util\");\nvar identify_by_key_1 = require(\"../util/identify-by-key\");\nvar instance_diff_manager_1 = require(\"./instance-diff-manager\");\nvar layer_interaction_handler_1 = require(\"./layer-interaction-handler\");\n/**\n * A base class for generating drawable content\n */\nvar Layer = /** @class */ (function (_super) {\n    __extends(Layer, _super);\n    function Layer(props) {\n        var _this = \n        // We do not establish bounds in the layer. The surface manager will take care of that for us\n        // After associating the layer with the view it is a part of.\n        _super.call(this, props) || this;\n        /** This determines the drawing order of the layer within it's scene */\n        _this.depth = 0;\n        /** A lookup fo an instance by it's ID */\n        _this.instanceById = new Map();\n        /** Provides the number of vertices a single instance spans */\n        _this.instanceVertexCount = 0;\n        // Keep our props within the layer\n        _this.props = Object.assign({}, Layer.defaultProps || {}, props);\n        // Set up the pick type for the layer\n        var _a = _this.props.picking, picking = _a === void 0 ? types_1.PickType.NONE : _a;\n        // If ALL is specified we set up QUAD tree picking for our instances\n        if (picking === types_1.PickType.ALL) {\n            var pickingMethods = _this.getInstancePickingMethods();\n            _this.picking = {\n                currentPickMode: types_1.PickType.NONE,\n                hitTest: pickingMethods.hitTest,\n                quadTree: new util_1.TrackedQuadTree(0, 1, 0, 1, pickingMethods.boundsAccessor),\n                type: types_1.PickType.ALL,\n            };\n        }\n        else if (picking === types_1.PickType.SINGLE) {\n            _this.picking = {\n                currentPickMode: types_1.PickType.NONE,\n                type: types_1.PickType.SINGLE,\n                uidToInstance: new Map(),\n            };\n        }\n        else {\n            _this.picking = {\n                currentPickMode: types_1.PickType.NONE,\n                type: types_1.PickType.NONE,\n            };\n        }\n        _this.diffManager = new instance_diff_manager_1.InstanceDiffManager(_this);\n        _this.diffProcessor = _this.diffManager.getDiffProcessor();\n        _this.interactions = new layer_interaction_handler_1.LayerInteractionHandler(_this);\n        return _this;\n    }\n    /**\n     * Invalidate and free all resources assocated with this layer.\n     */\n    Layer.prototype.destroy = function () {\n        this.uniformManager.destroy();\n    };\n    Layer.prototype.didUpdateProps = function () {\n        /** LIFECYCLE */\n    };\n    /**\n     * This is where global uniforms should update their values. Executes every frame.\n     */\n    Layer.prototype.draw = function () {\n        var uniform;\n        var value;\n        // Consume the diffs for the instances to update each element\n        var changeList = this.props.data.changeList;\n        // Make some holder variables to prevent declaration within the loop\n        var change, instance, uniforms;\n        // Fast ref to the processor and manager\n        var diffProcessor = this.diffProcessor;\n        var diffManager = this.diffManager;\n        for (var i = 0, end = changeList.length; i < end; ++i) {\n            change = changeList[i];\n            instance = change[0];\n            uniforms = this.uniformManager.getUniforms(instance);\n            // The diff type is change[1] which we use to find the diff processing method to use\n            diffProcessor[change[1]](diffManager, instance, uniforms);\n        }\n        // Indicate the diffs are consumed\n        this.props.data.resolve();\n        // Loop through the uniforms that are across all instances\n        for (var i = 0, end = this.uniforms.length; i < end; ++i) {\n            uniform = this.uniforms[i];\n            value = uniform.update(uniform);\n            uniform.materialUniforms.forEach(function (materialUniform) { return materialUniform.value = value; });\n        }\n    };\n    /**\n     * This method is for layers to implement to specify how the bounds for an instance are retrieved or\n     * calculated and how the Instance interacts with a point. This is REQUIRED to support PickType.ALL on the layer.\n     */\n    Layer.prototype.getInstancePickingMethods = function () {\n        throw new Error('When picking is set to PickType.ALL, the layer MUST have this method implemented; otherwise, the layer is incompatible with this picking mode.');\n    };\n    /**\n     * The type of Three model as well as the preferred draw mode associated with it.\n     */\n    Layer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TrianglesDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    /**\n     * The options for a three material without uniforms.\n     */\n    Layer.prototype.getMaterialOptions = function () {\n        return {};\n    };\n    /**\n     * This sets up all of the data bindings that will transport data from the CPU\n     * to the Shader on the GPU.\n     *\n     * Instance Attributes: These are very frequently changing attributes\n     * Vertex Attributes: These are attributes that should be static on a vertex. Conisder it very costly to update.\n     *                    The only time making these modifieable is in the event of GL_POINTS.\n     * Uniforms: These set up the uniforms for the layer, thus having all normal implications of a uniform. Global\n     *           across the fragment and vertex shaders and can be modified with little consequence.\n     */\n    Layer.prototype.initShader = function () {\n        return {\n            fs: require('../shaders/base/no-op.fs'),\n            instanceAttributes: [],\n            uniforms: [],\n            vertexAttributes: [],\n            vertexCount: 0,\n            vs: require('../shaders/base/no-op.vs'),\n        };\n    };\n    /**\n     * Helper method for making an instance attribute. Depending on set up, this makes creating elements\n     * have better documentation when typing out the elements.\n     */\n    Layer.prototype.makeInstanceAttribute = function (block, blockIndex, name, size, update, atlas) {\n        return {\n            atlas: atlas,\n            block: block,\n            blockIndex: blockIndex,\n            name: name,\n            size: size,\n            update: update,\n        };\n    };\n    /**\n     * Helper method for making a uniform type. Depending on set up, this makes creating elements\n     * have better documentation when typing out the elements.\n     */\n    Layer.prototype.makeUniform = function (name, size, update, shaderInjection, qualifier) {\n        return {\n            name: name,\n            qualifier: qualifier,\n            shaderInjection: shaderInjection,\n            size: size,\n            update: update,\n        };\n    };\n    Layer.prototype.willUpdateInstances = function (changes) {\n        // HOOK: Simple hook so a class can review all of it's changed instances before\n        //       Getting applied to the Shader IO\n    };\n    Layer.prototype.willUpdateProps = function (newProps) {\n        /** LIFECYCLE */\n    };\n    Layer.prototype.didUpdate = function () {\n        this.props.data.resolve();\n    };\n    Layer.defaultProps = {};\n    return Layer;\n}(identify_by_key_1.IdentifyByKey));\nexports.Layer = Layer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./bounds\"));\n__export(require(\"./point\"));\n","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_provider_1 = require(\"../instance-provider\");\nvar instanceUID = 0;\nvar Instance = /** @class */ (function () {\n    function Instance(options) {\n        /** A numerical look up for the instance. Numerical identifiers run faster than objects or strings */\n        this._uid = Instance.newUID;\n        this._id = options.id;\n        this.active = options.active;\n    }\n    Object.defineProperty(Instance, \"newUID\", {\n        get: function () { return (instanceUID = (++instanceUID) % 0xFFFFFF); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * The system will call this on the instance when it believes the instance may be\n     * harboring resources that are not released.\n     */\n    Instance.prototype.destroy = function () {\n        // Generally a No-op\n    };\n    Object.defineProperty(Instance.prototype, \"id\", {\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Instance.prototype, \"uid\", {\n        get: function () {\n            return this._uid;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        instance_provider_1.observable\n    ], Instance.prototype, \"active\", void 0);\n    return Instance;\n}());\nexports.Instance = Instance;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./chart-camera\"));\n__export(require(\"./data-provider\"));\n__export(require(\"./instance\"));\n__export(require(\"./reference-camera\"));\n__export(require(\"./shader-templating\"));\n__export(require(\"./tracked-quad-tree\"));\n__export(require(\"./vector\"));\n__export(require(\"./view-camera\"));\n__export(require(\"./webgl-stat\"));\n__export(require(\"./mouse\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./atlas\"));\n__export(require(\"./atlas-manager\"));\n__export(require(\"./color-atlas-resource\"));\n__export(require(\"./color-rasterizer\"));\n__export(require(\"./image-atlas-resource\"));\n__export(require(\"./image-rasterizer\"));\n__export(require(\"./label-atlas-resource\"));\n__export(require(\"./label-rasterizer\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This is an object that specifically is generated with a 'key' option that can never\n * be modified on the object and is identified henceforth with the key applied as the\n * 'id' of the object.\n */\nvar IdentifyByKey = /** @class */ (function () {\n    function IdentifyByKey(options) {\n        this.key = options.key;\n    }\n    Object.defineProperty(IdentifyByKey.prototype, \"id\", {\n        /** READONLY id of the object. */\n        get: function () {\n            return this.key;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IdentifyByKey;\n}());\nexports.IdentifyByKey = IdentifyByKey;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isMesh(val) {\n    return Boolean(val.isMesh);\n}\nfunction generateLayerModel(layer, geometry, material) {\n    var modelInfo = layer.getModelType();\n    var model = new modelInfo.modelType(geometry, material);\n    if (isMesh(model)) {\n        model.drawMode = modelInfo.drawMode;\n    }\n    return model;\n}\nexports.generateLayerModel = generateLayerModel;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar absolute_position_1 = require(\"../primitives/absolute-position\");\nvar bounds_1 = require(\"../primitives/bounds\");\nvar identify_by_key_1 = require(\"../util/identify-by-key\");\nvar view_camera_1 = require(\"../util/view-camera\");\nvar ClearFlags;\n(function (ClearFlags) {\n    ClearFlags[ClearFlags[\"COLOR\"] = 1] = \"COLOR\";\n    ClearFlags[ClearFlags[\"DEPTH\"] = 2] = \"DEPTH\";\n    ClearFlags[ClearFlags[\"STENCIL\"] = 4] = \"STENCIL\";\n})(ClearFlags = exports.ClearFlags || (exports.ClearFlags = {}));\nfunction isOrthographic(val) {\n    return 'left' in val;\n}\n/**\n * This defines a view of a scene\n */\nvar View = /** @class */ (function (_super) {\n    __extends(View, _super);\n    function View(options) {\n        var _this = _super.call(this, options) || this;\n        /**\n         * This is the depth of the view. The higher the depth represents which layer is on top.\n         * Zero always represents the default view.\n         */\n        _this.depth = 0;\n        /** This is set to ensure the projections that happen properly translates the pixel ratio to normal Web coordinates */\n        _this.pixelRatio = window.devicePixelRatio;\n        Object.assign(_this, options);\n        return _this;\n    }\n    View.prototype.screenToPixelSpace = function (point, out) {\n        var p = out || { x: 0, y: 0 };\n        p.x = point.x * this.pixelRatio;\n        p.y = point.y * this.pixelRatio;\n        return p;\n    };\n    View.prototype.pixelSpaceToScreen = function (point, out) {\n        var p = out || { x: 0, y: 0 };\n        p.x = point.x / this.pixelRatio;\n        p.y = point.y / this.pixelRatio;\n        return p;\n    };\n    View.prototype.screenToView = function (point, out) {\n        var p = this.screenToPixelSpace(point, out);\n        p.x = p.x - this.viewBounds.x;\n        p.y = p.y - this.viewBounds.y;\n        return p;\n    };\n    View.prototype.viewToScreen = function (point, out) {\n        var p = { x: 0, y: 0 };\n        p.x = point.x + this.viewBounds.x;\n        p.y = point.y + this.viewBounds.y;\n        return this.pixelSpaceToScreen(p, out);\n    };\n    View.prototype.screenToWorld = function (point, out) {\n        var view = this.pixelSpaceToScreen(this.screenToView(point));\n        var world = out || { x: 0, y: 0 };\n        world.x = (view.x - (this.camera.offset[0] * this.camera.scale[0])) / this.camera.scale[0];\n        world.y = (view.y - (this.camera.offset[1] * this.camera.scale[1])) / this.camera.scale[1];\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        return world;\n    };\n    View.prototype.worldToScreen = function (point, out) {\n        var screen = { x: 0, y: 0 };\n        // Calculate from the camera to view space\n        screen.x = ((point.x * this.camera.scale[0]) + (this.camera.offset[0] * this.camera.scale[0])) * this.pixelRatio;\n        screen.y = ((point.y * this.camera.scale[1]) + (this.camera.offset[1] * this.camera.scale[1])) * this.pixelRatio;\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        // Convert from view to screen space\n        return this.viewToScreen(screen, out);\n    };\n    View.prototype.viewToWorld = function (point, out) {\n        var world = out || { x: 0, y: 0 };\n        var screen = this.pixelSpaceToScreen(point);\n        world.x = (screen.x - (this.camera.offset[0] * this.camera.scale[0])) / this.camera.scale[0];\n        world.y = (screen.y - (this.camera.offset[1] * this.camera.scale[1])) / this.camera.scale[1];\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        return world;\n    };\n    View.prototype.worldToView = function (point, out) {\n        var screen = out || { x: 0, y: 0 };\n        // Calculate from the camera to view space\n        screen.x = (point.x * this.camera.scale[0]) + (this.camera.offset[0] * this.camera.scale[0]);\n        screen.y = (point.y * this.camera.scale[1]) + (this.camera.offset[1] * this.camera.scale[1]);\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        return screen;\n    };\n    /**\n     * This operation makes sure we have the view camera adjusted to the new viewport's needs.\n     * For default behavior this ensures that the coordinate system has no distortion, orthographic,\n     * top left as 0,0 with +y axis pointing down.\n     */\n    View.prototype.fitViewtoViewport = function (surfaceDimensions) {\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CONTROLLED && isOrthographic(this.viewCamera.baseCamera)) {\n            var viewBounds = absolute_position_1.getAbsolutePositionBounds(this.viewport, surfaceDimensions, this.pixelRatio);\n            var width = viewBounds.width;\n            var height = viewBounds.height;\n            var viewport = {\n                bottom: -height / 2,\n                far: 10000000,\n                left: -width / 2,\n                near: -100,\n                right: width / 2,\n                top: height / 2,\n            };\n            var scaleX = 1;\n            var scaleY = 1;\n            var camera = this.viewCamera.baseCamera;\n            Object.assign(camera, viewport);\n            camera.position.set(-viewBounds.width / 2.0 * scaleX, viewBounds.height / 2.0 * scaleY, camera.position.z);\n            camera.scale.set(scaleX, -scaleY, 1.0);\n            camera.updateMatrix();\n            camera.updateMatrixWorld(true);\n            camera.updateProjectionMatrix();\n            this.viewBounds = viewBounds;\n            this.viewBounds.data = this;\n            this.screenBounds = new bounds_1.Bounds({\n                height: this.viewBounds.height / this.pixelRatio,\n                width: this.viewBounds.width / this.pixelRatio,\n                x: this.viewBounds.x / this.pixelRatio,\n                y: this.viewBounds.y / this.pixelRatio,\n            });\n        }\n        else if (!isOrthographic(this.viewCamera.baseCamera)) {\n            console.warn('Fit to viewport does not support non-orthographic cameras as a default behavior.');\n        }\n    };\n    View.DEFAULT_VIEW_ID = '__default__';\n    return View;\n}(identify_by_key_1.IdentifyByKey));\nexports.View = View;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar identify_by_key_1 = require(\"../util/identify-by-key\");\nfunction sortByDepth(a, b) {\n    return a.depth - b.depth;\n}\n/**\n * This defines a scene to which layers are added to. It also tracks the views that this scene\n * is rendered with.\n */\nvar Scene = /** @class */ (function (_super) {\n    __extends(Scene, _super);\n    function Scene(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the three scene which actually sets up the rendering objects */\n        _this.container = new Three.Scene();\n        // TODO: This 'could' be smarter when Three is gone. The pipeline could IMMEDIATELY render\n        /** We make a picking container specifically for the cases where objects must be rendered for picking */\n        _this.pickingContainer = new Three.Scene();\n        /** This is all of the layers tracked to the scene */\n        _this.layers = [];\n        /** This indicates the sort is dirty for a set of layers */\n        _this.sortIsDirty = false;\n        /** This is the view */\n        _this.viewById = new Map();\n        _this.container.frustumCulled = false;\n        _this.container.autoUpdate = false;\n        return _this;\n    }\n    /**\n     * Adds a layer to the scene with the current view setting the layer contains.\n     * The layer can not jump between views or scenes. You must destroy and reconstruct\n     * the layer.\n     */\n    Scene.prototype.addLayer = function (layer) {\n        // Add the layer to the list of layers under the view\n        this.layers.push(layer);\n        this.sortIsDirty = true;\n    };\n    /**\n     * This adds a view to this scene to be used by the scene\n     */\n    Scene.prototype.addView = function (view) {\n        this.viewById.set(view.id, view);\n    };\n    /**\n     * Release any resources this may be hanging onto\n     */\n    Scene.prototype.destroy = function () {\n        this.container = null;\n    };\n    /**\n     * Removes a layer from the scene. No resort is needed as remove operations\n     * do not adjust the sorting order.\n     */\n    Scene.prototype.removeLayer = function (layer) {\n        if (this.layers) {\n            var index = this.layers.indexOf(layer);\n            if (index >= 0) {\n                this.layers.splice(index, 1);\n                return;\n            }\n        }\n        console.warn('Could not remove a layer from the scene as the layer was not a part of the scene to start. Scene:', this.id, 'Layer:', layer.id);\n    };\n    Scene.prototype.sortLayers = function () {\n        if (this.sortIsDirty) {\n            this.layers.sort(sortByDepth);\n        }\n    };\n    Scene.DEFAULT_SCENE_ID = '__default__';\n    return Scene;\n}(identify_by_key_1.IdentifyByKey));\nexports.Scene = Scene;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_atlas_resource_1 = require(\"./base-atlas-resource\");\nvar LabelAtlasResource = /** @class */ (function (_super) {\n    __extends(LabelAtlasResource, _super);\n    function LabelAtlasResource(label) {\n        var _this = _super.call(this) || this;\n        _this.label = label;\n        return _this;\n    }\n    return LabelAtlasResource;\n}(base_atlas_resource_1.BaseAtlasResource));\nexports.LabelAtlasResource = LabelAtlasResource;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BaseAtlasResource = /** @class */ (function () {\n    function BaseAtlasResource() {\n        /**\n         * This sets the ratserization to be a larger value on the texture than is rendered within\n         * the world space. This allows for techniques to be applied in the shaders to incorporate super sampling\n         * or other processes which require higher levels of resolution.\n         *\n         * The default is 1 for a 1 to 1 sample scaling to world space rendering\n         */\n        this.sampleScale = 1;\n    }\n    return BaseAtlasResource;\n}());\nexports.BaseAtlasResource = BaseAtlasResource;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EdgeScaleType;\n(function (EdgeScaleType) {\n    /** All dimensions are within world space */\n    EdgeScaleType[EdgeScaleType[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * The control points are a delta from the end points within screen space, and the line thickness is within\n     * screen space as well all measured in pixels. The scaleFactor scales both thickness and control delta values.\n     * The endpoints remain in world space\n     */\n    EdgeScaleType[EdgeScaleType[\"SCREEN_CURVE\"] = 1] = \"SCREEN_CURVE\";\n})(EdgeScaleType = exports.EdgeScaleType || (exports.EdgeScaleType = {}));\nvar EdgeType;\n(function (EdgeType) {\n    /** Makes a straight edge with no curve */\n    EdgeType[EdgeType[\"LINE\"] = 0] = \"LINE\";\n    /** Makes a single control point Bezier curve */\n    EdgeType[EdgeType[\"BEZIER\"] = 1] = \"BEZIER\";\n    /** Makes a two control point bezier curve */\n    EdgeType[EdgeType[\"BEZIER2\"] = 2] = \"BEZIER2\";\n})(EdgeType = exports.EdgeType || (exports.EdgeType = {}));\n/**\n * This is the broadphase control for edges to help handle quad tree adjustments for picking. If the edge scale type\n * is NONE, you don't need to utilize this. If you use screen space and have camera distortions along an axis, this\n * can help greatly.\n */\nvar EdgeBroadphase;\n(function (EdgeBroadphase) {\n    /** Use this if the broad phase detection should use both width and height of the edge's bounds */\n    EdgeBroadphase[EdgeBroadphase[\"ALL\"] = 0] = \"ALL\";\n    /** Use this to ensure a test against the edge is performed if the mouse aligns with it on the x-axis */\n    EdgeBroadphase[EdgeBroadphase[\"PASS_Y\"] = 1] = \"PASS_Y\";\n    /** Use this to ensure a test against the edge is performed if the mouse aligns with it on the y axis */\n    EdgeBroadphase[EdgeBroadphase[\"PASS_X\"] = 2] = \"PASS_X\";\n})(EdgeBroadphase = exports.EdgeBroadphase || (exports.EdgeBroadphase = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ViewCameraType;\n(function (ViewCameraType) {\n    /**\n     * Indicates a camera that is forced by the system to follow:\n     * - Match width and height of the view port\n     * - +y axis points downward\n     * - gl origin is at the top left of the screen\n     */\n    ViewCameraType[ViewCameraType[\"CONTROLLED\"] = 0] = \"CONTROLLED\";\n    /**\n     * This allows a custom view camera to be applied to the scene.\n     */\n    ViewCameraType[ViewCameraType[\"CUSTOM\"] = 1] = \"CUSTOM\";\n})(ViewCameraType = exports.ViewCameraType || (exports.ViewCameraType = {}));\n/**\n * This is a camera that controls the view projection matrix. This is a much more\n * complicated way to handle views that is better suited for handling 3D applications\n * and is very overkill for most 2D charting systems. If you are working purely with\n * 2D components, it's recommended to leave this as a CONTROLLED camera and utilize\n * the ChartCamera for most of your needs.\n */\nvar ViewCamera = /** @class */ (function () {\n    function ViewCamera() {\n        this.type = ViewCameraType.CONTROLLED;\n    }\n    return ViewCamera;\n}());\nexports.ViewCamera = ViewCamera;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction shaderTemplate(shader, options, required) {\n    var matched = new Map();\n    var noValueProvided = new Map();\n    var notFound = new Map();\n    var shaderOptions = new Map();\n    var shaderResults = shader.replace(/\\$\\{(\\w+)\\}/g, function (x, match) {\n        shaderOptions.set(match, (shaderOptions.get(match) || 0) + 1);\n        if (match in options) {\n            matched.set(match, (matched.get(match) || 0) + 1);\n            return options[match];\n        }\n        noValueProvided.set(match, (noValueProvided.get(match) || 0) + 1);\n        return '';\n    });\n    Object.keys(options).forEach(function (option) {\n        if (!matched.get(option)) {\n            notFound.set(option, (notFound.get(option) || 0) + 1);\n        }\n    });\n    // Provide metrics\n    var results = {\n        resolvedShaderOptions: matched,\n        shader: shaderResults,\n        shaderProvidedOptions: shaderOptions,\n        unresolvedProvidedOptions: notFound,\n        unresolvedShaderOptions: noValueProvided,\n    };\n    if (required) {\n        // This will ensure that BOTH the parameter input AND the shader provided the required options.\n        required.values.forEach(function (require) {\n            if (results.unresolvedProvidedOptions.get(require)) {\n                console.error(required.name + \": Could not resolve all the required inputs. Input:\", require);\n            }\n            else if (results.unresolvedShaderOptions.get(require)) {\n                console.error(required.name + \": A required option was not provided in the options parameter. Option:\", require);\n            }\n            else if (!results.resolvedShaderOptions.get(require)) {\n                console.error(required.name + \": A required option was not provided in the options parameter. Option:\", require);\n            }\n        });\n    }\n    return results;\n}\nexports.shaderTemplate = shaderTemplate;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chartCameraUID = 0;\n/**\n * Quick method for applying a source array to a target array. This\n * ensures the arrays both are valid and applies the values without just making\n * a copy of the source.\n */\nfunction applyArray(target, source) {\n    target && source && target.splice.apply(target, [0, source.length].concat(source));\n}\nvar ChartCamera = /** @class */ (function () {\n    function ChartCamera(options) {\n        /** Internally set id */\n        this._id = chartCameraUID++;\n        /** Represents how much an element should be offset in world space */\n        this.offset = [0, 0, 0];\n        /** Represents how scaled each axis should be in world space */\n        this.scale = [1, 1, 1];\n        if (options) {\n            applyArray(this.offset, options.offset);\n            applyArray(this.scale, options.scale);\n        }\n    }\n    Object.defineProperty(ChartCamera.prototype, \"id\", {\n        /** Keep id as readonly */\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the location of the camera by adjusting the offsets to match.\n     */\n    ChartCamera.prototype.position = function (location) {\n        this.offset = location.slice(0);\n    };\n    return ChartCamera;\n}());\nexports.ChartCamera = ChartCamera;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Classes can extend this and override the methods to respond to events.\n */\nvar EventManager = /** @class */ (function () {\n    function EventManager() {\n    }\n    /**\n     * This retrieves the projections for the view specified by the provided viewId.\n     */\n    EventManager.prototype.getProjection = function (viewId) {\n        return this.mouseManager.getView(viewId);\n    };\n    /**\n     * This retrieves the actual view for the view specified by the provided viewId.\n     */\n    EventManager.prototype.getView = function (viewId) {\n        return (this.mouseManager && this.mouseManager.getView(viewId)) || null;\n    };\n    /**\n     * This retrieves the screen bounds for the view specified by the provided viewId.\n     */\n    EventManager.prototype.getViewScreenBounds = function (viewId) {\n        var view = this.mouseManager.getView(viewId);\n        if (view) {\n            return view.screenBounds;\n        }\n        return null;\n    };\n    /**\n     * This is used internally which provides the parent MouseEventManager via the param mouseManager for this\n     * EventManager.\n     */\n    EventManager.prototype.setMouseManager = function (mouseManager) {\n        this.mouseManager = mouseManager;\n    };\n    return EventManager;\n}());\nexports.EventManager = EventManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mouse_1 = require(\"../util/mouse\");\nvar quad_tree_1 = require(\"../util/quad-tree\");\n// If a mouse up after a mouse down happens before this many milliseconds, a click gesture will happen\nvar VALID_CLICK_DELAY = 1E3;\nfunction sortByDepth(a, b) {\n    return b.data.depth - a.data.depth;\n}\n/**\n * This manages mouse events on the provided canvas and provides some higher level\n * interactions with the surface.\n */\nvar MouseEventManager = /** @class */ (function () {\n    function MouseEventManager(canvas, views, controllers, handlesWheelEvents) {\n        var _this = this;\n        /**\n         * This flag is set when the system is waiting to render the elements to establish bounds.\n         * No Mouse interations will happen while this is set to true.\n         */\n        this._waitingForRender = true;\n        /**\n         * Retrieves the views underneath the mouse with the top most view as\n         * the first view in the list.\n         */\n        this.getViewsUnderMouse = function (mouse) {\n            // Find the views the mouse has interacted with\n            var hitViews = _this.quadTree.query(mouse);\n            // Sort them by depth\n            hitViews.sort(sortByDepth);\n            return hitViews;\n        };\n        /**\n         * When the renderer is resized, we must reform our quad tree\n         */\n        this.resize = function () {\n            _this._waitingForRender = true;\n        };\n        this.context = canvas;\n        this.setViews(views);\n        this.setControllers(controllers);\n        this.addContextListeners(handlesWheelEvents);\n    }\n    Object.defineProperty(MouseEventManager.prototype, \"waitingForRender\", {\n        get: function () {\n            return this._waitingForRender;\n        },\n        set: function (val) {\n            this._waitingForRender = val;\n            // When we're no longer waiting for render to occur we update all of our views in the quad tree\n            if (!val) {\n                this.quadTree = new quad_tree_1.QuadTree(0, 0, 0, 0);\n                this.quadTree.addAll(this.views.map(function (v) { return v.bounds; }).filter(Boolean));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This sets up the DOM events to listen to the events that are broadcasted by the canvas.\n     * These events are set up in such a way as to continue some events when the user\n     * drags the mouse off of the browser or off the canvas without releasing.\n     */\n    MouseEventManager.prototype.addContextListeners = function (handlesWheelEvents) {\n        var _this = this;\n        var element = this.context;\n        var startView = null;\n        var startPosition = null;\n        if (handlesWheelEvents) {\n            element.onmousewheel = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                var wheel = _this.makeWheel(event);\n                _this.controllers.forEach(function (controller) {\n                    controller.handleWheel(interaction, wheel);\n                });\n                event.stopPropagation();\n                event.preventDefault();\n            };\n        }\n        element.onmouseleave = function (event) {\n            // No interactions while waiting for the render to update\n            if (_this.waitingForRender)\n                return;\n            var mouse = mouse_1.eventElementPosition(event, element);\n            var interaction = _this.makeInteraction(mouse, startPosition, startView);\n            _this.controllers.forEach(function (controller) {\n                controller.handleMouseOut(interaction);\n            });\n        };\n        element.onmousemove = function (event) {\n            // No interactions while waiting for the render to update\n            if (_this.waitingForRender)\n                return;\n            var mouse = mouse_1.eventElementPosition(event, element);\n            var interaction = _this.makeInteraction(mouse, startPosition, startView);\n            _this.controllers.forEach(function (controller) {\n                controller.handleMouseMove(interaction);\n            });\n        };\n        element.onmousedown = function (event) {\n            // No interactions while waiting for the render to update\n            if (_this.waitingForRender)\n                return;\n            startPosition = mouse_1.eventElementPosition(event, element);\n            var downViews = _this.getViewsUnderMouse(startPosition);\n            // While this is true, when mouse up happens, the click gesture will execute\n            var canClick = true;\n            var clickStartTime = Date.now();\n            // If no views under this view, then we just quick exit with no interactions\n            if (downViews.length <= 0) {\n                return;\n            }\n            startView = downViews[0].data;\n            var interaction = _this.makeInteraction(startPosition, startPosition, startView);\n            var currentPosition = startPosition;\n            _this.controllers.forEach(function (controller) {\n                controller.handleMouseDown(interaction, event.button);\n            });\n            event.stopPropagation();\n            document.onmousemove = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                var delta = {\n                    x: mouse.x - currentPosition.x,\n                    y: mouse.y - currentPosition.y,\n                };\n                var drag = _this.makeDrag(mouse, startPosition, currentPosition, delta);\n                currentPosition = mouse;\n                _this.controllers.forEach(function (controller) {\n                    controller.handleDrag(interaction, drag);\n                });\n                // If we move after a mouse down, it's no longer a click\n                canClick = false;\n            };\n            document.onmouseup = function (event) {\n                document.onmousemove = null;\n                document.onmouseup = null;\n                document.onmouseover = null;\n            };\n            document.onmouseover = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                _this.controllers.forEach(function (controller) {\n                    controller.handleMouseOver(interaction);\n                });\n                event.stopPropagation();\n            };\n            element.onmouseup = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                _this.controllers.forEach(function (controller) {\n                    controller.handleMouseUp(interaction, event.button);\n                });\n                // If we release the mouse before the valid click delay\n                if (canClick && Date.now() - clickStartTime < VALID_CLICK_DELAY) {\n                    _this.controllers.forEach(function (controller) {\n                        controller.handleClick(interaction, event.button);\n                    });\n                }\n            };\n            // Text will not be selected when it is being dragged\n            element.onselectstart = function () {\n                return false;\n            };\n        };\n        // Enable touch support\n        this.addTouchContextListeners();\n    };\n    MouseEventManager.prototype.addTouchContextListeners = function () {\n        var element = this.context;\n        element.ontouchstart = function (event) {\n            // TODO: This is the start work for the touch events. And this retains sentimental value.\n            // For (let i = 0, end = event.changedTouches.length; i < end; ++i) {\n            // TODO\n            // Const touch = event.changedTouches.item(i);\n            // CurrentTouches.set(touch.identifier, to);\n            // }\n        };\n        element.ontouchend = function (event) {\n            // TODO\n        };\n        element.ontouchmove = function (event) {\n            // TODO\n        };\n        element.ontouchcancel = function (event) {\n            // TODO\n        };\n    };\n    /**\n     * Retrieves the view for the provided id\n     */\n    MouseEventManager.prototype.getView = function (viewId) {\n        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n            var view = _a[_i];\n            if (view.view.id === viewId) {\n                return view.view;\n            }\n        }\n        return null;\n    };\n    /**\n     * This generates the metrics for a drag gesture.\n     */\n    MouseEventManager.prototype.makeDrag = function (mouse, start, previous, delta) {\n        return {\n            screen: {\n                current: mouse,\n                delta: delta,\n                previous: previous,\n                start: start,\n            },\n        };\n    };\n    /**\n     * This makes the metrics for interactions with the views.\n     */\n    MouseEventManager.prototype.makeInteraction = function (mouse, start, startView) {\n        // Find the views the mouse has interacted with\n        var hitViews = this.getViewsUnderMouse(mouse);\n        return {\n            screen: {\n                mouse: mouse,\n            },\n            start: start && startView && {\n                mouse: startView.view.screenToView(mouse),\n                view: startView.view,\n            },\n            target: {\n                mouse: hitViews[0] && hitViews[0].data.view.screenToView(mouse),\n                view: hitViews[0] && hitViews[0].data.view,\n            },\n            viewsUnderMouse: hitViews.map(function (v) { return ({\n                mouse: v.data.view.screenToView(mouse),\n                view: v.data.view,\n            }); }),\n        };\n    };\n    MouseEventManager.prototype.makeWheel = function (event) {\n        var wheel = mouse_1.normalizeWheel(event);\n        return {\n            wheel: [wheel.x, wheel.y],\n        };\n    };\n    /**\n     * Sets the controllers to receive events from this manager.\n     */\n    MouseEventManager.prototype.setControllers = function (controllers) {\n        this.controllers = controllers;\n        for (var _i = 0, _a = this.controllers; _i < _a.length; _i++) {\n            var controller = _a[_i];\n            controller.setMouseManager(this);\n        }\n    };\n    /**\n     * Sets the views that gets queried for interactions.\n     */\n    MouseEventManager.prototype.setViews = function (views) {\n        this.views = views;\n    };\n    MouseEventManager.prototype.destroy = function () {\n        this.quadTree = null;\n        this.context.onmousedown = null;\n        this.context.onmousemove = null;\n        this.context.onmouseleave = null;\n        this.context.onmousewheel = null;\n    };\n    return MouseEventManager;\n}());\nexports.MouseEventManager = MouseEventManager;\n","\"use strict\";\n/**\n * This file is dedicted to the all important step of processing desired inputs from the layer\n * and coming up with automated generated uniforms and attributes that the shader's will need\n * in order to operate with the conveniences the library offers. This includes things such as\n * injecting camera projection uniforms, resource uniforms, animation adjustments etc etc.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\nfunction toVertexAttributeInternal(attribute) {\n    return Object.assign({}, attribute, { materialAttribute: null });\n}\nfunction toUniformInternal(uniform) {\n    return Object.assign({}, uniform, { materialUniforms: [] });\n}\n/**\n * This searches through attribute packing for the first empty slot it can find to fill.\n * If a slot is not available it will just start a new block.\n */\nfunction findEmptyBlock(attributes) {\n    var blocks = new Map();\n    var found = null;\n    var maxBlock = 0;\n    attributes.forEach(function (instanceAttribute) {\n        var block = instanceAttribute.block;\n        var index = instanceAttribute.blockIndex;\n        var size = instanceAttribute.size;\n        var usedBlocks = blocks.get(block);\n        maxBlock = Math.max(block, maxBlock);\n        if (!usedBlocks) {\n            usedBlocks = new Map();\n            blocks.set(block, usedBlocks);\n        }\n        for (var i = index, end = index + size; i < end; ++i) {\n            usedBlocks.set(i, true);\n        }\n    });\n    blocks.forEach(function (usedBlocks, block) {\n        if (!usedBlocks.get(1))\n            found = [block, types_1.InstanceBlockIndex.ONE];\n        if (!usedBlocks.get(2))\n            found = [block, types_1.InstanceBlockIndex.TWO];\n        if (!usedBlocks.get(3))\n            found = [block, types_1.InstanceBlockIndex.THREE];\n        if (!usedBlocks.get(4))\n            found = [block, types_1.InstanceBlockIndex.FOUR];\n    });\n    // If no block was ever found, then we take the max block detected and make\n    // A new block after it\n    if (!found) {\n        found = [maxBlock + 1, 0];\n    }\n    return found;\n}\n/**\n * This finds a uniform block that is completely empty\n */\nfunction findEmpty4Block(attributes) {\n    var usedBlocks = new Map();\n    attributes.forEach(function (instanceAttribute) {\n        usedBlocks.set(instanceAttribute.block, true);\n    });\n    var found = 0;\n    while (usedBlocks.get(found)) {\n        found++;\n    }\n    return found;\n}\nfunction sortByResourceAttributes(a, b) {\n    if (a.atlas && !b.atlas)\n        return -1;\n    return 1;\n}\nfunction injectShaderIO(layer, shaderIO) {\n    // Retrieve all of the instance attributes that are atlas references\n    var atlasInstanceAttributes = [];\n    // Key: The atlas uniform name requested\n    var requestedAtlasInjections = new Map();\n    // Get the atlas requests that have unique names. We only need one uniform\n    // For a single unique provided name. We also must merge the requests for\n    // Vertex and fragment injections\n    shaderIO.instanceAttributes.forEach(function (attribute) {\n        if (attribute.atlas) {\n            // Auto set the size of the attribute. Attribute's that are a resource automatically\n            // Consume a size of four\n            attribute.size = types_1.InstanceAttributeSize.FOUR;\n            attribute.blockIndex = types_1.InstanceBlockIndex.ONE;\n            // Get the atlas resource uniform (sampler2D) injection targets. We default to only the\n            // Fragment shader as it's the most commonly used location for sampler2Ds\n            var injection = attribute.atlas.shaderInjection || types_1.ShaderInjectionTarget.FRAGMENT;\n            // See if we already have an injection for the given injected uniform name for an atlas resource.\n            var injections = requestedAtlasInjections.get(attribute.atlas.name);\n            if (injections) {\n                requestedAtlasInjections.set(attribute.atlas.name, [\n                    injections[0] ||\n                        injection === types_1.ShaderInjectionTarget.VERTEX ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                    injections[1] ||\n                        injection === types_1.ShaderInjectionTarget.FRAGMENT ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                ]);\n            }\n            else {\n                atlasInstanceAttributes.push(attribute);\n                requestedAtlasInjections.set(attribute.atlas.name, [\n                    injection === types_1.ShaderInjectionTarget.VERTEX ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                    injection === types_1.ShaderInjectionTarget.FRAGMENT ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                ]);\n            }\n        }\n    });\n    // Make uniforms for all of the unique atlas requests.\n    var atlasUniforms = atlasInstanceAttributes.map(function (instanceAttribute) {\n        var injections = requestedAtlasInjections.get(instanceAttribute.atlas.name);\n        var injection = (injections[0] && injections[1] && types_1.ShaderInjectionTarget.ALL) ||\n            (injections[0] && !injections[1] && types_1.ShaderInjectionTarget.VERTEX) ||\n            (!injections[0] && injections[1] && types_1.ShaderInjectionTarget.FRAGMENT);\n        return {\n            name: instanceAttribute.atlas.name,\n            shaderInjection: injection,\n            size: types_1.UniformSize.ATLAS,\n            update: function () { return layer.resource.getAtlasTexture(instanceAttribute.atlas.key); },\n        };\n    });\n    // These are the uniforms that should be present in the shader for basic operation\n    var addedUniforms = atlasUniforms.concat([\n        // This injects the projection matrix from the view camera\n        {\n            name: 'projection',\n            size: types_1.UniformSize.MATRIX4,\n            update: function () { return layer.view.viewCamera.baseCamera.projectionMatrix.elements; },\n        },\n        // This injects the model view matrix from the view camera\n        {\n            name: 'modelView',\n            size: types_1.UniformSize.MATRIX4,\n            update: function () { return layer.view.viewCamera.baseCamera.matrix.elements; },\n        },\n        // This injects the camera offset uniforms that need to be present for projecting in a more\n        // Chart centric style\n        {\n            name: 'cameraOffset',\n            size: types_1.UniformSize.THREE,\n            update: function () { return layer.view.camera.offset; },\n        },\n        // This injects the camera scaling uniforms that need to be present for projecting in a more\n        // Chart centric style\n        {\n            name: 'cameraScale',\n            size: types_1.UniformSize.THREE,\n            update: function () { return layer.view.camera.scale; },\n        },\n        // This injects the camera scaling uniforms that need to be present for projecting in a more\n        // Chart centric style\n        {\n            name: 'viewSize',\n            size: types_1.UniformSize.TWO,\n            update: function () { return [layer.view.viewBounds.width, layer.view.viewBounds.height]; },\n        },\n        // This injects the current layer's pixel ratio so pixel ratio dependent items can react to it\n        // Things like gl_PointSize will need this metric if not working in clip space\n        {\n            name: 'pixelRatio',\n            size: types_1.UniformSize.ONE,\n            update: function () { return [layer.view.pixelRatio]; },\n        },\n    ]);\n    // Seek an empty block within the layer provided uniforms so we can fill a hole potentially\n    // With the _active attribute.\n    var fillBlock = findEmptyBlock(shaderIO.instanceAttributes);\n    // This is injected so the system can control when an instance should not be rendered.\n    // This allows for holes to be in the buffer without having to correct them immediately\n    var addedInstanceAttributes = [{\n            block: fillBlock[0],\n            blockIndex: fillBlock[1],\n            name: '_active',\n            size: types_1.InstanceAttributeSize.ONE,\n            update: function (o) { return [o.active ? 1 : 0]; },\n        }];\n    // If the layer is designed for single picking, then we add a Uniform that controls\n    // When picking is enabled. We also add in an instance attribute that defines the color used for\n    // Representing an instance\n    if (layer.picking.type === types_1.PickType.SINGLE) {\n        addedUniforms.push({\n            name: 'pickingActive',\n            shaderInjection: types_1.ShaderInjectionTarget.ALL,\n            size: types_1.UniformSize.ONE,\n            update: function () { return [layer.picking.currentPickMode === types_1.PickType.SINGLE ? 1.0 : 0.0]; },\n        });\n        // Find a compltely empty block within all instance attributes provided and injected\n        var emptyFillBlock = findEmpty4Block(shaderIO.instanceAttributes\n            .concat(addedInstanceAttributes));\n        addedInstanceAttributes.push({\n            block: emptyFillBlock,\n            blockIndex: types_1.InstanceBlockIndex.ONE,\n            name: '_pickingColor',\n            size: types_1.InstanceAttributeSize.FOUR,\n            update: function (o) {\n                // We start from white and move down so the colors are more visible\n                // For debugging\n                var color = 0xFFFFFF - o.uid;\n                // Do bit maths do get float components out of the int color\n                return [\n                    (color >> 16) / 255.0,\n                    ((color & 0x00FF00) >> 8) / 255.0,\n                    (color & 0x0000FF) / 255.0,\n                    1,\n                ];\n            },\n        });\n    }\n    // Set the active attribute to the layer for quick reference\n    layer.activeAttribute = addedInstanceAttributes[0];\n    // These are the additional Vertex Attributes injected into the shader IO stream\n    var addedVertexAttributes = [\n        // We add an inherent instance attribute to our vertices so they can determine the instancing\n        // Data to retrieve.\n        {\n            name: 'instance',\n            size: types_1.VertexAttributeSize.ONE,\n            // We no op this as our geomtry generating routine will establish the values needed here\n            update: function () { return [0]; },\n        },\n    ];\n    // Aggregate all of the injected shaderIO with the layer's shaderIO\n    var vertexAttributes = addedVertexAttributes\n        .concat(shaderIO.vertexAttributes)\n        .map(toVertexAttributeInternal);\n    var uniforms = addedUniforms\n        .concat(shaderIO.uniforms)\n        .map(toUniformInternal);\n    var instanceAttributes = addedInstanceAttributes\n        .concat(shaderIO.instanceAttributes)\n        .sort(sortByResourceAttributes);\n    return {\n        instanceAttributes: instanceAttributes,\n        uniforms: uniforms,\n        vertexAttributes: vertexAttributes,\n    };\n}\nexports.injectShaderIO = injectShaderIO;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar types_1 = require(\"../types\");\nvar UNIFORM_SIZE_TO_MATERIAL_TYPE = (_a = {},\n    _a[types_1.UniformSize.ONE] = 'f',\n    _a[types_1.UniformSize.TWO] = 'v2',\n    _a[types_1.UniformSize.THREE] = 'v3',\n    _a[types_1.UniformSize.FOUR] = 'v4',\n    _a[types_1.UniformSize.MATRIX3] = 'Matrix3fv',\n    _a[types_1.UniformSize.MATRIX4] = 'Matrix4fv',\n    _a);\nvar DEFAULT_UNIFORM_VALUE = (_b = {},\n    _b[types_1.UniformSize.ONE] = [0],\n    _b[types_1.UniformSize.TWO] = [0, 0],\n    _b[types_1.UniformSize.THREE] = [0, 0, 0],\n    _b[types_1.UniformSize.FOUR] = [0, 0, 0, 0],\n    _b[types_1.UniformSize.MATRIX3] = [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    _b[types_1.UniformSize.MATRIX4] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    _b);\nfunction toMaterialUniform(uniform) {\n    return {\n        type: UNIFORM_SIZE_TO_MATERIAL_TYPE[uniform.size],\n        value: DEFAULT_UNIFORM_VALUE[uniform.size],\n    };\n}\nfunction generateLayerMaterial(layer, vs, fs, layerUniforms, instancingUniforms) {\n    // We now need to establish the material for the layer\n    var materialParams = layer.getMaterialOptions();\n    materialParams.vertexShader = vs;\n    materialParams.fragmentShader = fs;\n    // We must convert all of the uniforms to actual Three material initialization uniforms\n    materialParams.uniforms = {};\n    // Convert our non-instancing uniforms to our material uniforms\n    for (var i = 0, end = layerUniforms.length; i < end; ++i) {\n        var uniform = layerUniforms[i];\n        var materialUniform = toMaterialUniform(uniform);\n        materialParams.uniforms[uniform.name] = materialUniform;\n    }\n    // Add in the generated instancing uniforms\n    for (var i = 0, end = instancingUniforms.length; i < end; ++i) {\n        var generatedUniform = instancingUniforms[i];\n        materialParams.uniforms[generatedUniform.name] = {\n            type: generatedUniform.type,\n            value: generatedUniform.value,\n        };\n    }\n    return new Three.RawShaderMaterial(materialParams);\n}\nexports.generateLayerMaterial = generateLayerMaterial;\nvar _a, _b;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nfunction isNumberCluster(val) {\n    return !Array.isArray(val[0]);\n}\nfunction generateLayerGeometry(maxInstancesPerBuffer, vertexAttributes, vertexCount) {\n    // Make the new buffers to be updated\n    var vertexBuffers = [];\n    for (var i = 0, end = vertexAttributes.length; i < end; ++i) {\n        var attribute_1 = vertexAttributes[i];\n        vertexBuffers.push(new Float32Array((attribute_1.size) * vertexCount * maxInstancesPerBuffer));\n    }\n    // Let's now fill in the baseline geometry with the instances we will be generating\n    // First we ask the layer for a single instance's buffer setup\n    var endk = vertexAttributes.length;\n    var buffer;\n    var attribute;\n    var value;\n    var formatError;\n    for (var i = 0, end = vertexCount; i < end; ++i) {\n        for (var k = 0; k < endk; ++k) {\n            attribute = vertexAttributes[k];\n            buffer = vertexBuffers[k];\n            value = attribute.update(i);\n            if (isNumberCluster(value)) {\n                for (var j = i * attribute.size, endj = j + attribute.size, index = 0; j < endj; ++j, ++index) {\n                    buffer[j] = value[index];\n                }\n            }\n            else {\n                formatError = true;\n            }\n        }\n    }\n    if (formatError) {\n        console.warn('A vertex buffer updating method should not use arrays of arrays of numbers.');\n    }\n    // After getting the geometry for a single instance, we can now copy paste\n    // For subsequent instances using very fast FLoat32 methods\n    for (var i = 0, end = vertexAttributes.length; i < end; ++i) {\n        var attribute_2 = vertexAttributes[i];\n        var instanceSize = (attribute_2.size) * vertexCount;\n        // Copy the first buffer set into the rest of the buffer\n        for (var k = 1, endk_1 = maxInstancesPerBuffer; k < endk_1; ++k) {\n            vertexBuffers[i].copyWithin(instanceSize * k, 0, instanceSize);\n        }\n    }\n    // Lastly, we make the instance attribute reflect correctly so each instance\n    // Can have varied information\n    var instancingBuffer = vertexBuffers[0];\n    for (var i = 0, end = maxInstancesPerBuffer; i < end; ++i) {\n        var instanceStartIndex = i * vertexCount;\n        for (var k = 0; k < vertexCount; ++k) {\n            instancingBuffer[k + instanceStartIndex] = i;\n        }\n    }\n    // Now we can generate the attributes and apply them to a geometry object\n    var geometry = new Three.BufferGeometry();\n    for (var i = 0, end = vertexAttributes.length; i < end; ++i) {\n        var attribute_3 = vertexAttributes[i];\n        var materialAttribute = new Three.BufferAttribute(vertexBuffers[i], attribute_3.size);\n        attribute_3.materialAttribute = materialAttribute;\n        geometry.addAttribute(attribute_3.name, materialAttribute);\n    }\n    return geometry;\n}\nexports.generateLayerGeometry = generateLayerGeometry;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\nvar DataBounds = /** @class */ (function (_super) {\n    __extends(DataBounds, _super);\n    function DataBounds() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DataBounds.emptyBounds = function () {\n        return new DataBounds({\n            height: 0,\n            width: 0,\n            x: 0,\n            y: 0,\n        });\n    };\n    return DataBounds;\n}(bounds_1.Bounds));\nexports.DataBounds = DataBounds;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar chart_camera_1 = require(\"../util/chart-camera\");\nvar view_camera_1 = require(\"../util/view-camera\");\nvar scene_1 = require(\"./scene\");\nvar view_1 = require(\"./view\");\n/**\n * This generates all of the cameras/views/scenes necessary for default viewing of elements.\n *\n * These defaults are required to ensure the following:\n *\n * - Orthographic view\n * - top left corner of the canvas is 0,0\n * - y axis is +y downward\n * - entire canvas is the viewport.\n */\nfunction generateDefaultScene(context) {\n    // Generate a default view camera that is\n    // - Orthographic\n    // - (0, 0) is the top left of the canvas\n    // - the y axis is +y going downward\n    var height = context.canvas.height;\n    var width = context.canvas.width;\n    var aspectRatio = width / height;\n    var viewport = {\n        aspectRatio: aspectRatio,\n        bottom: -height / 2,\n        far: 10000000,\n        left: -width / 2,\n        near: -100,\n        right: width / 2,\n        top: height / 2,\n        viewSize: height,\n    };\n    var defaultCamera = new view_camera_1.ViewCamera();\n    defaultCamera.baseCamera = new Three.OrthographicCamera(viewport.left, viewport.right, viewport.top, viewport.bottom, viewport.near, viewport.far);\n    defaultCamera.baseCamera.scale.set(1.0, -1.0, 1.0);\n    defaultCamera.baseCamera.position.set(0.0, 0.0, -300.0);\n    defaultCamera.baseCamera.updateMatrixWorld(true);\n    defaultCamera.baseCamera.updateMatrix();\n    if (defaultCamera.baseCamera instanceof Three.OrthographicCamera) {\n        defaultCamera.baseCamera.updateProjectionMatrix();\n    }\n    // Generate a charting camera with all scales set to 1 and no offsets in any direction\n    var defaultChartCamera = new chart_camera_1.ChartCamera();\n    // This is a viewport that covers the entire context\n    var defaultViewport = {\n        bottom: 0,\n        left: 0,\n        right: 0,\n        top: 0,\n    };\n    // Make a view using our defaults\n    var defaultView = new view_1.View({\n        camera: defaultChartCamera,\n        key: view_1.View.DEFAULT_VIEW_ID,\n        viewCamera: defaultCamera,\n        viewport: defaultViewport,\n    });\n    // Make a scene with our defaults\n    var defaultScene = new scene_1.Scene({\n        key: scene_1.Scene.DEFAULT_SCENE_ID,\n        views: [],\n    });\n    // Make sure the default view is a part of the default scene\n    defaultScene.addView(defaultView);\n    return {\n        camera: defaultChartCamera,\n        scene: defaultScene,\n        view: defaultView,\n        viewCamera: defaultCamera,\n        viewport: defaultViewport,\n    };\n}\nexports.generateDefaultScene = generateDefaultScene;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar INSTANCE_UNIFORM_ATTRIBUTE_PREFIX = 'u';\nfunction makeInstanceUniformNameArray() {\n    return \"instanceData\";\n}\nexports.makeInstanceUniformNameArray = makeInstanceUniformNameArray;\nfunction makeInstanceUniformNameTree(index) {\n    return \"\" + INSTANCE_UNIFORM_ATTRIBUTE_PREFIX + index.toString(31);\n}\nexports.makeInstanceUniformNameTree = makeInstanceUniformNameTree;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.templateVars = {\n    attributeFragments: 'attributeFragments',\n    attributes: 'attributes',\n    blocksPerInstance: 'blocksPerInstance',\n    instanceBlockCount: 'instanceBlockCount',\n    instanceDataBinaryTree: 'instanceDataBinaryTree',\n    instanceDataRetrieval: 'instanceDataRetrieval',\n    instanceDestructuring: 'instanceDestructuring',\n    instanceFragments: 'instanceFragments',\n    instanceUniformDeclarations: 'instanceUniformDeclarations',\n    layerUniforms: 'layerUniforms',\n    picking: 'picking',\n    projectionMethods: 'projectionMethods',\n    shader: 'shader',\n    shaderInput: 'shaderInput',\n    vertexAttributes: 'vertexAttributes',\n};\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./label-layer\"));\n__export(require(\"./label-instance\"));\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar canvas;\nvar MAX_FONT_SIZE = 50;\nvar floor = Math.floor, max = Math.max, min = Math.min;\nvar LabelRasterizer = /** @class */ (function () {\n    function LabelRasterizer() {\n    }\n    /**\n     * This loops until our canvas context is available\n     */\n    LabelRasterizer.awaitContext = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!canvas) return [3 /*break*/, 2];\n                        this.getContext();\n                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 0];\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This renders our label to a sizeable canvas where we loop over the pixel data to determine\n     * the bounds of the label.\n     *\n     * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n     *                                 the size to be rendered to the texture to the size the label\n     *                                 should be within world space.\n     * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n     */\n    LabelRasterizer.calculateLabelSize = function (resource, sampleScale, calculateTexture) {\n        // If a max width is specified, then we must render and determine the potentially truncated text of the\n        // Label. We can do a binary search for the correct truncated label size.\n        if (calculateTexture) {\n            this.calculateTrucatedText(resource);\n        }\n        /** Get the label properties for rasterizing */\n        var label = resource.label;\n        // Get the scaling of the sample base\n        var sampleScaling = sampleScale || resource.sampleScale || 1.0;\n        // Draw our label to a canvas\n        this.drawLabel(label, resource.truncatedText, canvas, sampleScaling);\n        // Measure the contents of the canvas\n        var _a = this.measureContents(canvas), minX = _a.minX, minY = _a.minY, maxX = _a.maxX, maxY = _a.maxY;\n        // Make sure the rasterization object is initialized\n        resource.rasterization = resource.rasterization || {\n            texture: { height: 0, width: 0 },\n            world: { height: 0, width: 0 },\n        };\n        // When a forced sampling is present, it calculates that as the world space\n        if (!calculateTexture) {\n            // Update the calculated texture size.\n            resource.rasterization.world = {\n                height: maxY - minY,\n                width: maxX - minX,\n            };\n        }\n        // Otherwise we first calculate the texture rasterization for the label\n        else {\n            // Update the calculated texture size.\n            resource.rasterization.texture = {\n                height: maxY - minY,\n                width: maxX - minX,\n            };\n            resource.rasterization.canvas = this.createCroppedCanvas(resource, minY, minX);\n            this.calculateLabelSize(resource, 1.0, false);\n        }\n    };\n    /**\n     * This determines what the truncated text of the label will be. If there is no truncation\n     * then the truncated text === the label's text\n     */\n    LabelRasterizer.calculateTrucatedText = function (resource) {\n        var label = resource.label;\n        var maxWidth = label.maxWidth;\n        // If the label has no max width, then there will be no truncation\n        if (!maxWidth) {\n            resource.truncatedText = label.text;\n            return;\n        }\n        // We now do an initial rendering of the label as it will appear in world space\n        this.drawLabel(label, label.text, canvas, 1);\n        // We measure the contents of the rendered item to see if it violates the maxWidth\n        var firstTest = this.measureContents(canvas);\n        // If we're within spec, we do not need to truncate\n        if (firstTest.maxX - firstTest.minX <= maxWidth) {\n            resource.truncatedText = label.text;\n            return;\n        }\n        // At this point we need to binary search through chopping off letters to find a string\n        // That will fit within max width\n        var text = label.text;\n        var left = 0;\n        var right = text.length;\n        var cursor = floor((right - left) / 2.0);\n        var safety = 0;\n        var safetyMax = 50;\n        // Loop to perform the binary search\n        while (right > left && cursor !== 0 && safety++ < safetyMax) {\n            // Draw and measure\n            this.drawLabel(label, text.substr(0, cursor) + \"...\", canvas, 1);\n            var _a = this.measureContents(canvas), minX = _a.minX, maxX = _a.maxX;\n            // If we pass then we move left to cursor to make the test string longer\n            if (maxX - minX <= maxWidth) {\n                left = cursor;\n            }\n            // If we fail, we move right to cursor to make the test string shorter\n            else {\n                right = cursor;\n            }\n            // Get our next cursor position\n            var nextCursor = floor((right - left) / 2.0) + left;\n            // If the next cursor is the same as cursor, then we're done searching\n            if (nextCursor === cursor) {\n                break;\n            }\n            // Move our cursor\n            cursor = nextCursor;\n        }\n        // If cursor is zero, nothing passed and our truncation is just ellipses\n        if (cursor === 0) {\n            resource.truncatedText = '...';\n        }\n        // Otherwise we get the string that passes and use that as our truncated text\n        else {\n            resource.truncatedText = text.substr(0, cursor) + \"...\";\n        }\n    };\n    /**\n     * This generates a canvas that has the cropped version of the label where the label\n     * fits neatly in the canvas object.\n     */\n    LabelRasterizer.createCroppedCanvas = function (resource, top, left) {\n        var cropped = document.createElement('canvas');\n        var context = cropped.getContext('2d');\n        if (context) {\n            var texture = resource.rasterization.texture;\n            cropped.width = texture.width;\n            cropped.height = texture.height;\n            context.imageSmoothingEnabled = false;\n            // Draw just the region the label appears into the canvas\n            context.drawImage(canvas.canvas, left, top, texture.width, texture.height, 0, 0, texture.width, texture.height);\n        }\n        else {\n            console.warn('Could not create a canvas 2d context to generate a label\\'s cropped image.');\n        }\n        return cropped;\n    };\n    /**\n     * This actually renders a string to a canvas context using a label's settings\n     */\n    LabelRasterizer.drawLabel = function (label, text, canvas, sampleScaling) {\n        // Get the font size we will rasterize with\n        var fontSize = this.getLabelRasterizationFontSize(label, sampleScaling);\n        // Set the color of the label to white so we know what color to look for\n        canvas.fillStyle = 'white';\n        // Set the font to the canvas\n        canvas.font = this.makeCSSFont(label, sampleScaling);\n        // We will use the canvas measuring tool to give us a baseline for how wide\n        // The label will be. We add the font size to the width for the padding needed to ensure\n        // The entirety of the text is placed on the canvas.\n        canvas.canvas.width = canvas.measureText(label.text).width + fontSize;\n        // Make our test area the font size with one extra level of the font size\n        // For padding.\n        canvas.canvas.height = fontSize * 2.0;\n        // After adjusting the canvas dimensions we must re-set the font metrics\n        // Set the color of the label to white so we know what color to look for\n        canvas.fillStyle = 'white';\n        // Set the font to the canvas\n        canvas.font = this.makeCSSFont(label, sampleScaling);\n        // Render the text into our canvas for calculating\n        canvas.fillText(text, fontSize / 2.0, fontSize / 4.0 + fontSize);\n    };\n    /**\n     * Attempts to populate the 'canvas' context for rendering labels offscreen.\n     */\n    LabelRasterizer.getContext = function () {\n        if (!canvas) {\n            canvas = document.createElement('canvas').getContext('2d');\n        }\n        return canvas;\n    };\n    /**\n     * This retrieves the font size that will be used when rasterizing the label. This takes into\n     * account whether the label is requesting super sampling be present for the rendering.\n     */\n    LabelRasterizer.getLabelRasterizationFontSize = function (label, sampleScale) {\n        return label.fontSize * sampleScale;\n    };\n    /**\n     * Generates the CSS font string based on the label's values\n     */\n    LabelRasterizer.makeCSSFont = function (label, sampleScale) {\n        return label.fontWeight + \" \" + this.getLabelRasterizationFontSize(label, sampleScale) + \"px \" + label.fontFamily;\n    };\n    /**\n     * This measures the contents of what is inside the canvas assumming the rendered values are only white\n     */\n    LabelRasterizer.measureContents = function (canvas) {\n        var _a = canvas.canvas, width = _a.width, height = _a.height;\n        var imageData = canvas.getImageData(0, 0, width, height).data;\n        var r;\n        var minY = Number.MAX_SAFE_INTEGER;\n        var minX = Number.MAX_SAFE_INTEGER;\n        var maxX = Number.MIN_SAFE_INTEGER;\n        var maxY = Number.MIN_SAFE_INTEGER;\n        for (var i = 0; i < width; ++i) {\n            for (var k = 0; k < height; ++k) {\n                var redIndex = k * (width * 4) + i * 4;\n                r = imageData[redIndex];\n                if (r > 0.0) {\n                    minY = min(minY, k);\n                    minX = min(minX, i);\n                    maxX = max(maxX, i);\n                    maxY = max(maxY, k);\n                }\n            }\n        }\n        // The identified pixel needs to be encased and not a direct target\n        minY -= 1;\n        maxY += 2;\n        maxX += 2;\n        minX -= 1;\n        minY = max(minY, 0);\n        minX = max(minX, 0);\n        return { minX: minX, minY: minY, maxX: maxX, maxY: maxY };\n    };\n    /**\n     * Performs the rendering of the label\n     */\n    LabelRasterizer.render = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // Make sure our canvas object is ready for rendering\n                    return [4 /*yield*/, this.awaitContext()];\n                    case 1:\n                        // Make sure our canvas object is ready for rendering\n                        _a.sent();\n                        // Validate the label's input\n                        if (resource.label.fontSize > MAX_FONT_SIZE) {\n                            console.warn('Labels only support font sizes up to 50');\n                            return [2 /*return*/, resource];\n                        }\n                        // Calculate all of the label metrics and generate a canvas on the label that can\n                        // Be rendered to the canvas.\n                        this.calculateLabelSize(resource, resource.sampleScale, true);\n                        return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    /**\n     * Performs the rendering of the label\n     */\n    LabelRasterizer.renderSync = function (resource) {\n        // Ensure our offscreen canvas is prepped\n        this.getContext();\n        if (!canvas) {\n            console.warn('Can not render a label synchronously without the canvas context being ready.');\n            return resource;\n        }\n        // Validate the label's input\n        if (resource.label.fontSize > MAX_FONT_SIZE) {\n            console.warn('Labels only support font sizes up to 50');\n            return resource;\n        }\n        // Calculate all of the label metrics and generate a canvas on the label that can\n        // Be rendered to the canvas.\n        this.calculateLabelSize(resource, resource.sampleScale, true);\n        return resource;\n    };\n    return LabelRasterizer;\n}());\nexports.LabelRasterizer = LabelRasterizer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_atlas_resource_1 = require(\"./base-atlas-resource\");\nvar ImageAtlasResource = /** @class */ (function (_super) {\n    __extends(ImageAtlasResource, _super);\n    function ImageAtlasResource(image) {\n        var _this = _super.call(this) || this;\n        _this.image = image;\n        return _this;\n    }\n    return ImageAtlasResource;\n}(base_atlas_resource_1.BaseAtlasResource));\nexports.ImageAtlasResource = ImageAtlasResource;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// When ratserized to the image, this determines the size of the square rendered to the atlas.\nvar COLOR_RASTERIZATION_SIZE = 2;\n/**\n * Static class for rasterizing a color to a canvas object\n */\nvar ColorRasterizer = /** @class */ (function () {\n    function ColorRasterizer() {\n    }\n    /**\n     * This loops until our canvas context is available\n     */\n    ColorRasterizer.awaitContext = function (canvas) {\n        return __awaiter(this, void 0, void 0, function () {\n            var c, limit;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        c = canvas.getContext('2d'), limit = 0;\n                        _a.label = 1;\n                    case 1:\n                        if (!(!Boolean(c) && limit < 100)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        c = canvas.getContext('2d'), ++limit;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Generates the CSS string version of the color\n     */\n    ColorRasterizer.makeCSS = function (color) {\n        return \"rgba(\" + Math.floor(color.r * 256) + \", \" + Math.floor(color.g * 256) + \", \" + Math.floor(color.b * 256) + \", \" + color.opacity + \")\";\n    };\n    ColorRasterizer.render = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var canvas, context;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        canvas = document.createElement('canvas');\n                        context = canvas.getContext('2d');\n                        return [4 /*yield*/, this.awaitContext(canvas)];\n                    case 1:\n                        _a.sent();\n                        if (context) {\n                            canvas.width = COLOR_RASTERIZATION_SIZE;\n                            canvas.height = COLOR_RASTERIZATION_SIZE;\n                            context.imageSmoothingEnabled = false;\n                            context.fillStyle = this.makeCSS(resource.color);\n                            // Draw the color to the fill space\n                            context.fillRect(0, 0, COLOR_RASTERIZATION_SIZE, COLOR_RASTERIZATION_SIZE);\n                            // Update the resource with the rasterization\n                            resource.rasterization.canvas = canvas;\n                        }\n                        else {\n                            console.warn('Could not create a canvas 2d context to generate a color for rasterization.');\n                        }\n                        return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    return ColorRasterizer;\n}());\nexports.ColorRasterizer = ColorRasterizer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_atlas_resource_1 = require(\"./base-atlas-resource\");\nvar ColorAtlasResource = /** @class */ (function (_super) {\n    __extends(ColorAtlasResource, _super);\n    function ColorAtlasResource(color) {\n        var _this = _super.call(this) || this;\n        _this.color = color;\n        return _this;\n    }\n    return ColorAtlasResource;\n}(base_atlas_resource_1.BaseAtlasResource));\nexports.ColorAtlasResource = ColorAtlasResource;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Defines a texture that is located on an atlas\n */\nvar SubTexture = /** @class */ (function () {\n    function SubTexture() {\n        /** Stores the aspect ratio of the image for quick reference */\n        this.aspectRatio = 1.0;\n        /** The id of the atlas this texture is located on */\n        this.atlasReferenceID = '';\n        /** This is the actual texture of the atlas this resource is located on */\n        this.atlasTexture = null;\n        /** This is the top left UV coordinate of the sub texture on the atlas */\n        this.atlasTL = { x: 0, y: 0 };\n        /** This is the top right UV coordinate of the sub texture on the atlas */\n        this.atlasTR = { x: 0, y: 0 };\n        /** This is the bottom left UV coordinate of the sub texture on the atlas */\n        this.atlasBL = { x: 0, y: 0 };\n        /** This is the bottom right UV coordinate of the sub texture on the atlas */\n        this.atlasBR = { x: 0, y: 0 };\n        /** This is the normalized width of the sub texture on the atlas */\n        this.widthOnAtlas = 0;\n        /** This is the normalized height of the sub texture on the atlas */\n        this.heightOnAtlas = 0;\n        /** This flag is set to false when the underlying texture is no longer valid */\n        this.isValid = false;\n        /** Width in pixels of the image on the atlas */\n        this.pixelWidth = 0;\n        /** Height in pixels of the image on the atlas */\n        this.pixelHeight = 0;\n    }\n    return SubTexture;\n}());\nexports.SubTexture = SubTexture;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar identify_by_key_1 = require(\"../../util/identify-by-key\");\nvar pack_node_1 = require(\"./pack-node\");\nvar sub_texture_1 = require(\"./sub-texture\");\n/**\n * These are valid atlas sizes available. We force a power of 2 to be utilized.\n * We do not allow crazy large sizes as browsers have very real caps on resources.\n * This helps implementations be a little smarter about what they are using. Future\n * versions may increase this number as GPUs improve and standards allow greater\n * flexibility.\n */\nvar AtlasSize;\n(function (AtlasSize) {\n    AtlasSize[AtlasSize[\"_2\"] = 2] = \"_2\";\n    AtlasSize[AtlasSize[\"_4\"] = 4] = \"_4\";\n    AtlasSize[AtlasSize[\"_8\"] = 8] = \"_8\";\n    AtlasSize[AtlasSize[\"_16\"] = 16] = \"_16\";\n    AtlasSize[AtlasSize[\"_32\"] = 32] = \"_32\";\n    AtlasSize[AtlasSize[\"_64\"] = 64] = \"_64\";\n    AtlasSize[AtlasSize[\"_128\"] = 128] = \"_128\";\n    AtlasSize[AtlasSize[\"_256\"] = 256] = \"_256\";\n    AtlasSize[AtlasSize[\"_512\"] = 512] = \"_512\";\n    AtlasSize[AtlasSize[\"_1024\"] = 1024] = \"_1024\";\n    AtlasSize[AtlasSize[\"_2048\"] = 2048] = \"_2048\";\n    AtlasSize[AtlasSize[\"_4096\"] = 4096] = \"_4096\";\n})(AtlasSize = exports.AtlasSize || (exports.AtlasSize = {}));\n/**\n * This represents a single Texture on the gpu that is composed of several smaller textures\n * as a 'look up'.\n */\nvar Atlas = /** @class */ (function (_super) {\n    __extends(Atlas, _super);\n    function Atlas(options) {\n        var _this = _super.call(this, options) || this;\n        /**\n         * This is all of the resources associated with this atlas. The boolean flag indicates if the resource\n         * is flagged for removal. When set to false, the resource is no longer valid and can be removed from\n         * the atlas at any given moment.\n         */\n        _this.validResources = new Map();\n        var canvas = document.createElement('canvas');\n        _this.width = canvas.width = options.width;\n        _this.height = canvas.height = options.height;\n        _this.textureSettings = options.textureSettings;\n        // Set up the packing for this atlas\n        _this.packing = new pack_node_1.PackNode(0, 0, options.width, options.height);\n        // Make sure the texture is started and updated\n        _this.updateTexture(canvas);\n        return _this;\n    }\n    /**\n     * This invalidates the SubTexture of an atlas resource.\n     */\n    Atlas.prototype.invalidateResource = function (resource) {\n        var zero = { x: 0, y: 0 };\n        resource.texture.aspectRatio = 1;\n        resource.texture.atlasBL = zero;\n        resource.texture.atlasBR = zero;\n        resource.texture.atlasTL = zero;\n        resource.texture.atlasTR = zero;\n        resource.texture.atlasReferenceID = '';\n        resource.texture.pixelWidth = 0;\n        resource.texture.pixelHeight = 0;\n        resource.texture.isValid = false;\n    };\n    /**\n     * Sets the parent manager of this atlas\n     */\n    Atlas.prototype.setManager = function (manager) {\n        this.manager = manager;\n    };\n    /**\n     * Adds a resource to this atlas AND ensures the resource is flagged valid for use.\n     *\n     * @return {boolean} True if the resource successfully registered\n     */\n    Atlas.prototype.registerResource = function (resource) {\n        if (this.validResources.get(resource) === undefined) {\n            if (!resource.texture || !resource.texture.isValid) {\n                if (!resource.texture) {\n                    resource.texture = new sub_texture_1.SubTexture();\n                }\n                resource.texture.isValid = true;\n                this.validResources.set(resource, true);\n                return true;\n            }\n            else {\n                console.warn('Atlas Error:', this.id, 'Attempted to add a resource to an Atlas that is already a valid resource on another atlas.', 'Consider Creating a new resource to be loaded into this particular atlas.', 'Resource:', resource);\n            }\n        }\n        else {\n            console.warn('Atlas Error:', this.id, 'A resource was trying to be added to the atlas that has already been added before.', 'Consider creating a new resource to indicate what you want loaded to the atlas', 'Resource:', resource);\n        }\n        return false;\n    };\n    /**\n     * This flags a resource from removal from an atlas.\n     *\n     * NOTE: This does not immediately clear the resource fromt he atlas, nor does it even guarantee\n     * the resource will be cleared from the atlas for a while. It merely suggests the resource be removed\n     * and makes the SubTexture invalid. It could be a long while before the atlas gets regnerated and repacked\n     * to actually reflect the resource not existing on the atlas.\n     */\n    Atlas.prototype.removeResource = function (resource) {\n        if (this.validResources.get(resource)) {\n            this.validResources.set(resource, false);\n            this.invalidateResource(resource);\n        }\n        else {\n            console.warn('Atlas Error:', this.id, 'Attempted to remove a resource that does not exist on this atlas.', 'or the resource was already considered invalidated on this atlas.', 'Resource:', resource);\n        }\n    };\n    /**\n     * TODO:\n     * This performs the currently best known way to update a texture.\n     *\n     * This is the current best attempt at updating the atlas which is junk as it destroys the old texture\n     * And makes a new one. We REALLY should be just subTexture2D updating the texture, but Three makes that really\n     * Difficult\n     */\n    Atlas.prototype.updateTexture = function (canvas) {\n        if (this.texture) {\n            var redoneCanvas = this.texture.image;\n            this.texture.dispose();\n            this.texture = new Three.Texture(redoneCanvas);\n        }\n        else {\n            this.texture = new Three.Texture(canvas);\n        }\n        // Apply any relevant options to the texture desired to be set\n        this.texture.generateMipmaps = true;\n        this.texture.premultiplyAlpha = true;\n        this.textureSettings && Object.assign(this.texture, this.textureSettings);\n        this.texture.needsUpdate = true;\n    };\n    /**\n     * This frees up all the resources down to the GPU related to this atlas. It also\n     * loops through every resource and invalidates the texturing information within\n     * them so subsequent accidental renders will appear as a single color rather than\n     * an artifacted element.\n     */\n    Atlas.prototype.destroy = function () {\n        var _this = this;\n        this.texture.dispose();\n        this.validResources.forEach(function (isValid, resource) {\n            _this.invalidateResource(resource);\n        });\n    };\n    return Atlas;\n}(identify_by_key_1.IdentifyByKey));\nexports.Atlas = Atlas;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./image-layer\"));\n__export(require(\"./image-instance\"));\n","/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',\n  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',\n  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',\n  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',\n  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',\n  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',\n  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',\n  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',\n  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',\n  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',\n  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // Internet Explorer and Edge do not support colors.\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n    return false;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar browser = require(\"bowser\");\nvar three_1 = require(\"three\");\nvar debug = require('debug')('CommunicationsView:Mouse');\n/** Used to adjust the base whee delta for IE browsers */\nvar IE_ADJUSTMENT = 1 / 30;\n/** Used to adjust the rates for IE 11 */\nvar OLD_IE_ADJUSTMENT = -0.25;\n// This determines how large the delta can grow to in firefox\nvar MAX_FIREFOX_WHEELDELTA = 100;\n/**\n * Create a low pass filter memory bank so we can slow down rapid accelerations and let normal slower accelerations pass\n * Common use case for this is the discrepancy in firefox from mousewheels to trackpad scroll speeds\n */\nvar lowPassY = [0, 0, 0, 0];\n// These coefficients represent the coefficients of a FIR filter.\n// This FIR filter uses the lowPassY as the memory for the filter and is created for\n// The reasons specified for the lowPassY memory. To edit the coefficients, you simply\n// Ensure the coefficients added together === 1.0. If they do not, you may get an unstable\n// Result that goes to infinity rather quickly. Changing the distribution of these coefficients\n// Alters the rate at which the delta can approach MAX_FIREFOX_WHEELDELTA. Explaining exactly\n// How it affects the rate requires an understanding of FIR filters, so unless this is already\n// Known knowledge, it would be faster to just tweak the coefficients until a desired effect is\n// Attained.\nvar LOW_PASS_U0 = 0.1;\nvar LOW_PASS_U1 = 0.2;\nvar LOW_PASS_U2 = 0.2;\nvar LOW_PASS_U3 = 0.5;\nfunction normalizeFirefoxWheel(e) {\n    var wheel = e;\n    var deltaX = 0;\n    var deltaY = 0;\n    // Reset the filter if the direction changes to prevent lag in directional change\n    if (Math.sign(lowPassY[0]) !== Math.sign(deltaY)) {\n        lowPassY.splice(0, lowPassY.length, 0, 0, 0, 0);\n    }\n    deltaX = wheel.deltaX * MAX_FIREFOX_WHEELDELTA;\n    // Calculate the next value output from the FIR filter\n    deltaY = (wheel.deltaY * MAX_FIREFOX_WHEELDELTA) * LOW_PASS_U0 + lowPassY[0] * LOW_PASS_U1 + lowPassY[1] * LOW_PASS_U2 + lowPassY[2] * LOW_PASS_U3;\n    // Store the value of the filter in the FIR memory bank\n    lowPassY.unshift(deltaY);\n    // Keep our FIR memory clean and only the size of the number of coefficients\n    lowPassY.pop();\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeChromeWheel(e) {\n    var wheel = e;\n    return new three_1.Vector2(wheel.deltaX, -wheel.deltaY);\n}\nfunction normalizeIE11Wheel(e) {\n    var wheel = e;\n    var deltaX = wheel.deltaX;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    var deltaY = wheel.deltaY;\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = (wheel.wheelDelta || -wheel.detail) * OLD_IE_ADJUSTMENT;\n        }\n    }\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeIE12Wheel(e) {\n    var wheel = e;\n    var deltaX = wheel.deltaX, deltaY = wheel.deltaY;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = wheel.wheelDelta || -wheel.detail;\n        }\n    }\n    var v = new three_1.Vector2(deltaX, -deltaY);\n    v.multiplyScalar(0.25);\n    return v;\n}\n// Determine this browsers version of wheel normalization and apply it\nvar normalizeWheel;\nexports.normalizeWheel = normalizeWheel;\nif (browser.firefox) {\n    debug('Using mouse wheel for firefox');\n    exports.normalizeWheel = normalizeWheel = normalizeFirefoxWheel;\n}\nelse if (browser.msie && +browser.version >= 11) {\n    debug('Using mouse wheel for IE 11');\n    exports.normalizeWheel = normalizeWheel = normalizeIE11Wheel;\n}\nelse if (browser.msedge) {\n    debug('Using mouse wheel for MS EDGE');\n    exports.normalizeWheel = normalizeWheel = normalizeIE12Wheel;\n}\nelse {\n    debug('Using mouse wheel for Chrome');\n    exports.normalizeWheel = normalizeWheel = normalizeChromeWheel;\n}\n/**\n * Analyzes a MouseEvent and calculates the mouse coordinates (relative to the element).\n */\nfunction eventElementPosition(e, relative) {\n    var mouseX = 0, mouseY = 0, eventX = 0, eventY = 0, object = relative || (e.nativeEvent && e.nativeEvent.target) || e.target;\n    // Get mouse position on document crossbrowser\n    if (!e) {\n        e = window.event;\n    }\n    if (e.pageX || e.pageY) {\n        mouseX = e.pageX;\n        mouseY = e.pageY;\n    }\n    else if (e.clientX || e.clientY) {\n        mouseX = e.clientX + document.body.scrollLeft\n            + document.documentElement.scrollLeft;\n        mouseY = e.clientY + document.body.scrollTop\n            + document.documentElement.scrollTop;\n    }\n    // Get parent element position in document\n    if (object.offsetParent) {\n        do {\n            eventX += object.offsetLeft;\n            eventY += object.offsetTop;\n            object = object.offsetParent;\n        } while (object);\n    }\n    // Mouse position minus elm position is mouseposition relative to element:\n    return { x: mouseX - eventX, y: mouseY - eventY };\n}\nexports.eventElementPosition = eventElementPosition;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getProgramInfo(gl, program) {\n    var result = {\n        attributeCount: 0,\n        attributes: new Array(),\n        uniformCount: 0,\n        uniforms: new Array(),\n    }, activeUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS), activeAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    // Taken from the WebGl spec:\n    // Http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14\n    var enums = {\n        0x8B50: 'FLOAT_VEC2',\n        0x8B51: 'FLOAT_VEC3',\n        0x8B52: 'FLOAT_VEC4',\n        0x8B53: 'INT_VEC2',\n        0x8B54: 'INT_VEC3',\n        0x8B55: 'INT_VEC4',\n        0x8B56: 'BOOL',\n        0x8B57: 'BOOL_VEC2',\n        0x8B58: 'BOOL_VEC3',\n        0x8B59: 'BOOL_VEC4',\n        0x8B5A: 'FLOAT_MAT2',\n        0x8B5B: 'FLOAT_MAT3',\n        0x8B5C: 'FLOAT_MAT4',\n        0x8B5E: 'SAMPLER_2D',\n        0x8B60: 'SAMPLER_CUBE',\n        0x1400: 'BYTE',\n        0x1401: 'UNSIGNED_BYTE',\n        0x1402: 'SHORT',\n        0x1403: 'UNSIGNED_SHORT',\n        0x1404: 'INT',\n        0x1405: 'UNSIGNED_INT',\n        0x1406: 'FLOAT',\n    };\n    var blocks = {\n        0x8B50: 1,\n        0x8B51: 1,\n        0x8B52: 1,\n        0x8B53: 1,\n        0x8B54: 1,\n        0x8B55: 1,\n        0x8B56: 1,\n        0x8B57: 1,\n        0x8B58: 1,\n        0x8B59: 1,\n        0x8B5A: 1,\n        0x8B5B: 3,\n        0x8B5C: 4,\n        0x8B5E: 1,\n        0x8B60: 1,\n        0x1400: 1,\n        0x1401: 1,\n        0x1402: 1,\n        0x1403: 1,\n        0x1404: 1,\n        0x1405: 1,\n        0x1406: 1,\n    };\n    // Loop through active uniforms\n    for (var i = 0; i < activeUniforms; ++i) {\n        var uniform = gl.getActiveUniform(program, i);\n        uniform.typeName = enums[uniform.type];\n        result.uniforms.push(uniform);\n        result.uniformCount += uniform.size;\n        uniform.size = uniform.size * blocks[uniform.type];\n    }\n    // Loop through active attributes\n    for (var i = 0; i < activeAttributes; i++) {\n        var attribute = gl.getActiveAttrib(program, i);\n        attribute.typeName = enums[attribute.type];\n        result.attributes.push(attribute);\n        result.attributeCount += attribute.size;\n    }\n    return result;\n}\nexports.getProgramInfo = getProgramInfo;\nvar WebGLStat = /** @class */ (function () {\n    function WebGLStat() {\n    }\n    WebGLStat.MAX_VERTEX_UNIFORMS = 0;\n    WebGLStat.MAX_FRAGMENT_UNIFORMS = 0;\n    WebGLStat.MAX_ATTRIBUTES = 0;\n    WebGLStat.WEBGL_SUPPORTED = false;\n    WebGLStat.MAX_TEXTURE_SIZE = 0;\n    return WebGLStat;\n}());\nexports.WebGLStat = WebGLStat;\nfunction initStats() {\n    // Let's perform some immediate operations to do some gl querying for useful information\n    function getAContext() {\n        try {\n            var canvas = document.createElement('canvas');\n            return window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    // Attempt to retrieve a context for webgl\n    var gl = getAContext();\n    // If the context exists, then we know gl is supported and we can fill in some metrics\n    if (gl) {\n        WebGLStat.WEBGL_SUPPORTED = true;\n        WebGLStat.MAX_VERTEX_UNIFORMS = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n        WebGLStat.MAX_FRAGMENT_UNIFORMS = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n        WebGLStat.MAX_ATTRIBUTES = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n        WebGLStat.MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    }\n}\ninitStats();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar sqrt = Math.sqrt;\nfunction add2(left, right) {\n    return [\n        left[0] + right[0],\n        left[1] + right[1],\n    ];\n}\nexports.add2 = add2;\nfunction scale2(left, scale) {\n    return [\n        left[0] * scale,\n        left[1] * scale,\n    ];\n}\nexports.scale2 = scale2;\nfunction subtract2(left, right) {\n    return [\n        left[0] - right[0],\n        left[1] - right[1],\n    ];\n}\nexports.subtract2 = subtract2;\nfunction multiply2(left, right) {\n    return [\n        left[0] * right[0],\n        left[1] * right[1],\n    ];\n}\nexports.multiply2 = multiply2;\nfunction dot2(left, right) {\n    return (left[0] * right[0] +\n        left[1] * right[1]);\n}\nexports.dot2 = dot2;\nfunction linear2(start, end, t) {\n    return scale2(add2(subtract2(end, start), start), t);\n}\nexports.linear2 = linear2;\nfunction length2(start) {\n    return sqrt(dot2(start, start));\n}\nexports.length2 = length2;\nfunction add3(left, right) {\n    return [\n        left[0] + right[0],\n        left[1] + right[1],\n        left[2] + right[2],\n    ];\n}\nexports.add3 = add3;\nfunction scale3(left, scale) {\n    return [\n        left[0] * scale,\n        left[1] * scale,\n        left[2] * scale,\n    ];\n}\nexports.scale3 = scale3;\nfunction subtract3(left, right) {\n    return [\n        left[0] - right[0],\n        left[1] - right[1],\n        left[2] - right[2],\n    ];\n}\nexports.subtract3 = subtract3;\nfunction multiply3(left, right) {\n    return [\n        left[0] * right[0],\n        left[1] * right[1],\n        left[2] * right[2],\n    ];\n}\nexports.multiply3 = multiply3;\nfunction linear3(start, end, t) {\n    return scale3(add3(subtract3(end, start), start), t);\n}\nexports.linear3 = linear3;\nfunction length3(start) {\n    return sqrt(dot3(start, start));\n}\nexports.length3 = length3;\nfunction dot3(left, right) {\n    return (left[0] * right[0] +\n        left[1] * right[1] +\n        left[2] * right[2]);\n}\nexports.dot3 = dot3;\nfunction add4(left, right) {\n    return [\n        left[0] + right[0],\n        left[1] + right[1],\n        left[2] + right[2],\n        left[3] + right[3],\n    ];\n}\nexports.add4 = add4;\nfunction scale4(left, scale) {\n    return [\n        left[0] * scale,\n        left[1] * scale,\n        left[2] * scale,\n        left[3] * scale,\n    ];\n}\nexports.scale4 = scale4;\nfunction subtract4(left, right) {\n    return [\n        left[0] - right[0],\n        left[1] - right[1],\n        left[2] - right[2],\n        left[3] - right[3],\n    ];\n}\nexports.subtract4 = subtract4;\nfunction multiply4(left, right) {\n    return [\n        left[0] * right[0],\n        left[1] * right[1],\n        left[2] * right[2],\n        left[3] * right[3],\n    ];\n}\nexports.multiply4 = multiply4;\nfunction dot4(left, right) {\n    return (left[0] * right[0] +\n        left[1] * right[1] +\n        left[2] * right[2] +\n        left[3] * right[3]);\n}\nexports.dot4 = dot4;\nfunction linear4(start, end, t) {\n    return scale4(add4(subtract4(end, start), start), t);\n}\nexports.linear4 = linear4;\nfunction length4(start) {\n    return sqrt(dot4(start, start));\n}\nexports.length4 = length4;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ObservableManagerMode;\n(function (ObservableManagerMode) {\n    ObservableManagerMode[ObservableManagerMode[\"GATHER_OBSERVABLES\"] = 0] = \"GATHER_OBSERVABLES\";\n    ObservableManagerMode[ObservableManagerMode[\"BROADCAST\"] = 1] = \"BROADCAST\";\n})(ObservableManagerMode = exports.ObservableManagerMode || (exports.ObservableManagerMode = {}));\nvar ObservableManager = /** @class */ (function () {\n    function ObservableManager() {\n    }\n    ObservableManager.mode = ObservableManagerMode.BROADCAST;\n    return ObservableManager;\n}());\nexports.ObservableManager = ObservableManager;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar label_atlas_resource_1 = require(\"./label-atlas-resource\");\nfunction toInstanceIOValue(texture) {\n    // If the texture is not defined we just output an empty reference\n    if (!texture) {\n        return [0, 0, 0, 0];\n    }\n    // Otherwise, we return the atlas information of the texture\n    return [\n        texture.atlasTL.x,\n        texture.atlasTL.y,\n        texture.atlasBR.x,\n        texture.atlasBR.y,\n    ];\n}\n/**\n * This class is responsible for tracking resources requested to be placed on an Atlas.\n * This makes sure the resource is uploaded and then properly cached so similar requests\n * return already existing resources. This also manages instances waiting for the resource\n * to be made available.\n */\nvar AtlasResourceManager = /** @class */ (function () {\n    function AtlasResourceManager(options) {\n        /** This is the atlas currently targetted by requests */\n        this.targetAtlas = '';\n        /** This stores all of the requests awaiting dequeueing */\n        this.requestQueue = new Map();\n        /**\n         * This tracks if a resource is already in the request queue. This also stores ALL instances awaiting the resource.\n         */\n        this.requestLookup = new Map();\n        this.atlasManager = options.atlasManager;\n    }\n    /**\n     * This dequeues all instance requests for a resource and processes the request which will\n     * inevitably make the instance active\n     */\n    AtlasResourceManager.prototype.dequeueRequests = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var didDequeue, _loop_1, this_1, _i, _a, _b, targetAtlas, resources;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        didDequeue = false;\n                        _loop_1 = function (targetAtlas, resources) {\n                            var requests, atlasRequests_1;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        if (!(resources.length > 0)) return [3 /*break*/, 2];\n                                        // We did dequeue\n                                        didDequeue = true;\n                                        requests = resources.slice(0);\n                                        // Empty the queue to begin taking in new requests as needed\n                                        resources.length = 0;\n                                        // Tell the atlas manager to update with all of the requested resources\n                                        return [4 /*yield*/, this_1.atlasManager.updateAtlas(targetAtlas, requests)];\n                                    case 1:\n                                        // Tell the atlas manager to update with all of the requested resources\n                                        _a.sent();\n                                        atlasRequests_1 = this_1.requestLookup.get(targetAtlas);\n                                        if (atlasRequests_1) {\n                                            // Once the manager has been updated, we can now flag all of the instances waiting for the resources\n                                            // As active, which should thus trigger an update to the layers to perform a diff for each instance\n                                            requests.forEach(function (resource) {\n                                                var request = atlasRequests_1.get(resource);\n                                                atlasRequests_1.delete(resource);\n                                                if (request) {\n                                                    for (var _i = 0, request_1 = request; _i < request_1.length; _i++) {\n                                                        var _a = request_1[_i], layer = _a[0], instance = _a[1];\n                                                        // If the instance is still associated with a cluster, then the instance can be activated. Having\n                                                        // A cluster is indicative the instance has not been deleted.\n                                                        if (layer.uniformManager.getUniforms(instance)) {\n                                                            instance.active = true;\n                                                        }\n                                                    }\n                                                }\n                                            });\n                                        }\n                                        _a.label = 2;\n                                    case 2: return [2 /*return*/];\n                                }\n                            });\n                        };\n                        this_1 = this;\n                        _i = 0, _a = Array.from(this.requestQueue.entries());\n                        _c.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3 /*break*/, 4];\n                        _b = _a[_i], targetAtlas = _b[0], resources = _b[1];\n                        return [5 /*yield**/, _loop_1(targetAtlas, resources)];\n                    case 2:\n                        _c.sent();\n                        _c.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/, didDequeue];\n                }\n            });\n        });\n    };\n    /**\n     * Free ALL resources managed under this resource manager\n     */\n    AtlasResourceManager.prototype.destroy = function () {\n        this.atlasManager.destroy();\n    };\n    /**\n     * This retrieves the actual atlas texture that should be applied to a uniform's\n     * value.\n     */\n    AtlasResourceManager.prototype.getAtlasTexture = function (key) {\n        var atlas = this.atlasManager.getAtlasTexture(key);\n        if (atlas) {\n            return atlas.texture;\n        }\n        return null;\n    };\n    /**\n     * This is a request for atlas texture resources. It will produce either the coordinates needed to\n     * make valid texture lookups, or it will trigger a loading of resources to an atlas and cause an\n     * automated deactivation and reactivation of the instance.\n     */\n    AtlasResourceManager.prototype.request = function (layer, instance, resource) {\n        var texture = resource.texture;\n        // If the texture is ready and available, then we simply return the IO values\n        if (texture) {\n            return toInstanceIOValue(texture);\n        }\n        if (resource instanceof label_atlas_resource_1.LabelAtlasResource) {\n            if (!resource.label.text) {\n                return toInstanceIOValue(texture);\n            }\n        }\n        // If a request is already made, then we must save the instance making the request for deactivation and\n        // Reactivation but without any additional atlas loading\n        var atlasRequests = this.requestLookup.get(this.targetAtlas);\n        if (atlasRequests) {\n            var existingRequests = atlasRequests.get(resource);\n            if (existingRequests) {\n                existingRequests.push([layer, instance]);\n                instance.active = false;\n                return toInstanceIOValue(texture);\n            }\n        }\n        else {\n            atlasRequests = new Map();\n            this.requestLookup.set(this.targetAtlas, atlasRequests);\n        }\n        // If the texture is not available, then we must load the resource, deactivate the instance\n        // And wait for the resource to become available. Once the resource is available, the system\n        // Must activate the instance to render the resource.\n        instance.active = false;\n        var requests = this.requestQueue.get(this.targetAtlas);\n        if (!requests) {\n            requests = [];\n            this.requestQueue.set(this.targetAtlas, requests);\n        }\n        requests.push(resource);\n        atlasRequests.set(resource, [[layer, instance]]);\n        // This returns essentially returns blank values for the resource lookup\n        return toInstanceIOValue(texture);\n    };\n    /**\n     * This is used by the system to target the correct atlas for subsequent requests to a resource.\n     */\n    AtlasResourceManager.prototype.setTargetAtlas = function (target) {\n        this.targetAtlas = target;\n    };\n    return AtlasResourceManager;\n}());\nexports.AtlasResourceManager = AtlasResourceManager;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../../types\");\nvar event_manager_1 = require(\"../event-manager\");\n/**\n * This class is an injected event manager for the surface, it specifically handles taking in mouse events intended for view interactions\n * and broadcasts them to the layers that have picking enabled, thus allowing the layers to respond to\n * mouse view locations and broadcast Instance interactions based on the interaction with the View the layer is a part of\n *\n * In Summary: This is an adapter that takes in interactions to the views and injects those events into the layers associated with\n * the views so that the layers can translate the events to gestures.\n */\nvar LayerMouseEvents = /** @class */ (function (_super) {\n    __extends(LayerMouseEvents, _super);\n    function LayerMouseEvents(surface) {\n        var _this = _super.call(this) || this;\n        /** This tracks which views have the mouse over them so we can properly broadcast view is out events */\n        _this.isOver = new Map();\n        _this.surface = surface;\n        _this.sceneViews = surface.sceneViews;\n        return _this;\n    }\n    LayerMouseEvents.prototype.getSceneViewsUnderMouse = function (e) {\n        var sceneViewByViewId = new Map();\n        // Map the scene views by the view's identifiers\n        for (var _i = 0, _a = this.sceneViews; _i < _a.length; _i++) {\n            var sceneView = _a[_i];\n            sceneViewByViewId.set(sceneView.view.id, sceneView);\n        }\n        // Now retrieve and convert each view under the mouse to the scene view it coincides with\n        return e.viewsUnderMouse.map(function (viewItem) { return sceneViewByViewId.get(viewItem.view.id); });\n    };\n    LayerMouseEvents.prototype.getMouseByViewId = function (e) {\n        // This is the mouse position for the provided view in view space\n        var viewMouseByViewId = new Map();\n        for (var _i = 0, _a = e.viewsUnderMouse; _i < _a.length; _i++) {\n            var viewItem = _a[_i];\n            viewMouseByViewId.set(viewItem.view.id, viewItem.mouse);\n        }\n        return viewMouseByViewId;\n    };\n    LayerMouseEvents.prototype.handleClick = function (e, button) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseClick(view, mouse, button); });\n    };\n    LayerMouseEvents.prototype.handleDrag = function (e, drag) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseDrag(view, mouse); });\n    };\n    LayerMouseEvents.prototype.handleInteraction = function (e, callback) {\n        // Get all of the scenes under the mouse\n        var sceneViews = this.getSceneViewsUnderMouse(e);\n        // Get a lookup of a view id to the mouse position in the view\n        var viewMouseByViewId = this.getMouseByViewId(e);\n        // For every view of every scene, we must tell it's layers it's world space is receiving mouse interactions\n        for (var _i = 0, sceneViews_1 = sceneViews; _i < sceneViews_1.length; _i++) {\n            var sceneView = sceneViews_1[_i];\n            this.handleSceneView(sceneView, viewMouseByViewId, callback);\n        }\n        return sceneViews;\n    };\n    LayerMouseEvents.prototype.handleMouseDown = function (e, button) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseDown(view, mouse, button); });\n    };\n    LayerMouseEvents.prototype.handleMouseUp = function (e, button) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseUp(view, mouse, button); });\n    };\n    LayerMouseEvents.prototype.handleMouseOver = function (e) {\n        // We let the mouse move event handle the registration of moused over views\n    };\n    LayerMouseEvents.prototype.handleMouseOut = function (e) {\n        var _this = this;\n        // Get a lookup of a view id to the mouse position in the view\n        var viewMouseByViewId = this.getMouseByViewId(e);\n        var screen = e.screen.mouse;\n        // All views that are moused over should no longer be considered over and broadcast a mouse out\n        this.isOver.forEach(function (flag, sceneView) {\n            // Since we are leaving the view we must make the view relative cooridinates fromt he screen space coords\n            viewMouseByViewId.set(sceneView.view.id, sceneView.view.screenToView(screen));\n            _this.handleSceneView(sceneView, viewMouseByViewId, function (layer, view, mouse) { return layer.interactions.handleMouseOut(view, mouse); });\n        });\n        // Nothing is over anymore\n        this.isOver.clear();\n    };\n    LayerMouseEvents.prototype.handleMouseMove = function (e) {\n        var _this = this;\n        if (this.surface) {\n            this.surface.updateColorPickRange([e.screen.mouse.x, e.screen.mouse.y], e.viewsUnderMouse.map(function (v) { return v.view; }));\n        }\n        // Get all of the scenes we have interacted with, and broadcast a move event for each\n        var allSceneViews = this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseMove(view, mouse); });\n        // Get a lookup of a view id to the mouse position in the view\n        var viewMouseByViewId = this.getMouseByViewId(e);\n        // Get the position of the mouse on the screen\n        var screen = e.screen.mouse;\n        // For quick lookups map all of the current SceneViews that are over\n        var currentSceneViews = new Map();\n        allSceneViews.forEach(function (v) { return currentSceneViews.set(v, true); });\n        // Detect which of the views are newly over\n        currentSceneViews.forEach(function (flag, sceneView) {\n            if (!_this.isOver.get(sceneView)) {\n                _this.handleSceneView(sceneView, viewMouseByViewId, function (layer, view, mouse) { return layer.interactions.handleMouseOver(view, mouse); });\n            }\n        });\n        // Detect which of the views are no longer over\n        this.isOver.forEach(function (flag, sceneView) {\n            if (!currentSceneViews.get(sceneView)) {\n                // Since these views were not interacted with, we must create the mouse interaction position\n                viewMouseByViewId.set(sceneView.view.id, sceneView.view.screenToView(screen));\n                _this.handleSceneView(sceneView, viewMouseByViewId, function (layer, view, mouse) { return layer.interactions.handleMouseOut(view, mouse); });\n            }\n        });\n        // Update the current views that are over to the currently over views for next event\n        this.isOver = currentSceneViews;\n    };\n    LayerMouseEvents.prototype.handleSceneView = function (sceneView, viewMouseByViewId, callback) {\n        var view = sceneView.view;\n        var mouse = viewMouseByViewId.get(view.id);\n        for (var _i = 0, _a = sceneView.scene.layers; _i < _a.length; _i++) {\n            var layer = _a[_i];\n            if (layer.picking && layer.picking.type !== types_1.PickType.NONE) {\n                callback(layer, view, mouse);\n            }\n        }\n    };\n    LayerMouseEvents.prototype.handleWheel = function (e) {\n        // TODO: This may need to be implemented. As of right now, there is no particular benefit\n    };\n    return LayerMouseEvents;\n}(event_manager_1.EventManager));\nexports.LayerMouseEvents = LayerMouseEvents;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar generate_layer_model_1 = require(\"../surface/generate-layer-model\");\nvar types_1 = require(\"../types\");\nvar make_instance_uniform_name_1 = require(\"./make-instance-uniform-name\");\n/**\n * This class does a whoooooole lot of making the magical instancing optimization controls possible.\n *\n * Our instancing hackyness comes from the idea that uniforms are fast, and you don't have to commit\n * ALL of them when you touch just a little piece, and you don't have worry about drivers not supporting\n * partial vertex buffer updates.\n *\n * This also is WebGL 1.0 compatible without any extensions that are poorly implemented. And again: does\n * NOT require entire attribute buffer commits.\n *\n * Uniforms are limited for any given draw call. So we have to create multiple materials to support\n * chunks of the instances that need to be drawn. We then have to associate an instance with the set\n * of uniforms that is related to the instance and keep them paired together. If we have too many instances\n * we must generate more buffers to accomodate them.\n *\n * If we remove instances, we must free up the uniform set so that others can use the uniforms. While the uniforms\n * are not in use, the instance should not be rendering.\n */\nvar InstanceUniformManager = /** @class */ (function () {\n    function InstanceUniformManager(layer, scene) {\n        /** The generated buffers by this manager */\n        this.buffers = [];\n        /** The uniform clusters that are free and can be used by an instance */\n        this.availableClusters = [];\n        /** A lookup of an instance to a cluster of uniforms associated with it */\n        this.instanceToCluster = new Map();\n        /** A map of a cluster of uniforms to the buffer it comes from */\n        this.clusterToBuffer = new Map();\n        this.layer = layer;\n        var maxUniformBlock = 0;\n        layer.instanceAttributes.forEach(function (attributes) {\n            maxUniformBlock = Math.max(attributes.block, maxUniformBlock);\n        });\n        this.uniformBlocksPerInstance = maxUniformBlock + 1;\n        this.scene = scene;\n    }\n    /**\n     * This adds an instance to the manager and gives the instance an associative\n     * block of uniforms to work with.\n     */\n    InstanceUniformManager.prototype.add = function (instance) {\n        // If there are no available buffers, we must add a buffer\n        if (this.availableClusters.length <= 0) {\n            this.makeNewBuffer();\n        }\n        var cluster = this.availableClusters.pop();\n        if (cluster) {\n            this.instanceToCluster.set(instance.uid, cluster);\n        }\n        else {\n            console.warn('No valid cluster available for instance added to uniform manager.');\n        }\n        return cluster;\n    };\n    /**\n     * Free all resources this manager may be holding onto\n     */\n    InstanceUniformManager.prototype.destroy = function () {\n        this.buffers.forEach(function (buffer) {\n            buffer.geometry.dispose();\n            buffer.material.dispose();\n        });\n    };\n    /**\n     * This retireves the uniforms associated with an instance, or returns nothing\n     * if the instance has not been associated yet.\n     */\n    InstanceUniformManager.prototype.getUniforms = function (instance) {\n        return this.instanceToCluster.get(instance.uid);\n    };\n    /**\n     * Disassociates an instance with it's group of uniforms and makes the instance\n     * in the buffer no longer drawable.\n     */\n    InstanceUniformManager.prototype.remove = function (instance) {\n        var cluster = this.instanceToCluster.get(instance.uid);\n        // If the instance is associated with a cluster, we can add the cluster back to being available\n        // For another instance.\n        if (cluster) {\n            this.instanceToCluster.delete(instance.uid);\n            this.availableClusters.push(cluster);\n        }\n        return cluster;\n    };\n    /**\n     * Clears all elements of this manager from the current scene it was in.\n     */\n    InstanceUniformManager.prototype.removeFromScene = function () {\n        var _this = this;\n        this.buffers.forEach(function (buffer, index) {\n            _this.scene.container.remove(buffer.model);\n            buffer.pickModel && _this.scene.pickingContainer.remove(buffer.pickModel);\n        });\n        this.scene = null;\n    };\n    /**\n     * Applies the buffers to the provided scene for rendering.\n     */\n    InstanceUniformManager.prototype.setScene = function (scene) {\n        var _this = this;\n        this.buffers.forEach(function (buffer, index) {\n            _this.scene.container.add(buffer.model);\n            buffer.pickModel && _this.scene.pickingContainer.add(buffer.pickModel);\n        });\n        this.scene = scene;\n    };\n    /**\n     * This generates a new buffer of uniforms to associate instances with.\n     */\n    InstanceUniformManager.prototype.makeNewBuffer = function () {\n        // We generate a new geometry object for the buffer as the geometry\n        // Needs to have it's own unique draw range per buffer for optimal\n        // Performance\n        var newGeometry = new Three.BufferGeometry();\n        this.layer.vertexAttributes.forEach(function (attribute) {\n            newGeometry.addAttribute(attribute.name, attribute.materialAttribute);\n        });\n        // Ensure the draw range covers every instance in the geometry.\n        newGeometry.drawRange.start = 0;\n        newGeometry.drawRange.count = this.layer.maxInstancesPerBuffer * this.layer.instanceVertexCount;\n        // This is the material that is generated for the layer that utilizes all of the generated and\n        // Injected shader IO and shader fragments\n        var newMaterial = this.layer.material.clone();\n        // Now make a Model for the buffer so it can be rendered withn the scene\n        var newModel = generate_layer_model_1.generateLayerModel(this.layer, newGeometry, newMaterial);\n        // We render junkloads of instances in a buffer. Culling will have to happen\n        // On an instance level.\n        newModel.frustumCulled = false;\n        // Make our new buffer which will manage the geometry and everything necessary\n        var buffer = {\n            activeInstances: [],\n            clusters: [],\n            firstInstance: 0,\n            geometry: newGeometry,\n            lastInstance: 0,\n            material: newMaterial,\n            model: newModel,\n            pickModel: this.layer.picking.type === types_1.PickType.SINGLE && newModel.clone(),\n        };\n        this.buffers.push(buffer);\n        // Now that we have created a new buffer, we have all of it's uniforms\n        // To use to render more instances. We must take the instancing uniforms\n        // And divvy them up into clusters for our available buffer.\n        var uniformIndex = 0;\n        var uniformName = make_instance_uniform_name_1.makeInstanceUniformNameArray();\n        var instanceData = newMaterial.uniforms[uniformName];\n        // We must ensure the vector objects are TOTALLY unique otherwise they'll get shared across buffers\n        instanceData.value = instanceData.value.map(function () { return new Three.Vector4(0.0, 0.0, 0.0, 0.0); });\n        for (var i = 0, end = this.layer.maxInstancesPerBuffer; i < end; ++i) {\n            var cluster = {\n                instanceIndex: i,\n                uniform: instanceData,\n                uniformRange: [uniformIndex, 0],\n            };\n            uniformIndex += this.uniformBlocksPerInstance;\n            cluster.uniformRange[1] = uniformIndex;\n            buffer.clusters.push(cluster);\n            this.availableClusters.push(cluster);\n            this.clusterToBuffer.set(cluster, buffer);\n        }\n        // Grab the global uniforms from the material and add it to the uniform's materialUniform list so that\n        // We can keep uniforms consistent across all Instances\n        for (var i = 0, end = this.layer.uniforms.length; i < end; ++i) {\n            var uniform = this.layer.uniforms[i];\n            uniform.materialUniforms.push(newMaterial.uniforms[uniform.name]);\n        }\n        // Now that we are ready to utilize the buffer, let's add it to the scene so it may be rendered.\n        // Each new buffer equates to one draw call.\n        if (this.scene) {\n            this.scene.container.add(buffer.model);\n            buffer.pickModel && this.scene.pickingContainer.add(buffer.pickModel);\n        }\n    };\n    return InstanceUniformManager;\n}());\nexports.InstanceUniformManager = InstanceUniformManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This analyzes the rendered data for color picking and outputs the metrics and data needed\n * for the operation.\n */\nfunction analyzeColorPickingRendering(mouse, data, width, height) {\n    var pickingData = {\n        allColors: [],\n        colorData: data,\n        dataHeight: height,\n        dataWidth: width,\n        mouse: mouse,\n        nearestColor: 0,\n    };\n    var uniqueColors = new Map();\n    var pixelIndex = 0;\n    var colors = [];\n    var mouseX = width / 2;\n    var mouseY = height / 2;\n    var nearestColor = 0x000000;\n    var distance = Number.MAX_SAFE_INTEGER;\n    for (var i = 0; i < height; ++i) {\n        var row = [];\n        colors.push(row);\n        for (var k = 0; k < width; ++k) {\n            var r = data[pixelIndex];\n            var g = data[pixelIndex + 1];\n            var b = data[pixelIndex + 2];\n            pixelIndex += 4;\n            var color = r << 16 | g << 8 | b;\n            uniqueColors.set(color, true);\n            row.push(color);\n            // If the color is not black, let's test the distance against currnet nearest color\n            if (color !== 0x000000) {\n                var dx = k - mouseX;\n                var dy = i - mouseY;\n                var testDistance = dx * dx + dy * dy;\n                if (testDistance < distance) {\n                    distance = testDistance;\n                    nearestColor = color;\n                }\n            }\n        }\n    }\n    // Apply all o fthe unique colors that were discovered within the rendering\n    pickingData.allColors = Array.from(uniqueColors.keys());\n    // The nearest color will be the element in the middle of the array of colors\n    pickingData.nearestColor = nearestColor;\n    return pickingData;\n}\nexports.analyzeColorPickingRendering = analyzeColorPickingRendering;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nvar maxPopulation = 5;\nvar maxDepth = 10;\n/**\n * This filters a quad tree query by type\n *\n * @export\n * @template T\n */\nfunction filterQuery(type, queryValues) {\n    var filtered = [];\n    queryValues.forEach(function (obj) {\n        if (type.find(function (t) { return obj instanceof t; })) {\n            filtered.push(obj);\n        }\n    });\n    return filtered;\n}\nexports.filterQuery = filterQuery;\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n *\n * @class Quadrants\n */\nvar Quadrants = /** @class */ (function () {\n    /**\n     * Creates an instance of Quadrants.\n     *\n     * @param bounds The bounds this will create quandrants for\n     * @param depth  The child depth of this element\n     *\n     * @memberOf Quadrants\n     */\n    function Quadrants(bounds, depth) {\n        var mid = bounds.mid;\n        this.TL = new Node(bounds.x, mid.x, bounds.y, mid.y, depth);\n        this.TR = new Node(mid.x, bounds.right, bounds.y, mid.y, depth);\n        this.BL = new Node(bounds.x, mid.x, mid.y, bounds.bottom, depth);\n        this.BR = new Node(mid.x, bounds.right, mid.y, bounds.bottom, depth);\n    }\n    /**\n     * Ensures all memory is released for all nodes and all references are removed\n     * to potentially high memory consumption items\n     *\n     * @memberOf Quadrants\n     */\n    Quadrants.prototype.destroy = function () {\n        this.TL.destroy();\n        this.TR.destroy();\n        this.BL.destroy();\n        this.BR.destroy();\n        delete this.TL;\n        delete this.TR;\n        delete this.BL;\n        delete this.BR;\n    };\n    return Quadrants;\n}());\nexports.Quadrants = Quadrants;\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n *\n * @export\n * @class Node\n */\nvar Node = /** @class */ (function () {\n    /**\n     * Creates an instance of Node.\n     *\n     * @param l     The bounding left wall of the space this node covers\n     * @param r     The bounding right wall of the space this node covers\n     * @param t     The bounding top wall of the space this node covers\n     * @param b     The bounding bottom wall of the space this node covers\n     * @param depth The depth within the quad tree this node resides\n     *\n     * @memberOf Node\n     */\n    function Node(left, right, top, bottom, depth) {\n        this.children = [];\n        this.depth = 0;\n        // If params insertted\n        if (arguments.length >= 4) {\n            this.bounds = new bounds_1.Bounds({\n                height: top - bottom,\n                width: right - left,\n                x: left,\n                y: top,\n            });\n        }\n        // Otherwise, make tiny start area\n        else {\n            this.bounds = new bounds_1.Bounds({\n                height: 1,\n                width: 1,\n                x: 0,\n                y: 0,\n            });\n        }\n        // Ensure the depth is set\n        this.depth = depth || 0;\n    }\n    /**\n     * Destroys this node and ensures all child nodes are destroyed as well.\n     *\n     * @memberOf Node\n     */\n    Node.prototype.destroy = function () {\n        delete this.children;\n        delete this.bounds;\n        if (this.nodes) {\n            this.nodes.destroy();\n            delete this.nodes;\n        }\n    };\n    /**\n     * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n     * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n     * this quad tree spans (and this is the root node), the quad tree will expand to include\n     * the new child.\n     *\n     * @param child The Bounds type object to inject\n     * @param props Properties that can be retrieved with the child object if applicable\n     *\n     * @returns True if the insertion was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.add = function (child, props) {\n        // This is the entry function for adding children, so we must first expand our top node\n        // To cover the area that the child is located.\n        // If we're in bounds, then let's just add the child\n        if (child.isInside(this.bounds)) {\n            return this.doAdd(child);\n        }\n        // Otherwise, we need to expand first\n        else {\n            this.cover(child);\n            return this.add(child, props);\n        }\n    };\n    /**\n     * Adds a list of new children to this quad tree. It performs the same operations as\n     * addChild for each child in the list, however, it more efficiently recalculates the\n     * bounds necessary to cover the area the children cover.\n     *\n     * @param children      List of Bounds objects to inject\n     * @param childrenProps List of props to associate with each element\n     *\n     * @memberOf Node\n     */\n    Node.prototype.addAll = function (children, childrenProps) {\n        var _this = this;\n        // Ensure the properties are at least defined\n        childrenProps = childrenProps || [];\n        // Make sure we cover the entire area of all the children.\n        // We can speed this up a lot if we first calculate the total bounds the new children covers\n        var minX = Number.MAX_VALUE;\n        var minY = Number.MAX_VALUE;\n        var maxX = -Number.MAX_VALUE;\n        var maxY = -Number.MAX_VALUE;\n        // Get the dimensions of the new bounds\n        children.forEach(function (child) {\n            if (child.x < minX) {\n                minX = child.x;\n            }\n            if (child.right > maxX) {\n                maxX = child.right;\n            }\n            if (child.bottom > maxY) {\n                maxY = child.bottom;\n            }\n            if (child.y < minY) {\n                minY = child.y;\n            }\n        });\n        // Make sure our bounds includes the specified bounds\n        this.cover(new bounds_1.Bounds({\n            height: maxY - minY,\n            width: maxX - minX,\n            x: minX,\n            y: minY,\n        }));\n        // Add all of the children into the tree\n        children.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n     * This will cause all children to be re-injected into the tree.\n     *\n     * @param bounds The bounds to include in the tree's coverage\n     *\n     * @memberOf Node\n     */\n    Node.prototype.cover = function (bounds) {\n        var _this = this;\n        // If we are already covering the area: abort\n        if (bounds.isInside(this.bounds)) {\n            return;\n        }\n        // Make our bounds cover the new area\n        this.bounds.encapsulate(bounds);\n        this.bounds.x -= 1;\n        this.bounds.y -= 1;\n        this.bounds.width += 2;\n        this.bounds.height += 4;\n        // Get all of the children underneath this node\n        var allChildren = this.gatherChildren([]);\n        // Destroy the split nodes\n        if (this.nodes) {\n            // Completely...destroy...\n            this.nodes.destroy();\n            delete this.nodes;\n        }\n        // Reinsert all children with the new dimensions in place\n        allChildren.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * When adding children, this performs the actual action of injecting the child into the tree\n     * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n     *\n     * @param child The Bounds item to inject into the tree\n     * @param props The props to remain associated with the child\n     *\n     * @returns True if the injection was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.doAdd = function (child) {\n        // If nodes are present, then we have already exceeded the population of this node\n        if (this.nodes) {\n            if (child.isInside(this.nodes.TL.bounds)) {\n                return this.nodes.TL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.TR.bounds)) {\n                return this.nodes.TR.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BL.bounds)) {\n                return this.nodes.BL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BR.bounds)) {\n                return this.nodes.BR.doAdd(child);\n            }\n            // Otherwise, this is a child overlapping this border\n            this.children.push(child);\n            return true;\n        }\n        // Otherwise, we have not had a split due to population limits being exceeded\n        else if (child.isInside(this.bounds)) {\n            this.children.push(child);\n            // If we exceeded our population for this quadrant, it is time to split up\n            if (this.children.length > maxPopulation && this.depth < maxDepth) {\n                this.split();\n            }\n            return true;\n        }\n        // This is when there is something wrong with the insertted child. The bounds\n        // For the quad should have grown without issue, but in this case the bounds\n        // Could not grow to accomodate the child.\n        if (isNaN(child.width + child.height + child.x + child.y)) {\n            console.error('Child did not fit into bounds because a dimension is NaN', child);\n        }\n        else if (child.area === 0) {\n            console.error('Child did not fit into bounds because the area is zero', child);\n        }\n        // Don't insert the child and continue\n        return true;\n    };\n    /**\n     * Collects all children of all the current and sub nodes into a single list.\n     *\n     * @param list The list we must aggregate children into\n     *\n     * @return The list specified as the list parameter\n     */\n    Node.prototype.gatherChildren = function (list) {\n        list = list.concat(this.children);\n        if (this.nodes) {\n            this.nodes.TL.gatherChildren(list);\n            this.nodes.TR.gatherChildren(list);\n            this.nodes.BL.gatherChildren(list);\n            this.nodes.BR.gatherChildren(list);\n        }\n        return list;\n    };\n    /**\n     * Entry query for determining query type based on input object\n     *\n     * @param bounds Can be a Bounds or a Point object\n     * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n     *               information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return An array of children that intersects with the query\n     */\n    Node.prototype.query = function (bounds, visit) {\n        // Query a rectangle\n        if (bounds instanceof bounds_1.Bounds) {\n            if (bounds.hitBounds(this.bounds)) {\n                return this.queryBounds(bounds, [], visit);\n            }\n            // Return an empty array when nothing is collided with\n            return [];\n        }\n        // Query a point\n        if (this.bounds.containsPoint(bounds)) {\n            return this.queryPoint(bounds, [], visit);\n        }\n        // Return an empty array when nothing is collided with\n        return [];\n    };\n    /**\n     * Queries children for intersection with a bounds object\n     *\n     * @param b     The Bounds to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return     Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryBounds = function (b, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.hitBounds(b)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (b.hitBounds(this.nodes.TL.bounds)) {\n                this.nodes.TL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.TR.bounds)) {\n                this.nodes.TR.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BL.bounds)) {\n                this.nodes.BL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BR.bounds)) {\n                this.nodes.BR.queryBounds(b, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Queries children for intersection with a point\n     *\n     * @param p     The Point to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return      Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryPoint = function (p, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.containsPoint(p)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (this.nodes.TL.bounds.containsPoint(p)) {\n                this.nodes.TL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.TR.bounds.containsPoint(p)) {\n                this.nodes.TR.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BL.bounds.containsPoint(p)) {\n                this.nodes.BL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BR.bounds.containsPoint(p)) {\n                this.nodes.BR.queryPoint(p, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Creates four sub quadrants for this node.\n     */\n    Node.prototype.split = function () {\n        // Gather all items to be handed down\n        var allChildren = this.gatherChildren([]);\n        // Gather all props for the children to be handed down as well\n        this.nodes = new Quadrants(this.bounds, this.depth + 1);\n        this.children = [];\n        while (allChildren.length > 0) {\n            var child = allChildren.pop();\n            if (child)\n                this.doAdd(child);\n        }\n    };\n    /**\n     * Traverses the quad tree returning every quadrant encountered\n     *\n     * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n     */\n    Node.prototype.visit = function (cb) {\n        var finished = Boolean(cb(this));\n        if (this.nodes && !finished) {\n            this.nodes.TL.visit(cb);\n            this.nodes.TR.visit(cb);\n            this.nodes.BL.visit(cb);\n            this.nodes.BR.visit(cb);\n        }\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar QuadTree = /** @class */ (function (_super) {\n    __extends(QuadTree, _super);\n    function QuadTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return QuadTree;\n}(Node));\nexports.QuadTree = QuadTree;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar data_bounds_1 = require(\"../util/data-bounds\");\nfunction value(val, ref, scaleRatio) {\n    var parse = \"\" + val;\n    var num = parseFloat(parse);\n    if (isNaN(num)) {\n        return 0;\n    }\n    // If this is a percentage use the reference as the num to multiply against\n    if (parse.indexOf('%') > -1) {\n        return (num / 100.0) * ref;\n    }\n    return num * scaleRatio;\n}\n/**\n * This evaluates an absolute position with a reference to produce meaningful bounds.\n *\n * The scaleRatio provided should be available in or for percents to have the same weighting\n * as whole number values.\n */\nfunction getAbsolutePositionBounds(item, reference, scaleRatio) {\n    if (reference.width === 0 || reference.height === 0) {\n        console.warn('An AbsolutePosition evaluated to invalid dimensions.', 'Please ensure that the object provided and the reference has valid dimensions', 'to produce dimensions with width and height that are non-zero.', 'item:', item, 'reference:', reference.toString());\n    }\n    var bounds = data_bounds_1.DataBounds.emptyBounds();\n    var width;\n    var height;\n    // Calculate the horizontal values\n    if (item.width) {\n        bounds.width = value(item.width, reference.width, scaleRatio);\n        if ('left' in item) {\n            bounds.x = value(item.left, reference.width, scaleRatio);\n        }\n        else if ('right' in item) {\n            bounds.x = reference.width - value(item.right, reference.width, scaleRatio) - bounds.width;\n        }\n    }\n    else {\n        var left = value(item.left, reference.width, scaleRatio);\n        var right = reference.width - value(item.right, reference.width, scaleRatio);\n        width = right - left;\n        if (width < 0) {\n            console.warn('An AbsolutePosition evaluated to invalid dimensions.', 'Please ensure that the object provided and the reference has valid dimensions', 'to produce dimensions with width and height that are greater than zero.', 'item:', item, 'reference:', reference.toString());\n        }\n        bounds.x = left;\n        bounds.width = width;\n    }\n    // Calculate the vertical values\n    if (item.height) {\n        bounds.height = value(item.height, reference.height, scaleRatio);\n        if ('top' in item) {\n            bounds.y = value(item.top, reference.height, scaleRatio);\n        }\n        else if ('bottom' in item) {\n            bounds.y = reference.height - value(item.bottom, reference.height, scaleRatio) - bounds.height;\n        }\n    }\n    else {\n        var top_1 = value(item.top, reference.height, scaleRatio);\n        var bottom = reference.height - value(item.bottom, reference.height, scaleRatio);\n        height = bottom - top_1;\n        if (width < 0) {\n            console.warn('An AbsolutePosition evaluated to invalid dimensions.', 'Please ensure that the object provided and the reference has valid dimensions', 'to produce dimensions with width and height that are greater than zero.', 'item:', item, 'reference:', reference.toString());\n        }\n        bounds.y = top_1;\n        bounds.height = height;\n    }\n    if (bounds.width === 0 || bounds.height === 0 || isNaN(bounds.x + bounds.y + bounds.width + bounds.height)) {\n        bounds.x = 0;\n        bounds.y = 0;\n        bounds.width = reference.width;\n        bounds.height = reference.height;\n    }\n    return bounds;\n}\nexports.getAbsolutePositionBounds = getAbsolutePositionBounds;\n","module.exports = \"// This portion is where the shader assigns the picking color that gets passed to the fragment shader\\n  _picking_color_pass_ = _pickingColor;\\n\"","module.exports = \"lowp vec4 setColor(vec4 color) {\\n  gl_FragColor = color;\\n  return gl_FragColor;\\n}\\n\"","module.exports = \"precision lowp float;\\n\\n// This contains the method required to be used on a fragment shader when a layer desires to use\\n// PickType.SINGLE (color picking).\\nvarying vec4 _picking_color_pass_;\\n\\nvec4 setColor(vec4 color) {\\n  gl_FragColor = mix(color, _picking_color_pass_, pickingActive);\\n\\n  if (color.a == 0.0) {\\n    discard;\\n  }\\n\\n  return gl_FragColor;\\n}\\n\"","module.exports = \"// This is the varying auto generated for the fragment shader that is needed in the vertex shader to pass the\\n// color for the instance through to the fragment shader\\nvarying vec4 _picking_color_pass_;\\n\"","module.exports = \"// These are projection methods utilizing the simpler camera breakdown approach\\n\\nvec3 cameraSpace(vec3 world) {\\n  return (world + cameraOffset) * cameraScale;\\n}\\n\\nvec3 cameraSpaceSize(vec3 worldSize) {\\n  return worldSize * cameraScale;\\n}\\n\\nvec4 clipSpace(vec3 world) {\\n  return vec4(((projection * modelView) * vec4(cameraSpace(world), 1.0)).xyz, 1.0);\\n}\\n\\nvec4 clipSpaceSize(vec3 worldSize) {\\n  return vec4(((projection * modelView) * vec4(cameraSpaceSize(worldSize), 0.0)).xyz, 1.0);\\n}\\n\"","module.exports = \"// When instancing is enabled, it causes a major list of uniforms to be generated\\n// it also generates a massive search tree to retrieve the correct unforms in question.\\n${instanceUniformDeclarations}\\n\\n// This is the uniforms provided by the system along with the uniforms created by the layer\\n${layerUniforms}\\n\\n// This is the attributes generated for vertex attributes\\n${vertexAttributes}\\n\\n// This is the methods and set up needed to retrieve a block of data for an instance\\n${instanceDataRetrieval}\\n\"","module.exports = \"// This is the injected dereferencing of the instance attributes\\n  int instanceIndex = int(instance);\\n  ${instanceDestructuring}\\n\\n  // This is a special injected instance attribute. It lets the system\\n  // control specific instances ability to draw, which allows the backend\\n  // system greater control on how it optimizes draw calls and it's buffers.\\n  if (_active == 0.0) {\\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n\\n    // Quick exit to prevent any geometry from arising from the instance\\n    return;\\n  }\\n\\n  ${picking}\\n\"","module.exports = \"precision highp float;\\n\\n// This is the fragment shader generated by the system\\n${layerUniforms}\\n\\n${picking}\\n\\n// --------------- The fragment shader provided by the layer ------------------\\n${shader}\\n\"","module.exports = \"// This is the vertex shader generated by the system\\n${shaderInput}\\n${projectionMethods}\\n${picking}\\n// --------------- Vertex shader provided by the layer -----------------\\n${shader}\\n\"","module.exports = \"int instanceSize = ${instanceBlockCount};\\n\\nvec4 getBlock(int index, int instanceIndex) {\\n  return instanceData[(instanceSize * instanceIndex) + index];\\n}\\n\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar types_1 = require(\"../../types\");\nvar make_instance_uniform_name_1 = require(\"../../util/make-instance-uniform-name\");\nvar shader_templating_1 = require(\"../../util/shader-templating\");\nvar template_vars_1 = require(\"../fragments/template-vars\");\nvar instanceRetrievalArrayFragment = require('../fragments/instance-retrieval-array.vs');\n/** Defines the elements for destructuring out of a vector */\nvar VECTOR_COMPONENTS = ['x', 'y', 'z', 'w'];\n/** Converts a size to a shader type */\nvar sizeToType = {\n    1: 'float',\n    2: 'vec2',\n    3: 'vec3',\n    4: 'vec4',\n    9: 'mat3',\n    16: 'mat4',\n    /** This is the special case for instance attributes that want an atlas resource */\n    99: 'vec4',\n};\nfunction makeUniformArrayDeclaration(totalBlocks) {\n    return {\n        fragment: \"uniform vec4 \" + make_instance_uniform_name_1.makeInstanceUniformNameArray() + \"[\" + totalBlocks + \"];\",\n        materialUniforms: [\n            {\n                name: make_instance_uniform_name_1.makeInstanceUniformNameArray(),\n                type: '4fv',\n                value: new Array(totalBlocks)\n                    .fill(0)\n                    .map(function () { return new Three.Vector4(0, 0, 0, 0); }),\n            },\n        ],\n    };\n}\nexports.makeUniformArrayDeclaration = makeUniformArrayDeclaration;\nfunction makeInstanceRetrievalArray(blocksPerInstance) {\n    var templateOptions = {};\n    templateOptions[template_vars_1.templateVars.instanceBlockCount] = \"\" + blocksPerInstance;\n    var required = {\n        name: 'makeInstanceRetrievalArray',\n        values: [\n            template_vars_1.templateVars.instanceBlockCount,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(instanceRetrievalArrayFragment, templateOptions, required);\n    return results.shader;\n}\nexports.makeInstanceRetrievalArray = makeInstanceRetrievalArray;\nfunction makeInstanceDestructuringArray(instanceAttributes, blocksPerInstance) {\n    var out = '';\n    // Generate the blocks\n    for (var i = 0; i < blocksPerInstance; ++i) {\n        out += \"  vec4 block\" + i + \" = getBlock(\" + i + \", instanceIndex);\\n\";\n    }\n    instanceAttributes.forEach(function (attribute) {\n        var block = attribute.block;\n        // If we have a size the size of a block, then don't swizzle the vector\n        if (attribute.size === types_1.InstanceAttributeSize.FOUR) {\n            out += \"  \" + sizeToType[attribute.size] + \" \" + attribute.name + \" = block\" + block + \";\\n\";\n        }\n        // If the attribute is an atlas, then we use the special ATLAS size and don't swizzle the vector\n        else if (attribute.atlas) {\n            out += \"  \" + sizeToType[types_1.InstanceAttributeSize.ATLAS] + \" \" + attribute.name + \" = block\" + block + \";\\n\";\n        }\n        // Do normal destructuring with any other size and type\n        else {\n            out += \"  \" + sizeToType[attribute.size] + \" \" + attribute.name + \" = block\" + block + \".\" + makeVectorSwizzle(attribute.blockIndex, attribute.size) + \";\\n\";\n        }\n    });\n    return out;\n}\nexports.makeInstanceDestructuringArray = makeInstanceDestructuringArray;\nfunction makeVectorSwizzle(start, size) {\n    return VECTOR_COMPONENTS.slice(start, start + size).join('');\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../../types\");\nvar shader_templating_1 = require(\"../../util/shader-templating\");\nvar webgl_stat_1 = require(\"../../util/webgl-stat\");\nvar template_vars_1 = require(\"../fragments/template-vars\");\nvar uniform_instance_block_array_1 = require(\"./uniform-instance-block-array\");\n// These are all of the necessary fragments that will comprise our shader that is generated\nvar vertexShaderComposition = require('../fragments/vertex-shader-composition.vs');\nvar fragmentShaderComposition = require('../fragments/fragment-shader-composition.fs');\nvar instanceDestructuringArray = require('../fragments/instance-destructuring-array.vs');\nvar shaderInput = require('../fragments/shader-input.vs');\nvar projectionMethods = require('../fragments/projection-methods.vs');\n// Constants\n/**\n * Defines how many floats are available in a uniform block\n * What is a uniform block you ask? Why let me tell you! It is how opengl stores and communicates uniforms\n * to the GPU. Whenever you declare a uniform, it will use a hunk of memory. You can see how many uniforms\n * a GPU can have via the paramter MAX_VERTEX_UNIFORM_VECTORS. The number returned is the number of blocks\n * we can use for uniforms in the vertex shader. A BLOCK is an entire vec4.\n *\n * When you declare a uniform in your shader, it will use an entire BLOCK at the MINIMUM.\n *\n * A uniform float uses 1 block. vec2 uses 1 block. vec3 uses one block. vec4 uses one block.\n * mat4 uses 4 blocks. mat3 uses 3 blocks.\n *\n * etc etc.\n */\nvar MAX_USE_PER_BLOCK = 4;\n/** Converts a size to a shader type */\nvar sizeToType = {\n    1: 'float',\n    2: 'vec2',\n    3: 'vec3',\n    4: 'vec4',\n    9: 'mat3',\n    16: 'mat4',\n    99: 'sampler2D',\n};\nfunction calculateUniformBlockUseage(uniforms) {\n    var count = 0;\n    for (var i = 0, end = uniforms.length; i < end; ++i) {\n        count += Math.ceil(uniforms[i].size / 4);\n    }\n    return count;\n}\n/**\n * This method is the main algorithm for piecing together all of the attributes necessary\n * and injecting them into the shaders.\n *\n * @param shaders\n * @param vertexAttributes\n * @param instanceAttributes\n */\nfunction injectFragments(layer, shaders, vertexAttributes, instanceAttributes, uniforms) {\n    var shaderInputMetrics = generateShaderInputs(layer, vertexAttributes, instanceAttributes, uniforms);\n    var templateOptions = (_a = {},\n        _a[template_vars_1.templateVars.projectionMethods] = generateProjectionMethods(),\n        _a[template_vars_1.templateVars.picking] = generateVertexPicking(layer),\n        _a[template_vars_1.templateVars.shaderInput] = shaderInputMetrics.fragment,\n        _a[template_vars_1.templateVars.shader] = generateVertexShader(layer, shaders, instanceAttributes, shaderInputMetrics.metrics.maxInstancesPerBuffer, shaderInputMetrics.metrics.blocksPerInstance),\n        _a);\n    var required = {\n        name: 'vertex shader composition',\n        values: [\n            template_vars_1.templateVars.projectionMethods,\n            template_vars_1.templateVars.shaderInput,\n            template_vars_1.templateVars.shader,\n        ],\n    };\n    // If our layer is using color picking, then we must require the shader to include the ${picking} annotation\n    // To receive the fragment picking method\n    if (layer.picking.type === types_1.PickType.SINGLE) {\n        required.values.push(template_vars_1.templateVars.picking);\n    }\n    var vertexShaderResults = shader_templating_1.shaderTemplate(vertexShaderComposition, templateOptions, required);\n    templateOptions = (_b = {},\n        _b[template_vars_1.templateVars.layerUniforms] = generateUniforms(uniforms, types_1.ShaderInjectionTarget.FRAGMENT),\n        _b[template_vars_1.templateVars.shader] = generateFragmentShader(shaders),\n        _b[template_vars_1.templateVars.picking] = generateFragmentPickingMethod(layer),\n        _b);\n    required = {\n        name: 'fragment shader composition',\n        values: [\n            template_vars_1.templateVars.layerUniforms,\n            template_vars_1.templateVars.shader,\n        ],\n    };\n    // If our layer is using color picking, then we must require the shader to include the ${picking} annotation\n    // To receive the fragment picking method\n    if (layer.picking.type === types_1.PickType.SINGLE) {\n        required.values.push(template_vars_1.templateVars.picking);\n    }\n    var fragmentShaderResults = shader_templating_1.shaderTemplate(fragmentShaderComposition, templateOptions, required);\n    return {\n        fs: fragmentShaderResults.shader,\n        materialUniforms: shaderInputMetrics.materialUniforms,\n        maxInstancesPerBuffer: shaderInputMetrics.metrics.maxInstancesPerBuffer,\n        vs: vertexShaderResults.shader,\n    };\n    var _a, _b;\n}\nexports.injectFragments = injectFragments;\n/**\n * Creates the projection method fragment\n */\nfunction generateProjectionMethods() {\n    var templateOptions = {};\n    var required = {\n        name: 'projection methods',\n        values: [],\n    };\n    var results = shader_templating_1.shaderTemplate(projectionMethods, templateOptions, required);\n    return results.shader;\n}\n/**\n * Generates the fragments for shader IO such as vertex and instance attributes\n */\nfunction generateShaderInputs(layer, vertexAttributes, instanceAttributes, uniforms) {\n    var templateOptions = {};\n    var instancingInfo = generateInstanceDataLookupOptions(layer, templateOptions, instanceAttributes, uniforms);\n    var additionalOptions = (_a = {},\n        _a[template_vars_1.templateVars.layerUniforms] = generateUniforms(uniforms, types_1.ShaderInjectionTarget.VERTEX),\n        _a[template_vars_1.templateVars.vertexAttributes] = generateVertexAttributes(vertexAttributes),\n        _a);\n    Object.assign(templateOptions, additionalOptions);\n    var required = {\n        name: 'shader input',\n        values: [\n            template_vars_1.templateVars.instanceDataRetrieval,\n            template_vars_1.templateVars.instanceUniformDeclarations,\n            template_vars_1.templateVars.layerUniforms,\n            template_vars_1.templateVars.vertexAttributes,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(shaderInput, templateOptions, required);\n    return {\n        fragment: results.shader,\n        materialUniforms: instancingInfo.materialUniforms,\n        metrics: instancingInfo.metrics,\n    };\n    var _a;\n}\n/**\n *\n * @param uniforms\n */\nfunction generateUniforms(uniforms, injectionType) {\n    var out = '';\n    var injection = injectionType || types_1.ShaderInjectionTarget.VERTEX;\n    uniforms.forEach(function (uniform) {\n        uniform.shaderInjection = uniform.shaderInjection || types_1.ShaderInjectionTarget.VERTEX;\n        if (uniform.shaderInjection === injection || uniform.shaderInjection === types_1.ShaderInjectionTarget.ALL) {\n            out += \"uniform \" + (uniform.qualifier || '') + (uniform.qualifier ? ' ' : '') + sizeToType[uniform.size] + \" \" + uniform.name + \";\\n\";\n        }\n    });\n    return out;\n}\n/**\n * This takes in the layer's vertex shader and transforms any required templating within the\n * shader.\n */\nfunction generateVertexShader(layer, shaders, instanceAttributes, maxInstancesPerBuffer, blocksPerInstance) {\n    var templateOptions = (_a = {},\n        _a[template_vars_1.templateVars.attributes] = makeInstanceAttributeReferences(layer, instanceAttributes, blocksPerInstance),\n        _a);\n    var required = {\n        name: 'layer vertex shader',\n        values: [\n            template_vars_1.templateVars.attributes,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(shaders.vs, templateOptions, required);\n    return results.shader;\n    var _a;\n}\n/**\n * This generates the header portion required for vertex picking to work\n */\nfunction generateVertexPicking(layer) {\n    if (layer.picking.type === types_1.PickType.SINGLE) {\n        return require('../fragments/color-picking-vertex-header.vs');\n    }\n    return '';\n}\n/**\n * This generates the fragment that defines the picking methods\n */\nfunction generateFragmentPickingMethod(layer) {\n    if (layer.picking.type === types_1.PickType.SINGLE) {\n        return require('../fragments/color-picking-method.fs');\n    }\n    return require('../fragments/color-picking-disabled.fs');\n}\nfunction generateFragmentShader(shaders) {\n    var templateOptions = {};\n    var required = {\n        name: 'layer fragment shader',\n        values: [],\n    };\n    var results = shader_templating_1.shaderTemplate(shaders.fs, templateOptions, required);\n    return results.shader;\n}\n/**\n * This generates the inline attribute references needed to be able to reference instance attribute\n * vars.\n */\nfunction makeInstanceAttributeReferences(layer, instanceAttributes, blocksPerInstance) {\n    var templateOptions = {};\n    templateOptions[template_vars_1.templateVars.blocksPerInstance] = \"\" + blocksPerInstance;\n    templateOptions[template_vars_1.templateVars.instanceDestructuring] = makeInstanceDestructuring(instanceAttributes, blocksPerInstance);\n    templateOptions[template_vars_1.templateVars.picking] = makePickingDestructuring(layer);\n    var required = {\n        name: 'instance attributes fragment',\n        values: [\n            template_vars_1.templateVars.instanceDestructuring,\n        ],\n    };\n    // If picking is enabled, then we require the picking set up that we inject into the destructuring portion\n    // Of the shader\n    if (layer.picking.type === types_1.PickType.SINGLE) {\n        required.values.push(template_vars_1.templateVars.picking);\n    }\n    var results = shader_templating_1.shaderTemplate(instanceDestructuringArray, templateOptions, required);\n    return results.shader;\n}\n/**\n * This generates an in method destructuring pattern to make instance attributes available within a method.\n */\nfunction makeInstanceDestructuring(instanceAttributes, blocksPerInstance) {\n    return uniform_instance_block_array_1.makeInstanceDestructuringArray(instanceAttributes, blocksPerInstance);\n}\n/**\n * This generates the portion of picking logic that is injected into the destructuring portion of the shader\n */\nfunction makePickingDestructuring(layer) {\n    if (layer.picking.type === types_1.PickType.SINGLE) {\n        return require('../fragments/color-picking-assignment.vs');\n    }\n    return '';\n}\n/**\n * This generates the model attribute declarations\n */\nfunction generateVertexAttributes(vertexAttributes) {\n    var out = '';\n    vertexAttributes.forEach(function (attribute) {\n        out += \"attribute \" + sizeToType[attribute.size] + \" \" + (attribute.qualifier || '') + ((attribute.qualifier && ' ') || '') + attribute.name + \";\\n\";\n    });\n    return out;\n}\n/**\n * This method generates the chunk of shader that is responsible for providing\n */\nfunction generateInstanceDataLookupOptions(layer, templateOptions, instanceAttributes, uniforms) {\n    // This is how many uniform blocks the current device can utilize in a shader\n    var maxUniforms = webgl_stat_1.WebGLStat.MAX_VERTEX_UNIFORMS;\n    // This reflects how many uniform blocks are available for instancing\n    var instanceUniformBlockCount = maxUniforms - calculateUniformBlockUseage(uniforms);\n    // Go through the attributes provided and calculate the number of blocks requested\n    // Also sort the attributes by block and pack the block useage down.\n    var sortedInstanceAttributes = instanceAttributes.slice(0).sort(function (a, b) { return a.block - b.block; });\n    var currentBlock = sortedInstanceAttributes[0].block;\n    var trueBlockIndex = 0;\n    // This tracks how much a block is used\n    var blockUseage = new Map();\n    var innerBlockUseage = new Map();\n    sortedInstanceAttributes.forEach(function (attribute) {\n        if (attribute.block !== currentBlock) {\n            currentBlock = attribute.block;\n            trueBlockIndex++;\n        }\n        var attributeSize = attribute.size;\n        var oldUseage = blockUseage.get(trueBlockIndex) || 0;\n        var newUseage = oldUseage + attributeSize;\n        // Make sure the block isn't over used thus losing attribute information\n        if (newUseage > MAX_USE_PER_BLOCK) {\n            console.error(\"An instance attribute was specified that over fills the maximum allowed useage for a block.\", \"\\nSource Layer: \" + layer.id, \"\\nMax Allowed per block \" + MAX_USE_PER_BLOCK, \"\\nAttribute: \" + attribute.name + \" Block Specified: \" + attribute.block, \"\\nTotal blocks used with this attribute: \" + newUseage);\n            return;\n        }\n        // Store how much of the block is utilized\n        blockUseage.set(trueBlockIndex, newUseage);\n        // We can now auto specify the inner index of where the attribute lines up within the block\n        attribute.blockIndex = oldUseage;\n        // Now we examine the attributes request of use inside the block and make sure there is no\n        // Overlap\n        var innerUseage = innerBlockUseage.get(trueBlockIndex) || new Map();\n        if (attribute.blockIndex + attributeSize > MAX_USE_PER_BLOCK) {\n            console.error(\"An instance attribute was specified that would fill indices greater than the block allows.\", \"\\nMax index per block \" + MAX_USE_PER_BLOCK, \"\\nAttribute: \" + attribute.name + \" Block Index: \" + attribute.blockIndex + \" Size: \" + attribute.size + \" Block Index + Size: \" + (attribute.blockIndex + attribute.size));\n            return;\n        }\n        for (var i = attribute.blockIndex; i < attribute.blockIndex + attributeSize; ++i) {\n            if (innerUseage.get(i)) {\n                console.error(\"An instance attribute was specified who's block index overaps another attributes useage\", \"\\nMax index per block \" + MAX_USE_PER_BLOCK, \"\\nAttribute: \" + attribute.name + \" Block Index: \" + attribute.blockIndex + \" Size: \" + attribute.size + \" Block Index + Size: \" + (attribute.blockIndex + attribute.size));\n                return;\n            }\n        }\n        // Adjust the attribute to reflect the actual bock it is using\n        attribute.block = trueBlockIndex;\n    });\n    var blocksPerInstance = trueBlockIndex + 1;\n    // This determines how many instances our allowed uniforms will allow for a single draw call\n    var maxInstancesPerBuffer = Math.floor(instanceUniformBlockCount / blocksPerInstance);\n    // Generate the decision tree and uniform declarations\n    var instancingMetrics = makeUniformInstanceDataOptions(templateOptions, maxInstancesPerBuffer, blocksPerInstance, sortedInstanceAttributes);\n    return {\n        materialUniforms: instancingMetrics.materialUniforms,\n        metrics: {\n            blocksPerInstance: blocksPerInstance,\n            maxInstancesPerBuffer: maxInstancesPerBuffer,\n        },\n    };\n}\n/**\n * This generates all of the necessary templating information from uniform-instance-data\n * in order to provide an instance data getter for the application.\n */\nfunction makeUniformInstanceDataOptions(templateOptions, maxInstancesPerBuffer, blocksPerInstance, instanceAttributes) {\n    // Make a list containing all instance indicies that will be utilized and will be split\n    // Out into the decision tree\n    var instances = [];\n    for (var i = 0; i < maxInstancesPerBuffer; ++i) {\n        instances.push(i);\n    }\n    // Make the uniform declaration. Uniform declaration simultaneously gives us the material uniforms necessary\n    // To apply to our three material.\n    var uniformMetrics = makeInstanceUniformDeclaration(maxInstancesPerBuffer * blocksPerInstance, instanceAttributes);\n    templateOptions[template_vars_1.templateVars.instanceUniformDeclarations] = uniformMetrics.fragment;\n    templateOptions[template_vars_1.templateVars.instanceBlockCount] = \"\" + blocksPerInstance;\n    // This method produces the data retrieval method for array instancing\n    templateOptions[template_vars_1.templateVars.instanceDataRetrieval] = uniform_instance_block_array_1.makeInstanceRetrievalArray(blocksPerInstance);\n    return {\n        materialUniforms: uniformMetrics.materialUniforms,\n    };\n}\n/**\n * This generates the declaration of all of the individual uniform registers for instancing.\n */\nfunction makeInstanceUniformDeclaration(instanceUniformBlockCount, attributes) {\n    var out = '';\n    var blockQualifierDedup = new Map();\n    var maxBlock = 0;\n    // Dedup the attributes specified for the\n    attributes.forEach(function (attribute) {\n        var qualifiers = blockQualifierDedup.get(attribute.block) || new Map();\n        // Make sure the qualifier is added for the block\n        qualifiers.set(attribute.qualifier, true);\n        // Get the max block in use\n        maxBlock = Math.max(maxBlock, attribute.block);\n    });\n    // Generate the full string for the specified qualifiers\n    var blockQualifiers = new Map();\n    blockQualifierDedup.forEach(function (qualifierList, block) {\n        var allQualifiers = Array.from(qualifierList.keys());\n        blockQualifiers.set(block, allQualifiers.join(' ') + \" \");\n    });\n    // Generate our uniform declarations\n    // Const blockCount = maxBlock + 1;\n    // This method produces the instancing declaration for a search tree.\n    // *out += makeUniformDecisionTreeDeclarations(instanceUniformBlockCount, blockCount, blockQualifiers, materialUniforms);\n    // This method produces the instancing declaration for an instancing array\n    var declaration = uniform_instance_block_array_1.makeUniformArrayDeclaration(instanceUniformBlockCount);\n    out += declaration.fragment;\n    out += \"\\n\";\n    return {\n        fragment: out,\n        materialUniforms: declaration.materialUniforms,\n    };\n}\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar three_1 = require(\"three\");\nvar images_1 = require(\"../base-layers/images\");\nvar labels_1 = require(\"../base-layers/labels\");\nvar bounds_1 = require(\"../primitives/bounds\");\nvar attribute_generation_1 = require(\"../shaders/util/attribute-generation\");\nvar generate_default_scene_1 = require(\"../surface/generate-default-scene\");\nvar generate_layer_geometry_1 = require(\"../surface/generate-layer-geometry\");\nvar generate_layer_material_1 = require(\"../surface/generate-layer-material\");\nvar generate_layer_model_1 = require(\"../surface/generate-layer-model\");\nvar inject_shader_io_1 = require(\"../surface/inject-shader-io\");\nvar mouse_event_manager_1 = require(\"../surface/mouse-event-manager\");\nvar scene_1 = require(\"../surface/scene\");\nvar view_1 = require(\"../surface/view\");\nvar types_1 = require(\"../types\");\nvar color_picking_analysis_1 = require(\"../util/color-picking-analysis\");\nvar data_bounds_1 = require(\"../util/data-bounds\");\nvar instance_uniform_manager_1 = require(\"../util/instance-uniform-manager\");\nvar layer_mouse_events_1 = require(\"./event-managers/layer-mouse-events\");\nvar texture_1 = require(\"./texture\");\nvar atlas_resource_manager_1 = require(\"./texture/atlas-resource-manager\");\nvar DEFAULT_BACKGROUND_COLOR = new Three.Color(1.0, 1.0, 1.0);\nfunction isCanvas(val) {\n    return Boolean(val.getContext);\n}\nfunction isString(val) {\n    return Boolean(val.substr);\n}\nfunction isWebGLContext(val) {\n    return Boolean(val.canvas);\n}\n/**\n * Used for reactive layer generation and updates.\n */\nfunction createLayer(layerClass, props) {\n    return [layerClass, props];\n}\nexports.createLayer = createLayer;\n/**\n * This is a manager for layers. It will use voidgl layers to intelligently render resources\n * as efficiently as possible. Layers will be rendered in the order they are provided and this\n * surface will provide some basic camera controls by default.\n */\nvar LayerSurface = /** @class */ (function () {\n    function LayerSurface() {\n        /** This is the atlas manager that will help with modifying and tracking atlas' generated for the layers */\n        this.atlasManager = new texture_1.AtlasManager();\n        /** This is the current viewport the renderer state is in */\n        this.currentViewport = new Map();\n        /** This is all of the layers in this manager by their id */\n        this.layers = new Map();\n        /** This is the density the rendering renders for the surface */\n        this.pixelRatio = window.devicePixelRatio;\n        /**\n         * This is all of the available scenes and their views for this surface. Layers reference the IDs\n         * of the scenes and the views to be a part of their rendering state.\n         */\n        this.scenes = new Map();\n        /**\n         * This is all of the views currently generated for this surface paired with the scene they render.\n         */\n        this.sceneViews = [];\n        /**\n         * This flags all layers by id for disposal at the end of every render. A Layer must be recreated\n         * after each render in order to clear it's disposal flag. This is the trick to making this a\n         * reactive system.\n         */\n        this.willDisposeLayer = new Map();\n        /**\n         * This is used to help resolve concurrent draws. There are some very async operations that should\n         * not overlap in draw calls.\n         */\n        this.isBufferingAtlas = false;\n    }\n    Object.defineProperty(LayerSurface.prototype, \"gl\", {\n        /** Read only getter for the gl context */\n        get: function () {\n            return this.context;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This adds a layer to the manager which will manage all of the resource lifecycles of the layer\n     * as well as additional helper injections to aid in instancing and shader i/o.\n     */\n    LayerSurface.prototype.addLayer = function (layer) {\n        if (!layer.id) {\n            console.warn('All layers must have an id');\n            return layer;\n        }\n        if (this.layers.get(layer.id)) {\n            console.warn('All layer\\'s ids must be unique per layer manager');\n            return layer;\n        }\n        // We add the layer to our management\n        this.layers.set(layer.id, layer);\n        // Now we initialize the layer's gl components\n        this.initLayer(layer);\n        return layer;\n    };\n    /**\n     * Free all resources consumed by this surface that gets applied to the GPU.\n     */\n    LayerSurface.prototype.destroy = function () {\n        this.layers.forEach(function (layer) { return layer.destroy(); });\n        this.resourceManager.destroy();\n        this.mouseManager.destroy();\n        this.sceneViews.forEach(function (sceneView) { return sceneView.scene.destroy(); });\n        this.renderer.dispose();\n        this.pickingRenderer.dispose();\n        this.currentViewport.clear();\n        // TODO: Instances should be implementing destroy for these clean ups.\n        labels_1.LabelInstance.destroy();\n        images_1.ImageInstance.destroy();\n    };\n    /**\n     * This is the draw loop that must be called per frame for updates to take effect and display.\n     */\n    LayerSurface.prototype.draw = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var scenes, i, end, scene, views, layers, k, endk, view, pickingPass, j, endj, layer, mouse, views_1, flags, j, endj, layer, pickWidth, pickHeight, numBytesPerColor, out, pickingData, j, endj, layer, didBuffer;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        scenes = Array.from(this.scenes.values());\n                        // Loop through scenes\n                        for (i = 0, end = scenes.length; i < end; ++i) {\n                            scene = scenes[i];\n                            views = Array.from(scene.viewById.values());\n                            layers = scene.layers;\n                            // Make sure the layers are depth sorted\n                            scene.sortLayers();\n                            // Loop through the views\n                            for (k = 0, endk = views.length; k < endk; ++k) {\n                                view = views[k];\n                                pickingPass = [];\n                                // We must perform any operations necessary to make the view camera fit the viewport\n                                // Correctly\n                                view.fitViewtoViewport(new bounds_1.Bounds({\n                                    height: this.context.canvas.height,\n                                    width: this.context.canvas.width,\n                                    x: 0,\n                                    y: 0,\n                                }));\n                                // Let the layers update their uniforms before the draw\n                                for (j = 0, endj = layers.length; j < endj; ++j) {\n                                    layer = layers[j];\n                                    // Update the layer with the view it is about to be rendered with\n                                    layer.view = view;\n                                    // Make sure the layer is given the opportunity to update all of it's uniforms\n                                    // To match the view state and update any unresolved diffs internally\n                                    layer.draw();\n                                    // If this layer specifies a picking draw pass, then we shall store it in the current draw order\n                                    // For that next step\n                                    if (layer.picking.type === types_1.PickType.SINGLE) {\n                                        pickingPass.push(layer);\n                                    }\n                                }\n                                // Now perform the rendering\n                                this.drawSceneView(scene.container, view);\n                                // If a layer needs a picking pass, then perform a picking draw pass only\n                                // if a request for the color pick has been made, then we query the pixels rendered to our picking target\n                                if (pickingPass.length > 0 && this.updateColorPick) {\n                                    mouse = this.updateColorPick.mouse;\n                                    views_1 = this.updateColorPick.views;\n                                    // Only if the view is interacted with should we both with rendering\n                                    if (view.id !== this.defaultSceneElements.view.id && views_1.indexOf(view) > -1) {\n                                        // Picking uses a pixel ratio of 1\n                                        view.pixelRatio = 1.0;\n                                        flags = view.clearFlags.slice(0);\n                                        // Set color rendering flasg\n                                        view.clearFlags = [view_1.ClearFlags.COLOR, view_1.ClearFlags.DEPTH];\n                                        // We must perform any operations necessary to make the view camera fit the viewport\n                                        // Correctly with the possibly adjusted pixel ratio\n                                        view.fitViewtoViewport(new bounds_1.Bounds({\n                                            height: this.context.canvas.height / this.pixelRatio,\n                                            width: this.context.canvas.width / this.pixelRatio,\n                                            x: 0,\n                                            y: 0,\n                                        }));\n                                        // We must redraw the layers so they will update their uniforms to adapt to a picking pass\n                                        for (j = 0, endj = pickingPass.length; j < endj; ++j) {\n                                            layer = pickingPass[j];\n                                            layer.picking.currentPickMode = types_1.PickType.SINGLE;\n                                            layer.draw();\n                                            layer.picking.currentPickMode = types_1.PickType.NONE;\n                                        }\n                                        // Draw the picking container for the scene with our view long with our specialized picking renderer\n                                        // NOTE: Neat trick, just remove 'this.pickingTarget' from the argument and add\n                                        // canvas.parentNode.appendChild(this.pickingRenderer.getContext().canvas);\n                                        // below where the picking Target is created and you will see what is being rendered to the color picking buffer\n                                        this.drawSceneView(scene.pickingContainer, view, this.pickingRenderer, this.pickingTarget);\n                                        pickWidth = 5;\n                                        pickHeight = 5;\n                                        numBytesPerColor = 4;\n                                        out = new Uint8Array(pickWidth * pickHeight * numBytesPerColor);\n                                        // Read the pixels out\n                                        this.pickingRenderer.readRenderTargetPixels(this.pickingTarget, mouse[0] - view.screenBounds.x - pickWidth / 2, view.screenBounds.height - (mouse[1] - view.screenBounds.y) - pickHeight / 2, pickWidth, pickHeight, out);\n                                        pickingData = color_picking_analysis_1.analyzeColorPickingRendering(mouse, out, pickWidth, pickHeight);\n                                        // We must redraw the layers so they will update their uniforms to adapt to a picking pass\n                                        for (j = 0, endj = pickingPass.length; j < endj; ++j) {\n                                            layer = pickingPass[j];\n                                            if (layer.picking.type === types_1.PickType.SINGLE) {\n                                                layer.interactions.colorPicking = pickingData;\n                                            }\n                                        }\n                                        // Return the pixel ratio back to the rendered ratio\n                                        view.pixelRatio = this.pixelRatio;\n                                        // Return the view's clear flags\n                                        view.clearFlags = flags;\n                                        // After reverting the pixel ratio, we must return to the state we came from so that mouse interactions\n                                        // will work properly\n                                        view.fitViewtoViewport(new bounds_1.Bounds({\n                                            height: this.context.canvas.height,\n                                            width: this.context.canvas.width,\n                                            x: 0,\n                                            y: 0,\n                                        }));\n                                    }\n                                }\n                            }\n                        }\n                        // After we have drawn our views of our scenes, we can now ensure all of the bounds\n                        // Are updated in the interactions and flag our interactions ready for mouse input\n                        if (this.mouseManager.waitingForRender) {\n                            this.sceneViews.forEach(function (sceneView) {\n                                sceneView.bounds = new data_bounds_1.DataBounds(sceneView.view.screenBounds);\n                                sceneView.bounds.data = sceneView;\n                            });\n                            this.mouseManager.waitingForRender = false;\n                        }\n                        if (!!this.isBufferingAtlas) return [3 /*break*/, 2];\n                        this.isBufferingAtlas = true;\n                        return [4 /*yield*/, this.resourceManager.dequeueRequests()];\n                    case 1:\n                        didBuffer = _a.sent();\n                        this.isBufferingAtlas = false;\n                        // If buffering did occur and completed, then we should be performing a draw to ensure all of the\n                        // Changes are committed and pushed out.\n                        if (didBuffer)\n                            this.draw();\n                        _a.label = 2;\n                    case 2:\n                        // Clear out the flag requesting a pick pass so we don't perform a pick render pass unless we have\n                        // another requested from mouse interactions\n                        delete this.updateColorPick;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This finalizes everything and sets up viewports and clears colors and performs the actual render step\n     */\n    LayerSurface.prototype.drawSceneView = function (scene, view, renderer, target) {\n        renderer = renderer || this.renderer;\n        var offset = { x: view.viewBounds.left, y: view.viewBounds.top };\n        var size = view.viewBounds;\n        var rendererSize = renderer.getSize();\n        var pixelRatio = renderer.getPixelRatio();\n        rendererSize.width *= pixelRatio;\n        rendererSize.height *= pixelRatio;\n        var background = view.background;\n        var context = renderer.getContext();\n        // Something is up with threejs that does not allow us to set viewport x and y values. So for targets\n        // We simply size the target to the view size and render. Thus scissoring is not required\n        if (!target) {\n            // Set the scissor rectangle.\n            context.enable(context.SCISSOR_TEST);\n            context.scissor(offset.x, rendererSize.height - offset.y - size.height, size.width, size.height);\n            // If a background is established, we should clear the background color\n            // Specified for this context\n            if (view.background) {\n                // Clear the rect of color and depth so the region is totally it's own\n                context.clearColor(background[0], background[1], background[2], background[3]);\n            }\n        }\n        // Get the view's clearing preferences\n        if (view.clearFlags) {\n            // For targets, we must also perform clear operations\n            if (target) {\n                // TODO: This is frustrating. Right now we can't specify and set the viewport for a render target\n                // Possibly with Threejs going away we can actually be more explcit for the render area to a render target\n                // and not cause this overhead of resizing the render target for every picking pass\n                target.setSize(size.width, size.height);\n                renderer.setRenderTarget(target);\n                renderer.clear(view.clearFlags.indexOf(view_1.ClearFlags.COLOR) > -1, view.clearFlags.indexOf(view_1.ClearFlags.DEPTH) > -1, view.clearFlags.indexOf(view_1.ClearFlags.STENCIL) > -1);\n            }\n            else {\n                renderer.getContext().clear((view.clearFlags.indexOf(view_1.ClearFlags.COLOR) > -1 ? context.COLOR_BUFFER_BIT : 0x0) |\n                    (view.clearFlags.indexOf(view_1.ClearFlags.DEPTH) > -1 ? context.DEPTH_BUFFER_BIT : 0x0) |\n                    (view.clearFlags.indexOf(view_1.ClearFlags.STENCIL) > -1 ? context.STENCIL_BUFFER_BIT : 0x0));\n            }\n        }\n        // Default clearing is depth and color\n        else {\n            // For targets, we must also perform clear operations\n            if (target) {\n                // TODO: This is frustrating. Right now we can't specify and set the viewport for a render target\n                // Possibly with Threejs going away we can actually be more explcit for the render area to a render target\n                // and not cause this overhead of resizing the render target for every picking pass\n                target.setSize(size.width, size.height);\n                renderer.setRenderTarget(target);\n                renderer.clear(true, true);\n            }\n            else {\n                context.clear(context.COLOR_BUFFER_BIT | context.DEPTH_BUFFER_BIT);\n            }\n        }\n        // Make sure the viewport is set properly for the next render\n        renderer.setViewport(offset.x / pixelRatio, offset.y / pixelRatio, size.width, size.height);\n        // Render the scene with the provided view metrics\n        renderer.render(scene, view.viewCamera.baseCamera, target);\n    };\n    /**\n     * This allows for querying a view's screen bounds. Null is returned if the view id\n     * specified does not exist.\n     */\n    LayerSurface.prototype.getViewSize = function (viewId) {\n        for (var _i = 0, _a = this.sceneViews; _i < _a.length; _i++) {\n            var sceneView = _a[_i];\n            if (sceneView.view.id === viewId) {\n                return sceneView.view.screenBounds;\n            }\n        }\n        return null;\n    };\n    /**\n     * This queries a view's window into a world's space.\n     */\n    LayerSurface.prototype.getViewWorldBounds = function (viewId) {\n        for (var _i = 0, _a = this.sceneViews; _i < _a.length; _i++) {\n            var sceneView = _a[_i];\n            if (sceneView.view.id === viewId) {\n                var view = sceneView.view;\n                if (view.screenBounds) {\n                    var topLeft = view.viewToWorld({ x: 0, y: 0 });\n                    var bottomRight = view.screenToWorld({ x: view.screenBounds.right, y: view.screenBounds.bottom });\n                    return new bounds_1.Bounds({\n                        bottom: bottomRight.y,\n                        left: topLeft.x,\n                        right: bottomRight.x,\n                        top: topLeft.y,\n                    });\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n        return null;\n    };\n    /**\n     * This is the beginning of the system. This should be called immediately after the surface is constructed.\n     * We make this mandatory outside of the constructor so we can make it follow an async pattern.\n     */\n    LayerSurface.prototype.init = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Make sure our desired pixel ratio is set up\n                        this.pixelRatio = options.pixelRatio || this.pixelRatio;\n                        // Make sure we have a gl context to work with\n                        this.setContext(options.context);\n                        // Initialize our GL needs that set the basis for rendering\n                        this.initGL(options);\n                        // Initialize our event manager that handles mouse interactions/gestures with the canvas\n                        this.initMouseManager(options);\n                        // Initialize any resources requested or needed, such as textures or rendering surfaces\n                        return [4 /*yield*/, this.initResources(options)];\n                    case 1:\n                        // Initialize any resources requested or needed, such as textures or rendering surfaces\n                        _a.sent();\n                        return [2 /*return*/, this];\n                }\n            });\n        });\n    };\n    /**\n     * This initializes the Canvas GL contexts needed for rendering.\n     */\n    LayerSurface.prototype.initGL = function (options) {\n        var _this = this;\n        if (!this.context) {\n            console.error('Can not initialize Layer Surface as a valid GL context was not established.');\n            return;\n        }\n        // Get the canvas of our context to set up our Three settings\n        var canvas = this.context.canvas;\n        // Get the starting width and height so adjustments don't affect it\n        var width = canvas.width;\n        var height = canvas.height;\n        // Generate the renderer along with it's properties\n        this.renderer = new Three.WebGLRenderer({\n            // Context supports rendering to an alpha canvas only if the background color has a transparent\n            // Alpha value.\n            alpha: options.background && (options.background[3] < 1.0),\n            // Yes to antialias! Make it preeeeetty!\n            antialias: true,\n            // Make three use an existing canvas rather than generate another\n            canvas: canvas,\n            // TODO: This should be toggleable. If it's true it allows us to snapshot the rendering in the canvas\n            //       But we dont' always want it as it makes performance drop a bit.\n            preserveDrawingBuffer: true,\n        });\n        // Generate a renderer for the picking pass\n        this.pickingRenderer = new Three.WebGLRenderer({\n            // Context supports rendering to an alpha canvas only if the background color has a transparent\n            // Alpha value.\n            alpha: false,\n            // Picking shall not\n            antialias: false,\n            // Do not need this for picking\n            preserveDrawingBuffer: true,\n        });\n        // NOTE: Uncomment this plus remove this.pickingTarget from the drawSceneView of the color picking pass\n        // to view the colors rendered to the color picking buffer. This disables the interactions but helps\n        // debug what's going on with shaders etc\n        // canvas.parentNode.appendChild(this.pickingRenderer.getContext().canvas);\n        // We want clearing to be controlled via the layer\n        this.renderer.autoClear = false;\n        // Charts don't really have face culling. Just 2D shapes\n        this.renderer.setFaceCulling(Three.CullFaceNone);\n        // This sets the pixel ratio to handle differing pixel densities in screens\n        this.setRendererSize(width, height);\n        // Set the pixel ratio to match the pixel density of the monitor in use\n        this.renderer.setPixelRatio(this.pixelRatio);\n        // Applies the background color and establishes whether or not the context supports\n        // Alpha or not\n        if (options.background) {\n            this.renderer.setClearColor(new Three.Color(options.background[0], options.background[1], options.background[2]), options.background[3]);\n        }\n        // If a background color was not established, then we set a default background color\n        else {\n            this.renderer.setClearColor(DEFAULT_BACKGROUND_COLOR);\n        }\n        // We want clearing to be controlled via the layer\n        this.pickingRenderer.autoClear = false;\n        // Charts don't really have face culling. Just 2D shapes\n        this.pickingRenderer.setFaceCulling(Three.CullFaceNone);\n        // Picking does not need retina style precision\n        this.pickingRenderer.setPixelRatio(1.0);\n        // Applies the background color and establishes whether or not the context supports\n        // Alpha or not\n        this.pickingRenderer.setClearColor(new Three.Color(0, 0, 0), 1);\n        // Once we have made our renderer we now make us a default scene to which we can add objects\n        this.defaultSceneElements = generate_default_scene_1.generateDefaultScene(this.context);\n        this.defaultSceneElements.view.background = options.background;\n        // Set the default scene\n        this.scenes.set(this.defaultSceneElements.scene.id, this.defaultSceneElements.scene);\n        // Make a scene view depth tracker so we can track the order each scene view combo is drawn\n        var sceneViewDepth = 0;\n        // Make a SceneView for the default scene and view for mouse interactions\n        this.sceneViews.push({\n            depth: ++sceneViewDepth,\n            scene: this.defaultSceneElements.scene,\n            view: this.defaultSceneElements.view,\n        });\n        // Turn on the scissor test to keep the rendering clipped within the\n        // Render region of the context\n        this.context.enable(this.context.SCISSOR_TEST);\n        // Add the requested scenes to the surface and apply the necessary defaults\n        if (options.scenes) {\n            options.scenes.forEach(function (sceneOptions) {\n                // Make us a new scene based on the requested options\n                var newScene = new scene_1.Scene(sceneOptions);\n                // Make sure the default view is available for each scene\n                // IFF no view is provided for the scene\n                if (sceneOptions.views.length === 0) {\n                    newScene.addView(_this.defaultSceneElements.view);\n                    _this.sceneViews.push({\n                        depth: ++sceneViewDepth,\n                        scene: newScene,\n                        view: _this.defaultSceneElements.view,\n                    });\n                }\n                // Generate the views requested for the scene\n                sceneOptions.views.forEach(function (viewOptions) {\n                    var newView = new view_1.View(viewOptions);\n                    newView.camera = newView.camera || _this.defaultSceneElements.camera;\n                    newView.viewCamera = newView.viewCamera || _this.defaultSceneElements.viewCamera;\n                    newView.viewport = newView.viewport || _this.defaultSceneElements.viewport;\n                    newView.pixelRatio = _this.pixelRatio;\n                    newScene.addView(newView);\n                    for (var _i = 0, _a = _this.sceneViews; _i < _a.length; _i++) {\n                        var sceneView = _a[_i];\n                        if (sceneView.view.id === newView.id) {\n                            console.warn('You can NOT have two views with the same id. Please use unique identifiers for every view generated.');\n                        }\n                    }\n                    _this.sceneViews.push({\n                        depth: ++sceneViewDepth,\n                        scene: newScene,\n                        view: newView,\n                    });\n                });\n                _this.scenes.set(sceneOptions.key, newScene);\n            });\n        }\n    };\n    /**\n     * This does special initialization by gathering the layers shader IO, generates a material\n     * and injects special automated uniforms and attributes to make instancing work for the\n     * shader.\n     */\n    LayerSurface.prototype.initLayer = function (layer) {\n        // Set the resource manager this surface utilizes to the layer\n        layer.resource = this.resourceManager;\n        // For the sake of initializing uniforms to the correct values, we must first add the layer to it's appropriate\n        // Scene so that the necessary values will be in place for the sahder IO\n        var scene = this.addLayerToScene(layer);\n        // Get the shader metrics the layer desires\n        var shaderIO = layer.initShader();\n        // Clean out nulls provided as a convenience to the layer\n        shaderIO.instanceAttributes = shaderIO.instanceAttributes.filter(Boolean);\n        shaderIO.vertexAttributes = shaderIO.vertexAttributes.filter(Boolean);\n        shaderIO.uniforms = shaderIO.uniforms.filter(Boolean);\n        // Get the injected shader IO attributes and uniforms\n        var _a = inject_shader_io_1.injectShaderIO(layer, shaderIO), vertexAttributes = _a.vertexAttributes, instanceAttributes = _a.instanceAttributes, uniforms = _a.uniforms;\n        // Generate the actual shaders to be used by injecting all of the necessary fragments and injecting\n        // Instancing fragments\n        var shaderMetrics = attribute_generation_1.injectFragments(layer, shaderIO, vertexAttributes, instanceAttributes, uniforms);\n        // Generate the geometry this layer will be utilizing\n        var geometry = generate_layer_geometry_1.generateLayerGeometry(shaderMetrics.maxInstancesPerBuffer, vertexAttributes, shaderIO.vertexCount);\n        // This is the material that is generated for the layer that utilizes all of the generated and\n        // Injected shader IO and shader fragments\n        var material = generate_layer_material_1.generateLayerMaterial(layer, shaderMetrics.vs, shaderMetrics.fs, uniforms, shaderMetrics.materialUniforms);\n        // And now we can now generate the mesh that will be added to the scene\n        var model = generate_layer_model_1.generateLayerModel(layer, geometry, material);\n        // Now that all of the elements of the layer are complete, let us apply them to the layer\n        layer.geometry = geometry;\n        layer.instanceAttributes = instanceAttributes;\n        layer.instanceVertexCount = shaderIO.vertexCount;\n        layer.material = material;\n        layer.maxInstancesPerBuffer = shaderMetrics.maxInstancesPerBuffer;\n        layer.model = model;\n        layer.uniforms = uniforms;\n        layer.vertexAttributes = vertexAttributes;\n        // The layer now needs a specialized uniform manager to provide instances with an appropriate set of uniforms\n        // To be able to render.\n        layer.uniformManager = new instance_uniform_manager_1.InstanceUniformManager(layer, scene);\n        return layer;\n    };\n    /**\n     * Initializes elements for handling mouse interactions with the canvas.\n     */\n    LayerSurface.prototype.initMouseManager = function (options) {\n        // We must inject an event manager to broadcast events through the layers themselves\n        var eventManagers = [\n            new layer_mouse_events_1.LayerMouseEvents(this),\n        ].concat(options.eventManagers || []);\n        // Generate the mouse manager for the layer\n        this.mouseManager = new mouse_event_manager_1.MouseEventManager(this.context.canvas, this.sceneViews, eventManagers, options.handlesWheelEvents);\n    };\n    /**\n     * This initializes resources needed or requested such as textures or render surfaces.\n     */\n    LayerSurface.prototype.initResources = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _i, _a, resource;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!options.atlasResources) return [3 /*break*/, 4];\n                        _i = 0, _a = options.atlasResources;\n                        _b.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3 /*break*/, 4];\n                        resource = _a[_i];\n                        return [4 /*yield*/, this.atlasManager.createAtlas(resource)];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        // Initialize our resource manager with the atlas manager\n                        this.resourceManager = new atlas_resource_manager_1.AtlasResourceManager({\n                            atlasManager: this.atlasManager,\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This finds the scene and view the layer belongs to based on the layer's props. For invalid or not provided\n     * props, the layer gets added to default scenes and views.\n     */\n    LayerSurface.prototype.addLayerToScene = function (layer) {\n        // Get the scene the layer will add itself to\n        var scene = this.scenes.get(layer.props.scene);\n        if (!scene) {\n            // If no scene is specified by the layer, or the scene identifier is invalid, then we add the layer\n            // To the default scene.\n            scene = this.defaultSceneElements.scene;\n            if (layer.props.scene) {\n                console.warn('Layer specified a scene that is not within the layer surface manager. Layer will be added to the default scene.');\n            }\n        }\n        // Add the layer to the scene for rendering\n        scene.addLayer(layer);\n        return scene;\n    };\n    /**\n     * Discontinues a layer's management by this surface. This will invalidate any resources\n     * the layer was using in association with the context. If the layer is re-insertted, it will\n     * be revaluated as though it were a new layer.\n     */\n    LayerSurface.prototype.removeLayer = function (layer) {\n        // Make sure we are removing a layer that exists in the system\n        if (!this.layers.get(layer && layer.id)) {\n            console.warn('Tried to remove a layer that is not in the manager.', layer);\n            return layer;\n        }\n        layer.uniformManager.removeFromScene();\n        layer.destroy();\n        this.layers.delete(layer.id);\n        return layer;\n    };\n    /**\n     * Used for reactive rendering and diffs out the layers for changed layers.\n     */\n    LayerSurface.prototype.render = function (layerInitializers) {\n        var _this = this;\n        // Loop through all of the initializers and properly add and remove layers as needed\n        if (layerInitializers && layerInitializers.length > 0) {\n            layerInitializers.forEach(function (init) {\n                var layerClass = init[0];\n                var props = init[1];\n                var existingLayer = _this.layers.get(props.key);\n                if (existingLayer) {\n                    existingLayer.willUpdateProps(props);\n                    Object.assign(existingLayer.props, props);\n                    existingLayer.didUpdateProps();\n                }\n                else {\n                    _this.addLayer(new layerClass(Object.assign({}, layerClass.defaultProps, props)));\n                }\n                _this.willDisposeLayer.set(props.key, false);\n            });\n        }\n        // Take any layer that retained it's disposal flag and trash it\n        this.willDisposeLayer.forEach(function (dispose, layerId) {\n            if (dispose) {\n                _this.removeLayer(_this.layers.get(layerId));\n            }\n        });\n        // Resolve that all disposals occurred\n        this.willDisposeLayer.clear();\n        // Reflag every layer for removal again so creation of layers will determine\n        // Which layers remain for a reactive pattern\n        this.layers.forEach(function (layer, id) {\n            _this.willDisposeLayer.set(id, true);\n        });\n    };\n    /**\n     * This must be executed when the canvas changes size so that we can re-calculate the scenes and views\n     * dimensions for handling all of our rendered elements.\n     */\n    LayerSurface.prototype.fitContainer = function (pixelRatio) {\n        var container = this.context.canvas.parentElement;\n        if (container) {\n            var canvas = this.context.canvas;\n            canvas.className = '';\n            canvas.setAttribute('style', '');\n            container.style.position = 'relative';\n            canvas.style.position = 'absolute';\n            canvas.style.left = '0xp';\n            canvas.style.top = '0xp';\n            canvas.style.width = '100%';\n            canvas.style.height = '100%';\n            canvas.setAttribute('width', '');\n            canvas.setAttribute('height', '');\n            var containerBox = container.getBoundingClientRect();\n            var box = canvas.getBoundingClientRect();\n            this.resize(box.width || 100, containerBox.height || 100);\n        }\n    };\n    /**\n     * This resizes the canvas and retains pixel ratios amongst all of the resources involved.\n     */\n    LayerSurface.prototype.resize = function (width, height, pixelRatio) {\n        var _this = this;\n        this.pixelRatio = pixelRatio || this.pixelRatio;\n        this.sceneViews.forEach(function (sceneView) { return sceneView.view.pixelRatio = _this.pixelRatio; });\n        this.setRendererSize(width, height);\n        this.renderer.setPixelRatio(this.pixelRatio);\n        this.pickingRenderer.setPixelRatio(1.0);\n        this.mouseManager.resize();\n    };\n    /**\n     * This establishes the rendering canvas context for the surface.\n     */\n    LayerSurface.prototype.setContext = function (context) {\n        if (!context) {\n            return;\n        }\n        if (isWebGLContext(context)) {\n            this.context = context;\n        }\n        else if (isCanvas(context)) {\n            this.context = context.getContext('webgl') || context.getContext('experimental-webgl');\n        }\n        else if (isString(context)) {\n            var element = document.getElementById(context);\n            if (isCanvas(element)) {\n                this.setContext(element);\n            }\n        }\n    };\n    /**\n     * This applies a new size to the renderer and resizes any additional resources that requires being\n     * sized along with the renderer.\n     */\n    LayerSurface.prototype.setRendererSize = function (width, height) {\n        width = width || 100;\n        height = height || 100;\n        this.renderer.setSize(width, height);\n        this.pickingRenderer.setSize(width, height);\n        if (!this.pickingTarget) {\n            this.pickingTarget = new three_1.WebGLRenderTarget(width, height, {\n                magFilter: Three.LinearFilter,\n                minFilter: Three.LinearFilter,\n                stencilBuffer: false,\n            });\n        }\n        this.pickingTarget.setSize(width, height);\n    };\n    /**\n     * This triggers an update to all of the layers that perform picking, the pixel data\n     * within the specified mouse range.\n     */\n    LayerSurface.prototype.updateColorPickRange = function (mouse, views) {\n        // We will flag the color range as needing an update\n        this.updateColorPick = {\n            mouse: mouse,\n            views: views,\n        };\n    };\n    return LayerSurface;\n}());\nexports.LayerSurface = LayerSurface;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./layer-surface\"));\n__export(require(\"./event-manager\"));\n__export(require(\"./generate-default-scene\"));\n__export(require(\"./generate-layer-geometry\"));\n__export(require(\"./generate-layer-material\"));\n__export(require(\"./generate-layer-model\"));\n__export(require(\"./inject-shader-io\"));\n__export(require(\"./layer\"));\n__export(require(\"./mouse-event-manager\"));\n__export(require(\"./scene\"));\n__export(require(\"./texture\"));\n__export(require(\"./view\"));\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float borderSize;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  vertexColor = color;\\n  gl_PointSize = radius * 2.0 * pixelRatio;\\n  borderSize = ((thickness * pixelRatio) / gl_PointSize) * 2.0;\\n  edgeSharpness = mix(0.8, 0.01, min(gl_PointSize / (45.0 * pixelRatio), 1.0));\\n  gl_Position = clipSpace(vec3(center, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\n\\n/** This is the color of the ring */\\nvarying vec4 vertexColor;\\n/**\\n * This is how sharp the ring renders. For tiny rings, it's best to have\\n * less sharpness to better convey the shape of a circle. A good starter setting:\\n * edgeSharpness = mix(0.8, 0.01, min(gl_PointSize / 45.0, 1.0));\\n */\\nvarying float edgeSharpness;\\n/**\\n * This should be a value that sets the thickness of the ring in normal space\\n * relative to the PointSize\\n */\\nvarying float borderSize;\\n/**\\n * This is the ([0 - 1], [0 - 1])\\n */\\nvarying vec2 pointCoord;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius + (radius * 0.01),\\n    dot(dist, dist) * 4.0\\n  );\\n}\\n\\nvoid main() {\\n  float outer_step_factor = circle(gl_PointCoord.xy, 1.0);\\n  float inner_step_factor = circle(gl_PointCoord.xy, 1.0 - borderSize);\\n\\n  setColor(mix(\\n    mix(                        // Select the outer color outside of the inner radius\\n      vec4(0.0, 0.0, 0.0, 0.0),    // Select invisible outside of inner and outer radius\\n      vertexColor,                  // Select outer color outside of inner, but inside outer\\n      outer_step_factor\\n    ),\\n    vec4(0.0, 0.0, 0.0, 0.0),                 // Select inner color inside inner\\n    inner_step_factor\\n  ));\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar max = Math.max;\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar RingLayer = /** @class */ (function (_super) {\n    __extends(RingLayer, _super);\n    function RingLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    RingLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given circle\n            boundsAccessor: function (ring) { return new primitives_1.Bounds({\n                height: ring.radius * 2,\n                width: ring.radius * 2,\n                x: ring.x - ring.radius,\n                y: ring.y - ring.radius,\n            }); },\n            // Provide a precise hit test for the ring\n            hitTest: function (ring, point, view) {\n                var r = ring.radius / max.apply(void 0, view.camera.scale);\n                var delta = [\n                    point.x - ring.x,\n                    point.y - ring.y,\n                ];\n                return (delta[0] * delta[0] + delta[1] * delta[1]) < (r * r);\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    RingLayer.prototype.initShader = function () {\n        return {\n            fs: require('./ring-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'center',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'radius',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.radius]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.color; },\n                },\n                {\n                    block: 2,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'thickness',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.thickness]; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (_) { return [1]; },\n                },\n                {\n                    name: 'atlas',\n                    size: types_1.UniformSize.ONE,\n                    update: function (_) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    defaults: [0],\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (_) { return [0, 0, 0]; },\n                },\n            ],\n            vertexCount: 1,\n            vs: require('./ring-layer.vs'),\n        };\n    };\n    RingLayer.prototype.getModelType = function () {\n        return {\n            modelType: Three.Points,\n        };\n    };\n    RingLayer.prototype.getMaterialOptions = function () {\n        return {\n            transparent: true,\n        };\n    };\n    return RingLayer;\n}(layer_1.Layer));\nexports.RingLayer = RingLayer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar util_1 = require(\"../../util\");\nvar RingInstance = /** @class */ (function (_super) {\n    __extends(RingInstance, _super);\n    function RingInstance(options) {\n        var _this = _super.call(this, options) || this;\n        _this.color = [1.0, 1.0, 1.0, 1.0];\n        _this.depth = 0;\n        _this.radius = 0;\n        _this.thickness = 1;\n        _this.x = 0;\n        _this.y = 0;\n        _this.color = options.color || [1, 1, 1, 1];\n        _this.depth = options.depth || 0;\n        _this.radius = options.radius;\n        _this.thickness = options.thickness || _this.thickness;\n        _this.x = options.x;\n        _this.y = options.y;\n        return _this;\n    }\n    Object.defineProperty(RingInstance.prototype, \"width\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RingInstance.prototype, \"height\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RingInstance.prototype, \"innerRadius\", {\n        get: function () {\n            return this.radius - this.thickness;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        instance_provider_1.observable\n    ], RingInstance.prototype, \"color\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RingInstance.prototype, \"depth\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RingInstance.prototype, \"radius\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RingInstance.prototype, \"thickness\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RingInstance.prototype, \"x\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RingInstance.prototype, \"y\", void 0);\n    return RingInstance;\n}(util_1.Instance));\nexports.RingInstance = RingInstance;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./ring-instance\"));\n__export(require(\"./ring-layer\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar instance_1 = require(\"../../util/instance\");\nvar types_1 = require(\"../types\");\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nvar anchorCalculator = (_a = {},\n    _a[types_1.AnchorType.TopLeft] = function (anchor, rectangle) {\n        anchor.x = -anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopMiddle] = function (anchor, rectangle) {\n        anchor.x = rectangle.width / 2.0;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopRight] = function (anchor, rectangle) {\n        anchor.x = rectangle.width + anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.MiddleLeft] = function (anchor, rectangle) {\n        anchor.x = -anchor.padding;\n        anchor.y = rectangle.height / 2;\n    },\n    _a[types_1.AnchorType.Middle] = function (anchor, rectangle) {\n        anchor.x = rectangle.width / 2.0;\n        anchor.y = rectangle.height / 2.0;\n    },\n    _a[types_1.AnchorType.MiddleRight] = function (anchor, rectangle) {\n        anchor.x = rectangle.width + anchor.padding;\n        anchor.y = rectangle.height / 2.0;\n    },\n    _a[types_1.AnchorType.BottomLeft] = function (anchor, rectangle) {\n        anchor.x = -anchor.padding;\n        anchor.y = rectangle.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomMiddle] = function (anchor, rectangle) {\n        anchor.x = rectangle.width / 2.0;\n        anchor.y = rectangle.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomRight] = function (anchor, rectangle) {\n        anchor.x = rectangle.width + anchor.padding;\n        anchor.y = rectangle.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.Custom] = function (anchor, rectangle) {\n        anchor.x = anchor.x || 0;\n        anchor.y = anchor.y || 0;\n    },\n    _a);\n/**\n * This generates a new rectangle instance which will render a single line of text for a given layer.\n * There are restrictions surrounding rectangles due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a rectangle via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Rectangles should only be so long.\n * - Multiline is not supported inherently\n * - Once a rectangle is constructed, only SOME properties can be altered thereafter\n *\n * A rectangle that is constructed can only have some properties set upon creating the rectangle and are locked\n * thereafter. The only way to modify them would be to destroy the rectangle, then construct a new rectangle\n * with the modifications. This has to deal with performance regarding rasterizing the rectangle\n */\nvar RectangleInstance = /** @class */ (function (_super) {\n    __extends(RectangleInstance, _super);\n    function RectangleInstance(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the rendered color of the rectangle */\n        _this.color = [0, 0, 0, 1];\n        /** Depth sorting of the rectangle (or the z value of the lable) */\n        _this.depth = 0;\n        /** The height of the rectangle as it is to be rendered in world space */\n        _this.height = 1;\n        /** Sets the way the rectangle scales with the world */\n        _this.scaling = types_1.ScaleType.BOUND_MAX;\n        /** The width of the rectangle as it is to be rendered in world space */\n        _this.width = 1;\n        /** The x coordinate where the rectangle will be anchored to in world space */\n        _this.x = 0;\n        /** The y coordinate where the rectangle will be anchored to in world space */\n        _this.y = 0;\n        // These are properties that can be altered, but have side effects from being changed\n        /** This is the anchor location on the  */\n        _this._anchor = {\n            padding: 0,\n            type: types_1.AnchorType.TopLeft,\n            x: 0,\n            y: 0,\n        };\n        _this.depth = options.depth || _this.depth;\n        _this.color = options.color || _this.color;\n        _this.scaling = options.scaling || _this.scaling;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        _this.width = options.width || 1;\n        _this.height = options.height || 1;\n        // Make sure the anchor is set to the appropriate location\n        options.anchor && _this.setAnchor(options.anchor);\n        return _this;\n    }\n    Object.defineProperty(RectangleInstance.prototype, \"anchor\", {\n        get: function () {\n            return this._anchor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This applies a new anchor to this rectangle and properly determines it's anchor position on the rectangle\n     */\n    RectangleInstance.prototype.setAnchor = function (anchor) {\n        var newAnchor = {\n            padding: anchor.padding || 0,\n            type: anchor.type,\n            x: anchor.x || 0,\n            y: anchor.y || 0,\n        };\n        // Calculate the new anchors position values\n        anchorCalculator[newAnchor.type](newAnchor, this);\n        // Apply the anchor\n        this._anchor = newAnchor;\n    };\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"color\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"depth\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"height\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"scaling\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"width\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"x\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"y\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], RectangleInstance.prototype, \"_anchor\", void 0);\n    return RectangleInstance;\n}(instance_1.Instance));\nexports.RectangleInstance = RectangleInstance;\nvar _a;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the image as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the image is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y;\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float((cameraScale.x > cameraScale.y || cameraScale.y > cameraScale.x) && useScaleMode != 0.0);\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n  // Apply the image's tint as a tint to the image\\n  vertexColor = color * color.a;\\n\\n  // Correct aspect ratio.\\n  size = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * size + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the image\\n  float imageScreenScale = mix(\\n    screenSize.y / size.y,\\n    screenSize.x / size.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the image is supposed to be, then we automagically\\n  // scale down our image to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / imageScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\n\\nvoid main() {\\n  setColor(vertexColor);\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar types_2 = require(\"../types\");\nvar min = Math.min, max = Math.max;\n/**\n * This layer displays Rectangles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar RectangleLayer = /** @class */ (function (_super) {\n    __extends(RectangleLayer, _super);\n    function RectangleLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    RectangleLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given rectangle\n            boundsAccessor: function (rectangle) {\n                var topLeft = [\n                    rectangle.x - rectangle.anchor.x,\n                    rectangle.y - rectangle.anchor.y,\n                ];\n                return new primitives_1.Bounds({\n                    height: rectangle.height,\n                    width: rectangle.width,\n                    x: topLeft[0],\n                    y: topLeft[1],\n                });\n            },\n            // Provide a precise hit test for the circle\n            hitTest: function (rectangle, point, projection) {\n                // The bounds of the rectangle is in world space, but it does not account for the scale mode of the rectangle.\n                // Here, we will apply the scale mode testing to the rectangle\n                var maxScale = max.apply(void 0, projection.camera.scale);\n                var minScale = min.apply(void 0, projection.camera.scale);\n                // If we scale always then the rectangle stays within it's initial world bounds at all times\n                if (rectangle.scaling === types_2.ScaleType.ALWAYS) {\n                    return true;\n                }\n                // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n                // Rectangle the same size. If the camera zooms out then the bounds === the world bounds.\n                else if (rectangle.scaling === types_2.ScaleType.BOUND_MAX) {\n                    // We are zooming out. the bounds will stay within the world bounds\n                    if (minScale <= 1 && maxScale <= 1) {\n                        return true;\n                    }\n                    // We are zooming in. The bounds will shrink to keep the rectangle at max font size\n                    else {\n                        // The location is within the world, but we reverse project the anchor spread\n                        var topLeft = [\n                            rectangle.x - (rectangle.anchor.x / maxScale),\n                            rectangle.y - (rectangle.anchor.y / maxScale),\n                        ];\n                        // Reverse project the size and we should be within the distorted world coordinates\n                        return new primitives_1.Bounds({\n                            height: rectangle.height / maxScale,\n                            width: rectangle.width / maxScale,\n                            x: topLeft[0],\n                            y: topLeft[1],\n                        }).containsPoint(point);\n                    }\n                }\n                // If we never allow the rectangle to scale, then the bounds will grow and shrink to counter the effects\n                // Of the camera zoom\n                else if (rectangle.scaling === types_2.ScaleType.NEVER) {\n                    // The location is within the world, but we reverse project the anchor spread\n                    var topLeft = projection.worldToScreen({\n                        x: rectangle.x - (rectangle.anchor.x / projection.camera.scale[0]),\n                        y: rectangle.y - (rectangle.anchor.y / projection.camera.scale[1]),\n                    });\n                    var screenPoint = projection.worldToScreen(point);\n                    // Reverse project the size and we should be within the distorted world coordinates\n                    return new primitives_1.Bounds({\n                        height: rectangle.height,\n                        width: rectangle.width,\n                        x: topLeft.x,\n                        y: topLeft.y,\n                    }).containsPoint(screenPoint);\n                }\n                return true;\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    RectangleLayer.prototype.initShader = function () {\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: 0,\n            1: 0,\n            2: 0,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./rectangle-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'location',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'anchor',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.anchor.x, o.anchor.y]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'size',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.width, o.height]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'scaling',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scaling]; },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.color; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (u) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./rectangle-layer.vs'),\n        };\n    };\n    RectangleLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    RectangleLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return RectangleLayer;\n}(layer_1.Layer));\nexports.RectangleLayer = RectangleLayer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./rectangle-layer\"));\n__export(require(\"./rectangle-instance\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar texture_1 = require(\"../../surface/texture\");\nvar instance_1 = require(\"../../util/instance\");\nvar types_1 = require(\"../types\");\n/**\n * This is a lookup to find existing rasterizations for a particularly created label so that every\n * new label does not have to go through the rasterization process.\n */\nvar rasterizationLookUp = new Map();\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nvar anchorCalculator = (_a = {},\n    _a[types_1.AnchorType.TopLeft] = function (anchor, label) {\n        anchor.x = -anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopMiddle] = function (anchor, label) {\n        anchor.x = label.width / 2.0;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopRight] = function (anchor, label) {\n        anchor.x = label.width + anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.MiddleLeft] = function (anchor, label) {\n        anchor.x = -anchor.padding;\n        anchor.y = label.height / 2;\n    },\n    _a[types_1.AnchorType.Middle] = function (anchor, label) {\n        anchor.x = label.width / 2.0;\n        anchor.y = label.height / 2.0;\n    },\n    _a[types_1.AnchorType.MiddleRight] = function (anchor, label) {\n        anchor.x = label.width + anchor.padding;\n        anchor.y = label.height / 2.0;\n    },\n    _a[types_1.AnchorType.BottomLeft] = function (anchor, label) {\n        anchor.x = -anchor.padding;\n        anchor.y = label.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomMiddle] = function (anchor, label) {\n        anchor.x = label.width / 2.0;\n        anchor.y = label.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomRight] = function (anchor, label) {\n        anchor.x = label.width + anchor.padding;\n        anchor.y = label.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.Custom] = function (anchor, label) {\n        anchor.x = anchor.x || 0;\n        anchor.y = anchor.y || 0;\n    },\n    _a);\n/**\n * This generates a new label instance which will render a single line of text for a given layer.\n * There are restrictions surrounding labels due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a label via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Labels should only be so long.\n * - Multiline is not supported inherently\n * - Once a label is constructed, only SOME properties can be altered thereafter\n *\n * A label that is constructed can only have some properties set upon creating the label and are locked\n * thereafter. The only way to modify them would be to destroy the label, then construct a new label\n * with the modifications. This has to deal with performance regarding rasterizing the label\n */\nvar LabelInstance = /** @class */ (function (_super) {\n    __extends(LabelInstance, _super);\n    function LabelInstance(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the rendered color of the label */\n        _this.color = [0, 0, 0, 1];\n        /** Depth sorting of the label (or the z value of the label) */\n        _this.depth = 0;\n        /** Sets the way the label scales with the world */\n        _this.scaling = types_1.ScaleType.BOUND_MAX;\n        /** Scales the label uniformly */\n        _this.scale = 1.0;\n        /** The x coordinate where the label will be anchored to in world space */\n        _this.x = 0;\n        /** The y coordinate where the label will be anchored to in world space */\n        _this.y = 0;\n        // The following properties are properties that are locked in after creating this label\n        // As the properties are completely locked into how the label was rasterized and can not\n        // Nor should not be easily adjusted for performance concerns\n        _this._cssFont = '';\n        _this._fontFamily = 'Arial';\n        _this._fontSize = 12;\n        _this._fontStyle = 'normal';\n        _this._fontWeight = 400;\n        _this._maxWidth = 0;\n        _this._text = '';\n        _this._width = 0;\n        _this._height = 0;\n        _this._isDestroyed = false;\n        // These are properties that can be altered, but have side effects from being changed\n        /** This is the anchor location on the  */\n        _this._anchor = {\n            padding: 0,\n            type: types_1.AnchorType.TopLeft,\n            x: 0,\n            y: 0,\n        };\n        _this.depth = options.depth || _this.depth;\n        _this.color = options.color || _this.color;\n        _this.scaling = options.scaling || _this.scaling;\n        _this.scale = options.scale || _this.scale;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        _this._fontFamily = options.fontFamily || _this._fontFamily;\n        _this._fontSize = options.fontSize || _this._fontSize;\n        _this._fontStyle = options.fontStyle || _this._fontStyle;\n        _this._fontWeight = options.fontWeight || _this._fontWeight;\n        _this._maxWidth = options.maxWidth || 0;\n        _this._text = options.text || _this._text;\n        // We get the CSS font string for this label so we can uniquely identify the rasterization\n        // Easily.\n        _this._cssFont = texture_1.LabelRasterizer.makeCSSFont(_this, 1);\n        // This is css font used to look up rasterizations. This lookup includes the max width of the label\n        // Which the css font does not account for\n        var cssFontLookup = _this._cssFont + \"_\" + _this._maxWidth;\n        // Look for other same texts that have been rasterized\n        var rasterizations = rasterizationLookUp.get(_this._text);\n        var rasterization;\n        if (rasterizations) {\n            // Look for those texts that have been rasterized in the same fashion that this label is requesting\n            rasterization = rasterizations.get(cssFontLookup);\n            // If a rasterization exists, we must increment the use reference\n            if (rasterization) {\n                rasterization.references++;\n            }\n        }\n        else {\n            rasterizations = new Map();\n        }\n        // If we have not found an existing rasterization\n        if (!rasterization) {\n            rasterization = {\n                references: 1,\n                resource: new texture_1.LabelAtlasResource(_this),\n            };\n            // Look to see if any rasterization options were specified\n            if (options.rasterization) {\n                rasterization.resource.sampleScale = options.rasterization.scale || 1.0;\n            }\n            // Ensure the sample scale is set. Defaults to 1.0\n            rasterization.resource.sampleScale = rasterization.resource.sampleScale || 1.0;\n            // Rasterize the resource generated for this label. We need it immediately rasterized so\n            // That we can utilize the dimensions for calculations.\n            texture_1.LabelRasterizer.renderSync(rasterization.resource);\n            // Now that we have an official rasterization for this text / label combo, we shall store it\n            // For others to look up\n            rasterizationLookUp.set(_this._text, rasterizations);\n            rasterizations.set(cssFontLookup, rasterization);\n        }\n        _this._rasterization = rasterization;\n        _this._width = rasterization.resource.rasterization.world.width;\n        _this._height = rasterization.resource.rasterization.world.height;\n        // Make sure the anchor is set to the appropriate location\n        options.anchor && _this.setAnchor(options.anchor);\n        return _this;\n    }\n    /**\n     * TODO: We should be implementing the destroy on LabelInstances to clean this up\n     * Frees up module scoped data.\n     */\n    LabelInstance.destroy = function () {\n        rasterizationLookUp.clear();\n    };\n    Object.defineProperty(LabelInstance.prototype, \"cssFont\", {\n        // The following are the getters for the locked in parameters of the label so we can read\n        // The properties but not set any of them.\n        /**\n         * This is the full css string that represents this label. This + the text of the label is essentially\n         * a unique identifier for the rendering of the label and is used to key the rasterization of the label\n         * so that label rasterization can be shared for similar labels.\n         */\n        get: function () { return this._cssFont; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"isDestroyed\", {\n        /** This flag indicates if this label is valid anymore */\n        get: function () { return this._isDestroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontFamily\", {\n        /** This is the font family of the label */\n        get: function () { return this._fontFamily; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontSize\", {\n        /**\n         * This is the size of the label in pixels. For Labels, this correlates to the rendering font size.\n         * The true pixel height of the label is calculated and placed into the height property for the label.\n         */\n        get: function () { return this._fontSize; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontStyle\", {\n        /** This is the style of the font (italic, oblique, etc) */\n        get: function () { return this._fontStyle; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontWeight\", {\n        /** This is the font weight specified for the label (bold, normal, etc). */\n        get: function () { return this._fontWeight; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"maxWidth\", {\n        /** This is the max width in pixels this label can fill */\n        get: function () { return this._maxWidth; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"resource\", {\n        /** This gets the atlas resource that is uniquely identified for this label */\n        get: function () { return this._rasterization.resource; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"text\", {\n        /** This is the label's text. */\n        get: function () { return this._text; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"truncatedText\", {\n        /**\n         * If a maxWidth is specified, there is a chance the text will be truncated.\n         * This provides the calculated truncated text.\n         */\n        get: function () { return this._rasterization.resource.truncatedText || this.text; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"width\", {\n        /**\n         * This is the width in world space of the label. If there is no camera distortion,\n         * this would be the width of the label in pixels on the screen.\n         */\n        get: function () {\n            return this._width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"height\", {\n        /**\n         * This is the height in world space of the label. If there is no camera distortion,\n         * this would be the height of the label in pixels on the screen.\n         */\n        get: function () {\n            return this._height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Labels are a sort of unique case where the use of a label should be destroyed as rasterization\n     * resources are in a way kept alive through reference counting.\n     */\n    LabelInstance.prototype.destroy = function () {\n        if (!this._isDestroyed) {\n            this._isDestroyed = true;\n            this._rasterization.references--;\n            // If all references are cleared, then the rasterization needs to be eradicated\n            if (this._rasterization.references === 0) {\n                this._rasterization.resource;\n            }\n        }\n    };\n    Object.defineProperty(LabelInstance.prototype, \"anchor\", {\n        get: function () {\n            return this._anchor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This applies a new anchor to this label and properly determines it's anchor position on the label\n     */\n    LabelInstance.prototype.setAnchor = function (anchor) {\n        var newAnchor = {\n            padding: anchor.padding || 0,\n            type: anchor.type,\n            x: anchor.x || 0,\n            y: anchor.y || 0,\n        };\n        // Calculate the new anchors position values\n        anchorCalculator[newAnchor.type](newAnchor, this);\n        // Apply the anchor\n        this._anchor = newAnchor;\n    };\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"color\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"depth\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"scaling\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"scale\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"x\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"y\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], LabelInstance.prototype, \"_anchor\", void 0);\n    return LabelInstance;\n}(instance_1.Instance));\nexports.LabelInstance = LabelInstance;\nvar _a;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the label as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the label is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y || screenSize.x > size.x;\\n\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float(cameraScale.x != cameraScale.y);\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n\\n  // Correct aspect ratio.\\n  size = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // apply scaling\\n  size *= scale;\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // Get the position of the current vertex\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * size + location - adjustedAnchor;\\n  // Get the tex coord from our inject texture info\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the label's color as a tint to the label (all labels are rendered white to the base texture)\\n  vertexColor = color;\\n\\n  // See how scaled the size on screen will be from the actual height of the label\\n  float labelScreenScale = mix(\\n    screenSize.y / size.y,\\n    screenSize.x / size.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the label is supposed to be, then we automagically\\n  // scale down our label to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / labelScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  gl_FragColor = texture2D(labelAtlas, texCoord) * vertexColor;\\n  setColor(gl_FragColor * gl_FragColor.a);\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar types_2 = require(\"../types\");\nvar max = Math.max, min = Math.min;\n/**\n * This layer displays Labels and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar LabelLayer = /** @class */ (function (_super) {\n    __extends(LabelLayer, _super);\n    function LabelLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    LabelLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given label\n            boundsAccessor: function (label) {\n                var topLeft = [\n                    label.x - label.anchor.x,\n                    label.y - label.anchor.y,\n                ];\n                return new primitives_1.Bounds({\n                    height: label.height,\n                    width: label.width,\n                    x: topLeft[0],\n                    y: topLeft[1],\n                });\n            },\n            // Provide a precise hit test for the circle\n            hitTest: function (label, point, view) {\n                // The bounds of the label is in world space, but it does not account for the scale mode of the label.\n                // Here, we will apply the scale mode testing to the label\n                var maxScale = max.apply(void 0, view.camera.scale);\n                var minScale = min.apply(void 0, view.camera.scale);\n                // If we scale always then the label stays within it's initial world bounds at all times\n                if (label.scaling === types_2.ScaleType.ALWAYS) {\n                    return true;\n                }\n                // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n                // Label the same size. If the camera zooms out then the bounds === the world bounds.\n                else if (label.scaling === types_2.ScaleType.BOUND_MAX) {\n                    // We are zooming out. the bounds will stay within the world bounds\n                    if (minScale <= 1 && maxScale <= 1) {\n                        return true;\n                    }\n                    // We are zooming in. The bounds will shrink to keep the label at max font size\n                    else {\n                        // The location is within the world, but we reverse project the anchor spread\n                        var topLeft = view.worldToScreen({\n                            x: label.x - (label.anchor.x / view.camera.scale[0]),\n                            y: label.y - (label.anchor.y / view.camera.scale[1]),\n                        });\n                        var screenPoint = view.worldToScreen(point);\n                        // Reverse project the size and we should be within the distorted world coordinates\n                        return new primitives_1.Bounds({\n                            height: label.height,\n                            width: label.width,\n                            x: topLeft.x,\n                            y: topLeft.y,\n                        }).containsPoint(screenPoint);\n                    }\n                }\n                // If we never allow the label to scale, then the bounds will grow and shrink to counter the effects\n                // Of the camera zoom\n                else if (label.scaling === types_2.ScaleType.NEVER) {\n                    // The location is within the world, but we reverse project the anchor spread\n                    var topLeft = view.worldToScreen({\n                        x: label.x - (label.anchor.x / view.camera.scale[0]),\n                        y: label.y - (label.anchor.y / view.camera.scale[1]),\n                    });\n                    var screenPoint = view.worldToScreen(point);\n                    // Reverse project the size and we should be within the distorted world coordinates\n                    return new primitives_1.Bounds({\n                        height: label.height,\n                        width: label.width,\n                        x: topLeft.x,\n                        y: topLeft.y,\n                    }).containsPoint(screenPoint);\n                }\n                return true;\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    LabelLayer.prototype.initShader = function () {\n        var _this = this;\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: 0,\n            1: 0,\n            2: 0,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./label-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'location',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'anchor',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.anchor.x, o.anchor.y]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'size',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.width, o.height]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'scaling',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scaling]; },\n                },\n                {\n                    atlas: {\n                        key: this.props.atlas,\n                        name: 'labelAtlas',\n                    },\n                    block: 2,\n                    name: 'texture',\n                    update: function (o) { return _this.resource.request(_this, o, o.resource); },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.color; },\n                },\n                {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'scale',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scale]; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (u) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./label-layer.vs'),\n        };\n    };\n    LabelLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    LabelLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return LabelLayer;\n}(layer_1.Layer));\nexports.LabelLayer = LabelLayer;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar canvas;\nvar ImageRasterizer = /** @class */ (function () {\n    function ImageRasterizer() {\n    }\n    /**\n     * This loops until our canvas context is available\n     */\n    ImageRasterizer.awaitContext = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!canvas) return [3 /*break*/, 2];\n                        this.getContext();\n                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 0];\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Attempts to populate the 'canvas' context for rendering images offscreen.\n     */\n    ImageRasterizer.getContext = function () {\n        if (!canvas) {\n            canvas = document.createElement('canvas').getContext('2d');\n        }\n        return canvas;\n    };\n    /**\n     * This renders our image to a sizeable canvas where we loop over the pixel data to determine\n     * the bounds of the image.\n     *\n     * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n     *                                 the size to be rendered to the texture to the size the image\n     *                                 should be within world space.\n     * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n     */\n    ImageRasterizer.calculateImageSize = function (resource, sampleScale) {\n        /** Get the image properties for rasterizing */\n        var image = resource.image.element;\n        if (image.width === 0 || image.height === 0) {\n            console.warn('Images provided shoud have valid dimensions! Please ensure the image is loaded first.');\n            return;\n        }\n        // Just make sure th canvas is available\n        canvas.canvas.width = 100;\n        canvas.canvas.height = 100;\n        // Render the image into our canvas merely to ensure the image can be rendered\n        // This action often 'warms up' images such as images that have a data URL instead of a path\n        canvas.drawImage(image, 0, 0);\n        // Make sure the rasterization object is initialized\n        resource.rasterization = resource.rasterization || {\n            texture: { height: 0, width: 0 },\n            world: { height: 0, width: 0 },\n        };\n        // Update the calculated texture size.\n        resource.rasterization.texture = {\n            height: image.height * resource.sampleScale,\n            width: image.width * resource.sampleScale,\n        };\n        resource.rasterization.world = {\n            height: image.height,\n            width: image.width,\n        };\n        resource.rasterization.image = image;\n    };\n    /**\n     * Performs the rendering of the image\n     */\n    ImageRasterizer.render = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // Make sure our canvas object is ready for rendering\n                    return [4 /*yield*/, this.awaitContext()];\n                    case 1:\n                        // Make sure our canvas object is ready for rendering\n                        _a.sent();\n                        // Calculate all of the image metrics and ensure the image can be drawn\n                        this.calculateImageSize(resource, resource.sampleScale);\n                        return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    /**\n     * Performs the rendering of the image\n     */\n    ImageRasterizer.renderSync = function (resource) {\n        // Ensure our offscreen canvas is prepped\n        this.getContext();\n        if (!canvas) {\n            console.warn('Can not render a image synchronously without the canvas context being ready.');\n            return resource;\n        }\n        // Calculate all of the image metrics and generate a canvas on the image that can\n        // Be rendered to the canvas.\n        this.calculateImageSize(resource, resource.sampleScale);\n        return resource;\n    };\n    return ImageRasterizer;\n}());\nexports.ImageRasterizer = ImageRasterizer;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\nvar atlas_1 = require(\"./atlas\");\nvar color_atlas_resource_1 = require(\"./color-atlas-resource\");\nvar color_rasterizer_1 = require(\"./color-rasterizer\");\nvar image_atlas_resource_1 = require(\"./image-atlas-resource\");\nvar label_atlas_resource_1 = require(\"./label-atlas-resource\");\nvar label_rasterizer_1 = require(\"./label-rasterizer\");\nvar sub_texture_1 = require(\"./sub-texture\");\nvar debug = require('debug')('webgl-surface:Atlas');\nvar ZERO_IMAGE = {\n    aspectRatio: 0,\n    atlasBL: { x: 0, y: 0 },\n    atlasBR: { x: 0, y: 0 },\n    atlasReferenceID: '',\n    atlasTexture: null,\n    atlasTL: { x: 0, y: 0 },\n    atlasTR: { x: 0, y: 0 },\n    heightOnAtlas: 0,\n    isValid: false,\n    pixelHeight: 0,\n    pixelWidth: 0,\n    widthOnAtlas: 0,\n};\n/**\n * Determines if a SubTexture is a valid SubTexture for rendering\n */\nfunction isValidImage(image) {\n    var isValid = false;\n    if (image && image.isValid) {\n        if (image.pixelWidth && image.pixelHeight) {\n            isValid = true;\n        }\n    }\n    return isValid;\n}\n/**\n * Defines a manager of atlas', which includes generating the atlas and producing\n * textures defining those pieces of atlas.\n */\nvar AtlasManager = /** @class */ (function () {\n    function AtlasManager() {\n        /** Stores all of the generated atlas' in a lookup by name */\n        this.allAtlas = new Map();\n    }\n    /**\n     * Atlas' must be created from scratch to update them. In order to properly\n     * update an existing one, you must destroy it then recreate it again.\n     * This is from not knowing how to update a texture via three js.\n     *\n     * @param resources The images with their image path set to be loaded into the atlas.\n     *               Images that keep an atlas ID of null indicates the image did not load\n     *               correctly\n     *\n     * @return {Texture} The Threejs texture that is created as our atlas. The images injected\n     *                   into the texture will be populated with the atlas'\n     */\n    AtlasManager.prototype.createAtlas = function (options, resources) {\n        return __awaiter(this, void 0, void 0, function () {\n            var atlas;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        atlas = new atlas_1.Atlas(options);\n                        // Set the manager to the atlas\n                        atlas.setManager(this);\n                        // Make the atlas identifiable by it's name\n                        this.allAtlas.set(atlas.id, atlas);\n                        if (!resources) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.updateAtlas(atlas.id, resources)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        debug('Atlas Created-> %o', atlas);\n                        return [2 /*return*/, atlas];\n                }\n            });\n        });\n    };\n    /**\n     * Free ALL resources under this manager\n     */\n    AtlasManager.prototype.destroy = function () {\n        this.allAtlas.forEach(function (value) { return value.destroy(); });\n    };\n    /**\n     * Disposes of the resources the atlas held and makes the atlas invalid for use\n     *\n     * @param atlasName\n     */\n    AtlasManager.prototype.destroyAtlas = function (atlasName) {\n        var atlas = this.allAtlas.get(atlasName);\n        if (atlas) {\n            atlas.destroy();\n        }\n    };\n    AtlasManager.prototype.setDefaultImage = function (image, atlasName) {\n        image = Object.assign(image, ZERO_IMAGE, { atlasReferenceID: atlasName });\n        return image;\n    };\n    /**\n     * This loads, packs, and draws the indicated image into the specified canvas\n     * using the metrics that exists for the specified atlas.\n     *\n     * @param resource The image who should have it's image path loaded\n     * @param atlasName The name of the atlas to make the packing work\n     * @param canvas The canvas we will be drawing into to generate the complete image\n     *\n     * @return {Promise<boolean>} Promise that resolves to if the image successfully was drawn or not\n     */\n    AtlasManager.prototype.draw = function (atlas, resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var canvas, atlasName, loadedImage, rasterization, texture, rect, dimensions, packing, insertedNode, ux, uy, uw, uh, onePixelX, atlasDimensions, bottom, top_1, left, right;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        canvas = atlas.texture.image;\n                        atlasName = atlas.id;\n                        // Register the resource with the atlas\n                        if (!atlas.registerResource(resource)) {\n                            console.warn('Could not draw resource to the atlas as the resource was not properly registered to the atlas first', atlas, resource);\n                            return [2 /*return*/, Promise.resolve(false)];\n                        }\n                        return [4 /*yield*/, this.loadImage(resource)];\n                    case 1:\n                        loadedImage = _a.sent();\n                        // Only a non-null image means the image loaded correctly\n                        if (loadedImage && isValidImage(resource.texture)) {\n                            rasterization = resource.rasterization;\n                            texture = resource.texture;\n                            rect = new bounds_1.Bounds({ left: 0, right: rasterization.texture.width, top: 0, bottom: rasterization.texture.height });\n                            dimensions = {\n                                first: texture,\n                                second: rect,\n                            };\n                            // Auto add a buffer in\n                            dimensions.second.width += 1;\n                            dimensions.second.height += 1;\n                            packing = atlas.packing;\n                            insertedNode = packing.insert(dimensions);\n                            // If the result was NULL we did not successfully insert the image into any map\n                            if (insertedNode) {\n                                debug('Atlas location determined: %o', insertedNode);\n                                // Apply the image to the node\n                                insertedNode.nodeImage = texture;\n                                ux = insertedNode.nodeDimensions.x / atlas.width;\n                                uy = insertedNode.nodeDimensions.y / atlas.height;\n                                uw = insertedNode.nodeDimensions.width / atlas.width;\n                                uh = insertedNode.nodeDimensions.height / atlas.height;\n                                onePixelX = 1 / atlas.width;\n                                atlasDimensions = new bounds_1.Bounds({\n                                    bottom: 1.0 - uy,\n                                    left: ux,\n                                    right: ux + uw,\n                                    top: 1.0 - (uy + uh),\n                                });\n                                bottom = atlasDimensions.bottom;\n                                top_1 = atlasDimensions.y;\n                                left = atlasDimensions.x;\n                                right = atlasDimensions.x + atlasDimensions.width - onePixelX;\n                                texture.atlasReferenceID = atlasName;\n                                texture.atlasTL = { x: left, y: top_1 };\n                                texture.atlasBR = { x: right, y: bottom };\n                                texture.atlasBL = { x: left, y: bottom };\n                                texture.atlasTR = { x: right, y: top_1 };\n                                texture.widthOnAtlas = Math.abs(texture.atlasTR.x - texture.atlasTL.x);\n                                texture.heightOnAtlas = Math.abs(texture.atlasTR.y - texture.atlasBR.y);\n                                texture.pixelWidth = rasterization.texture.width;\n                                texture.pixelHeight = rasterization.texture.height;\n                                // Now draw the image to the indicated canvas\n                                canvas.getContext('2d').drawImage(loadedImage, insertedNode.nodeDimensions.x, insertedNode.nodeDimensions.y);\n                                // We have finished inserting\n                                return [2 /*return*/, true];\n                            }\n                            else {\n                                // Log an error\n                                console.error(\"Could not fit resource into atlas\", resource);\n                                resource.texture = this.setDefaultImage(resource.texture, atlasName);\n                                return [2 /*return*/, false];\n                            }\n                        }\n                        else {\n                            // Log an error and load a default sub texture\n                            console.error(\"Could not load resource:\", resource);\n                            resource.texture = this.setDefaultImage(resource.texture, atlasName);\n                            return [2 /*return*/, false];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Retrieves the threejs texture for the atlas\n     *\n     * @param atlasName The identifier of the atlas\n     */\n    AtlasManager.prototype.getAtlasTexture = function (atlasName) {\n        return this.allAtlas.get(atlasName);\n    };\n    /**\n     * This takes in any atlas resource and rasterizes it.\n     *\n     * @param {SubTexture} resource This is any atlas resource which will have it's image rasterized\n     *\n     * @return {Promise<HTMLImageElement>} A promise to resolve to the loaded image\n     *                                     or null if there was an error\n     */\n    AtlasManager.prototype.loadImage = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var imageSrc, subTexture, image_1, image, image;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        subTexture = resource.texture || new sub_texture_1.SubTexture();\n                        resource.texture = subTexture;\n                        if (!(resource instanceof image_atlas_resource_1.ImageAtlasResource)) return [3 /*break*/, 4];\n                        if (!resource.image.element) return [3 /*break*/, 2];\n                        if (resource.image.element.width !== 0 && resource.image.element.height !== 0) {\n                            image_1 = resource.image.element;\n                            subTexture.pixelWidth = image_1.width;\n                            subTexture.pixelHeight = image_1.height;\n                            subTexture.aspectRatio = image_1.width / image_1.height;\n                            return [2 /*return*/, image_1];\n                        }\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                var image = resource.image.element;\n                                image.onload = function () {\n                                    subTexture.pixelWidth = image.width;\n                                    subTexture.pixelHeight = image.height;\n                                    subTexture.aspectRatio = image.width / image.height;\n                                    resolve(image);\n                                };\n                                image.onerror = function () {\n                                    resolve(null);\n                                };\n                            })];\n                    case 1:\n                        image = _a.sent();\n                        return [2 /*return*/, image];\n                    case 2:\n                        if (resource.image.path) {\n                            imageSrc = resource.image.path;\n                        }\n                        _a.label = 3;\n                    case 3: return [3 /*break*/, 10];\n                    case 4:\n                        if (!(resource instanceof label_atlas_resource_1.LabelAtlasResource)) return [3 /*break*/, 7];\n                        if (!!resource.rasterization.canvas) return [3 /*break*/, 6];\n                        return [4 /*yield*/, label_rasterizer_1.LabelRasterizer.render(resource)];\n                    case 5:\n                        _a.sent();\n                        _a.label = 6;\n                    case 6:\n                        // Make sure the rasterization properly executed\n                        if (resource.rasterization.canvas) {\n                            debug('Rasterized label %o', resource.rasterization);\n                            imageSrc = resource.rasterization.canvas.toDataURL('image/png');\n                        }\n                        else {\n                            console.warn('The label was not able to be rasterized');\n                        }\n                        return [3 /*break*/, 10];\n                    case 7:\n                        if (!(resource instanceof color_atlas_resource_1.ColorAtlasResource)) return [3 /*break*/, 10];\n                        if (!!resource.rasterization.canvas) return [3 /*break*/, 9];\n                        return [4 /*yield*/, color_rasterizer_1.ColorRasterizer.render(resource)];\n                    case 8:\n                        _a.sent();\n                        _a.label = 9;\n                    case 9:\n                        // Make sure the rasterization properly executed\n                        if (resource.rasterization.canvas) {\n                            debug('Rasterized color %o', resource.rasterization);\n                            imageSrc = resource.rasterization.canvas.toDataURL('image/png');\n                        }\n                        else {\n                            console.warn('The color was not able to be rasterized');\n                        }\n                        _a.label = 10;\n                    case 10:\n                        if (!imageSrc) return [3 /*break*/, 12];\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                var image = new Image();\n                                image.onload = function () {\n                                    subTexture.pixelWidth = image.width;\n                                    subTexture.pixelHeight = image.height;\n                                    subTexture.aspectRatio = image.width / image.height;\n                                    resolve(image);\n                                };\n                                image.onerror = function () {\n                                    resolve(null);\n                                };\n                                image.src = imageSrc;\n                            })];\n                    case 11:\n                        image = _a.sent();\n                        return [2 /*return*/, image];\n                    case 12: return [2 /*return*/, null];\n                }\n            });\n        });\n    };\n    /**\n     * This targets an existing atlas and attempts to update it with the provided atlas resources.\n     *\n     * @param atlasName\n     * @param resources\n     */\n    AtlasManager.prototype.updateAtlas = function (atlasName, resources) {\n        return __awaiter(this, void 0, void 0, function () {\n            var atlas, _i, resources_1, resource;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        atlas = this.allAtlas.get(atlasName);\n                        if (!atlas) return [3 /*break*/, 5];\n                        _i = 0, resources_1 = resources;\n                        _a.label = 1;\n                    case 1:\n                        if (!(_i < resources_1.length)) return [3 /*break*/, 4];\n                        resource = resources_1[_i];\n                        return [4 /*yield*/, this.draw(atlas, resource)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        // Perform the best method for updating the underlying texture of the atlas to the latest changes\n                        atlas.updateTexture();\n                        return [3 /*break*/, 6];\n                    case 5:\n                        console.warn('Can not update non-existing atlas:', atlasName, 'These resources will not be loaded:', resources);\n                        _a.label = 6;\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return AtlasManager;\n}());\nexports.AtlasManager = AtlasManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\n/**\n * This is used specifically by the atlas manager to aid in packing\n * in textures within an area. This will guarantee boundaries of textures are\n * not violated and provide proper feedback for where to draw a given image\n */\nvar PackNode = /** @class */ (function () {\n    function PackNode(x, y, width, height) {\n        this.child = [null, null];\n        this.isLeaf = true;\n        this.nodeImage = null;\n        this.nodeDimensions = new bounds_1.Bounds({\n            height: height,\n            width: width,\n            x: x,\n            y: y,\n        });\n    }\n    /**\n     * Deletes all of the sub nodes in this Mapping, thus clearing up memory usage\n     */\n    PackNode.prototype.destroy = function () {\n        var child0 = this.child[0];\n        var child1 = this.child[1];\n        this.nodeImage = null;\n        if (child0) {\n            child0.destroy();\n        }\n        if (child1) {\n            child1.destroy();\n        }\n        this.child[0] = null;\n        this.child[1] = null;\n    };\n    /**\n     * Indicates if there is a child\n     */\n    PackNode.prototype.hasChild = function () {\n        var child0 = this.child[0];\n        var child1 = this.child[1];\n        if (child0 && !child0.nodeImage) {\n            return !child0.isLeaf;\n        }\n        if (child1 && !child1.nodeImage) {\n            return !child1.isLeaf;\n        }\n        return false;\n    };\n    /**\n     * Inserts images into our mapping, fitting them appropriately\n     */\n    PackNode.prototype.insert = function (image) {\n        var child0 = this.child[0];\n        var child1 = this.child[1];\n        if (!this.isLeaf && child0 && child1) {\n            // Try inserting into first child\n            var newNode = child0.insert(image);\n            if (newNode !== null) {\n                return newNode;\n            }\n            // No room in first so insert into second\n            return child1.insert(image);\n        }\n        else {\n            // If there's already an image here, return\n            if (this.nodeImage) {\n                return null;\n            }\n            // Check the fit status of the image in this nodes rectangle space\n            var fitFlag = this.nodeDimensions.fits(image.second);\n            // If we're too small, return null indicating can not fit\n            if (fitFlag === 0) {\n                return null;\n            }\n            // If we're just right, accept\n            if (fitFlag === 1) {\n                return this;\n            }\n            // Otherwise, gotta split this node and create some leaves\n            this.isLeaf = false;\n            // Get the image width\n            var imgWidth = image.second.width;\n            var imgHeight = image.second.height;\n            // Decide which way to split\n            var dWidth = this.nodeDimensions.width - imgWidth;\n            var dHeight = this.nodeDimensions.height - image.second.height;\n            if (dWidth > dHeight) {\n                this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, imgWidth, this.nodeDimensions.height);\n                this.child[1] = new PackNode(this.nodeDimensions.x + imgWidth, this.nodeDimensions.y, dWidth, this.nodeDimensions.height);\n            }\n            else {\n                this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, this.nodeDimensions.width, imgHeight);\n                this.child[1] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y + imgHeight, this.nodeDimensions.width, dHeight);\n            }\n        }\n        // Insert into first child we created\n        return this.child[0].insert(image);\n    };\n    /**\n     * Removes the image from the mapping and tries to open up as much space as possible.\n     *\n     * @param {AtlasTexture} image The image to insert into the\n     */\n    PackNode.prototype.remove = function (image) {\n        if (!this.isLeaf) {\n            // Try removing from first child\n            var removed = this.child[0].remove(image);\n            if (removed) {\n                return true;\n            }\n            // Try remove from second\n            removed = this.child[1].remove(image);\n            if (!this.child[0].hasChild()) {\n                if (!this.child[1].hasChild()) {\n                    this.child[0] = null;\n                    this.child[1] = null;\n                }\n            }\n            return removed;\n        }\n        else {\n            if (this.nodeImage === image) {\n                this.nodeImage = null;\n                image.atlasReferenceID = null;\n                image.pixelWidth = 0;\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n    };\n    return PackNode;\n}());\nexports.PackNode = PackNode;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar texture_1 = require(\"../../surface/texture\");\nvar instance_1 = require(\"../../util/instance\");\nvar types_1 = require(\"../types\");\n/**\n * This is a lookup to find existing rasterizations for a particularly created image so that every\n * new image does not have to go through the rasterization process.\n */\nvar rasterizationLookUp = new Map();\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nvar anchorCalculator = (_a = {},\n    _a[types_1.AnchorType.TopLeft] = function (anchor, image) {\n        anchor.x = -anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopMiddle] = function (anchor, image) {\n        anchor.x = image.width / 2.0;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopRight] = function (anchor, image) {\n        anchor.x = image.width + anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.MiddleLeft] = function (anchor, image) {\n        anchor.x = -anchor.padding;\n        anchor.y = image.height / 2;\n    },\n    _a[types_1.AnchorType.Middle] = function (anchor, image) {\n        anchor.x = image.width / 2.0;\n        anchor.y = image.height / 2.0;\n    },\n    _a[types_1.AnchorType.MiddleRight] = function (anchor, image) {\n        anchor.x = image.width + anchor.padding;\n        anchor.y = image.height / 2.0;\n    },\n    _a[types_1.AnchorType.BottomLeft] = function (anchor, image) {\n        anchor.x = -anchor.padding;\n        anchor.y = image.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomMiddle] = function (anchor, image) {\n        anchor.x = image.width / 2.0;\n        anchor.y = image.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomRight] = function (anchor, image) {\n        anchor.x = image.width + anchor.padding;\n        anchor.y = image.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.Custom] = function (anchor, image) {\n        anchor.x = anchor.x || 0;\n        anchor.y = anchor.y || 0;\n    },\n    _a);\n/**\n * This generates a new image instance which will render a single line of text for a given layer.\n * There are restrictions surrounding images due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a image via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Images should only be so long.\n * - Multiline is not supported inherently\n * - Once a image is constructed, only SOME properties can be altered thereafter\n *\n * A image that is constructed can only have some properties set upon creating the image and are locked\n * thereafter. The only way to modify them would be to destroy the image, then construct a new image\n * with the modifications. This has to deal with performance regarding rasterizing the image\n */\nvar ImageInstance = /** @class */ (function (_super) {\n    __extends(ImageInstance, _super);\n    function ImageInstance(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the rendered color of the image */\n        _this.tint = [0, 0, 0, 1];\n        /** Depth sorting of the image (or the z value of the lable) */\n        _this.depth = 0;\n        /** The height of the image as it is to be rendered in world space */\n        _this.height = 1;\n        /** Sets the way the image scales with the world */\n        _this.scaling = types_1.ScaleType.BOUND_MAX;\n        /** The width of the image as it is to be rendered in world space */\n        _this.width = 1;\n        /** The x coordinate where the image will be anchored to in world space */\n        _this.x = 0;\n        /** The y coordinate where the image will be anchored to in world space */\n        _this.y = 0;\n        // The following properties are properties that are locked in after creating this image\n        // As the properties are completely locked into how the image was rasterized and can not\n        // Nor should not be easily adjusted for performance concerns\n        _this._sourceWidth = 0;\n        _this._sourceHeight = 0;\n        _this._isDestroyed = false;\n        // These are properties that can be altered, but have side effects from being changed\n        /** This is the anchor location on the  */\n        _this._anchor = {\n            padding: 0,\n            type: types_1.AnchorType.TopLeft,\n            x: 0,\n            y: 0,\n        };\n        _this.depth = options.depth || _this.depth;\n        _this.tint = options.tint || _this.tint;\n        _this.scaling = options.scaling || _this.scaling;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        // This is the image that is to be rendered\n        _this._element = options.element;\n        // Look for other same texts that have been rasterized\n        var rasterization = rasterizationLookUp.get(_this._path || _this._element);\n        // If a rasterization exists, we must increment the use reference\n        if (rasterization) {\n            rasterization.references++;\n        }\n        // If we have not found an existing rasterization\n        if (!rasterization) {\n            rasterization = {\n                references: 1,\n                resource: new texture_1.ImageAtlasResource(_this),\n            };\n            // Ensure the sample scale is set. Defaults to 1.0\n            rasterization.resource.sampleScale = rasterization.resource.sampleScale || 1.0;\n            // Rasterize the resource generated for this image. We need it immediately rasterized so\n            // That we can utilize the dimensions for calculations.\n            texture_1.ImageRasterizer.renderSync(rasterization.resource);\n            // Now that we have an official rasterization for this image, we shall store it\n            // For others to look up\n            rasterizationLookUp.set(_this._path || _this._element, rasterization);\n        }\n        _this._rasterization = rasterization;\n        _this._sourceWidth = rasterization.resource.rasterization.world.width;\n        _this._sourceHeight = rasterization.resource.rasterization.world.height;\n        _this.width = options.width || _this._sourceWidth || 1;\n        _this.height = options.height || _this._sourceHeight || 1;\n        // Make sure the anchor is set to the appropriate location\n        options.anchor && _this.setAnchor(options.anchor);\n        return _this;\n    }\n    /**\n     * TODO: We should be implementing the destroy on ImageInstances to clean this up\n     * Frees up module scoped data.\n     */\n    ImageInstance.destroy = function () {\n        rasterizationLookUp.clear();\n    };\n    Object.defineProperty(ImageInstance.prototype, \"element\", {\n        // The following are the getters for the locked in parameters of the image so we can read\n        // The properties but not set any of them.\n        /** This is the provided element this image will be rendering */\n        get: function () { return this._element; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"isDestroyed\", {\n        /** This flag indicates if this image is valid anymore */\n        get: function () { return this._isDestroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"path\", {\n        /** This is the path to the image's resource if it's available */\n        get: function () { return this._path; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"resource\", {\n        /** This gets the atlas resource that is uniquely idenfied for this image */\n        get: function () { return this._rasterization.resource; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"sourceWidth\", {\n        /**\n         * This is the width in world space of the image. If there is no camera distortion,\n         * this would be the width of the image in pixels on the screen.\n         */\n        get: function () {\n            return this._sourceWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"sourceHeight\", {\n        /**\n         * This is the height in world space of the image. If there is no camera distortion,\n         * this would be the height of the image in pixels on the screen.\n         */\n        get: function () {\n            return this._sourceHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Images are a sort of unique case where the use of a image should be destroyed as rasterization\n     * resources are in a way kept alive through reference counting.\n     */\n    ImageInstance.prototype.destroy = function () {\n        if (!this._isDestroyed) {\n            this._isDestroyed = true;\n            this._rasterization.references--;\n            // If all references are cleared, then the rasterization needs to be eradicated\n            if (this._rasterization.references === 0) {\n                this._rasterization.resource;\n                console.warn('The destroy method still needs completion');\n            }\n        }\n    };\n    Object.defineProperty(ImageInstance.prototype, \"anchor\", {\n        get: function () {\n            return this._anchor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This applies a new anchor to this image and properly determines it's anchor position on the image\n     */\n    ImageInstance.prototype.setAnchor = function (anchor) {\n        var newAnchor = {\n            padding: anchor.padding || 0,\n            type: anchor.type,\n            x: anchor.x || 0,\n            y: anchor.y || 0,\n        };\n        // Calculate the new anchors position values\n        anchorCalculator[newAnchor.type](newAnchor, this);\n        // Apply the anchor\n        this._anchor = newAnchor;\n    };\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"tint\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"depth\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"height\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"scaling\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"width\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"x\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"y\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], ImageInstance.prototype, \"_anchor\", void 0);\n    return ImageInstance;\n}(instance_1.Instance));\nexports.ImageInstance = ImageInstance;\nvar _a;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the image as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the image is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y;\\n\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float(cameraScale.x != cameraScale.y);\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n\\n  // Get the tex coord from our inject texture info\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the image's tint as a tint to the image\\n  vertexColor = tint;\\n\\n  // Correct aspect ratio.\\n  size = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * size + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the image\\n  float imageScreenScale = mix(\\n    screenSize.y / size.y,\\n    screenSize.x / size.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the image is supposed to be, then we automagically\\n  // scale down our image to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / imageScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  gl_FragColor = texture2D(imageAtlas, texCoord) * vertexColor;\\n  setColor(gl_FragColor * gl_FragColor.a);\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar types_2 = require(\"../types\");\nvar min = Math.min, max = Math.max;\n/**\n * This layer displays Images and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar ImageLayer = /** @class */ (function (_super) {\n    __extends(ImageLayer, _super);\n    function ImageLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    ImageLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given image\n            boundsAccessor: function (image) {\n                var topLeft = [\n                    image.x - image.anchor.x,\n                    image.y - image.anchor.y,\n                ];\n                return new primitives_1.Bounds({\n                    height: image.height,\n                    width: image.width,\n                    x: topLeft[0],\n                    y: topLeft[1],\n                });\n            },\n            // Provide a precise hit test for the circle\n            hitTest: function (image, point, view) {\n                // The bounds of the image is in world space, but it does not account for the scale mode of the image.\n                // Here, we will apply the scale mode testing to the image\n                var maxScale = max.apply(void 0, view.camera.scale);\n                var minScale = min.apply(void 0, view.camera.scale);\n                // If we scale always then the image stays within it's initial world bounds at all times\n                if (image.scaling === types_2.ScaleType.ALWAYS) {\n                    return true;\n                }\n                // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n                // Image the same size. If the camera zooms out then the bounds === the world bounds.\n                else if (image.scaling === types_2.ScaleType.BOUND_MAX) {\n                    // We are zooming out. the bounds will stay within the world bounds\n                    if (minScale <= 1 && maxScale <= 1) {\n                        return true;\n                    }\n                    // We are zooming in. The bounds will shrink to keep the image at max font size\n                    else {\n                        // The location is within the world, but we reverse project the anchor spread\n                        var topLeft = view.worldToScreen({\n                            x: image.x - (image.anchor.x / view.camera.scale[0]),\n                            y: image.y - (image.anchor.y / view.camera.scale[1]),\n                        });\n                        var screenPoint = view.worldToScreen(point);\n                        // Reverse project the size and we should be within the distorted world coordinates\n                        return new primitives_1.Bounds({\n                            height: image.height,\n                            width: image.width,\n                            x: topLeft.x,\n                            y: topLeft.y,\n                        }).containsPoint(screenPoint);\n                    }\n                }\n                // If we never allow the image to scale, then the bounds will grow and shrink to counter the effects\n                // Of the camera zoom\n                else if (image.scaling === types_2.ScaleType.NEVER) {\n                    // The location is within the world, but we reverse project the anchor spread\n                    var topLeft = view.worldToScreen({\n                        x: image.x - (image.anchor.x / view.camera.scale[0]),\n                        y: image.y - (image.anchor.y / view.camera.scale[1]),\n                    });\n                    var screenPoint = view.worldToScreen(point);\n                    // Reverse project the size and we should be within the distorted world coordinates\n                    return new primitives_1.Bounds({\n                        height: image.height,\n                        width: image.width,\n                        x: topLeft.x,\n                        y: topLeft.y,\n                    }).containsPoint(screenPoint);\n                }\n                return true;\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    ImageLayer.prototype.initShader = function () {\n        var _this = this;\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: 0,\n            1: 0,\n            2: 0,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./image-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'location',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'anchor',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.anchor.x, o.anchor.y]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'size',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.width, o.height]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'scaling',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scaling]; },\n                },\n                {\n                    atlas: {\n                        key: this.props.atlas,\n                        name: 'imageAtlas',\n                    },\n                    block: 2,\n                    name: 'texture',\n                    update: function (o) { return _this.resource.request(_this, o, o.resource); },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'tint',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.tint; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (u) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./image-layer.vs'),\n        };\n    };\n    ImageLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    ImageLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return ImageLayer;\n}(layer_1.Layer));\nexports.ImageLayer = ImageLayer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar instance_1 = require(\"../../util/instance\");\nvar EdgeInstance = /** @class */ (function (_super) {\n    __extends(EdgeInstance, _super);\n    function EdgeInstance(options) {\n        var _this = _super.call(this, options) || this;\n        _this.colorStart = [1.0, 1.0, 1.0, 1.0];\n        _this.colorEnd = [1.0, 1.0, 1.0, 1.0];\n        _this.control = [[0, 0], [0, 0]];\n        _this.depth = 0;\n        _this.end = [0, 0];\n        _this.start = [0, 0];\n        _this.widthStart = 1.0;\n        _this.widthEnd = 1.0;\n        _this.colorStart = options.colorStart || _this.colorStart;\n        _this.colorEnd = options.colorEnd || _this.colorEnd;\n        _this.control = options.control || _this.control;\n        _this.depth = options.depth || _this.depth;\n        _this.end = options.end || _this.end;\n        _this.widthStart = options.widthStart || _this.widthStart;\n        _this.widthEnd = options.widthEnd || _this.widthEnd;\n        _this.start = options.start || _this.start;\n        return _this;\n    }\n    Object.defineProperty(EdgeInstance.prototype, \"length\", {\n        get: function () {\n            var delta = [\n                this.end[0] - this.start[0],\n                this.end[1] - this.start[1],\n            ];\n            return Math.sqrt(delta[0] * delta[0] + delta[1] * delta[1]);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EdgeInstance.prototype, \"midpoint\", {\n        /**\n         * Calculates the midpoint of the edge\n         */\n        get: function () {\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EdgeInstance.prototype, \"perpendicular\", {\n        /**\n         * Calculates a perpendicular direction vector to the edge\n         */\n        get: function () {\n            var length = this.length;\n            return [\n                (this.end[1] - this.start[1]) / length,\n                -(this.end[0] - this.start[0]) / length,\n            ];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Applies the edge width to the start and end\n     */\n    EdgeInstance.prototype.setEdgeWidth = function (width) {\n        if (width) {\n            this.widthEnd = width;\n            this.widthStart = width;\n        }\n    };\n    /**\n     * Applies the color to the start and end\n     */\n    EdgeInstance.prototype.setColor = function (color) {\n        this.colorStart = color;\n        this.colorEnd = color;\n    };\n    __decorate([\n        instance_provider_1.observable\n    ], EdgeInstance.prototype, \"colorStart\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], EdgeInstance.prototype, \"colorEnd\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], EdgeInstance.prototype, \"control\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], EdgeInstance.prototype, \"depth\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], EdgeInstance.prototype, \"end\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], EdgeInstance.prototype, \"start\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], EdgeInstance.prototype, \"widthStart\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], EdgeInstance.prototype, \"widthEnd\", void 0);\n    return EdgeInstance;\n}(instance_1.Instance));\nexports.EdgeInstance = EdgeInstance;\n","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\n\\nvoid main() {\\n  setColor(vertexColor);\\n}\\n\"","module.exports = \"/**\\n  This vertex shader calculates edges based in world space to make an edge based on\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nprecision highp float;\\n\\nvarying vec4 vertexColor;\\n\\n// Interpolation type injection\\n${interpolation}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n\\n  // Convert our world points to screen space\\n  vec4 startClip = clipSpace(vec3(start, depth));\\n  vec4 endClip = clipSpace(vec3(end, depth));\\n  vec2 startScreen = (startClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  vec2 endScreen = (endClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Controls for this mode are screen space deltas from the end points\\n  vec2 control1 = startScreen + vec2(control.x, -control.y) * scaleFactor;\\n  vec2 control2 = endScreen + vec2(control.z, -control.w) * scaleFactor;\\n\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, startScreen, endScreen, control1, control2);\\n  // Calculate the next and previous segment's location on the line\\n  vec2 prePosition = interpolation(interpolationTime - interpolationIncrement, startScreen, endScreen, control1, control2);\\n  vec2 nextPosition = interpolation(interpolationTime + interpolationIncrement, startScreen, endScreen, control1, control2);\\n\\n  vec2 preLine = prePosition - currentPosition;\\n  vec2 nextLine = nextPosition - currentPosition;\\n\\n  // Get a spliced nromal at the joining of two segments to make a crisper curve\\n  vec2 currentNormal = mix(\\n    // Pick this value if we're at the beginning of the line\\n    normalize(vec2(preLine.y, -preLine.x)),\\n    mix(\\n      // Pick this value when we're between the ends\\n      normalize(vec2(preLine.y, -preLine.x) + vec2(-nextLine.y, nextLine.x)),\\n      // Pick this value if we're at the end of the line\\n      normalize(vec2(-nextLine.y, nextLine.x)),\\n      float(position.x >= 1.0)\\n    ),\\n    float(position.x > 0.0)\\n  );\\n\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (-normal * lineThickness * scaleFactor);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a;\\n\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), startClip.zw);\\n  gl_PointSize = 5.0;\\n}\\n\"","module.exports = \"precision highp float;\\n\\n/**\\n  This vertex shader calculates edges whose curve and width is in screen space where the curve is\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nvarying vec4 vertexColor;\\n\\n// Interpolation type injection\\n${interpolation}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, start, end, control.xy, control.zw);\\n  // Calculate the next and previous segment's location on the line\\n  vec2 prePosition = interpolation(interpolationTime - interpolationIncrement, start, end, control.xy, control.zw);\\n  vec2 nextPosition = interpolation(interpolationTime + interpolationIncrement, start, end, control.xy, control.zw);\\n\\n  vec2 preLine = prePosition - currentPosition;\\n  vec2 nextLine = nextPosition - currentPosition;\\n\\n  // Get a spliced nromal at the joining of two segments to make a crisper curve\\n  vec2 currentNormal = mix(\\n    // Pick this value if we're at the beginning of the line\\n    normalize(vec2(preLine.y, -preLine.x)),\\n    mix(\\n      // Pick this value when we're between the ends\\n      normalize(vec2(preLine.y, -preLine.x) + vec2(-nextLine.y, nextLine.x)),\\n      // Pick this value if we're at the end of the line\\n      normalize(vec2(-nextLine.y, nextLine.x)),\\n      float(position.x >= 1.0)\\n    ),\\n    float(position.x > 0.0)\\n  );\\n\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (normal * lineThickness);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a;\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n  gl_PointSize = 5.0;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  float t1 = 1.0 - t;\\n  return pow(t1, 3.0) * p1 + 3.0 * t * pow(t1, 2.0) * c1 + 3.0 * pow(t, 2.0) * t1 * c2 + pow(t, 3.0) * p2;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return (1.0 - t) * (1.0 - t) * p1 + 2.0 * t * (1.0 - t) * c1 + t * t * p2;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return p1 + (p2 - p1) * t;\\n}\\n\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\nvar vector_1 = require(\"../../util/vector\");\nvar types_1 = require(\"./types\");\nvar pow = Math.pow;\n/** This is an interpolation across a line */\nfunction linear(t, p1, p2, c1, c2) {\n    return vector_1.add2(vector_1.scale2(vector_1.subtract2(p2, p1), t), p1);\n}\n/** This is an interpolation across a bezier curve, single control */\nfunction bezier(t, p1, p2, c1, c2) {\n    return [\n        (1.0 - t) * (1.0 - t) * p1[0] + 2.0 * t * (1.0 - t) * c1[0] + t * t * p2[0],\n        (1.0 - t) * (1.0 - t) * p1[1] + 2.0 * t * (1.0 - t) * c1[1] + t * t * p2[1],\n    ];\n}\n/** This is an interpolation across a bezier curve, double control */\nfunction bezier2(t, p1, p2, c1, c2) {\n    var t1 = 1.0 - t;\n    return [\n        (pow(t1, 3.0) * p1[0]) + (3.0 * t * pow(t1, 2.0) * c1[0]) + (3.0 * pow(t, 2.0) * t1 * c2[0]) + (pow(t, 3.0) * p2[0]),\n        (pow(t1, 3.0) * p1[1]) + (3.0 * t * pow(t1, 2.0) * c1[1]) + (3.0 * pow(t, 2.0) * t1 * c2[1]) + (pow(t, 3.0) * p2[1]),\n    ];\n}\n/** A quick lookup for an interpolation method based on Edge Type */\nvar interpolation = (_a = {},\n    _a[types_1.EdgeType.LINE] = linear,\n    _a[types_1.EdgeType.BEZIER] = bezier,\n    _a[types_1.EdgeType.BEZIER2] = bezier2,\n    _a);\n/** Converts a point array to a point object */\nfunction toPointObject(point) {\n    return {\n        x: point[0],\n        y: point[1],\n    };\n}\n/** Converts a point object to a point array */\nfunction toPointArray(point) {\n    return [\n        point.x,\n        point.y,\n    ];\n}\n/** Takes two points that forms a line then calculates the nearest distance from that line to the third point */\nfunction distanceTo(start, end, p) {\n    // Make a vector from a line point to the indicated point\n    var vector = vector_1.subtract2(start, p);\n    var lineDirection = vector_1.subtract2(end, start);\n    var lineNormal = [lineDirection[1], -lineDirection[0]];\n    var distance = Math.abs(vector_1.dot2(vector, lineNormal)) / vector_1.length2(lineDirection);\n    // The distance is d = |v . r| where v is a unit perpendicular vector to the Line\n    return distance;\n}\n// This sets the number of iterations along a curve we sample to test collisions with\nvar TEST_RESOLUTION = 50;\n/**\n * This generates the picking methods needed for managing PickType.ALL for the edge layer.\n */\nfunction edgePicking(props) {\n    var broadphase = props.broadphase, _a = props.minPickDistance, minPickDistance = _a === void 0 ? 0 : _a, scaleType = props.scaleType, type = props.type;\n    var interpolate = interpolation[props.type];\n    var boundsAccessor = function (edge) {\n        var edgeWidthStart = edge.widthStart / 2 + minPickDistance;\n        var edgeWidthEnd = edge.widthEnd / 2 + minPickDistance;\n        // Encapsulate the endpoints as they are guaranteed to be included in the shape\n        // Each endpoint will be a box that includes the endpoint thickness\n        var bounds = new bounds_1.Bounds({\n            height: edge.widthStart,\n            width: edge.widthStart,\n            x: edge.start[0] - edgeWidthStart,\n            y: edge.start[1] - edgeWidthStart,\n        });\n        bounds.encapsulate(new bounds_1.Bounds({\n            height: edge.widthEnd,\n            width: edge.widthEnd,\n            x: edge.end[0] - edgeWidthEnd,\n            y: edge.end[1] - edgeWidthEnd,\n        }));\n        // Encapsulating the bezier control points is enough of a broadphase for beziers\n        if (props.type === types_1.EdgeType.BEZIER) {\n            bounds.encapsulate({\n                x: edge.control[0][0],\n                y: edge.control[0][1],\n            });\n        }\n        // Encapsulating the bezier control points is enough of a broadphase for beziers\n        else if (props.type === types_1.EdgeType.BEZIER2) {\n            bounds.encapsulate({\n                x: edge.control[0][0],\n                y: edge.control[0][1],\n            });\n            bounds.encapsulate({\n                x: edge.control[1][0],\n                y: edge.control[1][1],\n            });\n        }\n        if (broadphase === types_1.EdgeBroadphase.PASS_X) {\n            bounds.x = Number.MIN_SAFE_INTEGER / 2;\n            bounds.width = Number.MAX_SAFE_INTEGER;\n        }\n        if (broadphase === types_1.EdgeBroadphase.PASS_Y) {\n            bounds.y = Number.MIN_SAFE_INTEGER / 2;\n            bounds.height = Number.MAX_SAFE_INTEGER;\n        }\n        return bounds;\n    };\n    if (scaleType === types_1.EdgeScaleType.SCREEN_CURVE) {\n        return {\n            // Provide the calculated AABB world bounds for a given circle\n            boundsAccessor: boundsAccessor,\n            // Provide a precise hit test for the edge. This method performs all of the rendering\n            // And hit tests within screen space as opposed to world space.\n            hitTest: function (edge, point, view) {\n                point = view.worldToScreen(point);\n                var mouse = [point.x, point.y];\n                var closestIndex = 0;\n                var closestDistance = Number.MAX_VALUE;\n                var secondClosestIndex = 0;\n                var secondClosestDistance = Number.MAX_VALUE;\n                var start = view.worldToScreen(toPointObject(edge.start));\n                var end = view.worldToScreen(toPointObject(edge.end));\n                var control1, control2;\n                if (type === types_1.EdgeType.BEZIER) {\n                    control1 = vector_1.add2(toPointArray(start), edge.control[0]);\n                }\n                else if (type === types_1.EdgeType.BEZIER2) {\n                    control1 = vector_1.add2(toPointArray(start), edge.control[0]);\n                    control2 = vector_1.add2(toPointArray(end), edge.control[1]);\n                }\n                var startPoint = toPointArray(start);\n                var endPoint = toPointArray(end);\n                control1 = edge.control.length > 0 ? control1 : [0, 0];\n                control2 = edge.control.length > 1 ? control2 : [0, 0];\n                // Loop through sample points on the line and find one that is closest to the mouse point as possible\n                for (var i = 0; i < TEST_RESOLUTION; ++i) {\n                    var linePoint = interpolate(i / TEST_RESOLUTION, startPoint, endPoint, control1, control2);\n                    var distance = vector_1.length2(vector_1.subtract2(mouse, linePoint));\n                    if (distance < closestDistance) {\n                        secondClosestIndex = closestIndex;\n                        secondClosestDistance = closestDistance;\n                        closestIndex = i;\n                        closestDistance = distance;\n                    }\n                    else if (distance < secondClosestDistance) {\n                        secondClosestIndex = i;\n                        closestDistance = distance;\n                    }\n                }\n                var t = closestIndex / TEST_RESOLUTION;\n                var lineWidth = (edge.widthEnd - edge.widthStart) * t + edge.widthStart;\n                if (closestIndex === secondClosestIndex) {\n                    return false;\n                }\n                var startSegment = interpolate(closestIndex / TEST_RESOLUTION, startPoint, endPoint, control1, control2);\n                var endSegment = interpolate(secondClosestIndex / TEST_RESOLUTION, startPoint, endPoint, control1, control2);\n                // See how close the mouse is to the line between the two closest points for a more accurate\n                // Test\n                closestDistance = distanceTo(startSegment, endSegment, mouse);\n                // This helps determine if the mouse is beyond the end point\n                if (vector_1.dot2(vector_1.subtract2(endSegment, startSegment), vector_1.subtract2(mouse, startSegment)) < 0) {\n                    return false;\n                }\n                return closestDistance < ((lineWidth / 2.0) + minPickDistance);\n            },\n        };\n    }\n    return {\n        // Provide the calculated AABB world bounds for a given circle\n        boundsAccessor: boundsAccessor,\n        // Provide a precise hit test for the edge\n        hitTest: function (edge, point, view) {\n            var mouse = [point.x, point.y];\n            var closestIndex = 0;\n            var closestDistance = Number.MAX_VALUE;\n            // Loop through sample points on the line and find one that is closest to the mouse point as possible\n            for (var i = 0; i < TEST_RESOLUTION; ++i) {\n                var linePoint = interpolate(i / TEST_RESOLUTION, edge.start, edge.end, edge.control.length > 0 ? edge.control[0] : [0, 0], edge.control.length > 1 ? edge.control[1] : [0, 0]);\n                var distance = vector_1.length2(vector_1.subtract2(mouse, linePoint));\n                if (distance < closestDistance) {\n                    closestIndex = i;\n                    closestDistance = distance;\n                }\n            }\n            var t = closestIndex / TEST_RESOLUTION;\n            var lineWidth = (edge.widthEnd - edge.widthStart) * t + edge.widthStart;\n            return closestDistance < (lineWidth / 2.0);\n        },\n    };\n}\nexports.edgePicking = edgePicking;\nvar _a;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar util_1 = require(\"../../util\");\nvar edge_picking_1 = require(\"./edge-picking\");\nvar types_2 = require(\"./types\");\n/** Converts a control list to an IO value */\nfunction toInstanceIOValue(value) {\n    return [\n        value[0][0],\n        value[0][1],\n        value[1][0],\n        value[1][1],\n    ];\n}\n/** This picks the appropriate shader for the edge type desired */\nvar pickVS = (_a = {},\n    _a[types_2.EdgeType.LINE] = require('./shader/edge-layer-line.vs'),\n    _a[types_2.EdgeType.BEZIER] = require('./shader/edge-layer-bezier.vs'),\n    _a[types_2.EdgeType.BEZIER2] = require('./shader/edge-layer-bezier2.vs'),\n    _a);\n/** This is the base edge layer which is a template that can be filled with the needed specifics for a given line type */\nvar baseVS = require('./shader/edge-layer.vs');\nvar screenVS = require('./shader/edge-layer-screen-curve.vs');\nvar edgeFS = require('./shader/edge-layer.fs');\n/**\n * This layer displays edges and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar EdgeLayer = /** @class */ (function (_super) {\n    __extends(EdgeLayer, _super);\n    function EdgeLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    EdgeLayer.prototype.getInstancePickingMethods = function () {\n        return edge_picking_1.edgePicking(this.props);\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    EdgeLayer.prototype.initShader = function () {\n        var _a = this.props, _b = _a.scaleFactor, scaleFactor = _b === void 0 ? function () { return 1; } : _b, type = _a.type, _c = _a.scaleType, scaleType = _c === void 0 ? types_2.EdgeScaleType.NONE : _c;\n        var MAX_SEGMENTS = type === types_2.EdgeType.LINE ? 2 : 50;\n        // Calculate the normals and interpolations for our vertices\n        var vertexToNormal = (_d = {\n                0: 1\n            },\n            _d[MAX_SEGMENTS * 2 + 2] = -1,\n            _d);\n        var vertexInterpolation = (_e = {\n                0: 0\n            },\n            _e[MAX_SEGMENTS * 2 + 2] = 1,\n            _e);\n        var sign = 1;\n        for (var i = 0; i < MAX_SEGMENTS * 2; ++i) {\n            vertexToNormal[i + 1] = sign;\n            vertexInterpolation[i + 1] = Math.floor(i / 2) / (MAX_SEGMENTS - 1);\n            sign *= -1;\n        }\n        var vs = util_1.shaderTemplate(scaleType === types_2.EdgeScaleType.NONE ? baseVS : screenVS, {\n            // Retain the attributes injection\n            attributes: '${attributes}',\n            // Inject the proper interpolation method\n            interpolation: pickVS[type],\n        }, {\n            name: 'Edge Layer',\n            values: [\n                'interpolation',\n            ],\n        });\n        return {\n            fs: edgeFS,\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'start',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return o.start; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'end',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return o.end; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'widthStart',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.widthStart]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.TWO,\n                    name: 'widthEnd',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.widthEnd]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 2,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'colorStart',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.colorStart; },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'colorEnd',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.colorEnd; },\n                },\n                type === types_2.EdgeType.LINE ? {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'control',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return [0, 0, 0, 0]; },\n                } : null,\n                type === types_2.EdgeType.BEZIER ? {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'control',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return [o.control[0][0], o.control[0][1], 0, 0]; },\n                } : null,\n                type === types_2.EdgeType.BEZIER2 ? {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'control',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return toInstanceIOValue(o.control); },\n                } : null,\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (uniform) { return [scaleFactor()]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexInterpolation[vertex],\n                        // The number of vertices\n                        MAX_SEGMENTS * 2,\n                    ]; },\n                },\n            ],\n            vertexCount: MAX_SEGMENTS * 2 + 2,\n            vs: vs.shader,\n        };\n        var _d, _e;\n    };\n    EdgeLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    EdgeLayer.prototype.getMaterialOptions = function () {\n        return {\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    // Set default props for the layer\n    EdgeLayer.defaultProps = {\n        broadphase: types_2.EdgeBroadphase.ALL,\n        data: null,\n        key: 'none',\n        scaleType: types_2.EdgeScaleType.NONE,\n        type: types_2.EdgeType.LINE,\n    };\n    return EdgeLayer;\n}(layer_1.Layer));\nexports.EdgeLayer = EdgeLayer;\nvar _a;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./edge-layer\"));\n__export(require(\"./edge-instance\"));\n__export(require(\"./types\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_provider_1 = require(\"../../instance-provider\");\nvar instance_1 = require(\"../../util/instance\");\nvar CircleInstance = /** @class */ (function (_super) {\n    __extends(CircleInstance, _super);\n    function CircleInstance(options) {\n        var _this = _super.call(this, options) || this;\n        _this.color = [1.0, 1.0, 1.0, 1.0];\n        _this.depth = 0;\n        _this.radius = 0;\n        _this.x = 0;\n        _this.y = 0;\n        _this.color = options.color || _this.color;\n        _this.radius = options.radius || _this.radius;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        _this.depth = options.depth || _this.depth;\n        return _this;\n    }\n    Object.defineProperty(CircleInstance.prototype, \"width\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CircleInstance.prototype, \"height\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        instance_provider_1.observable\n    ], CircleInstance.prototype, \"color\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], CircleInstance.prototype, \"depth\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], CircleInstance.prototype, \"radius\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], CircleInstance.prototype, \"x\", void 0);\n    __decorate([\n        instance_provider_1.observable\n    ], CircleInstance.prototype, \"y\", void 0);\n    return CircleInstance;\n}(instance_1.Instance));\nexports.CircleInstance = CircleInstance;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  vertexColor = color * color.a;\\n  gl_PointSize = radius * 2.0 * pixelRatio * scaleFactor;\\n  edgeSharpness = mix(0.8, 0.01, min(gl_PointSize / (45.0 * pixelRatio), 1.0));\\n  gl_Position = clipSpace(vec3(center, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius + (radius * 0.01),\\n    dot(dist, dist) * 4.0\\n  );\\n}\\n\\nvoid main() {\\n  float step_factor = circle(gl_PointCoord.xy, 1.0);\\n\\n  setColor(mix(\\n    vec4(0.0, 0.0, 0.0, 0.0),\\n    vertexColor,\\n    step_factor\\n  ));\\n}\\n\"","module.exports = \"void main() {\\n  gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n}\"","module.exports = \"\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\n/**\n * This manages mouse gestures broadcast to the layer and handles appropriate actions such as determining\n * how to make the interaction translate to picking events for the layer's instances.\n *\n * This class, in summary, takes in the gestures to the view and converts them to gestures to the instances.\n */\nvar LayerInteractionHandler = /** @class */ (function () {\n    function LayerInteractionHandler(layer) {\n        /** This tracks the elements that have the mouse currently over them */\n        this.isMouseOver = new Map();\n        /** This tracks the elements the mouse was down on */\n        this.isMouseDown = new Map();\n        this.layer = layer;\n    }\n    /**\n     * Retrieves the color picking instance determined for the procedure.\n     */\n    LayerInteractionHandler.prototype.getColorPickInstance = function () {\n        if (this.colorPicking) {\n            return this.layer.diffManager.colorPicking.uidToInstance.get(0xFFFFFF - this.colorPicking.nearestColor);\n        }\n        return null;\n    };\n    /**\n     * Handles mouse down gestures for a layer within a view\n     */\n    LayerInteractionHandler.prototype.handleMouseOver = function (view, mouse) {\n        // This is the mouse over for the view itself. We should probably just let the mouse over events handle the interactions\n        // With the instances\n    };\n    /**\n     * Handles mouse down gestures for a layer within a view\n     */\n    LayerInteractionHandler.prototype.handleMouseDown = function (view, mouse, button) {\n        var _this = this;\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type !== types_1.PickType.NONE) {\n            var onMouseDown = this.layer.props.onMouseDown;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseDown) {\n                var world_1 = view.viewToWorld(mouse);\n                var hitTest_1;\n                var query_1;\n                var querySpace = void 0;\n                var instances = [];\n                if (this.layer.picking.type === types_1.PickType.ALL) {\n                    hitTest_1 = this.layer.picking.hitTest;\n                    query_1 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                    querySpace = function (check) { return query_1(check).filter(function (o) { return hitTest_1(o, world_1, view); }); };\n                    instances = query_1(world_1).filter(function (o) { return hitTest_1(o, world_1, view); });\n                }\n                else if (this.layer.picking.type === types_1.PickType.SINGLE) {\n                    // Get the instance for the nearest color\n                    var instanceForColor = this.getColorPickInstance();\n                    if (instanceForColor) {\n                        instances.push(instanceForColor);\n                    }\n                }\n                var info = {\n                    button: button,\n                    instances: instances,\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: querySpace,\n                    screen: [mouse.x, mouse.y],\n                    world: [world_1.x, world_1.y],\n                };\n                onMouseDown(info);\n                // We track all the elements the mouse is currently down on\n                this.isMouseDown.clear();\n                instances.forEach(function (o) { return _this.isMouseDown.set(o, true); });\n            }\n        }\n    };\n    /**\n     * Handles mouse out events for a layer within the view\n     */\n    LayerInteractionHandler.prototype.handleMouseOut = function (view, mouse) {\n        // This will fire an instance mouse out for any over instances in the queue since we left the view\n        // Thus no instances shall be considered 'over'\n        if (this.layer.picking && this.layer.picking.type !== types_1.PickType.NONE) {\n            var onMouseOut = this.layer.props.onMouseOut;\n            if (onMouseOut) {\n                var world_2 = view.viewToWorld(mouse);\n                var hitTest_2;\n                var query_2;\n                var querySpace = void 0;\n                if (this.layer.picking.type === types_1.PickType.ALL) {\n                    hitTest_2 = this.layer.picking.hitTest;\n                    query_2 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                    querySpace = function (check) { return query_2(check).filter(function (o) { return hitTest_2(o, world_2, view); }); };\n                }\n                var info = {\n                    instances: Array.from(this.isMouseOver.keys()),\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: querySpace,\n                    screen: [mouse.x, mouse.y],\n                    world: [world_2.x, world_2.y],\n                };\n                onMouseOut(info);\n            }\n        }\n        // We clear as no instances are over anymore\n        this.isMouseOver.clear();\n        // We also clear all down elements as the mouse is no longer in proper context for the instances\n        // But since the mouse was never actually released, we do not fire an up\n        this.isMouseDown.clear();\n    };\n    /**\n     * Handles mouse up gestures for the layer within the provided view\n     */\n    LayerInteractionHandler.prototype.handleMouseUp = function (view, mouse, button) {\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type !== types_1.PickType.NONE) {\n            var onMouseUp = this.layer.props.onMouseUp;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseUp) {\n                var world_3 = view.viewToWorld(mouse);\n                var hitTest_3;\n                var query_3;\n                var querySpace = void 0;\n                var instances = [];\n                if (this.layer.picking.type === types_1.PickType.ALL) {\n                    hitTest_3 = this.layer.picking.hitTest;\n                    query_3 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                    querySpace = function (check) { return query_3(check).filter(function (o) { return hitTest_3(o, world_3, view); }); };\n                    instances = query_3(world_3).filter(function (o) { return hitTest_3(o, world_3, view); });\n                }\n                else if (this.layer.picking.type === types_1.PickType.SINGLE) {\n                    // Get the instance for the nearest color\n                    var instanceForColor = this.getColorPickInstance();\n                    if (instanceForColor) {\n                        instances.push(instanceForColor);\n                    }\n                }\n                var info = {\n                    button: button,\n                    instances: instances,\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: querySpace,\n                    screen: [mouse.x, mouse.y],\n                    world: [world_3.x, world_3.y],\n                };\n                onMouseUp(info);\n            }\n        }\n    };\n    /**\n     * Mouse move events on the layer will detect when instances have their item newly over or just moved on\n     */\n    LayerInteractionHandler.prototype.handleMouseMove = function (view, mouse) {\n        var _this = this;\n        // This handles interactions for PickType ALL layers\n        var _a = this.layer.props, onMouseOver = _a.onMouseOver, onMouseMove = _a.onMouseMove, onMouseOut = _a.onMouseOut;\n        if (this.layer.picking && this.layer.picking.type !== types_1.PickType.NONE) {\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseOver || onMouseMove || onMouseOut) {\n                var info = void 0;\n                var world_4 = view.viewToWorld(mouse);\n                var hitTest_4;\n                var query_4;\n                var querySpace = void 0;\n                var instances = [];\n                if (this.layer.picking.type === types_1.PickType.ALL) {\n                    hitTest_4 = this.layer.picking.hitTest;\n                    query_4 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                    querySpace = function (check) { return query_4(check).filter(function (o) { return hitTest_4(o, world_4, view); }); };\n                    instances = query_4(world_4).filter(function (o) { return hitTest_4(o, world_4, view); });\n                }\n                else if (this.layer.picking.type === types_1.PickType.SINGLE) {\n                    // Get the instance for the nearest color\n                    var instanceForColor = this.getColorPickInstance();\n                    if (instanceForColor) {\n                        instances.push(instanceForColor);\n                    }\n                }\n                // Broadcast the picking info for newly over instances to any of the layers listeners if needed\n                if (onMouseOver) {\n                    var notOverInstances = instances.filter(function (o) { return !_this.isMouseOver.get(o); });\n                    info = {\n                        instances: notOverInstances,\n                        layer: this.layer.id,\n                        projection: view,\n                        querySpace: querySpace,\n                        screen: [mouse.x, mouse.y],\n                        world: [world_4.x, world_4.y],\n                    };\n                    if (notOverInstances.length > 0)\n                        onMouseOver(info);\n                }\n                // Broadcast the the picking info for all instances that the mouse moved on\n                if (onMouseMove) {\n                    // This is the pick info object we will broadcast from the layer\n                    info = {\n                        instances: instances,\n                        layer: this.layer.id,\n                        projection: view,\n                        querySpace: querySpace,\n                        screen: [mouse.x, mouse.y],\n                        world: [world_4.x, world_4.y],\n                    };\n                    onMouseMove(info);\n                }\n                // We take the hovered instances\n                var isCurrentlyOver_1 = new Map();\n                instances.forEach(function (o) { return isCurrentlyOver_1.set(o, true); });\n                // Broadcast the the picking info for all instances that the mouse moved off of\n                if (onMouseOut) {\n                    var noLongerOver = Array.from(this.isMouseOver.keys()).filter(function (o) { return !isCurrentlyOver_1.get(o); });\n                    // This is the pick info object we will broadcast from the layer\n                    info = {\n                        instances: noLongerOver,\n                        layer: this.layer.id,\n                        projection: view,\n                        querySpace: querySpace,\n                        screen: [mouse.x, mouse.y],\n                        world: [world_4.x, world_4.y],\n                    };\n                    if (noLongerOver.length > 0)\n                        onMouseOut(info);\n                }\n                // We store the current hovered over items as our over item list for next interaction\n                this.isMouseOver = isCurrentlyOver_1;\n            }\n        }\n    };\n    /**\n     * Handles click gestures on the layer within a view\n     */\n    LayerInteractionHandler.prototype.handleMouseClick = function (view, mouse, button) {\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type !== types_1.PickType.NONE) {\n            var onMouseClick = this.layer.props.onMouseClick;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseClick) {\n                var world_5 = view.viewToWorld(mouse);\n                var hitTest_5;\n                var query_5;\n                var querySpace = void 0;\n                var instances = [];\n                if (this.layer.picking.type === types_1.PickType.ALL) {\n                    hitTest_5 = this.layer.picking.hitTest;\n                    query_5 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                    querySpace = function (check) { return query_5(check).filter(function (o) { return hitTest_5(o, world_5, view); }); };\n                    instances = query_5(world_5).filter(function (o) { return hitTest_5(o, world_5, view); });\n                }\n                else if (this.layer.picking.type === types_1.PickType.SINGLE) {\n                    // Get the instance for the nearest color\n                    var instanceForColor = this.getColorPickInstance();\n                    if (instanceForColor) {\n                        instances.push(instanceForColor);\n                    }\n                }\n                var info = {\n                    button: button,\n                    instances: instances,\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: querySpace,\n                    screen: [mouse.x, mouse.y],\n                    world: [world_5.x, world_5.y],\n                };\n                onMouseClick(info);\n            }\n        }\n    };\n    /**\n     * Handles drag gestures for the layer within the view\n     */\n    LayerInteractionHandler.prototype.handleMouseDrag = function (view, mouse) {\n        // We probably should not broadcast drag events for the sake of instances. Instance dragging should be handled on\n        // An instance by instance basis rather than coming from the view's gestures\n    };\n    return LayerInteractionHandler;\n}());\nexports.LayerInteractionHandler = LayerInteractionHandler;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\n// This is a mapping of the vector properties as they relate to an array order\nvar VECTOR_ACCESSORS = ['x', 'y', 'z', 'w'];\n/**\n * This class manages the process of taking the diffs of a layer and executing methods on those diffs to perform\n * updates to the uniforms that control those instances.\n */\nvar InstanceDiffManager = /** @class */ (function () {\n    function InstanceDiffManager(layer) {\n        this.layer = layer;\n    }\n    /**\n     * This returns the proper diff processor for handling diffs\n     */\n    InstanceDiffManager.prototype.getDiffProcessor = function () {\n        if (this.layer.picking) {\n            if (this.layer.picking.type === types_1.PickType.ALL) {\n                this.quadPicking = this.layer.picking;\n                return [\n                    this.changeInstanceQuad,\n                    this.addInstanceQuad,\n                    this.removeInstanceQuad,\n                ];\n            }\n            else if (this.layer.picking.type === types_1.PickType.SINGLE) {\n                this.colorPicking = this.layer.picking;\n                this.colorPicking.uidToInstance = new Map();\n                return [\n                    this.changeInstanceColorPick,\n                    this.addInstanceColorPick,\n                    this.removeInstanceColorPick,\n                ];\n            }\n        }\n        return [\n            this.changeInstance,\n            this.addInstance,\n            this.removeInstance,\n        ];\n    };\n    /**\n     * This processes add operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.addInstance = function (manager, instance, uniformCluster) {\n        // If the uniform cluster already exists, then we swap over to a change update\n        if (uniformCluster) {\n            manager.changeInstance(manager, instance, uniformCluster);\n        }\n        // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n        else {\n            var uniforms = manager.layer.uniformManager.add(instance);\n            instance.active = true;\n            manager.updateInstance(instance, uniforms);\n        }\n    };\n    /**\n     * This processes add operations from changes in the instancing data and manages the layer's quad tree\n     * with the instance as well.\n     */\n    InstanceDiffManager.prototype.addInstanceQuad = function (manager, instance, uniformCluster) {\n        // If the uniform cluster already exists, then we swap over to a change update\n        if (uniformCluster) {\n            manager.changeInstanceQuad(manager, instance, uniformCluster);\n        }\n        // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n        else {\n            var uniforms = manager.layer.uniformManager.add(instance);\n            instance.active = true;\n            manager.updateInstance(instance, uniforms);\n            // Ensure the instance has an updated injection in the quad tree\n            manager.quadPicking.quadTree.remove(instance);\n            manager.quadPicking.quadTree.add(instance);\n        }\n    };\n    /**\n     * This processes add operations from changes in the instancing data and manages the layer's matching of\n     * color / UID to Instance\n     */\n    InstanceDiffManager.prototype.addInstanceColorPick = function (manager, instance, uniformCluster) {\n        // If the uniform cluster already exists, then we swap over to a change update\n        if (uniformCluster) {\n            manager.changeInstanceColorPick(manager, instance, uniformCluster);\n        }\n        // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n        else {\n            var uniforms = manager.layer.uniformManager.add(instance);\n            instance.active = true;\n            manager.updateInstance(instance, uniforms);\n            // Make sure the instance is mapped to it's UID\n            manager.colorPicking.uidToInstance.set(instance.uid, instance);\n        }\n    };\n    /**\n     * This processes change operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.changeInstance = function (manager, instance, uniformCluster) {\n        // If there is an existing uniform cluster for this instance, then we can update the uniforms\n        if (uniformCluster) {\n            manager.updateInstance(instance, uniformCluster);\n        }\n        // If we don't have existing uniforms, then we must remove the instance\n        else {\n            manager.addInstance(manager, instance, uniformCluster);\n        }\n    };\n    /**\n     * This processes change operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.changeInstanceQuad = function (manager, instance, uniformCluster) {\n        // If there is an existing uniform cluster for this instance, then we can update the uniforms\n        if (uniformCluster) {\n            manager.updateInstance(instance, uniformCluster);\n            // Ensure the instance has an updated injection in the quad tree\n            manager.quadPicking.quadTree.remove(instance);\n            manager.quadPicking.quadTree.add(instance);\n        }\n        // If we don't have existing uniforms, then we must remove the instance\n        else {\n            manager.addInstanceQuad(manager, instance, uniformCluster);\n        }\n    };\n    /**\n     * This processes change operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.changeInstanceColorPick = function (manager, instance, uniformCluster) {\n        // If there is an existing uniform cluster for this instance, then we can update the uniforms\n        if (uniformCluster) {\n            manager.updateInstance(instance, uniformCluster);\n        }\n        // If we don't have existing uniforms, then we must remove the instance\n        else {\n            manager.addInstanceColorPick(manager, instance, uniformCluster);\n        }\n    };\n    /**\n     * This processes remove operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.removeInstance = function (manager, instance, uniformCluster) {\n        if (uniformCluster) {\n            // We deactivate the instance so it does not render anymore\n            instance.active = false;\n            // We do one last update on the instance to update to it's deactivated state\n            manager.updateInstance(instance, uniformCluster);\n            // Unlink the instance from the uniform cluster\n            manager.layer.uniformManager.remove(instance);\n        }\n    };\n    /**\n     * This processes remove operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.removeInstanceQuad = function (manager, instance, uniformCluster) {\n        if (uniformCluster) {\n            // We deactivate the instance so it does not render anymore\n            instance.active = false;\n            // We do one last update on the instance to update to it's deactivated state\n            manager.updateInstance(instance, uniformCluster);\n            // Unlink the instance from the uniform cluster\n            manager.layer.uniformManager.remove(instance);\n            // Remove the instance from our quad tree\n            manager.quadPicking.quadTree.remove(instance);\n        }\n    };\n    /**\n     * This processes remove operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.removeInstanceColorPick = function (manager, instance, uniformCluster) {\n        if (uniformCluster) {\n            // We deactivate the instance so it does not render anymore\n            instance.active = false;\n            // We do one last update on the instance to update to it's deactivated state\n            manager.updateInstance(instance, uniformCluster);\n            // Unlink the instance from the uniform cluster\n            manager.layer.uniformManager.remove(instance);\n            // Remove the instance from our quad tree\n            manager.colorPicking.uidToInstance.delete(instance.uid);\n        }\n    };\n    InstanceDiffManager.prototype.updateInstance = function (instance, uniformCluster) {\n        if (instance.active) {\n            var uniforms = uniformCluster.uniform;\n            var uniformRangeStart = uniformCluster.uniformRange[0];\n            var instanceData = uniforms.value;\n            var instanceUniform = void 0, value = void 0, block = void 0, start = void 0;\n            var k = void 0, endk = void 0;\n            // Loop through the instance attributes and update the uniform cluster with the valaues\n            // Calculated for the instance\n            for (var i = 0, end = this.layer.instanceAttributes.length; i < end; ++i) {\n                instanceUniform = this.layer.instanceAttributes[i];\n                value = instanceUniform.update(instance);\n                block = instanceData[uniformRangeStart + instanceUniform.block];\n                instanceUniform.atlas && this.layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n                start = instanceUniform.blockIndex;\n                // Hyper optimized vector filling routine. It uses properties that are globally scoped\n                // To greatly reduce overhead\n                for (k = start, endk = value.length + start; k < endk; ++k) {\n                    block[VECTOR_ACCESSORS[k]] = value[k - start];\n                }\n            }\n            uniforms.value = instanceData;\n        }\n        else {\n            var uniforms = uniformCluster.uniform;\n            var uniformRangeStart = uniformCluster.uniformRange[0];\n            var instanceData = uniforms.value;\n            var instanceUniform = void 0, value = void 0, block = void 0, start = void 0;\n            // Only update the _active attribute to ensure it is false. When it is false, there is no\n            // Point to updating any other uniform\n            instanceUniform = this.layer.activeAttribute;\n            value = instanceUniform.update(instance);\n            block = instanceData[uniformRangeStart + instanceUniform.block];\n            instanceUniform.atlas && this.layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n            start = instanceUniform.blockIndex;\n            // Hyper optimized vector filling routine. It uses properties that are globally scoped\n            // To greatly reduce overhead\n            for (var k = start, endk = value.length + start; k < endk; ++k) {\n                block[VECTOR_ACCESSORS[k]] = value[k - start];\n            }\n            uniforms.value = instanceData;\n        }\n    };\n    return InstanceDiffManager;\n}());\nexports.InstanceDiffManager = InstanceDiffManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Calculates the distance between two points, but keeps the distance in dquared form\n * thus performing Math.sqrt() on the output of this distance would provide the true\n * distance between the points.\n *\n * It is often faster and all that is needed to compare squared distances vs real distances\n * thus eliminating multiple Math.sqrt operations\n *\n * NOTE: For vectors this is the same as (pseudo code):\n * let vector3 = vector2.subtract(vector1)\n * return vector3.dot(vector3)\n *\n * @param p1 The point to find the distance from the second point\n * @param p2 The point to find the distance from the first point\n *\n * @return {number} The distance * distance between the two points\n */\nfunction squareDistance(p1, p2) {\n    var dx = p1.x - p2.x;\n    var dy = p1.y - p2.y;\n    return dx * dx + dy * dy;\n}\n/**\n * Contains methods for managing or manipulating points\n *\n * @export\n * @class Point\n */\nvar Point = /** @class */ (function () {\n    function Point() {\n    }\n    /**\n     * Adds two points together\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @return {IPoint} The two points added together\n     */\n    Point.add = function (p1, p2, out) {\n        if (out) {\n            out.x = p1.x + p2.x;\n            out.y = p1.y + p2.y;\n            return out;\n        }\n        return {\n            x: p1.x + p2.x,\n            y: p1.y + p2.y,\n        };\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {IPoint} The closest point to the test point\n     */\n    Point.getClosest = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = null;\n        var distance;\n        var findClosest = function (point) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = point;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * This just returns the index of the found point and not the point itself\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {number} The index of the closest point to the test point\n     */\n    Point.getClosestIndex = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = 0;\n        var distance;\n        var findClosest = function (point, i) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = i;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This will calculate a direction vector between two points that points toward p2\n     *\n     * @param {IPoint} amount The start of the direction\n     * @param {IPoint} from The direction to point the vector towards\n     * @param {boolean} normalize If true, this will make the vector have a magnitude of 1\n     *\n     * @returns {number}\n     */\n    Point.subtract = function (amount, from, normalize) {\n        if (normalize === void 0) { normalize = false; }\n        var dx = from.x - amount.x;\n        var dy = from.y - amount.y;\n        if (normalize) {\n            var magnitude = Math.sqrt(dx * dx + dy * dy);\n            dx /= magnitude;\n            dy /= magnitude;\n        }\n        return {\n            x: dx,\n            y: dy,\n        };\n    };\n    /**\n     * @static\n     * Gets the distance between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {boolean} squared If set to true, returns the distance * distance (performs faster)\n     *\n     * @returns {number} The real distance between two points\n     */\n    Point.getDistance = function (p1, p2, squared) {\n        if (squared === void 0) { squared = false; }\n        if (squared) {\n            return squareDistance(p1, p2);\n        }\n        return Math.sqrt(squareDistance(p1, p2));\n    };\n    /**\n     * @static\n     * Gets a point perfectly between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     *\n     * @returns {IPoint} The point between the two provided points\n     */\n    Point.getMidpoint = function (p1, p2) {\n        var direction = Point.subtract(p1, p2);\n        return {\n            x: direction.x / 2 + p1.x,\n            y: direction.y / 2 + p1.y,\n        };\n    };\n    Point.make = function (x, y) {\n        return { x: x, y: y };\n    };\n    /**\n     * Scales a point by a given amount\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {number} s The amount to scale the point by\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @memberof Point\n     */\n    Point.scale = function (p1, s, out) {\n        if (out) {\n            out.x = p1.x * s;\n            out.y = p1.y * s;\n            return out;\n        }\n        return {\n            x: p1.x * s,\n            y: p1.y * s,\n        };\n    };\n    /**\n     * Makes a new point initialized to {0,0}\n     *\n     * @static\n     * @returns {IPoint} A new point object at {0,0}\n     */\n    Point.zero = function () {\n        return {\n            x: 0,\n            y: 0,\n        };\n    };\n    return Point;\n}());\nexports.Point = Point;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar CircleLayer = /** @class */ (function (_super) {\n    __extends(CircleLayer, _super);\n    function CircleLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    CircleLayer.prototype.getInstancePickingMethods = function () {\n        var _this = this;\n        return {\n            // Provide the calculated AABB world bounds for a given circle\n            boundsAccessor: function (circle) { return new primitives_1.Bounds({\n                height: circle.radius * 2,\n                width: circle.radius * 2,\n                x: circle.x - circle.radius,\n                y: circle.y - circle.radius,\n            }); },\n            // Provide a precise hit test for the circle\n            hitTest: function (circle, point, view) {\n                var circleScreenCenter = view.worldToScreen(circle);\n                var mouseScreen = view.worldToScreen(point);\n                var r = circle.radius * _this.props.scaleFactor();\n                var delta = [\n                    mouseScreen.x - circleScreenCenter.x,\n                    mouseScreen.y - circleScreenCenter.y,\n                ];\n                return (delta[0] * delta[0] + delta[1] * delta[1]) < (r * r);\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    CircleLayer.prototype.initShader = function () {\n        var scaleFactor = this.props.scaleFactor || (function () { return 1; });\n        return {\n            fs: require('./circle-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'center',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (circle) { return [circle.x, circle.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'radius',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (circle) { return [circle.radius]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (circle) { return [circle.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (circle) { return circle.color; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (uniform) { return [scaleFactor()]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    defaults: [0],\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [0, 0, 0]; },\n                },\n            ],\n            vertexCount: 1,\n            vs: require('./circle-layer.vs'),\n        };\n    };\n    CircleLayer.prototype.getModelType = function () {\n        return {\n            modelType: Three.Points,\n        };\n    };\n    CircleLayer.prototype.getMaterialOptions = function () {\n        return {\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return CircleLayer;\n}(layer_1.Layer));\nexports.CircleLayer = CircleLayer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./circle-layer\"));\n__export(require(\"./circle-instance\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./circles\"));\n__export(require(\"./edges\"));\n__export(require(\"./images\"));\n__export(require(\"./labels\"));\n__export(require(\"./rectangle\"));\n__export(require(\"./rings\"));\n__export(require(\"./types\"));\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * Active `debug` instances.\n */\nexports.instances = [];\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  var prevTime;\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n  debug.destroy = destroy;\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  exports.instances.push(debug);\n\n  return debug;\n}\n\nfunction destroy () {\n  var index = exports.instances.indexOf(this);\n  if (index !== -1) {\n    exports.instances.splice(index, 1);\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var i;\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n\n  for (i = 0; i < exports.instances.length; i++) {\n    var instance = exports.instances[i];\n    instance.enabled = exports.enabled(instance.namespace);\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  if (name[name.length - 1] === '*') {\n    return true;\n  }\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__107__;","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nvar maxPopulation = 5;\nvar maxDepth = 10;\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n */\nvar Quadrants = /** @class */ (function () {\n    /**\n     * Creates an instance of Quadrants.\n     *\n     * @param bounds The bounds this will create quandrants for\n     * @param depth  The child depth of this element\n     */\n    function Quadrants(bounds, depth, getBounds, childToNode, childToBounds) {\n        var mid = bounds.mid;\n        this.TL = new Node(bounds.x, mid.x, bounds.y, mid.y, getBounds, depth);\n        this.TR = new Node(mid.x, bounds.right, bounds.y, mid.y, getBounds, depth);\n        this.BL = new Node(bounds.x, mid.x, mid.y, bounds.bottom, getBounds, depth);\n        this.BR = new Node(mid.x, bounds.right, mid.y, bounds.bottom, getBounds, depth);\n        this.TL.childToNode = childToNode;\n        this.TR.childToNode = childToNode;\n        this.BL.childToNode = childToNode;\n        this.BR.childToNode = childToNode;\n        this.TL.childToBounds = childToBounds;\n        this.TR.childToBounds = childToBounds;\n        this.BL.childToBounds = childToBounds;\n        this.BR.childToBounds = childToBounds;\n    }\n    /**\n     * Ensures all memory is released for all nodes and all references are removed\n     * to potentially high memory consumption items\n     */\n    Quadrants.prototype.destroy = function () {\n        this.TL.destroy();\n        this.TR.destroy();\n        this.BL.destroy();\n        this.BR.destroy();\n        delete this.TL;\n        delete this.TR;\n        delete this.BL;\n        delete this.BR;\n    };\n    return Quadrants;\n}());\nexports.Quadrants = Quadrants;\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n */\nvar Node = /** @class */ (function () {\n    /**\n     * Creates an instance of Node.\n     */\n    function Node(left, right, top, bottom, getBounds, depth) {\n        if (depth === void 0) { depth = 0; }\n        /** These are the child Instances of the node. */\n        this.children = [];\n        /** This is how deep the node is within the tree */\n        this.depth = 0;\n        /** These are the child nodes of this quad node when this node is split. It is null if the node is not split yet */\n        this.nodes = null;\n        // If params insertted\n        if (arguments.length >= 4) {\n            this.bounds = new bounds_1.Bounds({ left: left, right: right, top: top, bottom: bottom });\n        }\n        else {\n            // Otherwise, make tiny start area\n            this.bounds = new bounds_1.Bounds({ left: 0, right: 1, top: 1, bottom: 0 });\n        }\n        // Ensure the depth is set\n        this.depth = depth;\n        // Apply the bounds accessor method for instances\n        this.getBounds = getBounds;\n        // If this is the top level node, we need to instantiate the lookup that will be used\n        // Across all nodes.\n        if (this.depth === 0) {\n            this.nullBounded = [];\n            this.childToNode = new Map();\n            this.childToBounds = new Map();\n        }\n    }\n    /**\n     * Destroys this node and ensures all child nodes are destroyed as well.\n     */\n    Node.prototype.destroy = function () {\n        delete this.children;\n        delete this.bounds;\n        if (this.nodes) {\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n    };\n    /**\n     * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n     * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n     * this quad tree spans (and this is the root node), the quad tree will expand to include\n     * the new child.\n     *\n     * @param child The Bounds type object to inject\n     * @param props Properties that can be retrieved with the child object if applicable\n     *\n     * @returns True if the insertion was successful\n     */\n    Node.prototype.add = function (child) {\n        var bounds = this.childToBounds.get(child);\n        if (!bounds) {\n            // First we access the bounds of the child and store it\n            bounds = this.getBounds(child);\n            this.childToBounds.set(child, bounds);\n        }\n        // This is the entry function for adding children, so we must first expand our top node\n        // To cover the area that the child is located.\n        // If we're in bounds, then let's just add the child\n        if (!bounds || bounds.isInside(this.bounds)) {\n            return this.doAdd(child, bounds);\n        }\n        else {\n            // Otherwise, we need to expand first\n            this.cover(bounds);\n            return this.add(child);\n        }\n    };\n    /**\n     * Adds a list of new children to this quad tree. It performs the same operations as\n     * addChild for each child in the list, however, it more efficiently recalculates the\n     * bounds necessary to cover the area the children cover.\n     *\n     * @param children      List of Bounds objects to inject\n     */\n    Node.prototype.addAll = function (children) {\n        var _this = this;\n        // Make sure we cover the entire area of all the children.\n        // We can speed this up a lot if we first calculate the total bounds the new children covers\n        var minX = Number.MAX_VALUE;\n        var minY = Number.MAX_VALUE;\n        var maxX = -Number.MAX_VALUE;\n        var maxY = -Number.MAX_VALUE;\n        // Get the dimensions of the new bounds\n        children.forEach(function (child) {\n            var bounds = _this.getBounds(child);\n            _this.childToBounds.set(child, bounds);\n            if (!bounds)\n                return;\n            if (bounds.x < minX) {\n                minX = bounds.x;\n            }\n            if (bounds.right > maxX) {\n                maxX = bounds.right;\n            }\n            if (bounds.bottom > maxY) {\n                maxY = bounds.bottom;\n            }\n            if (bounds.y < minY) {\n                minY = bounds.y;\n            }\n        });\n        // Ensure a valid cover dimension was established. If no valid dimension is established\n        // Then we don't cover, but we can still add the children as that have null Bounds which\n        // Means injecting at the top level.\n        if (minX !== Number.MAX_VALUE &&\n            minY !== Number.MAX_VALUE &&\n            maxX !== -Number.MAX_VALUE &&\n            maxY !== -Number.MAX_VALUE) {\n            // Make sure our bounds includes the specified bounds\n            this.cover(new bounds_1.Bounds({ left: minX, right: maxX, bottom: maxY, top: minY }));\n        }\n        // Add all of the children into the tree.\n        children.forEach(function (child, index) { return _this.doAdd(child, _this.childToBounds.get(child) || null, true); });\n    };\n    /**\n     * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n     * This will cause all children to be re-injected into the tree.\n     *\n     * @param bounds The bounds to include in the tree's coverage\n     */\n    Node.prototype.cover = function (bounds) {\n        var _this = this;\n        // If we are already covering the area: abort\n        if (bounds.isInside(this.bounds)) {\n            return;\n        }\n        // Make our bounds cover the new area\n        this.bounds.encapsulate(bounds);\n        this.bounds.x -= 1;\n        this.bounds.y -= 1;\n        this.bounds.width += 2;\n        this.bounds.height += 2;\n        // Get all of the children underneath this node\n        var allChildren = this.gatherChildren([]);\n        this.children = [];\n        // Destroy the split nodes\n        if (this.nodes) {\n            // Completely...destroy...\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n        // Clear out the child to node relations\n        this.childToNode.clear();\n        // Reinsert all children with the new dimensions in place\n        allChildren.forEach(function (child, index) { return _this.doAdd(child, _this.childToBounds.get(child) || null); });\n    };\n    /**\n     * When adding children, this performs the actual action of injecting the child into the tree\n     * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n     *\n     * @param child The Bounds item to inject into the tree\n     * @param props The props to remain associated with the child\n     *\n     * @returns True if the injection was successful\n     */\n    Node.prototype.doAdd = function (child, bounds, fromSplit) {\n        // If this is the top level node and the bounds are null, then we add to the null list\n        if (!bounds && this.depth === 0) {\n            this.nullBounded.push(child);\n            this.childToNode.set(child, this);\n            return true;\n        }\n        // If no bounds is available at this point, something went terribly wrong\n        if (!bounds) {\n            console.warn('A null bounds was added to a Quad Tree node below the top node, which is invalid.');\n            return false;\n        }\n        // If bounds are null, then just immediately add\n        // If nodes are present, then we have already exceeded the population of this node\n        if (this.nodes) {\n            if (bounds.isInside(this.nodes.TL.bounds)) {\n                return this.nodes.TL.doAdd(child, bounds, fromSplit);\n            }\n            if (bounds.isInside(this.nodes.TR.bounds)) {\n                return this.nodes.TR.doAdd(child, bounds, fromSplit);\n            }\n            if (bounds.isInside(this.nodes.BL.bounds)) {\n                return this.nodes.BL.doAdd(child, bounds, fromSplit);\n            }\n            if (bounds.isInside(this.nodes.BR.bounds)) {\n                return this.nodes.BR.doAdd(child, bounds, fromSplit);\n            }\n            // Otherwise, this is a child overlapping this border\n            this.children.push(child);\n            this.childToNode.set(child, this);\n            return true;\n        }\n        else if (bounds.isInside(this.bounds)) {\n            // Otherwise, we have not had a split due to population limits being exceeded\n            this.children.push(child);\n            this.childToNode.set(child, this);\n            // If we exceeded our population for this quadrant, it is time to split up\n            if (this.children.length > maxPopulation && this.depth < maxDepth) {\n                this.split();\n            }\n            return true;\n        }\n        // This is when there is something wrong with the insertted child. The bounds\n        // For the quad should have grown without issue, but in this case the bounds\n        // Could not grow to accomodate the child.\n        if (isNaN(bounds.width + bounds.height + bounds.x + bounds.y)) {\n            console.error('Child did not fit into bounds because a dimension is NaN', child, bounds);\n        }\n        else if (bounds.area === 0) {\n            console.error('Child did not fit into bounds because the area is zero', child, bounds);\n        }\n        else {\n            console.error('Child did not get insertted.', 'Parent:', this.bounds.toString(), 'Child:', bounds.toString(), 'Inside Checks:', bounds.x >= this.bounds.x, bounds.right <= this.bounds.right, bounds.y >= this.bounds.y, bounds.bottom <= this.bounds.bottom);\n        }\n        // Don't insert the child and continue\n        return true;\n    };\n    Node.prototype.doRemove = function (child) {\n        var index = this.children.indexOf(child);\n        if (index > -1) {\n            this.children.splice(index, 1);\n            this.childToNode.delete(child);\n            this.childToBounds.delete(child);\n        }\n    };\n    /**\n     * Collects all children of all the current and sub nodes into a single list.\n     *\n     * @param list The list we must aggregate children into\n     *\n     * @return The list specified as the list parameter\n     */\n    Node.prototype.gatherChildren = function (list) {\n        this.children.forEach(function (child) { return list.push(child); });\n        if (this.nodes) {\n            this.nodes.TL.gatherChildren(list);\n            this.nodes.TR.gatherChildren(list);\n            this.nodes.BL.gatherChildren(list);\n            this.nodes.BR.gatherChildren(list);\n        }\n        return list;\n    };\n    /**\n     * Entry query for determining query type based on input object\n     *\n     * @param bounds Can be a Bounds or a Point object\n     * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n     *               information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return An array of children that intersects with the query\n     */\n    Node.prototype.query = function (bounds, visit) {\n        // This stores all of the found Instances when querying by bounds or point\n        var found = [];\n        // If this is the top level node then add in the null bunded items as the start\n        if (this.depth === 0) {\n            found = this.nullBounded.slice(0);\n        }\n        // Query a rectangle\n        if (bounds instanceof bounds_1.Bounds) {\n            if (bounds.hitBounds(this.bounds)) {\n                return this.queryBounds(bounds, found, visit);\n            }\n        }\n        // Query a point\n        if (this.bounds.containsPoint(bounds)) {\n            return this.queryPoint(bounds, found, visit);\n        }\n        // Return an empty array when nothing is collided with\n        return found;\n    };\n    /**\n     * Queries children for intersection with a bounds object\n     *\n     * @param b     The Bounds to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return     Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryBounds = function (b, list, visit) {\n        var _this = this;\n        this.children.forEach(function (c) {\n            var bounds = _this.childToBounds.get(c);\n            if (bounds && bounds.hitBounds(b)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (b.hitBounds(this.nodes.TL.bounds)) {\n                this.nodes.TL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.TR.bounds)) {\n                this.nodes.TR.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BL.bounds)) {\n                this.nodes.BL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BR.bounds)) {\n                this.nodes.BR.queryBounds(b, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Queries children for intersection with a point\n     *\n     * @param p     The Point to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return      Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryPoint = function (p, list, visit) {\n        var _this = this;\n        this.children.forEach(function (c) {\n            var bounds = _this.childToBounds.get(c);\n            if (bounds && bounds.containsPoint(p)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (this.nodes.TL.bounds.containsPoint(p)) {\n                this.nodes.TL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.TR.bounds.containsPoint(p)) {\n                this.nodes.TR.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BL.bounds.containsPoint(p)) {\n                this.nodes.BL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BR.bounds.containsPoint(p)) {\n                this.nodes.BR.queryPoint(p, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Remove the provided item from the tree.\n     */\n    Node.prototype.remove = function (child) {\n        if (this.childToNode) {\n            var node = this.childToNode.get(child);\n            // If the node is getting removed from the top level node, then it MAY be a null bounded item\n            // Which gets removed from the list\n            if (node && node.depth === 0) {\n                var index = node.nullBounded.indexOf(child);\n                if (index > -1) {\n                    node.nullBounded.splice(index);\n                    this.childToNode.delete(child);\n                    this.childToBounds.delete(child);\n                    return;\n                }\n            }\n            // Otherwise, just remove the node normally\n            if (node) {\n                node.doRemove(child);\n            }\n        }\n    };\n    /**\n     * Creates four sub quadrants for this node.\n     */\n    Node.prototype.split = function () {\n        // Gather all items to be handed down\n        var allChildren = this.gatherChildren([]);\n        // Gather all props for the children to be handed down as well\n        this.nodes = new Quadrants(this.bounds, this.depth + 1, this.getBounds, this.childToNode, this.childToBounds);\n        // Empty out the children as they are being re-injected\n        this.children = [];\n        for (var i = 0, end = allChildren.length; i < end; ++i) {\n            var child = allChildren[i];\n            this.doAdd(child, this.childToBounds.get(child) || null, true);\n        }\n    };\n    /**\n     * Traverses the quad tree returning every quadrant encountered\n     *\n     * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n     */\n    Node.prototype.visit = function (cb) {\n        var finished = Boolean(cb(this));\n        if (this.nodes && !finished) {\n            this.nodes.TL.visit(cb);\n            this.nodes.TR.visit(cb);\n            this.nodes.BL.visit(cb);\n            this.nodes.BR.visit(cb);\n        }\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar TrackedQuadTree = /** @class */ (function (_super) {\n    __extends(TrackedQuadTree, _super);\n    function TrackedQuadTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return TrackedQuadTree;\n}(Node));\nexports.TrackedQuadTree = TrackedQuadTree;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chart_camera_1 = require(\"./chart-camera\");\n/**\n * This is a camera that is based on another camera. This can apply filters\n * to the information provided from the base camera.\n *\n * Useful for situations such as a chart having a chart area and a list on the\n * left. This can use the same camera the chart area uses, but filter the response\n * to only track the y offset of the base camera.\n *\n * That would allow easy tracking of the left list to track with elements in the\n * chart and only manipulate a single camera instead of managing many cameras and\n * tie them together with lots of events.\n */\nvar ReferenceCamera = /** @class */ (function (_super) {\n    __extends(ReferenceCamera, _super);\n    function ReferenceCamera(options) {\n        var _this = _super.call(this) || this;\n        _this.offsetFilter = function (offset) { return offset; };\n        _this.scaleFilter = function (scale) { return scale; };\n        Object.assign(_this, options);\n        return _this;\n    }\n    Object.defineProperty(ReferenceCamera.prototype, \"offset\", {\n        get: function () {\n            return this.offsetFilter(this.base.offset);\n        },\n        set: function (val) {\n            /** no-op */\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ReferenceCamera.prototype, \"scale\", {\n        get: function () {\n            return this.scaleFilter(this.base.scale);\n        },\n        set: function (val) {\n            /** no-op */\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ReferenceCamera;\n}(chart_camera_1.ChartCamera));\nexports.ReferenceCamera = ReferenceCamera;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\nvar observable_manager_1 = require(\"./observable-manager\");\nfunction isObservable(val) {\n    return val.$$register;\n}\n/**\n * This is an optimized provider, that can provide instances that use the internal observable system\n * to deliver updates to the framework.\n */\nvar InstanceProvider = /** @class */ (function () {\n    function InstanceProvider() {\n        /** Stores the disposers that are called when the instance is no longer listened to */\n        this.cleanObservation = new Map();\n        /** This stores the changes to the instances themselves */\n        this.instanceChanges = new Map();\n        /** This flag is true when resolving changes when the change list is retrieved. it blocks changes until the current list is resolved */\n        this.allowChanges = true;\n    }\n    Object.defineProperty(InstanceProvider.prototype, \"changeList\", {\n        get: function () {\n            this.allowChanges = false;\n            return Array.from(this.instanceChanges.entries());\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Adds an instance to the provider which will stream observable changes of the instance to\n     * the framework.\n     */\n    InstanceProvider.prototype.add = function (instance) {\n        // No need to duplicate the addition\n        if (this.cleanObservation.get(instance)) {\n            return instance;\n        }\n        if (this.allowChanges) {\n            // Set the observable manager mode to gather observables\n            observable_manager_1.ObservableManager.mode = observable_manager_1.ObservableManagerMode.GATHER_OBSERVABLES;\n            // Set this as the current observer so registrations are made\n            observable_manager_1.ObservableManager.observer = this;\n            // This is the disposer\n            var disposer = void 0;\n            if (isObservable(instance)) {\n                disposer = instance.$$register;\n            }\n            // Store the disposers so we can clean up the observable properties\n            this.cleanObservation.set(instance, disposer);\n            // Indicate we have a new instance\n            this.instanceChanges.set(instance, types_1.InstanceDiffType.INSERT);\n            // Change the mode back to broadcasting so we don't keep trying to record observables\n            observable_manager_1.ObservableManager.mode = observable_manager_1.ObservableManagerMode.BROADCAST;\n        }\n        return instance;\n    };\n    /**\n     * Removes all instances from this provider\n     */\n    InstanceProvider.prototype.clear = function () {\n        for (var _i = 0, _a = Array.from(this.cleanObservation.keys()); _i < _a.length; _i++) {\n            var instance = _a[_i];\n            this.remove(instance);\n        }\n    };\n    /**\n     * Clear all resources held by this provider. It IS valid to lose reference to all instances\n     * and to this object, which would effectively cause this object to get GC'ed. But if you\n     * desire to hang onto the instance objects, then this should be called.\n     */\n    InstanceProvider.prototype.destroy = function () {\n        var _this = this;\n        var toRemove = Array.from(this.cleanObservation.keys());\n        toRemove.forEach(function (instance) { return _this.remove(instance); });\n        this.cleanObservation.clear();\n        this.instanceChanges.clear();\n    };\n    /**\n     * THis is called from observables to indicate it's parent has been updated\n     */\n    InstanceProvider.prototype.instanceUpdated = function (instance) {\n        if (this.allowChanges) {\n            // Flag the instance as having a property changed\n            this.instanceChanges.set(instance, types_1.InstanceDiffType.CHANGE);\n        }\n    };\n    /**\n     * Removes the instance from being advertised changes and from providing the changes\n     * for the instance.\n     */\n    InstanceProvider.prototype.remove = function (instance) {\n        if (this.allowChanges) {\n            instance.$$dispose;\n            this.cleanObservation.delete(instance);\n            this.instanceChanges.set(instance, types_1.InstanceDiffType.REMOVE);\n        }\n        return false;\n    };\n    /**\n     * Flagged all changes were dealt with\n     */\n    InstanceProvider.prototype.resolve = function () {\n        this.allowChanges = true;\n        this.instanceChanges.clear();\n    };\n    return InstanceProvider;\n}());\nexports.InstanceProvider = InstanceProvider;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar observable_manager_1 = require(\"./observable-manager\");\nvar observerKey = '$$';\nfunction observable(target, key) {\n    // This is the privatized version of the property where the actual value is stored\n    var storage = \"_$\" + key;\n    // Property getter\n    function getter() {\n        return this[storage];\n    }\n    // Property setter\n    function setter(newVal) {\n        // Update the privatized value\n        this[storage] = newVal;\n        // Broadcast change\n        var observer = this[observerKey];\n        observer && observer.instanceUpdated(this);\n    }\n    function register() {\n        var _this = this;\n        if (observable_manager_1.ObservableManager.mode === observable_manager_1.ObservableManagerMode.GATHER_OBSERVABLES) {\n            this[observerKey] = observable_manager_1.ObservableManager.observer;\n            return function () { return (_this[observerKey] = null); };\n        }\n        return null;\n    }\n    function dispose() {\n        this[observerKey] = null;\n    }\n    Object.defineProperty(target, '$$dispose', {\n        configurable: true,\n        enumerable: false,\n        get: dispose,\n    });\n    Object.defineProperty(target, '$$register', {\n        configurable: true,\n        enumerable: false,\n        get: register,\n    });\n    // Create new property with custom getter and setter\n    Object.defineProperty(target, key, {\n        configurable: true,\n        enumerable: true,\n        get: getter,\n        set: setter,\n    });\n}\nexports.observable = observable;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__112__;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar types_1 = require(\"../types\");\nfunction isObservableArray(val) {\n    return Boolean(val.observe);\n}\nvar UPDATE_FLAG = 'update';\nvar SPLICE_FLAG = 'splice';\n/**\n * This is a generic DataProvider that provides instance data to a layer. It monitors\n * changes to a list of instance items and records those changes for consumption by\n * internal layer processes. This allows for extremely easy editing of instance data\n * that reflects highly targetted changes to the system with very little overhead\n * allowing for very large datasets with rapidly changing parts.\n */\nvar DataProvider = /** @class */ (function () {\n    function DataProvider(data) {\n        var _this = this;\n        // When active, this provider is recording changes. Deactivate to temporarily disable\n        // Change tracking.\n        this.active = true;\n        this.instanceDisposers = new Map();\n        this.instanceChanges = new Map();\n        this.instanceById = new Map();\n        this.isChanged = false;\n        this._changeList = [];\n        /**\n         * This generates a method for an interceptor to monitor individual items within a list and record\n         * any changes found to the changelist\n         *\n         * @param changes This is the change list which records the changes to the items\n         */\n        this.monitorItem = function (changes) { return function (change) {\n            if (_this.active) {\n                if (change.type === UPDATE_FLAG) {\n                    changes.set(change.object, types_1.InstanceDiffType.CHANGE);\n                    _this.isChanged = true;\n                }\n                else {\n                    console.warn('Received an update type not supported by monitorItem:', change.type);\n                }\n            }\n            return change;\n        }; };\n        this._instances = mobx_1.observable(data || []);\n        if (isObservableArray(this._instances)) {\n            this.listDisposer = mobx_1.intercept(this._instances, this.monitorList(this._instances, this.instanceChanges, this.instanceById, this.instanceDisposers));\n        }\n    }\n    Object.defineProperty(DataProvider.prototype, \"instances\", {\n        // We very explicitly shut off the ability to set the top level properties on\n        // This element. Mutations on the properties are allowed (and are thus trackable)\n        // But modifying the root properties will not have a very clean way to monitor that.\n        // So we make the properties accessible without being replaceable.\n        get: function () {\n            return this._instances;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataProvider.prototype, \"changeList\", {\n        get: function () {\n            // When the changelist is retrieved, we deactivate change recording until the provider\n            // Is resolved\n            this.active = false;\n            if (this.isChanged) {\n                var changes_1 = [];\n                this.instanceChanges.forEach(function (changeType, instance) {\n                    changes_1.push([instance, changeType]);\n                });\n                this._changeList = changes_1;\n            }\n            return this._changeList;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Clears out all disposers and items in the dataset\n     */\n    DataProvider.prototype.destroy = function () {\n        this.listDisposer();\n        this.instanceDisposers.forEach(function (disposer) { return disposer(); });\n        this._instances = null;\n        this.instanceChanges.clear();\n        this._changeList = null;\n    };\n    /**\n     * This generates a method for an interceptor that will monitor and collect change information\n     * on the list of items specified.\n     *\n     * @param list The list of items to monitor\n     * @param changes The changelist for the list of given item type\n     * @param lookUp A lookup so items that have changed can get their source easily\n     */\n    DataProvider.prototype.monitorList = function (list, changes, lookUp, disposers) {\n        var _this = this;\n        return function (change) {\n            if (_this.active) {\n                // We only handle splice types for changes, these indicate elements have been added or removed\n                if (change.type === SPLICE_FLAG) {\n                    // Record the removals and clear out any interceptors\n                    for (var i = change.index, end = change.index + change.removedCount; i < end; ++i) {\n                        var item = change.object[i];\n                        changes.set(item, types_1.InstanceDiffType.REMOVE);\n                        _this.isChanged = true;\n                        var dispose = disposers.get(item);\n                        if (dispose) {\n                            dispose();\n                        }\n                    }\n                    // Record the additions and add intercepts for each item. Also generate a lookup for the item\n                    for (var i = 0, end = change.added.length; i < end; ++i) {\n                        var item = change.added[i] = mobx_1.observable(change.added[i]);\n                        changes.set(item, types_1.InstanceDiffType.INSERT);\n                        _this.isChanged = true;\n                        lookUp.set(item.id, item);\n                        disposers.set(item, mobx_1.intercept(item, _this.monitorItem(changes)));\n                    }\n                }\n                else {\n                    console.warn('Received an update type not supported by monitorList:', change.type);\n                }\n            }\n            return change;\n        };\n    };\n    /**\n     * This resolves all of the changes found and makes them disappear.\n     */\n    DataProvider.prototype.resolve = function () {\n        this.instanceById.clear();\n        this.instanceChanges.clear();\n        this._changeList = [];\n        this.active = true;\n    };\n    return DataProvider;\n}());\nexports.DataProvider = DataProvider;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\nvar event_manager_1 = require(\"../surface/event-manager\");\nvar util_1 = require(\"../util\");\nvar CameraBoundsAnchor;\n(function (CameraBoundsAnchor) {\n    CameraBoundsAnchor[CameraBoundsAnchor[\"TOP_LEFT\"] = 0] = \"TOP_LEFT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"TOP_MIDDLE\"] = 1] = \"TOP_MIDDLE\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"TOP_RIGHT\"] = 2] = \"TOP_RIGHT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"MIDDLE_LEFT\"] = 3] = \"MIDDLE_LEFT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"MIDDLE\"] = 4] = \"MIDDLE\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"MIDDLE_RIGHT\"] = 5] = \"MIDDLE_RIGHT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"BOTTOM_LEFT\"] = 6] = \"BOTTOM_LEFT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"BOTTOM_MIDDLE\"] = 7] = \"BOTTOM_MIDDLE\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"BOTTOM_RIGHT\"] = 8] = \"BOTTOM_RIGHT\";\n})(CameraBoundsAnchor = exports.CameraBoundsAnchor || (exports.CameraBoundsAnchor = {}));\nvar max = Math.max, min = Math.min;\n/**\n * This provides some very basic common needs for a camera control system. This is not a total solution\n * very every scenario. This should just often handle most basic needs.\n */\nvar BasicCameraController = /** @class */ (function (_super) {\n    __extends(BasicCameraController, _super);\n    function BasicCameraController(options) {\n        var _this = _super.call(this) || this;\n        /** Informative property indicating the controller is panning the chart or not */\n        _this.isPanning = false;\n        /** This is the filter applied to panning operations */\n        _this.panFilter = function (offset, view, allViews) { return offset; };\n        /** THis is the filter applied to tscaling operations */\n        _this.scaleFilter = function (scale, view, allViews) { return scale; };\n        /**\n         * Callback for when the range has changed for the camera in a view\n         */\n        _this.onRangeChanged = function (camera, targetView) { };\n        /**\n         * This flag is set to true when a start view is targetted on mouse down even if it is not\n         * the top most view.\n         */\n        _this.startViewDidStart = false;\n        /**\n         * Corrects camera offset to respect current bounds and anchor.\n         */\n        _this.applyBounds = function () {\n            if (_this.bounds && _this.camera) {\n                var targetView = _this.getView(_this.bounds.view);\n                _this.applyScaleBounds();\n                // Next bound the positioning\n                if (targetView) {\n                    _this.camera.offset[0] = _this.boundsHorizontalOffset(targetView);\n                    _this.camera.offset[1] = _this.boundsVerticalOffset(targetView);\n                }\n            }\n        };\n        _this.applyScaleBounds = function () {\n            if (_this.camera && _this.bounds) {\n                // First bound the scaling\n                if (_this.bounds.scaleMin) {\n                    _this.camera.scale = [\n                        max(_this.camera.scale[0], _this.bounds.scaleMin[0]),\n                        max(_this.camera.scale[1], _this.bounds.scaleMin[1]),\n                        max(_this.camera.scale[2], _this.bounds.scaleMin[2]),\n                    ];\n                }\n                if (_this.bounds.scaleMax) {\n                    _this.camera.scale = [\n                        min(_this.camera.scale[0], _this.bounds.scaleMax[0]),\n                        min(_this.camera.scale[1], _this.bounds.scaleMax[1]),\n                        min(_this.camera.scale[2], _this.bounds.scaleMax[2]),\n                    ];\n                }\n            }\n        };\n        _this.setBounds(options.bounds);\n        _this.camera = options.camera;\n        _this.scaleFactor = options.scaleFactor || 1000.0;\n        _this.ignoreCoverViews = options.ignoreCoverViews || false;\n        if (options.startView) {\n            _this.startViews = Array.isArray(options.startView) ? options.startView : [options.startView];\n        }\n        _this.panFilter = options.panFilter || _this.panFilter;\n        _this.scaleFilter = options.scaleFilter || _this.scaleFilter;\n        _this.onRangeChanged = options.onRangeChanged || _this.onRangeChanged;\n        return _this;\n    }\n    /**\n     * Calculation for adhering to an anchor - x-axis offset only.\n     */\n    BasicCameraController.prototype.anchoredByBoundsHorizontal = function (targetView) {\n        switch (this.bounds.anchor) {\n            case CameraBoundsAnchor.TOP_LEFT:\n            case CameraBoundsAnchor.MIDDLE_LEFT:\n            case CameraBoundsAnchor.BOTTOM_LEFT:\n                return -(this.bounds.worldBounds.left -\n                    this.bounds.screenPadding.left / this.camera.scale[0]);\n            case CameraBoundsAnchor.TOP_MIDDLE:\n            case CameraBoundsAnchor.MIDDLE:\n            case CameraBoundsAnchor.BOTTOM_MIDDLE:\n                return -(this.bounds.worldBounds.right - (this.bounds.worldBounds.width / 2) -\n                    (0.5 * ((targetView.screenBounds.width + this.bounds.screenPadding.right) / this.camera.scale[0])));\n            case CameraBoundsAnchor.TOP_RIGHT:\n            case CameraBoundsAnchor.MIDDLE_RIGHT:\n            case CameraBoundsAnchor.BOTTOM_RIGHT:\n                return -(this.bounds.worldBounds.right - ((targetView.screenBounds.width - this.bounds.screenPadding.right) / this.camera.scale[0]));\n        }\n    };\n    /**\n     * Calculation for adhering to an anchor - y-axis offset only.\n     */\n    BasicCameraController.prototype.anchoredByBoundsVertical = function (targetView) {\n        switch (this.bounds.anchor) {\n            case CameraBoundsAnchor.TOP_LEFT:\n            case CameraBoundsAnchor.TOP_MIDDLE:\n            case CameraBoundsAnchor.TOP_RIGHT:\n                return -(this.bounds.worldBounds.top) -\n                    (-this.bounds.screenPadding.top / this.scale[1]);\n            case CameraBoundsAnchor.MIDDLE_LEFT:\n            case CameraBoundsAnchor.MIDDLE:\n            case CameraBoundsAnchor.MIDDLE_RIGHT:\n                return -(this.bounds.worldBounds.bottom - (this.bounds.worldBounds.height / 2)) +\n                    ((0.5 * (targetView.screenBounds.height - this.bounds.screenPadding.bottom) / this.scale[1]));\n            case CameraBoundsAnchor.BOTTOM_LEFT:\n            case CameraBoundsAnchor.BOTTOM_MIDDLE:\n            case CameraBoundsAnchor.BOTTOM_RIGHT:\n                return -(this.bounds.worldBounds.bottom -\n                    (targetView.screenBounds.height - this.bounds.screenPadding.bottom) / this.scale[1]);\n        }\n    };\n    /**\n     * Returns offset on x-axis due to current bounds and anchor.\n     */\n    BasicCameraController.prototype.boundsHorizontalOffset = function (targetView) {\n        var worldTLinScreenSpace = targetView.worldToScreen({ x: this.bounds.worldBounds.left, y: this.bounds.worldBounds.top });\n        var worldBRinScreenSpace = targetView.worldToScreen({ x: this.bounds.worldBounds.right, y: this.bounds.worldBounds.bottom });\n        var widthDifference = (worldBRinScreenSpace.x - worldTLinScreenSpace.x) +\n            this.bounds.screenPadding.left +\n            this.bounds.screenPadding.right -\n            targetView.screenBounds.width;\n        // If the worldBounds are smaller than the screenBounds,\n        // We offset according to the anchoring\n        if (widthDifference < 0) {\n            return this.anchoredByBoundsHorizontal(targetView);\n        }\n        if (worldBRinScreenSpace.x < (targetView.screenBounds.right - this.bounds.screenPadding.right)) {\n            return (-this.bounds.worldBounds.right + (targetView.screenBounds.width - this.bounds.screenPadding.right) / this.camera.scale[0]);\n        }\n        if (worldTLinScreenSpace.x > (targetView.screenBounds.left + this.bounds.screenPadding.left)) {\n            return (-this.bounds.worldBounds.left + (this.bounds.screenPadding.left / this.camera.scale[0]));\n        }\n        return this.camera.offset[0];\n    };\n    /**\n     * Returns offset on y-axis due to current bounds and anchor.\n     */\n    BasicCameraController.prototype.boundsVerticalOffset = function (targetView) {\n        var worldTLinScreenSpace = targetView.worldToScreen({ x: this.bounds.worldBounds.left, y: this.bounds.worldBounds.top });\n        var worldBRinScreenSpace = targetView.worldToScreen({ x: this.bounds.worldBounds.right, y: this.bounds.worldBounds.bottom });\n        var heightDifference = (worldBRinScreenSpace.y - worldTLinScreenSpace.y) +\n            this.bounds.screenPadding.top +\n            this.bounds.screenPadding.bottom -\n            targetView.screenBounds.height;\n        // If the viewBounds are larger than the screenBounds,\n        // We offset according to the anchoring\n        if (heightDifference < 0) {\n            return this.anchoredByBoundsVertical(targetView);\n        }\n        if (worldTLinScreenSpace.y > targetView.screenBounds.top - this.bounds.screenPadding.top) {\n            return (-(this.bounds.worldBounds.top - (this.bounds.screenPadding.top / this.camera.scale[1])));\n        }\n        if (worldBRinScreenSpace.y < targetView.screenBounds.bottom + this.bounds.screenPadding.bottom) {\n            return (-(this.bounds.worldBounds.bottom + ((-targetView.screenBounds.height + this.bounds.screenPadding.bottom) / this.camera.scale[1])));\n        }\n        return this.camera.offset[1];\n    };\n    BasicCameraController.prototype.canStart = function (viewId) {\n        return (!this.startViews ||\n            this.startViews.length === 0 ||\n            (this.startViews && this.startViews.indexOf(viewId) > -1) ||\n            this.startViewDidStart && this.ignoreCoverViews);\n    };\n    BasicCameraController.prototype.findCoveredStartView = function (e) {\n        var _this = this;\n        var found = e.viewsUnderMouse.find(function (under) { return _this.startViews.indexOf(under.view.id) > -1; });\n        this.startViewDidStart = Boolean(found);\n        if (found) {\n            this.coveredStartView = found.view;\n        }\n    };\n    BasicCameraController.prototype.getTargetView = function (e) {\n        // If we have a start view and we do not ignore covering views,\n        // Then our target view is the view we started with\n        if (this.startViews && !this.ignoreCoverViews) {\n            return e.target.view;\n        }\n        // Otherwise, we use the covered start view\n        else {\n            return this.coveredStartView;\n        }\n    };\n    /**\n     * Used to aid in handling the pan effect and determine the contextual view targetted.\n     */\n    BasicCameraController.prototype.handleMouseDown = function (e, button) {\n        // We look for valid covered views on mouse down so dragging will work\n        this.findCoveredStartView(e);\n        // If this is a valid start view, then we enter a panning state with the mouse down\n        this.isPanning = this.canStart(e.start.view.id);\n    };\n    /**\n     * Used to aid in handling the pan effect\n     */\n    BasicCameraController.prototype.handleMouseUp = function (e) {\n        this.startViewDidStart = false;\n        this.isPanning = false;\n    };\n    /**\n     * Applies a panning effect by adjusting the camera's offset.\n     */\n    BasicCameraController.prototype.handleDrag = function (e, drag) {\n        if (this.canStart(e.start.view.id)) {\n            var pan = [(drag.screen.delta.x / this.camera.scale[0]),\n                (drag.screen.delta.y / this.camera.scale[1]),\n                0];\n            if (this.panFilter) {\n                pan = this.panFilter(pan, e.start.view, e.viewsUnderMouse.map(function (v) { return v.view; }));\n            }\n            this.camera.offset[0] += pan[0];\n            this.camera.offset[1] += pan[1];\n            // Add additional correction for bounds\n            this.applyBounds();\n            // Broadcast the change occurred\n            this.onRangeChanged(this.camera, e.start.view);\n            // Add additional correction for bounds\n            this.applyBounds();\n        }\n    };\n    /**\n     * Applies a scaling effect to the camera for mouse wheel events\n     */\n    BasicCameraController.prototype.handleWheel = function (e, wheelMetrics) {\n        // Every mouse wheel event must look to see if it's over a valid covered start view\n        this.findCoveredStartView(e);\n        if (this.canStart(e.target.view.id)) {\n            var targetView = this.getTargetView(e);\n            var beforeZoom = targetView.screenToWorld(e.screen.mouse);\n            var currentZoomX = this.camera.scale[0] || 1.0;\n            var currentZoomY = this.camera.scale[1] || 1.0;\n            var scale = [wheelMetrics.wheel[1] / this.scaleFactor *\n                    currentZoomX, wheelMetrics.wheel[1] / this.scaleFactor * currentZoomY, 1];\n            if (this.scaleFilter) {\n                scale = this.scaleFilter(scale, targetView, e.viewsUnderMouse.map(function (v) { return v.view; }));\n            }\n            this.camera.scale[0] = currentZoomX + scale[0];\n            this.camera.scale[1] = currentZoomY + scale[1];\n            // Ensure the new scale values are within bounds before attempting to correct offsets\n            this.applyScaleBounds();\n            var afterZoom = targetView.screenToWorld(e.screen.mouse);\n            this.camera.offset[0] -= (beforeZoom.x - afterZoom.x);\n            this.camera.offset[1] -= (beforeZoom.y - afterZoom.y);\n            // Add additional correction for bounds\n            this.applyBounds();\n            // Broadcast the change occurred\n            this.onRangeChanged(this.camera, targetView);\n            // Add additional correction for bounds\n            this.applyBounds();\n        }\n    };\n    // These are the currently Unused responses for this controller\n    BasicCameraController.prototype.handleMouseOut = function (e) { };\n    BasicCameraController.prototype.handleClick = function (e) { };\n    BasicCameraController.prototype.handleMouseMove = function (e) { };\n    BasicCameraController.prototype.handleMouseOver = function (e) { };\n    /**\n     * Evaluates the world bounds the specified view is observing\n     *\n     * @param viewId The id of the view when the view was generated when the surface was made\n     */\n    BasicCameraController.prototype.getRange = function (viewId) {\n        /** Get the projections for the provided view */\n        var projection = this.getProjection(viewId);\n        /** Get the bounds on the screen for the indicated view */\n        var screenBounds = this.getViewScreenBounds(viewId);\n        // Make sure we have a valid projection and screen bounds to make the adjustment\n        if (projection && screenBounds) {\n            /** Get the current viewed world bounds of the view */\n            var topLeft = projection.screenToWorld(screenBounds);\n            var bottomRight = projection.screenToWorld({ x: screenBounds.right, y: screenBounds.bottom });\n            return new bounds_1.Bounds({\n                height: bottomRight.y - topLeft.y,\n                width: bottomRight.x - topLeft.x,\n                x: topLeft.x,\n                y: topLeft.y,\n            });\n        }\n        return new bounds_1.Bounds({ x: 0, y: 0, width: 1, height: 1 });\n    };\n    Object.defineProperty(BasicCameraController.prototype, \"pan\", {\n        /**\n         * Retrieves the current pan of the controlled camera\n         */\n        get: function () {\n            return this.camera.offset;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets bounds applicable to the supplied view.\n     * If no view is supplied, it uses the first in the startViews array\n     */\n    BasicCameraController.prototype.setBounds = function (bounds) {\n        this.bounds = bounds;\n        this.applyBounds();\n    };\n    Object.defineProperty(BasicCameraController.prototype, \"scale\", {\n        /**\n         * Retrieves the current scale of the camera\n         */\n        get: function () {\n            return this.camera.scale;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This lets you set the visible range of a view based on the view's camera. This will probably not work\n     * as expected if the view indicated and this controller do not share the same camera.\n     *\n     * @param viewId The id of the view when the view was generated when the surface was made\n     */\n    BasicCameraController.prototype.setRange = function (newWorld, viewId) {\n        /** Get the projections for the provided view */\n        var projection = this.getProjection(viewId);\n        /** Get the bounds on the screen for the indicated view */\n        var screenBounds = this.getViewScreenBounds(viewId);\n        /** Get the view the range is being applied towards */\n        var view = this.getView(viewId);\n        // Make sure we have a valid projection and screen bounds to make the adjustment\n        if (projection && screenBounds && view) {\n            var deltaScale = util_1.subtract3([\n                screenBounds.width / newWorld.width,\n                screenBounds.height / newWorld.height,\n                1,\n            ], this.camera.scale);\n            this.camera.scale = util_1.add3(this.camera.scale, this.scaleFilter(deltaScale, view, [view]));\n            var deltaPan = util_1.subtract3([\n                -newWorld.x,\n                -newWorld.y,\n                0,\n            ], this.camera.offset);\n            this.camera.offset = util_1.add3(this.camera.offset, this.scaleFilter(deltaPan, view, [view]));\n            // Bound the camera to the specified bounding range\n            this.applyBounds();\n            // Broadcast the change occurred\n            this.onRangeChanged(this.camera, view);\n            // Bound the camera to the specified bounding range\n            this.applyBounds();\n        }\n    };\n    return BasicCameraController;\n}(event_manager_1.EventManager));\nexports.BasicCameraController = BasicCameraController;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./basic-camera-controller\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./base-event-managers\"));\n__export(require(\"./base-layers\"));\n__export(require(\"./instance-provider\"));\n__export(require(\"./primitives\"));\n__export(require(\"./surface\"));\n__export(require(\"./types\"));\n__export(require(\"./util\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./voidgl\"));\n"],"sourceRoot":""}