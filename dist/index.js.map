{"version":3,"sources":["webpack://network-bubble-chart/webpack/universalModuleDefinition","webpack://network-bubble-chart/webpack/bootstrap","webpack://network-bubble-chart/./src/voidgl/types.ts","webpack://network-bubble-chart/external \"three\"","webpack://network-bubble-chart/./src/voidgl/instance-provider/index.ts","webpack://network-bubble-chart/./src/voidgl/util/index.ts","webpack://network-bubble-chart/./src/voidgl/primitives/bounds.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/buffer-manager-base.ts","webpack://network-bubble-chart/./src/voidgl/instance-provider/instance.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/types.ts","webpack://network-bubble-chart/./src/voidgl/primitives/index.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/layer-buffer-type.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/index.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/generate-layer-model.ts","webpack://network-bubble-chart/./src/voidgl/util/identify-by-key.ts","webpack://network-bubble-chart/./src/voidgl/shaders/template-vars.ts","webpack://network-bubble-chart/./src/voidgl/util/shader-templating.ts","webpack://network-bubble-chart/./src/voidgl/instance-provider/observable.ts","webpack://network-bubble-chart/./src/voidgl/surface/view.ts","webpack://network-bubble-chart/./src/voidgl/surface/scene.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/label-atlas-resource.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/base-atlas-resource.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/types.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/diff-processors/uniform-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/diff-processors/instance-attribute-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/util/view-camera.ts","webpack://network-bubble-chart/./node_modules/debug/src/browser.js","webpack://network-bubble-chart/./src/voidgl/util/chart-camera.ts","webpack://network-bubble-chart/./src/voidgl/util/vector.ts","webpack://network-bubble-chart/./src/voidgl/util/uid.ts","webpack://network-bubble-chart/./src/voidgl/surface/event-manager.ts","webpack://network-bubble-chart/./src/voidgl/surface/mouse-event-manager.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/inject-shader-io.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/generate-layer-material.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/generate-layer-geometry.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/generate-default-scene.ts","webpack://network-bubble-chart/./src/voidgl/util/data-bounds.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/labels/index.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/label-rasterizer.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/image-atlas-resource.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/color-rasterizer.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/color-atlas-resource.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/sub-texture.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/atlas.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/images/index.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/diff-processors/base-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/shaders/util/make-instance-uniform-name.ts","webpack://network-bubble-chart/./src/voidgl/shaders/util/instance-attribute-shader-name.ts","webpack://network-bubble-chart/./src/voidgl/util/webgl-stat.ts","webpack://network-bubble-chart/./src/voidgl/util/mouse.ts","webpack://network-bubble-chart/./src/voidgl/util/auto-easing-method.ts","webpack://network-bubble-chart/./src/voidgl/util/common-options.ts","webpack://network-bubble-chart/./src/voidgl/util/easing-props.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/atlas-resource-manager.ts","webpack://network-bubble-chart/./src/voidgl/util/quad-tree.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/pack-attributes.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/expand-easing-attributes.ts","webpack://network-bubble-chart/./src/voidgl/primitives/absolute-position.ts","webpack://network-bubble-chart/./src/voidgl/surface/event-managers/layer-mouse-events.ts","webpack://network-bubble-chart/./src/voidgl/util/color-picking-analysis.ts","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/color-picking-assignment.vs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/color-picking-disabled.fs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/color-picking-method.fs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/color-picking-vertex-header.vs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/projection-methods.vs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/shader-input.vs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/instance-destructuring-array.vs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/fragment-shader-composition.fs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/vertex-shader-composition.vs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/instance-retrieval-array.vs","webpack://network-bubble-chart/./src/voidgl/shaders/util/uniform-instance-block-array.ts","webpack://network-bubble-chart/./src/voidgl/shaders/util/attribute-generation.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-surface.ts","webpack://network-bubble-chart/./src/voidgl/surface/index.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/rings/ring-layer.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/rings/ring-layer.fs","webpack://network-bubble-chart/./src/voidgl/base-layers/rings/ring-layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/rings/ring-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/rings/index.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/rectangle/rectangle-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/rectangle/rectangle-layer.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/rectangle/rectangle-layer.fs","webpack://network-bubble-chart/./src/voidgl/base-layers/rectangle/rectangle-layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/rectangle/index.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/labels/label-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/labels/label-layer.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/labels/label-layer.fs","webpack://network-bubble-chart/./src/voidgl/base-layers/labels/label-layer.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/image-rasterizer.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/atlas-manager.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/pack-node.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/images/image-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/images/image-layer.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/images/image-layer.fs","webpack://network-bubble-chart/./src/voidgl/base-layers/images/image-layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/edge-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/shader/edge-layer.fs","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/shader/edge-layer-screen-curve.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/shader/edge-layer.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/shader/edge-layer-bezier2.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/shader/edge-layer-bezier.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/shader/edge-layer-line.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/edge-picking.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/edge-layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/index.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/circles/circle-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/circles/circle-layer.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/circles/circle-layer.fs","webpack://network-bubble-chart/./src/voidgl/primitives/point.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/circles/circle-layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/circles/index.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/arcs/arc-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/arcs/arc-layer.fs","webpack://network-bubble-chart/./src/voidgl/base-layers/arcs/arc-layer-screen-space.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/arcs/arc-layer.vs","webpack://network-bubble-chart/./src/voidgl/shaders/base/no-op.vs","webpack://network-bubble-chart/./src/voidgl/shaders/base/no-op.fs","webpack://network-bubble-chart/./src/voidgl/surface/layer-interaction-handler.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/diff-processors/uniform-quad-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/diff-processors/uniform-color-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/diff-processors/instance-attribute-quad-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/diff-processors/instance-attribute-color-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/uniform-buffer-manager.ts","webpack://network-bubble-chart/./src/voidgl/util/emit-once.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/instance-attribute-buffer-manager.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/index.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/instance-diff-manager.ts","webpack://network-bubble-chart/./src/voidgl/instance-provider/instance-provider.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/arcs/arc-layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/arcs/index.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/index.ts","webpack://network-bubble-chart/./src/voidgl/util/tracked-quad-tree.ts","webpack://network-bubble-chart/./src/voidgl/util/reference-camera.ts","webpack://network-bubble-chart/./node_modules/ms/index.js","webpack://network-bubble-chart/./node_modules/debug/src/debug.js","webpack://network-bubble-chart/./node_modules/process/browser.js","webpack://network-bubble-chart/external \"bowser\"","webpack://network-bubble-chart/./src/voidgl/shaders/util/extend-shader.ts","webpack://network-bubble-chart/./src/voidgl/util/extend-shader-io.ts","webpack://network-bubble-chart/./src/voidgl/util/animation-helper.ts","webpack://network-bubble-chart/./src/voidgl/base-event-managers/basic-camera-controller.ts","webpack://network-bubble-chart/./src/voidgl/base-event-managers/index.ts","webpack://network-bubble-chart/./src/voidgl/index.ts","webpack://network-bubble-chart/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__135__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","InstanceAttributeSize","InstanceBlockIndex","instanceAttributeSizeFloatCount","_a","ONE","TWO","THREE","FOUR","ATLAS","UniformSize","VertexAttributeSize","ShaderInjectionTarget","PickType","InstanceDiffType","__export","Bounds","options","this","x","y","width","height","left","top","bottom","right","emptyBounds","containsPoint","point","encapsulate","item","Math","abs","fits","bounds","hitBounds","isInside","toString","isBufferLocation","val","buffer","isBufferLocationGroup","propertyToBufferLocation","BufferManagerBase","layer","scene","easing_props_1","observable_1","instanceUID","Instance","changes","_easing","Map","observableStorage","_uid","newUID","_id","id","active","_this","_observer","oldObserver","clear","remove","clearEasing","easingId","getEasing","attributeName","easing","EasingProps","resourceTrigger","console","warn","__decorate","observable","Three","types_1","util_1","identify_by_key_1","instance_diff_manager_1","layer_interaction_handler_1","Layer","_super","props","depth","instanceById","instanceVertexCount","assign","defaultProps","picking","NONE","ALL","pickingMethods","getInstancePickingMethods","currentPickMode","hitTest","quadTree","TrackedQuadTree","boundsAccessor","type","SINGLE","uidToInstance","__extends","_bufferManager","_bufferType","destroy","bufferManager","removeLayer","removeFromScene","didUpdateProps","draw","uniform","change","instance","bufferLocations","changeList","data","customChangeList","diffManager","processing","processor","incomingChangeList","end","length","getBufferLocations","values","commit","resolve","uniforms","update","materialUniforms","forEach","materialUniform","Error","getModelType","drawMode","TrianglesDrawMode","modelType","Mesh","getMaterialOptions","initShader","fs","instanceAttributes","vertexAttributes","vertexCount","vs","makeInstanceAttribute","block","blockIndex","size","atlas","makeUniform","shaderInjection","qualifier","setBufferManager","InstanceDiffManager","makeProcessor","interactions","LayerInteractionHandler","setBufferType","undefined","willUpdateInstances","_changes","willUpdateProps","_newProps","didUpdate","IdentifyByKey","AnchorType","ScaleType","LayerBufferType","buffer_management_1","debug","getLayerBufferType","_gl","attributesUsed","bufferType","WebGLStat","HARDWARE_INSTANCING","attribute","ceil","MAX_VERTEX_ATTRIBUTES","UNIFORM","INSTANCE_ATTRIBUTE","makeLayerBufferManager","gl","InstanceAttributeBufferManager","UniformBufferManager","generateLayerModel","geometry","material","modelInfo","model","Boolean","isMesh","TriangleStripDrawMode","key","templateVars","attributeFragments","attributes","blocksPerInstance","easingMethod","easingMethods","extend","extendHeader","instanceBlockCount","instanceDataBinaryTree","instanceDataRetrieval","instanceDestructuring","instanceFragments","instanceUniformDeclarations","layerUniforms","projectionMethods","shader","shaderInput","T","shaderTemplate","templateOptions","required","onError","onToken","matched","noValueProvided","notFound","shaderOptions","shaderResults","replace","_x","match","set","keys","option","results","resolvedShaderOptions","shaderProvidedOptions","unresolvedProvidedOptions","unresolvedShaderOptions","msg","error","uid_1","ObservableMonitoring","setObservableMonitor","enabled","gatherIds","observableIds","getObservableMonitorIds","slice","observableNamesToUID","target","propertyUID","uid","push","newVal","observer","instanceUpdated","absolute_position_1","bounds_1","view_camera_1","isOrthographic","ClearFlags","View","pixelRatio","devicePixelRatio","screenToPixelSpace","out","pixelSpaceToScreen","screenToView","viewBounds","viewToScreen","screenToWorld","view","world","camera","offset","scale","viewCamera","ViewCameraType","CUSTOM","worldToScreen","screen","viewToWorld","worldToView","fitViewtoViewport","surfaceDimensions","CONTROLLED","baseCamera","getAbsolutePositionBounds","viewport","far","near","position","z","updateMatrix","updateMatrixWorld","updateProjectionMatrix","screenBounds","DEFAULT_VIEW_ID","sortByDepth","a","b","Scene","container","pickingContainer","layers","sortIsDirty","viewById","frustumCulled","autoUpdate","addLayer","addView","index","indexOf","splice","sortLayers","sort","DEFAULT_SCENE_ID","LabelAtlasResource","label","BaseAtlasResource","sampleScale","EdgeScaleType","EdgeType","EdgeBroadphase","buffer_manager_base_1","VECTOR_ACCESSORS","EMPTY","UniformDiffProcessor","addInstance","manager","_propIds","uniformCluster","changeInstance","add","updateInstance","removeInstance","uniformRangeStart","range","instanceData","instanceUniform","start","k","endk","resource","setTargetAtlas","activeAttribute","BaseDiffProcessor","DiffMode","base_diff_processor_1","min","max","InstanceAttributeDiffProcessor","apply","arguments","diffMode","PARTIAL","bufferAttributeUpdateRange","bufferAttributeWillUpdate","updateInstancePartial","newBufferLocations","propIds","location","updateValue","updateRange","childLocations","propertyToLocation","getUpdateAllPropertyIdList","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","getActiveAttributePropertyId","updateInstanceFull","updates","bufferAttribute","needsUpdate","count","getInstanceCount","FULL","ViewCamera","process","load","storage","e","env","DEBUG","log","Function","formatArgs","args","useColors","namespace","humanize","diff","color","lastC","save","namespaces","removeItem","navigator","userAgent","toLowerCase","document","documentElement","style","WebkitAppearance","firebug","exception","table","parseInt","RegExp","$1","chrome","local","localStorage","localstorage","colors","formatters","j","v","JSON","stringify","err","message","enable","chartCameraUID","applyArray","source","concat","ChartCamera","sqrt","add1","copy1","vec","scale1","subtract1","multiply1","dot1","linear1","t","length1","add2","copy2","scale2","subtract2","multiply2","dot2","linear2","length2","add3","copy3","scale3","subtract3","multiply3","linear3","length3","dot3","add4","copy4","scale4","subtract4","multiply4","dot4","linear4","length4","vec1Methods","copy","dot","linear","multiply","subtract","vec2Methods","vec3Methods","vec4Methods","VecMath","UID","CUID","colorUID","EventManager","getProjection","viewId","mouseManager","getView","getViewScreenBounds","setMouseManager","mouse_1","quad_tree_1","isDefined","MouseEventManager","canvas","views","controllers","handlesWheelEvents","eventCleanup","_waitingForRender","getViewsUnderMouse","mouse","hitViews","query","resize","context","setViews","setControllers","addContextListeners","QuadTree","addAll","map","filter","startView","element","startPosition","wheelHandler","event","eventElementPosition","interaction","makeInteraction","wheel","makeWheel","controller","handleWheel","stopPropagation","preventDefault","onwheel","addEventListener","onmouseleave","waitingForRender","handleMouseOut","onmousemove","handleMouseMove","onmousedown","downViews","canClick","clickStartTime","Date","now","currentPosition","handleMouseDown","button","delta","drag","makeDrag","handleDrag","onmouseup","_event","onmouseover","handleMouseOver","handleMouseUp","handleClick","onselectstart","addTouchContextListeners","ontouchstart","ontouchend","ontouchmove","ontouchcancel","_i","previous","current","viewsUnderMouse","normalizeWheel","onmousewheel","removeEventListener","expand_easing_attributes_1","layer_buffer_type_1","pack_attributes_1","testStartVector","testEndVector","_b","emptyTexture","Texture","isInstanceAttribute","attr","isVertexAttribute","isUniform","toVertexAttributeInternal","materialAttribute","toUniformInternal","sortNeedsUpdateFirstToTop","generateAtlasResourceUniforms","atlasInstanceAttributes","requestedAtlasInjections","isAtlasAttribute","injection","FRAGMENT","injections","VERTEX","instanceAttribute","getAtlasTexture","compareVec","round","injectShaderIO","shaderIO","find","testStart","testEnd","validationRules","validation","test","cpu","ignoreEndValueCheck","ignoreOverTimeCheck","validateInstanceAttributes","generateEasingAttributes","addedUniforms","MATRIX4","projectionMatrix","elements","matrix","surface","frameMetrics","currentTime","generateBaseUniforms","generatePickingUniforms","addedInstanceAttributes","generateBaseInstanceAttributes","generatePickingAttributes","allUniforms","allInstanceAttributes","packAttributes","generateBaseVertexAttributes","UNIFORM_SIZE_TO_MATERIAL_TYPE","MATRIX3","DEFAULT_UNIFORM_VALUE","toMaterialUniform","generateLayerMaterial","instancingUniforms","materialParams","vertexShader","fragmentShader","generatedUniform","RawShaderMaterial","isNumberCluster","Array","isArray","generateLayerGeometry","maxInstancesPerBuffer","vertexBuffers","attribute_1","Float32Array","formatError","endj","instanceSize","endk_1","copyWithin","instancingBuffer","instanceStartIndex","BufferGeometry","attribute_3","BufferAttribute","addAttribute","chart_camera_1","scene_1","view_1","generateDefaultScene","aspectRatio","viewSize","defaultCamera","OrthographicCamera","defaultChartCamera","defaultViewport","defaultView","defaultScene","DataBounds","floor","LabelRasterizer","awaitContext","getContext","Promise","setTimeout","sent","calculateLabelSize","calculateTexture","calculateTrucatedText","sampleScaling","drawLabel","truncatedText","measureContents","minX","minY","maxX","maxY","rasterization","texture","createCroppedCanvas","maxWidth","text","firstTest","cursor","safety","substr","nextCursor","cropped","createElement","imageSmoothingEnabled","drawImage","fontSize","getLabelRasterizationFontSize","fillStyle","font","makeCSSFont","measureText","fillText","potentialCanvas","fontWeight","fontFamily","imageData","getImageData","render","renderSync","ImageAtlasResource","image","ColorRasterizer","limit","makeCSS","g","opacity","fillRect","ColorAtlasResource","SubTexture","atlasReferenceID","atlasTexture","atlasTL","atlasTR","atlasBL","atlasBR","widthOnAtlas","heightOnAtlas","isValid","pixelWidth","pixelHeight","pack_node_1","sub_texture_1","AtlasSize","Atlas","validResources","textureSettings","packing","PackNode","updateTexture","invalidateResource","zero","setManager","registerResource","removeResource","redoneCanvas","dispose","generateMipmaps","premultiplyAlpha","_isValid","INSTANCE_UNIFORM_ATTRIBUTE_PREFIX","makeInstanceUniformNameArray","makeInstanceUniformNameTree","instanceAttributeShaderName","getProgramInfo","program","result","attributeCount","uniformCount","activeUniforms","getProgramParameter","ACTIVE_UNIFORMS","activeAttributes","ACTIVE_ATTRIBUTES","enums","35664","35665","35666","35667","35668","35669","35670","35671","35672","35673","35674","35675","35676","35678","35680","5120","5121","5122","5123","5124","5125","5126","blocks","getActiveUniform","typeName","getActiveAttrib","MAX_VERTEX_UNIFORMS","MAX_FRAGMENT_UNIFORMS","WEBGL_SUPPORTED","MAX_TEXTURE_SIZE","HARDWARE_INSTANCING_ANGLE","WebGLRenderingContext","getAContext","getParameter","MAX_VERTEX_UNIFORM_VECTORS","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_VERTEX_ATTRIBS","getExtension","initStats","browser","three_1","IE_ADJUSTMENT","OLD_IE_ADJUSTMENT","MAX_FIREFOX_WHEELDELTA","lowPassY","LOW_PASS_U0","LOW_PASS_U1","LOW_PASS_U2","LOW_PASS_U3","firefox","deltaX","deltaY","sign","unshift","pop","Vector2","msie","version","wheelDeltaX","wheelDeltaY","wheelDelta","detail","msedge","multiplyScalar","relative","mouseX","mouseY","eventX","eventY","nativeEvent","pageX","pageY","clientX","clientY","body","scrollLeft","scrollTop","offsetParent","offsetLeft","offsetTop","AutoEasingLoopStyle","vector_1","pow","sin","PI","GPU_PI","clamp","minVal","maxVal","easeOutElasticGPU","easeBackInGPU","continuousSinusoidalGPU","AutoEasingMethod","gpu","duration","method","delay","loop","methodName","immediate","_start","_t","easeInQuad","time","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeOutElastic","easeBackIn","easeBackOut","t1","easeBackInOut","a1","t2","continuousSinusoidal","CONTINUOUS","direction","amplitude","CommonMaterialOptions","transparentShape","premultipliedAlpha","transparent","transparentImage","blending","CustomBlending","blendSrc","OneFactor","isManualStart","isTimeSet","setAutomatic","setStart","setTiming","label_atlas_resource_1","toInstanceIOValue","AtlasResourceManager","targetAtlas","requestQueue","requestLookup","atlasManager","dequeueRequests","didDequeue","resources","requests","this_1","updateAtlas","atlasRequests_1","request","delete","iMax","requestAnimationFrame","from","entries","atlasRequests","existingRequests","filterQuery","queryValues","filtered","obj","Quadrants","mid","TL","Node","TR","BL","BR","children","nodes","child","doAdd","cover","childrenProps","MAX_VALUE","allChildren","gatherChildren","split","isNaN","area","list","visit","queryBounds","queryPoint","cb","finished","Block","available","setAttribute","check","ensureSizes","newBlock","BLANK_EASING_PROPS","startTime","isEasingAttribute","usedInstanceAttributes","Set","easingAttributes","instanceAttributes_1","easingIds","providedUID","name_1","easingUID","has","attributeDataShare","attributeDelay","attributeDuration","easingValues","timeValue","REPEAT","REFLECT","timePassed","childAttributes","startAttr","parentAttribute","_o","startTimeAttr","durationAttr","easingAttributes_1","data_bounds_1","ref","scaleRatio","parse","num","parseFloat","reference","top_1","LayerMouseEvents","isOver","sceneViews","getSceneViewsUnderMouse","sceneViewByViewId","sceneView","viewItem","getMouseByViewId","viewMouseByViewId","handleInteraction","handleMouseClick","_drag","handleMouseDrag","callback","sceneViews_1","handleSceneView","_e","_flag","updateColorPickRange","allSceneViews","currentSceneViews","analyzeColorPickingRendering","pickingData","allColors","colorData","dataHeight","dataWidth","nearestColor","uniqueColors","pixelIndex","distance","row","dx","dy","testDistance","auto_easing_method_1","shader_templating_1","template_vars_1","make_instance_uniform_name_1","instanceRetrievalArrayFragment","VECTOR_COMPONENTS","sizeToType","1","2","3","4","9","16","99","orderByPriority","makeAutoEasingTiming","pingPong","makeVectorSwizzle","join","makeUniformArrayDeclaration","totalBlocks","fragment","fill","Vector4","makeInstanceRetrievalArray","makeInstanceDestructuringArray","orderedAttributes","instanceAttributeDestructuring","uniformInstancingDestructuring","webgl_stat_1","instance_attribute_shader_name_1","uniform_instance_block_array_1","vertexShaderComposition","fragmentShaderComposition","instanceDestructuringArray","MAX_USE_PER_BLOCK","generateUniforms","injectionType","injectFragments","shaders","shaderInputMetrics","instancingInfo","metrics","instanceUniformBlockCount","calculateUniformBlockUseage","sortedInstanceAttributes","currentBlock","trueBlockIndex","blockUseage","innerBlockUseage","attributeSize","oldUseage","newUseage","innerUseage","instances","uniformMetrics","blockQualifierDedup","maxBlock","qualifiers","blockQualifiers","qualifierList","allQualifiers","declaration","makeInstanceUniformDeclaration","makeUniformInstanceDataOptions","generateInstanceDataLookupOptions","additionalOptions","generateVertexAttributes","methods","methodSizes","sizeType","generateEasingMethods","generateShaderInputs","generateVertexPicking","_maxInstancesPerBuffer","makePickingDestructuring","makeInstanceAttributeReferences","generateVertexShader","vertexShaderResults","generateFragmentShader","generateFragmentPickingMethod","images_1","labels_1","attribute_generation_1","color_picking_analysis_1","layer_mouse_events_1","generate_default_scene_1","generate_layer_geometry_1","generate_layer_material_1","generate_layer_model_1","inject_shader_io_1","mouse_event_manager_1","texture_1","atlas_resource_manager_1","DEFAULT_BACKGROUND_COLOR","Color","isCanvas","createLayer","layerClass","LayerSurface","AtlasManager","currentViewport","currentFrame","previousTime","isBufferingAtlas","scenes","willDisposeLayer","loadReady","loadReadyResolve","initLayer","frameIncrement","onViewReady","validLayers","erroredLayers","pickingPass","errors","passed","stack","initializer","resourceManager","renderer","pickingRenderer","LabelInstance","ImageInstance","drawSceneView","updateColorPick","defaultSceneElements","flags","clearFlags","COLOR","DEPTH","pickingTarget","Uint8Array","pickWidth","readRenderTargetPixels","pickHeight","colorPicking","didBuffer","rendererSize","getSize","getPixelRatio","background","SCISSOR_TEST","scissor","clearColor","setSize","setRenderTarget","STENCIL","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","setViewport","getViewSize","getViewWorldBounds","topLeft","bottomRight","init","setContext","initGL","initMouseManager","initResources","WebGLRenderer","alpha","antialias","preserveDrawingBuffer","autoClear","setRendererSize","setPixelRatio","setClearColor","sceneViewDepth","sceneOptions","newScene","viewOptions","newView","addLayerToScene","shaderMetrics","eventManagers","atlasResources","createAtlas","layerInitializers","existingLayer","sync","layerId","_layer","fitContainer","_pixelRatio","parentElement","className","containerBox","getBoundingClientRect","box","isWebGLContext","canvasContext","isString","getElementById","WebGLRenderTarget","magFilter","LinearFilter","minFilter","stencilBuffer","instance_provider_1","primitives_1","layer_1","RingLayer","ring","radius","center","scaleFactor","animations","animate","animateColor","animateCenter","animateRadius","vertexToNormal","0","5","vertexToSide","attributeNames","thickness","_","vertex","InstanceProvider","instance_1","RingInstance","anchorCalculator","TopLeft","anchor","_rectangle","padding","TopMiddle","rectangle","TopRight","MiddleLeft","Middle","MiddleRight","BottomLeft","BottomMiddle","BottomRight","Custom","RectangleInstance","scaling","BOUND_MAX","_anchor","setAnchor","newAnchor","types_2","RectangleLayer","anchorEffect","projection","maxScale","minScale","ALWAYS","NEVER","screenPoint","_u","rasterizationLookUp","_label","_cssFont","_fontFamily","_fontSize","_fontStyle","_fontWeight","_maxWidth","_text","_width","_height","_isDestroyed","fontStyle","cssFontLookup","rasterizations","references","_rasterization","LabelLayer","animateLocation","animateSize","ImageRasterizer","calculateImageSize","_sampleScale","atlas_1","color_atlas_resource_1","color_rasterizer_1","image_atlas_resource_1","label_rasterizer_1","ZERO_IMAGE","allAtlas","destroyAtlas","atlasName","setDefaultImage","loadImage","loadedImage","isValidImage","rect","dimensions","first","second","insertedNode","insert","nodeImage","ux","nodeDimensions","uy","uw","uh","onePixelX","atlasDimensions","imageSrc","subTexture","image_1","onload","onerror","path","toDataURL","Image","src","resources_1","isLeaf","child0","child1","hasChild","newNode","fitFlag","imgWidth","imgHeight","dWidth","dHeight","removed","_image","tint","_sourceWidth","_sourceHeight","_element","_path","aspect","common_options_1","ImageLayer","animateTint","EdgeInstance","colorStart","colorEnd","control","widthStart","widthEnd","setEdgeWidth","setColor","interpolation","LINE","p1","p2","_c1","_c2","BEZIER","c1","BEZIER2","c2","toPointObject","toPointArray","TEST_RESOLUTION","edgePicking","broadphase","minPickDistance","scaleType","interpolate","edge","edgeWidthStart","edgeWidthEnd","PASS_X","PASS_Y","SCREEN_CURVE","closestIndex","closestDistance","secondClosestIndex","secondClosestDistance","control1","control2","startPoint","endPoint","linePoint","lineWidth","startSegment","endSegment","vector","lineDirection","lineNormal","distanceTo","_view","edge_picking_1","pickVS","baseVS","screenVS","edgeFS","EdgeLayer","_c","_d","_f","animateEnd","animateStart","animateColorStart","animateColorEnd","animateControl","MAX_SEGMENTS","vertexInterpolation","token","_uniform","CircleInstance","squareDistance","Point","getClosest","testPoint","points","closestPoint","getClosestIndex","amount","normalize","magnitude","getDistance","squared","getMidpoint","make","CircleLayer","circle","circleScreenCenter","mouseScreen","fadeOutOversized","ArcInstance","angle","isMouseOver","isMouseDown","getColorPickInstance","isColorProcessor","_mouse","onMouseDown","hitTest_1","query_1","world_1","querySpace","bind","instanceForColor","onMouseOut","hitTest_2","query_2","world_2","onMouseUp","hitTest_3","query_3","world_3","onMouseOver","onMouseMove","hitTest_4","query_4","info","world_4","notOverInstances","isCurrentlyOver_1","noLongerOver","onMouseClick","hitTest_5","query_5","world_5","UniformQuadDiffProcessor","quadPicking","UniformColorDiffProcessor","InstanceAttributeQuadDiffProcessor","locations","InstanceAttributeColorDiffProcessor","buffers","availableClusters","instanceToCluster","clusterToBuffer","makeNewBuffer","cluster","maxUniformBlock","uniformBlocksPerInstance","pickModel","setScene","newGeometry","drawRange","newMaterial","clone","newModel","activeInstances","clusters","firstInstance","lastInstance","uniformIndex","uniformName","fakeAttribute","InstancedBufferAttribute","instanceIndex","toEmit","emitOnce","emit","clearTimeout","flushEmitOnce","emit_once_1","allBufferLocations","availableLocations","currentInstancedCount","instanceToBufferLocation","growthCount","maxInstancedCount","attributeToPropertyIds","updateAllPropertyIdList","activePropertyId","doAddWithRegistration","propertyIdsForAttribute","makeUpdateAllPropertyIdList","locationInfo","resizeBuffer","gatherLocationsIntoGroups","newLocations","growth","shift","ids","attributeToNewBufferLocations","InstancedBufferGeometry","previousInstanceAmount","_g","array","newAttribute","setDynamic","allLocations","newLocation","internalAttribute","totalNewInstances","attributesBufferLocations","bufferLocationsForAttribute","childBufferLocations","group","bufferLocation","childAttribute","bufferLocationsForChildAttribute","childBufferLocation","instance_attribute_color_diff_processor_1","instance_attribute_diff_processor_1","instance_attribute_quad_diff_processor_1","uniform_color_diff_processor_1","uniform_diff_processor_1","uniform_quad_diff_processor_1","cleanObservation","instanceChanges","allowChanges","disposer","observableDisposer","INSERT","CHANGE","REMOVE","emptyPropertyChanges","ArcScaleType","ArcLayer","animateAngle","animateThickness","side","DoubleSide","getBounds","childToNode","childToBounds","nullBounded","fromSplit","doRemove","found","node","ReferenceCamera","offsetFilter","scaleFilter","base","_val","h","plural","ms","str","String","exec","long","fmtLong","fmtShort","createDebug","prevTime","self","curr","prev","coerce","format","formatter","hash","charCodeAt","selectColor","disable","names","skips","len","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","noop","nextTick","title","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","extendShader","baseFS","extendedVS","extendedFS","header","extend_shader_1","extendShaderInitialization","extendedShaders","isNumber","AnimationHelper","groupAnimation","groupCount","baseDelay","delayGap","modifyInstances","startFrameTime","gap","CameraBoundsAnchor","event_manager_1","BasicCameraController","isPanning","panFilter","_allViews","startViews","onRangeChanged","_camera","_targetView","startViewDidStart","applyBounds","targetView","applyScaleBounds","boundsHorizontalOffset","boundsVerticalOffset","scaleMin","scaleMax","setBounds","ignoreCoverViews","anchoredByBoundsHorizontal","TOP_LEFT","MIDDLE_LEFT","BOTTOM_LEFT","worldBounds","screenPadding","TOP_MIDDLE","MIDDLE","BOTTOM_MIDDLE","TOP_RIGHT","MIDDLE_RIGHT","BOTTOM_RIGHT","anchoredByBoundsVertical","worldTLinScreenSpace","worldBRinScreenSpace","canStart","findCoveredStartView","under","coveredStartView","getTargetView","_button","pan","wheelMetrics","beforeZoom","currentZoomX","currentZoomY","afterZoom","getRange","setRange","newWorld","deltaScale","deltaPan"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"three\"), require(\"bowser\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"three\", \"bowser\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"network-bubble-chart\"] = factory(require(\"three\"), require(\"bowser\"));\n\telse\n\t\troot[\"network-bubble-chart\"] = factory(root[\"three\"], root[\"bowser\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__135__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 142);\n","import * as Three from \"three\";\nimport { Instance } from \"./instance-provider/instance\";\nimport { Bounds } from \"./primitives/bounds\";\nimport { IPoint } from \"./primitives/point\";\nimport { ChartCamera, Vec, Vec2 } from \"./util\";\nimport { IAutoEasingMethod } from \"./util/auto-easing-method\";\nimport { IVisitFunction, TrackedQuadTree } from \"./util/tracked-quad-tree\";\n\nexport type Diff<T extends string, U extends string> = ({ [P in T]: P } &\n  { [P in U]: never } & { [x: string]: never })[T];\nexport type Omit<TType, TKeys> = Pick<TType, Exclude<keyof TType, TKeys>>;\nexport type ShaderIOValue =\n  | [number]\n  | [number, number]\n  | [number, number, number]\n  | [number, number, number, number]\n  | Three.Vector4[]\n  | Float32Array;\nexport type InstanceIOValue =\n  | [number]\n  | [number, number]\n  | [number, number, number]\n  | [number, number, number, number];\nexport type UniformIOValue =\n  | number\n  | InstanceIOValue\n  | Float32Array\n  | Three.Texture;\n\nexport enum InstanceBlockIndex {\n  ONE = 1,\n  TWO = 2,\n  THREE = 3,\n  FOUR = 4\n}\n\nexport enum InstanceAttributeSize {\n  ONE = 1,\n  TWO = 2,\n  THREE = 3,\n  FOUR = 4,\n  /** Special case for making instance attributes that can target Atlas resources */\n  ATLAS = 99\n}\n\nexport const instanceAttributeSizeFloatCount: { [key: number]: number } = {\n  [InstanceAttributeSize.ONE]: 1,\n  [InstanceAttributeSize.TWO]: 2,\n  [InstanceAttributeSize.THREE]: 3,\n  [InstanceAttributeSize.FOUR]: 4,\n  [InstanceAttributeSize.ATLAS]: 4\n};\n\nexport enum UniformSize {\n  ONE = 1,\n  TWO = 2,\n  THREE = 3,\n  FOUR = 4,\n  MATRIX3 = 9,\n  MATRIX4 = 16,\n  ATLAS = 99\n}\n\nexport enum VertexAttributeSize {\n  ONE = 1,\n  TWO = 2,\n  THREE = 3,\n  FOUR = 4\n}\n\n/**\n * This represents a color in the VoidGL system. Ranges are [0 - 1, 0 - 1, 0 - 1, 0 - 1]\n */\nexport type Color = [number, number, number, number];\n\n/**\n * Represents something with a unique id\n */\nexport interface Identifiable {\n  /** A unique identifier */\n  id: string;\n}\n\n/**\n * Information provided in mouse events interacting with instances and\n * layers.\n */\nexport interface IPickInfo<T extends Instance> {\n  /** If a mouse button is involved in the pick, this will be populated */\n  button?: number;\n  /** This is the parent layer id of the instances interacted with */\n  layer: string;\n  /** This is the list of instances that were detected in the interaction */\n  instances: T[];\n  /** If picking is set to ALL then this will be provided which can be used to make additional spatial queries */\n  querySpace?(bounds: Bounds | IPoint, visit?: IVisitFunction<T>): T[];\n  /** This is the screen coordinates of the mouse point that interacted with the instances */\n  screen: [number, number];\n  /** This is the world coordinates of the mouse point that interacted with the instances */\n  world: [number, number];\n  /** Projection methods to easily go between coordinate spaces */\n  projection: IProjection;\n}\n\nexport interface IVertexAttribute {\n  /**\n   * When initWithBuffer and customFill are not specified, this is was the system will initially\n   * load each vertex attribute with.\n   */\n  defaults?: number[];\n  /**\n   * When this is specified it will initialize the model's attribute with the data in this buffer.\n   */\n  initWithBuffer?: Float32Array;\n  /**\n   * When generating this attribute in the shader this will be the prefix to the attribute:\n   * For instance, if you specify 'highp' as the modifier, then the attribute that appears\n   * in the shader will be:\n   * attribute highp vec3 position;\n   */\n  qualifier?: string;\n  /**\n   * This is the name the attribute will be for the model.\n   */\n  name: string;\n  /**\n   * This is the number of floats the attribute will consume. For now, we only allow for up\n   * to four floats per attribute.\n   */\n  size: VertexAttributeSize;\n  /**\n   * This lets you populate the buffer with an automatically called method. This will fire when\n   * necessary updates are detected or on initialization.\n   */\n  update(vertex: number): ShaderIOValue;\n}\n\nexport interface IVertexAttributeInternal extends IVertexAttribute {\n  /** This is the actual attribute generated internally for the ThreeJS interfacing */\n  materialAttribute: Three.BufferAttribute | null;\n}\n\nexport interface IInstanceAttribute<T extends Instance> {\n  /**\n   * If this is specified, this attribute becomes a size of 4 and will have a block index of\n   * 0. This makes this attribute and layer become compatible with reading atlas resources.\n   * The value provided for this property should be the name of the atlas that is created.\n   */\n  atlas?: {\n    /** Specify which generated atlas to target for the resource */\n    key: string;\n    /** Specify the name that will be injected that will be the sampler2D in the shader */\n    name: string;\n    /**\n     * This specifies which of the shaders the sampler2D will be injected into.\n     * Defaults to the Fragment shader only.\n     */\n    shaderInjection?: ShaderInjectionTarget;\n  };\n  /**\n   * This is a block index helping describe the instancing process. It can be any number as\n   * the system will sort and organize them for you. This only helps the system detect when\n   * you cram too much info into a single block. The tighter you pack your blocks the better\n   * your program will perform.\n   *\n   * Note: It's best to leave this blank as the system now packs your attributes for you and\n   * will determine this number for you.\n   */\n  block?: number;\n  /**\n   * This is the index within the block this attribute will be available.\n   */\n  blockIndex?: InstanceBlockIndex;\n  /**\n   * If the settings on this attrubute spawns additional attributes, those attributes shall\n   * be populated here. Otherwise this remains undefined.\n   */\n  childAttributes?: IInstanceAttribute<T>[];\n  /**\n   * When this is set, the system will automatically inject necessary Shader IO to facilitate\n   * performing the easing on the GPU, which saves enormous amounts of CPU processing time\n   * trying to calcuate animations and tweens for properties.\n   *\n   * NOTE: Setting this increases the amount of data per instance by: size * 2 + ;\n   * as it injects in a start value, start time, and duration\n   */\n  easing?: IAutoEasingMethod<Vec>;\n  /**\n   * This is the name that will be available in your shader for use. This will only be\n   * available after the ${attributes} declaration.\n   */\n  name: string;\n  /**\n   * If this attribute is created automatically by the system based on the settings of another\n   * attribute, that parent attribute will be set here. Otherwise this remains undefined.\n   */\n  parentAttribute?: IInstanceAttribute<T>;\n  /**\n   * When generating this attribute in the shader this will be the prefix to the attribute:\n   * For instance, if you specify 'highp' as the modifier, then the attribute that appears\n   * in the shader will be:\n   * attribute highp vec3 position;\n   */\n  qualifier?: string;\n  /**\n   * This is how many floats the instance attribute takes up. Due to how instancing is\n   * implemented, we can only take up to 4 floats per variable right now.\n   */\n  size?: InstanceAttributeSize;\n  /**\n   * This is the accessor that executes when the instance needs updating. Simply return the\n   * value that should be populated for this attribute.\n   */\n  update(instance: T): InstanceIOValue;\n}\n\n/**\n * Internal Instance Attributes are ones that actually map to an attribute in the shader and use\n * hardware instancing.\n */\nexport interface IInstanceAttributeInternal<T extends Instance>\n  extends IInstanceAttribute<T> {\n  /** We will keep an internal uid for the  */\n  uid: number;\n  /** This is the actual attribute mapped to a buffer */\n  bufferAttribute: Three.InstancedBufferAttribute;\n}\n\n/**\n * This is an attribute where the atlas is definitely declared.\n */\nexport interface IAtlasInstanceAttribute<T extends Instance>\n  extends IInstanceAttribute<T> {\n  /**\n   * If this is specified, this attribute becomes a size of 4 and will have a block index of\n   * 0. This makes this attribute and layer become compatible with reading atlas resources.\n   * The value provided for this property should be the name of the atlas that is created.\n   */\n  atlas: {\n    /** Specify which generated atlas to target for the resource */\n    key: string;\n    /** Specify the name that will be injected that will be the sampler2D in the shader */\n    name: string;\n    /**\n     * This specifies which of the shaders the sampler2D will be injected into.\n     * Defaults to the Fragment shader only.\n     */\n    shaderInjection?: ShaderInjectionTarget;\n  };\n}\n\n/**\n * This is an attribute that is simply a value\n */\nexport interface IEasingInstanceAttribute<T extends Instance>\n  extends IInstanceAttribute<T> {\n  /**\n   * This MUST be defined to be an Easing attribute\n   */\n  easing: IAutoEasingMethod<Vec> & { uid?: number };\n  /**\n   * Easing attributes requires size to be present\n   */\n  size: InstanceAttributeSize;\n}\n\n/**\n * This is an attribute that is simply a value\n */\nexport interface IValueInstanceAttribute<T extends Instance>\n  extends IInstanceAttribute<T> {\n  /**\n   * If this is specified, this attribute becomes a size of 4 and will have a block index of\n   * 0. This makes this attribute and layer become compatible with reading atlas resources.\n   * The value provided for this property should be the name of the atlas that is created.\n   */\n  atlas: undefined;\n}\n\n/** These are flags for indicating which shaders receive certain injection elements */\nexport enum ShaderInjectionTarget {\n  /** ONLY the vertex shader will receive the injection */\n  VERTEX = 1,\n  /** ONLY the fragment shader will receive the injection */\n  FRAGMENT = 2,\n  /** Both the fragment and vertex shader will receive the injection */\n  ALL = 3\n}\n\nexport interface IUniform {\n  /**\n   * This lets you specify which of the shaders will receive this uniform as available.\n   * This defaults to only injecting into the vertex shader.\n   */\n  shaderInjection?: ShaderInjectionTarget;\n  /** Name of the uniform as will be available in the shaders */\n  name: string;\n  /** How many floats the uniform shall encompass */\n  size: UniformSize;\n  /**\n   * When generating this uniform in the shader this will be the prefix to the uniform:\n   * For instance, if you specify 'highp' as the modifier, then the uniform that appears\n   * in the shader will be:\n   * uniform highp vec3 position;\n   */\n  qualifier?: string;\n  /**\n   * This is the accessor that executes every frame before this layer is drawn. It gives\n   * opportunity to update the uniform's value before every draw.\n   */\n  update(uniform: IUniform): UniformIOValue;\n}\n\nexport interface IUniformInternal extends IUniform {\n  /**\n   * All layers will have many many ShaderMaterials generated per each instance buffer as a single buffer\n   * can only render so many instances. This tracks across all generated ShaderMaterials for each buffer\n   * the material uniforms that need to be updated as a Uniform for a layer is dictated as uniform across\n   * all instances.\n   */\n  materialUniforms: Three.IUniform[];\n}\n\n/**\n * This is the structure of a uniform generated for the sake of instancing\n */\nexport interface IInstancingUniform {\n  name: string;\n  type: \"f\" | \"v2\" | \"v3\" | \"v4\" | \"4fv\" | \"bvec4\";\n  value: ShaderIOValue;\n}\n\n/**\n * Represents a complete shader object set.\n */\nexport interface IShaders {\n  fs: string;\n  header?: string;\n  vs: string;\n}\n\n/**\n * Represents an element that has a full list of projection methods\n */\nexport interface IProjection {\n  /** This is the chart camera utilized in the projection of elements */\n  camera: ChartCamera;\n  /** Converts from the pixel density layer to the screen space */\n  pixelSpaceToScreen(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from the screen coordinates to the pixel density layer */\n  screenToPixelSpace(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from screen space to the view's relative coordinates */\n  screenToView(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from screen space to the world space of a scene */\n  screenToWorld(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from a view's space to the screen */\n  viewToScreen(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from a views space to the world coordinates */\n  viewToWorld(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from world coordinate space of a scene to the screen */\n  worldToScreen(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from world coordinate space of a scene to the view's space */\n  worldToView(point: IPoint, out?: IPoint): IPoint;\n}\n\nexport type IMaterialOptions = Partial<\n  Omit<\n    Omit<Omit<Three.ShaderMaterialParameters, \"uniforms\">, \"vertexShader\">,\n    \"fragmentShader\"\n  >\n>;\n\n/** This is the method signature for determining whether or not a point hits an instance */\nexport type InstanceHitTest<T> = (o: T, p: IPoint, v: IProjection) => boolean;\n\n/**\n * This is the type of picking assigned to a layer. Each mode has performance and functionality\n * tradeoffs.\n */\nexport enum PickType {\n  /** Disable any picking methodology */\n  NONE,\n  /** Pick all instances found underneath the mouse. The Layer must explicitly support this feature. */\n  ALL,\n  /**\n   * NOTE: NOT IMPLEMENTED YET\n   *\n   * Uses highly efficient color rendering method to detect an instance on a pixel by pixel check. Since it is\n   * based on rendering, it will only select the 'visually' top most rendered instance. This means instances can be occluded\n   * by other instances is an instance renders behind another.\n   *\n   * This is vastly more efficient and accurate than ALL. This also will be more readily supported than ALL.\n   */\n  SINGLE\n}\n\n/**\n * This represents the settings and objects used to facilitate picking in a layer.\n */\nexport interface IPickingMetrics {\n  /** This is the current pick mode that is active during the draw pass of the layer */\n  currentPickMode: PickType;\n  /** This is the picking style to be used */\n  type: PickType;\n}\n\n/**\n * This is the picking settings and objects to facilitate PickType.ALL so we can get\n * all instances underneath the mouse.\n */\nexport interface IQuadTreePickingMetrics<T extends Instance>\n  extends IPickingMetrics {\n  /** This handles the ALL type only */\n  type: PickType.ALL;\n  /** This stores all of our instances in a quad tree to spatially track our instances */\n  quadTree: TrackedQuadTree<T>;\n  /** This is the method for performing a hit test with the provided instance */\n  hitTest: InstanceHitTest<T>;\n}\n\n/**\n * This is the picking settings and objects to facilitate PickType.SINGLE so we can get\n * a single instance underneath the mouse.\n */\nexport interface ISinglePickingMetrics<T extends Instance>\n  extends IPickingMetrics {\n  /** Set the enum for the type */\n  type: PickType.SINGLE;\n  /**\n   * This is a lookup of the instance by it's UID which is all that is needed to decode a color to an instance\n   * The color UINT8 components composited into a single UINT32 IS the UID of the instance\n   */\n  uidToInstance: Map<number, T>;\n}\n\n/**\n * This is the picking settings and objects to facilitate PickType.NONE where no information\n * is retrieved for mouse interactions.\n */\nexport interface INonePickingMetrics extends IPickingMetrics {\n  // Single Picking does not require any special helper information\n  type: PickType.NONE;\n}\n\nexport interface IColorPickingData {\n  /** The mouse target position where the data is rendered */\n  mouse: Vec2;\n  /** The color data loaded for last picking rendering */\n  colorData: Uint8Array;\n  /** The height of the data array */\n  dataHeight: number;\n  /** The width of the data array */\n  dataWidth: number;\n  /** The nearest found color */\n  nearestColor: number;\n  /** All colors in the data */\n  allColors: number[];\n}\n\n/**\n * Diff types that an instance can go through. Used to help the system consume the diff\n * and apply it to the GL framework.\n */\nexport enum InstanceDiffType {\n  CHANGE = 0,\n  INSERT = 1,\n  REMOVE = 2\n}\n\n/**\n * This is the metrics associated with a frame. Mostly dealing with timing values.\n */\nexport type FrameMetrics = {\n  /** The frame number rendered. Increases by 1 every surface draw */\n  currentFrame: number;\n  /** The start time of the current frame */\n  currentTime: number;\n  /** The start time of the previous frame */\n  previousTime: number;\n};\n\n/**\n * This represents controls that can be utilized when adjustig easing\n */\nexport interface IEasingControl {\n  /** A value in ms that expresses how long the system should wait before beginning the animation */\n  readonly delay?: number;\n  /** Indicates how long the easing should take to complete in ms */\n  readonly duration: number;\n  /** The end value the easing should approach */\n  readonly end: Vec;\n  /** The starting value of the easing object */\n  readonly start: Vec;\n  /** The start time in ms the easing object utilizes */\n  readonly startTime: number;\n\n  /**\n   * If you manually set values for the easing properties, then you use this to return\n   * the easing object back to an automated state which is where the start value is\n   * the calculated current position of the output and the delay and duration is determined\n   * by the easing set to the layer's IAutomatedEasingMethod value set to the layer.\n   */\n  setAutomatic(): void;\n\n  /**\n   * This controls the start value of the easing. This should be used to force a starting\n   * value of the animation.\n   *\n   * Use setAutomatic() to return to default easing behavior.\n   */\n  setStart(start?: Vec): void;\n\n  /**\n   * This controls of the timing of the easing equation. This should be used to adjust\n   * when a value is to be adjusted\n   *\n   * Use setAutomatic() to return to default easing behavior.\n   */\n  setTiming(delay?: number, duration?: number): void;\n}\n\n/**\n * This is the minimum properties required to make all easing functions operate.\n */\nexport interface IEasingProps {\n  /** A value in ms that expresses how long the system should wait before beginning the animation */\n  delay?: number;\n  /** Indicates how long the easing should take to complete in ms */\n  duration: number;\n  /** The end value the easing should approach */\n  end: Vec;\n  /** A flag indicating if the easing start value is manually set, thus prioritizing the values already set in this object */\n  isManualStart?: boolean;\n  /** A flag indicating if the easing timing is manually set, thus prioritizing the values already set in this object */\n  isTimeSet?: boolean;\n  /** The starting value of the easing object */\n  start: Vec;\n  /** The start time in ms the easing object utilizes */\n  startTime: number;\n}\n\n/**\n * This is the Shader IO information a layer will provide.\n */\nexport interface IShaderInputs<T extends Instance> {\n  /** These are very frequently changing attributes and are uniform across all vertices in the model */\n  instanceAttributes?: (IInstanceAttribute<T> | null)[];\n  /** These are attributes that should be static on a vertex. These are considered unique per vertex. */\n  vertexAttributes?: (IVertexAttribute | null)[];\n  /** Specify how many vertices there are per instance */\n  vertexCount: number;\n  /** These are uniforms in the shader. These are uniform across all vertices and all instances for this layer. */\n  uniforms?: (IUniform | null)[];\n}\n\n/**\n * This is the initialization of the shader.\n */\nexport type IShaderInitialization<T extends Instance> = IShaderInputs<T> &\n  IShaders;\n\nexport interface IShaderExtension {\n  header?: string;\n  body?: string;\n}\n\nexport type IShaderIOExtension<T extends Instance> = Partial<\n  IShaderInputs<T>\n> & {\n  vs?: IShaderExtension;\n  fs?: IShaderExtension;\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","export * from \"./observable\";\nexport * from \"./instance-provider\";\nexport * from \"./instance\";\n","export * from \"../instance-provider/instance\";\nexport * from \"./common-options\";\nexport * from \"./animation-helper\";\nexport * from \"./auto-easing-method\";\nexport * from \"./chart-camera\";\nexport * from \"./extend-shader-io\";\nexport * from \"./mouse\";\nexport * from \"./reference-camera\";\nexport * from \"./shader-templating\";\nexport * from \"./tracked-quad-tree\";\nexport * from \"./uid\";\nexport * from \"./vector\";\nexport * from \"./view-camera\";\nexport * from \"./webgl-stat\";\n","import { IPoint } from \"./point\";\n\nexport interface IBoundsOptions {\n  /** Top left x position */\n  x?: number;\n  /** Top left y position */\n  y?: number;\n  /** Width covered */\n  width?: number;\n  /** height covered */\n  height?: number;\n\n  /** Specify the left */\n  left?: number;\n  /** Specify the right */\n  right?: number;\n  /** Specify the top */\n  top?: number;\n  /** Specify the bottom */\n  bottom?: number;\n}\n\n/**\n * Class to manage the x, y, width, and height of an object\n *\n * @template T This specifies the data type associated with this shape and is accessible\n *             via the property 'd'\n */\nexport class Bounds {\n  x: number = 0;\n  y: number = 0;\n  width: number = 0;\n  height: number = 0;\n\n  get area() {\n    return this.width * this.height;\n  }\n\n  get bottom() {\n    return this.y + this.height;\n  }\n\n  get left() {\n    return this.x;\n  }\n\n  get mid() {\n    return {\n      x: this.x + this.width / 2.0,\n      y: this.y + this.height / 2.0\n    };\n  }\n\n  get right() {\n    return this.x + this.width;\n  }\n\n  get top() {\n    return this.y;\n  }\n\n  static emptyBounds() {\n    return new Bounds({\n      height: 0,\n      width: 0,\n      x: 0,\n      y: 0\n    });\n  }\n\n  /**\n   * Create a new instance\n   *\n   * @param left  The left side (x coordinate) of the instance\n   * @param right The right side of the instance\n   * @param top The top (y coordinate) of the instance\n   * @param bottom The bottom of the instance\n   */\n  constructor(options: IBoundsOptions) {\n    this.x = options.x || options.left || 0;\n    this.y = options.y || options.top || 0;\n    this.height = options.height || (options.bottom || 0) - this.y || 0;\n    this.width = options.width || (options.right || 0) - this.x || 0;\n  }\n\n  /**\n   * Checks to see if a point is within this bounds object.\n   *\n   * @param point\n   */\n  containsPoint(point: IPoint) {\n    return !(\n      point.x < this.x ||\n      point.y < this.y ||\n      point.x > this.right ||\n      point.y > this.bottom\n    );\n  }\n\n  /**\n   * Grows this bounds object to cover the space of the provided bounds object\n   *\n   * @param item\n   */\n  encapsulate(item: Bounds | IPoint) {\n    if (item instanceof Bounds) {\n      if (item.x < this.x) {\n        this.width += Math.abs(item.x - this.x);\n        this.x = item.x;\n      }\n\n      if (item.y < this.y) {\n        this.height += Math.abs(item.y - this.y);\n        this.y = item.y;\n      }\n\n      if (this.right < item.right) {\n        this.width += item.right - this.right;\n      }\n\n      if (this.bottom < item.bottom) {\n        this.height += item.bottom - this.bottom;\n      }\n\n      return true;\n    } else {\n      if (item.x < this.x) {\n        this.width += this.x - item.x;\n        this.x = item.x;\n      }\n\n      if (item.x > this.right) {\n        this.width += item.x - this.x;\n      }\n\n      if (item.y < this.y) {\n        this.height += this.y - item.y;\n        this.y = item.y;\n      }\n\n      if (item.y > this.bottom) {\n        this.height += item.y - this.y;\n      }\n\n      return true;\n    }\n  }\n\n  /**\n   * Checks to see if the provided bounds object could fit within the dimensions of this bounds object\n   * This ignores position and just checks width and height.\n   *\n   * @param bounds\n   *\n   * @return {number} 0 if it doesn't fit. 1 if it fits perfectly. 2 if it just fits.\n   */\n  fits(bounds: Bounds): 0 | 1 | 2 {\n    // If the same, the bounds fits exactly into this bounds\n    if (this.width === bounds.width && this.height === bounds.height) {\n      return 1;\n    }\n\n    // The bounds can fit within this, then it just fits\n    if (this.width >= bounds.width && this.height >= bounds.height) {\n      return 2;\n    }\n\n    // Otherwise, the bounds does not fit within this bounds\n    return 0;\n  }\n\n  /**\n   * Checks if a bounds object intersects another bounds object.\n   *\n   * @param bounds\n   */\n  hitBounds(bounds: Bounds) {\n    return !(\n      this.right < bounds.x ||\n      this.x > bounds.right ||\n      this.bottom < bounds.y ||\n      this.y > bounds.height\n    );\n  }\n\n  /**\n   * Sees if the provided bounds is completely within this bounds object. Unlike fits() this takes\n   * position into account.\n   *\n   * @param bounds\n   */\n  isInside(bounds: Bounds): boolean {\n    return (\n      this.x >= bounds.x &&\n      this.right <= bounds.right &&\n      this.y >= bounds.y &&\n      this.bottom <= bounds.bottom\n    );\n  }\n\n  /**\n   * Easy readout of this Bounds object.\n   */\n  toString() {\n    return `{x: ${this.x} y:${this.y} w:${this.width} h:${this.height}}`;\n  }\n}\n","import { Instance } from \"../../instance-provider/instance\";\nimport { IInstanceAttributeInternal } from \"../../types\";\nimport { Vec2 } from \"../../util\";\nimport { Layer } from \"../layer\";\nimport { Scene } from \"../scene\";\n\nexport function isBufferLocation(val: any): val is IBufferLocation {\n  return val && val.buffer && val.buffer.value;\n}\n\nexport function isBufferLocationGroup(\n  val: any\n): val is IBufferLocationGroup<IBufferLocation> {\n  return val && val.propertyToBufferLocation;\n}\n\n/**\n * This defines a base information object that explains where in a buffer a value\n * is represented.\n */\nexport interface IBufferLocation {\n  /** This is the parent attribute of this location */\n  attribute: IInstanceAttributeInternal<Instance>;\n  /**\n   * This is the generic buffer object interface for accessing the actual buffer.\n   */\n  buffer: {\n    value: Float32Array | Uint8Array;\n  };\n  /**\n   * If the attribute has child attributes (attributes auto generated as a consequence of the attributes settings)\n   * then the children's buffer locations can be found here.\n   */\n  childLocations?: IBufferLocation[];\n  /**\n   * This is the instance index indicative of the instance positioning within the buffer.\n   * Keep in mind: This does NOT correlate to a lookup for an Instance object but rather for\n   * the instancing concept designed for GL Buffers.\n   */\n  instanceIndex: number;\n  /**\n   * This is the range within the buffer values should be injected for this location.\n   */\n  range: Vec2;\n}\n\n/**\n * Each instance that comes in can be associated with a group of buffer locations. A buffer location for each\n * instance attribute used in updates. So a grouping is several buffer locations that are keyed by\n * the instance's property's UIDs.\n */\nexport interface IBufferLocationGroup<T extends IBufferLocation> {\n  /** This is the instance index WITHIN THE BUFFERS. This does NOT have relevance to Instance type objects */\n  instanceIndex: number;\n  /** This is a map of property UIDs to an associated buffer location */\n  propertyToBufferLocation: { [key: number]: T };\n}\n\n/**\n * Layers manage instances and those instances require a form of binding to their associated buffers.\n * The buffers have to be intelligently created and managed in this tieing to maximize performance.\n * One can not have a buffer for every instance in most cases, so the buffer manager has to get instances\n * to cooperate sharing a buffer in whatever strategy possible that best suits the hardware and it's limitations.\n *\n * This provides a uniform interface between instances and their corresponding buffer.\n */\nexport abstract class BufferManagerBase<\n  T extends Instance,\n  U extends IBufferLocation\n> {\n  /** The layer this manager glues Instances to Buffers */\n  layer: Layer<T, any>;\n  /** The scene the layer is injecting elements into */\n  scene: Scene;\n\n  /**\n   * Base constructor. A manager always needs to be associated with it's layer and it's scene.\n   */\n  constructor(layer: Layer<T, any>, scene: Scene) {\n    this.layer = layer;\n    this.scene = scene;\n  }\n\n  /**\n   * Destroy all elements that consume GPU resources or consumes otherwise unreleaseable resources.\n   */\n  abstract destroy(): void;\n\n  /**\n   * This adds an instance to the manager and thus ties the instance to an IBuffer location\n   */\n  add: (instance: T) => U | IBufferLocationGroup<U> | undefined;\n\n  /**\n   * Retrieves the buffer locations for the instance provided\n   */\n  abstract getBufferLocations(\n    instance: T\n  ): U | IBufferLocationGroup<U> | undefined;\n\n  /**\n   * This retrieves the property ID for the active attribute. This is necessary to prevent\n   * the need for lookups to find the active attribute.\n   */\n  abstract getActiveAttributePropertyId(): number;\n\n  /**\n   * This returns how many instances this buffer manager has grown to accommodate.\n   */\n  abstract getInstanceCount(): number;\n\n  /**\n   * This should provide a minimum property id list that represents a set of properties that if triggered\n   * for update, would cause all of the attributes to be updated for the layer.\n   */\n  abstract getUpdateAllPropertyIdList(): number[];\n\n  /**\n   * Disassociates an instance with it's buffer location and makes the instance\n   * in the buffer no longer drawable.\n   */\n  remove: (instance: T) => T;\n\n  /**\n   * Removes the manager from the scene it applied itself to.\n   */\n  abstract removeFromScene(): void;\n}\n","import { Identifiable, IEasingControl, IEasingProps } from \"../types\";\nimport { EasingProps } from \"../util/easing-props\";\nimport { InstanceProvider } from \"./instance-provider\";\nimport { observable } from \"./observable\";\n\nlet instanceUID = 0;\n\nexport interface IInstanceOptions {\n  /** The instance can be declared with an initial active state */\n  active?: boolean;\n  /** An instance must be declared with an identifier */\n  id?: string;\n}\n\nexport class Instance implements Identifiable {\n  static get newUID() {\n    return (instanceUID = ++instanceUID % 0xffffff);\n  }\n\n  /** This indicates when the instance is active / rendering */\n  @observable active: boolean;\n  /** The property changes on the instance */\n  changes: { [key: number]: number } = {};\n  /** Stores property identification numbers */\n  property: { [key: string]: number } = {};\n  /**\n   * This is a lookup that provides a means to retrieve the id of an easing type currently available to the instance.\n   * This is populated when the instance becomes a part of a layer with easing attributes.\n   *\n   * This property is to NOT be mutated except by the system.\n   */\n  easingId: { [key: string]: number } | undefined;\n  /** This is an internal easing object to track properties for automated easing */\n  private _easing = new Map<number, IEasingProps>();\n  /** Internal, non-changeable id */\n  private _id: string;\n  /** This is the observer of the Instance's observable properties */\n  private _observer: InstanceProvider<this> | null;\n  /** This is where observables store their data for the instance */\n  observableStorage: any[] = [];\n  /** A numerical look up for the instance. Numerical identifiers run faster than objects or strings */\n  @observable private _uid = Instance.newUID;\n\n  /**\n   * Retrieves a method for disposing the link between observables and observer.\n   */\n  get observableDisposer(): () => void {\n    return () => delete this._observer;\n  }\n\n  /**\n   * Retrieves the observer of the observables.\n   */\n  get observer(): InstanceProvider<this> | null {\n    return this._observer || null;\n  }\n\n  /**\n   * Applies an observer for changes to the observables.\n   */\n  set observer(val: InstanceProvider<this> | null) {\n    // If an observer already is present, we should inform it, that it is being removed\n    // in favor of a new observer\n    const oldObserver = this._observer;\n\n    // If we're switching observers, then we have to dump out assumptions made within other observers\n    if (oldObserver && oldObserver !== val) {\n      this._easing.clear();\n      oldObserver.remove(this);\n    }\n\n    // Apply the new observer as the current observer\n    this._observer = val;\n  }\n\n  /**\n   * This clears any lingering easing information that may have been registered with the instance.\n   */\n  clearEasing() {\n    this._easing.clear();\n    delete this.easingId;\n  }\n\n  /**\n   * Retrieves easing properties for the observables that are associated with easing.\n   */\n  get easing() {\n    return this._easing;\n  }\n\n  /**\n   * This attempts to get the easing object for this instance for a given attribute that it MIGHT be associated with.\n   *\n   * When an instance is added to a layer and the layer has attributes with easing applied to them, the instance gains easing values\n   * for the attributes in the layer with applied easing.\n   *\n   * You can access the easing values by requesting the attribute's \"name\" property value using this method.\n   *\n   * There is NO WAY TO GUARANTEE this value is set or available, so this method WILL return undefined if you did\n   * not use the correct name, or no such value exists, or the layer decided to not make the attribute animateable.\n   *\n   * Thus ALWAYS check the returned value to ensure it is defined before attempting to use it's results.\n   *\n   * PERFORMANCE: You can probably get much better performance NOT using this to manipulate the easing object directly.\n   * The system is designed to automatically animate an item from it's current rendered location to the next location\n   * seamlessly thus accounting for most situations. This method is provided to commit much more complex start, duration,\n   * and delay animations within a given frame to prevent the need for complicated setTimeout patterns.\n   *\n   * This CAN be faster than the default behavior if it avoids causing complicated easing computations to determine where\n   * the rendering should be at the moment (complicated cpu methods within the IAutoEasingMethod used).\n   */\n  getEasing(attributeName: string): IEasingControl | undefined {\n    if (this.easingId) {\n      const easingId = this.easingId[attributeName];\n\n      if (easingId) {\n        const easing = this._easing.get(easingId);\n\n        if (easing instanceof EasingProps) {\n          return easing;\n        }\n      }\n    }\n\n    return;\n  }\n\n  /**\n   * Get the applied id of this instance\n   */\n  get id() {\n    return this._id;\n  }\n\n  /**\n   * Get the auto generated ID of this instance\n   */\n  get uid() {\n    return this._uid;\n  }\n\n  /**\n   * This method is utilized internally to indicate when requested resources are ready.\n   * If you have a property that will be requesting a resource, you should implement this method\n   * to cause a trigger for the property to activate such that the property will update it's buffer.\n   */\n  resourceTrigger() {\n    // No default behavior, subclasses must override and provide behavior.\n    console.warn(\n      \"resourceTrigger called on an instance that did not override resourceTrigger. resourceTrigger MUST be overridden for instances\",\n      \"that utilize a resource. The observable that is tied to committing the resource should be 'triggered' in this method.\"\n    );\n  }\n\n  constructor(options: IInstanceOptions) {\n    this._id = options.id || \"\";\n    this.active = options.active || this.active;\n  }\n}\n","import * as Three from \"three\";\nimport { Instance } from \"../instance-provider/instance\";\nimport { InstanceDiff } from \"../instance-provider/instance-provider\";\nimport {\n  IInstanceAttribute,\n  IMaterialOptions,\n  INonePickingMetrics,\n  InstanceAttributeSize,\n  InstanceBlockIndex,\n  InstanceDiffType,\n  InstanceHitTest,\n  InstanceIOValue,\n  IPickInfo,\n  IQuadTreePickingMetrics,\n  IShaderInitialization,\n  ISinglePickingMetrics,\n  IUniform,\n  IUniformInternal,\n  IVertexAttributeInternal,\n  PickType,\n  ShaderInjectionTarget,\n  UniformIOValue,\n  UniformSize\n} from \"../types\";\nimport { BoundsAccessor, TrackedQuadTree } from \"../util\";\nimport { IdentifyByKey, IdentifyByKeyOptions } from \"../util/identify-by-key\";\nimport {\n  BufferManagerBase,\n  IBufferLocation\n} from \"./buffer-management/buffer-manager-base\";\nimport { InstanceDiffManager } from \"./buffer-management/instance-diff-manager\";\nimport { LayerInteractionHandler } from \"./layer-interaction-handler\";\nimport { LayerBufferType } from \"./layer-processing/layer-buffer-type\";\nimport { LayerInitializer, LayerSurface } from \"./layer-surface\";\nimport { AtlasResourceManager } from \"./texture/atlas-resource-manager\";\nimport { View } from \"./view\";\n\nexport interface IModelType {\n  /** This is the draw type of the model to be used */\n  drawMode?: Three.TrianglesDrawModes;\n  /** This is the THREE JS model type */\n  modelType: IModelConstructable;\n}\n\n/**\n * Bare minimum required features a provider must provide to be the data for the layer.\n */\nexport interface IInstanceProvider<T extends Instance> {\n  /** A list of changes to instances */\n  changeList: InstanceDiff<T>[];\n  /** Resolves the changes as consumed */\n  resolve(): void;\n  /** Forces the provider to make a change list that ensures all elements are added */\n  sync(): void;\n}\n\n/**\n * Constructor options when generating a layer.\n */\nexport interface ILayerProps<T extends Instance> extends IdentifyByKeyOptions {\n  /** This is the data provider where the instancing data is injected and modified. */\n  data: IInstanceProvider<T>;\n  /**\n   * This sets how instances can be picked via the mouse. This activates the mouse events for the layer IFF\n   * the value is not NONE.\n   */\n  picking?: PickType;\n  /**\n   * Used for debugging. Logs the generated shader for the layer in the console.\n   */\n  printShader?: boolean;\n  /**\n   * This identifies the scene we want the layer to be a part of.\n   * Layer's with the same identifiers will render their buffers in the same scene.\n   * This only applies to the layer when the layer is initialized in a layer surface. You shouldn't\n   * be swapping layers from scene to scene.\n   *\n   * The scene identifier must be an identifier used when constructing the layer surface that this layer\n   * is added to.\n   */\n  scene?: string;\n\n  // ---- EVENTS ----\n  /** Executes when the mouse is down on instances and a picking type is set */\n  onMouseDown?(info: IPickInfo<T>): void;\n  /** Executes when the mouse moves on instances and a picking type is set */\n  onMouseMove?(info: IPickInfo<T>): void;\n  /** Executes when the mouse no longer over instances and a picking type is set */\n  onMouseOut?(info: IPickInfo<T>): void;\n  /** Executes when the mouse is newly over instances and a picking type is set */\n  onMouseOver?(info: IPickInfo<T>): void;\n  /** Executes when the mouse button is release when over instances and a picking type is set */\n  onMouseUp?(info: IPickInfo<T>): void;\n  /** Executes when the mouse click gesture is executed over instances and a picking type is set */\n  onMouseClick?(info: IPickInfo<T>): void;\n}\n\nexport interface IModelConstructable {\n  new (\n    geometry?: Three.Geometry | Three.BufferGeometry,\n    material?: Three.Material | Three.Material[]\n  ): any;\n}\n\nexport interface IPickingMethods<T extends Instance> {\n  /** This provides a way to calculate bounds of an Instance */\n  boundsAccessor: BoundsAccessor<T>;\n  /** This is the way the system tests hitting an intsance */\n  hitTest: InstanceHitTest<T>;\n}\n\n/**\n * A base class for generating drawable content\n */\nexport class Layer<\n  T extends Instance,\n  U extends ILayerProps<T>\n> extends IdentifyByKey {\n  /** This MUST be implemented by sublayers in order for proper code hinting to happen */\n  static defaultProps: any = {};\n\n  /** This is the attribute that specifies the _active flag for an instance */\n  activeAttribute: IInstanceAttribute<T>;\n  /** This matches an instance to the list of Three uniforms that the instance is responsible for updating */\n  private _bufferManager: BufferManagerBase<T, IBufferLocation>;\n  /** Buffer manager is read only. Must use setBufferManager */\n  get bufferManager() {\n    return this._bufferManager;\n  }\n  /** This is the determined buffering strategy of the layer */\n  private _bufferType: LayerBufferType;\n  /** Buffer type is private and should not be directly modified */\n  get bufferType() {\n    return this._bufferType;\n  }\n  /**\n   * When this is set, the layer will utilize a provided changelist other than the changelist the data provider gives.\n   * This is used by the system to aid in situations where the layer may be out of sync with the InstanceProvider given\n   * to it.\n   */\n  customChangeList?: InstanceDiff<T>[];\n  /** This determines the drawing order of the layer within it's scene */\n  depth: number = 0;\n  /** This contains the methods and controls for handling diffs for the layer */\n  diffManager: InstanceDiffManager<T>;\n  /**\n   * This gets populated when there are attributes that have easing applied to them. This\n   * subsequently gets applied to instances when they get added to the layer.\n   */\n  easingId: { [key: string]: number };\n  /** This is the threejs geometry filled with the vertex information */\n  geometry: Three.BufferGeometry;\n  /** This is the initializer used when making this layer. */\n  initializer: LayerInitializer;\n  /** This is all of the instance attributes generated for the layer */\n  instanceAttributes: IInstanceAttribute<T>[];\n  /** A lookup fo an instance by it's ID */\n  instanceById = new Map<string, T>();\n  /** Provides the number of vertices a single instance spans */\n  instanceVertexCount: number = 0;\n  /** This is the handler that manages interactions for the layer */\n  interactions: LayerInteractionHandler<T, U>;\n  /** The official shader material generated for the layer */\n  material: Three.RawShaderMaterial;\n  /** INTERNAL: For the given shader IO provided this is how many instances can be present per buffer. */\n  maxInstancesPerBuffer: number;\n  /** This is the mesh for the Threejs setup */\n  model: Three.Object3D;\n  /** This is all of the picking metrics kept for handling picking scenarios */\n  picking:\n    | IQuadTreePickingMetrics<T>\n    | ISinglePickingMetrics<T>\n    | INonePickingMetrics;\n  /** Properties handed to the Layer during a LayerSurface render */\n  props: U;\n  /** This is the system provided resource manager that lets a layer request Atlas resources */\n  resource: AtlasResourceManager;\n  /** This is the surface this layer is generated under */\n  surface: LayerSurface;\n  /** This is all of the uniforms generated for the layer */\n  uniforms: IUniformInternal[];\n  /** This is all of the vertex attributes generated for the layer */\n  vertexAttributes: IVertexAttributeInternal[];\n  /** This is the view the layer is applied to. The system sets this, modifying will only cause sorrow. */\n  view: View;\n\n  constructor(props: ILayerProps<T>) {\n    // We do not establish bounds in the layer. The surface manager will take care of that for us\n    // After associating the layer with the view it is a part of.\n    super(props);\n    // Keep our props within the layer\n    this.props = Object.assign({}, Layer.defaultProps || {}, props as U);\n    // Set up the pick type for the layer\n    const { picking = PickType.NONE } = this.props;\n\n    // If ALL is specified we set up QUAD tree picking for our instances\n    if (picking === PickType.ALL) {\n      const pickingMethods = this.getInstancePickingMethods();\n\n      this.picking = {\n        currentPickMode: PickType.NONE,\n        hitTest: pickingMethods.hitTest,\n        quadTree: new TrackedQuadTree<T>(\n          0,\n          1,\n          0,\n          1,\n          pickingMethods.boundsAccessor\n        ),\n        type: PickType.ALL\n      };\n    } else if (picking === PickType.SINGLE) {\n      this.picking = {\n        currentPickMode: PickType.NONE,\n        type: PickType.SINGLE,\n        uidToInstance: new Map<number, T>()\n      };\n    } else {\n      this.picking = {\n        currentPickMode: PickType.NONE,\n        type: PickType.NONE\n      };\n    }\n  }\n\n  /**\n   * Invalidate and free all resources assocated with this layer.\n   */\n  destroy() {\n    if (this.bufferManager) {\n      if (this.bufferManager.scene) this.bufferManager.scene.removeLayer(this);\n      this.bufferManager.removeFromScene();\n      this.bufferManager.destroy();\n    }\n  }\n\n  didUpdateProps() {\n    /** LIFECYCLE */\n  }\n\n  /**\n   * This is where global uniforms should update their values. Executes every frame.\n   */\n  draw() {\n    let uniform: IUniformInternal;\n    let value: UniformIOValue;\n\n    // Consume the diffs for the instances to update each element\n    let changeList = this.props.data.changeList;\n\n    // Use a provided custom changelist instead of the provider's change list\n    if (this.customChangeList) {\n      // Use the changelist\n      changeList = this.customChangeList;\n      // Consider the changelist consumed and removed from the layer\n      delete this.customChangeList;\n    }\n\n    // Make some holder variables to prevent declaration within the loop\n    let change, instance, bufferLocations;\n    // Fast ref to the processor and manager\n    const diffManager = this.diffManager;\n    const processing = diffManager.processing;\n    const processor = diffManager.processor;\n\n    // Forewarn the processor how many instances are flagged for a change.\n    processor.incomingChangeList(changeList);\n\n    for (let i = 0, end = changeList.length; i < end; ++i) {\n      change = changeList[i];\n      instance = change[0];\n      bufferLocations = this.bufferManager.getBufferLocations(instance);\n      // The diff type is change[1] which we use to find the diff processing method to use\n      processing[change[1]](\n        processor,\n        instance,\n        Object.values(change[2]),\n        bufferLocations\n      );\n      // Clear the changes for the instance\n      instance.changes = {};\n    }\n\n    // Tell the diff processor that it has completed it's task set\n    processor.commit();\n    // Indicate the diffs are consumed\n    this.props.data.resolve();\n\n    // Loop through the uniforms that are across all instances\n    for (let i = 0, end = this.uniforms.length; i < end; ++i) {\n      uniform = this.uniforms[i];\n      value = uniform.update(uniform);\n      uniform.materialUniforms.forEach(\n        materialUniform => (materialUniform.value = value)\n      );\n    }\n  }\n\n  /**\n   * This method is for layers to implement to specify how the bounds for an instance are retrieved or\n   * calculated and how the Instance interacts with a point. This is REQUIRED to support PickType.ALL on the layer.\n   */\n  getInstancePickingMethods(): IPickingMethods<T> {\n    throw new Error(\n      \"When picking is set to PickType.ALL, the layer MUST have this method implemented; otherwise, the layer is incompatible with this picking mode.\"\n    );\n  }\n\n  /**\n   * The type of Three model as well as the preferred draw mode associated with it.\n   */\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TrianglesDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  /**\n   * The options for a three material without uniforms.\n   */\n  getMaterialOptions(): IMaterialOptions {\n    return {};\n  }\n\n  /**\n   * This sets up all of the data bindings that will transport data from the CPU\n   * to the Shader on the GPU.\n   *\n   * Instance Attributes: These are very frequently changing attributes\n   * Vertex Attributes: These are attributes that should be static on a vertex. Conisder it very costly to update.\n   *                    The only time making these modifieable is in the event of GL_POINTS.\n   * Uniforms: These set up the uniforms for the layer, thus having all normal implications of a uniform. Global\n   *           across the fragment and vertex shaders and can be modified with little consequence.\n   */\n  initShader(): IShaderInitialization<T> {\n    return {\n      fs: require(\"../shaders/base/no-op.fs\"),\n      instanceAttributes: [],\n      uniforms: [],\n      vertexAttributes: [],\n      vertexCount: 0,\n      vs: require(\"../shaders/base/no-op.vs\")\n    };\n  }\n\n  /**\n   * Helper method for making an instance attribute. Depending on set up, this makes creating elements\n   * have better documentation when typing out the elements.\n   */\n  makeInstanceAttribute(\n    block: number,\n    blockIndex: InstanceBlockIndex,\n    name: string,\n    size: InstanceAttributeSize,\n    update: (o: T) => InstanceIOValue,\n    atlas?: {\n      key: string;\n      name: string;\n      shaderInjection?: ShaderInjectionTarget;\n    }\n  ): IInstanceAttribute<T> {\n    return {\n      atlas,\n      block,\n      blockIndex,\n      name,\n      size,\n      update\n    };\n  }\n\n  /**\n   * Helper method for making a uniform type. Depending on set up, this makes creating elements\n   * have better documentation when typing out the elements.\n   */\n  makeUniform(\n    name: string,\n    size: UniformSize,\n    update: (o: IUniform) => UniformIOValue,\n    shaderInjection?: ShaderInjectionTarget,\n    qualifier?: string\n  ): IUniform {\n    return {\n      name,\n      qualifier,\n      shaderInjection,\n      size,\n      update\n    };\n  }\n\n  /**\n   * Applies a buffer manager to the layer which handles instance changes and applies those changes\n   * to an appropriate buffer at the appropriate location.\n   */\n  setBufferManager(bufferManager: BufferManagerBase<T, IBufferLocation>) {\n    if (!this._bufferManager) {\n      this._bufferManager = bufferManager;\n      this.diffManager = new InstanceDiffManager<T>(this, bufferManager);\n      this.diffManager.makeProcessor();\n      this.interactions = new LayerInteractionHandler(this);\n    } else {\n      console.warn(\n        \"You can not change a layer's buffer strategy once it has been instantiated.\"\n      );\n    }\n  }\n\n  /**\n   * Only allows the buffer type to be set once\n   */\n  setBufferType(val: LayerBufferType) {\n    if (this._bufferType === undefined) {\n      this._bufferType = val;\n    } else {\n      console.warn(\n        \"You can not change a layers buffer strategy once it has been instantiated.\"\n      );\n    }\n  }\n\n  willUpdateInstances(_changes: [T, InstanceDiffType]) {\n    // HOOK: Simple hook so a class can review all of it's changed instances before\n    //       Getting applied to the Shader IO\n  }\n\n  willUpdateProps(_newProps: ILayerProps<T>) {\n    /** LIFECYCLE */\n  }\n\n  didUpdate() {\n    this.props.data.resolve();\n  }\n}\n","export enum AnchorType {\n  BottomLeft,\n  BottomMiddle,\n  BottomRight,\n  Custom,\n  Middle,\n  MiddleLeft,\n  MiddleRight,\n  TopLeft,\n  TopMiddle,\n  TopRight\n}\n\nexport type Anchor = {\n  /** When the anchor gets calculated on the image, this allows the anchor to go beyond the borders of the image by this amount */\n  padding: number;\n  /** This is the location of the anchor. If a custom anchor is specified, then the x and y are not automatically populated */\n  type: AnchorType;\n  /** This is populated with the anchor's location relative to the image's surface */\n  x?: number;\n  /** This is populated with the anchor's location relative to the image's surface */\n  y?: number;\n};\n\nexport enum ScaleType {\n  /** The size of the image will be tied to world space */\n  ALWAYS = 1,\n  /** The image will scale to it's font size then stop growing */\n  BOUND_MAX = 2,\n  /** The image will alwyas retain it's font size on screen */\n  NEVER = 3\n}\n","export * from \"./bounds\";\nexport * from \"./circle\";\nexport * from \"./point\";\nexport * from \"./scale\";\nexport * from \"./size\";\n","import { Instance } from \"../../instance-provider/instance\";\nimport {\n  IInstanceAttribute,\n  instanceAttributeSizeFloatCount,\n  IVertexAttribute\n} from \"../../types\";\nimport { WebGLStat } from \"../../util\";\nimport {\n  InstanceAttributeBufferManager,\n  UniformBufferManager\n} from \"../buffer-management\";\nimport { Layer } from \"../layer\";\nimport { Scene } from \"../scene\";\n\nconst debug = require(\"debug\")(\"performance\");\n\nexport enum LayerBufferType {\n  // This is a compatibility mode for instance attributes. This is used when:\n  // 1. It would perform better\n  // 2. When instance attributes are not available for the gl context (ANGLE draw instanced arrays)\n  // 3. When the instance attributes + vertex attributes exceeds the max Vertex Attributes for the hardware\n  UNIFORM,\n  // This is a fast and zippy buffering strategy used when the hardware supports it for a provided layer!\n  INSTANCE_ATTRIBUTE\n}\n\n/**\n * This analyzes a layer and determines if it should use a compatibility instancing mode or use hardware\n * instancing.\n */\nexport function getLayerBufferType<T extends Instance>(\n  _gl: WebGLRenderingContext,\n  layer: Layer<T, any>,\n  vertexAttributes: IVertexAttribute[],\n  instanceAttributes: IInstanceAttribute<T>[]\n) {\n  let type;\n  let attributesUsed = 0;\n\n  // The layer only gets it's buffer type calculated once\n  if (layer.bufferType !== undefined) {\n    return layer.bufferType;\n  }\n\n  // Uncomment this to force the uniform buffer strategy\n  // layer.setBufferType(LayerBufferType.UNIFORM);\n  // return LayerBufferType.UNIFORM;\n\n  if (WebGLStat.HARDWARE_INSTANCING) {\n    for (let i = 0, end = vertexAttributes.length; i < end; ++i) {\n      const attribute = vertexAttributes[i];\n      attributesUsed += Math.ceil(attribute.size / 4);\n    }\n\n    for (let i = 0, end = instanceAttributes.length; i < end; ++i) {\n      const attribute = instanceAttributes[i];\n      attributesUsed += Math.ceil(\n        instanceAttributeSizeFloatCount[attribute.size || 1] / 4\n      );\n    }\n\n    // Too many attributes. We must use the uniform compatibility mode\n    if (attributesUsed > WebGLStat.MAX_VERTEX_ATTRIBUTES) {\n      type = LayerBufferType.UNIFORM;\n    } else {\n      // If we make it here, we are good to go using hardware instancing! Hooray performance!\n      type = LayerBufferType.INSTANCE_ATTRIBUTE;\n    }\n  }\n\n  // No other faster mode supported: use uniform instancing\n  if (!type) {\n    debug(\n      `Warning: Layer %o is utilizing too many vertex attributes and is now using a uniform buffer.\n      Max Vertex units %o\n      Used Vertex units %o\n      Instance Attributes %o\n      Vertex Attributes %o`,\n      layer.id,\n      WebGLStat.MAX_VERTEX_ATTRIBUTES,\n      attributesUsed,\n      instanceAttributes,\n      vertexAttributes\n    );\n    type = LayerBufferType.UNIFORM;\n  }\n\n  // Apply the type to the layer\n  layer.setBufferType(type);\n\n  return type;\n}\n\n/**\n * Builds the proper buffer manager for the provided layer\n */\nexport function makeLayerBufferManager<T extends Instance>(\n  gl: WebGLRenderingContext,\n  layer: Layer<T, any>,\n  scene: Scene\n) {\n  // Esnure the buffering type has been calculated for the layer\n  const type = getLayerBufferType(\n    gl,\n    layer,\n    layer.vertexAttributes,\n    layer.instanceAttributes\n  );\n\n  switch (type) {\n    // This is the Instance Attribute buffering strategy, which means the system\n    case LayerBufferType.INSTANCE_ATTRIBUTE: {\n      layer.setBufferManager(new InstanceAttributeBufferManager(layer, scene));\n      break;\n    }\n\n    // Anything not utiliziing a specialized buffering strategy will use the uniform compatibility mode\n    default: {\n      layer.setBufferManager(new UniformBufferManager(layer, scene));\n      break;\n    }\n  }\n}\n","export * from \"./atlas\";\nexport * from \"./atlas-manager\";\nexport * from \"./color-atlas-resource\";\nexport * from \"./color-rasterizer\";\nexport * from \"./image-atlas-resource\";\nexport * from \"./image-rasterizer\";\nexport * from \"./label-atlas-resource\";\nexport * from \"./label-rasterizer\";\n","import * as Three from \"three\";\nimport { IModelConstructable, Layer } from \"../layer\";\n\nfunction isMesh(val: any): val is Three.Mesh {\n  return Boolean(val.isMesh);\n}\n\nexport function generateLayerModel(\n  layer: Layer<any, any>,\n  geometry: Three.BufferGeometry,\n  material: Three.ShaderMaterial\n): IModelConstructable & Three.Object3D {\n  const modelInfo = layer.getModelType();\n  const model = new modelInfo.modelType(geometry, material);\n\n  if (isMesh(model)) {\n    model.drawMode =\n      modelInfo.drawMode === undefined\n        ? Three.TriangleStripDrawMode\n        : modelInfo.drawMode;\n  }\n\n  return model;\n}\n","export interface IdentifyByKeyOptions {\n  /** The identifier of the object */\n  key: string;\n}\n\n/**\n * This is an object that specifically is generated with a 'key' option that can never\n * be modified on the object and is identified henceforth with the key applied as the\n * 'id' of the object.\n */\nexport class IdentifyByKey {\n  /** Internal key held by the object */\n  private key: string;\n\n  /** READONLY id of the object. */\n  get id() {\n    return this.key;\n  }\n\n  constructor(options: IdentifyByKeyOptions) {\n    this.key = options.key;\n  }\n}\n","export const templateVars = {\n  attributeFragments: \"attributeFragments\",\n  attributes: \"attributes\",\n  blocksPerInstance: \"blocksPerInstance\",\n  easingMethod: \"easingMethod\",\n  easingMethods: \"easingMethods\",\n  extend: \"extend\",\n  extendHeader: \"extendHeader\",\n  instanceBlockCount: \"instanceBlockCount\",\n  instanceDataBinaryTree: \"instanceDataBinaryTree\",\n  instanceDataRetrieval: \"instanceDataRetrieval\",\n  instanceDestructuring: \"instanceDestructuring\",\n  instanceFragments: \"instanceFragments\",\n  instanceUniformDeclarations: \"instanceUniformDeclarations\",\n  layerUniforms: \"layerUniforms\",\n  picking: \"picking\",\n  projectionMethods: \"projectionMethods\",\n  shader: \"shader\",\n  shaderInput: \"shaderInput\",\n  T: \"T\",\n  vertexAttributes: \"vertexAttributes\"\n};\n","export interface IShaderTemplateResults {\n  /** This is the resulting shader string generated from the templating */\n  shader: string;\n  /** This is the template options provided by the shader. {option: num occurrences} */\n  shaderProvidedOptions: Map<string, number>;\n  /**\n   * This is the template options provided by the shader that were not resolved by the options parameter\n   * {option: num occurrences}\n   */\n  unresolvedShaderOptions: Map<string, number>;\n  /** This is the options provided to the template that did not get resolved by the shader {option: 1} */\n  unresolvedProvidedOptions: Map<string, number>;\n  /** This is the list of options that DID get resolved by the options provided {option: num occurrences} */\n  resolvedShaderOptions: Map<string, number>;\n}\n\nexport interface IShaderTemplateRequirements {\n  /** A string identifier to make it easier to identify which shader template failed requirements */\n  name: string;\n  /** The options that must be present within both provided options AND within the template */\n  values: string[];\n}\n\nexport interface IShaderTemplateOptions {\n  /** Callback for 'required' errors being emitted */\n  onError?(msg: string): void;\n  /** Callback that allows overrides for token replacement. Provides the token found and the suggested replacement for it */\n  onToken?(token: string, replace: string): string;\n  /** This is a key value pair the template uses to match tokens found to replacement values */\n  options: { [key: string]: string };\n  /** This is used to indicate which tokens are required both within the shader AND within the 'options' */\n  required?: IShaderTemplateRequirements;\n  /** THis is the shader written with templating information */\n  shader: string;\n}\n\n/**\n * This is a method that aids in making shaders a bit more dynamic with simple string replacement based on tokens written\n * into the shader. Tokens in the shader will appear as ${token} and will either be ignored by this method and thus removed\n * or will be replaced with a provided value.\n *\n * This method will give feedback on the replacements taking place and simplify the process of detecting errors within the process.\n */\nexport function shaderTemplate(\n  templateOptions: IShaderTemplateOptions\n): IShaderTemplateResults {\n  const { shader, options, required, onError, onToken } = templateOptions;\n  const matched = new Map<string, number>();\n  const noValueProvided = new Map<string, number>();\n  const notFound = new Map<string, number>();\n  const shaderOptions = new Map<string, number>();\n\n  const shaderResults = shader.replace(\n    /\\$\\{(\\w+)\\}/g,\n    (_x: string, match: string) => {\n      let replace = \"\";\n      shaderOptions.set(match, (shaderOptions.get(match) || 0) + 1);\n\n      if (match in options) {\n        matched.set(match, (matched.get(match) || 0) + 1);\n        replace = options[match];\n      } else {\n        noValueProvided.set(match, (noValueProvided.get(match) || 0) + 1);\n      }\n\n      if (onToken) {\n        replace = onToken(match, replace);\n      }\n\n      return replace;\n    }\n  );\n\n  Object.keys(options).forEach(option => {\n    if (!matched.get(option)) {\n      notFound.set(option, (notFound.get(option) || 0) + 1);\n    }\n  });\n\n  // Provide metrics\n  const results = {\n    resolvedShaderOptions: matched,\n    shader: shaderResults,\n    shaderProvidedOptions: shaderOptions,\n    unresolvedProvidedOptions: notFound,\n    unresolvedShaderOptions: noValueProvided\n  };\n\n  if (required) {\n    // This will ensure that BOTH the parameter input AND the shader provided the required options.\n    required.values.forEach(require => {\n      if (results.unresolvedProvidedOptions.get(require)) {\n        const msg = `${\n          required.name\n        }: Could not resolve all the required inputs. Input: ${require}`;\n        if (onError) onError(msg);\n        else console.error(msg);\n      } else if (results.unresolvedShaderOptions.get(require)) {\n        const msg = `${\n          required.name\n        }: A required option was not provided in the options parameter. Option: ${require}`;\n        if (onError) onError(msg);\n        else console.error(msg);\n      } else if (!results.resolvedShaderOptions.get(require)) {\n        const msg = `${\n          required.name\n        }: A required option was not provided in the options parameter. Option: ${require}`;\n        if (onError) onError(msg);\n        else console.error(msg);\n      }\n    });\n  }\n\n  return results;\n}\n","import { uid } from \"../util/uid\";\nimport { Instance } from \"./instance\";\n\nexport class ObservableMonitoring {\n  static gatherIds: boolean = false;\n  static observableIds: number[] = [];\n  static observableNamesToUID = new Map<string, number>();\n\n  /**\n   * This activates all observables to gather their UIDs when they are retrieved via their getter.\n   * All of the ID's gathered can be accessed via getObservableMonitorIds. It is REQUIRED that this\n   * is disabled again to prevent a MASSIVE memory leak.\n   */\n  static setObservableMonitor(enabled: boolean) {\n    ObservableMonitoring.gatherIds = enabled;\n    ObservableMonitoring.observableIds = [];\n  }\n\n  /**\n   * This retrieves the observables montiored IDs that were gathered when setObservableMonitor was\n   * enabled.\n   */\n  static getObservableMonitorIds(clear?: boolean) {\n    const values = ObservableMonitoring.observableIds.slice(0);\n    if (clear) ObservableMonitoring.observableIds = [];\n\n    return values;\n  }\n}\n\n/**\n * This is a custom decorator intended for single properties on Instances only! It will\n * facilitate automatic updates and stream the updates through an InstanceProvider to properly\n * update the Instances values in the appropriate and corresponding buffers that will get committed\n * to the GPU.\n */\nexport function observable<T extends Instance>(target: T, key: string) {\n  // Here we store the name of the observable to a UID. This mapping allows us to have a UID\n  // per NAME of an observable. A UID for a name can produce MUCH faster lookups than the name itself.\n  // Matching against the name allows us to have instances with their own property sets but have matching\n  // name mappings to improve compatibility of Instances with varying Layers.\n  let propertyUID: number =\n    ObservableMonitoring.observableNamesToUID.get(key) || 0;\n\n  if (!propertyUID) {\n    propertyUID = uid();\n    ObservableMonitoring.observableNamesToUID.set(key, propertyUID);\n  }\n\n  /**\n   * New property getter to get the property's alternative storage since we overrode\n   * the initial storage with a custom getter and setter.\n   */\n  function getter(this: T) {\n    if (ObservableMonitoring.gatherIds) {\n      ObservableMonitoring.observableIds.push(propertyUID);\n    }\n    return this.observableStorage[propertyUID];\n  }\n\n  /**\n   * New property setter to replace the property marked as observable. This allows\n   * us to broadcast a change to our current observer.\n   */\n  function setter(this: T, newVal: any) {\n    // Update the privatized value\n    this.observableStorage[propertyUID] = newVal;\n    // Broadcast change\n    this.changes[propertyUID] = propertyUID;\n    this.observer && this.observer.instanceUpdated(this);\n  }\n\n  /**\n   * Make sure the desired property is declared on the class with our custom getter and\n   * setter.\n   */\n  Object.defineProperty(target, key, {\n    configurable: true,\n    enumerable: true,\n    get: getter,\n    set: setter\n  });\n}\n","import * as Three from \"three\";\nimport {\n  AbsolutePosition,\n  getAbsolutePositionBounds\n} from \"../primitives/absolute-position\";\nimport { Bounds } from \"../primitives/bounds\";\nimport { IPoint } from \"../primitives/point\";\nimport { Color } from \"../types\";\nimport { ChartCamera } from \"../util/chart-camera\";\nimport { DataBounds } from \"../util/data-bounds\";\nimport { IdentifyByKey, IdentifyByKeyOptions } from \"../util/identify-by-key\";\nimport { ViewCamera, ViewCameraType } from \"../util/view-camera\";\n\nexport enum ClearFlags {\n  COLOR = 0b0001,\n  DEPTH = 0b0010,\n  STENCIL = 0b0100\n}\n\n/**\n * Defines the input metrics of a view for a scene.\n */\nexport interface IViewOptions extends IdentifyByKeyOptions {\n  /**\n   * The background color that gets cleared out for this view. Performance is\n   * better if this is left clear. Probably better to draw a colored quad instead.\n   * This is just convenient.\n   */\n  background?: Color;\n  /**\n   * This is the spatial charting camera that is concerned with offsets and scales.\n   * It is often easier to work with camera positioning and settings rather than working\n   * with the complex and nuanced viewCamera which works with special transformation matrices\n   * to express orientation.\n   *\n   * If not provided, then this camera will use a default ChartCamera for this camera slot. This\n   * will also cause a normal camera handler to be utilized.\n   */\n  camera?: ChartCamera;\n  /**\n   * This sets what buffers get cleared by webgl before the view is drawn in it's space.\n   */\n  clearFlags?: ClearFlags[];\n  /**\n   * If this is provided, the layer can be rendered with a traditional camera that utilizes\n   * matrix transforms to provide orientation/projection for the view.\n   *\n   * If this is NOT provided, the camera will be a special orthographic camera for 2d spaces\n   * with a y-axis of +y points down with (0, 0) at the top left of the viewport.\n   */\n  viewCamera?: ViewCamera;\n  /**\n   * This specifies the bounds on the canvas this camera will render to. This let's you render\n   * say a little square in the bottom right showing a minimap.\n   *\n   * If this is not specified, the entire canvas will be the viewport.\n   */\n  viewport?: AbsolutePosition;\n}\n\nfunction isOrthographic(val: Three.Camera): val is Three.OrthographicCamera {\n  return \"left\" in val;\n}\n\n/**\n * This defines a view of a scene\n */\nexport class View extends IdentifyByKey {\n  static DEFAULT_VIEW_ID = \"__default__\";\n\n  /** If present, is the cleared color before this view renders */\n  background: Color;\n  /** Camera that defines the individual components of each axis with simpler concepts */\n  camera: ChartCamera;\n  /** These are the clear flags set for this view */\n  clearFlags: ClearFlags[];\n  /**\n   * This is the depth of the view. The higher the depth represents which layer is on top.\n   * Zero always represents the default view.\n   */\n  depth: number = 0;\n  /** This is set to ensure the projections that happen properly translates the pixel ratio to normal Web coordinates */\n  pixelRatio: number = window.devicePixelRatio;\n  /** This is the rendering bounds within screen space */\n  screenBounds: Bounds;\n  /** Camera that defines the view projection matrix */\n  viewCamera: ViewCamera;\n  /** The size positioning of the view */\n  viewport: AbsolutePosition;\n  /** The bounds of the render space on the canvas this view will render on */\n  viewBounds: DataBounds<View>;\n\n  constructor(options: IViewOptions) {\n    super(options);\n    Object.assign(this, options);\n  }\n\n  screenToPixelSpace(point: IPoint, out?: IPoint) {\n    const p = out || { x: 0, y: 0 };\n\n    p.x = point.x * this.pixelRatio;\n    p.y = point.y * this.pixelRatio;\n\n    return p;\n  }\n\n  pixelSpaceToScreen(point: IPoint, out?: IPoint) {\n    const p = out || { x: 0, y: 0 };\n\n    p.x = point.x / this.pixelRatio;\n    p.y = point.y / this.pixelRatio;\n\n    return p;\n  }\n\n  screenToView(point: IPoint, out?: IPoint) {\n    const p = this.screenToPixelSpace(point, out);\n\n    p.x = p.x - this.viewBounds.x;\n    p.y = p.y - this.viewBounds.y;\n\n    return p;\n  }\n\n  viewToScreen(point: IPoint, out?: IPoint) {\n    const p = { x: 0, y: 0 };\n\n    p.x = point.x + this.viewBounds.x;\n    p.y = point.y + this.viewBounds.y;\n\n    return this.pixelSpaceToScreen(p, out);\n  }\n\n  screenToWorld(point: IPoint, out?: IPoint) {\n    const view = this.pixelSpaceToScreen(this.screenToView(point));\n\n    const world = out || { x: 0, y: 0 };\n    world.x =\n      (view.x - this.camera.offset[0] * this.camera.scale[0]) /\n      this.camera.scale[0];\n    world.y =\n      (view.y - this.camera.offset[1] * this.camera.scale[1]) /\n      this.camera.scale[1];\n\n    // If this is a custom camera, we must actually project our world point to the screen\n    if (this.viewCamera.type === ViewCameraType.CUSTOM) {\n      console.warn(\"Custom View Camera projections not supported yet\");\n    }\n\n    return world;\n  }\n\n  worldToScreen(point: IPoint, out?: IPoint) {\n    const screen = { x: 0, y: 0 };\n\n    // Calculate from the camera to view space\n    screen.x =\n      (point.x * this.camera.scale[0] +\n        this.camera.offset[0] * this.camera.scale[0]) *\n      this.pixelRatio;\n    screen.y =\n      (point.y * this.camera.scale[1] +\n        this.camera.offset[1] * this.camera.scale[1]) *\n      this.pixelRatio;\n\n    // If this is a custom camera, we must actually project our world point to the screen\n    if (this.viewCamera.type === ViewCameraType.CUSTOM) {\n      console.warn(\"Custom View Camera projections not supported yet\");\n    }\n\n    // Convert from view to screen space\n    return this.viewToScreen(screen, out);\n  }\n\n  viewToWorld(point: IPoint, out?: IPoint) {\n    const world = out || { x: 0, y: 0 };\n\n    const screen = this.pixelSpaceToScreen(point);\n    world.x =\n      (screen.x - this.camera.offset[0] * this.camera.scale[0]) /\n      this.camera.scale[0];\n    world.y =\n      (screen.y - this.camera.offset[1] * this.camera.scale[1]) /\n      this.camera.scale[1];\n\n    // If this is a custom camera, we must actually project our world point to the screen\n    if (this.viewCamera.type === ViewCameraType.CUSTOM) {\n      console.warn(\"Custom View Camera projections not supported yet\");\n    }\n\n    return world;\n  }\n\n  worldToView(point: IPoint, out?: IPoint) {\n    const screen = out || { x: 0, y: 0 };\n\n    // Calculate from the camera to view space\n    screen.x =\n      point.x * this.camera.scale[0] +\n      this.camera.offset[0] * this.camera.scale[0];\n    screen.y =\n      point.y * this.camera.scale[1] +\n      this.camera.offset[1] * this.camera.scale[1];\n\n    // If this is a custom camera, we must actually project our world point to the screen\n    if (this.viewCamera.type === ViewCameraType.CUSTOM) {\n      console.warn(\"Custom View Camera projections not supported yet\");\n    }\n\n    return screen;\n  }\n\n  /**\n   * This operation makes sure we have the view camera adjusted to the new viewport's needs.\n   * For default behavior this ensures that the coordinate system has no distortion, orthographic,\n   * top left as 0,0 with +y axis pointing down.\n   */\n  fitViewtoViewport(surfaceDimensions: Bounds) {\n    if (\n      this.viewCamera.type === ViewCameraType.CONTROLLED &&\n      isOrthographic(this.viewCamera.baseCamera)\n    ) {\n      const viewBounds = getAbsolutePositionBounds<View>(\n        this.viewport,\n        surfaceDimensions,\n        this.pixelRatio\n      );\n      const width = viewBounds.width;\n      const height = viewBounds.height;\n\n      const viewport = {\n        bottom: -height / 2,\n        far: 10000000,\n        left: -width / 2,\n        near: -100,\n        right: width / 2,\n        top: height / 2\n      };\n\n      const scaleX = 1;\n      const scaleY = 1;\n      const camera = this.viewCamera.baseCamera;\n\n      Object.assign(camera, viewport);\n      camera.position.set(\n        -viewBounds.width / 2.0 * scaleX,\n        viewBounds.height / 2.0 * scaleY,\n        camera.position.z\n      );\n      camera.scale.set(scaleX, -scaleY, 1.0);\n      camera.updateMatrix();\n      camera.updateMatrixWorld(true);\n      camera.updateProjectionMatrix();\n\n      this.viewBounds = viewBounds;\n      this.viewBounds.data = this;\n      this.screenBounds = new Bounds({\n        height: this.viewBounds.height / this.pixelRatio,\n        width: this.viewBounds.width / this.pixelRatio,\n        x: this.viewBounds.x / this.pixelRatio,\n        y: this.viewBounds.y / this.pixelRatio\n      });\n    } else if (!isOrthographic(this.viewCamera.baseCamera)) {\n      console.warn(\n        \"Fit to viewport does not support non-orthographic cameras as a default behavior.\"\n      );\n    }\n  }\n}\n","import * as Three from \"three\";\nimport { Instance } from \"../instance-provider/instance\";\nimport { ILayerProps, Layer } from \"../surface/layer\";\nimport { IdentifyByKey, IdentifyByKeyOptions } from \"../util/identify-by-key\";\nimport { IViewOptions, View } from \"./view\";\n\n/**\n * Defines the input for an available scene layers can add themselves to. Each scene can be rendered with multiple\n * views.\n */\nexport interface ISceneOptions extends IdentifyByKeyOptions {\n  /**\n   * This indicates all of the views this scene can be rendered with. For instance: You have a\n   * world scene and you want to render it stereoscopically for VR. Then you can specify two\n   * views with two viewports to render the scene on both halves of the canvas.\n   *\n   * Or perhaps you want an aerial shot as a minimap in the bottom right corner while the rest\n   * of the canvas renders a first person view, then you would make two views for that as well.\n   */\n  views: IViewOptions[];\n}\n\nfunction sortByDepth(a: Layer<any, any>, b: Layer<any, any>) {\n  return a.depth - b.depth;\n}\n\n/**\n * This defines a scene to which layers are added to. It also tracks the views that this scene\n * is rendered with.\n */\nexport class Scene extends IdentifyByKey {\n  static DEFAULT_SCENE_ID = \"__default__\";\n\n  /** This is the three scene which actually sets up the rendering objects */\n  container: Three.Scene | undefined = new Three.Scene();\n  // TODO: This 'could' be smarter when Three is gone. The pipeline could IMMEDIATELY render\n  /** We make a picking container specifically for the cases where objects must be rendered for picking */\n  pickingContainer: Three.Scene = new Three.Scene();\n  /** This is all of the layers tracked to the scene */\n  layers: Layer<any, any>[] = [];\n  /** This indicates the sort is dirty for a set of layers */\n  sortIsDirty = false;\n  /** This is the view */\n  viewById = new Map<string, View>();\n\n  constructor(options: ISceneOptions) {\n    super(options);\n\n    if (this.container) {\n      this.container.frustumCulled = false;\n      this.container.autoUpdate = false;\n    }\n  }\n\n  /**\n   * Adds a layer to the scene with the current view setting the layer contains.\n   * The layer can not jump between views or scenes. You must destroy and reconstruct\n   * the layer.\n   */\n  addLayer<T extends Instance, U extends ILayerProps<T>>(layer: Layer<T, U>) {\n    // Add the layer to the list of layers under the view\n    this.layers.push(layer);\n    this.sortIsDirty = true;\n  }\n\n  /**\n   * This adds a view to this scene to be used by the scene\n   */\n  addView(view: View) {\n    this.viewById.set(view.id, view);\n  }\n\n  /**\n   * Release any resources this may be hanging onto\n   */\n  destroy() {\n    delete this.container;\n  }\n\n  /**\n   * Removes a layer from the scene. No resort is needed as remove operations\n   * do not adjust the sorting order.\n   */\n  removeLayer(layer: Layer<any, any>) {\n    if (this.layers) {\n      const index = this.layers.indexOf(layer);\n\n      if (index >= 0) {\n        this.layers.splice(index, 1);\n        return;\n      }\n    }\n\n    console.warn(\n      \"Could not remove a layer from the scene as the layer was not a part of the scene to start. Scene:\",\n      this.id,\n      \"Layer:\",\n      layer.id\n    );\n  }\n\n  sortLayers() {\n    if (this.sortIsDirty) {\n      this.layers.sort(sortByDepth);\n    }\n  }\n}\n","import { Label } from \"../../primitives/label\";\nimport { BaseAtlasResource } from \"./base-atlas-resource\";\n\nexport class LabelAtlasResource extends BaseAtlasResource {\n  /** This is the label to be loaded into the atlas */\n  label: Label;\n  /** If the label renders */\n  truncatedText: string;\n\n  constructor(label: Label) {\n    super();\n    this.label = label;\n  }\n}\n","import { SubTexture } from \"./sub-texture\";\n\nexport class BaseAtlasResource {\n  /** The rasterization metrics of the label */\n  rasterization: {\n    /**\n     * WARNING: This will ONLY SOMETIMES be populated. The system can choose\n     * when to consume this as it chooses as it can be a major memory eater if\n     * permanently left in place. DO NOT RELY on this being available.\n     */\n    canvas?: HTMLCanvasElement;\n    image?: HTMLImageElement;\n    /** The rasterization dimensions as it is rendered to texture space on an atlas */\n    texture: {\n      height: number;\n      width: number;\n    };\n    /** The rasterization dimensions as it would be rendered in world space */\n    world: {\n      height: number;\n      width: number;\n    };\n  };\n  /**\n   * This sets the ratserization to be a larger value on the texture than is rendered within\n   * the world space. This allows for techniques to be applied in the shaders to incorporate super sampling\n   * or other processes which require higher levels of resolution.\n   *\n   * The default is 1 for a 1 to 1 sample scaling to world space rendering\n   */\n  sampleScale: number = 1;\n  /** Once loaded into the texture, this will be populated */\n  texture: SubTexture;\n}\n","export enum EdgeScaleType {\n  /** All dimensions are within world space */\n  NONE,\n  /**\n   * The control points are a delta from the end points within screen space, and the line thickness is within\n   * screen space as well all measured in pixels. The scaleFactor scales both thickness and control delta values.\n   * The endpoints remain in world space\n   */\n  SCREEN_CURVE\n}\n\nexport enum EdgeType {\n  /** Makes a straight edge with no curve */\n  LINE,\n  /** Makes a single control point Bezier curve */\n  BEZIER,\n  /** Makes a two control point bezier curve */\n  BEZIER2\n}\n\n/**\n * This is the broadphase control for edges to help handle quad tree adjustments for picking. If the edge scale type\n * is NONE, you don't need to utilize this. If you use screen space and have camera distortions along an axis, this\n * can help greatly.\n */\nexport enum EdgeBroadphase {\n  /** Use this if the broad phase detection should use both width and height of the edge's bounds */\n  ALL,\n  /** Use this to ensure a test against the edge is performed if the mouse aligns with it on the x-axis */\n  PASS_Y,\n  /** Use this to ensure a test against the edge is performed if the mouse aligns with it on the y axis */\n  PASS_X\n}\n","import * as Three from \"three\";\nimport { Instance, InstanceDiff } from \"../../../instance-provider\";\nimport { isBufferLocation } from \"../buffer-manager-base\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\nimport { IUniformBufferLocation } from \"../uniform-buffer-manager\";\nimport { BaseDiffProcessor } from \"./base-diff-processor\";\n\n// This is a mapping of the vector properties as they relate to an array order\nconst VECTOR_ACCESSORS: (keyof Three.Vector4)[] = [\"x\", \"y\", \"z\", \"w\"];\nconst EMPTY: number[] = [];\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class UniformDiffProcessor<T extends Instance> extends BaseDiffProcessor<\n  T\n> {\n  /**\n   * This processes add operations from changes in the instancing data\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (uniformCluster) {\n      manager.changeInstance(manager, instance, EMPTY, uniformCluster);\n    } else {\n      // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n      const uniforms = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocation(uniforms)) {\n        instance.active = true;\n        instance.easingId = manager.layer.easingId;\n        manager.updateInstance(manager.layer, instance, uniforms);\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the uniforms\n    if (uniformCluster) {\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n    } else {\n      // If we don't have existing uniforms, then we must remove the instance\n      manager.addInstance(manager, instance, EMPTY, uniformCluster);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation\n  ) {\n    if (uniformCluster) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // Remove the easing information the instance gained from being apart of the layer\n      instance.clearEasing();\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n    }\n  }\n\n  /**\n   * This performs the actual updating of buffers the instance needs to update\n   */\n  updateInstance(\n    layer: IInstanceDiffManagerTarget<T>,\n    instance: T,\n    uniformCluster: IUniformBufferLocation\n  ) {\n    if (instance.active) {\n      const uniforms = uniformCluster.buffer;\n      const uniformRangeStart = uniformCluster.range[0];\n      const instanceData: Three.Vector4[] = uniforms.value;\n      let instanceUniform, value, block, start;\n      let k, endk;\n\n      // Loop through the instance attributes and update the uniform cluster with the valaues\n      // Calculated for the instance\n      for (let i = 0, end = layer.instanceAttributes.length; i < end; ++i) {\n        instanceUniform = layer.instanceAttributes[i];\n        value = instanceUniform.update(instance);\n        block = instanceData[uniformRangeStart + (instanceUniform.block || 0)];\n        instanceUniform.atlas &&\n          layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n        start = instanceUniform.blockIndex;\n\n        if (start === undefined) {\n          continue;\n        }\n\n        // Hyper optimized vector filling routine. It uses properties that are globally scoped\n        // To greatly reduce overhead\n        for (k = start, endk = value.length + start; k < endk; ++k) {\n          block[VECTOR_ACCESSORS[k]] = value[k - start];\n        }\n      }\n\n      uniforms.value = instanceData;\n    } else {\n      const uniforms: Three.IUniform = uniformCluster.buffer;\n      const uniformRangeStart = uniformCluster.range[0];\n      const instanceData: Three.Vector4[] = uniforms.value;\n      let instanceUniform, value, block, start;\n\n      // Only update the _active attribute to ensure it is false. When it is false, there is no\n      // Point to updating any other uniform\n      instanceUniform = layer.activeAttribute;\n      value = instanceUniform.update(instance);\n      block = instanceData[uniformRangeStart + (instanceUniform.block || 0)];\n      instanceUniform.atlas &&\n        layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n      start = instanceUniform.blockIndex;\n\n      if (start !== undefined) {\n        // Hyper optimized vector filling routine. It uses properties that are globally scoped\n        // To greatly reduce overhead\n        for (let k = start, endk = value.length + start; k < endk; ++k) {\n          block[VECTOR_ACCESSORS[k]] = value[k - start];\n        }\n      }\n\n      uniforms.value = instanceData;\n    }\n  }\n\n  /**\n   * Right now there is no operations for committing for the uniform manager.\n   */\n  commit() {\n    /** no-op */\n  }\n\n  /**\n   * There are no optimizations available for this processor yet.\n   */\n  incomingChangeList(_changes: InstanceDiff<T>[]) {\n    /** no-op */\n  }\n}\n","import { Instance } from \"../../../instance-provider/instance\";\nimport { InstanceDiff } from \"../../../instance-provider/instance-provider\";\nimport { IInstanceAttributeInternal } from \"../../../types\";\nimport { Vec } from \"../../../util\";\nimport {\n  IBufferLocation,\n  IBufferLocationGroup,\n  isBufferLocationGroup\n} from \"../buffer-manager-base\";\nimport { IInstanceAttributeBufferLocationGroup } from \"../instance-attribute-buffer-manager\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\nimport { BaseDiffProcessor } from \"./base-diff-processor\";\n\nconst EMPTY: number[] = [];\nconst { min, max } = Math;\n\nenum DiffMode {\n  /** This mode will analyze incoming buffer location changes and only update the range of changed buffer */\n  PARTIAL,\n  /** This mode will not spend time figuring out what has changed for a buffer, rather the whole buffer will get an update */\n  FULL\n}\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class InstanceAttributeDiffProcessor<\n  T extends Instance\n> extends BaseDiffProcessor<T> {\n  /** This is the processor's current diff mode for consuming instance updates. */\n  private diffMode: DiffMode = DiffMode.PARTIAL;\n\n  /** This tracks a buffer attribute's uid to the range of data that it should update */\n  bufferAttributeUpdateRange: {\n    [key: number]: [IInstanceAttributeInternal<T>, number, number];\n  } = {};\n\n  /** This tracks a buffer attribute's uid that will perform a complete update */\n  bufferAttributeWillUpdate: {\n    [key: number]: IInstanceAttributeInternal<T>;\n  } = {};\n\n  /**\n   * The instance updating is a property instead of a method as we will want to be able to gear shift it for varying levels\n   * of adjustments.\n   */\n  updateInstance: (\n    layer: IInstanceDiffManagerTarget<T>,\n    instance: T,\n    propIds: number[],\n    bufferLocations: IBufferLocationGroup<IBufferLocation>\n  ) => void = this.updateInstancePartial;\n\n  /**\n   * This processes add operations from changes in the instancing data\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (bufferLocations) {\n      manager.changeInstance(manager, instance, EMPTY, bufferLocations);\n    } else {\n      // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n      const newBufferLocations = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocationGroup(newBufferLocations)) {\n        instance.active = true;\n        instance.easingId = manager.layer.easingId;\n\n        manager.updateInstance(\n          manager.layer,\n          instance,\n          EMPTY,\n          newBufferLocations\n        );\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the bufferLocations\n    if (bufferLocations) {\n      manager.updateInstance(manager.layer, instance, propIds, bufferLocations);\n    } else {\n      // If we don't have existing bufferLocations, then we must add the instance\n      manager.addInstance(manager, instance, EMPTY, bufferLocations);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    if (bufferLocations) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // Remove the easing information the instance gained from being apart of the layer\n      instance.clearEasing();\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, EMPTY, bufferLocations);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n    }\n  }\n\n  /**\n   * This performs the actual updating of buffers the instance needs to update\n   */\n  updateInstancePartial(\n    layer: IInstanceDiffManagerTarget<T>,\n    instance: T,\n    propIds: number[],\n    bufferLocations: IBufferLocationGroup<IBufferLocation>\n  ) {\n    const propertyToLocation = bufferLocations.propertyToBufferLocation;\n    const bufferAttributeUpdateRange = this.bufferAttributeUpdateRange;\n    let location: IBufferLocation;\n    let updateValue: Vec;\n    let updateRange;\n    let childLocations: IBufferLocation[];\n    let attribute: IInstanceAttributeInternal<T>;\n\n    if (instance.active) {\n      // If no prop ids provided, then we perform a complete instance property update\n      if (propIds.length === 0) {\n        propIds = this.bufferManager.getUpdateAllPropertyIdList();\n      }\n\n      for (let i = 0, end = propIds.length; i < end; ++i) {\n        // First update for the instance attribute itself\n        location = propertyToLocation[propIds[i]];\n        attribute = location.attribute;\n        attribute.atlas && layer.resource.setTargetAtlas(attribute.atlas.key);\n        updateValue = attribute.update(instance);\n        location.buffer.value.set(updateValue, location.range[0]);\n        updateRange = bufferAttributeUpdateRange[attribute.uid] || [\n          null,\n          Number.MAX_SAFE_INTEGER,\n          Number.MIN_SAFE_INTEGER\n        ];\n        updateRange[0] = attribute;\n        updateRange[1] = min(location.range[0], updateRange[1]);\n        updateRange[2] = max(location.range[1], updateRange[2]);\n        bufferAttributeUpdateRange[attribute.uid] = updateRange;\n\n        // Now update any child attributes that would need updating based on the parent attribute changing\n        if (location.childLocations) {\n          childLocations = location.childLocations;\n\n          for (let k = 0, endk = childLocations.length; k < endk; ++k) {\n            location = childLocations[k];\n            updateValue = location.attribute.update(instance);\n            location.buffer.value.set(updateValue, location.range[0]);\n            updateRange = bufferAttributeUpdateRange[\n              location.attribute.uid\n            ] || [null, Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER];\n            updateRange[0] = location.attribute;\n            updateRange[1] = min(location.range[0], updateRange[1]);\n            updateRange[2] = max(location.range[1], updateRange[2]);\n            bufferAttributeUpdateRange[location.attribute.uid] = updateRange;\n          }\n        }\n      }\n    } else {\n      // When the instance is inactive all we update is the active attribute to false\n      location =\n        propertyToLocation[this.bufferManager.getActiveAttributePropertyId()];\n      attribute = location.attribute;\n      updateValue = attribute.update(instance);\n      location.buffer.value.set(updateValue, location.range[0]);\n      updateRange = bufferAttributeUpdateRange[attribute.uid] || [\n        null,\n        Number.MAX_SAFE_INTEGER,\n        Number.MIN_SAFE_INTEGER\n      ];\n      updateRange[0] = attribute;\n      updateRange[1] = min(location.range[0], updateRange[1]);\n      updateRange[2] = max(location.range[1], updateRange[2]);\n      bufferAttributeUpdateRange[attribute.uid] = updateRange;\n    }\n  }\n\n  /**\n   * This performs an update on the buffers with the intent the entire buffer is going to update\n   * rather than a chunk of it.\n   */\n  updateInstanceFull(\n    layer: IInstanceDiffManagerTarget<T>,\n    instance: T,\n    propIds: number[],\n    bufferLocations: IBufferLocationGroup<IBufferLocation>\n  ) {\n    const propertyToLocation = bufferLocations.propertyToBufferLocation;\n    const bufferAttributeWillUpdate = this.bufferAttributeWillUpdate;\n    let location: IBufferLocation;\n    let updateValue: Vec;\n    let childLocations: IBufferLocation[];\n    let attribute: IInstanceAttributeInternal<T>;\n\n    if (instance.active) {\n      // If no prop ids provided, then we perform a complete instance property update\n      if (propIds.length === 0) {\n        propIds = this.bufferManager.getUpdateAllPropertyIdList();\n      }\n\n      for (let i = 0, end = propIds.length; i < end; ++i) {\n        // First update for the instance attribute itself\n        location = propertyToLocation[propIds[i]];\n        attribute = location.attribute;\n        attribute.atlas && layer.resource.setTargetAtlas(attribute.atlas.key);\n        updateValue = attribute.update(instance);\n        location.buffer.value.set(updateValue, location.range[0]);\n        bufferAttributeWillUpdate[attribute.uid] = attribute;\n\n        // Now update any child attributes that would need updating based on the parent attribute changing\n        if (location.childLocations) {\n          childLocations = location.childLocations;\n\n          for (let k = 0, endk = childLocations.length; k < endk; ++k) {\n            location = childLocations[k];\n            attribute = location.attribute;\n            updateValue = attribute.update(instance);\n            location.buffer.value.set(updateValue, location.range[0]);\n            bufferAttributeWillUpdate[attribute.uid] = attribute;\n          }\n        }\n      }\n    } else {\n      // When the instance is inactive all we update is the active attribute to false\n      location =\n        propertyToLocation[this.bufferManager.getActiveAttributePropertyId()];\n      attribute = location.attribute;\n      attribute.atlas && layer.resource.setTargetAtlas(attribute.atlas.key);\n      updateValue = attribute.update(instance);\n      location.buffer.value.set(updateValue, location.range[0]);\n      bufferAttributeWillUpdate[attribute.uid] = attribute;\n    }\n  }\n\n  /**\n   * Finalize all of the buffer changes and apply the correct update ranges\n   */\n  commit() {\n    // If we're in a partial mode: just update the portion of the buffer that needs updating.\n    if (this.diffMode === DiffMode.PARTIAL) {\n      // We now grab all of the attributes and set their update ranges\n      const updates = Object.values(this.bufferAttributeUpdateRange);\n\n      for (let i = 0, end = updates.length; i < end; ++i) {\n        const update = updates[i];\n        const attribute = update[0].bufferAttribute;\n        attribute.needsUpdate = true;\n        attribute.updateRange = {\n          count: update[2] - update[1],\n          offset: update[1]\n        };\n      }\n    } else {\n      // Otherwise just update the full buffer\n      // We now grab all of the attributes and set their update ranges\n      const updates = Object.values(this.bufferAttributeWillUpdate);\n\n      for (let i = 0, end = updates.length; i < end; ++i) {\n        const attribute = updates[i].bufferAttribute;\n        attribute.needsUpdate = true;\n        attribute.updateRange = {\n          count: -1,\n          offset: 0\n        };\n      }\n    }\n\n    // Clear the attribute update metrics\n    this.bufferAttributeUpdateRange = {};\n  }\n\n  /**\n   * This will optimize the update method used. If there are enough instances being updated, we will\n   * cause the entire attribute buffer to update. If there are not enough, then we will update with\n   * additional steps to only update the chunks of the buffer that are affected by the changelist.\n   */\n  incomingChangeList(changes: InstanceDiff<T>[]) {\n    if (changes.length === 0) {\n      this.diffMode = DiffMode.PARTIAL;\n    } else if (changes.length > this.bufferManager.getInstanceCount() * 0.7) {\n      this.diffMode = DiffMode.FULL;\n    } else {\n      this.diffMode = DiffMode.PARTIAL;\n    }\n\n    if (this.diffMode === DiffMode.PARTIAL) {\n      this.updateInstance = this.updateInstancePartial;\n    } else {\n      this.updateInstance = this.updateInstanceFull;\n    }\n  }\n}\n","import * as Three from \"three\";\n\nexport enum ViewCameraType {\n  /**\n   * Indicates a camera that is forced by the system to follow:\n   * - Match width and height of the view port\n   * - +y axis points downward\n   * - gl origin is at the top left of the screen\n   */\n  CONTROLLED,\n  /**\n   * This allows a custom view camera to be applied to the scene.\n   */\n  CUSTOM\n}\n\n/**\n * This is a camera that controls the view projection matrix. This is a much more\n * complicated way to handle views that is better suited for handling 3D applications\n * and is very overkill for most 2D charting systems. If you are working purely with\n * 2D components, it's recommended to leave this as a CONTROLLED camera and utilize\n * the ChartCamera for most of your needs.\n */\nexport class ViewCamera {\n  type: ViewCameraType = ViewCameraType.CONTROLLED;\n  baseCamera: Three.Camera;\n}\n","/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',\n  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',\n  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',\n  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',\n  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',\n  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',\n  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',\n  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',\n  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',\n  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',\n  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // Internet Explorer and Edge do not support colors.\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n    return false;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n","let chartCameraUID = 0;\n\nexport interface IChartCameraOptions {\n  /** The world space offset of elements in the chart */\n  offset?: [number] | [number, number] | [number, number, number];\n  /** The world space scaling present in the chart */\n  scale?: [number] | [number, number] | [number, number, number];\n}\n\n/**\n * Quick method for applying a source array to a target array. This\n * ensures the arrays both are valid and applies the values without just making\n * a copy of the source.\n */\nfunction applyArray(target?: number[], source?: number[]) {\n  target && source && target.splice(0, source.length, ...source);\n}\n\nexport class ChartCamera {\n  /** Internally set id */\n  _id: number = chartCameraUID++;\n  /** Represents how much an element should be offset in world space */\n  offset: [number, number, number] = [0, 0, 0];\n  /** Represents how scaled each axis should be in world space */\n  scale: [number, number, number] = [1, 1, 1];\n\n  constructor(options?: IChartCameraOptions) {\n    if (options) {\n      applyArray(this.offset, options.offset);\n      applyArray(this.scale, options.scale);\n    }\n  }\n\n  /** Keep id as readonly */\n  get id() {\n    return this._id;\n  }\n\n  /**\n   * Sets the location of the camera by adjusting the offsets to match.\n   */\n  position(location: [number, number, number]) {\n    this.offset = location.slice(0) as [number, number, number];\n  }\n}\n","const { sqrt } = Math;\n\n/** Explicit Vec1 */\nexport interface IVec1 extends Array<number> {\n  0: number;\n  length: 1;\n}\n\n/** Explicit Vec2 */\nexport interface IVec2 extends Array<number> {\n  0: number;\n  1: number;\n  length: 2;\n}\n\n/** Explicit Vec3 */\nexport interface IVec3 extends Array<number> {\n  0: number;\n  1: number;\n  2: number;\n  length: 3;\n}\n\n/** Explicit Vec4 */\nexport interface IVec4 extends Array<number> {\n  0: number;\n  1: number;\n  2: number;\n  3: number;\n  length: 4;\n}\n\n/** Vector of 1 components */\nexport type Vec1 = [number];\n/** Vector of 2 components */\nexport type Vec2 = [number, number];\n/** Vector of 3 components */\nexport type Vec3 = [number, number, number];\n/** Vector of 4 components */\nexport type Vec4 = [number, number, number, number];\n\n/** This type defines any possible explicit vector */\nexport type IVec = IVec1 | IVec2 | IVec3 | IVec4;\n/** This type defines any possible vector */\nexport type Vec = Vec1 | Vec2 | Vec3 | Vec4;\n\nexport function add1(left: Vec1, right: Vec1): Vec1 {\n  return [left[0] + right[0]];\n}\n\nexport function copy1(vec: Vec1): Vec1 {\n  return [vec[0]];\n}\n\nexport function scale1(vec: Vec1, scale: number): Vec1 {\n  return [vec[0] * scale];\n}\n\nexport function subtract1(left: Vec1, right: Vec1): Vec1 {\n  return [left[0] - right[0]];\n}\n\nexport function multiply1(left: Vec1, right: Vec1): Vec1 {\n  return [left[0] * right[0]];\n}\n\nexport function dot1(left: Vec1, right: Vec1): number {\n  return left[0] * right[0];\n}\n\nexport function linear1(start: Vec1, end: Vec1, t: number): Vec1 {\n  return scale1(add1(subtract1(end, start), start), t);\n}\n\nexport function length1(start: Vec1): number {\n  return sqrt(dot1(start, start));\n}\n\nexport function add2(left: Vec2, right: Vec2): Vec2 {\n  return [left[0] + right[0], left[1] + right[1]];\n}\n\nexport function copy2(vec: Vec2): Vec2 {\n  return [vec[0], vec[1]];\n}\n\nexport function scale2(left: Vec2, scale: number): Vec2 {\n  return [left[0] * scale, left[1] * scale];\n}\n\nexport function subtract2(left: Vec2, right: Vec2): Vec2 {\n  return [left[0] - right[0], left[1] - right[1]];\n}\n\nexport function multiply2(left: Vec2, right: Vec2): Vec2 {\n  return [left[0] * right[0], left[1] * right[1]];\n}\n\nexport function dot2(left: Vec2, right: Vec2): number {\n  return left[0] * right[0] + left[1] * right[1];\n}\n\nexport function linear2(start: Vec2, end: Vec2, t: number): Vec2 {\n  return scale2(add2(subtract2(end, start), start), t);\n}\n\nexport function length2(start: Vec2): number {\n  return sqrt(dot2(start, start));\n}\n\nexport function add3(left: Vec3, right: Vec3): Vec3 {\n  return [left[0] + right[0], left[1] + right[1], left[2] + right[2]];\n}\n\nexport function copy3(vec: Vec3): Vec3 {\n  return [vec[0], vec[1], vec[2]];\n}\n\nexport function scale3(left: Vec3, scale: number): Vec3 {\n  return [left[0] * scale, left[1] * scale, left[2] * scale];\n}\n\nexport function subtract3(left: Vec3, right: Vec3): Vec3 {\n  return [left[0] - right[0], left[1] - right[1], left[2] - right[2]];\n}\n\nexport function multiply3(left: Vec3, right: Vec3): Vec3 {\n  return [left[0] * right[0], left[1] * right[1], left[2] * right[2]];\n}\n\nexport function linear3(start: Vec3, end: Vec3, t: number): Vec3 {\n  return scale3(add3(subtract3(end, start), start), t);\n}\n\nexport function length3(start: Vec3): number {\n  return sqrt(dot3(start, start));\n}\n\nexport function dot3(left: Vec3, right: Vec3): number {\n  return left[0] * right[0] + left[1] * right[1] + left[2] * right[2];\n}\n\nexport function add4(left: Vec4, right: Vec4): Vec4 {\n  return [\n    left[0] + right[0],\n    left[1] + right[1],\n    left[2] + right[2],\n    left[3] + right[3]\n  ];\n}\n\nexport function copy4(vec: Vec4): Vec4 {\n  return [vec[0], vec[1], vec[2], vec[3]];\n}\n\nexport function scale4(left: Vec4, scale: number): Vec4 {\n  return [left[0] * scale, left[1] * scale, left[2] * scale, left[3] * scale];\n}\n\nexport function subtract4(left: Vec4, right: Vec4): Vec4 {\n  return [\n    left[0] - right[0],\n    left[1] - right[1],\n    left[2] - right[2],\n    left[3] - right[3]\n  ];\n}\n\nexport function multiply4(left: Vec4, right: Vec4): Vec4 {\n  return [\n    left[0] * right[0],\n    left[1] * right[1],\n    left[2] * right[2],\n    left[3] * right[3]\n  ];\n}\n\nexport function dot4(left: Vec4, right: Vec4): number {\n  return (\n    left[0] * right[0] +\n    left[1] * right[1] +\n    left[2] * right[2] +\n    left[3] * right[3]\n  );\n}\n\nexport function linear4(start: Vec4, end: Vec4, t: number): Vec4 {\n  return scale4(add4(subtract4(end, start), start), t);\n}\n\nexport function length4(start: Vec4): number {\n  return sqrt(dot4(start, start));\n}\n\nexport type VecMethods<T extends Vec> = {\n  add(left: T, right: T): T;\n  copy(vec: T): T;\n  scale(vec: T, scale: number): T;\n  subtract(left: T, right: T): T;\n  multiply(left: T, right: T): T;\n  dot(left: T, right: T): number;\n  linear(start: T, end: T, t: number): T;\n  length(vec: T): number;\n};\n\nexport const vec1Methods: VecMethods<Vec1> = {\n  add: add1,\n  copy: copy1,\n  dot: dot1,\n  length: length1,\n  linear: linear1,\n  multiply: multiply1,\n  scale: scale1,\n  subtract: subtract1\n};\n\nexport const vec2Methods: VecMethods<Vec2> = {\n  add: add2,\n  copy: copy2,\n  dot: dot2,\n  length: length2,\n  linear: linear2,\n  multiply: multiply2,\n  scale: scale2,\n  subtract: subtract2\n};\n\nexport const vec3Methods: VecMethods<Vec3> = {\n  add: add3,\n  copy: copy3,\n  dot: dot3,\n  length: length3,\n  linear: linear3,\n  multiply: multiply3,\n  scale: scale3,\n  subtract: subtract3\n};\n\nexport const vec4Methods: VecMethods<Vec4> = {\n  add: add4,\n  copy: copy4,\n  dot: dot4,\n  length: length4,\n  linear: linear4,\n  multiply: multiply4,\n  scale: scale4,\n  subtract: subtract4\n};\n\nexport function VecMath<T extends IVec>(vec: T): VecMethods<T> {\n  let methods: VecMethods<T>;\n\n  if (vec.length === 1) {\n    methods = vec1Methods as VecMethods<T>;\n    return methods;\n  } else if (vec.length === 2) {\n    methods = vec2Methods as VecMethods<T>;\n    return methods;\n  } else if (vec.length === 3) {\n    methods = vec3Methods as VecMethods<T>;\n    return methods;\n  }\n\n  methods = vec4Methods as VecMethods<T>;\n\n  return methods;\n}\n","let UID = 0;\n\n/**\n * Provides a 64 bit UID.\n *\n * Note: all uids generated with uid() are unique amongst uid() calls and NOT unique amongst\n * other types of uid calls.\n */\nexport function uid() {\n  return ++UID;\n}\n\nlet CUID = 0;\n\n/**\n * Provides a 24 bit UID (keeps the UID within non-alpha color ranges)\n *\n * Note: all uids generated with colorUID() are unique amongst colorUID() calls and NOT unique amongst\n * other types of uid calls.\n */\nexport function colorUID() {\n  return ++CUID % 0xffffff;\n}\n","import { Bounds } from \"../primitives\";\nimport { IProjection } from \"../types\";\nimport {\n  IDragMetrics,\n  IMouseInteraction,\n  IWheelMetrics,\n  MouseEventManager\n} from \"./mouse-event-manager\";\nimport { View } from \"./view\";\n\n/**\n * Classes can extend this and override the methods to respond to events.\n */\nexport abstract class EventManager {\n  private mouseManager: MouseEventManager;\n\n  abstract handleMouseDown(e: IMouseInteraction, button: number): void;\n  abstract handleMouseUp(e: IMouseInteraction, button: number): void;\n  abstract handleMouseOver(e: IMouseInteraction): void;\n  abstract handleMouseOut(e: IMouseInteraction): void;\n  abstract handleMouseMove(e: IMouseInteraction): void;\n  abstract handleClick(e: IMouseInteraction, button: number): void;\n  abstract handleDrag(e: IMouseInteraction, drag: IDragMetrics): void;\n  abstract handleWheel(e: IMouseInteraction, wheel: IWheelMetrics): void;\n\n  /**\n   * This retrieves the projections for the view specified by the provided viewId.\n   */\n  getProjection(viewId: string): IProjection | null {\n    return this.mouseManager.getView(viewId);\n  }\n\n  /**\n   * This retrieves the actual view for the view specified by the provided viewId.\n   */\n  getView(viewId: string): View | null {\n    return (this.mouseManager && this.mouseManager.getView(viewId)) || null;\n  }\n\n  /**\n   * This retrieves the screen bounds for the view specified by the provided viewId.\n   */\n  getViewScreenBounds(viewId: string): Bounds | null {\n    const view = this.mouseManager.getView(viewId);\n\n    if (view) {\n      return view.screenBounds;\n    }\n\n    return null;\n  }\n\n  /**\n   * This is used internally which provides the parent MouseEventManager via the param mouseManager for this\n   * EventManager.\n   */\n  setMouseManager(mouseManager: MouseEventManager) {\n    this.mouseManager = mouseManager;\n  }\n}\n","import { IPoint } from \"../primitives/point\";\nimport { DataBounds } from \"../util/data-bounds\";\nimport { eventElementPosition, normalizeWheel } from \"../util/mouse\";\nimport { QuadTree } from \"../util/quad-tree\";\nimport { EventManager } from \"./event-manager\";\nimport { Scene } from \"./scene\";\nimport { View } from \"./view\";\n\n// If a mouse up after a mouse down happens before this many milliseconds, a click gesture will happen\nconst VALID_CLICK_DELAY = 1e3;\n\n/**\n * Theorectically we can have a view be applied to multiple scenes. So to properly qualify a view\n * it must be paired with the scene it is rendering for.\n */\nexport type SceneView = {\n  /** This specifies the order the view is rendered in so we can pick the top most item when needed */\n  depth: number;\n  /** This is the scene the view is rendering for */\n  scene: Scene;\n  /** This is the view itself that our mouse will interact with */\n  view: View;\n  /** Gets the bounds of this view for this particular scene */\n  bounds?: DataBounds<SceneView>;\n};\n\n/**\n * This represents an interaction with the Layer Surface. It provides mouse metrics with how the mouse\n * interacts with the views below it.\n */\nexport interface IMouseInteraction {\n  /** When present indicates any relevant button codes used during a click event */\n  button?: number;\n  /** Metrics of the interaction in screen space */\n  screen: {\n    mouse: IPoint;\n  };\n  /** The View the mouse was 'down' on */\n  start?: {\n    mouse: IPoint;\n    view: View;\n  };\n  /** The View Immediately underneath the mouse */\n  target: {\n    mouse: IPoint;\n    view: View;\n  };\n  /** This is populated with ALL of the views underneath the mouse */\n  viewsUnderMouse: {\n    /** The mouse's location in the views coordinate space */\n    mouse: IPoint;\n    /** The view that is interacted with */\n    view: View;\n  }[];\n}\n\nexport interface IDragMetrics {\n  /** Drag metrics in screen space */\n  screen: {\n    /** The start position of the drag where the mouse down first occurred */\n    start: IPoint;\n    /** The previous position of the mouse last frame */\n    previous: IPoint;\n    /** The current position the mouse is located for this frame */\n    current: IPoint;\n    /** The change in position from last frame to this frame */\n    delta: IPoint;\n  };\n}\n\nexport interface IWheelMetrics {\n  wheel: [number, number];\n}\n\n/**\n * This is metrics measured between two touches\n */\nexport interface ITouchRelation {\n  /** The direction to the other touch */\n  direction: IPoint;\n  /** The current distance to the other touch */\n  distance: number;\n  /** The id of the other touch */\n  id: number;\n}\n\n/**\n * This is the information of a touch for a given frame.\n */\nexport interface ITouchFrame {\n  /** This is the location or delta location of the touch for this frame */\n  location: IPoint;\n  /** This is the direction from the start touch frame */\n  direction: IPoint;\n  /** This is the metrics or delta metrics of the touch relative to the other touches for the frame */\n  relations: Map<number, ITouchRelation>;\n}\n\nexport interface ITouchMetrics {\n  /** The starting metrics of the touch */\n  start: ITouchFrame;\n  /** The delta changes from previous event to the current event */\n  delta: ITouchFrame;\n  /** The current metrics of the touch event */\n  current: ITouchFrame;\n}\n\nfunction sortByDepth(a: DataBounds<SceneView>, b: DataBounds<SceneView>) {\n  return b.data.depth - a.data.depth;\n}\n\nfunction isDefined<T>(val: T | null | undefined): val is T {\n  return Boolean(val);\n}\n\n/**\n * This manages mouse events on the provided canvas and provides some higher level\n * interactions with the surface.\n */\nexport class MouseEventManager {\n  /** This is the canvas context we are rendering to */\n  context: HTMLCanvasElement;\n  /** This is list of Event Managers that receive the events and gestures which perform the nexessary actions */\n  controllers: EventManager[];\n  /** This is the quad tree for finding intersections with the mouse */\n  quadTree: QuadTree<DataBounds<SceneView>>;\n  /** This is the current list of views being managed */\n  views: SceneView[];\n\n  eventCleanup: [string, EventListenerOrEventListenerObject][] = [];\n\n  /**\n   * This flag is set when the system is waiting to render the elements to establish bounds.\n   * No Mouse interations will happen while this is set to true.\n   */\n  private _waitingForRender: boolean = true;\n\n  get waitingForRender() {\n    return this._waitingForRender;\n  }\n\n  set waitingForRender(val: boolean) {\n    this._waitingForRender = val;\n\n    // When we're no longer waiting for render to occur we update all of our views in the quad tree\n    if (!val) {\n      this.quadTree = new QuadTree(0, 0, 0, 0);\n      this.quadTree.addAll(this.views.map(v => v.bounds).filter(isDefined));\n    }\n  }\n\n  constructor(\n    canvas: HTMLCanvasElement,\n    views: SceneView[],\n    controllers: EventManager[],\n    handlesWheelEvents?: boolean\n  ) {\n    this.context = canvas;\n    this.setViews(views);\n    this.setControllers(controllers);\n    this.addContextListeners(handlesWheelEvents);\n  }\n\n  /**\n   * This sets up the DOM events to listen to the events that are broadcasted by the canvas.\n   * These events are set up in such a way as to continue some events when the user\n   * drags the mouse off of the browser or off the canvas without releasing.\n   */\n  addContextListeners(handlesWheelEvents?: boolean) {\n    const element = this.context;\n    let startView: SceneView | undefined;\n    let startPosition: IPoint = { x: 0, y: 0 };\n\n    if (handlesWheelEvents) {\n      const wheelHandler = (event: MouseWheelEvent) => {\n        const mouse = eventElementPosition(event, element);\n        const interaction = this.makeInteraction(\n          mouse,\n          startPosition,\n          startView\n        );\n        const wheel = this.makeWheel(event);\n\n        this.controllers.forEach(controller => {\n          controller.handleWheel(interaction, wheel);\n        });\n\n        event.stopPropagation();\n        event.preventDefault();\n      };\n\n      if (\"onwheel\" in element) {\n        element.onwheel = wheelHandler;\n      }\n\n      if (\"addEventListener\" in element) {\n        element.addEventListener(\"DOMMouseScroll\", wheelHandler);\n        this.eventCleanup.push([\"DOMMouseScroll\", wheelHandler]);\n      }\n    }\n\n    element.onmouseleave = event => {\n      // No interactions while waiting for the render to update\n      if (this.waitingForRender) return;\n\n      const mouse = eventElementPosition(event, element);\n      const interaction = this.makeInteraction(mouse, startPosition, startView);\n\n      this.controllers.forEach(controller => {\n        controller.handleMouseOut(interaction);\n      });\n    };\n\n    element.onmousemove = event => {\n      // No interactions while waiting for the render to update\n      if (this.waitingForRender) return;\n\n      const mouse = eventElementPosition(event, element);\n      const interaction = this.makeInteraction(mouse, startPosition, startView);\n\n      this.controllers.forEach(controller => {\n        controller.handleMouseMove(interaction);\n      });\n    };\n\n    element.onmousedown = (event: MouseEvent) => {\n      // No interactions while waiting for the render to update\n      if (this.waitingForRender) return;\n\n      startPosition = eventElementPosition(event, element);\n      const downViews = this.getViewsUnderMouse(startPosition);\n      // While this is true, when mouse up happens, the click gesture will execute\n      let canClick = true;\n      const clickStartTime = Date.now();\n\n      // If no views under this view, then we just quick exit with no interactions\n      if (downViews.length <= 0) {\n        return;\n      }\n\n      startView = downViews[0].data;\n      if (!startView) return;\n\n      const interaction = this.makeInteraction(\n        startPosition,\n        startPosition,\n        startView\n      );\n      let currentPosition = startPosition;\n\n      this.controllers.forEach(controller => {\n        controller.handleMouseDown(interaction, event.button);\n      });\n\n      event.stopPropagation();\n\n      document.onmousemove = (event: MouseEvent) => {\n        const mouse = eventElementPosition(event, element);\n        const interaction = this.makeInteraction(\n          mouse,\n          startPosition,\n          startView\n        );\n        const delta = {\n          x: mouse.x - currentPosition.x,\n          y: mouse.y - currentPosition.y\n        };\n\n        const drag = this.makeDrag(\n          mouse,\n          startPosition || { x: 0, y: 0 },\n          currentPosition,\n          delta\n        );\n        currentPosition = mouse;\n\n        this.controllers.forEach(controller => {\n          controller.handleDrag(interaction, drag);\n        });\n\n        // If we move after a mouse down, it's no longer a click\n        canClick = false;\n      };\n\n      document.onmouseup = (_event: MouseEvent) => {\n        document.onmousemove = null;\n        document.onmouseup = null;\n        document.onmouseover = null;\n      };\n\n      document.onmouseover = (event: MouseEvent) => {\n        const mouse = eventElementPosition(event, element);\n        const interaction = this.makeInteraction(\n          mouse,\n          startPosition,\n          startView\n        );\n\n        this.controllers.forEach(controller => {\n          controller.handleMouseOver(interaction);\n        });\n\n        event.stopPropagation();\n      };\n\n      element.onmouseup = (event: MouseEvent) => {\n        const mouse = eventElementPosition(event, element);\n        const interaction = this.makeInteraction(\n          mouse,\n          startPosition,\n          startView\n        );\n\n        this.controllers.forEach(controller => {\n          controller.handleMouseUp(interaction, event.button);\n        });\n\n        // If we release the mouse before the valid click delay\n        if (canClick && Date.now() - clickStartTime < VALID_CLICK_DELAY) {\n          this.controllers.forEach(controller => {\n            controller.handleClick(interaction, event.button);\n          });\n        }\n      };\n\n      // Text will not be selected when it is being dragged\n      element.onselectstart = function() {\n        return false;\n      };\n    };\n\n    // Enable touch support\n    this.addTouchContextListeners();\n  }\n\n  addTouchContextListeners() {\n    const element = this.context;\n\n    element.ontouchstart = _event => {\n      // TODO: This is the start work for the touch events. And this retains sentimental value.\n      // For (let i = 0, end = event.changedTouches.length; i < end; ++i) {\n      // TODO\n      // Const touch = event.changedTouches.item(i);\n      // CurrentTouches.set(touch.identifier, to);\n      // }\n    };\n\n    element.ontouchend = _event => {\n      // TODO\n    };\n\n    element.ontouchmove = _event => {\n      // TODO\n    };\n\n    element.ontouchcancel = _event => {\n      // TODO\n    };\n  }\n\n  /**\n   * Retrieves the view for the provided id\n   */\n  getView(viewId: string): View | null {\n    for (const view of this.views) {\n      if (view.view.id === viewId) {\n        return view.view;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Retrieves the views underneath the mouse with the top most view as\n   * the first view in the list.\n   */\n  getViewsUnderMouse = (mouse: IPoint) => {\n    // Find the views the mouse has interacted with\n    const hitViews = this.quadTree.query(mouse);\n    // Sort them by depth\n    hitViews.sort(sortByDepth);\n\n    return hitViews;\n  };\n\n  /**\n   * This generates the metrics for a drag gesture.\n   */\n  makeDrag(\n    mouse: IPoint,\n    start: IPoint,\n    previous: IPoint,\n    delta: IPoint\n  ): IDragMetrics {\n    return {\n      screen: {\n        current: mouse,\n        delta,\n        previous,\n        start\n      }\n    };\n  }\n\n  /**\n   * This makes the metrics for interactions with the views.\n   */\n  makeInteraction(\n    mouse: IPoint,\n    start?: IPoint,\n    startView?: SceneView\n  ): IMouseInteraction {\n    // Find the views the mouse has interacted with\n    const hitViews = this.getViewsUnderMouse(mouse);\n\n    return {\n      screen: {\n        mouse\n      },\n      start: start &&\n        startView && {\n          mouse: startView.view.screenToView(mouse),\n          view: startView.view\n        },\n      target: {\n        mouse: hitViews[0] && hitViews[0].data.view.screenToView(mouse),\n        view: hitViews[0] && hitViews[0].data.view\n      },\n      viewsUnderMouse: hitViews.map(v => ({\n        mouse: v.data.view.screenToView(mouse),\n        view: v.data.view\n      }))\n    };\n  }\n\n  makeWheel(event: MouseWheelEvent): IWheelMetrics {\n    const wheel = normalizeWheel(event);\n\n    return {\n      wheel: [wheel.x, wheel.y]\n    };\n  }\n\n  /**\n   * When the renderer is resized, we must reform our quad tree\n   */\n  resize = () => {\n    this._waitingForRender = true;\n  };\n\n  /**\n   * Sets the controllers to receive events from this manager.\n   */\n  setControllers(controllers: EventManager[]) {\n    this.controllers = controllers;\n\n    for (const controller of this.controllers) {\n      controller.setMouseManager(this);\n    }\n  }\n\n  /**\n   * Sets the views that gets queried for interactions.\n   */\n  setViews(views: SceneView[]) {\n    this.views = views;\n  }\n\n  destroy() {\n    delete this.quadTree;\n    this.context.onmousedown = null;\n    this.context.onmousemove = null;\n    this.context.onmouseleave = null;\n    this.context.onmousewheel = null;\n\n    this.eventCleanup.forEach(event => {\n      this.context.removeEventListener(event[0], event[1]);\n    });\n  }\n}\n","/**\n * This file is dedicted to the all important step of processing desired inputs from the layer\n * and coming up with automated generated uniforms and attributes that the shader's will need\n * in order to operate with the conveniences the library offers. This includes things such as\n * injecting camera projection uniforms, resource uniforms, animation adjustments etc etc.\n */\nimport * as Three from \"three\";\nimport { Instance } from \"../../instance-provider/instance\";\nimport {\n  IAtlasInstanceAttribute,\n  IInstanceAttribute,\n  InstanceAttributeSize,\n  InstanceBlockIndex,\n  IShaderInitialization,\n  IUniform,\n  IUniformInternal,\n  IValueInstanceAttribute,\n  IVertexAttribute,\n  IVertexAttributeInternal,\n  PickType,\n  ShaderInjectionTarget,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport { Vec } from \"../../util\";\nimport { ILayerProps, Layer } from \"../layer\";\nimport { generateEasingAttributes } from \"./expand-easing-attributes\";\nimport { getLayerBufferType, LayerBufferType } from \"./layer-buffer-type\";\nimport { packAttributes } from \"./pack-attributes\";\n\n/**\n * This is a lookup for a test vector for the provided size\n */\nconst testStartVector: { [key: number]: Vec } = {\n  [InstanceAttributeSize.ONE]: [1],\n  [InstanceAttributeSize.TWO]: [1, 2],\n  [InstanceAttributeSize.THREE]: [1, 2, 3],\n  [InstanceAttributeSize.FOUR]: [1, 2, 3, 4]\n};\n\n/**\n * This is a lookup for a test vector for the provided size\n */\nconst testEndVector: { [key: number]: Vec } = {\n  [InstanceAttributeSize.ONE]: [4],\n  [InstanceAttributeSize.TWO]: [4, 3],\n  [InstanceAttributeSize.THREE]: [4, 3, 2],\n  [InstanceAttributeSize.FOUR]: [4, 3, 2, 1]\n};\n\nconst emptyTexture = new Three.Texture();\n\nfunction isAtlasAttribute<T extends Instance>(\n  attr: any\n): attr is IAtlasInstanceAttribute<T> {\n  return Boolean(attr) && attr.atlas;\n}\n\nfunction isInstanceAttribute<T extends Instance>(\n  attr: any\n): attr is IInstanceAttribute<T> {\n  return Boolean(attr);\n}\n\nfunction isVertexAttribute(attr: any): attr is IVertexAttribute {\n  return Boolean(attr);\n}\n\nfunction isUniform(attr: any): attr is IUniform {\n  return Boolean(attr);\n}\n\nfunction toVertexAttributeInternal(\n  attribute: IVertexAttribute\n): IVertexAttributeInternal {\n  return Object.assign({}, attribute, { materialAttribute: null });\n}\n\nfunction toUniformInternal(uniform: IUniform): IUniformInternal {\n  return Object.assign({}, uniform, { materialUniforms: [] });\n}\n\n/**\n * This sorts the attributes such that the attributes that MUST be updated first are put to the top.\n * This is necessary for complex attributes like atlas and easing attributes who have other attributes\n * that have dependent behaviors based on their source attribute.\n */\nfunction sortNeedsUpdateFirstToTop<T extends Instance>(\n  a: IInstanceAttribute<T>,\n  b: IInstanceAttribute<T>\n) {\n  if (a.atlas && !b.atlas) return -1;\n  if (a.easing && !b.easing) return -1;\n  return 1;\n}\n\n/**\n * This generates any uniforms needed for when a layer is requesting\n */\nfunction generateAtlasResourceUniforms<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(layer: Layer<T, U>, instanceAttributes: IInstanceAttribute<T>[]) {\n  // Retrieve all of the instance attributes that are atlas references\n  const atlasInstanceAttributes: IAtlasInstanceAttribute<T>[] = [];\n  // Key: The atlas uniform name requested\n  const requestedAtlasInjections = new Map<string, [boolean, boolean]>();\n\n  // Get the atlas requests that have unique names. We only need one uniform\n  // For a single unique provided name. We also must merge the requests for\n  // Vertex and fragment injections\n  instanceAttributes.forEach(\n    (attribute: IValueInstanceAttribute<T> | IAtlasInstanceAttribute<T>) => {\n      if (isAtlasAttribute(attribute)) {\n        // Auto set the size of the attribute. Attribute's that are a resource automatically\n        // Consume a size of four\n        attribute.size = InstanceAttributeSize.FOUR;\n        attribute.blockIndex = InstanceBlockIndex.ONE;\n        // Get the atlas resource uniform (sampler2D) injection targets. We default to only the\n        // Fragment shader as it's the most commonly used location for sampler2Ds\n        const injection: number =\n          attribute.atlas.shaderInjection || ShaderInjectionTarget.FRAGMENT;\n        // See if we already have an injection for the given injected uniform name for an atlas resource.\n        const injections = requestedAtlasInjections.get(attribute.atlas.name);\n\n        if (injections) {\n          requestedAtlasInjections.set(attribute.atlas.name, [\n            injections[0] ||\n              injection === ShaderInjectionTarget.VERTEX ||\n              injection === ShaderInjectionTarget.ALL,\n            injections[1] ||\n              injection === ShaderInjectionTarget.FRAGMENT ||\n              injection === ShaderInjectionTarget.ALL\n          ]);\n        } else {\n          atlasInstanceAttributes.push(attribute);\n          requestedAtlasInjections.set(attribute.atlas.name, [\n            injection === ShaderInjectionTarget.VERTEX ||\n              injection === ShaderInjectionTarget.ALL,\n            injection === ShaderInjectionTarget.FRAGMENT ||\n              injection === ShaderInjectionTarget.ALL\n          ]);\n        }\n      }\n    }\n  );\n\n  // Make uniforms for all of the unique atlas requests.\n  return atlasInstanceAttributes.map(instanceAttribute => {\n    let injection: ShaderInjectionTarget = ShaderInjectionTarget.FRAGMENT;\n\n    if (instanceAttribute.atlas) {\n      const injections = requestedAtlasInjections.get(\n        instanceAttribute.atlas.name\n      );\n\n      if (injections) {\n        injection =\n          (injections[0] && injections[1] && ShaderInjectionTarget.ALL) ||\n          (injections[0] && !injections[1] && ShaderInjectionTarget.VERTEX) ||\n          (!injections[0] && injections[1] && ShaderInjectionTarget.FRAGMENT) ||\n          injection;\n      }\n    }\n\n    return {\n      name: instanceAttribute.atlas.name,\n      shaderInjection: injection,\n      size: UniformSize.ATLAS,\n      update: () =>\n        layer.resource.getAtlasTexture(instanceAttribute.atlas.key) ||\n        emptyTexture\n    };\n  });\n}\n\nfunction generatePickingUniforms<T extends Instance, U extends ILayerProps<T>>(\n  layer: Layer<T, U>\n): IUniform[] {\n  if (layer.picking.type === PickType.SINGLE) {\n    return [\n      {\n        name: \"pickingActive\",\n        shaderInjection: ShaderInjectionTarget.ALL,\n        size: UniformSize.ONE,\n        update: () => [\n          layer.picking.currentPickMode === PickType.SINGLE ? 1.0 : 0.0\n        ]\n      }\n    ];\n  }\n\n  return [];\n}\n\nfunction generatePickingAttributes<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(layer: Layer<T, U>): IInstanceAttribute<T>[] {\n  if (layer.picking.type === PickType.SINGLE) {\n    return [\n      {\n        name: \"_pickingColor\",\n        size: InstanceAttributeSize.FOUR,\n        update: o => {\n          // We start from white and move down so the colors are more visible\n          // For debugging\n          const color = 0xffffff - o.uid;\n\n          // Do bit maths do get float components out of the int color\n          return [\n            (color >> 16) / 255.0,\n            ((color & 0x00ff00) >> 8) / 255.0,\n            (color & 0x0000ff) / 255.0,\n            1\n          ];\n        }\n      }\n    ];\n  }\n\n  return [];\n}\n\nfunction generateBaseUniforms<T extends Instance, U extends ILayerProps<T>>(\n  layer: Layer<T, U>\n): IUniform[] {\n  return [\n    // This injects the projection matrix from the view camera\n    {\n      name: \"projection\",\n      size: UniformSize.MATRIX4,\n      update: () => layer.view.viewCamera.baseCamera.projectionMatrix.elements\n    },\n    // This injects the model view matrix from the view camera\n    {\n      name: \"modelView\",\n      size: UniformSize.MATRIX4,\n      update: () => layer.view.viewCamera.baseCamera.matrix.elements\n    },\n    // This injects the camera offset uniforms that need to be present for projecting in a more\n    // Chart centric style\n    {\n      name: \"cameraOffset\",\n      size: UniformSize.THREE,\n      update: () => layer.view.camera.offset\n    },\n    // This injects the camera scaling uniforms that need to be present for projecting in a more\n    // Chart centric style\n    {\n      name: \"cameraScale\",\n      size: UniformSize.THREE,\n      update: () => layer.view.camera.scale\n    },\n    // This injects the camera scaling uniforms that need to be present for projecting in a more\n    // Chart centric style\n    {\n      name: \"viewSize\",\n      size: UniformSize.TWO,\n      update: () => [layer.view.viewBounds.width, layer.view.viewBounds.height]\n    },\n    // This injects the current layer's pixel ratio so pixel ratio dependent items can react to it\n    // Things like gl_PointSize will need this metric if not working in clip space\n    {\n      name: \"pixelRatio\",\n      size: UniformSize.ONE,\n      update: () => [layer.view.pixelRatio]\n    },\n    // This will be the current frame's current time which is updated in the layer's surface draw call\n    {\n      name: \"currentTime\",\n      size: UniformSize.ONE,\n      update: () => [layer.surface.frameMetrics.currentTime]\n    }\n  ];\n}\n\n/**\n * This creates the base instance attributes that are ALWAYS present\n */\nfunction generateBaseInstanceAttributes<T extends Instance>(\n  layer: Layer<T, any>\n): IInstanceAttribute<T>[] {\n  // This is injected so the system can control when an instance should not be rendered.\n  // This allows for holes to be in the buffer without having to correct them immediately\n  const activeAttribute: IInstanceAttribute<T> = {\n    name: \"_active\",\n    size: InstanceAttributeSize.ONE,\n    update: o => [o.active ? 1 : 0]\n  };\n\n  // Set the active attribute to the layer for quick reference\n  layer.activeAttribute = activeAttribute;\n\n  return [activeAttribute];\n}\n\n/**\n * This creates the base vertex attributes that are ALWAYS present\n */\nfunction generateBaseVertexAttributes<T extends Instance>(\n  layer: Layer<T, any>\n): IVertexAttribute[] {\n  // Only the uniform buffering strategy requires instance information in it's vertex attributes\n  if (layer.bufferType === LayerBufferType.UNIFORM) {\n    return [\n      // We add an inherent instance attribute to our vertices so they can determine the instancing\n      // Data to retrieve.\n      {\n        name: \"instance\",\n        size: VertexAttributeSize.ONE,\n        // We no op this as our geomtry generating routine will establish the values needed here\n        update: () => [0]\n      }\n    ];\n  }\n\n  return [];\n}\n\nfunction compareVec(a: Vec, b: Vec) {\n  if (a.length !== b.length) return false;\n\n  for (let i = 0, end = a.length; i < end; ++i) {\n    if (Math.round(a[i] * 100) / 100 !== Math.round(b[i] * 100) / 100) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction validateInstanceAttributes<T extends Instance>(\n  layer: Layer<T, any>,\n  instanceAttributes: IInstanceAttribute<T>[],\n  vertexAttributes: IVertexAttribute[]\n) {\n  instanceAttributes.forEach(attribute => {\n    if (attribute.name === undefined) {\n      console.warn(\n        \"All instance attributes MUST have a name on Layer:\",\n        layer.id\n      );\n    }\n\n    if (\n      instanceAttributes.find(\n        attr => attr !== attribute && attr.name === attribute.name\n      )\n    ) {\n      console.warn(\n        \"An instance attribute can not have the same name used more than once:\",\n        attribute.name\n      );\n    }\n\n    if (vertexAttributes.find(attr => attr.name === attribute.name)) {\n      console.warn(\n        \"An instance attribute and a vertex attribute in a layer can not share the same name:\",\n        attribute.name\n      );\n    }\n\n    if (attribute.easing && attribute.atlas) {\n      console.warn(\n        \"An instance attribute can not have both easing and atlas properties. Undefined behavior will occur.\"\n      );\n      console.warn(attribute);\n    }\n\n    if (!attribute.atlas) {\n      if (attribute.size === undefined) {\n        console.warn(\"An instance attribute requires the size to be defined.\");\n        console.warn(attribute);\n      }\n    }\n\n    if (attribute.easing) {\n      if (attribute.size !== undefined) {\n        const testStart = testStartVector[attribute.size];\n        const testEnd = testEndVector[attribute.size];\n        const validationRules = attribute.easing.validation || {};\n\n        let test = attribute.easing.cpu(testStart, testEnd, 0);\n        if (!compareVec(test, testStart)) {\n          console.warn(\n            \"Auto Easing Validation Failed: using a time of 0 does not produce the start value\"\n          );\n          console.warn(\"Start:\", testStart, \"End:\", testEnd, \"Result:\", test);\n          console.warn(attribute);\n        }\n\n        test = attribute.easing.cpu(testStart, testEnd, 1);\n        if (\n          !validationRules.ignoreEndValueCheck &&\n          !compareVec(test, testEnd)\n        ) {\n          console.warn(\n            \"Auto Easing Validation Failed: using a time of 1 does not produce the end value\"\n          );\n          console.warn(\"Start:\", testStart, \"End:\", testEnd, \"Result:\", test);\n          console.warn(attribute);\n        }\n\n        test = attribute.easing.cpu(testStart, testEnd, -1);\n        if (!compareVec(test, testStart)) {\n          console.warn(\n            \"Auto Easing Validation Failed: using a time of -1 does not produce the start value\"\n          );\n          console.warn(\"Start:\", testStart, \"End:\", testEnd, \"Result:\", test);\n          console.warn(attribute);\n        }\n\n        test = attribute.easing.cpu(testStart, testEnd, 2);\n        if (\n          !validationRules.ignoreOverTimeCheck &&\n          !compareVec(test, testEnd)\n        ) {\n          console.warn(\n            \"Auto Easing Validation Failed: using a time of 2 does not produce the end value\"\n          );\n          console.warn(\"Start:\", testStart, \"End:\", testEnd, \"Result:\", test);\n          console.warn(attribute);\n        }\n      } else {\n        console.warn(\n          \"An Instance Attribute with easing MUST have a size declared\"\n        );\n      }\n    }\n  });\n}\n\n/**\n * This is the primary method that analyzes all shader IO and determines which elements needs to be automatically injected\n * into the shader.\n */\nexport function injectShaderIO<T extends Instance, U extends ILayerProps<T>>(\n  gl: WebGLRenderingContext,\n  layer: Layer<T, U>,\n  shaderIO: IShaderInitialization<T>\n) {\n  // All of the instance attributes with nulls filtered out\n  const instanceAttributes = (shaderIO.instanceAttributes || []).filter(\n    isInstanceAttribute\n  );\n  // All of the vertex attributes with nulls filtered out\n  const vertexAttributes = (shaderIO.vertexAttributes || []).filter(\n    isVertexAttribute\n  );\n  // All of the uniforms with nulls filtered out\n  const uniforms = (shaderIO.uniforms || []).filter(isUniform);\n  // Do a validation pass of the attributes injected so we can provide feedback as to why things behave odd\n  validateInstanceAttributes(layer, instanceAttributes, vertexAttributes);\n  // Generates all of the attributes needed to make attributes automagically be eased when changed\n  generateEasingAttributes(layer, instanceAttributes);\n  // Get the uniforms needed to facilitate atlas resource requests if any exists\n  let addedUniforms: IUniform[] = uniforms.concat(\n    generateAtlasResourceUniforms(layer, instanceAttributes)\n  );\n  // These are the uniforms that should be present in the shader for basic operation\n  addedUniforms = addedUniforms.concat(generateBaseUniforms(layer));\n  // Add in uniforms for picking\n  addedUniforms = addedUniforms.concat(generatePickingUniforms(layer));\n  // Create the base instance attributes that must be present\n  let addedInstanceAttributes = instanceAttributes.concat(\n    generateBaseInstanceAttributes(layer)\n  );\n  // Add in attributes for picking\n  addedInstanceAttributes = addedInstanceAttributes.concat(\n    generatePickingAttributes(layer)\n  );\n\n  const allUniforms = addedUniforms.map(toUniformInternal);\n\n  const allInstanceAttributes = addedInstanceAttributes.sort(\n    sortNeedsUpdateFirstToTop\n  );\n\n  // Let's pack in our attributes automagically so we can determine block and block indices.\n  packAttributes(allInstanceAttributes);\n  // Before we make the vertex attributes, we must determine the buffering strategy our layer will utilize\n  getLayerBufferType(gl, layer, vertexAttributes, allInstanceAttributes);\n\n  // Create the base vertex attributes that must be present\n  const addedVertexAttributes: IVertexAttribute[] = generateBaseVertexAttributes(\n    layer\n  );\n\n  // Aggregate all of the injected shaderIO with the layer's shaderIO\n  const allVertexAttributes: IVertexAttributeInternal[] = addedVertexAttributes\n    .concat(vertexAttributes || [])\n    .map(toVertexAttributeInternal);\n\n  return {\n    instanceAttributes: allInstanceAttributes,\n    uniforms: allUniforms,\n    vertexAttributes: allVertexAttributes\n  };\n}\n","import * as Three from \"three\";\nimport { IInstancingUniform, IUniform, UniformSize } from \"../../types\";\nimport { Instance } from \"../../util\";\nimport { ILayerProps, Layer } from \"../layer\";\n\nconst UNIFORM_SIZE_TO_MATERIAL_TYPE: { [key: number]: string } = {\n  [UniformSize.ONE]: \"f\",\n  [UniformSize.TWO]: \"v2\",\n  [UniformSize.THREE]: \"v3\",\n  [UniformSize.FOUR]: \"v4\",\n  [UniformSize.MATRIX3]: \"Matrix3fv\",\n  [UniformSize.MATRIX4]: \"Matrix4fv\"\n};\n\nconst DEFAULT_UNIFORM_VALUE: { [key: number]: number[] } = {\n  [UniformSize.ONE]: [0],\n  [UniformSize.TWO]: [0, 0],\n  [UniformSize.THREE]: [0, 0, 0],\n  [UniformSize.FOUR]: [0, 0, 0, 0],\n  [UniformSize.MATRIX3]: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [UniformSize.MATRIX4]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n};\n\nfunction toMaterialUniform(uniform: IUniform) {\n  return {\n    type: UNIFORM_SIZE_TO_MATERIAL_TYPE[uniform.size],\n    value: DEFAULT_UNIFORM_VALUE[uniform.size]\n  };\n}\n\nexport function generateLayerMaterial<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(\n  layer: Layer<T, U>,\n  vs: string,\n  fs: string,\n  layerUniforms: IUniform[],\n  instancingUniforms: IInstancingUniform[]\n): Three.RawShaderMaterial {\n  // We now need to establish the material for the layer\n  const materialParams: Three.ShaderMaterialParameters = layer.getMaterialOptions();\n  materialParams.vertexShader = vs;\n  materialParams.fragmentShader = fs;\n\n  // We must convert all of the uniforms to actual Three material initialization uniforms\n  materialParams.uniforms = {};\n\n  // Convert our non-instancing uniforms to our material uniforms\n  for (let i = 0, end = layerUniforms.length; i < end; ++i) {\n    const uniform = layerUniforms[i];\n    const materialUniform = toMaterialUniform(uniform);\n    materialParams.uniforms[uniform.name] = materialUniform;\n  }\n\n  // Add in the generated instancing uniforms\n  for (let i = 0, end = instancingUniforms.length; i < end; ++i) {\n    const generatedUniform = instancingUniforms[i];\n    materialParams.uniforms[generatedUniform.name] = {\n      type: generatedUniform.type,\n      value: generatedUniform.value\n    };\n  }\n\n  return new Three.RawShaderMaterial(materialParams);\n}\n","import * as Three from \"three\";\nimport { Instance } from \"../../instance-provider/instance\";\nimport {\n  IVertexAttribute,\n  IVertexAttributeInternal,\n  ShaderIOValue\n} from \"../../types\";\nimport { Layer } from \"../layer\";\nimport { LayerBufferType } from \"./layer-buffer-type\";\n\nfunction isNumberCluster(\n  val: ShaderIOValue\n): val is\n  | [number]\n  | [number, number]\n  | [number, number, number]\n  | [number, number, number, number] {\n  return !Array.isArray(val[0]);\n}\n\nexport function generateLayerGeometry<T extends Instance>(\n  layer: Layer<T, any>,\n  maxInstancesPerBuffer: number,\n  vertexAttributes: IVertexAttributeInternal[],\n  vertexCount: number\n): Three.BufferGeometry {\n  // Make the new buffers to be updated\n  const vertexBuffers = [];\n\n  if (layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE) {\n    maxInstancesPerBuffer = 1;\n  }\n\n  for (let i = 0, end = vertexAttributes.length; i < end; ++i) {\n    const attribute = vertexAttributes[i];\n    vertexBuffers.push(\n      new Float32Array(attribute.size * vertexCount * maxInstancesPerBuffer)\n    );\n  }\n\n  // Let's now fill in the baseline geometry with the instances we will be generating\n  // First we ask the layer for a single instance's buffer setup\n  const endk = vertexAttributes.length;\n  let buffer: Float32Array;\n  let attribute: IVertexAttribute;\n  let value: ShaderIOValue;\n  let formatError: boolean = false;\n\n  for (let i = 0, end = vertexCount; i < end; ++i) {\n    for (let k = 0; k < endk; ++k) {\n      attribute = vertexAttributes[k];\n      buffer = vertexBuffers[k];\n      value = attribute.update(i);\n\n      if (isNumberCluster(value)) {\n        for (\n          let j = i * attribute.size, endj = j + attribute.size, index = 0;\n          j < endj;\n          ++j, ++index\n        ) {\n          buffer[j] = value[index];\n        }\n      } else {\n        formatError = true;\n      }\n    }\n  }\n\n  if (formatError) {\n    console.warn(\n      \"A vertex buffer updating method should not use arrays of arrays of numbers.\"\n    );\n  }\n\n  // After getting the geometry for a single instance, we can now copy paste\n  // For subsequent instances using very fast FLoat32 methods\n  // NOTE: This is ONLY for certain buffering strategies. This is essentially a noop when the\n  // maxInstances is set to one.\n  for (let i = 0, end = vertexAttributes.length; i < end; ++i) {\n    const attribute = vertexAttributes[i];\n    const instanceSize = attribute.size * vertexCount;\n\n    // Copy the first buffer set into the rest of the buffer\n    for (let k = 1, endk = maxInstancesPerBuffer; k < endk; ++k) {\n      vertexBuffers[i].copyWithin(instanceSize * k, 0, instanceSize);\n    }\n  }\n\n  // Lastly, we make the instance attribute reflect correctly so each instance\n  // Can have varied information. This is only appropriate for the uniform buffer strategy\n  if (layer.bufferType === LayerBufferType.UNIFORM) {\n    const instancingBuffer = vertexBuffers[0];\n\n    for (let i = 0, end = maxInstancesPerBuffer; i < end; ++i) {\n      const instanceStartIndex = i * vertexCount;\n\n      for (let k = 0; k < vertexCount; ++k) {\n        instancingBuffer[k + instanceStartIndex] = i;\n      }\n    }\n  }\n\n  // Now we can generate the attributes and apply them to a geometry object\n  const geometry = new Three.BufferGeometry();\n\n  for (let i = 0, end = vertexAttributes.length; i < end; ++i) {\n    const attribute = vertexAttributes[i];\n    const materialAttribute = new Three.BufferAttribute(\n      vertexBuffers[i],\n      attribute.size\n    );\n    attribute.materialAttribute = materialAttribute;\n    geometry.addAttribute(attribute.name, materialAttribute);\n  }\n\n  return geometry;\n}\n","import * as Three from \"three\";\nimport { AbsolutePosition } from \"../../primitives/absolute-position\";\nimport { ChartCamera } from \"../../util/chart-camera\";\nimport { ViewCamera } from \"../../util/view-camera\";\nimport { Scene } from \"../scene\";\nimport { View } from \"../view\";\n\nexport interface IDefaultSceneElements {\n  /** Default chartting camera */\n  camera: ChartCamera;\n  /** Default scene for elements to be added into */\n  scene: Scene;\n  /** Default view scenes are rendered with when no other views are specified by the layer or the surface */\n  view: View;\n  /**\n   * The default view projection. Defaults to being an orthographic rendering with the origin at the\n   * top left of the canvas and the y-axis as +y going downward.\n   */\n  viewCamera: ViewCamera;\n  /** The default viewport that encompasses the entire canvas */\n  viewport: AbsolutePosition;\n}\n\n/**\n * This generates all of the cameras/views/scenes necessary for default viewing of elements.\n *\n * These defaults are required to ensure the following:\n *\n * - Orthographic view\n * - top left corner of the canvas is 0,0\n * - y axis is +y downward\n * - entire canvas is the viewport.\n */\nexport function generateDefaultScene(\n  context: WebGLRenderingContext\n): IDefaultSceneElements {\n  // Generate a default view camera that is\n  // - Orthographic\n  // - (0, 0) is the top left of the canvas\n  // - the y axis is +y going downward\n  const height = context.canvas.height;\n  const width = context.canvas.width;\n  const aspectRatio = width / height;\n\n  const viewport = {\n    aspectRatio: aspectRatio,\n    bottom: -height / 2,\n    far: 10000000,\n    left: -width / 2,\n    near: -100,\n    right: width / 2,\n    top: height / 2,\n    viewSize: height\n  };\n\n  const defaultCamera: ViewCamera = new ViewCamera();\n  defaultCamera.baseCamera = new Three.OrthographicCamera(\n    viewport.left,\n    viewport.right,\n    viewport.top,\n    viewport.bottom,\n    viewport.near,\n    viewport.far\n  );\n\n  defaultCamera.baseCamera.scale.set(1.0, -1.0, 1.0);\n  defaultCamera.baseCamera.position.set(0.0, 0.0, -300.0);\n  defaultCamera.baseCamera.updateMatrixWorld(true);\n  defaultCamera.baseCamera.updateMatrix();\n\n  if (defaultCamera.baseCamera instanceof Three.OrthographicCamera) {\n    defaultCamera.baseCamera.updateProjectionMatrix();\n  }\n\n  // Generate a charting camera with all scales set to 1 and no offsets in any direction\n  const defaultChartCamera: ChartCamera = new ChartCamera();\n\n  // This is a viewport that covers the entire context\n  const defaultViewport = {\n    bottom: 0,\n    left: 0,\n    right: 0,\n    top: 0\n  };\n\n  // Make a view using our defaults\n  const defaultView = new View({\n    camera: defaultChartCamera,\n    key: View.DEFAULT_VIEW_ID,\n    viewCamera: defaultCamera,\n    viewport: defaultViewport\n  });\n\n  // Make a scene with our defaults\n  const defaultScene = new Scene({\n    key: Scene.DEFAULT_SCENE_ID,\n    views: []\n  });\n\n  // Make sure the default view is a part of the default scene\n  defaultScene.addView(defaultView);\n\n  return {\n    camera: defaultChartCamera,\n    scene: defaultScene,\n    view: defaultView,\n    viewCamera: defaultCamera,\n    viewport: defaultViewport\n  };\n}\n","import { Bounds } from \"../primitives/bounds\";\n\nexport class DataBounds<T> extends Bounds {\n  data: T;\n\n  static emptyBounds<T>() {\n    return new DataBounds<T>({\n      height: 0,\n      width: 0,\n      x: 0,\n      y: 0\n    });\n  }\n}\n","export * from \"./label-layer\";\nexport * from \"./label-instance\";\n","import { Label } from \"../../primitives/label\";\nimport { LabelAtlasResource } from \"./label-atlas-resource\";\n\nlet canvas: CanvasRenderingContext2D;\nconst MAX_FONT_SIZE = 50;\nconst { floor, max, min } = Math;\n\nexport interface ILabelRasterizedMetrics {\n  canvas: HTMLCanvasElement;\n  height: number;\n  width: number;\n}\n\nexport class LabelRasterizer {\n  /**\n   * This loops until our canvas context is available\n   */\n  static async awaitContext() {\n    // Iterate till the browser provides a valid canvas to render elements into\n    while (!canvas) {\n      this.getContext();\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n  }\n\n  /**\n   * This renders our label to a sizeable canvas where we loop over the pixel data to determine\n   * the bounds of the label.\n   *\n   * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n   *                                 the size to be rendered to the texture to the size the label\n   *                                 should be within world space.\n   * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n   */\n  static calculateLabelSize(\n    resource: LabelAtlasResource,\n    sampleScale?: number,\n    calculateTexture?: boolean\n  ) {\n    // If a max width is specified, then we must render and determine the potentially truncated text of the\n    // Label. We can do a binary search for the correct truncated label size.\n    if (calculateTexture) {\n      this.calculateTrucatedText(resource);\n    }\n\n    /** Get the label properties for rasterizing */\n    const label = resource.label;\n    // Get the scaling of the sample base\n    const sampleScaling = sampleScale || resource.sampleScale || 1.0;\n    // Draw our label to a canvas\n    this.drawLabel(label, resource.truncatedText, canvas, sampleScaling);\n    // Measure the contents of the canvas\n    const { minX, minY, maxX, maxY } = this.measureContents(canvas);\n\n    // Make sure the rasterization object is initialized\n    resource.rasterization = resource.rasterization || {\n      texture: { height: 0, width: 0 },\n      world: { height: 0, width: 0 }\n    };\n\n    // When a forced sampling is present, it calculates that as the world space\n    if (!calculateTexture) {\n      // Update the calculated texture size.\n      resource.rasterization.world = {\n        height: maxY - minY,\n        width: maxX - minX\n      };\n    } else {\n      // Otherwise we first calculate the texture rasterization for the label\n      // Update the calculated texture size.\n      resource.rasterization.texture = {\n        height: maxY - minY,\n        width: maxX - minX\n      };\n\n      resource.rasterization.canvas = this.createCroppedCanvas(\n        resource,\n        minY,\n        minX\n      );\n      this.calculateLabelSize(resource, 1.0, false);\n    }\n  }\n\n  /**\n   * This determines what the truncated text of the label will be. If there is no truncation\n   * then the truncated text === the label's text\n   */\n  static calculateTrucatedText(resource: LabelAtlasResource) {\n    const label = resource.label;\n    const maxWidth = label.maxWidth;\n\n    // If the label has no max width, then there will be no truncation\n    if (!maxWidth) {\n      resource.truncatedText = label.text;\n      return;\n    }\n\n    // We now do an initial rendering of the label as it will appear in world space\n    this.drawLabel(label, label.text, canvas, 1);\n    // We measure the contents of the rendered item to see if it violates the maxWidth\n    const firstTest = this.measureContents(canvas);\n\n    // If we're within spec, we do not need to truncate\n    if (firstTest.maxX - firstTest.minX <= maxWidth) {\n      resource.truncatedText = label.text;\n      return;\n    }\n\n    // At this point we need to binary search through chopping off letters to find a string\n    // That will fit within max width\n    const text = label.text;\n    let left = 0;\n    let right = text.length;\n    let cursor = floor((right - left) / 2.0);\n    let safety = 0;\n    const safetyMax = 50;\n\n    // Loop to perform the binary search\n    while (right > left && cursor !== 0 && safety++ < safetyMax) {\n      // Draw and measure\n      this.drawLabel(label, `${text.substr(0, cursor)}...`, canvas, 1);\n      const { minX, maxX } = this.measureContents(canvas);\n\n      // If we pass then we move left to cursor to make the test string longer\n      if (maxX - minX <= maxWidth) {\n        left = cursor;\n      } else {\n        // If we fail, we move right to cursor to make the test string shorter\n        right = cursor;\n      }\n\n      // Get our next cursor position\n      const nextCursor = floor((right - left) / 2.0) + left;\n\n      // If the next cursor is the same as cursor, then we're done searching\n      if (nextCursor === cursor) {\n        break;\n      }\n\n      // Move our cursor\n      cursor = nextCursor;\n    }\n\n    // If cursor is zero, nothing passed and our truncation is just ellipses\n    if (cursor === 0) {\n      resource.truncatedText = \"...\";\n    } else {\n      // Otherwise we get the string that passes and use that as our truncated text\n      resource.truncatedText = `${text.substr(0, cursor)}...`;\n    }\n  }\n\n  /**\n   * This generates a canvas that has the cropped version of the label where the label\n   * fits neatly in the canvas object.\n   */\n  static createCroppedCanvas(\n    resource: LabelAtlasResource,\n    top: number,\n    left: number\n  ) {\n    const cropped = document.createElement(\"canvas\");\n    const context = cropped.getContext(\"2d\");\n\n    if (context) {\n      const texture = resource.rasterization.texture;\n      cropped.width = texture.width;\n      cropped.height = texture.height;\n      context.imageSmoothingEnabled = false;\n\n      // Draw just the region the label appears into the canvas\n      context.drawImage(\n        canvas.canvas,\n        left,\n        top,\n        texture.width,\n        texture.height,\n        0,\n        0,\n        texture.width,\n        texture.height\n      );\n    } else {\n      console.warn(\n        \"Could not create a canvas 2d context to generate a label's cropped image.\"\n      );\n    }\n\n    return cropped;\n  }\n\n  /**\n   * This actually renders a string to a canvas context using a label's settings\n   */\n  static drawLabel(\n    label: Label,\n    text: string,\n    canvas: CanvasRenderingContext2D,\n    sampleScaling: number\n  ) {\n    // Get the font size we will rasterize with\n    const fontSize = this.getLabelRasterizationFontSize(label, sampleScaling);\n    // Set the color of the label to white so we know what color to look for\n    canvas.fillStyle = \"white\";\n    // Set the font to the canvas\n    canvas.font = this.makeCSSFont(label, sampleScaling);\n    // We will use the canvas measuring tool to give us a baseline for how wide\n    // The label will be. We add the font size to the width for the padding needed to ensure\n    // The entirety of the text is placed on the canvas.\n    canvas.canvas.width = canvas.measureText(label.text).width + fontSize;\n    // Make our test area the font size with one extra level of the font size\n    // For padding.\n    canvas.canvas.height = fontSize * 2.0;\n    // After adjusting the canvas dimensions we must re-set the font metrics\n    // Set the color of the label to white so we know what color to look for\n    canvas.fillStyle = \"white\";\n    // Set the font to the canvas\n    canvas.font = this.makeCSSFont(label, sampleScaling);\n    // Render the text into our canvas for calculating\n    canvas.fillText(text, fontSize / 2.0, fontSize / 4.0 + fontSize);\n  }\n\n  /**\n   * Attempts to populate the 'canvas' context for rendering labels offscreen.\n   */\n  static getContext() {\n    if (!canvas) {\n      const potentialCanvas = document.createElement(\"canvas\").getContext(\"2d\");\n\n      if (potentialCanvas) {\n        canvas = potentialCanvas;\n      }\n\n      return potentialCanvas;\n    }\n\n    return canvas;\n  }\n\n  /**\n   * This retrieves the font size that will be used when rasterizing the label. This takes into\n   * account whether the label is requesting super sampling be present for the rendering.\n   */\n  static getLabelRasterizationFontSize(label: Label, sampleScale: number) {\n    return label.fontSize * sampleScale;\n  }\n\n  /**\n   * Generates the CSS font string based on the label's values\n   */\n  static makeCSSFont(label: Label, sampleScale: number) {\n    return `${label.fontWeight} ${this.getLabelRasterizationFontSize(\n      label,\n      sampleScale\n    )}px ${label.fontFamily}`;\n  }\n\n  /**\n   * This measures the contents of what is inside the canvas assumming the rendered values are only white\n   */\n  static measureContents(canvas: CanvasRenderingContext2D) {\n    const { width, height } = canvas.canvas;\n    const imageData = canvas.getImageData(0, 0, width, height).data;\n    let r;\n\n    let minY = Number.MAX_SAFE_INTEGER;\n    let minX = Number.MAX_SAFE_INTEGER;\n    let maxX = Number.MIN_SAFE_INTEGER;\n    let maxY = Number.MIN_SAFE_INTEGER;\n\n    for (let i = 0; i < width; ++i) {\n      for (let k = 0; k < height; ++k) {\n        const redIndex = k * (width * 4) + i * 4;\n        r = imageData[redIndex];\n\n        if (r > 0.0) {\n          minY = min(minY, k);\n          minX = min(minX, i);\n          maxX = max(maxX, i);\n          maxY = max(maxY, k);\n        }\n      }\n    }\n\n    // The identified pixel needs to be encased and not a direct target\n    minY -= 1;\n    maxY += 2;\n    maxX += 2;\n    minX -= 1;\n\n    minY = max(minY, 0);\n    minX = max(minX, 0);\n\n    return { minX, minY, maxX, maxY };\n  }\n\n  /**\n   * Performs the rendering of the label\n   */\n  static async render(\n    resource: LabelAtlasResource\n  ): Promise<LabelAtlasResource> {\n    // Make sure our canvas object is ready for rendering\n    await this.awaitContext();\n\n    // Validate the label's input\n    if (resource.label.fontSize > MAX_FONT_SIZE) {\n      console.warn(\"Labels only support font sizes up to 50\");\n      return resource;\n    }\n\n    // Calculate all of the label metrics and generate a canvas on the label that can\n    // Be rendered to the canvas.\n    this.calculateLabelSize(resource, resource.sampleScale, true);\n\n    return resource;\n  }\n\n  /**\n   * Performs the rendering of the label\n   */\n  static renderSync(resource: LabelAtlasResource): LabelAtlasResource {\n    // Ensure our offscreen canvas is prepped\n    this.getContext();\n\n    if (!canvas) {\n      console.warn(\n        \"Can not render a label synchronously without the canvas context being ready.\"\n      );\n      return resource;\n    }\n\n    // Validate the label's input\n    if (resource.label.fontSize > MAX_FONT_SIZE) {\n      console.warn(\"Labels only support font sizes up to 50\");\n      return resource;\n    }\n\n    // Calculate all of the label metrics and generate a canvas on the label that can\n    // Be rendered to the canvas.\n    this.calculateLabelSize(resource, resource.sampleScale, true);\n\n    return resource;\n  }\n}\n","import { Image } from \"../../primitives/image\";\nimport { BaseAtlasResource } from \"./base-atlas-resource\";\n\nexport class ImageAtlasResource extends BaseAtlasResource {\n  /** This is the image to be loaded into the atlas */\n  image: Image;\n\n  constructor(image: Image) {\n    super();\n    this.image = image;\n  }\n}\n","import { Color } from \"../../primitives/color\";\nimport { ColorAtlasResource } from \"./color-atlas-resource\";\n\n// When ratserized to the image, this determines the size of the square rendered to the atlas.\nconst COLOR_RASTERIZATION_SIZE = 2;\n\n/**\n * Static class for rasterizing a color to a canvas object\n */\nexport class ColorRasterizer {\n  /**\n   * This loops until our canvas context is available\n   */\n  static async awaitContext(canvas: HTMLCanvasElement) {\n    // Iterate till the browser provides a valid canvas to render elements into\n    for (\n      let c = canvas.getContext(\"2d\"), limit = 0;\n      !Boolean(c) && limit < 100;\n      c = canvas.getContext(\"2d\"), ++limit\n    ) {\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n  }\n\n  /**\n   * Generates the CSS string version of the color\n   */\n  static makeCSS(color: Color) {\n    return `rgba(${Math.floor(color.r * 256)}, ${Math.floor(\n      color.g * 256\n    )}, ${Math.floor(color.b * 256)}, ${color.opacity})`;\n  }\n\n  static async render(resource: ColorAtlasResource) {\n    const canvas = document.createElement(\"canvas\");\n    const context = canvas.getContext(\"2d\");\n\n    await this.awaitContext(canvas);\n\n    if (context) {\n      canvas.width = COLOR_RASTERIZATION_SIZE;\n      canvas.height = COLOR_RASTERIZATION_SIZE;\n      context.imageSmoothingEnabled = false;\n      context.fillStyle = this.makeCSS(resource.color);\n\n      // Draw the color to the fill space\n      context.fillRect(\n        0,\n        0,\n        COLOR_RASTERIZATION_SIZE,\n        COLOR_RASTERIZATION_SIZE\n      );\n      // Update the resource with the rasterization\n      resource.rasterization.canvas = canvas;\n    } else {\n      console.warn(\n        \"Could not create a canvas 2d context to generate a color for rasterization.\"\n      );\n    }\n\n    return resource;\n  }\n}\n","import { Color } from \"../../primitives/color\";\nimport { BaseAtlasResource } from \"./base-atlas-resource\";\n\nexport class ColorAtlasResource extends BaseAtlasResource {\n  /** This is the color to be loaded into the atlas */\n  color: Color;\n\n  constructor(color: Color) {\n    super();\n    this.color = color;\n  }\n}\n","import * as Three from \"three\";\nimport { IPoint } from \"../../primitives/point\";\n\n/**\n * Defines a texture that is located on an atlas\n */\nexport class SubTexture {\n  /** Stores the aspect ratio of the image for quick reference */\n  aspectRatio: number = 1.0;\n  /** The id of the atlas this texture is located on */\n  atlasReferenceID: string = \"\";\n  /** This is the actual texture of the atlas this resource is located on */\n  atlasTexture: Three.Texture | null = null;\n  /** This is the top left UV coordinate of the sub texture on the atlas */\n  atlasTL: IPoint = { x: 0, y: 0 };\n  /** This is the top right UV coordinate of the sub texture on the atlas */\n  atlasTR: IPoint = { x: 0, y: 0 };\n  /** This is the bottom left UV coordinate of the sub texture on the atlas */\n  atlasBL: IPoint = { x: 0, y: 0 };\n  /** This is the bottom right UV coordinate of the sub texture on the atlas */\n  atlasBR: IPoint = { x: 0, y: 0 };\n  /** This is the normalized width of the sub texture on the atlas */\n  widthOnAtlas: number = 0;\n  /** This is the normalized height of the sub texture on the atlas */\n  heightOnAtlas: number = 0;\n  /** This flag is set to false when the underlying texture is no longer valid */\n  isValid: boolean = false;\n  /** Width in pixels of the image on the atlas */\n  pixelWidth: number = 0;\n  /** Height in pixels of the image on the atlas */\n  pixelHeight: number = 0;\n}\n","import * as Three from \"three\";\nimport {\n  IdentifyByKey,\n  IdentifyByKeyOptions\n} from \"../../util/identify-by-key\";\nimport { AtlasManager, AtlasResource } from \"./atlas-manager\";\nimport { PackNode } from \"./pack-node\";\nimport { SubTexture } from \"./sub-texture\";\n\n/**\n * These are valid atlas sizes available. We force a power of 2 to be utilized.\n * We do not allow crazy large sizes as browsers have very real caps on resources.\n * This helps implementations be a little smarter about what they are using. Future\n * versions may increase this number as GPUs improve and standards allow greater\n * flexibility.\n */\nexport enum AtlasSize {\n  _2 = 0x01 << 1,\n  _4 = 0x01 << 2,\n  _8 = 0x01 << 3,\n  _16 = 0x01 << 4,\n  _32 = 0x01 << 5,\n  _64 = 0x01 << 6,\n  _128 = 0x01 << 7,\n  _256 = 0x01 << 8,\n  _512 = 0x01 << 9,\n  _1024 = 0x01 << 10,\n  _2048 = 0x01 << 11,\n  _4096 = 0x01 << 12\n}\n\nexport interface IAtlasOptions extends IdentifyByKeyOptions {\n  /** This is the height of the texture */\n  height: AtlasSize;\n  /** This is the width of the atlas */\n  width: AtlasSize;\n  /**\n   * This applies any desired settings to the Threejs texture as desired.\n   * Some noteable defaults this system sets:\n   *  - generateMipMaps is false and\n   *  - premultiply alpha is true.\n   */\n  textureSettings?: Partial<Three.Texture>;\n}\n\n/**\n * This represents a single Texture on the gpu that is composed of several smaller textures\n * as a 'look up'.\n */\nexport class Atlas extends IdentifyByKey {\n  /** Stores the size of the atlas texture */\n  height: AtlasSize;\n  /** This is the parent manager of the atlas */\n  manager: AtlasManager;\n  /** This is the packing of the  */\n  packing: PackNode;\n  /** This is the actual texture object that represents the atlas on the GPU */\n  texture: Three.Texture;\n  /** These are the applied settings to our texture */\n  textureSettings?: Partial<Three.Texture>;\n  /**\n   * This is all of the resources associated with this atlas. The boolean flag indicates if the resource\n   * is flagged for removal. When set to false, the resource is no longer valid and can be removed from\n   * the atlas at any given moment.\n   */\n  validResources = new Map<AtlasResource, boolean>();\n  /** Stores the size of the atlas texture */\n  width: AtlasSize;\n\n  constructor(options: IAtlasOptions) {\n    super(options);\n    const canvas = document.createElement(\"canvas\");\n    this.width = canvas.width = options.width;\n    this.height = canvas.height = options.height;\n    this.textureSettings = options.textureSettings;\n\n    // Set up the packing for this atlas\n    this.packing = new PackNode(0, 0, options.width, options.height);\n    // Make sure the texture is started and updated\n    this.updateTexture(canvas);\n  }\n\n  /**\n   * This invalidates the SubTexture of an atlas resource.\n   */\n  private invalidateResource(resource: AtlasResource) {\n    const zero = { x: 0, y: 0 };\n    resource.texture.aspectRatio = 1;\n    resource.texture.atlasBL = zero;\n    resource.texture.atlasBR = zero;\n    resource.texture.atlasTL = zero;\n    resource.texture.atlasTR = zero;\n    resource.texture.atlasReferenceID = \"\";\n    resource.texture.pixelWidth = 0;\n    resource.texture.pixelHeight = 0;\n    resource.texture.isValid = false;\n  }\n\n  /**\n   * Sets the parent manager of this atlas\n   */\n  setManager(manager: AtlasManager) {\n    this.manager = manager;\n  }\n\n  /**\n   * Adds a resource to this atlas AND ensures the resource is flagged valid for use.\n   *\n   * @return {boolean} True if the resource successfully registered\n   */\n  registerResource(resource: AtlasResource) {\n    if (this.validResources.get(resource) === undefined) {\n      if (!resource.texture || !resource.texture.isValid) {\n        if (!resource.texture) {\n          resource.texture = new SubTexture();\n        }\n\n        resource.texture.isValid = true;\n        this.validResources.set(resource, true);\n\n        return true;\n      } else {\n        console.warn(\n          \"Atlas Error:\",\n          this.id,\n          \"Attempted to add a resource to an Atlas that is already a valid resource on another atlas.\",\n          \"Consider Creating a new resource to be loaded into this particular atlas.\",\n          \"Resource:\",\n          resource\n        );\n      }\n    } else {\n      console.warn(\n        \"Atlas Error:\",\n        this.id,\n        \"A resource was trying to be added to the atlas that has already been added before.\",\n        \"Consider creating a new resource to indicate what you want loaded to the atlas\",\n        \"Resource:\",\n        resource\n      );\n    }\n\n    return false;\n  }\n\n  /**\n   * This flags a resource from removal from an atlas.\n   *\n   * NOTE: This does not immediately clear the resource fromt he atlas, nor does it even guarantee\n   * the resource will be cleared from the atlas for a while. It merely suggests the resource be removed\n   * and makes the SubTexture invalid. It could be a long while before the atlas gets regnerated and repacked\n   * to actually reflect the resource not existing on the atlas.\n   */\n  removeResource(resource: AtlasResource) {\n    if (this.validResources.get(resource)) {\n      this.validResources.set(resource, false);\n      this.invalidateResource(resource);\n    } else {\n      console.warn(\n        \"Atlas Error:\",\n        this.id,\n        \"Attempted to remove a resource that does not exist on this atlas.\",\n        \"or the resource was already considered invalidated on this atlas.\",\n        \"Resource:\",\n        resource\n      );\n    }\n  }\n\n  /**\n   * TODO:\n   * This performs the currently best known way to update a texture.\n   *\n   * This is the current best attempt at updating the atlas which is junk as it destroys the old texture\n   * And makes a new one. We REALLY should be just subTexture2D updating the texture, but Three makes that really\n   * Difficult\n   */\n  updateTexture(canvas?: HTMLCanvasElement) {\n    if (this.texture) {\n      const redoneCanvas: HTMLCanvasElement = this.texture.image;\n      this.texture.dispose();\n      this.texture = new Three.Texture(redoneCanvas);\n    } else {\n      this.texture = new Three.Texture(canvas);\n    }\n\n    // Apply any relevant options to the texture desired to be set\n    this.texture.generateMipmaps = true;\n    this.texture.premultiplyAlpha = true;\n    this.textureSettings && Object.assign(this.texture, this.textureSettings);\n    this.texture.needsUpdate = true;\n  }\n\n  /**\n   * This frees up all the resources down to the GPU related to this atlas. It also\n   * loops through every resource and invalidates the texturing information within\n   * them so subsequent accidental renders will appear as a single color rather than\n   * an artifacted element.\n   */\n  destroy() {\n    this.texture.dispose();\n    this.validResources.forEach((_isValid, resource) => {\n      this.invalidateResource(resource);\n    });\n  }\n}\n","export * from \"./image-layer\";\nexport * from \"./image-instance\";\n","import { Instance, InstanceDiff } from \"../../../instance-provider\";\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  IBufferLocationGroup\n} from \"../buffer-manager-base\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\n\n/**\n * Base requirements for handling diffs from a layer.\n */\nexport abstract class BaseDiffProcessor<T extends Instance> {\n  layer: IInstanceDiffManagerTarget<T>;\n  bufferManager: BufferManagerBase<T, IBufferLocation>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>\n  ) {\n    this.layer = layer;\n    this.bufferManager = bufferManager;\n  }\n\n  /** Perform an 'add' operation for the instance's buffer */\n  abstract addInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocation?: IBufferLocation | IBufferLocationGroup<IBufferLocation>\n  ): void;\n  /** Perform a 'change' operation for the instance's buffer */\n  abstract changeInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocation?: IBufferLocation | IBufferLocationGroup<IBufferLocation>\n  ): void;\n  /** Perform a 'remove' operation for the instance's buffer */\n  abstract removeInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocation?: IBufferLocation | IBufferLocationGroup<IBufferLocation>\n  ): void;\n\n  /**\n   * This indicates all changes have been applied, this allows the processor to finalize buffer updates\n   */\n  abstract commit(): void;\n  /**\n   * This will be called with the changes that WILL be processed. This allows this processor to make extra judgement calls on\n   * how it will process the changes and let's it optimize itself before changes are actually processed. An example optimization:\n   *\n   * Buffers have an update range we can adjust so only a piece of the buffer is updated. However, calculating that range causes\n   * overhead to calculate the affected range. So, if we have mass changes happening for major sections of the buffer (number of\n   * changes approaches some large percentage of the instances supported by the buffer), then it would be more efficient just to\n   * update the entire buffer rather than discover the portion needing updating.\n   */\n  abstract incomingChangeList(changes: InstanceDiff<T>[]): void;\n}\n","const INSTANCE_UNIFORM_ATTRIBUTE_PREFIX = \"u\";\n\nexport function makeInstanceUniformNameArray() {\n  return `instanceData`;\n}\n\nexport function makeInstanceUniformNameTree(index: number) {\n  return `${INSTANCE_UNIFORM_ATTRIBUTE_PREFIX}${index.toString(31)}`;\n}\n","import { IInstanceAttribute } from \"../../types\";\nimport { Instance } from \"../../util\";\n\nexport function instanceAttributeShaderName<T extends Instance>(\n  attribute: IInstanceAttribute<T>\n) {\n  if (attribute.easing) {\n    return `_${attribute.name}_end`;\n  } else {\n    return attribute.name;\n  }\n}\n","export function getProgramInfo(gl: WebGLRenderingContext, program: any) {\n  const result = {\n      attributeCount: 0,\n      attributes: new Array(),\n      uniformCount: 0,\n      uniforms: new Array()\n    },\n    activeUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS),\n    activeAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n  // Taken from the WebGl spec:\n  // Http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14\n  const enums: { [key: number]: string } = {\n    0x8b50: \"FLOAT_VEC2\",\n    0x8b51: \"FLOAT_VEC3\",\n    0x8b52: \"FLOAT_VEC4\",\n    0x8b53: \"INT_VEC2\",\n    0x8b54: \"INT_VEC3\",\n    0x8b55: \"INT_VEC4\",\n    0x8b56: \"BOOL\",\n    0x8b57: \"BOOL_VEC2\",\n    0x8b58: \"BOOL_VEC3\",\n    0x8b59: \"BOOL_VEC4\",\n    0x8b5a: \"FLOAT_MAT2\",\n    0x8b5b: \"FLOAT_MAT3\",\n    0x8b5c: \"FLOAT_MAT4\",\n    0x8b5e: \"SAMPLER_2D\",\n    0x8b60: \"SAMPLER_CUBE\",\n    0x1400: \"BYTE\",\n    0x1401: \"UNSIGNED_BYTE\",\n    0x1402: \"SHORT\",\n    0x1403: \"UNSIGNED_SHORT\",\n    0x1404: \"INT\",\n    0x1405: \"UNSIGNED_INT\",\n    0x1406: \"FLOAT\"\n  };\n\n  const blocks: { [key: number]: number } = {\n    0x8b50: 1,\n    0x8b51: 1,\n    0x8b52: 1,\n    0x8b53: 1,\n    0x8b54: 1,\n    0x8b55: 1,\n    0x8b56: 1,\n    0x8b57: 1,\n    0x8b58: 1,\n    0x8b59: 1,\n    0x8b5a: 1,\n    0x8b5b: 3,\n    0x8b5c: 4,\n    0x8b5e: 1,\n    0x8b60: 1,\n    0x1400: 1,\n    0x1401: 1,\n    0x1402: 1,\n    0x1403: 1,\n    0x1404: 1,\n    0x1405: 1,\n    0x1406: 1\n  };\n\n  // Loop through active uniforms\n  for (let i = 0; i < activeUniforms; ++i) {\n    const uniform: any = gl.getActiveUniform(program, i);\n    uniform.typeName = enums[uniform.type];\n    result.uniforms.push(uniform);\n    result.uniformCount += uniform.size;\n    uniform.size = uniform.size * blocks[uniform.type];\n  }\n\n  // Loop through active attributes\n  for (let i = 0; i < activeAttributes; i++) {\n    const attribute: any = gl.getActiveAttrib(program, i);\n    attribute.typeName = enums[attribute.type];\n    result.attributes.push(attribute);\n    result.attributeCount += attribute.size;\n  }\n\n  return result;\n}\n\nexport class WebGLStat {\n  static MAX_VERTEX_UNIFORMS = 0;\n  static MAX_FRAGMENT_UNIFORMS = 0;\n  static MAX_VERTEX_ATTRIBUTES = 0;\n  static WEBGL_SUPPORTED: boolean = false;\n  static MAX_TEXTURE_SIZE = 0;\n  static HARDWARE_INSTANCING = false;\n  static HARDWARE_INSTANCING_ANGLE = false;\n}\n\nfunction initStats() {\n  // Let's perform some immediate operations to do some gl querying for useful information\n  function getAContext() {\n    try {\n      const canvas = document.createElement(\"canvas\");\n      return (\n        (window as any).WebGLRenderingContext &&\n        (canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\"))\n      );\n    } catch (e) {\n      return false;\n    }\n  }\n\n  // Attempt to retrieve a context for webgl\n  const gl = getAContext();\n\n  // If the context exists, then we know gl is supported and we can fill in some metrics\n  if (gl) {\n    WebGLStat.WEBGL_SUPPORTED = true;\n    WebGLStat.MAX_VERTEX_UNIFORMS = gl.getParameter(\n      gl.MAX_VERTEX_UNIFORM_VECTORS\n    );\n    WebGLStat.MAX_FRAGMENT_UNIFORMS = gl.getParameter(\n      gl.MAX_FRAGMENT_UNIFORM_VECTORS\n    );\n    WebGLStat.MAX_VERTEX_ATTRIBUTES = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    WebGLStat.MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    WebGLStat.HARDWARE_INSTANCING_ANGLE = Boolean(\n      gl.getExtension(\"ANGLE_instanced_arrays\")\n    );\n    WebGLStat.HARDWARE_INSTANCING = WebGLStat.HARDWARE_INSTANCING_ANGLE;\n  }\n}\n\ninitStats();\n","import * as browser from \"bowser\";\nimport { Vector2 } from \"three\";\nconst debug = require(\"debug\")(\"CommunicationsView:Mouse\");\n\n/** Used to adjust the base whee delta for IE browsers */\nconst IE_ADJUSTMENT = 1 / 30;\n/** Used to adjust the rates for IE 11 */\nconst OLD_IE_ADJUSTMENT = -0.25;\n// This determines how large the delta can grow to in firefox\nconst MAX_FIREFOX_WHEELDELTA = 100;\n/**\n * Create a low pass filter memory bank so we can slow down rapid accelerations and let normal slower accelerations pass\n * Common use case for this is the discrepancy in firefox from mousewheels to trackpad scroll speeds\n */\nconst lowPassY: number[] = [0, 0, 0, 0];\n// These coefficients represent the coefficients of a FIR filter.\n// This FIR filter uses the lowPassY as the memory for the filter and is created for\n// The reasons specified for the lowPassY memory. To edit the coefficients, you simply\n// Ensure the coefficients added together === 1.0. If they do not, you may get an unstable\n// Result that goes to infinity rather quickly. Changing the distribution of these coefficients\n// Alters the rate at which the delta can approach MAX_FIREFOX_WHEELDELTA. Explaining exactly\n// How it affects the rate requires an understanding of FIR filters, so unless this is already\n// Known knowledge, it would be faster to just tweak the coefficients until a desired effect is\n// Attained.\nconst LOW_PASS_U0 = 0.02;\nconst LOW_PASS_U1 = 0.1;\nconst LOW_PASS_U2 = 0.18;\nconst LOW_PASS_U3 = 0.7;\n\nfunction normalizeFirefoxWheel(e: MouseWheelEvent) {\n  const wheel: WheelEvent = e;\n  let deltaX = 0;\n  let deltaY = 0;\n\n  // Reset the filter if the direction changes to prevent lag in directional change\n  if (Math.sign(lowPassY[0]) !== Math.sign(deltaY)) {\n    lowPassY.splice(0, lowPassY.length, 0, 0, 0, 0);\n  }\n\n  deltaX = wheel.deltaX * MAX_FIREFOX_WHEELDELTA;\n\n  // Calculate the next value output from the FIR filter\n  deltaY =\n    wheel.deltaY * MAX_FIREFOX_WHEELDELTA * LOW_PASS_U0 +\n    lowPassY[0] * LOW_PASS_U1 +\n    lowPassY[1] * LOW_PASS_U2 +\n    lowPassY[2] * LOW_PASS_U3;\n  // Store the value of the filter in the FIR memory bank\n  lowPassY.unshift(deltaY);\n  // Keep our FIR memory clean and only the size of the number of coefficients\n  lowPassY.pop();\n\n  return new Vector2(-deltaX, -deltaY);\n}\n\nfunction normalizeChromeWheel(e: MouseWheelEvent) {\n  const wheel: WheelEvent = e;\n\n  return new Vector2(wheel.deltaX, -wheel.deltaY);\n}\n\nfunction normalizeIE11Wheel(e: MouseWheelEvent) {\n  const wheel: WheelEvent = e;\n  let deltaX = wheel.deltaX;\n\n  if (deltaX === undefined) {\n    deltaX =\n      wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n  }\n\n  let deltaY = wheel.deltaY;\n\n  if (deltaY === undefined) {\n    if (wheel.wheelDeltaY !== undefined) {\n      deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n    } else {\n      deltaY = (wheel.wheelDelta || -wheel.detail) * OLD_IE_ADJUSTMENT;\n    }\n  }\n\n  return new Vector2(-deltaX, -deltaY);\n}\n\nfunction normalizeIE12Wheel(e: MouseWheelEvent) {\n  const wheel: WheelEvent = e;\n  let { deltaX, deltaY } = wheel;\n\n  if (deltaX === undefined) {\n    deltaX =\n      wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n  }\n\n  if (deltaY === undefined) {\n    if (wheel.wheelDeltaY !== undefined) {\n      deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n    } else {\n      deltaY = wheel.wheelDelta || -wheel.detail;\n    }\n  }\n\n  const v = new Vector2(deltaX, -deltaY);\n  v.multiplyScalar(0.25);\n\n  return v;\n}\n\n// Determine this browsers version of wheel normalization and apply it\nlet normalizeWheel: (e: MouseWheelEvent) => Vector2;\n\nif (browser.firefox) {\n  debug(\"Using mouse wheel for firefox\");\n  normalizeWheel = normalizeFirefoxWheel;\n} else if (browser.msie && +browser.version >= 11) {\n  debug(\"Using mouse wheel for IE 11\");\n  normalizeWheel = normalizeIE11Wheel;\n} else if (browser.msedge) {\n  debug(\"Using mouse wheel for MS EDGE\");\n  normalizeWheel = normalizeIE12Wheel;\n} else {\n  debug(\"Using mouse wheel for Chrome\");\n  normalizeWheel = normalizeChromeWheel;\n}\n\n/**\n * Analyzes a MouseEvent and calculates the mouse coordinates (relative to the element).\n */\nfunction eventElementPosition(\n  e: any,\n  relative?: HTMLElement\n): { x: number; y: number } {\n  let mouseX: number = 0,\n    mouseY: number = 0,\n    eventX: number = 0,\n    eventY: number = 0,\n    object: any =\n      relative || (e.nativeEvent && e.nativeEvent.target) || e.target;\n\n  // Get mouse position on document crossbrowser\n  if (!e) {\n    e = window.event;\n  }\n\n  if (e.pageX || e.pageY) {\n    mouseX = e.pageX;\n    mouseY = e.pageY;\n  } else if (e.clientX || e.clientY) {\n    mouseX =\n      e.clientX +\n      document.body.scrollLeft +\n      document.documentElement.scrollLeft;\n    mouseY =\n      e.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n  }\n\n  // Get parent element position in document\n  if (object.offsetParent) {\n    do {\n      eventX += object.offsetLeft;\n      eventY += object.offsetTop;\n      object = object.offsetParent;\n    } while (object);\n  }\n\n  // Mouse position minus elm position is mouseposition relative to element:\n  return { x: mouseX - eventX, y: mouseY - eventY };\n}\n\nexport { eventElementPosition, normalizeWheel };\n","import { InstanceIOValue } from \"../types\";\nimport { uid } from \"../util/uid\";\nimport { Vec, VecMath } from \"./vector\";\n\nconst { min, max, pow, round, sin, PI } = Math;\nconst GPU_PI = round(PI * 1000) / 1000;\n\nfunction clamp(x: number, minVal: number, maxVal: number) {\n  return min(max(x, minVal), maxVal);\n}\n\nexport enum AutoEasingLoopStyle {\n  /** Time will go from 0 -> 1 then stop at 1 */\n  NONE = 1,\n  /** Time will go from 0 -> infinity */\n  CONTINUOUS = 4,\n  /** Time will continuously go 0 -> 1 then 0 -> 1 then 0 -> 1 etc etc */\n  REPEAT = 2,\n  /** Time will continously go 0 -> 1 then 1 -> 0 then 0 -> 1 then 1 -> 0 etc etc */\n  REFLECT = 3\n}\n\n/**\n * This defines a GPU enabled easing method that will be executed on the GPU to maneuver\n *\n */\nexport interface IAutoEasingMethod<T extends InstanceIOValue> {\n  /** An easing method that should produce IDENTICAL values to the values of the gpu easing method using the exact same parameters */\n  cpu(start: T, end: T, t: number): T;\n  /** This adds a delay to the starting time of an easing change */\n  delay: number;\n  /** This is how long the easing method should last */\n  duration: number;\n  /**\n   * An easing method written in shader language that should produce IDENTICAL\n   * values to the values of the cpu easing method using the exact same parameters.\n   */\n  gpu: string;\n  /**\n   * This defines the looping style of the easing.\n   */\n  loop: AutoEasingLoopStyle;\n  /**\n   * This shall be the name of the easing method as it appears in the spu shader.\n   * BE WARNED: This name is used to dedup the methods created on the shader. So,\n   * if you use the same name as another ease method used on a single layer, you run\n   * the risk of one overriding the other with an undefined chance of who wins.\n   */\n  methodName: string;\n  /**\n   * A unique identifier for the auto easing method.\n   */\n  uid: number;\n\n  /**\n   * This lets you modify some auto easing validation rules.\n   */\n  validation?: {\n    ignoreEndValueCheck?: boolean;\n    ignoreOverTimeCheck?: boolean;\n  };\n}\n\n// GPU easing methods! Written here because it's cleaner to write `` style strings\n// Against the left side of the editor\n\nconst immediateGPU = `\n$\\{easingMethod} {\n  return end;\n}\n`;\n\nconst linearGPU = `\n$\\{easingMethod} {\n  return (end - start) * t + start;\n}\n`;\n\nconst easeInQuadGPU = `\n$\\{easingMethod} {\n  float time = t * t;\n  return (end - start) * time + start;\n}\n`;\n\nconst easeOutQuadGPU = `\n$\\{easingMethod} {\n  float time = t * (2.0 - t);\n  return (end - start) * time + start;\n}\n`;\nconst easeInOutQuadGPU = `\n$\\{easingMethod} {\n  float time = t < 0.5 ? 2.0 * t * t : -1.0 + (4.0 - 2.0 * t) * t;\n  return (end - start) * time + start;\n}\n`;\nconst easeInCubicGPU = `\n$\\{easingMethod} {\n  float time = t * t * t;\n  return (end - start) * time + start;\n}\n`;\nconst easeOutCubicGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float time = t1 * t1 * t1 + 1.0;\n  return (end - start) * time + start;\n}\n`;\nconst easeInOutCubicGPU = `\n$\\{easingMethod} {\n  float time = t < 0.5 ? 4.0 * t * t * t : (t - 1.0) * (2.0 * t - 2.0) * (2.0 * t - 2.0) + 1.0;\n  return (end - start) * time + start;\n}\n`;\nconst easeInQuartGPU = `\n$\\{easingMethod} {\n  float time = t * t * t * t;\n  return (end - start) * time + start;\n}\n`;\nconst easeOutQuartGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float time = 1.0 - t1 * t1 * t1 * t1;\n  return (end - start) * time + start;\n}\n`;\nconst easeInOutQuartGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float time = t < 0.5 ? 8.0 * t * t * t * t : 1.0 - 8.0 * t1 * t1 * t1 * t1;\n  return (end - start) * time + start;\n}\n`;\nconst easeInQuintGPU = `\n$\\{easingMethod} {\n  float time = t * t * t * t * t;\n  return (end - start) * time + start;\n}\n`;\nconst easeOutQuintGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float time = 1.0 + t1 * t1 * t1 * t1 * t1;\n  return (end - start) * time + start;\n}\n`;\nconst easeInOutQuintGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float time = t < 0.5 ? 16.0 * t * t * t * t * t : 1.0 + 16.0 * t1 * t1 * t1 * t1 * t1;\n  return (end - start) * time + start;\n}\n`;\n\nconst easeOutElasticGPU = `\n$\\{easingMethod} {\n  float p = 0.3;\n  float time = pow(2.0, -10.0 * t) * sin((t - p / 4.0) * (2.0 * ${GPU_PI}) / p) + 1.0;\n  return (end - start) * time + start;\n}\n`;\n\nconst easeBackInGPU = `\n$\\{easingMethod} {\n  float time = t * t * t - t * 1.05 * sin(t * ${GPU_PI});\n  return (end - start) * time + start;\n}\n`;\n\nconst easeBackOutGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float a = 1.7;\n  float time = (t1 * t1 * ((a + 1.0) * t1 + a) + 1.0);\n  return (end - start) * time + start;\n}\n`;\n\nconst easeBackInOutGPU = `\n$\\{easingMethod} {\n  float a = 1.4;\n  float a1 = a * 1.525;\n  float t1 = t / 0.5;\n  float t2 = t1 - 2.0;\n  float time =\n    (t1 < 1.0) ? 0.5 * (t1 * t1 * (a1 + 1.0) * t1 - a1) :\n    0.5 * (t2 * t2 * ((a1 + 1.0) * t2 + a1) + 2.0)\n  ;\n\n  return (end - start) * time + start;\n}\n`;\n\nconst continuousSinusoidalGPU = `\n$\\{easingMethod} {\n  $\\{T} direction = end - start;\n  float amplitude = length(direction) * 2.0;\n  return start + direction * sin(t * ${GPU_PI} * 2.0) * amplitude;\n}\n`;\n\n/**\n * Class of base AutoEasingMethods as well as helper constructs for making the methods.\n */\nexport class AutoEasingMethod<T extends InstanceIOValue>\n  implements IAutoEasingMethod<T> {\n  /**\n   * Autoeasing methods for linear easing\n   */\n  static immediate<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (_start: T, end: T, _t: number) => end,\n      delay,\n      duration,\n      gpu: immediateGPU,\n      loop,\n      methodName: \"immediate\"\n    };\n  }\n\n  /**\n   * Autoeasing methods for linear easing\n   */\n  static linear<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        const { add, scale, subtract } = VecMath(start);\n        t = clamp(t, 0, 1);\n        return add(scale(subtract(end, start), t), start);\n      },\n      delay,\n      duration,\n      gpu: linearGPU,\n      loop,\n      methodName: \"linear\"\n    };\n  }\n\n  /**\n   * Auto easing for Accelerating to end\n   */\n  static easeInQuad<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInQuadGPU,\n      loop,\n      methodName: \"easeInQuad\"\n    };\n  }\n\n  /**\n   * Auto easing for decelerating to end\n   */\n  static easeOutQuad<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t * (2 - t);\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeOutQuadGPU,\n      loop,\n      methodName: \"easeOutQuad\"\n    };\n  }\n\n  /**\n   * Auto easing for Accelerate to mid, then decelerate to end\n   */\n  static easeInOutQuad<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInOutQuadGPU,\n      loop,\n      methodName: \"easeInOutQuad\"\n    };\n  }\n\n  /**\n   * Auto easing for Slower acceleration\n   */\n  static easeInCubic<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInCubicGPU,\n      loop,\n      methodName: \"easeInCubic\"\n    };\n  }\n\n  /**\n   * Auto easing for Slower deceleration\n   */\n  static easeOutCubic<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = --t * t * t + 1;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeOutCubicGPU,\n      loop,\n      methodName: \"easeOutCubic\"\n    };\n  }\n\n  /**\n   * Auto easing for Slower acceleration to mid, and slower deceleration to end\n   */\n  static easeInOutCubic<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time =\n          t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInOutCubicGPU,\n      loop,\n      methodName: \"easeInOutCubic\"\n    };\n  }\n\n  /**\n   * Auto easing for even Slower acceleration to end\n   */\n  static easeInQuart<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInQuartGPU,\n      loop,\n      methodName: \"easeInQuart\"\n    };\n  }\n\n  /**\n   * Auto easing for even Slower deceleration to end\n   */\n  static easeOutQuart<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = 1 - --t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeOutQuartGPU,\n      loop,\n      methodName: \"easeOutQuart\"\n    };\n  }\n\n  /**\n   * Auto easing for even Slower acceleration to mid, and even slower deceleration to end\n   */\n  static easeInOutQuart<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInOutQuartGPU,\n      loop,\n      methodName: \"easeInOutQuart\"\n    };\n  }\n\n  /**\n   * Auto easing for super slow accelerating to the end\n   */\n  static easeInQuint<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t * t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInQuintGPU,\n      loop,\n      methodName: \"easeInQuint\"\n    };\n  }\n\n  /**\n   * Auto easing for super slow decelerating to the end\n   */\n  static easeOutQuint<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = 1 + --t * t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeOutQuintGPU,\n      loop,\n      methodName: \"easeOutQuint\"\n    };\n  }\n\n  /**\n   * Auto easing for super slow accelerating to mid and super slow decelerating to the end\n   */\n  static easeInOutQuint<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time =\n          t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInOutQuintGPU,\n      loop,\n      methodName: \"easeInOutQuint\"\n    };\n  }\n\n  /**\n   * Auto easing for elastic effect\n   */\n  static easeOutElastic<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const p = 0.3;\n        const time = pow(2, -10 * t) * sin((t - p / 4) * (2 * PI) / p) + 1;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeOutElasticGPU,\n      loop,\n      methodName: \"easeOutElastic\"\n    };\n  }\n\n  /**\n   * Auto easing for retracting first then shooting to the end\n   */\n  static easeBackIn<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const a = 1.05;\n        const time = t * t * t - t * a * sin(t * PI);\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeBackInGPU,\n      loop,\n      methodName: \"easeBackIn\"\n    };\n  }\n\n  /**\n   * Auto easing for overshooting at the end\n   */\n  static easeBackOut<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const a = 1.7;\n        const t1 = t - 1;\n        const time = t1 * t1 * ((a + 1) * t1 + a) + 1;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeBackOutGPU,\n      loop,\n      methodName: \"easeBackOut\"\n    };\n  }\n\n  /**\n   * Auto easing for overshooting at the end\n   */\n  static easeBackInOut<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const a = 1.7;\n        const a1 = a * 1.525;\n        const t1 = t / 0.5;\n        const t2 = t1 - 2;\n        const time =\n          t1 < 1\n            ? 0.5 * (t1 * t1 * (a1 + 1) * t1 - a1)\n            : 0.5 * (t2 * t2 * ((a1 + 1) * t2 + a1) + 2);\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeBackInOutGPU,\n      loop,\n      methodName: \"easeBackInOut\"\n    };\n  }\n\n  /**\n   * This is an easing method that performs a sinusoidal wave where the amplitude is\n   * (start - end) * 2 and the wave starts at the start value.\n   *\n   * This is intended to work best with the CONTINUOUS loop style.\n   */\n  static continuousSinusoidal<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.CONTINUOUS\n  ): IAutoEasingMethod<T> {\n    return {\n      uid: uid(),\n      cpu: (start: T, end: T, t: number) => {\n        const { add, length, scale, subtract } = VecMath(start);\n        t = clamp(t, 0, 1);\n        const direction = subtract(end, start);\n        const amplitude = length(direction) * 2.0;\n        return add(start, scale(direction, sin(t * PI * 2) * amplitude));\n      },\n      delay,\n      duration,\n      gpu: continuousSinusoidalGPU,\n      loop,\n      methodName: \"repeatingSinusoidal\",\n\n      // Since this is sinusoidial and operates off of a continuous time structure\n      validation: {\n        // When time = 1 our value will = start and NOT end\n        ignoreEndValueCheck: true,\n        // When the time is > 1 our value will not clamp to the value at 1.\n        ignoreOverTimeCheck: true\n      }\n    };\n  }\n\n  /** A uid for the easing method */\n  uid = uid();\n  /** The easing method for the cpu */\n  cpu: IAutoEasingMethod<T>[\"cpu\"];\n  /** Time before a delay  */\n  delay: number = 0;\n  /** The time in ms is takes to complete the animation */\n  duration: number = 500;\n  /** The easing method on the GPU */\n  gpu: IAutoEasingMethod<T>[\"gpu\"];\n  /** The looping style of the animation */\n  loop = AutoEasingLoopStyle.NONE;\n  /** Method name of the ease function on the gpu */\n  methodName: string;\n\n  constructor(\n    cpu: IAutoEasingMethod<T>[\"cpu\"],\n    gpu: IAutoEasingMethod<T>[\"gpu\"],\n    duration?: number,\n    method?: string\n  ) {\n    this.cpu = cpu;\n    this.gpu = gpu;\n    this.duration = duration || 500;\n    this.methodName = method || \"easingMethod\";\n  }\n}\n","import * as Three from \"three\";\nimport { IMaterialOptions } from \"../types\";\n\nexport class CommonMaterialOptions {\n  static transparentShape: IMaterialOptions = {\n    premultipliedAlpha: true,\n    transparent: true\n  };\n\n  static transparentImage: IMaterialOptions = {\n    blending: Three.CustomBlending,\n    blendSrc: Three.OneFactor,\n    premultipliedAlpha: true,\n    transparent: true\n  };\n}\n","import { IEasingProps } from \"../types\";\nimport { Vec } from \"./vector\";\n\n/**\n * This object represents the data associated with easing. It provides the\n * information needed to make an easing equation execute to completion. It also\n * contains a few methods to aid in properly adjusting the easing values.\n */\nexport class EasingProps implements IEasingProps {\n  delay: number = 0;\n  duration: number;\n  end: Vec;\n  isManualStart = false;\n  isTimeSet = false;\n  start: Vec;\n  startTime: number;\n\n  constructor(options: IEasingProps) {\n    Object.assign(this, options);\n  }\n\n  /**\n   * If you manually set values for the easing properties, then you use this to return\n   * the easing object back to an automated state which is where the start value is\n   * the calculated current position of the output and the delay and duration is determined\n   * by the easing set to the layer's IAutomatedEasingMethod value set to the layer.\n   */\n  setAutomatic() {\n    this.isManualStart = false;\n    this.isTimeSet = false;\n  }\n\n  /**\n   * This controls the start value of the easing. This should be used to force a starting\n   * value of the animation.\n   *\n   * Use setAutomatic() to return to default easing behavior.\n   */\n  setStart(start?: Vec) {\n    if (start) {\n      if (this.start.length !== start.length) {\n        console.warn(\n          \"A manual easing adjustment provided an incompatible value for the easing type.\"\n        );\n      } else {\n        this.start = start;\n        this.isManualStart = true;\n      }\n    }\n  }\n\n  /**\n   * This controls of the timing of the easing equation. This should be used to adjust\n   * when a value is to be adjusted\n   *\n   * Use setAutomatic() to return to default easing behavior.\n   */\n  setTiming(delay?: number, duration?: number) {\n    this.delay = delay === undefined ? this.delay : delay;\n    this.duration = duration === undefined ? this.duration : duration;\n    this.isTimeSet = true;\n  }\n}\n","import * as Three from \"three\";\nimport { Instance } from \"../../instance-provider/instance\";\nimport { InstanceIOValue } from \"../../types\";\nimport { ILayerProps, Layer } from \"../layer\";\nimport { AtlasManager, AtlasResource } from \"./atlas-manager\";\nimport { LabelAtlasResource } from \"./label-atlas-resource\";\nimport { SubTexture } from \"./sub-texture\";\n\nexport interface IAtlasResourceManagerOptions {\n  /** This is the atlas manager that handles operations with our atlas' */\n  atlasManager: AtlasManager;\n}\n\nfunction toInstanceIOValue(texture?: SubTexture): InstanceIOValue {\n  // If the texture is not defined we just output an empty reference\n  if (!texture) {\n    return [0, 0, 0, 0];\n  }\n\n  // Otherwise, we return the atlas information of the texture\n  return [\n    texture.atlasTL.x,\n    texture.atlasTL.y,\n    texture.atlasBR.x,\n    texture.atlasBR.y\n  ];\n}\n\n/**\n * This class is responsible for tracking resources requested to be placed on an Atlas.\n * This makes sure the resource is uploaded and then properly cached so similar requests\n * return already existing resources. This also manages instances waiting for the resource\n * to be made available.\n */\nexport class AtlasResourceManager {\n  /** This is the atlas manager that handles operations with our atlas' */\n  atlasManager: AtlasManager;\n  /** This is the atlas currently targetted by requests */\n  targetAtlas: string = \"\";\n  /** This stores all of the requests awaiting dequeueing */\n  private requestQueue = new Map<string, AtlasResource[]>();\n  /**\n   * This tracks if a resource is already in the request queue. This also stores ALL instances awaiting the resource.\n   */\n  private requestLookup = new Map<\n    string,\n    Map<AtlasResource, [Layer<any, any>, Instance][]>\n  >();\n\n  constructor(options: IAtlasResourceManagerOptions) {\n    this.atlasManager = options.atlasManager;\n  }\n\n  /**\n   * This dequeues all instance requests for a resource and processes the request which will\n   * inevitably make the instance active\n   */\n  async dequeueRequests() {\n    // This flag will be modified to reflect if a dequeue operation has occurred\n    let didDequeue = false;\n\n    for (const [targetAtlas, resources] of Array.from(\n      this.requestQueue.entries()\n    )) {\n      if (resources.length > 0) {\n        // We did dequeue\n        didDequeue = true;\n        // Pull out all of the requests into a new array and empty the existing queue to allow the queue to register\n        // New requests while this dequeue is being processed\n        const requests = resources.slice(0);\n        // Empty the queue to begin taking in new requests as needed\n        resources.length = 0;\n\n        // Tell the atlas manager to update with all of the requested resources\n        await this.atlasManager.updateAtlas(targetAtlas, requests);\n        // Get the requests for the given atlas\n        const atlasRequests = this.requestLookup.get(targetAtlas);\n\n        if (atlasRequests) {\n          // Once the manager has been updated, we can now flag all of the instances waiting for the resources\n          // As active, which should thus trigger an update to the layers to perform a diff for each instance\n          requests.forEach(resource => {\n            const request = atlasRequests.get(resource);\n            atlasRequests.delete(resource);\n\n            if (request) {\n              for (let i = 0, iMax = request.length; i < iMax; ++i) {\n                const [layer, instance] = request[i];\n                // If the instance is still associated with buffer locations, then the instance can be activated. Having\n                // A buffer location is indicative the instance has not been deleted.\n                if (layer.bufferManager.getBufferLocations(instance)) {\n                  // Make sure the instance is active\n                  instance.active = true;\n                }\n              }\n\n              // Do a delay to next frame before we do our resource trigger so we can see any lingering updates get\n              // applied to the instance's rendering\n              requestAnimationFrame(() => {\n                for (let i = 0, iMax = request.length; i < iMax; ++i) {\n                  const instance = request[i][1];\n                  instance.resourceTrigger();\n                }\n              });\n            }\n          });\n        }\n      }\n    }\n\n    return didDequeue;\n  }\n\n  /**\n   * Free ALL resources managed under this resource manager\n   */\n  destroy() {\n    this.atlasManager.destroy();\n  }\n\n  /**\n   * This retrieves the actual atlas texture that should be applied to a uniform's\n   * value.\n   */\n  getAtlasTexture(key: string): Three.Texture | null {\n    const atlas = this.atlasManager.getAtlasTexture(key);\n\n    if (atlas) {\n      return atlas.texture;\n    }\n\n    return null;\n  }\n\n  /**\n   * This is a request for atlas texture resources. It will produce either the coordinates needed to\n   * make valid texture lookups, or it will trigger a loading of resources to an atlas and cause an\n   * automated deactivation and reactivation of the instance.\n   */\n  request<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U>,\n    instance: Instance,\n    resource: AtlasResource\n  ): InstanceIOValue {\n    const texture: SubTexture = resource.texture;\n\n    // If the texture is ready and available, then we simply return the IO values\n    if (texture) {\n      return toInstanceIOValue(texture);\n    }\n\n    if (resource instanceof LabelAtlasResource) {\n      if (!resource.label.text) {\n        return toInstanceIOValue(texture);\n      }\n    }\n\n    // If a request is already made, then we must save the instance making the request for deactivation and\n    // Reactivation but without any additional atlas loading\n    let atlasRequests = this.requestLookup.get(this.targetAtlas);\n\n    if (atlasRequests) {\n      const existingRequests = atlasRequests.get(resource);\n\n      if (existingRequests) {\n        existingRequests.push([layer, instance]);\n        instance.active = false;\n\n        return toInstanceIOValue(texture);\n      }\n    } else {\n      atlasRequests = new Map();\n      this.requestLookup.set(this.targetAtlas, atlasRequests);\n    }\n\n    // If the texture is not available, then we must load the resource, deactivate the instance\n    // And wait for the resource to become available. Once the resource is available, the system\n    // Must activate the instance to render the resource.\n    instance.active = false;\n    let requests = this.requestQueue.get(this.targetAtlas);\n\n    if (!requests) {\n      requests = [];\n      this.requestQueue.set(this.targetAtlas, requests);\n    }\n\n    requests.push(resource);\n    atlasRequests.set(resource, [[layer, instance]]);\n\n    // This returns essentially returns blank values for the resource lookup\n    return toInstanceIOValue(texture);\n  }\n\n  /**\n   * This is used by the system to target the correct atlas for subsequent requests to a resource.\n   */\n  setTargetAtlas(target: string) {\n    this.targetAtlas = target;\n  }\n}\n","import { Bounds } from \"../primitives/bounds\";\nimport { IPoint } from \"../primitives/point\";\n\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nconst maxPopulation: number = 5;\nconst maxDepth: number = 10;\n\nexport interface IQuadItem {\n  area: number;\n  bottom: number;\n  height: number;\n  left: number;\n  mid: IPoint;\n  right: number;\n  top: number;\n  width: number;\n  x: number;\n  y: number;\n\n  containsPoint(point: IPoint): boolean;\n  encapsulate(item: IQuadItem): boolean;\n  fits(item: IQuadItem): 0 | 1 | 2;\n  hitBounds(item: IQuadItem): boolean;\n  isInside(item: IQuadItem): boolean;\n}\n\n/**\n * This filters a quad tree query by type\n *\n * @export\n * @template T\n */\nexport function filterQuery<T extends IQuadItem>(\n  type: Function[],\n  queryValues: IQuadItem[]\n): T[] {\n  const filtered: T[] = [];\n\n  queryValues.forEach((obj: IQuadItem) => {\n    if (type.find(t => obj instanceof t)) {\n      filtered.push(obj as T);\n    }\n  });\n\n  return filtered;\n}\n\n/**\n * Allows typing of a callback argument\n */\nexport interface IVisitFunction<T extends IQuadItem> {\n  /**\n   * A callback to use during add or query\n   *\n   * Called do provide aggregation or filtering like Array.reduce or\n   * Array.filter, but in a QuadTree instead.\n   *\n   * @param node  The node to effect the function upon\n   * @param child The child to add to the node\n   */\n  (node: Node<T>, child?: IQuadItem): void;\n}\n\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n *\n * @class Quadrants\n */\nexport class Quadrants<T extends IQuadItem> {\n  TL: Node<T>;\n  TR: Node<T>;\n  BL: Node<T>;\n  BR: Node<T>;\n\n  /**\n   * Ensures all memory is released for all nodes and all references are removed\n   * to potentially high memory consumption items\n   *\n   * @memberOf Quadrants\n   */\n  destroy() {\n    this.TL.destroy();\n    this.TR.destroy();\n    this.BL.destroy();\n    this.BR.destroy();\n    delete this.TL;\n    delete this.TR;\n    delete this.BL;\n    delete this.BR;\n  }\n\n  /**\n   * Creates an instance of Quadrants.\n   *\n   * @param bounds The bounds this will create quandrants for\n   * @param depth  The child depth of this element\n   *\n   * @memberOf Quadrants\n   */\n  constructor(bounds: IQuadItem, depth: number) {\n    const mid = bounds.mid;\n    this.TL = new Node<T>(bounds.x, mid.x, bounds.y, mid.y, depth);\n    this.TR = new Node<T>(mid.x, bounds.right, bounds.y, mid.y, depth);\n    this.BL = new Node<T>(bounds.x, mid.x, mid.y, bounds.bottom, depth);\n    this.BR = new Node<T>(mid.x, bounds.right, mid.y, bounds.bottom, depth);\n  }\n}\n\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n *\n * @export\n * @class Node\n */\nexport class Node<T extends IQuadItem> {\n  bounds: Bounds;\n  children: T[] = [];\n  depth: number = 0;\n  nodes: Quadrants<T>;\n\n  /**\n   * Destroys this node and ensures all child nodes are destroyed as well.\n   *\n   * @memberOf Node\n   */\n  destroy() {\n    delete this.children;\n    delete this.bounds;\n\n    if (this.nodes) {\n      this.nodes.destroy();\n      delete this.nodes;\n    }\n  }\n\n  /**\n   * Creates an instance of Node.\n   *\n   * @param l     The bounding left wall of the space this node covers\n   * @param r     The bounding right wall of the space this node covers\n   * @param t     The bounding top wall of the space this node covers\n   * @param b     The bounding bottom wall of the space this node covers\n   * @param depth The depth within the quad tree this node resides\n   *\n   * @memberOf Node\n   */\n  constructor(\n    left: number,\n    right: number,\n    top: number,\n    bottom: number,\n    depth?: number\n  ) {\n    // If params insertted\n    if (arguments.length >= 4) {\n      this.bounds = new Bounds({\n        height: top - bottom,\n        width: right - left,\n        x: left,\n        y: top\n      });\n    } else {\n      // Otherwise, make tiny start area\n      this.bounds = new Bounds({\n        height: 1,\n        width: 1,\n        x: 0,\n        y: 0\n      });\n    }\n\n    // Ensure the depth is set\n    this.depth = depth || 0;\n  }\n\n  /**\n   * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n   * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n   * this quad tree spans (and this is the root node), the quad tree will expand to include\n   * the new child.\n   *\n   * @param child The Bounds type object to inject\n   * @param props Properties that can be retrieved with the child object if applicable\n   *\n   * @returns True if the insertion was successful\n   *\n   * @memberOf Node\n   */\n  add(child: T, props: any): boolean {\n    // This is the entry function for adding children, so we must first expand our top node\n    // To cover the area that the child is located.\n    // If we're in bounds, then let's just add the child\n    if (child.isInside(this.bounds)) {\n      return this.doAdd(child);\n    } else {\n      // Otherwise, we need to expand first\n      this.cover(child);\n      return this.add(child, props);\n    }\n  }\n\n  /**\n   * Adds a list of new children to this quad tree. It performs the same operations as\n   * addChild for each child in the list, however, it more efficiently recalculates the\n   * bounds necessary to cover the area the children cover.\n   *\n   * @param children      List of Bounds objects to inject\n   * @param childrenProps List of props to associate with each element\n   *\n   * @memberOf Node\n   */\n  addAll(children: T[], childrenProps?: any[]) {\n    // Ensure the properties are at least defined\n    childrenProps = childrenProps || [];\n\n    // Make sure we cover the entire area of all the children.\n    // We can speed this up a lot if we first calculate the total bounds the new children covers\n    let minX = Number.MAX_VALUE;\n    let minY = Number.MAX_VALUE;\n    let maxX = -Number.MAX_VALUE;\n    let maxY = -Number.MAX_VALUE;\n\n    // Get the dimensions of the new bounds\n    children.forEach(child => {\n      if (child.x < minX) {\n        minX = child.x;\n      }\n      if (child.right > maxX) {\n        maxX = child.right;\n      }\n      if (child.bottom > maxY) {\n        maxY = child.bottom;\n      }\n      if (child.y < minY) {\n        minY = child.y;\n      }\n    });\n\n    // Make sure our bounds includes the specified bounds\n    this.cover(\n      new Bounds({\n        height: maxY - minY,\n        width: maxX - minX,\n        x: minX,\n        y: minY\n      })\n    );\n\n    // Add all of the children into the tree\n    children.forEach(child => this.doAdd(child));\n  }\n\n  /**\n   * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n   * This will cause all children to be re-injected into the tree.\n   *\n   * @param bounds The bounds to include in the tree's coverage\n   *\n   * @memberOf Node\n   */\n  cover(bounds: IQuadItem) {\n    // If we are already covering the area: abort\n    if (bounds.isInside(this.bounds)) {\n      return;\n    }\n\n    // Make our bounds cover the new area\n    this.bounds.encapsulate(bounds);\n    this.bounds.x -= 1;\n    this.bounds.y -= 1;\n    this.bounds.width += 2;\n    this.bounds.height += 4;\n    // Get all of the children underneath this node\n    const allChildren = this.gatherChildren([]);\n\n    // Destroy the split nodes\n    if (this.nodes) {\n      // Completely...destroy...\n      this.nodes.destroy();\n      delete this.nodes;\n    }\n\n    // Reinsert all children with the new dimensions in place\n    allChildren.forEach(child => this.doAdd(child));\n  }\n\n  /**\n   * When adding children, this performs the actual action of injecting the child into the tree\n   * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n   *\n   * @param child The Bounds item to inject into the tree\n   * @param props The props to remain associated with the child\n   *\n   * @returns True if the injection was successful\n   *\n   * @memberOf Node\n   */\n  doAdd(child: T): boolean {\n    // If nodes are present, then we have already exceeded the population of this node\n    if (this.nodes) {\n      if (child.isInside(this.nodes.TL.bounds)) {\n        return this.nodes.TL.doAdd(child);\n      }\n\n      if (child.isInside(this.nodes.TR.bounds)) {\n        return this.nodes.TR.doAdd(child);\n      }\n\n      if (child.isInside(this.nodes.BL.bounds)) {\n        return this.nodes.BL.doAdd(child);\n      }\n\n      if (child.isInside(this.nodes.BR.bounds)) {\n        return this.nodes.BR.doAdd(child);\n      }\n\n      // Otherwise, this is a child overlapping this border\n      this.children.push(child);\n\n      return true;\n    } else if (child.isInside(this.bounds)) {\n      // Otherwise, we have not had a split due to population limits being exceeded\n      this.children.push(child);\n\n      // If we exceeded our population for this quadrant, it is time to split up\n      if (this.children.length > maxPopulation && this.depth < maxDepth) {\n        this.split();\n      }\n\n      return true;\n    }\n\n    // This is when there is something wrong with the insertted child. The bounds\n    // For the quad should have grown without issue, but in this case the bounds\n    // Could not grow to accomodate the child.\n    if (isNaN(child.width + child.height + child.x + child.y)) {\n      console.error(\n        \"Child did not fit into bounds because a dimension is NaN\",\n        child\n      );\n    } else if (child.area === 0) {\n      console.error(\n        \"Child did not fit into bounds because the area is zero\",\n        child\n      );\n    }\n\n    // Don't insert the child and continue\n    return true;\n  }\n\n  /**\n   * Collects all children of all the current and sub nodes into a single list.\n   *\n   * @param list The list we must aggregate children into\n   *\n   * @return The list specified as the list parameter\n   */\n  gatherChildren(list: T[]): T[] {\n    list = list.concat(this.children);\n\n    if (this.nodes) {\n      this.nodes.TL.gatherChildren(list);\n      this.nodes.TR.gatherChildren(list);\n      this.nodes.BL.gatherChildren(list);\n      this.nodes.BR.gatherChildren(list);\n    }\n\n    return list;\n  }\n\n  /**\n   * Entry query for determining query type based on input object\n   *\n   * @param bounds Can be a Bounds or a Point object\n   * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n   *               information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return An array of children that intersects with the query\n   */\n  query(bounds: IQuadItem | IPoint, visit?: IVisitFunction<T>): T[] {\n    // Query a rectangle\n    if (bounds instanceof Bounds) {\n      if (bounds.hitBounds(this.bounds)) {\n        return this.queryBounds(bounds, [], visit);\n      }\n\n      // Return an empty array when nothing is collided with\n      return [];\n    }\n\n    // Query a point\n    if (this.bounds.containsPoint(bounds)) {\n      return this.queryPoint(bounds, [], visit);\n    }\n\n    // Return an empty array when nothing is collided with\n    return [];\n  }\n\n  /**\n   * Queries children for intersection with a bounds object\n   *\n   * @param b     The Bounds to test children against\n   * @param list  The list of children to aggregate into the query\n   * @param visit A callback function that will receive the Node as it is analyzed. This gives\n   *              information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return     Returns the exact same list that was input as the list param\n   */\n  queryBounds(b: IQuadItem, list: T[], visit?: IVisitFunction<T>): T[] {\n    this.children.forEach(c => {\n      if (c.hitBounds(b)) {\n        list.push(c);\n      }\n    });\n\n    if (visit) {\n      visit(this);\n    }\n\n    if (this.nodes) {\n      if (b.hitBounds(this.nodes.TL.bounds)) {\n        this.nodes.TL.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.TR.bounds)) {\n        this.nodes.TR.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.BL.bounds)) {\n        this.nodes.BL.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.BR.bounds)) {\n        this.nodes.BR.queryBounds(b, list, visit);\n      }\n    }\n\n    return list;\n  }\n\n  /**\n   * Queries children for intersection with a point\n   *\n   * @param p     The Point to test children against\n   * @param list  The list of children to aggregate into the query\n   * @param visit A callback function that will receive the Node as it is analyzed. This gives\n   *              information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return      Returns the exact same list that was input as the list param\n   */\n  queryPoint(p: any, list: T[], visit?: IVisitFunction<T>): T[] {\n    this.children.forEach(c => {\n      if (c.containsPoint(p)) {\n        list.push(c);\n      }\n    });\n\n    if (visit) {\n      visit(this);\n    }\n\n    if (this.nodes) {\n      if (this.nodes.TL.bounds.containsPoint(p)) {\n        this.nodes.TL.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.TR.bounds.containsPoint(p)) {\n        this.nodes.TR.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.BL.bounds.containsPoint(p)) {\n        this.nodes.BL.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.BR.bounds.containsPoint(p)) {\n        this.nodes.BR.queryPoint(p, list, visit);\n      }\n    }\n\n    return list;\n  }\n\n  /**\n   * Creates four sub quadrants for this node.\n   */\n  split() {\n    // Gather all items to be handed down\n    const allChildren = this.gatherChildren([]);\n    // Gather all props for the children to be handed down as well\n    this.nodes = new Quadrants<T>(this.bounds, this.depth + 1);\n\n    this.children = [];\n\n    while (allChildren.length > 0) {\n      const child = allChildren.pop();\n      if (child) this.doAdd(child);\n    }\n  }\n\n  /**\n   * Traverses the quad tree returning every quadrant encountered\n   *\n   * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n   */\n  visit(cb: IVisitFunction<T>): void {\n    const finished = Boolean(cb(this));\n\n    if (this.nodes && !finished) {\n      this.nodes.TL.visit(cb);\n      this.nodes.TR.visit(cb);\n      this.nodes.BL.visit(cb);\n      this.nodes.BR.visit(cb);\n    }\n  }\n}\n\nexport class QuadTree<T extends IQuadItem> extends Node<T> {}\n","/**\n * The purpose of this file and processes is to take a layers attributes and\n * instance attributes and optimally pack them into blocks. As it should be known\n * an attribute and a uniform is limited by the hardware in 'blocks'. Each block\n * for webgl 1.0 is 4 floats. If you use a single float and not the rest, you have\n * used an entire block.\n *\n * Thus, we pack down the attributes into appropriate block indices and slots.\n */\n\nimport { IInstanceAttribute, InstanceAttributeSize } from \"../../types\";\nimport { Instance } from \"../../util\";\n\n/**\n * A quick representation of an available block with a convenience method to easily apply\n * metrics to an attribute if it fits.\n */\nclass Block<T extends Instance> {\n  index: number = 0;\n  available: number = 4;\n\n  constructor(blockIndex: number) {\n    this.index = blockIndex;\n  }\n\n  setAttribute(attr: IInstanceAttribute<T>) {\n    if ((attr.size || 0) <= this.available) {\n      attr.block = this.index;\n      attr.blockIndex = 4 - this.available;\n      this.available -= attr.size || 0;\n\n      return true;\n    }\n\n    return false;\n  }\n}\n\n/**\n * This loops through all attributes and ensures each attribute is applied\n */\nfunction ensureSizes<T extends Instance>(attributes: IInstanceAttribute<T>[]) {\n  attributes.forEach(attr => {\n    if (attr.atlas) {\n      attr.size = InstanceAttributeSize.FOUR;\n    }\n\n    // If the size of the attribute is not determiend at this point, we do our best\n    // to find it by whatever means possible\n    if (!attr.size) {\n      try {\n        // We inject a very phoney instance, we don't need accurate data, we will be happy if we get\n        // an array of undefineds which should be in line with the size of the attribute.\n        const check = attr.update(new Instance({}) as T);\n\n        // We see if the output is sane\n        if (check.length > 0 && check.length <= InstanceAttributeSize.FOUR) {\n          attr.size = check.length;\n        }\n      } catch (err) {\n        console.warn(\n          \"The system could not determine the size of the provided attribute. Please provide the size of the attribute:\",\n          attr\n        );\n      }\n    }\n  });\n}\n\n/**\n * This is the packing method that calculates the block and block index best suited for an attribute\n * so a layer developer does not have to worry about it.\n */\nexport function packAttributes<T extends Instance>(\n  attributes: IInstanceAttribute<T>[]\n) {\n  // First make sure each attribute has a size\n  ensureSizes(attributes);\n  // Keep a list of the blocks we have decided needs to be in use\n  const blocks = [new Block(0)];\n\n  // Loop through all attributes and pack em' in\n  attributes.forEach(attr => {\n    // Look for a block that can fit our attribute\n    const block = blocks.find(block => {\n      if (block.setAttribute(attr)) {\n        return Boolean(block);\n      }\n\n      return false;\n    });\n\n    // If our attribute did not fit into any of the existing blocks, then we must create a new block\n    // to stuff our attribute into.\n    if (!block) {\n      const newBlock = new Block(blocks.length);\n      blocks.push(newBlock);\n\n      if (!newBlock.setAttribute(attr)) {\n        console.warn(\n          \"There was a problem packing an attribute into a block. No block would accommodate it:\",\n          attr\n        );\n      }\n    }\n  });\n}\n","import { Instance } from \"../../instance-provider/instance\";\nimport {\n  IEasingInstanceAttribute,\n  IEasingProps,\n  IInstanceAttribute,\n  InstanceAttributeSize\n} from \"../../types\";\nimport { AutoEasingLoopStyle } from \"../../util\";\nimport { EasingProps } from \"../../util/easing-props\";\nimport { ILayerProps, Layer } from \"../layer\";\n\nconst { abs } = Math;\n\nconst BLANK_EASING_PROPS: IEasingProps = {\n  duration: 0,\n  start: [0],\n  end: [0],\n  startTime: 0\n};\n\n/**\n * Tests an attribute to see if it is an easing attribute\n */\nfunction isEasingAttribute<T extends Instance>(\n  attr: any\n): attr is IEasingInstanceAttribute<T> {\n  return Boolean(attr) && attr.easing && attr.size !== undefined;\n}\n\n/**\n * This modifies the instance attributes in a way that produces enough attributes to handle the easing equations\n * being performed on the gpu.\n */\nexport function generateEasingAttributes<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(layer: Layer<T, U>, instanceAttributes: IInstanceAttribute<T>[]) {\n  const usedInstanceAttributes = new Set<number>();\n  const easingAttributes: IEasingInstanceAttribute<T>[] = [];\n\n  // We gather all of the easing attributes first so we can modify the attribute array\n  // On next pass\n  for (const attribute of instanceAttributes) {\n    if (isEasingAttribute(attribute)) {\n      easingAttributes.push(attribute);\n    }\n  }\n\n  const easingIds: { [key: string]: number } = {};\n  layer.easingId = easingIds;\n\n  // Now loop through each easing attribute and generate attributes needed for the easing method\n  for (const attribute of easingAttributes) {\n    const { cpu: easing, loop, uid: providedUID } = attribute.easing;\n    const { name, size, update } = attribute;\n    const easingUID = providedUID;\n\n    // Make our easing ID lookup so instances can access their easing information for higher level\n    // animation control.\n    easingIds[attribute.name] = easingUID;\n\n    // Ensure the AutoEasing method is unique\n    if (usedInstanceAttributes.has(easingUID)) {\n      console.error(\n        \"Undefined behavior occurs if you reuse an IAutoEasingMethod. Please ensure you are using uid() from the util to give the IAutoEasingMethod its uid, or just use the default provided methods\"\n      );\n    }\n\n    // Flag the uid of the easing method as used\n    usedInstanceAttributes.add(easingUID);\n    // We keep this in a scope above the update as we utilize the fact that the attributes will update\n    // In the order they are declared for a single instance. The attributes will all share this information.\n    const attributeDataShare: { values: IEasingProps } = {\n      values: BLANK_EASING_PROPS\n    };\n\n    // Hijack the update from the attribute to a new update method which will\n    // Be able to interact with the values for the easing methodology\n    attribute.update = instance => {\n      // We retrieve properties that we want to be dynamic from the easing equation\n      const {\n        delay: attributeDelay,\n        duration: attributeDuration\n      } = attribute.easing;\n\n      // First get the value that is to be our new destination\n      const end = update(instance);\n      const currentTime = layer.surface.frameMetrics.currentTime;\n\n      // Get the easing values specific to an instance.\n      let values = instance.easing.get(easingUID);\n\n      // If the easing values do not exist yet, make them now\n      if (!values) {\n        values = new EasingProps({\n          duration: attributeDuration,\n          end,\n          start: end,\n          startTime: currentTime\n        });\n\n        // Make sure the instance contains the current easing values\n        instance.easing.set(easingUID, values);\n      }\n\n      // Assign the established values\n      const easingValues = values;\n      let duration = attributeDuration;\n      let delay = attributeDelay;\n\n      if (easingValues.isTimeSet) {\n        duration = easingValues.duration || attributeDuration;\n        delay = easingValues.delay || 0;\n      }\n\n      if (!easingValues.isManualStart) {\n        // Previous position time value\n        let timeValue = 1;\n\n        switch (loop) {\n          // Continuous means we start at 0 and let the time go to infinity\n          case AutoEasingLoopStyle.CONTINUOUS:\n            timeValue = (currentTime - easingValues.startTime) / duration;\n            break;\n\n          // Repeat means going from 0 to 1 then 0 to 1 etc etc\n          case AutoEasingLoopStyle.REPEAT:\n            timeValue = ((currentTime - easingValues.startTime) / duration) % 1;\n            break;\n\n          // Reflect means going from 0 to 1 then 1 to 0 then 0 to 1 etc etc\n          case AutoEasingLoopStyle.REFLECT:\n            const timePassed =\n              (currentTime - easingValues.startTime) / duration;\n            // This is a triangle wave for an input\n            timeValue = abs((timePassed / 2.0) % 1 - 0.5) * 2.0;\n            break;\n\n          // No loop means just linear time\n          case AutoEasingLoopStyle.NONE:\n          default:\n            timeValue = (currentTime - easingValues.startTime) / duration;\n            break;\n        }\n\n        // Now get the value of where our instance currently is located this frame\n        easingValues.start = easing(\n          easingValues.start,\n          easingValues.end,\n          timeValue\n        );\n      }\n\n      // Set the current time as the start time of our animation\n      easingValues.startTime = currentTime + delay;\n      // Set the provided value as our destination\n      easingValues.end = end;\n      // Update the information shared between this attribute and it's children\n      attributeDataShare.values = easingValues;\n\n      return end;\n    };\n\n    // The attribute is going to generate some child attributes\n    attribute.childAttributes = [];\n\n    // Find a slot available for our new start value\n    const startAttr: IInstanceAttribute<T> = {\n      name: `_${name}_start`,\n      parentAttribute: attribute,\n      size,\n      update: _o => attributeDataShare.values.start\n    };\n\n    attribute.childAttributes.push(startAttr);\n    instanceAttributes.push(startAttr);\n\n    // Find a slot available for our new start time\n    const startTimeAttr: IInstanceAttribute<T> = {\n      name: `_${name}_start_time`,\n      parentAttribute: attribute,\n      size: InstanceAttributeSize.ONE,\n      update: _o => [attributeDataShare.values.startTime]\n    };\n\n    attribute.childAttributes.push(startTimeAttr);\n    instanceAttributes.push(startTimeAttr);\n\n    // Find a slot available for our duration\n    const durationAttr: IInstanceAttribute<T> = {\n      name: `_${name}_duration`,\n      parentAttribute: attribute,\n      size: InstanceAttributeSize.ONE,\n      update: _o => [attributeDataShare.values.duration]\n    };\n\n    attribute.childAttributes.push(durationAttr);\n    instanceAttributes.push(durationAttr);\n  }\n}\n","import { DataBounds } from \"../util/data-bounds\";\nimport { Bounds } from \"./bounds\";\n\n/**\n * Anytime this is used to express bounds of an object, it is expected\n * to behave like CSS styling with absolute positioning.\n *\n * Setting a left and a right will auto calculate width (setting width takes precedence)\n *\n * You can set numbers to a %. If no % is present all other characters will be ignored\n * (px, em, and other dimensions will not be supported...just px by default unless %)\n */\nexport type AbsolutePosition = {\n  bottom?: number | string;\n  height?: number | string;\n  left?: number | string;\n  right?: number | string;\n  top?: number | string;\n  width?: number | string;\n};\n\nfunction value(val: number | string, ref: number, scaleRatio: number) {\n  const parse = `${val}`;\n  const num = parseFloat(parse);\n\n  if (isNaN(num)) {\n    return 0;\n  }\n\n  // If this is a percentage use the reference as the num to multiply against\n  if (parse.indexOf(\"%\") > -1) {\n    return num / 100.0 * ref;\n  }\n\n  return num * scaleRatio;\n}\n\n/**\n * This evaluates an absolute position with a reference to produce meaningful bounds.\n *\n * The scaleRatio provided should be available in or for percents to have the same weighting\n * as whole number values.\n */\nexport function getAbsolutePositionBounds<T>(\n  item: AbsolutePosition,\n  reference: Bounds,\n  scaleRatio: number\n): DataBounds<T> {\n  if (reference.width === 0 || reference.height === 0) {\n    console.warn(\n      \"An AbsolutePosition evaluated to invalid dimensions.\",\n      \"Please ensure that the object provided and the reference has valid dimensions\",\n      \"to produce dimensions with width and height that are non-zero.\",\n      \"item:\",\n      item,\n      \"reference:\",\n      reference.toString()\n    );\n  }\n\n  const bounds = DataBounds.emptyBounds<T>();\n  let width;\n  let height;\n\n  // Calculate the horizontal values\n  if (item.width) {\n    bounds.width = value(item.width, reference.width, scaleRatio);\n\n    if (item.left !== undefined) {\n      bounds.x = value(item.left, reference.width, scaleRatio);\n    } else if (item.right !== undefined) {\n      bounds.x =\n        reference.width -\n        value(item.right, reference.width, scaleRatio) -\n        bounds.width;\n    }\n  } else {\n    const left = value(item.left || 0, reference.width, scaleRatio);\n    const right =\n      reference.width - value(item.right || 0, reference.width, scaleRatio);\n    width = right - left;\n\n    if (width < 0) {\n      console.warn(\n        \"An AbsolutePosition evaluated to invalid dimensions.\",\n        \"Please ensure that the object provided and the reference has valid dimensions\",\n        \"to produce dimensions with width and height that are greater than zero.\",\n        \"item:\",\n        item,\n        \"reference:\",\n        reference.toString()\n      );\n    }\n\n    bounds.x = left;\n    bounds.width = width;\n  }\n\n  // Calculate the vertical values\n  if (item.height) {\n    bounds.height = value(item.height, reference.height, scaleRatio);\n\n    if (item.top !== undefined) {\n      bounds.y = value(item.top, reference.height, scaleRatio);\n    } else if (item.bottom !== undefined) {\n      bounds.y =\n        reference.height -\n        value(item.bottom, reference.height, scaleRatio) -\n        bounds.height;\n    }\n  } else {\n    const top = value(item.top || 0, reference.height, scaleRatio);\n    const bottom =\n      reference.height - value(item.bottom || 0, reference.height, scaleRatio);\n    height = bottom - top;\n\n    if (height === undefined || height < 0) {\n      console.warn(\n        \"An AbsolutePosition evaluated to invalid dimensions.\",\n        \"Please ensure that the object provided and the reference has valid dimensions\",\n        \"to produce dimensions with width and height that are greater than zero.\",\n        \"item:\",\n        item,\n        \"reference:\",\n        reference.toString()\n      );\n    }\n\n    bounds.y = top;\n    bounds.height = height;\n  }\n\n  if (\n    bounds.width === 0 ||\n    bounds.height === 0 ||\n    isNaN(bounds.x + bounds.y + bounds.width + bounds.height)\n  ) {\n    bounds.x = 0;\n    bounds.y = 0;\n    bounds.width = reference.width;\n    bounds.height = reference.height;\n  }\n\n  return bounds;\n}\n","import { IPoint } from \"../../primitives/point\";\nimport { IProjection, PickType } from \"../../types\";\nimport { EventManager } from \"../event-manager\";\nimport { Layer } from \"../layer\";\nimport { LayerSurface } from \"../layer-surface\";\nimport {\n  IDragMetrics,\n  IMouseInteraction,\n  SceneView\n} from \"../mouse-event-manager\";\n\nfunction isDefined<T>(val: T | null | undefined): val is T {\n  return Boolean(val);\n}\n\n/**\n * This class is an injected event manager for the surface, it specifically handles taking in mouse events intended for view interactions\n * and broadcasts them to the layers that have picking enabled, thus allowing the layers to respond to\n * mouse view locations and broadcast Instance interactions based on the interaction with the View the layer is a part of\n *\n * In Summary: This is an adapter that takes in interactions to the views and injects those events into the layers associated with\n * the views so that the layers can translate the events to gestures.\n */\nexport class LayerMouseEvents extends EventManager {\n  /** This tracks which views have the mouse over them so we can properly broadcast view is out events */\n  isOver = new Map<SceneView, boolean>();\n  /** This is the surface this manager is aiding with broadcasting events to layers */\n  sceneViews: SceneView[];\n  /**\n   * This is the surface this LayerMouseEvent Controller is operating on behalf of. We use this to trigger,\n   * pre-layer processing items, such as color pick narrowing prior to the Layers receiving the event.\n   */\n  surface: LayerSurface;\n\n  constructor(surface: LayerSurface) {\n    super();\n    this.surface = surface;\n    this.sceneViews = surface.sceneViews;\n  }\n\n  getSceneViewsUnderMouse(e: IMouseInteraction) {\n    const sceneViewByViewId = new Map<string, SceneView>();\n\n    // Map the scene views by the view's identifiers\n    for (const sceneView of this.sceneViews) {\n      sceneViewByViewId.set(sceneView.view.id, sceneView);\n    }\n\n    // Now retrieve and convert each view under the mouse to the scene view it coincides with\n    return e.viewsUnderMouse\n      .map(viewItem => sceneViewByViewId.get(viewItem.view.id))\n      .filter(isDefined);\n  }\n\n  getMouseByViewId(e: IMouseInteraction) {\n    // This is the mouse position for the provided view in view space\n    const viewMouseByViewId = new Map<string, IPoint>();\n\n    for (const viewItem of e.viewsUnderMouse) {\n      viewMouseByViewId.set(viewItem.view.id, viewItem.mouse);\n    }\n\n    return viewMouseByViewId;\n  }\n\n  handleClick(e: IMouseInteraction, button: number) {\n    this.handleInteraction(e, (layer, view, mouse) =>\n      layer.interactions.handleMouseClick(view, mouse, button)\n    );\n  }\n\n  handleDrag(e: IMouseInteraction, _drag: IDragMetrics) {\n    this.handleInteraction(e, (layer, view, mouse) =>\n      layer.interactions.handleMouseDrag(view, mouse)\n    );\n  }\n\n  handleInteraction(\n    e: IMouseInteraction,\n    callback: (layer: Layer<any, any>, view: IProjection, mouse: IPoint) => void\n  ) {\n    // Get all of the scenes under the mouse\n    const sceneViews = this.getSceneViewsUnderMouse(e);\n    // Get a lookup of a view id to the mouse position in the view\n    const viewMouseByViewId = this.getMouseByViewId(e);\n\n    // For every view of every scene, we must tell it's layers it's world space is receiving mouse interactions\n    for (const sceneView of sceneViews) {\n      this.handleSceneView(sceneView, viewMouseByViewId, callback);\n    }\n\n    return sceneViews;\n  }\n\n  handleMouseDown(e: IMouseInteraction, button: number) {\n    this.handleInteraction(e, (layer, view, mouse) =>\n      layer.interactions.handleMouseDown(view, mouse, button)\n    );\n  }\n\n  handleMouseUp(e: IMouseInteraction, button: number) {\n    this.handleInteraction(e, (layer, view, mouse) =>\n      layer.interactions.handleMouseUp(view, mouse, button)\n    );\n  }\n\n  handleMouseOver(_e: IMouseInteraction) {\n    // We let the mouse move event handle the registration of moused over views\n  }\n\n  handleMouseOut(e: IMouseInteraction) {\n    // Get a lookup of a view id to the mouse position in the view\n    const viewMouseByViewId = this.getMouseByViewId(e);\n    const screen = e.screen.mouse;\n\n    // All views that are moused over should no longer be considered over and broadcast a mouse out\n    this.isOver.forEach((_flag, sceneView) => {\n      // Since we are leaving the view we must make the view relative cooridinates fromt he screen space coords\n      viewMouseByViewId.set(\n        sceneView.view.id,\n        sceneView.view.screenToView(screen)\n      );\n\n      this.handleSceneView(sceneView, viewMouseByViewId, (layer, view, mouse) =>\n        layer.interactions.handleMouseOut(view, mouse)\n      );\n    });\n\n    // Nothing is over anymore\n    this.isOver.clear();\n  }\n\n  handleMouseMove(e: IMouseInteraction) {\n    if (this.surface) {\n      this.surface.updateColorPickRange(\n        [e.screen.mouse.x, e.screen.mouse.y],\n        e.viewsUnderMouse.map(v => v.view)\n      );\n    }\n\n    // Get all of the scenes we have interacted with, and broadcast a move event for each\n    const allSceneViews = this.handleInteraction(e, (layer, view, mouse) =>\n      layer.interactions.handleMouseMove(view, mouse)\n    );\n    // Get a lookup of a view id to the mouse position in the view\n    const viewMouseByViewId = this.getMouseByViewId(e);\n    // Get the position of the mouse on the screen\n    const screen = e.screen.mouse;\n\n    // For quick lookups map all of the current SceneViews that are over\n    const currentSceneViews = new Map<SceneView, boolean>();\n    allSceneViews.forEach(v => currentSceneViews.set(v, true));\n\n    // Detect which of the views are newly over\n    currentSceneViews.forEach((_flag, sceneView) => {\n      if (!this.isOver.get(sceneView)) {\n        this.handleSceneView(\n          sceneView,\n          viewMouseByViewId,\n          (layer, view, mouse) =>\n            layer.interactions.handleMouseOver(view, mouse)\n        );\n      }\n    });\n\n    // Detect which of the views are no longer over\n    this.isOver.forEach((_flag, sceneView) => {\n      if (!currentSceneViews.get(sceneView)) {\n        // Since these views were not interacted with, we must create the mouse interaction position\n        viewMouseByViewId.set(\n          sceneView.view.id,\n          sceneView.view.screenToView(screen)\n        );\n\n        this.handleSceneView(\n          sceneView,\n          viewMouseByViewId,\n          (layer, view, mouse) => layer.interactions.handleMouseOut(view, mouse)\n        );\n      }\n    });\n\n    // Update the current views that are over to the currently over views for next event\n    this.isOver = currentSceneViews;\n  }\n\n  handleSceneView(\n    sceneView: SceneView,\n    viewMouseByViewId: Map<string, IPoint>,\n    callback: (layer: Layer<any, any>, view: IProjection, mouse: IPoint) => void\n  ) {\n    const view = sceneView.view;\n    const mouse = viewMouseByViewId.get(view.id);\n\n    if (mouse) {\n      for (const layer of sceneView.scene.layers) {\n        if (layer.picking && layer.picking.type !== PickType.NONE) {\n          callback(layer, view, mouse);\n        }\n      }\n    }\n  }\n\n  handleWheel(_e: IMouseInteraction) {\n    // TODO: This may need to be implemented. As of right now, there is no particular benefit\n  }\n}\n","import { IColorPickingData } from \"../types\";\nimport { Vec2 } from \"./vector\";\n\n/**\n * This analyzes the rendered data for color picking and outputs the metrics and data needed\n * for the operation.\n */\nexport function analyzeColorPickingRendering(\n  mouse: Vec2,\n  data: Uint8Array,\n  width: number,\n  height: number\n) {\n  const pickingData: IColorPickingData = {\n    allColors: [],\n    colorData: data,\n    dataHeight: height,\n    dataWidth: width,\n    mouse,\n    nearestColor: 0\n  };\n\n  const uniqueColors = new Map<number, boolean>();\n  let pixelIndex = 0;\n  const colors: number[][] = [];\n  const mouseX: number = width / 2;\n  const mouseY: number = height / 2;\n\n  let nearestColor = 0x000000;\n  let distance = Number.MAX_SAFE_INTEGER;\n\n  for (let i = 0; i < height; ++i) {\n    const row: number[] = [];\n    colors.push(row);\n\n    for (let k = 0; k < width; ++k) {\n      const r = data[pixelIndex];\n      const g = data[pixelIndex + 1];\n      const b = data[pixelIndex + 2];\n      pixelIndex += 4;\n\n      const color = (r << 16) | (g << 8) | b;\n      uniqueColors.set(color, true);\n      row.push(color);\n\n      // If the color is not black, let's test the distance against currnet nearest color\n      if (color !== 0x000000) {\n        const dx = k - mouseX;\n        const dy = i - mouseY;\n        const testDistance = dx * dx + dy * dy;\n\n        if (testDistance < distance) {\n          distance = testDistance;\n          nearestColor = color;\n        }\n      }\n    }\n  }\n\n  // Apply all o fthe unique colors that were discovered within the rendering\n  pickingData.allColors = Array.from(uniqueColors.keys());\n  // The nearest color will be the element in the middle of the array of colors\n  pickingData.nearestColor = nearestColor;\n\n  return pickingData;\n}\n","module.exports = \"// This portion is where the shader assigns the picking color that gets passed to the fragment shader\\n  _picking_color_pass_ = _pickingColor;\\n\"","module.exports = \"lowp vec4 setColor(vec4 color) {\\n  gl_FragColor = color;\\n  return gl_FragColor;\\n}\\n\"","module.exports = \"precision lowp float;\\n\\n// This contains the method required to be used on a fragment shader when a layer desires to use\\n// PickType.SINGLE (color picking).\\nvarying vec4 _picking_color_pass_;\\n\\nvec4 setColor(vec4 color) {\\n  gl_FragColor = mix(color, _picking_color_pass_, pickingActive);\\n\\n  if (color.a == 0.0) {\\n    discard;\\n  }\\n\\n  return gl_FragColor;\\n}\\n\"","module.exports = \"// This is the varying auto generated for the fragment shader that is needed in the vertex shader to pass the\\n// color for the instance through to the fragment shader\\nvarying vec4 _picking_color_pass_;\\n\"","module.exports = \"// These are projection methods utilizing the simpler camera breakdown approach\\n\\nvec3 cameraSpace(vec3 world) {\\n  return (world + cameraOffset) * cameraScale;\\n}\\n\\nvec3 cameraSpaceSize(vec3 worldSize) {\\n  return worldSize * cameraScale;\\n}\\n\\nvec4 clipSpace(vec3 world) {\\n  return vec4(((projection * modelView) * vec4(cameraSpace(world), 1.0)).xyz, 1.0);\\n}\\n\\nvec4 clipSpaceSize(vec3 worldSize) {\\n  return vec4(((projection * modelView) * vec4(cameraSpaceSize(worldSize), 0.0)).xyz, 1.0);\\n}\\n\"","module.exports = \"// When instancing is enabled, it causes a major list of uniforms to be generated\\n// it also generates a massive search tree to retrieve the correct unforms in question.\\n${instanceUniformDeclarations}\\n\\n// This is the uniforms provided by the system along with the uniforms created by the layer\\n${layerUniforms}\\n\\n// This is the attributes generated for vertex attributes\\n${vertexAttributes}\\n\\n// This is the methods and set up needed to retrieve a block of data for an instance\\n${instanceDataRetrieval}\\n\\n// This is the methods generated for the automated easing of attributes\\n${easingMethods}\\n\"","module.exports = \"// This is the injected dereferencing of the instance attributes\\n  ${instanceDestructuring}\\n\\n  // This is a special injected instance attribute. It lets the system\\n  // control specific instances ability to draw, which allows the backend\\n  // system greater control on how it optimizes draw calls and it's buffers.\\n  if (_active == 0.0) {\\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n\\n    // Quick exit to prevent any geometry from arising from the instance\\n    return;\\n  }\\n\\n  ${picking}\\n\"","module.exports = \"precision highp float;\\n\\n// This is the fragment shader generated by the system\\n${layerUniforms}\\n\\n${picking}\\n\\n// --------------- The fragment shader provided by the layer ------------------\\n${shader}\\n\"","module.exports = \"// This is the vertex shader generated by the system\\n${shaderInput}\\n${projectionMethods}\\n${picking}\\n// --------------- Vertex shader provided by the layer -----------------\\n${shader}\\n\"","module.exports = \"int instanceSize = ${instanceBlockCount};\\n\\nvec4 getBlock(int index, int instanceIndex) {\\n  return instanceData[(instanceSize * instanceIndex) + index];\\n}\\n\"","import * as Three from \"three\";\nimport { Instance } from \"../../instance-provider/instance\";\nimport { Layer } from \"../../surface/layer\";\nimport { LayerBufferType } from \"../../surface/layer-processing/layer-buffer-type\";\nimport {\n  IInstanceAttribute,\n  IInstancingUniform,\n  InstanceAttributeSize\n} from \"../../types\";\nimport { AutoEasingLoopStyle } from \"../../util/auto-easing-method\";\nimport { shaderTemplate } from \"../../util/shader-templating\";\nimport { templateVars } from \"../template-vars\";\nimport { makeInstanceUniformNameArray } from \"./make-instance-uniform-name\";\n\nconst instanceRetrievalArrayFragment = require(\"../fragments/instance-retrieval-array.vs\");\n\n/** Defines the elements for destructuring out of a vector */\nconst VECTOR_COMPONENTS = [\"x\", \"y\", \"z\", \"w\"];\n\n/** Converts a size to a shader type */\nconst sizeToType: { [key: number]: string } = {\n  1: \"float\",\n  2: \"vec2\",\n  3: \"vec3\",\n  4: \"vec4\",\n  9: \"mat3\",\n  16: \"mat4\",\n  /** This is the special case for instance attributes that want an atlas resource */\n  99: \"vec4\"\n};\n\n/**\n * This sorts attributes specific to how they need to be destructured. For example:\n * easing attributes MUST appear AFTER all of the specially integrated attributes that were generated\n * such as start times and durations.\n */\nfunction orderByPriority(\n  a: IInstanceAttribute<any>,\n  b: IInstanceAttribute<any>\n) {\n  if (a.easing && !b.easing) return 1;\n  return -1;\n}\n\nexport function makeUniformArrayDeclaration(totalBlocks: number) {\n  return {\n    fragment: `uniform vec4 ${makeInstanceUniformNameArray()}[${totalBlocks}];`,\n    materialUniforms: [\n      {\n        name: makeInstanceUniformNameArray(),\n        type: \"4fv\",\n        value: new Array(totalBlocks)\n          .fill(0)\n          .map(() => new Three.Vector4(0, 0, 0, 0))\n      }\n    ] as IInstancingUniform[]\n  };\n}\n\nexport function makeInstanceRetrievalArray(blocksPerInstance: number) {\n  const templateOptions: { [key: string]: string } = {};\n  templateOptions[templateVars.instanceBlockCount] = `${blocksPerInstance}`;\n\n  const required = {\n    name: \"makeInstanceRetrievalArray\",\n    values: [templateVars.instanceBlockCount]\n  };\n\n  const results = shaderTemplate({\n    options: templateOptions,\n    required,\n    shader: instanceRetrievalArrayFragment\n  });\n\n  return results.shader;\n}\n\nexport function makeInstanceDestructuringArray<T extends Instance>(\n  layer: Layer<T, any>,\n  instanceAttributes: IInstanceAttribute<T>[],\n  blocksPerInstance: number\n) {\n  let out = \"\";\n\n  const orderedAttributes = instanceAttributes.slice(0).sort(orderByPriority);\n\n  if (layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE) {\n    out = instanceAttributeDestructuring(orderedAttributes);\n  } else {\n    out = uniformInstancingDestructuring(orderedAttributes, blocksPerInstance);\n  }\n\n  return out;\n}\n\nfunction instanceAttributeDestructuring<T extends Instance>(\n  orderedAttributes: IInstanceAttribute<T>[]\n) {\n  let out = \"\";\n\n  orderedAttributes.forEach(attribute => {\n    // If this is the source easing attribute, we must add it in as an eased method along with a calculation for the\n    // Easing interpolation time value based on the current time and the injected start time of the change.\n    if (attribute.easing && attribute.size) {\n      // Make the time calculation for the easing equation\n      out += makeAutoEasingTiming(attribute);\n\n      out += `  ${sizeToType[attribute.size]} ${attribute.name} = ${\n        attribute.easing.methodName\n      }(_${attribute.name}_start, _${attribute.name}_end, _${\n        attribute.name\n      }_time);\\n`;\n    }\n  });\n\n  return out;\n}\n\nfunction uniformInstancingDestructuring<T extends Instance>(\n  orderedAttributes: IInstanceAttribute<T>[],\n  blocksPerInstance: number\n) {\n  let out = \"int instanceIndex = int(instance);\";\n\n  // Generate the blocks\n  for (let i = 0; i < blocksPerInstance; ++i) {\n    out += `  vec4 block${i} = getBlock(${i}, instanceIndex);\\n`;\n  }\n\n  orderedAttributes.forEach(attribute => {\n    const block = attribute.block;\n\n    // If this is the source easing attribute, we must add it in as an eased method along with a calculation for the\n    // Easing interpolation time value based on the current time and the injected start time of the change.\n    if (attribute.easing && attribute.size) {\n      if (attribute.size === InstanceAttributeSize.FOUR) {\n        out += `  ${sizeToType[attribute.size]} _${\n          attribute.name\n        }_end = block${block};\\n`;\n      } else {\n        out += `  ${sizeToType[attribute.size || 1]} _${\n          attribute.name\n        }_end = block${block}.${makeVectorSwizzle(\n          attribute.blockIndex || 0,\n          attribute.size || 1\n        )};\\n`;\n      }\n\n      // Generate the proper timing calculation for the easing involved\n      out += makeAutoEasingTiming(attribute);\n\n      out += `  ${sizeToType[attribute.size]} ${attribute.name} = ${\n        attribute.easing.methodName\n      }(_${attribute.name}_start, _${attribute.name}_end, _${\n        attribute.name\n      }_time);\\n`;\n    } else if (attribute.size === InstanceAttributeSize.FOUR) {\n      // If we have a size the size of a block, then don't swizzle the vector\n      out += `  ${sizeToType[attribute.size]} ${\n        attribute.name\n      } = block${block};\\n`;\n    } else if (attribute.atlas) {\n      // If the attribute is an atlas, then we use the special ATLAS size and don't swizzle the vector\n      out += `  ${sizeToType[InstanceAttributeSize.ATLAS]} ${\n        attribute.name\n      } = block${block};\\n`;\n    } else {\n      // Do normal destructuring with any other size and type\n      out += `  ${sizeToType[attribute.size || 1]} ${\n        attribute.name\n      } = block${block}.${makeVectorSwizzle(\n        attribute.blockIndex || 0,\n        attribute.size || 1\n      )};\\n`;\n    }\n  });\n\n  return out;\n}\n\nfunction makeAutoEasingTiming<T extends Instance>(\n  attribute: IInstanceAttribute<T>\n) {\n  if (!attribute.easing) {\n    return;\n  }\n\n  let out = \"\";\n\n  // These are common values across all easing loop styles\n  const time = `_${attribute.name}_time`;\n  const duration = `_${attribute.name}_duration`;\n  const startTime = `_${attribute.name}_start_time`;\n\n  switch (attribute.easing.loop) {\n    // Continuous means letting the time go from 0 to infinity\n    case AutoEasingLoopStyle.CONTINUOUS: {\n      out += `  float ${time} = (currentTime - ${startTime}) / ${duration};\\n`;\n      break;\n    }\n\n    // Repeat means going from 0 to 1 then 0 to 1 etc etc\n    case AutoEasingLoopStyle.REPEAT: {\n      out += `  float ${time} = clamp(fract((currentTime - ${startTime}) / ${duration}), 0.0, 1.0);\\n`;\n      break;\n    }\n\n    // Reflect means going from 0 to 1 then 1 to 0 then 0 to 1 etc etc\n    case AutoEasingLoopStyle.REFLECT: {\n      const timePassed = `_${attribute.name}_timePassed`;\n      const pingPong = `_${attribute.name}_pingPong`;\n\n      // Get the time passed in a linear fashion\n      out += `  float ${timePassed} = (currentTime - ${startTime}) / ${duration};\\n`;\n      // Make a triangle wave from the time passed to ping pong the value\n      out += `  float ${pingPong} = abs((fract(${timePassed} / 2.0)) - 0.5) * 2.0;\\n`;\n      // Ensure we're clamped to the right values\n      out += `  float ${time} = clamp(${pingPong}, 0.0, 1.0);\\n`;\n      break;\n    }\n\n    // No loop means just linear time\n    case AutoEasingLoopStyle.NONE:\n    default: {\n      out += `  float ${time} = clamp((currentTime - ${startTime}) / ${duration}, 0.0, 1.0);\\n`;\n      break;\n    }\n  }\n\n  return out;\n}\n\nfunction makeVectorSwizzle(start: number, size: number) {\n  return VECTOR_COMPONENTS.slice(start, start + size).join(\"\");\n}\n","/**\n * The goal of this file is to take in model attributes and instance attributes specified\n * and inject the proper attributes into the shaders so the implementor of the shader does\n * not worry about syncing attribute and uniform names between the JS\n */\nimport { Instance } from \"../../instance-provider/instance\";\nimport { ILayerProps, Layer } from \"../../surface/layer\";\nimport { LayerBufferType } from \"../../surface/layer-processing/layer-buffer-type\";\nimport {\n  IInstanceAttribute,\n  IInstancingUniform,\n  InstanceAttributeSize,\n  IShaders,\n  IUniform,\n  IVertexAttribute,\n  PickType,\n  ShaderInjectionTarget\n} from \"../../types\";\nimport {\n  IShaderTemplateRequirements,\n  shaderTemplate\n} from \"../../util/shader-templating\";\nimport { WebGLStat } from \"../../util/webgl-stat\";\nimport { templateVars } from \"../template-vars\";\nimport { instanceAttributeShaderName } from \"./instance-attribute-shader-name\";\nimport {\n  makeInstanceDestructuringArray,\n  makeInstanceRetrievalArray,\n  makeUniformArrayDeclaration\n} from \"./uniform-instance-block-array\";\n\n// These are all of the necessary fragments that will comprise our shader that is generated\nconst vertexShaderComposition = require(\"../fragments/vertex-shader-composition.vs\");\nconst fragmentShaderComposition = require(\"../fragments/fragment-shader-composition.fs\");\nconst instanceDestructuringArray = require(\"../fragments/instance-destructuring-array.vs\");\nconst shaderInput = require(\"../fragments/shader-input.vs\");\nconst projectionMethods = require(\"../fragments/projection-methods.vs\");\n\n// Constants\n\n/**\n * Defines how many floats are available in a uniform block\n * What is a uniform block you ask? Why let me tell you! It is how opengl stores and communicates uniforms\n * to the GPU. Whenever you declare a uniform, it will use a hunk of memory. You can see how many uniforms\n * a GPU can have via the paramter MAX_VERTEX_UNIFORM_VECTORS. The number returned is the number of blocks\n * we can use for uniforms in the vertex shader. A BLOCK is an entire vec4.\n *\n * When you declare a uniform in your shader, it will use an entire BLOCK at the MINIMUM.\n *\n * A uniform float uses 1 block. vec2 uses 1 block. vec3 uses one block. vec4 uses one block.\n * mat4 uses 4 blocks. mat3 uses 3 blocks.\n *\n * etc etc.\n */\nconst MAX_USE_PER_BLOCK = 4;\n\n/** Converts a size to a shader type */\nconst sizeToType: { [key: number]: string } = {\n  1: \"float\",\n  2: \"vec2\",\n  3: \"vec3\",\n  4: \"vec4\",\n  9: \"mat3\",\n  16: \"mat4\",\n  99: \"sampler2D\"\n};\n\nfunction calculateUniformBlockUseage(uniforms: IUniform[]) {\n  let count = 0;\n\n  for (let i = 0, end = uniforms.length; i < end; ++i) {\n    count += Math.ceil(uniforms[i].size / 4);\n  }\n\n  return count;\n}\n\nexport interface IInjectionDetails {\n  fs: string;\n  materialUniforms: IInstancingUniform[];\n  maxInstancesPerBuffer: number;\n  vs: string;\n}\n\n/**\n * This method is the main algorithm for piecing together all of the attributes necessary\n * and injecting them into the shaders.\n *\n * @param shaders\n * @param vertexAttributes\n * @param instanceAttributes\n */\nexport function injectFragments<T extends Instance, U extends ILayerProps<T>>(\n  layer: Layer<T, U>,\n  shaders: IShaders,\n  vertexAttributes: IVertexAttribute[],\n  instanceAttributes: IInstanceAttribute<any>[],\n  uniforms: IUniform[]\n): IInjectionDetails {\n  const shaderInputMetrics = generateShaderInputs(\n    layer,\n    vertexAttributes,\n    instanceAttributes,\n    uniforms\n  );\n\n  let templateOptions: { [key: string]: string } = {\n    [templateVars.projectionMethods]: generateProjectionMethods(),\n    [templateVars.picking]: generateVertexPicking(layer),\n    [templateVars.shaderInput]: shaderInputMetrics.fragment,\n    [templateVars.shader]: generateVertexShader(\n      layer,\n      shaders,\n      instanceAttributes,\n      shaderInputMetrics.metrics.maxInstancesPerBuffer,\n      shaderInputMetrics.metrics.blocksPerInstance\n    )\n  };\n\n  let required = {\n    name: \"vertex shader composition\",\n    values: [\n      templateVars.projectionMethods,\n      templateVars.shaderInput,\n      templateVars.shader\n    ]\n  };\n\n  // If our layer is using color picking, then we must require the shader to include the ${picking} annotation\n  // To receive the fragment picking method\n  if (layer.picking.type === PickType.SINGLE) {\n    required.values.push(templateVars.picking);\n  }\n\n  const vertexShaderResults = shaderTemplate({\n    options: templateOptions,\n    required,\n    shader: vertexShaderComposition\n  });\n\n  templateOptions = {\n    [templateVars.layerUniforms]: generateUniforms(\n      uniforms,\n      ShaderInjectionTarget.FRAGMENT\n    ),\n    [templateVars.shader]: generateFragmentShader(shaders),\n    [templateVars.picking]: generateFragmentPickingMethod(layer)\n  };\n\n  required = {\n    name: \"fragment shader composition\",\n    values: [templateVars.layerUniforms, templateVars.shader]\n  };\n\n  // If our layer is using color picking, then we must require the shader to include the ${picking} annotation\n  // To receive the fragment picking method\n  if (layer.picking.type === PickType.SINGLE) {\n    required.values.push(templateVars.picking);\n  }\n\n  const fragmentShaderResults = shaderTemplate({\n    options: templateOptions,\n    required,\n    shader: fragmentShaderComposition\n  });\n\n  return {\n    fs: fragmentShaderResults.shader,\n    materialUniforms: shaderInputMetrics.materialUniforms,\n    maxInstancesPerBuffer: shaderInputMetrics.metrics.maxInstancesPerBuffer,\n    vs: vertexShaderResults.shader\n  };\n}\n\n/**\n * Creates the projection method fragment\n */\nfunction generateProjectionMethods() {\n  const templateOptions: { [key: string]: string } = {};\n  const required: IShaderTemplateRequirements = {\n    name: \"projection methods\",\n    values: []\n  };\n\n  const results = shaderTemplate({\n    options: templateOptions,\n    required,\n    shader: projectionMethods\n  });\n\n  return results.shader;\n}\n\n/**\n * Generates the fragments for shader IO such as vertex and instance attributes\n */\nfunction generateShaderInputs<T extends Instance, U extends ILayerProps<T>>(\n  layer: Layer<T, U>,\n  vertexAttributes: IVertexAttribute[],\n  instanceAttributes: IInstanceAttribute<T>[],\n  uniforms: IUniform[]\n) {\n  const templateOptions: { [key: string]: string } = {};\n\n  let instancingInfo;\n\n  if (layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE) {\n    instancingInfo = {\n      materialUniforms: [],\n      metrics: {\n        blocksPerInstance: 0,\n        maxInstancesPerBuffer: 0\n      }\n    };\n\n    templateOptions.instanceDataRetrieval = \"\";\n    templateOptions.instanceUniformDeclarations = \"\";\n  } else {\n    instancingInfo = generateInstanceDataLookupOptions(\n      layer,\n      templateOptions,\n      instanceAttributes,\n      uniforms\n    );\n  }\n\n  const additionalOptions: { [key: string]: string } = {\n    [templateVars.layerUniforms]: generateUniforms(\n      uniforms,\n      ShaderInjectionTarget.VERTEX\n    ),\n    [templateVars.vertexAttributes]: generateVertexAttributes(\n      layer,\n      vertexAttributes,\n      instanceAttributes\n    ),\n    [templateVars.easingMethods]: generateEasingMethods(instanceAttributes)\n  };\n\n  Object.assign(templateOptions, additionalOptions);\n\n  const required: IShaderTemplateRequirements = {\n    name: \"shader input\",\n    values: [\n      templateVars.instanceDataRetrieval,\n      templateVars.instanceUniformDeclarations,\n      templateVars.layerUniforms,\n      templateVars.vertexAttributes,\n      templateVars.easingMethods\n    ]\n  };\n\n  const results = shaderTemplate({\n    options: templateOptions,\n    required,\n    shader: shaderInput\n  });\n\n  return {\n    fragment: results.shader,\n    materialUniforms: instancingInfo.materialUniforms,\n    metrics: instancingInfo.metrics\n  };\n}\n\n/**\n * Generates the easing methods for the Shader specified by each attribute\n */\nfunction generateEasingMethods<T extends Instance>(\n  instanceAttributes: IInstanceAttribute<T>[]\n) {\n  const methods = new Map<string, Map<InstanceAttributeSize, string>>();\n  let out = \"\";\n\n  // First dedupe the methods needed by their method name\n  instanceAttributes.forEach(attribute => {\n    if (attribute.easing && attribute.size) {\n      let methodSizes = methods.get(attribute.easing.methodName);\n\n      if (!methodSizes) {\n        methodSizes = new Map<InstanceAttributeSize, string>();\n        methods.set(attribute.easing.methodName, methodSizes);\n      }\n\n      methodSizes.set(attribute.size, attribute.easing.gpu);\n    }\n  });\n\n  const required: IShaderTemplateRequirements = {\n    name: \"Easing Method Generation\",\n    values: [templateVars.easingMethod]\n  };\n\n  // Now generate the full blown method for each element. We create overloaded methods for\n  // Each method name for each vector size required\n  methods.forEach(\n    (methodSizes: Map<InstanceAttributeSize, string>, methodName: string) => {\n      methodSizes.forEach((method, size) => {\n        const sizeType = sizeToType[size];\n\n        const templateOptions: { [key: string]: string } = {\n          [templateVars.easingMethod]: `${sizeType} ${methodName}(${sizeType} start, ${sizeType} end, float t)`,\n          [templateVars.T]: `${sizeType}`\n        };\n\n        const results = shaderTemplate({\n          options: templateOptions,\n          required,\n          shader: method\n        });\n\n        out += `${results.shader}\\n`;\n      });\n    }\n  );\n\n  return out;\n}\n\n/**\n * Generates all of the uniforms that are provided by the shader IO.\n */\nfunction generateUniforms(\n  uniforms: IUniform[],\n  injectionType: ShaderInjectionTarget\n) {\n  let out = \"\";\n  const injection = injectionType || ShaderInjectionTarget.VERTEX;\n\n  uniforms.forEach(uniform => {\n    uniform.shaderInjection =\n      uniform.shaderInjection || ShaderInjectionTarget.VERTEX;\n\n    if (\n      uniform.shaderInjection === injection ||\n      uniform.shaderInjection === ShaderInjectionTarget.ALL\n    ) {\n      out += `uniform ${uniform.qualifier || \"\"}${\n        uniform.qualifier ? \" \" : \"\"\n      }${sizeToType[uniform.size]} ${uniform.name};\\n`;\n    }\n  });\n\n  return out;\n}\n\n/**\n * This takes in the layer's vertex shader and transforms any required templating within the\n * shader.\n */\nfunction generateVertexShader<T extends Instance, U extends ILayerProps<T>>(\n  layer: Layer<T, U>,\n  shaders: IShaders,\n  instanceAttributes: IInstanceAttribute<T>[],\n  _maxInstancesPerBuffer: number,\n  blocksPerInstance: number\n) {\n  const templateOptions: { [key: string]: string } = {\n    [templateVars.attributes]: makeInstanceAttributeReferences(\n      layer,\n      instanceAttributes,\n      blocksPerInstance\n    )\n  };\n\n  const required = {\n    name: \"layer vertex shader\",\n    values: [templateVars.attributes]\n  };\n\n  const results = shaderTemplate({\n    options: templateOptions,\n    required,\n    shader: shaders.vs\n  });\n\n  return results.shader;\n}\n\n/**\n * This generates the header portion required for vertex picking to work\n */\nfunction generateVertexPicking(layer: Layer<any, any>) {\n  if (layer.picking.type === PickType.SINGLE) {\n    return require(\"../fragments/color-picking-vertex-header.vs\");\n  }\n\n  return \"\";\n}\n\n/**\n * This generates the fragment that defines the picking methods\n */\nfunction generateFragmentPickingMethod(layer: Layer<any, any>) {\n  if (layer.picking.type === PickType.SINGLE) {\n    return require(\"../fragments/color-picking-method.fs\");\n  }\n\n  return require(\"../fragments/color-picking-disabled.fs\");\n}\n\nfunction generateFragmentShader(shaders: IShaders) {\n  const templateOptions: { [key: string]: string } = {};\n\n  const required: IShaderTemplateRequirements = {\n    name: \"layer fragment shader\",\n    values: []\n  };\n\n  const results = shaderTemplate({\n    options: templateOptions,\n    required,\n    shader: shaders.fs\n  });\n\n  return results.shader;\n}\n\n/**\n * This generates the inline attribute references needed to be able to reference instance attribute\n * vars.\n */\nfunction makeInstanceAttributeReferences<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(\n  layer: Layer<T, U>,\n  instanceAttributes: IInstanceAttribute<T>[],\n  blocksPerInstance: number\n) {\n  const templateOptions: { [key: string]: string } = {};\n  templateOptions[templateVars.blocksPerInstance] = `${blocksPerInstance}`;\n  templateOptions[\n    templateVars.instanceDestructuring\n  ] = makeInstanceDestructuringArray(\n    layer,\n    instanceAttributes,\n    blocksPerInstance\n  );\n  templateOptions[templateVars.picking] = makePickingDestructuring(layer);\n\n  const required = {\n    name: \"instance attributes fragment\",\n    values: [templateVars.instanceDestructuring]\n  };\n\n  // If picking is enabled, then we require the picking set up that we inject into the destructuring portion\n  // Of the shader\n  if (layer.picking.type === PickType.SINGLE) {\n    required.values.push(templateVars.picking);\n  }\n\n  const results = shaderTemplate({\n    options: templateOptions,\n    required,\n    shader: instanceDestructuringArray\n  });\n\n  return results.shader;\n}\n\n/**\n * This generates the portion of picking logic that is injected into the destructuring portion of the shader\n */\nfunction makePickingDestructuring(layer: Layer<any, any>) {\n  if (layer.picking.type === PickType.SINGLE) {\n    return require(\"../fragments/color-picking-assignment.vs\");\n  }\n\n  return \"\";\n}\n\n/**\n * This generates the model attribute declarations\n */\nfunction generateVertexAttributes(\n  layer: Layer<any, any>,\n  vertexAttributes: IVertexAttribute[],\n  instanceAttributes: IInstanceAttribute<any>[]\n) {\n  let out = \"\";\n\n  vertexAttributes.forEach(attribute => {\n    out += `attribute ${sizeToType[attribute.size]} ${attribute.qualifier ||\n      \"\"}${(attribute.qualifier && \" \") || \"\"} ${attribute.name};\\n`;\n  });\n\n  if (layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE) {\n    out += \"\\n// Instance Attributes\\n\";\n    instanceAttributes.forEach(attribute => {\n      out += `attribute ${\n        sizeToType[attribute.size || 1]\n      } ${attribute.qualifier || \"\"}${(attribute.qualifier && \" \") ||\n        \"\"} ${instanceAttributeShaderName(attribute)};\\n`;\n    });\n  }\n\n  return out;\n}\n\n/**\n * This method generates the chunk of shader that is responsible for providing\n */\nfunction generateInstanceDataLookupOptions<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(\n  layer: Layer<T, U>,\n  templateOptions: { [key: string]: string },\n  instanceAttributes: IInstanceAttribute<T>[],\n  uniforms: IUniform[]\n) {\n  // This is how many uniform blocks the current device can utilize in a shader\n  const maxUniforms = WebGLStat.MAX_VERTEX_UNIFORMS;\n  // This reflects how many uniform blocks are available for instancing\n  const instanceUniformBlockCount =\n    maxUniforms - calculateUniformBlockUseage(uniforms);\n\n  // Go through the attributes provided and calculate the number of blocks requested\n  // Also sort the attributes by block and pack the block useage down.\n  const sortedInstanceAttributes = instanceAttributes\n    .slice(0)\n    .sort((a, b) => (a.block || 0) - (b.block || 0));\n\n  let currentBlock = sortedInstanceAttributes[0].block;\n  let trueBlockIndex = 0;\n\n  // This tracks how much a block is used\n  const blockUseage = new Map<number, number>();\n  const innerBlockUseage = new Map<number, Map<number, boolean>>();\n\n  sortedInstanceAttributes.forEach(attribute => {\n    if (attribute.block !== currentBlock) {\n      currentBlock = attribute.block;\n      trueBlockIndex++;\n    }\n\n    const attributeSize = attribute.size || 1;\n    const oldUseage = blockUseage.get(trueBlockIndex) || 0;\n    const newUseage = oldUseage + attributeSize;\n\n    // Make sure the block isn't over used thus losing attribute information\n    if (newUseage > MAX_USE_PER_BLOCK) {\n      console.error(\n        `An instance attribute was specified that over fills the maximum allowed useage for a block.`,\n        `\\nSource Layer: ${layer.id}`,\n        layer,\n        `\\nMax Allowed per block ${MAX_USE_PER_BLOCK}`,\n        `\\nAttribute: ${attribute.name} Block Specified: ${attribute.block}`,\n        `\\nTotal blocks used with this attribute: ${newUseage}`\n      );\n      return;\n    }\n\n    // Store how much of the block is utilized\n    blockUseage.set(trueBlockIndex, newUseage);\n    // We can now auto specify the inner index of where the attribute lines up within the block\n    attribute.blockIndex = oldUseage;\n\n    // Now we examine the attributes request of use inside the block and make sure there is no\n    // Overlap\n    const innerUseage =\n      innerBlockUseage.get(trueBlockIndex) || new Map<number, boolean>();\n\n    if (attribute.blockIndex + attributeSize > MAX_USE_PER_BLOCK) {\n      console.error(\n        `An instance attribute was specified that would fill indices greater than the block allows.`,\n        `\\nMax index per block ${MAX_USE_PER_BLOCK}`,\n        `\\nAttribute: ${attribute.name} Block Index: ${\n          attribute.blockIndex\n        } Size: ${attribute.size} Block Index + Size: ${attribute.blockIndex +\n          (attribute.size || 1)}`\n      );\n\n      return;\n    }\n\n    for (\n      let i = attribute.blockIndex;\n      i < attribute.blockIndex + attributeSize;\n      ++i\n    ) {\n      if (innerUseage.get(i)) {\n        console.error(\n          `An instance attribute was specified who's block index overaps another attributes useage`,\n          `\\nMax index per block ${MAX_USE_PER_BLOCK}`,\n          `\\nAttribute: ${attribute.name} Block Index: ${\n            attribute.blockIndex\n          } Size: ${attribute.size} Block Index + Size: ${attribute.blockIndex +\n            (attribute.size || 1)}`\n        );\n\n        return;\n      }\n    }\n\n    // Adjust the attribute to reflect the actual bock it is using\n    attribute.block = trueBlockIndex;\n  });\n\n  const blocksPerInstance = trueBlockIndex + 1;\n  // This determines how many instances our allowed uniforms will allow for a single draw call\n  const maxInstancesPerBuffer = Math.floor(\n    instanceUniformBlockCount / blocksPerInstance\n  );\n\n  // Generate the decision tree and uniform declarations\n  const instancingMetrics = makeUniformInstanceDataOptions(\n    templateOptions,\n    maxInstancesPerBuffer,\n    blocksPerInstance,\n    sortedInstanceAttributes\n  );\n\n  return {\n    materialUniforms: instancingMetrics.materialUniforms,\n    metrics: {\n      blocksPerInstance,\n      maxInstancesPerBuffer\n    }\n  };\n}\n\n/**\n * This generates all of the necessary templating information from uniform-instance-data\n * in order to provide an instance data getter for the application.\n */\nfunction makeUniformInstanceDataOptions<T extends Instance>(\n  templateOptions: { [key: string]: string },\n  maxInstancesPerBuffer: number,\n  blocksPerInstance: number,\n  instanceAttributes: IInstanceAttribute<T>[]\n) {\n  // Make a list containing all instance indicies that will be utilized and will be split\n  // Out into the decision tree\n  const instances = [];\n\n  for (let i = 0; i < maxInstancesPerBuffer; ++i) {\n    instances.push(i);\n  }\n\n  // Make the uniform declaration. Uniform declaration simultaneously gives us the material uniforms necessary\n  // To apply to our three material.\n  const uniformMetrics = makeInstanceUniformDeclaration(\n    maxInstancesPerBuffer * blocksPerInstance,\n    instanceAttributes\n  );\n\n  templateOptions[templateVars.instanceUniformDeclarations] =\n    uniformMetrics.fragment;\n  templateOptions[templateVars.instanceBlockCount] = `${blocksPerInstance}`;\n\n  // This method produces the data retrieval method for array instancing\n  templateOptions[\n    templateVars.instanceDataRetrieval\n  ] = makeInstanceRetrievalArray(blocksPerInstance);\n\n  return {\n    materialUniforms: uniformMetrics.materialUniforms\n  };\n}\n\n/**\n * This generates the declaration of all of the individual uniform registers for instancing.\n */\nfunction makeInstanceUniformDeclaration<T extends Instance>(\n  instanceUniformBlockCount: number,\n  attributes: IInstanceAttribute<T>[]\n) {\n  let out = \"\";\n  const blockQualifierDedup = new Map<number, Map<string, boolean>>();\n  let maxBlock = 0;\n\n  // Dedup the attributes specified for the\n  attributes.forEach(attribute => {\n    const qualifiers =\n      blockQualifierDedup.get(attribute.block || 0) ||\n      new Map<string, boolean>();\n    // Make sure the qualifier is added for the block!\n    if (attribute.qualifier) {\n      qualifiers.set(attribute.qualifier, true);\n    }\n\n    // Get the max block in use\n    maxBlock = Math.max(maxBlock, attribute.block || 0);\n  });\n\n  // Generate the full string for the specified qualifiers\n  const blockQualifiers = new Map<number, string>();\n\n  blockQualifierDedup.forEach((qualifierList, block) => {\n    const allQualifiers = Array.from(qualifierList.keys());\n    blockQualifiers.set(block, `${allQualifiers.join(\" \")} `);\n  });\n\n  // Generate our uniform declarations\n  // Const blockCount = maxBlock + 1;\n\n  // This method produces the instancing declaration for a search tree.\n  // *out += makeUniformDecisionTreeDeclarations(instanceUniformBlockCount, blockCount, blockQualifiers, materialUniforms);\n  // This method produces the instancing declaration for an instancing array\n  const declaration = makeUniformArrayDeclaration(instanceUniformBlockCount);\n  out += declaration.fragment;\n\n  out += `\\n`;\n\n  return {\n    fragment: out,\n    materialUniforms: declaration.materialUniforms\n  };\n}\n","import * as Three from \"three\";\nimport { WebGLRenderTarget } from \"three\";\nimport { ImageInstance } from \"../base-layers/images\";\nimport { LabelInstance } from \"../base-layers/labels\";\nimport { Instance } from \"../instance-provider/instance\";\nimport { Bounds } from \"../primitives/bounds\";\nimport { Box } from \"../primitives/box\";\nimport { injectFragments } from \"../shaders/util/attribute-generation\";\nimport { PickType } from \"../types\";\nimport { FrameMetrics } from \"../types\";\nimport { analyzeColorPickingRendering } from \"../util/color-picking-analysis\";\nimport { DataBounds } from \"../util/data-bounds\";\nimport { Vec2 } from \"../util/vector\";\nimport { EventManager } from \"./event-manager\";\nimport { LayerMouseEvents } from \"./event-managers/layer-mouse-events\";\nimport { ILayerProps, Layer } from \"./layer\";\nimport {\n  generateDefaultScene,\n  IDefaultSceneElements\n} from \"./layer-processing/generate-default-scene\";\nimport { generateLayerGeometry } from \"./layer-processing/generate-layer-geometry\";\nimport { generateLayerMaterial } from \"./layer-processing/generate-layer-material\";\nimport { generateLayerModel } from \"./layer-processing/generate-layer-model\";\nimport { injectShaderIO } from \"./layer-processing/inject-shader-io\";\nimport {\n  getLayerBufferType,\n  makeLayerBufferManager\n} from \"./layer-processing/layer-buffer-type\";\nimport { MouseEventManager, SceneView } from \"./mouse-event-manager\";\nimport { ISceneOptions, Scene } from \"./scene\";\nimport { AtlasManager } from \"./texture\";\nimport { IAtlasOptions } from \"./texture/atlas\";\nimport { AtlasResourceManager } from \"./texture/atlas-resource-manager\";\nimport { ClearFlags, View } from \"./view\";\n\nexport interface ILayerSurfaceOptions {\n  /**\n   * These are the atlas resources we want available that our layers can be provided to utilize\n   * for their internal processes.\n   */\n  atlasResources?: IAtlasOptions[];\n  /**\n   * This is the color the canvas will be set to.\n   */\n  background: [number, number, number, number];\n  /**\n   * If this is provided, it will use this context for rendering. If a string is provided\n   * it will search for the canvas context by id.\n   */\n  context?: WebGLRenderingContext | HTMLCanvasElement | string;\n  /**\n   * This is the event managers to respond to the mouse events.\n   */\n  eventManagers?: EventManager[];\n  /**\n   * Set to true to allow this surface to absorb and handle wheel events from the mouse.\n   */\n  handlesWheelEvents?: boolean;\n  /**\n   * This specifies the density of rendering in the surface. The default value is window.devicePixelRatio to match the\n   * monitor for optimal clarity. Using a value of 1 will be acceptable, will not get high density renders, but will\n   * have better performance if needed.\n   */\n  pixelRatio?: number;\n  /**\n   * This sets up the available scenes the surface will have to work with. Layers then can\n   * reference the scene by it's scene property. The order of the scenes here is the drawing\n   * order of the scenes.\n   */\n  scenes?: ISceneOptions[];\n}\n\nconst DEFAULT_BACKGROUND_COLOR = new Three.Color(1.0, 1.0, 1.0);\n\nfunction isCanvas(val: any): val is HTMLCanvasElement {\n  return Boolean(val.getContext);\n}\n\nfunction isString(val: any): val is string {\n  return Boolean(val.substr);\n}\n\nfunction isWebGLContext(val: any): val is WebGLRenderingContext {\n  return Boolean(val.canvas);\n}\n\nexport interface ILayerConstructable<T extends Instance> {\n  new (props: ILayerProps<T>): Layer<any, any>;\n}\n\n/**\n * This is a pair of a Class Type and the props to be applied to that class type.\n */\nexport type LayerInitializer = [\n  ILayerConstructable<Instance> & { defaultProps: ILayerProps<Instance> },\n  ILayerProps<Instance>\n];\n\n/**\n * Used for reactive layer generation and updates.\n */\nexport function createLayer<T extends Instance, U extends ILayerProps<T>>(\n  layerClass: ILayerConstructable<T> & { defaultProps: U },\n  props: U\n): LayerInitializer {\n  return [layerClass, props];\n}\n\n/**\n * This is a manager for layers. It will use voidgl layers to intelligently render resources\n * as efficiently as possible. Layers will be rendered in the order they are provided and this\n * surface will provide some basic camera controls by default.\n */\nexport class LayerSurface {\n  /** This is the atlas manager that will help with modifying and tracking atlas' generated for the layers */\n  private atlasManager: AtlasManager = new AtlasManager();\n  /** This is the gl context this surface is rendering to */\n  private context: WebGLRenderingContext;\n  /** This is the current viewport the renderer state is in */\n  currentViewport = new Map<Three.WebGLRenderer, Box>();\n  /**\n   * This is the default scene that layers get added to if they do not specify a valid Scene.\n   * This scene by default only has a single default view.\n   */\n  defaultSceneElements: IDefaultSceneElements;\n  /**\n   * This is the metrics of the current running frame\n   */\n  frameMetrics: FrameMetrics = {\n    currentFrame: 0,\n    currentTime: Date.now() | 0,\n    previousTime: Date.now() | 0\n  };\n  /**\n   * This is used to help resolve concurrent draws. There are some very async operations that should\n   * not overlap in draw calls.\n   */\n  private isBufferingAtlas = false;\n  /** This is all of the layers in this manager by their id */\n  layers = new Map<string, Layer<Instance, ILayerProps<Instance>>>();\n  /** This manages the mouse events for the current canvas context */\n  private mouseManager: MouseEventManager;\n  /**\n   * This is the renderer that is meant for rendering the picking pass. We have a separate renderer so we can disable\n   * over complicated features like antialiasing which would ruin the picking pass.\n   */\n  pickingRenderer: Three.WebGLRenderer;\n  /** This is a target used to perform rendering our picking pass */\n  pickingTarget: Three.WebGLRenderTarget;\n  /** This is the density the rendering renders for the surface */\n  pixelRatio: number = window.devicePixelRatio;\n  /** This is the THREE render system we use to render scenes with views */\n  renderer: Three.WebGLRenderer;\n  /** This is the resource manager that handles resource requests for instances */\n  resourceManager: AtlasResourceManager;\n  /**\n   * This is all of the available scenes and their views for this surface. Layers reference the IDs\n   * of the scenes and the views to be a part of their rendering state.\n   */\n  scenes = new Map<string, Scene>();\n  /**\n   * This is all of the views currently generated for this surface paired with the scene they render.\n   */\n  sceneViews: SceneView[] = [];\n  /** When set to true, the next render will make sure color picking is updated for layer interactions */\n  updateColorPick?: {\n    mouse: Vec2;\n    views: View[];\n  };\n  /**\n   * This flags all layers by id for disposal at the end of every render. A Layer must be recreated\n   * after each render in order to clear it's disposal flag. This is the trick to making this a\n   * reactive system.\n   */\n  willDisposeLayer = new Map<string, boolean>();\n\n  /** This is used to indicate whether the loading is completed */\n  private loadReadyResolve: () => void;\n  loadReady: Promise<void> = new Promise(\n    resolve => (this.loadReadyResolve = resolve)\n  );\n\n  /** Read only getter for the gl context */\n  get gl() {\n    return this.context;\n  }\n\n  /**\n   * This adds a layer to the manager which will manage all of the resource lifecycles of the layer\n   * as well as additional helper injections to aid in instancing and shader i/o.\n   */\n  private addLayer<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U>\n  ): Layer<T, U> {\n    if (!layer.id) {\n      console.warn(\"All layers must have an id\");\n      return layer;\n    }\n\n    if (this.layers.get(layer.id)) {\n      console.warn(\"All layer's ids must be unique per layer manager\");\n      return layer;\n    }\n\n    // We add the layer to our management\n    this.layers.set(layer.id, layer);\n    // Now we initialize the layer's gl components\n    this.initLayer(layer);\n\n    return layer;\n  }\n\n  /**\n   * The performs all of the needed updates that layers need to commit to the scene and buffers\n   * to be ready for a draw pass. This is callable outside of the draw loop to allow for specialized\n   * procedures or optimizations to take place, where incremental updates to the buffers would make\n   * the most sense.\n   *\n   * @param time The start time of the given frame\n   * @param frameIncrement When true, the frame count for the frame metrics will increment\n   * @param onViewReady Callback for when all of the layers of a scene view have been committed\n   *                    and are thus potentially ready to be rendered.\n   */\n  async commit(\n    time?: number,\n    frameIncrement?: boolean,\n    onViewReady?: (\n      scene: Scene,\n      view: View,\n      pickingPass: Layer<any, any>[]\n    ) => void\n  ) {\n    if (!this.gl) return;\n\n    // We are rendering a new frame so increment our frame count\n    if (frameIncrement) this.frameMetrics.currentFrame++;\n    this.frameMetrics.previousTime = this.frameMetrics.currentTime;\n\n    // If no manual time was provided, we shall use Date.now in 32 bit format\n    if (time === undefined) {\n      this.frameMetrics.currentTime = Date.now() | 0;\n    } else {\n      // If this is our first frame and we have a manual time entry, then we first need to sync up\n      // The manual time as our previous timing.\n      if (this.frameMetrics.previousTime === this.frameMetrics.currentTime) {\n        this.frameMetrics.previousTime = time;\n      }\n\n      this.frameMetrics.currentTime = time;\n    }\n\n    // Get the scenes in their added order\n    const scenes = Array.from(this.scenes.values());\n    const validLayers: { [key: string]: Layer<any, any> } = {};\n    const erroredLayers: { [key: string]: [Layer<any, any>, Error] } = {};\n\n    // Loop through scenes\n    for (let i = 0, end = scenes.length; i < end; ++i) {\n      const scene = scenes[i];\n      const views = Array.from(scene.viewById.values());\n      const layers = scene.layers;\n\n      // Make sure the layers are depth sorted\n      scene.sortLayers();\n\n      // Loop through the views\n      for (let k = 0, endk = views.length; k < endk; ++k) {\n        const view = views[k];\n        // When this flags true, a picking pass will be rendered for the provided scene / view\n        const pickingPass: Layer<any, any>[] = [];\n\n        // We must perform any operations necessary to make the view camera fit the viewport\n        // Correctly\n        view.fitViewtoViewport(\n          new Bounds({\n            height: this.context.canvas.height,\n            width: this.context.canvas.width,\n            x: 0,\n            y: 0\n          })\n        );\n\n        // Let the layers update their uniforms before the draw\n        for (let j = 0, endj = layers.length; j < endj; ++j) {\n          // Get the layer to be rendered in the scene\n          const layer = layers[j];\n          // Update the layer with the view it is about to be rendered with\n          layer.view = view;\n          // Make sure the layer is given the opportunity to update all of it's uniforms\n          // To match the view state and update any unresolved diffs internally\n          try {\n            layer.draw();\n            validLayers[layer.id] = layer;\n          } catch (err) {\n            if (!erroredLayers[layer.id]) {\n              erroredLayers[layer.id] = [layer, err];\n            }\n          }\n\n          // If this layer specifies a picking draw pass, then we shall store it in the current draw order\n          // For that next step\n          if (layer.picking.type === PickType.SINGLE) {\n            pickingPass.push(layer);\n          }\n        }\n\n        if (onViewReady) {\n          onViewReady(scene, view, pickingPass);\n        }\n      }\n    }\n\n    // get the layers with errors flagged for them\n    const errors = Object.values(erroredLayers);\n\n    if (errors.length > 0) {\n      const passed = Object.values(validLayers);\n\n      console.warn(\n        \"Some layers errored during their draw update. These layers will be removed. They can be re-added if render() is called again:\",\n        errors.map(err => err[0].id)\n      );\n\n      // Output each layer and why it errored\n      errors.forEach(err => {\n        console.warn(`Layer ${err[0].id} removed for the following error:`);\n        if (err[1]) console.error(err[1].stack || err[1].message);\n      });\n\n      // Re-render but only include non-errored layers\n      this.render(passed.map(layer => layer.initializer));\n    }\n  }\n\n  /**\n   * Free all resources consumed by this surface that gets applied to the GPU.\n   */\n  destroy() {\n    this.layers.forEach(layer => layer.destroy());\n    this.resourceManager.destroy();\n    this.mouseManager.destroy();\n    this.sceneViews.forEach(sceneView => sceneView.scene.destroy());\n    this.renderer.dispose();\n    this.pickingRenderer.dispose();\n    this.currentViewport.clear();\n\n    // TODO: Instances should be implementing destroy for these clean ups.\n    LabelInstance.destroy();\n    ImageInstance.destroy();\n  }\n\n  /**\n   * This is the draw loop that must be called per frame for updates to take effect and display.\n   *\n   * @param time This is an optional time flag so one can manually control the time flag for the frame.\n   *             This will affect animations and other automated gpu processes.\n   */\n  async draw(time?: number) {\n    if (!this.gl) return;\n\n    // Make the layers commit their changes to the buffers then draw each scene view on\n    // Completion.\n    this.commit(time, true, (scene, view, pickingPass) => {\n      // Our scene must have a valid container to operate\n      if (!scene.container) return;\n      // Now perform the rendering\n      this.drawSceneView(scene.container, view);\n\n      // If a layer needs a picking pass, then perform a picking draw pass only\n      // if a request for the color pick has been made, then we query the pixels rendered to our picking target\n      if (pickingPass.length > 0 && this.updateColorPick) {\n        // Get the requested metrics\n        const mouse = this.updateColorPick.mouse;\n        const views = this.updateColorPick.views;\n\n        // Only if the view is interacted with should we both with rendering\n        if (\n          view.id !== this.defaultSceneElements.view.id &&\n          views.indexOf(view) > -1\n        ) {\n          // Picking uses a pixel ratio of 1\n          view.pixelRatio = 1.0;\n          // Get the current flags for the view\n          const flags = view.clearFlags.slice(0);\n          // Set color rendering flasg\n          view.clearFlags = [ClearFlags.COLOR, ClearFlags.DEPTH];\n\n          // We must perform any operations necessary to make the view camera fit the viewport\n          // Correctly with the possibly adjusted pixel ratio\n          view.fitViewtoViewport(\n            new Bounds({\n              height: this.context.canvas.height / this.pixelRatio,\n              width: this.context.canvas.width / this.pixelRatio,\n              x: 0,\n              y: 0\n            })\n          );\n\n          // We must redraw the layers so they will update their uniforms to adapt to a picking pass\n          for (let j = 0, endj = pickingPass.length; j < endj; ++j) {\n            const layer = pickingPass[j];\n            layer.picking.currentPickMode = PickType.SINGLE;\n            try {\n              layer.draw();\n            } catch (err) {\n              /** No-op, the first draw should have output an error for bad draw calls */\n            }\n            layer.picking.currentPickMode = PickType.NONE;\n          }\n\n          // Draw the picking container for the scene with our view long with our specialized picking renderer\n          // NOTE: Neat trick, just remove 'this.pickingTarget' from the argument and add\n          // canvas.parentNode.appendChild(this.pickingRenderer.getContext().canvas);\n          // below where the picking Target is created and you will see what is being rendered to the color picking buffer\n          this.drawSceneView(\n            scene.pickingContainer,\n            view,\n            this.pickingRenderer,\n            this.pickingTarget\n          );\n\n          // Make our metrics for how much of the image we wish to analyze\n          const pickWidth = 5;\n          const pickHeight = 5;\n          const numBytesPerColor = 4;\n          const out = new Uint8Array(pickWidth * pickHeight * numBytesPerColor);\n\n          // Read the pixels out\n          // TODO: We need to defer this reading to next frame as the rendering MUST be completed before a readPixels\n          // operation can complete. Thus in complex rendering situations that pushes the GPU, this could be a MAJOR bottleneck.\n          this.pickingRenderer.readRenderTargetPixels(\n            this.pickingTarget,\n            mouse[0] - view.screenBounds.x - pickWidth / 2,\n            view.screenBounds.height -\n              (mouse[1] - view.screenBounds.y) -\n              pickHeight / 2,\n            pickWidth,\n            pickHeight,\n            out\n          );\n\n          // Analyze the rendered color data for the picking routine\n          const pickingData = analyzeColorPickingRendering(\n            [mouse[0] - view.screenBounds.x, mouse[1] - view.screenBounds.y],\n            out,\n            pickWidth,\n            pickHeight\n          );\n\n          // We must redraw the layers so they will update their uniforms to adapt to a picking pass\n          for (let j = 0, endj = pickingPass.length; j < endj; ++j) {\n            const layer = pickingPass[j];\n\n            if (layer.picking.type === PickType.SINGLE) {\n              layer.interactions.colorPicking = pickingData;\n            }\n          }\n\n          // Return the pixel ratio back to the rendered ratio\n          view.pixelRatio = this.pixelRatio;\n          // Return the view's clear flags\n          view.clearFlags = flags;\n\n          // After reverting the pixel ratio, we must return to the state we came from so that mouse interactions\n          // will work properly\n          view.fitViewtoViewport(\n            new Bounds({\n              height: this.context.canvas.height,\n              width: this.context.canvas.width,\n              x: 0,\n              y: 0\n            })\n          );\n        }\n      }\n    });\n\n    // After we have drawn our views of our scenes, we can now ensure all of the bounds\n    // Are updated in the interactions and flag our interactions ready for mouse input\n    if (this.mouseManager.waitingForRender) {\n      this.sceneViews.forEach(sceneView => {\n        sceneView.bounds = new DataBounds(sceneView.view.screenBounds);\n        sceneView.bounds.data = sceneView;\n      });\n\n      this.mouseManager.waitingForRender = false;\n    }\n\n    // Now that all of our layers have performed updates to everything, we can now dequeue\n    // All resource requests\n    // We create this gate in case multiple draw calls flow through before a buffer opertion is completed\n    if (!this.isBufferingAtlas) {\n      this.isBufferingAtlas = true;\n      const didBuffer = await this.resourceManager.dequeueRequests();\n      this.isBufferingAtlas = false;\n\n      // If buffering did occur and completed, then we should be performing a draw to ensure all of the\n      // Changes are committed and pushed out.\n      if (didBuffer) {\n        this.loadReadyResolve();\n        this.loadReady = new Promise(\n          resolve => (this.loadReadyResolve = resolve)\n        );\n        this.draw();\n      }\n    }\n\n    // Clear out the flag requesting a pick pass so we don't perform a pick render pass unless we have\n    // another requested from mouse interactions\n    delete this.updateColorPick;\n  }\n\n  /**\n   * This finalizes everything and sets up viewports and clears colors and performs the actual render step\n   */\n  private drawSceneView(\n    scene: Three.Scene,\n    view: View,\n    renderer?: Three.WebGLRenderer,\n    target?: Three.WebGLRenderTarget\n  ) {\n    renderer = renderer || this.renderer;\n\n    const offset = { x: view.viewBounds.left, y: view.viewBounds.top };\n    const size = view.viewBounds;\n    const rendererSize = renderer.getSize();\n    const pixelRatio = renderer.getPixelRatio();\n    rendererSize.width *= pixelRatio;\n    rendererSize.height *= pixelRatio;\n    const background = view.background;\n    const context = renderer.getContext();\n\n    // Something is up with threejs that does not allow us to set viewport x and y values. So for targets\n    // We simply size the target to the view size and render. Thus scissoring is not required\n    if (!target) {\n      // Set the scissor rectangle.\n      context.enable(context.SCISSOR_TEST);\n      context.scissor(\n        offset.x,\n        rendererSize.height - offset.y - size.height,\n        size.width,\n        size.height\n      );\n      // If a background is established, we should clear the background color\n      // Specified for this context\n      if (view.background) {\n        // Clear the rect of color and depth so the region is totally it's own\n        context.clearColor(\n          background[0],\n          background[1],\n          background[2],\n          background[3]\n        );\n      }\n    }\n\n    // Get the view's clearing preferences\n    if (view.clearFlags) {\n      // For targets, we must also perform clear operations\n      if (target) {\n        // TODO: This is frustrating. Right now we can't specify and set the viewport for a render target\n        // Possibly with Threejs going away we can actually be more explcit for the render area to a render target\n        // and not cause this overhead of resizing the render target for every picking pass\n        target.setSize(size.width, size.height);\n        renderer.setRenderTarget(target);\n        renderer.clear(\n          view.clearFlags.indexOf(ClearFlags.COLOR) > -1,\n          view.clearFlags.indexOf(ClearFlags.DEPTH) > -1,\n          view.clearFlags.indexOf(ClearFlags.STENCIL) > -1\n        );\n      } else {\n        renderer\n          .getContext()\n          .clear(\n            (view.clearFlags.indexOf(ClearFlags.COLOR) > -1\n              ? context.COLOR_BUFFER_BIT\n              : 0x0) |\n              (view.clearFlags.indexOf(ClearFlags.DEPTH) > -1\n                ? context.DEPTH_BUFFER_BIT\n                : 0x0) |\n              (view.clearFlags.indexOf(ClearFlags.STENCIL) > -1\n                ? context.STENCIL_BUFFER_BIT\n                : 0x0)\n          );\n      }\n    } else {\n      // Default clearing is depth and color\n      // For targets, we must also perform clear operations\n      if (target) {\n        // TODO: This is frustrating. Right now we can't specify and set the viewport for a render target\n        // Possibly with Threejs going away we can actually be more explcit for the render area to a render target\n        // and not cause this overhead of resizing the render target for every picking pass\n        target.setSize(size.width, size.height);\n        renderer.setRenderTarget(target);\n        renderer.clear(true, true);\n      } else {\n        context.clear(context.COLOR_BUFFER_BIT | context.DEPTH_BUFFER_BIT);\n      }\n    }\n\n    // Make sure the viewport is set properly for the next render\n    renderer.setViewport(\n      offset.x / pixelRatio,\n      offset.y / pixelRatio,\n      size.width,\n      size.height\n    );\n    // Render the scene with the provided view metrics\n    renderer.render(scene, view.viewCamera.baseCamera, target);\n  }\n\n  /**\n   * This allows for querying a view's screen bounds. Null is returned if the view id\n   * specified does not exist.\n   */\n  getViewSize(viewId: string): Bounds | null {\n    for (const sceneView of this.sceneViews) {\n      if (sceneView.view.id === viewId) {\n        return sceneView.view.screenBounds;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * This queries a view's window into a world's space.\n   */\n  getViewWorldBounds(viewId: string): Bounds | null {\n    for (const sceneView of this.sceneViews) {\n      if (sceneView.view.id === viewId) {\n        const view = sceneView.view;\n\n        if (view.screenBounds) {\n          const topLeft = view.viewToWorld({ x: 0, y: 0 });\n          const bottomRight = view.screenToWorld({\n            x: view.screenBounds.right,\n            y: view.screenBounds.bottom\n          });\n\n          return new Bounds({\n            bottom: bottomRight.y,\n            left: topLeft.x,\n            right: bottomRight.x,\n            top: topLeft.y\n          });\n        } else {\n          return null;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * This is the beginning of the system. This should be called immediately after the surface is constructed.\n   * We make this mandatory outside of the constructor so we can make it follow an async pattern.\n   */\n  async init(options: ILayerSurfaceOptions) {\n    // Make sure our desired pixel ratio is set up\n    this.pixelRatio = options.pixelRatio || this.pixelRatio;\n    // Make sure we have a gl context to work with\n    this.setContext(options.context);\n\n    if (this.gl) {\n      // Initialize our GL needs that set the basis for rendering\n      this.initGL(options);\n      // Initialize our event manager that handles mouse interactions/gestures with the canvas\n      this.initMouseManager(options);\n      // Initialize any resources requested or needed, such as textures or rendering surfaces\n      await this.initResources(options);\n    } else {\n      console.warn(\n        \"Could not establish a GL context. Layer Surface will be unable to render\"\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * This initializes the Canvas GL contexts needed for rendering.\n   */\n  private initGL(options: ILayerSurfaceOptions) {\n    if (!this.context) {\n      console.error(\n        \"Can not initialize Layer Surface as a valid GL context was not established.\"\n      );\n      return;\n    }\n\n    // Get the canvas of our context to set up our Three settings\n    const canvas = this.context.canvas;\n    // Get the starting width and height so adjustments don't affect it\n    const width = canvas.width;\n    const height = canvas.height;\n\n    // Generate the renderer along with it's properties\n    this.renderer = new Three.WebGLRenderer({\n      // Context supports rendering to an alpha canvas only if the background color has a transparent\n      // Alpha value.\n      alpha: options.background && options.background[3] < 1.0,\n      // Yes to antialias! Make it preeeeetty!\n      antialias: true,\n      // Make three use an existing canvas rather than generate another\n      canvas,\n      // TODO: This should be toggleable. If it's true it allows us to snapshot the rendering in the canvas\n      //       But we dont' always want it as it makes performance drop a bit.\n      preserveDrawingBuffer: true\n    });\n\n    // Generate a renderer for the picking pass\n    this.pickingRenderer = new Three.WebGLRenderer({\n      // Context supports rendering to an alpha canvas only if the background color has a transparent\n      // Alpha value.\n      alpha: false,\n      // Picking shall not\n      antialias: false,\n      // Do not need this for picking\n      preserveDrawingBuffer: true\n    });\n\n    // NOTE: Uncomment this plus remove this.pickingTarget from the drawSceneView of the color picking pass\n    // to view the colors rendered to the color picking buffer. This disables the interactions but helps\n    // debug what's going on with shaders etc\n    // canvas.parentNode.appendChild(this.pickingRenderer.getContext().canvas);\n\n    // We want clearing to be controlled via the layer\n    this.renderer.autoClear = false;\n    // This sets the pixel ratio to handle differing pixel densities in screens\n    this.setRendererSize(width, height);\n    // Set the pixel ratio to match the pixel density of the monitor in use\n    this.renderer.setPixelRatio(this.pixelRatio);\n\n    // Applies the background color and establishes whether or not the context supports\n    // Alpha or not\n    if (options.background) {\n      this.renderer.setClearColor(\n        new Three.Color(\n          options.background[0],\n          options.background[1],\n          options.background[2]\n        ),\n        options.background[3]\n      );\n    } else {\n      // If a background color was not established, then we set a default background color\n      this.renderer.setClearColor(DEFAULT_BACKGROUND_COLOR);\n    }\n\n    // We want clearing to be controlled via the layer\n    this.pickingRenderer.autoClear = false;\n    // Picking does not need retina style precision\n    this.pickingRenderer.setPixelRatio(1.0);\n    // Applies the background color and establishes whether or not the context supports\n    // Alpha or not\n    this.pickingRenderer.setClearColor(new Three.Color(0, 0, 0), 1);\n\n    // Once we have made our renderer we now make us a default scene to which we can add objects\n    this.defaultSceneElements = generateDefaultScene(this.context);\n    this.defaultSceneElements.view.background = options.background;\n    // Set the default scene\n    this.scenes.set(\n      this.defaultSceneElements.scene.id,\n      this.defaultSceneElements.scene\n    );\n    // Make a scene view depth tracker so we can track the order each scene view combo is drawn\n    let sceneViewDepth = 0;\n\n    // Make a SceneView for the default scene and view for mouse interactions\n    this.sceneViews.push({\n      depth: ++sceneViewDepth,\n      scene: this.defaultSceneElements.scene,\n      view: this.defaultSceneElements.view\n    });\n\n    // Turn on the scissor test to keep the rendering clipped within the\n    // Render region of the context\n    this.context.enable(this.context.SCISSOR_TEST);\n\n    // Add the requested scenes to the surface and apply the necessary defaults\n    if (options.scenes) {\n      options.scenes.forEach(sceneOptions => {\n        // Make us a new scene based on the requested options\n        const newScene = new Scene(sceneOptions);\n\n        // Make sure the default view is available for each scene\n        // IFF no view is provided for the scene\n        if (sceneOptions.views.length === 0) {\n          newScene.addView(this.defaultSceneElements.view);\n\n          this.sceneViews.push({\n            depth: ++sceneViewDepth,\n            scene: newScene,\n            view: this.defaultSceneElements.view\n          });\n        }\n\n        // Generate the views requested for the scene\n        sceneOptions.views.forEach(viewOptions => {\n          const newView = new View(viewOptions);\n          newView.camera = newView.camera || this.defaultSceneElements.camera;\n          newView.viewCamera =\n            newView.viewCamera || this.defaultSceneElements.viewCamera;\n          newView.viewport =\n            newView.viewport || this.defaultSceneElements.viewport;\n          newView.pixelRatio = this.pixelRatio;\n          newScene.addView(newView);\n\n          for (const sceneView of this.sceneViews) {\n            if (sceneView.view.id === newView.id) {\n              console.warn(\n                \"You can NOT have two views with the same id. Please use unique identifiers for every view generated.\"\n              );\n            }\n          }\n\n          this.sceneViews.push({\n            depth: ++sceneViewDepth,\n            scene: newScene,\n            view: newView\n          });\n        });\n\n        this.scenes.set(sceneOptions.key, newScene);\n      });\n    }\n  }\n\n  /**\n   * This does special initialization by gathering the layers shader IO, generates a material\n   * and injects special automated uniforms and attributes to make instancing work for the\n   * shader.\n   */\n  private initLayer<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U>\n  ): Layer<T, U> {\n    // Set the layer's parent surface here\n    layer.surface = this;\n    // Set the resource manager this surface utilizes to the layer\n    layer.resource = this.resourceManager;\n    // For the sake of initializing uniforms to the correct values, we must first add the layer to it's appropriate\n    // Scene so that the necessary values will be in place for the sahder IO\n    const scene = this.addLayerToScene(layer);\n    // Get the shader metrics the layer desires\n    const shaderIO = layer.initShader();\n    // Clean out nulls provided as a convenience to the layer\n    shaderIO.instanceAttributes = (shaderIO.instanceAttributes || []).filter(\n      Boolean\n    );\n    shaderIO.vertexAttributes = (shaderIO.vertexAttributes || []).filter(\n      Boolean\n    );\n    shaderIO.uniforms = (shaderIO.uniforms || []).filter(Boolean);\n    // Get the injected shader IO attributes and uniforms\n    const { vertexAttributes, instanceAttributes, uniforms } = injectShaderIO(\n      this.gl,\n      layer,\n      shaderIO\n    );\n    // After all of the shader IO is established, let's calculate the appropriate buffering strategy\n    // For the layer.\n    getLayerBufferType(this.gl, layer, vertexAttributes, instanceAttributes);\n    // Generate the actual shaders to be used by injecting all of the necessary fragments and injecting\n    // Instancing fragments\n    const shaderMetrics = injectFragments(\n      layer,\n      shaderIO,\n      vertexAttributes,\n      instanceAttributes,\n      uniforms\n    );\n    // Generate the geometry this layer will be utilizing\n    const geometry = generateLayerGeometry(\n      layer,\n      shaderMetrics.maxInstancesPerBuffer,\n      vertexAttributes,\n      shaderIO.vertexCount\n    );\n    // This is the material that is generated for the layer that utilizes all of the generated and\n    // Injected shader IO and shader fragments\n    const material = generateLayerMaterial(\n      layer,\n      shaderMetrics.vs,\n      shaderMetrics.fs,\n      uniforms,\n      shaderMetrics.materialUniforms\n    );\n    // And now we can now generate the mesh that will be added to the scene\n    const model = generateLayerModel(layer, geometry, material);\n\n    // Now that all of the elements of the layer are complete, let us apply them to the layer\n    layer.geometry = geometry;\n    layer.instanceAttributes = instanceAttributes;\n    layer.instanceVertexCount = shaderIO.vertexCount;\n    layer.material = material;\n    layer.maxInstancesPerBuffer = shaderMetrics.maxInstancesPerBuffer;\n    layer.model = model;\n    layer.uniforms = uniforms;\n    layer.vertexAttributes = vertexAttributes;\n\n    // Generate the correct buffering strategy for the layer\n    makeLayerBufferManager(this.gl, layer, scene);\n\n    return layer;\n  }\n\n  /**\n   * Initializes elements for handling mouse interactions with the canvas.\n   */\n  private initMouseManager(options: ILayerSurfaceOptions) {\n    // We must inject an event manager to broadcast events through the layers themselves\n    const eventManagers: EventManager[] = ([\n      new LayerMouseEvents(this)\n    ] as EventManager[]).concat(options.eventManagers || []);\n\n    // Generate the mouse manager for the layer\n    this.mouseManager = new MouseEventManager(\n      this.context.canvas,\n      this.sceneViews,\n      eventManagers,\n      options.handlesWheelEvents\n    );\n  }\n\n  /**\n   * This initializes resources needed or requested such as textures or render surfaces.\n   */\n  private async initResources(options: ILayerSurfaceOptions) {\n    // Tell our manager to generate all of the atlas' requested for surface\n    if (options.atlasResources) {\n      for (const resource of options.atlasResources) {\n        await this.atlasManager.createAtlas(resource);\n      }\n    }\n\n    // Initialize our resource manager with the atlas manager\n    this.resourceManager = new AtlasResourceManager({\n      atlasManager: this.atlasManager\n    });\n  }\n\n  /**\n   * This finds the scene and view the layer belongs to based on the layer's props. For invalid or not provided\n   * props, the layer gets added to default scenes and views.\n   */\n  private addLayerToScene<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U>\n  ): Scene {\n    // Get the scene the layer will add itself to\n    let scene = this.scenes.get(layer.props.scene || \"\");\n\n    if (!scene) {\n      // If no scene is specified by the layer, or the scene identifier is invalid, then we add the layer\n      // To the default scene.\n      scene = this.defaultSceneElements.scene;\n\n      if (layer.props.scene) {\n        console.warn(\n          \"Layer specified a scene that is not within the layer surface manager. Layer will be added to the default scene.\"\n        );\n      }\n    }\n\n    // Add the layer to the scene for rendering\n    scene.addLayer(layer);\n\n    return scene;\n  }\n\n  /**\n   * Discontinues a layer's management by this surface. This will invalidate any resources\n   * the layer was using in association with the context. If the layer is re-insertted, it will\n   * be revaluated as though it were a new layer.\n   */\n  private removeLayer<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U> | null\n  ): Layer<T, U> | null {\n    // Make sure we are removing a layer that exists in the system\n    if (!layer) {\n      return null;\n    }\n    if (!this.layers.get(layer && layer.id)) {\n      console.warn(\n        \"Tried to remove a layer that is not in the manager.\",\n        layer\n      );\n      return layer;\n    }\n\n    layer.destroy();\n    this.layers.delete(layer.id);\n\n    return layer;\n  }\n\n  /**\n   * Used for reactive rendering and diffs out the layers for changed layers.\n   */\n  render(layerInitializers: LayerInitializer[]) {\n    if (!this.gl) return;\n\n    // Loop through all of the initializers and properly add and remove layers as needed\n    if (layerInitializers && layerInitializers.length > 0) {\n      layerInitializers.forEach(init => {\n        const layerClass = init[0];\n        const props = init[1];\n        const existingLayer = this.layers.get(props.key);\n\n        if (existingLayer) {\n          existingLayer.willUpdateProps(props);\n\n          // If we have a provider that is about to be newly set to the layer, then the provider\n          // needs to do a full sync in order to have existing\n          if (props.data !== existingLayer.props.data) {\n            props.data.sync();\n          }\n\n          Object.assign(existingLayer.props, props);\n          existingLayer.initializer[1] = existingLayer.props;\n          existingLayer.didUpdateProps();\n        } else {\n          // Generate the new layer and provide it it's initial props\n          const layer = new layerClass(\n            Object.assign({}, layerClass.defaultProps, props)\n          );\n          // Keep the initializer object that generated the layer for reference and debugging\n          layer.initializer = init;\n          // Sync the data provider applied to the layer in case the provider has existing data\n          // before being applied tot he layer\n          layer.props.data.sync();\n          // Add the layer to this surface\n          this.addLayer(layer);\n        }\n\n        this.willDisposeLayer.set(props.key, false);\n      });\n    }\n\n    // Take any layer that retained it's disposal flag and trash it\n    this.willDisposeLayer.forEach((dispose, layerId) => {\n      if (dispose) {\n        const layer = this.layers.get(layerId);\n        if (layer) {\n          this.removeLayer(layer);\n        } else {\n          console.warn(\n            \"this.willDisposeLayer applied to a layer that does not exist in the existing layer check.\"\n          );\n        }\n      }\n    });\n\n    // Resolve that all disposals occurred\n    this.willDisposeLayer.clear();\n\n    // Reflag every layer for removal again so creation of layers will determine\n    // Which layers remain for a reactive pattern\n    this.layers.forEach((_layer, id) => {\n      this.willDisposeLayer.set(id, true);\n    });\n  }\n\n  /**\n   * This must be executed when the canvas changes size so that we can re-calculate the scenes and views\n   * dimensions for handling all of our rendered elements.\n   */\n  fitContainer(_pixelRatio?: number) {\n    const container = this.context.canvas.parentElement;\n\n    if (container) {\n      const canvas = this.context.canvas;\n      canvas.className = \"\";\n      canvas.setAttribute(\"style\", \"\");\n      container.style.position = \"relative\";\n      canvas.style.position = \"absolute\";\n      canvas.style.left = \"0xp\";\n      canvas.style.top = \"0xp\";\n      canvas.style.width = \"100%\";\n      canvas.style.height = \"100%\";\n      canvas.setAttribute(\"width\", \"\");\n      canvas.setAttribute(\"height\", \"\");\n      const containerBox = container.getBoundingClientRect();\n      const box = canvas.getBoundingClientRect();\n\n      this.resize(box.width || 100, containerBox.height || 100);\n    }\n  }\n\n  /**\n   * This resizes the canvas and retains pixel ratios amongst all of the resources involved.\n   */\n  resize(width: number, height: number, pixelRatio?: number) {\n    this.pixelRatio = pixelRatio || this.pixelRatio;\n    this.sceneViews.forEach(\n      sceneView => (sceneView.view.pixelRatio = this.pixelRatio)\n    );\n    this.setRendererSize(width, height);\n    this.renderer.setPixelRatio(this.pixelRatio);\n    this.pickingRenderer.setPixelRatio(1.0);\n    this.mouseManager.resize();\n  }\n\n  /**\n   * This establishes the rendering canvas context for the surface.\n   */\n  private setContext(\n    context?: WebGLRenderingContext | HTMLCanvasElement | string\n  ) {\n    if (!context) {\n      return;\n    }\n\n    if (isWebGLContext(context)) {\n      this.context = context;\n    } else if (isCanvas(context)) {\n      const canvasContext =\n        context.getContext(\"webgl\") || context.getContext(\"experimental-webgl\");\n\n      if (!canvasContext) {\n        console.warn(\n          \"A valid GL context was not found for the context provided to the surface. This surface will not be able to operate.\"\n        );\n      } else {\n        this.context = canvasContext;\n      }\n    } else if (isString(context)) {\n      const element = document.getElementById(context);\n\n      if (isCanvas(element)) {\n        this.setContext(element);\n      }\n    }\n  }\n\n  /**\n   * This applies a new size to the renderer and resizes any additional resources that requires being\n   * sized along with the renderer.\n   */\n  private setRendererSize(width: number, height: number) {\n    width = width || 100;\n    height = height || 100;\n\n    this.renderer.setSize(width, height);\n    this.pickingRenderer.setSize(width, height);\n\n    if (!this.pickingTarget) {\n      this.pickingTarget = new WebGLRenderTarget(width, height, {\n        magFilter: Three.LinearFilter,\n        minFilter: Three.LinearFilter,\n        stencilBuffer: false\n      });\n    }\n\n    this.pickingTarget.setSize(width, height);\n  }\n\n  /**\n   * This triggers an update to all of the layers that perform picking, the pixel data\n   * within the specified mouse range.\n   */\n  updateColorPickRange(mouse: Vec2, views: View[]) {\n    // We will flag the color range as needing an update\n    this.updateColorPick = {\n      mouse,\n      views\n    };\n  }\n}\n","export * from \"./layer-surface\";\nexport * from \"./event-manager\";\nexport * from \"./layer-processing/generate-default-scene\";\nexport * from \"./layer-processing/generate-layer-geometry\";\nexport * from \"./layer-processing/generate-layer-material\";\nexport * from \"./layer-processing/generate-layer-model\";\nexport * from \"./layer-processing/inject-shader-io\";\nexport * from \"./layer\";\nexport * from \"./mouse-event-manager\";\nexport * from \"./scene\";\nexport * from \"./texture\";\nexport * from \"./view\";\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float borderSize;\\nvarying vec2 pointCoord;\\n${extendHeader}\\n\\nvarying float scale;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  scale = scaleFactor;\\n\\n  vertexColor = color * color.a;\\n  float size = radius * scaleFactor;\\n\\n  float ringWidth = mix(2.0 , thickness, float(thickness > 2.0));\\n\\n  borderSize = mix(\\n    (ringWidth) / size,\\n    ((ringWidth * pixelRatio) / size),\\n    float(pixelRatio > 1.0)\\n  );\\n\\n  edgeSharpness = min(0.2 / (ringWidth * scale),  0.1);\\n\\n  pointCoord = (position.xy + vec2(1.0, 1.0)) / 2.0;\\n\\n  // Center within clip space\\n  vec4 clipCenter = clipSpace(vec3(center, depth));\\n  // Center in screen space\\n  vec2 screenCenter = (clipCenter.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Position in screen space\\n  vec2 vertex = (position.xy * size) + screenCenter;\\n  // Position back to clip space\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), clipCenter.zw);\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\n\\n/** This is the color of the ring */\\nvarying vec4 vertexColor;\\n/**\\n * This is how sharp the ring renders. For tiny rings, it's best to have\\n * less sharpness to better convey the shape of a circle. A good starter setting:\\n * edgeSharpness = mix(0.8, 0.01, min(gl_PointSize / 45.0, 1.0));\\n */\\nvarying float edgeSharpness;\\n/**\\n * This should be a value that sets the thickness of the ring in normal space\\n * relative to the PointSize\\n */\\nvarying float borderSize;\\n/**\\n * Since this is now a quad instead of a point sprite, this provides what gl_PointCoord\\n * used to provide.\\n */\\nvarying vec2 pointCoord;\\n\\nvarying float scale;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius,\\n    dot(dist, dist) * 4.0\\n  );\\n\\n}\\n\\n${extendHeader}\\n\\nvoid main() {\\n  float outer_step_factor = circle(pointCoord, 1.0);\\n  float inner_step_factor = circle(pointCoord, 1.0 - borderSize * scale);\\n\\n  setColor(mix(\\n    mix(                        // Select the outer color outside of the inner radius\\n      vec4(0.0, 0.0, 0.0, 0.0),    // Select invisible outside of inner and outer radius\\n      vertexColor,                  // Select outer color outside of inner, but inside outer\\n      outer_step_factor\\n    ),\\n    vec4(0.0, 0.0, 0.0, 0.0),                 // Select inner color inside inner\\n    inner_step_factor\\n  ));\\n\\n  ${extend}\\n}\\n\"","import * as Three from \"three\";\nimport { InstanceProvider } from \"../../instance-provider\";\nimport { Bounds, IPoint } from \"../../primitives\";\nimport { ILayerProps, IModelType, Layer } from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  IProjection,\n  IShaderInitialization,\n  IUniform,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport { CommonMaterialOptions, IAutoEasingMethod, Vec } from \"../../util\";\nimport { RingInstance } from \"./ring-instance\";\nconst { max } = Math;\n\nexport interface IRingLayerProps<T extends RingInstance>\n  extends ILayerProps<T> {\n  /** This sets a scaling factor for the circle's radius */\n  scaleFactor?(): number;\n  animate?: {\n    color?: IAutoEasingMethod<Vec>;\n    center?: IAutoEasingMethod<Vec>;\n    radius?: IAutoEasingMethod<Vec>;\n  };\n}\n\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class RingLayer<\n  T extends RingInstance,\n  U extends IRingLayerProps<T>\n> extends Layer<T, U> {\n  static defaultProps: IRingLayerProps<RingInstance> = {\n    key: \"\",\n    data: new InstanceProvider<RingInstance>()\n  };\n\n  static attributeNames = {\n    center: \"center\",\n    radius: \"radius\",\n    depth: \"depth\",\n    color: \"color\",\n    thickness: \"thickness\"\n  };\n\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods() {\n    return {\n      // Provide the calculated AABB world bounds for a given circle\n      boundsAccessor: (ring: RingInstance) =>\n        new Bounds({\n          height: ring.radius * 2,\n          width: ring.radius * 2,\n          x: ring.center[0] - ring.radius,\n          y: ring.center[1] - ring.radius\n        }),\n\n      // Provide a precise hit test for the ring\n      hitTest: (ring: RingInstance, point: IPoint, view: IProjection) => {\n        const r = ring.radius / max(...view.camera.scale);\n        const delta = [point.x - ring.center[0], point.y - ring.center[1]];\n\n        return delta[0] * delta[0] + delta[1] * delta[1] < r * r;\n      }\n    };\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<RingInstance> {\n    const scaleFactor = this.props.scaleFactor || (() => 1);\n    const animations = this.props.animate || {};\n    const {\n      color: animateColor,\n      center: animateCenter,\n      radius: animateRadius\n    } = animations;\n\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      1: 1,\n      2: -1,\n      3: 1,\n      4: -1,\n      5: -1\n    };\n\n    const vertexToSide: { [key: number]: number } = {\n      0: -1,\n      1: -1,\n      2: -1,\n      3: 1,\n      4: 1,\n      5: 1\n    };\n\n    return {\n      fs: require(\"./ring-layer.fs\"),\n      instanceAttributes: [\n        {\n          easing: animateCenter,\n          name: RingLayer.attributeNames.center,\n          size: InstanceAttributeSize.TWO,\n          update: o => o.center\n        },\n        {\n          easing: animateRadius,\n          name: RingLayer.attributeNames.radius,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.radius]\n        },\n        {\n          name: RingLayer.attributeNames.depth,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth]\n        },\n        {\n          easing: animateColor,\n          name: RingLayer.attributeNames.color,\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.color\n        },\n        {\n          name: RingLayer.attributeNames.thickness,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.thickness]\n        }\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: (_: IUniform) => [scaleFactor()]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexToSide[vertex],\n            0\n          ]\n        }\n      ],\n      vertexCount: 6,\n      vs: require(\"./ring-layer.vs\")\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentShape;\n  }\n}\n","import { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { observable } from \"../../instance-provider/observable\";\nimport { Vec2 } from \"../../util\";\n\nexport interface IRingInstanceOptions extends IInstanceOptions {\n  /** The center of the ring */\n  center?: Vec2;\n  /** The color of this ring */\n  color?: [number, number, number, number];\n  /** The z depth of the ring (for draw ordering) */\n  depth?: number;\n  /** The outer radius of the ring */\n  radius?: number;\n  /** The thickness of the ring */\n  thickness?: number;\n}\n\nexport class RingInstance extends Instance {\n  @observable color: [number, number, number, number] = [1.0, 1.0, 1.0, 1.0];\n  @observable depth: number = 0;\n  @observable radius: number = 0;\n  @observable thickness: number = 1;\n  @observable center: Vec2 = [0, 0];\n\n  constructor(options: IRingInstanceOptions) {\n    super(options);\n\n    this.color = options.color || this.color;\n    this.depth = options.depth || this.depth;\n    this.radius = options.radius || this.radius;\n    this.thickness = options.thickness || this.thickness;\n    this.center = options.center || this.center;\n  }\n\n  get width() {\n    return this.radius * 2;\n  }\n\n  get height() {\n    return this.radius * 2;\n  }\n\n  get innerRadius() {\n    return this.radius - this.thickness;\n  }\n}\n","export * from \"./ring-instance\";\nexport * from \"./ring-layer\";\n","import { observable } from \"../../instance-provider\";\nimport { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { Anchor, AnchorType, ScaleType } from \"../types\";\n\nexport interface IRectangleInstanceOptions extends IInstanceOptions {\n  /**\n   * The point on the rectangle which will be placed in world space via the x, y coords. This is also the point\n   * which the rectangle will be scaled around.\n   */\n  anchor?: Anchor;\n  /** Depth sorting of the rectangle (or the z value of the lable) */\n  depth?: number;\n  /** The height of the rectangle as it is to be rendered in world space */\n  height?: number;\n  /** Sets the way the rectangle scales with the world */\n  scaling?: ScaleType;\n  /** The color the rectangle should render as */\n  color: [number, number, number, number];\n  /** The width of the rectangle as it is to be rendered in world space */\n  width?: number;\n  /** The x coordinate where the rectangle will be anchored to in world space */\n  x?: number;\n  /** The y coordinate where the rectangle will be anchored to in world space */\n  y?: number;\n}\n\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nconst anchorCalculator: {\n  [key: number]: (anchor: Anchor, rectangle: RectangleInstance) => void;\n} = {\n  [AnchorType.TopLeft]: (anchor: Anchor, _rectangle: RectangleInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopMiddle]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width / 2.0;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopRight]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width + anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.MiddleLeft]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = rectangle.height / 2;\n  },\n  [AnchorType.Middle]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width / 2.0;\n    anchor.y = rectangle.height / 2.0;\n  },\n  [AnchorType.MiddleRight]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width + anchor.padding;\n    anchor.y = rectangle.height / 2.0;\n  },\n  [AnchorType.BottomLeft]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = rectangle.height + anchor.padding;\n  },\n  [AnchorType.BottomMiddle]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width / 2.0;\n    anchor.y = rectangle.height + anchor.padding;\n  },\n  [AnchorType.BottomRight]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width + anchor.padding;\n    anchor.y = rectangle.height + anchor.padding;\n  },\n  [AnchorType.Custom]: (anchor: Anchor, _rectangle: RectangleInstance) => {\n    anchor.x = anchor.x || 0;\n    anchor.y = anchor.y || 0;\n  }\n};\n\n/**\n * This generates a new rectangle instance which will render a single line of text for a given layer.\n * There are restrictions surrounding rectangles due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a rectangle via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Rectangles should only be so long.\n * - Multiline is not supported inherently\n * - Once a rectangle is constructed, only SOME properties can be altered thereafter\n *\n * A rectangle that is constructed can only have some properties set upon creating the rectangle and are locked\n * thereafter. The only way to modify them would be to destroy the rectangle, then construct a new rectangle\n * with the modifications. This has to deal with performance regarding rasterizing the rectangle\n */\nexport class RectangleInstance extends Instance {\n  /** This is the rendered color of the rectangle */\n  @observable color: [number, number, number, number] = [0, 0, 0, 1];\n  /** Depth sorting of the rectangle (or the z value of the lable) */\n  @observable depth: number = 0;\n  /** The height of the rectangle as it is to be rendered in world space */\n  @observable height: number = 1;\n  /** Sets the way the rectangle scales with the world */\n  @observable scaling: ScaleType = ScaleType.BOUND_MAX;\n  /** The width of the rectangle as it is to be rendered in world space */\n  @observable width: number = 1;\n  /** The x coordinate where the rectangle will be anchored to in world space */\n  @observable x: number = 0;\n  /** The y coordinate where the rectangle will be anchored to in world space */\n  @observable y: number = 0;\n\n  // These are properties that can be altered, but have side effects from being changed\n\n  /** This is the anchor location on the  */\n  @observable\n  private _anchor: Anchor = {\n    padding: 0,\n    type: AnchorType.TopLeft,\n    x: 0,\n    y: 0\n  };\n\n  constructor(options: IRectangleInstanceOptions) {\n    super(options);\n\n    this.depth = options.depth || this.depth;\n    this.color = options.color || this.color;\n    this.scaling = options.scaling || this.scaling;\n    this.x = options.x || this.x;\n    this.y = options.y || this.y;\n    this.width = options.width || 1;\n    this.height = options.height || 1;\n\n    // Make sure the anchor is set to the appropriate location\n    options.anchor && this.setAnchor(options.anchor);\n  }\n\n  get anchor() {\n    return this._anchor;\n  }\n\n  /**\n   * This applies a new anchor to this rectangle and properly determines it's anchor position on the rectangle\n   */\n  setAnchor(anchor: Anchor) {\n    const newAnchor = {\n      padding: anchor.padding || 0,\n      type: anchor.type,\n      x: anchor.x || 0,\n      y: anchor.y || 0\n    };\n\n    // Calculate the new anchors position values\n    anchorCalculator[newAnchor.type](newAnchor, this);\n    // Apply the anchor\n    this._anchor = newAnchor;\n  }\n}\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the image as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the image is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y;\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float((cameraScale.x > cameraScale.y || cameraScale.y > cameraScale.x) && useScaleMode != 0.0);\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n  // Apply the image's tint as a tint to the image\\n  vertexColor = color * color.a;\\n\\n  // Correct aspect ratio.\\n  vec2 adjustedSize = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * size + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the image\\n  float imageScreenScale = mix(\\n    screenSize.y / adjustedSize.y,\\n    screenSize.x / adjustedSize.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the image is supposed to be, then we automagically\\n  // scale down our image to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / imageScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\n${extendHeader}\\n\\nvoid main() {\\n  setColor(vertexColor);\\n  ${extend}\\n}\\n\"","import * as Three from \"three\";\nimport { InstanceProvider } from \"../../instance-provider\";\nimport { Bounds, IPoint } from \"../../primitives\";\nimport { ILayerProps, IModelType, Layer } from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  IProjection,\n  IShaderInitialization,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport { CommonMaterialOptions } from \"../../util\";\nimport { ScaleType } from \"../types\";\nimport { RectangleInstance } from \"./rectangle-instance\";\n\nconst { min, max } = Math;\n\nexport interface IRectangleLayerProps<T extends RectangleInstance>\n  extends ILayerProps<T> {\n  atlas?: string;\n}\n\n/**\n * This layer displays Rectangles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class RectangleLayer<\n  T extends RectangleInstance,\n  U extends IRectangleLayerProps<T>\n> extends Layer<T, U> {\n  static defaultProps: IRectangleLayerProps<RectangleInstance> = {\n    key: \"\",\n    data: new InstanceProvider<RectangleInstance>()\n  };\n\n  static attributeNames = {\n    location: \"location\",\n    anchor: \"anchor\",\n    size: \"size\",\n    depth: \"depth\",\n    scaling: \"scaling\",\n    color: \"color\"\n  };\n\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods() {\n    return {\n      // Provide the calculated AABB world bounds for a given rectangle\n      boundsAccessor: (rectangle: RectangleInstance) => {\n        const anchorEffect = [0, 0];\n\n        if (rectangle.anchor) {\n          anchorEffect[0] = rectangle.anchor.x || 0;\n          anchorEffect[1] = rectangle.anchor.y || 0;\n        }\n        const topLeft = [\n          rectangle.x - anchorEffect[0],\n          rectangle.y - anchorEffect[1]\n        ];\n\n        return new Bounds({\n          height: rectangle.height,\n          width: rectangle.width,\n          x: topLeft[0],\n          y: topLeft[1]\n        });\n      },\n\n      // Provide a precise hit test for the circle\n      hitTest: (\n        rectangle: RectangleInstance,\n        point: IPoint,\n        projection: IProjection\n      ) => {\n        // The bounds of the rectangle is in world space, but it does not account for the scale mode of the rectangle.\n        // Here, we will apply the scale mode testing to the rectangle\n        const maxScale = max(...projection.camera.scale);\n        const minScale = min(...projection.camera.scale);\n\n        // If we scale always then the rectangle stays within it's initial world bounds at all times\n        if (rectangle.scaling === ScaleType.ALWAYS) {\n          return true;\n        } else if (rectangle.scaling === ScaleType.BOUND_MAX) {\n          // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n          // Rectangle the same size. If the camera zooms out then the bounds === the world bounds.\n          // We are zooming out. the bounds will stay within the world bounds\n          if (minScale <= 1 && maxScale <= 1) {\n            return true;\n          } else {\n            // We are zooming in. The bounds will shrink to keep the rectangle at max font size\n            // The location is within the world, but we reverse project the anchor spread\n            const anchorEffect = [0, 0];\n\n            if (rectangle.anchor) {\n              anchorEffect[0] = rectangle.anchor.x || 0;\n              anchorEffect[1] = rectangle.anchor.y || 0;\n            }\n\n            const topLeft = [\n              rectangle.x - anchorEffect[0] / maxScale,\n              rectangle.y - anchorEffect[1] / maxScale\n            ];\n\n            // Reverse project the size and we should be within the distorted world coordinates\n            return new Bounds({\n              height: rectangle.height / maxScale,\n              width: rectangle.width / maxScale,\n              x: topLeft[0],\n              y: topLeft[1]\n            }).containsPoint(point);\n          }\n        } else if (rectangle.scaling === ScaleType.NEVER) {\n          // If we never allow the rectangle to scale, then the bounds will grow and shrink to counter the effects\n          // Of the camera zoom\n          // The location is within the world, but we reverse project the anchor spread\n          const anchorEffect = [0, 0];\n\n          if (rectangle.anchor) {\n            anchorEffect[0] = rectangle.anchor.x || 0;\n            anchorEffect[1] = rectangle.anchor.y || 0;\n          }\n\n          const topLeft = projection.worldToScreen({\n            x: rectangle.x - anchorEffect[0] / projection.camera.scale[0],\n            y: rectangle.y - anchorEffect[1] / projection.camera.scale[1]\n          });\n\n          const screenPoint = projection.worldToScreen(point);\n\n          // Reverse project the size and we should be within the distorted world coordinates\n          return new Bounds({\n            height: rectangle.height,\n            width: rectangle.width,\n            x: topLeft.x,\n            y: topLeft.y\n          }).containsPoint(screenPoint);\n        }\n\n        return true;\n      }\n    };\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<RectangleInstance> {\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      1: 1,\n      2: -1,\n      3: 1,\n      4: -1,\n      5: -1\n    };\n\n    const vertexToSide: { [key: number]: number } = {\n      0: 0,\n      1: 0,\n      2: 0,\n      3: 1,\n      4: 1,\n      5: 1\n    };\n\n    return {\n      fs: require(\"./rectangle-layer.fs\"),\n      instanceAttributes: [\n        {\n          name: RectangleLayer.attributeNames.location,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.x, o.y]\n        },\n        {\n          name: RectangleLayer.attributeNames.anchor,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.anchor.x || 0, o.anchor.y || 0]\n        },\n        {\n          name: RectangleLayer.attributeNames.size,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.width, o.height]\n        },\n        {\n          name: RectangleLayer.attributeNames.depth,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth]\n        },\n        {\n          name: RectangleLayer.attributeNames.scaling,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.scaling]\n        },\n        {\n          name: RectangleLayer.attributeNames.color,\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.color\n        }\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: _u => [1]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexToSide[vertex],\n            0\n          ]\n        }\n      ],\n      vertexCount: 6,\n      vs: require(\"./rectangle-layer.vs\")\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentShape;\n  }\n}\n","export * from \"./rectangle-layer\";\nexport * from \"./rectangle-instance\";\n","import { observable } from \"../../instance-provider\";\nimport { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { Label } from \"../../primitives/label\";\nimport { LabelAtlasResource, LabelRasterizer } from \"../../surface/texture\";\nimport { Anchor, AnchorType, ScaleType } from \"../types\";\n\nexport interface ILabelInstanceOptions\n  extends IInstanceOptions,\n    Partial<Label> {\n  /**\n   * The point on the label which will be placed in world space via the x, y coords. This is also the point\n   * which the label will be scaled around.\n   */\n  anchor?: Anchor;\n  /** The color the label should render as */\n  color: [number, number, number, number];\n  /** Depth sorting of the label (or the z value of the label) */\n  depth?: number;\n  /** The font of the label */\n  fontFamily?: string;\n  /** The font size of the label in px */\n  fontSize?: number;\n  /** Stylization of the font */\n  fontStyle?: Label[\"fontStyle\"];\n  /** The weight of the font */\n  fontWeight?: Label[\"fontWeight\"];\n  /** When this is set labels will only draw the label up to this size. If below, the label will automatically truncate with ellipses */\n  maxWidth?: number;\n  /** When in BOUND_MAX mode, this allows the label to scale up beyond it's max size */\n  maxScale?: number;\n  /** This allows for control over rasterization to the atlas */\n  rasterization?: {\n    /**\n     * This is the scale of the rasterization on the atlas. Higher numbers increase atlas usage, but can provide\n     * higher quality render outputs to the surface.\n     */\n    scale: number;\n  };\n  /** Sets the way the label scales with the world */\n  scaling?: ScaleType;\n  /** Scales the label uniformly */\n  scale?: number;\n  /** This will be the text that should render with  */\n  text: string;\n  /** The x coordinate where the label will be anchored to in world space */\n  x?: number;\n  /** The y coordinate where the label will be anchored to in world space */\n  y?: number;\n}\n\n/** This is to make a clear type that references label text values */\ntype TextValue = string;\n/** This is to make a clear type that references label css font values */\ntype CSSFont = string;\n/**\n * This is a reference for a rasterization that has reference counting. When the references go to zero,\n * the rasterization should be invalidated and resources freed for the rasterization.\n */\ntype RasterizationReference = {\n  resource: LabelAtlasResource;\n  references: number;\n};\n\n/**\n * This is a lookup to find existing rasterizations for a particularly created label so that every\n * new label does not have to go through the rasterization process.\n */\nconst rasterizationLookUp = new Map<\n  TextValue,\n  Map<CSSFont, RasterizationReference>\n>();\n\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nconst anchorCalculator: {\n  [key: number]: (anchor: Anchor, label: LabelInstance) => void;\n} = {\n  [AnchorType.TopLeft]: (anchor: Anchor, _label: LabelInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopMiddle]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width / 2.0;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopRight]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width + anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.MiddleLeft]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = label.height / 2;\n  },\n  [AnchorType.Middle]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width / 2.0;\n    anchor.y = label.height / 2.0;\n  },\n  [AnchorType.MiddleRight]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width + anchor.padding;\n    anchor.y = label.height / 2.0;\n  },\n  [AnchorType.BottomLeft]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = label.height + anchor.padding;\n  },\n  [AnchorType.BottomMiddle]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width / 2.0;\n    anchor.y = label.height + anchor.padding;\n  },\n  [AnchorType.BottomRight]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width + anchor.padding;\n    anchor.y = label.height + anchor.padding;\n  },\n  [AnchorType.Custom]: (anchor: Anchor, _label: LabelInstance) => {\n    anchor.x = anchor.x || 0;\n    anchor.y = anchor.y || 0;\n  }\n};\n\n/**\n * This generates a new label instance which will render a single line of text for a given layer.\n * There are restrictions surrounding labels due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a label via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Labels should only be so long.\n * - Multiline is not supported inherently\n * - Once a label is constructed, only SOME properties can be altered thereafter\n *\n * A label that is constructed can only have some properties set upon creating the label and are locked\n * thereafter. The only way to modify them would be to destroy the label, then construct a new label\n * with the modifications. This has to deal with performance regarding rasterizing the label\n */\nexport class LabelInstance extends Instance implements Label {\n  /**\n   * TODO: We should be implementing the destroy on LabelInstances to clean this up\n   * Frees up module scoped data.\n   */\n  static destroy() {\n    rasterizationLookUp.clear();\n  }\n\n  /** This is the rendered color of the label */\n  @observable color: [number, number, number, number] = [0, 0, 0, 1];\n  /** Depth sorting of the label (or the z value of the label) */\n  @observable depth: number = 0;\n  /** When in BOUND_MAX mode, this allows the label to scale up beyond it's max size */\n  @observable maxScale: number = 1;\n  /** Sets the way the label scales with the world */\n  @observable scaling: ScaleType = ScaleType.BOUND_MAX;\n  /** Scales the label uniformly */\n  @observable scale: number = 1.0;\n  /** The x coordinate where the label will be anchored to in world space */\n  @observable x: number = 0;\n  /** The y coordinate where the label will be anchored to in world space */\n  @observable y: number = 0;\n\n  // The following properties are properties that are locked in after creating this label\n  // As the properties are completely locked into how the label was rasterized and can not\n  // Nor should not be easily adjusted for performance concerns\n\n  private _cssFont: string = \"\";\n  private _fontFamily: string = \"Arial\";\n  private _fontSize: number = 12;\n  private _fontStyle: Label[\"fontStyle\"] = \"normal\";\n  private _fontWeight: Label[\"fontWeight\"] = 400;\n  private _maxWidth: number = 0;\n  private _text: string = \"\";\n\n  @observable private _width: number = 0;\n\n  @observable private _height: number = 0;\n\n  private _isDestroyed: boolean = false;\n\n  @observable private _rasterization: RasterizationReference;\n\n  // The following are the getters for the locked in parameters of the label so we can read\n  // The properties but not set any of them.\n\n  /**\n   * This is the full css string that represents this label. This + the text of the label is essentially\n   * a unique identifier for the rendering of the label and is used to key the rasterization of the label\n   * so that label rasterization can be shared for similar labels.\n   */\n  get cssFont() {\n    return this._cssFont;\n  }\n  /** This flag indicates if this label is valid anymore */\n  get isDestroyed() {\n    return this._isDestroyed;\n  }\n  /** This is the font family of the label */\n  get fontFamily() {\n    return this._fontFamily;\n  }\n  /**\n   * This is the size of the label in pixels. For Labels, this correlates to the rendering font size.\n   * The true pixel height of the label is calculated and placed into the height property for the label.\n   */\n  get fontSize() {\n    return this._fontSize;\n  }\n  /** This is the style of the font (italic, oblique, etc) */\n  get fontStyle() {\n    return this._fontStyle;\n  }\n  /** This is the font weight specified for the label (bold, normal, etc). */\n  get fontWeight() {\n    return this._fontWeight;\n  }\n  /** This is the max width in pixels this label can fill */\n  get maxWidth() {\n    return this._maxWidth;\n  }\n  /** This gets the atlas resource that is uniquely identified for this label */\n  get resource() {\n    return this._rasterization.resource;\n  }\n  /** This is the label's text. */\n  get text() {\n    return this._text;\n  }\n  /**\n   * If a maxWidth is specified, there is a chance the text will be truncated.\n   * This provides the calculated truncated text.\n   */\n  get truncatedText() {\n    return this._rasterization.resource.truncatedText || this.text;\n  }\n\n  /**\n   * This is the width in world space of the label. If there is no camera distortion,\n   * this would be the width of the label in pixels on the screen.\n   */\n  get width() {\n    return this._width;\n  }\n\n  /**\n   * This is the height in world space of the label. If there is no camera distortion,\n   * this would be the height of the label in pixels on the screen.\n   */\n  get height() {\n    return this._height;\n  }\n\n  // These are properties that can be altered, but have side effects from being changed\n\n  /** This is the anchor location on the  */\n  @observable\n  private _anchor: Anchor = {\n    padding: 0,\n    type: AnchorType.TopLeft,\n    x: 0,\n    y: 0\n  };\n\n  constructor(options: ILabelInstanceOptions) {\n    super(options);\n\n    this.depth = options.depth || this.depth;\n    this.color = options.color || this.color;\n    this.maxScale = options.maxScale || this.maxScale;\n    this.scaling = options.scaling || this.scaling;\n    this.scale = options.scale || this.scale;\n\n    this.x = options.x || this.x;\n    this.y = options.y || this.y;\n\n    this._fontFamily = options.fontFamily || this._fontFamily;\n    this._fontSize = options.fontSize || this._fontSize;\n    this._fontStyle = options.fontStyle || this._fontStyle;\n    this._fontWeight = options.fontWeight || this._fontWeight;\n    this._maxWidth = options.maxWidth || 0;\n    this._text = options.text || this._text;\n\n    // We get the CSS font string for this label so we can uniquely identify the rasterization\n    // Easily.\n    this._cssFont = LabelRasterizer.makeCSSFont(this, 1);\n    // This is css font used to look up rasterizations. This lookup includes the max width of the label\n    // Which the css font does not account for\n    const cssFontLookup = `${this._cssFont}_${this._maxWidth}`;\n    // Look for other same texts that have been rasterized\n    let rasterizations = rasterizationLookUp.get(this._text);\n    let rasterization: RasterizationReference | null | undefined;\n\n    if (rasterizations) {\n      // Look for those texts that have been rasterized in the same fashion that this label is requesting\n      rasterization = rasterizations.get(cssFontLookup);\n\n      // If a rasterization exists, we must increment the use reference\n      if (rasterization) {\n        rasterization.references++;\n      }\n    } else {\n      rasterizations = new Map<CSSFont, RasterizationReference>();\n    }\n\n    // If we have not found an existing rasterization\n    if (!rasterization) {\n      rasterization = {\n        references: 1,\n        resource: new LabelAtlasResource(this)\n      };\n\n      // Look to see if any rasterization options were specified\n      if (options.rasterization) {\n        rasterization.resource.sampleScale = options.rasterization.scale || 1.0;\n      }\n\n      // Ensure the sample scale is set. Defaults to 1.0\n      rasterization.resource.sampleScale =\n        rasterization.resource.sampleScale || 1.0;\n      // Rasterize the resource generated for this label. We need it immediately rasterized so\n      // That we can utilize the dimensions for calculations.\n      LabelRasterizer.renderSync(rasterization.resource);\n      // Now that we have an official rasterization for this text / label combo, we shall store it\n      // For others to look up\n      rasterizationLookUp.set(this._text, rasterizations);\n      rasterizations.set(cssFontLookup, rasterization);\n    }\n\n    this._rasterization = rasterization;\n    this._width = rasterization.resource.rasterization.world.width;\n    this._height = rasterization.resource.rasterization.world.height;\n\n    // Make sure the anchor is set to the appropriate location\n    options.anchor && this.setAnchor(options.anchor);\n  }\n\n  get anchor() {\n    return this._anchor;\n  }\n\n  /**\n   * Labels are a sort of unique case where the use of a label should be destroyed as rasterization\n   * resources are in a way kept alive through reference counting.\n   */\n  destroy() {\n    if (!this._isDestroyed) {\n      this._isDestroyed = true;\n      this._rasterization.references--;\n\n      // If all references are cleared, then the rasterization needs to be eradicated\n      if (this._rasterization.references === 0) {\n        this._rasterization.resource;\n      }\n    }\n  }\n\n  /**\n   * Triggers any attributes waiting on resources\n   */\n  resourceTrigger() {\n    // Trigger the accessed element that the layer utilizes for resource fetching.\n    this._rasterization = this._rasterization;\n    this._width = this._width;\n    // Make sure all public properties that could have changed during the load are triggered\n    // so they properly have updated all of their elements.\n    this.x = this.x;\n    this.y = this.y;\n    this.color = this.color;\n    this.depth = this.depth;\n    this.maxScale = this.maxScale;\n    this.scaling = this.scaling;\n    this.scale = this.scale;\n  }\n\n  /**\n   * This applies a new anchor to this label and properly determines it's anchor position on the label\n   */\n  setAnchor(anchor: Anchor) {\n    const newAnchor = {\n      padding: anchor.padding || 0,\n      type: anchor.type,\n      x: anchor.x || 0,\n      y: anchor.y || 0\n    };\n\n    // Calculate the new anchors position values\n    anchorCalculator[newAnchor.type](newAnchor, this);\n    // Apply the anchor\n    this._anchor = newAnchor;\n  }\n}\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Determine final screen size of label\\n  vec3 screenSize = cameraSpaceSize(vec3(size * scale / maxScale, 1.0));\\n\\n  // Test whether the label is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y || screenSize.x > size.x;\\n\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n\\n  // Correct aspect ratio.  Sufficient fix for most applications.\\n  // Will need another solution in the case of:\\n  //  (cameraScale y != cameraScale.x) && (cameraScale.x != 1 && cameraScale.y != 1)\\n\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float(cameraScale.x != cameraScale.y);\\n\\n  vec2 adjustedSize = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  vec2 scaledAnchor = anchor * scale;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + scaledAnchor;\\n\\n  vec2 adjustedAnchor = mix(\\n    scaledAnchor,\\n    (scaledAnchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // Get the position of the current vertex\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * scale * adjustedSize + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the label\\n  float labelScreenScale = mix(\\n    screenSize.y / adjustedSize.y,\\n    screenSize.x / adjustedSize.x,\\n    float((cameraScale.x != 1.0))\\n  );\\n\\n  float currentScale = labelScreenScale * scale;\\n\\n  // If our screen rendering is larger than the size the label is supposed to be, then we automagically\\n  // scale down our label to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / labelScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  // --Texture and Color\\n  // Get the tex coord from our inject texture info\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the label's color as a tint to the label (all labels are rendered white to the base texture)\\n  vertexColor = color;\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n${extendHeader}\\n\\nvoid main() {\\n  gl_FragColor = texture2D(labelAtlas, texCoord) * vertexColor;\\n  setColor(gl_FragColor * gl_FragColor.a);\\n  ${extend}\\n}\\n\"","import * as Three from \"three\";\nimport { InstanceProvider } from \"../../instance-provider\";\nimport { Bounds, IPoint } from \"../../primitives\";\nimport { ILayerProps, IModelType, Layer } from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  IProjection,\n  IShaderInitialization,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport {\n  CommonMaterialOptions,\n  IAutoEasingMethod,\n  Vec,\n  Vec2\n} from \"../../util\";\nimport { ScaleType } from \"../types\";\nimport { LabelInstance } from \"./label-instance\";\n\nexport interface ILabelLayerProps<T extends LabelInstance>\n  extends ILayerProps<T> {\n  atlas?: string;\n  animate?: {\n    color?: IAutoEasingMethod<Vec>;\n    location?: IAutoEasingMethod<Vec>;\n    size?: IAutoEasingMethod<Vec>;\n  };\n}\n\nconst { max, min } = Math;\n\n/**\n * This layer displays Labels and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class LabelLayer<\n  T extends LabelInstance,\n  U extends ILabelLayerProps<T>\n> extends Layer<T, U> {\n  static defaultProps: ILabelLayerProps<LabelInstance> = {\n    key: \"\",\n    data: new InstanceProvider<LabelInstance>()\n  };\n\n  static attributeNames = {\n    location: \"location\",\n    anchor: \"anchor\",\n    size: \"size\",\n    depth: \"depth\",\n    scaling: \"scaling\",\n    texture: \"texture\",\n    color: \"color\",\n    scale: \"scale\",\n    maxScale: \"maxScale\"\n  };\n\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods() {\n    return {\n      // Provide the calculated AABB world bounds for a given label\n      boundsAccessor: (label: LabelInstance) => {\n        const anchor: Vec2 = [label.anchor.x || 0, label.anchor.y || 0];\n\n        const topLeft = [label.x - anchor[0], label.y - anchor[1]];\n\n        return new Bounds({\n          height: label.height,\n          width: label.width,\n          x: topLeft[0],\n          y: topLeft[1]\n        });\n      },\n\n      // Provide a precise hit test for the circle\n      hitTest: (label: LabelInstance, point: IPoint, view: IProjection) => {\n        // The bounds of the label is in world space, but it does not account for the scale mode of the label.\n        // Here, we will apply the scale mode testing to the label\n        const maxScale = max(...view.camera.scale);\n        const minScale = min(...view.camera.scale);\n\n        // If we scale always then the label stays within it's initial world bounds at all times\n        if (label.scaling === ScaleType.ALWAYS) {\n          return true;\n        } else if (label.scaling === ScaleType.BOUND_MAX) {\n          // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n          // Label the same size. If the camera zooms out then the bounds === the world bounds.\n          // We are zooming out. the bounds will stay within the world bounds\n          if (minScale <= 1 && maxScale <= 1) {\n            return true;\n          } else {\n            // We are zooming in. The bounds will shrink to keep the label at max font size\n            const anchor: Vec2 = [label.anchor.x || 0, label.anchor.y || 0];\n\n            // The location is within the world, but we reverse project the anchor spread\n            const topLeft = view.worldToScreen({\n              x: label.x - anchor[0] / view.camera.scale[0],\n              y: label.y - anchor[1] / view.camera.scale[1]\n            });\n\n            const screenPoint = view.worldToScreen(point);\n\n            // Reverse project the size and we should be within the distorted world coordinates\n            return new Bounds({\n              height: label.height,\n              width: label.width,\n              x: topLeft.x,\n              y: topLeft.y\n            }).containsPoint(screenPoint);\n          }\n        } else if (label.scaling === ScaleType.NEVER) {\n          // If we never allow the label to scale, then the bounds will grow and shrink to counter the effects\n          // Of the camera zoom\n          const anchor: Vec2 = [label.anchor.x || 0, label.anchor.y || 0];\n\n          // The location is within the world, but we reverse project the anchor spread\n          const topLeft = view.worldToScreen({\n            x: label.x - anchor[0] / view.camera.scale[0],\n            y: label.y - anchor[1] / view.camera.scale[1]\n          });\n\n          const screenPoint = view.worldToScreen(point);\n\n          // Reverse project the size and we should be within the distorted world coordinates\n          return new Bounds({\n            height: label.height,\n            width: label.width,\n            x: topLeft.x,\n            y: topLeft.y\n          }).containsPoint(screenPoint);\n        }\n\n        return true;\n      }\n    };\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<LabelInstance> {\n    const animations = this.props.animate || {};\n    const {\n      color: animateColor,\n      location: animateLocation,\n      size: animateSize\n    } = animations;\n\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      1: 1,\n      2: -1,\n      3: 1,\n      4: -1,\n      5: -1\n    };\n\n    const vertexToSide: { [key: number]: number } = {\n      0: 0,\n      1: 0,\n      2: 0,\n      3: 1,\n      4: 1,\n      5: 1\n    };\n\n    return {\n      fs: require(\"./label-layer.fs\"),\n      instanceAttributes: [\n        {\n          easing: animateLocation,\n          name: LabelLayer.attributeNames.location,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.x, o.y]\n        },\n        {\n          name: LabelLayer.attributeNames.anchor,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.anchor.x || 0, o.anchor.y || 0]\n        },\n        {\n          easing: animateSize,\n          name: LabelLayer.attributeNames.size,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.width, o.height]\n        },\n        {\n          name: LabelLayer.attributeNames.depth,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth]\n        },\n        {\n          name: LabelLayer.attributeNames.scaling,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.scaling]\n        },\n        {\n          atlas: {\n            key: this.props.atlas || \"\",\n            name: \"labelAtlas\"\n          },\n          name: LabelLayer.attributeNames.texture,\n          update: o => this.resource.request(this, o, o.resource)\n        },\n        {\n          easing: animateColor,\n          name: LabelLayer.attributeNames.color,\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.color\n        },\n        {\n          name: LabelLayer.attributeNames.scale,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.scale]\n        },\n        {\n          name: LabelLayer.attributeNames.maxScale,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.maxScale]\n        }\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: _u => [1]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexToSide[vertex],\n            0\n          ]\n        }\n      ],\n      vertexCount: 6,\n      vs: require(\"./label-layer.vs\")\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentImage;\n  }\n}\n","import { ImageAtlasResource } from \"./image-atlas-resource\";\n\nlet canvas: CanvasRenderingContext2D | null;\n\nexport interface IImageRasterizedMetrics {\n  canvas: HTMLCanvasElement;\n  height: number;\n  width: number;\n}\n\nexport class ImageRasterizer {\n  /**\n   * This loops until our canvas context is available\n   */\n  static async awaitContext() {\n    // Iterate till the browser provides a valid canvas to render elements into\n    while (!canvas) {\n      this.getContext();\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n  }\n\n  /**\n   * Attempts to populate the 'canvas' context for rendering images offscreen.\n   */\n  static getContext() {\n    if (!canvas) {\n      canvas = document.createElement(\"canvas\").getContext(\"2d\");\n    }\n\n    return canvas;\n  }\n\n  /**\n   * This renders our image to a sizeable canvas where we loop over the pixel data to determine\n   * the bounds of the image.\n   *\n   * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n   *                                 the size to be rendered to the texture to the size the image\n   *                                 should be within world space.\n   * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n   */\n  static calculateImageSize(\n    resource: ImageAtlasResource,\n    _sampleScale?: number\n  ) {\n    /** Get the image properties for rasterizing */\n    const image = resource.image.element;\n\n    if (!image) {\n      console.warn(\n        \"Image does not exist! Please ensure the resource contains a valid image.\"\n      );\n      return;\n    }\n\n    if (!canvas) {\n      console.warn(\n        \"The Image rasterizer was unable to establish a valid canvas context. Please ensure the system supports contexts and ensure the document is ready first.\"\n      );\n      return;\n    }\n\n    if (image.width === 0 || image.height === 0) {\n      console.warn(\n        \"Images provided shoud have valid dimensions! Please ensure the image is loaded first.\"\n      );\n      return;\n    }\n\n    // Just make sure th canvas is available\n    canvas.canvas.width = 100;\n    canvas.canvas.height = 100;\n    // Render the image into our canvas merely to ensure the image can be rendered\n    // This action often 'warms up' images such as images that have a data URL instead of a path\n    canvas.drawImage(image, 0, 0);\n\n    // Make sure the rasterization object is initialized\n    resource.rasterization = resource.rasterization || {\n      texture: { height: 0, width: 0 },\n      world: { height: 0, width: 0 }\n    };\n\n    // Update the calculated texture size.\n    resource.rasterization.texture = {\n      height: image.height * resource.sampleScale,\n      width: image.width * resource.sampleScale\n    };\n\n    resource.rasterization.world = {\n      height: image.height,\n      width: image.width\n    };\n\n    resource.rasterization.image = image;\n  }\n\n  /**\n   * Performs the rendering of the image\n   */\n  static async render(\n    resource: ImageAtlasResource\n  ): Promise<ImageAtlasResource> {\n    // Make sure our canvas object is ready for rendering\n    await this.awaitContext();\n\n    // Calculate all of the image metrics and ensure the image can be drawn\n    this.calculateImageSize(resource, resource.sampleScale);\n\n    return resource;\n  }\n\n  /**\n   * Performs the rendering of the image\n   */\n  static renderSync(resource: ImageAtlasResource): ImageAtlasResource {\n    // Ensure our offscreen canvas is prepped\n    this.getContext();\n\n    if (!canvas) {\n      console.warn(\n        \"Can not render a image synchronously without the canvas context being ready.\"\n      );\n      return resource;\n    }\n\n    // Calculate all of the image metrics and generate a canvas on the image that can\n    // Be rendered to the canvas.\n    this.calculateImageSize(resource, resource.sampleScale);\n\n    return resource;\n  }\n}\n","import { Bounds } from \"../../primitives/bounds\";\nimport { Atlas, IAtlasOptions } from \"./atlas\";\nimport { ColorAtlasResource } from \"./color-atlas-resource\";\nimport { ColorRasterizer } from \"./color-rasterizer\";\nimport { ImageAtlasResource } from \"./image-atlas-resource\";\nimport { LabelAtlasResource } from \"./label-atlas-resource\";\nimport { LabelRasterizer } from \"./label-rasterizer\";\nimport { ImageDimensions, PackNode } from \"./pack-node\";\nimport { SubTexture } from \"./sub-texture\";\n\nconst debug = require(\"debug\")(\"webgl-surface:Atlas\");\n\nconst ZERO_IMAGE: SubTexture = {\n  aspectRatio: 0,\n  atlasBL: { x: 0, y: 0 },\n  atlasBR: { x: 0, y: 0 },\n  atlasReferenceID: \"\",\n  atlasTexture: null,\n  atlasTL: { x: 0, y: 0 },\n  atlasTR: { x: 0, y: 0 },\n  heightOnAtlas: 0,\n  isValid: false,\n  pixelHeight: 0,\n  pixelWidth: 0,\n  widthOnAtlas: 0\n};\n\nexport type AtlasResource =\n  | ColorAtlasResource\n  | LabelAtlasResource\n  | ImageAtlasResource;\n\n/**\n * Determines if a SubTexture is a valid SubTexture for rendering\n */\nfunction isValidImage(image: SubTexture) {\n  let isValid = false;\n\n  if (image && image.isValid) {\n    if (image.pixelWidth && image.pixelHeight) {\n      isValid = true;\n    }\n  }\n\n  return isValid;\n}\n\n/**\n * Defines a manager of atlas', which includes generating the atlas and producing\n * textures defining those pieces of atlas.\n */\nexport class AtlasManager {\n  /** Stores all of the generated atlas' in a lookup by name */\n  allAtlas = new Map<string, Atlas>();\n\n  /**\n   * Atlas' must be created from scratch to update them. In order to properly\n   * update an existing one, you must destroy it then recreate it again.\n   * This is from not knowing how to update a texture via three js.\n   *\n   * @param resources The images with their image path set to be loaded into the atlas.\n   *               Images that keep an atlas ID of null indicates the image did not load\n   *               correctly\n   *\n   * @return {Texture} The Threejs texture that is created as our atlas. The images injected\n   *                   into the texture will be populated with the atlas'\n   */\n  async createAtlas(options: IAtlasOptions, resources?: AtlasResource[]) {\n    // Create the new Atlas object that tracks all of our atlas' metrics\n    const atlas = new Atlas(options);\n    // Set the manager to the atlas\n    atlas.setManager(this);\n    // Make the atlas identifiable by it's name\n    this.allAtlas.set(atlas.id, atlas);\n\n    // Now we load, pack in, and draw each requested resource\n    if (resources) {\n      await this.updateAtlas(atlas.id, resources);\n    }\n\n    debug(\"Atlas Created-> %o\", atlas);\n\n    return atlas;\n  }\n\n  /**\n   * Free ALL resources under this manager\n   */\n  destroy() {\n    this.allAtlas.forEach(value => value.destroy());\n  }\n\n  /**\n   * Disposes of the resources the atlas held and makes the atlas invalid for use\n   *\n   * @param atlasName\n   */\n  destroyAtlas(atlasName: string) {\n    const atlas = this.allAtlas.get(atlasName);\n\n    if (atlas) {\n      atlas.destroy();\n    }\n  }\n\n  private setDefaultImage(image: SubTexture, atlasName: string) {\n    image = Object.assign(image, ZERO_IMAGE, { atlasReferenceID: atlasName });\n    return image;\n  }\n\n  /**\n   * This loads, packs, and draws the indicated image into the specified canvas\n   * using the metrics that exists for the specified atlas.\n   *\n   * @param resource The image who should have it's image path loaded\n   * @param atlasName The name of the atlas to make the packing work\n   * @param canvas The canvas we will be drawing into to generate the complete image\n   *\n   * @return {Promise<boolean>} Promise that resolves to if the image successfully was drawn or not\n   */\n  private async draw(atlas: Atlas, resource: AtlasResource): Promise<boolean> {\n    const canvas = atlas.texture.image;\n    const atlasName = atlas.id;\n\n    // Register the resource with the atlas\n    if (!atlas.registerResource(resource)) {\n      console.warn(\n        \"Could not draw resource to the atlas as the resource was not properly registered to the atlas first\",\n        atlas,\n        resource\n      );\n      return Promise.resolve(false);\n    }\n\n    // First we must load the image\n    // Make a buffer to hold our new image\n    // Load the image into memory, default to keeping the alpha channel\n    const loadedImage: HTMLImageElement | null = await this.loadImage(resource);\n\n    // Only a non-null image means the image loaded correctly\n    if (loadedImage && isValidImage(resource.texture)) {\n      // Get the sub texture that is going to be applied to the atlas\n      const rasterization = resource.rasterization;\n      const texture = resource.texture;\n      // Now we create a Rectangle to store the image dimensions\n      const rect: Bounds = new Bounds({\n        bottom: rasterization.texture.height,\n        left: 0,\n        right: rasterization.texture.width,\n        top: 0\n      });\n      // Create ImageDimension to insert into our atlas mapper\n      const dimensions: ImageDimensions = {\n        first: texture,\n        second: rect\n      };\n\n      // Auto add a buffer in\n      dimensions.second.width += 1;\n      dimensions.second.height += 1;\n      // Get the atlas map node\n      const packing: PackNode = atlas.packing;\n      // Store the node resulting from the insert operation\n      const insertedNode: PackNode | null = packing.insert(dimensions);\n\n      // If the result was NULL we did not successfully insert the image into any map\n      if (insertedNode) {\n        debug(\"Atlas location determined: %o\", insertedNode);\n\n        // Apply the image to the node\n        insertedNode.nodeImage = texture;\n\n        // Set our image's atlas properties\n        const ux = insertedNode.nodeDimensions.x / atlas.width;\n        const uy = insertedNode.nodeDimensions.y / atlas.height;\n        const uw = insertedNode.nodeDimensions.width / atlas.width;\n        const uh = insertedNode.nodeDimensions.height / atlas.height;\n        const onePixelX = 1 / atlas.width;\n\n        const atlasDimensions: Bounds = new Bounds({\n          bottom: 1.0 - uy,\n          left: ux,\n          right: ux + uw,\n          top: 1.0 - (uy + uh)\n        });\n\n        const bottom = atlasDimensions.bottom;\n        const top = atlasDimensions.y;\n        const left = atlasDimensions.x;\n        const right = atlasDimensions.x + atlasDimensions.width - onePixelX;\n\n        texture.atlasReferenceID = atlasName;\n        texture.atlasTL = { x: left, y: top };\n        texture.atlasBR = { x: right, y: bottom };\n        texture.atlasBL = { x: left, y: bottom };\n        texture.atlasTR = { x: right, y: top };\n        texture.widthOnAtlas = Math.abs(texture.atlasTR.x - texture.atlasTL.x);\n        texture.heightOnAtlas = Math.abs(texture.atlasTR.y - texture.atlasBR.y);\n        texture.pixelWidth = rasterization.texture.width;\n        texture.pixelHeight = rasterization.texture.height;\n\n        // Now draw the image to the indicated canvas\n        canvas\n          .getContext(\"2d\")\n          .drawImage(\n            loadedImage,\n            insertedNode.nodeDimensions.x,\n            insertedNode.nodeDimensions.y\n          );\n\n        // We have finished inserting\n        return true;\n      } else {\n        // Log an error\n        console.error(`Could not fit resource into atlas`, resource);\n        resource.texture = this.setDefaultImage(resource.texture, atlasName);\n        return false;\n      }\n    } else {\n      if (!resource.texture.isValid) {\n        debug(\"Resource was invalidated during load:\", resource);\n      } else {\n        // Log an error and load a default sub texture\n        console.error(`Could not load resource:`, resource);\n      }\n\n      resource.texture = this.setDefaultImage(resource.texture, atlasName);\n      return false;\n    }\n  }\n\n  /**\n   * Retrieves the threejs texture for the atlas\n   *\n   * @param atlasName The identifier of the atlas\n   */\n  getAtlasTexture(atlasName: string): Atlas | undefined {\n    return this.allAtlas.get(atlasName);\n  }\n\n  /**\n   * This takes in any atlas resource and rasterizes it.\n   *\n   * @param {SubTexture} resource This is any atlas resource which will have it's image rasterized\n   *\n   * @return {Promise<HTMLImageElement>} A promise to resolve to the loaded image\n   *                                     or null if there was an error\n   */\n  private async loadImage(\n    resource: AtlasResource\n  ): Promise<HTMLImageElement | null> {\n    let imageSrc: string = \"\";\n\n    const subTexture = resource.texture || new SubTexture();\n    resource.texture = subTexture;\n\n    if (resource.texture.isValid === false) return null;\n\n    if (resource instanceof ImageAtlasResource) {\n      // If the texture was provided an image then we ensure the image is loaded\n      // Then hand it back\n      if (resource.image.element) {\n        if (\n          resource.image.element.width !== 0 &&\n          resource.image.element.height !== 0\n        ) {\n          const image = resource.image.element;\n          subTexture.pixelWidth = image.width;\n          subTexture.pixelHeight = image.height;\n          subTexture.aspectRatio = image.width / image.height;\n\n          return image;\n        }\n\n        const image = await new Promise<HTMLImageElement | null>(resolve => {\n          const image: HTMLImageElement | undefined = resource.image.element;\n\n          if (image) {\n            image.onload = function() {\n              subTexture.pixelWidth = image.width;\n              subTexture.pixelHeight = image.height;\n              subTexture.aspectRatio = image.width / image.height;\n              resolve(image);\n            };\n\n            image.onerror = function() {\n              resolve(null);\n            };\n          } else {\n            resolve(null);\n          }\n        });\n\n        return image;\n      } else if (resource.image.path) {\n        // If a string was returned, we must load the image then return the image\n        imageSrc = resource.image.path;\n      }\n    } else if (resource instanceof LabelAtlasResource) {\n      // Ensure the label has been rasterized to a canvas element\n      if (!resource.rasterization.canvas) {\n        await LabelRasterizer.render(resource);\n      }\n\n      // Make sure the rasterization properly executed\n      if (resource.rasterization.canvas) {\n        debug(\"Rasterized label %o\", resource.rasterization);\n        imageSrc = resource.rasterization.canvas.toDataURL(\"image/png\");\n      } else {\n        console.warn(\"The label was not able to be rasterized\");\n      }\n    } else if (resource instanceof ColorAtlasResource) {\n      // Ensure the color has been rasterized to a canvas element\n      if (!resource.rasterization.canvas) {\n        await ColorRasterizer.render(resource);\n      }\n\n      // Make sure the rasterization properly executed\n      if (resource.rasterization.canvas) {\n        debug(\"Rasterized color %o\", resource.rasterization);\n        imageSrc = resource.rasterization.canvas.toDataURL(\"image/png\");\n      } else {\n        console.warn(\"The color was not able to be rasterized\");\n      }\n    }\n\n    if (imageSrc) {\n      const image = await new Promise<HTMLImageElement | null>(resolve => {\n        const image: HTMLImageElement = new Image();\n\n        image.onload = function() {\n          subTexture.pixelWidth = image.width;\n          subTexture.pixelHeight = image.height;\n          subTexture.aspectRatio = image.width / image.height;\n          resolve(image);\n        };\n\n        image.onerror = function() {\n          resolve(null);\n        };\n\n        image.src = imageSrc;\n      });\n\n      return image;\n    }\n\n    return null;\n  }\n\n  /**\n   * This targets an existing atlas and attempts to update it with the provided atlas resources.\n   *\n   * @param atlasName\n   * @param resources\n   */\n  async updateAtlas(atlasName: string, resources: AtlasResource[]) {\n    const atlas = this.allAtlas.get(atlasName);\n\n    if (atlas) {\n      for (const resource of resources) {\n        await this.draw(atlas, resource);\n      }\n\n      // Perform the best method for updating the underlying texture of the atlas to the latest changes\n      atlas.updateTexture();\n    } else {\n      console.warn(\n        \"Can not update non-existing atlas:\",\n        atlasName,\n        \"These resources will not be loaded:\",\n        resources\n      );\n    }\n  }\n}\n","import { Bounds } from \"../../primitives/bounds\";\nimport { SubTexture } from \"./sub-texture\";\n\n/**\n * Helps us track the bounds of the image being loaded in tied in with the\n * texture it represents\n */\nexport interface ImageDimensions {\n  first: SubTexture;\n  second: Bounds;\n}\n\n/**\n * This is used specifically by the atlas manager to aid in packing\n * in textures within an area. This will guarantee boundaries of textures are\n * not violated and provide proper feedback for where to draw a given image\n */\nexport class PackNode {\n  child: [PackNode | null, PackNode | null] = [null, null];\n  isLeaf: boolean = true;\n  nodeDimensions: Bounds;\n  nodeImage: SubTexture | null = null;\n\n  constructor(x: number, y: number, width: number, height: number) {\n    this.nodeDimensions = new Bounds({\n      height,\n      width,\n      x,\n      y\n    });\n  }\n\n  /**\n   * Deletes all of the sub nodes in this Mapping, thus clearing up memory usage\n   */\n  destroy() {\n    const child0 = this.child[0];\n    const child1 = this.child[1];\n    this.nodeImage = null;\n    if (child0) {\n      child0.destroy();\n    }\n    if (child1) {\n      child1.destroy();\n    }\n    this.child[0] = null;\n    this.child[1] = null;\n  }\n\n  /**\n   * Indicates if there is a child\n   */\n  hasChild(): boolean {\n    const child0 = this.child[0];\n    const child1 = this.child[1];\n    if (child0 && !child0.nodeImage) {\n      return !child0.isLeaf;\n    }\n    if (child1 && !child1.nodeImage) {\n      return !child1.isLeaf;\n    }\n    return false;\n  }\n\n  /**\n   * Inserts images into our mapping, fitting them appropriately\n   */\n  insert(image: ImageDimensions): PackNode | null {\n    let child0 = this.child[0];\n    let child1 = this.child[1];\n\n    if (!this.isLeaf && child0 && child1) {\n      // Try inserting into first child\n      const newNode: PackNode | null = child0.insert(image);\n      if (newNode !== null) {\n        return newNode;\n      }\n      // No room in first so insert into second\n      return child1.insert(image);\n    } else {\n      // If there's already an image here, return\n      if (this.nodeImage) {\n        return null;\n      }\n      // Check the fit status of the image in this nodes rectangle space\n      const fitFlag: number = this.nodeDimensions.fits(image.second);\n      // If we're too small, return null indicating can not fit\n      if (fitFlag === 0) {\n        return null;\n      }\n      // If we're just right, accept\n      if (fitFlag === 1) {\n        return this;\n      }\n\n      // Otherwise, gotta split this node and create some leaves\n      this.isLeaf = false;\n      // Get the image width\n      const imgWidth: number = image.second.width;\n      const imgHeight: number = image.second.height;\n      // Decide which way to split\n      const dWidth: number = this.nodeDimensions.width - imgWidth;\n      const dHeight: number = this.nodeDimensions.height - image.second.height;\n\n      if (dWidth > dHeight) {\n        child0 = this.child[0] = new PackNode(\n          this.nodeDimensions.x,\n          this.nodeDimensions.y,\n          imgWidth,\n          this.nodeDimensions.height\n        );\n        child1 = this.child[1] = new PackNode(\n          this.nodeDimensions.x + imgWidth,\n          this.nodeDimensions.y,\n          dWidth,\n          this.nodeDimensions.height\n        );\n      } else {\n        child0 = this.child[0] = new PackNode(\n          this.nodeDimensions.x,\n          this.nodeDimensions.y,\n          this.nodeDimensions.width,\n          imgHeight\n        );\n        child1 = this.child[1] = new PackNode(\n          this.nodeDimensions.x,\n          this.nodeDimensions.y + imgHeight,\n          this.nodeDimensions.width,\n          dHeight\n        );\n      }\n    }\n\n    // Insert into first child we created\n    return child0.insert(image);\n  }\n\n  /**\n   * Removes the image from the mapping and tries to open up as much space as possible.\n   *\n   * @param {AtlasTexture} image The image to insert into the\n   */\n  remove(image: SubTexture): boolean {\n    const child0 = this.child[0];\n    const child1 = this.child[1];\n\n    if (child1 && child0 && !this.isLeaf) {\n      // Try removing from first child\n      let removed: boolean = child0.remove(image);\n      if (removed) {\n        return true;\n      }\n      // Try remove from second\n      removed = child1.remove(image);\n\n      if (!child0.hasChild()) {\n        if (!child1.hasChild()) {\n          this.child[0] = null;\n          this.child[1] = null;\n        }\n      }\n\n      return removed;\n    } else {\n      if (this.nodeImage === image) {\n        this.nodeImage = null;\n        delete image.atlasReferenceID;\n        image.pixelWidth = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n}\n","import { observable } from \"../../instance-provider\";\nimport { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { Image } from \"../../primitives/image\";\nimport { ImageAtlasResource, ImageRasterizer } from \"../../surface/texture\";\nimport { Anchor, AnchorType, ScaleType } from \"../types\";\n\nconst { max } = Math;\n\nexport interface IImageInstanceOptions extends IInstanceOptions {\n  /**\n   * The point on the image which will be placed in world space via the x, y coords. This is also the point\n   * which the image will be scaled around.\n   */\n  anchor?: Anchor;\n  /** Depth sorting of the image (or the z value of the lable) */\n  depth?: number;\n  /** This is the HTMLImageElement that the image is to render. This element MUST be loaded completely before this instance is created. */\n  element: HTMLImageElement;\n  /** The height of the image as it is to be rendered in world space */\n  height?: number;\n  /** Sets the way the image scales with the world */\n  scaling?: ScaleType;\n  /** The color the image should render as */\n  tint: [number, number, number, number];\n  /** The width of the image as it is to be rendered in world space */\n  width?: number;\n  /** The x coordinate where the image will be anchored to in world space */\n  x?: number;\n  /** The y coordinate where the image will be anchored to in world space */\n  y?: number;\n}\n\n/**\n * This is a reference for a rasterization that has reference counting. When the references go to zero,\n * the rasterization should be invalidated and resources freed for the rasterization.\n */\ntype RasterizationReference = {\n  resource: ImageAtlasResource;\n  references: number;\n};\n\n/**\n * This is a lookup to find existing rasterizations for a particularly created image so that every\n * new image does not have to go through the rasterization process.\n */\nconst rasterizationLookUp = new Map<\n  string | HTMLImageElement,\n  RasterizationReference\n>();\n\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nconst anchorCalculator: {\n  [key: number]: (anchor: Anchor, image: ImageInstance) => void;\n} = {\n  [AnchorType.TopLeft]: (anchor: Anchor, _image: ImageInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopMiddle]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width / 2.0;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopRight]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width + anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.MiddleLeft]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = image.height / 2;\n  },\n  [AnchorType.Middle]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width / 2.0;\n    anchor.y = image.height / 2.0;\n  },\n  [AnchorType.MiddleRight]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width + anchor.padding;\n    anchor.y = image.height / 2.0;\n  },\n  [AnchorType.BottomLeft]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = image.height + anchor.padding;\n  },\n  [AnchorType.BottomMiddle]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width / 2.0;\n    anchor.y = image.height + anchor.padding;\n  },\n  [AnchorType.BottomRight]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width + anchor.padding;\n    anchor.y = image.height + anchor.padding;\n  },\n  [AnchorType.Custom]: (anchor: Anchor, _image: ImageInstance) => {\n    anchor.x = anchor.x || 0;\n    anchor.y = anchor.y || 0;\n  }\n};\n\n/**\n * This generates a new image instance.\n * There are restrictions surrounding images due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a image via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Images should only be so large.\n * - Once a image is constructed, only SOME properties can be altered thereafter\n *\n * An image that is constructed can only have some properties set upon creating the image and are locked\n * thereafter. The only way to modify them would be to destroy the image, then construct a new image\n * with the modifications. This has to deal with performance regarding rasterizing the image.\n */\nexport class ImageInstance extends Instance implements Image {\n  /**\n   * TODO: We should be implementing the destroy on ImageInstances to clean this up\n   * Frees up module scoped data.\n   */\n  static destroy() {\n    rasterizationLookUp.clear();\n  }\n\n  /** This is the rendered color of the image */\n  @observable tint: [number, number, number, number] = [0, 0, 0, 1];\n  /** Depth sorting of the image (or the z value of the lable) */\n  @observable depth: number = 0;\n  /** The height of the image as it is to be rendered in world space */\n  @observable height: number = 1;\n  /** Sets the way the image scales with the world */\n  @observable scaling: ScaleType = ScaleType.BOUND_MAX;\n  /** The width of the image as it is to be rendered in world space */\n  @observable width: number = 1;\n  /** The x coordinate where the image will be anchored to in world space */\n  @observable x: number = 0;\n  /** The y coordinate where the image will be anchored to in world space */\n  @observable y: number = 0;\n\n  get size() {\n    return max(this.width, this.height);\n  }\n  set size(value: number) {\n    const aspect = this.width / this.height;\n    this.width = value * aspect;\n    this.height = value;\n  }\n\n  // The following properties are properties that are locked in after creating this image\n  // As the properties are completely locked into how the image was rasterized and can not\n  // Nor should not be easily adjusted for performance concerns\n\n  private _sourceWidth: number = 0;\n  private _sourceHeight: number = 0;\n  private _isDestroyed: boolean = false;\n  @observable private _rasterization: RasterizationReference;\n  private _path: string;\n  private _element: HTMLImageElement;\n\n  // The following are the getters for the locked in parameters of the image so we can read\n  // The properties but not set any of them.\n\n  /** This is the provided element this image will be rendering */\n  get element() {\n    return this._element;\n  }\n  /** This flag indicates if this image is valid anymore */\n  get isDestroyed() {\n    return this._isDestroyed;\n  }\n  /** This is the path to the image's resource if it's available */\n  get path() {\n    return this._path;\n  }\n  /** This gets the atlas resource that is uniquely idenfied for this image */\n  get resource() {\n    return this._rasterization.resource;\n  }\n\n  /**\n   * This is the width in world space of the image. If there is no camera distortion,\n   * this would be the width of the image in pixels on the screen.\n   */\n  get sourceWidth() {\n    return this._sourceWidth;\n  }\n\n  /**\n   * This is the height in world space of the image. If there is no camera distortion,\n   * this would be the height of the image in pixels on the screen.\n   */\n  get sourceHeight() {\n    return this._sourceHeight;\n  }\n\n  // These are properties that can be altered, but have side effects from being changed\n\n  /** This is the anchor location on the  */\n  @observable\n  private _anchor: Anchor = {\n    padding: 0,\n    type: AnchorType.TopLeft,\n    x: 0,\n    y: 0\n  };\n\n  constructor(options: IImageInstanceOptions) {\n    super(options);\n\n    this.depth = options.depth || this.depth;\n    this.tint = options.tint || this.tint;\n    this.scaling = options.scaling || this.scaling;\n    this.x = options.x || this.x;\n    this.y = options.y || this.y;\n\n    // This is the image that is to be rendered\n    this._element = options.element;\n    // Look for other same texts that have been rasterized\n    let rasterization = rasterizationLookUp.get(this._path || this._element);\n\n    // If a rasterization exists, we must increment the use reference\n    if (rasterization) {\n      rasterization.references++;\n    }\n\n    // If we have not found an existing rasterization\n    if (!rasterization) {\n      rasterization = {\n        references: 1,\n        resource: new ImageAtlasResource(this)\n      };\n\n      // Ensure the sample scale is set. Defaults to 1.0\n      rasterization.resource.sampleScale =\n        rasterization.resource.sampleScale || 1.0;\n      // Rasterize the resource generated for this image. We need it immediately rasterized so\n      // That we can utilize the dimensions for calculations.\n      ImageRasterizer.renderSync(rasterization.resource);\n      // Now that we have an official rasterization for this image, we shall store it\n      // For others to look up\n      rasterizationLookUp.set(this._path || this._element, rasterization);\n    }\n\n    this._rasterization = rasterization;\n    this._sourceWidth = rasterization.resource.rasterization.world.width;\n    this._sourceHeight = rasterization.resource.rasterization.world.height;\n\n    this.width = options.width || this._sourceWidth || 1;\n    this.height = options.height || this._sourceHeight || 1;\n\n    // Make sure the anchor is set to the appropriate location\n    options.anchor && this.setAnchor(options.anchor);\n  }\n\n  get anchor() {\n    return this._anchor;\n  }\n\n  /**\n   * Images are a sort of unique case where the use of a image should be destroyed as rasterization\n   * resources are in a way kept alive through reference counting.\n   */\n  destroy() {\n    if (!this._isDestroyed) {\n      this._isDestroyed = true;\n      this._rasterization.references--;\n\n      // If all references are cleared, then the rasterization needs to be eradicated\n      if (this._rasterization.references === 0) {\n        this._rasterization.resource;\n        console.warn(\"The destroy method still needs completion\");\n      }\n    }\n  }\n\n  resourceTrigger() {\n    // Trigger the accessed element that the layer utilizes for resource fetching.\n    this._rasterization = this._rasterization;\n\n    this.tint = this.tint;\n    this.depth = this.depth;\n    this.height = this.height;\n    this.scaling = this.scaling;\n    this.width = this.width;\n    this.x = this.x;\n    this.y = this.y;\n  }\n\n  /**\n   * This applies a new anchor to this image and properly determines it's anchor position on the image\n   */\n  setAnchor(anchor: Anchor) {\n    const newAnchor = {\n      padding: anchor.padding || 0,\n      type: anchor.type,\n      x: anchor.x || 0,\n      y: anchor.y || 0\n    };\n\n    // Calculate the new anchors position values\n    anchorCalculator[newAnchor.type](newAnchor, this);\n    // Apply the anchor\n    this._anchor = newAnchor;\n  }\n}\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the image as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the image is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y;\\n\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float(cameraScale.x != cameraScale.y);\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n\\n  // Get the tex coord from our inject texture info\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the image's tint as a tint to the image\\n  vertexColor = tint;\\n\\n  // Correct aspect ratio.\\n  vec2 adjustedSize = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * adjustedSize + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the image\\n  float imageScreenScale = mix(\\n    screenSize.y / adjustedSize.y,\\n    screenSize.x / adjustedSize.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the image is supposed to be, then we automagically\\n  // scale down our image to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / imageScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n${extendHeader}\\n\\nvoid main() {\\n  gl_FragColor = texture2D(imageAtlas, texCoord) * vertexColor;\\n  setColor(gl_FragColor * gl_FragColor.a);\\n  ${extend}\\n}\\n\"","import * as Three from \"three\";\nimport { InstanceProvider } from \"../../instance-provider\";\nimport { Bounds, IPoint } from \"../../primitives\";\nimport { ILayerProps, IModelType, Layer } from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  IProjection,\n  IShaderInitialization,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport { IAutoEasingMethod, Vec } from \"../../util\";\nimport { CommonMaterialOptions } from \"../../util/common-options\";\nimport { ScaleType } from \"../types\";\nimport { ImageInstance } from \"./image-instance\";\n\nconst { min, max } = Math;\n\nexport interface IImageLayerProps<T extends ImageInstance>\n  extends ILayerProps<T> {\n  atlas?: string;\n  animate?: {\n    tint?: IAutoEasingMethod<Vec>;\n    location?: IAutoEasingMethod<Vec>;\n    size?: IAutoEasingMethod<Vec>;\n  };\n}\n\n/**\n * This layer displays Images and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class ImageLayer<\n  T extends ImageInstance,\n  U extends IImageLayerProps<T>\n> extends Layer<T, U> {\n  static defaultProps: IImageLayerProps<any> = {\n    key: \"\",\n    data: new InstanceProvider<ImageInstance>()\n  };\n\n  static attributeNames = {\n    location: \"location\",\n    anchor: \"anchor\",\n    size: \"size\",\n    depth: \"depth\",\n    scaling: \"scaling\",\n    texture: \"texture\",\n    tint: \"tint\"\n  };\n\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods() {\n    return {\n      // Provide the calculated AABB world bounds for a given image\n      boundsAccessor: (image: ImageInstance) => {\n        const anchorEffect = [0, 0];\n\n        if (image.anchor) {\n          anchorEffect[0] = image.anchor.x || 0;\n          anchorEffect[1] = image.anchor.y || 0;\n        }\n\n        const topLeft = [image.x - anchorEffect[0], image.y - anchorEffect[1]];\n\n        return new Bounds({\n          height: image.height,\n          width: image.width,\n          x: topLeft[0],\n          y: topLeft[1]\n        });\n      },\n\n      // Provide a precise hit test for the circle\n      hitTest: (image: ImageInstance, point: IPoint, view: IProjection) => {\n        // The bounds of the image is in world space, but it does not account for the scale mode of the image.\n        // Here, we will apply the scale mode testing to the image\n        const maxScale = max(...view.camera.scale);\n        const minScale = min(...view.camera.scale);\n\n        // If we scale always then the image stays within it's initial world bounds at all times\n        if (image.scaling === ScaleType.ALWAYS) {\n          return true;\n        } else if (image.scaling === ScaleType.BOUND_MAX) {\n          // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n          // Image the same size. If the camera zooms out then the bounds === the world bounds.\n          // We are zooming out. the bounds will stay within the world bounds\n          if (minScale <= 1 && maxScale <= 1) {\n            return true;\n          } else {\n            // We are zooming in. The bounds will shrink to keep the image at max font size\n            // The location is within the world, but we reverse project the anchor spread\n            const anchorEffect = [0, 0];\n\n            if (image.anchor) {\n              anchorEffect[0] = image.anchor.x || 0;\n              anchorEffect[1] = image.anchor.y || 0;\n            }\n\n            const topLeft = view.worldToScreen({\n              x: image.x - anchorEffect[0] / view.camera.scale[0],\n              y: image.y - anchorEffect[1] / view.camera.scale[1]\n            });\n\n            const screenPoint = view.worldToScreen(point);\n\n            // Reverse project the size and we should be within the distorted world coordinates\n            return new Bounds({\n              height: image.height,\n              width: image.width,\n              x: topLeft.x,\n              y: topLeft.y\n            }).containsPoint(screenPoint);\n          }\n        } else if (image.scaling === ScaleType.NEVER) {\n          // If we never allow the image to scale, then the bounds will grow and shrink to counter the effects\n          // Of the camera zoom\n          // The location is within the world, but we reverse project the anchor spread\n          const anchorEffect = [0, 0];\n\n          if (image.anchor) {\n            anchorEffect[0] = image.anchor.x || 0;\n            anchorEffect[1] = image.anchor.y || 0;\n          }\n\n          const topLeft = view.worldToScreen({\n            x: image.x - anchorEffect[0] / view.camera.scale[0],\n            y: image.y - anchorEffect[1] / view.camera.scale[1]\n          });\n\n          const screenPoint = view.worldToScreen(point);\n\n          // Reverse project the size and we should be within the distorted world coordinates\n          return new Bounds({\n            height: image.height,\n            width: image.width,\n            x: topLeft.x,\n            y: topLeft.y\n          }).containsPoint(screenPoint);\n        }\n\n        return true;\n      }\n    };\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<ImageInstance> {\n    const animations = this.props.animate || {};\n    const {\n      tint: animateTint,\n      location: animateLocation,\n      size: animateSize\n    } = animations;\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      1: 1,\n      2: -1,\n      3: 1,\n      4: -1,\n      5: -1\n    };\n\n    const vertexToSide: { [key: number]: number } = {\n      0: 0,\n      1: 0,\n      2: 0,\n      3: 1,\n      4: 1,\n      5: 1\n    };\n\n    return {\n      fs: require(\"./image-layer.fs\"),\n      instanceAttributes: [\n        {\n          easing: animateLocation,\n          name: ImageLayer.attributeNames.location,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.x, o.y]\n        },\n        {\n          name: ImageLayer.attributeNames.anchor,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.anchor.x || 0, o.anchor.y || 0]\n        },\n        {\n          easing: animateSize,\n          name: ImageLayer.attributeNames.size,\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.width, o.height]\n        },\n        {\n          name: ImageLayer.attributeNames.depth,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth]\n        },\n        {\n          name: ImageLayer.attributeNames.scaling,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.scaling]\n        },\n        {\n          atlas: {\n            key: this.props.atlas || \"\",\n            name: \"imageAtlas\"\n          },\n          name: ImageLayer.attributeNames.texture,\n          update: o => this.resource.request(this, o, o.resource)\n        },\n        {\n          easing: animateTint,\n          name: ImageLayer.attributeNames.tint,\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.tint\n        }\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: _u => [1]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexToSide[vertex],\n            0\n          ]\n        }\n      ],\n      vertexCount: 6,\n      vs: require(\"./image-layer.vs\")\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentImage;\n  }\n}\n","import { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { observable } from \"../../instance-provider/observable\";\n\nexport interface IEdgeInstanceOptions extends IInstanceOptions {\n  /** The color of this edge at the start point. */\n  colorStart?: [number, number, number, number];\n  /** The color of this edge at the end point. */\n  colorEnd?: [number, number, number, number];\n  /** This is the list of control points  */\n  control?: [number, number][];\n  /** The z depth of the edge (for draw ordering) */\n  depth?: number;\n  /** End point of the edge. */\n  end: [number, number];\n  /** Beginning point of the edge. */\n  start: [number, number];\n  /** Start width of the edge. */\n  widthStart?: number;\n  /** End width of the edge */\n  widthEnd?: number;\n}\n\nexport type EdgeColor = [number, number, number, number];\n\nexport class EdgeInstance extends Instance {\n  @observable colorStart: EdgeColor = [1.0, 1.0, 1.0, 1.0];\n  @observable colorEnd: EdgeColor = [1.0, 1.0, 1.0, 1.0];\n  @observable control: [number, number][] = [[0, 0], [0, 0]];\n  @observable depth: number = 0;\n  @observable end: [number, number] = [0, 0];\n  @observable start: [number, number] = [0, 0];\n  @observable widthStart: number = 1.0;\n  @observable widthEnd: number = 1.0;\n\n  get length() {\n    const delta = [this.end[0] - this.start[0], this.end[1] - this.start[1]];\n\n    return Math.sqrt(delta[0] * delta[0] + delta[1] * delta[1]);\n  }\n\n  /**\n   * Calculates the midpoint of the edge\n   */\n  get midpoint() {\n    return 0;\n  }\n\n  /**\n   * Calculates a perpendicular direction vector to the edge\n   */\n  get perpendicular(): [number, number] {\n    const length = this.length;\n\n    return [\n      (this.end[1] - this.start[1]) / length,\n      -(this.end[0] - this.start[0]) / length\n    ];\n  }\n\n  /**\n   * Applies the edge width to the start and end\n   */\n  setEdgeWidth(width: number) {\n    if (width) {\n      this.widthEnd = width;\n      this.widthStart = width;\n    }\n  }\n\n  /**\n   * Applies the color to the start and end\n   */\n  setColor(color: EdgeColor) {\n    this.colorStart = color;\n    this.colorEnd = color;\n  }\n\n  constructor(options: IEdgeInstanceOptions) {\n    super(options);\n    this.colorStart = options.colorStart || this.colorStart;\n    this.colorEnd = options.colorEnd || this.colorEnd;\n    this.control = options.control || this.control;\n    this.depth = options.depth || this.depth;\n    this.end = options.end || this.end;\n    this.widthStart = options.widthStart || this.widthStart;\n    this.widthEnd = options.widthEnd || this.widthEnd;\n    this.start = options.start || this.start;\n  }\n}\n","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\n${extendHeader}\\n\\nvoid main() {\\n  setColor(vertexColor);\\n  ${extend}\\n}\\n\"","module.exports = \"/**\\n  This vertex shader calculates edges based in world space to make an edge based on\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nprecision highp float;\\n\\nvarying vec4 vertexColor;\\n\\n// Interpolation type injection\\n${interpolation}\\n\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n\\n  // Convert our world points to screen space\\n  vec4 startClip = clipSpace(vec3(start, depth));\\n  vec4 endClip = clipSpace(vec3(end, depth));\\n  vec2 startScreen = (startClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  vec2 endScreen = (endClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Controls for this mode are screen space deltas from the end points\\n  vec2 control1 = startScreen + vec2(control.x, -control.y) * scaleFactor;\\n  vec2 control2 = endScreen + vec2(control.z, -control.w) * scaleFactor;\\n\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, startScreen, endScreen, control1, control2);\\n  // Calculate the next and previous segment's location on the line\\n  vec2 prePosition = interpolation(interpolationTime - interpolationIncrement, startScreen, endScreen, control1, control2);\\n  vec2 nextPosition = interpolation(interpolationTime + interpolationIncrement, startScreen, endScreen, control1, control2);\\n\\n  vec2 preLine = prePosition - currentPosition;\\n  vec2 nextLine = nextPosition - currentPosition;\\n\\n  // Get a spliced nromal at the joining of two segments to make a crisper curve\\n  vec2 currentNormal = mix(\\n    // Pick this value if we're at the beginning of the line\\n    normalize(vec2(preLine.y, -preLine.x)),\\n    mix(\\n      // Pick this value when we're between the ends\\n      normalize(vec2(preLine.y, -preLine.x) + vec2(-nextLine.y, nextLine.x)),\\n      // Pick this value if we're at the end of the line\\n      normalize(vec2(-nextLine.y, nextLine.x)),\\n      float(position.x >= 1.0)\\n    ),\\n    float(position.x > 0.0)\\n  );\\n\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (-normal * lineThickness * scaleFactor);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a * layerOpacity;\\n\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), startClip.zw);\\n  gl_PointSize = 5.0;\\n\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\n/**\\n  This vertex shader calculates edges whose curve and width is in screen space where the curve is\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nvarying vec4 vertexColor;\\n\\n// Interpolation type injection\\n${interpolation}\\n\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, start, end, control.xy, control.zw);\\n  // Calculate the next and previous segment's location on the line\\n  vec2 prePosition = interpolation(interpolationTime - interpolationIncrement, start, end, control.xy, control.zw);\\n  vec2 nextPosition = interpolation(interpolationTime + interpolationIncrement, start, end, control.xy, control.zw);\\n\\n  vec2 preLine = prePosition - currentPosition;\\n  vec2 nextLine = nextPosition - currentPosition;\\n\\n  // Get a spliced nromal at the joining of two segments to make a crisper curve\\n  vec2 currentNormal = mix(\\n    // Pick this value if we're at the beginning of the line\\n    normalize(vec2(preLine.y, -preLine.x)),\\n    mix(\\n      // Pick this value when we're between the ends\\n      normalize(vec2(preLine.y, -preLine.x) + vec2(-nextLine.y, nextLine.x)),\\n      // Pick this value if we're at the end of the line\\n      normalize(vec2(-nextLine.y, nextLine.x)),\\n      float(position.x >= 1.0)\\n    ),\\n    float(position.x > 0.0)\\n  );\\n\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (normal * lineThickness);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a * layerOpacity;\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n  gl_PointSize = 5.0;\\n\\n  ${extend}\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  float t1 = 1.0 - t;\\n  return pow(t1, 3.0) * p1 + 3.0 * t * pow(t1, 2.0) * c1 + 3.0 * pow(t, 2.0) * t1 * c2 + pow(t, 3.0) * p2;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return (1.0 - t) * (1.0 - t) * p1 + 2.0 * t * (1.0 - t) * c1 + t * t * p2;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return p1 + (p2 - p1) * t;\\n}\\n\"","/**\n * This file contains the logic for handling edge picking via quad tree and hit tests.\n * The methods involved are fairly robust and would clutter the layer's code file.\n */\nimport { IPoint } from \"../../primitives\";\nimport { Bounds } from \"../../primitives/bounds\";\nimport { IPickingMethods } from \"../../surface/layer\";\nimport { IProjection } from \"../../types\";\nimport {\n  add2,\n  dot2,\n  length2,\n  scale2,\n  subtract2,\n  Vec2\n} from \"../../util/vector\";\nimport { EdgeInstance } from \"./edge-instance\";\nimport { IEdgeLayerProps } from \"./edge-layer\";\nimport { EdgeBroadphase, EdgeScaleType, EdgeType } from \"./types\";\nconst { pow } = Math;\n\ntype InterpolationMethod = (\n  t: number,\n  p1: Vec2,\n  p2: Vec2,\n  c1: Vec2,\n  c2: Vec2\n) => Vec2;\n\n/** This is an interpolation across a line */\nfunction linear(t: number, p1: Vec2, p2: Vec2, _c1: Vec2, _c2: Vec2): Vec2 {\n  return add2(scale2(subtract2(p2, p1), t), p1);\n}\n\n/** This is an interpolation across a bezier curve, single control */\nfunction bezier(t: number, p1: Vec2, p2: Vec2, c1: Vec2, _c2: Vec2): Vec2 {\n  return [\n    (1.0 - t) * (1.0 - t) * p1[0] + 2.0 * t * (1.0 - t) * c1[0] + t * t * p2[0],\n    (1.0 - t) * (1.0 - t) * p1[1] + 2.0 * t * (1.0 - t) * c1[1] + t * t * p2[1]\n  ];\n}\n\n/** This is an interpolation across a bezier curve, double control */\nfunction bezier2(t: number, p1: Vec2, p2: Vec2, c1: Vec2, c2: Vec2): Vec2 {\n  const t1 = 1.0 - t;\n\n  return [\n    pow(t1, 3.0) * p1[0] +\n      3.0 * t * pow(t1, 2.0) * c1[0] +\n      3.0 * pow(t, 2.0) * t1 * c2[0] +\n      pow(t, 3.0) * p2[0],\n    pow(t1, 3.0) * p1[1] +\n      3.0 * t * pow(t1, 2.0) * c1[1] +\n      3.0 * pow(t, 2.0) * t1 * c2[1] +\n      pow(t, 3.0) * p2[1]\n  ];\n}\n\n/** A quick lookup for an interpolation method based on Edge Type */\nconst interpolation: { [key: number]: InterpolationMethod } = {\n  [EdgeType.LINE]: linear,\n  [EdgeType.BEZIER]: bezier,\n  [EdgeType.BEZIER2]: bezier2\n};\n\n/** Converts a point array to a point object */\nfunction toPointObject(point: Vec2): IPoint {\n  return {\n    x: point[0],\n    y: point[1]\n  };\n}\n\n/** Converts a point object to a point array */\nfunction toPointArray(point: IPoint): Vec2 {\n  return [point.x, point.y];\n}\n\n/** Takes two points that forms a line then calculates the nearest distance from that line to the third point */\nfunction distanceTo(start: Vec2, end: Vec2, p: Vec2) {\n  // Make a vector from a line point to the indicated point\n  const vector: Vec2 = subtract2(start, p);\n  const lineDirection: Vec2 = subtract2(end, start);\n  const lineNormal: Vec2 = [lineDirection[1], -lineDirection[0]];\n  const distance: number =\n    Math.abs(dot2(vector, lineNormal)) / length2(lineDirection);\n\n  // The distance is d = |v . r| where v is a unit perpendicular vector to the Line\n  return distance;\n}\n\n// This sets the number of iterations along a curve we sample to test collisions with\nconst TEST_RESOLUTION = 50;\n\n/**\n * This generates the picking methods needed for managing PickType.ALL for the edge layer.\n */\nexport function edgePicking<T extends EdgeInstance>(\n  props: IEdgeLayerProps<T>\n): IPickingMethods<EdgeInstance> {\n  const { broadphase, minPickDistance = 0, scaleType, type } = props;\n  const interpolate = interpolation[props.type];\n\n  const boundsAccessor = (edge: EdgeInstance) => {\n    const edgeWidthStart = edge.widthStart / 2 + minPickDistance;\n    const edgeWidthEnd = edge.widthEnd / 2 + minPickDistance;\n    // Encapsulate the endpoints as they are guaranteed to be included in the shape\n    // Each endpoint will be a box that includes the endpoint thickness\n    const bounds = new Bounds({\n      height: edge.widthStart,\n      width: edge.widthStart,\n      x: edge.start[0] - edgeWidthStart,\n      y: edge.start[1] - edgeWidthStart\n    });\n\n    bounds.encapsulate(\n      new Bounds({\n        height: edge.widthEnd,\n        width: edge.widthEnd,\n        x: edge.end[0] - edgeWidthEnd,\n        y: edge.end[1] - edgeWidthEnd\n      })\n    );\n\n    // Encapsulating the bezier control points is enough of a broadphase for beziers\n    if (props.type === EdgeType.BEZIER) {\n      bounds.encapsulate({\n        x: edge.control[0][0],\n        y: edge.control[0][1]\n      });\n    } else if (props.type === EdgeType.BEZIER2) {\n      // Encapsulating the bezier control points is enough of a broadphase for beziers\n      bounds.encapsulate({\n        x: edge.control[0][0],\n        y: edge.control[0][1]\n      });\n\n      bounds.encapsulate({\n        x: edge.control[1][0],\n        y: edge.control[1][1]\n      });\n    }\n\n    if (broadphase === EdgeBroadphase.PASS_X) {\n      bounds.x = Number.MIN_SAFE_INTEGER / 2;\n      bounds.width = Number.MAX_SAFE_INTEGER;\n    }\n\n    if (broadphase === EdgeBroadphase.PASS_Y) {\n      bounds.y = Number.MIN_SAFE_INTEGER / 2;\n      bounds.height = Number.MAX_SAFE_INTEGER;\n    }\n\n    return bounds;\n  };\n\n  if (scaleType === EdgeScaleType.SCREEN_CURVE) {\n    return {\n      // Provide the calculated AABB world bounds for a given circle\n      boundsAccessor,\n\n      // Provide a precise hit test for the edge. This method performs all of the rendering\n      // And hit tests within screen space as opposed to world space.\n      hitTest: (edge: EdgeInstance, point: IPoint, view: IProjection) => {\n        point = view.worldToScreen(point);\n        const mouse: Vec2 = [point.x, point.y];\n        let closestIndex = 0;\n        let closestDistance = Number.MAX_VALUE;\n        let secondClosestIndex = 0;\n        let secondClosestDistance = Number.MAX_VALUE;\n\n        const start = view.worldToScreen(toPointObject(edge.start));\n        const end = view.worldToScreen(toPointObject(edge.end));\n        let control1: Vec2 = [0, 0];\n        let control2: Vec2 = [0, 0];\n\n        if (type === EdgeType.BEZIER) {\n          control1 = add2(toPointArray(start), edge.control[0]);\n        } else if (type === EdgeType.BEZIER2) {\n          control1 = add2(toPointArray(start), edge.control[0]);\n          control2 = add2(toPointArray(end), edge.control[1]);\n        }\n\n        const startPoint = toPointArray(start);\n        const endPoint = toPointArray(end);\n\n        control1 = edge.control.length > 0 ? control1 : [0, 0];\n        control2 = edge.control.length > 1 ? control2 : [0, 0];\n\n        // Loop through sample points on the line and find one that is closest to the mouse point as possible\n        for (let i = 0; i < TEST_RESOLUTION; ++i) {\n          const linePoint = interpolate(\n            i / TEST_RESOLUTION,\n            startPoint,\n            endPoint,\n            control1,\n            control2\n          );\n          const distance = length2(subtract2(mouse, linePoint));\n\n          if (distance < closestDistance) {\n            secondClosestIndex = closestIndex;\n            secondClosestDistance = closestDistance;\n            closestIndex = i;\n            closestDistance = distance;\n          } else if (distance < secondClosestDistance) {\n            secondClosestIndex = i;\n            closestDistance = distance;\n          }\n        }\n\n        const t = closestIndex / TEST_RESOLUTION;\n        const lineWidth =\n          (edge.widthEnd - edge.widthStart) * t + edge.widthStart;\n\n        if (closestIndex === secondClosestIndex) {\n          return false;\n        }\n\n        const startSegment = interpolate(\n          closestIndex / TEST_RESOLUTION,\n          startPoint,\n          endPoint,\n          control1,\n          control2\n        );\n\n        const endSegment = interpolate(\n          secondClosestIndex / TEST_RESOLUTION,\n          startPoint,\n          endPoint,\n          control1,\n          control2\n        );\n\n        // See how close the mouse is to the line between the two closest points for a more accurate\n        // Test\n        closestDistance = distanceTo(startSegment, endSegment, mouse);\n\n        // This helps determine if the mouse is beyond the end point\n        if (\n          dot2(\n            subtract2(endSegment, startSegment),\n            subtract2(mouse, startSegment)\n          ) < 0\n        ) {\n          return false;\n        }\n\n        return closestDistance < lineWidth / 2.0 + minPickDistance;\n      }\n    };\n  }\n\n  return {\n    // Provide the calculated AABB world bounds for a given circle\n    boundsAccessor,\n\n    // Provide a precise hit test for the edge\n    hitTest: (edge: EdgeInstance, point: IPoint, _view: IProjection) => {\n      const mouse: [number, number] = [point.x, point.y];\n      let closestIndex = 0;\n      let closestDistance = Number.MAX_VALUE;\n\n      // Loop through sample points on the line and find one that is closest to the mouse point as possible\n      for (let i = 0; i < TEST_RESOLUTION; ++i) {\n        const linePoint = interpolate(\n          i / TEST_RESOLUTION,\n          edge.start,\n          edge.end,\n          edge.control.length > 0 ? edge.control[0] : [0, 0],\n          edge.control.length > 1 ? edge.control[1] : [0, 0]\n        );\n        const distance = length2(subtract2(mouse, linePoint));\n\n        if (distance < closestDistance) {\n          closestIndex = i;\n          closestDistance = distance;\n        }\n      }\n\n      const t = closestIndex / TEST_RESOLUTION;\n      const lineWidth = (edge.widthEnd - edge.widthStart) * t + edge.widthStart;\n\n      return closestDistance < lineWidth / 2.0;\n    }\n  };\n}\n","import * as Three from \"three\";\nimport { InstanceProvider } from \"../../instance-provider\";\nimport { templateVars } from \"../../shaders/template-vars\";\nimport {\n  ILayerProps,\n  IModelType,\n  IPickingMethods,\n  Layer\n} from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  InstanceIOValue,\n  IShaderInitialization,\n  IUniform,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport {\n  CommonMaterialOptions,\n  IAutoEasingMethod,\n  shaderTemplate,\n  Vec\n} from \"../../util\";\nimport { EdgeInstance } from \"./edge-instance\";\nimport { edgePicking } from \"./edge-picking\";\nimport { EdgeBroadphase, EdgeScaleType, EdgeType } from \"./types\";\n\nexport interface IEdgeLayerProps<T extends EdgeInstance>\n  extends ILayerProps<T> {\n  /** Properties for animating attributes */\n  animate?: {\n    end?: IAutoEasingMethod<Vec>;\n    start?: IAutoEasingMethod<Vec>;\n    colorStart?: IAutoEasingMethod<Vec>;\n    colorEnd?: IAutoEasingMethod<Vec>;\n    control?: IAutoEasingMethod<Vec>;\n  };\n  /** Allows adjustments for broadphase interactions for an edge */\n  broadphase?: EdgeBroadphase;\n  /** Any distance to the mouse from an edge that is less than this distance will be picked */\n  minPickDistance?: number;\n  /** The transparency of the layer as a whole. (Makes for very efficient fading of all elements) */\n  opacity?: number;\n  /** This sets a scaling factor for the edge's line width and curve  */\n  scaleFactor?(): number;\n  /**\n   * If this is set, then the thickness of the line and the curvature of the line exists in screen space\n   * rather than world space.\n   */\n  scaleType?: EdgeScaleType;\n  /** Specifies how the edge is formed */\n  type: EdgeType;\n}\n\nexport interface IEdgeLayerState {}\n\n/** Converts a control list to an IO value */\nfunction toInstanceIOValue(value: [number, number][]): InstanceIOValue {\n  return [value[0][0], value[0][1], value[1][0], value[1][1]];\n}\n\n/** This picks the appropriate shader for the edge type desired */\nconst pickVS = {\n  [EdgeType.LINE]: require(\"./shader/edge-layer-line.vs\"),\n  [EdgeType.BEZIER]: require(\"./shader/edge-layer-bezier.vs\"),\n  [EdgeType.BEZIER2]: require(\"./shader/edge-layer-bezier2.vs\")\n};\n\n/** This is the base edge layer which is a template that can be filled with the needed specifics for a given line type */\nconst baseVS = require(\"./shader/edge-layer.vs\");\nconst screenVS = require(\"./shader/edge-layer-screen-curve.vs\");\nconst edgeFS = require(\"./shader/edge-layer.fs\");\n\n/**\n * This layer displays edges and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class EdgeLayer<\n  T extends EdgeInstance,\n  U extends IEdgeLayerProps<T>\n> extends Layer<T, U> {\n  // Set default props for the layer\n  static defaultProps: IEdgeLayerProps<EdgeInstance> = {\n    broadphase: EdgeBroadphase.ALL,\n    data: new InstanceProvider<EdgeInstance>(),\n    key: \"none\",\n    scaleType: EdgeScaleType.NONE,\n    type: EdgeType.LINE\n  };\n\n  static attributeNames = {\n    start: \"start\",\n    end: \"end\",\n    widthStart: \"widthStart\",\n    widthEnd: \"widthEnd\",\n    depth: \"depth\",\n    colorStart: \"colorStart\",\n    colorEnd: \"colorEnd\",\n    control: \"control\"\n  };\n\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods(): IPickingMethods<EdgeInstance> {\n    return edgePicking(this.props);\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<EdgeInstance> {\n    const {\n      animate = {},\n      scaleFactor = () => 1,\n      type,\n      scaleType = EdgeScaleType.NONE\n    } = this.props;\n\n    const {\n      end: animateEnd,\n      start: animateStart,\n      colorStart: animateColorStart,\n      colorEnd: animateColorEnd,\n      control: animateControl\n    } = animate;\n\n    const MAX_SEGMENTS = type === EdgeType.LINE ? 2 : 50;\n\n    // Calculate the normals and interpolations for our vertices\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      [MAX_SEGMENTS * 2 + 2]: -1\n    };\n\n    const vertexInterpolation: { [key: number]: number } = {\n      0: 0,\n      [MAX_SEGMENTS * 2 + 2]: 1\n    };\n\n    let sign = 1;\n    for (let i = 0; i < MAX_SEGMENTS * 2; ++i) {\n      vertexToNormal[i + 1] = sign;\n      vertexInterpolation[i + 1] = Math.floor(i / 2) / (MAX_SEGMENTS - 1);\n      sign *= -1;\n    }\n\n    const vs = shaderTemplate({\n      options: {\n        // Retain the attributes injection\n        attributes: \"${attributes}\",\n        // Inject the proper interpolation method\n        interpolation: pickVS[type]\n      },\n      required: {\n        name: \"Edge Layer\",\n        values: [\"interpolation\"]\n      },\n      shader: scaleType === EdgeScaleType.NONE ? baseVS : screenVS,\n\n      // We do not want to remove any extension macros\n      onToken: (token, replace) => {\n        if (\n          token === templateVars.extendHeader ||\n          token === templateVars.extend\n        ) {\n          return `$\\{${token}}`;\n        }\n\n        return replace;\n      }\n    });\n\n    return {\n      fs: edgeFS,\n      instanceAttributes: [\n        {\n          easing: animateStart,\n          name: EdgeLayer.attributeNames.start,\n          size: InstanceAttributeSize.TWO,\n          update: o => o.start\n        },\n        {\n          easing: animateEnd,\n          name: EdgeLayer.attributeNames.end,\n          size: InstanceAttributeSize.TWO,\n          update: o => o.end\n        },\n        {\n          name: EdgeLayer.attributeNames.widthStart,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.widthStart]\n        },\n        {\n          name: EdgeLayer.attributeNames.widthEnd,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.widthEnd]\n        },\n        {\n          name: EdgeLayer.attributeNames.depth,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth]\n        },\n        {\n          easing: animateColorStart,\n          name: EdgeLayer.attributeNames.colorStart,\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.colorStart\n        },\n        {\n          easing: animateColorEnd,\n          name: EdgeLayer.attributeNames.colorEnd,\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.colorEnd\n        },\n        type === EdgeType.LINE\n          ? {\n              easing: animateControl,\n              name: EdgeLayer.attributeNames.control,\n              size: InstanceAttributeSize.FOUR,\n              update: _o => [0, 0, 0, 0]\n            }\n          : null,\n        type === EdgeType.BEZIER\n          ? {\n              easing: animateControl,\n              name: EdgeLayer.attributeNames.control,\n              size: InstanceAttributeSize.FOUR,\n              update: o => [o.control[0][0], o.control[0][1], 0, 0]\n            }\n          : null,\n        type === EdgeType.BEZIER2\n          ? {\n              easing: animateControl,\n              name: EdgeLayer.attributeNames.control,\n              size: InstanceAttributeSize.FOUR,\n              update: o => toInstanceIOValue(o.control)\n            }\n          : null\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: (_uniform: IUniform) => [scaleFactor()]\n        },\n        {\n          name: \"layerOpacity\",\n          size: UniformSize.ONE,\n          update: (_uniform: IUniform) => [\n            this.props.opacity === undefined ? 1.0 : this.props.opacity\n          ]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexInterpolation[vertex],\n            // The number of vertices\n            MAX_SEGMENTS * 2\n          ]\n        }\n      ],\n      vertexCount: MAX_SEGMENTS * 2 + 2,\n      vs: vs.shader\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentShape;\n  }\n}\n","export * from \"./edge-layer\";\nexport * from \"./edge-instance\";\nexport * from \"./types\";\n","import { observable } from \"../../instance-provider\";\nimport { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { Vec2 } from \"../../util\";\n\nexport interface ICircleInstanceOptions extends IInstanceOptions {\n  /** Center x position of the circle */\n  center: Vec2;\n  /** The radius of the circle */\n  radius: number;\n  /** The color of this circle */\n  color?: [number, number, number, number];\n  /** The z depth of the circle (for draw ordering) */\n  depth?: number;\n}\n\nexport class CircleInstance extends Instance {\n  @observable color: [number, number, number, number] = [1.0, 1.0, 1.0, 1.0];\n  @observable depth: number = 0;\n  @observable radius: number = 0;\n  @observable center: Vec2 = [0, 0];\n\n  constructor(options: ICircleInstanceOptions) {\n    super(options);\n\n    this.color = options.color || this.color;\n    this.radius = options.radius || this.radius;\n    this.center = options.center || this.center;\n    this.depth = options.depth || this.depth;\n  }\n\n  get width() {\n    return this.radius * 2;\n  }\n\n  get height() {\n    return this.radius * 2;\n  }\n}\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float edgeSharpnessBase;\\nvarying vec2 pointCoord;\\n\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  vertexColor = color * color.a * layerOpacity;\\n  float size = radius * scaleFactor;\\n  edgeSharpness = mix(0.8, 0.0, min((size * 6.0 * pixelRatio) / (45.0 * pixelRatio), 1.0));\\n  edgeSharpnessBase = mix(0.1, 0.0, min((size * 6.0 * pixelRatio) / (45.0 * pixelRatio), 1.0));\\n  pointCoord = (position.xy + vec2(1.0, 1.0)) / 2.0;\\n\\n  // Center within clip space\\n  vec4 clipCenter = clipSpace(vec3(center, depth));\\n  // Center in screen space\\n  vec2 screenCenter = (clipCenter.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Position in screen space\\n  vec2 vertex = (position.xy * size) + screenCenter;\\n  // Position back to clip space\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), clipCenter.zw);\\n\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float edgeSharpnessBase;\\nvarying vec2 pointCoord;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius + (radius * edgeSharpnessBase),\\n    dot(dist, dist) * 4.0\\n  );\\n}\\n\\n${extendHeader}\\n\\nvoid main() {\\n  float step_factor = circle(pointCoord.xy, 1.0);\\n\\n  setColor(mix(\\n    vec4(0.0, 0.0, 0.0, 0.0),\\n    vertexColor,\\n    step_factor\\n  ));\\n\\n  ${extend}\\n}\\n\"","/**\n * Defines a 2d point within a coordinate plane\n */\nexport interface IPoint {\n  x: number;\n  y: number;\n}\n\n/**\n * Calculates the distance between two points, but keeps the distance in dquared form\n * thus performing Math.sqrt() on the output of this distance would provide the true\n * distance between the points.\n *\n * It is often faster and all that is needed to compare squared distances vs real distances\n * thus eliminating multiple Math.sqrt operations\n *\n * NOTE: For vectors this is the same as (pseudo code):\n * let vector3 = vector2.subtract(vector1)\n * return vector3.dot(vector3)\n *\n * @param p1 The point to find the distance from the second point\n * @param p2 The point to find the distance from the first point\n *\n * @return {number} The distance * distance between the two points\n */\nfunction squareDistance(p1: IPoint, p2: IPoint): number {\n  const dx = p1.x - p2.x;\n  const dy = p1.y - p2.y;\n\n  return dx * dx + dy * dy;\n}\n\n/**\n * Contains methods for managing or manipulating points\n *\n * @export\n * @class Point\n */\nexport class Point {\n  /**\n   * Adds two points together\n   *\n   * @static\n   * @param {IPoint} p1\n   * @param {IPoint} p2\n   * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n   *\n   * @return {IPoint} The two points added together\n   */\n  static add(p1: IPoint, p2: IPoint, out?: IPoint): IPoint {\n    if (out) {\n      out.x = p1.x + p2.x;\n      out.y = p1.y + p2.y;\n      return out;\n    }\n\n    return {\n      x: p1.x + p2.x,\n      y: p1.y + p2.y\n    };\n  }\n\n  /**\n   * @static\n   * This analyzes a test point against a list of points and determines which of the points is\n   * the closest to the test point. If there are equi-distant points in the list, this will return\n   * the first found in the list.\n   *\n   * @param {IPoint} testPoint The point to compare against other points\n   * @param {IPoint[]} points The list of points to be compared against\n   *\n   * @return {IPoint} The closest point to the test point\n   */\n  static getClosest(testPoint: IPoint, points: IPoint[]): IPoint {\n    let closestDistance = Number.MAX_VALUE;\n    let closestPoint: IPoint = testPoint;\n    let distance: number;\n\n    const findClosest = function(point: IPoint) {\n      distance = squareDistance(point, testPoint);\n\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestPoint = point;\n      }\n    };\n\n    points.forEach(findClosest);\n\n    return closestPoint;\n  }\n\n  /**\n   * @static\n   * This analyzes a test point against a list of points and determines which of the points is\n   * the closest to the test point. If there are equi-distant points in the list, this will return\n   * the first found in the list.\n   *\n   * This just returns the index of the found point and not the point itself\n   *\n   * @param {IPoint} testPoint The point to compare against other points\n   * @param {IPoint[]} points The list of points to be compared against\n   *\n   * @return {number} The index of the closest point to the test point\n   */\n  static getClosestIndex(testPoint: IPoint, points: IPoint[]): number {\n    let closestDistance = Number.MAX_VALUE;\n    let closestPoint: number = 0;\n    let distance: number;\n\n    const findClosest = function(point: IPoint, i: number) {\n      distance = squareDistance(point, testPoint);\n\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestPoint = i;\n      }\n    };\n\n    points.forEach(findClosest);\n\n    return closestPoint;\n  }\n\n  /**\n   * @static\n   * This will calculate a direction vector between two points that points toward p2\n   *\n   * @param {IPoint} amount The start of the direction\n   * @param {IPoint} from The direction to point the vector towards\n   * @param {boolean} normalize If true, this will make the vector have a magnitude of 1\n   *\n   * @returns {number}\n   */\n  static subtract(\n    amount: IPoint,\n    from: IPoint,\n    normalize: boolean = false\n  ): IPoint {\n    let dx = from.x - amount.x;\n    let dy = from.y - amount.y;\n\n    if (normalize) {\n      const magnitude = Math.sqrt(dx * dx + dy * dy);\n      dx /= magnitude;\n      dy /= magnitude;\n    }\n\n    return {\n      x: dx,\n      y: dy\n    };\n  }\n\n  /**\n   * @static\n   * Gets the distance between two points\n   *\n   * @param {IPoint} p1\n   * @param {IPoint} p2\n   * @param {boolean} squared If set to true, returns the distance * distance (performs faster)\n   *\n   * @returns {number} The real distance between two points\n   */\n  static getDistance(p1: IPoint, p2: IPoint, squared: boolean = false): number {\n    if (squared) {\n      return squareDistance(p1, p2);\n    }\n\n    return Math.sqrt(squareDistance(p1, p2));\n  }\n\n  /**\n   * @static\n   * Gets a point perfectly between two points\n   *\n   * @param {IPoint} p1\n   * @param {IPoint} p2\n   *\n   * @returns {IPoint} The point between the two provided points\n   */\n  static getMidpoint(p1: IPoint, p2: IPoint) {\n    const direction = Point.subtract(p1, p2);\n\n    return {\n      x: direction.x / 2 + p1.x,\n      y: direction.y / 2 + p1.y\n    };\n  }\n\n  static make(x: number, y: number) {\n    return { x, y };\n  }\n\n  /**\n   * Scales a point by a given amount\n   *\n   * @static\n   * @param {IPoint} p1\n   * @param {number} s The amount to scale the point by\n   * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n   *\n   * @memberof Point\n   */\n  static scale(p1: IPoint, s: number, out?: IPoint): IPoint {\n    if (out) {\n      out.x = p1.x * s;\n      out.y = p1.y * s;\n      return out;\n    }\n\n    return {\n      x: p1.x * s,\n      y: p1.y * s\n    };\n  }\n\n  /**\n   * Makes a new point initialized to {0,0}\n   *\n   * @static\n   * @returns {IPoint} A new point object at {0,0}\n   */\n  static zero(): IPoint {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n}\n","import * as Three from \"three\";\nimport { InstanceProvider } from \"../../instance-provider\";\nimport { Bounds, IPoint } from \"../../primitives\";\nimport { ILayerProps, IModelType, Layer } from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  IProjection,\n  IShaderInitialization,\n  IUniform,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport { CommonMaterialOptions, Vec } from \"../../util\";\nimport { IAutoEasingMethod } from \"../../util/auto-easing-method\";\nimport { CircleInstance } from \"./circle-instance\";\n\nexport interface ICircleLayerProps<T extends CircleInstance>\n  extends ILayerProps<T> {\n  /** This sets the  */\n  fadeOutOversized?: number;\n  /** This sets a scaling factor for the circle's radius */\n  scaleFactor?(): number;\n  /** Flags this layer to draw  */\n  disableDepthTest?: boolean;\n  /** Opacity of the layer as a whole */\n  opacity?: number;\n  /**\n   * This is the properties that can toggle on animations.\n   *\n   * NOTE: The more properties declared as animated will reduce the performance of the layer.\n   * if animated properties are created, it can be beneficial to have other layers with no\n   * animations be available for the Instances to 'rest' in when not moving.\n   */\n  animate?: {\n    center?: IAutoEasingMethod<Vec>;\n    radius?: IAutoEasingMethod<Vec>;\n    color?: IAutoEasingMethod<Vec>;\n  };\n}\n\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class CircleLayer<\n  T extends CircleInstance,\n  U extends ICircleLayerProps<T>\n> extends Layer<T, U> {\n  static defaultProps: ICircleLayerProps<CircleInstance> = {\n    data: new InstanceProvider<CircleInstance>(),\n    fadeOutOversized: -1,\n    key: \"\",\n    scaleFactor: () => 1\n  };\n\n  static attributeNames = {\n    center: \"center\",\n    radius: \"radius\",\n    depth: \"depth\",\n    color: \"color\"\n  };\n\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods() {\n    const noScaleFactor = () => 1;\n\n    return {\n      // Provide the calculated AABB world bounds for a given circle\n      boundsAccessor: (circle: CircleInstance) =>\n        new Bounds({\n          height: circle.radius * 2,\n          width: circle.radius * 2,\n          x: circle.center[0] - circle.radius,\n          y: circle.center[1] - circle.radius\n        }),\n\n      // Provide a precise hit test for the circle\n      hitTest: (circle: CircleInstance, point: IPoint, view: IProjection) => {\n        const circleScreenCenter = view.worldToScreen({\n          x: circle.center[0],\n          y: circle.center[1]\n        });\n        const mouseScreen = view.worldToScreen(point);\n        const r = circle.radius * (this.props.scaleFactor || noScaleFactor)();\n\n        const delta = [\n          mouseScreen.x - circleScreenCenter.x,\n          mouseScreen.y - circleScreenCenter.y\n        ];\n\n        return delta[0] * delta[0] + delta[1] * delta[1] < r * r;\n      }\n    };\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<CircleInstance> {\n    const scaleFactor = this.props.scaleFactor || (() => 1);\n    const animations = this.props.animate || {};\n    const {\n      center: animateCenter,\n      radius: animateRadius,\n      color: animateColor\n    } = animations;\n\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      1: 1,\n      2: -1,\n      3: 1,\n      4: -1,\n      5: -1\n    };\n\n    const vertexToSide: { [key: number]: number } = {\n      0: -1,\n      1: -1,\n      2: -1,\n      3: 1,\n      4: 1,\n      5: 1\n    };\n\n    return {\n      fs: require(\"./circle-layer.fs\"),\n      instanceAttributes: [\n        {\n          easing: animateCenter,\n          name: CircleLayer.attributeNames.center,\n          size: InstanceAttributeSize.TWO,\n          update: circle => circle.center\n        },\n        {\n          easing: animateRadius,\n          name: CircleLayer.attributeNames.radius,\n          size: InstanceAttributeSize.ONE,\n          update: circle => [circle.radius]\n        },\n        {\n          name: CircleLayer.attributeNames.depth,\n          size: InstanceAttributeSize.ONE,\n          update: circle => [circle.depth]\n        },\n        {\n          easing: animateColor,\n          name: CircleLayer.attributeNames.color,\n          size: InstanceAttributeSize.FOUR,\n          update: circle => circle.color\n        }\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: (_uniform: IUniform) => [scaleFactor()]\n        },\n        {\n          name: \"layerOpacity\",\n          size: UniformSize.ONE,\n          update: (_uniform: IUniform) => [\n            this.props.opacity === undefined ? 1.0 : this.props.opacity\n          ]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexToSide[vertex],\n            0\n          ]\n        }\n      ],\n      vertexCount: 6,\n      vs: require(\"./circle-layer.vs\")\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentShape;\n  }\n}\n","export * from \"./circle-layer\";\nexport * from \"./circle-instance\";\n","import { observable } from \"../../instance-provider\";\nimport { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { Vec2, Vec4 } from \"../../util\";\n\nexport interface IArcInstanceOptions extends IInstanceOptions {\n  /** The start and end angle of the arc */\n  angle: Vec2;\n  /** The center point where the arc wraps around */\n  center: Vec2;\n  /** This is the end color of the arc */\n  colorEnd: Vec4;\n  /** This is the start color of the arc */\n  colorStart: Vec4;\n  /** Depth sorting of the arc (or the z value of the lable) */\n  depth: number;\n  /** The radius of how far the middle of the arc is from the center point */\n  radius: number;\n  /** The start to end thickness of the arc */\n  thickness: Vec2;\n}\n\n/**\n * This generates a new arc instance. An arc is a shape with a center and an angle that\n * is spans. This effectively can be used for a 'pie slice' or just the edge line on the pie\n * slice.\n */\nexport class ArcInstance extends Instance {\n  /** The start and end angle of the arc */\n  @observable angle: Vec2 = [0, Math.PI];\n  /** This is the end color of the arc */\n  @observable colorEnd: Vec4 = [0, 0, 0, 1];\n  /** This is the start color of the arc */\n  @observable colorStart: Vec4 = [0, 0, 0, 1];\n  /** The center point where the arc wraps around */\n  @observable center: Vec2 = [0, 0];\n  /** Depth sorting of the arc (or the z value of the lable) */\n  @observable depth: number = 0;\n  /** The radius of how far the middle of the arc is from the center point */\n  @observable radius: number = 1;\n  /** The start to end thickness of the arc */\n  @observable thickness: Vec2 = [1, 1];\n\n  constructor(options: IArcInstanceOptions) {\n    super(options);\n\n    this.angle = options.angle || this.angle;\n    this.colorEnd = options.colorEnd || this.colorEnd;\n    this.colorStart = options.colorStart || this.colorStart;\n    this.center = options.center || this.center;\n    this.depth = options.depth || this.depth;\n    this.radius = options.radius || this.radius;\n    this.thickness = options.thickness || this.thickness;\n  }\n}\n","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\n${extendHeader}\\n\\nvoid main() {\\n  setColor(vertexColor);\\n  gl_FragColor = vertexColor;\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\n/**\\n  This vertex shader calculates edges whose curve and width is in screen space where the curve is\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nvarying vec4 vertexColor;\\n\\nvec2 interpolation(float t, vec2 center, float radius, float start, float end) {\\n  float angle = (end - start) * t + start;\\n  return center + vec2(cos(angle) * radius, sin(angle) * radius);\\n}\\n\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure some of the vec injections\\n  float startAngle = angle.x;\\n  float endAngle = angle.y;\\n  float widthStart = thickness.x;\\n  float widthEnd = thickness.y;\\n\\n  // Convert world points to screen space\\n  vec4 centerClip = clipSpace(vec3(center, depth));\\n  vec2 centerScreen = (centerClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, centerScreen, radius, startAngle, endAngle);\\n  // Get normal with currentPosition and center\\n  vec2 currentNormal = normalize(currentPosition - centerScreen);\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (normal * lineThickness);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a;\\n\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), centerClip.zw);\\n  gl_PointSize = 5.0;\\n\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\nfloat PI = 3.14159265;\\nfloat PI_2 = 6.2831853;\\n\\n/**\\n * This is an approximation of sin that allows us to bypass hardware precision\\n * limitations for sin.\\n *\\n * http://lab.polygonal.de/2007/07/18/fast-and-accurate-sinecosine-approximation/\\n * This is a GPU adaptation of this method to provide optimal GPU performance for the operation\\n */\\nfloat fsin(float x) {\\n  float sine;\\n\\n  // Always wrap input angle to -PI..PI\\n  x += mix(\\n    mix(\\n      0.0,\\n      -PI_2, float(x > PI)\\n    ),\\n    PI_2, float(x < -PI)\\n  );\\n\\n  // Compute sine\\n  sine = 1.27323954 * x;\\n  sine += mix(-1.0, 1.0, float(x < 0.0)) * 0.405284735 * x * x;\\n  sine = 0.225 * (sine * (mix(1.0, -1.0, float(sine < 0.0)) * sine) - sine) + sine;\\n\\n  return sine;\\n}\\n\\n/**\\n * This is an approximation of cos that allows us to bypass hardware precision\\n * limitations for cos.\\n *\\n * http://lab.polygonal.de/2007/07/18/fast-and-accurate-sinecosine-approximation/\\n * This is a GPU adaptation of this method to provide optimal GPU performance for the operation\\n */\\nfloat fcos(float x) {\\n  float sine;\\n  // Cos is the same as sine but\\n  x += 1.57079632;\\n\\n  // Always wrap input angle to -PI..PI\\n  x += mix(\\n    mix(\\n      0.0,\\n      -PI_2, float(x > PI)\\n    ),\\n    PI_2, float(x < -PI)\\n  );\\n\\n  // Compute sine\\n  sine = 1.27323954 * x;\\n  sine += mix(-1.0, 1.0, float(x < 0.0)) * 0.405284735 * x * x;\\n  sine = 0.225 * (sine * (mix(1.0, -1.0, float(sine < 0.0)) * sine) - sine) + sine;\\n\\n  return sine;\\n}\\n\\n/**\\n  This vertex shader calculates edges whose curve and width is in screen space where the curve is\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nvarying vec4 vertexColor;\\n\\nvec2 interpolation(float t, vec2 center, float radius, float start, float end) {\\n  float angle = (end - start) * t + start;\\n  return center + vec2(fcos(angle) * radius, fsin(angle) * radius);\\n}\\n\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure some of the vec injections\\n  float startAngle = angle.x;\\n  float endAngle = angle.y;\\n  float widthStart = thickness.x;\\n  float widthEnd = thickness.y;\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, center, radius, startAngle, endAngle);\\n  // Get normal with currentPosition and center\\n  vec2 currentNormal = normalize(currentPosition - center);\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (normal * lineThickness);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a;\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n\\n  ${extend}\\n}\\n\"","module.exports = \"void main() {\\n  gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n}\"","module.exports = \"\"","import { Bounds } from \"../primitives\";\nimport { IPoint } from \"../primitives/point\";\nimport {\n  IColorPickingData,\n  InstanceHitTest,\n  IPickInfo,\n  IProjection,\n  PickType\n} from \"../types\";\nimport { Instance, TrackedQuadTree } from \"../util\";\nimport { UniformColorDiffProcessor } from \"./buffer-management/diff-processors/uniform-color-diff-processor\";\nimport { ILayerProps, Layer } from \"./layer\";\n\nfunction isColorProcessor<T extends Instance>(\n  val: any\n): val is UniformColorDiffProcessor<T> {\n  return val && val.colorPicking;\n}\n\n/**\n * This manages mouse gestures broadcast to the layer and handles appropriate actions such as determining\n * how to make the interaction translate to picking events for the layer's instances.\n *\n * This class, in summary, takes in the gestures to the view and converts them to gestures to the instances.\n */\nexport class LayerInteractionHandler<\n  T extends Instance,\n  U extends ILayerProps<T>\n> {\n  /** This is the color picking information most recently rendered */\n  colorPicking?: IColorPickingData;\n  /** This tracks the elements that have the mouse currently over them */\n  isMouseOver = new Map<T, boolean>();\n  /** This tracks the elements the mouse was down on */\n  isMouseDown = new Map<T, boolean>();\n  /** This is the layer the interaction handler manages events for */\n  layer: Layer<T, U>;\n\n  constructor(layer: Layer<T, U>) {\n    this.layer = layer;\n  }\n\n  /**\n   * Retrieves the color picking instance determined for the procedure.\n   */\n  getColorPickInstance() {\n    if (\n      this.colorPicking &&\n      isColorProcessor<T>(this.layer.diffManager.processor)\n    ) {\n      return this.layer.diffManager.processor.colorPicking.uidToInstance.get(\n        0xffffff - this.colorPicking.nearestColor\n      );\n    }\n\n    return null;\n  }\n\n  /**\n   * Handles mouse down gestures for a layer within a view\n   */\n  handleMouseOver(_view: IProjection, _mouse: IPoint) {\n    // This is the mouse over for the view itself. We should probably just let the mouse over events handle the interactions\n    // With the instances\n  }\n\n  /**\n   * Handles mouse down gestures for a layer within a view\n   */\n  handleMouseDown(view: IProjection, mouse: IPoint, button: number) {\n    // This handles interactions for PickType ALL layers\n    if (this.layer.picking && this.layer.picking.type !== PickType.NONE) {\n      const { onMouseDown } = this.layer.props;\n\n      // If we have a listener for either event we should continue to process the event in more detail\n      if (onMouseDown) {\n        const world = view.viewToWorld(mouse);\n        let hitTest: InstanceHitTest<T>;\n        let query: TrackedQuadTree<T>[\"query\"];\n        let querySpace;\n        let instances: T[] = [];\n\n        if (this.layer.picking.type === PickType.ALL) {\n          hitTest = this.layer.picking.hitTest;\n          query = this.layer.picking.quadTree.query.bind(\n            this.layer.picking.quadTree\n          );\n          querySpace = (check: Bounds | IPoint) =>\n            query(check).filter(o => hitTest(o, world, view));\n          instances = query(world).filter(o => hitTest(o, world, view));\n        } else if (this.layer.picking.type === PickType.SINGLE) {\n          // Get the instance for the nearest color\n          const instanceForColor = this.getColorPickInstance();\n\n          if (instanceForColor) {\n            instances.push(instanceForColor);\n          }\n        }\n\n        const info: IPickInfo<T> = {\n          button,\n          instances,\n          layer: this.layer.id,\n          projection: view,\n          querySpace,\n          screen: [mouse.x, mouse.y],\n          world: [world.x, world.y]\n        };\n\n        onMouseDown(info);\n\n        // We track all the elements the mouse is currently down on\n        this.isMouseDown.clear();\n        instances.forEach(o => this.isMouseDown.set(o, true));\n      }\n    }\n  }\n\n  /**\n   * Handles mouse out events for a layer within the view\n   */\n  handleMouseOut(view: IProjection, mouse: IPoint) {\n    // This will fire an instance mouse out for any over instances in the queue since we left the view\n    // Thus no instances shall be considered 'over'\n    if (this.layer.picking && this.layer.picking.type !== PickType.NONE) {\n      const { onMouseOut } = this.layer.props;\n\n      if (onMouseOut) {\n        const world = view.viewToWorld(mouse);\n        let hitTest: InstanceHitTest<T>;\n        let query: TrackedQuadTree<T>[\"query\"];\n        let querySpace;\n\n        if (this.layer.picking.type === PickType.ALL) {\n          hitTest = this.layer.picking.hitTest;\n          query = this.layer.picking.quadTree.query.bind(\n            this.layer.picking.quadTree\n          );\n          querySpace = (check: Bounds | IPoint) =>\n            query(check).filter(o => hitTest(o, world, view));\n        }\n\n        const info: IPickInfo<T> = {\n          instances: Array.from(this.isMouseOver.keys()),\n          layer: this.layer.id,\n          projection: view,\n          querySpace,\n          screen: [mouse.x, mouse.y],\n          world: [world.x, world.y]\n        };\n\n        onMouseOut(info);\n      }\n    }\n\n    // We clear as no instances are over anymore\n    this.isMouseOver.clear();\n    // We also clear all down elements as the mouse is no longer in proper context for the instances\n    // But since the mouse was never actually released, we do not fire an up\n    this.isMouseDown.clear();\n  }\n\n  /**\n   * Handles mouse up gestures for the layer within the provided view\n   */\n  handleMouseUp(view: IProjection, mouse: IPoint, button: number) {\n    // This handles interactions for PickType ALL layers\n    if (this.layer.picking && this.layer.picking.type !== PickType.NONE) {\n      const { onMouseUp } = this.layer.props;\n\n      // If we have a listener for either event we should continue to process the event in more detail\n      if (onMouseUp) {\n        const world = view.viewToWorld(mouse);\n        let hitTest: InstanceHitTest<T>;\n        let query: TrackedQuadTree<T>[\"query\"];\n        let querySpace;\n        let instances: T[] = [];\n\n        if (this.layer.picking.type === PickType.ALL) {\n          hitTest = this.layer.picking.hitTest;\n          query = this.layer.picking.quadTree.query.bind(\n            this.layer.picking.quadTree\n          );\n          querySpace = (check: Bounds | IPoint) =>\n            query(check).filter(o => hitTest(o, world, view));\n          instances = query(world).filter(o => hitTest(o, world, view));\n        } else if (this.layer.picking.type === PickType.SINGLE) {\n          // Get the instance for the nearest color\n          const instanceForColor = this.getColorPickInstance();\n\n          if (instanceForColor) {\n            instances.push(instanceForColor);\n          }\n        }\n\n        const info: IPickInfo<T> = {\n          button,\n          instances,\n          layer: this.layer.id,\n          projection: view,\n          querySpace,\n          screen: [mouse.x, mouse.y],\n          world: [world.x, world.y]\n        };\n\n        onMouseUp(info);\n      }\n    }\n  }\n\n  /**\n   * Mouse move events on the layer will detect when instances have their item newly over or just moved on\n   */\n  handleMouseMove(view: IProjection, mouse: IPoint) {\n    // This handles interactions for PickType ALL layers\n    const { onMouseOver, onMouseMove, onMouseOut } = this.layer.props;\n\n    if (this.layer.picking && this.layer.picking.type !== PickType.NONE) {\n      // If we have a listener for either event we should continue to process the event in more detail\n      if (onMouseOver || onMouseMove || onMouseOut) {\n        let info: IPickInfo<T>;\n        const world = view.viewToWorld(mouse);\n        let hitTest: InstanceHitTest<T>;\n        let query: TrackedQuadTree<T>[\"query\"];\n        let querySpace;\n        let instances: T[] = [];\n\n        if (this.layer.picking.type === PickType.ALL) {\n          hitTest = this.layer.picking.hitTest;\n          query = this.layer.picking.quadTree.query.bind(\n            this.layer.picking.quadTree\n          );\n          querySpace = (check: Bounds | IPoint) =>\n            query(check).filter(o => hitTest(o, world, view));\n          instances = query(world).filter(o => hitTest(o, world, view));\n        } else if (this.layer.picking.type === PickType.SINGLE) {\n          // Get the instance for the nearest color\n          const instanceForColor = this.getColorPickInstance();\n\n          if (instanceForColor) {\n            instances.push(instanceForColor);\n          }\n        }\n\n        // Broadcast the picking info for newly over instances to any of the layers listeners if needed\n        if (onMouseOver) {\n          const notOverInstances = instances.filter(\n            o => !this.isMouseOver.get(o)\n          );\n          info = {\n            instances: notOverInstances,\n            layer: this.layer.id,\n            projection: view,\n            querySpace,\n            screen: [mouse.x, mouse.y],\n            world: [world.x, world.y]\n          };\n\n          if (notOverInstances.length > 0) onMouseOver(info);\n        }\n\n        // Broadcast the the picking info for all instances that the mouse moved on\n        if (onMouseMove) {\n          // This is the pick info object we will broadcast from the layer\n          info = {\n            instances,\n            layer: this.layer.id,\n            projection: view,\n            querySpace,\n            screen: [mouse.x, mouse.y],\n            world: [world.x, world.y]\n          };\n\n          onMouseMove(info);\n        }\n\n        // We take the hovered instances\n        const isCurrentlyOver = new Map<T, boolean>();\n        instances.forEach(o => isCurrentlyOver.set(o, true));\n\n        // Broadcast the the picking info for all instances that the mouse moved off of\n        if (onMouseOut) {\n          const noLongerOver = Array.from(this.isMouseOver.keys()).filter(\n            o => !isCurrentlyOver.get(o)\n          );\n\n          // This is the pick info object we will broadcast from the layer\n          info = {\n            instances: noLongerOver,\n            layer: this.layer.id,\n            projection: view,\n            querySpace,\n            screen: [mouse.x, mouse.y],\n            world: [world.x, world.y]\n          };\n\n          if (noLongerOver.length > 0) onMouseOut(info);\n        }\n\n        // We store the current hovered over items as our over item list for next interaction\n        this.isMouseOver = isCurrentlyOver;\n      }\n    }\n  }\n\n  /**\n   * Handles click gestures on the layer within a view\n   */\n  handleMouseClick(view: IProjection, mouse: IPoint, button: number) {\n    // This handles interactions for PickType ALL layers\n    if (this.layer.picking && this.layer.picking.type !== PickType.NONE) {\n      const { onMouseClick } = this.layer.props;\n\n      // If we have a listener for either event we should continue to process the event in more detail\n      if (onMouseClick) {\n        const world = view.viewToWorld(mouse);\n        let hitTest: InstanceHitTest<T>;\n        let query: TrackedQuadTree<T>[\"query\"];\n        let querySpace;\n        let instances: T[] = [];\n\n        if (this.layer.picking.type === PickType.ALL) {\n          hitTest = this.layer.picking.hitTest;\n          query = this.layer.picking.quadTree.query.bind(\n            this.layer.picking.quadTree\n          );\n          querySpace = (check: Bounds | IPoint) =>\n            query(check).filter(o => hitTest(o, world, view));\n          instances = query(world).filter(o => hitTest(o, world, view));\n        } else if (this.layer.picking.type === PickType.SINGLE) {\n          // Get the instance for the nearest color\n          const instanceForColor = this.getColorPickInstance();\n\n          if (instanceForColor) {\n            instances.push(instanceForColor);\n          }\n        }\n\n        const info: IPickInfo<T> = {\n          button,\n          instances,\n          layer: this.layer.id,\n          projection: view,\n          querySpace,\n          screen: [mouse.x, mouse.y],\n          world: [world.x, world.y]\n        };\n\n        onMouseClick(info);\n      }\n    }\n  }\n\n  /**\n   * Handles drag gestures for the layer within the view\n   */\n  handleMouseDrag(_view: IProjection, _mouse: IPoint) {\n    // We probably should not broadcast drag events for the sake of instances. Instance dragging should be handled on\n    // An instance by instance basis rather than coming from the view's gestures\n  }\n}\n","import { Instance } from \"../../../instance-provider\";\nimport { IQuadTreePickingMetrics, PickType } from \"../../../types\";\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  isBufferLocation\n} from \"../buffer-manager-base\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\nimport { IUniformBufferLocation } from \"../uniform-buffer-manager\";\nimport { UniformDiffProcessor } from \"./uniform-diff-processor\";\n\nconst EMPTY: number[] = [];\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class UniformQuadDiffProcessor<\n  T extends Instance\n> extends UniformDiffProcessor<T> {\n  quadPicking: IQuadTreePickingMetrics<T>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>\n  ) {\n    super(layer, bufferManager);\n\n    if (layer.picking.type === PickType.ALL) {\n      this.quadPicking = layer.picking;\n    } else {\n      console.warn(\n        \"Diff Processing Error: A layer has a diff processor requesting Quad Processing but the picking type is not valid.\"\n      );\n    }\n  }\n\n  /**\n   * This processes add operations from changes in the instancing data and manages the layer's quad tree\n   * with the instance as well.\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (uniformCluster) {\n      manager.changeInstance(manager, instance, EMPTY, uniformCluster);\n    } else {\n      // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n      const uniforms = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocation(uniforms)) {\n        instance.active = true;\n        instance.easingId = manager.layer.easingId;\n        manager.updateInstance(manager.layer, instance, uniforms);\n\n        // Ensure the instance has an updated injection in the quad tree\n        manager.quadPicking.quadTree.remove(instance);\n        manager.quadPicking.quadTree.add(instance);\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the uniforms\n    if (uniformCluster) {\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n\n      // Ensure the instance has an updated injection in the quad tree\n      manager.quadPicking.quadTree.remove(instance);\n      manager.quadPicking.quadTree.add(instance);\n    } else {\n      // If we don't have existing uniforms, then we must remove the instance\n      manager.addInstance(manager, instance, EMPTY, uniformCluster);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation\n  ) {\n    if (uniformCluster) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // Remove the easing information the instance gained from being apart of the layer\n      instance.clearEasing();\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n      // Remove the instance from our quad tree\n      manager.quadPicking.quadTree.remove(instance);\n    }\n  }\n}\n","import { Instance } from \"../../../instance-provider\";\nimport { ISinglePickingMetrics, PickType } from \"../../../types\";\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  isBufferLocation\n} from \"../buffer-manager-base\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\nimport { IUniformBufferLocation } from \"../uniform-buffer-manager\";\nimport { UniformDiffProcessor } from \"./uniform-diff-processor\";\n\nconst EMPTY: number[] = [];\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class UniformColorDiffProcessor<\n  T extends Instance\n> extends UniformDiffProcessor<T> {\n  colorPicking: ISinglePickingMetrics<T>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>\n  ) {\n    super(layer, bufferManager);\n\n    if (layer.picking.type === PickType.SINGLE) {\n      this.colorPicking = layer.picking;\n      this.colorPicking.uidToInstance = new Map<number, T>();\n    } else {\n      console.warn(\n        \"Diff Processing Error: A layer has a diff processor requesting Color Processing but the picking type is not valid.\"\n      );\n    }\n  }\n\n  /**\n   * This processes add operations from changes in the instancing data and manages the layer's matching of\n   * color / UID to Instance\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster: IUniformBufferLocation\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (uniformCluster) {\n      manager.changeInstance(manager, instance, EMPTY, uniformCluster);\n    } else {\n      // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n      const uniforms = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocation(uniforms)) {\n        instance.active = true;\n        instance.easingId = manager.layer.easingId;\n        manager.updateInstance(manager.layer, instance, uniforms);\n\n        // Make sure the instance is mapped to it's UID\n        manager.colorPicking.uidToInstance.set(instance.uid, instance);\n      } else {\n        console.warn(\n          \"A data cluster was not provided by the manager to associate an instance with.\"\n        );\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster: IUniformBufferLocation\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the uniforms\n    if (uniformCluster) {\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n    } else {\n      // If we don't have existing uniforms, then we must remove the instance\n      manager.addInstance(manager, instance, EMPTY, uniformCluster);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster: IUniformBufferLocation\n  ) {\n    if (uniformCluster) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // Remove the easing information the instance gained from being apart of the layer\n      instance.clearEasing();\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n      // Remove the instance from our quad tree\n      manager.colorPicking.uidToInstance.delete(instance.uid);\n    }\n  }\n}\n","import { Instance } from \"../../../instance-provider\";\nimport { IQuadTreePickingMetrics, PickType } from \"../../../types\";\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  isBufferLocationGroup\n} from \"../buffer-manager-base\";\nimport { IInstanceAttributeBufferLocationGroup } from \"../instance-attribute-buffer-manager\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\nimport { InstanceAttributeDiffProcessor } from \"./instance-attribute-diff-processor\";\n\nconst EMPTY: number[] = [];\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class InstanceAttributeQuadDiffProcessor<\n  T extends Instance\n> extends InstanceAttributeDiffProcessor<T> {\n  quadPicking: IQuadTreePickingMetrics<T>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>\n  ) {\n    super(layer, bufferManager);\n\n    if (layer.picking.type === PickType.ALL) {\n      this.quadPicking = layer.picking;\n    } else {\n      console.warn(\n        \"Diff Processing Error: A layer has a diff processor requesting Quad Processing but the picking type is not valid.\"\n      );\n    }\n  }\n\n  /**\n   * This processes add operations from changes in the instancing data and manages the layer's quad tree\n   * with the instance as well.\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (bufferLocations) {\n      manager.changeInstance(manager, instance, EMPTY, bufferLocations);\n    } else {\n      // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n      const locations = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocationGroup(locations)) {\n        instance.active = true;\n        instance.easingId = manager.layer.easingId;\n        manager.updateInstance(manager.layer, instance, EMPTY, locations);\n\n        // Ensure the instance has an updated injection in the quad tree\n        manager.quadPicking.quadTree.remove(instance);\n        manager.quadPicking.quadTree.add(instance);\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the uniforms\n    if (bufferLocations) {\n      manager.updateInstance(manager.layer, instance, propIds, bufferLocations);\n\n      // Ensure the instance has an updated injection in the quad tree\n      manager.quadPicking.quadTree.remove(instance);\n      manager.quadPicking.quadTree.add(instance);\n    } else {\n      // If we don't have existing uniforms, then we must remove the instance\n      manager.addInstance(manager, instance, EMPTY, bufferLocations);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    if (bufferLocations) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // Remove the easing information the instance gained from being apart of the layer\n      instance.clearEasing();\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, EMPTY, bufferLocations);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n      // Remove the instance from our quad tree\n      manager.quadPicking.quadTree.remove(instance);\n    }\n  }\n}\n","import { Instance } from \"../../../instance-provider\";\nimport { ISinglePickingMetrics, PickType } from \"../../../types\";\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  isBufferLocationGroup\n} from \"../buffer-manager-base\";\nimport { IInstanceAttributeBufferLocationGroup } from \"../instance-attribute-buffer-manager\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\nimport { InstanceAttributeDiffProcessor } from \"./instance-attribute-diff-processor\";\n\nconst EMPTY: number[] = [];\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class InstanceAttributeColorDiffProcessor<\n  T extends Instance\n> extends InstanceAttributeDiffProcessor<T> {\n  colorPicking: ISinglePickingMetrics<T>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>\n  ) {\n    super(layer, bufferManager);\n\n    if (layer.picking.type === PickType.SINGLE) {\n      this.colorPicking = layer.picking;\n      this.colorPicking.uidToInstance = new Map<number, T>();\n    } else {\n      console.warn(\n        \"Diff Processing Error: A layer has a diff processor requesting Color Processing but the picking type is not valid.\"\n      );\n    }\n  }\n\n  /**\n   * This processes add operations from changes in the instancing data and manages the layer's matching of\n   * color / UID to Instance\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (bufferLocations) {\n      manager.changeInstance(manager, instance, EMPTY, bufferLocations);\n    } else {\n      // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n      const locations = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocationGroup(locations)) {\n        instance.active = true;\n        instance.easingId = manager.layer.easingId;\n        manager.updateInstance(manager.layer, instance, EMPTY, locations);\n\n        // Make sure the instance is mapped to it's UID\n        manager.colorPicking.uidToInstance.set(instance.uid, instance);\n      } else {\n        console.warn(\n          \"A data cluster was not provided by the manager to associate an instance with.\"\n        );\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the uniforms\n    if (bufferLocations) {\n      manager.updateInstance(manager.layer, instance, propIds, bufferLocations);\n    } else {\n      // If we don't have existing uniforms, then we must remove the instance\n      manager.addInstance(manager, instance, EMPTY, bufferLocations);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    if (bufferLocations) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // Remove the easing information the instance gained from being apart of the layer\n      instance.clearEasing();\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, EMPTY, bufferLocations);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n      // Remove the instance from our quad tree\n      manager.colorPicking.uidToInstance.delete(instance.uid);\n    }\n  }\n}\n","import * as Three from \"three\";\nimport { Instance } from \"../../instance-provider\";\nimport { makeInstanceUniformNameArray } from \"../../shaders/util/make-instance-uniform-name\";\nimport { IInstanceAttribute, PickType } from \"../../types\";\nimport { uid, Vec2 } from \"../../util\";\nimport { Layer } from \"../layer\";\nimport { generateLayerModel } from \"../layer-processing/generate-layer-model\";\nimport { Scene } from \"../scene\";\nimport { BufferManagerBase, IBufferLocation } from \"./buffer-manager-base\";\n\nexport interface IUniformBufferLocation extends IBufferLocation {\n  /** This is the index of the instance as it appears in the buffer */\n  instanceIndex: number;\n  /** This is the instance data uniform */\n  buffer: Three.IUniform;\n  /** This is the instance data range within the instanceData uniform */\n  range: Vec2;\n}\n\nexport interface InstanceUniformBuffer {\n  /** This tracks which instances are active. Helps optimize draw range */\n  activeInstances: boolean[];\n  /** This is all of the clusters within this buffer */\n  clusters: IUniformBufferLocation[];\n  /** The first instance in the draw range */\n  firstInstance: number;\n  /** The unique geometry object for the buffer: Used to set draw range */\n  geometry: Three.BufferGeometry;\n  /** The last instance in the draw range */\n  lastInstance: number;\n  /** The unique material for the buffer: Used to provide a new set of uniforms */\n  material: Three.ShaderMaterial;\n  /** The unique model generated for the buffer: Used to allow the buffer to be rendered by adding to a scene */\n  model: Three.Object3D;\n  /** Threejs can not have duplicate objects across Scenes */\n  pickModel?: Three.Object3D;\n}\n\n/**\n * This is a Buffer Management system that performs instancing via the uniforms available to the hardware.\n * This improves compatibility with instancing for systems DRAMATICALLY as ALL systems WILL support uniforms.\n * This will NOT perform the best against true hardware instancing support, but it will have edge cases where it\n * is needed.\n *\n * When a layer has too many instance + vertex attributes for the hardware, the system will defer to this buffer methodology.\n *\n * This class does a whoooooole lot of making the magical instancing optimization controls possible.\n *\n * Our instancing hackyness comes from the idea that uniforms are fast, and you don't have to commit\n * ALL of them when you touch just a little piece, and you don't have worry about drivers not supporting\n * partial vertex buffer updates.\n *\n * This also is WebGL 1.0 compatible without any extensions that are poorly implemented. And again: does\n * NOT require entire attribute buffer commits.\n *\n * Uniforms are limited for any given draw call. So we have to create multiple materials to support\n * chunks of the instances that need to be drawn. We then have to associate an instance with the set\n * of uniforms that is related to the instance and keep them paired together. If we have too many instances\n * we must generate more buffers to accomodate them.\n *\n * If we remove instances, we must free up the uniform set so that others can use the uniforms. While the uniforms\n * are not in use, the instance should not be rendering.\n */\nexport class UniformBufferManager<T extends Instance> extends BufferManagerBase<\n  T,\n  IUniformBufferLocation\n> {\n  /** The number of uniform blocks an instance requires */\n  private uniformBlocksPerInstance: number;\n  /** The generated buffers by this manager */\n  private buffers: InstanceUniformBuffer[] = [];\n  /** The uniform clusters that are free and can be used by an instance */\n  private availableClusters: IUniformBufferLocation[] = [];\n  /** A lookup of an instance to a cluster of uniforms associated with it */\n  private instanceToCluster: { [key: number]: IUniformBufferLocation } = {};\n  /** A map of a cluster of uniforms to the buffer it comes from */\n  private clusterToBuffer = new Map<\n    IUniformBufferLocation,\n    InstanceUniformBuffer\n  >();\n\n  constructor(layer: Layer<T, any>, scene: Scene) {\n    super(layer, scene);\n\n    let maxUniformBlock: number = 0;\n    layer.instanceAttributes.forEach((attributes: IInstanceAttribute<T>) => {\n      maxUniformBlock = Math.max(attributes.block || 0, maxUniformBlock);\n    });\n\n    this.uniformBlocksPerInstance = maxUniformBlock + 1;\n  }\n\n  /**\n   * This adds an instance to the manager and gives the instance an associative\n   * block of uniforms to work with.\n   */\n  add = function(instance: T) {\n    // If there are no available buffers, we must add a buffer\n    if (this.availableClusters.length <= 0) {\n      this.makeNewBuffer();\n    }\n\n    const cluster = this.availableClusters.pop();\n\n    if (cluster) {\n      this.instanceToCluster[instance.uid] = cluster;\n    } else {\n      console.warn(\n        \"No valid cluster available for instance added to uniform manager.\"\n      );\n    }\n\n    return cluster;\n  };\n\n  /**\n   * Free all resources this manager may be holding onto\n   */\n  destroy() {\n    this.buffers.forEach(buffer => {\n      buffer.geometry.dispose();\n      buffer.material.dispose();\n    });\n  }\n\n  /**\n   * This retireves the uniforms associated with an instance, or returns nothing\n   * if the instance has not been associated yet.\n   */\n  getBufferLocations(instance: T) {\n    return this.instanceToCluster[instance.uid];\n  }\n\n  /**\n   * TODO: The uniform buffer does not need to utilize this yet. it will be more necessary\n   * when this manager updates only changed properties.\n   */\n  getActiveAttributePropertyId() {\n    return -1;\n  }\n\n  /**\n   * TODO: This is irrelevant tot his manager for now.\n   * Number of instances this buffer manages.\n   */\n  getInstanceCount() {\n    return -1;\n  }\n\n  /**\n   * TODO: The uniform buffer updates ALL attributes every change for any property so far.\n   * This should be fixed for performance improvements on the compatibility mode.\n   */\n  getUpdateAllPropertyIdList() {\n    return [];\n  }\n\n  /**\n   * Disassociates an instance with it's group of uniforms and makes the instance\n   * in the buffer no longer drawable.\n   */\n  remove = function(instance: T) {\n    const cluster = this.instanceToCluster[instance.uid];\n\n    // If the instance is associated with a cluster, we can add the cluster back to being available\n    // For another instance.\n    if (cluster) {\n      delete this.instanceToCluster[instance.uid];\n      this.availableClusters.push(cluster);\n    }\n\n    return instance;\n  };\n\n  /**\n   * Clears all elements of this manager from the current scene it was in.\n   */\n  removeFromScene() {\n    const scene = this.scene;\n\n    if (scene.container) {\n      for (let i = 0, end = this.buffers.length; i < end; ++i) {\n        const buffer = this.buffers[i];\n        scene.container.remove(buffer.model);\n        buffer.pickModel &&\n          this.scene.pickingContainer.remove(buffer.pickModel);\n      }\n\n      delete this.scene;\n    }\n  }\n\n  /**\n   * Applies the buffers to the provided scene for rendering.\n   */\n  setScene(scene: Scene) {\n    if (scene.container) {\n      for (let i = 0, end = this.buffers.length; i < end; ++i) {\n        const buffer = this.buffers[i];\n        scene.container.add(buffer.model);\n        buffer.pickModel && scene.pickingContainer.add(buffer.pickModel);\n      }\n\n      this.scene = scene;\n    } else {\n      console.warn(\"Can not set a scene that has an undefined container.\");\n    }\n  }\n\n  /**\n   * This generates a new buffer of uniforms to associate instances with.\n   */\n  makeNewBuffer() {\n    // We generate a new geometry object for the buffer as the geometry\n    // Needs to have it's own unique draw range per buffer for optimal\n    // Performance\n    const newGeometry = new Three.BufferGeometry();\n    this.layer.vertexAttributes.forEach(attribute => {\n      if (attribute.materialAttribute) {\n        newGeometry.addAttribute(attribute.name, attribute.materialAttribute);\n      }\n    });\n\n    // Ensure the draw range covers every instance in the geometry.\n    newGeometry.drawRange.start = 0;\n    newGeometry.drawRange.count =\n      this.layer.maxInstancesPerBuffer * this.layer.instanceVertexCount;\n\n    // This is the material that is generated for the layer that utilizes all of the generated and\n    // Injected shader IO and shader fragments\n    const newMaterial = this.layer.material.clone();\n    // Now make a Model for the buffer so it can be rendered withn the scene\n    const newModel = generateLayerModel(this.layer, newGeometry, newMaterial);\n    // We render junkloads of instances in a buffer. Culling will have to happen\n    // On an instance level.\n    newModel.frustumCulled = false;\n\n    // Make our new buffer which will manage the geometry and everything necessary\n    const buffer: InstanceUniformBuffer = {\n      activeInstances: [],\n      clusters: [],\n      firstInstance: 0,\n      geometry: newGeometry,\n      lastInstance: 0,\n      material: newMaterial,\n      model: newModel,\n      pickModel:\n        this.layer.picking.type === PickType.SINGLE\n          ? newModel.clone()\n          : undefined\n    };\n\n    this.buffers.push(buffer);\n\n    // Now that we have created a new buffer, we have all of it's uniforms\n    // To use to render more instances. We must take the instancing uniforms\n    // And divvy them up into clusters for our available buffer.\n    let uniformIndex = 0;\n    const uniformName = makeInstanceUniformNameArray();\n    const instanceData = newMaterial.uniforms[uniformName];\n\n    // We must ensure the vector objects are TOTALLY unique otherwise they'll get shared across buffers\n    instanceData.value = instanceData.value.map(\n      () => new Three.Vector4(0.0, 0.0, 0.0, 0.0)\n    );\n\n    // TODO: This will go away! To satisfy the changing buffer manager interfaces, we make a\n    // fake internal attribute for now\n    const fakeAttribute = Object.assign({}, this.layer.instanceAttributes[0], {\n      bufferAttribute: new Three.InstancedBufferAttribute(\n        new Float32Array(1),\n        1\n      ),\n      uid: uid()\n    });\n\n    for (let i = 0, end = this.layer.maxInstancesPerBuffer; i < end; ++i) {\n      const cluster: IUniformBufferLocation = {\n        attribute: fakeAttribute, // TODO: This is not needed for the uniform method yet. When we break down\n        // the uniform updates into attributes, this will be utilized.\n        buffer: instanceData,\n        instanceIndex: i,\n        range: [uniformIndex, 0]\n      };\n\n      uniformIndex += this.uniformBlocksPerInstance;\n      cluster.range[1] = uniformIndex;\n\n      buffer.clusters.push(cluster);\n      this.availableClusters.push(cluster);\n      this.clusterToBuffer.set(cluster, buffer);\n    }\n\n    // Grab the global uniforms from the material and add it to the uniform's materialUniform list so that\n    // We can keep uniforms consistent across all Instances\n    for (let i = 0, end = this.layer.uniforms.length; i < end; ++i) {\n      const uniform = this.layer.uniforms[i];\n      uniform.materialUniforms.push(newMaterial.uniforms[uniform.name]);\n    }\n\n    // Now that we are ready to utilize the buffer, let's add it to the scene so it may be rendered.\n    // Each new buffer equates to one draw call.\n    if (this.scene && this.scene.container) {\n      this.scene.container.add(buffer.model);\n      buffer.pickModel && this.scene.pickingContainer.add(buffer.pickModel);\n    }\n  }\n}\n","let toEmit: { [key: string]: [Function, number, number] } = {};\n\nexport function emitOnce(\n  id: string,\n  callback: (calledCountBeforeEmit: number, id: string) => void\n) {\n  const emit = toEmit[id] || [callback, -1, 0];\n  toEmit[id] = emit;\n  emit[2]++;\n\n  clearTimeout(emit[1]);\n  emit[1] = window.setTimeout(() => {\n    callback(emit[2], id);\n    delete toEmit[id];\n  }, 1);\n}\n\nexport function flushEmitOnce() {\n  for (const id in toEmit) {\n    const emit = toEmit[id];\n    clearTimeout(emit[1]);\n    emit[0](emit[2], id);\n  }\n\n  toEmit = {};\n}\n","import * as Three from \"three\";\nimport { Instance, ObservableMonitoring } from \"../../instance-provider\";\nimport { instanceAttributeShaderName } from \"../../shaders/util/instance-attribute-shader-name\";\nimport {\n  IInstanceAttribute,\n  IInstanceAttributeInternal,\n  PickType\n} from \"../../types\";\nimport { uid } from \"../../util\";\nimport { emitOnce, flushEmitOnce } from \"../../util/emit-once\";\nimport { IModelConstructable, Layer } from \"../layer\";\nimport { generateLayerModel } from \"../layer-processing/generate-layer-model\";\nimport { Scene } from \"../scene\";\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  IBufferLocationGroup\n} from \"./buffer-manager-base\";\n\nconst { max } = Math;\n\n/**\n * This represents the location of data for an instance's property to the piece of attribute buffer\n * it will update when it changes.\n */\nexport interface IInstanceAttributeBufferLocation extends IBufferLocation {}\n\n/** Represents the Location Groupings for Instance attribute Buffer locations */\nexport type IInstanceAttributeBufferLocationGroup = IBufferLocationGroup<\n  IInstanceAttributeBufferLocation\n>;\n\n/**\n * This manages instances in how they associate with buffer data for an instanced attribute strategy.\n */\nexport class InstanceAttributeBufferManager<\n  T extends Instance\n> extends BufferManagerBase<T, IInstanceAttributeBufferLocation> {\n  /** This stores an attribute's name to the buffer locations generated for it */\n  private allBufferLocations: { [key: string]: IBufferLocation[] } = {};\n  /** This contains the buffer locations the system will have available */\n  private availableLocations: IInstanceAttributeBufferLocationGroup[] = [];\n  /** This is the number of instances the buffer draws currently */\n  currentInstancedCount = 0;\n  /** This is the mapped buffer location to the provided Instance */\n  private instanceToBufferLocation: {\n    [key: number]: IInstanceAttributeBufferLocationGroup;\n  } = {};\n  /**\n   * This is the number of times the buffer has grown. This is used to determine how much the buffer will grow\n   * for next growth pass.\n   */\n  private growthCount: number = 0;\n  /** This is the number of instances the buffer currently supports */\n  private maxInstancedCount: number = 1000;\n\n  // These are the only Three objects that must be monitored for disposal\n  private geometry?: Three.InstancedBufferGeometry;\n  private material?: Three.ShaderMaterial;\n  private model?: IModelConstructable & Three.Object3D;\n  private pickModel?: IModelConstructable & Three.Object3D | undefined;\n  private attributes?: IInstanceAttributeInternal<T>[];\n\n  /** This is a mapping of all attributes to their associated property ids that, when the property changes, the attribute will be updated */\n  private attributeToPropertyIds = new Map<IInstanceAttribute<T>, number[]>();\n  /**\n   * This is a trimmed listing of minimum property ids needed to trigger an update on all properties.\n   * This is used by the diffing process mostly to handle adding a new instance.\n   */\n  private updateAllPropertyIdList: number[] = [];\n  /**\n   * This is the discovered property id of the active attribute for the instance type this manager manages.\n   * This is used by the diffing process to target updates related to deactivating an instance.\n   */\n  private activePropertyId: number = -1;\n\n  constructor(layer: Layer<T, any>, scene: Scene) {\n    super(layer, scene);\n    // Start our add method as a registration step.\n    this.add = this.doAddWithRegistration;\n  }\n\n  /**\n   * First instance to be added to this manager will be heavily analyzed for used observables per attribute.\n   */\n  private doAddWithRegistration(instance: T) {\n    // We need to find out how an instance interacts with the attributes, so we will\n    // loop through the instances, call their updates and get feedback\n    this.layer.instanceAttributes.forEach(attribute => {\n      // We don't need to register child attributes as they get updated as a consequence to parent attributes\n      if (attribute.parentAttribute) return;\n      // Activate monitoring of ids, this also resets the monitor's list\n      ObservableMonitoring.setObservableMonitor(true);\n      // Access the update which accesses an instances properties (usually)\n      attribute.update(instance);\n      // We now have all of the ids of the properties that were used in updating the attributes\n      const propertyIdsForAttribute = ObservableMonitoring.getObservableMonitorIds(\n        true\n      );\n      // Store the mapping of the property ids\n      this.attributeToPropertyIds.set(attribute, propertyIdsForAttribute);\n\n      // If this is the active attribute, then we track the property id that modifies it\n      // for handling internal instance management.\n      if (attribute === this.layer.activeAttribute) {\n        this.activePropertyId = propertyIdsForAttribute[0];\n      }\n    });\n\n    // SUPER IMPORTANT to deactivate this here. Leaving this turned on causes memory to be chewed up\n    // for every property getter.\n    ObservableMonitoring.setObservableMonitor(false);\n    // This analyzes the properties and how they affect the attributes. It determines the smallest\n    // list possible of property ids needed to trigger an update on all of the attributes.\n    this.makeUpdateAllPropertyIdList();\n    // Do the first resize which creates the buffer and makes all of the initial buffer locations\n    const locationInfo = this.resizeBuffer();\n    // After all of the property id to attribute associations are made, we must break down the buffers\n    // into locations and then group those locations which will become our instance to buffer location\n    // slots\n    this.gatherLocationsIntoGroups(\n      locationInfo.newLocations,\n      locationInfo.growth\n    );\n    // After the first registration add, we gear shift to a more efficient add method.\n    this.add = this.doAdd;\n\n    // Perform the add after all of the registration process is complete\n    return this.doAdd(instance);\n  }\n\n  /**\n   * After the registration add happens, we gear shift over to this add method which will only pair instances\n   * with their appropriate buffer location.\n   */\n  private doAdd(instance: T) {\n    // Ensure we have buffer locations available\n    if (this.availableLocations.length <= 0) {\n      // Resice the buffer to accommodate more instances\n      const locationInfo = this.resizeBuffer();\n      // Break down the newly generated buffers into property groupings for the instances\n      this.gatherLocationsIntoGroups(\n        locationInfo.newLocations,\n        locationInfo.growth\n      );\n    }\n\n    // Get the next available location\n    const bufferLocations = this.availableLocations.shift();\n\n    // Pair up the instance with it's buffer location\n    if (bufferLocations && this.geometry) {\n      this.instanceToBufferLocation[instance.uid] = bufferLocations;\n      this.currentInstancedCount = this.geometry.maxInstancedCount = max(\n        this.currentInstancedCount,\n        // Instance index + 1 because the indices are zero indexed and the maxInstancedCount is a count value\n        bufferLocations.instanceIndex + 1\n      );\n      this.geometry.drawRange = {\n        count: this.currentInstancedCount * this.layer.instanceVertexCount,\n        start: 0\n      };\n    } else {\n      console.error(\n        \"Add Error: Instance Attribute Buffer Manager failed to pair an instance with a buffer location\"\n      );\n    }\n\n    return bufferLocations;\n  }\n\n  destroy() {\n    if (this.geometry) this.geometry.dispose();\n    if (this.material) this.material.dispose();\n\n    if (this.scene && this.scene.container && this.model) {\n      this.scene.container.remove(this.model);\n    }\n  }\n\n  /**\n   * This retireves the buffer locations associated with an instance, or returns nothing\n   * if the instance has not been associated yet.\n   */\n  getBufferLocations(instance: T) {\n    return this.instanceToBufferLocation[instance.uid];\n  }\n\n  /**\n   * This is the property id of the active attribute.\n   */\n  getActiveAttributePropertyId() {\n    return this.activePropertyId;\n  }\n\n  /**\n   * This is the bare minimum property ids that, when triggered for update, will update ALL of the attribute buffers\n   * for the managed layer.\n   */\n  getUpdateAllPropertyIdList() {\n    return this.updateAllPropertyIdList;\n  }\n\n  /**\n   * Analyzes the list of attributes to the property ids that affects them. This populates the list\n   * of minimal property ids needed to trigger updates on all of the attributes.\n   */\n  private makeUpdateAllPropertyIdList() {\n    // Make a deduping list of ids\n    const updateAllPropertyIdList: { [key: number]: number } = {};\n\n    // Get unique ids that will target all attributes\n    this.attributeToPropertyIds.forEach(ids => {\n      updateAllPropertyIdList[ids[0]] = ids[0];\n    });\n\n    // Store the list for the diffing process to utilize\n    this.updateAllPropertyIdList = Object.values(\n      updateAllPropertyIdList\n    ).filter(Boolean);\n  }\n\n  /**\n   * Disassociates an instance with a buffer\n   */\n  remove = (instance: T) => {\n    const location = this.instanceToBufferLocation[instance.uid];\n\n    if (location) {\n      delete this.instanceToBufferLocation[instance.uid];\n      this.availableLocations.push(location);\n    }\n\n    return instance;\n  };\n\n  /**\n   * Clears all elements of this manager from the current scene it was in.\n   */\n  removeFromScene() {\n    if (this.scene && this.scene.container && this.model) {\n      this.scene.container.remove(this.model);\n    }\n    this.pickModel && this.scene.pickingContainer.remove(this.pickModel);\n    delete this.scene;\n  }\n\n  /**\n   * This generates a new buffer of uniforms to associate instances with.\n   */\n  private resizeBuffer() {\n    let growth = 0;\n    // Each attribute will generate lists of new buffer locations after being created or expanded\n    const attributeToNewBufferLocations = new Map<\n      string,\n      IInstanceAttributeBufferLocation[]\n    >();\n\n    // If our geometry is not created yet, then it need be made\n    if (!this.geometry) {\n      // The buffer grows from 0 to our initial instance count\n      growth = this.maxInstancedCount;\n      // We generate a new geometry object for the buffer as the geometry\n      // Needs to have it's own unique draw range per buffer for optimal\n      // Performance.\n      this.geometry = new Three.InstancedBufferGeometry();\n\n      // The geometry needs the vertex information (which should be shared amongst all instances of the layer)\n      for (const attribute of this.layer.vertexAttributes) {\n        if (attribute.materialAttribute) {\n          this.geometry.addAttribute(\n            attribute.name,\n            attribute.materialAttribute\n          );\n        }\n      }\n\n      this.attributes = [];\n\n      // We now take the instance attributes and add them as Instanced Attributes to our geometry\n      for (const attribute of this.layer.instanceAttributes) {\n        // We start with enough data in the buffer to accommodate 1024 instances\n        const size: number = attribute.size || 0;\n        const buffer = new Float32Array(size * this.maxInstancedCount);\n        const bufferAttribute = new Three.InstancedBufferAttribute(\n          buffer,\n          size\n        );\n        bufferAttribute.setDynamic(true);\n        this.geometry.addAttribute(\n          instanceAttributeShaderName(attribute),\n          bufferAttribute\n        );\n        let newBufferLocations = attributeToNewBufferLocations.get(\n          attribute.name\n        );\n\n        if (!newBufferLocations) {\n          newBufferLocations = [];\n          attributeToNewBufferLocations.set(attribute.name, newBufferLocations);\n        }\n\n        const allLocations = this.allBufferLocations[attribute.name] || [];\n        this.allBufferLocations[attribute.name] = allLocations;\n\n        const internalAttribute: IInstanceAttributeInternal<T> = Object.assign(\n          {},\n          attribute,\n          { uid: uid(), bufferAttribute: bufferAttribute }\n        );\n\n        for (let i = 0; i < this.maxInstancedCount; ++i) {\n          const newLocation: IBufferLocation = {\n            attribute: internalAttribute,\n            buffer: {\n              value: buffer\n            },\n            instanceIndex: i,\n            range: [i * size, i * size + size]\n          };\n\n          newBufferLocations.push(newLocation);\n          allLocations.push(newLocation);\n        }\n\n        // Make an internal instance attribute for tracking\n        this.attributes.push(internalAttribute);\n      }\n\n      // Ensure the draw range covers every instance in the geometry.\n      this.geometry.maxInstancedCount = 0;\n      // This is the material that is generated for the layer that utilizes all of the generated and\n      // Injected shader IO and shader fragments\n      this.material = this.layer.material.clone();\n\n      // Grab the global uniforms from the material and add it to the uniform's materialUniform list so that\n      // We can keep uniforms consistent across all Instances\n      for (let i = 0, end = this.layer.uniforms.length; i < end; ++i) {\n        const uniform = this.layer.uniforms[i];\n        uniform.materialUniforms.push(this.material.uniforms[uniform.name]);\n      }\n    } else {\n      // If the geometry is already created, then we will expand each instanced attribute to the next growth\n      // level and generate the new buffer locations based on the expansion\n      // Since were are resizing the buffer, let's destroy the old buffer and make one anew\n      this.geometry.dispose();\n      this.geometry = new Three.InstancedBufferGeometry();\n      const previousInstanceAmount = this.maxInstancedCount;\n\n      // The geometry needs the vertex information (which should be shared amongst all instances of the layer)\n      for (const attribute of this.layer.vertexAttributes) {\n        if (attribute.materialAttribute) {\n          this.geometry.addAttribute(\n            attribute.name,\n            attribute.materialAttribute\n          );\n        }\n      }\n\n      // We grow our buffer by magnitudes of 10 * 1024\n      // First growth: 1000\n      // Next: 10000\n      // Next: 10000\n      // Next: 10000\n      // Next: 10000\n      // We cap at growth of 1 million to prevent a mass unused RAM void.\n      this.growthCount = Math.min(1, this.growthCount + 1);\n      growth = Math.pow(10, this.growthCount) * 1000;\n      this.maxInstancedCount += growth;\n\n      // Ensure attributes is still defined\n      this.attributes = this.attributes || [];\n\n      for (const attribute of this.attributes) {\n        const bufferAttribute = attribute.bufferAttribute;\n        const size: number = attribute.size || 0;\n\n        if (bufferAttribute.array instanceof Float32Array) {\n          // Make a new buffer that is the proper size\n          const buffer: Float32Array = new Float32Array(\n            this.maxInstancedCount * size\n          );\n          // Retain all of the information in the previous buffer\n          buffer.set(bufferAttribute.array, 0);\n          // Make our new attribute based on the grown buffer\n          const newAttribute = new Three.InstancedBufferAttribute(buffer, size);\n          // Set the attribute to dynamic so we can update ranges within it\n          newAttribute.setDynamic(true);\n          // Make sure our attribute is updated with the newly made attribute\n          attribute.bufferAttribute = newAttribute;\n          // Add the new attribute to our new geometry object\n          this.geometry.addAttribute(\n            instanceAttributeShaderName(attribute),\n            newAttribute\n          );\n          // Get the temp storage for new buffer locations\n          let newBufferLocations = attributeToNewBufferLocations.get(\n            attribute.name\n          );\n\n          // Since we have a new buffer object we are working with, we must update all of the existing buffer\n          // locations to utilize this new buffer. The locations keep everything else the same, but the buffer\n          // object itself should be updated\n          const allLocations = this.allBufferLocations[attribute.name] || [];\n          this.allBufferLocations[attribute.name] = allLocations;\n\n          for (let k = 0, endk = allLocations.length; k < endk; ++k) {\n            allLocations[k].buffer.value = buffer;\n          }\n\n          if (!newBufferLocations) {\n            newBufferLocations = [];\n            attributeToNewBufferLocations.set(\n              attribute.name,\n              newBufferLocations\n            );\n          }\n\n          for (\n            let i = previousInstanceAmount, end = this.maxInstancedCount;\n            i < end;\n            ++i\n          ) {\n            const newLocation: IBufferLocation = {\n              attribute,\n              buffer: {\n                value: buffer\n              },\n              instanceIndex: i,\n              range: [i * size, i * size + size]\n            };\n\n            newBufferLocations.push(newLocation);\n            allLocations.push(newLocation);\n          }\n        }\n      }\n\n      if (this.scene.container && this.model) {\n        this.scene.container.remove(this.model);\n      }\n    }\n\n    if (this.scene && this.model && this.scene.container) {\n      this.scene.container.remove(this.model);\n    }\n\n    if (this.scene && this.scene.pickingContainer && this.pickModel) {\n      this.scene.pickingContainer.remove(this.pickModel);\n    }\n\n    // Ensure material is defined\n    this.material = this.material || this.layer.material.clone();\n    // Remake the model with the generated geometry\n    this.model = generateLayerModel(this.layer, this.geometry, this.material);\n    // We render junkloads of instances for a given buffer. Culling will have to happen\n    // On an instance level.\n    this.model.frustumCulled = false;\n    // Make a picking model if we need it so we can render the model with a different uniform set\n    // for the picking procedure.\n    this.pickModel =\n      this.layer.picking.type === PickType.SINGLE\n        ? this.model.clone()\n        : undefined;\n\n    // Now that we are ready to utilize the buffer, let's add it to the scene so it may be rendered.\n    // Each new buffer equates to one draw call.\n    if (this.scene && this.scene.container) {\n      this.scene.container.add(this.model);\n\n      if (this.pickModel) {\n        this.scene.pickingContainer.add(this.pickModel);\n      }\n    }\n\n    return {\n      growth,\n      newLocations: attributeToNewBufferLocations\n    };\n  }\n\n  /**\n   * This takes newly created buffer locations and groups them by the property ids identified by the\n   * registration phase.\n   */\n  private gatherLocationsIntoGroups(\n    attributeToNewBufferLocations: Map<\n      string,\n      IInstanceAttributeBufferLocation[]\n    >,\n    totalNewInstances: number\n  ) {\n    if (this.attributeToPropertyIds.size === 0) return;\n\n    // Optimize inner loops by pre-fetching lookups by names\n    const attributesBufferLocations: {\n      attribute: IInstanceAttribute<T>;\n      bufferLocationsForAttribute: IInstanceAttributeBufferLocation[];\n      childBufferLocations: IInstanceAttributeBufferLocation[][];\n      ids: number[];\n    }[] = [];\n\n    this.attributeToPropertyIds.forEach((ids, attribute) => {\n      attributesBufferLocations.push({\n        attribute,\n        bufferLocationsForAttribute:\n          attributeToNewBufferLocations.get(attribute.name) || [],\n        childBufferLocations: (attribute.childAttributes || []).map(\n          attr => attributeToNewBufferLocations.get(attr.name) || []\n        ),\n        ids\n      });\n    });\n\n    // Loop through all of the new instances available and gather all of the buffer locations\n    for (let i = 0; i < totalNewInstances; ++i) {\n      const group: IInstanceAttributeBufferLocationGroup = {\n        instanceIndex: -1,\n        propertyToBufferLocation: {}\n      };\n\n      // Loop through all of the property ids that affect specific attributes. Each of these ids\n      // needs an association with the buffer location they modify.\n      for (let j = 0, endj = attributesBufferLocations.length; j < endj; ++j) {\n        const allLocations = attributesBufferLocations[j];\n        const attribute = allLocations.attribute;\n        const ids = allLocations.ids;\n        const bufferLocationsForAttribute =\n          allLocations.bufferLocationsForAttribute;\n\n        if (!bufferLocationsForAttribute) {\n          emitOnce(\n            \"Instance Attribute Buffer Error\",\n            (count: number, id: string) => {\n              console.warn(\n                `${id}: There is an error in forming buffer location groups in InstanceAttributeBufferManager. Error count: ${count}`\n              );\n            }\n          );\n          continue;\n        }\n\n        const bufferLocation = bufferLocationsForAttribute.shift();\n\n        if (!bufferLocation) {\n          emitOnce(\n            \"Instance Attribute Buffer Error\",\n            (count: number, id: string) => {\n              console.warn(\n                `${id}: There is an error in forming buffer location groups in InstanceAttributeBufferManager. Error count: ${count}`\n              );\n            }\n          );\n          continue;\n        }\n\n        if (group.instanceIndex === -1) {\n          group.instanceIndex = bufferLocation.instanceIndex;\n        } else if (bufferLocation.instanceIndex !== group.instanceIndex) {\n          emitOnce(\n            \"Instance Attribute Parallelism Error\",\n            (count: number, id: string) => {\n              console.warn(\n                `${id}: A buffer location does not have a matching instance index which means the buffer locations are not in parallel with each other somehow. Error count: ${count}`\n              );\n              console.warn(attribute.name, bufferLocation);\n            }\n          );\n          continue;\n        }\n\n        // If the attribute has children attributes. Then when the attribute is updated, the child attributes should\n        // be updated as well. Thus the buffer location needs the child attribute buffer locations.\n        if (attribute.childAttributes) {\n          const childLocations = [];\n\n          for (\n            let k = 0, endk = attribute.childAttributes.length;\n            k < endk;\n            ++k\n          ) {\n            const childAttribute = attribute.childAttributes[k];\n            const bufferLocationsForChildAttribute =\n              allLocations.childBufferLocations[k];\n\n            if (bufferLocationsForChildAttribute) {\n              const childBufferLocation = bufferLocationsForChildAttribute.shift();\n              if (childBufferLocation) {\n                childLocations.push(childBufferLocation);\n              } else {\n                emitOnce(\n                  \"Instance Attribute Child Attribute Error\",\n                  (count: number, id: string) => {\n                    console.warn(\n                      `${id}: A child attribute does not have a buffer location available. Error count: ${count}`\n                    );\n                    console.warn(\n                      `Parent Attribute: ${attribute.name} Child Attribute: ${\n                        childAttribute.name\n                      }`\n                    );\n                  }\n                );\n              }\n            }\n          }\n\n          bufferLocation.childLocations = childLocations;\n        }\n\n        // In the group, associate the property ids that affect a buffer location WITH the buffer location they affect\n        for (let k = 0, endk = ids.length; k < endk; ++k) {\n          const id = ids[k];\n          group.propertyToBufferLocation[id] = bufferLocation;\n        }\n      }\n\n      // Store this group as a group that is ready to be associated with an instance\n      this.availableLocations.push(group);\n    }\n\n    // This helps ensure errors get reported in a timely fashion in case this triggers some massive looping\n    flushEmitOnce();\n  }\n\n  /**\n   * Returns the total instances this buffer manages.\n   */\n  getInstanceCount() {\n    return this.maxInstancedCount;\n  }\n}\n","export * from \"./buffer-manager-base\";\nexport * from \"./instance-attribute-buffer-manager\";\nexport * from \"./uniform-buffer-manager\";\n","import { Instance } from \"../../instance-provider/instance\";\nimport {\n  IInstanceAttribute,\n  INonePickingMetrics,\n  IQuadTreePickingMetrics,\n  ISinglePickingMetrics,\n  PickType\n} from \"../../types\";\nimport { LayerBufferType } from \"../layer-processing/layer-buffer-type\";\nimport { AtlasResourceManager } from \"../texture/atlas-resource-manager\";\nimport { BufferManagerBase, IBufferLocation } from \"./buffer-manager-base\";\nimport { IBufferLocationGroup } from \"./buffer-manager-base\";\nimport { BaseDiffProcessor } from \"./diff-processors/base-diff-processor\";\nimport { InstanceAttributeColorDiffProcessor } from \"./diff-processors/instance-attribute-color-diff-processor\";\nimport { InstanceAttributeDiffProcessor } from \"./diff-processors/instance-attribute-diff-processor\";\nimport { InstanceAttributeQuadDiffProcessor } from \"./diff-processors/instance-attribute-quad-diff-processor\";\nimport { UniformColorDiffProcessor } from \"./diff-processors/uniform-color-diff-processor\";\nimport { UniformDiffProcessor } from \"./diff-processors/uniform-diff-processor\";\nimport { UniformQuadDiffProcessor } from \"./diff-processors/uniform-quad-diff-processor\";\n\n/** Signature of a method that handles a diff */\nexport type DiffHandler<T extends Instance> = (\n  manager: BaseDiffProcessor<T>,\n  instance: T,\n  propIds: number[],\n  bufferLocations?: IBufferLocation | IBufferLocationGroup<IBufferLocation>\n) => void;\n/** A set of diff handling methods in this order [change, add, remove] */\nexport type DiffLookup<T extends Instance> = DiffHandler<T>[];\n\n/**\n * This interface is the bare minimum properties needed for this diff manager to map instance updates to\n * uniform changes. We don't use a Layer as a target explicitly to avoid circular/hard dependencies\n */\nexport interface IInstanceDiffManagerTarget<T extends Instance> {\n  /** This is the attribute for the target that represents the _active injected value */\n  activeAttribute: IInstanceAttribute<T>;\n  /** This is used by the automated easing system and is the easing Ids used by the layer for given attributes */\n  easingId: { [key: string]: number };\n  /** This is all of the instance attributes applied to the target */\n  instanceAttributes: IInstanceAttribute<T>[];\n  /** This is the picking metrics for how Instances are picked with the mouse */\n  picking:\n    | IQuadTreePickingMetrics<T>\n    | ISinglePickingMetrics<T>\n    | INonePickingMetrics;\n  /** This is the resource manager for the target which let's us fetch information from an atlas for an instance */\n  resource: AtlasResourceManager;\n  /** This is the manager that links an instance to it's uniform cluster for populating the uniform buffer */\n  bufferManager: BufferManagerBase<T, IBufferLocation>;\n  /** This is the buffering strategy being used */\n  bufferType: LayerBufferType;\n}\n\n/**\n * This class manages the process of taking the diffs of a layer and executing methods on those diffs to perform\n * updates to the uniforms that control those instances.\n */\nexport class InstanceDiffManager<T extends Instance> {\n  bufferManager: BufferManagerBase<T, IBufferLocation>;\n  processor: BaseDiffProcessor<T>;\n  processing: DiffLookup<T>;\n  layer: IInstanceDiffManagerTarget<T>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>\n  ) {\n    this.layer = layer;\n    this.bufferManager = bufferManager;\n  }\n\n  /**\n   * This returns the proper diff processor for handling diffs\n   */\n  makeProcessor(): DiffLookup<T> {\n    // If this manager has already figured out which processor to use. Just return that processor.\n    if (this.processing) return this.processing;\n\n    if (this.layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE) {\n      // Now we look at the state of the layer to determine the best diff processor strategy\n      if (this.layer.picking) {\n        if (this.layer.picking.type === PickType.SINGLE) {\n          this.processor = new InstanceAttributeColorDiffProcessor(\n            this.layer,\n            this.bufferManager\n          );\n        } else if (this.layer.picking.type === PickType.ALL) {\n          this.processor = new InstanceAttributeQuadDiffProcessor(\n            this.layer,\n            this.bufferManager\n          );\n        }\n      }\n\n      if (!this.processor) {\n        this.processor = new InstanceAttributeDiffProcessor(\n          this.layer,\n          this.bufferManager\n        );\n      }\n    } else {\n      // Now we look at the state of the layer to determine the best diff processor strategy\n      if (this.layer.picking) {\n        if (this.layer.picking.type === PickType.ALL) {\n          this.processor = new UniformQuadDiffProcessor(\n            this.layer,\n            this.bufferManager\n          );\n        } else if (this.layer.picking.type === PickType.SINGLE) {\n          this.processor = new UniformColorDiffProcessor(\n            this.layer,\n            this.bufferManager\n          );\n        }\n      }\n\n      if (!this.processor) {\n        this.processor = new UniformDiffProcessor(\n          this.layer,\n          this.bufferManager\n        );\n      }\n    }\n\n    this.processing = [\n      this.processor.changeInstance,\n      this.processor.addInstance,\n      this.processor.removeInstance\n    ];\n\n    return this.processing;\n  }\n}\n","import { IInstanceProvider } from \"../surface/layer\";\nimport { InstanceDiffType } from \"../types\";\nimport { Instance } from \"./instance\";\n\n/**\n * This is an entry within the change list of the provider. It represents the type of change\n * and stores the property id's of the properties on the instance that have changed.\n */\nexport type InstanceDiff<T extends Instance> = [\n  T,\n  InstanceDiffType,\n  { [key: number]: number }\n];\n\ntype InstanceDisposer<T extends Instance> = [T, Function];\n\n/**\n * This is an optimized provider, that can provide instances that use the internal observable system\n * to deliver updates to the framework.\n */\nexport class InstanceProvider<T extends Instance>\n  implements IInstanceProvider<T> {\n  /** Stores the disposers that are called when the instance is no longer listened to */\n  private cleanObservation = new Map<number, InstanceDisposer<T>>();\n  /** This stores the changes to the instances themselves */\n  private instanceChanges = new Map<number, InstanceDiff<T>>();\n  /** This flag is true when resolving changes when the change list is retrieved. it blocks changes until the current list is resolved */\n  private allowChanges = true;\n\n  /**\n   * Retrieve all of the changes applied to instances\n   */\n  get changeList(): InstanceDiff<T>[] {\n    this.allowChanges = false;\n    const changes = Array.from(this.instanceChanges.values());\n\n    return changes;\n  }\n\n  /**\n   * Adds an instance to the provider which will stream observable changes of the instance to\n   * the framework.\n   */\n  add(instance: T) {\n    // No need to duplicate the addition\n    if (this.cleanObservation.get(instance.uid)) {\n      return instance;\n    }\n\n    if (this.allowChanges) {\n      instance.observer = this;\n      const disposer: Function = instance.observableDisposer;\n      // Store the disposers so we can clean up the observable properties\n      this.cleanObservation.set(instance.uid, [instance, disposer]);\n      // Indicate we have a new instance\n      this.instanceChanges.set(instance.uid, [\n        instance,\n        InstanceDiffType.INSERT,\n        instance.changes\n      ]);\n    }\n\n    return instance;\n  }\n\n  /**\n   * Removes all instances from this provider\n   */\n  clear() {\n    const values = Object.values(this.cleanObservation);\n\n    for (let i = 0, end = values.length; i < end; ++i) {\n      this.remove(values[i][0]);\n    }\n  }\n\n  /**\n   * Clear all resources held by this provider. It IS valid to lose reference to all instances\n   * and to this object, which would effectively cause this object to get GC'ed. But if you\n   * desire to hang onto the instance objects, then this should be called.\n   */\n  destroy() {\n    const values = Object.values(this.cleanObservation);\n\n    for (let i = 0, end = values.length; i < end; ++i) {\n      values[i][1]();\n    }\n\n    this.cleanObservation.clear();\n    this.instanceChanges.clear();\n  }\n\n  /**\n   * This is called from observables to indicate it's parent has been updated\n   */\n  instanceUpdated(instance: T) {\n    if (this.allowChanges) {\n      // Flag the instance as having a property changed\n      this.instanceChanges.set(instance.uid, [\n        instance,\n        InstanceDiffType.CHANGE,\n        instance.changes\n      ]);\n    }\n  }\n\n  /**\n   * Removes the instance from being advertised changes and from providing the changes\n   * for the instance.\n   */\n  remove(instance: T) {\n    if (this.allowChanges) {\n      const disposer = this.cleanObservation.get(instance.uid);\n\n      if (disposer) {\n        disposer[1]();\n        this.cleanObservation.delete(instance.uid);\n        this.instanceChanges.set(instance.uid, [\n          instance,\n          InstanceDiffType.REMOVE,\n          {}\n        ]);\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Flagged all changes as dealt with\n   */\n  resolve() {\n    this.allowChanges = true;\n    this.instanceChanges.clear();\n  }\n\n  /**\n   * This performs an operation that forces all of the instances to be flagged as an\n   * 'add' change. This allows a layer listening to this provider to ensure it has added\n   * all currently existing instances monitored by the provider.\n   *\n   * NOTE: This is a VERY poor performing method and should probably be used by the framework\n   * and not manually.\n   */\n  sync() {\n    const emptyPropertyChanges: number[] = [];\n\n    // Loop through all registered instances (which is only stored in the disposer list kept by this provider)\n    this.cleanObservation.forEach(disposer => {\n      const [instance] = disposer;\n      // Flag the instance as having a property changed\n      this.instanceChanges.set(instance.uid, [\n        instance,\n        InstanceDiffType.INSERT,\n        emptyPropertyChanges\n      ]);\n    });\n  }\n}\n","import * as Three from \"three\";\nimport { InstanceProvider } from \"../../instance-provider\";\nimport { ILayerProps, IModelType, Layer } from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  IShaderInitialization,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport { CommonMaterialOptions, IAutoEasingMethod, Vec } from \"../../util\";\nimport { ArcInstance } from \"./arc-instance\";\n\nexport enum ArcScaleType {\n  /** All dimensions are within world space */\n  NONE,\n  /**\n   * The thickness of the arc is in screen space. Thus, camera zoom changes will not affect it and\n   * must be controlled by scaleFactor alone.\n   */\n  SCREEN_CURVE\n}\n\nexport interface IArcLayerProps<T extends ArcInstance> extends ILayerProps<T> {\n  scaleType?: ArcScaleType;\n  animate?: {\n    angle?: IAutoEasingMethod<Vec>;\n    center?: IAutoEasingMethod<Vec>;\n    colorEnd?: IAutoEasingMethod<Vec>;\n    colorStart?: IAutoEasingMethod<Vec>;\n    radius?: IAutoEasingMethod<Vec>;\n    thickness?: IAutoEasingMethod<Vec>;\n  };\n}\n\n/**\n * This layer displays Arcs and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class ArcLayer<\n  T extends ArcInstance,\n  U extends IArcLayerProps<T>\n> extends Layer<T, U> {\n  static defaultProps: IArcLayerProps<ArcInstance> = {\n    data: new InstanceProvider<ArcInstance>(),\n    key: \"\",\n    scaleType: ArcScaleType.NONE\n  };\n\n  /** Easy lookup of all attribute names for the layer */\n  static attributeNames = {\n    angle: \"angle\",\n    center: \"center\",\n    colorEnd: \"colorEnd\",\n    colorStart: \"colorStart\",\n    depth: \"depth\",\n    radius: \"radius\",\n    thickness: \"thickness\"\n  };\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<ArcInstance> {\n    const { scaleType } = this.props;\n    const animations = this.props.animate || {};\n    const {\n      angle: animateAngle,\n      center: animateCenter,\n      radius: animateRadius,\n      thickness: animateThickness,\n      colorStart: animateColorStart,\n      colorEnd: animateColorEnd\n    } = animations;\n\n    const MAX_SEGMENTS = 150;\n\n    // Calculate the normals and interpolations for our vertices\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      [MAX_SEGMENTS * 2 + 2]: -1\n    };\n\n    const vertexInterpolation: { [key: number]: number } = {\n      0: 0,\n      [MAX_SEGMENTS * 2 + 2]: 1\n    };\n\n    let sign = 1;\n    for (let i = 0; i < MAX_SEGMENTS * 2; ++i) {\n      vertexToNormal[i + 1] = sign;\n      vertexInterpolation[i + 1] = Math.floor(i / 2) / (MAX_SEGMENTS - 1);\n      sign *= -1;\n    }\n\n    const vs =\n      scaleType === ArcScaleType.NONE\n        ? require(\"./arc-layer.vs\")\n        : require(\"./arc-layer-screen-space.vs\");\n\n    return {\n      fs: require(\"./arc-layer.fs\"),\n      instanceAttributes: [\n        {\n          easing: animateCenter,\n          name: ArcLayer.attributeNames.center,\n          size: InstanceAttributeSize.TWO,\n          update: o => o.center\n        },\n        {\n          easing: animateRadius,\n          name: ArcLayer.attributeNames.radius,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.radius]\n        },\n        {\n          name: ArcLayer.attributeNames.depth,\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth]\n        },\n        {\n          easing: animateThickness,\n          name: ArcLayer.attributeNames.thickness,\n          size: InstanceAttributeSize.TWO,\n          update: o => o.thickness\n        },\n        {\n          easing: animateAngle,\n          name: ArcLayer.attributeNames.angle,\n          size: InstanceAttributeSize.TWO,\n          update: o => o.angle\n        },\n        {\n          easing: animateColorStart,\n          name: ArcLayer.attributeNames.colorStart,\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.colorStart\n        },\n        {\n          easing: animateColorEnd,\n          name: ArcLayer.attributeNames.colorEnd,\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.colorEnd\n        }\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: _u => [1]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexInterpolation[vertex],\n            // The number of vertices\n            MAX_SEGMENTS * 2\n          ]\n        }\n      ],\n      vertexCount: MAX_SEGMENTS * 2 + 2,\n      vs\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return Object.assign({}, CommonMaterialOptions.transparentShape, {\n      side: Three.DoubleSide\n    } as IMaterialOptions);\n  }\n}\n","export * from \"./arc-layer\";\nexport * from \"./arc-instance\";\n","export * from \"./arcs\";\nexport * from \"./circles\";\nexport * from \"./edges\";\nexport * from \"./images\";\nexport * from \"./labels\";\nexport * from \"./rectangle\";\nexport * from \"./rings\";\nexport * from \"./types\";\n","import { Instance } from \"../instance-provider/instance\";\nimport { Bounds } from \"../primitives/bounds\";\nimport { IPoint } from \"../primitives/point\";\n\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nconst maxPopulation: number = 5;\nconst maxDepth: number = 10;\n\nexport type BoundsAccessor<T extends Instance> = (o: T) => Bounds | null;\n\n/**\n * Allows typing of a callback argument\n */\nexport interface IVisitFunction<T extends Instance> {\n  /**\n   * A callback to use during add or query\n   *\n   * Called do provide aggregation or filtering like Array.reduce or\n   * Array.filter, but in a QuadTree instead.\n   *\n   * @param node  The node to effect the function upon\n   * @param child The child to add to the node\n   */\n  (node: Node<T>, child?: Bounds): void;\n}\n\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n */\nexport class Quadrants<T extends Instance> {\n  TL: Node<T>;\n  TR: Node<T>;\n  BL: Node<T>;\n  BR: Node<T>;\n\n  /**\n   * Ensures all memory is released for all nodes and all references are removed\n   * to potentially high memory consumption items\n   */\n  destroy() {\n    this.TL.destroy();\n    this.TR.destroy();\n    this.BL.destroy();\n    this.BR.destroy();\n    delete this.TL;\n    delete this.TR;\n    delete this.BL;\n    delete this.BR;\n  }\n\n  /**\n   * Creates an instance of Quadrants.\n   *\n   * @param bounds The bounds this will create quandrants for\n   * @param depth  The child depth of this element\n   */\n  constructor(\n    bounds: Bounds,\n    depth: number,\n    getBounds: BoundsAccessor<T>,\n    childToNode: Map<T, Node<T>>,\n    childToBounds: Map<T, Bounds | null>\n  ) {\n    const mid = bounds.mid;\n    this.TL = new Node<T>(bounds.x, mid.x, bounds.y, mid.y, getBounds, depth);\n    this.TR = new Node<T>(\n      mid.x,\n      bounds.right,\n      bounds.y,\n      mid.y,\n      getBounds,\n      depth\n    );\n    this.BL = new Node<T>(\n      bounds.x,\n      mid.x,\n      mid.y,\n      bounds.bottom,\n      getBounds,\n      depth\n    );\n    this.BR = new Node<T>(\n      mid.x,\n      bounds.right,\n      mid.y,\n      bounds.bottom,\n      getBounds,\n      depth\n    );\n    this.TL.childToNode = childToNode;\n    this.TR.childToNode = childToNode;\n    this.BL.childToNode = childToNode;\n    this.BR.childToNode = childToNode;\n    this.TL.childToBounds = childToBounds;\n    this.TR.childToBounds = childToBounds;\n    this.BL.childToBounds = childToBounds;\n    this.BR.childToBounds = childToBounds;\n  }\n}\n\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n */\nexport class Node<T extends Instance> {\n  /** This is the amount of space this node covers */\n  bounds: Bounds;\n  /** These are the child Instances of the node. */\n  children: T[] = [];\n  /**\n   * This tracks a quick lookup of a child to it's parent node. This is used so the child can\n   * be removed with ease and not require a traversal of the tree.\n   */\n  childToNode: Map<T, Node<T>>;\n  /** This tracks the bounds calcuated for the given instance */\n  childToBounds: Map<T, Bounds | null>;\n  /** This is how deep the node is within the tree */\n  depth: number = 0;\n  /** This is the accessor method that retrieves the bounds for an injected instance */\n  getBounds: BoundsAccessor<T>;\n  /** These are the child nodes of this quad node when this node is split. It is null if the node is not split yet */\n  nodes: Quadrants<T> | null = null;\n  /**\n   * These are children with null bounds that do not affect the splitting and ALWAYS get checked every query.\n   * They should only reside on the top node.\n   */\n  nullBounded: T[];\n\n  /**\n   * Destroys this node and ensures all child nodes are destroyed as well.\n   */\n  destroy() {\n    delete this.children;\n    delete this.bounds;\n\n    if (this.nodes) {\n      this.nodes.destroy();\n      this.nodes = null;\n    }\n  }\n\n  /**\n   * Creates an instance of Node.\n   */\n  constructor(\n    left: number,\n    right: number,\n    top: number,\n    bottom: number,\n    getBounds: BoundsAccessor<T>,\n    depth: number = 0\n  ) {\n    // If params insertted\n    if (arguments.length >= 4) {\n      this.bounds = new Bounds({ left, right, top, bottom });\n    } else {\n      // Otherwise, make tiny start area\n      this.bounds = new Bounds({ left: 0, right: 1, top: 1, bottom: 0 });\n    }\n\n    // Ensure the depth is set\n    this.depth = depth;\n    // Apply the bounds accessor method for instances\n    this.getBounds = getBounds;\n\n    // If this is the top level node, we need to instantiate the lookup that will be used\n    // Across all nodes.\n    if (this.depth === 0) {\n      this.nullBounded = [];\n      this.childToNode = new Map<T, Node<T>>();\n      this.childToBounds = new Map<T, Bounds>();\n    }\n  }\n\n  /**\n   * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n   * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n   * this quad tree spans (and this is the root node), the quad tree will expand to include\n   * the new child.\n   *\n   * @param child The Bounds type object to inject\n   * @param props Properties that can be retrieved with the child object if applicable\n   *\n   * @returns True if the insertion was successful\n   */\n  add(child: T): boolean {\n    let bounds = this.childToBounds.get(child);\n\n    if (!bounds) {\n      // First we access the bounds of the child and store it\n      bounds = this.getBounds(child);\n      this.childToBounds.set(child, bounds);\n    }\n\n    // This is the entry function for adding children, so we must first expand our top node\n    // To cover the area that the child is located.\n    // If we're in bounds, then let's just add the child\n    if (!bounds || bounds.isInside(this.bounds)) {\n      return this.doAdd(child, bounds);\n    } else {\n      // Otherwise, we need to expand first\n      this.cover(bounds);\n      return this.add(child);\n    }\n  }\n\n  /**\n   * Adds a list of new children to this quad tree. It performs the same operations as\n   * addChild for each child in the list, however, it more efficiently recalculates the\n   * bounds necessary to cover the area the children cover.\n   *\n   * @param children      List of Bounds objects to inject\n   */\n  addAll(children: T[]) {\n    // Make sure we cover the entire area of all the children.\n    // We can speed this up a lot if we first calculate the total bounds the new children covers\n    let minX = Number.MAX_VALUE;\n    let minY = Number.MAX_VALUE;\n    let maxX = -Number.MAX_VALUE;\n    let maxY = -Number.MAX_VALUE;\n\n    // Get the dimensions of the new bounds\n    children.forEach(child => {\n      const bounds = this.getBounds(child);\n      this.childToBounds.set(child, bounds);\n      if (!bounds) return;\n\n      if (bounds.x < minX) {\n        minX = bounds.x;\n      }\n      if (bounds.right > maxX) {\n        maxX = bounds.right;\n      }\n      if (bounds.bottom > maxY) {\n        maxY = bounds.bottom;\n      }\n      if (bounds.y < minY) {\n        minY = bounds.y;\n      }\n    });\n\n    // Ensure a valid cover dimension was established. If no valid dimension is established\n    // Then we don't cover, but we can still add the children as that have null Bounds which\n    // Means injecting at the top level.\n    if (\n      minX !== Number.MAX_VALUE &&\n      minY !== Number.MAX_VALUE &&\n      maxX !== -Number.MAX_VALUE &&\n      maxY !== -Number.MAX_VALUE\n    ) {\n      // Make sure our bounds includes the specified bounds\n      this.cover(\n        new Bounds({ left: minX, right: maxX, bottom: maxY, top: minY })\n      );\n    }\n\n    // Add all of the children into the tree.\n    children.forEach(child =>\n      this.doAdd(child, this.childToBounds.get(child) || null, true)\n    );\n  }\n\n  /**\n   * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n   * This will cause all children to be re-injected into the tree.\n   *\n   * @param bounds The bounds to include in the tree's coverage\n   */\n  cover(bounds: Bounds) {\n    // If we are already covering the area: abort\n    if (bounds.isInside(this.bounds)) {\n      return;\n    }\n\n    // Make our bounds cover the new area\n    this.bounds.encapsulate(bounds);\n    this.bounds.x -= 1;\n    this.bounds.y -= 1;\n    this.bounds.width += 2;\n    this.bounds.height += 2;\n    // Get all of the children underneath this node\n    const allChildren = this.gatherChildren([]);\n    this.children = [];\n\n    // Destroy the split nodes\n    if (this.nodes) {\n      // Completely...destroy...\n      this.nodes.destroy();\n      this.nodes = null;\n    }\n\n    // Clear out the child to node relations\n    this.childToNode.clear();\n    // Reinsert all children with the new dimensions in place\n    allChildren.forEach(child =>\n      this.doAdd(child, this.childToBounds.get(child) || null)\n    );\n  }\n\n  /**\n   * When adding children, this performs the actual action of injecting the child into the tree\n   * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n   *\n   * @param child The Bounds item to inject into the tree\n   * @param props The props to remain associated with the child\n   *\n   * @returns True if the injection was successful\n   */\n  private doAdd(child: T, bounds: Bounds | null, fromSplit?: boolean): boolean {\n    // If this is the top level node and the bounds are null, then we add to the null list\n    if (!bounds && this.depth === 0) {\n      this.nullBounded.push(child);\n      this.childToNode.set(child, this);\n\n      return true;\n    }\n\n    // If no bounds is available at this point, something went terribly wrong\n    if (!bounds) {\n      console.warn(\n        \"A null bounds was added to a Quad Tree node below the top node, which is invalid.\"\n      );\n      return false;\n    }\n\n    // If bounds are null, then just immediately add\n    // If nodes are present, then we have already exceeded the population of this node\n    if (this.nodes) {\n      if (bounds.isInside(this.nodes.TL.bounds)) {\n        return this.nodes.TL.doAdd(child, bounds, fromSplit);\n      }\n\n      if (bounds.isInside(this.nodes.TR.bounds)) {\n        return this.nodes.TR.doAdd(child, bounds, fromSplit);\n      }\n\n      if (bounds.isInside(this.nodes.BL.bounds)) {\n        return this.nodes.BL.doAdd(child, bounds, fromSplit);\n      }\n\n      if (bounds.isInside(this.nodes.BR.bounds)) {\n        return this.nodes.BR.doAdd(child, bounds, fromSplit);\n      }\n\n      // Otherwise, this is a child overlapping this border\n      this.children.push(child);\n      this.childToNode.set(child, this);\n\n      return true;\n    } else if (bounds.isInside(this.bounds)) {\n      // Otherwise, we have not had a split due to population limits being exceeded\n      this.children.push(child);\n      this.childToNode.set(child, this);\n\n      // If we exceeded our population for this quadrant, it is time to split up\n      if (this.children.length > maxPopulation && this.depth < maxDepth) {\n        this.split();\n      }\n\n      return true;\n    }\n\n    // This is when there is something wrong with the insertted child. The bounds\n    // For the quad should have grown without issue, but in this case the bounds\n    // Could not grow to accomodate the child.\n    if (isNaN(bounds.width + bounds.height + bounds.x + bounds.y)) {\n      console.error(\n        \"Child did not fit into bounds because a dimension is NaN\",\n        child,\n        bounds\n      );\n    } else if (bounds.area === 0) {\n      console.error(\n        \"Child did not fit into bounds because the area is zero\",\n        child,\n        bounds\n      );\n    } else {\n      console.error(\n        \"Child did not get insertted.\",\n        \"Parent:\",\n        this.bounds.toString(),\n        \"Child:\",\n        bounds.toString(),\n        \"Inside Checks:\",\n        bounds.x >= this.bounds.x,\n        bounds.right <= this.bounds.right,\n        bounds.y >= this.bounds.y,\n        bounds.bottom <= this.bounds.bottom\n      );\n    }\n\n    // Don't insert the child and continue\n    return true;\n  }\n\n  private doRemove(child: T) {\n    const index = this.children.indexOf(child);\n\n    if (index > -1) {\n      this.children.splice(index, 1);\n      this.childToNode.delete(child);\n      this.childToBounds.delete(child);\n    }\n  }\n\n  /**\n   * Collects all children of all the current and sub nodes into a single list.\n   *\n   * @param list The list we must aggregate children into\n   *\n   * @return The list specified as the list parameter\n   */\n  gatherChildren(list: T[]): T[] {\n    this.children.forEach(child => list.push(child));\n\n    if (this.nodes) {\n      this.nodes.TL.gatherChildren(list);\n      this.nodes.TR.gatherChildren(list);\n      this.nodes.BL.gatherChildren(list);\n      this.nodes.BR.gatherChildren(list);\n    }\n\n    return list;\n  }\n\n  /**\n   * Entry query for determining query type based on input object\n   *\n   * @param bounds Can be a Bounds or a Point object\n   * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n   *               information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return An array of children that intersects with the query\n   */\n  query(bounds: Bounds | IPoint, visit?: IVisitFunction<T>): T[] {\n    // This stores all of the found Instances when querying by bounds or point\n    let found: T[] = [];\n\n    // If this is the top level node then add in the null bunded items as the start\n    if (this.depth === 0) {\n      found = this.nullBounded.slice(0);\n    }\n\n    // Query a rectangle\n    if (bounds instanceof Bounds) {\n      if (bounds.hitBounds(this.bounds)) {\n        return this.queryBounds(bounds, found, visit);\n      }\n    }\n\n    // Query a point\n    if (this.bounds.containsPoint(bounds)) {\n      return this.queryPoint(bounds, found, visit);\n    }\n\n    // Return an empty array when nothing is collided with\n    return found;\n  }\n\n  /**\n   * Queries children for intersection with a bounds object\n   *\n   * @param b     The Bounds to test children against\n   * @param list  The list of children to aggregate into the query\n   * @param visit A callback function that will receive the Node as it is analyzed. This gives\n   *              information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return     Returns the exact same list that was input as the list param\n   */\n  queryBounds(b: Bounds, list: T[], visit?: IVisitFunction<T>): T[] {\n    this.children.forEach(c => {\n      const bounds = this.childToBounds.get(c);\n\n      if (bounds && bounds.hitBounds(b)) {\n        list.push(c);\n      }\n    });\n\n    if (visit) {\n      visit(this);\n    }\n\n    if (this.nodes) {\n      if (b.hitBounds(this.nodes.TL.bounds)) {\n        this.nodes.TL.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.TR.bounds)) {\n        this.nodes.TR.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.BL.bounds)) {\n        this.nodes.BL.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.BR.bounds)) {\n        this.nodes.BR.queryBounds(b, list, visit);\n      }\n    }\n\n    return list;\n  }\n\n  /**\n   * Queries children for intersection with a point\n   *\n   * @param p     The Point to test children against\n   * @param list  The list of children to aggregate into the query\n   * @param visit A callback function that will receive the Node as it is analyzed. This gives\n   *              information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return      Returns the exact same list that was input as the list param\n   */\n  queryPoint(p: any, list: T[], visit?: IVisitFunction<T>): T[] {\n    this.children.forEach(c => {\n      const bounds = this.childToBounds.get(c);\n\n      if (bounds && bounds.containsPoint(p)) {\n        list.push(c);\n      }\n    });\n\n    if (visit) {\n      visit(this);\n    }\n\n    if (this.nodes) {\n      if (this.nodes.TL.bounds.containsPoint(p)) {\n        this.nodes.TL.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.TR.bounds.containsPoint(p)) {\n        this.nodes.TR.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.BL.bounds.containsPoint(p)) {\n        this.nodes.BL.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.BR.bounds.containsPoint(p)) {\n        this.nodes.BR.queryPoint(p, list, visit);\n      }\n    }\n\n    return list;\n  }\n\n  /**\n   * Remove the provided item from the tree.\n   */\n  remove(child: T) {\n    if (this.childToNode) {\n      const node = this.childToNode.get(child);\n\n      // If the node is getting removed from the top level node, then it MAY be a null bounded item\n      // Which gets removed from the list\n      if (node && node.depth === 0) {\n        const index = node.nullBounded.indexOf(child);\n\n        if (index > -1) {\n          node.nullBounded.splice(index);\n          this.childToNode.delete(child);\n          this.childToBounds.delete(child);\n\n          return;\n        }\n      }\n\n      // Otherwise, just remove the node normally\n      if (node) {\n        node.doRemove(child);\n      }\n    }\n  }\n\n  /**\n   * Creates four sub quadrants for this node.\n   */\n  split() {\n    // Gather all items to be handed down\n    const allChildren = this.gatherChildren([]);\n    // Gather all props for the children to be handed down as well\n    this.nodes = new Quadrants<T>(\n      this.bounds,\n      this.depth + 1,\n      this.getBounds,\n      this.childToNode,\n      this.childToBounds\n    );\n    // Empty out the children as they are being re-injected\n    this.children = [];\n\n    for (let i = 0, end = allChildren.length; i < end; ++i) {\n      const child = allChildren[i];\n      this.doAdd(child, this.childToBounds.get(child) || null, true);\n    }\n  }\n\n  /**\n   * Traverses the quad tree returning every quadrant encountered\n   *\n   * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n   */\n  visit(cb: IVisitFunction<T>): void {\n    const finished = Boolean(cb(this));\n\n    if (this.nodes && !finished) {\n      this.nodes.TL.visit(cb);\n      this.nodes.TR.visit(cb);\n      this.nodes.BL.visit(cb);\n      this.nodes.BR.visit(cb);\n    }\n  }\n}\n\nexport class TrackedQuadTree<T extends Instance> extends Node<T> {}\n","import { ChartCamera } from \"./chart-camera\";\n\nexport interface IReferenceCameraOptions {\n  /** This is the base camera to monitor */\n  base: ChartCamera;\n  /**\n   * This is a filter applied to the offset that comes from the chart camera.\n   */\n  offsetFilter?(offset: [number, number, number]): [number, number, number];\n  /**\n   * This is a filter applied to the scale that comes from the chart camera.\n   */\n  scaleFilter?(scale: [number, number, number]): [number, number, number];\n}\n\n/**\n * This is a camera that is based on another camera. This can apply filters\n * to the information provided from the base camera.\n *\n * Useful for situations such as a chart having a chart area and a list on the\n * left. This can use the same camera the chart area uses, but filter the response\n * to only track the y offset of the base camera.\n *\n * That would allow easy tracking of the left list to track with elements in the\n * chart and only manipulate a single camera instead of managing many cameras and\n * tie them together with lots of events.\n */\nexport class ReferenceCamera extends ChartCamera {\n  private base: ChartCamera;\n  private offsetFilter = (offset: [number, number, number]) => offset;\n  private scaleFilter = (scale: [number, number, number]) => scale;\n\n  set offset(_val: any) {\n    /** no-op */\n  }\n\n  get offset() {\n    return this.offsetFilter(this.base.offset);\n  }\n\n  set scale(_val: any) {\n    /** no-op */\n  }\n\n  get scale() {\n    return this.scaleFilter(this.base.scale);\n  }\n\n  constructor(options: IReferenceCameraOptions) {\n    super();\n    Object.assign(this, options);\n  }\n}\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * Active `debug` instances.\n */\nexports.instances = [];\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  var prevTime;\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n  debug.destroy = destroy;\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  exports.instances.push(debug);\n\n  return debug;\n}\n\nfunction destroy () {\n  var index = exports.instances.indexOf(this);\n  if (index !== -1) {\n    exports.instances.splice(index, 1);\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var i;\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n\n  for (i = 0; i < exports.instances.length; i++) {\n    var instance = exports.instances[i];\n    instance.enabled = exports.enabled(instance.namespace);\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  if (name[name.length - 1] === '*') {\n    return true;\n  }\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__135__;","import { Instance } from \"../../instance-provider/instance\";\nimport { IShaderExtension, IShaderInitialization } from \"../../types\";\nimport {\n  IShaderTemplateRequirements,\n  shaderTemplate\n} from \"../../util/shader-templating\";\nimport { templateVars } from \"../template-vars\";\n\nexport function extendShader<T extends Instance>(\n  shaderIO: IShaderInitialization<T>,\n  vs?: IShaderExtension,\n  fs?: IShaderExtension\n) {\n  const baseVS = shaderIO.vs;\n  const baseFS = shaderIO.fs;\n\n  let extendedVS = { shader: baseVS };\n  let extendedFS = { shader: baseFS };\n\n  // Set the replacements for the extension locations, but also retain the extension modifier to allow for\n  // Further extensions if desired.\n  if (vs) {\n    const options: { [key: string]: string } = {};\n\n    options[templateVars.extendHeader] = vs.header\n      ? `${vs.header}\\n$\\{${templateVars.extendHeader}}`\n      : \"\";\n    options[templateVars.extend] = vs.body\n      ? `${vs.body}\\n$\\{${templateVars.extend}}`\n      : \"\";\n\n    // It is REQUIRED to have both header and body extensions to be a valid extendible shader\n    const required: IShaderTemplateRequirements = {\n      name: \"Extend VS Shader\",\n      values: [templateVars.extendHeader, templateVars.extend]\n    };\n\n    // Generated the extended shader\n    extendedVS = shaderTemplate({\n      options,\n      required,\n      shader: baseVS,\n\n      // We do not want to remove any template macros that do not deal with extension\n      onToken: (token, replace) => {\n        if (\n          token === templateVars.extendHeader ||\n          token === templateVars.extend\n        ) {\n          return replace;\n        }\n\n        return `$\\{${token}}`;\n      }\n    });\n  }\n\n  // Next, extend the fragment shader\n\n  // Set the replacements for the extension locations, but also retain the extension modifier to allow for\n  // Further extensions if desired.\n  if (fs) {\n    const options: { [key: string]: string } = {};\n\n    options[templateVars.extendHeader] = fs.header\n      ? `${fs.header}\\n$\\{${templateVars.extendHeader}}`\n      : \"\";\n    options[templateVars.extend] = fs.body\n      ? `${fs.body}\\n$\\{${templateVars.extend}}`\n      : \"\";\n\n    // It is REQUIRED to have both header and body extensions to be a valid extendible shader\n    const required = {\n      name: \"Extend FS Shader\",\n      values: [templateVars.extendHeader, templateVars.extend]\n    };\n\n    // Generate the extended shader\n    extendedFS = shaderTemplate({\n      options,\n      required,\n      shader: baseFS,\n\n      // We do not want to remove any template macros that do not deal with extension\n      onToken: (token, replace) => {\n        if (\n          token === templateVars.extendHeader ||\n          token === templateVars.extend\n        ) {\n          return replace;\n        }\n\n        return `$\\{${token}}`;\n      }\n    });\n  }\n\n  // Apply the extension to the shader io program\n  return {\n    fs: extendedFS.shader,\n    vs: extendedVS.shader\n  };\n}\n","import { Instance } from \"../instance-provider/instance\";\nimport { extendShader } from \"../shaders/util/extend-shader\";\nimport { IShaderInitialization, IShaderIOExtension } from \"../types\";\n\nexport function extendShaderInitialization<T extends Instance>(\n  shaderIO: IShaderInitialization<T>,\n  extend: IShaderIOExtension<T>\n): IShaderInitialization<T> {\n  const extendedShaders = extendShader(shaderIO, extend.vs, extend.fs);\n\n  return {\n    fs: extendedShaders.fs,\n    instanceAttributes: (shaderIO.instanceAttributes || []).concat(\n      extend.instanceAttributes || []\n    ),\n    uniforms: (shaderIO.uniforms || []).concat(extend.uniforms || []),\n    vertexAttributes: (shaderIO.vertexAttributes || []).concat(\n      extend.vertexAttributes || []\n    ),\n    vertexCount: shaderIO.vertexCount,\n    vs: extendedShaders.vs\n  };\n}\n","import { LayerSurface } from \"../surface\";\nimport { IAutoEasingMethod } from \"./auto-easing-method\";\nimport { Vec } from \"./vector\";\n\nexport type AnimationDelayAccessor = (\n  groupIndex: number,\n  currentDelay: number\n) => number;\nexport type AnimationInstanceModificationCallback = (\n  groupIndex: number\n) => void;\n\nfunction isNumber(val: any): val is number {\n  return !isNaN(val);\n}\n\n/**\n * This provides some methods that aids in more complicated animation tasks, such as\n * adjusting gpu animated properties with differing time delay values for each change.\n */\nexport class AnimationHelper {\n  surface: LayerSurface;\n\n  constructor(surface: LayerSurface) {\n    this.surface = surface;\n  }\n\n  /**\n   * When you want to animate properties of instances but you want them to start at differing times,\n   * use this method to ensure the timings starting between the elements is correct.\n   *\n   * @param easingMethod This is the easing method used for the layer's property to animate\n   * @param groupCount This is the number of animations desired for a given delay level\n   * @param delayGap This is the amount of delay between each group. This can be a static value or\n   *                 can be a dynamic callback\n   */\n  groupAnimation(\n    easingMethod: IAutoEasingMethod<Vec>,\n    groupCount: number,\n    baseDelay: number,\n    delayGap: number | AnimationDelayAccessor,\n    modifyInstances: AnimationInstanceModificationCallback\n  ) {\n    // Get the time of the current frame as our timing basis\n    const startFrameTime = this.surface.frameMetrics.currentTime;\n    // Do an initial commit to ensure all previous animated properties are committed based on the\n    // Delay specified for them\n    this.surface.commit(startFrameTime);\n\n    // Loop through the the number of grouped animations to work with\n    for (let i = 0; i < groupCount; ++i) {\n      // Determine how much extra delay is applied for the provided group\n      const gap = isNumber(delayGap)\n        ? delayGap\n        : delayGap(i, easingMethod.delay);\n      // Apply the delay\n      easingMethod.delay = baseDelay + gap * i;\n      // Make the instance modifications\n      modifyInstances(i);\n      // Commit the instance modifications based on the current delay settings\n      this.surface.commit(startFrameTime);\n    }\n  }\n}\n","import { Bounds } from \"../primitives/bounds\";\nimport { EventManager } from \"../surface/event-manager\";\nimport {\n  IDragMetrics,\n  IMouseInteraction,\n  IWheelMetrics\n} from \"../surface/mouse-event-manager\";\nimport { View } from \"../surface/view\";\nimport { add3, subtract3, Vec3 } from \"../util\";\nimport { ChartCamera } from \"../util/chart-camera\";\nexport enum CameraBoundsAnchor {\n  TOP_LEFT,\n  TOP_MIDDLE,\n  TOP_RIGHT,\n  MIDDLE_LEFT,\n  MIDDLE,\n  MIDDLE_RIGHT,\n  BOTTOM_LEFT,\n  BOTTOM_MIDDLE,\n  BOTTOM_RIGHT\n}\n\nconst { max, min } = Math;\n\n/**\n * This represents how the camera should be bounded in the world space. This gives enough information\n * to handle all cases of bounding, including screen padding and anchoring for cases where the viewed space\n * is smaller than the view.\n */\nexport interface ICameraBoundsOptions {\n  /** How the bounded world space should anchor itself within the view when the projected world space to the screen is smaller than the view */\n  anchor: CameraBoundsAnchor;\n  /** Minimum settings the camera can scale to */\n  scaleMin?: Vec3;\n  /** Maximum settings the camera can scale to */\n  scaleMax?: Vec3;\n  /** The actual screen pixels the bounds can exceed when the camera's view has reached the bounds of the world */\n  screenPadding: { left: number; right: number; top: number; bottom: number };\n  /** This is the view for which the bounds applies towards */\n  view: string;\n  /** The area the camera is bound inside */\n  worldBounds: Bounds;\n}\n\nexport interface IBasicCameraControllerOptions {\n  /** Takes in the options to be used for creating a new ViewBounds object on this controller. */\n  bounds?: ICameraBoundsOptions;\n  /** This is the camera this controller will manipulate */\n  camera: ChartCamera;\n  /** When this is set to true, the start view can be targetted even when behind other views */\n  ignoreCoverViews?: boolean;\n  /**\n   * This provides a control to filter panning that will be applied to the camera. The input and\n   * output of this will be the delta value to be applied.\n   */\n  panFilter?(\n    offset: [number, number, number],\n    view: View,\n    allViews: View[]\n  ): [number, number, number];\n  /**\n   * This adjusts how fast scaling is applied from the mouse wheel\n   */\n  scaleFactor?: number;\n  /**\n   * This provides a control to filter scaling that will be applied to the camera. The input and\n   * output of this will be the delta value to be applied.\n   */\n  scaleFilter?(\n    scale: [number, number, number],\n    view: View,\n    allViews: View[]\n  ): [number, number, number];\n  /**\n   * This is the view that MUST be the start view from the events.\n   * If not provided, then dragging anywhere will adjust the camera\n   */\n  startView?: string | string[];\n\n  /**\n   * This is a handler for when the camera has applied changes to the visible range of what is seen.\n   * Which most likely means offset or scale has been altered.\n   */\n  onRangeChanged?(camera: ChartCamera, targetView: View): void;\n}\n\n/**\n * This provides some very basic common needs for a camera control system. This is not a total solution\n * very every scenario. This should just often handle most basic needs.\n */\nexport class BasicCameraController extends EventManager {\n  /**\n   * If total bounds of worldbounds + screenpadding is smaller\n   * than width or height of view, anchor dictates placement.\n   */\n  bounds?: ICameraBoundsOptions;\n  /** This is the camera that this controller will manipulate */\n  camera: ChartCamera;\n  /** When this is set to true, the start view can be targetted even when behind other views */\n  ignoreCoverViews?: boolean;\n  /** Informative property indicating the controller is panning the chart or not */\n  isPanning: boolean = false;\n  /** This is the filter applied to panning operations */\n  private panFilter = (\n    offset: [number, number, number],\n    _view: View,\n    _allViews: View[]\n  ) => offset;\n  /** The rate scale is adjusted with the mouse wheel */\n  scaleFactor: number;\n  /** THis is the filter applied to tscaling operations */\n  private scaleFilter = (\n    scale: [number, number, number],\n    _view: View,\n    _allViews: View[]\n  ) => scale;\n  /** The view that must be the start or focus of the interactions in order for the interactions to occur */\n  startViews: string[] = [];\n\n  /**\n   * If an unconvered start view is not available, this is the next available covered view, if present\n   */\n  private coveredStartView: View;\n  /**\n   * Callback for when the range has changed for the camera in a view\n   */\n  private onRangeChanged = (_camera: ChartCamera, _targetView: View) => {\n    /* no-op */\n  };\n  /**\n   * This flag is set to true when a start view is targetted on mouse down even if it is not\n   * the top most view.\n   */\n  private startViewDidStart: boolean = false;\n\n  constructor(options: IBasicCameraControllerOptions) {\n    super();\n    if (options.bounds) {\n      this.setBounds(options.bounds);\n    }\n    this.camera = options.camera;\n    this.scaleFactor = options.scaleFactor || 1000.0;\n    this.ignoreCoverViews = options.ignoreCoverViews || false;\n\n    if (options.startView) {\n      this.startViews = Array.isArray(options.startView)\n        ? options.startView\n        : [options.startView];\n    }\n\n    this.panFilter = options.panFilter || this.panFilter;\n    this.scaleFilter = options.scaleFilter || this.scaleFilter;\n    this.onRangeChanged = options.onRangeChanged || this.onRangeChanged;\n  }\n\n  /**\n   * Corrects camera offset to respect current bounds and anchor.\n   */\n  applyBounds = () => {\n    if (this.bounds && this.camera) {\n      const targetView = this.getView(this.bounds.view);\n      this.applyScaleBounds();\n\n      // Next bound the positioning\n      if (targetView) {\n        this.camera.offset[0] = this.boundsHorizontalOffset(\n          targetView,\n          this.bounds\n        );\n        this.camera.offset[1] = this.boundsVerticalOffset(\n          targetView,\n          this.bounds\n        );\n      }\n    }\n  };\n\n  applyScaleBounds = () => {\n    if (this.camera && this.bounds) {\n      // First bound the scaling\n      if (this.bounds.scaleMin) {\n        this.camera.scale = [\n          max(this.camera.scale[0], this.bounds.scaleMin[0]),\n          max(this.camera.scale[1], this.bounds.scaleMin[1]),\n          max(this.camera.scale[2], this.bounds.scaleMin[2])\n        ];\n      }\n\n      if (this.bounds.scaleMax) {\n        this.camera.scale = [\n          min(this.camera.scale[0], this.bounds.scaleMax[0]),\n          min(this.camera.scale[1], this.bounds.scaleMax[1]),\n          min(this.camera.scale[2], this.bounds.scaleMax[2])\n        ];\n      }\n    }\n  };\n\n  /**\n   * Calculation for adhering to an anchor - x-axis offset only.\n   */\n  anchoredByBoundsHorizontal(targetView: View, bounds: ICameraBoundsOptions) {\n    switch (bounds.anchor) {\n      case CameraBoundsAnchor.TOP_LEFT:\n      case CameraBoundsAnchor.MIDDLE_LEFT:\n      case CameraBoundsAnchor.BOTTOM_LEFT:\n        return -(\n          bounds.worldBounds.left -\n          bounds.screenPadding.left / this.camera.scale[0]\n        );\n\n      case CameraBoundsAnchor.TOP_MIDDLE:\n      case CameraBoundsAnchor.MIDDLE:\n      case CameraBoundsAnchor.BOTTOM_MIDDLE:\n        return -(\n          bounds.worldBounds.right -\n          bounds.worldBounds.width / 2 -\n          0.5 *\n            ((targetView.screenBounds.width + bounds.screenPadding.right) /\n              this.camera.scale[0])\n        );\n\n      case CameraBoundsAnchor.TOP_RIGHT:\n      case CameraBoundsAnchor.MIDDLE_RIGHT:\n      case CameraBoundsAnchor.BOTTOM_RIGHT:\n        return -(\n          bounds.worldBounds.right -\n          (targetView.screenBounds.width - bounds.screenPadding.right) /\n            this.camera.scale[0]\n        );\n    }\n  }\n\n  /**\n   * Calculation for adhering to an anchor - y-axis offset only.\n   */\n  anchoredByBoundsVertical(targetView: View, bounds: ICameraBoundsOptions) {\n    switch (bounds.anchor) {\n      case CameraBoundsAnchor.TOP_LEFT:\n      case CameraBoundsAnchor.TOP_MIDDLE:\n      case CameraBoundsAnchor.TOP_RIGHT:\n        return (\n          -bounds.worldBounds.top - -bounds.screenPadding.top / this.scale[1]\n        );\n\n      case CameraBoundsAnchor.MIDDLE_LEFT:\n      case CameraBoundsAnchor.MIDDLE:\n      case CameraBoundsAnchor.MIDDLE_RIGHT:\n        return (\n          -(bounds.worldBounds.bottom - bounds.worldBounds.height / 2) +\n          0.5 *\n            (targetView.screenBounds.height - bounds.screenPadding.bottom) /\n            this.scale[1]\n        );\n\n      case CameraBoundsAnchor.BOTTOM_LEFT:\n      case CameraBoundsAnchor.BOTTOM_MIDDLE:\n      case CameraBoundsAnchor.BOTTOM_RIGHT:\n        return -(\n          bounds.worldBounds.bottom -\n          (targetView.screenBounds.height - bounds.screenPadding.bottom) /\n            this.scale[1]\n        );\n    }\n  }\n\n  /**\n   * Returns offset on x-axis due to current bounds and anchor.\n   */\n  boundsHorizontalOffset(targetView: View, bounds: ICameraBoundsOptions) {\n    const worldTLinScreenSpace = targetView.worldToScreen({\n      x: bounds.worldBounds.left,\n      y: bounds.worldBounds.top\n    });\n    const worldBRinScreenSpace = targetView.worldToScreen({\n      x: bounds.worldBounds.right,\n      y: bounds.worldBounds.bottom\n    });\n\n    const widthDifference =\n      worldBRinScreenSpace.x -\n      worldTLinScreenSpace.x +\n      bounds.screenPadding.left +\n      bounds.screenPadding.right -\n      targetView.screenBounds.width;\n\n    // If the worldBounds are smaller than the screenBounds,\n    // We offset according to the anchoring\n    if (widthDifference < 0) {\n      return this.anchoredByBoundsHorizontal(targetView, bounds);\n    }\n\n    if (\n      worldBRinScreenSpace.x <\n      targetView.screenBounds.right - bounds.screenPadding.right\n    ) {\n      return (\n        -bounds.worldBounds.right +\n        (targetView.screenBounds.width - bounds.screenPadding.right) /\n          this.camera.scale[0]\n      );\n    }\n\n    if (\n      worldTLinScreenSpace.x >\n      targetView.screenBounds.left + bounds.screenPadding.left\n    ) {\n      return (\n        -bounds.worldBounds.left +\n        bounds.screenPadding.left / this.camera.scale[0]\n      );\n    }\n\n    return this.camera.offset[0];\n  }\n\n  /**\n   * Returns offset on y-axis due to current bounds and anchor.\n   */\n  boundsVerticalOffset(targetView: View, bounds: ICameraBoundsOptions) {\n    const worldTLinScreenSpace = targetView.worldToScreen({\n      x: bounds.worldBounds.left,\n      y: bounds.worldBounds.top\n    });\n    const worldBRinScreenSpace = targetView.worldToScreen({\n      x: bounds.worldBounds.right,\n      y: bounds.worldBounds.bottom\n    });\n\n    const heightDifference =\n      worldBRinScreenSpace.y -\n      worldTLinScreenSpace.y +\n      bounds.screenPadding.top +\n      bounds.screenPadding.bottom -\n      targetView.screenBounds.height;\n\n    // If the viewBounds are larger than the screenBounds,\n    // We offset according to the anchoring\n    if (heightDifference < 0) {\n      return this.anchoredByBoundsVertical(targetView, bounds);\n    }\n\n    if (\n      worldTLinScreenSpace.y >\n      targetView.screenBounds.top - bounds.screenPadding.top\n    ) {\n      return -(\n        bounds.worldBounds.top -\n        bounds.screenPadding.top / this.camera.scale[1]\n      );\n    }\n\n    if (\n      worldBRinScreenSpace.y <\n      targetView.screenBounds.bottom + bounds.screenPadding.bottom\n    ) {\n      return -(\n        bounds.worldBounds.bottom +\n        (-targetView.screenBounds.height + bounds.screenPadding.bottom) /\n          this.camera.scale[1]\n      );\n    }\n\n    return this.camera.offset[1];\n  }\n\n  private canStart(viewId: string) {\n    return (\n      this.startViews.length === 0 ||\n      (this.startViews && this.startViews.indexOf(viewId) > -1) ||\n      (this.startViewDidStart && this.ignoreCoverViews)\n    );\n  }\n\n  private findCoveredStartView(e: IMouseInteraction) {\n    const found = e.viewsUnderMouse.find(\n      under => this.startViews.indexOf(under.view.id) > -1\n    );\n    this.startViewDidStart = Boolean(found);\n\n    if (found) {\n      this.coveredStartView = found.view;\n    }\n  }\n\n  private getTargetView(e: IMouseInteraction) {\n    // If we have a start view and we do not ignore covering views,\n    // Then our target view is the view we started with\n    if (this.startViews && !this.ignoreCoverViews) {\n      return e.target.view;\n    } else {\n      // Otherwise, we use the covered start view\n      return this.coveredStartView;\n    }\n  }\n\n  /**\n   * Used to aid in handling the pan effect and determine the contextual view targetted.\n   */\n  handleMouseDown(e: IMouseInteraction, _button: number) {\n    if (this.startViews) {\n      // We look for valid covered views on mouse down so dragging will work\n      this.findCoveredStartView(e);\n      // If this is a valid start view, then we enter a panning state with the mouse down\n      if (e.start) {\n        this.isPanning = this.canStart(e.start.view.id) || this.isPanning;\n      }\n    }\n  }\n\n  /**\n   * Used to aid in handling the pan effect\n   */\n  handleMouseUp(_e: IMouseInteraction) {\n    this.startViewDidStart = false;\n    this.isPanning = false;\n  }\n\n  /**\n   * Applies a panning effect by adjusting the camera's offset.\n   */\n  handleDrag(e: IMouseInteraction, drag: IDragMetrics) {\n    if (e.start) {\n      if (this.canStart(e.start.view.id)) {\n        let pan: [number, number, number] = [\n          drag.screen.delta.x / this.camera.scale[0],\n          drag.screen.delta.y / this.camera.scale[1],\n          0\n        ];\n\n        if (this.panFilter) {\n          pan = this.panFilter(\n            pan,\n            e.start.view,\n            e.viewsUnderMouse.map(v => v.view)\n          );\n        }\n\n        this.camera.offset[0] += pan[0];\n        this.camera.offset[1] += pan[1];\n\n        // Add additional correction for bounds\n        this.applyBounds();\n        // Broadcast the change occurred\n        this.onRangeChanged(this.camera, e.start.view);\n        // Add additional correction for bounds\n        this.applyBounds();\n      }\n    }\n  }\n\n  /**\n   * Applies a scaling effect to the camera for mouse wheel events\n   */\n  handleWheel(e: IMouseInteraction, wheelMetrics: IWheelMetrics) {\n    // Every mouse wheel event must look to see if it's over a valid covered start view\n    this.findCoveredStartView(e);\n\n    if (this.canStart(e.target.view.id)) {\n      const targetView = this.getTargetView(e);\n      const beforeZoom = targetView.screenToWorld(e.screen.mouse);\n\n      const currentZoomX = this.camera.scale[0] || 1.0;\n      const currentZoomY = this.camera.scale[1] || 1.0;\n\n      let scale: [number, number, number] = [\n        wheelMetrics.wheel[1] / this.scaleFactor * currentZoomX,\n        wheelMetrics.wheel[1] / this.scaleFactor * currentZoomY,\n        1\n      ];\n\n      if (this.scaleFilter) {\n        scale = this.scaleFilter(\n          scale,\n          targetView,\n          e.viewsUnderMouse.map(v => v.view)\n        );\n      }\n\n      this.camera.scale[0] = currentZoomX + scale[0];\n      this.camera.scale[1] = currentZoomY + scale[1];\n\n      // Ensure the new scale values are within bounds before attempting to correct offsets\n      this.applyScaleBounds();\n\n      const afterZoom = targetView.screenToWorld(e.screen.mouse);\n      this.camera.offset[0] -= beforeZoom.x - afterZoom.x;\n      this.camera.offset[1] -= beforeZoom.y - afterZoom.y;\n\n      // Add additional correction for bounds\n      this.applyBounds();\n      // Broadcast the change occurred\n      this.onRangeChanged(this.camera, targetView);\n      // Add additional correction for bounds\n      this.applyBounds();\n    }\n  }\n\n  // These are the currently Unused responses for this controller\n  handleMouseOut(_e: IMouseInteraction) {\n    /*no-op*/\n  }\n  handleClick(_e: IMouseInteraction) {\n    /*no-op*/\n  }\n  handleMouseMove(_e: IMouseInteraction) {\n    /*no-op*/\n  }\n  handleMouseOver(_e: IMouseInteraction) {\n    /*no-op*/\n  }\n\n  /**\n   * Evaluates the world bounds the specified view is observing\n   *\n   * @param viewId The id of the view when the view was generated when the surface was made\n   */\n  getRange(viewId: string): Bounds {\n    /** Get the projections for the provided view */\n    const projection = this.getProjection(viewId);\n    /** Get the bounds on the screen for the indicated view */\n    const screenBounds = this.getViewScreenBounds(viewId);\n\n    // Make sure we have a valid projection and screen bounds to make the adjustment\n    if (projection && screenBounds) {\n      /** Get the current viewed world bounds of the view */\n      const topLeft = projection.screenToWorld(screenBounds);\n      const bottomRight = projection.screenToWorld({\n        x: screenBounds.right,\n        y: screenBounds.bottom\n      });\n\n      return new Bounds({\n        height: bottomRight.y - topLeft.y,\n        width: bottomRight.x - topLeft.x,\n        x: topLeft.x,\n        y: topLeft.y\n      });\n    }\n\n    return new Bounds({ x: 0, y: 0, width: 1, height: 1 });\n  }\n\n  /**\n   * Retrieves the current pan of the controlled camera\n   */\n  get pan(): Vec3 {\n    return this.camera.offset;\n  }\n\n  /**\n   * Sets bounds applicable to the supplied view.\n   * If no view is supplied, it uses the first in the startViews array\n   */\n  setBounds(bounds: ICameraBoundsOptions) {\n    this.bounds = bounds;\n    this.applyBounds();\n  }\n\n  /**\n   * Retrieves the current scale of the camera\n   */\n  get scale(): Vec3 {\n    return this.camera.scale;\n  }\n\n  /**\n   * This lets you set the visible range of a view based on the view's camera. This will probably not work\n   * as expected if the view indicated and this controller do not share the same camera.\n   *\n   * @param viewId The id of the view when the view was generated when the surface was made\n   */\n  setRange(newWorld: Bounds, viewId: string) {\n    /** Get the projections for the provided view */\n    const projection = this.getProjection(viewId);\n    /** Get the bounds on the screen for the indicated view */\n    const screenBounds = this.getViewScreenBounds(viewId);\n    /** Get the view the range is being applied towards */\n    const view = this.getView(viewId);\n\n    // Make sure we have a valid projection and screen bounds to make the adjustment\n    if (projection && screenBounds && view) {\n      const deltaScale = subtract3(\n        [\n          screenBounds.width / newWorld.width,\n          screenBounds.height / newWorld.height,\n          1\n        ],\n        this.camera.scale\n      );\n\n      this.camera.scale = add3(\n        this.camera.scale,\n        this.scaleFilter(deltaScale, view, [view])\n      );\n\n      const deltaPan = subtract3(\n        [-newWorld.x, -newWorld.y, 0],\n        this.camera.offset\n      );\n\n      this.camera.offset = add3(\n        this.camera.offset,\n        this.scaleFilter(deltaPan, view, [view])\n      );\n\n      // Bound the camera to the specified bounding range\n      this.applyBounds();\n      // Broadcast the change occurred\n      this.onRangeChanged(this.camera, view);\n      // Bound the camera to the specified bounding range\n      this.applyBounds();\n    }\n  }\n}\n","export * from \"./basic-camera-controller\";\n","export * from \"./base-event-managers\";\nexport * from \"./base-layers\";\nexport * from \"./instance-provider\";\nexport * from \"./primitives\";\nexport * from \"./surface\";\nexport * from \"./types\";\nexport * from \"./util\";\n","export * from \"./voidgl\";\n"],"sourceRoot":""}