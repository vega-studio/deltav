{"version":3,"sources":["webpack://voidgl/webpack/universalModuleDefinition","webpack://voidgl/webpack/bootstrap","webpack://voidgl/external \"three\"","webpack://voidgl/./src/voidgl/types.ts","webpack://voidgl/./src/voidgl/primitives/bounds.ts","webpack://voidgl/external \"mobx\"","webpack://voidgl/./src/voidgl/base-layers/types.ts","webpack://voidgl/./src/voidgl/surface/layer.ts","webpack://voidgl/./src/voidgl/util/instance.ts","webpack://voidgl/./src/voidgl/primitives/index.ts","webpack://voidgl/./src/voidgl/util/index.ts","webpack://voidgl/./src/voidgl/surface/texture/index.ts","webpack://voidgl/./src/voidgl/util/identify-by-key.ts","webpack://voidgl/./src/voidgl/base-layers/edges/types.ts","webpack://voidgl/./src/voidgl/surface/event-manager.ts","webpack://voidgl/./src/voidgl/surface/generate-layer-model.ts","webpack://voidgl/./src/voidgl/surface/view.ts","webpack://voidgl/./src/voidgl/surface/scene.ts","webpack://voidgl/./src/voidgl/surface/texture/label-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/base-atlas-resource.ts","webpack://voidgl/./src/voidgl/util/view-camera.ts","webpack://voidgl/./src/voidgl/util/shader-templating.ts","webpack://voidgl/./src/voidgl/util/chart-camera.ts","webpack://voidgl/./src/voidgl/surface/mouse-event-manager.ts","webpack://voidgl/./src/voidgl/surface/inject-shader-io.ts","webpack://voidgl/./src/voidgl/surface/generate-layer-material.ts","webpack://voidgl/./src/voidgl/surface/generate-layer-geometry.ts","webpack://voidgl/./src/voidgl/util/data-bounds.ts","webpack://voidgl/./src/voidgl/surface/generate-default-scene.ts","webpack://voidgl/./src/voidgl/util/make-instance-uniform-name.ts","webpack://voidgl/./src/voidgl/shaders/fragments/template-vars.ts","webpack://voidgl/./src/voidgl/base-layers/labels/index.ts","webpack://voidgl/./src/voidgl/surface/texture/label-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/image-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/color-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/color-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/sub-texture.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas.ts","webpack://voidgl/./node_modules/debug/src/browser.js","webpack://voidgl/./src/voidgl/util/mouse.ts","webpack://voidgl/./src/voidgl/util/webgl-stat.ts","webpack://voidgl/./src/voidgl/util/vector.ts","webpack://voidgl/./src/voidgl/base-layers/images/index.ts","webpack://voidgl/./src/voidgl/base-event-managers/basic-camera-controller.ts","webpack://voidgl/./src/voidgl/base-event-managers/index.ts","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.vs","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.fs","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.ts","webpack://voidgl/./src/voidgl/base-layers/rings/ring-instance.ts","webpack://voidgl/./src/voidgl/base-layers/rings/index.ts","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-instance.ts","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-layer.vs","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-layer.fs","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-layer.ts","webpack://voidgl/./src/voidgl/base-layers/rectangle/index.ts","webpack://voidgl/./src/voidgl/base-layers/edges/edge-instance.ts","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer.fs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-screen-curve.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-bezier2.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-bezier.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-line.vs","webpack://voidgl/./src/voidgl/base-layers/edges/edge-picking.ts","webpack://voidgl/./src/voidgl/base-layers/edges/edge-layer.ts","webpack://voidgl/./src/voidgl/base-layers/edges/index.ts","webpack://voidgl/./src/voidgl/base-layers/circles/circle-instance.ts","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.vs","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.fs","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.ts","webpack://voidgl/./src/voidgl/base-layers/circles/index.ts","webpack://voidgl/./src/voidgl/base-layers/index.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas-resource-manager.ts","webpack://voidgl/./src/voidgl/surface/event-managers/layer-mouse-events.ts","webpack://voidgl/./src/voidgl/util/instance-uniform-manager.ts","webpack://voidgl/./src/voidgl/util/quad-tree.ts","webpack://voidgl/./src/voidgl/primitives/absolute-position.ts","webpack://voidgl/./src/voidgl/shaders/fragments/projection-methods.vs","webpack://voidgl/./src/voidgl/shaders/fragments/shader-input.vs","webpack://voidgl/./src/voidgl/shaders/fragments/instance-destructuring-array.vs","webpack://voidgl/./src/voidgl/shaders/fragments/fragment-shader-composition.fs","webpack://voidgl/./src/voidgl/shaders/fragments/vertex-shader-composition.vs","webpack://voidgl/./src/voidgl/shaders/fragments/instance-retrieval-array.vs","webpack://voidgl/./src/voidgl/shaders/util/uniform-instance-block-array.ts","webpack://voidgl/./src/voidgl/shaders/util/attribute-generation.ts","webpack://voidgl/./src/voidgl/base-layers/labels/label-instance.ts","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.vs","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.fs","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.ts","webpack://voidgl/./src/voidgl/surface/texture/image-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas-manager.ts","webpack://voidgl/./src/voidgl/surface/texture/pack-node.ts","webpack://voidgl/./src/voidgl/base-layers/images/image-instance.ts","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.vs","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.fs","webpack://voidgl/./src/voidgl/shaders/base/no-op.vs","webpack://voidgl/./src/voidgl/shaders/base/no-op.fs","webpack://voidgl/./src/voidgl/surface/layer-interaction-handler.ts","webpack://voidgl/./src/voidgl/surface/instance-diff-manager.ts","webpack://voidgl/./node_modules/ms/index.js","webpack://voidgl/./node_modules/debug/src/debug.js","webpack://voidgl/./node_modules/process/browser.js","webpack://voidgl/external \"bowser\"","webpack://voidgl/./src/voidgl/util/tracked-quad-tree.ts","webpack://voidgl/./src/voidgl/util/reference-camera.ts","webpack://voidgl/./src/voidgl/util/data-provider.ts","webpack://voidgl/./src/voidgl/primitives/point.ts","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.ts","webpack://voidgl/./src/voidgl/surface/layer-surface.ts","webpack://voidgl/./src/voidgl/surface/index.ts","webpack://voidgl/./src/voidgl/index.ts","webpack://voidgl/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__99__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","InstanceBlockIndex","InstanceAttributeSize","UniformSize","VertexAttributeSize","ShaderInjectionTarget","PickType","Bounds","options","this","x","y","width","height","left","top","bottom","right","emptyBounds","containsPoint","point","encapsulate","item","Math","abs","fits","bounds","hitBounds","isInside","toString","AnchorType","ScaleType","extendStatics","__extends","setPrototypeOf","__proto__","Array","b","__","constructor","create","Three","types_1","util_1","identify_by_key_1","instance_diff_manager_1","layer_interaction_handler_1","Layer","_super","props","_this","depth","instanceById","Map","instanceVertexCount","assign","defaultProps","_a","picking","NONE","ALL","pickingMethods","getInstancePickingMethods","hitTest","quadTree","TrackedQuadTree","boundsAccessor","type","diffManager","InstanceDiffManager","diffProcessor","getDiffProcessor","interactions","LayerInteractionHandler","destroy","uniformManager","didUpdateProps","draw","uniform","change","instance","uniforms","changeList","data","end","length","getUniforms","resolve","update","materialUniforms","forEach","materialUniform","Error","getModelType","drawMode","TrianglesDrawMode","modelType","Mesh","getMaterialOptions","initShader","fs","instanceAttributes","vertexAttributes","vertexCount","vs","makeInstanceAttribute","block","blockIndex","size","atlas","makeUniform","shaderInjection","qualifier","willUpdateInstances","changes","willUpdateProps","newProps","didUpdate","IdentifyByKey","__decorate","decorators","target","key","desc","arguments","getOwnPropertyDescriptor","Reflect","decorate","mobx_1","Instance","_id","id","active","observable","__export","EdgeScaleType","EdgeType","EdgeBroadphase","EventManager","getProjection","viewId","mouseManager","getView","getViewScreenBounds","view","screenBounds","setMouseManager","generateLayerModel","layer","geometry","material","modelInfo","model","Boolean","isMesh","absolute_position_1","bounds_1","view_camera_1","isOrthographic","val","ClearFlags","View","pixelRatio","devicePixelRatio","screenToPixelSpace","out","pixelSpaceToScreen","screenToView","viewBounds","viewToScreen","screenToWorld","world","camera","offset","scale","viewCamera","ViewCameraType","CUSTOM","console","warn","worldToScreen","screen","viewToWorld","worldToView","fitViewtoViewport","surfaceDimensions","CONTROLLED","baseCamera","getAbsolutePositionBounds","viewport","far","near","position","set","z","updateMatrix","updateMatrixWorld","updateProjectionMatrix","DEFAULT_VIEW_ID","sortByDepth","a","Scene","container","layers","sortIsDirty","viewById","frustumCulled","autoUpdate","addLayer","push","addView","removeLayer","index","indexOf","splice","sortLayers","sort","DEFAULT_SCENE_ID","LabelAtlasResource","label","BaseAtlasResource","sampleScale","ViewCamera","shaderTemplate","shader","required","matched","noValueProvided","notFound","shaderOptions","shaderResults","replace","match","keys","option","results","resolvedShaderOptions","shaderProvidedOptions","unresolvedProvidedOptions","unresolvedShaderOptions","values","error","chartCameraUID","applyArray","source","apply","concat","ChartCamera","location","slice","mouse_1","quad_tree_1","MouseEventManager","canvas","views","controllers","handlesWheelEvents","_waitingForRender","getViewsUnderMouse","mouse","hitViews","query","resize","context","setViews","setControllers","addContextListeners","QuadTree","addAll","map","v","filter","element","startView","startPosition","onmousewheel","event","eventElementPosition","interaction","makeInteraction","wheel","makeWheel","controller","handleWheel","stopPropagation","preventDefault","onmouseleave","waitingForRender","handleMouseOut","onmousemove","handleMouseMove","onmousedown","downViews","canClick","clickStartTime","Date","now","currentPosition","handleMouseDown","button","document","delta","drag","makeDrag","handleDrag","onmouseup","onmouseover","handleMouseOver","handleMouseUp","handleClick","onselectstart","addTouchContextListeners","ontouchstart","ontouchend","ontouchmove","ontouchcancel","_i","start","previous","current","viewsUnderMouse","normalizeWheel","toVertexAttributeInternal","attribute","materialAttribute","toUniformInternal","sortByResourceAttributes","injectShaderIO","shaderIO","atlasInstanceAttributes","requestedAtlasInjections","FOUR","ONE","injection","FRAGMENT","injections","VERTEX","attributes","blocks","found","maxBlock","addedUniforms","instanceAttribute","ATLAS","resource","getAtlasTexture","MATRIX4","projectionMatrix","elements","matrix","THREE","TWO","fillBlock","usedBlocks","max","addedInstanceAttributes","activeAttribute","_b","UNIFORM_SIZE_TO_MATERIAL_TYPE","MATRIX3","DEFAULT_UNIFORM_VALUE","toMaterialUniform","generateLayerMaterial","layerUniforms","instancingUniforms","materialParams","vertexShader","fragmentShader","generatedUniform","RawShaderMaterial","generateLayerGeometry","maxInstancesPerBuffer","vertexBuffers","attribute_1","Float32Array","buffer","formatError","endk","k","isArray","j","endj","instanceSize","endk_1","copyWithin","instancingBuffer","instanceStartIndex","BufferGeometry","attribute_3","BufferAttribute","addAttribute","DataBounds","chart_camera_1","scene_1","view_1","generateDefaultScene","aspectRatio","viewSize","defaultCamera","OrthographicCamera","defaultChartCamera","defaultViewport","defaultView","defaultScene","scene","INSTANCE_UNIFORM_ATTRIBUTE_PREFIX","makeInstanceUniformNameArray","makeInstanceUniformNameTree","templateVars","attributeFragments","blocksPerInstance","instanceBlockCount","instanceDataBinaryTree","instanceDataRetrieval","instanceDestructuring","instanceFragments","instanceUniformDeclarations","projectionMethods","shaderInput","__awaiter","thisArg","_arguments","P","generator","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","__generator","body","f","t","g","_","sent","trys","ops","verb","throw","return","Symbol","iterator","op","TypeError","pop","floor","min","LabelRasterizer","awaitContext","getContext","setTimeout","calculateLabelSize","calculateTexture","calculateTrucatedText","sampleScaling","drawLabel","truncatedText","measureContents","minX","minY","maxX","maxY","rasterization","texture","createCroppedCanvas","maxWidth","text","firstTest","cursor","safety","substr","nextCursor","cropped","createElement","imageSmoothingEnabled","drawImage","fontSize","getLabelRasterizationFontSize","fillStyle","font","makeCSSFont","measureText","fillText","fontWeight","fontFamily","imageData","getImageData","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","render","renderSync","ImageAtlasResource","image","ColorRasterizer","limit","makeCSS","color","opacity","fillRect","ColorAtlasResource","SubTexture","atlasReferenceID","atlasTexture","atlasTL","atlasTR","atlasBL","atlasBR","widthOnAtlas","heightOnAtlas","isValid","pixelWidth","pixelHeight","pack_node_1","sub_texture_1","AtlasSize","Atlas","validResources","textureSettings","packing","PackNode","updateTexture","invalidateResource","zero","setManager","manager","registerResource","undefined","removeResource","redoneCanvas","dispose","Texture","generateMipmaps","premultiplyAlpha","needsUpdate","process","load","storage","debug","env","DEBUG","log","Function","formatArgs","args","useColors","namespace","humanize","diff","lastC","save","namespaces","removeItem","navigator","userAgent","toLowerCase","documentElement","style","WebkitAppearance","firebug","exception","table","parseInt","RegExp","$1","chrome","local","localStorage","localstorage","colors","formatters","JSON","stringify","err","message","enable","browser","three_1","IE_ADJUSTMENT","OLD_IE_ADJUSTMENT","MAX_FIREFOX_WHEELDELTA","lowPassY","LOW_PASS_U0","LOW_PASS_U1","LOW_PASS_U2","LOW_PASS_U3","firefox","deltaX","deltaY","sign","unshift","Vector2","msie","version","wheelDeltaX","wheelDeltaY","wheelDelta","detail","msedge","multiplyScalar","relative","mouseX","mouseY","eventX","eventY","nativeEvent","pageX","pageY","clientX","clientY","scrollLeft","scrollTop","offsetParent","offsetLeft","offsetTop","getProgramInfo","gl","program","attributeCount","uniformCount","activeUniforms","getProgramParameter","ACTIVE_UNIFORMS","activeAttributes","ACTIVE_ATTRIBUTES","enums","35664","35665","35666","35667","35668","35669","35670","35671","35672","35673","35674","35675","35676","35678","35680","5120","5121","5122","5123","5124","5125","5126","getActiveUniform","typeName","getActiveAttrib","WebGLStat","MAX_VERTEX_UNIFORMS","MAX_FRAGMENT_UNIFORMS","MAX_ATTRIBUTES","WEBGL_SUPPORTED","MAX_TEXTURE_SIZE","WebGLRenderingContext","getAContext","getParameter","MAX_VERTEX_UNIFORM_VECTORS","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_VERTEX_ATTRIBS","sqrt","add2","scale2","subtract2","dot2","add3","scale3","subtract3","dot3","add4","scale4","subtract4","dot4","multiply2","linear2","length2","multiply3","linear3","length3","multiply4","linear4","length4","CameraBoundsAnchor","event_manager_1","BasicCameraController","isPanning","panFilter","allViews","scaleFilter","onRangeChanged","targetView","startViewDidStart","applyBounds","applyScaleBounds","boundsHorizontalOffset","boundsVerticalOffset","scaleMin","scaleMax","setBounds","scaleFactor","ignoreCoverViews","startViews","anchoredByBoundsHorizontal","anchor","TOP_LEFT","MIDDLE_LEFT","BOTTOM_LEFT","worldBounds","screenPadding","TOP_MIDDLE","MIDDLE","BOTTOM_MIDDLE","TOP_RIGHT","MIDDLE_RIGHT","BOTTOM_RIGHT","anchoredByBoundsVertical","worldTLinScreenSpace","worldBRinScreenSpace","canStart","findCoveredStartView","find","under","coveredStartView","getTargetView","pan","wheelMetrics","beforeZoom","currentZoomX","currentZoomY","afterZoom","getRange","projection","topLeft","bottomRight","setRange","newWorld","deltaScale","deltaPan","primitives_1","layer_1","RingLayer","ring","radius","vertexToNormal","0","1","2","3","4","5","vertexToSide","thickness","vertex","TriangleStripDrawMode","blending","CustomBlending","blendSrc","OneFactor","premultipliedAlpha","transparent","RingInstance","computed","instance_1","anchorCalculator","TopLeft","rectangle","padding","TopMiddle","TopRight","MiddleLeft","Middle","MiddleRight","BottomLeft","BottomMiddle","BottomRight","Custom","RectangleInstance","scaling","BOUND_MAX","_anchor","setAnchor","newAnchor","types_2","RectangleLayer","maxScale","minScale","ALWAYS","NEVER","screenPoint","u","EdgeInstance","colorStart","colorEnd","control","widthStart","widthEnd","setEdgeWidth","setColor","vector_1","pow","interpolation","LINE","p1","p2","c1","c2","BEZIER","BEZIER2","t1","toPointObject","toPointArray","TEST_RESOLUTION","edgePicking","broadphase","minPickDistance","scaleType","interpolate","edge","edgeWidthStart","edgeWidthEnd","PASS_X","PASS_Y","SCREEN_CURVE","control1","control2","closestIndex","closestDistance","MAX_VALUE","secondClosestIndex","secondClosestDistance","startPoint","endPoint","linePoint","distance","lineWidth","startSegment","endSegment","vector","lineDirection","lineNormal","distanceTo","edge_picking_1","pickVS","baseVS","screenVS","edgeFS","EdgeLayer","_c","MAX_SEGMENTS","_d","vertexInterpolation","_e","CircleInstance","CircleLayer","circle","circleScreenCenter","mouseScreen","fadeOutOversized","label_atlas_resource_1","toInstanceIOValue","AtlasResourceManager","targetAtlas","requestQueue","requestLookup","atlasManager","dequeueRequests","didDequeue","_loop_1","this_1","resources","requests","atlasRequests_1","updateAtlas","request","delete","request_1","from","entries","atlasRequests","existingRequests","setTargetAtlas","LayerMouseEvents","sceneViews","isOver","getSceneViewsUnderMouse","sceneViewByViewId","sceneView","viewItem","getMouseByViewId","viewMouseByViewId","handleInteraction","handleMouseClick","handleMouseDrag","callback","sceneViews_1","handleSceneView","flag","clear","allSceneViews","currentSceneViews","generate_layer_model_1","make_instance_uniform_name_1","InstanceUniformManager","buffers","availableClusters","instanceToCluster","clusterToBuffer","maxUniformBlock","uniformBlocksPerInstance","add","makeNewBuffer","cluster","shift","remove","removeFromScene","setScene","newGeometry","drawRange","count","newMaterial","clone","newModel","activeInstances","clusters","firstInstance","lastInstance","uniformIndex","uniformName","instanceData","Vector4","instanceIndex","uniformRange","filterQuery","queryValues","filtered","obj","Quadrants","mid","TL","Node","TR","BL","BR","children","nodes","child","doAdd","cover","childrenProps","allChildren","gatherChildren","split","isNaN","area","list","visit","queryBounds","queryPoint","cb","finished","data_bounds_1","ref","scaleRatio","parse","num","parseFloat","reference","top_1","shader_templating_1","template_vars_1","instanceRetrievalArrayFragment","VECTOR_COMPONENTS","sizeToType","9","16","99","makeUniformArrayDeclaration","totalBlocks","fragment","fill","makeInstanceRetrievalArray","templateOptions","makeInstanceDestructuringArray","join","webgl_stat_1","uniform_instance_block_array_1","vertexShaderComposition","fragmentShaderComposition","instanceDestructuringArray","MAX_USE_PER_BLOCK","generateUniforms","injectionType","injectFragments","shaders","shaderInputMetrics","instancingInfo","instanceUniformBlockCount","ceil","calculateUniformBlockUseage","sortedInstanceAttributes","currentBlock","trueBlockIndex","blockUseage","innerBlockUseage","attributeSize","oldUseage","newUseage","innerUseage","branchesPerLevel","instances","uniformMetrics","blockQualifierDedup","qualifiers","blockQualifiers","qualifierList","allQualifiers","declaration","makeInstanceUniformDeclaration","makeUniformInstanceDataOptions","metrics","generateInstanceDataLookupOptions","additionalOptions","generateVertexAttributes","generateShaderInputs","makeInstanceDestructuring","makeInstanceAttributeReferences","generateVertexShader","vertexShaderResults","generateFragmentShader","texture_1","rasterizationLookUp","LabelInstance","_cssFont","_fontFamily","_fontSize","_fontStyle","_fontWeight","_maxWidth","_text","_width","_height","_isDestroyed","fontStyle","cssFontLookup","rasterizations","references","_rasterization","LabelLayer","ImageRasterizer","calculateImageSize","atlas_1","color_atlas_resource_1","color_rasterizer_1","image_atlas_resource_1","label_rasterizer_1","ZERO_IMAGE","AtlasManager","allAtlas","createAtlas","destroyAtlas","atlasName","setDefaultImage","loadedImage","rect","dimensions","insertedNode","ux","uy","uw","uh","onePixelX","atlasDimensions","loadImage","first","second","insert","nodeImage","nodeDimensions","imageSrc","subTexture","image_1","onload","onerror","path","toDataURL","Image","src","resources_1","isLeaf","child0","child1","hasChild","newNode","fitFlag","imgWidth","imgHeight","dWidth","dHeight","removed","ImageInstance","tint","_sourceWidth","_sourceHeight","_element","_path","aspect","isMouseOver","isMouseDown","onMouseDown","world_1","hitTest_1","query_1","bind","querySpace","check","onMouseOut","world_2","query_2","hitTest_2","onMouseUp","world_3","hitTest_3","query_3","onMouseOver","onMouseMove","info","world_4","hitTest_4","query_4","notOverInstances","isCurrentlyOver_1","noLongerOver","onMouseClick","world_5","hitTest_5","query_5","VECTOR_ACCESSORS","quadPicking","changeInstanceQuad","addInstanceQuad","removeInstanceQuad","changeInstance","addInstance","removeInstance","uniformCluster","updateInstance","uniformRangeStart","instanceUniform","h","plural","ms","str","String","exec","long","round","fmtShort","createDebug","prevTime","enabled","self","curr","prev","coerce","format","formatter","hash","charCodeAt","selectColor","init","stack","disable","names","skips","len","test","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","array","noop","nextTick","title","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","getBounds","childToNode","childToBounds","nullBounded","fromSplit","doRemove","node","ReferenceCamera","offsetFilter","base","DiffType","UPDATE_FLAG","DataProvider","instanceDisposers","instanceChanges","isChanged","_changeList","monitorItem","CHANGE","_instances","observe","listDisposer","intercept","monitorList","changes_1","changeType","disposer","lookUp","disposers","removedCount","REMOVE","added","INSERT","squareDistance","dx","dy","Point","getClosest","testPoint","points","closestPoint","getClosestIndex","subtract","amount","normalize","magnitude","getDistance","squared","getMidpoint","direction","make","ImageLayer","images_1","labels_1","attribute_generation_1","generate_default_scene_1","generate_layer_geometry_1","generate_layer_material_1","inject_shader_io_1","mouse_event_manager_1","instance_uniform_manager_1","layer_mouse_events_1","atlas_resource_manager_1","DEFAULT_BACKGROUND_COLOR","Color","isCanvas","createLayer","layerClass","LayerSurface","scenes","willDisposeLayer","isBufferingAtlas","initLayer","resourceManager","renderer","didBuffer","drawSceneView","rendererSize","getSize","getPixelRatio","background","SCISSOR_TEST","scissor","clearColor","clearFlags","COLOR","COLOR_BUFFER_BIT","DEPTH","DEPTH_BUFFER_BIT","STENCIL","STENCIL_BUFFER_BIT","box","currentViewport","setViewport","getViewSize","getViewWorldBounds","setContext","initGL","initMouseManager","initResources","WebGLRenderer","alpha","antialias","preserveDrawingBuffer","autoClear","setFaceCulling","CullFaceNone","setSize","setPixelRatio","setClearColor","defaultSceneElements","sceneViewDepth","sceneOptions","newScene","viewOptions","newView","addLayerToScene","shaderMetrics","eventManagers","atlasResources","layerInitializers","existingLayer","layerId","fitContainer","parentElement","className","setAttribute","containerBox","getBoundingClientRect","isString","getElementById"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,EAAAG,QAAA,SAAAA,QAAA,QAAAA,QAAA,WACA,mBAAAC,eAAAC,IACAD,QAAA,yBAAAJ,GACA,iBAAAC,QACAA,QAAA,OAAAD,EAAAG,QAAA,SAAAA,QAAA,QAAAA,QAAA,WAEAJ,EAAA,OAAAC,EAAAD,EAAA,MAAAA,EAAA,KAAAA,EAAA,QARA,CASCO,OAAA,SAAAC,EAAAC,EAAAC,GACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAX,QAGA,IAAAC,EAAAQ,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAb,YAUA,OANAc,EAAAH,GAAAI,KAAAd,EAAAD,QAAAC,IAAAD,QAAAU,GAGAT,EAAAY,GAAA,EAGAZ,EAAAD,QA2CA,OAtCAU,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAlB,EAAAmB,EAAAC,GACAV,EAAAW,EAAArB,EAAAmB,IACAG,OAAAC,eAAAvB,EAAAmB,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAA3B,GACAsB,OAAAC,eAAAvB,EAAA,cAAiD4B,OAAA,KAIjDlB,EAAAmB,EAAA,SAAA5B,GACA,IAAAmB,EAAAnB,KAAA6B,WACA,WAA2B,OAAA7B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAS,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAU,EAAAC,GAAsD,OAAAV,OAAAW,UAAAC,eAAAnB,KAAAgB,EAAAC,IAGtDtB,EAAAyB,EAAA,IAIAzB,IAAA0B,EAAA,qBCnEAnC,EAAAD,QAAAM,gCCCAgB,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAE9C,SAAAS,GACAA,IAAA,aACAA,IAAA,aACAA,IAAA,iBACAA,IAAA,eAJA,CAKCrC,EAAAqC,qBAAArC,EAAAqC,wBAED,SAAAC,GACAA,IAAA,aACAA,IAAA,aACAA,IAAA,iBACAA,IAAA,eAEAA,IAAA,kBANA,CAOCtC,EAAAsC,wBAAAtC,EAAAsC,2BAED,SAAAC,GACAA,IAAA,aACAA,IAAA,aACAA,IAAA,iBACAA,IAAA,eACAA,IAAA,qBACAA,IAAA,sBACAA,IAAA,kBAPA,CAQCvC,EAAAuC,cAAAvC,EAAAuC,iBAED,SAAAC,GACAA,IAAA,aACAA,IAAA,aACAA,IAAA,iBACAA,IAAA,eAJA,CAKCxC,EAAAwC,sBAAAxC,EAAAwC,yBAGD,SAAAC,GAEAA,IAAA,mBAEAA,IAAA,uBAEAA,IAAA,aANA,CAOCzC,EAAAyC,wBAAAzC,EAAAyC,2BAMD,SAAAC,GAEAA,IAAA,eAEAA,IAAA,aAUAA,IAAA,mBAdA,CAeC1C,EAAA0C,WAAA1C,EAAA0C,4CChEDpB,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAO9C,IAAAe,EAAA,WASA,SAAAA,EAAAC,GACAC,KAAAC,EAAA,EACAD,KAAAE,EAAA,EACAF,KAAAG,MAAA,EACAH,KAAAI,OAAA,EACAJ,KAAAC,EAAAF,EAAAE,GAAAF,EAAAM,MAAA,EACAL,KAAAE,EAAAH,EAAAG,GAAAH,EAAAO,KAAA,EACAN,KAAAI,OAAAL,EAAAK,QAAAL,EAAAQ,OAAAP,KAAAE,GAAA,EACAF,KAAAG,MAAAJ,EAAAI,OAAAJ,EAAAS,MAAAR,KAAAC,GAAA,EAmJA,OAjJAxB,OAAAC,eAAAoB,EAAAV,UAAA,QACAP,IAAA,WACA,OAAAmB,KAAAG,MAAAH,KAAAI,QAEAxB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAAoB,EAAAV,UAAA,UACAP,IAAA,WACA,OAAAmB,KAAAE,EAAAF,KAAAI,QAEAxB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAAoB,EAAAV,UAAA,QACAP,IAAA,WACA,OAAAmB,KAAAC,GAEArB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAAoB,EAAAV,UAAA,OACAP,IAAA,WACA,OACAoB,EAAAD,KAAAC,EAAAD,KAAAG,MAAA,EACAD,EAAAF,KAAAE,EAAAF,KAAAI,OAAA,IAGAxB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAAoB,EAAAV,UAAA,SACAP,IAAA,WACA,OAAAmB,KAAAC,EAAAD,KAAAG,OAEAvB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAAoB,EAAAV,UAAA,OACAP,IAAA,WACA,OAAAmB,KAAAE,GAEAtB,YAAA,EACAD,cAAA,IAEAmB,EAAAW,YAAA,WACA,WAAAX,GACAM,OAAA,EACAD,MAAA,EACAF,EAAA,EACAC,EAAA,KAQAJ,EAAAV,UAAAsB,cAAA,SAAAC,GACA,QAAAA,EAAAV,EAAAD,KAAAC,GAAAU,EAAAT,EAAAF,KAAAE,GAAAS,EAAAV,EAAAD,KAAAQ,OAAAG,EAAAT,EAAAF,KAAAO,SAOAT,EAAAV,UAAAwB,YAAA,SAAAC,GACA,OAAAA,aAAAf,GACAe,EAAAZ,EAAAD,KAAAC,IACAD,KAAAG,OAAAW,KAAAC,IAAAF,EAAAZ,EAAAD,KAAAC,GACAD,KAAAC,EAAAY,EAAAZ,GAEAY,EAAAX,EAAAF,KAAAE,IACAF,KAAAI,QAAAU,KAAAC,IAAAF,EAAAX,EAAAF,KAAAE,GACAF,KAAAE,EAAAW,EAAAX,GAEAF,KAAAQ,MAAAK,EAAAL,QACAR,KAAAG,OAAAU,EAAAL,MAAAR,KAAAQ,OAEAR,KAAAO,OAAAM,EAAAN,SACAP,KAAAI,QAAAS,EAAAN,OAAAP,KAAAO,SAEA,IAGAM,EAAAZ,EAAAD,KAAAC,IACAD,KAAAG,OAAAH,KAAAC,EAAAY,EAAAZ,EACAD,KAAAC,EAAAY,EAAAZ,GAEAY,EAAAZ,EAAAD,KAAAQ,QACAR,KAAAG,OAAAU,EAAAZ,EAAAD,KAAAC,GAEAY,EAAAX,EAAAF,KAAAE,IACAF,KAAAI,QAAAJ,KAAAE,EAAAW,EAAAX,EACAF,KAAAE,EAAAW,EAAAX,GAEAW,EAAAX,EAAAF,KAAAO,SACAP,KAAAI,QAAAS,EAAAX,EAAAF,KAAAE,IAEA,IAWAJ,EAAAV,UAAA4B,KAAA,SAAAC,GAEA,OAAAjB,KAAAG,QAAAc,EAAAd,OAAAH,KAAAI,SAAAa,EAAAb,OACA,EAGAJ,KAAAG,OAAAc,EAAAd,OAAAH,KAAAI,QAAAa,EAAAb,OACA,EAGA,GAOAN,EAAAV,UAAA8B,UAAA,SAAAD,GACA,QAAAjB,KAAAQ,MAAAS,EAAAhB,GAAAD,KAAAC,EAAAgB,EAAAT,OAAAR,KAAAO,OAAAU,EAAAf,GAAAF,KAAAE,EAAAe,EAAAb,SAQAN,EAAAV,UAAA+B,SAAA,SAAAF,GACA,OAAAjB,KAAAC,GAAAgB,EAAAhB,GAAAD,KAAAQ,OAAAS,EAAAT,OAAAR,KAAAE,GAAAe,EAAAf,GAAAF,KAAAO,QAAAU,EAAAV,QAKAT,EAAAV,UAAAgC,SAAA,WACA,aAAiBpB,KAAAC,EAAA,MAAAD,KAAAE,EAAA,MAAAF,KAAAG,MAAA,MAAAH,KAAAI,OAAA,KAEjBN,EApKA,GAsKA3C,EAAA2C,wBC9KA1C,EAAAD,QAAAO,gCCCAe,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAE9C,SAAAsC,GACAA,IAAA,2BACAA,IAAA,+BACAA,IAAA,6BACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,qBACAA,IAAA,yBACAA,IAAA,uBAVA,CAWClE,EAAAkE,aAAAlE,EAAAkE,gBAED,SAAAC,GAEAA,IAAA,mBAEAA,IAAA,yBAEAA,IAAA,iBANA,CAOCnE,EAAAmE,YAAAnE,EAAAmE,6CCtBD,IACAC,EADAC,EAAAxB,WAAAwB,YACAD,EAAA9C,OAAAgD,iBACUC,wBAAgBC,OAAA,SAAAtD,EAAAuD,GAAsCvD,EAAAqD,UAAAE,IAChE,SAAAvD,EAAAuD,GAAyB,QAAAtC,KAAAsC,IAAAvC,eAAAC,KAAAjB,EAAAiB,GAAAsC,EAAAtC,KACzB,SAAAjB,EAAAuD,GAEA,SAAAC,IAAuB7B,KAAA8B,YAAAzD,EADvBkD,EAAAlD,EAAAuD,GAEAvD,EAAAe,UAAA,OAAAwC,EAAAnD,OAAAsD,OAAAH,IAAAC,EAAAzC,UAAAwC,EAAAxC,UAAA,IAAAyC,KAGApD,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAiD,EAAAnE,EAAA,GACAoE,EAAApE,EAAA,GACAqE,EAAArE,EAAA,GACAsE,EAAAtE,EAAA,IACAuE,EAAAvE,EAAA,IACAwE,EAAAxE,EAAA,IAIAyE,EAAA,SAAAC,GAEA,SAAAD,EAAAE,GACA,IAAAC,EAGAF,EAAArE,KAAA8B,KAAAwC,IAAAxC,KAEAyC,EAAAC,MAAA,EAEAD,EAAAE,aAAA,IAAAC,IAEAH,EAAAI,oBAAA,EAEAJ,EAAAD,MAAA/D,OAAAqE,UAAsCR,EAAAS,iBAA0BP,GAEhE,IAAAQ,EAAAP,EAAAD,MAAAS,QAEA,SAFA,IAAAD,EAAAf,EAAApC,SAAAqD,KAAAF,KAEAf,EAAApC,SAAAsD,IAAA,CACA,IAAAC,EAAAX,EAAAY,4BACAZ,EAAAQ,SACAK,QAAAF,EAAAE,QACAC,SAAA,IAAArB,EAAAsB,gBAAA,QAAAJ,EAAAK,gBACAC,KAAAzB,EAAApC,SAAAsD,KAMA,OAHAV,EAAAkB,YAAA,IAAAvB,EAAAwB,oBAAAnB,GACAA,EAAAoB,cAAApB,EAAAkB,YAAAG,mBACArB,EAAAsB,aAAA,IAAA1B,EAAA2B,wBAAAvB,GACAA,EAwHA,OApJAjB,EAAAc,EAAAC,GAiCAD,EAAAlD,UAAA6E,QAAA,WACAjE,KAAAkE,eAAAD,WAEA3B,EAAAlD,UAAA+E,eAAA,aAMA7B,EAAAlD,UAAAgF,KAAA,WAUA,IATA,IAAAC,EACAtF,EAIAuF,EAAAC,EAAAC,EAFAC,EAAAzE,KAAAwC,MAAAkC,KAAAD,WAIAZ,EAAA7D,KAAA6D,cACAF,EAAA3D,KAAA2D,YACA5F,EAAA,EAAA4G,EAAAF,EAAAG,OAAgD7G,EAAA4G,IAAS5G,EAEzDwG,GADAD,EAAAG,EAAA1G,IACA,GACAyG,EAAAxE,KAAAkE,eAAAW,YAAAN,GAEAV,EAAAS,EAAA,IAAAX,EAAAY,EAAAC,GAGAxE,KAAAwC,MAAAkC,KAAAI,UAEA,IAAA/G,EAAA,EAAA4G,EAAA3E,KAAAwE,SAAAI,OAAmD7G,EAAA4G,IAAS5G,EAC5DsG,EAAArE,KAAAwE,SAAAzG,GACAgB,EAAAsF,EAAAU,OAAAV,GACAA,EAAAW,iBAAAC,QAAA,SAAAC,GAAyE,OAAAA,EAAAnG,WAOzEuD,EAAAlD,UAAAiE,0BAAA,WACA,UAAA8B,MAAA,mJAKA7C,EAAAlD,UAAAgG,aAAA,WACA,OACAC,SAAArD,EAAAsD,kBACAC,UAAAvD,EAAAwD,OAMAlD,EAAAlD,UAAAqG,mBAAA,WACA,UAYAnD,EAAAlD,UAAAsG,WAAA,WACA,OACAC,GAAA9H,EAAA,IACA+H,sBACApB,YACAqB,oBACAC,YAAA,EACAC,GAAAlI,EAAA,MAOAyE,EAAAlD,UAAA4G,sBAAA,SAAAC,EAAAC,EAAA5H,EAAA6H,EAAApB,EAAAqB,GACA,OACAA,QACAH,QACAC,aACA5H,OACA6H,OACApB,WAOAzC,EAAAlD,UAAAiH,YAAA,SAAA/H,EAAA6H,EAAApB,EAAAuB,EAAAC,GACA,OACAjI,OACAiI,YACAD,kBACAH,OACApB,WAGAzC,EAAAlD,UAAAoH,oBAAA,SAAAC,KAIAnE,EAAAlD,UAAAsH,gBAAA,SAAAC,KAGArE,EAAAlD,UAAAwH,UAAA,WACA5G,KAAAwC,MAAAkC,KAAAI,WAEAxC,EAAAS,gBACAT,EArJA,CAsJCH,EAAA0E,eACD1J,EAAAmF,sCC3KA,IAAAwE,EAAA9G,WAAA8G,YAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAA7I,EAAAD,EAAA+I,UAAAvC,OAAA9F,EAAAV,EAAA,EAAA4I,EAAA,OAAAE,IAAAzI,OAAA2I,yBAAAJ,EAAAC,GAAAC,EACA,oBAAAG,SAAA,mBAAAA,QAAAC,SAAAxI,EAAAuI,QAAAC,SAAAP,EAAAC,EAAAC,EAAAC,QACA,QAAAnJ,EAAAgJ,EAAAnC,OAAA,EAA4C7G,GAAA,EAAQA,KAAAM,EAAA0I,EAAAhJ,MAAAe,GAAAV,EAAA,EAAAC,EAAAS,GAAAV,EAAA,EAAAC,EAAA2I,EAAAC,EAAAnI,GAAAT,EAAA2I,EAAAC,KAAAnI,GACpD,OAAAV,EAAA,GAAAU,GAAAL,OAAAC,eAAAsI,EAAAC,EAAAnI,MAEAL,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAwI,EAAA1J,EAAA,GACA2J,EAAA,WACA,SAAAA,EAAAzH,GACAC,KAAAyH,IAAA1H,EAAA2H,GACA1H,KAAA2H,OAAA5H,EAAA4H,OAmBA,OAbAH,EAAApI,UAAA6E,QAAA,aAGAxF,OAAAC,eAAA8I,EAAApI,UAAA,MACAP,IAAA,WACA,OAAAmB,KAAAyH,KAEA7I,YAAA,EACAD,cAAA,IAEAmI,GACAS,EAAAK,YACAJ,EAAApI,UAAA,iBACAoI,EAtBA,GAwBArK,EAAAqK,yCChCA,SAAAK,EAAA1J,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAEAb,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C8I,EAAAhK,EAAA,IACAgK,EAAAhK,EAAA,oCCLA,SAAAgK,EAAA1J,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAEAb,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C8I,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,MACAgK,EAAAhK,EAAA,IACAgK,EAAAhK,EAAA,MACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,MACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,mCCbA,SAAAgK,EAAA1J,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAEAb,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C8I,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,mCCXAY,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAM9C,IAAA8H,EAAA,WACA,SAAAA,EAAA9G,GACAC,KAAAiH,IAAAlH,EAAAkH,IAUA,OARAxI,OAAAC,eAAAmI,EAAAzH,UAAA,MAEAP,IAAA,WACA,OAAAmB,KAAAiH,KAEArI,YAAA,EACAD,cAAA,IAEAkI,EAZA,GAcA1J,EAAA0J,8CCpBApI,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAE9C,SAAA+I,GAEAA,IAAA,eAMAA,IAAA,+BARA,CASC3K,EAAA2K,gBAAA3K,EAAA2K,mBAED,SAAAC,GAEAA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,qBANA,CAOC5K,EAAA4K,WAAA5K,EAAA4K,cAOD,SAAAC,GAEAA,IAAA,aAEAA,IAAA,mBAEAA,IAAA,mBANA,CAOC7K,EAAA6K,iBAAA7K,EAAA6K,kDClCDvJ,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAI9C,IAAAkJ,EAAA,WACA,SAAAA,KA+BA,OA1BAA,EAAA7I,UAAA8I,cAAA,SAAAC,GACA,OAAAnI,KAAAoI,aAAAC,QAAAF,IAKAF,EAAA7I,UAAAiJ,QAAA,SAAAF,GACA,OAAAnI,KAAAoI,cAAApI,KAAAoI,aAAAC,QAAAF,IAAA,MAKAF,EAAA7I,UAAAkJ,oBAAA,SAAAH,GACA,IAAAI,EAAAvI,KAAAoI,aAAAC,QAAAF,GACA,OAAAI,EACAA,EAAAC,aAEA,MAMAP,EAAA7I,UAAAqJ,gBAAA,SAAAL,GACApI,KAAAoI,gBAEAH,EAhCA,GAkCA9K,EAAA8K,6CCtCAxJ,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAY9C5B,EAAAuL,mBARA,SAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAH,EAAAvD,eACA2D,EAAA,IAAAD,EAAAvD,UAAAqD,EAAAC,GAIA,OARAG,QAKAD,EALAE,UAMAF,EAAA1D,SAAAyD,EAAAzD,UAEA0D,iCCVA,IACAxH,EADAC,EAAAxB,WAAAwB,YACAD,EAAA9C,OAAAgD,iBACUC,wBAAgBC,OAAA,SAAAtD,EAAAuD,GAAsCvD,EAAAqD,UAAAE,IAChE,SAAAvD,EAAAuD,GAAyB,QAAAtC,KAAAsC,IAAAvC,eAAAC,KAAAjB,EAAAiB,GAAAsC,EAAAtC,KACzB,SAAAjB,EAAAuD,GAEA,SAAAC,IAAuB7B,KAAA8B,YAAAzD,EADvBkD,EAAAlD,EAAAuD,GAEAvD,EAAAe,UAAA,OAAAwC,EAAAnD,OAAAsD,OAAAH,IAAAC,EAAAzC,UAAAwC,EAAAxC,UAAA,IAAAyC,KAGApD,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAmK,EAAArL,EAAA,IACAsL,EAAAtL,EAAA,GACAsE,EAAAtE,EAAA,IACAuL,EAAAvL,EAAA,IAOA,SAAAwL,EAAAC,GACA,eAAAA,GANA,SAAAC,GACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,qBAHA,CAICpM,EAAAoM,aAAApM,EAAAoM,gBAOD,IAAAC,EAAA,SAAAjH,GAEA,SAAAiH,EAAAzJ,GACA,IAAA0C,EAAAF,EAAArE,KAAA8B,KAAAD,IAAAC,KASA,OAJAyC,EAAAC,MAAA,EAEAD,EAAAgH,WAAAjM,OAAAkM,iBACAjL,OAAAqE,OAAAL,EAAA1C,GACA0C,EAgHA,OA3HAjB,EAAAgI,EAAAjH,GAaAiH,EAAApK,UAAAuK,mBAAA,SAAAhJ,EAAAiJ,GACA,IAAAtK,EAAAsK,IAAwB3J,EAAA,EAAAC,EAAA,GAGxB,OAFAZ,EAAAW,EAAAU,EAAAV,EAAAD,KAAAyJ,WACAnK,EAAAY,EAAAS,EAAAT,EAAAF,KAAAyJ,WACAnK,GAEAkK,EAAApK,UAAAyK,mBAAA,SAAAlJ,EAAAiJ,GACA,IAAAtK,EAAAsK,IAAwB3J,EAAA,EAAAC,EAAA,GAGxB,OAFAZ,EAAAW,EAAAU,EAAAV,EAAAD,KAAAyJ,WACAnK,EAAAY,EAAAS,EAAAT,EAAAF,KAAAyJ,WACAnK,GAEAkK,EAAApK,UAAA0K,aAAA,SAAAnJ,EAAAiJ,GACA,IAAAtK,EAAAU,KAAA2J,mBAAAhJ,EAAAiJ,GAGA,OAFAtK,EAAAW,EAAAX,EAAAW,EAAAD,KAAA+J,WAAA9J,EACAX,EAAAY,EAAAZ,EAAAY,EAAAF,KAAA+J,WAAA7J,EACAZ,GAEAkK,EAAApK,UAAA4K,aAAA,SAAArJ,EAAAiJ,GACA,IAAAtK,GAAiBW,EAAA,EAAAC,EAAA,GAGjB,OAFAZ,EAAAW,EAAAU,EAAAV,EAAAD,KAAA+J,WAAA9J,EACAX,EAAAY,EAAAS,EAAAT,EAAAF,KAAA+J,WAAA7J,EACAF,KAAA6J,mBAAAvK,EAAAsK,IAEAJ,EAAApK,UAAA6K,cAAA,SAAAtJ,EAAAiJ,GACA,IAAArB,EAAAvI,KAAA6J,mBAAA7J,KAAA8J,aAAAnJ,IACAuJ,EAAAN,IAA4B3J,EAAA,EAAAC,EAAA,GAO5B,OANAgK,EAAAjK,GAAAsI,EAAAtI,EAAAD,KAAAmK,OAAAC,OAAA,GAAApK,KAAAmK,OAAAE,MAAA,IAAArK,KAAAmK,OAAAE,MAAA,GACAH,EAAAhK,GAAAqI,EAAArI,EAAAF,KAAAmK,OAAAC,OAAA,GAAApK,KAAAmK,OAAAE,MAAA,IAAArK,KAAAmK,OAAAE,MAAA,GAEArK,KAAAsK,WAAA5G,OAAA0F,EAAAmB,eAAAC,QACAC,QAAAC,KAAA,oDAEAR,GAEAV,EAAApK,UAAAuL,cAAA,SAAAhK,EAAAiJ,GACA,IAAAgB,GAAsB3K,EAAA,EAAAC,EAAA,GAStB,OAPA0K,EAAA3K,GAAAU,EAAAV,EAAAD,KAAAmK,OAAAE,MAAA,GAAArK,KAAAmK,OAAAC,OAAA,GAAApK,KAAAmK,OAAAE,MAAA,IAAArK,KAAAyJ,WACAmB,EAAA1K,GAAAS,EAAAT,EAAAF,KAAAmK,OAAAE,MAAA,GAAArK,KAAAmK,OAAAC,OAAA,GAAApK,KAAAmK,OAAAE,MAAA,IAAArK,KAAAyJ,WAEAzJ,KAAAsK,WAAA5G,OAAA0F,EAAAmB,eAAAC,QACAC,QAAAC,KAAA,oDAGA1K,KAAAgK,aAAAY,EAAAhB,IAEAJ,EAAApK,UAAAyL,YAAA,SAAAlK,EAAAiJ,GACA,IAAAM,EAAAN,IAA4B3J,EAAA,EAAAC,EAAA,GAC5B0K,EAAA5K,KAAA6J,mBAAAlJ,GAOA,OANAuJ,EAAAjK,GAAA2K,EAAA3K,EAAAD,KAAAmK,OAAAC,OAAA,GAAApK,KAAAmK,OAAAE,MAAA,IAAArK,KAAAmK,OAAAE,MAAA,GACAH,EAAAhK,GAAA0K,EAAA1K,EAAAF,KAAAmK,OAAAC,OAAA,GAAApK,KAAAmK,OAAAE,MAAA,IAAArK,KAAAmK,OAAAE,MAAA,GAEArK,KAAAsK,WAAA5G,OAAA0F,EAAAmB,eAAAC,QACAC,QAAAC,KAAA,oDAEAR,GAEAV,EAAApK,UAAA0L,YAAA,SAAAnK,EAAAiJ,GACA,IAAAgB,EAAAhB,IAA6B3J,EAAA,EAAAC,EAAA,GAQ7B,OANA0K,EAAA3K,EAAAU,EAAAV,EAAAD,KAAAmK,OAAAE,MAAA,GAAArK,KAAAmK,OAAAC,OAAA,GAAApK,KAAAmK,OAAAE,MAAA,GACAO,EAAA1K,EAAAS,EAAAT,EAAAF,KAAAmK,OAAAE,MAAA,GAAArK,KAAAmK,OAAAC,OAAA,GAAApK,KAAAmK,OAAAE,MAAA,GAEArK,KAAAsK,WAAA5G,OAAA0F,EAAAmB,eAAAC,QACAC,QAAAC,KAAA,oDAEAE,GAOApB,EAAApK,UAAA2L,kBAAA,SAAAC,GACA,GAAAhL,KAAAsK,WAAA5G,OAAA0F,EAAAmB,eAAAU,YAAA5B,EAAArJ,KAAAsK,WAAAY,YAAA,CACA,IAAAnB,EAAAb,EAAAiC,0BAAAnL,KAAAoL,SAAAJ,EAAAhL,KAAAyJ,YACAtJ,EAAA4J,EAAA5J,MACAC,EAAA2J,EAAA3J,OACAgL,GACA7K,QAAAH,EAAA,EACAiL,IAAA,IACAhL,MAAAF,EAAA,EACAmL,MAAA,IACA9K,MAAAL,EAAA,EACAG,IAAAF,EAAA,GAIA+J,EAAAnK,KAAAsK,WAAAY,WACAzM,OAAAqE,OAAAqH,EAAAiB,GACAjB,EAAAoB,SAAAC,KAAAzB,EAAA5J,MAAA,EAJA,EAIA4J,EAAA3J,OAAA,EAHA,EAGA+J,EAAAoB,SAAAE,GACAtB,EAAAE,MAAAmB,IALA,GACA,EAIA,GACArB,EAAAuB,eACAvB,EAAAwB,mBAAA,GACAxB,EAAAyB,yBACA5L,KAAA+J,aACA/J,KAAA+J,WAAArF,KAAA1E,KACAA,KAAAwI,aAAA,IAAAW,EAAArJ,QACAM,OAAAJ,KAAA+J,WAAA3J,OAAAJ,KAAAyJ,WACAtJ,MAAAH,KAAA+J,WAAA5J,MAAAH,KAAAyJ,WACAxJ,EAAAD,KAAA+J,WAAA9J,EAAAD,KAAAyJ,WACAvJ,EAAAF,KAAA+J,WAAA7J,EAAAF,KAAAyJ,kBAGAJ,EAAArJ,KAAAsK,WAAAY,aACAT,QAAAC,KAAA,qFAGAlB,EAAAqC,gBAAA,cACArC,EA5HA,CA6HCrH,EAAA0E,eACD1J,EAAAqM,qCCzJA,IACAjI,EADAC,EAAAxB,WAAAwB,YACAD,EAAA9C,OAAAgD,iBACUC,wBAAgBC,OAAA,SAAAtD,EAAAuD,GAAsCvD,EAAAqD,UAAAE,IAChE,SAAAvD,EAAAuD,GAAyB,QAAAtC,KAAAsC,IAAAvC,eAAAC,KAAAjB,EAAAiB,GAAAsC,EAAAtC,KACzB,SAAAjB,EAAAuD,GAEA,SAAAC,IAAuB7B,KAAA8B,YAAAzD,EADvBkD,EAAAlD,EAAAuD,GAEAvD,EAAAe,UAAA,OAAAwC,EAAAnD,OAAAsD,OAAAH,IAAAC,EAAAzC,UAAAwC,EAAAxC,UAAA,IAAAyC,KAGApD,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAiD,EAAAnE,EAAA,GAEA,SAAAiO,EAAAC,EAAAnK,GACA,OAAAmK,EAAArJ,MAAAd,EAAAc,MAMA,IAAAsJ,EAAA,SAAAzJ,GAEA,SAAAyJ,EAAAjM,GACA,IAAA0C,EAAAF,EAAArE,KAAA8B,KAAAD,IAAAC,KAWA,OATAyC,EAAAwJ,UAAA,IAAAjK,EAAAgK,MAEAvJ,EAAAyJ,UAEAzJ,EAAA0J,aAAA,EAEA1J,EAAA2J,SAAA,IAAAxJ,IACAH,EAAAwJ,UAAAI,eAAA,EACA5J,EAAAwJ,UAAAK,YAAA,EACA7J,EA4CA,OAzDAjB,EAAAwK,EAAAzJ,GAoBAyJ,EAAA5M,UAAAmN,SAAA,SAAA5D,GAEA3I,KAAAkM,OAAAM,KAAA7D,GACA3I,KAAAmM,aAAA,GAKAH,EAAA5M,UAAAqN,QAAA,SAAAlE,GACAvI,KAAAoM,SAAAZ,IAAAjD,EAAAb,GAAAa,IAKAyD,EAAA5M,UAAA6E,QAAA,WACAjE,KAAAiM,UAAA,MAMAD,EAAA5M,UAAAsN,YAAA,SAAA/D,GACA,GAAA3I,KAAAkM,OAAA,CACA,IAAAS,EAAA3M,KAAAkM,OAAAU,QAAAjE,GACA,GAAAgE,GAAA,EAEA,YADA3M,KAAAkM,OAAAW,OAAAF,EAAA,GAIAlC,QAAAC,KAAA,oGAAA1K,KAAA0H,GAAA,SAAAiB,EAAAjB,KAEAsE,EAAA5M,UAAA0N,WAAA,WACA9M,KAAAmM,aACAnM,KAAAkM,OAAAa,KAAAjB,IAGAE,EAAAgB,iBAAA,cACAhB,EA1DA,CARAnO,EAAA,IAmECgJ,eACD1J,EAAA6O,sCChFA,IACAzK,EADAC,EAAAxB,WAAAwB,YACAD,EAAA9C,OAAAgD,iBACUC,wBAAgBC,OAAA,SAAAtD,EAAAuD,GAAsCvD,EAAAqD,UAAAE,IAChE,SAAAvD,EAAAuD,GAAyB,QAAAtC,KAAAsC,IAAAvC,eAAAC,KAAAjB,EAAAiB,GAAAsC,EAAAtC,KACzB,SAAAjB,EAAAuD,GAEA,SAAAC,IAAuB7B,KAAA8B,YAAAzD,EADvBkD,EAAAlD,EAAAuD,GAEAvD,EAAAe,UAAA,OAAAwC,EAAAnD,OAAAsD,OAAAH,IAAAC,EAAAzC,UAAAwC,EAAAxC,UAAA,IAAAyC,KAGApD,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IACAkO,EAAA,SAAA1K,GAEA,SAAA0K,EAAAC,GACA,IAAAzK,EAAAF,EAAArE,KAAA8B,YAEA,OADAyC,EAAAyK,QACAzK,EAEA,OANAjB,EAAAyL,EAAA1K,GAMA0K,EAPA,CADApP,EAAA,IASCsP,mBACDhQ,EAAA8P,mDCrBAxO,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAoO,EAAA,WAWA,OAVA,WAQAnN,KAAAoN,YAAA,GATA,GAaAjQ,EAAAgQ,kDCbA,IAAA5C,EADA9L,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAE9C,SAAAwL,GAOAA,IAAA,2BAIAA,IAAA,mBAXA,CAYCA,EAAApN,EAAAoN,iBAAApN,EAAAoN,oBAQD,IAAA8C,EAAA,WAIA,OAHA,WACArN,KAAA0D,KAAA6G,EAAAU,YAFA,GAMA9N,EAAAkQ,2CC5BA5O,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IA4C9C5B,EAAAmQ,eA3CA,SAAAC,EAAAxN,EAAAyN,GACA,IAAAC,EAAA,IAAA7K,IACA8K,EAAA,IAAA9K,IACA+K,EAAA,IAAA/K,IACAgL,EAAA,IAAAhL,IACAiL,EAAAN,EAAAO,QAAA,eAAmD,SAAA7N,EAAA8N,GAEnD,OADAH,EAAApC,IAAAuC,GAAAH,EAAA/O,IAAAkP,IAAA,MACAA,KAAAhO,GACA0N,EAAAjC,IAAAuC,GAAAN,EAAA5O,IAAAkP,IAAA,MACAhO,EAAAgO,KAEAL,EAAAlC,IAAAuC,GAAAL,EAAA7O,IAAAkP,IAAA,MACA,MAEAtP,OAAAuP,KAAAjO,GAAAkF,QAAA,SAAAgJ,GACAR,EAAA5O,IAAAoP,IACAN,EAAAnC,IAAAyC,GAAAN,EAAA9O,IAAAoP,IAAA,QAIA,IAAAC,GACAC,sBAAAV,EACAF,OAAAM,EACAO,sBAAAR,EACAS,0BAAAV,EACAW,wBAAAZ,GAgBA,OAdAF,GAEAA,EAAAe,OAAAtJ,QAAA,SAAA5H,GACA6Q,EAAAG,0BAAAxP,IAAAxB,GACAoN,QAAA+D,MAAAhB,EAAAlP,KAAA,sDAAAjB,GAEA6Q,EAAAI,wBAAAzP,IAAAxB,GACAoN,QAAA+D,MAAAhB,EAAAlP,KAAA,yEAAAjB,GAEA6Q,EAAAC,sBAAAtP,IAAAxB,IACAoN,QAAA+D,MAAAhB,EAAAlP,KAAA,yEAAAjB,KAIA6Q,iCC1CAzP,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAA0P,EAAA,EAMA,SAAAC,EAAA1H,EAAA2H,GACA3H,GAAA2H,GAAA3H,EAAA6F,OAAA+B,MAAA5H,GAAA,EAAA2H,EAAA/J,QAAAiK,OAAAF,IAEA,IAAAG,EAAA,WACA,SAAAA,EAAA/O,GAEAC,KAAAyH,IAAAgH,IAEAzO,KAAAoK,QAAA,OAEApK,KAAAqK,OAAA,OACAtK,IACA2O,EAAA1O,KAAAoK,OAAArK,EAAAqK,QACAsE,EAAA1O,KAAAqK,MAAAtK,EAAAsK,QAiBA,OAdA5L,OAAAC,eAAAoQ,EAAA1P,UAAA,MAEAP,IAAA,WACA,OAAAmB,KAAAyH,KAEA7I,YAAA,EACAD,cAAA,IAKAmQ,EAAA1P,UAAAmM,SAAA,SAAAwD,GACA/O,KAAAoK,OAAA2E,EAAAC,MAAA,IAEAF,EA3BA,GA6BA3R,EAAA2R,4CCvCArQ,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAkQ,EAAApR,EAAA,IACAqR,EAAArR,EAAA,IAGA,SAAAiO,EAAAC,EAAAnK,GACA,OAAAA,EAAA8C,KAAAhC,MAAAqJ,EAAArH,KAAAhC,MAMA,IAAAyM,EAAA,WACA,SAAAA,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAA9M,EAAAzC,KAKAA,KAAAwP,mBAAA,EAKAxP,KAAAyP,mBAAA,SAAAC,GAEA,IAAAC,EAAAlN,EAAAc,SAAAqM,MAAAF,GAGA,OADAC,EAAA5C,KAAAjB,GACA6D,GAKA3P,KAAA6P,OAAA,WACApN,EAAA+M,mBAAA,GAEAxP,KAAA8P,QAAAV,EACApP,KAAA+P,SAAAV,GACArP,KAAAgQ,eAAAV,GACAtP,KAAAiQ,oBAAAV,GAkOA,OAhOA9Q,OAAAC,eAAAyQ,EAAA/P,UAAA,oBACAP,IAAA,WACA,OAAAmB,KAAAwP,mBAEAhE,IAAA,SAAAlC,GACAtJ,KAAAwP,kBAAAlG,EAEAA,IACAtJ,KAAAuD,SAAA,IAAA2L,EAAAgB,SAAA,SACAlQ,KAAAuD,SAAA4M,OAAAnQ,KAAAqP,MAAAe,IAAA,SAAAC,GAAkE,OAAAA,EAAApP,SAAmBqP,OAAAtH,YAGrFpK,YAAA,EACAD,cAAA,IAOAwQ,EAAA/P,UAAA6Q,oBAAA,SAAAV,GACA,IAAA9M,EAAAzC,KACAuQ,EAAAvQ,KAAA8P,QACAU,EAAA,KACAC,EAAA,KACAlB,IACAgB,EAAAG,aAAA,SAAAC,GACA,IAAAjB,EAAAT,EAAA2B,qBAAAD,EAAAJ,GACAM,EAAApO,EAAAqO,gBAAApB,EAAAe,EAAAD,GACAO,EAAAtO,EAAAuO,UAAAL,GACAlO,EAAA6M,YAAArK,QAAA,SAAAgM,GACAA,EAAAC,YAAAL,EAAAE,KAEAJ,EAAAQ,kBACAR,EAAAS,mBAGAb,EAAAc,aAAA,SAAAV,GAEA,IAAAlO,EAAA6O,iBAAA,CAEA,IAAA5B,EAAAT,EAAA2B,qBAAAD,EAAAJ,GACAM,EAAApO,EAAAqO,gBAAApB,EAAAe,EAAAD,GACA/N,EAAA6M,YAAArK,QAAA,SAAAgM,GACAA,EAAAM,eAAAV,OAGAN,EAAAiB,YAAA,SAAAb,GAEA,IAAAlO,EAAA6O,iBAAA,CAEA,IAAA5B,EAAAT,EAAA2B,qBAAAD,EAAAJ,GACAM,EAAApO,EAAAqO,gBAAApB,EAAAe,EAAAD,GACA/N,EAAA6M,YAAArK,QAAA,SAAAgM,GACAA,EAAAQ,gBAAAZ,OAGAN,EAAAmB,YAAA,SAAAf,GAEA,IAAAlO,EAAA6O,iBAAA,CAEAb,EAAAxB,EAAA2B,qBAAAD,EAAAJ,GACA,IAAAoB,EAAAlP,EAAAgN,mBAAAgB,GAEAmB,GAAA,EACAC,EAAAC,KAAAC,MAEA,KAAAJ,EAAA/M,QAAA,IAGA4L,EAAAmB,EAAA,GAAAjN,KACA,IAAAmM,EAAApO,EAAAqO,gBAAAL,IAAAD,GACAwB,EAAAvB,EACAhO,EAAA6M,YAAArK,QAAA,SAAAgM,GACAA,EAAAgB,gBAAApB,EAAAF,EAAAuB,UAEAvB,EAAAQ,kBACAgB,SAAAX,YAAA,SAAAb,GACA,IAAAjB,EAAAT,EAAA2B,qBAAAD,EAAAJ,GACAM,EAAApO,EAAAqO,gBAAApB,EAAAe,EAAAD,GACA4B,GACAnS,EAAAyP,EAAAzP,EAAA+R,EAAA/R,EACAC,EAAAwP,EAAAxP,EAAA8R,EAAA9R,GAEAmS,EAAA5P,EAAA6P,SAAA5C,EAAAe,EAAAuB,EAAAI,GACAJ,EAAAtC,EACAjN,EAAA6M,YAAArK,QAAA,SAAAgM,GACAA,EAAAsB,WAAA1B,EAAAwB,KAGAT,GAAA,GAEAO,SAAAK,UAAA,SAAA7B,GACAwB,SAAAX,YAAA,KACAW,SAAAK,UAAA,KACAL,SAAAM,YAAA,MAEAN,SAAAM,YAAA,SAAA9B,GACA,IAAAjB,EAAAT,EAAA2B,qBAAAD,EAAAJ,GACAM,EAAApO,EAAAqO,gBAAApB,EAAAe,EAAAD,GACA/N,EAAA6M,YAAArK,QAAA,SAAAgM,GACAA,EAAAyB,gBAAA7B,KAEAF,EAAAQ,mBAEAZ,EAAAiC,UAAA,SAAA7B,GACA,IAAAjB,EAAAT,EAAA2B,qBAAAD,EAAAJ,GACAM,EAAApO,EAAAqO,gBAAApB,EAAAe,EAAAD,GACA/N,EAAA6M,YAAArK,QAAA,SAAAgM,GACAA,EAAA0B,cAAA9B,EAAAF,EAAAuB,UAGAN,GAAAE,KAAAC,MAAAF,EAtJA,KAuJApP,EAAA6M,YAAArK,QAAA,SAAAgM,GACAA,EAAA2B,YAAA/B,EAAAF,EAAAuB,WAKA3B,EAAAsC,cAAA,WACA,aAIA7S,KAAA8S,4BAEA3D,EAAA/P,UAAA0T,yBAAA,WACA,IAAAvC,EAAAvQ,KAAA8P,QACAS,EAAAwC,aAAA,SAAApC,KAQAJ,EAAAyC,WAAA,SAAArC,KAGAJ,EAAA0C,YAAA,SAAAtC,KAGAJ,EAAA2C,cAAA,SAAAvC,MAOAxB,EAAA/P,UAAAiJ,QAAA,SAAAF,GACA,QAAAgL,EAAA,EAAAnQ,EAAAhD,KAAAqP,MAAyC8D,EAAAnQ,EAAA4B,OAAgBuO,IAAA,CACzD,IAAA5K,EAAAvF,EAAAmQ,GACA,GAAA5K,OAAAb,KAAAS,EACA,OAAAI,OAGA,aAKA4G,EAAA/P,UAAAkT,SAAA,SAAA5C,EAAA0D,EAAAC,EAAAjB,GACA,OACAxH,QACA0I,QAAA5D,EACA0C,QACAiB,WACAD,WAOAjE,EAAA/P,UAAA0R,gBAAA,SAAApB,EAAA0D,EAAA5C,GAEA,IAAAb,EAAA3P,KAAAyP,mBAAAC,GACA,OACA9E,QACA8E,SAEA0D,SAAA5C,IACAd,MAAAc,EAAAjI,KAAAuB,aAAA4F,GACAnH,KAAAiI,EAAAjI,MAEAvB,QACA0I,MAAAC,EAAA,IAAAA,EAAA,GAAAjL,KAAA6D,KAAAuB,aAAA4F,GACAnH,KAAAoH,EAAA,IAAAA,EAAA,GAAAjL,KAAA6D,MAEAgL,gBAAA5D,EAAAS,IAAA,SAAAC,GAAwD,OACxDX,MAAAW,EAAA3L,KAAA6D,KAAAuB,aAAA4F,GACAnH,KAAA8H,EAAA3L,KAAA6D,UAIA4G,EAAA/P,UAAA4R,UAAA,SAAAL,GACA,IAAAI,EAAA9B,EAAAuE,eAAA7C,GACA,OACAI,SAAA9Q,EAAA8Q,EAAA7Q,KAMAiP,EAAA/P,UAAA4Q,eAAA,SAAAV,GACAtP,KAAAsP,cACA,QAAA6D,EAAA,EAAAnQ,EAAAhD,KAAAsP,YAA+C6D,EAAAnQ,EAAA4B,OAAgBuO,IAAA,CAC/DnQ,EAAAmQ,GACA1K,gBAAAzI,QAMAmP,EAAA/P,UAAA2Q,SAAA,SAAAV,GACArP,KAAAqP,SAEAF,EAAA/P,UAAA6E,QAAA,WACAjE,KAAAuD,SAAA,KACAvD,KAAA8P,QAAA4B,YAAA,KACA1R,KAAA8P,QAAA0B,YAAA,KACAxR,KAAA8P,QAAAuB,aAAA,KACArR,KAAA8P,QAAAY,aAAA,MAEAvB,EA9PA,GAgQAhS,EAAAgS,kDCtQA1Q,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAkD,EAAApE,EAAA,GACA,SAAA4V,EAAAC,GACA,OAAAjV,OAAAqE,UAA2B4Q,GAAcC,kBAAA,OAEzC,SAAAC,EAAAvP,GACA,OAAA5F,OAAAqE,UAA2BuB,GAAYW,sBAyCvC,SAAA6O,EAAA9H,EAAAnK,GACA,OAAAmK,EAAA3F,QAAAxE,EAAAwE,OACA,EACA,EA4IAjJ,EAAA2W,eA1IA,SAAAnL,EAAAoL,GAEA,IAAAC,KAEAC,EAAA,IAAArR,IAIAmR,EAAAnO,mBAAAX,QAAA,SAAAyO,GACA,GAAAA,EAAAtN,MAAA,CAGAsN,EAAAvN,KAAAlE,EAAAxC,sBAAAyU,KACAR,EAAAxN,WAAAjE,EAAAzC,mBAAA2U,IAGA,IAAAC,EAAAV,EAAAtN,MAAAE,iBAAArE,EAAArC,sBAAAyU,SAEAC,EAAAL,EAAApV,IAAA6U,EAAAtN,MAAA9H,MACAgW,EACAL,EAAAzI,IAAAkI,EAAAtN,MAAA9H,MACAgW,EAAA,IACAF,IAAAnS,EAAArC,sBAAA2U,QACAH,IAAAnS,EAAArC,sBAAAuD,IACAmR,EAAA,IACAF,IAAAnS,EAAArC,sBAAAyU,UACAD,IAAAnS,EAAArC,sBAAAuD,OAIA6Q,EAAAxH,KAAAkH,GACAO,EAAAzI,IAAAkI,EAAAtN,MAAA9H,MACA8V,IAAAnS,EAAArC,sBAAA2U,QACAH,IAAAnS,EAAArC,sBAAAuD,IACAiR,IAAAnS,EAAArC,sBAAAyU,UACAD,IAAAnS,EAAArC,sBAAAuD,UAMA,IAjFAqR,EACAC,EACAC,EACAC,EA2FAC,EAbAZ,EAAA5D,IAAA,SAAAyE,GACA,IAAAP,EAAAL,EAAApV,IAAAgW,EAAAzO,MAAA9H,MACA8V,EAAAE,EAAA,IAAAA,EAAA,IAAArS,EAAArC,sBAAAuD,KACAmR,EAAA,KAAAA,EAAA,IAAArS,EAAArC,sBAAA2U,SACAD,EAAA,IAAAA,EAAA,IAAArS,EAAArC,sBAAAyU,SACA,OACA/V,KAAAuW,EAAAzO,MAAA9H,KACAgI,gBAAA8N,EACAjO,KAAAlE,EAAAvC,YAAAoV,MACA/P,OAAA,WAAiC,OAAA4D,EAAAoM,SAAAC,gBAAAH,EAAAzO,MAAAa,SAIjC4H,SAGAvQ,KAAA,aACA6H,KAAAlE,EAAAvC,YAAAuV,QACAlQ,OAAA,WAAiC,OAAA4D,EAAAJ,KAAA+B,WAAAY,WAAAgK,iBAAAC,YAIjC7W,KAAA,YACA6H,KAAAlE,EAAAvC,YAAAuV,QACAlQ,OAAA,WAAiC,OAAA4D,EAAAJ,KAAA+B,WAAAY,WAAAkK,OAAAD,YAKjC7W,KAAA,eACA6H,KAAAlE,EAAAvC,YAAA2V,MACAtQ,OAAA,WAAiC,OAAA4D,EAAAJ,KAAA4B,OAAAC,UAKjC9L,KAAA,cACA6H,KAAAlE,EAAAvC,YAAA2V,MACAtQ,OAAA,WAAiC,OAAA4D,EAAAJ,KAAA4B,OAAAE,SAKjC/L,KAAA,WACA6H,KAAAlE,EAAAvC,YAAA4V,IACAvQ,OAAA,WAAiC,OAAA4D,EAAAJ,KAAAwB,WAAA5J,MAAAwI,EAAAJ,KAAAwB,WAAA3J,WAKjC9B,KAAA,aACA6H,KAAAlE,EAAAvC,YAAAyU,IACApP,OAAA,WAAiC,OAAA4D,EAAAJ,KAAAkB,gBAKjC8L,GA1IAf,EA0IAT,EAAAnO,mBAzIA6O,EAAA,IAAA7R,IACA8R,EAAA,KACAC,EAAA,EACAH,EAAAvP,QAAA,SAAA4P,GACA,IAAA5O,EAAA4O,EAAA5O,MACA0G,EAAAkI,EAAA3O,WACAC,EAAA0O,EAAA1O,KACAqP,EAAAf,EAAA5V,IAAAoH,GACA0O,EAAA7T,KAAA2U,IAAAxP,EAAA0O,GACAa,IACAA,EAAA,IAAA5S,IACA6R,EAAAjJ,IAAAvF,EAAAuP,IAEA,QAAAzX,EAAA4O,EAAAhI,EAAAgI,EAAAxG,EAA+CpI,EAAA4G,IAAS5G,EACxDyX,EAAAhK,IAAAzN,GAAA,KAGA0W,EAAAxP,QAAA,SAAAuQ,EAAAvP,GACAuP,EAAA3W,IAAA,KACA6V,GAAAzO,EAAAhE,EAAAzC,mBAAA2U,MACAqB,EAAA3W,IAAA,KACA6V,GAAAzO,EAAAhE,EAAAzC,mBAAA8V,MACAE,EAAA3W,IAAA,KACA6V,GAAAzO,EAAAhE,EAAAzC,mBAAA6V,QACAG,EAAA3W,IAAA,KACA6V,GAAAzO,EAAAhE,EAAAzC,mBAAA0U,SAIAQ,IACAA,GAAAC,EAAA,MAEAD,GA0GAgB,IAIAzP,MAAAsP,EAAA,GACArP,WAAAqP,EAAA,GACAjX,KAAA,UACA6H,KAAAlE,EAAAxC,sBAAA0U,IACApP,OAAA,SAAAvG,GAAkC,OAAAA,EAAAmJ,OAAA,QAIlCgB,EAAAgN,gBAAAD,EAAA,GACA,IAWA7P,IAPAvH,KAAA,WACA6H,KAAAlE,EAAAtC,oBAAAwU,IAEApP,OAAA,WAAiC,aAKjC8J,OAAAkF,EAAAlO,kBACAuK,IAAAqD,GACAjP,EAAAoQ,EACA/F,OAAAkF,EAAAvP,UACA4L,IAAAwD,GAIA,OACAhO,mBAJA8P,EACA7G,OAAAkF,EAAAnO,oBACAmH,KAAA8G,GAGArP,WACAqB,mDCjMApH,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAgDAiE,EAAA4S,EAhDA5T,EAAAnE,EAAA,GACAoE,EAAApE,EAAA,GACAgY,IAAA7S,MACAf,EAAAvC,YAAAyU,KAAA,IACAnR,EAAAf,EAAAvC,YAAA4V,KAAA,KACAtS,EAAAf,EAAAvC,YAAA2V,OAAA,KACArS,EAAAf,EAAAvC,YAAAwU,MAAA,KACAlR,EAAAf,EAAAvC,YAAAoW,SAAA,YACA9S,EAAAf,EAAAvC,YAAAuV,SAAA,YACAjS,GACA+S,IAAAH,MACA3T,EAAAvC,YAAAyU,MAAA,GACAyB,EAAA3T,EAAAvC,YAAA4V,MAAA,KACAM,EAAA3T,EAAAvC,YAAA2V,QAAA,OACAO,EAAA3T,EAAAvC,YAAAwU,OAAA,SACA0B,EAAA3T,EAAAvC,YAAAoW,UAAA,mBACAF,EAAA3T,EAAAvC,YAAAuV,UAAA,iCACAW,GACA,SAAAI,EAAA3R,GACA,OACAX,KAAAmS,EAAAxR,EAAA8B,MACApH,MAAAgX,EAAA1R,EAAA8B,OA0BAhJ,EAAA8Y,sBAvBA,SAAAtN,EAAA5C,EAAAJ,EAAAuQ,EAAAC,GAEA,IAAAC,EAAAzN,EAAAlD,qBACA2Q,EAAAC,aAAAtQ,EACAqQ,EAAAE,eAAA3Q,EAEAyQ,EAAA5R,YAEA,QAAAzG,EAAA,EAAA4G,EAAAuR,EAAAtR,OAA+C7G,EAAA4G,IAAS5G,EAAA,CACxD,IAAAsG,EAAA6R,EAAAnY,GACAmH,EAAA8Q,EAAA3R,GACA+R,EAAA5R,SAAAH,EAAA/F,MAAA4G,EAGA,IAAAnH,EAAA,EAAA4G,EAAAwR,EAAAvR,OAAoD7G,EAAA4G,IAAS5G,EAAA,CAC7D,IAAAwY,EAAAJ,EAAApY,GACAqY,EAAA5R,SAAA+R,EAAAjY,OACAoF,KAAA6S,EAAA7S,KACA3E,MAAAwX,EAAAxX,OAGA,WAAAiD,EAAAwU,kBAAAJ,kCC9CA3X,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAiD,EAAAnE,EAAA,GAiEAV,EAAAsZ,sBA7DA,SAAAC,EAAA7Q,EAAAC,GAGA,IADA,IAAA6Q,KACA5Y,EAAA,EAAA4G,EAAAkB,EAAAjB,OAAkD7G,EAAA4G,IAAS5G,EAAA,CAC3D,IAAA6Y,EAAA/Q,EAAA9H,GACA4Y,EAAAnK,KAAA,IAAAqK,aAAAD,EAAA,KAAA9Q,EAAA4Q,IAIA,IACAI,EACApD,EACA3U,EACAgY,EAhBAzN,EAYA0N,EAAAnR,EAAAjB,OAKA,IAAA7G,EAAA,EAAA4G,EAAAmB,EAAsC/H,EAAA4G,IAAS5G,EAC/C,QAAAkZ,EAAA,EAAuBA,EAAAD,IAAUC,EAIjC,GAHAvD,EAAA7N,EAAAoR,GACAH,EAAAH,EAAAM,GACAlY,EAAA2U,EAAA3O,OAAAhH,GArBAuL,EAsBAvK,EArBA4C,MAAAuV,QAAA5N,EAAA,IA2BAyN,GAAA,OALA,QAAAI,EAAApZ,EAAA2V,EAAAvN,KAAAiR,EAAAD,EAAAzD,EAAAvN,KAAAwG,EAAA,EAAsFwK,EAAAC,IAAUD,IAAAxK,EAChGmK,EAAAK,GAAApY,EAAA4N,GAaA,IALAoK,GACAtM,QAAAC,KAAA,+EAIA3M,EAAA,EAAA4G,EAAAkB,EAAAjB,OAAkD7G,EAAA4G,IAAS5G,EAI3D,IAHA,IACAsZ,EADAxR,EAAA9H,GACA,KAAA+H,EAEAwR,GAAAL,EAAA,EAAAP,GAAuDO,EAAAK,IAAYL,EACnEN,EAAA5Y,GAAAwZ,WAAAF,EAAAJ,EAAA,EAAAI,GAKA,IAAAG,EAAAb,EAAA,GACA,IAAA5Y,EAAA,EAAA4G,EAAA+R,EAAgD3Y,EAAA4G,IAAS5G,EACzD,KAAA0Z,EAAA1Z,EAAA+H,EACA,IAAAmR,EAAA,EAAuBA,EAAAnR,IAAiBmR,EACxCO,EAAAP,EAAAQ,GAAA1Z,EAIA,IAAA6K,EAAA,IAAA5G,EAAA0V,eACA,IAAA3Z,EAAA,EAAA4G,EAAAkB,EAAAjB,OAAkD7G,EAAA4G,IAAS5G,EAAA,CAC3D,IAAA4Z,EAAA9R,EAAA9H,GACA4V,EAAA,IAAA3R,EAAA4V,gBAAAjB,EAAA5Y,GAAA4Z,EAAAxR,MACAwR,EAAAhE,oBACA/K,EAAAiP,aAAAF,EAAArZ,KAAAqV,GAEA,OAAA/K,iCChEA,IACArH,EADAC,EAAAxB,WAAAwB,YACAD,EAAA9C,OAAAgD,iBACUC,wBAAgBC,OAAA,SAAAtD,EAAAuD,GAAsCvD,EAAAqD,UAAAE,IAChE,SAAAvD,EAAAuD,GAAyB,QAAAtC,KAAAsC,IAAAvC,eAAAC,KAAAjB,EAAAiB,GAAAsC,EAAAtC,KACzB,SAAAjB,EAAAuD,GAEA,SAAAC,IAAuB7B,KAAA8B,YAAAzD,EADvBkD,EAAAlD,EAAAuD,GAEAvD,EAAAe,UAAA,OAAAwC,EAAAnD,OAAAsD,OAAAH,IAAAC,EAAAzC,UAAAwC,EAAAxC,UAAA,IAAAyC,KAGApD,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IACA+Y,EAAA,SAAAvV,GAEA,SAAAuV,IACA,cAAAvV,KAAAqM,MAAA5O,KAAAmH,YAAAnH,KAUA,OAZAwB,EAAAsW,EAAAvV,GAIAuV,EAAArX,YAAA,WACA,WAAAqX,GACA1X,OAAA,EACAD,MAAA,EACAF,EAAA,EACAC,EAAA,KAGA4X,EAbA,CADAja,EAAA,GAeCiC,QACD3C,EAAA2a,2CC3BArZ,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAiD,EAAAnE,EAAA,GACAka,EAAAla,EAAA,IACAuL,EAAAvL,EAAA,IACAma,EAAAna,EAAA,IACAoa,EAAApa,EAAA,IAqEAV,EAAA+a,qBA1DA,SAAApI,GAKA,IAAA1P,EAAA0P,EAAAV,OAAAhP,OACAD,EAAA2P,EAAAV,OAAAjP,MAEAiL,GACA+M,YAFAhY,EAAAC,EAGAG,QAAAH,EAAA,EACAiL,IAAA,IACAhL,MAAAF,EAAA,EACAmL,MAAA,IACA9K,MAAAL,EAAA,EACAG,IAAAF,EAAA,EACAgY,SAAAhY,GAEAiY,EAAA,IAAAjP,EAAAiE,WACAgL,EAAAnN,WAAA,IAAAlJ,EAAAsW,mBAAAlN,EAAA/K,KAAA+K,EAAA5K,MAAA4K,EAAA9K,IAAA8K,EAAA7K,OAAA6K,EAAAE,KAAAF,EAAAC,KACAgN,EAAAnN,WAAAb,MAAAmB,IAAA,QACA6M,EAAAnN,WAAAK,SAAAC,IAAA,UACA6M,EAAAnN,WAAAS,mBAAA,GACA0M,EAAAnN,WAAAQ,eACA2M,EAAAnN,sBAAAlJ,EAAAsW,oBACAD,EAAAnN,WAAAU,yBAGA,IAAA2M,EAAA,IAAAR,EAAAjJ,YAEA0J,GACAjY,OAAA,EACAF,KAAA,EACAG,MAAA,EACAF,IAAA,GAGAmY,EAAA,IAAAR,EAAAzO,MACAW,OAAAoO,EACAtR,IAAAgR,EAAAzO,KAAAqC,gBACAvB,WAAA+N,EACAjN,SAAAoN,IAGAE,EAAA,IAAAV,EAAAhM,OACA/E,IAAA+Q,EAAAhM,MAAAgB,iBACAqC,WAIA,OADAqJ,EAAAjM,QAAAgM,IAEAtO,OAAAoO,EACAI,MAAAD,EACAnQ,KAAAkQ,EACAnO,WAAA+N,EACAjN,SAAAoN,kCCvEA/Z,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAA6Z,EAAA,IAIAzb,EAAA0b,6BAHA,WACA,sBAMA1b,EAAA2b,4BAHA,SAAAnM,GACA,SAAAiM,EAAAjM,EAAAvL,SAAA,mCCPA3C,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C5B,EAAA4b,cACAC,mBAAA,qBACAxE,WAAA,aACAyE,kBAAA,oBACAC,mBAAA,qBACAC,uBAAA,yBACAC,sBAAA,wBACAC,sBAAA,wBACAC,kBAAA,oBACAC,4BAAA,8BACArD,cAAA,gBACAsD,kBAAA,oBACAjM,OAAA,SACAkM,YAAA,cACA5T,iBAAA,kDCfA,SAAAgC,EAAA1J,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAEAb,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C8I,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,mCCLA,IAoCAuR,EApCAsK,EAAA1Z,WAAA0Z,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,WAAAD,MAAAE,UAAA,SAAAjV,EAAAkV,GACA,SAAAC,EAAAlb,GAAmC,IAAMmb,EAAAJ,EAAAK,KAAApb,IAA+B,MAAAqb,GAAYJ,EAAAI,IACpF,SAAAC,EAAAtb,GAAkC,IAAMmb,EAAAJ,EAAA,MAAA/a,IAAmC,MAAAqb,GAAYJ,EAAAI,IACvF,SAAAF,EAAAI,GAA+BA,EAAAC,KAAAzV,EAAAwV,EAAAvb,OAAA,IAAA8a,EAAA,SAAA/U,GAAiEA,EAAAwV,EAAAvb,SAAyByb,KAAAP,EAAAI,GACzHH,GAAAJ,IAAAlL,MAAA+K,EAAAC,QAAAO,WAGAM,EAAAza,WAAAya,aAAA,SAAAd,EAAAe,GACA,IAAwGC,EAAAza,EAAA0a,EAAAC,EAAxGC,GAAa5N,MAAA,EAAA6N,KAAA,WAA6B,KAAAH,EAAA,SAAAA,EAAA,GAA0B,OAAAA,EAAA,IAAeI,QAAAC,QACnF,OAAAJ,GAAgBV,KAAAe,EAAA,GAAAC,MAAAD,EAAA,GAAAE,OAAAF,EAAA,IAAqD,mBAAAG,SAAAR,EAAAQ,OAAAC,UAAA,WAAoE,OAAAtb,OAAe6a,EACxJ,SAAAK,EAAAlc,GAAsB,gBAAAqR,GAAsB,OAC5C,SAAAkL,GACA,GAAAZ,EAAA,UAAAa,UAAA,mCACA,KAAAV,GAAA,IACA,GAAAH,EAAA,EAAAza,IAAA0a,EAAA1a,EAAA,EAAAqb,EAAA,YAAAA,EAAA,uBAAAX,IAAA1c,KAAAgC,EAAAqb,EAAA,KAAAhB,KAAA,OAAAK,EAEA,OADA1a,EAAA,EAAA0a,IAAAW,GAAA,EAAAX,EAAA7b,QACAwc,EAAA,IACA,cAAAX,EAAAW,EAAuC,MACvC,OAAkC,OAAlCT,EAAA5N,SAA2CnO,MAAAwc,EAAA,GAAAhB,MAAA,GAC3C,OAAAO,EAAA5N,QAAkChN,EAAAqb,EAAA,GAAWA,GAAA,GAAU,SACvD,OAAAA,EAAAT,EAAAG,IAAAQ,MAAyCX,EAAAE,KAAAS,MAAc,SACvD,QACA,KAAAb,KAAAE,EAAAE,MAAApW,OAAA,GAAAgW,IAAAhW,OAAA,UAAA2W,EAAA,QAAAA,EAAA,KAA6GT,EAAA,EAAO,SACpH,OAAAS,EAAA,MAAAX,GAAAW,EAAA,GAAAX,EAAA,IAAAW,EAAA,GAAAX,EAAA,KAAgFE,EAAA5N,MAAAqO,EAAA,GAAiB,MACjG,OAAAA,EAAA,IAAAT,EAAA5N,MAAA0N,EAAA,IAAwDE,EAAA5N,MAAA0N,EAAA,GAAgBA,EAAAW,EAAQ,MAChF,GAAAX,GAAAE,EAAA5N,MAAA0N,EAAA,IAA8CE,EAAA5N,MAAA0N,EAAA,GAAgBE,EAAAG,IAAAzO,KAAA+O,GAAgB,MAC9EX,EAAA,IAAAE,EAAAG,IAAAQ,MACAX,EAAAE,KAAAS,MAAiC,SAEjCF,EAAAb,EAAAxc,KAAAyb,EAAAmB,GACS,MAAAV,GAAYmB,GAAA,EAAAnB,GAAala,EAAA,EAAS,QAAUya,EAAAC,EAAA,EACrD,KAAAW,EAAA,SAAAA,EAAA,GAAmC,OAASxc,MAAAwc,EAAA,GAAAA,EAAA,UAAAhB,MAAA,GArBAL,EAAAlb,EAAAqR,OAwB5C5R,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAE9C,IACA2c,EAAA5a,KAAA4a,MAAAjG,EAAA3U,KAAA2U,IAAAkG,EAAA7a,KAAA6a,IACAC,EAAA,WACA,SAAAA,KAiRA,OA5QAA,EAAAC,aAAA,WACA,OAAAnC,EAAA1Z,UAAA,oBACA,OAAAya,EAAAza,KAAA,SAAAgD,GACA,OAAAA,EAAAkK,OACA,OACA,OAAAkC,GAAA,MACApP,KAAA8b,cACA,MAAA/B,QAAA,SAAAjV,GAA6E,OAAAiX,WAAAjX,EAAA,QAC7E,OAEA,OADA9B,EAAA+X,QACA,KACA,uBAcAa,EAAAI,mBAAA,SAAAjH,EAAA3H,EAAA6O,GAGAA,GACAjc,KAAAkc,sBAAAnH,GAGA,IAAA7H,EAAA6H,EAAA7H,MAEAiP,EAAA/O,GAAA2H,EAAA3H,aAAA,EAEApN,KAAAoc,UAAAlP,EAAA6H,EAAAsH,cAAAjN,EAAA+M,GAEA,IAAAnZ,EAAAhD,KAAAsc,gBAAAlN,GAAAmN,EAAAvZ,EAAAuZ,KAAAC,EAAAxZ,EAAAwZ,KAAAC,EAAAzZ,EAAAyZ,KAAAC,EAAA1Z,EAAA0Z,KAEA3H,EAAA4H,cAAA5H,EAAA4H,gBACAC,SAAsBxc,OAAA,EAAAD,MAAA,GACtB+J,OAAoB9J,OAAA,EAAAD,MAAA,IAGpB8b,GAUAlH,EAAA4H,cAAAC,SACAxc,OAAAsc,EAAAF,EACArc,MAAAsc,EAAAF,GAEAxH,EAAA4H,cAAAvN,OAAApP,KAAA6c,oBAAA9H,EAAAyH,EAAAD,GACAvc,KAAAgc,mBAAAjH,EAAA,OAbAA,EAAA4H,cAAAzS,OACA9J,OAAAsc,EAAAF,EACArc,MAAAsc,EAAAF,IAkBAX,EAAAM,sBAAA,SAAAnH,GACA,IAAA7H,EAAA6H,EAAA7H,MACA4P,EAAA5P,EAAA4P,SAEA,GAAAA,EAAA,CAKA9c,KAAAoc,UAAAlP,IAAA6P,KAAA3N,EAAA,GAEA,IAAA4N,EAAAhd,KAAAsc,gBAAAlN,GAEA,GAAA4N,EAAAP,KAAAO,EAAAT,MAAAO,EACA/H,EAAAsH,cAAAnP,EAAA6P,SADA,CAaA,IAPA,IAAAA,EAAA7P,EAAA6P,KACA1c,EAAA,EACAG,EAAAuc,EAAAnY,OACAqY,EAAAvB,GAAAlb,EAAAH,GAAA,GACA6c,EAAA,EAGA1c,EAAAH,GAAA,IAAA4c,GAAAC,IAFA,IAEA,CAEAld,KAAAoc,UAAAlP,EAAA6P,EAAAI,OAAA,EAAAF,GAAA,MAAA7N,EAAA,GACA,IAAApM,EAAAhD,KAAAsc,gBAAAlN,GAAAmN,EAAAvZ,EAAAuZ,KAAAvZ,EAAAyZ,KAEAF,GAAAO,EACAzc,EAAA4c,EAIAzc,EAAAyc,EAGA,IAAAG,EAAA1B,GAAAlb,EAAAH,GAAA,GAAAA,EAEA,GAAA+c,IAAAH,EACA,MAGAA,EAAAG,EAIArI,EAAAsH,cADA,IAAAY,EACA,MAIAF,EAAAI,OAAA,EAAAF,GAAA,YAhDAlI,EAAAsH,cAAAnP,EAAA6P,MAuDAnB,EAAAiB,oBAAA,SAAA9H,EAAAzU,EAAAD,GACA,IAAAgd,EAAAlL,SAAAmL,cAAA,UACAxN,EAAAuN,EAAAvB,WAAA,MACA,GAAAhM,EAAA,CACA,IAAA8M,EAAA7H,EAAA4H,cAAAC,QACAS,EAAAld,MAAAyc,EAAAzc,MACAkd,EAAAjd,OAAAwc,EAAAxc,OACA0P,EAAAyN,uBAAA,EAEAzN,EAAA0N,UAAApO,SAAA/O,EAAAC,EAAAsc,EAAAzc,MAAAyc,EAAAxc,OAAA,IAAAwc,EAAAzc,MAAAyc,EAAAxc,aAGAqK,QAAAC,KAAA,6EAEA,OAAA2S,GAKAzB,EAAAQ,UAAA,SAAAlP,EAAA6P,EAAA3N,EAAA+M,GAEA,IAAAsB,EAAAzd,KAAA0d,8BAAAxQ,EAAAiP,GAEA/M,EAAAuO,UAAA,QAEAvO,EAAAwO,KAAA5d,KAAA6d,YAAA3Q,EAAAiP,GAIA/M,SAAAjP,MAAAiP,EAAA0O,YAAA5Q,EAAA6P,MAAA5c,MAAAsd,EAGArO,SAAAhP,OAAA,EAAAqd,EAGArO,EAAAuO,UAAA,QAEAvO,EAAAwO,KAAA5d,KAAA6d,YAAA3Q,EAAAiP,GAEA/M,EAAA2O,SAAAhB,EAAAU,EAAA,EAAAA,EAAA,EAAAA,IAKA7B,EAAAE,WAAA,WAIA,OAHA1M,IACAA,EAAA+C,SAAAmL,cAAA,UAAAxB,WAAA,OAEA1M,GAMAwM,EAAA8B,8BAAA,SAAAxQ,EAAAE,GACA,OAAAF,EAAAuQ,SAAArQ,GAKAwO,EAAAiC,YAAA,SAAA3Q,EAAAE,GACA,OAAAF,EAAA8Q,WAAA,IAAAhe,KAAA0d,8BAAAxQ,EAAAE,GAAA,MAAAF,EAAA+Q,YAKArC,EAAAU,gBAAA,SAAAlN,GAQA,IAPA,IAAApM,EAAAoM,SAAAjP,EAAA6C,EAAA7C,MAAAC,EAAA4C,EAAA5C,OACA8d,EAAA9O,EAAA+O,aAAA,IAAAhe,EAAAC,GAAAsE,KAEA8X,EAAA4B,OAAAC,iBACA9B,EAAA6B,OAAAC,iBACA5B,EAAA2B,OAAAE,iBACA5B,EAAA0B,OAAAE,iBACAvgB,EAAA,EAAuBA,EAAAoC,IAAWpC,EAClC,QAAAkZ,EAAA,EAA2BA,EAAA7W,IAAY6W,EAAA,CAEvCiH,EADAjH,GAAA,EAAA9W,GAAA,EAAApC,GAEA,IACAye,EAAAb,EAAAa,EAAAvF,GACAsF,EAAAZ,EAAAY,EAAAxe,GACA0e,EAAAhH,EAAAgH,EAAA1e,GACA2e,EAAAjH,EAAAiH,EAAAzF,IAWA,OALAyF,GAAA,EACAD,GAAA,EACAF,GAAA,EACAC,EAAA/G,EAJA+G,GAAA,EAIA,IAEgBD,KADhBA,EAAA9G,EAAA8G,EAAA,GACgBC,OAAAC,OAAAC,SAKhBd,EAAA2C,OAAA,SAAAxJ,GACA,OAAA2E,EAAA1Z,UAAA,oBACA,OAAAya,EAAAza,KAAA,SAAAgD,GACA,OAAAA,EAAAkK,OACA,OAEA,SAAAlN,KAAA6b,gBACA,OAIA,OAFA7Y,EAAA+X,OAEAhG,EAAA7H,MAAAuQ,SApPA,IAqPAhT,QAAAC,KAAA,4CACA,EAAAqK,KAIA/U,KAAAgc,mBAAAjH,IAAA3H,aAAA,IACA,EAAA2H,UAQA6G,EAAA4C,WAAA,SAAAzJ,GAGA,OADA/U,KAAA8b,aACA1M,EAKA2F,EAAA7H,MAAAuQ,SA3QA,IA4QAhT,QAAAC,KAAA,2CACAqK,IAIA/U,KAAAgc,mBAAAjH,IAAA3H,aAAA,GACA2H,IAXAtK,QAAAC,KAAA,gFACAqK,IAYA6G,EAlRA,GAoRAze,EAAAye,gDC3TA,IACAra,EADAC,EAAAxB,WAAAwB,YACAD,EAAA9C,OAAAgD,iBACUC,wBAAgBC,OAAA,SAAAtD,EAAAuD,GAAsCvD,EAAAqD,UAAAE,IAChE,SAAAvD,EAAAuD,GAAyB,QAAAtC,KAAAsC,IAAAvC,eAAAC,KAAAjB,EAAAiB,GAAAsC,EAAAtC,KACzB,SAAAjB,EAAAuD,GAEA,SAAAC,IAAuB7B,KAAA8B,YAAAzD,EADvBkD,EAAAlD,EAAAuD,GAEAvD,EAAAe,UAAA,OAAAwC,EAAAnD,OAAAsD,OAAAH,IAAAC,EAAAzC,UAAAwC,EAAAxC,UAAA,IAAAyC,KAGApD,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IACA0f,EAAA,SAAAlc,GAEA,SAAAkc,EAAAC,GACA,IAAAjc,EAAAF,EAAArE,KAAA8B,YAEA,OADAyC,EAAAic,QACAjc,EAEA,OANAjB,EAAAid,EAAAlc,GAMAkc,EAPA,CADA5gB,EAAA,IASCsP,mBACDhQ,EAAAshB,mDCrBA,IAAA/E,EAAA1Z,WAAA0Z,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,WAAAD,MAAAE,UAAA,SAAAjV,EAAAkV,GACA,SAAAC,EAAAlb,GAAmC,IAAMmb,EAAAJ,EAAAK,KAAApb,IAA+B,MAAAqb,GAAYJ,EAAAI,IACpF,SAAAC,EAAAtb,GAAkC,IAAMmb,EAAAJ,EAAA,MAAA/a,IAAmC,MAAAqb,GAAYJ,EAAAI,IACvF,SAAAF,EAAAI,GAA+BA,EAAAC,KAAAzV,EAAAwV,EAAAvb,OAAA,IAAA8a,EAAA,SAAA/U,GAAiEA,EAAAwV,EAAAvb,SAAyByb,KAAAP,EAAAI,GACzHH,GAAAJ,IAAAlL,MAAA+K,EAAAC,QAAAO,WAGAM,EAAAza,WAAAya,aAAA,SAAAd,EAAAe,GACA,IAAwGC,EAAAza,EAAA0a,EAAAC,EAAxGC,GAAa5N,MAAA,EAAA6N,KAAA,WAA6B,KAAAH,EAAA,SAAAA,EAAA,GAA0B,OAAAA,EAAA,IAAeI,QAAAC,QACnF,OAAAJ,GAAgBV,KAAAe,EAAA,GAAAC,MAAAD,EAAA,GAAAE,OAAAF,EAAA,IAAqD,mBAAAG,SAAAR,EAAAQ,OAAAC,UAAA,WAAoE,OAAAtb,OAAe6a,EACxJ,SAAAK,EAAAlc,GAAsB,gBAAAqR,GAAsB,OAC5C,SAAAkL,GACA,GAAAZ,EAAA,UAAAa,UAAA,mCACA,KAAAV,GAAA,IACA,GAAAH,EAAA,EAAAza,IAAA0a,EAAA1a,EAAA,EAAAqb,EAAA,YAAAA,EAAA,uBAAAX,IAAA1c,KAAAgC,EAAAqb,EAAA,KAAAhB,KAAA,OAAAK,EAEA,OADA1a,EAAA,EAAA0a,IAAAW,GAAA,EAAAX,EAAA7b,QACAwc,EAAA,IACA,cAAAX,EAAAW,EAAuC,MACvC,OAAkC,OAAlCT,EAAA5N,SAA2CnO,MAAAwc,EAAA,GAAAhB,MAAA,GAC3C,OAAAO,EAAA5N,QAAkChN,EAAAqb,EAAA,GAAWA,GAAA,GAAU,SACvD,OAAAA,EAAAT,EAAAG,IAAAQ,MAAyCX,EAAAE,KAAAS,MAAc,SACvD,QACA,KAAAb,KAAAE,EAAAE,MAAApW,OAAA,GAAAgW,IAAAhW,OAAA,UAAA2W,EAAA,QAAAA,EAAA,KAA6GT,EAAA,EAAO,SACpH,OAAAS,EAAA,MAAAX,GAAAW,EAAA,GAAAX,EAAA,IAAAW,EAAA,GAAAX,EAAA,KAAgFE,EAAA5N,MAAAqO,EAAA,GAAiB,MACjG,OAAAA,EAAA,IAAAT,EAAA5N,MAAA0N,EAAA,IAAwDE,EAAA5N,MAAA0N,EAAA,GAAgBA,EAAAW,EAAQ,MAChF,GAAAX,GAAAE,EAAA5N,MAAA0N,EAAA,IAA8CE,EAAA5N,MAAA0N,EAAA,GAAgBE,EAAAG,IAAAzO,KAAA+O,GAAgB,MAC9EX,EAAA,IAAAE,EAAAG,IAAAQ,MACAX,EAAAE,KAAAS,MAAiC,SAEjCF,EAAAb,EAAAxc,KAAAyb,EAAAmB,GACS,MAAAV,GAAYmB,GAAA,EAAAnB,GAAala,EAAA,EAAS,QAAUya,EAAAC,EAAA,EACrD,KAAAW,EAAA,SAAAA,EAAA,GAAmC,OAASxc,MAAAwc,EAAA,GAAAA,EAAA,UAAAhB,MAAA,GArBAL,EAAAlb,EAAAqR,OAwB5C5R,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAE9C,IAIA4f,EAAA,WACA,SAAAA,KA8DA,OAzDAA,EAAA9C,aAAA,SAAAzM,GACA,OAAAsK,EAAA1Z,UAAA,oBACA,IAAA5B,EAAAwgB,EACA,OAAAnE,EAAAza,KAAA,SAAAgD,GACA,OAAAA,EAAAkK,OACA,OACA9O,EAAAgR,EAAA0M,WAAA,MAAA8C,EAAA,EACA5b,EAAAkK,MAAA,EACA,OACA,OAAAlE,QAAA5K,IAAAwgB,EAAA,KACA,MAAA7E,QAAA,SAAAjV,GAA6E,OAAAiX,WAAAjX,EAAA,QAD7E,KAEA,OACA9B,EAAA+X,OACA/X,EAAAkK,MAAA,EACA,OAEA,OADA9O,EAAAgR,EAAA0M,WAAA,QAAA8C,GACA,KACA,uBAQAD,EAAAE,QAAA,SAAAC,GACA,cAAAhe,KAAA4a,MAAA,IAAAoD,EAAAhgB,GAAA,KAAAgC,KAAA4a,MAAA,IAAAoD,EAAAjE,GAAA,KAAA/Z,KAAA4a,MAAA,IAAAoD,EAAAld,GAAA,KAAAkd,EAAAC,QAAA,KAEAJ,EAAAJ,OAAA,SAAAxJ,GACA,OAAA2E,EAAA1Z,UAAA,oBACA,IAAAoP,EAAAU,EACA,OAAA2K,EAAAza,KAAA,SAAAgD,GACA,OAAAA,EAAAkK,OACA,OAGA,OAFAkC,EAAA+C,SAAAmL,cAAA,UACAxN,EAAAV,EAAA0M,WAAA,OACA,EAAA9b,KAAA6b,aAAAzM,IACA,OAeA,OAdApM,EAAA+X,OACAjL,GACAV,EAAAjP,MAlDA,EAmDAiP,EAAAhP,OAnDA,EAoDA0P,EAAAyN,uBAAA,EACAzN,EAAA6N,UAAA3d,KAAA6e,QAAA9J,EAAA+J,OAEAhP,EAAAkP,SAAA,IAvDA,KAyDAjK,EAAA4H,cAAAvN,UAGA3E,QAAAC,KAAA,gFAEA,EAAAqK,SAKA4J,EA/DA,GAiEAxhB,EAAAwhB,gDC1GA,IACApd,EADAC,EAAAxB,WAAAwB,YACAD,EAAA9C,OAAAgD,iBACUC,wBAAgBC,OAAA,SAAAtD,EAAAuD,GAAsCvD,EAAAqD,UAAAE,IAChE,SAAAvD,EAAAuD,GAAyB,QAAAtC,KAAAsC,IAAAvC,eAAAC,KAAAjB,EAAAiB,GAAAsC,EAAAtC,KACzB,SAAAjB,EAAAuD,GAEA,SAAAC,IAAuB7B,KAAA8B,YAAAzD,EADvBkD,EAAAlD,EAAAuD,GAEAvD,EAAAe,UAAA,OAAAwC,EAAAnD,OAAAsD,OAAAH,IAAAC,EAAAzC,UAAAwC,EAAAxC,UAAA,IAAAyC,KAGApD,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IACAkgB,EAAA,SAAA1c,GAEA,SAAA0c,EAAAH,GACA,IAAArc,EAAAF,EAAArE,KAAA8B,YAEA,OADAyC,EAAAqc,QACArc,EAEA,OANAjB,EAAAyd,EAAA1c,GAMA0c,EAPA,CADAphB,EAAA,IASCsP,mBACDhQ,EAAA8hB,mDCrBAxgB,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAI9C,IAAAmgB,EAAA,WA2BA,OA1BA,WAEAlf,KAAAmY,YAAA,EAEAnY,KAAAmf,iBAAA,GAEAnf,KAAAof,aAAA,KAEApf,KAAAqf,SAAwBpf,EAAA,EAAAC,EAAA,GAExBF,KAAAsf,SAAwBrf,EAAA,EAAAC,EAAA,GAExBF,KAAAuf,SAAwBtf,EAAA,EAAAC,EAAA,GAExBF,KAAAwf,SAAwBvf,EAAA,EAAAC,EAAA,GAExBF,KAAAyf,aAAA,EAEAzf,KAAA0f,cAAA,EAEA1f,KAAA2f,SAAA,EAEA3f,KAAA4f,WAAA,EAEA5f,KAAA6f,YAAA,GAzBA,GA6BA1iB,EAAA+hB,2CCjCA,IACA3d,EADAC,EAAAxB,WAAAwB,YACAD,EAAA9C,OAAAgD,iBACUC,wBAAgBC,OAAA,SAAAtD,EAAAuD,GAAsCvD,EAAAqD,UAAAE,IAChE,SAAAvD,EAAAuD,GAAyB,QAAAtC,KAAAsC,IAAAvC,eAAAC,KAAAjB,EAAAiB,GAAAsC,EAAAtC,KACzB,SAAAjB,EAAAuD,GAEA,SAAAC,IAAuB7B,KAAA8B,YAAAzD,EADvBkD,EAAAlD,EAAAuD,GAEAvD,EAAAe,UAAA,OAAAwC,EAAAnD,OAAAsD,OAAAH,IAAAC,EAAAzC,UAAAwC,EAAAxC,UAAA,IAAAyC,KAGApD,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAiD,EAAAnE,EAAA,GACAsE,EAAAtE,EAAA,IACAiiB,EAAAjiB,EAAA,IACAkiB,EAAAliB,EAAA,KASA,SAAAmiB,GACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,cACAA,IAAA,cACAA,IAAA,cACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,oBAZA,CAaC7iB,EAAA6iB,YAAA7iB,EAAA6iB,eAKD,IAAAC,EAAA,SAAA1d,GAEA,SAAA0d,EAAAlgB,GACA,IAAA0C,EAAAF,EAAArE,KAAA8B,KAAAD,IAAAC,KAMAyC,EAAAyd,eAAA,IAAAtd,IACA,IAAAwM,EAAA+C,SAAAmL,cAAA,UAQA,OAPA7a,EAAAtC,MAAAiP,EAAAjP,MAAAJ,EAAAI,MACAsC,EAAArC,OAAAgP,EAAAhP,OAAAL,EAAAK,OACAqC,EAAA0d,gBAAApgB,EAAAogB,gBAEA1d,EAAA2d,QAAA,IAAAN,EAAAO,SAAA,IAAAtgB,EAAAI,MAAAJ,EAAAK,QAEAqC,EAAA6d,cAAAlR,GACA3M,EAoGA,OArHAjB,EAAAye,EAAA1d,GAsBA0d,EAAA7gB,UAAAmhB,mBAAA,SAAAxL,GACA,IAAAyL,GAAoBvgB,EAAA,EAAAC,EAAA,GACpB6U,EAAA6H,QAAAzE,YAAA,EACApD,EAAA6H,QAAA2C,QAAAiB,EACAzL,EAAA6H,QAAA4C,QAAAgB,EACAzL,EAAA6H,QAAAyC,QAAAmB,EACAzL,EAAA6H,QAAA0C,QAAAkB,EACAzL,EAAA6H,QAAAuC,iBAAA,GACApK,EAAA6H,QAAAgD,WAAA,EACA7K,EAAA6H,QAAAiD,YAAA,EACA9K,EAAA6H,QAAA+C,SAAA,GAKAM,EAAA7gB,UAAAqhB,WAAA,SAAAC,GACA1gB,KAAA0gB,WAOAT,EAAA7gB,UAAAuhB,iBAAA,SAAA5L,GACA,QAAA6L,IAAA5gB,KAAAkgB,eAAArhB,IAAAkW,GAAA,CACA,IAAAA,EAAA6H,UAAA7H,EAAA6H,QAAA+C,QAMA,OALA5K,EAAA6H,UACA7H,EAAA6H,QAAA,IAAAmD,EAAAb,YAEAnK,EAAA6H,QAAA+C,SAAA,EACA3f,KAAAkgB,eAAA1U,IAAAuJ,GAAA,IACA,EAGAtK,QAAAC,KAAA,eAAA1K,KAAA0H,GAAA,qLAAAqN,QAIAtK,QAAAC,KAAA,eAAA1K,KAAA0H,GAAA,kLAAAqN,GAEA,UAUAkL,EAAA7gB,UAAAyhB,eAAA,SAAA9L,GACA/U,KAAAkgB,eAAArhB,IAAAkW,IACA/U,KAAAkgB,eAAA1U,IAAAuJ,GAAA,GACA/U,KAAAugB,mBAAAxL,IAGAtK,QAAAC,KAAA,eAAA1K,KAAA0H,GAAA,oJAAAqN,IAWAkL,EAAA7gB,UAAAkhB,cAAA,SAAAlR,GACA,GAAApP,KAAA4c,QAAA,CACA,IAAAkE,EAAA9gB,KAAA4c,QAAA8B,MACA1e,KAAA4c,QAAAmE,UACA/gB,KAAA4c,QAAA,IAAA5a,EAAAgf,QAAAF,QAGA9gB,KAAA4c,QAAA,IAAA5a,EAAAgf,QAAA5R,GAGApP,KAAA4c,QAAAqE,iBAAA,EACAjhB,KAAA4c,QAAAsE,kBAAA,EACAlhB,KAAAmgB,iBAAA1hB,OAAAqE,OAAA9C,KAAA4c,QAAA5c,KAAAmgB,iBACAngB,KAAA4c,QAAAuE,aAAA,GAQAlB,EAAA7gB,UAAA6E,QAAA,WACA,IAAAxB,EAAAzC,KACAA,KAAA4c,QAAAmE,UACA/gB,KAAAkgB,eAAAjb,QAAA,SAAA0a,EAAA5K,GACAtS,EAAA8d,mBAAAxL,MAGAkL,EAtHA,CAuHC9d,EAAA0E,eACD1J,EAAA8iB,0BClKA,SAAAmB,GA+JA,SAAAC,IACA,IAAAviB,EACA,IACAA,EAAA3B,EAAAmkB,QAAAC,MACG,MAAAnH,IAOH,OAJAtb,QAAA,IAAAsiB,GAAA,QAAAA,IACAtiB,EAAAsiB,EAAAI,IAAAC,OAGA3iB,GApKA3B,EAAAC,EAAAD,QAAAU,EAAA,KACA6jB,IAwHA,WAGA,uBAAAjX,SACAA,QAAAiX,KACAC,SAAAviB,UAAAwP,MAAA1Q,KAAAuM,QAAAiX,IAAAjX,QAAAtD,YA5HAhK,EAAAykB,WA+EA,SAAAC,GACA,IAAAC,EAAA9hB,KAAA8hB,UASA,GAPAD,EAAA,IAAAC,EAAA,SACA9hB,KAAA+hB,WACAD,EAAA,WACAD,EAAA,IACAC,EAAA,WACA,IAAA3kB,EAAA6kB,SAAAhiB,KAAAiiB,OAEAH,EAAA,OAEA,IAAA1jB,EAAA,UAAA4B,KAAA8e,MACA+C,EAAAhV,OAAA,IAAAzO,EAAA,kBAKA,IAAAuO,EAAA,EACAuV,EAAA,EACAL,EAAA,GAAA/T,QAAA,uBAAAC,GACA,OAAAA,GAEA,OAAAA,IAGAmU,IAJAvV,KAQAkV,EAAAhV,OAAAqV,EAAA,EAAA9jB,IA5GAjB,EAAAglB,KAqIA,SAAAC,GACA,IACA,MAAAA,EACAjlB,EAAAmkB,QAAAe,WAAA,SAEAllB,EAAAmkB,QAAAC,MAAAa,EAEG,MAAAhI,MA3IHjd,EAAAkkB,OACAlkB,EAAA2kB,UAgCA,WAIA,uBAAAtkB,eAAA4jB,SAAA,aAAA5jB,OAAA4jB,QAAA1d,KACA,SAIA,uBAAA4e,qBAAAC,WAAAD,UAAAC,UAAAC,cAAAzU,MAAA,yBACA,SAKA,0BAAAoE,mBAAAsQ,iBAAAtQ,SAAAsQ,gBAAAC,OAAAvQ,SAAAsQ,gBAAAC,MAAAC,kBAEA,oBAAAnlB,eAAAiN,UAAAjN,OAAAiN,QAAAmY,SAAAplB,OAAAiN,QAAAoY,WAAArlB,OAAAiN,QAAAqY,QAGA,oBAAAR,qBAAAC,WAAAD,UAAAC,UAAAC,cAAAzU,MAAA,mBAAAgV,SAAAC,OAAAC,GAAA,SAEA,oBAAAX,qBAAAC,WAAAD,UAAAC,UAAAC,cAAAzU,MAAA,uBArDA5Q,EAAAmkB,QAAA,oBAAA4B,aACA,IAAAA,OAAA5B,QACA4B,OAAA5B,QAAA6B,MAgLA,WACA,IACA,OAAA3lB,OAAA4lB,aACG,MAAAhJ,KAlLHiJ,GAMAlmB,EAAAmmB,QACA,sEACA,sEACA,sEACA,sEACA,sEACA,sEACA,sEACA,sEACA,sEACA,sEACA,6DAwCAnmB,EAAAomB,WAAApM,EAAA,SAAA9G,GACA,IACA,OAAAmT,KAAAC,UAAApT,GACG,MAAAqT,GACH,qCAAAA,EAAAC,UAqGAxmB,EAAAymB,OAAAvC,sDChLA5iB,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAoFAyU,EApFAqQ,EAAAhmB,EAAA,IACAimB,EAAAjmB,EAAA,GACA0jB,EAAA1jB,EAAA,GAAAA,CAAA,4BAEAkmB,EAAA,KAEAC,GAAA,IAEAC,EAAA,IAKAC,GAAA,SAUAC,EAAA,GACAC,EAAA,GACAC,EAAA,GACAC,EAAA,GA2DAnnB,EAAAqW,iBACAqQ,EAAAU,SACAhD,EAAA,iCACApkB,EAAAqW,iBA7DA,SAAA4G,GACA,IACAoK,EADAzT,EAAAqJ,EAEAqK,EAAA,EAYA,OAVA3jB,KAAA4jB,KAAAR,EAAA,MAAApjB,KAAA4jB,KAAAD,IACAP,EAAArX,OAAA,EAAAqX,EAAAtf,OAAA,SAEA4f,EAAAzT,EAAAyT,OAAAP,EAEAQ,EAAA1T,EAAA0T,OAAAR,EAAAE,EAAAD,EAAA,GAAAE,EAAAF,EAAA,GAAAG,EAAAH,EAAA,GAAAI,EAEAJ,EAAAS,QAAAF,GAEAP,EAAAzI,MACA,IAAAqI,EAAAc,SAAAJ,GAAAC,KAgDAZ,EAAAgB,OAAAhB,EAAAiB,SAAA,IACAvD,EAAA,+BACApkB,EAAAqW,iBA5CA,SAAA4G,GACA,IAAArJ,EAAAqJ,EACAoK,EAAAzT,EAAAyT,YACA5D,IAAA4D,IACAA,OAAA5D,IAAA7P,EAAAgU,YAAAhU,EAAAgU,YAAAhB,EAAA,GAEA,IAAAU,EAAA1T,EAAA0T,OASA,YARA7D,IAAA6D,IAEAA,OADA7D,IAAA7P,EAAAiU,YACAjU,EAAAiU,YAAAjB,GAGAhT,EAAAkU,aAAAlU,EAAAmU,QAAAlB,GAGA,IAAAF,EAAAc,SAAAJ,GAAAC,KA+BAZ,EAAAsB,QACA5D,EAAA,iCACApkB,EAAAqW,iBA/BA,SAAA4G,GACA,IAAArJ,EAAAqJ,EACAoK,EAAAzT,EAAAyT,OAAAC,EAAA1T,EAAA0T,YACA7D,IAAA4D,IACAA,OAAA5D,IAAA7P,EAAAgU,YAAAhU,EAAAgU,YAAAhB,EAAA,QAEAnD,IAAA6D,IAEAA,OADA7D,IAAA7P,EAAAiU,YACAjU,EAAAiU,YAAAjB,EAGAhT,EAAAkU,aAAAlU,EAAAmU,QAGA,IAAA7U,EAAA,IAAAyT,EAAAc,QAAAJ,GAAAC,GAEA,OADApU,EAAA+U,eAAA,KACA/U,KAkBAkR,EAAA,gCACApkB,EAAAqW,iBAxDA,SAAA4G,GACA,IAAArJ,EAAAqJ,EACA,WAAA0J,EAAAc,QAAA7T,EAAAyT,QAAAzT,EAAA0T,UAsFAtnB,EAAAyT,qBA3BA,SAAAwJ,EAAAiL,GACA,IAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAvmB,EAAAmmB,GAAAjL,EAAAsL,aAAAtL,EAAAsL,YAAA1e,QAAAoT,EAAApT,OAgBA,GAdAoT,IACAA,EAAA5c,OAAAmT,OAEAyJ,EAAAuL,OAAAvL,EAAAwL,OACAN,EAAAlL,EAAAuL,MACAJ,EAAAnL,EAAAwL,QAEAxL,EAAAyL,SAAAzL,EAAA0L,WACAR,EAAAlL,EAAAyL,QAAA1T,SAAAuI,KAAAqL,WACA5T,SAAAsQ,gBAAAsD,WACAR,EAAAnL,EAAA0L,QAAA3T,SAAAuI,KAAAsL,UACA7T,SAAAsQ,gBAAAuD,WAGA9mB,EAAA+mB,aACA,GACAT,GAAAtmB,EAAAgnB,WACAT,GAAAvmB,EAAAinB,UACAjnB,IAAA+mB,mBACS/mB,GAGT,OAAYe,EAAAqlB,EAAAE,EAAAtlB,EAAAqlB,EAAAE,kCCnIZhnB,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IA2E9C5B,EAAAipB,eA1EA,SAAAC,EAAAC,GA0DA,IAzDA,IAAAhM,GACAiM,eAAA,EACA/R,WAAA,IAAA7S,MACA6kB,aAAA,EACAhiB,SAAA,IAAA7C,OACK8kB,EAAAJ,EAAAK,oBAAAJ,EAAAD,EAAAM,iBAAAC,EAAAP,EAAAK,oBAAAJ,EAAAD,EAAAQ,mBAGLC,GACAC,MAAA,aACAC,MAAA,aACAC,MAAA,aACAC,MAAA,WACAC,MAAA,WACAC,MAAA,WACAC,MAAA,OACAC,MAAA,YACAC,MAAA,YACAC,MAAA,YACAC,MAAA,aACAC,MAAA,aACAC,MAAA,aACAC,MAAA,aACAC,MAAA,eACAC,KAAA,OACAC,KAAA,gBACAC,KAAA,QACAC,KAAA,iBACAC,KAAA,MACAC,KAAA,eACAC,KAAA,SAEA3T,GACAsS,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,MAAA,EACAC,KAAA,EACAC,KAAA,EACAC,KAAA,EACAC,KAAA,EACAC,KAAA,EACAC,KAAA,EACAC,KAAA,GAGArqB,EAAA,EAAmBA,EAAA0oB,IAAoB1oB,EAAA,CACvC,IAAAsG,EAAAgiB,EAAAgC,iBAAA/B,EAAAvoB,GACAsG,EAAAikB,SAAAxB,EAAAziB,EAAAX,MACA4W,EAAA9V,SAAAgI,KAAAnI,GACAiW,EAAAkM,cAAAniB,EAAA8B,KACA9B,EAAA8B,KAAA9B,EAAA8B,KAAAsO,EAAApQ,EAAAX,MAGA,IAAA3F,EAAA,EAAmBA,EAAA6oB,EAAsB7oB,IAAA,CACzC,IAAA2V,EAAA2S,EAAAkC,gBAAAjC,EAAAvoB,GACA2V,EAAA4U,SAAAxB,EAAApT,EAAAhQ,MACA4W,EAAA9F,WAAAhI,KAAAkH,GACA4G,EAAAiM,gBAAA7S,EAAAvN,KAEA,OAAAmU,GAGA,IAuBA+L,EAvBAmC,EAAA,WACA,SAAAA,KAOA,OALAA,EAAAC,oBAAA,EACAD,EAAAE,sBAAA,EACAF,EAAAG,eAAA,EACAH,EAAAI,iBAAA,EACAJ,EAAAK,iBAAA,EACAL,EARA,GAUArrB,EAAAqrB,aAaAnC,EAVA,WACA,IACA,IAAAjX,EAAA+C,SAAAmL,cAAA,UACA,OAAA9f,OAAAsrB,wBAAA1Z,EAAA0M,WAAA,UAAA1M,EAAA0M,WAAA,uBAEA,MAAA1B,GACA,UAIA2O,MAGAP,EAAAI,iBAAA,EACAJ,EAAAC,oBAAApC,EAAA2C,aAAA3C,EAAA4C,4BACAT,EAAAE,sBAAArC,EAAA2C,aAAA3C,EAAA6C,8BACAV,EAAAG,eAAAtC,EAAA2C,aAAA3C,EAAA8C,oBACAX,EAAAK,iBAAAxC,EAAA2C,aAAA3C,EAAAwC,iDC1GApqB,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAqqB,EAAAtoB,KAAAsoB,KACA,SAAAC,EAAAhpB,EAAAG,GACA,OACAH,EAAA,GAAAG,EAAA,GACAH,EAAA,GAAAG,EAAA,IAIA,SAAA8oB,EAAAjpB,EAAAgK,GACA,OACAhK,EAAA,GAAAgK,EACAhK,EAAA,GAAAgK,GAIA,SAAAkf,EAAAlpB,EAAAG,GACA,OACAH,EAAA,GAAAG,EAAA,GACAH,EAAA,GAAAG,EAAA,IAWA,SAAAgpB,EAAAnpB,EAAAG,GACA,OAAAH,EAAA,GAAAG,EAAA,GACAH,EAAA,GAAAG,EAAA,GAWA,SAAAipB,EAAAppB,EAAAG,GACA,OACAH,EAAA,GAAAG,EAAA,GACAH,EAAA,GAAAG,EAAA,GACAH,EAAA,GAAAG,EAAA,IAIA,SAAAkpB,EAAArpB,EAAAgK,GACA,OACAhK,EAAA,GAAAgK,EACAhK,EAAA,GAAAgK,EACAhK,EAAA,GAAAgK,GAIA,SAAAsf,EAAAtpB,EAAAG,GACA,OACAH,EAAA,GAAAG,EAAA,GACAH,EAAA,GAAAG,EAAA,GACAH,EAAA,GAAAG,EAAA,IAoBA,SAAAopB,EAAAvpB,EAAAG,GACA,OAAAH,EAAA,GAAAG,EAAA,GACAH,EAAA,GAAAG,EAAA,GACAH,EAAA,GAAAG,EAAA,GAGA,SAAAqpB,EAAAxpB,EAAAG,GACA,OACAH,EAAA,GAAAG,EAAA,GACAH,EAAA,GAAAG,EAAA,GACAH,EAAA,GAAAG,EAAA,GACAH,EAAA,GAAAG,EAAA,IAIA,SAAAspB,EAAAzpB,EAAAgK,GACA,OACAhK,EAAA,GAAAgK,EACAhK,EAAA,GAAAgK,EACAhK,EAAA,GAAAgK,EACAhK,EAAA,GAAAgK,GAIA,SAAA0f,EAAA1pB,EAAAG,GACA,OACAH,EAAA,GAAAG,EAAA,GACAH,EAAA,GAAAG,EAAA,GACAH,EAAA,GAAAG,EAAA,GACAH,EAAA,GAAAG,EAAA,IAaA,SAAAwpB,EAAA3pB,EAAAG,GACA,OAAAH,EAAA,GAAAG,EAAA,GACAH,EAAA,GAAAG,EAAA,GACAH,EAAA,GAAAG,EAAA,GACAH,EAAA,GAAAG,EAAA,GAzHArD,EAAAksB,OAOAlsB,EAAAmsB,SAOAnsB,EAAAosB,YAOApsB,EAAA8sB,UANA,SAAA5pB,EAAAG,GACA,OACAH,EAAA,GAAAG,EAAA,GACAH,EAAA,GAAAG,EAAA,KAQArD,EAAAqsB,OAIArsB,EAAA+sB,QAHA,SAAA9W,EAAAzO,EAAAiW,GACA,OAAA0O,EAAAD,EAAAE,EAAA5kB,EAAAyO,MAAAwH,IAMAzd,EAAAgtB,QAHA,SAAA/W,GACA,OAAAgW,EAAAI,EAAApW,OAUAjW,EAAAssB,OAQAtsB,EAAAusB,SAQAvsB,EAAAwsB,YAQAxsB,EAAAitB,UAPA,SAAA/pB,EAAAG,GACA,OACAH,EAAA,GAAAG,EAAA,GACAH,EAAA,GAAAG,EAAA,GACAH,EAAA,GAAAG,EAAA,KAOArD,EAAAktB,QAHA,SAAAjX,EAAAzO,EAAAiW,GACA,OAAA8O,EAAAD,EAAAE,EAAAhlB,EAAAyO,MAAAwH,IAMAzd,EAAAmtB,QAHA,SAAAlX,GACA,OAAAgW,EAAAQ,EAAAxW,OAQAjW,EAAAysB,OASAzsB,EAAA0sB,OASA1sB,EAAA2sB,SASA3sB,EAAA4sB,YASA5sB,EAAAotB,UARA,SAAAlqB,EAAAG,GACA,OACAH,EAAA,GAAAG,EAAA,GACAH,EAAA,GAAAG,EAAA,GACAH,EAAA,GAAAG,EAAA,GACAH,EAAA,GAAAG,EAAA,KAUArD,EAAA6sB,OAIA7sB,EAAAqtB,QAHA,SAAApX,EAAAzO,EAAAiW,GACA,OAAAkP,EAAAD,EAAAE,EAAAplB,EAAAyO,MAAAwH,IAMAzd,EAAAstB,QAHA,SAAArX,GACA,OAAAgW,EAAAY,EAAA5W,qCCzIA,SAAAvL,EAAA1J,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAEAb,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C8I,EAAAhK,EAAA,MACAgK,EAAAhK,EAAA,mCCLA,IACA0D,EADAC,EAAAxB,WAAAwB,YACAD,EAAA9C,OAAAgD,iBACUC,wBAAgBC,OAAA,SAAAtD,EAAAuD,GAAsCvD,EAAAqD,UAAAE,IAChE,SAAAvD,EAAAuD,GAAyB,QAAAtC,KAAAsC,IAAAvC,eAAAC,KAAAjB,EAAAiB,GAAAsC,EAAAtC,KACzB,SAAAjB,EAAAuD,GAEA,SAAAC,IAAuB7B,KAAA8B,YAAAzD,EADvBkD,EAAAlD,EAAAuD,GAEAvD,EAAAe,UAAA,OAAAwC,EAAAnD,OAAAsD,OAAAH,IAAAC,EAAAzC,UAAAwC,EAAAxC,UAAA,IAAAyC,KAGApD,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAGA2rB,EAHAvhB,EAAAtL,EAAA,GACA8sB,EAAA9sB,EAAA,IACAqE,EAAArE,EAAA,IAEA,SAAA6sB,GACAA,IAAA,uBACAA,IAAA,2BACAA,IAAA,yBACAA,IAAA,6BACAA,IAAA,mBACAA,IAAA,+BACAA,IAAA,6BACAA,IAAA,iCACAA,IAAA,+BATA,CAUCA,EAAAvtB,EAAAutB,qBAAAvtB,EAAAutB,wBACD,IAAAjV,EAAA3U,KAAA2U,IAAAkG,EAAA7a,KAAA6a,IAKAiP,EAAA,SAAAroB,GAEA,SAAAqoB,EAAA7qB,GACA,IAAA0C,EAAAF,EAAArE,KAAA8B,YA2DA,OAzDAyC,EAAAooB,WAAA,EAEApoB,EAAAqoB,UAAA,SAAA1gB,EAAA7B,EAAAwiB,GAA6D,OAAA3gB,GAE7D3H,EAAAuoB,YAAA,SAAA3gB,EAAA9B,EAAAwiB,GAA8D,OAAA1gB,GAI9D5H,EAAAwoB,eAAA,SAAA9gB,EAAA+gB,KAKAzoB,EAAA0oB,mBAAA,EAIA1oB,EAAA2oB,YAAA,WACA,GAAA3oB,EAAAxB,QAAAwB,EAAA0H,OAAA,CACA,IAAA+gB,EAAAzoB,EAAA4F,QAAA5F,EAAAxB,OAAAsH,MACA9F,EAAA4oB,mBAEAH,IACAzoB,EAAA0H,OAAAC,OAAA,GAAA3H,EAAA6oB,uBAAAJ,GACAzoB,EAAA0H,OAAAC,OAAA,GAAA3H,EAAA8oB,qBAAAL,MAIAzoB,EAAA4oB,iBAAA,WACA5oB,EAAA0H,QAAA1H,EAAAxB,SAEAwB,EAAAxB,OAAAuqB,WACA/oB,EAAA0H,OAAAE,OACAoL,EAAAhT,EAAA0H,OAAAE,MAAA,GAAA5H,EAAAxB,OAAAuqB,SAAA,IACA/V,EAAAhT,EAAA0H,OAAAE,MAAA,GAAA5H,EAAAxB,OAAAuqB,SAAA,IACA/V,EAAAhT,EAAA0H,OAAAE,MAAA,GAAA5H,EAAAxB,OAAAuqB,SAAA,MAGA/oB,EAAAxB,OAAAwqB,WACAhpB,EAAA0H,OAAAE,OACAsR,EAAAlZ,EAAA0H,OAAAE,MAAA,GAAA5H,EAAAxB,OAAAwqB,SAAA,IACA9P,EAAAlZ,EAAA0H,OAAAE,MAAA,GAAA5H,EAAAxB,OAAAwqB,SAAA,IACA9P,EAAAlZ,EAAA0H,OAAAE,MAAA,GAAA5H,EAAAxB,OAAAwqB,SAAA,QAKAhpB,EAAAipB,UAAA3rB,EAAAkB,QACAwB,EAAA0H,OAAApK,EAAAoK,OACA1H,EAAAkpB,YAAA5rB,EAAA4rB,aAAA,IACAlpB,EAAAmpB,iBAAA7rB,EAAA6rB,mBAAA,EACA7rB,EAAAyQ,YACA/N,EAAAopB,WAAAlqB,MAAAuV,QAAAnX,EAAAyQ,WAAAzQ,EAAAyQ,WAAAzQ,EAAAyQ,YAEA/N,EAAAqoB,UAAA/qB,EAAA+qB,WAAAroB,EAAAqoB,UACAroB,EAAAuoB,YAAAjrB,EAAAirB,aAAAvoB,EAAAuoB,YACAvoB,EAAAwoB,eAAAlrB,EAAAkrB,gBAAAxoB,EAAAwoB,eACAxoB,EAoRA,OAjVAjB,EAAAopB,EAAAroB,GAkEAqoB,EAAAxrB,UAAA0sB,2BAAA,SAAAZ,GACA,OAAAlrB,KAAAiB,OAAA8qB,QACA,KAAArB,EAAAsB,SACA,KAAAtB,EAAAuB,YACA,KAAAvB,EAAAwB,YACA,QAAAlsB,KAAAiB,OAAAkrB,YAAA9rB,KACAL,KAAAiB,OAAAmrB,cAAA/rB,KAAAL,KAAAmK,OAAAE,MAAA,IACA,KAAAqgB,EAAA2B,WACA,KAAA3B,EAAA4B,OACA,KAAA5B,EAAA6B,cACA,QAAAvsB,KAAAiB,OAAAkrB,YAAA3rB,MAAAR,KAAAiB,OAAAkrB,YAAAhsB,MAAA,GACA+qB,EAAA1iB,aAAArI,MAAAH,KAAAiB,OAAAmrB,cAAA5rB,OAAAR,KAAAmK,OAAAE,MAAA,OACA,KAAAqgB,EAAA8B,UACA,KAAA9B,EAAA+B,aACA,KAAA/B,EAAAgC,aACA,QAAA1sB,KAAAiB,OAAAkrB,YAAA3rB,OAAA0qB,EAAA1iB,aAAArI,MAAAH,KAAAiB,OAAAmrB,cAAA5rB,OAAAR,KAAAmK,OAAAE,MAAA,MAMAugB,EAAAxrB,UAAAutB,yBAAA,SAAAzB,GACA,OAAAlrB,KAAAiB,OAAA8qB,QACA,KAAArB,EAAAsB,SACA,KAAAtB,EAAA2B,WACA,KAAA3B,EAAA8B,UACA,OAAAxsB,KAAAiB,OAAAkrB,YAAA,MACAnsB,KAAAiB,OAAAmrB,cAAA9rB,IAAAN,KAAAqK,MAAA,GACA,KAAAqgB,EAAAuB,YACA,KAAAvB,EAAA4B,OACA,KAAA5B,EAAA+B,aACA,QAAAzsB,KAAAiB,OAAAkrB,YAAA5rB,OAAAP,KAAAiB,OAAAkrB,YAAA/rB,OAAA,GACA,IAAA8qB,EAAA1iB,aAAApI,OAAAJ,KAAAiB,OAAAmrB,cAAA7rB,QAAAP,KAAAqK,MAAA,GACA,KAAAqgB,EAAAwB,YACA,KAAAxB,EAAA6B,cACA,KAAA7B,EAAAgC,aACA,QAAA1sB,KAAAiB,OAAAkrB,YAAA5rB,QACA2qB,EAAA1iB,aAAApI,OAAAJ,KAAAiB,OAAAmrB,cAAA7rB,QAAAP,KAAAqK,MAAA,MAMAugB,EAAAxrB,UAAAksB,uBAAA,SAAAJ,GACA,IAAA0B,EAAA1B,EAAAvgB,eAA6D1K,EAAAD,KAAAiB,OAAAkrB,YAAA9rB,KAAAH,EAAAF,KAAAiB,OAAAkrB,YAAA7rB,MAC7DusB,EAAA3B,EAAAvgB,eAA6D1K,EAAAD,KAAAiB,OAAAkrB,YAAA3rB,MAAAN,EAAAF,KAAAiB,OAAAkrB,YAAA5rB,SAO7D,OANAssB,EAAA5sB,EAAA2sB,EAAA3sB,EACAD,KAAAiB,OAAAmrB,cAAA/rB,KACAL,KAAAiB,OAAAmrB,cAAA5rB,MACA0qB,EAAA1iB,aAAArI,MAGA,EACAH,KAAA8rB,2BAAAZ,GAEA2B,EAAA5sB,EAAAirB,EAAA1iB,aAAAhI,MAAAR,KAAAiB,OAAAmrB,cAAA5rB,OACAR,KAAAiB,OAAAkrB,YAAA3rB,OAAA0qB,EAAA1iB,aAAArI,MAAAH,KAAAiB,OAAAmrB,cAAA5rB,OAAAR,KAAAmK,OAAAE,MAAA,GAEAuiB,EAAA3sB,EAAAirB,EAAA1iB,aAAAnI,KAAAL,KAAAiB,OAAAmrB,cAAA/rB,MACAL,KAAAiB,OAAAkrB,YAAA9rB,KAAAL,KAAAiB,OAAAmrB,cAAA/rB,KAAAL,KAAAmK,OAAAE,MAAA,GAEArK,KAAAmK,OAAAC,OAAA,IAKAwgB,EAAAxrB,UAAAmsB,qBAAA,SAAAL,GACA,IAAA0B,EAAA1B,EAAAvgB,eAA6D1K,EAAAD,KAAAiB,OAAAkrB,YAAA9rB,KAAAH,EAAAF,KAAAiB,OAAAkrB,YAAA7rB,MAC7DusB,EAAA3B,EAAAvgB,eAA6D1K,EAAAD,KAAAiB,OAAAkrB,YAAA3rB,MAAAN,EAAAF,KAAAiB,OAAAkrB,YAAA5rB,SAO7D,OANAssB,EAAA3sB,EAAA0sB,EAAA1sB,EACAF,KAAAiB,OAAAmrB,cAAA9rB,IACAN,KAAAiB,OAAAmrB,cAAA7rB,OACA2qB,EAAA1iB,aAAApI,OAGA,EACAJ,KAAA2sB,yBAAAzB,GAEA0B,EAAA1sB,EAAAgrB,EAAA1iB,aAAAlI,IAAAN,KAAAiB,OAAAmrB,cAAA9rB,MACAN,KAAAiB,OAAAkrB,YAAA7rB,IAAAN,KAAAiB,OAAAmrB,cAAA9rB,IAAAN,KAAAmK,OAAAE,MAAA,IAEAwiB,EAAA3sB,EAAAgrB,EAAA1iB,aAAAjI,OAAAP,KAAAiB,OAAAmrB,cAAA7rB,SACAP,KAAAiB,OAAAkrB,YAAA5rB,SAAA2qB,EAAA1iB,aAAApI,OAAAJ,KAAAiB,OAAAmrB,cAAA7rB,QAAAP,KAAAmK,OAAAE,MAAA,IAEArK,KAAAmK,OAAAC,OAAA,IAEAwgB,EAAAxrB,UAAA0tB,SAAA,SAAA3kB,GACA,OAAAnI,KAAA6rB,YACA,IAAA7rB,KAAA6rB,WAAAjnB,QACA5E,KAAA6rB,YAAA7rB,KAAA6rB,WAAAjf,QAAAzE,IAAA,GACAnI,KAAAmrB,mBAAAnrB,KAAA4rB,kBAEAhB,EAAAxrB,UAAA2tB,qBAAA,SAAA3S,GACA,IAAA3X,EAAAzC,KACA0U,EAAA0F,EAAA7G,gBAAAyZ,KAAA,SAAAC,GAA6D,OAAAxqB,EAAAopB,WAAAjf,QAAAqgB,EAAA1kB,KAAAb,KAAA,IAC7D1H,KAAAmrB,kBAAAniB,QAAA0L,GACAA,IACA1U,KAAAktB,iBAAAxY,EAAAnM,OAGAqiB,EAAAxrB,UAAA+tB,cAAA,SAAA/S,GAGA,OAAApa,KAAA6rB,aAAA7rB,KAAA4rB,iBACAxR,EAAApT,OAAAuB,KAIAvI,KAAAktB,kBAMAtC,EAAAxrB,UAAA6S,gBAAA,SAAAmI,EAAAlI,GAEAlS,KAAA+sB,qBAAA3S,GAEApa,KAAA6qB,UAAA7qB,KAAA8sB,SAAA1S,EAAAhH,MAAA7K,KAAAb,KAKAkjB,EAAAxrB,UAAAuT,cAAA,SAAAyH,GACApa,KAAAmrB,mBAAA,EACAnrB,KAAA6qB,WAAA,GAKAD,EAAAxrB,UAAAmT,WAAA,SAAA6H,EAAA/H,GACA,GAAArS,KAAA8sB,SAAA1S,EAAAhH,MAAA7K,KAAAb,IAAA,CACA,IAAA0lB,GAAA/a,EAAAzH,OAAAwH,MAAAnS,EAAAD,KAAAmK,OAAAE,MAAA,GACAgI,EAAAzH,OAAAwH,MAAAlS,EAAAF,KAAAmK,OAAAE,MAAA,GACA,GACArK,KAAA8qB,YACAsC,EAAAptB,KAAA8qB,UAAAsC,EAAAhT,EAAAhH,MAAA7K,KAAA6R,EAAA7G,gBAAAnD,IAAA,SAAAC,GAA4F,OAAAA,EAAA9H,SAE5FvI,KAAAmK,OAAAC,OAAA,IAAAgjB,EAAA,GACAptB,KAAAmK,OAAAC,OAAA,IAAAgjB,EAAA,GAEAptB,KAAAorB,cAEAprB,KAAAirB,eAAAjrB,KAAAmK,OAAAiQ,EAAAhH,MAAA7K,MAEAvI,KAAAorB,gBAMAR,EAAAxrB,UAAA8R,YAAA,SAAAkJ,EAAAiT,GAGA,GADArtB,KAAA+sB,qBAAA3S,GACApa,KAAA8sB,SAAA1S,EAAApT,OAAAuB,KAAAb,IAAA,CACA,IAAAwjB,EAAAlrB,KAAAmtB,cAAA/S,GACAkT,EAAApC,EAAAjhB,cAAAmQ,EAAAxP,OAAA8E,OACA6d,EAAAvtB,KAAAmK,OAAAE,MAAA,MACAmjB,EAAAxtB,KAAAmK,OAAAE,MAAA,MACAA,GAAAgjB,EAAAtc,MAAA,GAAA/Q,KAAA2rB,YACA4B,EAAAF,EAAAtc,MAAA,GAAA/Q,KAAA2rB,YAAA6B,EAAA,GACAxtB,KAAAgrB,cACA3gB,EAAArK,KAAAgrB,YAAA3gB,EAAA6gB,EAAA9Q,EAAA7G,gBAAAnD,IAAA,SAAAC,GAAgG,OAAAA,EAAA9H,SAEhGvI,KAAAmK,OAAAE,MAAA,GAAAkjB,EAAAljB,EAAA,GACArK,KAAAmK,OAAAE,MAAA,GAAAmjB,EAAAnjB,EAAA,GAEArK,KAAAqrB,mBACA,IAAAoC,EAAAvC,EAAAjhB,cAAAmQ,EAAAxP,OAAA8E,OACA1P,KAAAmK,OAAAC,OAAA,IAAAkjB,EAAArtB,EAAAwtB,EAAAxtB,EACAD,KAAAmK,OAAAC,OAAA,IAAAkjB,EAAAptB,EAAAutB,EAAAvtB,EAEAF,KAAAorB,cAEAprB,KAAAirB,eAAAjrB,KAAAmK,OAAA+gB,GAEAlrB,KAAAorB,gBAIAR,EAAAxrB,UAAAmS,eAAA,SAAA6I,KACAwQ,EAAAxrB,UAAAwT,YAAA,SAAAwH,KACAwQ,EAAAxrB,UAAAqS,gBAAA,SAAA2I,KACAwQ,EAAAxrB,UAAAsT,gBAAA,SAAA0H,KAMAwQ,EAAAxrB,UAAAsuB,SAAA,SAAAvlB,GAEA,IAAAwlB,EAAA3tB,KAAAkI,cAAAC,GAEAK,EAAAxI,KAAAsI,oBAAAH,GAEA,GAAAwlB,GAAAnlB,EAAA,CAEA,IAAAolB,EAAAD,EAAA1jB,cAAAzB,GACAqlB,EAAAF,EAAA1jB,eAAwDhK,EAAAuI,EAAAhI,MAAAN,EAAAsI,EAAAjI,SACxD,WAAA4I,EAAArJ,QACAM,OAAAytB,EAAA3tB,EAAA0tB,EAAA1tB,EACAC,MAAA0tB,EAAA5tB,EAAA2tB,EAAA3tB,EACAA,EAAA2tB,EAAA3tB,EACAC,EAAA0tB,EAAA1tB,IAGA,WAAAiJ,EAAArJ,QAAoCG,EAAA,EAAAC,EAAA,EAAAC,MAAA,EAAAC,OAAA,KAEpC3B,OAAAC,eAAAksB,EAAAxrB,UAAA,OAIAP,IAAA,WACA,OAAAmB,KAAAmK,OAAAC,QAEAxL,YAAA,EACAD,cAAA,IAMAisB,EAAAxrB,UAAAssB,UAAA,SAAAzqB,GACAjB,KAAAiB,SACAjB,KAAAorB,eAEA3sB,OAAAC,eAAAksB,EAAAxrB,UAAA,SAIAP,IAAA,WACA,OAAAmB,KAAAmK,OAAAE,OAEAzL,YAAA,EACAD,cAAA,IAQAisB,EAAAxrB,UAAA0uB,SAAA,SAAAC,EAAA5lB,GAEA,IAAAwlB,EAAA3tB,KAAAkI,cAAAC,GAEAK,EAAAxI,KAAAsI,oBAAAH,GAEAI,EAAAvI,KAAAqI,QAAAF,GAEA,GAAAwlB,GAAAnlB,GAAAD,EAAA,CACA,IAAAylB,EAAA9rB,EAAAynB,WACAnhB,EAAArI,MAAA4tB,EAAA5tB,MACAqI,EAAApI,OAAA2tB,EAAA3tB,OACA,GACAJ,KAAAmK,OAAAE,OACArK,KAAAmK,OAAAE,MAAAnI,EAAAunB,KAAAzpB,KAAAmK,OAAAE,MAAArK,KAAAgrB,YAAAgD,EAAAzlB,QACA,IAAA0lB,EAAA/rB,EAAAynB,YACAoE,EAAA9tB,GACA8tB,EAAA7tB,EACA,GACAF,KAAAmK,OAAAC,QACApK,KAAAmK,OAAAC,OAAAlI,EAAAunB,KAAAzpB,KAAAmK,OAAAC,OAAApK,KAAAgrB,YAAAiD,EAAA1lB,QAEAvI,KAAAorB,cAEAprB,KAAAirB,eAAAjrB,KAAAmK,OAAA5B,GAEAvI,KAAAorB,gBAGAR,EAlVA,CAmVCD,EAAA1iB,cACD9K,EAAAytB,sDChXAnsB,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAH9C,SAAAZ,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAGAuI,CAAAhK,EAAA,oBCLAT,EAAAD,QAAA,w7BCAAC,EAAAD,QAAA,m8CCCA,IACAoE,EADAC,EAAAxB,WAAAwB,YACAD,EAAA9C,OAAAgD,iBACUC,wBAAgBC,OAAA,SAAAtD,EAAAuD,GAAsCvD,EAAAqD,UAAAE,IAChE,SAAAvD,EAAAuD,GAAyB,QAAAtC,KAAAsC,IAAAvC,eAAAC,KAAAjB,EAAAiB,GAAAsC,EAAAtC,KACzB,SAAAjB,EAAAuD,GAEA,SAAAC,IAAuB7B,KAAA8B,YAAAzD,EADvBkD,EAAAlD,EAAAuD,GAEAvD,EAAAe,UAAA,OAAAwC,EAAAnD,OAAAsD,OAAAH,IAAAC,EAAAzC,UAAAwC,EAAAxC,UAAA,IAAAyC,KAGApD,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAiD,EAAAnE,EAAA,GACAqwB,EAAArwB,EAAA,GACAswB,EAAAtwB,EAAA,GACAoE,EAAApE,EAAA,GACA4X,EAAA3U,KAAA2U,IAKA2Y,EAAA,SAAA7rB,GAEA,SAAA6rB,IACA,cAAA7rB,KAAAqM,MAAA5O,KAAAmH,YAAAnH,KA+HA,OAjIAwB,EAAA4sB,EAAA7rB,GAQA6rB,EAAAhvB,UAAAiE,0BAAA,WACA,OAEAI,eAAA,SAAA4qB,GAA6C,WAAAH,EAAApuB,QAC7CM,OAAA,EAAAiuB,EAAAC,OACAnuB,MAAA,EAAAkuB,EAAAC,OACAruB,EAAAouB,EAAApuB,EAAAouB,EAAAC,OACApuB,EAAAmuB,EAAAnuB,EAAAmuB,EAAAC,UAGAhrB,QAAA,SAAA+qB,EAAA1tB,EAAA4H,GACA,IAAAzJ,EAAAuvB,EAAAC,OAAA7Y,EAAA7G,WAAA,EAAArG,EAAA4B,OAAAE,OACA+H,GACAzR,EAAAV,EAAAouB,EAAApuB,EACAU,EAAAT,EAAAmuB,EAAAnuB,GAEA,OAAAkS,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAtT,OAOAsvB,EAAAhvB,UAAAsG,WAAA,WACA,IAAAimB,EAAA3rB,KAAAwC,MAAAmpB,aAAA,WAAkE,UAClE4C,GACAC,EAAA,EACAC,EAAA,EACAC,GAAA,EACAC,EAAA,EACAC,GAAA,EACAC,GAAA,GAEAC,GACAN,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,GAEA,OACAlpB,GAAA9H,EAAA,IACA+H,qBAEAK,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA2U,IACA7V,KAAA,SACA6H,KAAAlE,EAAAxC,sBAAA6V,IACAvQ,OAAA,SAAAvG,GAA0C,OAAAA,EAAAyB,EAAAzB,EAAA0B,MAG1C+F,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA6V,MACA/W,KAAA,SACA6H,KAAAlE,EAAAxC,sBAAA0U,IACApP,OAAA,SAAAvG,GAA0C,OAAAA,EAAA8vB,WAG1CroB,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA0U,KACA5V,KAAA,QACA6H,KAAAlE,EAAAxC,sBAAA0U,IACApP,OAAA,SAAAvG,GAA0C,OAAAA,EAAAkE,UAG1CuD,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA2U,IACA7V,KAAA,QACA6H,KAAAlE,EAAAxC,sBAAAyU,KACAnP,OAAA,SAAAvG,GAA0C,OAAAA,EAAAsgB,SAG1C7Y,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA2U,IACA7V,KAAA,YACA6H,KAAAlE,EAAAxC,sBAAA0U,IACApP,OAAA,SAAAvG,GAA0C,OAAAA,EAAAuwB,cAG1CvqB,WAEAlG,KAAA,cACA6H,KAAAlE,EAAAvC,YAAAyU,IACApP,OAAA,SAAA+V,GAA0C,OAAA6Q,QAG1C9lB,mBAKAvH,KAAA,WACA6H,KAAAlE,EAAAtC,oBAAA0V,MACAtQ,OAAA,SAAAiqB,GAA+C,OAE/CT,EAAAS,GAEAF,EAAAE,GACA,MAIAlpB,YAAA,EACAC,GAAAlI,EAAA,MAGAuwB,EAAAhvB,UAAAgG,aAAA,WACA,OACAC,SAAArD,EAAAitB,sBACA1pB,UAAAvD,EAAAwD,OAGA4oB,EAAAhvB,UAAAqG,mBAAA,WACA,OACAypB,SAAAltB,EAAAmtB,eACAC,SAAAptB,EAAAqtB,UACAC,oBAAA,EACAC,aAAA,IAGAnB,EAlIA,CAmICD,EAAA7rB,OACDnF,EAAAixB,0CCxJA,IACA7sB,EADAC,EAAAxB,WAAAwB,YACAD,EAAA9C,OAAAgD,iBACUC,wBAAgBC,OAAA,SAAAtD,EAAAuD,GAAsCvD,EAAAqD,UAAAE,IAChE,SAAAvD,EAAAuD,GAAyB,QAAAtC,KAAAsC,IAAAvC,eAAAC,KAAAjB,EAAAiB,GAAAsC,EAAAtC,KACzB,SAAAjB,EAAAuD,GAEA,SAAAC,IAAuB7B,KAAA8B,YAAAzD,EADvBkD,EAAAlD,EAAAuD,GAEAvD,EAAAe,UAAA,OAAAwC,EAAAnD,OAAAsD,OAAAH,IAAAC,EAAAzC,UAAAwC,EAAAxC,UAAA,IAAAyC,KAGAiF,EAAA9G,WAAA8G,YAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAA7I,EAAAD,EAAA+I,UAAAvC,OAAA9F,EAAAV,EAAA,EAAA4I,EAAA,OAAAE,IAAAzI,OAAA2I,yBAAAJ,EAAAC,GAAAC,EACA,oBAAAG,SAAA,mBAAAA,QAAAC,SAAAxI,EAAAuI,QAAAC,SAAAP,EAAAC,EAAAC,EAAAC,QACA,QAAAnJ,EAAAgJ,EAAAnC,OAAA,EAA4C7G,GAAA,EAAQA,KAAAM,EAAA0I,EAAAhJ,MAAAe,GAAAV,EAAA,EAAAC,EAAAS,GAAAV,EAAA,EAAAC,EAAA2I,EAAAC,EAAAnI,GAAAT,EAAA2I,EAAAC,KAAAnI,GACpD,OAAAV,EAAA,GAAAU,GAAAL,OAAAC,eAAAsI,EAAAC,EAAAnI,MAEAL,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAwI,EAAA1J,EAAA,GAEA2xB,EAAA,SAAAjtB,GAEA,SAAAitB,EAAAzvB,GACA,IAAA0C,EAAAF,EAAArE,KAAA8B,KAAAD,IAAAC,KAaA,OAZAyC,EAAAqc,OAAA,SACArc,EAAAC,MAAA,EACAD,EAAA6rB,OAAA,EACA7rB,EAAAssB,UAAA,EACAtsB,EAAAxC,EAAA,EACAwC,EAAAvC,EAAA,EACAuC,EAAAqc,MAAA/e,EAAA+e,QAAA,SACArc,EAAAC,MAAA3C,EAAA2C,OAAA,EACAD,EAAA6rB,OAAAvuB,EAAAuuB,OACA7rB,EAAAssB,UAAAhvB,EAAAgvB,WAAAtsB,EAAAssB,UACAtsB,EAAAxC,EAAAF,EAAAE,EACAwC,EAAAvC,EAAAH,EAAAG,EACAuC,EAkDA,OAjEAjB,EAAAguB,EAAAjtB,GAiBA9D,OAAAC,eAAA8wB,EAAApwB,UAAA,SACAP,IAAA,WACA,SAAAmB,KAAAsuB,QAEA1vB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA8wB,EAAApwB,UAAA,UACAP,IAAA,WACA,SAAAmB,KAAAsuB,QAEA1vB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA8wB,EAAApwB,UAAA,eACAP,IAAA,WACA,OAAAmB,KAAAsuB,OAAAtuB,KAAA+uB,WAEAnwB,YAAA,EACAD,cAAA,IAEAmI,GACAS,EAAAK,YACA4nB,EAAApwB,UAAA,gBACA0H,GACAS,EAAAK,YACA4nB,EAAApwB,UAAA,gBACA0H,GACAS,EAAAK,YACA4nB,EAAApwB,UAAA,iBACA0H,GACAS,EAAAK,YACA4nB,EAAApwB,UAAA,oBACA0H,GACAS,EAAAK,YACA4nB,EAAApwB,UAAA,YACA0H,GACAS,EAAAK,YACA4nB,EAAApwB,UAAA,YACA0H,GACAS,EAAAkoB,UACAD,EAAApwB,UAAA,cACA0H,GACAS,EAAAkoB,UACAD,EAAApwB,UAAA,eACA0H,GACAS,EAAAkoB,UACAD,EAAApwB,UAAA,oBACAowB,EAlEA,CADA3xB,EAAA,GAoEC2J,UACDrK,EAAAqyB,6CCvFA,SAAA3nB,EAAA1J,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAEAb,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C8I,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,mCCLA,IACA0D,EADAC,EAAAxB,WAAAwB,YACAD,EAAA9C,OAAAgD,iBACUC,wBAAgBC,OAAA,SAAAtD,EAAAuD,GAAsCvD,EAAAqD,UAAAE,IAChE,SAAAvD,EAAAuD,GAAyB,QAAAtC,KAAAsC,IAAAvC,eAAAC,KAAAjB,EAAAiB,GAAAsC,EAAAtC,KACzB,SAAAjB,EAAAuD,GAEA,SAAAC,IAAuB7B,KAAA8B,YAAAzD,EADvBkD,EAAAlD,EAAAuD,GAEAvD,EAAAe,UAAA,OAAAwC,EAAAnD,OAAAsD,OAAAH,IAAAC,EAAAzC,UAAAwC,EAAAxC,UAAA,IAAAyC,KAGAiF,EAAA9G,WAAA8G,YAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAA7I,EAAAD,EAAA+I,UAAAvC,OAAA9F,EAAAV,EAAA,EAAA4I,EAAA,OAAAE,IAAAzI,OAAA2I,yBAAAJ,EAAAC,GAAAC,EACA,oBAAAG,SAAA,mBAAAA,QAAAC,SAAAxI,EAAAuI,QAAAC,SAAAP,EAAAC,EAAAC,EAAAC,QACA,QAAAnJ,EAAAgJ,EAAAnC,OAAA,EAA4C7G,GAAA,EAAQA,KAAAM,EAAA0I,EAAAhJ,MAAAe,GAAAV,EAAA,EAAAC,EAAAS,GAAAV,EAAA,EAAAC,EAAA2I,EAAAC,EAAAnI,GAAAT,EAAA2I,EAAAC,KAAAnI,GACpD,OAAAV,EAAA,GAAAU,GAAAL,OAAAC,eAAAsI,EAAAC,EAAAnI,MAEAL,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAyJAiE,EAzJAuE,EAAA1J,EAAA,GACA6xB,EAAA7xB,EAAA,GACAoE,EAAApE,EAAA,GAKA8xB,IAAA3sB,MACAf,EAAAZ,WAAAuuB,SAAA,SAAA7D,EAAA8D,GACA9D,EAAA9rB,GAAA8rB,EAAA+D,QACA/D,EAAA7rB,GAAA6rB,EAAA+D,SAEA9sB,EAAAf,EAAAZ,WAAA0uB,WAAA,SAAAhE,EAAA8D,GACA9D,EAAA9rB,EAAA4vB,EAAA1vB,MAAA,EACA4rB,EAAA7rB,GAAA6rB,EAAA+D,SAEA9sB,EAAAf,EAAAZ,WAAA2uB,UAAA,SAAAjE,EAAA8D,GACA9D,EAAA9rB,EAAA4vB,EAAA1vB,MAAA4rB,EAAA+D,QACA/D,EAAA7rB,GAAA6rB,EAAA+D,SAEA9sB,EAAAf,EAAAZ,WAAA4uB,YAAA,SAAAlE,EAAA8D,GACA9D,EAAA9rB,GAAA8rB,EAAA+D,QACA/D,EAAA7rB,EAAA2vB,EAAAzvB,OAAA,GAEA4C,EAAAf,EAAAZ,WAAA6uB,QAAA,SAAAnE,EAAA8D,GACA9D,EAAA9rB,EAAA4vB,EAAA1vB,MAAA,EACA4rB,EAAA7rB,EAAA2vB,EAAAzvB,OAAA,GAEA4C,EAAAf,EAAAZ,WAAA8uB,aAAA,SAAApE,EAAA8D,GACA9D,EAAA9rB,EAAA4vB,EAAA1vB,MAAA4rB,EAAA+D,QACA/D,EAAA7rB,EAAA2vB,EAAAzvB,OAAA,GAEA4C,EAAAf,EAAAZ,WAAA+uB,YAAA,SAAArE,EAAA8D,GACA9D,EAAA9rB,GAAA8rB,EAAA+D,QACA/D,EAAA7rB,EAAA2vB,EAAAzvB,OAAA2rB,EAAA+D,SAEA9sB,EAAAf,EAAAZ,WAAAgvB,cAAA,SAAAtE,EAAA8D,GACA9D,EAAA9rB,EAAA4vB,EAAA1vB,MAAA,EACA4rB,EAAA7rB,EAAA2vB,EAAAzvB,OAAA2rB,EAAA+D,SAEA9sB,EAAAf,EAAAZ,WAAAivB,aAAA,SAAAvE,EAAA8D,GACA9D,EAAA9rB,EAAA4vB,EAAA1vB,MAAA4rB,EAAA+D,QACA/D,EAAA7rB,EAAA2vB,EAAAzvB,OAAA2rB,EAAA+D,SAEA9sB,EAAAf,EAAAZ,WAAAkvB,QAAA,SAAAxE,EAAA8D,GACA9D,EAAA9rB,EAAA8rB,EAAA9rB,GAAA,EACA8rB,EAAA7rB,EAAA6rB,EAAA7rB,GAAA,GAEA8C,GAgBAwtB,EAAA,SAAAjuB,GAEA,SAAAiuB,EAAAzwB,GACA,IAAA0C,EAAAF,EAAArE,KAAA8B,KAAAD,IAAAC,KAgCA,OA9BAyC,EAAAqc,OAAA,SAEArc,EAAAC,MAAA,EAEAD,EAAArC,OAAA,EAEAqC,EAAAguB,QAAAxuB,EAAAX,UAAAovB,UAEAjuB,EAAAtC,MAAA,EAEAsC,EAAAxC,EAAA,EAEAwC,EAAAvC,EAAA,EAGAuC,EAAAkuB,SACAb,QAAA,EACApsB,KAAAzB,EAAAZ,WAAAuuB,QACA3vB,EAAA,EACAC,EAAA,GAEAuC,EAAAC,MAAA3C,EAAA2C,OAAAD,EAAAC,MACAD,EAAAqc,MAAA/e,EAAA+e,OAAArc,EAAAqc,MACArc,EAAAguB,QAAA1wB,EAAA0wB,SAAAhuB,EAAAguB,QACAhuB,EAAAxC,EAAAF,EAAAE,GAAAwC,EAAAxC,EACAwC,EAAAvC,EAAAH,EAAAG,GAAAuC,EAAAvC,EACAuC,EAAAtC,MAAAJ,EAAAI,OAAA,EACAsC,EAAArC,OAAAL,EAAAK,QAAA,EAEAL,EAAAgsB,QAAAtpB,EAAAmuB,UAAA7wB,EAAAgsB,QACAtpB,EAmDA,OArFAjB,EAAAgvB,EAAAjuB,GAoCA9D,OAAAC,eAAA8xB,EAAApxB,UAAA,UACAP,IAAA,WACA,OAAAmB,KAAA2wB,SAEA/xB,YAAA,EACAD,cAAA,IAKA6xB,EAAApxB,UAAAwxB,UAAA,SAAA7E,GACA,IAAA8E,GACAf,QAAA/D,EAAA+D,SAAA,EACApsB,KAAAqoB,EAAAroB,KACAzD,EAAA8rB,EAAA9rB,GAAA,EACAC,EAAA6rB,EAAA7rB,GAAA,GAGAyvB,EAAAkB,EAAAntB,MAAAmtB,EAAA7wB,MAEAA,KAAA2wB,QAAAE,GAEA/pB,GACAS,EAAAK,YACA4oB,EAAApxB,UAAA,gBACA0H,GACAS,EAAAK,YACA4oB,EAAApxB,UAAA,gBACA0H,GACAS,EAAAK,YACA4oB,EAAApxB,UAAA,iBACA0H,GACAS,EAAAK,YACA4oB,EAAApxB,UAAA,kBACA0H,GACAS,EAAAK,YACA4oB,EAAApxB,UAAA,gBACA0H,GACAS,EAAAK,YACA4oB,EAAApxB,UAAA,YACA0H,GACAS,EAAAK,YACA4oB,EAAApxB,UAAA,YACA0H,GACAS,EAAAK,YACA4oB,EAAApxB,UAAA,kBACA0H,GACAS,EAAAkoB,UACAe,EAAApxB,UAAA,eACAoxB,EAtFA,CAuFCd,EAAAloB,UACDrK,EAAAqzB,mCC1KApzB,EAAAD,QAAA,4/ECAAC,EAAAD,QAAA,yICCA,IACAoE,EADAC,EAAAxB,WAAAwB,YACAD,EAAA9C,OAAAgD,iBACUC,wBAAgBC,OAAA,SAAAtD,EAAAuD,GAAsCvD,EAAAqD,UAAAE,IAChE,SAAAvD,EAAAuD,GAAyB,QAAAtC,KAAAsC,IAAAvC,eAAAC,KAAAjB,EAAAiB,GAAAsC,EAAAtC,KACzB,SAAAjB,EAAAuD,GAEA,SAAAC,IAAuB7B,KAAA8B,YAAAzD,EADvBkD,EAAAlD,EAAAuD,GAEAvD,EAAAe,UAAA,OAAAwC,EAAAnD,OAAAsD,OAAAH,IAAAC,EAAAzC,UAAAwC,EAAAxC,UAAA,IAAAyC,KAGApD,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAiD,EAAAnE,EAAA,GACAqwB,EAAArwB,EAAA,GACAswB,EAAAtwB,EAAA,GACAoE,EAAApE,EAAA,GACAizB,EAAAjzB,EAAA,GACA8d,EAAA7a,KAAA6a,IAAAlG,EAAA3U,KAAA2U,IAKAsb,EAAA,SAAAxuB,GAEA,SAAAwuB,IACA,cAAAxuB,KAAAqM,MAAA5O,KAAAmH,YAAAnH,KAsLA,OAxLAwB,EAAAuvB,EAAAxuB,GAQAwuB,EAAA3xB,UAAAiE,0BAAA,WACA,OAEAI,eAAA,SAAAosB,GACA,IAAAjC,GACAiC,EAAA5vB,EAAA4vB,EAAA9D,OAAA9rB,EACA4vB,EAAA3vB,EAAA2vB,EAAA9D,OAAA7rB,GAEA,WAAAguB,EAAApuB,QACAM,OAAAyvB,EAAAzvB,OACAD,MAAA0vB,EAAA1vB,MACAF,EAAA2tB,EAAA,GACA1tB,EAAA0tB,EAAA,MAIAtqB,QAAA,SAAAusB,EAAAlvB,EAAAgtB,GAGA,IAAAqD,EAAAvb,EAAA7G,WAAA,EAAA+e,EAAAxjB,OAAAE,OACA4mB,EAAAtV,EAAA/M,WAAA,EAAA+e,EAAAxjB,OAAAE,OAEA,GAAAwlB,EAAAY,UAAAK,EAAAxvB,UAAA4vB,OACA,SAIA,GAAArB,EAAAY,UAAAK,EAAAxvB,UAAAovB,UAAA,CAEA,GAAAO,GAAA,GAAAD,GAAA,EACA,SAKA,IAAApD,GACAiC,EAAA5vB,EAAA4vB,EAAA9D,OAAA9rB,EAAA+wB,EACAnB,EAAA3vB,EAAA2vB,EAAA9D,OAAA7rB,EAAA8wB,GAGA,WAAA9C,EAAApuB,QACAM,OAAAyvB,EAAAzvB,OAAA4wB,EACA7wB,MAAA0vB,EAAA1vB,MAAA6wB,EACA/wB,EAAA2tB,EAAA,GACA1tB,EAAA0tB,EAAA,KACyBltB,cAAAC,GAKzB,GAAAkvB,EAAAY,UAAAK,EAAAxvB,UAAA6vB,MAAA,CAEAvD,EAAAD,EAAAhjB,eACA1K,EAAA4vB,EAAA5vB,EAAA4vB,EAAA9D,OAAA9rB,EAAA0tB,EAAAxjB,OAAAE,MAAA,GACAnK,EAAA2vB,EAAA3vB,EAAA2vB,EAAA9D,OAAA7rB,EAAAytB,EAAAxjB,OAAAE,MAAA,KAFA,IAIA+mB,EAAAzD,EAAAhjB,cAAAhK,GAEA,WAAAutB,EAAApuB,QACAM,OAAAyvB,EAAAzvB,OACAD,MAAA0vB,EAAA1vB,MACAF,EAAA2tB,EAAA3tB,EACAC,EAAA0tB,EAAA1tB,IACqBQ,cAAA0wB,GAErB,YAOAL,EAAA3xB,UAAAsG,WAAA,WACA,IAAA6oB,GACAC,EAAA,EACAC,EAAA,EACAC,GAAA,EACAC,EAAA,EACAC,GAAA,EACAC,GAAA,GAEAC,GACAN,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,GAEA,OACAlpB,GAAA9H,EAAA,IACA+H,qBAEAK,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA2U,IACA7V,KAAA,WACA6H,KAAAlE,EAAAxC,sBAAA6V,IACAvQ,OAAA,SAAAvG,GAA0C,OAAAA,EAAAyB,EAAAzB,EAAA0B,MAG1C+F,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA6V,MACA/W,KAAA,SACA6H,KAAAlE,EAAAxC,sBAAA6V,IACAvQ,OAAA,SAAAvG,GAA0C,OAAAA,EAAAutB,OAAA9rB,EAAAzB,EAAAutB,OAAA7rB,MAG1C+F,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA2U,IACA7V,KAAA,OACA6H,KAAAlE,EAAAxC,sBAAA6V,IACAvQ,OAAA,SAAAvG,GAA0C,OAAAA,EAAA2B,MAAA3B,EAAA4B,WAG1C6F,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA6V,MACA/W,KAAA,QACA6H,KAAAlE,EAAAxC,sBAAA0U,IACApP,OAAA,SAAAvG,GAA0C,OAAAA,EAAAkE,UAG1CuD,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA0U,KACA5V,KAAA,UACA6H,KAAAlE,EAAAxC,sBAAA0U,IACApP,OAAA,SAAAvG,GAA0C,OAAAA,EAAAiyB,YAG1CxqB,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA2U,IACA7V,KAAA,QACA6H,KAAAlE,EAAAxC,sBAAAyU,KACAnP,OAAA,SAAAvG,GAA0C,OAAAA,EAAAsgB,SAG1Cta,WAEAlG,KAAA,cACA6H,KAAAlE,EAAAvC,YAAAyU,IACApP,OAAA,SAAAssB,GAA0C,aAG1CxrB,mBAKAvH,KAAA,WACA6H,KAAAlE,EAAAtC,oBAAA0V,MACAtQ,OAAA,SAAAiqB,GAA+C,OAE/CT,EAAAS,GAEAF,EAAAE,GACA,MAIAlpB,YAAA,EACAC,GAAAlI,EAAA,MAGAkzB,EAAA3xB,UAAAgG,aAAA,WACA,OACAC,SAAArD,EAAAitB,sBACA1pB,UAAAvD,EAAAwD,OAGAurB,EAAA3xB,UAAAqG,mBAAA,WACA,OACAypB,SAAAltB,EAAAmtB,eACAC,SAAAptB,EAAAqtB,UACAC,oBAAA,EACAC,aAAA,IAGAwB,EAzLA,CA0LC5C,EAAA7rB,OACDnF,EAAA4zB,+CChNA,SAAAlpB,EAAA1J,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAEAb,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C8I,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,mCCLA,IACA0D,EADAC,EAAAxB,WAAAwB,YACAD,EAAA9C,OAAAgD,iBACUC,wBAAgBC,OAAA,SAAAtD,EAAAuD,GAAsCvD,EAAAqD,UAAAE,IAChE,SAAAvD,EAAAuD,GAAyB,QAAAtC,KAAAsC,IAAAvC,eAAAC,KAAAjB,EAAAiB,GAAAsC,EAAAtC,KACzB,SAAAjB,EAAAuD,GAEA,SAAAC,IAAuB7B,KAAA8B,YAAAzD,EADvBkD,EAAAlD,EAAAuD,GAEAvD,EAAAe,UAAA,OAAAwC,EAAAnD,OAAAsD,OAAAH,IAAAC,EAAAzC,UAAAwC,EAAAxC,UAAA,IAAAyC,KAGAiF,EAAA9G,WAAA8G,YAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAA7I,EAAAD,EAAA+I,UAAAvC,OAAA9F,EAAAV,EAAA,EAAA4I,EAAA,OAAAE,IAAAzI,OAAA2I,yBAAAJ,EAAAC,GAAAC,EACA,oBAAAG,SAAA,mBAAAA,QAAAC,SAAAxI,EAAAuI,QAAAC,SAAAP,EAAAC,EAAAC,EAAAC,QACA,QAAAnJ,EAAAgJ,EAAAnC,OAAA,EAA4C7G,GAAA,EAAQA,KAAAM,EAAA0I,EAAAhJ,MAAAe,GAAAV,EAAA,EAAAC,EAAAS,GAAAV,EAAA,EAAAC,EAAA2I,EAAAC,EAAAnI,GAAAT,EAAA2I,EAAAC,KAAAnI,GACpD,OAAAV,EAAA,GAAAU,GAAAL,OAAAC,eAAAsI,EAAAC,EAAAnI,MAEAL,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAwI,EAAA1J,EAAA,GAEAyzB,EAAA,SAAA/uB,GAEA,SAAA+uB,EAAAvxB,GACA,IAAA0C,EAAAF,EAAArE,KAAA8B,KAAAD,IAAAC,KAiBA,OAhBAyC,EAAA8uB,YAAA,SACA9uB,EAAA+uB,UAAA,SACA/uB,EAAAgvB,UAAA,YACAhvB,EAAAC,MAAA,EACAD,EAAAkC,KAAA,KACAlC,EAAA2Q,OAAA,KACA3Q,EAAAivB,WAAA,EACAjvB,EAAAkvB,SAAA,EACAlvB,EAAA8uB,WAAAxxB,EAAAwxB,YAAA9uB,EAAA8uB,WACA9uB,EAAA+uB,SAAAzxB,EAAAyxB,UAAA/uB,EAAA+uB,SACA/uB,EAAAgvB,QAAA1xB,EAAA0xB,SAAAhvB,EAAAgvB,QACAhvB,EAAAC,MAAA3C,EAAA2C,OAAAD,EAAAC,MACAD,EAAAkC,IAAA5E,EAAA4E,KAAAlC,EAAAkC,IACAlC,EAAAivB,WAAA3xB,EAAA2xB,YAAAjvB,EAAAivB,WACAjvB,EAAAkvB,SAAA5xB,EAAA4xB,UAAAlvB,EAAAkvB,SACAlvB,EAAA2Q,MAAArT,EAAAqT,OAAA3Q,EAAA2Q,MACA3Q,EAsFA,OAzGAjB,EAAA8vB,EAAA/uB,GAqBA9D,OAAAC,eAAA4yB,EAAAlyB,UAAA,UACAP,IAAA,WACA,IAAAuT,GACApS,KAAA2E,IAAA,GAAA3E,KAAAoT,MAAA,GACApT,KAAA2E,IAAA,GAAA3E,KAAAoT,MAAA,IAEA,OAAAtS,KAAAsoB,KAAAhX,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAEAxT,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA4yB,EAAAlyB,UAAA,YAIAP,IAAA,WACA,UAEAD,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA4yB,EAAAlyB,UAAA,iBAIAP,IAAA,WACA,IAAA+F,EAAA5E,KAAA4E,OACA,QACA5E,KAAA2E,IAAA,GAAA3E,KAAAoT,MAAA,IAAAxO,IACA5E,KAAA2E,IAAA,GAAA3E,KAAAoT,MAAA,IAAAxO,IAGAhG,YAAA,EACAD,cAAA,IAKA2yB,EAAAlyB,UAAAwyB,aAAA,SAAAzxB,GACAA,IACAH,KAAA2xB,SAAAxxB,EACAH,KAAA0xB,WAAAvxB,IAMAmxB,EAAAlyB,UAAAyyB,SAAA,SAAA/S,GACA9e,KAAAuxB,WAAAzS,EACA9e,KAAAwxB,SAAA1S,GAEAhY,GACAS,EAAAK,YACA0pB,EAAAlyB,UAAA,qBACA0H,GACAS,EAAAK,YACA0pB,EAAAlyB,UAAA,mBACA0H,GACAS,EAAAK,YACA0pB,EAAAlyB,UAAA,kBACA0H,GACAS,EAAAK,YACA0pB,EAAAlyB,UAAA,gBACA0H,GACAS,EAAAK,YACA0pB,EAAAlyB,UAAA,cACA0H,GACAS,EAAAK,YACA0pB,EAAAlyB,UAAA,gBACA0H,GACAS,EAAAK,YACA0pB,EAAAlyB,UAAA,qBACA0H,GACAS,EAAAK,YACA0pB,EAAAlyB,UAAA,mBACA0H,GACAS,EAAAkoB,UACA6B,EAAAlyB,UAAA,eACA0H,GACAS,EAAAkoB,UACA6B,EAAAlyB,UAAA,iBACA0H,GACAS,EAAAkoB,UACA6B,EAAAlyB,UAAA,sBACAkyB,EA1GA,CADAzzB,EAAA,GA4GC2J,UACDrK,EAAAm0B,8BChIAl0B,EAAAD,QAAA,0HCAAC,EAAAD,QAAA,8oFCAAC,EAAAD,QAAA,ojECAAC,EAAAD,QAAA,ihBCAAC,EAAAD,QAAA,4dCAAC,EAAAD,QAAA,2bCCAsB,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAoK,EAAAtL,EAAA,GACAi0B,EAAAj0B,EAAA,IACAoE,EAAApE,EAAA,IACAk0B,EAAAjxB,KAAAixB,IAqBA,IAAAC,IAAAhvB,MACAf,EAAA8F,SAAAkqB,MApBA,SAAArX,EAAAsX,EAAAC,EAAAC,EAAAC,GACA,OAAAP,EAAAzI,KAAAyI,EAAAxI,OAAAwI,EAAAvI,UAAA4I,EAAAD,GAAAtX,GAAAsX,IAoBAlvB,EAAAf,EAAA8F,SAAAuqB,QAjBA,SAAA1X,EAAAsX,EAAAC,EAAAC,EAAAC,GACA,QACA,EAAAzX,IAAA,EAAAA,GAAAsX,EAAA,KAAAtX,GAAA,EAAAA,GAAAwX,EAAA,GAAAxX,IAAAuX,EAAA,IACA,EAAAvX,IAAA,EAAAA,GAAAsX,EAAA,KAAAtX,GAAA,EAAAA,GAAAwX,EAAA,GAAAxX,IAAAuX,EAAA,KAeAnvB,EAAAf,EAAA8F,SAAAwqB,SAXA,SAAA3X,EAAAsX,EAAAC,EAAAC,EAAAC,GACA,IAAAG,EAAA,EAAA5X,EACA,OACAmX,EAAAS,EAAA,GAAAN,EAAA,KAAAtX,EAAAmX,EAAAS,EAAA,GAAAJ,EAAA,KAAAL,EAAAnX,EAAA,GAAA4X,EAAAH,EAAA,GAAAN,EAAAnX,EAAA,GAAAuX,EAAA,GACAJ,EAAAS,EAAA,GAAAN,EAAA,KAAAtX,EAAAmX,EAAAS,EAAA,GAAAJ,EAAA,KAAAL,EAAAnX,EAAA,GAAA4X,EAAAH,EAAA,GAAAN,EAAAnX,EAAA,GAAAuX,EAAA,KAQAnvB,GAEA,SAAAyvB,EAAA9xB,GACA,OACAV,EAAAU,EAAA,GACAT,EAAAS,EAAA,IAIA,SAAA+xB,EAAA/xB,GACA,OACAA,EAAAV,EACAU,EAAAT,GAcA,IAwIA8C,EAxIA2vB,EAAA,GAuIAx1B,EAAAy1B,YAnIA,SAAApwB,GACA,IAAAqwB,EAAArwB,EAAAqwB,WAAA7vB,EAAAR,EAAAswB,uBAAA,IAAA9vB,EAAA,EAAAA,EAAA+vB,EAAAvwB,EAAAuwB,UAAArvB,EAAAlB,EAAAkB,KACAsvB,EAAAhB,EAAAxvB,EAAAkB,MACAD,EAAA,SAAAwvB,GACA,IAAAC,EAAAD,EAAAvB,WAAA,EAAAoB,EACAK,EAAAF,EAAAtB,SAAA,EAAAmB,EAGA7xB,EAAA,IAAAkI,EAAArJ,QACAM,OAAA6yB,EAAAvB,WACAvxB,MAAA8yB,EAAAvB,WACAzxB,EAAAgzB,EAAA7f,MAAA,GAAA8f,EACAhzB,EAAA+yB,EAAA7f,MAAA,GAAA8f,IAkCA,OAhCAjyB,EAAAL,YAAA,IAAAuI,EAAArJ,QACAM,OAAA6yB,EAAAtB,SACAxxB,MAAA8yB,EAAAtB,SACA1xB,EAAAgzB,EAAAtuB,IAAA,GAAAwuB,EACAjzB,EAAA+yB,EAAAtuB,IAAA,GAAAwuB,KAGA3wB,EAAAkB,OAAAzB,EAAA8F,SAAAuqB,OACArxB,EAAAL,aACAX,EAAAgzB,EAAAxB,QAAA,MACAvxB,EAAA+yB,EAAAxB,QAAA,QAIAjvB,EAAAkB,OAAAzB,EAAA8F,SAAAwqB,UACAtxB,EAAAL,aACAX,EAAAgzB,EAAAxB,QAAA,MACAvxB,EAAA+yB,EAAAxB,QAAA,QAEAxwB,EAAAL,aACAX,EAAAgzB,EAAAxB,QAAA,MACAvxB,EAAA+yB,EAAAxB,QAAA,SAGAoB,IAAA5wB,EAAA+F,eAAAorB,SACAnyB,EAAAhB,EAAAme,OAAAE,iBAAA,EACArd,EAAAd,MAAAie,OAAAC,kBAEAwU,IAAA5wB,EAAA+F,eAAAqrB,SACApyB,EAAAf,EAAAke,OAAAE,iBAAA,EACArd,EAAAb,OAAAge,OAAAC,kBAEApd,GAEA,OAAA8xB,IAAA9wB,EAAA6F,cAAAwrB,cAGA7vB,iBAGAH,QAAA,SAAA2vB,EAAAtyB,EAAA4H,GAEA,IAOAgrB,EAAAC,EAPA9jB,IADA/O,EAAA4H,EAAAoC,cAAAhK,IACAV,EAAAU,EAAAT,GACAuzB,EAAA,EACAC,EAAAtV,OAAAuV,UACAC,EAAA,EACAC,EAAAzV,OAAAuV,UACAvgB,EAAA7K,EAAAoC,cAAA8nB,EAAAQ,EAAA7f,QACAzO,EAAA4D,EAAAoC,cAAA8nB,EAAAQ,EAAAtuB,MAEAjB,IAAAzB,EAAA8F,SAAAuqB,OACAiB,EAAAzB,EAAAzI,KAAAqJ,EAAAtf,GAAA6f,EAAAxB,QAAA,IAEA/tB,IAAAzB,EAAA8F,SAAAwqB,UACAgB,EAAAzB,EAAAzI,KAAAqJ,EAAAtf,GAAA6f,EAAAxB,QAAA,IACA+B,EAAA1B,EAAAzI,KAAAqJ,EAAA/tB,GAAAsuB,EAAAxB,QAAA,KAEA,IAAAqC,EAAApB,EAAAtf,GACA2gB,EAAArB,EAAA/tB,GACA4uB,EAAAN,EAAAxB,QAAA7sB,OAAA,EAAA2uB,GAAA,KACAC,EAAAP,EAAAxB,QAAA7sB,OAAA,EAAA4uB,GAAA,KAEA,QAAAz1B,EAAA,EAA+BA,EAAA40B,IAAqB50B,EAAA,CACpD,IAAAi2B,EAAAhB,EAAAj1B,EAAA40B,EAAAmB,EAAAC,EAAAR,EAAAC,GACAS,EAAAnC,EAAA3H,QAAA2H,EAAAvI,UAAA7Z,EAAAskB,IACAC,EAAAP,GACAE,EAAAH,EACAI,EAAAH,EACAD,EAAA11B,EACA21B,EAAAO,GAEAA,EAAAJ,IACAD,EAAA71B,EACA21B,EAAAO,GAGA,IAAArZ,EAAA6Y,EAAAd,EACAuB,GAAAjB,EAAAtB,SAAAsB,EAAAvB,YAAA9W,EAAAqY,EAAAvB,WACA,GAAA+B,IAAAG,EACA,SAEA,IAAAO,EAAAnB,EAAAS,EAAAd,EAAAmB,EAAAC,EAAAR,EAAAC,GACAY,EAAApB,EAAAY,EAAAjB,EAAAmB,EAAAC,EAAAR,EAAAC,GAKA,OAFAE,EAjHA,SAAAtgB,EAAAzO,EAAArF,GAEA,IAAA+0B,EAAAvC,EAAAvI,UAAAnW,EAAA9T,GACAg1B,EAAAxC,EAAAvI,UAAA5kB,EAAAyO,GACAmhB,GAAAD,EAAA,IAAAA,EAAA,IAGA,OAFAxzB,KAAAC,IAAA+wB,EAAAtI,KAAA6K,EAAAE,IAAAzC,EAAA3H,QAAAmK,GA4GAE,CAAAL,EAAAC,EAAA1kB,KAEAoiB,EAAAtI,KAAAsI,EAAAvI,UAAA6K,EAAAD,GAAArC,EAAAvI,UAAA7Z,EAAAykB,IAAA,IAGAT,EAAAQ,EAAA,EAAApB,KAMArvB,iBAEAH,QAAA,SAAA2vB,EAAAtyB,EAAA4H,GAKA,IAJA,IAAAmH,GAAA/O,EAAAV,EAAAU,EAAAT,GACAuzB,EAAA,EACAC,EAAAtV,OAAAuV,UAEA51B,EAAA,EAA2BA,EAAA40B,IAAqB50B,EAAA,CAChD,IAAAi2B,EAAAhB,EAAAj1B,EAAA40B,EAAAM,EAAA7f,MAAA6f,EAAAtuB,IAAAsuB,EAAAxB,QAAA7sB,OAAA,EAAAquB,EAAAxB,QAAA,SAAAwB,EAAAxB,QAAA7sB,OAAA,EAAAquB,EAAAxB,QAAA,UACAwC,EAAAnC,EAAA3H,QAAA2H,EAAAvI,UAAA7Z,EAAAskB,IACAC,EAAAP,IACAD,EAAA11B,EACA21B,EAAAO,GAGA,IAAArZ,EAAA6Y,EAAAd,EAEA,OAAAe,IADAT,EAAAtB,SAAAsB,EAAAvB,YAAA9W,EAAAqY,EAAAvB,YACA,mCC1LA,IACAnwB,EADAC,EAAAxB,WAAAwB,YACAD,EAAA9C,OAAAgD,iBACUC,wBAAgBC,OAAA,SAAAtD,EAAAuD,GAAsCvD,EAAAqD,UAAAE,IAChE,SAAAvD,EAAAuD,GAAyB,QAAAtC,KAAAsC,IAAAvC,eAAAC,KAAAjB,EAAAiB,GAAAsC,EAAAtC,KACzB,SAAAjB,EAAAuD,GAEA,SAAAC,IAAuB7B,KAAA8B,YAAAzD,EADvBkD,EAAAlD,EAAAuD,GAEAvD,EAAAe,UAAA,OAAAwC,EAAAnD,OAAAsD,OAAAH,IAAAC,EAAAzC,UAAAwC,EAAAxC,UAAA,IAAAyC,KAGApD,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAiD,EAAAnE,EAAA,GACAswB,EAAAtwB,EAAA,GACAoE,EAAApE,EAAA,GACAqE,EAAArE,EAAA,GACA42B,EAAA52B,EAAA,IACAizB,EAAAjzB,EAAA,IAWA,IAyLAmF,EAzLA0xB,IAAA1xB,MACA8tB,EAAA/oB,SAAAkqB,MAAAp0B,EAAA,IACAmF,EAAA8tB,EAAA/oB,SAAAuqB,QAAAz0B,EAAA,IACAmF,EAAA8tB,EAAA/oB,SAAAwqB,SAAA10B,EAAA,IACAmF,GAEA2xB,EAAA92B,EAAA,IACA+2B,EAAA/2B,EAAA,IACAg3B,EAAAh3B,EAAA,IAKAi3B,EAAA,SAAAvyB,GAEA,SAAAuyB,IACA,cAAAvyB,KAAAqM,MAAA5O,KAAAmH,YAAAnH,KAsKA,OAxKAwB,EAAAszB,EAAAvyB,GAQAuyB,EAAA11B,UAAAiE,0BAAA,WACA,OAAAoxB,EAAA7B,YAAA5yB,KAAAwC,QAKAsyB,EAAA11B,UAAAsG,WAAA,WAeA,IAdA,IAAA1C,EAAAhD,KAAAwC,MAAAoT,EAAA5S,EAAA2oB,mBAAA,IAAA/V,EAAA,WAA6F,UAAYA,EAAAlS,EAAAV,EAAAU,KAAAqxB,EAAA/xB,EAAA+vB,iBAAA,IAAAgC,EAAAjE,EAAAhpB,cAAA5E,KAAA6xB,EACzGC,EAAAtxB,IAAAotB,EAAA/oB,SAAAkqB,KAAA,KAEA1D,IAAA0G,GACAzG,EAAA,IAEA,EAAAwG,EAAA,MACAC,GACAC,IAAAC,GACA3G,EAAA,IAEA,EAAAwG,EAAA,KACAG,GACAzQ,EAAA,EACA3mB,EAAA,EAAuBA,EAAA,EAAAi3B,IAAsBj3B,EAC7CwwB,EAAAxwB,EAAA,GAAA2mB,EACAwQ,EAAAn3B,EAAA,GAAA+C,KAAA4a,MAAA3d,EAAA,IAAAi3B,EAAA,GACAtQ,IAAA,EAEA,IAgHAuQ,EAAAE,EAhHApvB,EAAA7D,EAAAoL,eAAAylB,IAAAjC,EAAAhpB,cAAA5E,KAAAyxB,EAAAC,GAEApgB,WAAA,gBAEAwd,cAAA0C,EAAAhxB,KAEApF,KAAA,aACAiQ,QACA,mBAGA,OACA5I,GAAAkvB,EACAjvB,qBAEAK,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA2U,IACA7V,KAAA,QACA6H,KAAAlE,EAAAxC,sBAAA6V,IACAvQ,OAAA,SAAAvG,GAA0C,OAAAA,EAAA4U,SAG1CnN,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA6V,MACA/W,KAAA,MACA6H,KAAAlE,EAAAxC,sBAAA6V,IACAvQ,OAAA,SAAAvG,GAA0C,OAAAA,EAAAmG,OAG1CsB,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA2U,IACA7V,KAAA,aACA6H,KAAAlE,EAAAxC,sBAAA0U,IACApP,OAAA,SAAAvG,GAA0C,OAAAA,EAAAkzB,eAG1CzrB,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA8V,IACAhX,KAAA,WACA6H,KAAAlE,EAAAxC,sBAAA0U,IACApP,OAAA,SAAAvG,GAA0C,OAAAA,EAAAmzB,aAG1C1rB,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA6V,MACA/W,KAAA,QACA6H,KAAAlE,EAAAxC,sBAAA0U,IACApP,OAAA,SAAAvG,GAA0C,OAAAA,EAAAkE,UAG1CuD,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA2U,IACA7V,KAAA,aACA6H,KAAAlE,EAAAxC,sBAAAyU,KACAnP,OAAA,SAAAvG,GAA0C,OAAAA,EAAA+yB,cAG1CtrB,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA2U,IACA7V,KAAA,WACA6H,KAAAlE,EAAAxC,sBAAAyU,KACAnP,OAAA,SAAAvG,GAA0C,OAAAA,EAAAgzB,WAE1C9tB,IAAAotB,EAAA/oB,SAAAkqB,MACAhsB,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA2U,IACA7V,KAAA,UACA6H,KAAAlE,EAAAxC,sBAAAyU,KACAnP,OAAA,SAAAvG,GAA0C,kBACzB,KACjBkF,IAAAotB,EAAA/oB,SAAAuqB,QACArsB,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA2U,IACA7V,KAAA,UACA6H,KAAAlE,EAAAxC,sBAAAyU,KACAnP,OAAA,SAAAvG,GAA0C,OAAAA,EAAAizB,QAAA,MAAAjzB,EAAAizB,QAAA,aACzB,KACjB/tB,IAAAotB,EAAA/oB,SAAAwqB,SACAtsB,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA2U,IACA7V,KAAA,UACA6H,KAAAlE,EAAAxC,sBAAAyU,KACAnP,OAAA,SAAAvG,GAA0C,QA3I1CO,EA2I0CP,EAAAizB,SAzI1C,MACA1yB,EAAA,MACAA,EAAA,MACAA,EAAA,OALA,IAAAA,IA4IiB,MAEjByF,WAEAlG,KAAA,cACA6H,KAAAlE,EAAAvC,YAAAyU,IACApP,OAAA,SAAAV,GAAgD,OAAAsnB,QAGhD9lB,mBAKAvH,KAAA,WACA6H,KAAAlE,EAAAtC,oBAAA0V,MACAtQ,OAAA,SAAAiqB,GAA+C,OAE/CT,EAAAS,GAEAkG,EAAAlG,GAEA,EAAAgG,MAIAlvB,YAAA,EAAAkvB,EAAA,EACAjvB,KAAAwH,SAIAunB,EAAA11B,UAAAgG,aAAA,WACA,OACAC,SAAArD,EAAAitB,sBACA1pB,UAAAvD,EAAAwD,OAGAsvB,EAAA11B,UAAAqG,mBAAA,WACA,OACA6pB,oBAAA,EACAC,aAAA,IAIAuF,EAAA/xB,cACA8vB,WAAA/B,EAAA9oB,eAAA7E,IACAuB,KAAA,KACAuC,IAAA,OACA8rB,UAAAjC,EAAAhpB,cAAA5E,KACAQ,KAAAotB,EAAA/oB,SAAAkqB,MAEA6C,EAzKA,CA0KC3G,EAAA7rB,OACDnF,EAAA23B,0CCnNA,SAAAjtB,EAAA1J,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAEAb,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C8I,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,mCCNA,IACA0D,EADAC,EAAAxB,WAAAwB,YACAD,EAAA9C,OAAAgD,iBACUC,wBAAgBC,OAAA,SAAAtD,EAAAuD,GAAsCvD,EAAAqD,UAAAE,IAChE,SAAAvD,EAAAuD,GAAyB,QAAAtC,KAAAsC,IAAAvC,eAAAC,KAAAjB,EAAAiB,GAAAsC,EAAAtC,KACzB,SAAAjB,EAAAuD,GAEA,SAAAC,IAAuB7B,KAAA8B,YAAAzD,EADvBkD,EAAAlD,EAAAuD,GAEAvD,EAAAe,UAAA,OAAAwC,EAAAnD,OAAAsD,OAAAH,IAAAC,EAAAzC,UAAAwC,EAAAxC,UAAA,IAAAyC,KAGAiF,EAAA9G,WAAA8G,YAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAA7I,EAAAD,EAAA+I,UAAAvC,OAAA9F,EAAAV,EAAA,EAAA4I,EAAA,OAAAE,IAAAzI,OAAA2I,yBAAAJ,EAAAC,GAAAC,EACA,oBAAAG,SAAA,mBAAAA,QAAAC,SAAAxI,EAAAuI,QAAAC,SAAAP,EAAAC,EAAAC,EAAAC,QACA,QAAAnJ,EAAAgJ,EAAAnC,OAAA,EAA4C7G,GAAA,EAAQA,KAAAM,EAAA0I,EAAAhJ,MAAAe,GAAAV,EAAA,EAAAC,EAAAS,GAAAV,EAAA,EAAAC,EAAA2I,EAAAC,EAAAnI,GAAAT,EAAA2I,EAAAC,KAAAnI,GACpD,OAAAV,EAAA,GAAAU,GAAAL,OAAAC,eAAAsI,EAAAC,EAAAnI,MAEAL,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAwI,EAAA1J,EAAA,GAEAu3B,EAAA,SAAA7yB,GAEA,SAAA6yB,EAAAr1B,GACA,IAAA0C,EAAAF,EAAArE,KAAA8B,KAAAD,IAAAC,KAWA,OAVAyC,EAAAqc,OAAA,SACArc,EAAA6rB,OAAA,EACA7rB,EAAAxC,EAAA,EACAwC,EAAAvC,EAAA,EACAuC,EAAAC,MAAA,EACAD,EAAAqc,MAAA/e,EAAA+e,OAAArc,EAAAqc,MACArc,EAAA6rB,OAAAvuB,EAAAuuB,QAAA7rB,EAAA6rB,OACA7rB,EAAAxC,EAAAF,EAAAE,GAAAwC,EAAAxC,EACAwC,EAAAvC,EAAAH,EAAAG,GAAAuC,EAAAvC,EACAuC,EAAAC,MAAA3C,EAAA2C,OAAAD,EAAAC,MACAD,EAqCA,OAlDAjB,EAAA4zB,EAAA7yB,GAeA9D,OAAAC,eAAA02B,EAAAh2B,UAAA,SACAP,IAAA,WACA,SAAAmB,KAAAsuB,QAEA1vB,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA02B,EAAAh2B,UAAA,UACAP,IAAA,WACA,SAAAmB,KAAAsuB,QAEA1vB,YAAA,EACAD,cAAA,IAEAmI,GACAS,EAAAK,YACAwtB,EAAAh2B,UAAA,gBACA0H,GACAS,EAAAK,YACAwtB,EAAAh2B,UAAA,iBACA0H,GACAS,EAAAK,YACAwtB,EAAAh2B,UAAA,YACA0H,GACAS,EAAAK,YACAwtB,EAAAh2B,UAAA,YACA0H,GACAS,EAAAK,YACAwtB,EAAAh2B,UAAA,gBACA0H,GACAS,EAAAkoB,UACA2F,EAAAh2B,UAAA,cACA0H,GACAS,EAAAkoB,UACA2F,EAAAh2B,UAAA,eACAg2B,EAnDA,CADAv3B,EAAA,GAqDC2J,UACDrK,EAAAi4B,gCCzEAh4B,EAAAD,QAAA,g6BCAAC,EAAAD,QAAA,sjBCCA,IACAoE,EADAC,EAAAxB,WAAAwB,YACAD,EAAA9C,OAAAgD,iBACUC,wBAAgBC,OAAA,SAAAtD,EAAAuD,GAAsCvD,EAAAqD,UAAAE,IAChE,SAAAvD,EAAAuD,GAAyB,QAAAtC,KAAAsC,IAAAvC,eAAAC,KAAAjB,EAAAiB,GAAAsC,EAAAtC,KACzB,SAAAjB,EAAAuD,GAEA,SAAAC,IAAuB7B,KAAA8B,YAAAzD,EADvBkD,EAAAlD,EAAAuD,GAEAvD,EAAAe,UAAA,OAAAwC,EAAAnD,OAAAsD,OAAAH,IAAAC,EAAAzC,UAAAwC,EAAAxC,UAAA,IAAAyC,KAGApD,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAiD,EAAAnE,EAAA,GACAqwB,EAAArwB,EAAA,GACAswB,EAAAtwB,EAAA,GACAoE,EAAApE,EAAA,GAKAw3B,EAAA,SAAA9yB,GAEA,SAAA8yB,IACA,cAAA9yB,KAAAqM,MAAA5O,KAAAmH,YAAAnH,KA+HA,OAjIAwB,EAAA6zB,EAAA9yB,GAQA8yB,EAAAj2B,UAAAiE,0BAAA,WACA,IAAAZ,EAAAzC,KACA,OAEAyD,eAAA,SAAA6xB,GAA+C,WAAApH,EAAApuB,QAC/CM,OAAA,EAAAk1B,EAAAhH,OACAnuB,MAAA,EAAAm1B,EAAAhH,OACAruB,EAAAq1B,EAAAr1B,EAAAq1B,EAAAhH,OACApuB,EAAAo1B,EAAAp1B,EAAAo1B,EAAAhH,UAGAhrB,QAAA,SAAAgyB,EAAA30B,EAAA4H,GACA,IAAAgtB,EAAAhtB,EAAAoC,cAAA2qB,GACAE,EAAAjtB,EAAAoC,cAAAhK,GACA7B,EAAAw2B,EAAAhH,OAAA7rB,EAAAD,MAAAmpB,cACAvZ,GACAojB,EAAAv1B,EAAAs1B,EAAAt1B,EACAu1B,EAAAt1B,EAAAq1B,EAAAr1B,GAEA,OAAAkS,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAtT,OAOAu2B,EAAAj2B,UAAAsG,WAAA,WACA,IAAAimB,EAAA3rB,KAAAwC,MAAAmpB,aAAA,WAAkE,UAClE4C,GACAC,EAAA,EACAC,EAAA,EACAC,GAAA,EACAC,EAAA,EACAC,GAAA,EACAC,GAAA,GAEAC,GACAN,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,GAEA,OACAlpB,GAAA9H,EAAA,IACA+H,qBAEAK,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA2U,IACA7V,KAAA,SACA6H,KAAAlE,EAAAxC,sBAAA6V,IACAvQ,OAAA,SAAAuwB,GAA+C,OAAAA,EAAAr1B,EAAAq1B,EAAAp1B,MAG/C+F,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA6V,MACA/W,KAAA,SACA6H,KAAAlE,EAAAxC,sBAAA0U,IACApP,OAAA,SAAAuwB,GAA+C,OAAAA,EAAAhH,WAG/CroB,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA0U,KACA5V,KAAA,QACA6H,KAAAlE,EAAAxC,sBAAA0U,IACApP,OAAA,SAAAuwB,GAA+C,OAAAA,EAAA5yB,UAG/CuD,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA2U,IACA7V,KAAA,QACA6H,KAAAlE,EAAAxC,sBAAAyU,KACAnP,OAAA,SAAAuwB,GAA+C,OAAAA,EAAAxW,SAG/Cta,WAEAlG,KAAA,cACA6H,KAAAlE,EAAAvC,YAAAyU,IACApP,OAAA,SAAAV,GAAgD,OAAAsnB,QAGhD9lB,mBAKAvH,KAAA,WACA6H,KAAAlE,EAAAtC,oBAAA0V,MACAtQ,OAAA,SAAAiqB,GAA+C,OAE/CT,EAAAS,GAEAF,EAAAE,GACA,MAIAlpB,YAAA,EACAC,GAAAlI,EAAA,MAGAw3B,EAAAj2B,UAAAgG,aAAA,WACA,OACAC,SAAArD,EAAAitB,sBACA1pB,UAAAvD,EAAAwD,OAGA6vB,EAAAj2B,UAAAqG,mBAAA,WACA,OACA6pB,oBAAA,EACAC,aAAA,IAGA8F,EAAAtyB,cACA2B,KAAA,KACA+wB,kBAAA,EACAxuB,IAAA,GACA0kB,YAAA,WAAkC,WAElC0J,EAlIA,CAmIClH,EAAA7rB,OACDnF,EAAAk4B,4CCvJA,SAAAxtB,EAAA1J,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAEAb,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C8I,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,mCCLA,SAAAgK,EAAA1J,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAEAb,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C8I,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,kCCVA,IAAA6b,EAAA1Z,WAAA0Z,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,WAAAD,MAAAE,UAAA,SAAAjV,EAAAkV,GACA,SAAAC,EAAAlb,GAAmC,IAAMmb,EAAAJ,EAAAK,KAAApb,IAA+B,MAAAqb,GAAYJ,EAAAI,IACpF,SAAAC,EAAAtb,GAAkC,IAAMmb,EAAAJ,EAAA,MAAA/a,IAAmC,MAAAqb,GAAYJ,EAAAI,IACvF,SAAAF,EAAAI,GAA+BA,EAAAC,KAAAzV,EAAAwV,EAAAvb,OAAA,IAAA8a,EAAA,SAAA/U,GAAiEA,EAAAwV,EAAAvb,SAAyByb,KAAAP,EAAAI,GACzHH,GAAAJ,IAAAlL,MAAA+K,EAAAC,QAAAO,WAGAM,EAAAza,WAAAya,aAAA,SAAAd,EAAAe,GACA,IAAwGC,EAAAza,EAAA0a,EAAAC,EAAxGC,GAAa5N,MAAA,EAAA6N,KAAA,WAA6B,KAAAH,EAAA,SAAAA,EAAA,GAA0B,OAAAA,EAAA,IAAeI,QAAAC,QACnF,OAAAJ,GAAgBV,KAAAe,EAAA,GAAAC,MAAAD,EAAA,GAAAE,OAAAF,EAAA,IAAqD,mBAAAG,SAAAR,EAAAQ,OAAAC,UAAA,WAAoE,OAAAtb,OAAe6a,EACxJ,SAAAK,EAAAlc,GAAsB,gBAAAqR,GAAsB,OAC5C,SAAAkL,GACA,GAAAZ,EAAA,UAAAa,UAAA,mCACA,KAAAV,GAAA,IACA,GAAAH,EAAA,EAAAza,IAAA0a,EAAA1a,EAAA,EAAAqb,EAAA,YAAAA,EAAA,uBAAAX,IAAA1c,KAAAgC,EAAAqb,EAAA,KAAAhB,KAAA,OAAAK,EAEA,OADA1a,EAAA,EAAA0a,IAAAW,GAAA,EAAAX,EAAA7b,QACAwc,EAAA,IACA,cAAAX,EAAAW,EAAuC,MACvC,OAAkC,OAAlCT,EAAA5N,SAA2CnO,MAAAwc,EAAA,GAAAhB,MAAA,GAC3C,OAAAO,EAAA5N,QAAkChN,EAAAqb,EAAA,GAAWA,GAAA,GAAU,SACvD,OAAAA,EAAAT,EAAAG,IAAAQ,MAAyCX,EAAAE,KAAAS,MAAc,SACvD,QACA,KAAAb,KAAAE,EAAAE,MAAApW,OAAA,GAAAgW,IAAAhW,OAAA,UAAA2W,EAAA,QAAAA,EAAA,KAA6GT,EAAA,EAAO,SACpH,OAAAS,EAAA,MAAAX,GAAAW,EAAA,GAAAX,EAAA,IAAAW,EAAA,GAAAX,EAAA,KAAgFE,EAAA5N,MAAAqO,EAAA,GAAiB,MACjG,OAAAA,EAAA,IAAAT,EAAA5N,MAAA0N,EAAA,IAAwDE,EAAA5N,MAAA0N,EAAA,GAAgBA,EAAAW,EAAQ,MAChF,GAAAX,GAAAE,EAAA5N,MAAA0N,EAAA,IAA8CE,EAAA5N,MAAA0N,EAAA,GAAgBE,EAAAG,IAAAzO,KAAA+O,GAAgB,MAC9EX,EAAA,IAAAE,EAAAG,IAAAQ,MACAX,EAAAE,KAAAS,MAAiC,SAEjCF,EAAAb,EAAAxc,KAAAyb,EAAAmB,GACS,MAAAV,GAAYmB,GAAA,EAAAnB,GAAala,EAAA,EAAS,QAAUya,EAAAC,EAAA,EACrD,KAAAW,EAAA,SAAAA,EAAA,GAAmC,OAASxc,MAAAwc,EAAA,GAAAA,EAAA,UAAAhB,MAAA,GArBAL,EAAAlb,EAAAqR,OAwB5C5R,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAA22B,EAAA73B,EAAA,IACA,SAAA83B,EAAA/Y,GAEA,OAAAA,GAKAA,EAAAyC,QAAApf,EACA2c,EAAAyC,QAAAnf,EACA0c,EAAA4C,QAAAvf,EACA2c,EAAA4C,QAAAtf,IAPA,SAgBA,IAAA01B,EAAA,WACA,SAAAA,EAAA71B,GAEAC,KAAA61B,YAAA,GAEA71B,KAAA81B,aAAA,IAAAlzB,IAIA5C,KAAA+1B,cAAA,IAAAnzB,IACA5C,KAAAg2B,aAAAj2B,EAAAi2B,aA2IA,OArIAJ,EAAAx2B,UAAA62B,gBAAA,WACA,OAAAvc,EAAA1Z,UAAA,oBACA,IAAAk2B,EAAAC,EAAAC,EAAAjjB,EAAAnQ,EAAA4S,EAAAigB,EAAAQ,EACA,OAAA5b,EAAAza,KAAA,SAAA+0B,GACA,OAAAA,EAAA7nB,OACA,OACAgpB,GAAA,EACAC,EAAA,SAAAN,EAAAQ,GACA,IAAAC,EAAAC,EACA,OAAA9b,EAAAza,KAAA,SAAAgD,GACA,OAAAA,EAAAkK,OACA,OACA,OAAAmpB,EAAAzxB,OAAA,GAEAsxB,GAAA,EACAI,EAAAD,EAAArnB,MAAA,GAEAqnB,EAAAzxB,OAAA,GAEA,EAAAwxB,EAAAJ,aAAAQ,YAAAX,EAAAS,MAPA,KAQA,OAEAtzB,EAAA+X,QACAwb,EAAAH,EAAAL,cAAAl3B,IAAAg3B,KAIAS,EAAArxB,QAAA,SAAA8P,GACA,IAAA0hB,EAAAF,EAAA13B,IAAAkW,GAEA,GADAwhB,EAAAG,OAAA3hB,GACA0hB,EACA,QAAAtjB,EAAA,EAAAwjB,EAAAF,EAAyFtjB,EAAAwjB,EAAA/xB,OAAuBuO,IAAA,CAChH,IAAAnQ,EAAA2zB,EAAAxjB,GAAAxK,EAAA3F,EAAA,GAAAuB,EAAAvB,EAAA,GAGA2F,EAAAzE,eAAAW,YAAAN,KACAA,EAAAoD,QAAA,MAMA3E,EAAAkK,MAAA,EACA,qBAIAkpB,EAAAp2B,KACAmT,EAAA,EAAAnQ,EAAArB,MAAAi1B,KAAA52B,KAAA81B,aAAAe,WACA9B,EAAA7nB,MAAA,EACA,OACA,OAAAiG,EAAAnQ,EAAA4B,QACAgR,EAAA5S,EAAAmQ,GAAA0iB,EAAAjgB,EAAA,GAAAygB,EAAAzgB,EAAA,IACA,EAAAugB,EAAAN,EAAAQ,MAFA,KAGA,OACAtB,EAAAha,OACAga,EAAA7nB,MAAA,EACA,OAEA,OADAiG,KACA,KACA,gBAAA+iB,SAQAN,EAAAx2B,UAAA6E,QAAA,WACAjE,KAAAg2B,aAAA/xB,WAMA2xB,EAAAx2B,UAAA4V,gBAAA,SAAA/N,GACA,IAAAb,EAAApG,KAAAg2B,aAAAhhB,gBAAA/N,GACA,OAAAb,EACAA,EAAAwW,QAEA,MAOAgZ,EAAAx2B,UAAAq3B,QAAA,SAAA9tB,EAAApE,EAAAwQ,GACA,IAAA6H,EAAA7H,EAAA6H,QAEA,GAAAA,EACA,OAAA+Y,EAAA/Y,GAEA,GAAA7H,aAAA2gB,EAAAzoB,qBACA8H,EAAA7H,MAAA6P,KACA,OAAA4Y,EAAA/Y,GAKA,IAAAka,EAAA92B,KAAA+1B,cAAAl3B,IAAAmB,KAAA61B,aACA,GAAAiB,EAAA,CACA,IAAAC,EAAAD,EAAAj4B,IAAAkW,GACA,GAAAgiB,EAGA,OAFAA,EAAAvqB,MAAA7D,EAAApE,IACAA,EAAAoD,QAAA,EACAguB,EAAA/Y,QAIAka,EAAA,IAAAl0B,IACA5C,KAAA+1B,cAAAvqB,IAAAxL,KAAA61B,YAAAiB,GAKAvyB,EAAAoD,QAAA,EACA,IAAA2uB,EAAAt2B,KAAA81B,aAAAj3B,IAAAmB,KAAA61B,aAQA,OAPAS,IACAA,KACAt2B,KAAA81B,aAAAtqB,IAAAxL,KAAA61B,YAAAS,IAEAA,EAAA9pB,KAAAuI,GACA+hB,EAAAtrB,IAAAuJ,IAAApM,EAAApE,KAEAoxB,EAAA/Y,IAKAgZ,EAAAx2B,UAAA43B,eAAA,SAAAhwB,GACAhH,KAAA61B,YAAA7uB,GAEA4uB,EArJA,GAuJAz4B,EAAAy4B,qDC/MA,IACAr0B,EADAC,EAAAxB,WAAAwB,YACAD,EAAA9C,OAAAgD,iBACUC,wBAAgBC,OAAA,SAAAtD,EAAAuD,GAAsCvD,EAAAqD,UAAAE,IAChE,SAAAvD,EAAAuD,GAAyB,QAAAtC,KAAAsC,IAAAvC,eAAAC,KAAAjB,EAAAiB,GAAAsC,EAAAtC,KACzB,SAAAjB,EAAAuD,GAEA,SAAAC,IAAuB7B,KAAA8B,YAAAzD,EADvBkD,EAAAlD,EAAAuD,GAEAvD,EAAAe,UAAA,OAAAwC,EAAAnD,OAAAsD,OAAAH,IAAAC,EAAAzC,UAAAwC,EAAAxC,UAAA,IAAAyC,KAGApD,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAkD,EAAApE,EAAA,GAUAo5B,EAAA,SAAA10B,GAEA,SAAA00B,EAAAC,GACA,IAAAz0B,EAAAF,EAAArE,KAAA8B,YAIA,OAFAyC,EAAA00B,OAAA,IAAAv0B,IACAH,EAAAy0B,aACAz0B,EAuGA,OA7GAjB,EAAAy1B,EAAA10B,GAQA00B,EAAA73B,UAAAg4B,wBAAA,SAAAhd,GAGA,IAFA,IAAAid,EAAA,IAAAz0B,IAEAuQ,EAAA,EAAAnQ,EAAAhD,KAAAk3B,WAA8C/jB,EAAAnQ,EAAA4B,OAAgBuO,IAAA,CAC9D,IAAAmkB,EAAAt0B,EAAAmQ,GACAkkB,EAAA7rB,IAAA8rB,EAAA/uB,KAAAb,GAAA4vB,GAGA,OAAAld,EAAA7G,gBAAAnD,IAAA,SAAAmnB,GAA0D,OAAAF,EAAAx4B,IAAA04B,EAAAhvB,KAAAb,OAE1DuvB,EAAA73B,UAAAo4B,iBAAA,SAAApd,GAGA,IADA,IAAAqd,EAAA,IAAA70B,IACAuQ,EAAA,EAAAnQ,EAAAoX,EAAA7G,gBAAgDJ,EAAAnQ,EAAA4B,OAAgBuO,IAAA,CAChE,IAAAokB,EAAAv0B,EAAAmQ,GACAskB,EAAAjsB,IAAA+rB,EAAAhvB,KAAAb,GAAA6vB,EAAA7nB,OAEA,OAAA+nB,GAEAR,EAAA73B,UAAAwT,YAAA,SAAAwH,EAAAlI,GACAlS,KAAA03B,kBAAAtd,EAAA,SAAAzR,EAAAJ,EAAAmH,GAAiE,OAAA/G,EAAA5E,aAAA4zB,iBAAApvB,EAAAmH,EAAAwC,MAEjE+kB,EAAA73B,UAAAmT,WAAA,SAAA6H,EAAA/H,GACArS,KAAA03B,kBAAAtd,EAAA,SAAAzR,EAAAJ,EAAAmH,GAAiE,OAAA/G,EAAA5E,aAAA6zB,gBAAArvB,EAAAmH,MAEjEunB,EAAA73B,UAAAs4B,kBAAA,SAAAtd,EAAAyd,GAMA,IAJA,IAAAX,EAAAl3B,KAAAo3B,wBAAAhd,GAEAqd,EAAAz3B,KAAAw3B,iBAAApd,GAEAjH,EAAA,EAAA2kB,EAAAZ,EAAmD/jB,EAAA2kB,EAAAlzB,OAA0BuO,IAAA,CAC7E,IAAAmkB,EAAAQ,EAAA3kB,GACAnT,KAAA+3B,gBAAAT,EAAAG,EAAAI,GAEA,OAAAX,GAEAD,EAAA73B,UAAA6S,gBAAA,SAAAmI,EAAAlI,GACAlS,KAAA03B,kBAAAtd,EAAA,SAAAzR,EAAAJ,EAAAmH,GAAiE,OAAA/G,EAAA5E,aAAAkO,gBAAA1J,EAAAmH,EAAAwC,MAEjE+kB,EAAA73B,UAAAuT,cAAA,SAAAyH,EAAAlI,GACAlS,KAAA03B,kBAAAtd,EAAA,SAAAzR,EAAAJ,EAAAmH,GAAiE,OAAA/G,EAAA5E,aAAA4O,cAAApK,EAAAmH,EAAAwC,MAEjE+kB,EAAA73B,UAAAsT,gBAAA,SAAA0H,KAGA6c,EAAA73B,UAAAmS,eAAA,SAAA6I,GACA,IAAA3X,EAAAzC,KAEAy3B,EAAAz3B,KAAAw3B,iBAAApd,GACAxP,EAAAwP,EAAAxP,OAAA8E,MAEA1P,KAAAm3B,OAAAlyB,QAAA,SAAA+yB,EAAAV,GAEAG,EAAAjsB,IAAA8rB,EAAA/uB,KAAAb,GAAA4vB,EAAA/uB,KAAAuB,aAAAc,IACAnI,EAAAs1B,gBAAAT,EAAAG,EAAA,SAAA9uB,EAAAJ,EAAAmH,GAA+F,OAAA/G,EAAA5E,aAAAwN,eAAAhJ,EAAAmH,OAG/F1P,KAAAm3B,OAAAc,SAEAhB,EAAA73B,UAAAqS,gBAAA,SAAA2I,GACA,IAAA3X,EAAAzC,KAEAk4B,EAAAl4B,KAAA03B,kBAAAtd,EAAA,SAAAzR,EAAAJ,EAAAmH,GAAqF,OAAA/G,EAAA5E,aAAA0N,gBAAAlJ,EAAAmH,KAErF+nB,EAAAz3B,KAAAw3B,iBAAApd,GAEAxP,EAAAwP,EAAAxP,OAAA8E,MAEAyoB,EAAA,IAAAv1B,IACAs1B,EAAAjzB,QAAA,SAAAoL,GAA4C,OAAA8nB,EAAA3sB,IAAA6E,GAAA,KAE5C8nB,EAAAlzB,QAAA,SAAA+yB,EAAAV,GACA70B,EAAA00B,OAAAt4B,IAAAy4B,IACA70B,EAAAs1B,gBAAAT,EAAAG,EAAA,SAAA9uB,EAAAJ,EAAAmH,GAAmG,OAAA/G,EAAA5E,aAAA2O,gBAAAnK,EAAAmH,OAInG1P,KAAAm3B,OAAAlyB,QAAA,SAAA+yB,EAAAV,GACAa,EAAAt5B,IAAAy4B,KAEAG,EAAAjsB,IAAA8rB,EAAA/uB,KAAAb,GAAA4vB,EAAA/uB,KAAAuB,aAAAc,IACAnI,EAAAs1B,gBAAAT,EAAAG,EAAA,SAAA9uB,EAAAJ,EAAAmH,GAAmG,OAAA/G,EAAA5E,aAAAwN,eAAAhJ,EAAAmH,QAInG1P,KAAAm3B,OAAAgB,GAEAlB,EAAA73B,UAAA24B,gBAAA,SAAAT,EAAAG,EAAAI,GAGA,IAFA,IAAAtvB,EAAA+uB,EAAA/uB,KACAmH,EAAA+nB,EAAA54B,IAAA0J,EAAAb,IACAyL,EAAA,EAAAnQ,EAAAs0B,EAAA3e,MAAAzM,OAAqDiH,EAAAnQ,EAAA4B,OAAgBuO,IAAA,CACrE,IAAAxK,EAAA3F,EAAAmQ,GACAxK,EAAA1F,SAAA0F,EAAA1F,QAAAS,OAAAzB,EAAApC,SAAAsD,KACA00B,EAAAlvB,EAAAJ,EAAAmH,KAIAunB,EAAA73B,UAAA8R,YAAA,SAAAkJ,KAGA6c,EA9GA,CATAp5B,EAAA,IAwHCoK,cACD9K,EAAA85B,iDCrIAx4B,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAiD,EAAAnE,EAAA,GACAu6B,EAAAv6B,EAAA,IACAw6B,EAAAx6B,EAAA,IAmBAy6B,EAAA,WACA,SAAAA,EAAA3vB,EAAAgQ,GAEA3Y,KAAAu4B,WAEAv4B,KAAAw4B,qBAEAx4B,KAAAy4B,kBAAA,IAAA71B,IAEA5C,KAAA04B,gBAAA,IAAA91B,IACA5C,KAAA2I,QACA,IAAAgwB,EAAA,EACAhwB,EAAA/C,mBAAAX,QAAA,SAAAuP,GACAmkB,EAAA73B,KAAA2U,IAAAjB,EAAAvO,MAAA0yB,KAEA34B,KAAA44B,yBAAAD,EAAA,EACA34B,KAAA2Y,QAuIA,OAjIA2f,EAAAl5B,UAAAy5B,IAAA,SAAAt0B,GAEAvE,KAAAw4B,kBAAA5zB,QAAA,GACA5E,KAAA84B,gBAEA,IAAAC,EAAA/4B,KAAAw4B,kBAAAQ,QAOA,OANAD,EACA/4B,KAAAy4B,kBAAAjtB,IAAAjH,EAAAw0B,GAGAtuB,QAAAC,KAAA,qEAEAquB,GAKAT,EAAAl5B,UAAA6E,QAAA,WACAjE,KAAAu4B,QAAAtzB,QAAA,SAAA6R,GACAA,EAAAlO,SAAAmY,UACAjK,EAAAjO,SAAAkY,aAOAuX,EAAAl5B,UAAAyF,YAAA,SAAAN,GACA,OAAAvE,KAAAy4B,kBAAA55B,IAAA0F,IAMA+zB,EAAAl5B,UAAA65B,OAAA,SAAA10B,GACA,IAAAw0B,EAAA/4B,KAAAy4B,kBAAA55B,IAAA0F,GAOA,OAJAw0B,IACA/4B,KAAAy4B,kBAAA/B,OAAAnyB,GACAvE,KAAAw4B,kBAAA7T,QAAAoU,IAEAA,GAKAT,EAAAl5B,UAAA85B,gBAAA,WACA,IAAAz2B,EAAAzC,KACAA,KAAAu4B,QAAAtzB,QAAA,SAAA6R,EAAAnK,GACAlK,EAAAkW,MAAA1M,UAAAgtB,OAAAniB,EAAA/N,SAEA/I,KAAA2Y,MAAA,MAKA2f,EAAAl5B,UAAA+5B,SAAA,SAAAxgB,GACA,IAAAlW,EAAAzC,KACAA,KAAAu4B,QAAAtzB,QAAA,SAAA6R,EAAAnK,GACAlK,EAAAkW,MAAA1M,UAAA4sB,IAAA/hB,EAAA/N,SAEA/I,KAAA2Y,SAKA2f,EAAAl5B,UAAA05B,cAAA,WAIA,IAAAM,EAAA,IAAAp3B,EAAA0V,eACA1X,KAAA2I,MAAA9C,iBAAAZ,QAAA,SAAAyO,GACA0lB,EAAAvhB,aAAAnE,EAAApV,KAAAoV,EAAAC,qBAGAylB,EAAAC,UAAAjmB,MAAA,EACAgmB,EAAAC,UAAAC,MAAAt5B,KAAA2I,MAAA+N,sBAAA1W,KAAA2I,MAAA9F,oBAGA,IAAA02B,EAAAv5B,KAAA2I,MAAAE,SAAA2wB,QAEAC,EAAArB,EAAA1vB,mBAAA1I,KAAA2I,MAAAywB,EAAAG,GAGAE,EAAAptB,eAAA,EAEA,IAAAyK,GACA4iB,mBACAC,YACAC,cAAA,EACAhxB,SAAAwwB,EACAS,aAAA,EACAhxB,SAAA0wB,EACAxwB,MAAA0wB,GAEAz5B,KAAAu4B,QAAA/rB,KAAAsK,GAIA,IAAAgjB,EAAA,EACAC,EAAA1B,EAAAxf,+BACAmhB,EAAAT,EAAA/0B,SAAAu1B,GAEAC,EAAAj7B,MAAAi7B,EAAAj7B,MAAAqR,IAAA,WAAiE,WAAApO,EAAAi4B,QAAA,WACjE,QAAAl8B,EAAA,EAAA4G,EAAA3E,KAAA2I,MAAA+N,sBAA+D3Y,EAAA4G,IAAS5G,EAAA,CACxE,IAAAg7B,GACAmB,cAAAn8B,EACAsG,QAAA21B,EACAG,cAAAL,EAAA,IAEAA,GAAA95B,KAAA44B,yBACAG,EAAAoB,aAAA,GAAAL,EACAhjB,EAAA6iB,SAAAntB,KAAAusB,GACA/4B,KAAAw4B,kBAAAhsB,KAAAusB,GACA/4B,KAAA04B,gBAAAltB,IAAAutB,EAAAjiB,GAIA,IAAA/Y,EAAA,EAAA4G,EAAA3E,KAAA2I,MAAAnE,SAAAI,OAAyD7G,EAAA4G,IAAS5G,EAAA,CAClE,IAAAsG,EAAArE,KAAA2I,MAAAnE,SAAAzG,GACAsG,EAAAW,iBAAAwH,KAAA+sB,EAAA/0B,SAAAH,EAAA/F,OAIA0B,KAAA2Y,OACA3Y,KAAA2Y,MAAA1M,UAAA4sB,IAAA/hB,EAAA/N,QAGAuvB,EAvJA,GAyJAn7B,EAAAm7B,uDC/KA,IACA/2B,EADAC,EAAAxB,WAAAwB,YACAD,EAAA9C,OAAAgD,iBACUC,wBAAgBC,OAAA,SAAAtD,EAAAuD,GAAsCvD,EAAAqD,UAAAE,IAChE,SAAAvD,EAAAuD,GAAyB,QAAAtC,KAAAsC,IAAAvC,eAAAC,KAAAjB,EAAAiB,GAAAsC,EAAAtC,KACzB,SAAAjB,EAAAuD,GAEA,SAAAC,IAAuB7B,KAAA8B,YAAAzD,EADvBkD,EAAAlD,EAAAuD,GAEAvD,EAAAe,UAAA,OAAAwC,EAAAnD,OAAAsD,OAAAH,IAAAC,EAAAzC,UAAAwC,EAAAxC,UAAA,IAAAyC,KAGApD,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAoK,EAAAtL,EAAA,GAqBAV,EAAAi9B,YATA,SAAA12B,EAAA22B,GACA,IAAAC,KAMA,OALAD,EAAAp1B,QAAA,SAAAs1B,GACA72B,EAAAspB,KAAA,SAAApS,GAAoC,OAAA2f,aAAA3f,KACpC0f,EAAA9tB,KAAA+tB,KAGAD,GASA,IAAAE,EAAA,WASA,SAAAA,EAAAv5B,EAAAyB,GACA,IAAA+3B,EAAAx5B,EAAAw5B,IACAz6B,KAAA06B,GAAA,IAAAC,EAAA15B,EAAAhB,EAAAw6B,EAAAx6B,EAAAgB,EAAAf,EAAAu6B,EAAAv6B,EAAAwC,GACA1C,KAAA46B,GAAA,IAAAD,EAAAF,EAAAx6B,EAAAgB,EAAAT,MAAAS,EAAAf,EAAAu6B,EAAAv6B,EAAAwC,GACA1C,KAAA66B,GAAA,IAAAF,EAAA15B,EAAAhB,EAAAw6B,EAAAx6B,EAAAw6B,EAAAv6B,EAAAe,EAAAV,OAAAmC,GACA1C,KAAA86B,GAAA,IAAAH,EAAAF,EAAAx6B,EAAAgB,EAAAT,MAAAi6B,EAAAv6B,EAAAe,EAAAV,OAAAmC,GAkBA,OAVA83B,EAAAp7B,UAAA6E,QAAA,WACAjE,KAAA06B,GAAAz2B,UACAjE,KAAA46B,GAAA32B,UACAjE,KAAA66B,GAAA52B,UACAjE,KAAA86B,GAAA72B,iBACAjE,KAAA06B,UACA16B,KAAA46B,UACA56B,KAAA66B,UACA76B,KAAA86B,IAEAN,EAhCA,GAkCAr9B,EAAAq9B,YASA,IAAAG,EAAA,WAYA,SAAAA,EAAAt6B,EAAAG,EAAAF,EAAAC,EAAAmC,GACA1C,KAAA+6B,YACA/6B,KAAA0C,MAAA,EAEAyE,UAAAvC,QAAA,EACA5E,KAAAiB,OAAA,IAAAkI,EAAArJ,QACAM,OAAAE,EAAAC,EACAJ,MAAAK,EAAAH,EACAJ,EAAAI,EACAH,EAAAI,IAKAN,KAAAiB,OAAA,IAAAkI,EAAArJ,QACAM,OAAA,EACAD,MAAA,EACAF,EAAA,EACAC,EAAA,IAIAF,KAAA0C,SAAA,EAqTA,OA9SAi4B,EAAAv7B,UAAA6E,QAAA,kBACAjE,KAAA+6B,gBACA/6B,KAAAiB,OACAjB,KAAAg7B,QACAh7B,KAAAg7B,MAAA/2B,iBACAjE,KAAAg7B,QAgBAL,EAAAv7B,UAAAy5B,IAAA,SAAAoC,EAAAz4B,GAIA,OAAAy4B,EAAA95B,SAAAnB,KAAAiB,QACAjB,KAAAk7B,MAAAD,IAIAj7B,KAAAm7B,MAAAF,GACAj7B,KAAA64B,IAAAoC,EAAAz4B,KAaAm4B,EAAAv7B,UAAA+Q,OAAA,SAAA4qB,EAAAK,GACA,IAAA34B,EAAAzC,KAEAo7B,QAGA,IAAA7e,EAAA6B,OAAAuV,UACAnX,EAAA4B,OAAAuV,UACAlX,GAAA2B,OAAAuV,UACAjX,GAAA0B,OAAAuV,UAEAoH,EAAA91B,QAAA,SAAAg2B,GACAA,EAAAh7B,EAAAsc,IACAA,EAAA0e,EAAAh7B,GAEAg7B,EAAAz6B,MAAAic,IACAA,EAAAwe,EAAAz6B,OAEAy6B,EAAA16B,OAAAmc,IACAA,EAAAue,EAAA16B,QAEA06B,EAAA/6B,EAAAsc,IACAA,EAAAye,EAAA/6B,KAIAF,KAAAm7B,MAAA,IAAAhyB,EAAArJ,QACAM,OAAAsc,EAAAF,EACArc,MAAAsc,EAAAF,EACAtc,EAAAsc,EACArc,EAAAsc,KAGAue,EAAA91B,QAAA,SAAAg2B,EAAAtuB,GAAkD,OAAAlK,EAAAy4B,MAAAD,MAUlDN,EAAAv7B,UAAA+7B,MAAA,SAAAl6B,GACA,IAAAwB,EAAAzC,KAEA,IAAAiB,EAAAE,SAAAnB,KAAAiB,QAAA,CAIAjB,KAAAiB,OAAAL,YAAAK,GACAjB,KAAAiB,OAAAhB,GAAA,EACAD,KAAAiB,OAAAf,GAAA,EACAF,KAAAiB,OAAAd,OAAA,EACAH,KAAAiB,OAAAb,QAAA,EAEA,IAAAi7B,EAAAr7B,KAAAs7B,mBAEAt7B,KAAAg7B,QAEAh7B,KAAAg7B,MAAA/2B,iBACAjE,KAAAg7B,OAGAK,EAAAp2B,QAAA,SAAAg2B,EAAAtuB,GAAqD,OAAAlK,EAAAy4B,MAAAD,OAarDN,EAAAv7B,UAAA87B,MAAA,SAAAD,GAEA,OAAAj7B,KAAAg7B,MACAC,EAAA95B,SAAAnB,KAAAg7B,MAAAN,GAAAz5B,QACAjB,KAAAg7B,MAAAN,GAAAQ,MAAAD,GAEAA,EAAA95B,SAAAnB,KAAAg7B,MAAAJ,GAAA35B,QACAjB,KAAAg7B,MAAAJ,GAAAM,MAAAD,GAEAA,EAAA95B,SAAAnB,KAAAg7B,MAAAH,GAAA55B,QACAjB,KAAAg7B,MAAAH,GAAAK,MAAAD,GAEAA,EAAA95B,SAAAnB,KAAAg7B,MAAAF,GAAA75B,QACAjB,KAAAg7B,MAAAF,GAAAI,MAAAD,IAGAj7B,KAAA+6B,SAAAvuB,KAAAyuB,IACA,GAGAA,EAAA95B,SAAAnB,KAAAiB,SACAjB,KAAA+6B,SAAAvuB,KAAAyuB,GAEAj7B,KAAA+6B,SAAAn2B,OA5PA,GA4PA5E,KAAA0C,MA3PA,IA4PA1C,KAAAu7B,SAEA,IAKAC,MAAAP,EAAA96B,MAAA86B,EAAA76B,OAAA66B,EAAAh7B,EAAAg7B,EAAA/6B,GACAuK,QAAA+D,MAAA,2DAAAysB,GAEA,IAAAA,EAAAQ,MACAhxB,QAAA+D,MAAA,yDAAAysB,IAGA,IASAN,EAAAv7B,UAAAk8B,eAAA,SAAAI,GAQA,OAPAA,IAAA7sB,OAAA7O,KAAA+6B,UACA/6B,KAAAg7B,QACAh7B,KAAAg7B,MAAAN,GAAAY,eAAAI,GACA17B,KAAAg7B,MAAAJ,GAAAU,eAAAI,GACA17B,KAAAg7B,MAAAH,GAAAS,eAAAI,GACA17B,KAAAg7B,MAAAF,GAAAQ,eAAAI,IAEAA,GAWAf,EAAAv7B,UAAAwQ,MAAA,SAAA3O,EAAA06B,GAEA,OAAA16B,aAAAkI,EAAArJ,OACAmB,EAAAC,UAAAlB,KAAAiB,QACAjB,KAAA47B,YAAA36B,KAAA06B,MAMA37B,KAAAiB,OAAAP,cAAAO,GACAjB,KAAA67B,WAAA56B,KAAA06B,OAeAhB,EAAAv7B,UAAAw8B,YAAA,SAAAh6B,EAAA85B,EAAAC,GAuBA,OAtBA37B,KAAA+6B,SAAA91B,QAAA,SAAA7G,EAAAuO,GACAvO,EAAA8C,UAAAU,IACA85B,EAAAlvB,KAAApO,KAGAu9B,GACAA,EAAA37B,MAEAA,KAAAg7B,QACAp5B,EAAAV,UAAAlB,KAAAg7B,MAAAN,GAAAz5B,SACAjB,KAAAg7B,MAAAN,GAAAkB,YAAAh6B,EAAA85B,EAAAC,GAEA/5B,EAAAV,UAAAlB,KAAAg7B,MAAAJ,GAAA35B,SACAjB,KAAAg7B,MAAAJ,GAAAgB,YAAAh6B,EAAA85B,EAAAC,GAEA/5B,EAAAV,UAAAlB,KAAAg7B,MAAAH,GAAA55B,SACAjB,KAAAg7B,MAAAH,GAAAe,YAAAh6B,EAAA85B,EAAAC,GAEA/5B,EAAAV,UAAAlB,KAAAg7B,MAAAF,GAAA75B,SACAjB,KAAAg7B,MAAAF,GAAAc,YAAAh6B,EAAA85B,EAAAC,IAGAD,GAYAf,EAAAv7B,UAAAy8B,WAAA,SAAAv8B,EAAAo8B,EAAAC,GAuBA,OAtBA37B,KAAA+6B,SAAA91B,QAAA,SAAA7G,EAAAuO,GACAvO,EAAAsC,cAAApB,IACAo8B,EAAAlvB,KAAApO,KAGAu9B,GACAA,EAAA37B,MAEAA,KAAAg7B,QACAh7B,KAAAg7B,MAAAN,GAAAz5B,OAAAP,cAAApB,IACAU,KAAAg7B,MAAAN,GAAAmB,WAAAv8B,EAAAo8B,EAAAC,GAEA37B,KAAAg7B,MAAAJ,GAAA35B,OAAAP,cAAApB,IACAU,KAAAg7B,MAAAJ,GAAAiB,WAAAv8B,EAAAo8B,EAAAC,GAEA37B,KAAAg7B,MAAAH,GAAA55B,OAAAP,cAAApB,IACAU,KAAAg7B,MAAAH,GAAAgB,WAAAv8B,EAAAo8B,EAAAC,GAEA37B,KAAAg7B,MAAAF,GAAA75B,OAAAP,cAAApB,IACAU,KAAAg7B,MAAAF,GAAAe,WAAAv8B,EAAAo8B,EAAAC,IAGAD,GAKAf,EAAAv7B,UAAAm8B,MAAA,WAEA,IAAAF,EAAAr7B,KAAAs7B,mBAIA,IAFAt7B,KAAAg7B,MAAA,IAAAR,EAAAx6B,KAAAiB,OAAAjB,KAAA0C,MAAA,GACA1C,KAAA+6B,YACAM,EAAAz2B,OAAA,IACA,IAAAq2B,EAAAI,EAAA5f,MACAwf,GACAj7B,KAAAk7B,MAAAD,KAQAN,EAAAv7B,UAAAu8B,MAAA,SAAAG,GACA,IAAAC,EAAA/yB,QAAA8yB,EAAA97B,OACAA,KAAAg7B,QAAAe,IACA/7B,KAAAg7B,MAAAN,GAAAiB,MAAAG,GACA97B,KAAAg7B,MAAAJ,GAAAe,MAAAG,GACA97B,KAAAg7B,MAAAH,GAAAc,MAAAG,GACA97B,KAAAg7B,MAAAF,GAAAa,MAAAG,KAGAnB,EAvVA,GAyVAx9B,EAAAw9B,OACA,IAAAzqB,EAAA,SAAA3N,GAEA,SAAA2N,IACA,cAAA3N,KAAAqM,MAAA5O,KAAAmH,YAAAnH,KAEA,OAJAwB,EAAA0O,EAAA3N,GAIA2N,EALA,CAMCyqB,GACDx9B,EAAA+S,yCCnbAzR,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAi9B,EAAAn+B,EAAA,IACA,SAAAkB,EAAAuK,EAAA2yB,EAAAC,GACA,IAAAC,EAAA,GAAA7yB,EACA8yB,EAAAC,WAAAF,GACA,OAAAX,MAAAY,GACA,EAGAD,EAAAvvB,QAAA,QACAwvB,EAAA,IAAAH,EAEAG,EAAAF,EA+DA/+B,EAAAgO,0BAvDA,SAAAtK,EAAAy7B,EAAAJ,GACA,IAAAI,EAAAn8B,OAAA,IAAAm8B,EAAAl8B,QACAqK,QAAAC,KAAA,gNAAA7J,EAAA,aAAAy7B,EAAAl7B,YAEA,IACAjB,EACAC,EAFAa,EAAA+6B,EAAAlkB,WAAArX,cAIA,GAAAI,EAAAV,MACAc,EAAAd,MAAApB,EAAA8B,EAAAV,MAAAm8B,EAAAn8B,MAAA+7B,GACA,SAAAr7B,EACAI,EAAAhB,EAAAlB,EAAA8B,EAAAR,KAAAi8B,EAAAn8B,MAAA+7B,GAEA,UAAAr7B,IACAI,EAAAhB,EAAAq8B,EAAAn8B,MAAApB,EAAA8B,EAAAL,MAAA87B,EAAAn8B,MAAA+7B,GAAAj7B,EAAAd,WAGA,CACA,IAAAE,EAAAtB,EAAA8B,EAAAR,KAAAi8B,EAAAn8B,MAAA+7B,IAEA/7B,EADAm8B,EAAAn8B,MAAApB,EAAA8B,EAAAL,MAAA87B,EAAAn8B,MAAA+7B,GACA77B,GACA,GACAoK,QAAAC,KAAA,yNAAA7J,EAAA,aAAAy7B,EAAAl7B,YAEAH,EAAAhB,EAAAI,EACAY,EAAAd,QAGA,GAAAU,EAAAT,OACAa,EAAAb,OAAArB,EAAA8B,EAAAT,OAAAk8B,EAAAl8B,OAAA87B,GACA,QAAAr7B,EACAI,EAAAf,EAAAnB,EAAA8B,EAAAP,IAAAg8B,EAAAl8B,OAAA87B,GAEA,WAAAr7B,IACAI,EAAAf,EAAAo8B,EAAAl8B,OAAArB,EAAA8B,EAAAN,OAAA+7B,EAAAl8B,OAAA87B,GAAAj7B,EAAAb,YAGA,CACA,IAAAm8B,EAAAx9B,EAAA8B,EAAAP,IAAAg8B,EAAAl8B,OAAA87B,GAEA97B,EADAk8B,EAAAl8B,OAAArB,EAAA8B,EAAAN,OAAA+7B,EAAAl8B,OAAA87B,GACAK,EACAp8B,EAAA,GACAsK,QAAAC,KAAA,yNAAA7J,EAAA,aAAAy7B,EAAAl7B,YAEAH,EAAAf,EAAAq8B,EACAt7B,EAAAb,SAQA,OANA,IAAAa,EAAAd,OAAA,IAAAc,EAAAb,QAAAo7B,MAAAv6B,EAAAhB,EAAAgB,EAAAf,EAAAe,EAAAd,MAAAc,EAAAb,WACAa,EAAAhB,EAAA,EACAgB,EAAAf,EAAA,EACAe,EAAAd,MAAAm8B,EAAAn8B,MACAc,EAAAb,OAAAk8B,EAAAl8B,QAEAa,kBC1EA7D,EAAAD,QAAA,wgBCAAC,EAAAD,QAAA,mhBCAAC,EAAAD,QAAA,6hBCAAC,EAAAD,QAAA,0LCAAC,EAAAD,QAAA,mMCAAC,EAAAD,QAAA,gMCCAsB,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAiD,EAAAnE,EAAA,GACAoE,EAAApE,EAAA,GACAw6B,EAAAx6B,EAAA,IACA2+B,EAAA3+B,EAAA,IACA4+B,EAAA5+B,EAAA,IACA6+B,EAAA7+B,EAAA,IAEA8+B,GAAA,iBAEAC,GACAnO,EAAA,QACAC,EAAA,OACAC,EAAA,OACAC,EAAA,OACAiO,EAAA,OACAC,GAAA,OAEAC,GAAA,QAgBA5/B,EAAA6/B,4BAdA,SAAAC,GACA,OACAC,SAAA,gBAAA7E,EAAAxf,+BAAA,IAAAokB,EAAA,KACAj4B,mBAEA1G,KAAA+5B,EAAAxf,+BACAnV,KAAA,MACA3E,MAAA,IAAA4C,MAAAs7B,GACAE,KAAA,GACA/sB,IAAA,WAAsC,WAAApO,EAAAi4B,QAAA,eAkBtC98B,EAAAigC,2BAZA,SAAAnkB,GACA,IAAAokB,KACAA,EAAAZ,EAAA1jB,aAAAG,oBAAA,GAAAD,EACA,IAAAzL,GACAlP,KAAA,6BACAiQ,QACAkuB,EAAA1jB,aAAAG,qBAIA,OADAsjB,EAAAlvB,eAAAovB,EAAAW,EAAA7vB,GACAD,QA0BApQ,EAAAmgC,+BAvBA,SAAA13B,EAAAqT,GAGA,IAFA,IAAArP,EAAA,GAEA7L,EAAA,EAAmBA,EAAAkb,IAAuBlb,EAC1C6L,GAAA,eAAA7L,EAAA,eAAAA,EAAA,sBAiBA,OAfA6H,EAAAX,QAAA,SAAAyO,GACA,IAiBAN,EAAAjN,EAjBAF,EAAAyN,EAAAzN,MAEAyN,EAAAvN,OAAAlE,EAAAxC,sBAAAyU,KACAtK,GAAA,KAAAgzB,EAAAlpB,EAAAvN,MAAA,IAAAuN,EAAApV,KAAA,WAAA2H,EAAA,MAGAyN,EAAAtN,MACAwD,GAAA,KAAAgzB,EAAA36B,EAAAxC,sBAAAqV,OAAA,IAAApB,EAAApV,KAAA,WAAA2H,EAAA,MAIA2D,GAAA,KAAAgzB,EAAAlpB,EAAAvN,MAAA,IAAAuN,EAAApV,KAAA,WAAA2H,EAAA,KAMAmN,EANAM,EAAAxN,WAMAC,EANAuN,EAAAvN,KAOAw2B,EAAA3tB,MAAAoE,IAAAjN,GAAAo3B,KAAA,KAPA,QAGA3zB,iCCrEAnL,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAM9C,IAAAkD,EAAApE,EAAA,GACA2+B,EAAA3+B,EAAA,IACA2/B,EAAA3/B,EAAA,IACA4+B,EAAA5+B,EAAA,IACA4/B,EAAA5/B,EAAA,IAEA6/B,EAAA7/B,EAAA,IACA8/B,EAAA9/B,EAAA,IACA+/B,EAAA//B,EAAA,IACA4b,EAAA5b,EAAA,IACA2b,EAAA3b,EAAA,IAgBAggC,EAAA,EAEAjB,GACAnO,EAAA,QACAC,EAAA,OACAC,EAAA,OACAC,EAAA,OACAiO,EAAA,OACAC,GAAA,OACAC,GAAA,aAkGA,SAAAe,EAAAt5B,EAAAu5B,GACA,IAAAn0B,EAAA,GACAwK,EAAA2pB,GAAA97B,EAAArC,sBAAA2U,OAOA,OANA/P,EAAAS,QAAA,SAAAZ,GACAA,EAAAiC,gBAAAjC,EAAAiC,iBAAArE,EAAArC,sBAAA2U,OACAlQ,EAAAiC,kBAAA8N,GAAA/P,EAAAiC,kBAAArE,EAAArC,sBAAAuD,MACAyG,GAAA,YAAAvF,EAAAkC,WAAA,KAAAlC,EAAAkC,UAAA,QAAAq2B,EAAAv4B,EAAA8B,MAAA,IAAA9B,EAAA/F,KAAA,SAGAsL,EAtDAzM,EAAA6gC,gBApCA,SAAAC,EAAAp4B,EAAAD,EAAApB,GACA,IAiCAxB,EAAA4S,EAjCAsoB,EAmDA,SAAAr4B,EAAAD,EAAApB,GACA,IAAA64B,KACAc,EAqGA,SAAAd,EAAAz3B,EAAApB,GAEA,IAEA45B,EAFAZ,EAAAhV,UAAAC,oBA5KA,SAAAjkB,GAEA,IADA,IAAA80B,EAAA,EACAv7B,EAAA,EAAA4G,EAAAH,EAAAI,OAA0C7G,EAAA4G,IAAS5G,EACnDu7B,GAAAx4B,KAAAu9B,KAAA75B,EAAAzG,GAAAoI,KAAA,GAEA,OAAAmzB,EAyKAgF,CAAA95B,GAGA+5B,EAAA34B,EAAAoJ,MAAA,GAAAjC,KAAA,SAAAhB,EAAAnK,GAAqF,OAAAmK,EAAA9F,MAAArE,EAAAqE,QACrFu4B,EAAAD,EAAA,GAAAt4B,MACAw4B,EAAA,EAEAC,EAAA,IAAA97B,IACA+7B,EAAA,IAAA/7B,IACA27B,EAAAt5B,QAAA,SAAAyO,GACAA,EAAAzN,QAAAu4B,IACAA,EAAA9qB,EAAAzN,MACAw4B,KAEA,IAAAG,EAAAlrB,EAAAvN,KACA04B,EAAAH,EAAA7/B,IAAA4/B,IAAA,EACAK,EAAAD,EAAAD,EAEA,GAAAE,EAAAjB,EACApzB,QAAA+D,MAAA,yHAAAqvB,EAAA,gBAAAnqB,EAAApV,KAAA,qBAAAoV,EAAAzN,MAAA,4CAAA64B,OADA,CAKAJ,EAAAlzB,IAAAizB,EAAAK,GAEAprB,EAAAxN,WAAA24B,EAGA,IAAAE,EAAAJ,EAAA9/B,IAAA4/B,IAAA,IAAA77B,IACA,GAAA8Q,EAAAxN,WAAA04B,EAAAf,EACApzB,QAAA+D,MAAA,sHAAAqvB,EAAA,gBAAAnqB,EAAApV,KAAA,iBAAAoV,EAAAxN,WAAA,UAAAwN,EAAAvN,KAAA,yBAAAuN,EAAAxN,WAAAwN,EAAAvN,WADA,CAIA,QAAApI,EAAA2V,EAAAxN,WAA0CnI,EAAA2V,EAAAxN,WAAA04B,IAA0C7gC,EACpF,GAAAghC,EAAAlgC,IAAAd,GAEA,YADA0M,QAAA+D,MAAA,mHAAAqvB,EAAA,gBAAAnqB,EAAApV,KAAA,iBAAAoV,EAAAxN,WAAA,UAAAwN,EAAAvN,KAAA,yBAAAuN,EAAAxN,WAAAwN,EAAAvN,OAKAuN,EAAAzN,MAAAw4B,MAgBA,IACAxlB,EAAAwlB,EAAA,EAEA/nB,EAAA5V,KAAA4a,MAAA0iB,EAAAnlB,GAGA,OACAjU,iBAWA,SAAAq4B,EAAA3mB,EAAAsoB,EAAA/lB,EAAArT,GAIA,IADA,IAAAq5B,KACAlhC,EAAA,EAAmBA,EAAA2Y,IAA2B3Y,EAC9CkhC,EAAAzyB,KAAAzO,GAIA,IAAAmhC,EAcA,SAAAd,EAAA5pB,GACA,IAAA5K,EAAA,GACAu1B,EAAA,IAAAv8B,IACA+R,EAAA,EAEAH,EAAAvP,QAAA,SAAAyO,GACA,IAAA0rB,EAAAD,EAAAtgC,IAAA6U,EAAAzN,QAAA,IAAArD,IAEAw8B,EAAA5zB,IAAAkI,EAAAnN,WAAA,GAEAoO,EAAA7T,KAAA2U,IAAAd,EAAAjB,EAAAzN,SAGA,IAAAo5B,EAAA,IAAAz8B,IACAu8B,EAAAl6B,QAAA,SAAAq6B,EAAAr5B,GACA,IAAAs5B,EAAA59B,MAAAi1B,KAAA0I,EAAAtxB,QACAqxB,EAAA7zB,IAAAvF,EAAAs5B,EAAAhC,KAAA,YAOA,IAAAiC,EAAA/B,EAAAT,4BAAAoB,GAGA,OAFAx0B,GAAA41B,EAAAtC,UAGAA,SAFAtzB,GAAA,KAGA5E,iBAAAw6B,EAAAx6B,kBA1CAy6B,CAAA/oB,EAAAuC,EAAArT,GAOA,OANAy3B,EAAAZ,EAAA1jB,aAAAQ,6BAAA2lB,EAAAhC,SACAG,EAAAZ,EAAA1jB,aAAAG,oBAAA,GAAAD,EAIAokB,EAAAZ,EAAA1jB,aAAAK,uBAAAqkB,EAAAL,2BAAAnkB,IAEAjU,iBAAAk6B,EAAAl6B,kBA9BA06B,CAAArC,EAAA3mB,EALA,EAKAuC,EAAAslB,GAEAv5B,iBACA26B,SACA1mB,oBACAvC,0BA3KAkpB,CAAAvC,EAAAz3B,EAAApB,GACAq7B,IAAA78B,MACAy5B,EAAA1jB,aAAA7C,eAAA4nB,EAAAt5B,EAAAvC,EAAArC,sBAAA2U,QACAvR,EAAAy5B,EAAA1jB,aAAAlT,kBAwFA,SAAAA,GACA,IAAA+D,EAAA,GAIA,OAHA/D,EAAAZ,QAAA,SAAAyO,GACA9J,GAAA,aAAAgzB,EAAAlpB,EAAAvN,MAAA,KAAAuN,EAAAnN,WAAA,KAAAmN,EAAAnN,UAAA,QAAAmN,EAAApV,KAAA,QAEAsL,EA7FAk2B,CAAAj6B,GACA7C,GACAvE,OAAAqE,OAAAu6B,EAAAwC,GACA,IAeA78B,EAfAwK,GACAlP,KAAA,eACAiQ,QACAkuB,EAAA1jB,aAAAK,sBACAqjB,EAAA1jB,aAAAQ,4BACAkjB,EAAA1jB,aAAA7C,cACAumB,EAAA1jB,aAAAlT,mBAIA,OACAq3B,SAFAV,EAAAlvB,eAAAmM,EAAA4jB,EAAA7vB,GAEAD,OACAvI,iBAAAm5B,EAAAn5B,iBACA26B,QAAAxB,EAAAwB,SAxEAI,CAAAl6B,EAAAD,EAAApB,GACA64B,IAAAr6B,MACAy5B,EAAA1jB,aAAAS,mBA2CAgjB,EAAAlvB,eAAAkM,MAHAlb,KAAA,qBACAiQ,YAGAhB,OA3CAvK,EAAAy5B,EAAA1jB,aAAAU,aAAAykB,EAAAhB,SACAl6B,EAAAy5B,EAAA1jB,aAAAxL,QA2FA,SAAA0wB,EAAAr4B,EAAA8Q,EAAAuC,GACA,IAWAjW,EAXAq6B,IAAAr6B,MACAy5B,EAAA1jB,aAAAvE,YAyBA,SAAA5O,EAAAqT,GACA,IAAAokB,KACAA,EAAAZ,EAAA1jB,aAAAE,mBAAA,GAAAA,EACAokB,EAAAZ,EAAA1jB,aAAAM,uBAaA,SAAAzT,EAAAqT,GACA,OAAAwkB,EAAAH,+BAAA13B,EAAAqT,GAdA+mB,CAAAp6B,EAAAqT,GACA,IAAAzL,GACAlP,KAAA,+BACAiQ,QACAkuB,EAAA1jB,aAAAM,wBAIA,OADAmjB,EAAAlvB,eAAAswB,EAAAP,EAAA7vB,GACAD,OApCA0yB,CAAAr6B,EAAAqT,GACAjW,GACAwK,GACAlP,KAAA,sBACAiQ,QACAkuB,EAAA1jB,aAAAvE,aAIA,OADAgoB,EAAAlvB,eAAA2wB,EAAAl4B,GAAAs3B,EAAA7vB,GACAD,OAtGA2yB,CAAAjC,EAAAr4B,EAAAs4B,EAAAyB,QAAAjpB,sBAAAwnB,EAAAyB,QAAA1mB,mBACAjW,GACAwK,GACAlP,KAAA,4BACAiQ,QACAkuB,EAAA1jB,aAAAS,kBACAijB,EAAA1jB,aAAAU,YACAgjB,EAAA1jB,aAAAxL,SAGA4yB,EAAA3D,EAAAlvB,eAAAowB,EAAAL,EAAA7vB,GAaA,OAZAoI,MACA6mB,EAAA1jB,aAAA7C,eAAA4nB,EAAAt5B,EAAAvC,EAAArC,sBAAAyU,UACAuB,EAAA6mB,EAAA1jB,aAAAxL,QA4FA,SAAA0wB,GAOA,OADAzB,EAAAlvB,eAAA2wB,EAAAt4B,OAHArH,KAAA,wBACAiQ,YAGAhB,OAnGA6yB,CAAAnC,GAFAZ,EAGAznB,EACApI,GACAlP,KAAA,8BACAiQ,QACAkuB,EAAA1jB,aAAA7C,cACAumB,EAAA1jB,aAAAxL,UAKA5H,GAFA62B,EAAAlvB,eAAAqwB,EAAAN,EAAA7vB,GAEAD,OACAvI,iBAAAk5B,EAAAl5B,iBACA0R,sBAAAwnB,EAAAyB,QAAAjpB,sBACA3Q,GAAAo6B,EAAA5yB,uCC1FA,IACAhM,EADAC,EAAAxB,WAAAwB,YACAD,EAAA9C,OAAAgD,iBACUC,wBAAgBC,OAAA,SAAAtD,EAAAuD,GAAsCvD,EAAAqD,UAAAE,IAChE,SAAAvD,EAAAuD,GAAyB,QAAAtC,KAAAsC,IAAAvC,eAAAC,KAAAjB,EAAAiB,GAAAsC,EAAAtC,KACzB,SAAAjB,EAAAuD,GAEA,SAAAC,IAAuB7B,KAAA8B,YAAAzD,EADvBkD,EAAAlD,EAAAuD,GAEAvD,EAAAe,UAAA,OAAAwC,EAAAnD,OAAAsD,OAAAH,IAAAC,EAAAzC,UAAAwC,EAAAxC,UAAA,IAAAyC,KAGAiF,EAAA9G,WAAA8G,YAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAA7I,EAAAD,EAAA+I,UAAAvC,OAAA9F,EAAAV,EAAA,EAAA4I,EAAA,OAAAE,IAAAzI,OAAA2I,yBAAAJ,EAAAC,GAAAC,EACA,oBAAAG,SAAA,mBAAAA,QAAAC,SAAAxI,EAAAuI,QAAAC,SAAAP,EAAAC,EAAAC,EAAAC,QACA,QAAAnJ,EAAAgJ,EAAAnC,OAAA,EAA4C7G,GAAA,EAAQA,KAAAM,EAAA0I,EAAAhJ,MAAAe,GAAAV,EAAA,EAAAC,EAAAS,GAAAV,EAAA,EAAAC,EAAA2I,EAAAC,EAAAnI,GAAAT,EAAA2I,EAAAC,KAAAnI,GACpD,OAAAV,EAAA,GAAAU,GAAAL,OAAAC,eAAAsI,EAAAC,EAAAnI,MAEAL,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IA0UAiE,EA1UAuE,EAAA1J,EAAA,GACAwiC,EAAAxiC,EAAA,GACA6xB,EAAA7xB,EAAA,GACAoE,EAAApE,EAAA,GAKAyiC,EAAA,IAAA19B,IAKA+sB,IAAA3sB,MACAf,EAAAZ,WAAAuuB,SAAA,SAAA7D,EAAA7e,GACA6e,EAAA9rB,GAAA8rB,EAAA+D,QACA/D,EAAA7rB,GAAA6rB,EAAA+D,SAEA9sB,EAAAf,EAAAZ,WAAA0uB,WAAA,SAAAhE,EAAA7e,GACA6e,EAAA9rB,EAAAiN,EAAA/M,MAAA,EACA4rB,EAAA7rB,GAAA6rB,EAAA+D,SAEA9sB,EAAAf,EAAAZ,WAAA2uB,UAAA,SAAAjE,EAAA7e,GACA6e,EAAA9rB,EAAAiN,EAAA/M,MAAA4rB,EAAA+D,QACA/D,EAAA7rB,GAAA6rB,EAAA+D,SAEA9sB,EAAAf,EAAAZ,WAAA4uB,YAAA,SAAAlE,EAAA7e,GACA6e,EAAA9rB,GAAA8rB,EAAA+D,QACA/D,EAAA7rB,EAAAgN,EAAA9M,OAAA,GAEA4C,EAAAf,EAAAZ,WAAA6uB,QAAA,SAAAnE,EAAA7e,GACA6e,EAAA9rB,EAAAiN,EAAA/M,MAAA,EACA4rB,EAAA7rB,EAAAgN,EAAA9M,OAAA,GAEA4C,EAAAf,EAAAZ,WAAA8uB,aAAA,SAAApE,EAAA7e,GACA6e,EAAA9rB,EAAAiN,EAAA/M,MAAA4rB,EAAA+D,QACA/D,EAAA7rB,EAAAgN,EAAA9M,OAAA,GAEA4C,EAAAf,EAAAZ,WAAA+uB,YAAA,SAAArE,EAAA7e,GACA6e,EAAA9rB,GAAA8rB,EAAA+D,QACA/D,EAAA7rB,EAAAgN,EAAA9M,OAAA2rB,EAAA+D,SAEA9sB,EAAAf,EAAAZ,WAAAgvB,cAAA,SAAAtE,EAAA7e,GACA6e,EAAA9rB,EAAAiN,EAAA/M,MAAA,EACA4rB,EAAA7rB,EAAAgN,EAAA9M,OAAA2rB,EAAA+D,SAEA9sB,EAAAf,EAAAZ,WAAAivB,aAAA,SAAAvE,EAAA7e,GACA6e,EAAA9rB,EAAAiN,EAAA/M,MAAA4rB,EAAA+D,QACA/D,EAAA7rB,EAAAgN,EAAA9M,OAAA2rB,EAAA+D,SAEA9sB,EAAAf,EAAAZ,WAAAkvB,QAAA,SAAAxE,EAAA7e,GACA6e,EAAA9rB,EAAA8rB,EAAA9rB,GAAA,EACA8rB,EAAA7rB,EAAA6rB,EAAA7rB,GAAA,GAEA8C,GAgBAu9B,EAAA,SAAAh+B,GAEA,SAAAg+B,EAAAxgC,GACA,IAAA0C,EAAAF,EAAArE,KAAA8B,KAAAD,IAAAC,KAEAyC,EAAAqc,OAAA,SAEArc,EAAAC,MAAA,EAEAD,EAAAguB,QAAAxuB,EAAAX,UAAAovB,UAEAjuB,EAAA4H,MAAA,EAEA5H,EAAAxC,EAAA,EAEAwC,EAAAvC,EAAA,EAIAuC,EAAA+9B,SAAA,GACA/9B,EAAAg+B,YAAA,QACAh+B,EAAAi+B,UAAA,GACAj+B,EAAAk+B,WAAA,SACAl+B,EAAAm+B,YAAA,IACAn+B,EAAAo+B,UAAA,EACAp+B,EAAAq+B,MAAA,GACAr+B,EAAAs+B,OAAA,EACAt+B,EAAAu+B,QAAA,EACAv+B,EAAAw+B,cAAA,EAGAx+B,EAAAkuB,SACAb,QAAA,EACApsB,KAAAzB,EAAAZ,WAAAuuB,QACA3vB,EAAA,EACAC,EAAA,GAEAuC,EAAAC,MAAA3C,EAAA2C,OAAAD,EAAAC,MACAD,EAAAqc,MAAA/e,EAAA+e,OAAArc,EAAAqc,MACArc,EAAAguB,QAAA1wB,EAAA0wB,SAAAhuB,EAAAguB,QACAhuB,EAAA4H,MAAAtK,EAAAsK,OAAA5H,EAAA4H,MACA5H,EAAAxC,EAAAF,EAAAE,GAAAwC,EAAAxC,EACAwC,EAAAvC,EAAAH,EAAAG,GAAAuC,EAAAvC,EACAuC,EAAAg+B,YAAA1gC,EAAAke,YAAAxb,EAAAg+B,YACAh+B,EAAAi+B,UAAA3gC,EAAA0d,UAAAhb,EAAAi+B,UACAj+B,EAAAk+B,WAAA5gC,EAAAmhC,WAAAz+B,EAAAk+B,WACAl+B,EAAAm+B,YAAA7gC,EAAAie,YAAAvb,EAAAm+B,YACAn+B,EAAAo+B,UAAA9gC,EAAA+c,UAAA,EACAra,EAAAq+B,MAAA/gC,EAAAgd,MAAAta,EAAAq+B,MAGAr+B,EAAA+9B,SAAAH,EAAAzkB,gBAAAiC,YAAApb,EAAA,GAGA,IAGAka,EAHAwkB,EAAA1+B,EAAA+9B,SAAA,IAAA/9B,EAAAo+B,UAEAO,EAAAd,EAAAzhC,IAAA4D,EAAAq+B,OAsCA,OApCAM,GAEAzkB,EAAAykB,EAAAviC,IAAAsiC,KAGAxkB,EAAA0kB,aAIAD,EAAA,IAAAx+B,IAGA+Z,IACAA,GACA0kB,WAAA,EACAtsB,SAAA,IAAAsrB,EAAApzB,mBAAAxK,IAGA1C,EAAA4c,gBACAA,EAAA5H,SAAA3H,YAAArN,EAAA4c,cAAAtS,OAAA,GAGAsS,EAAA5H,SAAA3H,YAAAuP,EAAA5H,SAAA3H,aAAA,EAGAizB,EAAAzkB,gBAAA4C,WAAA7B,EAAA5H,UAGAurB,EAAA90B,IAAA/I,EAAAq+B,MAAAM,GACAA,EAAA51B,IAAA21B,EAAAxkB,IAEAla,EAAA6+B,eAAA3kB,EACAla,EAAAs+B,OAAApkB,EAAA5H,SAAA4H,cAAAzS,MAAA/J,MACAsC,EAAAu+B,QAAArkB,EAAA5H,SAAA4H,cAAAzS,MAAA9J,OAEAL,EAAAgsB,QAAAtpB,EAAAmuB,UAAA7wB,EAAAgsB,QACAtpB,EAmKA,OAhQAjB,EAAA++B,EAAAh+B,GAmGAg+B,EAAAt8B,QAAA,WACAq8B,EAAArI,SAEAx5B,OAAAC,eAAA6hC,EAAAnhC,UAAA,WAQAP,IAAA,WAA0B,OAAAmB,KAAAwgC,UAC1B5hC,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA6hC,EAAAnhC,UAAA,eAEAP,IAAA,WAA0B,OAAAmB,KAAAihC,cAC1BriC,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA6hC,EAAAnhC,UAAA,cAEAP,IAAA,WAA0B,OAAAmB,KAAAygC,aAC1B7hC,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA6hC,EAAAnhC,UAAA,YAKAP,IAAA,WAA0B,OAAAmB,KAAA0gC,WAC1B9hC,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA6hC,EAAAnhC,UAAA,aAEAP,IAAA,WAA0B,OAAAmB,KAAA2gC,YAC1B/hC,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA6hC,EAAAnhC,UAAA,cAEAP,IAAA,WAA0B,OAAAmB,KAAA4gC,aAC1BhiC,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA6hC,EAAAnhC,UAAA,YAEAP,IAAA,WAA0B,OAAAmB,KAAA6gC,WAC1BjiC,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA6hC,EAAAnhC,UAAA,YAEAP,IAAA,WAA0B,OAAAmB,KAAAshC,eAAAvsB,UAC1BnW,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA6hC,EAAAnhC,UAAA,QAEAP,IAAA,WAA0B,OAAAmB,KAAA8gC,OAC1BliC,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA6hC,EAAAnhC,UAAA,iBAKAP,IAAA,WAA0B,OAAAmB,KAAAshC,eAAAvsB,SAAAsH,eAAArc,KAAA+c,MAC1Bne,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA6hC,EAAAnhC,UAAA,SAKAP,IAAA,WACA,OAAAmB,KAAA+gC,QAEAniC,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA6hC,EAAAnhC,UAAA,UAKAP,IAAA,WACA,OAAAmB,KAAAghC,SAEApiC,YAAA,EACAD,cAAA,IAMA4hC,EAAAnhC,UAAA6E,QAAA,WACAjE,KAAAihC,eACAjhC,KAAAihC,cAAA,EACAjhC,KAAAshC,eAAAD,aAEA,IAAArhC,KAAAshC,eAAAD,YACArhC,KAAAshC,eAAAvsB,WAIAtW,OAAAC,eAAA6hC,EAAAnhC,UAAA,UACAP,IAAA,WACA,OAAAmB,KAAA2wB,SAEA/xB,YAAA,EACAD,cAAA,IAKA4hC,EAAAnhC,UAAAwxB,UAAA,SAAA7E,GACA,IAAA8E,GACAf,QAAA/D,EAAA+D,SAAA,EACApsB,KAAAqoB,EAAAroB,KACAzD,EAAA8rB,EAAA9rB,GAAA,EACAC,EAAA6rB,EAAA7rB,GAAA,GAGAyvB,EAAAkB,EAAAntB,MAAAmtB,EAAA7wB,MAEAA,KAAA2wB,QAAAE,GAEA/pB,GACAS,EAAAK,YACA24B,EAAAnhC,UAAA,gBACA0H,GACAS,EAAAK,YACA24B,EAAAnhC,UAAA,gBACA0H,GACAS,EAAAK,YACA24B,EAAAnhC,UAAA,kBACA0H,GACAS,EAAAK,YACA24B,EAAAnhC,UAAA,gBACA0H,GACAS,EAAAK,YACA24B,EAAAnhC,UAAA,YACA0H,GACAS,EAAAK,YACA24B,EAAAnhC,UAAA,YACA0H,GACAS,EAAAK,YACA24B,EAAAnhC,UAAA,kBACA0H,GACAS,EAAAkoB,UACA8Q,EAAAnhC,UAAA,eACAmhC,EAjQA,CAkQC7Q,EAAAloB,UACDrK,EAAAojC,+BC3VAnjC,EAAAD,QAAA,+9FCAAC,EAAAD,QAAA,sOCCA,IACAoE,EADAC,EAAAxB,WAAAwB,YACAD,EAAA9C,OAAAgD,iBACUC,wBAAgBC,OAAA,SAAAtD,EAAAuD,GAAsCvD,EAAAqD,UAAAE,IAChE,SAAAvD,EAAAuD,GAAyB,QAAAtC,KAAAsC,IAAAvC,eAAAC,KAAAjB,EAAAiB,GAAAsC,EAAAtC,KACzB,SAAAjB,EAAAuD,GAEA,SAAAC,IAAuB7B,KAAA8B,YAAAzD,EADvBkD,EAAAlD,EAAAuD,GAEAvD,EAAAe,UAAA,OAAAwC,EAAAnD,OAAAsD,OAAAH,IAAAC,EAAAzC,UAAAwC,EAAAxC,UAAA,IAAAyC,KAGApD,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAiD,EAAAnE,EAAA,GACAqwB,EAAArwB,EAAA,GACAswB,EAAAtwB,EAAA,GACAoE,EAAApE,EAAA,GACAizB,EAAAjzB,EAAA,GACA4X,EAAA3U,KAAA2U,IAAAkG,EAAA7a,KAAA6a,IAKA4lB,EAAA,SAAAh/B,GAEA,SAAAg/B,IACA,cAAAh/B,KAAAqM,MAAA5O,KAAAmH,YAAAnH,KAwMA,OA1MAwB,EAAA+/B,EAAAh/B,GAQAg/B,EAAAniC,UAAAiE,0BAAA,WACA,OAEAI,eAAA,SAAAyJ,GACA,IAAA0gB,GACA1gB,EAAAjN,EAAAiN,EAAA6e,OAAA9rB,EACAiN,EAAAhN,EAAAgN,EAAA6e,OAAA7rB,GAEA,WAAAguB,EAAApuB,QACAM,OAAA8M,EAAA9M,OACAD,MAAA+M,EAAA/M,MACAF,EAAA2tB,EAAA,GACA1tB,EAAA0tB,EAAA,MAIAtqB,QAAA,SAAA4J,EAAAvM,EAAA4H,GAGA,IAAAyoB,EAAAvb,EAAA7G,WAAA,EAAArG,EAAA4B,OAAAE,OACA4mB,EAAAtV,EAAA/M,WAAA,EAAArG,EAAA4B,OAAAE,OAEA,GAAA6C,EAAAujB,UAAAK,EAAAxvB,UAAA4vB,OACA,SAIA,GAAAhkB,EAAAujB,UAAAK,EAAAxvB,UAAAovB,UAAA,CAEA,GAAAO,GAAA,GAAAD,GAAA,EACA,SAKA,IAAApD,EAAArlB,EAAAoC,eACA1K,EAAAiN,EAAAjN,EAAAiN,EAAA6e,OAAA9rB,EAAAsI,EAAA4B,OAAAE,MAAA,GACAnK,EAAAgN,EAAAhN,EAAAgN,EAAA6e,OAAA7rB,EAAAqI,EAAA4B,OAAAE,MAAA,KAEA+mB,EAAA7oB,EAAAoC,cAAAhK,GAEA,WAAAutB,EAAApuB,QACAM,OAAA8M,EAAA9M,OACAD,MAAA+M,EAAA/M,MACAF,EAAA2tB,EAAA3tB,EACAC,EAAA0tB,EAAA1tB,IACyBQ,cAAA0wB,GAKzB,GAAAlkB,EAAAujB,UAAAK,EAAAxvB,UAAA6vB,MAAA,CAEAvD,EAAArlB,EAAAoC,eACA1K,EAAAiN,EAAAjN,EAAAiN,EAAA6e,OAAA9rB,EAAAsI,EAAA4B,OAAAE,MAAA,GACAnK,EAAAgN,EAAAhN,EAAAgN,EAAA6e,OAAA7rB,EAAAqI,EAAA4B,OAAAE,MAAA,KAEA+mB,EAAA7oB,EAAAoC,cAAAhK,GAEA,WAAAutB,EAAApuB,QACAM,OAAA8M,EAAA9M,OACAD,MAAA+M,EAAA/M,MACAF,EAAA2tB,EAAA3tB,EACAC,EAAA0tB,EAAA1tB,IACqBQ,cAAA0wB,GAErB,YAOAmQ,EAAAniC,UAAAsG,WAAA,WACA,IAAAjD,EAAAzC,KACAuuB,GACAC,EAAA,EACAC,EAAA,EACAC,GAAA,EACAC,EAAA,EACAC,GAAA,EACAC,GAAA,GAEAC,GACAN,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,GAEA,OACAlpB,GAAA9H,EAAA,IACA+H,qBAEAK,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA2U,IACA7V,KAAA,WACA6H,KAAAlE,EAAAxC,sBAAA6V,IACAvQ,OAAA,SAAAvG,GAA0C,OAAAA,EAAAyB,EAAAzB,EAAA0B,MAG1C+F,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA6V,MACA/W,KAAA,SACA6H,KAAAlE,EAAAxC,sBAAA6V,IACAvQ,OAAA,SAAAvG,GAA0C,OAAAA,EAAAutB,OAAA9rB,EAAAzB,EAAAutB,OAAA7rB,MAG1C+F,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA2U,IACA7V,KAAA,OACA6H,KAAAlE,EAAAxC,sBAAA6V,IACAvQ,OAAA,SAAAvG,GAA0C,OAAAA,EAAA2B,MAAA3B,EAAA4B,WAG1C6F,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA6V,MACA/W,KAAA,QACA6H,KAAAlE,EAAAxC,sBAAA0U,IACApP,OAAA,SAAAvG,GAA0C,OAAAA,EAAAkE,UAG1CuD,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA0U,KACA5V,KAAA,UACA6H,KAAAlE,EAAAxC,sBAAA0U,IACApP,OAAA,SAAAvG,GAA0C,OAAAA,EAAAiyB,YAG1CrqB,OACAa,IAAAjH,KAAAwC,MAAA4D,MACA9H,KAAA,cAEA2H,MAAA,EACA3H,KAAA,UACAyG,OAAA,SAAAvG,GAA0C,OAAAiE,EAAAsS,SAAA0hB,QAAAh0B,EAAAjE,IAAAuW,aAG1C9O,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA2U,IACA7V,KAAA,QACA6H,KAAAlE,EAAAxC,sBAAAyU,KACAnP,OAAA,SAAAvG,GAA0C,OAAAA,EAAAsgB,SAG1C7Y,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA2U,IACA7V,KAAA,QACA6H,KAAAlE,EAAAxC,sBAAA0U,IACApP,OAAA,SAAAvG,GAA0C,OAAAA,EAAA6L,UAG1C7F,WAEAlG,KAAA,cACA6H,KAAAlE,EAAAvC,YAAAyU,IACApP,OAAA,SAAAssB,GAA0C,aAG1CxrB,mBAKAvH,KAAA,WACA6H,KAAAlE,EAAAtC,oBAAA0V,MACAtQ,OAAA,SAAAiqB,GAA+C,OAE/CT,EAAAS,GAEAF,EAAAE,GACA,MAIAlpB,YAAA,EACAC,GAAAlI,EAAA,MAGA0jC,EAAAniC,UAAAgG,aAAA,WACA,OACAC,SAAArD,EAAAitB,sBACA1pB,UAAAvD,EAAAwD,OAGA+7B,EAAAniC,UAAAqG,mBAAA,WACA,OACAypB,SAAAltB,EAAAmtB,eACAC,SAAAptB,EAAAqtB,UACAC,oBAAA,EACAC,aAAA,IAGAgS,EA3MA,CA4MCpT,EAAA7rB,OACDnF,EAAAokC,2CClOA,IAoCAnyB,EApCAsK,EAAA1Z,WAAA0Z,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,WAAAD,MAAAE,UAAA,SAAAjV,EAAAkV,GACA,SAAAC,EAAAlb,GAAmC,IAAMmb,EAAAJ,EAAAK,KAAApb,IAA+B,MAAAqb,GAAYJ,EAAAI,IACpF,SAAAC,EAAAtb,GAAkC,IAAMmb,EAAAJ,EAAA,MAAA/a,IAAmC,MAAAqb,GAAYJ,EAAAI,IACvF,SAAAF,EAAAI,GAA+BA,EAAAC,KAAAzV,EAAAwV,EAAAvb,OAAA,IAAA8a,EAAA,SAAA/U,GAAiEA,EAAAwV,EAAAvb,SAAyByb,KAAAP,EAAAI,GACzHH,GAAAJ,IAAAlL,MAAA+K,EAAAC,QAAAO,WAGAM,EAAAza,WAAAya,aAAA,SAAAd,EAAAe,GACA,IAAwGC,EAAAza,EAAA0a,EAAAC,EAAxGC,GAAa5N,MAAA,EAAA6N,KAAA,WAA6B,KAAAH,EAAA,SAAAA,EAAA,GAA0B,OAAAA,EAAA,IAAeI,QAAAC,QACnF,OAAAJ,GAAgBV,KAAAe,EAAA,GAAAC,MAAAD,EAAA,GAAAE,OAAAF,EAAA,IAAqD,mBAAAG,SAAAR,EAAAQ,OAAAC,UAAA,WAAoE,OAAAtb,OAAe6a,EACxJ,SAAAK,EAAAlc,GAAsB,gBAAAqR,GAAsB,OAC5C,SAAAkL,GACA,GAAAZ,EAAA,UAAAa,UAAA,mCACA,KAAAV,GAAA,IACA,GAAAH,EAAA,EAAAza,IAAA0a,EAAA1a,EAAA,EAAAqb,EAAA,YAAAA,EAAA,uBAAAX,IAAA1c,KAAAgC,EAAAqb,EAAA,KAAAhB,KAAA,OAAAK,EAEA,OADA1a,EAAA,EAAA0a,IAAAW,GAAA,EAAAX,EAAA7b,QACAwc,EAAA,IACA,cAAAX,EAAAW,EAAuC,MACvC,OAAkC,OAAlCT,EAAA5N,SAA2CnO,MAAAwc,EAAA,GAAAhB,MAAA,GAC3C,OAAAO,EAAA5N,QAAkChN,EAAAqb,EAAA,GAAWA,GAAA,GAAU,SACvD,OAAAA,EAAAT,EAAAG,IAAAQ,MAAyCX,EAAAE,KAAAS,MAAc,SACvD,QACA,KAAAb,KAAAE,EAAAE,MAAApW,OAAA,GAAAgW,IAAAhW,OAAA,UAAA2W,EAAA,QAAAA,EAAA,KAA6GT,EAAA,EAAO,SACpH,OAAAS,EAAA,MAAAX,GAAAW,EAAA,GAAAX,EAAA,IAAAW,EAAA,GAAAX,EAAA,KAAgFE,EAAA5N,MAAAqO,EAAA,GAAiB,MACjG,OAAAA,EAAA,IAAAT,EAAA5N,MAAA0N,EAAA,IAAwDE,EAAA5N,MAAA0N,EAAA,GAAgBA,EAAAW,EAAQ,MAChF,GAAAX,GAAAE,EAAA5N,MAAA0N,EAAA,IAA8CE,EAAA5N,MAAA0N,EAAA,GAAgBE,EAAAG,IAAAzO,KAAA+O,GAAgB,MAC9EX,EAAA,IAAAE,EAAAG,IAAAQ,MACAX,EAAAE,KAAAS,MAAiC,SAEjCF,EAAAb,EAAAxc,KAAAyb,EAAAmB,GACS,MAAAV,GAAYmB,GAAA,EAAAnB,GAAala,EAAA,EAAS,QAAUya,EAAAC,EAAA,EACrD,KAAAW,EAAA,SAAAA,EAAA,GAAmC,OAASxc,MAAAwc,EAAA,GAAAA,EAAA,UAAAhB,MAAA,GArBAL,EAAAlb,EAAAqR,OAwB5C5R,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAE9C,IAAAyiC,EAAA,WACA,SAAAA,KAuGA,OAlGAA,EAAA3lB,aAAA,WACA,OAAAnC,EAAA1Z,UAAA,oBACA,OAAAya,EAAAza,KAAA,SAAAgD,GACA,OAAAA,EAAAkK,OACA,OACA,OAAAkC,GAAA,MACApP,KAAA8b,cACA,MAAA/B,QAAA,SAAAjV,GAA6E,OAAAiX,WAAAjX,EAAA,QAC7E,OAEA,OADA9B,EAAA+X,QACA,KACA,uBAQAymB,EAAA1lB,WAAA,WAIA,OAHA1M,IACAA,EAAA+C,SAAAmL,cAAA,UAAAxB,WAAA,OAEA1M,GAWAoyB,EAAAC,mBAAA,SAAA1sB,EAAA3H,GAEA,IAAAsR,EAAA3J,EAAA2J,MAAAnO,QACA,IAAAmO,EAAAve,OAAA,IAAAue,EAAAte,QAKAgP,SAAAjP,MAAA,IACAiP,SAAAhP,OAAA,IAGAgP,EAAAoO,UAAAkB,EAAA,KAEA3J,EAAA4H,cAAA5H,EAAA4H,gBACAC,SAAsBxc,OAAA,EAAAD,MAAA,GACtB+J,OAAoB9J,OAAA,EAAAD,MAAA,IAGpB4U,EAAA4H,cAAAC,SACAxc,OAAAse,EAAAte,OAAA2U,EAAA3H,YACAjN,MAAAue,EAAAve,MAAA4U,EAAA3H,aAEA2H,EAAA4H,cAAAzS,OACA9J,OAAAse,EAAAte,OACAD,MAAAue,EAAAve,OAEA4U,EAAA4H,cAAA+B,SAvBAjU,QAAAC,KAAA,0FA4BA82B,EAAAjjB,OAAA,SAAAxJ,GACA,OAAA2E,EAAA1Z,UAAA,oBACA,OAAAya,EAAAza,KAAA,SAAAgD,GACA,OAAAA,EAAAkK,OACA,OAEA,SAAAlN,KAAA6b,gBACA,OAKA,OAHA7Y,EAAA+X,OAEA/a,KAAAyhC,mBAAA1sB,IAAA3H,cACA,EAAA2H,SAQAysB,EAAAhjB,WAAA,SAAAzJ,GAGA,OADA/U,KAAA8b,aACA1M,GAMApP,KAAAyhC,mBAAA1sB,IAAA3H,aACA2H,IANAtK,QAAAC,KAAA,gFACAqK,IAOAysB,EAxGA,GA0GArkC,EAAAqkC,gDC/IA,IAAA9nB,EAAA1Z,WAAA0Z,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,WAAAD,MAAAE,UAAA,SAAAjV,EAAAkV,GACA,SAAAC,EAAAlb,GAAmC,IAAMmb,EAAAJ,EAAAK,KAAApb,IAA+B,MAAAqb,GAAYJ,EAAAI,IACpF,SAAAC,EAAAtb,GAAkC,IAAMmb,EAAAJ,EAAA,MAAA/a,IAAmC,MAAAqb,GAAYJ,EAAAI,IACvF,SAAAF,EAAAI,GAA+BA,EAAAC,KAAAzV,EAAAwV,EAAAvb,OAAA,IAAA8a,EAAA,SAAA/U,GAAiEA,EAAAwV,EAAAvb,SAAyByb,KAAAP,EAAAI,GACzHH,GAAAJ,IAAAlL,MAAA+K,EAAAC,QAAAO,WAGAM,EAAAza,WAAAya,aAAA,SAAAd,EAAAe,GACA,IAAwGC,EAAAza,EAAA0a,EAAAC,EAAxGC,GAAa5N,MAAA,EAAA6N,KAAA,WAA6B,KAAAH,EAAA,SAAAA,EAAA,GAA0B,OAAAA,EAAA,IAAeI,QAAAC,QACnF,OAAAJ,GAAgBV,KAAAe,EAAA,GAAAC,MAAAD,EAAA,GAAAE,OAAAF,EAAA,IAAqD,mBAAAG,SAAAR,EAAAQ,OAAAC,UAAA,WAAoE,OAAAtb,OAAe6a,EACxJ,SAAAK,EAAAlc,GAAsB,gBAAAqR,GAAsB,OAC5C,SAAAkL,GACA,GAAAZ,EAAA,UAAAa,UAAA,mCACA,KAAAV,GAAA,IACA,GAAAH,EAAA,EAAAza,IAAA0a,EAAA1a,EAAA,EAAAqb,EAAA,YAAAA,EAAA,uBAAAX,IAAA1c,KAAAgC,EAAAqb,EAAA,KAAAhB,KAAA,OAAAK,EAEA,OADA1a,EAAA,EAAA0a,IAAAW,GAAA,EAAAX,EAAA7b,QACAwc,EAAA,IACA,cAAAX,EAAAW,EAAuC,MACvC,OAAkC,OAAlCT,EAAA5N,SAA2CnO,MAAAwc,EAAA,GAAAhB,MAAA,GAC3C,OAAAO,EAAA5N,QAAkChN,EAAAqb,EAAA,GAAWA,GAAA,GAAU,SACvD,OAAAA,EAAAT,EAAAG,IAAAQ,MAAyCX,EAAAE,KAAAS,MAAc,SACvD,QACA,KAAAb,KAAAE,EAAAE,MAAApW,OAAA,GAAAgW,IAAAhW,OAAA,UAAA2W,EAAA,QAAAA,EAAA,KAA6GT,EAAA,EAAO,SACpH,OAAAS,EAAA,MAAAX,GAAAW,EAAA,GAAAX,EAAA,IAAAW,EAAA,GAAAX,EAAA,KAAgFE,EAAA5N,MAAAqO,EAAA,GAAiB,MACjG,OAAAA,EAAA,IAAAT,EAAA5N,MAAA0N,EAAA,IAAwDE,EAAA5N,MAAA0N,EAAA,GAAgBA,EAAAW,EAAQ,MAChF,GAAAX,GAAAE,EAAA5N,MAAA0N,EAAA,IAA8CE,EAAA5N,MAAA0N,EAAA,GAAgBE,EAAAG,IAAAzO,KAAA+O,GAAgB,MAC9EX,EAAA,IAAAE,EAAAG,IAAAQ,MACAX,EAAAE,KAAAS,MAAiC,SAEjCF,EAAAb,EAAAxc,KAAAyb,EAAAmB,GACS,MAAAV,GAAYmB,GAAA,EAAAnB,GAAala,EAAA,EAAS,QAAUya,EAAAC,EAAA,EACrD,KAAAW,EAAA,SAAAA,EAAA,GAAmC,OAASxc,MAAAwc,EAAA,GAAAA,EAAA,UAAAhB,MAAA,GArBAL,EAAAlb,EAAAqR,OAwB5C5R,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAoK,EAAAtL,EAAA,GACA6jC,EAAA7jC,EAAA,IACA8jC,EAAA9jC,EAAA,IACA+jC,EAAA/jC,EAAA,IACAgkC,EAAAhkC,EAAA,IACA63B,EAAA73B,EAAA,IACAikC,EAAAjkC,EAAA,IACAkiB,EAAAliB,EAAA,IACA0jB,EAAA1jB,EAAA,GAAAA,CAAA,uBACAkkC,GACA5pB,YAAA,EACAoH,SAActf,EAAA,EAAAC,EAAA,GACdsf,SAAcvf,EAAA,EAAAC,EAAA,GACdif,iBAAA,GACAC,aAAA,KACAC,SAAcpf,EAAA,EAAAC,EAAA,GACdof,SAAcrf,EAAA,EAAAC,EAAA,GACdwf,cAAA,EACAC,SAAA,EACAE,YAAA,EACAD,WAAA,EACAH,aAAA,GAkBA,IAAAuiB,EAAA,WACA,SAAAA,IAEAhiC,KAAAiiC,SAAA,IAAAr/B,IA2SA,OA7RAo/B,EAAA5iC,UAAA8iC,YAAA,SAAAniC,EAAAs2B,GACA,OAAA3c,EAAA1Z,UAAA,oBACA,IAAAoG,EACA,OAAAqU,EAAAza,KAAA,SAAAgD,GACA,OAAAA,EAAAkK,OACA,OAMA,OALA9G,EAAA,IAAAs7B,EAAAzhB,MAAAlgB,IAEA0gB,WAAAzgB,MAEAA,KAAAiiC,SAAAz2B,IAAApF,EAAAsB,GAAAtB,GACAiwB,GACA,EAAAr2B,KAAAw2B,YAAApwB,EAAAsB,GAAA2uB,KADA,KAEA,OACArzB,EAAA+X,OACA/X,EAAAkK,MAAA,EACA,OAEA,OADAqU,EAAA,qBAAAnb,IACA,EAAAA,SAQA47B,EAAA5iC,UAAA6E,QAAA,WACAjE,KAAAiiC,SAAAh9B,QAAA,SAAAlG,GAAgD,OAAAA,EAAAkF,aAOhD+9B,EAAA5iC,UAAA+iC,aAAA,SAAAC,GACA,IAAAh8B,EAAApG,KAAAiiC,SAAApjC,IAAAujC,GACAh8B,GACAA,EAAAnC,WAGA+9B,EAAA5iC,UAAAijC,gBAAA,SAAA3jB,EAAA0jB,GAEA,OADA1jB,EAAAjgB,OAAAqE,OAAA4b,EAAAqjB,GAAkD5iB,iBAAAijB,KAalDJ,EAAA5iC,UAAAgF,KAAA,SAAAgC,EAAA2O,GACA,OAAA2E,EAAA1Z,UAAA,oBACA,IAAAoP,EAAAgzB,EAAAE,EAAA3lB,EAAAC,EAAA2lB,EAAAC,EAAApiB,EAAAqiB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAxiC,EAAAg8B,EAAAl8B,EAAAG,EACA,OAAAia,EAAAza,KAAA,SAAAgD,GACA,OAAAA,EAAAkK,OACA,OAIA,OAHAkC,EAAAhJ,EAAAwW,QAAA8B,MACA0jB,EAAAh8B,EAAAsB,GAEAtB,EAAAua,iBAAA5L,IAIA,EAAA/U,KAAAgjC,UAAAjuB,KAHAtK,QAAAC,KAAA,sGAAAtE,EAAA2O,IACA,EAAAgF,QAAAjV,SAAA,KAGA,OAGA,OAFAw9B,EAAAt/B,EAAA+X,UAnGA2D,EAqGA3J,EAAA6H,QApGA+C,GAAA,EACAjB,KAAAiB,SACAjB,EAAAkB,YAAAlB,EAAAmB,cACAF,GAAA,GAGAA,IA+FAhD,EAAA5H,EAAA4H,cACAC,EAAA7H,EAAA6H,QACA2lB,EAAA,IAAAp5B,EAAArJ,QAAwDO,KAAA,EAAAG,MAAAmc,EAAAC,QAAAzc,MAAAG,IAAA,EAAAC,OAAAoc,EAAAC,QAAAxc,UACxDoiC,GACAS,MAAArmB,EACAsmB,OAAAX,IAGAW,OAAA/iC,OAAA,EACAqiC,EAAAU,OAAA9iC,QAAA,EACAggB,EAAAha,EAAAga,SACAqiB,EAAAriB,EAAA+iB,OAAAX,KAGAjhB,EAAA,gCAAAkhB,GAEAA,EAAAW,UAAAxmB,EACA8lB,EAAAD,EAAAY,eAAApjC,EAAAmG,EAAAjG,MACAwiC,EAAAF,EAAAY,eAAAnjC,EAAAkG,EAAAhG,OACAwiC,EAAAH,EAAAY,eAAAljC,MAAAiG,EAAAjG,MACA0iC,EAAAJ,EAAAY,eAAAjjC,OAAAgG,EAAAhG,OACA0iC,EAAA,EAAA18B,EAAAjG,MACA4iC,EAAA,IAAA55B,EAAArJ,QACAS,OAAA,EAAAoiC,EACAtiC,KAAAqiC,EACAliC,MAAAkiC,EAAAE,EACAtiC,IAAA,GAAAqiC,EAAAE,KAEAtiC,EAAAwiC,EAAAxiC,OACAg8B,EAAAwG,EAAA7iC,EACAG,EAAA0iC,EAAA9iC,EACAO,EAAAuiC,EAAA9iC,EAAA8iC,EAAA5iC,MAAA2iC,EACAlmB,EAAAuC,iBAAAijB,EACAxlB,EAAAyC,SAAmDpf,EAAAI,EAAAH,EAAAq8B,GACnD3f,EAAA4C,SAAmDvf,EAAAO,EAAAN,EAAAK,GACnDqc,EAAA2C,SAAmDtf,EAAAI,EAAAH,EAAAK,GACnDqc,EAAA0C,SAAmDrf,EAAAO,EAAAN,EAAAq8B,GACnD3f,EAAA6C,aAAA3e,KAAAC,IAAA6b,EAAA0C,QAAArf,EAAA2c,EAAAyC,QAAApf,GACA2c,EAAA8C,cAAA5e,KAAAC,IAAA6b,EAAA0C,QAAApf,EAAA0c,EAAA4C,QAAAtf,GACA0c,EAAAgD,WAAAjD,EAAAC,QAAAzc,MACAyc,EAAAiD,YAAAlD,EAAAC,QAAAxc,OAEAgP,EAAA0M,WAAA,MAAA0B,UAAA8kB,EAAAG,EAAAY,eAAApjC,EAAAwiC,EAAAY,eAAAnjC,IAEA,QAIAuK,QAAA+D,MAAA,oCAAAuG,GACAA,EAAA6H,QAAA5c,KAAAqiC,gBAAAttB,EAAA6H,QAAAwlB,IACA,SAKA33B,QAAA+D,MAAA,2BAAAuG,GACAA,EAAA6H,QAAA5c,KAAAqiC,gBAAAttB,EAAA6H,QAAAwlB,IACA,OA/JA,IAAA1jB,EACAiB,OA0KAqiB,EAAA5iC,UAAA4V,gBAAA,SAAAotB,GACA,OAAApiC,KAAAiiC,SAAApjC,IAAAujC,IAUAJ,EAAA5iC,UAAA4jC,UAAA,SAAAjuB,GACA,OAAA2E,EAAA1Z,UAAA,oBACA,IAAAsjC,EAAAC,EAAAC,EACA,OAAA/oB,EAAAza,KAAA,SAAAgD,GACA,OAAAA,EAAAkK,OACA,OAGA,OAFAq2B,EAAAxuB,EAAA6H,SAAA,IAAAmD,EAAAb,WACAnK,EAAA6H,QAAA2mB,EACAxuB,aAAA8sB,EAAApjB,mBACA1J,EAAA2J,MAAAnO,QACA,IAAAwE,EAAA2J,MAAAnO,QAAApQ,OAAA,IAAA4U,EAAA2J,MAAAnO,QAAAnQ,QACAojC,EAAAzuB,EAAA2J,MAAAnO,QACAgzB,EAAA3jB,WAAA4jB,EAAArjC,MACAojC,EAAA1jB,YAAA2jB,EAAApjC,OACAmjC,EAAAprB,YAAAqrB,EAAArjC,MAAAqjC,EAAApjC,QACA,EAAAojC,KAEA,MAAAzpB,QAAA,SAAAjV,EAAAkV,GACA,IAAA0E,EAAA3J,EAAA2J,MAAAnO,QACAmO,EAAA+kB,OAAA,WACAF,EAAA3jB,WAAAlB,EAAAve,MACAojC,EAAA1jB,YAAAnB,EAAAte,OACAmjC,EAAAprB,YAAAuG,EAAAve,MAAAue,EAAAte,OACA0E,EAAA4Z,IAEAA,EAAAglB,QAAA,WACA5+B,EAAA,WAjBA,MADA,KAqBA,OAEA,SADA9B,EAAA+X,QAEA,OACAhG,EAAA2J,MAAAilB,OACAL,EAAAvuB,EAAA2J,MAAAilB,MAEA3gC,EAAAkK,MAAA,EACA,oBACA,OACA,OAAA6H,aAAA2gB,EAAAzoB,mBACA8H,EAAA4H,cAAAvN,QAAA,MACA,EAAA0yB,EAAAlmB,gBAAA2C,OAAAxJ,KAFA,KAGA,OACA/R,EAAA+X,OACA/X,EAAAkK,MAAA,EACA,OASA,OAPA6H,EAAA4H,cAAAvN,QACAmS,EAAA,sBAAAxM,EAAA4H,eACA2mB,EAAAvuB,EAAA4H,cAAAvN,OAAAw0B,UAAA,cAGAn5B,QAAAC,KAAA,4CAEA,MACA,OACA,OAAAqK,aAAA4sB,EAAA1iB,mBACAlK,EAAA4H,cAAAvN,QAAA,MACA,EAAAwyB,EAAAjjB,gBAAAJ,OAAAxJ,KAFA,MAGA,OACA/R,EAAA+X,OACA/X,EAAAkK,MAAA,EACA,OAEA6H,EAAA4H,cAAAvN,QACAmS,EAAA,sBAAAxM,EAAA4H,eACA2mB,EAAAvuB,EAAA4H,cAAAvN,OAAAw0B,UAAA,cAGAn5B,QAAAC,KAAA,2CAEA1H,EAAAkK,MAAA,GACA,QACA,OAAAo2B,GACA,MAAAvpB,QAAA,SAAAjV,EAAAkV,GACA,IAAA0E,EAAA,IAAAmlB,MACAnlB,EAAA+kB,OAAA,WACAF,EAAA3jB,WAAAlB,EAAAve,MACAojC,EAAA1jB,YAAAnB,EAAAte,OACAmjC,EAAAprB,YAAAuG,EAAAve,MAAAue,EAAAte,OACA0E,EAAA4Z,IAEAA,EAAAglB,QAAA,WACA5+B,EAAA,OAEA4Z,EAAAolB,IAAAR,MAZA,MAcA,QAEA,SADAtgC,EAAA+X,QAEA,6BAWAinB,EAAA5iC,UAAAo3B,YAAA,SAAA4L,EAAA/L,GACA,OAAA3c,EAAA1Z,UAAA,oBACA,IAAAoG,EAAA+M,EAAA4wB,EAAAhvB,EACA,OAAA0F,EAAAza,KAAA,SAAAgD,GACA,OAAAA,EAAAkK,OACA,OAEA,KADA9G,EAAApG,KAAAiiC,SAAApjC,IAAAujC,IACA,YACAjvB,EAAA,EAAA4wB,EAAA1N,EACArzB,EAAAkK,MAAA,EACA,OACA,OAAAiG,EAAA4wB,EAAAn/B,QACAmQ,EAAAgvB,EAAA5wB,IACA,EAAAnT,KAAAoE,KAAAgC,EAAA2O,MAFA,KAGA,OACA/R,EAAA+X,OACA/X,EAAAkK,MAAA,EACA,OAEA,OADAiG,KACA,KACA,OAGA,OADA/M,EAAAka,iBACA,KACA,OACA7V,QAAAC,KAAA,qCAAA03B,EAAA,sCAAA/L,GACArzB,EAAAkK,MAAA,EACA,uBAKA80B,EA9SA,GAgTA7kC,EAAA6kC,6CC3XAvjC,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAoK,EAAAtL,EAAA,GAMAwiB,EAAA,WACA,SAAAA,EAAApgB,EAAAC,EAAAC,EAAAC,GACAJ,KAAAi7B,OAAA,WACAj7B,KAAAgkC,QAAA,EACAhkC,KAAAojC,UAAA,KACApjC,KAAAqjC,eAAA,IAAAl6B,EAAArJ,QACAM,SACAD,QACAF,IACAC,MAqHA,OA/GAmgB,EAAAjhB,UAAA6E,QAAA,WACA,IAAAggC,EAAAjkC,KAAAi7B,MAAA,GACAiJ,EAAAlkC,KAAAi7B,MAAA,GACAj7B,KAAAojC,UAAA,KACAa,GACAA,EAAAhgC,UAEAigC,GACAA,EAAAjgC,UAEAjE,KAAAi7B,MAAA,QACAj7B,KAAAi7B,MAAA,SAKA5a,EAAAjhB,UAAA+kC,SAAA,WACA,IAAAF,EAAAjkC,KAAAi7B,MAAA,GACAiJ,EAAAlkC,KAAAi7B,MAAA,GACA,OAAAgJ,MAAAb,WACAa,EAAAD,UAEAE,KAAAd,aACAc,EAAAF,QAOA3jB,EAAAjhB,UAAA+jC,OAAA,SAAAzkB,GACA,IAAAulB,EAAAjkC,KAAAi7B,MAAA,GACAiJ,EAAAlkC,KAAAi7B,MAAA,GACA,IAAAj7B,KAAAgkC,QAAAC,GAAAC,EAAA,CAEA,IAAAE,EAAAH,EAAAd,OAAAzkB,GACA,cAAA0lB,EACAA,EAGAF,EAAAf,OAAAzkB,GAIA,GAAA1e,KAAAojC,UACA,YAGA,IAAAiB,EAAArkC,KAAAqjC,eAAAriC,KAAA0d,EAAAwkB,QAEA,OAAAmB,EACA,YAGA,OAAAA,EACA,OAAArkC,KAGAA,KAAAgkC,QAAA,EAEA,IAAAM,EAAA5lB,EAAAwkB,OAAA/iC,MACAokC,EAAA7lB,EAAAwkB,OAAA9iC,OAEAokC,EAAAxkC,KAAAqjC,eAAAljC,MAAAmkC,EACAG,EAAAzkC,KAAAqjC,eAAAjjC,OAAAse,EAAAwkB,OAAA9iC,OAWA,OAVAokC,EAAAC,GACAzkC,KAAAi7B,MAAA,OAAA5a,EAAArgB,KAAAqjC,eAAApjC,EAAAD,KAAAqjC,eAAAnjC,EAAAokC,EAAAtkC,KAAAqjC,eAAAjjC,QACAJ,KAAAi7B,MAAA,OAAA5a,EAAArgB,KAAAqjC,eAAApjC,EAAAqkC,EAAAtkC,KAAAqjC,eAAAnjC,EAAAskC,EAAAxkC,KAAAqjC,eAAAjjC,UAGAJ,KAAAi7B,MAAA,OAAA5a,EAAArgB,KAAAqjC,eAAApjC,EAAAD,KAAAqjC,eAAAnjC,EAAAF,KAAAqjC,eAAAljC,MAAAokC,GACAvkC,KAAAi7B,MAAA,OAAA5a,EAAArgB,KAAAqjC,eAAApjC,EAAAD,KAAAqjC,eAAAnjC,EAAAqkC,EAAAvkC,KAAAqjC,eAAAljC,MAAAskC,IAIAzkC,KAAAi7B,MAAA,GAAAkI,OAAAzkB,IAOA2B,EAAAjhB,UAAA65B,OAAA,SAAAva,GACA,GAAA1e,KAAAgkC,OAiBA,OAAAhkC,KAAAojC,YAAA1kB,IACA1e,KAAAojC,UAAA,KACA1kB,EAAAS,iBAAA,KACAT,EAAAkB,WAAA,GACA,GAnBA,IAAA8kB,EAAA1kC,KAAAi7B,MAAA,GAAAhC,OAAAva,GACA,QAAAgmB,IAIAA,EAAA1kC,KAAAi7B,MAAA,GAAAhC,OAAAva,GACA1e,KAAAi7B,MAAA,GAAAkJ,YACAnkC,KAAAi7B,MAAA,GAAAkJ,aACAnkC,KAAAi7B,MAAA,QACAj7B,KAAAi7B,MAAA,SAGAyJ,IAcArkB,EA9HA,GAgIAljB,EAAAkjB,yCCvIA,IACA9e,EADAC,EAAAxB,WAAAwB,YACAD,EAAA9C,OAAAgD,iBACUC,wBAAgBC,OAAA,SAAAtD,EAAAuD,GAAsCvD,EAAAqD,UAAAE,IAChE,SAAAvD,EAAAuD,GAAyB,QAAAtC,KAAAsC,IAAAvC,eAAAC,KAAAjB,EAAAiB,GAAAsC,EAAAtC,KACzB,SAAAjB,EAAAuD,GAEA,SAAAC,IAAuB7B,KAAA8B,YAAAzD,EADvBkD,EAAAlD,EAAAuD,GAEAvD,EAAAe,UAAA,OAAAwC,EAAAnD,OAAAsD,OAAAH,IAAAC,EAAAzC,UAAAwC,EAAAxC,UAAA,IAAAyC,KAGAiF,EAAA9G,WAAA8G,YAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAA7I,EAAAD,EAAA+I,UAAAvC,OAAA9F,EAAAV,EAAA,EAAA4I,EAAA,OAAAE,IAAAzI,OAAA2I,yBAAAJ,EAAAC,GAAAC,EACA,oBAAAG,SAAA,mBAAAA,QAAAC,SAAAxI,EAAAuI,QAAAC,SAAAP,EAAAC,EAAAC,EAAAC,QACA,QAAAnJ,EAAAgJ,EAAAnC,OAAA,EAA4C7G,GAAA,EAAQA,KAAAM,EAAA0I,EAAAhJ,MAAAe,GAAAV,EAAA,EAAAC,EAAAS,GAAAV,EAAA,EAAAC,EAAA2I,EAAAC,EAAAnI,GAAAT,EAAA2I,EAAAC,KAAAnI,GACpD,OAAAV,EAAA,GAAAU,GAAAL,OAAAC,eAAAsI,EAAAC,EAAAnI,MAEAL,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAgRAiE,EAhRAuE,EAAA1J,EAAA,GACAwiC,EAAAxiC,EAAA,GACA6xB,EAAA7xB,EAAA,GACAoE,EAAApE,EAAA,GACA4X,EAAA3U,KAAA2U,IAKA6qB,EAAA,IAAA19B,IAKA+sB,IAAA3sB,MACAf,EAAAZ,WAAAuuB,SAAA,SAAA7D,EAAArN,GACAqN,EAAA9rB,GAAA8rB,EAAA+D,QACA/D,EAAA7rB,GAAA6rB,EAAA+D,SAEA9sB,EAAAf,EAAAZ,WAAA0uB,WAAA,SAAAhE,EAAArN,GACAqN,EAAA9rB,EAAAye,EAAAve,MAAA,EACA4rB,EAAA7rB,GAAA6rB,EAAA+D,SAEA9sB,EAAAf,EAAAZ,WAAA2uB,UAAA,SAAAjE,EAAArN,GACAqN,EAAA9rB,EAAAye,EAAAve,MAAA4rB,EAAA+D,QACA/D,EAAA7rB,GAAA6rB,EAAA+D,SAEA9sB,EAAAf,EAAAZ,WAAA4uB,YAAA,SAAAlE,EAAArN,GACAqN,EAAA9rB,GAAA8rB,EAAA+D,QACA/D,EAAA7rB,EAAAwe,EAAAte,OAAA,GAEA4C,EAAAf,EAAAZ,WAAA6uB,QAAA,SAAAnE,EAAArN,GACAqN,EAAA9rB,EAAAye,EAAAve,MAAA,EACA4rB,EAAA7rB,EAAAwe,EAAAte,OAAA,GAEA4C,EAAAf,EAAAZ,WAAA8uB,aAAA,SAAApE,EAAArN,GACAqN,EAAA9rB,EAAAye,EAAAve,MAAA4rB,EAAA+D,QACA/D,EAAA7rB,EAAAwe,EAAAte,OAAA,GAEA4C,EAAAf,EAAAZ,WAAA+uB,YAAA,SAAArE,EAAArN,GACAqN,EAAA9rB,GAAA8rB,EAAA+D,QACA/D,EAAA7rB,EAAAwe,EAAAte,OAAA2rB,EAAA+D,SAEA9sB,EAAAf,EAAAZ,WAAAgvB,cAAA,SAAAtE,EAAArN,GACAqN,EAAA9rB,EAAAye,EAAAve,MAAA,EACA4rB,EAAA7rB,EAAAwe,EAAAte,OAAA2rB,EAAA+D,SAEA9sB,EAAAf,EAAAZ,WAAAivB,aAAA,SAAAvE,EAAArN,GACAqN,EAAA9rB,EAAAye,EAAAve,MAAA4rB,EAAA+D,QACA/D,EAAA7rB,EAAAwe,EAAAte,OAAA2rB,EAAA+D,SAEA9sB,EAAAf,EAAAZ,WAAAkvB,QAAA,SAAAxE,EAAArN,GACAqN,EAAA9rB,EAAA8rB,EAAA9rB,GAAA,EACA8rB,EAAA7rB,EAAA6rB,EAAA7rB,GAAA,GAEA8C,GAgBA2hC,EAAA,SAAApiC,GAEA,SAAAoiC,EAAA5kC,GACA,IAAA0C,EAAAF,EAAArE,KAAA8B,KAAAD,IAAAC,KAEAyC,EAAAmiC,MAAA,SAEAniC,EAAAC,MAAA,EAEAD,EAAArC,OAAA,EAEAqC,EAAAguB,QAAAxuB,EAAAX,UAAAovB,UAEAjuB,EAAAtC,MAAA,EAEAsC,EAAAxC,EAAA,EAEAwC,EAAAvC,EAAA,EAIAuC,EAAAoiC,aAAA,EACApiC,EAAAqiC,cAAA,EACAriC,EAAAw+B,cAAA,EAGAx+B,EAAAkuB,SACAb,QAAA,EACApsB,KAAAzB,EAAAZ,WAAAuuB,QACA3vB,EAAA,EACAC,EAAA,GAEAuC,EAAAC,MAAA3C,EAAA2C,OAAAD,EAAAC,MACAD,EAAAmiC,KAAA7kC,EAAA6kC,MAAAniC,EAAAmiC,KACAniC,EAAAguB,QAAA1wB,EAAA0wB,SAAAhuB,EAAAguB,QACAhuB,EAAAxC,EAAAF,EAAAE,GAAAwC,EAAAxC,EACAwC,EAAAvC,EAAAH,EAAAG,GAAAuC,EAAAvC,EAEAuC,EAAAsiC,SAAAhlC,EAAAwQ,QAEA,IAAAoM,EAAA2jB,EAAAzhC,IAAA4D,EAAAuiC,OAAAviC,EAAAsiC,UA2BA,OAzBApoB,GACAA,EAAA0kB,aAGA1kB,KACAA,GACA0kB,WAAA,EACAtsB,SAAA,IAAAsrB,EAAA5hB,mBAAAhc,KAGAsS,SAAA3H,YAAAuP,EAAA5H,SAAA3H,aAAA,EAGAizB,EAAAmB,gBAAAhjB,WAAA7B,EAAA5H,UAGAurB,EAAA90B,IAAA/I,EAAAuiC,OAAAviC,EAAAsiC,SAAApoB,IAEAla,EAAA6+B,eAAA3kB,EACAla,EAAAoiC,aAAAloB,EAAA5H,SAAA4H,cAAAzS,MAAA/J,MACAsC,EAAAqiC,cAAAnoB,EAAA5H,SAAA4H,cAAAzS,MAAA9J,OACAqC,EAAAtC,MAAAJ,EAAAI,OAAAsC,EAAAoiC,cAAA,EACApiC,EAAArC,OAAAL,EAAAK,QAAAqC,EAAAqiC,eAAA,EAEA/kC,EAAAgsB,QAAAtpB,EAAAmuB,UAAA7wB,EAAAgsB,QACAtpB,EAmIA,OArMAjB,EAAAmjC,EAAApiC,GAwEAoiC,EAAA1gC,QAAA,WACAq8B,EAAArI,SAEAx5B,OAAAC,eAAAimC,EAAAvlC,UAAA,QACAP,IAAA,WAA0B,OAAA4W,EAAAzV,KAAAG,MAAAH,KAAAI,SAC1BoL,IAAA,SAAAzM,GACA,IAAAkmC,EAAAjlC,KAAAG,MAAAH,KAAAI,OACAJ,KAAAG,MAAApB,EAAAkmC,EACAjlC,KAAAI,OAAArB,GAEAH,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAAimC,EAAAvlC,UAAA,WAIAP,IAAA,WAA0B,OAAAmB,KAAA+kC,UAC1BnmC,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAAimC,EAAAvlC,UAAA,eAEAP,IAAA,WAA0B,OAAAmB,KAAAihC,cAC1BriC,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAAimC,EAAAvlC,UAAA,QAEAP,IAAA,WAA0B,OAAAmB,KAAAglC,OAC1BpmC,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAAimC,EAAAvlC,UAAA,YAEAP,IAAA,WAA0B,OAAAmB,KAAAshC,eAAAvsB,UAC1BnW,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAAimC,EAAAvlC,UAAA,eAKAP,IAAA,WACA,OAAAmB,KAAA6kC,cAEAjmC,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAAimC,EAAAvlC,UAAA,gBAKAP,IAAA,WACA,OAAAmB,KAAA8kC,eAEAlmC,YAAA,EACAD,cAAA,IAMAgmC,EAAAvlC,UAAA6E,QAAA,WACAjE,KAAAihC,eACAjhC,KAAAihC,cAAA,EACAjhC,KAAAshC,eAAAD,aAEA,IAAArhC,KAAAshC,eAAAD,aACArhC,KAAAshC,eAAAvsB,SACAtK,QAAAC,KAAA,gDAIAjM,OAAAC,eAAAimC,EAAAvlC,UAAA,UACAP,IAAA,WACA,OAAAmB,KAAA2wB,SAEA/xB,YAAA,EACAD,cAAA,IAKAgmC,EAAAvlC,UAAAwxB,UAAA,SAAA7E,GACA,IAAA8E,GACAf,QAAA/D,EAAA+D,SAAA,EACApsB,KAAAqoB,EAAAroB,KACAzD,EAAA8rB,EAAA9rB,GAAA,EACAC,EAAA6rB,EAAA7rB,GAAA,GAGAyvB,EAAAkB,EAAAntB,MAAAmtB,EAAA7wB,MAEAA,KAAA2wB,QAAAE,GAEA/pB,GACAS,EAAAK,YACA+8B,EAAAvlC,UAAA,eACA0H,GACAS,EAAAK,YACA+8B,EAAAvlC,UAAA,gBACA0H,GACAS,EAAAK,YACA+8B,EAAAvlC,UAAA,iBACA0H,GACAS,EAAAK,YACA+8B,EAAAvlC,UAAA,kBACA0H,GACAS,EAAAK,YACA+8B,EAAAvlC,UAAA,gBACA0H,GACAS,EAAAK,YACA+8B,EAAAvlC,UAAA,YACA0H,GACAS,EAAAK,YACA+8B,EAAAvlC,UAAA,YACA0H,GACAS,EAAAK,YACA+8B,EAAAvlC,UAAA,kBACA0H,GACAS,EAAAkoB,UACAkV,EAAAvlC,UAAA,eACAulC,EAtMA,CAuMCjV,EAAAloB,UACDrK,EAAAwnC,+BCjSAvnC,EAAAD,QAAA,ymFCAAC,EAAAD,QAAA,uNCAAC,EAAAD,QAAA,6ECAAC,EAAAD,QAAA,iCCCAsB,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAkD,EAAApE,EAAA,GAOAmG,EAAA,WACA,SAAAA,EAAA2E,GAEA3I,KAAAklC,YAAA,IAAAtiC,IAEA5C,KAAAmlC,YAAA,IAAAviC,IACA5C,KAAA2I,QAgMA,OA3LA3E,EAAA5E,UAAAsT,gBAAA,SAAAnK,EAAAmH,KAOA1L,EAAA5E,UAAA6S,gBAAA,SAAA1J,EAAAmH,EAAAwC,GACA,IAAAzP,EAAAzC,KAEA,GAAAA,KAAA2I,MAAA1F,SAAAjD,KAAA2I,MAAA1F,QAAAS,OAAAzB,EAAApC,SAAAsD,IAAA,CACA,IAAAiiC,EAAAplC,KAAA2I,MAAAnG,MAAA4iC,YAEA,GAAAA,EAAA,CACA,IAAAC,EAAA98B,EAAAsC,YAAA6E,GACA41B,EAAAtlC,KAAA2I,MAAA1F,QAAAK,QACAiiC,EAAAvlC,KAAA2I,MAAA1F,QAAAM,SAAAqM,MAAA41B,KAAAxlC,KAAA2I,MAAA1F,QAAAM,UACA07B,EAAAsG,EAAAF,GAAA/0B,OAAA,SAAA9R,GAAsE,OAAA8mC,EAAA9mC,EAAA6mC,EAAA98B,KAUtE68B,GARAlzB,SACA+sB,YACAt2B,MAAA3I,KAAA2I,MAAAjB,GACAimB,WAAAplB,EACAk9B,WAAA,SAAAC,GAAkD,OAAAH,EAAAG,GAAAp1B,OAAA,SAAA9R,GAA4C,OAAA8mC,EAAA9mC,EAAA6mC,EAAA98B,MAC9FqC,QAAA8E,EAAAzP,EAAAyP,EAAAxP,GACAgK,OAAAm7B,EAAAplC,EAAAolC,EAAAnlC,KAIAF,KAAAmlC,YAAAlN,QACAgH,EAAAh6B,QAAA,SAAAzG,GAAgD,OAAAiE,EAAA0iC,YAAA35B,IAAAhN,GAAA,QAOhDwF,EAAA5E,UAAAmS,eAAA,SAAAhJ,EAAAmH,GAGA,GAAA1P,KAAA2I,MAAA1F,SAAAjD,KAAA2I,MAAA1F,QAAAS,OAAAzB,EAAApC,SAAAsD,IAAA,CACA,IAAAwiC,EAAA3lC,KAAA2I,MAAAnG,MAAAmjC,WACA,GAAAA,EAAA,CACA,IAAAC,EAAAr9B,EAAAsC,YAAA6E,GACAm2B,EAAA7lC,KAAA2I,MAAA1F,QAAAM,SAAAqM,MAAA41B,KAAAxlC,KAAA2I,MAAA1F,QAAAM,UACAuiC,EAAA9lC,KAAA2I,MAAA1F,QAAAK,QASAqiC,GAPA1G,UAAAt9B,MAAAi1B,KAAA52B,KAAAklC,YAAAl3B,QACArF,MAAA3I,KAAA2I,MAAAjB,GACAimB,WAAAplB,EACAk9B,WAAA,SAAAC,GAAkD,OAAAG,EAAAH,GAAAp1B,OAAA,SAAA9R,GAA4C,OAAAsnC,EAAAtnC,EAAAonC,EAAAr9B,MAC9FqC,QAAA8E,EAAAzP,EAAAyP,EAAAxP,GACAgK,OAAA07B,EAAA3lC,EAAA2lC,EAAA1lC,MAMAF,KAAAklC,YAAAjN,QAGAj4B,KAAAmlC,YAAAlN,SAKAj0B,EAAA5E,UAAAuT,cAAA,SAAApK,EAAAmH,EAAAwC,GAEA,GAAAlS,KAAA2I,MAAA1F,SAAAjD,KAAA2I,MAAA1F,QAAAS,OAAAzB,EAAApC,SAAAsD,IAAA,CACA,IAAA4iC,EAAA/lC,KAAA2I,MAAAnG,MAAAujC,UAEA,GAAAA,EAAA,CACA,IAAAC,EAAAz9B,EAAAsC,YAAA6E,GACAu2B,EAAAjmC,KAAA2I,MAAA1F,QAAAK,QACA4iC,EAAAlmC,KAAA2I,MAAA1F,QAAAM,SAAAqM,MAAA41B,KAAAxlC,KAAA2I,MAAA1F,QAAAM,UAWAwiC,GARA7zB,SACA+sB,UAHAiH,EAAAF,GAAA11B,OAAA,SAAA9R,GAAsE,OAAAynC,EAAAznC,EAAAwnC,EAAAz9B,KAItEI,MAAA3I,KAAA2I,MAAAjB,GACAimB,WAAAplB,EACAk9B,WAAA,SAAAC,GAAkD,OAAAQ,EAAAR,GAAAp1B,OAAA,SAAA9R,GAA4C,OAAAynC,EAAAznC,EAAAwnC,EAAAz9B,MAC9FqC,QAAA8E,EAAAzP,EAAAyP,EAAAxP,GACAgK,OAAA87B,EAAA/lC,EAAA+lC,EAAA9lC,QASA8D,EAAA5E,UAAAqS,gBAAA,SAAAlJ,EAAAmH,GACA,IAAAjN,EAAAzC,KAEA,GAAAA,KAAA2I,MAAA1F,SAAAjD,KAAA2I,MAAA1F,QAAAS,OAAAzB,EAAApC,SAAAsD,IAAA,CACA,IAAAH,EAAAhD,KAAA2I,MAAAnG,MAAA2jC,EAAAnjC,EAAAmjC,YAAAC,EAAApjC,EAAAojC,YAAAT,EAAA3iC,EAAA2iC,WAEA,GAAAQ,GAAAC,GAAAT,EAAA,CACA,IAAAU,OAAA,EACAC,EAAA/9B,EAAAsC,YAAA6E,GACA62B,EAAAvmC,KAAA2I,MAAA1F,QAAAK,QACAkjC,EAAAxmC,KAAA2I,MAAA1F,QAAAM,SAAAqM,MAAA41B,KAAAxlC,KAAA2I,MAAA1F,QAAAM,UACA07B,EAAAuH,EAAAF,GAAAh2B,OAAA,SAAA9R,GAAsE,OAAA+nC,EAAA/nC,EAAA8nC,EAAA/9B,KAEtE,GAAA49B,EAAA,CACA,IAAAM,EAAAxH,EAAA3uB,OAAA,SAAA9R,GAA0E,OAAAiE,EAAAyiC,YAAArmC,IAAAL,KAC1E6nC,GACApH,UAAAwH,EACA99B,MAAA3I,KAAA2I,MAAAjB,GACAimB,WAAAplB,EACAk9B,WAAA,SAAAC,GAAsD,OAAAc,EAAAd,GAAAp1B,OAAA,SAAA9R,GAA4C,OAAA+nC,EAAA/nC,EAAA8nC,EAAA/9B,MAClGqC,QAAA8E,EAAAzP,EAAAyP,EAAAxP,GACAgK,OAAAo8B,EAAArmC,EAAAqmC,EAAApmC,IAEAumC,EAAA7hC,OAAA,GACAuhC,EAAAE,GAGAD,GAUAA,EARAC,GACApH,YACAt2B,MAAA3I,KAAA2I,MAAAjB,GACAimB,WAAAplB,EACAk9B,WAAA,SAAAC,GAAsD,OAAAc,EAAAd,GAAAp1B,OAAA,SAAA9R,GAA4C,OAAA+nC,EAAA/nC,EAAA8nC,EAAA/9B,MAClGqC,QAAA8E,EAAAzP,EAAAyP,EAAAxP,GACAgK,OAAAo8B,EAAArmC,EAAAqmC,EAAApmC,KAKA,IAAAwmC,EAAA,IAAA9jC,IAGA,GAFAq8B,EAAAh6B,QAAA,SAAAzG,GAAgD,OAAAkoC,EAAAl7B,IAAAhN,GAAA,KAEhDmnC,EAAA,CACA,IAAAgB,EAAAhlC,MAAAi1B,KAAA52B,KAAAklC,YAAAl3B,QAAAsC,OAAA,SAAA9R,GAAgG,OAAAkoC,EAAA7nC,IAAAL,KAEhG6nC,GACApH,UAAA0H,EACAh+B,MAAA3I,KAAA2I,MAAAjB,GACAimB,WAAAplB,EACAk9B,WAAA,SAAAC,GAAsD,OAAAc,EAAAd,GAAAp1B,OAAA,SAAA9R,GAA4C,OAAA+nC,EAAA/nC,EAAA8nC,EAAA/9B,MAClGqC,QAAA8E,EAAAzP,EAAAyP,EAAAxP,GACAgK,OAAAo8B,EAAArmC,EAAAqmC,EAAApmC,IAEAymC,EAAA/hC,OAAA,GACA+gC,EAAAU,GAGArmC,KAAAklC,YAAAwB,KAOA1iC,EAAA5E,UAAAu4B,iBAAA,SAAApvB,EAAAmH,EAAAwC,GAEA,GAAAlS,KAAA2I,MAAA1F,SAAAjD,KAAA2I,MAAA1F,QAAAS,OAAAzB,EAAApC,SAAAsD,IAAA,CACA,IAAAyjC,EAAA5mC,KAAA2I,MAAAnG,MAAAokC,aAEA,GAAAA,EAAA,CACA,IAAAC,EAAAt+B,EAAAsC,YAAA6E,GACAo3B,EAAA9mC,KAAA2I,MAAA1F,QAAAK,QACAyjC,EAAA/mC,KAAA2I,MAAA1F,QAAAM,SAAAqM,MAAA41B,KAAAxlC,KAAA2I,MAAA1F,QAAAM,UAWAqjC,GARA10B,SACA+sB,UAHA8H,EAAAF,GAAAv2B,OAAA,SAAA9R,GAAsE,OAAAsoC,EAAAtoC,EAAAqoC,EAAAt+B,KAItEI,MAAA3I,KAAA2I,MAAAjB,GACAimB,WAAAplB,EACAk9B,WAAA,SAAAC,GAAkD,OAAAqB,EAAArB,GAAAp1B,OAAA,SAAA9R,GAA4C,OAAAsoC,EAAAtoC,EAAAqoC,EAAAt+B,MAC9FqC,QAAA8E,EAAAzP,EAAAyP,EAAAxP,GACAgK,OAAA28B,EAAA5mC,EAAA4mC,EAAA3mC,QASA8D,EAAA5E,UAAAw4B,gBAAA,SAAArvB,EAAAmH,KAIA1L,EAtMA,GAwMA7G,EAAA6G,wDChNAvF,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAkD,EAAApE,EAAA,GAEAmpC,GAAA,iBAKApjC,EAAA,WACA,SAAAA,EAAA+E,GACA3I,KAAA2I,QA4JA,OAvJA/E,EAAAxE,UAAA0E,iBAAA,WACA,OAAA9D,KAAA2I,MAAA1F,SACAjD,KAAA2I,MAAA1F,QAAAS,OAAAzB,EAAApC,SAAAsD,KACAnD,KAAAinC,YAAAjnC,KAAA2I,MAAA1F,SAEAjD,KAAAknC,mBACAlnC,KAAAmnC,gBACAnnC,KAAAonC,sBAKApnC,KAAAqnC,eACArnC,KAAAsnC,YACAtnC,KAAAunC,iBAMA3jC,EAAAxE,UAAAkoC,YAAA,SAAA5mB,EAAAnc,EAAAijC,GAEA,GAAAA,EACA9mB,EAAA2mB,eAAA3mB,EAAAnc,EAAAijC,OAGA,CACA,IAAAhjC,EAAAkc,EAAA/X,MAAAzE,eAAA20B,IAAAt0B,GACAA,EAAAoD,QAAA,EACA+Y,EAAA+mB,eAAAljC,EAAAC,KAOAZ,EAAAxE,UAAA+nC,gBAAA,SAAAzmB,EAAAnc,EAAAijC,GAEA,GAAAA,EACA9mB,EAAAwmB,mBAAAxmB,EAAAnc,EAAAijC,OAGA,CACA,IAAAhjC,EAAAkc,EAAA/X,MAAAzE,eAAA20B,IAAAt0B,GACAA,EAAAoD,QAAA,EACA+Y,EAAA+mB,eAAAljC,EAAAC,GAEAkc,EAAAumB,YAAA1jC,SAAA01B,OAAA10B,GACAmc,EAAAumB,YAAA1jC,SAAAs1B,IAAAt0B,KAMAX,EAAAxE,UAAAioC,eAAA,SAAA3mB,EAAAnc,EAAAijC,GAEAA,EACA9mB,EAAA+mB,eAAAljC,EAAAijC,GAIA9mB,EAAA4mB,YAAA5mB,EAAAnc,EAAAijC,IAMA5jC,EAAAxE,UAAA8nC,mBAAA,SAAAxmB,EAAAnc,EAAAijC,GAEAA,GACA9mB,EAAA+mB,eAAAljC,EAAAijC,GAEA9mB,EAAAumB,YAAA1jC,SAAA01B,OAAA10B,GACAmc,EAAAumB,YAAA1jC,SAAAs1B,IAAAt0B,IAIAmc,EAAAymB,gBAAAzmB,EAAAnc,EAAAijC,IAMA5jC,EAAAxE,UAAAmoC,eAAA,SAAA7mB,EAAAnc,EAAAijC,GACAA,IAEAjjC,EAAAoD,QAAA,EAEA+Y,EAAA+mB,eAAAljC,EAAAijC,GAEA9mB,EAAA/X,MAAAzE,eAAA+0B,OAAA10B,KAMAX,EAAAxE,UAAAgoC,mBAAA,SAAA1mB,EAAAnc,EAAAijC,GACAA,IAEAjjC,EAAAoD,QAAA,EAEA+Y,EAAA+mB,eAAAljC,EAAAijC,GAEA9mB,EAAA/X,MAAAzE,eAAA+0B,OAAA10B,GAEAmc,EAAAumB,YAAA1jC,SAAA01B,OAAA10B,KAGAX,EAAAxE,UAAAqoC,eAAA,SAAAljC,EAAAijC,GACA,GAAAjjC,EAAAoD,OAAA,CAQA,IAPA,IAAAnD,EAAAgjC,EAAAnjC,QACAqjC,EAAAF,EAAArN,aAAA,GACAH,EAAAx1B,EAAAzF,MACA4oC,OAAA,EAAA5oC,OAAA,EAAAkH,OAAA,EAAAmN,OAAA,EACA6D,OAAA,EAAAD,OAAA,EAGAjZ,EAAA,EAAA4G,EAAA3E,KAAA2I,MAAA/C,mBAAAhB,OAAuE7G,EAAA4G,IAAS5G,EAQhF,IANAgB,GADA4oC,EAAA3nC,KAAA2I,MAAA/C,mBAAA7H,IACAgH,OAAAR,GACA0B,EAAA+zB,EAAA0N,EAAAC,EAAA1hC,OACA0hC,EAAAvhC,OAAApG,KAAA2I,MAAAoM,SAAAiiB,eAAA2Q,EAAAvhC,MAAAa,KAIAgQ,EAHA7D,EAAAu0B,EAAAzhC,WAGA8Q,EAAAjY,EAAA6F,OAAAwO,EAA4D6D,EAAAD,IAAUC,EACtEhR,EAAA+gC,EAAA/vB,IAAAlY,EAAAkY,EAAA7D,GAGA5O,EAAAzF,MAAAi7B,MAEA,CACAx1B,EAAAgjC,EAAAnjC,QACAqjC,EAAAF,EAAArN,aAAA,GACAH,EAAAx1B,EAAAzF,MACA4oC,OAAA,EAAA5oC,OAAA,EAAAkH,OAAA,EAAAmN,OAAA,EAIArU,GADA4oC,EAAA3nC,KAAA2I,MAAAgN,iBACA5Q,OAAAR,GACA0B,EAAA+zB,EAAA0N,EAAAC,EAAA1hC,OACA0hC,EAAAvhC,OAAApG,KAAA2I,MAAAoM,SAAAiiB,eAAA2Q,EAAAvhC,MAAAa,KAIA,IAAAgQ,EAHA7D,EAAAu0B,EAAAzhC,WAGA8Q,EAAAjY,EAAA6F,OAAAwO,EAA4D6D,EAAAD,IAAUC,EACtEhR,EAAA+gC,EAAA/vB,IAAAlY,EAAAkY,EAAA7D,GAEA5O,EAAAzF,MAAAi7B,IAGAp2B,EA9JA,GAgKAzG,EAAAyG,qCCrKA,IAAArE,EAAA,IACApB,EAAA,GAAAoB,EACAqoC,EAAA,GAAAzpC,EACAE,EAAA,GAAAupC,EACA1nC,EAAA,OAAA7B,EAuIA,SAAAwpC,EAAAC,EAAA9oC,EAAAV,GACA,KAAAwpC,EAAA9oC,GAGA,OAAA8oC,EAAA,IAAA9oC,EACA8B,KAAA4a,MAAAosB,EAAA9oC,GAAA,IAAAV,EAEAwC,KAAAu9B,KAAAyJ,EAAA9oC,GAAA,IAAAV,EAAA,IA9HAlB,EAAAD,QAAA,SAAAmM,EAAAvJ,GACAA,QACA,IAyGA+nC,EAzGApkC,SAAA4F,EACA,cAAA5F,GAAA4F,EAAA1E,OAAA,EACA,OAkBA,SAAAmjC,GAEA,IADAA,EAAAC,OAAAD,IACAnjC,OAAA,IACA,OAEA,IAAAmJ,EAAA,wHAAAk6B,KACAF,GAEA,IAAAh6B,EACA,OAEA,IAAA/O,EAAAq9B,WAAAtuB,EAAA,IAEA,QADAA,EAAA,UAAAyU,eAEA,YACA,WACA,UACA,SACA,QACA,OAAAxjB,EAAAkB,EACA,WACA,UACA,QACA,OAAAlB,EAAAX,EACA,YACA,WACA,UACA,SACA,QACA,OAAAW,EAAA4oC,EACA,cACA,aACA,WACA,UACA,QACA,OAAA5oC,EAAAb,EACA,cACA,aACA,WACA,UACA,QACA,OAAAa,EAAAO,EACA,mBACA,kBACA,YACA,WACA,SACA,OAAAP,EACA,QACA,QAnEAm9B,CAAA7yB,GACG,cAAA5F,IAAA,IAAA83B,MAAAlyB,GACH,OAAAvJ,EAAAmoC,KAsGAL,EADAC,EArGAx+B,EAsGAjL,EAAA,QACAwpC,EAAAC,EAAAF,EAAA,SACAC,EAAAC,EAAA3pC,EAAA,WACA0pC,EAAAC,EAAAvoC,EAAA,WACAuoC,EAAA,MA7BA,SAAAA,GACA,GAAAA,GAAAzpC,EACA,OAAAyC,KAAAqnC,MAAAL,EAAAzpC,GAAA,IAEA,GAAAypC,GAAAF,EACA,OAAA9mC,KAAAqnC,MAAAL,EAAAF,GAAA,IAEA,GAAAE,GAAA3pC,EACA,OAAA2C,KAAAqnC,MAAAL,EAAA3pC,GAAA,IAEA,GAAA2pC,GAAAvoC,EACA,OAAAuB,KAAAqnC,MAAAL,EAAAvoC,GAAA,IAEA,OAAAuoC,EAAA,KA1FAM,CAAA9+B,GAEA,UAAAnE,MACA,wDACAqe,KAAAC,UAAAna,sBC2BA,SAAA++B,EAAAtmB,GAEA,IAAAumB,EAEA,SAAA/mB,IAEA,GAAAA,EAAAgnB,QAAA,CAEA,IAAAC,EAAAjnB,EAGAknB,GAAA,IAAA32B,KACAg2B,EAAAW,GAAAH,GAAAG,GACAD,EAAAvmB,KAAA6lB,EACAU,EAAAE,KAAAJ,EACAE,EAAAC,OACAH,EAAAG,EAIA,IADA,IAAA5mB,EAAA,IAAAlgB,MAAAwF,UAAAvC,QACA7G,EAAA,EAAmBA,EAAA8jB,EAAAjd,OAAiB7G,IACpC8jB,EAAA9jB,GAAAoJ,UAAApJ,GAGA8jB,EAAA,GAAA1kB,EAAAwrC,OAAA9mB,EAAA,IAEA,iBAAAA,EAAA,IAEAA,EAAA8C,QAAA,MAIA,IAAAhY,EAAA,EACAkV,EAAA,GAAAA,EAAA,GAAA/T,QAAA,yBAAAC,EAAA66B,GAEA,UAAA76B,EAAA,OAAAA,EACApB,IACA,IAAAk8B,EAAA1rC,EAAAomB,WAAAqlB,GACA,sBAAAC,EAAA,CACA,IAAAv/B,EAAAuY,EAAAlV,GACAoB,EAAA86B,EAAA3qC,KAAAsqC,EAAAl/B,GAGAuY,EAAAhV,OAAAF,EAAA,GACAA,IAEA,OAAAoB,IAIA5Q,EAAAykB,WAAA1jB,KAAAsqC,EAAA3mB,IAEAN,EAAAG,KAAAvkB,EAAAukB,KAAAjX,QAAAiX,IAAA8jB,KAAA/6B,UACAmE,MAAA45B,EAAA3mB,IAgBA,OAbAN,EAAAQ,YACAR,EAAAgnB,QAAAprC,EAAAorC,QAAAxmB,GACAR,EAAAO,UAAA3kB,EAAA2kB,YACAP,EAAAzC,MA9EA,SAAAiD,GACA,IAAAhkB,EAAA+qC,EAAA,EAEA,IAAA/qC,KAAAgkB,EACA+mB,MAAA,GAAAA,EAAA/mB,EAAAgnB,WAAAhrC,GACA+qC,GAAA,EAGA,OAAA3rC,EAAAmmB,OAAAxiB,KAAAC,IAAA+nC,GAAA3rC,EAAAmmB,OAAA1e,QAsEAokC,CAAAjnB,GACAR,EAAAtd,UAGA,mBAAA9G,EAAA8rC,MACA9rC,EAAA8rC,KAAA1nB,GAGApkB,EAAA8hC,UAAAzyB,KAAA+U,GAEAA,EAGA,SAAAtd,IACA,IAAA0I,EAAAxP,EAAA8hC,UAAAryB,QAAA5M,MACA,WAAA2M,IACAxP,EAAA8hC,UAAApyB,OAAAF,EAAA,IACA,IAjIAxP,EAAAC,EAAAD,QAAAkrC,EAAA9mB,MAAA8mB,EAAA,QAAAA,GACAM,OAoNA,SAAAr/B,GACA,OAAAA,aAAAnE,MAAAmE,EAAA4/B,OAAA5/B,EAAAqa,QACAra,GArNAnM,EAAAgsC,QA6KA,WACAhsC,EAAAymB,OAAA,KA7KAzmB,EAAAymB,OA4IA,SAAAxB,GAMA,IAAArkB,EALAZ,EAAAglB,KAAAC,GAEAjlB,EAAAisC,SACAjsC,EAAAksC,SAGA,IAAA9N,GAAA,iBAAAnZ,IAAA,IAAAmZ,MAAA,UACA+N,EAAA/N,EAAA32B,OAEA,IAAA7G,EAAA,EAAaA,EAAAurC,EAASvrC,IACtBw9B,EAAAx9B,KAEA,OADAqkB,EAAAmZ,EAAAx9B,GAAA+P,QAAA,cACA,GACA3Q,EAAAksC,MAAA78B,KAAA,IAAAwW,OAAA,IAAAZ,EAAAjF,OAAA,SAEAhgB,EAAAisC,MAAA58B,KAAA,IAAAwW,OAAA,IAAAZ,EAAA,OAIA,IAAArkB,EAAA,EAAaA,EAAAZ,EAAA8hC,UAAAr6B,OAA8B7G,IAAA,CAC3C,IAAAwG,EAAApH,EAAA8hC,UAAAlhC,GACAwG,EAAAgkC,QAAAprC,EAAAorC,QAAAhkC,EAAAwd,aAjKA5kB,EAAAorC,QAuLA,SAAAjqC,GACA,SAAAA,IAAAsG,OAAA,GACA,SAEA,IAAA7G,EAAAurC,EACA,IAAAvrC,EAAA,EAAAurC,EAAAnsC,EAAAksC,MAAAzkC,OAAyC7G,EAAAurC,EAASvrC,IAClD,GAAAZ,EAAAksC,MAAAtrC,GAAAwrC,KAAAjrC,GACA,SAGA,IAAAP,EAAA,EAAAurC,EAAAnsC,EAAAisC,MAAAxkC,OAAyC7G,EAAAurC,EAASvrC,IAClD,GAAAZ,EAAAisC,MAAArrC,GAAAwrC,KAAAjrC,GACA,SAGA,UArMAnB,EAAA6kB,SAAAnkB,EAAA,IAKAV,EAAA8hC,aAMA9hC,EAAAisC,SACAjsC,EAAAksC,SAQAlsC,EAAAomB,6BChCA,IAOAimB,EACAC,EARAroB,EAAAhkB,EAAAD,WAUA,SAAAusC,IACA,UAAAvkC,MAAA,mCAEA,SAAAwkC,IACA,UAAAxkC,MAAA,qCAsBA,SAAAykC,EAAAC,GACA,GAAAL,IAAAztB,WAEA,OAAAA,WAAA8tB,EAAA,GAGA,IAAAL,IAAAE,IAAAF,IAAAztB,WAEA,OADAytB,EAAAztB,WACAA,WAAA8tB,EAAA,GAEA,IAEA,OAAAL,EAAAK,EAAA,GACK,MAAAzvB,GACL,IAEA,OAAAovB,EAAAtrC,KAAA,KAAA2rC,EAAA,GACS,MAAAzvB,GAET,OAAAovB,EAAAtrC,KAAA8B,KAAA6pC,EAAA,MAvCA,WACA,IAEAL,EADA,mBAAAztB,WACAA,WAEA2tB,EAEK,MAAAtvB,GACLovB,EAAAE,EAEA,IAEAD,EADA,mBAAAK,aACAA,aAEAH,EAEK,MAAAvvB,GACLqvB,EAAAE,GAjBA,GAwEA,IAEAI,EAFAC,KACAC,GAAA,EAEAC,GAAA,EAEA,SAAAC,IACAF,GAAAF,IAGAE,GAAA,EACAF,EAAAnlC,OACAolC,EAAAD,EAAAl7B,OAAAm7B,GAEAE,GAAA,EAEAF,EAAAplC,QACAwlC,KAIA,SAAAA,IACA,IAAAH,EAAA,CAGA,IAAAI,EAAAT,EAAAO,GACAF,GAAA,EAGA,IADA,IAAAX,EAAAU,EAAAplC,OACA0kC,GAAA,CAGA,IAFAS,EAAAC,EACAA,OACAE,EAAAZ,GACAS,GACAA,EAAAG,GAAAI,MAGAJ,GAAA,EACAZ,EAAAU,EAAAplC,OAEAmlC,EAAA,KACAE,GAAA,EAnEA,SAAAM,GACA,GAAAd,IAAAK,aAEA,OAAAA,aAAAS,GAGA,IAAAd,IAAAE,IAAAF,IAAAK,aAEA,OADAL,EAAAK,aACAA,aAAAS,GAEA,IAEAd,EAAAc,GACK,MAAAnwB,GACL,IAEA,OAAAqvB,EAAAvrC,KAAA,KAAAqsC,GACS,MAAAnwB,GAGT,OAAAqvB,EAAAvrC,KAAA8B,KAAAuqC,KAgDAC,CAAAH,IAiBA,SAAAI,EAAAZ,EAAAa,GACA1qC,KAAA6pC,MACA7pC,KAAA0qC,QAYA,SAAAC,KA5BAvpB,EAAAwpB,SAAA,SAAAf,GACA,IAAAhoB,EAAA,IAAAlgB,MAAAwF,UAAAvC,OAAA,GACA,GAAAuC,UAAAvC,OAAA,EACA,QAAA7G,EAAA,EAAuBA,EAAAoJ,UAAAvC,OAAsB7G,IAC7C8jB,EAAA9jB,EAAA,GAAAoJ,UAAApJ,GAGAisC,EAAAx9B,KAAA,IAAAi+B,EAAAZ,EAAAhoB,IACA,IAAAmoB,EAAAplC,QAAAqlC,GACAL,EAAAQ,IASAK,EAAArrC,UAAAkrC,IAAA,WACAtqC,KAAA6pC,IAAAj7B,MAAA,KAAA5O,KAAA0qC,QAEAtpB,EAAAypB,MAAA,UACAzpB,EAAAyC,SAAA,EACAzC,EAAAI,OACAJ,EAAA0pB,QACA1pB,EAAA0D,QAAA,GACA1D,EAAA2pB,YAIA3pB,EAAA4pB,GAAAL,EACAvpB,EAAA6pB,YAAAN,EACAvpB,EAAA8pB,KAAAP,EACAvpB,EAAA+pB,IAAAR,EACAvpB,EAAAgqB,eAAAT,EACAvpB,EAAAiqB,mBAAAV,EACAvpB,EAAAkqB,KAAAX,EACAvpB,EAAAmqB,gBAAAZ,EACAvpB,EAAAoqB,oBAAAb,EAEAvpB,EAAAqqB,UAAA,SAAAntC,GAAqC,UAErC8iB,EAAAsqB,QAAA,SAAAptC,GACA,UAAA6G,MAAA,qCAGAic,EAAAuqB,IAAA,WAA2B,WAC3BvqB,EAAAwqB,MAAA,SAAAC,GACA,UAAA1mC,MAAA,mCAEAic,EAAA0qB,MAAA,WAA4B,yBCvL5B1uC,EAAAD,QAAAQ,gCCCA,IACA4D,EADAC,EAAAxB,WAAAwB,YACAD,EAAA9C,OAAAgD,iBACUC,wBAAgBC,OAAA,SAAAtD,EAAAuD,GAAsCvD,EAAAqD,UAAAE,IAChE,SAAAvD,EAAAuD,GAAyB,QAAAtC,KAAAsC,IAAAvC,eAAAC,KAAAjB,EAAAiB,GAAAsC,EAAAtC,KACzB,SAAAjB,EAAAuD,GAEA,SAAAC,IAAuB7B,KAAA8B,YAAAzD,EADvBkD,EAAAlD,EAAAuD,GAEAvD,EAAAe,UAAA,OAAAwC,EAAAnD,OAAAsD,OAAAH,IAAAC,EAAAzC,UAAAwC,EAAAxC,UAAA,IAAAyC,KAGApD,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAoK,EAAAtL,EAAA,GAUA28B,EAAA,WAOA,SAAAA,EAAAv5B,EAAAyB,EAAAqpC,EAAAC,EAAAC,GACA,IAAAxR,EAAAx5B,EAAAw5B,IACAz6B,KAAA06B,GAAA,IAAAC,EAAA15B,EAAAhB,EAAAw6B,EAAAx6B,EAAAgB,EAAAf,EAAAu6B,EAAAv6B,EAAA6rC,EAAArpC,GACA1C,KAAA46B,GAAA,IAAAD,EAAAF,EAAAx6B,EAAAgB,EAAAT,MAAAS,EAAAf,EAAAu6B,EAAAv6B,EAAA6rC,EAAArpC,GACA1C,KAAA66B,GAAA,IAAAF,EAAA15B,EAAAhB,EAAAw6B,EAAAx6B,EAAAw6B,EAAAv6B,EAAAe,EAAAV,OAAAwrC,EAAArpC,GACA1C,KAAA86B,GAAA,IAAAH,EAAAF,EAAAx6B,EAAAgB,EAAAT,MAAAi6B,EAAAv6B,EAAAe,EAAAV,OAAAwrC,EAAArpC,GACA1C,KAAA06B,GAAAsR,cACAhsC,KAAA46B,GAAAoR,cACAhsC,KAAA66B,GAAAmR,cACAhsC,KAAA86B,GAAAkR,cACAhsC,KAAA06B,GAAAuR,gBACAjsC,KAAA46B,GAAAqR,gBACAjsC,KAAA66B,GAAAoR,gBACAjsC,KAAA86B,GAAAmR,gBAgBA,OAVAzR,EAAAp7B,UAAA6E,QAAA,WACAjE,KAAA06B,GAAAz2B,UACAjE,KAAA46B,GAAA32B,UACAjE,KAAA66B,GAAA52B,UACAjE,KAAA86B,GAAA72B,iBACAjE,KAAA06B,UACA16B,KAAA46B,UACA56B,KAAA66B,UACA76B,KAAA86B,IAEAN,EApCA,GAsCAr9B,EAAAq9B,YAMA,IAAAG,EAAA,WAIA,SAAAA,EAAAt6B,EAAAG,EAAAF,EAAAC,EAAAwrC,EAAArpC,QACA,IAAAA,IAA+BA,EAAA,GAE/B1C,KAAA+6B,YAEA/6B,KAAA0C,MAAA,EAEA1C,KAAAg7B,MAAA,KAEA7zB,UAAAvC,QAAA,EACA5E,KAAAiB,OAAA,IAAAkI,EAAArJ,QAA+CO,OAAAG,QAAAF,MAAAC,WAI/CP,KAAAiB,OAAA,IAAAkI,EAAArJ,QAA+CO,KAAA,EAAAG,MAAA,EAAAF,IAAA,EAAAC,OAAA,IAG/CP,KAAA0C,QAEA1C,KAAA+rC,YAGA,IAAA/rC,KAAA0C,QACA1C,KAAAksC,eACAlsC,KAAAgsC,YAAA,IAAAppC,IACA5C,KAAAisC,cAAA,IAAArpC,KAiXA,OA3WA+3B,EAAAv7B,UAAA6E,QAAA,kBACAjE,KAAA+6B,gBACA/6B,KAAAiB,OACAjB,KAAAg7B,QACAh7B,KAAAg7B,MAAA/2B,UACAjE,KAAAg7B,MAAA,OAcAL,EAAAv7B,UAAAy5B,IAAA,SAAAoC,GACA,IAAAh6B,EAAAjB,KAAAisC,cAAAptC,IAAAo8B,GASA,OARAh6B,IAEAA,EAAAjB,KAAA+rC,UAAA9Q,GACAj7B,KAAAisC,cAAAzgC,IAAAyvB,EAAAh6B,KAKAA,KAAAE,SAAAnB,KAAAiB,QACAjB,KAAAk7B,MAAAD,EAAAh6B,IAIAjB,KAAAm7B,MAAAl6B,GACAjB,KAAA64B,IAAAoC,KAUAN,EAAAv7B,UAAA+Q,OAAA,SAAA4qB,GACA,IAAAt4B,EAAAzC,KAGAuc,EAAA6B,OAAAuV,UACAnX,EAAA4B,OAAAuV,UACAlX,GAAA2B,OAAAuV,UACAjX,GAAA0B,OAAAuV,UAEAoH,EAAA91B,QAAA,SAAAg2B,GACA,IAAAh6B,EAAAwB,EAAAspC,UAAA9Q,GACAx4B,EAAAwpC,cAAAzgC,IAAAyvB,EAAAh6B,GACAA,IAEAA,EAAAhB,EAAAsc,IACAA,EAAAtb,EAAAhB,GAEAgB,EAAAT,MAAAic,IACAA,EAAAxb,EAAAT,OAEAS,EAAAV,OAAAmc,IACAA,EAAAzb,EAAAV,QAEAU,EAAAf,EAAAsc,IACAA,EAAAvb,EAAAf,MAMAqc,IAAA6B,OAAAuV,WACAnX,IAAA4B,OAAAuV,WACAlX,KAAA2B,OAAAuV,WACAjX,KAAA0B,OAAAuV,WAEA3zB,KAAAm7B,MAAA,IAAAhyB,EAAArJ,QAA4CO,KAAAkc,EAAA/b,MAAAic,EAAAlc,OAAAmc,EAAApc,IAAAkc,KAG5Cue,EAAA91B,QAAA,SAAAg2B,EAAAtuB,GAAkD,OAAAlK,EAAAy4B,MAAAD,EAAAx4B,EAAAwpC,cAAAptC,IAAAo8B,IAAA,YAQlDN,EAAAv7B,UAAA+7B,MAAA,SAAAl6B,GACA,IAAAwB,EAAAzC,KAEA,IAAAiB,EAAAE,SAAAnB,KAAAiB,QAAA,CAIAjB,KAAAiB,OAAAL,YAAAK,GACAjB,KAAAiB,OAAAhB,GAAA,EACAD,KAAAiB,OAAAf,GAAA,EACAF,KAAAiB,OAAAd,OAAA,EACAH,KAAAiB,OAAAb,QAAA,EAEA,IAAAi7B,EAAAr7B,KAAAs7B,mBACAt7B,KAAA+6B,YAEA/6B,KAAAg7B,QAEAh7B,KAAAg7B,MAAA/2B,UACAjE,KAAAg7B,MAAA,MAGAh7B,KAAAgsC,YAAA/T,QAEAoD,EAAAp2B,QAAA,SAAAg2B,EAAAtuB,GAAqD,OAAAlK,EAAAy4B,MAAAD,EAAAx4B,EAAAwpC,cAAAptC,IAAAo8B,IAAA,UAWrDN,EAAAv7B,UAAA87B,MAAA,SAAAD,EAAAh6B,EAAAkrC,GAEA,OAAAlrC,GAAA,IAAAjB,KAAA0C,MAMAzB,EAMAjB,KAAAg7B,MACA/5B,EAAAE,SAAAnB,KAAAg7B,MAAAN,GAAAz5B,QACAjB,KAAAg7B,MAAAN,GAAAQ,MAAAD,EAAAh6B,EAAAkrC,GAEAlrC,EAAAE,SAAAnB,KAAAg7B,MAAAJ,GAAA35B,QACAjB,KAAAg7B,MAAAJ,GAAAM,MAAAD,EAAAh6B,EAAAkrC,GAEAlrC,EAAAE,SAAAnB,KAAAg7B,MAAAH,GAAA55B,QACAjB,KAAAg7B,MAAAH,GAAAK,MAAAD,EAAAh6B,EAAAkrC,GAEAlrC,EAAAE,SAAAnB,KAAAg7B,MAAAF,GAAA75B,QACAjB,KAAAg7B,MAAAF,GAAAI,MAAAD,EAAAh6B,EAAAkrC,IAGAnsC,KAAA+6B,SAAAvuB,KAAAyuB,GACAj7B,KAAAgsC,YAAAxgC,IAAAyvB,EAAAj7B,OACA,GAEAiB,EAAAE,SAAAnB,KAAAiB,SAEAjB,KAAA+6B,SAAAvuB,KAAAyuB,GACAj7B,KAAAgsC,YAAAxgC,IAAAyvB,EAAAj7B,MAEAA,KAAA+6B,SAAAn2B,OAxPA,GAwPA5E,KAAA0C,MAvPA,IAwPA1C,KAAAu7B,SAEA,IAKAC,MAAAv6B,EAAAd,MAAAc,EAAAb,OAAAa,EAAAhB,EAAAgB,EAAAf,GACAuK,QAAA+D,MAAA,2DAAAysB,EAAAh6B,GAEA,IAAAA,EAAAw6B,KACAhxB,QAAA+D,MAAA,yDAAAysB,EAAAh6B,GAGAwJ,QAAA+D,MAAA,yCAAAxO,KAAAiB,OAAAG,WAAA,SAAAH,EAAAG,WAAA,iBAAAH,EAAAhB,GAAAD,KAAAiB,OAAAhB,EAAAgB,EAAAT,OAAAR,KAAAiB,OAAAT,MAAAS,EAAAf,GAAAF,KAAAiB,OAAAf,EAAAe,EAAAV,QAAAP,KAAAiB,OAAAV,SAGA,IA9CAkK,QAAAC,KAAA,sFACA,IAPA1K,KAAAksC,YAAA1/B,KAAAyuB,GACAj7B,KAAAgsC,YAAAxgC,IAAAyvB,EAAAj7B,OACA,IAoDA26B,EAAAv7B,UAAAgtC,SAAA,SAAAnR,GACA,IAAAtuB,EAAA3M,KAAA+6B,SAAAnuB,QAAAquB,GACAtuB,GAAA,IACA3M,KAAA+6B,SAAAluB,OAAAF,EAAA,GACA3M,KAAAgsC,YAAAtV,OAAAuE,GACAj7B,KAAAisC,cAAAvV,OAAAuE,KAUAN,EAAAv7B,UAAAk8B,eAAA,SAAAI,GAQA,OAPA17B,KAAA+6B,SAAA91B,QAAA,SAAAg2B,GAAgD,OAAAS,EAAAlvB,KAAAyuB,KAChDj7B,KAAAg7B,QACAh7B,KAAAg7B,MAAAN,GAAAY,eAAAI,GACA17B,KAAAg7B,MAAAJ,GAAAU,eAAAI,GACA17B,KAAAg7B,MAAAH,GAAAS,eAAAI,GACA17B,KAAAg7B,MAAAF,GAAAQ,eAAAI,IAEAA,GAWAf,EAAAv7B,UAAAwQ,MAAA,SAAA3O,EAAA06B,GAEA,IAAAjnB,KAMA,OAJA,IAAA1U,KAAA0C,QACAgS,EAAA1U,KAAAksC,YAAAl9B,MAAA,IAGA/N,aAAAkI,EAAArJ,QACAmB,EAAAC,UAAAlB,KAAAiB,QACAjB,KAAA47B,YAAA36B,EAAAyT,EAAAinB,GAIA37B,KAAAiB,OAAAP,cAAAO,GACAjB,KAAA67B,WAAA56B,EAAAyT,EAAAinB,GAGAjnB,GAYAimB,EAAAv7B,UAAAw8B,YAAA,SAAAh6B,EAAA85B,EAAAC,GACA,IAAAl5B,EAAAzC,KAwBA,OAvBAA,KAAA+6B,SAAA91B,QAAA,SAAA7G,GACA,IAAA6C,EAAAwB,EAAAwpC,cAAAptC,IAAAT,GACA6C,KAAAC,UAAAU,IACA85B,EAAAlvB,KAAApO,KAGAu9B,GACAA,EAAA37B,MAEAA,KAAAg7B,QACAp5B,EAAAV,UAAAlB,KAAAg7B,MAAAN,GAAAz5B,SACAjB,KAAAg7B,MAAAN,GAAAkB,YAAAh6B,EAAA85B,EAAAC,GAEA/5B,EAAAV,UAAAlB,KAAAg7B,MAAAJ,GAAA35B,SACAjB,KAAAg7B,MAAAJ,GAAAgB,YAAAh6B,EAAA85B,EAAAC,GAEA/5B,EAAAV,UAAAlB,KAAAg7B,MAAAH,GAAA55B,SACAjB,KAAAg7B,MAAAH,GAAAe,YAAAh6B,EAAA85B,EAAAC,GAEA/5B,EAAAV,UAAAlB,KAAAg7B,MAAAF,GAAA75B,SACAjB,KAAAg7B,MAAAF,GAAAc,YAAAh6B,EAAA85B,EAAAC,IAGAD,GAYAf,EAAAv7B,UAAAy8B,WAAA,SAAAv8B,EAAAo8B,EAAAC,GACA,IAAAl5B,EAAAzC,KAwBA,OAvBAA,KAAA+6B,SAAA91B,QAAA,SAAA7G,GACA,IAAA6C,EAAAwB,EAAAwpC,cAAAptC,IAAAT,GACA6C,KAAAP,cAAApB,IACAo8B,EAAAlvB,KAAApO,KAGAu9B,GACAA,EAAA37B,MAEAA,KAAAg7B,QACAh7B,KAAAg7B,MAAAN,GAAAz5B,OAAAP,cAAApB,IACAU,KAAAg7B,MAAAN,GAAAmB,WAAAv8B,EAAAo8B,EAAAC,GAEA37B,KAAAg7B,MAAAJ,GAAA35B,OAAAP,cAAApB,IACAU,KAAAg7B,MAAAJ,GAAAiB,WAAAv8B,EAAAo8B,EAAAC,GAEA37B,KAAAg7B,MAAAH,GAAA55B,OAAAP,cAAApB,IACAU,KAAAg7B,MAAAH,GAAAgB,WAAAv8B,EAAAo8B,EAAAC,GAEA37B,KAAAg7B,MAAAF,GAAA75B,OAAAP,cAAApB,IACAU,KAAAg7B,MAAAF,GAAAe,WAAAv8B,EAAAo8B,EAAAC,IAGAD,GAKAf,EAAAv7B,UAAA65B,OAAA,SAAAgC,GACA,GAAAj7B,KAAAgsC,YAAA,CACA,IAAAK,EAAArsC,KAAAgsC,YAAAntC,IAAAo8B,GAGA,GAAAoR,GAAA,IAAAA,EAAA3pC,MAAA,CACA,IAAAiK,EAAA0/B,EAAAH,YAAAt/B,QAAAquB,GACA,GAAAtuB,GAAA,EAIA,OAHA0/B,EAAAH,YAAAr/B,OAAAF,GACA3M,KAAAgsC,YAAAtV,OAAAuE,QACAj7B,KAAAisC,cAAAvV,OAAAuE,GAKAoR,GACAA,EAAAD,SAAAnR,KAOAN,EAAAv7B,UAAAm8B,MAAA,WAEA,IAAAF,EAAAr7B,KAAAs7B,mBAEAt7B,KAAAg7B,MAAA,IAAAR,EAAAx6B,KAAAiB,OAAAjB,KAAA0C,MAAA,EAAA1C,KAAA+rC,UAAA/rC,KAAAgsC,YAAAhsC,KAAAisC,eAEAjsC,KAAA+6B,YACA,QAAAh9B,EAAA,EAAA4G,EAAA02B,EAAAz2B,OAAiD7G,EAAA4G,IAAS5G,EAAA,CAC1D,IAAAk9B,EAAAI,EAAAt9B,GACAiC,KAAAk7B,MAAAD,EAAAj7B,KAAAisC,cAAAptC,IAAAo8B,IAAA,WAQAN,EAAAv7B,UAAAu8B,MAAA,SAAAG,GACA,IAAAC,EAAA/yB,QAAA8yB,EAAA97B,OACAA,KAAAg7B,QAAAe,IACA/7B,KAAAg7B,MAAAN,GAAAiB,MAAAG,GACA97B,KAAAg7B,MAAAJ,GAAAe,MAAAG,GACA97B,KAAAg7B,MAAAH,GAAAc,MAAAG,GACA97B,KAAAg7B,MAAAF,GAAAa,MAAAG,KAGAnB,EA9YA,GAgZAx9B,EAAAw9B,OACA,IAAAn3B,EAAA,SAAAjB,GAEA,SAAAiB,IACA,cAAAjB,KAAAqM,MAAA5O,KAAAmH,YAAAnH,KAEA,OAJAwB,EAAAgC,EAAAjB,GAIAiB,EALA,CAMCm3B,GACDx9B,EAAAqG,gDCzdA,IACAjC,EADAC,EAAAxB,WAAAwB,YACAD,EAAA9C,OAAAgD,iBACUC,wBAAgBC,OAAA,SAAAtD,EAAAuD,GAAsCvD,EAAAqD,UAAAE,IAChE,SAAAvD,EAAAuD,GAAyB,QAAAtC,KAAAsC,IAAAvC,eAAAC,KAAAjB,EAAAiB,GAAAsC,EAAAtC,KACzB,SAAAjB,EAAAuD,GAEA,SAAAC,IAAuB7B,KAAA8B,YAAAzD,EADvBkD,EAAAlD,EAAAuD,GAEAvD,EAAAe,UAAA,OAAAwC,EAAAnD,OAAAsD,OAAAH,IAAAC,EAAAzC,UAAAwC,EAAAxC,UAAA,IAAAyC,KAGApD,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAaAutC,EAAA,SAAA/pC,GAEA,SAAA+pC,EAAAvsC,GACA,IAAA0C,EAAAF,EAAArE,KAAA8B,YAIA,OAHAyC,EAAA8pC,aAAA,SAAAniC,GAAgD,OAAAA,GAChD3H,EAAAuoB,YAAA,SAAA3gB,GAA8C,OAAAA,GAC9C5L,OAAAqE,OAAAL,EAAA1C,GACA0C,EAsBA,OA5BAjB,EAAA8qC,EAAA/pC,GAQA9D,OAAAC,eAAA4tC,EAAAltC,UAAA,UACAP,IAAA,WACA,OAAAmB,KAAAusC,aAAAvsC,KAAAwsC,KAAApiC,SAEAoB,IAAA,SAAAlC,KAGA1K,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAA4tC,EAAAltC,UAAA,SACAP,IAAA,WACA,OAAAmB,KAAAgrB,YAAAhrB,KAAAwsC,KAAAniC,QAEAmB,IAAA,SAAAlC,KAGA1K,YAAA,EACAD,cAAA,IAEA2tC,EA7BA,CAbAzuC,EAAA,IA2CCiR,aACD3R,EAAAmvC,gDCvDA7tC,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IACA0tC,EADAllC,EAAA1J,EAAA,IAEA,SAAA4uC,GACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,mBAHA,CAICA,EAAAtvC,EAAAsvC,WAAAtvC,EAAAsvC,cAID,IAAAC,EAAA,SASAC,EAAA,WACA,SAAAA,EAAAjoC,GACA,IAdA4E,EAcA7G,EAAAzC,KAGAA,KAAA2H,QAAA,EACA3H,KAAA4sC,kBAAA,IAAAhqC,IACA5C,KAAA6sC,gBAAA,IAAAjqC,IACA5C,KAAA2C,aAAA,IAAAC,IACA5C,KAAA8sC,WAAA,EACA9sC,KAAA+sC,eAOA/sC,KAAAgtC,YAAA,SAAAvmC,GAA+C,gBAAAnC,GAU/C,OATA7B,EAAAkF,SACArD,EAAAZ,OAAAgpC,GACAjmC,EAAA+E,IAAAlH,EAAApF,OAAAutC,EAAAQ,QACAxqC,EAAAqqC,WAAA,GAGAriC,QAAAC,KAAA,wDAAApG,EAAAZ,OAGAY,IAEAtE,KAAAktC,WAAA3lC,EAAAK,WAAAlD,OAzCA4E,EA0CAtJ,KAAAktC,WAzCAlkC,QAAAM,EAAA6jC,WA0CAntC,KAAAotC,aAAA7lC,EAAA8lC,UAAArtC,KAAAktC,WAAAltC,KAAAstC,YAAAttC,KAAAktC,WAAAltC,KAAA6sC,gBAAA7sC,KAAA2C,aAAA3C,KAAA4sC,qBA0FA,OAvFAnuC,OAAAC,eAAAiuC,EAAAvtC,UAAA,aAKAP,IAAA,WACA,OAAAmB,KAAAktC,YAEAtuC,YAAA,EACAD,cAAA,IAEAF,OAAAC,eAAAiuC,EAAAvtC,UAAA,cACAP,IAAA,WAIA,GADAmB,KAAA2H,QAAA,EACA3H,KAAA8sC,UAAA,CACA,IAAAS,KACAvtC,KAAA6sC,gBAAA5nC,QAAA,SAAAuoC,EAAAjpC,GACAgpC,EAAA/gC,MAAAjI,EAAAipC,MAEAxtC,KAAA+sC,YAAAQ,EAEA,OAAAvtC,KAAA+sC,aAEAnuC,YAAA,EACAD,cAAA,IAKAguC,EAAAvtC,UAAA6E,QAAA,WACAjE,KAAAotC,eACAptC,KAAA4sC,kBAAA3nC,QAAA,SAAAwoC,GAA4D,OAAAA,MAC5DztC,KAAAktC,WAAA,KACAltC,KAAA6sC,gBAAA5U,QACAj4B,KAAA+sC,YAAA,MAUAJ,EAAAvtC,UAAAkuC,YAAA,SAAA5R,EAAAj1B,EAAAinC,EAAAC,GACA,IAAAlrC,EAAAzC,KACA,gBAAAsE,GACA,GAAA7B,EAAAkF,OAEA,GA7FA,WA6FArD,EAAAZ,KAAA,CAEA,QAAA3F,EAAAuG,EAAAqI,MAAAhI,EAAAL,EAAAqI,MAAArI,EAAAspC,aAAwF7vC,EAAA4G,IAAS5G,EAAA,CACjG,IAAA8C,EAAAyD,EAAApF,OAAAnB,GACA0I,EAAA+E,IAAA3K,EAAA4rC,EAAAoB,QACAprC,EAAAqqC,WAAA,EACA,IAAA/rB,EAAA4sB,EAAA9uC,IAAAgC,GACAkgB,GACAA,IAIA,IAAAhjB,EAAA,EAAA4G,EAAAL,EAAAwpC,MAAAlpC,OAA8D7G,EAAA4G,IAAS5G,EAAA,CACvE8C,EAAAyD,EAAAwpC,MAAA/vC,GAAAwJ,EAAAK,WAAAtD,EAAAwpC,MAAA/vC,IACA0I,EAAA+E,IAAA3K,EAAA4rC,EAAAsB,QACAtrC,EAAAqqC,WAAA,EACAY,EAAAliC,IAAA3K,EAAA6G,GAAA7G,GACA8sC,EAAAniC,IAAA3K,EAAA0G,EAAA8lC,UAAAxsC,EAAA4B,EAAAuqC,YAAAvmC,WAIAgE,QAAAC,KAAA,wDAAApG,EAAAZ,MAGA,OAAAY,IAMAqoC,EAAAvtC,UAAA0F,QAAA,WACA9E,KAAA2C,aAAAs1B,QACAj4B,KAAA6sC,gBAAA5U,QACAj4B,KAAA+sC,eACA/sC,KAAA2H,QAAA,GAEAglC,EAzHA,GA2HAxvC,EAAAwvC,6CC7HA,SAAAqB,EAAA9b,EAAAC,GACA,IAAA8b,EAAA/b,EAAAjyB,EAAAkyB,EAAAlyB,EACAiuC,EAAAhc,EAAAhyB,EAAAiyB,EAAAjyB,EACA,OAAA+tC,IAAAC,IArBAzvC,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IA6B9C,IAAAovC,EAAA,WACA,SAAAA,KAwKA,OA5JAA,EAAAtV,IAAA,SAAA3G,EAAAC,EAAAvoB,GACA,OAAAA,GACAA,EAAA3J,EAAAiyB,EAAAjyB,EAAAkyB,EAAAlyB,EACA2J,EAAA1J,EAAAgyB,EAAAhyB,EAAAiyB,EAAAjyB,EACA0J,IAGA3J,EAAAiyB,EAAAjyB,EAAAkyB,EAAAlyB,EACAC,EAAAgyB,EAAAhyB,EAAAiyB,EAAAjyB,IAcAiuC,EAAAC,WAAA,SAAAC,EAAAC,GACA,IAEAra,EAFAP,EAAAtV,OAAAuV,UACA4a,EAAA,KAUA,OADAD,EAAArpC,QAPA,SAAAtE,IACAszB,EAAA+Z,EAAArtC,EAAA0tC,IACA3a,IACAA,EAAAO,EACAsa,EAAA5tC,KAIA4tC,GAeAJ,EAAAK,gBAAA,SAAAH,EAAAC,GACA,IAEAra,EAFAP,EAAAtV,OAAAuV,UACA4a,EAAA,EAUA,OADAD,EAAArpC,QAPA,SAAAtE,EAAA5C,IACAk2B,EAAA+Z,EAAArtC,EAAA0tC,IACA3a,IACAA,EAAAO,EACAsa,EAAAxwC,KAIAwwC,GAYAJ,EAAAM,SAAA,SAAAC,EAAA9X,EAAA+X,QACA,IAAAA,IAAmCA,GAAA,GACnC,IAAAV,EAAArX,EAAA32B,EAAAyuC,EAAAzuC,EACAiuC,EAAAtX,EAAA12B,EAAAwuC,EAAAxuC,EACA,GAAAyuC,EAAA,CACA,IAAAC,EAAA9tC,KAAAsoB,KAAA6kB,IAAAC,KACAD,GAAAW,EACAV,GAAAU,EAEA,OACA3uC,EAAAguC,EACA/tC,EAAAguC,IAaAC,EAAAU,YAAA,SAAA3c,EAAAC,EAAA2c,GAEA,YADA,IAAAA,IAAiCA,GAAA,GACjCA,EACAd,EAAA9b,EAAAC,GAEArxB,KAAAsoB,KAAA4kB,EAAA9b,EAAAC,KAWAgc,EAAAY,YAAA,SAAA7c,EAAAC,GACA,IAAA6c,EAAAb,EAAAM,SAAAvc,EAAAC,GACA,OACAlyB,EAAA+uC,EAAA/uC,EAAA,EAAAiyB,EAAAjyB,EACAC,EAAA8uC,EAAA9uC,EAAA,EAAAgyB,EAAAhyB,IAGAiuC,EAAAc,KAAA,SAAAhvC,EAAAC,GACA,OAAgBD,IAAAC,MAYhBiuC,EAAA9jC,MAAA,SAAA6nB,EAAA3yB,EAAAqK,GACA,OAAAA,GACAA,EAAA3J,EAAAiyB,EAAAjyB,EAAAV,EACAqK,EAAA1J,EAAAgyB,EAAAhyB,EAAAX,EACAqK,IAGA3J,EAAAiyB,EAAAjyB,EAAAV,EACAW,EAAAgyB,EAAAhyB,EAAAX,IASA4uC,EAAA3tB,KAAA,WACA,OACAvgB,EAAA,EACAC,EAAA,IAGAiuC,EAzKA,GA2KAhxC,EAAAgxC,sCCxMA,IACA5sC,EADAC,EAAAxB,WAAAwB,YACAD,EAAA9C,OAAAgD,iBACUC,wBAAgBC,OAAA,SAAAtD,EAAAuD,GAAsCvD,EAAAqD,UAAAE,IAChE,SAAAvD,EAAAuD,GAAyB,QAAAtC,KAAAsC,IAAAvC,eAAAC,KAAAjB,EAAAiB,GAAAsC,EAAAtC,KACzB,SAAAjB,EAAAuD,GAEA,SAAAC,IAAuB7B,KAAA8B,YAAAzD,EADvBkD,EAAAlD,EAAAuD,GAEAvD,EAAAe,UAAA,OAAAwC,EAAAnD,OAAAsD,OAAAH,IAAAC,EAAAzC,UAAAwC,EAAAxC,UAAA,IAAAyC,KAGApD,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAiD,EAAAnE,EAAA,GACAqwB,EAAArwB,EAAA,GACAswB,EAAAtwB,EAAA,GACAoE,EAAApE,EAAA,GACAizB,EAAAjzB,EAAA,GACA8d,EAAA7a,KAAA6a,IAAAlG,EAAA3U,KAAA2U,IAKAy5B,EAAA,SAAA3sC,GAEA,SAAA2sC,IACA,cAAA3sC,KAAAqM,MAAA5O,KAAAmH,YAAAnH,KAiMA,OAnMAwB,EAAA0tC,EAAA3sC,GAQA2sC,EAAA9vC,UAAAiE,0BAAA,WACA,OAEAI,eAAA,SAAAib,GACA,IAAAkP,GACAlP,EAAAze,EAAAye,EAAAqN,OAAA9rB,EACAye,EAAAxe,EAAAwe,EAAAqN,OAAA7rB,GAEA,WAAAguB,EAAApuB,QACAM,OAAAse,EAAAte,OACAD,MAAAue,EAAAve,MACAF,EAAA2tB,EAAA,GACA1tB,EAAA0tB,EAAA,MAIAtqB,QAAA,SAAAob,EAAA/d,EAAA4H,GAGA,IAAAyoB,EAAAvb,EAAA7G,WAAA,EAAArG,EAAA4B,OAAAE,OACA4mB,EAAAtV,EAAA/M,WAAA,EAAArG,EAAA4B,OAAAE,OAEA,GAAAqU,EAAA+R,UAAAK,EAAAxvB,UAAA4vB,OACA,SAIA,GAAAxS,EAAA+R,UAAAK,EAAAxvB,UAAAovB,UAAA,CAEA,GAAAO,GAAA,GAAAD,GAAA,EACA,SAKA,IAAApD,EAAArlB,EAAAoC,eACA1K,EAAAye,EAAAze,EAAAye,EAAAqN,OAAA9rB,EAAAsI,EAAA4B,OAAAE,MAAA,GACAnK,EAAAwe,EAAAxe,EAAAwe,EAAAqN,OAAA7rB,EAAAqI,EAAA4B,OAAAE,MAAA,KAEA+mB,EAAA7oB,EAAAoC,cAAAhK,GAEA,WAAAutB,EAAApuB,QACAM,OAAAse,EAAAte,OACAD,MAAAue,EAAAve,MACAF,EAAA2tB,EAAA3tB,EACAC,EAAA0tB,EAAA1tB,IACyBQ,cAAA0wB,GAKzB,GAAA1S,EAAA+R,UAAAK,EAAAxvB,UAAA6vB,MAAA,CAEAvD,EAAArlB,EAAAoC,eACA1K,EAAAye,EAAAze,EAAAye,EAAAqN,OAAA9rB,EAAAsI,EAAA4B,OAAAE,MAAA,GACAnK,EAAAwe,EAAAxe,EAAAwe,EAAAqN,OAAA7rB,EAAAqI,EAAA4B,OAAAE,MAAA,KAEA+mB,EAAA7oB,EAAAoC,cAAAhK,GAEA,WAAAutB,EAAApuB,QACAM,OAAAse,EAAAte,OACAD,MAAAue,EAAAve,MACAF,EAAA2tB,EAAA3tB,EACAC,EAAA0tB,EAAA1tB,IACqBQ,cAAA0wB,GAErB,YAOA8d,EAAA9vC,UAAAsG,WAAA,WACA,IAAAjD,EAAAzC,KACAuuB,GACAC,EAAA,EACAC,EAAA,EACAC,GAAA,EACAC,EAAA,EACAC,GAAA,EACAC,GAAA,GAEAC,GACAN,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,GAEA,OACAlpB,GAAA9H,EAAA,IACA+H,qBAEAK,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA2U,IACA7V,KAAA,WACA6H,KAAAlE,EAAAxC,sBAAA6V,IACAvQ,OAAA,SAAAvG,GAA0C,OAAAA,EAAAyB,EAAAzB,EAAA0B,MAG1C+F,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA6V,MACA/W,KAAA,SACA6H,KAAAlE,EAAAxC,sBAAA6V,IACAvQ,OAAA,SAAAvG,GAA0C,OAAAA,EAAAutB,OAAA9rB,EAAAzB,EAAAutB,OAAA7rB,MAG1C+F,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA2U,IACA7V,KAAA,OACA6H,KAAAlE,EAAAxC,sBAAA6V,IACAvQ,OAAA,SAAAvG,GAA0C,OAAAA,EAAA2B,MAAA3B,EAAA4B,WAG1C6F,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA6V,MACA/W,KAAA,QACA6H,KAAAlE,EAAAxC,sBAAA0U,IACApP,OAAA,SAAAvG,GAA0C,OAAAA,EAAAkE,UAG1CuD,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA0U,KACA5V,KAAA,UACA6H,KAAAlE,EAAAxC,sBAAA0U,IACApP,OAAA,SAAAvG,GAA0C,OAAAA,EAAAiyB,YAG1CrqB,OACAa,IAAAjH,KAAAwC,MAAA4D,MACA9H,KAAA,cAEA2H,MAAA,EACA3H,KAAA,UACAyG,OAAA,SAAAvG,GAA0C,OAAAiE,EAAAsS,SAAA0hB,QAAAh0B,EAAAjE,IAAAuW,aAG1C9O,MAAA,EACAC,WAAAjE,EAAAzC,mBAAA2U,IACA7V,KAAA,OACA6H,KAAAlE,EAAAxC,sBAAAyU,KACAnP,OAAA,SAAAvG,GAA0C,OAAAA,EAAAomC,QAG1CpgC,WAEAlG,KAAA,cACA6H,KAAAlE,EAAAvC,YAAAyU,IACApP,OAAA,SAAAssB,GAA0C,aAG1CxrB,mBAKAvH,KAAA,WACA6H,KAAAlE,EAAAtC,oBAAA0V,MACAtQ,OAAA,SAAAiqB,GAA+C,OAE/CT,EAAAS,GAEAF,EAAAE,GACA,MAIAlpB,YAAA,EACAC,GAAAlI,EAAA,MAGAqxC,EAAA9vC,UAAAgG,aAAA,WACA,OACAC,SAAArD,EAAAitB,sBACA1pB,UAAAvD,EAAAwD,OAGA0pC,EAAA9vC,UAAAqG,mBAAA,WACA,OACAypB,SAAAltB,EAAAmtB,eACAC,SAAAptB,EAAAqtB,UACAC,oBAAA,EACAC,aAAA,IAGA2f,EApMA,CAqMC/gB,EAAA7rB,OACDnF,EAAA+xC,2CC3NA,IAAAx1B,EAAA1Z,WAAA0Z,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,WAAAD,MAAAE,UAAA,SAAAjV,EAAAkV,GACA,SAAAC,EAAAlb,GAAmC,IAAMmb,EAAAJ,EAAAK,KAAApb,IAA+B,MAAAqb,GAAYJ,EAAAI,IACpF,SAAAC,EAAAtb,GAAkC,IAAMmb,EAAAJ,EAAA,MAAA/a,IAAmC,MAAAqb,GAAYJ,EAAAI,IACvF,SAAAF,EAAAI,GAA+BA,EAAAC,KAAAzV,EAAAwV,EAAAvb,OAAA,IAAA8a,EAAA,SAAA/U,GAAiEA,EAAAwV,EAAAvb,SAAyByb,KAAAP,EAAAI,GACzHH,GAAAJ,IAAAlL,MAAA+K,EAAAC,QAAAO,WAGAM,EAAAza,WAAAya,aAAA,SAAAd,EAAAe,GACA,IAAwGC,EAAAza,EAAA0a,EAAAC,EAAxGC,GAAa5N,MAAA,EAAA6N,KAAA,WAA6B,KAAAH,EAAA,SAAAA,EAAA,GAA0B,OAAAA,EAAA,IAAeI,QAAAC,QACnF,OAAAJ,GAAgBV,KAAAe,EAAA,GAAAC,MAAAD,EAAA,GAAAE,OAAAF,EAAA,IAAqD,mBAAAG,SAAAR,EAAAQ,OAAAC,UAAA,WAAoE,OAAAtb,OAAe6a,EACxJ,SAAAK,EAAAlc,GAAsB,gBAAAqR,GAAsB,OAC5C,SAAAkL,GACA,GAAAZ,EAAA,UAAAa,UAAA,mCACA,KAAAV,GAAA,IACA,GAAAH,EAAA,EAAAza,IAAA0a,EAAA1a,EAAA,EAAAqb,EAAA,YAAAA,EAAA,uBAAAX,IAAA1c,KAAAgC,EAAAqb,EAAA,KAAAhB,KAAA,OAAAK,EAEA,OADA1a,EAAA,EAAA0a,IAAAW,GAAA,EAAAX,EAAA7b,QACAwc,EAAA,IACA,cAAAX,EAAAW,EAAuC,MACvC,OAAkC,OAAlCT,EAAA5N,SAA2CnO,MAAAwc,EAAA,GAAAhB,MAAA,GAC3C,OAAAO,EAAA5N,QAAkChN,EAAAqb,EAAA,GAAWA,GAAA,GAAU,SACvD,OAAAA,EAAAT,EAAAG,IAAAQ,MAAyCX,EAAAE,KAAAS,MAAc,SACvD,QACA,KAAAb,KAAAE,EAAAE,MAAApW,OAAA,GAAAgW,IAAAhW,OAAA,UAAA2W,EAAA,QAAAA,EAAA,KAA6GT,EAAA,EAAO,SACpH,OAAAS,EAAA,MAAAX,GAAAW,EAAA,GAAAX,EAAA,IAAAW,EAAA,GAAAX,EAAA,KAAgFE,EAAA5N,MAAAqO,EAAA,GAAiB,MACjG,OAAAA,EAAA,IAAAT,EAAA5N,MAAA0N,EAAA,IAAwDE,EAAA5N,MAAA0N,EAAA,GAAgBA,EAAAW,EAAQ,MAChF,GAAAX,GAAAE,EAAA5N,MAAA0N,EAAA,IAA8CE,EAAA5N,MAAA0N,EAAA,GAAgBE,EAAAG,IAAAzO,KAAA+O,GAAgB,MAC9EX,EAAA,IAAAE,EAAAG,IAAAQ,MACAX,EAAAE,KAAAS,MAAiC,SAEjCF,EAAAb,EAAAxc,KAAAyb,EAAAmB,GACS,MAAAV,GAAYmB,GAAA,EAAAnB,GAAala,EAAA,EAAS,QAAUya,EAAAC,EAAA,EACrD,KAAAW,EAAA,SAAAA,EAAA,GAAmC,OAASxc,MAAAwc,EAAA,GAAAA,EAAA,UAAAhB,MAAA,GArBAL,EAAAlb,EAAAqR,OAwB5C5R,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C,IAAAiD,EAAAnE,EAAA,GACAsxC,EAAAtxC,EAAA,IACAuxC,EAAAvxC,EAAA,IACAsL,EAAAtL,EAAA,GACAwxC,EAAAxxC,EAAA,IACAyxC,EAAAzxC,EAAA,IACA0xC,EAAA1xC,EAAA,IACA2xC,EAAA3xC,EAAA,IACAu6B,EAAAv6B,EAAA,IACA4xC,EAAA5xC,EAAA,IACA6xC,EAAA7xC,EAAA,IACAma,EAAAna,EAAA,IACAoa,EAAApa,EAAA,IACAm+B,EAAAn+B,EAAA,IACA8xC,EAAA9xC,EAAA,IACA+xC,EAAA/xC,EAAA,IACAwiC,EAAAxiC,EAAA,GACAgyC,EAAAhyC,EAAA,IACAiyC,EAAA,IAAA9tC,EAAA+tC,MAAA,OACA,SAAAC,EAAA1mC,GACA,OAAAN,QAAAM,EAAAwS,YAcA3e,EAAA8yC,YAHA,SAAAC,EAAA1tC,GACA,OAAA0tC,EAAA1tC,IAQA,IAAA2tC,EAAA,WACA,SAAAA,IAEAnwC,KAAAg2B,aAAA,IAAAqK,EAAA2B,aAEAhiC,KAAAkM,OAAA,IAAAtJ,IAEA5C,KAAAyJ,WAAAjM,OAAAkM,iBAKA1J,KAAAowC,OAAA,IAAAxtC,IAIA5C,KAAAk3B,cAMAl3B,KAAAqwC,iBAAA,IAAAztC,IAKA5C,KAAAswC,kBAAA,EAqhBA,OAnhBA7xC,OAAAC,eAAAyxC,EAAA/wC,UAAA,MAEAP,IAAA,WACA,OAAAmB,KAAA8P,SAEAlR,YAAA,EACAD,cAAA,IAMAwxC,EAAA/wC,UAAAmN,SAAA,SAAA5D,GACA,OAAAA,EAAAjB,GAIA1H,KAAAkM,OAAArN,IAAA8J,EAAAjB,KACA+C,QAAAC,KAAA,oDACA/B,IAGA3I,KAAAkM,OAAAV,IAAA7C,EAAAjB,GAAAiB,GAEA3I,KAAAuwC,UAAA5nC,GACAA,IAXA8B,QAAAC,KAAA,8BACA/B,IAeAwnC,EAAA/wC,UAAA6E,QAAA,WACAjE,KAAAkM,OAAAjH,QAAA,SAAA0D,GAA8C,OAAAA,EAAA1E,YAC9CjE,KAAAwwC,gBAAAvsC,UACAjE,KAAAoI,aAAAnE,UACAjE,KAAAk3B,WAAAjyB,QAAA,SAAAqyB,GAAsD,OAAAA,EAAA3e,MAAA1U,YACtDjE,KAAAywC,SAAA1vB,UAEAquB,EAAA7O,cAAAt8B,UACAkrC,EAAAxK,cAAA1gC,WAKAksC,EAAA/wC,UAAAgF,KAAA,WACA,OAAAsV,EAAA1Z,UAAA,oBACA,IAAAowC,EAAAryC,EAAA4G,EAAAgU,EAAAtJ,EAAAnD,EAAA+K,EAAAD,EAAAzO,EAAA4O,EAAAC,EAAAzO,EAAA+nC,EACA,OAAAj2B,EAAAza,KAAA,SAAAgD,GACA,OAAAA,EAAAkK,OACA,OACA,IAAAlN,KAAAqmB,GACA,UAGA,IAFA+pB,EAAAzuC,MAAAi1B,KAAA52B,KAAAowC,OAAA7hC,UAEAxQ,EAAA,EAAA4G,EAAAyrC,EAAAxrC,OAAwD7G,EAAA4G,IAAS5G,EAOjE,IANA4a,EAAAy3B,EAAAryC,GACAsR,EAAA1N,MAAAi1B,KAAAje,EAAAvM,SAAAmC,UACArC,EAAAyM,EAAAzM,OAEAyM,EAAA7L,aAEAmK,EAAA,EAAAD,EAAA3H,EAAAzK,OAA4DqS,EAAAD,IAAUC,EAAA,CAWtE,KAVA1O,EAAA8G,EAAA4H,IAGAlM,kBAAA,IAAA5B,EAAArJ,QACAM,OAAAJ,KAAA8P,QAAAV,OAAAhP,OACAD,MAAAH,KAAA8P,QAAAV,OAAAjP,MACAF,EAAA,EACAC,EAAA,KAGAiX,EAAA,EAAAC,EAAAlL,EAAAtH,OAAiEuS,EAAAC,IAAUD,GAC3ExO,EAAAuD,EAAAiL,IAEA5O,OAGAI,EAAAvE,OAGApE,KAAA2wC,cAAAh4B,EAAA1M,UAAA1D,GAYA,OAPAvI,KAAAoI,aAAAkJ,mBACAtR,KAAAk3B,WAAAjyB,QAAA,SAAAqyB,GACAA,EAAAr2B,OAAA,IAAA+6B,EAAAlkB,WAAAwf,EAAA/uB,KAAAC,cACA8uB,EAAAr2B,OAAAyD,KAAA4yB,IAEAt3B,KAAAoI,aAAAkJ,kBAAA,GAEAtR,KAAAswC,kBAAA,MACAtwC,KAAAswC,kBAAA,GACA,EAAAtwC,KAAAwwC,gBAAAva,oBACA,OACAya,EAAA1tC,EAAA+X,OACA/a,KAAAswC,kBAAA,EAGAI,GACA1wC,KAAAoE,OACApB,EAAAkK,MAAA,EACA,uBAQAijC,EAAA/wC,UAAAuxC,cAAA,SAAAh4B,EAAApQ,GACA,IAAA6B,GAAsBnK,EAAAsI,EAAAwB,WAAA1J,KAAAH,EAAAqI,EAAAwB,WAAAzJ,KACtB6F,EAAAoC,EAAAwB,WACA6mC,EAAA5wC,KAAAywC,SAAAI,UACAD,EAAAzwC,OAAAH,KAAAywC,SAAAK,gBACAF,EAAAxwC,QAAAJ,KAAAywC,SAAAK,gBACA,IAAAC,EAAAxoC,EAAAwoC,WAEA/wC,KAAA8P,QAAA8T,OAAA5jB,KAAA8P,QAAAkhC,cACAhxC,KAAA8P,QAAAmhC,QAAA7mC,EAAAnK,EAAA2wC,EAAAxwC,OAAAgK,EAAAlK,EAAAiG,EAAA/F,OAAA+F,EAAAhG,MAAAgG,EAAA/F,QAGAmI,EAAAwoC,YAEA/wC,KAAA8P,QAAAohC,WAAAH,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAGAxoC,EAAA4oC,WACAnxC,KAAA8P,QAAAmoB,OAAA1vB,EAAA4oC,WAAAvkC,QAAAqL,EAAA1O,WAAA6nC,QAAA,EAAApxC,KAAA8P,QAAAuhC,iBAAA,IACA9oC,EAAA4oC,WAAAvkC,QAAAqL,EAAA1O,WAAA+nC,QAAA,EAAAtxC,KAAA8P,QAAAyhC,iBAAA,IACAhpC,EAAA4oC,WAAAvkC,QAAAqL,EAAA1O,WAAAioC,UAAA,EAAAxxC,KAAA8P,QAAA2hC,mBAAA,IAIAzxC,KAAA8P,QAAAmoB,MAAAj4B,KAAA8P,QAAAuhC,iBAAArxC,KAAA8P,QAAAyhC,kBAIA,IAAAG,EAAA1xC,KAAA2xC,gBACAD,KAAAzxC,IAAAmK,EAAAnK,GAAAyxC,EAAAxxC,IAAAkK,EAAAlK,GAAAwxC,EAAAvxC,QAAAgG,EAAAhG,OAAAuxC,EAAAtxC,SAAA+F,EAAA/F,SACAJ,KAAAywC,SAAAmB,YAAAxnC,EAAAnK,EAAAD,KAAAyJ,WAAAW,EAAAlK,EAAAF,KAAAyJ,WAAAtD,EAAAhG,MAAAgG,EAAA/F,QACAJ,KAAA2xC,iBACAvxC,OAAA+F,EAAA/F,OACAD,MAAAgG,EAAAhG,MACAF,EAAAmK,EAAAnK,EACAC,EAAAkK,EAAAlK,IAIAF,KAAAywC,SAAAlyB,OAAA5F,EAAApQ,EAAA+B,WAAAY,aAMAilC,EAAA/wC,UAAAyyC,YAAA,SAAA1pC,GACA,QAAAgL,EAAA,EAAAnQ,EAAAhD,KAAAk3B,WAA8C/jB,EAAAnQ,EAAA4B,OAAgBuO,IAAA,CAC9D,IAAAmkB,EAAAt0B,EAAAmQ,GACA,GAAAmkB,EAAA/uB,KAAAb,KAAAS,EACA,OAAAmvB,EAAA/uB,KAAAC,aAGA,aAKA2nC,EAAA/wC,UAAA0yC,mBAAA,SAAA3pC,GACA,QAAAgL,EAAA,EAAAnQ,EAAAhD,KAAAk3B,WAA8C/jB,EAAAnQ,EAAA4B,OAAgBuO,IAAA,CAC9D,IAAAmkB,EAAAt0B,EAAAmQ,GACA,GAAAmkB,EAAA/uB,KAAAb,KAAAS,EAAA,CACA,IAAAI,EAAA+uB,EAAA/uB,KACA,GAAAA,EAAAC,aAAA,CACA,IAAAolB,EAAArlB,EAAAsC,aAAoD5K,EAAA,EAAAC,EAAA,IACpD2tB,EAAAtlB,EAAA0B,eAA0DhK,EAAAsI,EAAAC,aAAAhI,MAAAN,EAAAqI,EAAAC,aAAAjI,SAC1D,WAAA4I,EAAArJ,QACAS,OAAAstB,EAAA3tB,EACAG,KAAAutB,EAAA3tB,EACAO,MAAAqtB,EAAA5tB,EACAK,IAAAstB,EAAA1tB,IAIA,aAIA,aAMAiwC,EAAA/wC,UAAA6pC,KAAA,SAAAlpC,GACA,OAAA2Z,EAAA1Z,UAAA,oBACA,OAAAya,EAAAza,KAAA,SAAAgD,GACA,OAAAA,EAAAkK,OACA,OAKA,OAHAlN,KAAAyJ,WAAA1J,EAAA0J,YAAAzJ,KAAAyJ,WAEAzJ,KAAA+xC,WAAAhyC,EAAA+P,SACA9P,KAAAqmB,IAEArmB,KAAAgyC,OAAAjyC,GAEAC,KAAAiyC,iBAAAlyC,IAEA,EAAAC,KAAAkyC,cAAAnyC,MANA,KAOA,OAEAiD,EAAA+X,OACA/X,EAAAkK,MAAA,EACA,gBAAAlN,YAQAmwC,EAAA/wC,UAAA4yC,OAAA,SAAAjyC,GACA,IAAA0C,EAAAzC,KACA,GAAAA,KAAA8P,QAAA,CAKA,IAAAV,EAAApP,KAAA8P,QAAAV,OAEAjP,EAAAiP,EAAAjP,MACAC,EAAAgP,EAAAhP,OAEAJ,KAAAywC,SAAA,IAAAzuC,EAAAmwC,eAGAC,MAAAryC,EAAAgxC,YAAAhxC,EAAAgxC,WAAA,KAEAsB,WAAA,EAEAjjC,SAGAkjC,uBAAA,IAGAtyC,KAAAywC,SAAA8B,WAAA,EAEAvyC,KAAAywC,SAAA+B,eAAAxwC,EAAAywC,cAEAzyC,KAAAywC,SAAAiC,QAAAvyC,EAAAC,GAEAJ,KAAAywC,SAAAkC,cAAA3yC,KAAAyJ,YAGA1J,EAAAgxC,WACA/wC,KAAAywC,SAAAmC,cAAA,IAAA5wC,EAAA+tC,MAAAhwC,EAAAgxC,WAAA,GAAAhxC,EAAAgxC,WAAA,GAAAhxC,EAAAgxC,WAAA,IAAAhxC,EAAAgxC,WAAA,IAIA/wC,KAAAywC,SAAAmC,cAAA9C,GAGA9vC,KAAA6yC,qBAAAvD,EAAAp3B,qBAAAlY,KAAA8P,SACA9P,KAAA6yC,qBAAAtqC,KAAAwoC,WAAAhxC,EAAAgxC,WAEA/wC,KAAAowC,OAAA5kC,IAAAxL,KAAA6yC,qBAAAl6B,MAAAjR,GAAA1H,KAAA6yC,qBAAAl6B,OAEA,IAAAm6B,EAAA,EAEA9yC,KAAAk3B,WAAA1qB,MACA9J,QAAAowC,EACAn6B,MAAA3Y,KAAA6yC,qBAAAl6B,MACApQ,KAAAvI,KAAA6yC,qBAAAtqC,OAIAvI,KAAA8P,QAAA8T,OAAA5jB,KAAA8P,QAAAkhC,cAEAjxC,EAAAqwC,QACArwC,EAAAqwC,OAAAnrC,QAAA,SAAA8tC,GAEA,IAAAC,EAAA,IAAAh7B,EAAAhM,MAAA+mC,GAGA,IAAAA,EAAA1jC,MAAAzK,SACAouC,EAAAvmC,QAAAhK,EAAAowC,qBAAAtqC,MACA9F,EAAAy0B,WAAA1qB,MACA9J,QAAAowC,EACAn6B,MAAAq6B,EACAzqC,KAAA9F,EAAAowC,qBAAAtqC,QAIAwqC,EAAA1jC,MAAApK,QAAA,SAAAguC,GACA,IAAAC,EAAA,IAAAj7B,EAAAzO,KAAAypC,GACAC,EAAA/oC,OAAA+oC,EAAA/oC,QAAA1H,EAAAowC,qBAAA1oC,OACA+oC,EAAA5oC,WAAA4oC,EAAA5oC,YAAA7H,EAAAowC,qBAAAvoC,WACA4oC,EAAA9nC,SAAA8nC,EAAA9nC,UAAA3I,EAAAowC,qBAAAznC,SACA8nC,EAAAzpC,WAAAhH,EAAAgH,WACAupC,EAAAvmC,QAAAymC,GACA,QAAA//B,EAAA,EAAAnQ,EAAAP,EAAAy0B,WAA2D/jB,EAAAnQ,EAAA4B,OAAgBuO,IAAA,CAC3EnQ,EAAAmQ,GACA5K,KAAAb,KAAAwrC,EAAAxrC,IACA+C,QAAAC,KAAA,wGAGAjI,EAAAy0B,WAAA1qB,MACA9J,QAAAowC,EACAn6B,MAAAq6B,EACAzqC,KAAA2qC,MAGAzwC,EAAA2tC,OAAA5kC,IAAAunC,EAAA9rC,IAAA+rC,UAzFAvoC,QAAA+D,MAAA,gFAkGA2hC,EAAA/wC,UAAAmxC,UAAA,SAAA5nC,GAEAA,EAAAoM,SAAA/U,KAAAwwC,gBAGA,IAAA73B,EAAA3Y,KAAAmzC,gBAAAxqC,GAEAoL,EAAApL,EAAAjD,aAEAqO,EAAAnO,mBAAAmO,EAAAnO,mBAAA0K,OAAAtH,SACA+K,EAAAlO,iBAAAkO,EAAAlO,iBAAAyK,OAAAtH,SACA+K,EAAAvP,SAAAuP,EAAAvP,SAAA8L,OAAAtH,SAEA,IAAAhG,EAAAysC,EAAA37B,eAAAnL,EAAAoL,GAAAlO,EAAA7C,EAAA6C,iBAAAD,EAAA5C,EAAA4C,mBAAApB,EAAAxB,EAAAwB,SAGA4uC,EAAA/D,EAAArR,gBAAAjqB,EAAAlO,EAAAD,EAAApB,GAEAoE,EAAA2mC,EAAA94B,sBAAA28B,EAAA18B,sBAAA7Q,EAAAkO,EAAAjO,aAGA+C,EAAA2mC,EAAAv5B,sBAAAtN,EAAAyqC,EAAArtC,GAAAqtC,EAAAztC,GAAAnB,EAAA4uC,EAAApuC,kBAEA+D,EAAAqvB,EAAA1vB,mBAAAC,EAAAC,EAAAC,GAaA,OAXAF,EAAAC,WACAD,EAAA/C,qBACA+C,EAAA9F,oBAAAkR,EAAAjO,YACA6C,EAAAE,WACAF,EAAA+N,sBAAA08B,EAAA18B,sBACA/N,EAAAI,QACAJ,EAAAnE,WACAmE,EAAA9C,mBAGA8C,EAAAzE,eAAA,IAAAyrC,EAAArX,uBAAA3vB,EAAAgQ,GACAhQ,GAKAwnC,EAAA/wC,UAAA6yC,iBAAA,SAAAlyC,GAEA,IAAAszC,GAAAtzC,EAAAszC,mBAAAxkC,QACA,IAAA+gC,EAAA3Y,iBAAAj3B,KAAAk3B,cAGAl3B,KAAAoI,aAAA,IAAAsnC,EAAAvgC,kBAAAnP,KAAA8P,QAAAV,OAAApP,KAAAk3B,WAAAmc,EAAAtzC,EAAAwP,qBAKA4gC,EAAA/wC,UAAA8yC,cAAA,SAAAnyC,GACA,OAAA2Z,EAAA1Z,UAAA,oBACA,IAAAmT,EAAAnQ,EAAA+R,EACA,OAAA0F,EAAAza,KAAA,SAAA4V,GACA,OAAAA,EAAA1I,OACA,OACA,IAAAnN,EAAAuzC,eAAA,YACAngC,EAAA,EAAAnQ,EAAAjD,EAAAuzC,eACA19B,EAAA1I,MAAA,EACA,OACA,OAAAiG,EAAAnQ,EAAA4B,QACAmQ,EAAA/R,EAAAmQ,IACA,EAAAnT,KAAAg2B,aAAAkM,YAAAntB,MAFA,KAGA,OACAa,EAAAmF,OACAnF,EAAA1I,MAAA,EACA,OAEA,OADAiG,KACA,KACA,OAKA,OAHAnT,KAAAwwC,gBAAA,IAAAX,EAAAja,sBACAI,aAAAh2B,KAAAg2B,gBAEA,SASAma,EAAA/wC,UAAA+zC,gBAAA,SAAAxqC,GAEA,IAAAgQ,EAAA3Y,KAAAowC,OAAAvxC,IAAA8J,EAAAnG,MAAAmW,OAWA,OAVAA,IAGAA,EAAA3Y,KAAA6yC,qBAAAl6B,MACAhQ,EAAAnG,MAAAmW,OACAlO,QAAAC,KAAA,oHAIAiO,EAAApM,SAAA5D,GACAgQ,GAOAw3B,EAAA/wC,UAAAsN,YAAA,SAAA/D,GAEA,OAAA3I,KAAAkM,OAAArN,IAAA8J,KAAAjB,KAIAiB,EAAAzE,eAAAg1B,kBACAvwB,EAAA1E,UACAjE,KAAAkM,OAAAwqB,OAAA/tB,EAAAjB,IACAiB,IANA8B,QAAAC,KAAA,sDAAA/B,GACAA,IAUAwnC,EAAA/wC,UAAAmf,OAAA,SAAAg1B,GACA,IAAA9wC,EAAAzC,KACAA,KAAAqmB,KAGAktB,KAAA3uC,OAAA,GACA2uC,EAAAtuC,QAAA,SAAAgkC,GACA,IAAAiH,EAAAjH,EAAA,GACAzmC,EAAAymC,EAAA,GACAuK,EAAA/wC,EAAAyJ,OAAArN,IAAA2D,EAAAyE,KACAusC,GACAA,EAAA9sC,gBAAAlE,GACA/D,OAAAqE,OAAA0wC,EAAAhxC,SACAgxC,EAAArvC,kBAGA1B,EAAA8J,SAAA,IAAA2jC,EAAAzxC,OAAAqE,UAAkEotC,EAAAntC,aAAAP,KAElEC,EAAA4tC,iBAAA7kC,IAAAhJ,EAAAyE,KAAA,KAIAjH,KAAAqwC,iBAAAprC,QAAA,SAAA8b,EAAA0yB,GACA1yB,GACAte,EAAAiK,YAAAjK,EAAAyJ,OAAArN,IAAA40C,MAIAzzC,KAAAqwC,iBAAApY,QAGAj4B,KAAAkM,OAAAjH,QAAA,SAAA0D,EAAAjB,GACAjF,EAAA4tC,iBAAA7kC,IAAA9D,GAAA,OAOAyoC,EAAA/wC,UAAAs0C,aAAA,SAAAjqC,GACA,IAAAwC,EAAAjM,KAAA8P,QAAAV,OAAAukC,cACA,GAAA1nC,EAAA,CACA,IAAAmD,EAAApP,KAAA8P,QAAAV,OACAA,EAAAwkC,UAAA,GACAxkC,EAAAykC,aAAA,YACA5nC,EAAAyW,MAAAnX,SAAA,WACA6D,EAAAsT,MAAAnX,SAAA,WACA6D,EAAAsT,MAAAriB,KAAA,MACA+O,EAAAsT,MAAApiB,IAAA,MACA8O,EAAAsT,MAAAviB,MAAA,OACAiP,EAAAsT,MAAAtiB,OAAA,OACAgP,EAAAykC,aAAA,YACAzkC,EAAAykC,aAAA,aACA,IAAAC,EAAA7nC,EAAA8nC,wBACArC,EAAAtiC,EAAA2kC,wBACA/zC,KAAA6P,OAAA6hC,EAAAvxC,OAAA,IAAA2zC,EAAA1zC,QAAA,OAGA+vC,EAAA/wC,UAAAyQ,OAAA,SAAA1P,EAAAC,EAAAqJ,GACA,IAAAhH,EAAAzC,KACAA,KAAAyJ,cAAAzJ,KAAAyJ,WACAzJ,KAAAk3B,WAAAjyB,QAAA,SAAAqyB,GAAsD,OAAAA,EAAA/uB,KAAAkB,WAAAhH,EAAAgH,aACtDzJ,KAAAywC,SAAAiC,QAAAvyC,GAAA,IAAAC,GAAA,KACAJ,KAAAywC,SAAAkC,cAAA3yC,KAAAyJ,YACAzJ,KAAAoI,aAAAyH,UAKAsgC,EAAA/wC,UAAA2yC,WAAA,SAAAjiC,GACA,GAAAA,EAGA,GA9iBA9G,QA8iBA8G,EA9iBAV,QA+iBApP,KAAA8P,eAEA,GAAAkgC,EAAAlgC,GACA9P,KAAA8P,UAAAgM,WAAA,UAAAhM,EAAAgM,WAAA,sBACA9b,KAAA8P,SACArF,QAAAC,KAAA,4HAGA,GA3jBA,SAAApB,GACA,OAAAN,QAAAM,EAAA6T,QA0jBA62B,CAAAlkC,GAAA,CACA,IAAAS,EAAA4B,SAAA8hC,eAAAnkC,GACAkgC,EAAAz/B,IACAvQ,KAAA+xC,WAAAxhC,KAIA4/B,EAhjBA,GAkjBAhzC,EAAAgzC,6CC9nBA,SAAAtoC,EAAA1J,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAEAb,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C8I,EAAAhK,EAAA,MACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,IACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,IACAgK,EAAAhK,EAAA,mCCfA,SAAAgK,EAAA1J,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAEAb,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAC9C8I,EAAAhK,EAAA,MACAgK,EAAAhK,EAAA,IACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,KACAgK,EAAAhK,EAAA,IACAgK,EAAAhK,EAAA,kCCNAY,OAAAC,eAAAvB,EAAA,cAA8C4B,OAAA,IAH9C,SAAAZ,GACA,QAAAmB,KAAAnB,EAAAhB,EAAAkC,eAAAC,KAAAnC,EAAAmC,GAAAnB,EAAAmB,IAGAuI,CAAAhK,EAAA","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"three\"), require(\"mobx\"), require(\"bowser\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"three\", \"mobx\", \"bowser\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"voidgl\"] = factory(require(\"three\"), require(\"mobx\"), require(\"bowser\"));\n\telse\n\t\troot[\"voidgl\"] = factory(root[\"three\"], root[\"mobx\"], root[\"bowser\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__3__, __WEBPACK_EXTERNAL_MODULE__99__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 108);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar InstanceBlockIndex;\n(function (InstanceBlockIndex) {\n    InstanceBlockIndex[InstanceBlockIndex[\"ONE\"] = 1] = \"ONE\";\n    InstanceBlockIndex[InstanceBlockIndex[\"TWO\"] = 2] = \"TWO\";\n    InstanceBlockIndex[InstanceBlockIndex[\"THREE\"] = 3] = \"THREE\";\n    InstanceBlockIndex[InstanceBlockIndex[\"FOUR\"] = 4] = \"FOUR\";\n})(InstanceBlockIndex = exports.InstanceBlockIndex || (exports.InstanceBlockIndex = {}));\nvar InstanceAttributeSize;\n(function (InstanceAttributeSize) {\n    InstanceAttributeSize[InstanceAttributeSize[\"ONE\"] = 1] = \"ONE\";\n    InstanceAttributeSize[InstanceAttributeSize[\"TWO\"] = 2] = \"TWO\";\n    InstanceAttributeSize[InstanceAttributeSize[\"THREE\"] = 3] = \"THREE\";\n    InstanceAttributeSize[InstanceAttributeSize[\"FOUR\"] = 4] = \"FOUR\";\n    /** Special case for making instance attributes that can target Atlas resources */\n    InstanceAttributeSize[InstanceAttributeSize[\"ATLAS\"] = 99] = \"ATLAS\";\n})(InstanceAttributeSize = exports.InstanceAttributeSize || (exports.InstanceAttributeSize = {}));\nvar UniformSize;\n(function (UniformSize) {\n    UniformSize[UniformSize[\"ONE\"] = 1] = \"ONE\";\n    UniformSize[UniformSize[\"TWO\"] = 2] = \"TWO\";\n    UniformSize[UniformSize[\"THREE\"] = 3] = \"THREE\";\n    UniformSize[UniformSize[\"FOUR\"] = 4] = \"FOUR\";\n    UniformSize[UniformSize[\"MATRIX3\"] = 9] = \"MATRIX3\";\n    UniformSize[UniformSize[\"MATRIX4\"] = 16] = \"MATRIX4\";\n    UniformSize[UniformSize[\"ATLAS\"] = 99] = \"ATLAS\";\n})(UniformSize = exports.UniformSize || (exports.UniformSize = {}));\nvar VertexAttributeSize;\n(function (VertexAttributeSize) {\n    VertexAttributeSize[VertexAttributeSize[\"ONE\"] = 1] = \"ONE\";\n    VertexAttributeSize[VertexAttributeSize[\"TWO\"] = 2] = \"TWO\";\n    VertexAttributeSize[VertexAttributeSize[\"THREE\"] = 3] = \"THREE\";\n    VertexAttributeSize[VertexAttributeSize[\"FOUR\"] = 4] = \"FOUR\";\n})(VertexAttributeSize = exports.VertexAttributeSize || (exports.VertexAttributeSize = {}));\n/** These are flags for indicating which shaders receive certain injection elements */\nvar ShaderInjectionTarget;\n(function (ShaderInjectionTarget) {\n    /** ONLY the vertex shader will receive the injection */\n    ShaderInjectionTarget[ShaderInjectionTarget[\"VERTEX\"] = 0] = \"VERTEX\";\n    /** ONLY the fragment shader will receive the injection */\n    ShaderInjectionTarget[ShaderInjectionTarget[\"FRAGMENT\"] = 1] = \"FRAGMENT\";\n    /** Both the fragment and vertex shader will receive the injection */\n    ShaderInjectionTarget[ShaderInjectionTarget[\"ALL\"] = 2] = \"ALL\";\n})(ShaderInjectionTarget = exports.ShaderInjectionTarget || (exports.ShaderInjectionTarget = {}));\n/**\n * This is the type of picking assigned to a layer. Each mode has performance and functionality\n * tradeoffs.\n */\nvar PickType;\n(function (PickType) {\n    /** Disable any picking methodology */\n    PickType[PickType[\"NONE\"] = 0] = \"NONE\";\n    /** Pick all instances found underneath the mouse. The Layer must explicitly support this feature. */\n    PickType[PickType[\"ALL\"] = 1] = \"ALL\";\n    /**\n     * NOTE: NOT IMPLEMENTED YET\n     *\n     * Uses highly efficient color rendering method to detect an instance on a pixel by pixel check. Since it is\n     * based on rendering, it will only select the 'visually' top most rendered instance. This means instances can be occluded\n     * by other instances is an instance renders behind another.\n     *\n     * This is vastly more efficient and accurate than ALL. This also will be more readily supported than ALL.\n     */\n    PickType[PickType[\"SINGLE\"] = 2] = \"SINGLE\";\n})(PickType = exports.PickType || (exports.PickType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Class to manage the x, y, width, and height of an object\n *\n * @template T This specifies the data type associated with this shape and is accessible\n *             via the property 'd'\n */\nvar Bounds = /** @class */ (function () {\n    /**\n     * Create a new instance\n     *\n     * @param left  The left side (x coordinate) of the instance\n     * @param right The right side of the instance\n     * @param top The top (y coordinate) of the instance\n     * @param bottom The bottom of the instance\n     */\n    function Bounds(options) {\n        this.x = 0;\n        this.y = 0;\n        this.width = 0;\n        this.height = 0;\n        this.x = options.x || options.left || 0;\n        this.y = options.y || options.top || 0;\n        this.height = options.height || (options.bottom - this.y) || 0;\n        this.width = options.width || (options.right - this.x) || 0;\n    }\n    Object.defineProperty(Bounds.prototype, \"area\", {\n        get: function () {\n            return this.width * this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"bottom\", {\n        get: function () {\n            return this.y + this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"left\", {\n        get: function () {\n            return this.x;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"mid\", {\n        get: function () {\n            return {\n                x: this.x + this.width / 2.0,\n                y: this.y + this.height / 2.0,\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"right\", {\n        get: function () {\n            return this.x + this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"top\", {\n        get: function () {\n            return this.y;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Bounds.emptyBounds = function () {\n        return new Bounds({\n            height: 0,\n            width: 0,\n            x: 0,\n            y: 0,\n        });\n    };\n    /**\n     * Checks to see if a point is within this bounds object.\n     *\n     * @param point\n     */\n    Bounds.prototype.containsPoint = function (point) {\n        return !(point.x < this.x || point.y < this.y || point.x > this.right || point.y > this.bottom);\n    };\n    /**\n     * Grows this bounds object to cover the space of the provided bounds object\n     *\n     * @param item\n     */\n    Bounds.prototype.encapsulate = function (item) {\n        if (item instanceof Bounds) {\n            if (item.x < this.x) {\n                this.width += Math.abs(item.x - this.x);\n                this.x = item.x;\n            }\n            if (item.y < this.y) {\n                this.height += Math.abs(item.y - this.y);\n                this.y = item.y;\n            }\n            if (this.right < item.right) {\n                this.width += item.right - this.right;\n            }\n            if (this.bottom < item.bottom) {\n                this.height += item.bottom - this.bottom;\n            }\n            return true;\n        }\n        else {\n            if (item.x < this.x) {\n                this.width += this.x - item.x;\n                this.x = item.x;\n            }\n            if (item.x > this.right) {\n                this.width += item.x - this.x;\n            }\n            if (item.y < this.y) {\n                this.height += this.y - item.y;\n                this.y = item.y;\n            }\n            if (item.y > this.bottom) {\n                this.height += item.y - this.y;\n            }\n            return true;\n        }\n    };\n    /**\n     * Checks to see if the provided bounds object could fit within the dimensions of this bounds object\n     * This ignores position and just checks width and height.\n     *\n     * @param bounds\n     *\n     * @return {number} 0 if it doesn't fit. 1 if it fits perfectly. 2 if it just fits.\n     */\n    Bounds.prototype.fits = function (bounds) {\n        // If the same, the bounds fits exactly into this bounds\n        if (this.width === bounds.width && this.height === bounds.height) {\n            return 1;\n        }\n        // The bounds can fit within this, then it just fits\n        if (this.width >= bounds.width && this.height >= bounds.height) {\n            return 2;\n        }\n        // Otherwise, the bounds does not fit within this bounds\n        return 0;\n    };\n    /**\n     * Checks if a bounds object intersects another bounds object.\n     *\n     * @param bounds\n     */\n    Bounds.prototype.hitBounds = function (bounds) {\n        return !(this.right < bounds.x || this.x > bounds.right || this.bottom < bounds.y || this.y > bounds.height);\n    };\n    /**\n     * Sees if the provided bounds is completely within this bounds object. Unlike fits() this takes\n     * position into account.\n     *\n     * @param bounds\n     */\n    Bounds.prototype.isInside = function (bounds) {\n        return this.x >= bounds.x && this.right <= bounds.right && this.y >= bounds.y && this.bottom <= bounds.bottom;\n    };\n    /**\n     * Easy readout of this Bounds object.\n     */\n    Bounds.prototype.toString = function () {\n        return \"{x: \" + this.x + \" y:\" + this.y + \" w:\" + this.width + \" h:\" + this.height + \"}\";\n    };\n    return Bounds;\n}());\nexports.Bounds = Bounds;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AnchorType;\n(function (AnchorType) {\n    AnchorType[AnchorType[\"BottomLeft\"] = 0] = \"BottomLeft\";\n    AnchorType[AnchorType[\"BottomMiddle\"] = 1] = \"BottomMiddle\";\n    AnchorType[AnchorType[\"BottomRight\"] = 2] = \"BottomRight\";\n    AnchorType[AnchorType[\"Custom\"] = 3] = \"Custom\";\n    AnchorType[AnchorType[\"Middle\"] = 4] = \"Middle\";\n    AnchorType[AnchorType[\"MiddleLeft\"] = 5] = \"MiddleLeft\";\n    AnchorType[AnchorType[\"MiddleRight\"] = 6] = \"MiddleRight\";\n    AnchorType[AnchorType[\"TopLeft\"] = 7] = \"TopLeft\";\n    AnchorType[AnchorType[\"TopMiddle\"] = 8] = \"TopMiddle\";\n    AnchorType[AnchorType[\"TopRight\"] = 9] = \"TopRight\";\n})(AnchorType = exports.AnchorType || (exports.AnchorType = {}));\nvar ScaleType;\n(function (ScaleType) {\n    /** The size of the image will be tied to world space */\n    ScaleType[ScaleType[\"ALWAYS\"] = 1] = \"ALWAYS\";\n    /** The image will scale to it's font size then stop growing */\n    ScaleType[ScaleType[\"BOUND_MAX\"] = 2] = \"BOUND_MAX\";\n    /** The image will alwyas retain it's font size on screen */\n    ScaleType[ScaleType[\"NEVER\"] = 3] = \"NEVER\";\n})(ScaleType = exports.ScaleType || (exports.ScaleType = {}));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar types_1 = require(\"../types\");\nvar util_1 = require(\"../util\");\nvar identify_by_key_1 = require(\"../util/identify-by-key\");\nvar instance_diff_manager_1 = require(\"./instance-diff-manager\");\nvar layer_interaction_handler_1 = require(\"./layer-interaction-handler\");\n/**\n * A base class for generating drawable content\n */\nvar Layer = /** @class */ (function (_super) {\n    __extends(Layer, _super);\n    function Layer(props) {\n        var _this = \n        // We do not establish bounds in the layer. The surface manager will take care of that for us\n        // After associating the layer with the view it is a part of.\n        _super.call(this, props) || this;\n        /** This determines the drawing order of the layer within it's scene */\n        _this.depth = 0;\n        /** A lookup fo an instance by it's ID */\n        _this.instanceById = new Map();\n        /** Provides the number of vertices a single instance spans */\n        _this.instanceVertexCount = 0;\n        // Keep our props within the layer\n        _this.props = Object.assign({}, Layer.defaultProps || {}, props);\n        // Set up the pick type for the layer\n        var _a = _this.props.picking, picking = _a === void 0 ? types_1.PickType.NONE : _a;\n        // If ALL is specified we set up QUAD tree picking for our instances\n        if (picking === types_1.PickType.ALL) {\n            var pickingMethods = _this.getInstancePickingMethods();\n            _this.picking = {\n                hitTest: pickingMethods.hitTest,\n                quadTree: new util_1.TrackedQuadTree(0, 1, 0, 1, pickingMethods.boundsAccessor),\n                type: types_1.PickType.ALL,\n            };\n        }\n        _this.diffManager = new instance_diff_manager_1.InstanceDiffManager(_this);\n        _this.diffProcessor = _this.diffManager.getDiffProcessor();\n        _this.interactions = new layer_interaction_handler_1.LayerInteractionHandler(_this);\n        return _this;\n    }\n    /**\n     * Invalidate and free all resources assocated with this layer.\n     */\n    Layer.prototype.destroy = function () {\n        this.uniformManager.destroy();\n    };\n    Layer.prototype.didUpdateProps = function () {\n        /** LIFECYCLE */\n    };\n    /**\n     * This is where global uniforms should update their values. Executes every frame.\n     */\n    Layer.prototype.draw = function () {\n        var uniform;\n        var value;\n        // Consume the diffs for the instances to update each element\n        var changeList = this.props.data.changeList;\n        // Make some holder variables to prevent declaration within the loop\n        var change, instance, uniforms;\n        // Fast ref to the processor and manager\n        var diffProcessor = this.diffProcessor;\n        var diffManager = this.diffManager;\n        for (var i = 0, end = changeList.length; i < end; ++i) {\n            change = changeList[i];\n            instance = change[0];\n            uniforms = this.uniformManager.getUniforms(instance);\n            // The diff type is change[1] which we use to find the diff processing method to use\n            diffProcessor[change[1]](diffManager, instance, uniforms);\n        }\n        // Indicate the diffs are consumed\n        this.props.data.resolve();\n        // Loop through the uniforms that are across all instances\n        for (var i = 0, end = this.uniforms.length; i < end; ++i) {\n            uniform = this.uniforms[i];\n            value = uniform.update(uniform);\n            uniform.materialUniforms.forEach(function (materialUniform) { return materialUniform.value = value; });\n        }\n    };\n    /**\n     * This method is for layers to implement to specify how the bounds for an instance are retrieved or\n     * calculated and how the Instance interacts with a point. This is REQUIRED to support PickType.ALL on the layer.\n     */\n    Layer.prototype.getInstancePickingMethods = function () {\n        throw new Error('When picking is set to PickType.ALL, the layer MUST have this method implemented; otherwise, the layer is incompatible with this picking mode.');\n    };\n    /**\n     * The type of Three model as well as the preferred draw mode associated with it.\n     */\n    Layer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TrianglesDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    /**\n     * The options for a three material without uniforms.\n     */\n    Layer.prototype.getMaterialOptions = function () {\n        return {};\n    };\n    /**\n     * This sets up all of the data bindings that will transport data from the CPU\n     * to the Shader on the GPU.\n     *\n     * Instance Attributes: These are very frequently changing attributes\n     * Vertex Attributes: These are attributes that should be static on a vertex. Conisder it very costly to update.\n     *                    The only time making these modifieable is in the event of GL_POINTS.\n     * Uniforms: These set up the uniforms for the layer, thus having all normal implications of a uniform. Global\n     *           across the fragment and vertex shaders and can be modified with little consequence.\n     */\n    Layer.prototype.initShader = function () {\n        return {\n            fs: require('../shaders/base/no-op.fs'),\n            instanceAttributes: [],\n            uniforms: [],\n            vertexAttributes: [],\n            vertexCount: 0,\n            vs: require('../shaders/base/no-op.vs'),\n        };\n    };\n    /**\n     * Helper method for making an instance attribute. Depending on set up, this makes creating elements\n     * have better documentation when typing out the elements.\n     */\n    Layer.prototype.makeInstanceAttribute = function (block, blockIndex, name, size, update, atlas) {\n        return {\n            atlas: atlas,\n            block: block,\n            blockIndex: blockIndex,\n            name: name,\n            size: size,\n            update: update,\n        };\n    };\n    /**\n     * Helper method for making a uniform type. Depending on set up, this makes creating elements\n     * have better documentation when typing out the elements.\n     */\n    Layer.prototype.makeUniform = function (name, size, update, shaderInjection, qualifier) {\n        return {\n            name: name,\n            qualifier: qualifier,\n            shaderInjection: shaderInjection,\n            size: size,\n            update: update,\n        };\n    };\n    Layer.prototype.willUpdateInstances = function (changes) {\n        // HOOK: Simple hook so a class can review all of it's changed instances before\n        //       Getting applied to the Shader IO\n    };\n    Layer.prototype.willUpdateProps = function (newProps) {\n        /** LIFECYCLE */\n    };\n    Layer.prototype.didUpdate = function () {\n        this.props.data.resolve();\n    };\n    Layer.defaultProps = {};\n    return Layer;\n}(identify_by_key_1.IdentifyByKey));\nexports.Layer = Layer;\n","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar Instance = /** @class */ (function () {\n    function Instance(options) {\n        this._id = options.id;\n        this.active = options.active;\n    }\n    /**\n     * The system will call this on the instance when it believes the instance may be\n     * harboring resources that are not released.\n     */\n    Instance.prototype.destroy = function () {\n        // Generally a No-op\n    };\n    Object.defineProperty(Instance.prototype, \"id\", {\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        mobx_1.observable\n    ], Instance.prototype, \"active\", void 0);\n    return Instance;\n}());\nexports.Instance = Instance;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./bounds\"));\n__export(require(\"./point\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./chart-camera\"));\n__export(require(\"./data-provider\"));\n__export(require(\"./instance\"));\n__export(require(\"./reference-camera\"));\n__export(require(\"./shader-templating\"));\n__export(require(\"./tracked-quad-tree\"));\n__export(require(\"./vector\"));\n__export(require(\"./view-camera\"));\n__export(require(\"./webgl-stat\"));\n__export(require(\"./mouse\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./atlas\"));\n__export(require(\"./atlas-manager\"));\n__export(require(\"./color-atlas-resource\"));\n__export(require(\"./color-rasterizer\"));\n__export(require(\"./image-atlas-resource\"));\n__export(require(\"./image-rasterizer\"));\n__export(require(\"./label-atlas-resource\"));\n__export(require(\"./label-rasterizer\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This is an object that specifically is generated with a 'key' option that can never\n * be modified on the object and is identified henceforth with the key applied as the\n * 'id' of the object.\n */\nvar IdentifyByKey = /** @class */ (function () {\n    function IdentifyByKey(options) {\n        this.key = options.key;\n    }\n    Object.defineProperty(IdentifyByKey.prototype, \"id\", {\n        /** READONLY id of the object. */\n        get: function () {\n            return this.key;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IdentifyByKey;\n}());\nexports.IdentifyByKey = IdentifyByKey;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EdgeScaleType;\n(function (EdgeScaleType) {\n    /** All dimensions are within world space */\n    EdgeScaleType[EdgeScaleType[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * The control points are a delta from the end points within screen space, and the line thickness is within\n     * screen space as well all measured in pixels. The scaleFactor scales both thickness and control delta values.\n     * The endpoints remain in world space\n     */\n    EdgeScaleType[EdgeScaleType[\"SCREEN_CURVE\"] = 1] = \"SCREEN_CURVE\";\n})(EdgeScaleType = exports.EdgeScaleType || (exports.EdgeScaleType = {}));\nvar EdgeType;\n(function (EdgeType) {\n    /** Makes a straight edge with no curve */\n    EdgeType[EdgeType[\"LINE\"] = 0] = \"LINE\";\n    /** Makes a single control point Bezier curve */\n    EdgeType[EdgeType[\"BEZIER\"] = 1] = \"BEZIER\";\n    /** Makes a two control point bezier curve */\n    EdgeType[EdgeType[\"BEZIER2\"] = 2] = \"BEZIER2\";\n})(EdgeType = exports.EdgeType || (exports.EdgeType = {}));\n/**\n * This is the broadphase control for edges to help handle quad tree adjustments for picking. If the edge scale type\n * is NONE, you don't need to utilize this. If you use screen space and have camera distortions along an axis, this\n * can help greatly.\n */\nvar EdgeBroadphase;\n(function (EdgeBroadphase) {\n    /** Use this if the broad phase detection should use both width and height of the edge's bounds */\n    EdgeBroadphase[EdgeBroadphase[\"ALL\"] = 0] = \"ALL\";\n    /** Use this to ensure a test against the edge is performed if the mouse aligns with it on the x-axis */\n    EdgeBroadphase[EdgeBroadphase[\"PASS_Y\"] = 1] = \"PASS_Y\";\n    /** Use this to ensure a test against the edge is performed if the mouse aligns with it on the y axis */\n    EdgeBroadphase[EdgeBroadphase[\"PASS_X\"] = 2] = \"PASS_X\";\n})(EdgeBroadphase = exports.EdgeBroadphase || (exports.EdgeBroadphase = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Classes can extend this and override the methods to respond to events.\n */\nvar EventManager = /** @class */ (function () {\n    function EventManager() {\n    }\n    /**\n     * This retrieves the projections for the view specified by the provided viewId.\n     */\n    EventManager.prototype.getProjection = function (viewId) {\n        return this.mouseManager.getView(viewId);\n    };\n    /**\n     * This retrieves the actual view for the view specified by the provided viewId.\n     */\n    EventManager.prototype.getView = function (viewId) {\n        return (this.mouseManager && this.mouseManager.getView(viewId)) || null;\n    };\n    /**\n     * This retrieves the screen bounds for the view specified by the provided viewId.\n     */\n    EventManager.prototype.getViewScreenBounds = function (viewId) {\n        var view = this.mouseManager.getView(viewId);\n        if (view) {\n            return view.screenBounds;\n        }\n        return null;\n    };\n    /**\n     * This is used internally which provides the parent MouseEventManager via the param mouseManager for this\n     * EventManager.\n     */\n    EventManager.prototype.setMouseManager = function (mouseManager) {\n        this.mouseManager = mouseManager;\n    };\n    return EventManager;\n}());\nexports.EventManager = EventManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isMesh(val) {\n    return Boolean(val.isMesh);\n}\nfunction generateLayerModel(layer, geometry, material) {\n    var modelInfo = layer.getModelType();\n    var model = new modelInfo.modelType(geometry, material);\n    if (isMesh(model)) {\n        model.drawMode = modelInfo.drawMode;\n    }\n    return model;\n}\nexports.generateLayerModel = generateLayerModel;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar absolute_position_1 = require(\"../primitives/absolute-position\");\nvar bounds_1 = require(\"../primitives/bounds\");\nvar identify_by_key_1 = require(\"../util/identify-by-key\");\nvar view_camera_1 = require(\"../util/view-camera\");\nvar ClearFlags;\n(function (ClearFlags) {\n    ClearFlags[ClearFlags[\"COLOR\"] = 1] = \"COLOR\";\n    ClearFlags[ClearFlags[\"DEPTH\"] = 2] = \"DEPTH\";\n    ClearFlags[ClearFlags[\"STENCIL\"] = 4] = \"STENCIL\";\n})(ClearFlags = exports.ClearFlags || (exports.ClearFlags = {}));\nfunction isOrthographic(val) {\n    return 'left' in val;\n}\n/**\n * This defines a view of a scene\n */\nvar View = /** @class */ (function (_super) {\n    __extends(View, _super);\n    function View(options) {\n        var _this = _super.call(this, options) || this;\n        /**\n         * This is the depth of the view. The higher the depth represents which layer is on top.\n         * Zero always represents the default view.\n         */\n        _this.depth = 0;\n        /** This is set to ensure the projections that happen properly translates the pixel ratio to normal Web coordinates */\n        _this.pixelRatio = window.devicePixelRatio;\n        Object.assign(_this, options);\n        return _this;\n    }\n    View.prototype.screenToPixelSpace = function (point, out) {\n        var p = out || { x: 0, y: 0 };\n        p.x = point.x * this.pixelRatio;\n        p.y = point.y * this.pixelRatio;\n        return p;\n    };\n    View.prototype.pixelSpaceToScreen = function (point, out) {\n        var p = out || { x: 0, y: 0 };\n        p.x = point.x / this.pixelRatio;\n        p.y = point.y / this.pixelRatio;\n        return p;\n    };\n    View.prototype.screenToView = function (point, out) {\n        var p = this.screenToPixelSpace(point, out);\n        p.x = p.x - this.viewBounds.x;\n        p.y = p.y - this.viewBounds.y;\n        return p;\n    };\n    View.prototype.viewToScreen = function (point, out) {\n        var p = { x: 0, y: 0 };\n        p.x = point.x + this.viewBounds.x;\n        p.y = point.y + this.viewBounds.y;\n        return this.pixelSpaceToScreen(p, out);\n    };\n    View.prototype.screenToWorld = function (point, out) {\n        var view = this.pixelSpaceToScreen(this.screenToView(point));\n        var world = out || { x: 0, y: 0 };\n        world.x = (view.x - (this.camera.offset[0] * this.camera.scale[0])) / this.camera.scale[0];\n        world.y = (view.y - (this.camera.offset[1] * this.camera.scale[1])) / this.camera.scale[1];\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        return world;\n    };\n    View.prototype.worldToScreen = function (point, out) {\n        var screen = { x: 0, y: 0 };\n        // Calculate from the camera to view space\n        screen.x = ((point.x * this.camera.scale[0]) + (this.camera.offset[0] * this.camera.scale[0])) * this.pixelRatio;\n        screen.y = ((point.y * this.camera.scale[1]) + (this.camera.offset[1] * this.camera.scale[1])) * this.pixelRatio;\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        // Convert from view to screen space\n        return this.viewToScreen(screen, out);\n    };\n    View.prototype.viewToWorld = function (point, out) {\n        var world = out || { x: 0, y: 0 };\n        var screen = this.pixelSpaceToScreen(point);\n        world.x = (screen.x - (this.camera.offset[0] * this.camera.scale[0])) / this.camera.scale[0];\n        world.y = (screen.y - (this.camera.offset[1] * this.camera.scale[1])) / this.camera.scale[1];\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        return world;\n    };\n    View.prototype.worldToView = function (point, out) {\n        var screen = out || { x: 0, y: 0 };\n        // Calculate from the camera to view space\n        screen.x = (point.x * this.camera.scale[0]) + (this.camera.offset[0] * this.camera.scale[0]);\n        screen.y = (point.y * this.camera.scale[1]) + (this.camera.offset[1] * this.camera.scale[1]);\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        return screen;\n    };\n    /**\n     * This operation makes sure we have the view camera adjusted to the new viewport's needs.\n     * For default behavior this ensures that the coordinate system has no distortion, orthographic,\n     * top left as 0,0 with +y axis pointing down.\n     */\n    View.prototype.fitViewtoViewport = function (surfaceDimensions) {\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CONTROLLED && isOrthographic(this.viewCamera.baseCamera)) {\n            var viewBounds = absolute_position_1.getAbsolutePositionBounds(this.viewport, surfaceDimensions, this.pixelRatio);\n            var width = viewBounds.width;\n            var height = viewBounds.height;\n            var viewport = {\n                bottom: -height / 2,\n                far: 10000000,\n                left: -width / 2,\n                near: -100,\n                right: width / 2,\n                top: height / 2,\n            };\n            var scaleX = 1;\n            var scaleY = 1;\n            var camera = this.viewCamera.baseCamera;\n            Object.assign(camera, viewport);\n            camera.position.set(-viewBounds.width / 2.0 * scaleX, viewBounds.height / 2.0 * scaleY, camera.position.z);\n            camera.scale.set(scaleX, -scaleY, 1.0);\n            camera.updateMatrix();\n            camera.updateMatrixWorld(true);\n            camera.updateProjectionMatrix();\n            this.viewBounds = viewBounds;\n            this.viewBounds.data = this;\n            this.screenBounds = new bounds_1.Bounds({\n                height: this.viewBounds.height / this.pixelRatio,\n                width: this.viewBounds.width / this.pixelRatio,\n                x: this.viewBounds.x / this.pixelRatio,\n                y: this.viewBounds.y / this.pixelRatio,\n            });\n        }\n        else if (!isOrthographic(this.viewCamera.baseCamera)) {\n            console.warn('Fit to viewport does not support non-orthographic cameras as a default behavior.');\n        }\n    };\n    View.DEFAULT_VIEW_ID = '__default__';\n    return View;\n}(identify_by_key_1.IdentifyByKey));\nexports.View = View;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar identify_by_key_1 = require(\"../util/identify-by-key\");\nfunction sortByDepth(a, b) {\n    return a.depth - b.depth;\n}\n/**\n * This defines a scene to which layers are added to. It also tracks the views that this scene\n * is rendered with.\n */\nvar Scene = /** @class */ (function (_super) {\n    __extends(Scene, _super);\n    function Scene(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the three scene which actually sets up the rendering objects */\n        _this.container = new Three.Scene();\n        /** This is all of the layers tracked to the scene */\n        _this.layers = [];\n        /** This indicates the sort is dirty for a set of layers */\n        _this.sortIsDirty = false;\n        /** This is the view */\n        _this.viewById = new Map();\n        _this.container.frustumCulled = false;\n        _this.container.autoUpdate = false;\n        return _this;\n    }\n    /**\n     * Adds a layer to the scene with the current view setting the layer contains.\n     * The layer can not jump between views or scenes. You must destroy and reconstruct\n     * the layer.\n     */\n    Scene.prototype.addLayer = function (layer) {\n        // Add the layer to the list of layers under the view\n        this.layers.push(layer);\n        this.sortIsDirty = true;\n    };\n    /**\n     * This adds a view to this scene to be used by the scene\n     */\n    Scene.prototype.addView = function (view) {\n        this.viewById.set(view.id, view);\n    };\n    /**\n     * Release any resources this may be hanging onto\n     */\n    Scene.prototype.destroy = function () {\n        this.container = null;\n    };\n    /**\n     * Removes a layer from the scene. No resort is needed as remove operations\n     * do not adjust the sorting order.\n     */\n    Scene.prototype.removeLayer = function (layer) {\n        if (this.layers) {\n            var index = this.layers.indexOf(layer);\n            if (index >= 0) {\n                this.layers.splice(index, 1);\n                return;\n            }\n        }\n        console.warn('Could not remove a layer from the scene as the layer was not a part of the scene to start. Scene:', this.id, 'Layer:', layer.id);\n    };\n    Scene.prototype.sortLayers = function () {\n        if (this.sortIsDirty) {\n            this.layers.sort(sortByDepth);\n        }\n    };\n    Scene.DEFAULT_SCENE_ID = '__default__';\n    return Scene;\n}(identify_by_key_1.IdentifyByKey));\nexports.Scene = Scene;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_atlas_resource_1 = require(\"./base-atlas-resource\");\nvar LabelAtlasResource = /** @class */ (function (_super) {\n    __extends(LabelAtlasResource, _super);\n    function LabelAtlasResource(label) {\n        var _this = _super.call(this) || this;\n        _this.label = label;\n        return _this;\n    }\n    return LabelAtlasResource;\n}(base_atlas_resource_1.BaseAtlasResource));\nexports.LabelAtlasResource = LabelAtlasResource;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BaseAtlasResource = /** @class */ (function () {\n    function BaseAtlasResource() {\n        /**\n         * This sets the ratserization to be a larger value on the texture than is rendered within\n         * the world space. This allows for techniques to be applied in the shaders to incorporate super sampling\n         * or other processes which require higher levels of resolution.\n         *\n         * The default is 1 for a 1 to 1 sample scaling to world space rendering\n         */\n        this.sampleScale = 1;\n    }\n    return BaseAtlasResource;\n}());\nexports.BaseAtlasResource = BaseAtlasResource;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ViewCameraType;\n(function (ViewCameraType) {\n    /**\n     * Indicates a camera that is forced by the system to follow:\n     * - Match width and height of the view port\n     * - +y axis points downward\n     * - gl origin is at the top left of the screen\n     */\n    ViewCameraType[ViewCameraType[\"CONTROLLED\"] = 0] = \"CONTROLLED\";\n    /**\n     * This allows a custom view camera to be applied to the scene.\n     */\n    ViewCameraType[ViewCameraType[\"CUSTOM\"] = 1] = \"CUSTOM\";\n})(ViewCameraType = exports.ViewCameraType || (exports.ViewCameraType = {}));\n/**\n * This is a camera that controls the view projection matrix. This is a much more\n * complicated way to handle views that is better suited for handling 3D applications\n * and is very overkill for most 2D charting systems. If you are working purely with\n * 2D components, it's recommended to leave this as a CONTROLLED camera and utilize\n * the ChartCamera for most of your needs.\n */\nvar ViewCamera = /** @class */ (function () {\n    function ViewCamera() {\n        this.type = ViewCameraType.CONTROLLED;\n    }\n    return ViewCamera;\n}());\nexports.ViewCamera = ViewCamera;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction shaderTemplate(shader, options, required) {\n    var matched = new Map();\n    var noValueProvided = new Map();\n    var notFound = new Map();\n    var shaderOptions = new Map();\n    var shaderResults = shader.replace(/\\$\\{(\\w+)\\}/g, function (x, match) {\n        shaderOptions.set(match, (shaderOptions.get(match) || 0) + 1);\n        if (match in options) {\n            matched.set(match, (matched.get(match) || 0) + 1);\n            return options[match];\n        }\n        noValueProvided.set(match, (noValueProvided.get(match) || 0) + 1);\n        return '';\n    });\n    Object.keys(options).forEach(function (option) {\n        if (!matched.get(option)) {\n            notFound.set(option, (notFound.get(option) || 0) + 1);\n        }\n    });\n    // Provide metrics\n    var results = {\n        resolvedShaderOptions: matched,\n        shader: shaderResults,\n        shaderProvidedOptions: shaderOptions,\n        unresolvedProvidedOptions: notFound,\n        unresolvedShaderOptions: noValueProvided,\n    };\n    if (required) {\n        // This will ensure that BOTH the parameter input AND the shader provided the required options.\n        required.values.forEach(function (require) {\n            if (results.unresolvedProvidedOptions.get(require)) {\n                console.error(required.name + \": Could not resolve all the required inputs. Input:\", require);\n            }\n            else if (results.unresolvedShaderOptions.get(require)) {\n                console.error(required.name + \": A required option was not provided in the options parameter. Option:\", require);\n            }\n            else if (!results.resolvedShaderOptions.get(require)) {\n                console.error(required.name + \": A required option was not provided in the options parameter. Option:\", require);\n            }\n        });\n    }\n    return results;\n}\nexports.shaderTemplate = shaderTemplate;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chartCameraUID = 0;\n/**\n * Quick method for applying a source array to a target array. This\n * ensures the arrays both are valid and applies the values without just making\n * a copy of the source.\n */\nfunction applyArray(target, source) {\n    target && source && target.splice.apply(target, [0, source.length].concat(source));\n}\nvar ChartCamera = /** @class */ (function () {\n    function ChartCamera(options) {\n        /** Internally set id */\n        this._id = chartCameraUID++;\n        /** Represents how much an element should be offset in world space */\n        this.offset = [0, 0, 0];\n        /** Represents how scaled each axis should be in world space */\n        this.scale = [1, 1, 1];\n        if (options) {\n            applyArray(this.offset, options.offset);\n            applyArray(this.scale, options.scale);\n        }\n    }\n    Object.defineProperty(ChartCamera.prototype, \"id\", {\n        /** Keep id as readonly */\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the location of the camera by adjusting the offsets to match.\n     */\n    ChartCamera.prototype.position = function (location) {\n        this.offset = location.slice(0);\n    };\n    return ChartCamera;\n}());\nexports.ChartCamera = ChartCamera;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mouse_1 = require(\"../util/mouse\");\nvar quad_tree_1 = require(\"../util/quad-tree\");\n// If a mouse up after a mouse down happens before this many milliseconds, a click gesture will happen\nvar VALID_CLICK_DELAY = 1E3;\nfunction sortByDepth(a, b) {\n    return b.data.depth - a.data.depth;\n}\n/**\n * This manages mouse events on the provided canvas and provides some higher level\n * interactions with the surface.\n */\nvar MouseEventManager = /** @class */ (function () {\n    function MouseEventManager(canvas, views, controllers, handlesWheelEvents) {\n        var _this = this;\n        /**\n         * This flag is set when the system is waiting to render the elements to establish bounds.\n         * No Mouse interations will happen while this is set to true.\n         */\n        this._waitingForRender = true;\n        /**\n         * Retrieves the views underneath the mouse with the top most view as\n         * the first view in the list.\n         */\n        this.getViewsUnderMouse = function (mouse) {\n            // Find the views the mouse has interacted with\n            var hitViews = _this.quadTree.query(mouse);\n            // Sort them by depth\n            hitViews.sort(sortByDepth);\n            return hitViews;\n        };\n        /**\n         * When the renderer is resized, we must reform our quad tree\n         */\n        this.resize = function () {\n            _this._waitingForRender = true;\n        };\n        this.context = canvas;\n        this.setViews(views);\n        this.setControllers(controllers);\n        this.addContextListeners(handlesWheelEvents);\n    }\n    Object.defineProperty(MouseEventManager.prototype, \"waitingForRender\", {\n        get: function () {\n            return this._waitingForRender;\n        },\n        set: function (val) {\n            this._waitingForRender = val;\n            // When we're no longer waiting for render to occur we update all of our views in the quad tree\n            if (!val) {\n                this.quadTree = new quad_tree_1.QuadTree(0, 0, 0, 0);\n                this.quadTree.addAll(this.views.map(function (v) { return v.bounds; }).filter(Boolean));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This sets up the DOM events to listen to the events that are broadcasted by the canvas.\n     * These events are set up in such a way as to continue some events when the user\n     * drags the mouse off of the browser or off the canvas without releasing.\n     */\n    MouseEventManager.prototype.addContextListeners = function (handlesWheelEvents) {\n        var _this = this;\n        var element = this.context;\n        var startView = null;\n        var startPosition = null;\n        if (handlesWheelEvents) {\n            element.onmousewheel = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                var wheel = _this.makeWheel(event);\n                _this.controllers.forEach(function (controller) {\n                    controller.handleWheel(interaction, wheel);\n                });\n                event.stopPropagation();\n                event.preventDefault();\n            };\n        }\n        element.onmouseleave = function (event) {\n            // No interactions while waiting for the render to update\n            if (_this.waitingForRender)\n                return;\n            var mouse = mouse_1.eventElementPosition(event, element);\n            var interaction = _this.makeInteraction(mouse, startPosition, startView);\n            _this.controllers.forEach(function (controller) {\n                controller.handleMouseOut(interaction);\n            });\n        };\n        element.onmousemove = function (event) {\n            // No interactions while waiting for the render to update\n            if (_this.waitingForRender)\n                return;\n            var mouse = mouse_1.eventElementPosition(event, element);\n            var interaction = _this.makeInteraction(mouse, startPosition, startView);\n            _this.controllers.forEach(function (controller) {\n                controller.handleMouseMove(interaction);\n            });\n        };\n        element.onmousedown = function (event) {\n            // No interactions while waiting for the render to update\n            if (_this.waitingForRender)\n                return;\n            startPosition = mouse_1.eventElementPosition(event, element);\n            var downViews = _this.getViewsUnderMouse(startPosition);\n            // While this is true, when mouse up happens, the click gesture will execute\n            var canClick = true;\n            var clickStartTime = Date.now();\n            // If no views under this view, then we just quick exit with no interactions\n            if (downViews.length <= 0) {\n                return;\n            }\n            startView = downViews[0].data;\n            var interaction = _this.makeInteraction(startPosition, startPosition, startView);\n            var currentPosition = startPosition;\n            _this.controllers.forEach(function (controller) {\n                controller.handleMouseDown(interaction, event.button);\n            });\n            event.stopPropagation();\n            document.onmousemove = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                var delta = {\n                    x: mouse.x - currentPosition.x,\n                    y: mouse.y - currentPosition.y,\n                };\n                var drag = _this.makeDrag(mouse, startPosition, currentPosition, delta);\n                currentPosition = mouse;\n                _this.controllers.forEach(function (controller) {\n                    controller.handleDrag(interaction, drag);\n                });\n                // If we move after a mouse down, it's no longer a click\n                canClick = false;\n            };\n            document.onmouseup = function (event) {\n                document.onmousemove = null;\n                document.onmouseup = null;\n                document.onmouseover = null;\n            };\n            document.onmouseover = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                _this.controllers.forEach(function (controller) {\n                    controller.handleMouseOver(interaction);\n                });\n                event.stopPropagation();\n            };\n            element.onmouseup = function (event) {\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                _this.controllers.forEach(function (controller) {\n                    controller.handleMouseUp(interaction, event.button);\n                });\n                // If we release the mouse before the valid click delay\n                if (canClick && Date.now() - clickStartTime < VALID_CLICK_DELAY) {\n                    _this.controllers.forEach(function (controller) {\n                        controller.handleClick(interaction, event.button);\n                    });\n                }\n            };\n            // Text will not be selected when it is being dragged\n            element.onselectstart = function () {\n                return false;\n            };\n        };\n        // Enable touch support\n        this.addTouchContextListeners();\n    };\n    MouseEventManager.prototype.addTouchContextListeners = function () {\n        var element = this.context;\n        element.ontouchstart = function (event) {\n            // TODO: This is the start work for the touch events. And this retains sentimental value.\n            // For (let i = 0, end = event.changedTouches.length; i < end; ++i) {\n            // TODO\n            // Const touch = event.changedTouches.item(i);\n            // CurrentTouches.set(touch.identifier, to);\n            // }\n        };\n        element.ontouchend = function (event) {\n            // TODO\n        };\n        element.ontouchmove = function (event) {\n            // TODO\n        };\n        element.ontouchcancel = function (event) {\n            // TODO\n        };\n    };\n    /**\n     * Retrieves the view for the provided id\n     */\n    MouseEventManager.prototype.getView = function (viewId) {\n        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n            var view = _a[_i];\n            if (view.view.id === viewId) {\n                return view.view;\n            }\n        }\n        return null;\n    };\n    /**\n     * This generates the metrics for a drag gesture.\n     */\n    MouseEventManager.prototype.makeDrag = function (mouse, start, previous, delta) {\n        return {\n            screen: {\n                current: mouse,\n                delta: delta,\n                previous: previous,\n                start: start,\n            },\n        };\n    };\n    /**\n     * This makes the metrics for interactions with the views.\n     */\n    MouseEventManager.prototype.makeInteraction = function (mouse, start, startView) {\n        // Find the views the mouse has interacted with\n        var hitViews = this.getViewsUnderMouse(mouse);\n        return {\n            screen: {\n                mouse: mouse,\n            },\n            start: start && startView && {\n                mouse: startView.view.screenToView(mouse),\n                view: startView.view,\n            },\n            target: {\n                mouse: hitViews[0] && hitViews[0].data.view.screenToView(mouse),\n                view: hitViews[0] && hitViews[0].data.view,\n            },\n            viewsUnderMouse: hitViews.map(function (v) { return ({\n                mouse: v.data.view.screenToView(mouse),\n                view: v.data.view,\n            }); }),\n        };\n    };\n    MouseEventManager.prototype.makeWheel = function (event) {\n        var wheel = mouse_1.normalizeWheel(event);\n        return {\n            wheel: [wheel.x, wheel.y],\n        };\n    };\n    /**\n     * Sets the controllers to receive events from this manager.\n     */\n    MouseEventManager.prototype.setControllers = function (controllers) {\n        this.controllers = controllers;\n        for (var _i = 0, _a = this.controllers; _i < _a.length; _i++) {\n            var controller = _a[_i];\n            controller.setMouseManager(this);\n        }\n    };\n    /**\n     * Sets the views that gets queried for interactions.\n     */\n    MouseEventManager.prototype.setViews = function (views) {\n        this.views = views;\n    };\n    MouseEventManager.prototype.destroy = function () {\n        this.quadTree = null;\n        this.context.onmousedown = null;\n        this.context.onmousemove = null;\n        this.context.onmouseleave = null;\n        this.context.onmousewheel = null;\n    };\n    return MouseEventManager;\n}());\nexports.MouseEventManager = MouseEventManager;\n","\"use strict\";\n/**\n * This file is dedicted to the all important step of processing desired inputs from the layer\n * and coming up with automated generated uniforms and attributes that the shader's will need\n * in order to operate with the conveniences the library offers. This includes things such as\n * injecting camera projection uniforms, resource uniforms, animation adjustments etc etc.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\nfunction toVertexAttributeInternal(attribute) {\n    return Object.assign({}, attribute, { materialAttribute: null });\n}\nfunction toUniformInternal(uniform) {\n    return Object.assign({}, uniform, { materialUniforms: [] });\n}\n/**\n * This searches through attribute packing for the first empty slot it can find to fill.\n * If a slot is not available it will just start a new block.\n */\nfunction findEmptyBlock(attributes) {\n    var blocks = new Map();\n    var found = null;\n    var maxBlock = 0;\n    attributes.forEach(function (instanceAttribute) {\n        var block = instanceAttribute.block;\n        var index = instanceAttribute.blockIndex;\n        var size = instanceAttribute.size;\n        var usedBlocks = blocks.get(block);\n        maxBlock = Math.max(block, maxBlock);\n        if (!usedBlocks) {\n            usedBlocks = new Map();\n            blocks.set(block, usedBlocks);\n        }\n        for (var i = index, end = index + size; i < end; ++i) {\n            usedBlocks.set(i, true);\n        }\n    });\n    blocks.forEach(function (usedBlocks, block) {\n        if (!usedBlocks.get(1))\n            found = [block, types_1.InstanceBlockIndex.ONE];\n        if (!usedBlocks.get(2))\n            found = [block, types_1.InstanceBlockIndex.TWO];\n        if (!usedBlocks.get(3))\n            found = [block, types_1.InstanceBlockIndex.THREE];\n        if (!usedBlocks.get(4))\n            found = [block, types_1.InstanceBlockIndex.FOUR];\n    });\n    // If no block was ever found, then we take the max block detected and make\n    // A new block after it\n    if (!found) {\n        found = [maxBlock + 1, 0];\n    }\n    return found;\n}\nfunction sortByResourceAttributes(a, b) {\n    if (a.atlas && !b.atlas)\n        return -1;\n    return 1;\n}\nfunction injectShaderIO(layer, shaderIO) {\n    // Retrieve all of the instance attributes that are atlas references\n    var atlasInstanceAttributes = [];\n    // Key: The atlas uniform name requested\n    var requestedAtlasInjections = new Map();\n    // Get the atlas requests that have unique names. We only need one uniform\n    // For a single unique provided name. We also must merge the requests for\n    // Vertex and fragment injections\n    shaderIO.instanceAttributes.forEach(function (attribute) {\n        if (attribute.atlas) {\n            // Auto set the size of the attribute. Attribute's that are a resource automatically\n            // Consume a size of four\n            attribute.size = types_1.InstanceAttributeSize.FOUR;\n            attribute.blockIndex = types_1.InstanceBlockIndex.ONE;\n            // Get the atlas resource uniform (sampler2D) injection targets. We default to only the\n            // Fragment shader as it's the most commonly used location for sampler2Ds\n            var injection = attribute.atlas.shaderInjection || types_1.ShaderInjectionTarget.FRAGMENT;\n            // See if we already have an injection for the given injected uniform name for an atlas resource.\n            var injections = requestedAtlasInjections.get(attribute.atlas.name);\n            if (injections) {\n                requestedAtlasInjections.set(attribute.atlas.name, [\n                    injections[0] ||\n                        injection === types_1.ShaderInjectionTarget.VERTEX ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                    injections[1] ||\n                        injection === types_1.ShaderInjectionTarget.FRAGMENT ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                ]);\n            }\n            else {\n                atlasInstanceAttributes.push(attribute);\n                requestedAtlasInjections.set(attribute.atlas.name, [\n                    injection === types_1.ShaderInjectionTarget.VERTEX ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                    injection === types_1.ShaderInjectionTarget.FRAGMENT ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                ]);\n            }\n        }\n    });\n    // Make uniforms for all of the unique atlas requests.\n    var atlasUniforms = atlasInstanceAttributes.map(function (instanceAttribute) {\n        var injections = requestedAtlasInjections.get(instanceAttribute.atlas.name);\n        var injection = (injections[0] && injections[1] && types_1.ShaderInjectionTarget.ALL) ||\n            (injections[0] && !injections[1] && types_1.ShaderInjectionTarget.VERTEX) ||\n            (!injections[0] && injections[1] && types_1.ShaderInjectionTarget.FRAGMENT);\n        return {\n            name: instanceAttribute.atlas.name,\n            shaderInjection: injection,\n            size: types_1.UniformSize.ATLAS,\n            update: function () { return layer.resource.getAtlasTexture(instanceAttribute.atlas.key); },\n        };\n    });\n    // These are the uniforms that should be present in the shader for basic operation\n    var addedUniforms = atlasUniforms.concat([\n        // This injects the projection matrix from the view camera\n        {\n            name: 'projection',\n            size: types_1.UniformSize.MATRIX4,\n            update: function () { return layer.view.viewCamera.baseCamera.projectionMatrix.elements; },\n        },\n        // This injects the model view matrix from the view camera\n        {\n            name: 'modelView',\n            size: types_1.UniformSize.MATRIX4,\n            update: function () { return layer.view.viewCamera.baseCamera.matrix.elements; },\n        },\n        // This injects the camera offset uniforms that need to be present for projecting in a more\n        // Chart centric style\n        {\n            name: 'cameraOffset',\n            size: types_1.UniformSize.THREE,\n            update: function () { return layer.view.camera.offset; },\n        },\n        // This injects the camera scaling uniforms that need to be present for projecting in a more\n        // Chart centric style\n        {\n            name: 'cameraScale',\n            size: types_1.UniformSize.THREE,\n            update: function () { return layer.view.camera.scale; },\n        },\n        // This injects the camera scaling uniforms that need to be present for projecting in a more\n        // Chart centric style\n        {\n            name: 'viewSize',\n            size: types_1.UniformSize.TWO,\n            update: function () { return [layer.view.viewBounds.width, layer.view.viewBounds.height]; },\n        },\n        // This injects the current layer's pixel ratio so pixel ratio dependent items can react to it\n        // Things like gl_PointSize will need this metric if not working in clip space\n        {\n            name: 'pixelRatio',\n            size: types_1.UniformSize.ONE,\n            update: function () { return [layer.view.pixelRatio]; },\n        },\n    ]);\n    // Seek an empty block within the layer provided uniforms so we can fill a hole potentially\n    // With the _active attribute.\n    var fillBlock = findEmptyBlock(shaderIO.instanceAttributes);\n    var addedInstanceAttributes = [\n        // This is injected so the system can control when an instance should not be rendered.\n        // This allows for holes to be in the buffer without having to correct them immediately\n        {\n            block: fillBlock[0],\n            blockIndex: fillBlock[1],\n            name: '_active',\n            size: types_1.InstanceAttributeSize.ONE,\n            update: function (o) { return [o.active ? 1 : 0]; },\n        },\n    ];\n    // Set the active attribute to the layer for quick reference\n    layer.activeAttribute = addedInstanceAttributes[0];\n    var addedVertexAttributes = [\n        // We add an inherent instance attribute to our vertices so they can determine the instancing\n        // Data to retrieve.\n        {\n            name: 'instance',\n            size: types_1.VertexAttributeSize.ONE,\n            // We no op this as our geomtry generating routine will establish the values needed here\n            update: function () { return [0]; },\n        },\n    ];\n    // Aggregate all of the injected shaderIO with the layer's shaderIO\n    var vertexAttributes = addedVertexAttributes\n        .concat(shaderIO.vertexAttributes)\n        .map(toVertexAttributeInternal);\n    var uniforms = addedUniforms\n        .concat(shaderIO.uniforms)\n        .map(toUniformInternal);\n    var instanceAttributes = addedInstanceAttributes\n        .concat(shaderIO.instanceAttributes)\n        .sort(sortByResourceAttributes);\n    return {\n        instanceAttributes: instanceAttributes,\n        uniforms: uniforms,\n        vertexAttributes: vertexAttributes,\n    };\n}\nexports.injectShaderIO = injectShaderIO;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar types_1 = require(\"../types\");\nvar UNIFORM_SIZE_TO_MATERIAL_TYPE = (_a = {},\n    _a[types_1.UniformSize.ONE] = 'f',\n    _a[types_1.UniformSize.TWO] = 'v2',\n    _a[types_1.UniformSize.THREE] = 'v3',\n    _a[types_1.UniformSize.FOUR] = 'v4',\n    _a[types_1.UniformSize.MATRIX3] = 'Matrix3fv',\n    _a[types_1.UniformSize.MATRIX4] = 'Matrix4fv',\n    _a);\nvar DEFAULT_UNIFORM_VALUE = (_b = {},\n    _b[types_1.UniformSize.ONE] = [0],\n    _b[types_1.UniformSize.TWO] = [0, 0],\n    _b[types_1.UniformSize.THREE] = [0, 0, 0],\n    _b[types_1.UniformSize.FOUR] = [0, 0, 0, 0],\n    _b[types_1.UniformSize.MATRIX3] = [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    _b[types_1.UniformSize.MATRIX4] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    _b);\nfunction toMaterialUniform(uniform) {\n    return {\n        type: UNIFORM_SIZE_TO_MATERIAL_TYPE[uniform.size],\n        value: DEFAULT_UNIFORM_VALUE[uniform.size],\n    };\n}\nfunction generateLayerMaterial(layer, vs, fs, layerUniforms, instancingUniforms) {\n    // We now need to establish the material for the layer\n    var materialParams = layer.getMaterialOptions();\n    materialParams.vertexShader = vs;\n    materialParams.fragmentShader = fs;\n    // We must convert all of the uniforms to actual Three material initialization uniforms\n    materialParams.uniforms = {};\n    // Convert our non-instancing uniforms to our material uniforms\n    for (var i = 0, end = layerUniforms.length; i < end; ++i) {\n        var uniform = layerUniforms[i];\n        var materialUniform = toMaterialUniform(uniform);\n        materialParams.uniforms[uniform.name] = materialUniform;\n    }\n    // Add in the generated instancing uniforms\n    for (var i = 0, end = instancingUniforms.length; i < end; ++i) {\n        var generatedUniform = instancingUniforms[i];\n        materialParams.uniforms[generatedUniform.name] = {\n            type: generatedUniform.type,\n            value: generatedUniform.value,\n        };\n    }\n    return new Three.RawShaderMaterial(materialParams);\n}\nexports.generateLayerMaterial = generateLayerMaterial;\nvar _a, _b;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nfunction isNumberCluster(val) {\n    return !Array.isArray(val[0]);\n}\nfunction generateLayerGeometry(maxInstancesPerBuffer, vertexAttributes, vertexCount) {\n    // Make the new buffers to be updated\n    var vertexBuffers = [];\n    for (var i = 0, end = vertexAttributes.length; i < end; ++i) {\n        var attribute_1 = vertexAttributes[i];\n        vertexBuffers.push(new Float32Array((attribute_1.size) * vertexCount * maxInstancesPerBuffer));\n    }\n    // Let's now fill in the baseline geometry with the instances we will be generating\n    // First we ask the layer for a single instance's buffer setup\n    var endk = vertexAttributes.length;\n    var buffer;\n    var attribute;\n    var value;\n    var formatError;\n    for (var i = 0, end = vertexCount; i < end; ++i) {\n        for (var k = 0; k < endk; ++k) {\n            attribute = vertexAttributes[k];\n            buffer = vertexBuffers[k];\n            value = attribute.update(i);\n            if (isNumberCluster(value)) {\n                for (var j = i * attribute.size, endj = j + attribute.size, index = 0; j < endj; ++j, ++index) {\n                    buffer[j] = value[index];\n                }\n            }\n            else {\n                formatError = true;\n            }\n        }\n    }\n    if (formatError) {\n        console.warn('A vertex buffer updating method should not use arrays of arrays of numbers.');\n    }\n    // After getting the geometry for a single instance, we can now copy paste\n    // For subsequent instances using very fast FLoat32 methods\n    for (var i = 0, end = vertexAttributes.length; i < end; ++i) {\n        var attribute_2 = vertexAttributes[i];\n        var instanceSize = (attribute_2.size) * vertexCount;\n        // Copy the first buffer set into the rest of the buffer\n        for (var k = 1, endk_1 = maxInstancesPerBuffer; k < endk_1; ++k) {\n            vertexBuffers[i].copyWithin(instanceSize * k, 0, instanceSize);\n        }\n    }\n    // Lastly, we make the instance attribute reflect correctly so each instance\n    // Can have varied information\n    var instancingBuffer = vertexBuffers[0];\n    for (var i = 0, end = maxInstancesPerBuffer; i < end; ++i) {\n        var instanceStartIndex = i * vertexCount;\n        for (var k = 0; k < vertexCount; ++k) {\n            instancingBuffer[k + instanceStartIndex] = i;\n        }\n    }\n    // Now we can generate the attributes and apply them to a geometry object\n    var geometry = new Three.BufferGeometry();\n    for (var i = 0, end = vertexAttributes.length; i < end; ++i) {\n        var attribute_3 = vertexAttributes[i];\n        var materialAttribute = new Three.BufferAttribute(vertexBuffers[i], attribute_3.size);\n        attribute_3.materialAttribute = materialAttribute;\n        geometry.addAttribute(attribute_3.name, materialAttribute);\n    }\n    return geometry;\n}\nexports.generateLayerGeometry = generateLayerGeometry;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\nvar DataBounds = /** @class */ (function (_super) {\n    __extends(DataBounds, _super);\n    function DataBounds() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DataBounds.emptyBounds = function () {\n        return new DataBounds({\n            height: 0,\n            width: 0,\n            x: 0,\n            y: 0,\n        });\n    };\n    return DataBounds;\n}(bounds_1.Bounds));\nexports.DataBounds = DataBounds;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar chart_camera_1 = require(\"../util/chart-camera\");\nvar view_camera_1 = require(\"../util/view-camera\");\nvar scene_1 = require(\"./scene\");\nvar view_1 = require(\"./view\");\n/**\n * This generates all of the cameras/views/scenes necessary for default viewing of elements.\n *\n * These defaults are required to ensure the following:\n *\n * - Orthographic view\n * - top left corner of the canvas is 0,0\n * - y axis is +y downward\n * - entire canvas is the viewport.\n */\nfunction generateDefaultScene(context) {\n    // Generate a default view camera that is\n    // - Orthographic\n    // - (0, 0) is the top left of the canvas\n    // - the y axis is +y going downward\n    var height = context.canvas.height;\n    var width = context.canvas.width;\n    var aspectRatio = width / height;\n    var viewport = {\n        aspectRatio: aspectRatio,\n        bottom: -height / 2,\n        far: 10000000,\n        left: -width / 2,\n        near: -100,\n        right: width / 2,\n        top: height / 2,\n        viewSize: height,\n    };\n    var defaultCamera = new view_camera_1.ViewCamera();\n    defaultCamera.baseCamera = new Three.OrthographicCamera(viewport.left, viewport.right, viewport.top, viewport.bottom, viewport.near, viewport.far);\n    defaultCamera.baseCamera.scale.set(1.0, -1.0, 1.0);\n    defaultCamera.baseCamera.position.set(0.0, 0.0, -300.0);\n    defaultCamera.baseCamera.updateMatrixWorld(true);\n    defaultCamera.baseCamera.updateMatrix();\n    if (defaultCamera.baseCamera instanceof Three.OrthographicCamera) {\n        defaultCamera.baseCamera.updateProjectionMatrix();\n    }\n    // Generate a charting camera with all scales set to 1 and no offsets in any direction\n    var defaultChartCamera = new chart_camera_1.ChartCamera();\n    // This is a viewport that covers the entire context\n    var defaultViewport = {\n        bottom: 0,\n        left: 0,\n        right: 0,\n        top: 0,\n    };\n    // Make a view using our defaults\n    var defaultView = new view_1.View({\n        camera: defaultChartCamera,\n        key: view_1.View.DEFAULT_VIEW_ID,\n        viewCamera: defaultCamera,\n        viewport: defaultViewport,\n    });\n    // Make a scene with our defaults\n    var defaultScene = new scene_1.Scene({\n        key: scene_1.Scene.DEFAULT_SCENE_ID,\n        views: [],\n    });\n    // Make sure the default view is a part of the default scene\n    defaultScene.addView(defaultView);\n    return {\n        camera: defaultChartCamera,\n        scene: defaultScene,\n        view: defaultView,\n        viewCamera: defaultCamera,\n        viewport: defaultViewport,\n    };\n}\nexports.generateDefaultScene = generateDefaultScene;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar INSTANCE_UNIFORM_ATTRIBUTE_PREFIX = 'u';\nfunction makeInstanceUniformNameArray() {\n    return \"instanceData\";\n}\nexports.makeInstanceUniformNameArray = makeInstanceUniformNameArray;\nfunction makeInstanceUniformNameTree(index) {\n    return \"\" + INSTANCE_UNIFORM_ATTRIBUTE_PREFIX + index.toString(31);\n}\nexports.makeInstanceUniformNameTree = makeInstanceUniformNameTree;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.templateVars = {\n    attributeFragments: 'attributeFragments',\n    attributes: 'attributes',\n    blocksPerInstance: 'blocksPerInstance',\n    instanceBlockCount: 'instanceBlockCount',\n    instanceDataBinaryTree: 'instanceDataBinaryTree',\n    instanceDataRetrieval: 'instanceDataRetrieval',\n    instanceDestructuring: 'instanceDestructuring',\n    instanceFragments: 'instanceFragments',\n    instanceUniformDeclarations: 'instanceUniformDeclarations',\n    layerUniforms: 'layerUniforms',\n    projectionMethods: 'projectionMethods',\n    shader: 'shader',\n    shaderInput: 'shaderInput',\n    vertexAttributes: 'vertexAttributes',\n};\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./label-layer\"));\n__export(require(\"./label-instance\"));\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar canvas;\nvar MAX_FONT_SIZE = 50;\nvar floor = Math.floor, max = Math.max, min = Math.min;\nvar LabelRasterizer = /** @class */ (function () {\n    function LabelRasterizer() {\n    }\n    /**\n     * This loops until our canvas context is available\n     */\n    LabelRasterizer.awaitContext = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!canvas) return [3 /*break*/, 2];\n                        this.getContext();\n                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 0];\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This renders our label to a sizeable canvas where we loop over the pixel data to determine\n     * the bounds of the label.\n     *\n     * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n     *                                 the size to be rendered to the texture to the size the label\n     *                                 should be within world space.\n     * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n     */\n    LabelRasterizer.calculateLabelSize = function (resource, sampleScale, calculateTexture) {\n        // If a max width is specified, then we must render and determine the potentially truncated text of the\n        // Label. We can do a binary search for the correct truncated label size.\n        if (calculateTexture) {\n            this.calculateTrucatedText(resource);\n        }\n        /** Get the label properties for rasterizing */\n        var label = resource.label;\n        // Get the scaling of the sample base\n        var sampleScaling = sampleScale || resource.sampleScale || 1.0;\n        // Draw our label to a canvas\n        this.drawLabel(label, resource.truncatedText, canvas, sampleScaling);\n        // Measure the contents of the canvas\n        var _a = this.measureContents(canvas), minX = _a.minX, minY = _a.minY, maxX = _a.maxX, maxY = _a.maxY;\n        // Make sure the rasterization object is initialized\n        resource.rasterization = resource.rasterization || {\n            texture: { height: 0, width: 0 },\n            world: { height: 0, width: 0 },\n        };\n        // When a forced sampling is present, it calculates that as the world space\n        if (!calculateTexture) {\n            // Update the calculated texture size.\n            resource.rasterization.world = {\n                height: maxY - minY,\n                width: maxX - minX,\n            };\n        }\n        // Otherwise we first calculate the texture rasterization for the label\n        else {\n            // Update the calculated texture size.\n            resource.rasterization.texture = {\n                height: maxY - minY,\n                width: maxX - minX,\n            };\n            resource.rasterization.canvas = this.createCroppedCanvas(resource, minY, minX);\n            this.calculateLabelSize(resource, 1.0, false);\n        }\n    };\n    /**\n     * This determines what the truncated text of the label will be. If there is no truncation\n     * then the truncated text === the label's text\n     */\n    LabelRasterizer.calculateTrucatedText = function (resource) {\n        var label = resource.label;\n        var maxWidth = label.maxWidth;\n        // If the label has no max width, then there will be no truncation\n        if (!maxWidth) {\n            resource.truncatedText = label.text;\n            return;\n        }\n        // We now do an initial rendering of the label as it will appear in world space\n        this.drawLabel(label, label.text, canvas, 1);\n        // We measure the contents of the rendered item to see if it violates the maxWidth\n        var firstTest = this.measureContents(canvas);\n        // If we're within spec, we do not need to truncate\n        if (firstTest.maxX - firstTest.minX <= maxWidth) {\n            resource.truncatedText = label.text;\n            return;\n        }\n        // At this point we need to binary search through chopping off letters to find a string\n        // That will fit within max width\n        var text = label.text;\n        var left = 0;\n        var right = text.length;\n        var cursor = floor((right - left) / 2.0);\n        var safety = 0;\n        var safetyMax = 50;\n        // Loop to perform the binary search\n        while (right > left && cursor !== 0 && safety++ < safetyMax) {\n            // Draw and measure\n            this.drawLabel(label, text.substr(0, cursor) + \"...\", canvas, 1);\n            var _a = this.measureContents(canvas), minX = _a.minX, maxX = _a.maxX;\n            // If we pass then we move left to cursor to make the test string longer\n            if (maxX - minX <= maxWidth) {\n                left = cursor;\n            }\n            // If we fail, we move right to cursor to make the test string shorter\n            else {\n                right = cursor;\n            }\n            // Get our next cursor position\n            var nextCursor = floor((right - left) / 2.0) + left;\n            // If the next cursor is the same as cursor, then we're done searching\n            if (nextCursor === cursor) {\n                break;\n            }\n            // Move our cursor\n            cursor = nextCursor;\n        }\n        // If cursor is zero, nothing passed and our truncation is just ellipses\n        if (cursor === 0) {\n            resource.truncatedText = '...';\n        }\n        // Otherwise we get the string that passes and use that as our truncated text\n        else {\n            resource.truncatedText = text.substr(0, cursor) + \"...\";\n        }\n    };\n    /**\n     * This generates a canvas that has the cropped version of the label where the label\n     * fits neatly in the canvas object.\n     */\n    LabelRasterizer.createCroppedCanvas = function (resource, top, left) {\n        var cropped = document.createElement('canvas');\n        var context = cropped.getContext('2d');\n        if (context) {\n            var texture = resource.rasterization.texture;\n            cropped.width = texture.width;\n            cropped.height = texture.height;\n            context.imageSmoothingEnabled = false;\n            // Draw just the region the label appears into the canvas\n            context.drawImage(canvas.canvas, left, top, texture.width, texture.height, 0, 0, texture.width, texture.height);\n        }\n        else {\n            console.warn('Could not create a canvas 2d context to generate a label\\'s cropped image.');\n        }\n        return cropped;\n    };\n    /**\n     * This actually renders a string to a canvas context using a label's settings\n     */\n    LabelRasterizer.drawLabel = function (label, text, canvas, sampleScaling) {\n        // Get the font size we will rasterize with\n        var fontSize = this.getLabelRasterizationFontSize(label, sampleScaling);\n        // Set the color of the label to white so we know what color to look for\n        canvas.fillStyle = 'white';\n        // Set the font to the canvas\n        canvas.font = this.makeCSSFont(label, sampleScaling);\n        // We will use the canvas measuring tool to give us a baseline for how wide\n        // The label will be. We add the font size to the width for the padding needed to ensure\n        // The entirety of the text is placed on the canvas.\n        canvas.canvas.width = canvas.measureText(label.text).width + fontSize;\n        // Make our test area the font size with one extra level of the font size\n        // For padding.\n        canvas.canvas.height = fontSize * 2.0;\n        // After adjusting the canvas dimensions we must re-set the font metrics\n        // Set the color of the label to white so we know what color to look for\n        canvas.fillStyle = 'white';\n        // Set the font to the canvas\n        canvas.font = this.makeCSSFont(label, sampleScaling);\n        // Render the text into our canvas for calculating\n        canvas.fillText(text, fontSize / 2.0, fontSize / 4.0 + fontSize);\n    };\n    /**\n     * Attempts to populate the 'canvas' context for rendering labels offscreen.\n     */\n    LabelRasterizer.getContext = function () {\n        if (!canvas) {\n            canvas = document.createElement('canvas').getContext('2d');\n        }\n        return canvas;\n    };\n    /**\n     * This retrieves the font size that will be used when rasterizing the label. This takes into\n     * account whether the label is requesting super sampling be present for the rendering.\n     */\n    LabelRasterizer.getLabelRasterizationFontSize = function (label, sampleScale) {\n        return label.fontSize * sampleScale;\n    };\n    /**\n     * Generates the CSS font string based on the label's values\n     */\n    LabelRasterizer.makeCSSFont = function (label, sampleScale) {\n        return label.fontWeight + \" \" + this.getLabelRasterizationFontSize(label, sampleScale) + \"px \" + label.fontFamily;\n    };\n    /**\n     * This measures the contents of what is inside the canvas assumming the rendered values are only white\n     */\n    LabelRasterizer.measureContents = function (canvas) {\n        var _a = canvas.canvas, width = _a.width, height = _a.height;\n        var imageData = canvas.getImageData(0, 0, width, height).data;\n        var r;\n        var minY = Number.MAX_SAFE_INTEGER;\n        var minX = Number.MAX_SAFE_INTEGER;\n        var maxX = Number.MIN_SAFE_INTEGER;\n        var maxY = Number.MIN_SAFE_INTEGER;\n        for (var i = 0; i < width; ++i) {\n            for (var k = 0; k < height; ++k) {\n                var redIndex = k * (width * 4) + i * 4;\n                r = imageData[redIndex];\n                if (r > 0.0) {\n                    minY = min(minY, k);\n                    minX = min(minX, i);\n                    maxX = max(maxX, i);\n                    maxY = max(maxY, k);\n                }\n            }\n        }\n        // The identified pixel needs to be encased and not a direct target\n        minY -= 1;\n        maxY += 2;\n        maxX += 2;\n        minX -= 1;\n        minY = max(minY, 0);\n        minX = max(minX, 0);\n        return { minX: minX, minY: minY, maxX: maxX, maxY: maxY };\n    };\n    /**\n     * Performs the rendering of the label\n     */\n    LabelRasterizer.render = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // Make sure our canvas object is ready for rendering\n                    return [4 /*yield*/, this.awaitContext()];\n                    case 1:\n                        // Make sure our canvas object is ready for rendering\n                        _a.sent();\n                        // Validate the label's input\n                        if (resource.label.fontSize > MAX_FONT_SIZE) {\n                            console.warn('Labels only support font sizes up to 50');\n                            return [2 /*return*/, resource];\n                        }\n                        // Calculate all of the label metrics and generate a canvas on the label that can\n                        // Be rendered to the canvas.\n                        this.calculateLabelSize(resource, resource.sampleScale, true);\n                        return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    /**\n     * Performs the rendering of the label\n     */\n    LabelRasterizer.renderSync = function (resource) {\n        // Ensure our offscreen canvas is prepped\n        this.getContext();\n        if (!canvas) {\n            console.warn('Can not render a label synchronously without the canvas context being ready.');\n            return resource;\n        }\n        // Validate the label's input\n        if (resource.label.fontSize > MAX_FONT_SIZE) {\n            console.warn('Labels only support font sizes up to 50');\n            return resource;\n        }\n        // Calculate all of the label metrics and generate a canvas on the label that can\n        // Be rendered to the canvas.\n        this.calculateLabelSize(resource, resource.sampleScale, true);\n        return resource;\n    };\n    return LabelRasterizer;\n}());\nexports.LabelRasterizer = LabelRasterizer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_atlas_resource_1 = require(\"./base-atlas-resource\");\nvar ImageAtlasResource = /** @class */ (function (_super) {\n    __extends(ImageAtlasResource, _super);\n    function ImageAtlasResource(image) {\n        var _this = _super.call(this) || this;\n        _this.image = image;\n        return _this;\n    }\n    return ImageAtlasResource;\n}(base_atlas_resource_1.BaseAtlasResource));\nexports.ImageAtlasResource = ImageAtlasResource;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// When ratserized to the image, this determines the size of the square rendered to the atlas.\nvar COLOR_RASTERIZATION_SIZE = 2;\n/**\n * Static class for rasterizing a color to a canvas object\n */\nvar ColorRasterizer = /** @class */ (function () {\n    function ColorRasterizer() {\n    }\n    /**\n     * This loops until our canvas context is available\n     */\n    ColorRasterizer.awaitContext = function (canvas) {\n        return __awaiter(this, void 0, void 0, function () {\n            var c, limit;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        c = canvas.getContext('2d'), limit = 0;\n                        _a.label = 1;\n                    case 1:\n                        if (!(!Boolean(c) && limit < 100)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        c = canvas.getContext('2d'), ++limit;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Generates the CSS string version of the color\n     */\n    ColorRasterizer.makeCSS = function (color) {\n        return \"rgba(\" + Math.floor(color.r * 256) + \", \" + Math.floor(color.g * 256) + \", \" + Math.floor(color.b * 256) + \", \" + color.opacity + \")\";\n    };\n    ColorRasterizer.render = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var canvas, context;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        canvas = document.createElement('canvas');\n                        context = canvas.getContext('2d');\n                        return [4 /*yield*/, this.awaitContext(canvas)];\n                    case 1:\n                        _a.sent();\n                        if (context) {\n                            canvas.width = COLOR_RASTERIZATION_SIZE;\n                            canvas.height = COLOR_RASTERIZATION_SIZE;\n                            context.imageSmoothingEnabled = false;\n                            context.fillStyle = this.makeCSS(resource.color);\n                            // Draw the color to the fill space\n                            context.fillRect(0, 0, COLOR_RASTERIZATION_SIZE, COLOR_RASTERIZATION_SIZE);\n                            // Update the resource with the rasterization\n                            resource.rasterization.canvas = canvas;\n                        }\n                        else {\n                            console.warn('Could not create a canvas 2d context to generate a color for rasterization.');\n                        }\n                        return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    return ColorRasterizer;\n}());\nexports.ColorRasterizer = ColorRasterizer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_atlas_resource_1 = require(\"./base-atlas-resource\");\nvar ColorAtlasResource = /** @class */ (function (_super) {\n    __extends(ColorAtlasResource, _super);\n    function ColorAtlasResource(color) {\n        var _this = _super.call(this) || this;\n        _this.color = color;\n        return _this;\n    }\n    return ColorAtlasResource;\n}(base_atlas_resource_1.BaseAtlasResource));\nexports.ColorAtlasResource = ColorAtlasResource;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Defines a texture that is located on an atlas\n */\nvar SubTexture = /** @class */ (function () {\n    function SubTexture() {\n        /** Stores the aspect ratio of the image for quick reference */\n        this.aspectRatio = 1.0;\n        /** The id of the atlas this texture is located on */\n        this.atlasReferenceID = '';\n        /** This is the actual texture of the atlas this resource is located on */\n        this.atlasTexture = null;\n        /** This is the top left UV coordinate of the sub texture on the atlas */\n        this.atlasTL = { x: 0, y: 0 };\n        /** This is the top right UV coordinate of the sub texture on the atlas */\n        this.atlasTR = { x: 0, y: 0 };\n        /** This is the bottom left UV coordinate of the sub texture on the atlas */\n        this.atlasBL = { x: 0, y: 0 };\n        /** This is the bottom right UV coordinate of the sub texture on the atlas */\n        this.atlasBR = { x: 0, y: 0 };\n        /** This is the normalized width of the sub texture on the atlas */\n        this.widthOnAtlas = 0;\n        /** This is the normalized height of the sub texture on the atlas */\n        this.heightOnAtlas = 0;\n        /** This flag is set to false when the underlying texture is no longer valid */\n        this.isValid = false;\n        /** Width in pixels of the image on the atlas */\n        this.pixelWidth = 0;\n        /** Height in pixels of the image on the atlas */\n        this.pixelHeight = 0;\n    }\n    return SubTexture;\n}());\nexports.SubTexture = SubTexture;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar identify_by_key_1 = require(\"../../util/identify-by-key\");\nvar pack_node_1 = require(\"./pack-node\");\nvar sub_texture_1 = require(\"./sub-texture\");\n/**\n * These are valid atlas sizes available. We force a power of 2 to be utilized.\n * We do not allow crazy large sizes as browsers have very real caps on resources.\n * This helps implementations be a little smarter about what they are using. Future\n * versions may increase this number as GPUs improve and standards allow greater\n * flexibility.\n */\nvar AtlasSize;\n(function (AtlasSize) {\n    AtlasSize[AtlasSize[\"_2\"] = 2] = \"_2\";\n    AtlasSize[AtlasSize[\"_4\"] = 4] = \"_4\";\n    AtlasSize[AtlasSize[\"_8\"] = 8] = \"_8\";\n    AtlasSize[AtlasSize[\"_16\"] = 16] = \"_16\";\n    AtlasSize[AtlasSize[\"_32\"] = 32] = \"_32\";\n    AtlasSize[AtlasSize[\"_64\"] = 64] = \"_64\";\n    AtlasSize[AtlasSize[\"_128\"] = 128] = \"_128\";\n    AtlasSize[AtlasSize[\"_256\"] = 256] = \"_256\";\n    AtlasSize[AtlasSize[\"_512\"] = 512] = \"_512\";\n    AtlasSize[AtlasSize[\"_1024\"] = 1024] = \"_1024\";\n    AtlasSize[AtlasSize[\"_2048\"] = 2048] = \"_2048\";\n    AtlasSize[AtlasSize[\"_4096\"] = 4096] = \"_4096\";\n})(AtlasSize = exports.AtlasSize || (exports.AtlasSize = {}));\n/**\n * This represents a single Texture on the gpu that is composed of several smaller textures\n * as a 'look up'.\n */\nvar Atlas = /** @class */ (function (_super) {\n    __extends(Atlas, _super);\n    function Atlas(options) {\n        var _this = _super.call(this, options) || this;\n        /**\n         * This is all of the resources associated with this atlas. The boolean flag indicates if the resource\n         * is flagged for removal. When set to false, the resource is no longer valid and can be removed from\n         * the atlas at any given moment.\n         */\n        _this.validResources = new Map();\n        var canvas = document.createElement('canvas');\n        _this.width = canvas.width = options.width;\n        _this.height = canvas.height = options.height;\n        _this.textureSettings = options.textureSettings;\n        // Set up the packing for this atlas\n        _this.packing = new pack_node_1.PackNode(0, 0, options.width, options.height);\n        // Make sure the texture is started and updated\n        _this.updateTexture(canvas);\n        return _this;\n    }\n    /**\n     * This invalidates the SubTexture of an atlas resource.\n     */\n    Atlas.prototype.invalidateResource = function (resource) {\n        var zero = { x: 0, y: 0 };\n        resource.texture.aspectRatio = 1;\n        resource.texture.atlasBL = zero;\n        resource.texture.atlasBR = zero;\n        resource.texture.atlasTL = zero;\n        resource.texture.atlasTR = zero;\n        resource.texture.atlasReferenceID = '';\n        resource.texture.pixelWidth = 0;\n        resource.texture.pixelHeight = 0;\n        resource.texture.isValid = false;\n    };\n    /**\n     * Sets the parent manager of this atlas\n     */\n    Atlas.prototype.setManager = function (manager) {\n        this.manager = manager;\n    };\n    /**\n     * Adds a resource to this atlas AND ensures the resource is flagged valid for use.\n     *\n     * @return {boolean} True if the resource successfully registered\n     */\n    Atlas.prototype.registerResource = function (resource) {\n        if (this.validResources.get(resource) === undefined) {\n            if (!resource.texture || !resource.texture.isValid) {\n                if (!resource.texture) {\n                    resource.texture = new sub_texture_1.SubTexture();\n                }\n                resource.texture.isValid = true;\n                this.validResources.set(resource, true);\n                return true;\n            }\n            else {\n                console.warn('Atlas Error:', this.id, 'Attempted to add a resource to an Atlas that is already a valid resource on another atlas.', 'Consider Creating a new resource to be loaded into this particular atlas.', 'Resource:', resource);\n            }\n        }\n        else {\n            console.warn('Atlas Error:', this.id, 'A resource was trying to be added to the atlas that has already been added before.', 'Consider creating a new resource to indicate what you want loaded to the atlas', 'Resource:', resource);\n        }\n        return false;\n    };\n    /**\n     * This flags a resource from removal from an atlas.\n     *\n     * NOTE: This does not immediately clear the resource fromt he atlas, nor does it even guarantee\n     * the resource will be cleared from the atlas for a while. It merely suggests the resource be removed\n     * and makes the SubTexture invalid. It could be a long while before the atlas gets regnerated and repacked\n     * to actually reflect the resource not existing on the atlas.\n     */\n    Atlas.prototype.removeResource = function (resource) {\n        if (this.validResources.get(resource)) {\n            this.validResources.set(resource, false);\n            this.invalidateResource(resource);\n        }\n        else {\n            console.warn('Atlas Error:', this.id, 'Attempted to remove a resource that does not exist on this atlas.', 'or the resource was already considered invalidated on this atlas.', 'Resource:', resource);\n        }\n    };\n    /**\n     * TODO:\n     * This performs the currently best known way to update a texture.\n     *\n     * This is the current best attempt at updating the atlas which is junk as it destroys the old texture\n     * And makes a new one. We REALLY should be just subTexture2D updating the texture, but Three makes that really\n     * Difficult\n     */\n    Atlas.prototype.updateTexture = function (canvas) {\n        if (this.texture) {\n            var redoneCanvas = this.texture.image;\n            this.texture.dispose();\n            this.texture = new Three.Texture(redoneCanvas);\n        }\n        else {\n            this.texture = new Three.Texture(canvas);\n        }\n        // Apply any relevant options to the texture desired to be set\n        this.texture.generateMipmaps = true;\n        this.texture.premultiplyAlpha = true;\n        this.textureSettings && Object.assign(this.texture, this.textureSettings);\n        this.texture.needsUpdate = true;\n    };\n    /**\n     * This frees up all the resources down to the GPU related to this atlas. It also\n     * loops through every resource and invalidates the texturing information within\n     * them so subsequent accidental renders will appear as a single color rather than\n     * an artifacted element.\n     */\n    Atlas.prototype.destroy = function () {\n        var _this = this;\n        this.texture.dispose();\n        this.validResources.forEach(function (isValid, resource) {\n            _this.invalidateResource(resource);\n        });\n    };\n    return Atlas;\n}(identify_by_key_1.IdentifyByKey));\nexports.Atlas = Atlas;\n","/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',\n  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',\n  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',\n  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',\n  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',\n  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',\n  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',\n  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',\n  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',\n  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',\n  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // Internet Explorer and Edge do not support colors.\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n    return false;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar browser = require(\"bowser\");\nvar three_1 = require(\"three\");\nvar debug = require('debug')('CommunicationsView:Mouse');\n/** Used to adjust the base whee delta for IE browsers */\nvar IE_ADJUSTMENT = 1 / 30;\n/** Used to adjust the rates for IE 11 */\nvar OLD_IE_ADJUSTMENT = -0.25;\n// This determines how large the delta can grow to in firefox\nvar MAX_FIREFOX_WHEELDELTA = 100;\n/**\n * Create a low pass filter memory bank so we can slow down rapid accelerations and let normal slower accelerations pass\n * Common use case for this is the discrepancy in firefox from mousewheels to trackpad scroll speeds\n */\nvar lowPassY = [0, 0, 0, 0];\n// These coefficients represent the coefficients of a FIR filter.\n// This FIR filter uses the lowPassY as the memory for the filter and is created for\n// The reasons specified for the lowPassY memory. To edit the coefficients, you simply\n// Ensure the coefficients added together === 1.0. If they do not, you may get an unstable\n// Result that goes to infinity rather quickly. Changing the distribution of these coefficients\n// Alters the rate at which the delta can approach MAX_FIREFOX_WHEELDELTA. Explaining exactly\n// How it affects the rate requires an understanding of FIR filters, so unless this is already\n// Known knowledge, it would be faster to just tweak the coefficients until a desired effect is\n// Attained.\nvar LOW_PASS_U0 = 0.1;\nvar LOW_PASS_U1 = 0.2;\nvar LOW_PASS_U2 = 0.2;\nvar LOW_PASS_U3 = 0.5;\nfunction normalizeFirefoxWheel(e) {\n    var wheel = e;\n    var deltaX = 0;\n    var deltaY = 0;\n    // Reset the filter if the direction changes to prevent lag in directional change\n    if (Math.sign(lowPassY[0]) !== Math.sign(deltaY)) {\n        lowPassY.splice(0, lowPassY.length, 0, 0, 0, 0);\n    }\n    deltaX = wheel.deltaX * MAX_FIREFOX_WHEELDELTA;\n    // Calculate the next value output from the FIR filter\n    deltaY = (wheel.deltaY * MAX_FIREFOX_WHEELDELTA) * LOW_PASS_U0 + lowPassY[0] * LOW_PASS_U1 + lowPassY[1] * LOW_PASS_U2 + lowPassY[2] * LOW_PASS_U3;\n    // Store the value of the filter in the FIR memory bank\n    lowPassY.unshift(deltaY);\n    // Keep our FIR memory clean and only the size of the number of coefficients\n    lowPassY.pop();\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeChromeWheel(e) {\n    var wheel = e;\n    return new three_1.Vector2(wheel.deltaX, -wheel.deltaY);\n}\nfunction normalizeIE11Wheel(e) {\n    var wheel = e;\n    var deltaX = wheel.deltaX;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    var deltaY = wheel.deltaY;\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = (wheel.wheelDelta || -wheel.detail) * OLD_IE_ADJUSTMENT;\n        }\n    }\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeIE12Wheel(e) {\n    var wheel = e;\n    var deltaX = wheel.deltaX, deltaY = wheel.deltaY;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = wheel.wheelDelta || -wheel.detail;\n        }\n    }\n    var v = new three_1.Vector2(deltaX, -deltaY);\n    v.multiplyScalar(0.25);\n    return v;\n}\n// Determine this browsers version of wheel normalization and apply it\nvar normalizeWheel;\nexports.normalizeWheel = normalizeWheel;\nif (browser.firefox) {\n    debug('Using mouse wheel for firefox');\n    exports.normalizeWheel = normalizeWheel = normalizeFirefoxWheel;\n}\nelse if (browser.msie && +browser.version >= 11) {\n    debug('Using mouse wheel for IE 11');\n    exports.normalizeWheel = normalizeWheel = normalizeIE11Wheel;\n}\nelse if (browser.msedge) {\n    debug('Using mouse wheel for MS EDGE');\n    exports.normalizeWheel = normalizeWheel = normalizeIE12Wheel;\n}\nelse {\n    debug('Using mouse wheel for Chrome');\n    exports.normalizeWheel = normalizeWheel = normalizeChromeWheel;\n}\n/**\n * Analyzes a MouseEvent and calculates the mouse coordinates (relative to the element).\n */\nfunction eventElementPosition(e, relative) {\n    var mouseX = 0, mouseY = 0, eventX = 0, eventY = 0, object = relative || (e.nativeEvent && e.nativeEvent.target) || e.target;\n    // Get mouse position on document crossbrowser\n    if (!e) {\n        e = window.event;\n    }\n    if (e.pageX || e.pageY) {\n        mouseX = e.pageX;\n        mouseY = e.pageY;\n    }\n    else if (e.clientX || e.clientY) {\n        mouseX = e.clientX + document.body.scrollLeft\n            + document.documentElement.scrollLeft;\n        mouseY = e.clientY + document.body.scrollTop\n            + document.documentElement.scrollTop;\n    }\n    // Get parent element position in document\n    if (object.offsetParent) {\n        do {\n            eventX += object.offsetLeft;\n            eventY += object.offsetTop;\n            object = object.offsetParent;\n        } while (object);\n    }\n    // Mouse position minus elm position is mouseposition relative to element:\n    return { x: mouseX - eventX, y: mouseY - eventY };\n}\nexports.eventElementPosition = eventElementPosition;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getProgramInfo(gl, program) {\n    var result = {\n        attributeCount: 0,\n        attributes: new Array(),\n        uniformCount: 0,\n        uniforms: new Array(),\n    }, activeUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS), activeAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    // Taken from the WebGl spec:\n    // Http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14\n    var enums = {\n        0x8B50: 'FLOAT_VEC2',\n        0x8B51: 'FLOAT_VEC3',\n        0x8B52: 'FLOAT_VEC4',\n        0x8B53: 'INT_VEC2',\n        0x8B54: 'INT_VEC3',\n        0x8B55: 'INT_VEC4',\n        0x8B56: 'BOOL',\n        0x8B57: 'BOOL_VEC2',\n        0x8B58: 'BOOL_VEC3',\n        0x8B59: 'BOOL_VEC4',\n        0x8B5A: 'FLOAT_MAT2',\n        0x8B5B: 'FLOAT_MAT3',\n        0x8B5C: 'FLOAT_MAT4',\n        0x8B5E: 'SAMPLER_2D',\n        0x8B60: 'SAMPLER_CUBE',\n        0x1400: 'BYTE',\n        0x1401: 'UNSIGNED_BYTE',\n        0x1402: 'SHORT',\n        0x1403: 'UNSIGNED_SHORT',\n        0x1404: 'INT',\n        0x1405: 'UNSIGNED_INT',\n        0x1406: 'FLOAT',\n    };\n    var blocks = {\n        0x8B50: 1,\n        0x8B51: 1,\n        0x8B52: 1,\n        0x8B53: 1,\n        0x8B54: 1,\n        0x8B55: 1,\n        0x8B56: 1,\n        0x8B57: 1,\n        0x8B58: 1,\n        0x8B59: 1,\n        0x8B5A: 1,\n        0x8B5B: 3,\n        0x8B5C: 4,\n        0x8B5E: 1,\n        0x8B60: 1,\n        0x1400: 1,\n        0x1401: 1,\n        0x1402: 1,\n        0x1403: 1,\n        0x1404: 1,\n        0x1405: 1,\n        0x1406: 1,\n    };\n    // Loop through active uniforms\n    for (var i = 0; i < activeUniforms; ++i) {\n        var uniform = gl.getActiveUniform(program, i);\n        uniform.typeName = enums[uniform.type];\n        result.uniforms.push(uniform);\n        result.uniformCount += uniform.size;\n        uniform.size = uniform.size * blocks[uniform.type];\n    }\n    // Loop through active attributes\n    for (var i = 0; i < activeAttributes; i++) {\n        var attribute = gl.getActiveAttrib(program, i);\n        attribute.typeName = enums[attribute.type];\n        result.attributes.push(attribute);\n        result.attributeCount += attribute.size;\n    }\n    return result;\n}\nexports.getProgramInfo = getProgramInfo;\nvar WebGLStat = /** @class */ (function () {\n    function WebGLStat() {\n    }\n    WebGLStat.MAX_VERTEX_UNIFORMS = 0;\n    WebGLStat.MAX_FRAGMENT_UNIFORMS = 0;\n    WebGLStat.MAX_ATTRIBUTES = 0;\n    WebGLStat.WEBGL_SUPPORTED = false;\n    WebGLStat.MAX_TEXTURE_SIZE = 0;\n    return WebGLStat;\n}());\nexports.WebGLStat = WebGLStat;\nfunction initStats() {\n    // Let's perform some immediate operations to do some gl querying for useful information\n    function getAContext() {\n        try {\n            var canvas = document.createElement('canvas');\n            return window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    // Attempt to retrieve a context for webgl\n    var gl = getAContext();\n    // If the context exists, then we know gl is supported and we can fill in some metrics\n    if (gl) {\n        WebGLStat.WEBGL_SUPPORTED = true;\n        WebGLStat.MAX_VERTEX_UNIFORMS = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n        WebGLStat.MAX_FRAGMENT_UNIFORMS = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n        WebGLStat.MAX_ATTRIBUTES = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n        WebGLStat.MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    }\n}\ninitStats();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar sqrt = Math.sqrt;\nfunction add2(left, right) {\n    return [\n        left[0] + right[0],\n        left[1] + right[1],\n    ];\n}\nexports.add2 = add2;\nfunction scale2(left, scale) {\n    return [\n        left[0] * scale,\n        left[1] * scale,\n    ];\n}\nexports.scale2 = scale2;\nfunction subtract2(left, right) {\n    return [\n        left[0] - right[0],\n        left[1] - right[1],\n    ];\n}\nexports.subtract2 = subtract2;\nfunction multiply2(left, right) {\n    return [\n        left[0] * right[0],\n        left[1] * right[1],\n    ];\n}\nexports.multiply2 = multiply2;\nfunction dot2(left, right) {\n    return (left[0] * right[0] +\n        left[1] * right[1]);\n}\nexports.dot2 = dot2;\nfunction linear2(start, end, t) {\n    return scale2(add2(subtract2(end, start), start), t);\n}\nexports.linear2 = linear2;\nfunction length2(start) {\n    return sqrt(dot2(start, start));\n}\nexports.length2 = length2;\nfunction add3(left, right) {\n    return [\n        left[0] + right[0],\n        left[1] + right[1],\n        left[2] + right[2],\n    ];\n}\nexports.add3 = add3;\nfunction scale3(left, scale) {\n    return [\n        left[0] * scale,\n        left[1] * scale,\n        left[2] * scale,\n    ];\n}\nexports.scale3 = scale3;\nfunction subtract3(left, right) {\n    return [\n        left[0] - right[0],\n        left[1] - right[1],\n        left[2] - right[2],\n    ];\n}\nexports.subtract3 = subtract3;\nfunction multiply3(left, right) {\n    return [\n        left[0] * right[0],\n        left[1] * right[1],\n        left[2] * right[2],\n    ];\n}\nexports.multiply3 = multiply3;\nfunction linear3(start, end, t) {\n    return scale3(add3(subtract3(end, start), start), t);\n}\nexports.linear3 = linear3;\nfunction length3(start) {\n    return sqrt(dot3(start, start));\n}\nexports.length3 = length3;\nfunction dot3(left, right) {\n    return (left[0] * right[0] +\n        left[1] * right[1] +\n        left[2] * right[2]);\n}\nexports.dot3 = dot3;\nfunction add4(left, right) {\n    return [\n        left[0] + right[0],\n        left[1] + right[1],\n        left[2] + right[2],\n        left[3] + right[3],\n    ];\n}\nexports.add4 = add4;\nfunction scale4(left, scale) {\n    return [\n        left[0] * scale,\n        left[1] * scale,\n        left[2] * scale,\n        left[3] * scale,\n    ];\n}\nexports.scale4 = scale4;\nfunction subtract4(left, right) {\n    return [\n        left[0] - right[0],\n        left[1] - right[1],\n        left[2] - right[2],\n        left[3] - right[3],\n    ];\n}\nexports.subtract4 = subtract4;\nfunction multiply4(left, right) {\n    return [\n        left[0] * right[0],\n        left[1] * right[1],\n        left[2] * right[2],\n        left[3] * right[3],\n    ];\n}\nexports.multiply4 = multiply4;\nfunction dot4(left, right) {\n    return (left[0] * right[0] +\n        left[1] * right[1] +\n        left[2] * right[2] +\n        left[3] * right[3]);\n}\nexports.dot4 = dot4;\nfunction linear4(start, end, t) {\n    return scale4(add4(subtract4(end, start), start), t);\n}\nexports.linear4 = linear4;\nfunction length4(start) {\n    return sqrt(dot4(start, start));\n}\nexports.length4 = length4;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./image-layer\"));\n__export(require(\"./image-instance\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\nvar event_manager_1 = require(\"../surface/event-manager\");\nvar util_1 = require(\"../util\");\nvar CameraBoundsAnchor;\n(function (CameraBoundsAnchor) {\n    CameraBoundsAnchor[CameraBoundsAnchor[\"TOP_LEFT\"] = 0] = \"TOP_LEFT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"TOP_MIDDLE\"] = 1] = \"TOP_MIDDLE\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"TOP_RIGHT\"] = 2] = \"TOP_RIGHT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"MIDDLE_LEFT\"] = 3] = \"MIDDLE_LEFT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"MIDDLE\"] = 4] = \"MIDDLE\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"MIDDLE_RIGHT\"] = 5] = \"MIDDLE_RIGHT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"BOTTOM_LEFT\"] = 6] = \"BOTTOM_LEFT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"BOTTOM_MIDDLE\"] = 7] = \"BOTTOM_MIDDLE\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"BOTTOM_RIGHT\"] = 8] = \"BOTTOM_RIGHT\";\n})(CameraBoundsAnchor = exports.CameraBoundsAnchor || (exports.CameraBoundsAnchor = {}));\nvar max = Math.max, min = Math.min;\n/**\n * This provides some very basic common needs for a camera control system. This is not a total solution\n * very every scenario. This should just often handle most basic needs.\n */\nvar BasicCameraController = /** @class */ (function (_super) {\n    __extends(BasicCameraController, _super);\n    function BasicCameraController(options) {\n        var _this = _super.call(this) || this;\n        /** Informative property indicating the controller is panning the chart or not */\n        _this.isPanning = false;\n        /** This is the filter applied to panning operations */\n        _this.panFilter = function (offset, view, allViews) { return offset; };\n        /** THis is the filter applied to tscaling operations */\n        _this.scaleFilter = function (scale, view, allViews) { return scale; };\n        /**\n         * Callback for when the range has changed for the camera in a view\n         */\n        _this.onRangeChanged = function (camera, targetView) { };\n        /**\n         * This flag is set to true when a start view is targetted on mouse down even if it is not\n         * the top most view.\n         */\n        _this.startViewDidStart = false;\n        /**\n         * Corrects camera offset to respect current bounds and anchor.\n         */\n        _this.applyBounds = function () {\n            if (_this.bounds && _this.camera) {\n                var targetView = _this.getView(_this.bounds.view);\n                _this.applyScaleBounds();\n                // Next bound the positioning\n                if (targetView) {\n                    _this.camera.offset[0] = _this.boundsHorizontalOffset(targetView);\n                    _this.camera.offset[1] = _this.boundsVerticalOffset(targetView);\n                }\n            }\n        };\n        _this.applyScaleBounds = function () {\n            if (_this.camera && _this.bounds) {\n                // First bound the scaling\n                if (_this.bounds.scaleMin) {\n                    _this.camera.scale = [\n                        max(_this.camera.scale[0], _this.bounds.scaleMin[0]),\n                        max(_this.camera.scale[1], _this.bounds.scaleMin[1]),\n                        max(_this.camera.scale[2], _this.bounds.scaleMin[2]),\n                    ];\n                }\n                if (_this.bounds.scaleMax) {\n                    _this.camera.scale = [\n                        min(_this.camera.scale[0], _this.bounds.scaleMax[0]),\n                        min(_this.camera.scale[1], _this.bounds.scaleMax[1]),\n                        min(_this.camera.scale[2], _this.bounds.scaleMax[2]),\n                    ];\n                }\n            }\n        };\n        _this.setBounds(options.bounds);\n        _this.camera = options.camera;\n        _this.scaleFactor = options.scaleFactor || 1000.0;\n        _this.ignoreCoverViews = options.ignoreCoverViews || false;\n        if (options.startView) {\n            _this.startViews = Array.isArray(options.startView) ? options.startView : [options.startView];\n        }\n        _this.panFilter = options.panFilter || _this.panFilter;\n        _this.scaleFilter = options.scaleFilter || _this.scaleFilter;\n        _this.onRangeChanged = options.onRangeChanged || _this.onRangeChanged;\n        return _this;\n    }\n    /**\n     * Calculation for adhering to an anchor - x-axis offset only.\n     */\n    BasicCameraController.prototype.anchoredByBoundsHorizontal = function (targetView) {\n        switch (this.bounds.anchor) {\n            case CameraBoundsAnchor.TOP_LEFT:\n            case CameraBoundsAnchor.MIDDLE_LEFT:\n            case CameraBoundsAnchor.BOTTOM_LEFT:\n                return -(this.bounds.worldBounds.left -\n                    this.bounds.screenPadding.left / this.camera.scale[0]);\n            case CameraBoundsAnchor.TOP_MIDDLE:\n            case CameraBoundsAnchor.MIDDLE:\n            case CameraBoundsAnchor.BOTTOM_MIDDLE:\n                return -(this.bounds.worldBounds.right - (this.bounds.worldBounds.width / 2) -\n                    (0.5 * ((targetView.screenBounds.width + this.bounds.screenPadding.right) / this.camera.scale[0])));\n            case CameraBoundsAnchor.TOP_RIGHT:\n            case CameraBoundsAnchor.MIDDLE_RIGHT:\n            case CameraBoundsAnchor.BOTTOM_RIGHT:\n                return -(this.bounds.worldBounds.right - ((targetView.screenBounds.width - this.bounds.screenPadding.right) / this.camera.scale[0]));\n        }\n    };\n    /**\n     * Calculation for adhering to an anchor - y-axis offset only.\n     */\n    BasicCameraController.prototype.anchoredByBoundsVertical = function (targetView) {\n        switch (this.bounds.anchor) {\n            case CameraBoundsAnchor.TOP_LEFT:\n            case CameraBoundsAnchor.TOP_MIDDLE:\n            case CameraBoundsAnchor.TOP_RIGHT:\n                return -(this.bounds.worldBounds.top) -\n                    (-this.bounds.screenPadding.top / this.scale[1]);\n            case CameraBoundsAnchor.MIDDLE_LEFT:\n            case CameraBoundsAnchor.MIDDLE:\n            case CameraBoundsAnchor.MIDDLE_RIGHT:\n                return -(this.bounds.worldBounds.bottom - (this.bounds.worldBounds.height / 2)) +\n                    ((0.5 * (targetView.screenBounds.height - this.bounds.screenPadding.bottom) / this.scale[1]));\n            case CameraBoundsAnchor.BOTTOM_LEFT:\n            case CameraBoundsAnchor.BOTTOM_MIDDLE:\n            case CameraBoundsAnchor.BOTTOM_RIGHT:\n                return -(this.bounds.worldBounds.bottom -\n                    (targetView.screenBounds.height - this.bounds.screenPadding.bottom) / this.scale[1]);\n        }\n    };\n    /**\n     * Returns offset on x-axis due to current bounds and anchor.\n     */\n    BasicCameraController.prototype.boundsHorizontalOffset = function (targetView) {\n        var worldTLinScreenSpace = targetView.worldToScreen({ x: this.bounds.worldBounds.left, y: this.bounds.worldBounds.top });\n        var worldBRinScreenSpace = targetView.worldToScreen({ x: this.bounds.worldBounds.right, y: this.bounds.worldBounds.bottom });\n        var widthDifference = (worldBRinScreenSpace.x - worldTLinScreenSpace.x) +\n            this.bounds.screenPadding.left +\n            this.bounds.screenPadding.right -\n            targetView.screenBounds.width;\n        // If the worldBounds are smaller than the screenBounds,\n        // We offset according to the anchoring\n        if (widthDifference < 0) {\n            return this.anchoredByBoundsHorizontal(targetView);\n        }\n        if (worldBRinScreenSpace.x < (targetView.screenBounds.right - this.bounds.screenPadding.right)) {\n            return (-this.bounds.worldBounds.right + (targetView.screenBounds.width - this.bounds.screenPadding.right) / this.camera.scale[0]);\n        }\n        if (worldTLinScreenSpace.x > (targetView.screenBounds.left + this.bounds.screenPadding.left)) {\n            return (-this.bounds.worldBounds.left + (this.bounds.screenPadding.left / this.camera.scale[0]));\n        }\n        return this.camera.offset[0];\n    };\n    /**\n     * Returns offset on y-axis due to current bounds and anchor.\n     */\n    BasicCameraController.prototype.boundsVerticalOffset = function (targetView) {\n        var worldTLinScreenSpace = targetView.worldToScreen({ x: this.bounds.worldBounds.left, y: this.bounds.worldBounds.top });\n        var worldBRinScreenSpace = targetView.worldToScreen({ x: this.bounds.worldBounds.right, y: this.bounds.worldBounds.bottom });\n        var heightDifference = (worldBRinScreenSpace.y - worldTLinScreenSpace.y) +\n            this.bounds.screenPadding.top +\n            this.bounds.screenPadding.bottom -\n            targetView.screenBounds.height;\n        // If the viewBounds are larger than the screenBounds,\n        // We offset according to the anchoring\n        if (heightDifference < 0) {\n            return this.anchoredByBoundsVertical(targetView);\n        }\n        if (worldTLinScreenSpace.y > targetView.screenBounds.top - this.bounds.screenPadding.top) {\n            return (-(this.bounds.worldBounds.top - (this.bounds.screenPadding.top / this.camera.scale[1])));\n        }\n        if (worldBRinScreenSpace.y < targetView.screenBounds.bottom + this.bounds.screenPadding.bottom) {\n            return (-(this.bounds.worldBounds.bottom + ((-targetView.screenBounds.height + this.bounds.screenPadding.bottom) / this.camera.scale[1])));\n        }\n        return this.camera.offset[1];\n    };\n    BasicCameraController.prototype.canStart = function (viewId) {\n        return (!this.startViews ||\n            this.startViews.length === 0 ||\n            (this.startViews && this.startViews.indexOf(viewId) > -1) ||\n            this.startViewDidStart && this.ignoreCoverViews);\n    };\n    BasicCameraController.prototype.findCoveredStartView = function (e) {\n        var _this = this;\n        var found = e.viewsUnderMouse.find(function (under) { return _this.startViews.indexOf(under.view.id) > -1; });\n        this.startViewDidStart = Boolean(found);\n        if (found) {\n            this.coveredStartView = found.view;\n        }\n    };\n    BasicCameraController.prototype.getTargetView = function (e) {\n        // If we have a start view and we do not ignore covering views,\n        // Then our target view is the view we started with\n        if (this.startViews && !this.ignoreCoverViews) {\n            return e.target.view;\n        }\n        // Otherwise, we use the covered start view\n        else {\n            return this.coveredStartView;\n        }\n    };\n    /**\n     * Used to aid in handling the pan effect and determine the contextual view targetted.\n     */\n    BasicCameraController.prototype.handleMouseDown = function (e, button) {\n        // We look for valid covered views on mouse down so dragging will work\n        this.findCoveredStartView(e);\n        // If this is a valid start view, then we enter a panning state with the mouse down\n        this.isPanning = this.canStart(e.start.view.id);\n    };\n    /**\n     * Used to aid in handling the pan effect\n     */\n    BasicCameraController.prototype.handleMouseUp = function (e) {\n        this.startViewDidStart = false;\n        this.isPanning = false;\n    };\n    /**\n     * Applies a panning effect by adjusting the camera's offset.\n     */\n    BasicCameraController.prototype.handleDrag = function (e, drag) {\n        if (this.canStart(e.start.view.id)) {\n            var pan = [(drag.screen.delta.x / this.camera.scale[0]),\n                (drag.screen.delta.y / this.camera.scale[1]),\n                0];\n            if (this.panFilter) {\n                pan = this.panFilter(pan, e.start.view, e.viewsUnderMouse.map(function (v) { return v.view; }));\n            }\n            this.camera.offset[0] += pan[0];\n            this.camera.offset[1] += pan[1];\n            // Add additional correction for bounds\n            this.applyBounds();\n            // Broadcast the change occurred\n            this.onRangeChanged(this.camera, e.start.view);\n            // Add additional correction for bounds\n            this.applyBounds();\n        }\n    };\n    /**\n     * Applies a scaling effect to the camera for mouse wheel events\n     */\n    BasicCameraController.prototype.handleWheel = function (e, wheelMetrics) {\n        // Every mouse wheel event must look to see if it's over a valid covered start view\n        this.findCoveredStartView(e);\n        if (this.canStart(e.target.view.id)) {\n            var targetView = this.getTargetView(e);\n            var beforeZoom = targetView.screenToWorld(e.screen.mouse);\n            var currentZoomX = this.camera.scale[0] || 1.0;\n            var currentZoomY = this.camera.scale[1] || 1.0;\n            var scale = [wheelMetrics.wheel[1] / this.scaleFactor *\n                    currentZoomX, wheelMetrics.wheel[1] / this.scaleFactor * currentZoomY, 1];\n            if (this.scaleFilter) {\n                scale = this.scaleFilter(scale, targetView, e.viewsUnderMouse.map(function (v) { return v.view; }));\n            }\n            this.camera.scale[0] = currentZoomX + scale[0];\n            this.camera.scale[1] = currentZoomY + scale[1];\n            // Ensure the new scale values are within bounds before attempting to correct offsets\n            this.applyScaleBounds();\n            var afterZoom = targetView.screenToWorld(e.screen.mouse);\n            this.camera.offset[0] -= (beforeZoom.x - afterZoom.x);\n            this.camera.offset[1] -= (beforeZoom.y - afterZoom.y);\n            // Add additional correction for bounds\n            this.applyBounds();\n            // Broadcast the change occurred\n            this.onRangeChanged(this.camera, targetView);\n            // Add additional correction for bounds\n            this.applyBounds();\n        }\n    };\n    // These are the currently Unused responses for this controller\n    BasicCameraController.prototype.handleMouseOut = function (e) { };\n    BasicCameraController.prototype.handleClick = function (e) { };\n    BasicCameraController.prototype.handleMouseMove = function (e) { };\n    BasicCameraController.prototype.handleMouseOver = function (e) { };\n    /**\n     * Evaluates the world bounds the specified view is observing\n     *\n     * @param viewId The id of the view when the view was generated when the surface was made\n     */\n    BasicCameraController.prototype.getRange = function (viewId) {\n        /** Get the projections for the provided view */\n        var projection = this.getProjection(viewId);\n        /** Get the bounds on the screen for the indicated view */\n        var screenBounds = this.getViewScreenBounds(viewId);\n        // Make sure we have a valid projection and screen bounds to make the adjustment\n        if (projection && screenBounds) {\n            /** Get the current viewed world bounds of the view */\n            var topLeft = projection.screenToWorld(screenBounds);\n            var bottomRight = projection.screenToWorld({ x: screenBounds.right, y: screenBounds.bottom });\n            return new bounds_1.Bounds({\n                height: bottomRight.y - topLeft.y,\n                width: bottomRight.x - topLeft.x,\n                x: topLeft.x,\n                y: topLeft.y,\n            });\n        }\n        return new bounds_1.Bounds({ x: 0, y: 0, width: 1, height: 1 });\n    };\n    Object.defineProperty(BasicCameraController.prototype, \"pan\", {\n        /**\n         * Retrieves the current pan of the controlled camera\n         */\n        get: function () {\n            return this.camera.offset;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets bounds applicable to the supplied view.\n     * If no view is supplied, it uses the first in the startViews array\n     */\n    BasicCameraController.prototype.setBounds = function (bounds) {\n        this.bounds = bounds;\n        this.applyBounds();\n    };\n    Object.defineProperty(BasicCameraController.prototype, \"scale\", {\n        /**\n         * Retrieves the current scale of the camera\n         */\n        get: function () {\n            return this.camera.scale;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This lets you set the visible range of a view based on the view's camera. This will probably not work\n     * as expected if the view indicated and this controller do not share the same camera.\n     *\n     * @param viewId The id of the view when the view was generated when the surface was made\n     */\n    BasicCameraController.prototype.setRange = function (newWorld, viewId) {\n        /** Get the projections for the provided view */\n        var projection = this.getProjection(viewId);\n        /** Get the bounds on the screen for the indicated view */\n        var screenBounds = this.getViewScreenBounds(viewId);\n        /** Get the view the range is being applied towards */\n        var view = this.getView(viewId);\n        // Make sure we have a valid projection and screen bounds to make the adjustment\n        if (projection && screenBounds && view) {\n            var deltaScale = util_1.subtract3([\n                screenBounds.width / newWorld.width,\n                screenBounds.height / newWorld.height,\n                1,\n            ], this.camera.scale);\n            this.camera.scale = util_1.add3(this.camera.scale, this.scaleFilter(deltaScale, view, [view]));\n            var deltaPan = util_1.subtract3([\n                -newWorld.x,\n                -newWorld.y,\n                0,\n            ], this.camera.offset);\n            this.camera.offset = util_1.add3(this.camera.offset, this.scaleFilter(deltaPan, view, [view]));\n            // Bound the camera to the specified bounding range\n            this.applyBounds();\n            // Broadcast the change occurred\n            this.onRangeChanged(this.camera, view);\n            // Bound the camera to the specified bounding range\n            this.applyBounds();\n        }\n    };\n    return BasicCameraController;\n}(event_manager_1.EventManager));\nexports.BasicCameraController = BasicCameraController;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./basic-camera-controller\"));\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float borderSize;\\nvarying vec2 pointCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  vertexColor = color * color.a;\\n  float size = radius * scaleFactor;\\n  borderSize = mix(\\n    (thickness + 1.5) / size,\\n    ((thickness * pixelRatio) / size),\\n    float(pixelRatio > 1.0)\\n  );\\n  edgeSharpness = mix(0.8, 0.01, min((size * 3.0 * pixelRatio) / (45.0 * pixelRatio), 1.0));\\n  pointCoord = (position.xy + vec2(1.0, 1.0)) / 2.0;\\n\\n  // Center within clip space\\n  vec4 clipCenter = clipSpace(vec3(center, depth));\\n  // Center in screen space\\n  vec2 screenCenter = (clipCenter.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Position in screen space\\n  vec2 vertex = (position.xy * size) + screenCenter;\\n  // Position back to clip space\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), clipCenter.zw);\\n}\\n\"","module.exports = \"precision highp float;\\n\\n/** This is the color of the ring */\\nvarying vec4 vertexColor;\\n/**\\n * This is how sharp the ring renders. For tiny rings, it's best to have\\n * less sharpness to better convey the shape of a circle. A good starter setting:\\n * edgeSharpness = mix(0.8, 0.01, min(gl_PointSize / 45.0, 1.0));\\n */\\nvarying float edgeSharpness;\\n/**\\n * This should be a value that sets the thickness of the ring in normal space\\n * relative to the PointSize\\n */\\nvarying float borderSize;\\n/**\\n * Since this is now a quad instead of a point sprite, this provides what gl_PointCoord\\n * used to provide.\\n */\\nvarying vec2 pointCoord;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius + (radius * 0.01),\\n    dot(dist, dist) * 4.0\\n  );\\n}\\n\\nvoid main() {\\n  float outer_step_factor = circle(pointCoord, 1.0);\\n  float inner_step_factor = circle(pointCoord, 1.0 - borderSize);\\n\\n  gl_FragColor = mix(\\n    mix(                        // Select the outer color outside of the inner radius\\n      vec4(0.0, 0.0, 0.0, 0.0),    // Select invisible outside of inner and outer radius\\n      vertexColor,                  // Select outer color outside of inner, but inside outer\\n      outer_step_factor\\n    ),\\n    vec4(0.0, 0.0, 0.0, 0.0),                 // Select inner color inside inner\\n    inner_step_factor\\n  );\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar max = Math.max;\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar RingLayer = /** @class */ (function (_super) {\n    __extends(RingLayer, _super);\n    function RingLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    RingLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given circle\n            boundsAccessor: function (ring) { return new primitives_1.Bounds({\n                height: ring.radius * 2,\n                width: ring.radius * 2,\n                x: ring.x - ring.radius,\n                y: ring.y - ring.radius,\n            }); },\n            // Provide a precise hit test for the ring\n            hitTest: function (ring, point, view) {\n                var r = ring.radius / max.apply(void 0, view.camera.scale);\n                var delta = [\n                    point.x - ring.x,\n                    point.y - ring.y,\n                ];\n                return (delta[0] * delta[0] + delta[1] * delta[1]) < (r * r);\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    RingLayer.prototype.initShader = function () {\n        var scaleFactor = this.props.scaleFactor || (function () { return 1; });\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: -1,\n            1: -1,\n            2: -1,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./ring-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'center',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'radius',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.radius]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.color; },\n                },\n                {\n                    block: 2,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'thickness',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.thickness]; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (_) { return [scaleFactor()]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./ring-layer.vs'),\n        };\n    };\n    RingLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    RingLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return RingLayer;\n}(layer_1.Layer));\nexports.RingLayer = RingLayer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar util_1 = require(\"../../util\");\nvar RingInstance = /** @class */ (function (_super) {\n    __extends(RingInstance, _super);\n    function RingInstance(options) {\n        var _this = _super.call(this, options) || this;\n        _this.color = [1.0, 1.0, 1.0, 1.0];\n        _this.depth = 0;\n        _this.radius = 0;\n        _this.thickness = 1;\n        _this.x = 0;\n        _this.y = 0;\n        _this.color = options.color || [1, 1, 1, 1];\n        _this.depth = options.depth || 0;\n        _this.radius = options.radius;\n        _this.thickness = options.thickness || _this.thickness;\n        _this.x = options.x;\n        _this.y = options.y;\n        return _this;\n    }\n    Object.defineProperty(RingInstance.prototype, \"width\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RingInstance.prototype, \"height\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RingInstance.prototype, \"innerRadius\", {\n        get: function () {\n            return this.radius - this.thickness;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        mobx_1.observable\n    ], RingInstance.prototype, \"color\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RingInstance.prototype, \"depth\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RingInstance.prototype, \"radius\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RingInstance.prototype, \"thickness\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RingInstance.prototype, \"x\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RingInstance.prototype, \"y\", void 0);\n    __decorate([\n        mobx_1.computed\n    ], RingInstance.prototype, \"width\", null);\n    __decorate([\n        mobx_1.computed\n    ], RingInstance.prototype, \"height\", null);\n    __decorate([\n        mobx_1.computed\n    ], RingInstance.prototype, \"innerRadius\", null);\n    return RingInstance;\n}(util_1.Instance));\nexports.RingInstance = RingInstance;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./ring-instance\"));\n__export(require(\"./ring-layer\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar instance_1 = require(\"../../util/instance\");\nvar types_1 = require(\"../types\");\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nvar anchorCalculator = (_a = {},\n    _a[types_1.AnchorType.TopLeft] = function (anchor, rectangle) {\n        anchor.x = -anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopMiddle] = function (anchor, rectangle) {\n        anchor.x = rectangle.width / 2.0;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopRight] = function (anchor, rectangle) {\n        anchor.x = rectangle.width + anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.MiddleLeft] = function (anchor, rectangle) {\n        anchor.x = -anchor.padding;\n        anchor.y = rectangle.height / 2;\n    },\n    _a[types_1.AnchorType.Middle] = function (anchor, rectangle) {\n        anchor.x = rectangle.width / 2.0;\n        anchor.y = rectangle.height / 2.0;\n    },\n    _a[types_1.AnchorType.MiddleRight] = function (anchor, rectangle) {\n        anchor.x = rectangle.width + anchor.padding;\n        anchor.y = rectangle.height / 2.0;\n    },\n    _a[types_1.AnchorType.BottomLeft] = function (anchor, rectangle) {\n        anchor.x = -anchor.padding;\n        anchor.y = rectangle.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomMiddle] = function (anchor, rectangle) {\n        anchor.x = rectangle.width / 2.0;\n        anchor.y = rectangle.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomRight] = function (anchor, rectangle) {\n        anchor.x = rectangle.width + anchor.padding;\n        anchor.y = rectangle.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.Custom] = function (anchor, rectangle) {\n        anchor.x = anchor.x || 0;\n        anchor.y = anchor.y || 0;\n    },\n    _a);\n/**\n * This generates a new rectangle instance which will render a single line of text for a given layer.\n * There are restrictions surrounding rectangles due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a rectangle via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Rectangles should only be so long.\n * - Multiline is not supported inherently\n * - Once a rectangle is constructed, only SOME properties can be altered thereafter\n *\n * A rectangle that is constructed can only have some properties set upon creating the rectangle and are locked\n * thereafter. The only way to modify them would be to destroy the rectangle, then construct a new rectangle\n * with the modifications. This has to deal with performance regarding rasterizing the rectangle\n */\nvar RectangleInstance = /** @class */ (function (_super) {\n    __extends(RectangleInstance, _super);\n    function RectangleInstance(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the rendered color of the rectangle */\n        _this.color = [0, 0, 0, 1];\n        /** Depth sorting of the rectangle (or the z value of the lable) */\n        _this.depth = 0;\n        /** The height of the rectangle as it is to be rendered in world space */\n        _this.height = 1;\n        /** Sets the way the rectangle scales with the world */\n        _this.scaling = types_1.ScaleType.BOUND_MAX;\n        /** The width of the rectangle as it is to be rendered in world space */\n        _this.width = 1;\n        /** The x coordinate where the rectangle will be anchored to in world space */\n        _this.x = 0;\n        /** The y coordinate where the rectangle will be anchored to in world space */\n        _this.y = 0;\n        // These are properties that can be altered, but have side effects from being changed\n        /** This is the anchor location on the  */\n        _this._anchor = {\n            padding: 0,\n            type: types_1.AnchorType.TopLeft,\n            x: 0,\n            y: 0,\n        };\n        _this.depth = options.depth || _this.depth;\n        _this.color = options.color || _this.color;\n        _this.scaling = options.scaling || _this.scaling;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        _this.width = options.width || 1;\n        _this.height = options.height || 1;\n        // Make sure the anchor is set to the appropriate location\n        options.anchor && _this.setAnchor(options.anchor);\n        return _this;\n    }\n    Object.defineProperty(RectangleInstance.prototype, \"anchor\", {\n        get: function () {\n            return this._anchor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This applies a new anchor to this rectangle and properly determines it's anchor position on the rectangle\n     */\n    RectangleInstance.prototype.setAnchor = function (anchor) {\n        var newAnchor = {\n            padding: anchor.padding || 0,\n            type: anchor.type,\n            x: anchor.x || 0,\n            y: anchor.y || 0,\n        };\n        // Calculate the new anchors position values\n        anchorCalculator[newAnchor.type](newAnchor, this);\n        // Apply the anchor\n        this._anchor = newAnchor;\n    };\n    __decorate([\n        mobx_1.observable\n    ], RectangleInstance.prototype, \"color\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RectangleInstance.prototype, \"depth\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RectangleInstance.prototype, \"height\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RectangleInstance.prototype, \"scaling\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RectangleInstance.prototype, \"width\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RectangleInstance.prototype, \"x\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RectangleInstance.prototype, \"y\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RectangleInstance.prototype, \"_anchor\", void 0);\n    __decorate([\n        mobx_1.computed\n    ], RectangleInstance.prototype, \"anchor\", null);\n    return RectangleInstance;\n}(instance_1.Instance));\nexports.RectangleInstance = RectangleInstance;\nvar _a;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the image as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the image is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y;\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float((cameraScale.x > cameraScale.y || cameraScale.y > cameraScale.x) && useScaleMode != 0.0);\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n  // Apply the image's tint as a tint to the image\\n  vertexColor = color * color.a;\\n\\n  // Correct aspect ratio.\\n  size = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * size + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the image\\n  float imageScreenScale = mix(\\n    screenSize.y / size.y,\\n    screenSize.x / size.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the image is supposed to be, then we automagically\\n  // scale down our image to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / imageScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\n\\nvoid main() {\\n  gl_FragColor = vertexColor;\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar types_2 = require(\"../types\");\nvar min = Math.min, max = Math.max;\n/**\n * This layer displays Rectangles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar RectangleLayer = /** @class */ (function (_super) {\n    __extends(RectangleLayer, _super);\n    function RectangleLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    RectangleLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given rectangle\n            boundsAccessor: function (rectangle) {\n                var topLeft = [\n                    rectangle.x - rectangle.anchor.x,\n                    rectangle.y - rectangle.anchor.y,\n                ];\n                return new primitives_1.Bounds({\n                    height: rectangle.height,\n                    width: rectangle.width,\n                    x: topLeft[0],\n                    y: topLeft[1],\n                });\n            },\n            // Provide a precise hit test for the circle\n            hitTest: function (rectangle, point, projection) {\n                // The bounds of the rectangle is in world space, but it does not account for the scale mode of the rectangle.\n                // Here, we will apply the scale mode testing to the rectangle\n                var maxScale = max.apply(void 0, projection.camera.scale);\n                var minScale = min.apply(void 0, projection.camera.scale);\n                // If we scale always then the rectangle stays within it's initial world bounds at all times\n                if (rectangle.scaling === types_2.ScaleType.ALWAYS) {\n                    return true;\n                }\n                // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n                // Rectangle the same size. If the camera zooms out then the bounds === the world bounds.\n                else if (rectangle.scaling === types_2.ScaleType.BOUND_MAX) {\n                    // We are zooming out. the bounds will stay within the world bounds\n                    if (minScale <= 1 && maxScale <= 1) {\n                        return true;\n                    }\n                    // We are zooming in. The bounds will shrink to keep the rectangle at max font size\n                    else {\n                        // The location is within the world, but we reverse project the anchor spread\n                        var topLeft = [\n                            rectangle.x - (rectangle.anchor.x / maxScale),\n                            rectangle.y - (rectangle.anchor.y / maxScale),\n                        ];\n                        // Reverse project the size and we should be within the distorted world coordinates\n                        return new primitives_1.Bounds({\n                            height: rectangle.height / maxScale,\n                            width: rectangle.width / maxScale,\n                            x: topLeft[0],\n                            y: topLeft[1],\n                        }).containsPoint(point);\n                    }\n                }\n                // If we never allow the rectangle to scale, then the bounds will grow and shrink to counter the effects\n                // Of the camera zoom\n                else if (rectangle.scaling === types_2.ScaleType.NEVER) {\n                    // The location is within the world, but we reverse project the anchor spread\n                    var topLeft = projection.worldToScreen({\n                        x: rectangle.x - (rectangle.anchor.x / projection.camera.scale[0]),\n                        y: rectangle.y - (rectangle.anchor.y / projection.camera.scale[1]),\n                    });\n                    var screenPoint = projection.worldToScreen(point);\n                    // Reverse project the size and we should be within the distorted world coordinates\n                    return new primitives_1.Bounds({\n                        height: rectangle.height,\n                        width: rectangle.width,\n                        x: topLeft.x,\n                        y: topLeft.y,\n                    }).containsPoint(screenPoint);\n                }\n                return true;\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    RectangleLayer.prototype.initShader = function () {\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: 0,\n            1: 0,\n            2: 0,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./rectangle-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'location',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'anchor',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.anchor.x, o.anchor.y]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'size',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.width, o.height]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'scaling',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scaling]; },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.color; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (u) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./rectangle-layer.vs'),\n        };\n    };\n    RectangleLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    RectangleLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return RectangleLayer;\n}(layer_1.Layer));\nexports.RectangleLayer = RectangleLayer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./rectangle-layer\"));\n__export(require(\"./rectangle-instance\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar instance_1 = require(\"../../util/instance\");\nvar EdgeInstance = /** @class */ (function (_super) {\n    __extends(EdgeInstance, _super);\n    function EdgeInstance(options) {\n        var _this = _super.call(this, options) || this;\n        _this.colorStart = [1.0, 1.0, 1.0, 1.0];\n        _this.colorEnd = [1.0, 1.0, 1.0, 1.0];\n        _this.control = [[0, 0], [0, 0]];\n        _this.depth = 0;\n        _this.end = [0, 0];\n        _this.start = [0, 0];\n        _this.widthStart = 1.0;\n        _this.widthEnd = 1.0;\n        _this.colorStart = options.colorStart || _this.colorStart;\n        _this.colorEnd = options.colorEnd || _this.colorEnd;\n        _this.control = options.control || _this.control;\n        _this.depth = options.depth || _this.depth;\n        _this.end = options.end || _this.end;\n        _this.widthStart = options.widthStart || _this.widthStart;\n        _this.widthEnd = options.widthEnd || _this.widthEnd;\n        _this.start = options.start || _this.start;\n        return _this;\n    }\n    Object.defineProperty(EdgeInstance.prototype, \"length\", {\n        get: function () {\n            var delta = [\n                this.end[0] - this.start[0],\n                this.end[1] - this.start[1],\n            ];\n            return Math.sqrt(delta[0] * delta[0] + delta[1] * delta[1]);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EdgeInstance.prototype, \"midpoint\", {\n        /**\n         * Calculates the midpoint of the edge\n         */\n        get: function () {\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EdgeInstance.prototype, \"perpendicular\", {\n        /**\n         * Calculates a perpendicular direction vector to the edge\n         */\n        get: function () {\n            var length = this.length;\n            return [\n                (this.end[1] - this.start[1]) / length,\n                -(this.end[0] - this.start[0]) / length,\n            ];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Applies the edge width to the start and end\n     */\n    EdgeInstance.prototype.setEdgeWidth = function (width) {\n        if (width) {\n            this.widthEnd = width;\n            this.widthStart = width;\n        }\n    };\n    /**\n     * Applies the color to the start and end\n     */\n    EdgeInstance.prototype.setColor = function (color) {\n        this.colorStart = color;\n        this.colorEnd = color;\n    };\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"colorStart\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"colorEnd\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"control\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"depth\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"end\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"start\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"widthStart\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"widthEnd\", void 0);\n    __decorate([\n        mobx_1.computed\n    ], EdgeInstance.prototype, \"length\", null);\n    __decorate([\n        mobx_1.computed\n    ], EdgeInstance.prototype, \"midpoint\", null);\n    __decorate([\n        mobx_1.computed\n    ], EdgeInstance.prototype, \"perpendicular\", null);\n    return EdgeInstance;\n}(instance_1.Instance));\nexports.EdgeInstance = EdgeInstance;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\n\\nvoid main() {\\n  gl_FragColor = vertexColor;\\n}\\n\"","module.exports = \"/**\\n  This vertex shader calculates edges based in world space to make an edge based on\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nprecision highp float;\\n\\nvarying vec4 vertexColor;\\n\\n// Interpolation type injection\\n${interpolation}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n\\n  // Convert our world points to screen space\\n  vec4 startClip = clipSpace(vec3(start, depth));\\n  vec4 endClip = clipSpace(vec3(end, depth));\\n  vec2 startScreen = (startClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  vec2 endScreen = (endClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Controls for this mode are screen space deltas from the end points\\n  vec2 control1 = startScreen + vec2(control.x, -control.y) * scaleFactor;\\n  vec2 control2 = endScreen + vec2(control.z, -control.w) * scaleFactor;\\n\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, startScreen, endScreen, control1, control2);\\n  // Calculate the next and previous segment's location on the line\\n  vec2 prePosition = interpolation(interpolationTime - interpolationIncrement, startScreen, endScreen, control1, control2);\\n  vec2 nextPosition = interpolation(interpolationTime + interpolationIncrement, startScreen, endScreen, control1, control2);\\n\\n  vec2 preLine = prePosition - currentPosition;\\n  vec2 nextLine = nextPosition - currentPosition;\\n\\n  // Get a spliced nromal at the joining of two segments to make a crisper curve\\n  vec2 currentNormal = mix(\\n    // Pick this value if we're at the beginning of the line\\n    normalize(vec2(preLine.y, -preLine.x)),\\n    mix(\\n      // Pick this value when we're between the ends\\n      normalize(vec2(preLine.y, -preLine.x) + vec2(-nextLine.y, nextLine.x)),\\n      // Pick this value if we're at the end of the line\\n      normalize(vec2(-nextLine.y, nextLine.x)),\\n      float(position.x >= 1.0)\\n    ),\\n    float(position.x > 0.0)\\n  );\\n\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (-normal * lineThickness * scaleFactor);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a;\\n\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), startClip.zw);\\n  gl_PointSize = 5.0;\\n}\\n\"","module.exports = \"precision highp float;\\n\\n/**\\n  This vertex shader calculates edges whose curve and width is in screen space where the curve is\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nvarying vec4 vertexColor;\\n\\n// Interpolation type injection\\n${interpolation}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, start, end, control.xy, control.zw);\\n  // Calculate the next and previous segment's location on the line\\n  vec2 prePosition = interpolation(interpolationTime - interpolationIncrement, start, end, control.xy, control.zw);\\n  vec2 nextPosition = interpolation(interpolationTime + interpolationIncrement, start, end, control.xy, control.zw);\\n\\n  vec2 preLine = prePosition - currentPosition;\\n  vec2 nextLine = nextPosition - currentPosition;\\n\\n  // Get a spliced nromal at the joining of two segments to make a crisper curve\\n  vec2 currentNormal = mix(\\n    // Pick this value if we're at the beginning of the line\\n    normalize(vec2(preLine.y, -preLine.x)),\\n    mix(\\n      // Pick this value when we're between the ends\\n      normalize(vec2(preLine.y, -preLine.x) + vec2(-nextLine.y, nextLine.x)),\\n      // Pick this value if we're at the end of the line\\n      normalize(vec2(-nextLine.y, nextLine.x)),\\n      float(position.x >= 1.0)\\n    ),\\n    float(position.x > 0.0)\\n  );\\n\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (normal * lineThickness);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a;\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n  gl_PointSize = 5.0;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  float t1 = 1.0 - t;\\n  return pow(t1, 3.0) * p1 + 3.0 * t * pow(t1, 2.0) * c1 + 3.0 * pow(t, 2.0) * t1 * c2 + pow(t, 3.0) * p2;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return (1.0 - t) * (1.0 - t) * p1 + 2.0 * t * (1.0 - t) * c1 + t * t * p2;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return p1 + (p2 - p1) * t;\\n}\\n\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\nvar vector_1 = require(\"../../util/vector\");\nvar types_1 = require(\"./types\");\nvar pow = Math.pow;\n/** This is an interpolation across a line */\nfunction linear(t, p1, p2, c1, c2) {\n    return vector_1.add2(vector_1.scale2(vector_1.subtract2(p2, p1), t), p1);\n}\n/** This is an interpolation across a bezier curve, single control */\nfunction bezier(t, p1, p2, c1, c2) {\n    return [\n        (1.0 - t) * (1.0 - t) * p1[0] + 2.0 * t * (1.0 - t) * c1[0] + t * t * p2[0],\n        (1.0 - t) * (1.0 - t) * p1[1] + 2.0 * t * (1.0 - t) * c1[1] + t * t * p2[1],\n    ];\n}\n/** This is an interpolation across a bezier curve, double control */\nfunction bezier2(t, p1, p2, c1, c2) {\n    var t1 = 1.0 - t;\n    return [\n        (pow(t1, 3.0) * p1[0]) + (3.0 * t * pow(t1, 2.0) * c1[0]) + (3.0 * pow(t, 2.0) * t1 * c2[0]) + (pow(t, 3.0) * p2[0]),\n        (pow(t1, 3.0) * p1[1]) + (3.0 * t * pow(t1, 2.0) * c1[1]) + (3.0 * pow(t, 2.0) * t1 * c2[1]) + (pow(t, 3.0) * p2[1]),\n    ];\n}\n/** A quick lookup for an interpolation method based on Edge Type */\nvar interpolation = (_a = {},\n    _a[types_1.EdgeType.LINE] = linear,\n    _a[types_1.EdgeType.BEZIER] = bezier,\n    _a[types_1.EdgeType.BEZIER2] = bezier2,\n    _a);\n/** Converts a point array to a point object */\nfunction toPointObject(point) {\n    return {\n        x: point[0],\n        y: point[1],\n    };\n}\n/** Converts a point object to a point array */\nfunction toPointArray(point) {\n    return [\n        point.x,\n        point.y,\n    ];\n}\n/** Takes two points that forms a line then calculates the nearest distance from that line to the third point */\nfunction distanceTo(start, end, p) {\n    // Make a vector from a line point to the indicated point\n    var vector = vector_1.subtract2(start, p);\n    var lineDirection = vector_1.subtract2(end, start);\n    var lineNormal = [lineDirection[1], -lineDirection[0]];\n    var distance = Math.abs(vector_1.dot2(vector, lineNormal)) / vector_1.length2(lineDirection);\n    // The distance is d = |v . r| where v is a unit perpendicular vector to the Line\n    return distance;\n}\n// This sets the number of iterations along a curve we sample to test collisions with\nvar TEST_RESOLUTION = 50;\n/**\n * This generates the picking methods needed for managing PickType.ALL for the edge layer.\n */\nfunction edgePicking(props) {\n    var broadphase = props.broadphase, _a = props.minPickDistance, minPickDistance = _a === void 0 ? 0 : _a, scaleType = props.scaleType, type = props.type;\n    var interpolate = interpolation[props.type];\n    var boundsAccessor = function (edge) {\n        var edgeWidthStart = edge.widthStart / 2 + minPickDistance;\n        var edgeWidthEnd = edge.widthEnd / 2 + minPickDistance;\n        // Encapsulate the endpoints as they are guaranteed to be included in the shape\n        // Each endpoint will be a box that includes the endpoint thickness\n        var bounds = new bounds_1.Bounds({\n            height: edge.widthStart,\n            width: edge.widthStart,\n            x: edge.start[0] - edgeWidthStart,\n            y: edge.start[1] - edgeWidthStart,\n        });\n        bounds.encapsulate(new bounds_1.Bounds({\n            height: edge.widthEnd,\n            width: edge.widthEnd,\n            x: edge.end[0] - edgeWidthEnd,\n            y: edge.end[1] - edgeWidthEnd,\n        }));\n        // Encapsulating the bezier control points is enough of a broadphase for beziers\n        if (props.type === types_1.EdgeType.BEZIER) {\n            bounds.encapsulate({\n                x: edge.control[0][0],\n                y: edge.control[0][1],\n            });\n        }\n        // Encapsulating the bezier control points is enough of a broadphase for beziers\n        else if (props.type === types_1.EdgeType.BEZIER2) {\n            bounds.encapsulate({\n                x: edge.control[0][0],\n                y: edge.control[0][1],\n            });\n            bounds.encapsulate({\n                x: edge.control[1][0],\n                y: edge.control[1][1],\n            });\n        }\n        if (broadphase === types_1.EdgeBroadphase.PASS_X) {\n            bounds.x = Number.MIN_SAFE_INTEGER / 2;\n            bounds.width = Number.MAX_SAFE_INTEGER;\n        }\n        if (broadphase === types_1.EdgeBroadphase.PASS_Y) {\n            bounds.y = Number.MIN_SAFE_INTEGER / 2;\n            bounds.height = Number.MAX_SAFE_INTEGER;\n        }\n        return bounds;\n    };\n    if (scaleType === types_1.EdgeScaleType.SCREEN_CURVE) {\n        return {\n            // Provide the calculated AABB world bounds for a given circle\n            boundsAccessor: boundsAccessor,\n            // Provide a precise hit test for the edge. This method performs all of the rendering\n            // And hit tests within screen space as opposed to world space.\n            hitTest: function (edge, point, view) {\n                point = view.worldToScreen(point);\n                var mouse = [point.x, point.y];\n                var closestIndex = 0;\n                var closestDistance = Number.MAX_VALUE;\n                var secondClosestIndex = 0;\n                var secondClosestDistance = Number.MAX_VALUE;\n                var start = view.worldToScreen(toPointObject(edge.start));\n                var end = view.worldToScreen(toPointObject(edge.end));\n                var control1, control2;\n                if (type === types_1.EdgeType.BEZIER) {\n                    control1 = vector_1.add2(toPointArray(start), edge.control[0]);\n                }\n                else if (type === types_1.EdgeType.BEZIER2) {\n                    control1 = vector_1.add2(toPointArray(start), edge.control[0]);\n                    control2 = vector_1.add2(toPointArray(end), edge.control[1]);\n                }\n                var startPoint = toPointArray(start);\n                var endPoint = toPointArray(end);\n                control1 = edge.control.length > 0 ? control1 : [0, 0];\n                control2 = edge.control.length > 1 ? control2 : [0, 0];\n                // Loop through sample points on the line and find one that is closest to the mouse point as possible\n                for (var i = 0; i < TEST_RESOLUTION; ++i) {\n                    var linePoint = interpolate(i / TEST_RESOLUTION, startPoint, endPoint, control1, control2);\n                    var distance = vector_1.length2(vector_1.subtract2(mouse, linePoint));\n                    if (distance < closestDistance) {\n                        secondClosestIndex = closestIndex;\n                        secondClosestDistance = closestDistance;\n                        closestIndex = i;\n                        closestDistance = distance;\n                    }\n                    else if (distance < secondClosestDistance) {\n                        secondClosestIndex = i;\n                        closestDistance = distance;\n                    }\n                }\n                var t = closestIndex / TEST_RESOLUTION;\n                var lineWidth = (edge.widthEnd - edge.widthStart) * t + edge.widthStart;\n                if (closestIndex === secondClosestIndex) {\n                    return false;\n                }\n                var startSegment = interpolate(closestIndex / TEST_RESOLUTION, startPoint, endPoint, control1, control2);\n                var endSegment = interpolate(secondClosestIndex / TEST_RESOLUTION, startPoint, endPoint, control1, control2);\n                // See how close the mouse is to the line between the two closest points for a more accurate\n                // Test\n                closestDistance = distanceTo(startSegment, endSegment, mouse);\n                // This helps determine if the mouse is beyond the end point\n                if (vector_1.dot2(vector_1.subtract2(endSegment, startSegment), vector_1.subtract2(mouse, startSegment)) < 0) {\n                    return false;\n                }\n                return closestDistance < ((lineWidth / 2.0) + minPickDistance);\n            },\n        };\n    }\n    return {\n        // Provide the calculated AABB world bounds for a given circle\n        boundsAccessor: boundsAccessor,\n        // Provide a precise hit test for the edge\n        hitTest: function (edge, point, view) {\n            var mouse = [point.x, point.y];\n            var closestIndex = 0;\n            var closestDistance = Number.MAX_VALUE;\n            // Loop through sample points on the line and find one that is closest to the mouse point as possible\n            for (var i = 0; i < TEST_RESOLUTION; ++i) {\n                var linePoint = interpolate(i / TEST_RESOLUTION, edge.start, edge.end, edge.control.length > 0 ? edge.control[0] : [0, 0], edge.control.length > 1 ? edge.control[1] : [0, 0]);\n                var distance = vector_1.length2(vector_1.subtract2(mouse, linePoint));\n                if (distance < closestDistance) {\n                    closestIndex = i;\n                    closestDistance = distance;\n                }\n            }\n            var t = closestIndex / TEST_RESOLUTION;\n            var lineWidth = (edge.widthEnd - edge.widthStart) * t + edge.widthStart;\n            return closestDistance < (lineWidth / 2.0);\n        },\n    };\n}\nexports.edgePicking = edgePicking;\nvar _a;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar util_1 = require(\"../../util\");\nvar edge_picking_1 = require(\"./edge-picking\");\nvar types_2 = require(\"./types\");\n/** Converts a control list to an IO value */\nfunction toInstanceIOValue(value) {\n    return [\n        value[0][0],\n        value[0][1],\n        value[1][0],\n        value[1][1],\n    ];\n}\n/** This picks the appropriate shader for the edge type desired */\nvar pickVS = (_a = {},\n    _a[types_2.EdgeType.LINE] = require('./shader/edge-layer-line.vs'),\n    _a[types_2.EdgeType.BEZIER] = require('./shader/edge-layer-bezier.vs'),\n    _a[types_2.EdgeType.BEZIER2] = require('./shader/edge-layer-bezier2.vs'),\n    _a);\n/** This is the base edge layer which is a template that can be filled with the needed specifics for a given line type */\nvar baseVS = require('./shader/edge-layer.vs');\nvar screenVS = require('./shader/edge-layer-screen-curve.vs');\nvar edgeFS = require('./shader/edge-layer.fs');\n/**\n * This layer displays edges and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar EdgeLayer = /** @class */ (function (_super) {\n    __extends(EdgeLayer, _super);\n    function EdgeLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    EdgeLayer.prototype.getInstancePickingMethods = function () {\n        return edge_picking_1.edgePicking(this.props);\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    EdgeLayer.prototype.initShader = function () {\n        var _a = this.props, _b = _a.scaleFactor, scaleFactor = _b === void 0 ? function () { return 1; } : _b, type = _a.type, _c = _a.scaleType, scaleType = _c === void 0 ? types_2.EdgeScaleType.NONE : _c;\n        var MAX_SEGMENTS = type === types_2.EdgeType.LINE ? 2 : 50;\n        // Calculate the normals and interpolations for our vertices\n        var vertexToNormal = (_d = {\n                0: 1\n            },\n            _d[MAX_SEGMENTS * 2 + 2] = -1,\n            _d);\n        var vertexInterpolation = (_e = {\n                0: 0\n            },\n            _e[MAX_SEGMENTS * 2 + 2] = 1,\n            _e);\n        var sign = 1;\n        for (var i = 0; i < MAX_SEGMENTS * 2; ++i) {\n            vertexToNormal[i + 1] = sign;\n            vertexInterpolation[i + 1] = Math.floor(i / 2) / (MAX_SEGMENTS - 1);\n            sign *= -1;\n        }\n        var vs = util_1.shaderTemplate(scaleType === types_2.EdgeScaleType.NONE ? baseVS : screenVS, {\n            // Retain the attributes injection\n            attributes: '${attributes}',\n            // Inject the proper interpolation method\n            interpolation: pickVS[type],\n        }, {\n            name: 'Edge Layer',\n            values: [\n                'interpolation',\n            ],\n        });\n        return {\n            fs: edgeFS,\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'start',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return o.start; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'end',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return o.end; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'widthStart',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.widthStart]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.TWO,\n                    name: 'widthEnd',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.widthEnd]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 2,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'colorStart',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.colorStart; },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'colorEnd',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.colorEnd; },\n                },\n                type === types_2.EdgeType.LINE ? {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'control',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return [0, 0, 0, 0]; },\n                } : null,\n                type === types_2.EdgeType.BEZIER ? {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'control',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return [o.control[0][0], o.control[0][1], 0, 0]; },\n                } : null,\n                type === types_2.EdgeType.BEZIER2 ? {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'control',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return toInstanceIOValue(o.control); },\n                } : null,\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (uniform) { return [scaleFactor()]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexInterpolation[vertex],\n                        // The number of vertices\n                        MAX_SEGMENTS * 2,\n                    ]; },\n                },\n            ],\n            vertexCount: MAX_SEGMENTS * 2 + 2,\n            vs: vs.shader,\n        };\n        var _d, _e;\n    };\n    EdgeLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    EdgeLayer.prototype.getMaterialOptions = function () {\n        return {\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    // Set default props for the layer\n    EdgeLayer.defaultProps = {\n        broadphase: types_2.EdgeBroadphase.ALL,\n        data: null,\n        key: 'none',\n        scaleType: types_2.EdgeScaleType.NONE,\n        type: types_2.EdgeType.LINE,\n    };\n    return EdgeLayer;\n}(layer_1.Layer));\nexports.EdgeLayer = EdgeLayer;\nvar _a;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./edge-layer\"));\n__export(require(\"./edge-instance\"));\n__export(require(\"./types\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar instance_1 = require(\"../../util/instance\");\nvar CircleInstance = /** @class */ (function (_super) {\n    __extends(CircleInstance, _super);\n    function CircleInstance(options) {\n        var _this = _super.call(this, options) || this;\n        _this.color = [1.0, 1.0, 1.0, 1.0];\n        _this.radius = 0;\n        _this.x = 0;\n        _this.y = 0;\n        _this.depth = 0;\n        _this.color = options.color || _this.color;\n        _this.radius = options.radius || _this.radius;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        _this.depth = options.depth || _this.depth;\n        return _this;\n    }\n    Object.defineProperty(CircleInstance.prototype, \"width\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CircleInstance.prototype, \"height\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        mobx_1.observable\n    ], CircleInstance.prototype, \"color\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], CircleInstance.prototype, \"radius\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], CircleInstance.prototype, \"x\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], CircleInstance.prototype, \"y\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], CircleInstance.prototype, \"depth\", void 0);\n    __decorate([\n        mobx_1.computed\n    ], CircleInstance.prototype, \"width\", null);\n    __decorate([\n        mobx_1.computed\n    ], CircleInstance.prototype, \"height\", null);\n    return CircleInstance;\n}(instance_1.Instance));\nexports.CircleInstance = CircleInstance;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float edgeSharpnessBase;\\nvarying vec2 pointCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  vertexColor = color * color.a;\\n  float size = radius * scaleFactor;\\n  edgeSharpness = mix(0.8, 0.0, min((size * 6.0 * pixelRatio) / (45.0 * pixelRatio), 1.0));\\n  edgeSharpnessBase = mix(0.1, 0.0, min((size * 6.0 * pixelRatio) / (45.0 * pixelRatio), 1.0));\\n  pointCoord = (position.xy + vec2(1.0, 1.0)) / 2.0;\\n\\n  // Center within clip space\\n  vec4 clipCenter = clipSpace(vec3(center, depth));\\n  // Center in screen space\\n  vec2 screenCenter = (clipCenter.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Position in screen space\\n  vec2 vertex = (position.xy * size) + screenCenter;\\n  // Position back to clip space\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), clipCenter.zw);\\n}\\n\"","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float edgeSharpnessBase;\\nvarying vec2 pointCoord;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius + (radius * edgeSharpnessBase),\\n    dot(dist, dist) * 4.0\\n  );\\n}\\n\\nvoid main() {\\n  float step_factor = circle(pointCoord, 1.0);\\n  gl_FragColor = mix(\\n    vec4(0.0, 0.0, 0.0, 0.0),\\n    vertexColor,\\n    step_factor\\n  );\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar CircleLayer = /** @class */ (function (_super) {\n    __extends(CircleLayer, _super);\n    function CircleLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    CircleLayer.prototype.getInstancePickingMethods = function () {\n        var _this = this;\n        return {\n            // Provide the calculated AABB world bounds for a given circle\n            boundsAccessor: function (circle) { return new primitives_1.Bounds({\n                height: circle.radius * 2,\n                width: circle.radius * 2,\n                x: circle.x - circle.radius,\n                y: circle.y - circle.radius,\n            }); },\n            // Provide a precise hit test for the circle\n            hitTest: function (circle, point, view) {\n                var circleScreenCenter = view.worldToScreen(circle);\n                var mouseScreen = view.worldToScreen(point);\n                var r = circle.radius * _this.props.scaleFactor();\n                var delta = [\n                    mouseScreen.x - circleScreenCenter.x,\n                    mouseScreen.y - circleScreenCenter.y,\n                ];\n                return (delta[0] * delta[0] + delta[1] * delta[1]) < (r * r);\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    CircleLayer.prototype.initShader = function () {\n        var scaleFactor = this.props.scaleFactor || (function () { return 1; });\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: -1,\n            1: -1,\n            2: -1,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./circle-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'center',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (circle) { return [circle.x, circle.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'radius',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (circle) { return [circle.radius]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (circle) { return [circle.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (circle) { return circle.color; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (uniform) { return [scaleFactor()]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./circle-layer.vs'),\n        };\n    };\n    CircleLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    CircleLayer.prototype.getMaterialOptions = function () {\n        return {\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    CircleLayer.defaultProps = {\n        data: null,\n        fadeOutOversized: -1,\n        key: '',\n        scaleFactor: function () { return 1; },\n    };\n    return CircleLayer;\n}(layer_1.Layer));\nexports.CircleLayer = CircleLayer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./circle-layer\"));\n__export(require(\"./circle-instance\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./circles\"));\n__export(require(\"./edges\"));\n__export(require(\"./images\"));\n__export(require(\"./labels\"));\n__export(require(\"./rectangle\"));\n__export(require(\"./rings\"));\n__export(require(\"./types\"));\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar label_atlas_resource_1 = require(\"./label-atlas-resource\");\nfunction toInstanceIOValue(texture) {\n    // If the texture is not defined we just output an empty reference\n    if (!texture) {\n        return [0, 0, 0, 0];\n    }\n    // Otherwise, we return the atlas information of the texture\n    return [\n        texture.atlasTL.x,\n        texture.atlasTL.y,\n        texture.atlasBR.x,\n        texture.atlasBR.y,\n    ];\n}\n/**\n * This class is responsible for tracking resources requested to be placed on an Atlas.\n * This makes sure the resource is uploaded and then properly cached so similar requests\n * return already existing resources. This also manages instances waiting for the resource\n * to be made available.\n */\nvar AtlasResourceManager = /** @class */ (function () {\n    function AtlasResourceManager(options) {\n        /** This is the atlas currently targetted by requests */\n        this.targetAtlas = '';\n        /** This stores all of the requests awaiting dequeueing */\n        this.requestQueue = new Map();\n        /**\n         * This tracks if a resource is already in the request queue. This also stores ALL instances awaiting the resource.\n         */\n        this.requestLookup = new Map();\n        this.atlasManager = options.atlasManager;\n    }\n    /**\n     * This dequeues all instance requests for a resource and processes the request which will\n     * inevitably make the instance active\n     */\n    AtlasResourceManager.prototype.dequeueRequests = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var didDequeue, _loop_1, this_1, _i, _a, _b, targetAtlas, resources;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        didDequeue = false;\n                        _loop_1 = function (targetAtlas, resources) {\n                            var requests, atlasRequests_1;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        if (!(resources.length > 0)) return [3 /*break*/, 2];\n                                        // We did dequeue\n                                        didDequeue = true;\n                                        requests = resources.slice(0);\n                                        // Empty the queue to begin taking in new requests as needed\n                                        resources.length = 0;\n                                        // Tell the atlas manager to update with all of the requested resources\n                                        return [4 /*yield*/, this_1.atlasManager.updateAtlas(targetAtlas, requests)];\n                                    case 1:\n                                        // Tell the atlas manager to update with all of the requested resources\n                                        _a.sent();\n                                        atlasRequests_1 = this_1.requestLookup.get(targetAtlas);\n                                        if (atlasRequests_1) {\n                                            // Once the manager has been updated, we can now flag all of the instances waiting for the resources\n                                            // As active, which should thus trigger an update to the layers to perform a diff for each instance\n                                            requests.forEach(function (resource) {\n                                                var request = atlasRequests_1.get(resource);\n                                                atlasRequests_1.delete(resource);\n                                                if (request) {\n                                                    for (var _i = 0, request_1 = request; _i < request_1.length; _i++) {\n                                                        var _a = request_1[_i], layer = _a[0], instance = _a[1];\n                                                        // If the instance is still associated with a cluster, then the instance can be activated. Having\n                                                        // A cluster is indicative the instance has not been deleted.\n                                                        if (layer.uniformManager.getUniforms(instance)) {\n                                                            instance.active = true;\n                                                        }\n                                                    }\n                                                }\n                                            });\n                                        }\n                                        _a.label = 2;\n                                    case 2: return [2 /*return*/];\n                                }\n                            });\n                        };\n                        this_1 = this;\n                        _i = 0, _a = Array.from(this.requestQueue.entries());\n                        _c.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3 /*break*/, 4];\n                        _b = _a[_i], targetAtlas = _b[0], resources = _b[1];\n                        return [5 /*yield**/, _loop_1(targetAtlas, resources)];\n                    case 2:\n                        _c.sent();\n                        _c.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/, didDequeue];\n                }\n            });\n        });\n    };\n    /**\n     * Free ALL resources managed under this resource manager\n     */\n    AtlasResourceManager.prototype.destroy = function () {\n        this.atlasManager.destroy();\n    };\n    /**\n     * This retrieves the actual atlas texture that should be applied to a uniform's\n     * value.\n     */\n    AtlasResourceManager.prototype.getAtlasTexture = function (key) {\n        var atlas = this.atlasManager.getAtlasTexture(key);\n        if (atlas) {\n            return atlas.texture;\n        }\n        return null;\n    };\n    /**\n     * This is a request for atlas texture resources. It will produce either the coordinates needed to\n     * make valid texture lookups, or it will trigger a loading of resources to an atlas and cause an\n     * automated deactivation and reactivation of the instance.\n     */\n    AtlasResourceManager.prototype.request = function (layer, instance, resource) {\n        var texture = resource.texture;\n        // If the texture is ready and available, then we simply return the IO values\n        if (texture) {\n            return toInstanceIOValue(texture);\n        }\n        if (resource instanceof label_atlas_resource_1.LabelAtlasResource) {\n            if (!resource.label.text) {\n                return toInstanceIOValue(texture);\n            }\n        }\n        // If a request is already made, then we must save the instance making the request for deactivation and\n        // Reactivation but without any additional atlas loading\n        var atlasRequests = this.requestLookup.get(this.targetAtlas);\n        if (atlasRequests) {\n            var existingRequests = atlasRequests.get(resource);\n            if (existingRequests) {\n                existingRequests.push([layer, instance]);\n                instance.active = false;\n                return toInstanceIOValue(texture);\n            }\n        }\n        else {\n            atlasRequests = new Map();\n            this.requestLookup.set(this.targetAtlas, atlasRequests);\n        }\n        // If the texture is not available, then we must load the resource, deactivate the instance\n        // And wait for the resource to become available. Once the resource is available, the system\n        // Must activate the instance to render the resource.\n        instance.active = false;\n        var requests = this.requestQueue.get(this.targetAtlas);\n        if (!requests) {\n            requests = [];\n            this.requestQueue.set(this.targetAtlas, requests);\n        }\n        requests.push(resource);\n        atlasRequests.set(resource, [[layer, instance]]);\n        // This returns essentially returns blank values for the resource lookup\n        return toInstanceIOValue(texture);\n    };\n    /**\n     * This is used by the system to target the correct atlas for subsequent requests to a resource.\n     */\n    AtlasResourceManager.prototype.setTargetAtlas = function (target) {\n        this.targetAtlas = target;\n    };\n    return AtlasResourceManager;\n}());\nexports.AtlasResourceManager = AtlasResourceManager;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../../types\");\nvar event_manager_1 = require(\"../event-manager\");\n/**\n * This class is an injected event manager for the surface, it specifically handles taking in mouse events intended for view interactions\n * and broadcasts them to the layers that have picking enabled, thus allowing the layers to respond to\n * mouse view locations and broadcast Instance interactions based on the interaction with the View the layer is a part of\n *\n * In Summary: This is an adapter that takes in interactions to the views and injects those events into the layers associated with\n * the views so that the layers can translate the events to gestures.\n */\nvar LayerMouseEvents = /** @class */ (function (_super) {\n    __extends(LayerMouseEvents, _super);\n    function LayerMouseEvents(sceneViews) {\n        var _this = _super.call(this) || this;\n        /** This tracks which views have the mouse over them so we can properly broadcast view is out events */\n        _this.isOver = new Map();\n        _this.sceneViews = sceneViews;\n        return _this;\n    }\n    LayerMouseEvents.prototype.getSceneViewsUnderMouse = function (e) {\n        var sceneViewByViewId = new Map();\n        // Map the scene views by the view's identifiers\n        for (var _i = 0, _a = this.sceneViews; _i < _a.length; _i++) {\n            var sceneView = _a[_i];\n            sceneViewByViewId.set(sceneView.view.id, sceneView);\n        }\n        // Now retrieve and convert each view under the mouse to the scene view it coincides with\n        return e.viewsUnderMouse.map(function (viewItem) { return sceneViewByViewId.get(viewItem.view.id); });\n    };\n    LayerMouseEvents.prototype.getMouseByViewId = function (e) {\n        // This is the mouse position for the provided view in view space\n        var viewMouseByViewId = new Map();\n        for (var _i = 0, _a = e.viewsUnderMouse; _i < _a.length; _i++) {\n            var viewItem = _a[_i];\n            viewMouseByViewId.set(viewItem.view.id, viewItem.mouse);\n        }\n        return viewMouseByViewId;\n    };\n    LayerMouseEvents.prototype.handleClick = function (e, button) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseClick(view, mouse, button); });\n    };\n    LayerMouseEvents.prototype.handleDrag = function (e, drag) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseDrag(view, mouse); });\n    };\n    LayerMouseEvents.prototype.handleInteraction = function (e, callback) {\n        // Get all of the scenes under the mouse\n        var sceneViews = this.getSceneViewsUnderMouse(e);\n        // Get a lookup of a view id to the mouse position in the view\n        var viewMouseByViewId = this.getMouseByViewId(e);\n        // For every view of every scene, we must tell it's layers it's world space is receiving mouse interactions\n        for (var _i = 0, sceneViews_1 = sceneViews; _i < sceneViews_1.length; _i++) {\n            var sceneView = sceneViews_1[_i];\n            this.handleSceneView(sceneView, viewMouseByViewId, callback);\n        }\n        return sceneViews;\n    };\n    LayerMouseEvents.prototype.handleMouseDown = function (e, button) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseDown(view, mouse, button); });\n    };\n    LayerMouseEvents.prototype.handleMouseUp = function (e, button) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseUp(view, mouse, button); });\n    };\n    LayerMouseEvents.prototype.handleMouseOver = function (e) {\n        // We let the mouse move event handle the registration of moused over views\n    };\n    LayerMouseEvents.prototype.handleMouseOut = function (e) {\n        var _this = this;\n        // Get a lookup of a view id to the mouse position in the view\n        var viewMouseByViewId = this.getMouseByViewId(e);\n        var screen = e.screen.mouse;\n        // All views that are moused over should no longer be considered over and broadcast a mouse out\n        this.isOver.forEach(function (flag, sceneView) {\n            // Since we are leaving the view we must make the view relative cooridinates fromt he screen space coords\n            viewMouseByViewId.set(sceneView.view.id, sceneView.view.screenToView(screen));\n            _this.handleSceneView(sceneView, viewMouseByViewId, function (layer, view, mouse) { return layer.interactions.handleMouseOut(view, mouse); });\n        });\n        // Nothing is over anymore\n        this.isOver.clear();\n    };\n    LayerMouseEvents.prototype.handleMouseMove = function (e) {\n        var _this = this;\n        // Get all of the scenes we have interacted with, and broadcast a move event for each\n        var allSceneViews = this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseMove(view, mouse); });\n        // Get a lookup of a view id to the mouse position in the view\n        var viewMouseByViewId = this.getMouseByViewId(e);\n        // Get the position of the mouse on the screen\n        var screen = e.screen.mouse;\n        // For quick lookups map all of the current SceneViews that are over\n        var currentSceneViews = new Map();\n        allSceneViews.forEach(function (v) { return currentSceneViews.set(v, true); });\n        // Detect which of the views are newly over\n        currentSceneViews.forEach(function (flag, sceneView) {\n            if (!_this.isOver.get(sceneView)) {\n                _this.handleSceneView(sceneView, viewMouseByViewId, function (layer, view, mouse) { return layer.interactions.handleMouseOver(view, mouse); });\n            }\n        });\n        // Detect which of the views are no longer over\n        this.isOver.forEach(function (flag, sceneView) {\n            if (!currentSceneViews.get(sceneView)) {\n                // Since these views were not interacted with, we must create the mouse interaction position\n                viewMouseByViewId.set(sceneView.view.id, sceneView.view.screenToView(screen));\n                _this.handleSceneView(sceneView, viewMouseByViewId, function (layer, view, mouse) { return layer.interactions.handleMouseOut(view, mouse); });\n            }\n        });\n        // Update the current views that are over to the currently over views for next event\n        this.isOver = currentSceneViews;\n    };\n    LayerMouseEvents.prototype.handleSceneView = function (sceneView, viewMouseByViewId, callback) {\n        var view = sceneView.view;\n        var mouse = viewMouseByViewId.get(view.id);\n        for (var _i = 0, _a = sceneView.scene.layers; _i < _a.length; _i++) {\n            var layer = _a[_i];\n            if (layer.picking && layer.picking.type === types_1.PickType.ALL) {\n                callback(layer, view, mouse);\n            }\n        }\n    };\n    LayerMouseEvents.prototype.handleWheel = function (e) {\n        // TODO: This may need to be implemented. As of right now, there is no particular benefit\n    };\n    return LayerMouseEvents;\n}(event_manager_1.EventManager));\nexports.LayerMouseEvents = LayerMouseEvents;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar generate_layer_model_1 = require(\"../surface/generate-layer-model\");\nvar make_instance_uniform_name_1 = require(\"./make-instance-uniform-name\");\n/**\n * This class does a whoooooole lot of making the magical instancing optimization controls possible.\n *\n * Our instancing hackyness comes from the idea that uniforms are fast, and you don't have to commit\n * ALL of them when you touch just a little piece, and you don't have worry about drivers not supporting\n * partial vertex buffer updates.\n *\n * This also is WebGL 1.0 compatible without any extensions that are poorly implemented. And again: does\n * NOT require entire attribute buffer commits.\n *\n * Uniforms are limited for any given draw call. So we have to create multiple materials to support\n * chunks of the instances that need to be drawn. We then have to associate an instance with the set\n * of uniforms that is related to the instance and keep them paired together. If we have too many instances\n * we must generate more buffers to accomodate them.\n *\n * If we remove instances, we must free up the uniform set so that others can use the uniforms. While the uniforms\n * are not in use, the instance should not be rendering.\n */\nvar InstanceUniformManager = /** @class */ (function () {\n    function InstanceUniformManager(layer, scene) {\n        /** The generated buffers by this manager */\n        this.buffers = [];\n        /** The uniform clusters that are free and can be used by an instance */\n        this.availableClusters = [];\n        /** A lookup of an instance to a cluster of uniforms associated with it */\n        this.instanceToCluster = new Map();\n        /** A map of a cluster of uniforms to the buffer it comes from */\n        this.clusterToBuffer = new Map();\n        this.layer = layer;\n        var maxUniformBlock = 0;\n        layer.instanceAttributes.forEach(function (attributes) {\n            maxUniformBlock = Math.max(attributes.block, maxUniformBlock);\n        });\n        this.uniformBlocksPerInstance = maxUniformBlock + 1;\n        this.scene = scene;\n    }\n    /**\n     * This adds an instance to the manager and gives the instance an associative\n     * block of uniforms to work with.\n     */\n    InstanceUniformManager.prototype.add = function (instance) {\n        // If there are no available buffers, we must add a buffer\n        if (this.availableClusters.length <= 0) {\n            this.makeNewBuffer();\n        }\n        var cluster = this.availableClusters.shift();\n        if (cluster) {\n            this.instanceToCluster.set(instance, cluster);\n        }\n        else {\n            console.warn('No valid cluster available for instance added to uniform manager.');\n        }\n        return cluster;\n    };\n    /**\n     * Free all resources this manager may be holding onto\n     */\n    InstanceUniformManager.prototype.destroy = function () {\n        this.buffers.forEach(function (buffer) {\n            buffer.geometry.dispose();\n            buffer.material.dispose();\n        });\n    };\n    /**\n     * This retireves the uniforms associated with an instance, or returns nothing\n     * if the instance has not been associated yet.\n     */\n    InstanceUniformManager.prototype.getUniforms = function (instance) {\n        return this.instanceToCluster.get(instance);\n    };\n    /**\n     * Disassociates an instance with it's group of uniforms and makes the instance\n     * in the buffer no longer drawable.\n     */\n    InstanceUniformManager.prototype.remove = function (instance) {\n        var cluster = this.instanceToCluster.get(instance);\n        // If the instance is associated with a cluster, we can add the cluster back to being available\n        // For another instance.\n        if (cluster) {\n            this.instanceToCluster.delete(instance);\n            this.availableClusters.unshift(cluster);\n        }\n        return cluster;\n    };\n    /**\n     * Clears all elements of this manager from the current scene it was in.\n     */\n    InstanceUniformManager.prototype.removeFromScene = function () {\n        var _this = this;\n        this.buffers.forEach(function (buffer, index) {\n            _this.scene.container.remove(buffer.model);\n        });\n        this.scene = null;\n    };\n    /**\n     * Applies the buffers to the provided scene for rendering.\n     */\n    InstanceUniformManager.prototype.setScene = function (scene) {\n        var _this = this;\n        this.buffers.forEach(function (buffer, index) {\n            _this.scene.container.add(buffer.model);\n        });\n        this.scene = scene;\n    };\n    /**\n     * This generates a new buffer of uniforms to associate instances with.\n     */\n    InstanceUniformManager.prototype.makeNewBuffer = function () {\n        // We generate a new geometry object for the buffer as the geometry\n        // Needs to have it's own unique draw range per buffer for optimal\n        // Performance\n        var newGeometry = new Three.BufferGeometry();\n        this.layer.vertexAttributes.forEach(function (attribute) {\n            newGeometry.addAttribute(attribute.name, attribute.materialAttribute);\n        });\n        // Ensure the draw range covers every instance in the geometry.\n        newGeometry.drawRange.start = 0;\n        newGeometry.drawRange.count = this.layer.maxInstancesPerBuffer * this.layer.instanceVertexCount;\n        // This is the material that is generated for the layer that utilizes all of the generated and\n        // Injected shader IO and shader fragments\n        var newMaterial = this.layer.material.clone();\n        // Now make a Model for the buffer so it can be rendered withn the scene\n        var newModel = generate_layer_model_1.generateLayerModel(this.layer, newGeometry, newMaterial);\n        // We render junkloads of instances in a buffer. Culling will have to happen\n        // On an instance level.\n        newModel.frustumCulled = false;\n        // Make our new buffer which will manage the geometry and everything necessary\n        var buffer = {\n            activeInstances: [],\n            clusters: [],\n            firstInstance: 0,\n            geometry: newGeometry,\n            lastInstance: 0,\n            material: newMaterial,\n            model: newModel,\n        };\n        this.buffers.push(buffer);\n        // Now that we have created a new buffer, we have all of it's uniforms\n        // To use to render more instances. We must take the instancing uniforms\n        // And divvy them up into clusters for our available buffer.\n        var uniformIndex = 0;\n        var uniformName = make_instance_uniform_name_1.makeInstanceUniformNameArray();\n        var instanceData = newMaterial.uniforms[uniformName];\n        // We must ensure the vector objects are TOTALLY unique otherwise they'll get shared across buffers\n        instanceData.value = instanceData.value.map(function () { return new Three.Vector4(0.0, 0.0, 0.0, 0.0); });\n        for (var i = 0, end = this.layer.maxInstancesPerBuffer; i < end; ++i) {\n            var cluster = {\n                instanceIndex: i,\n                uniform: instanceData,\n                uniformRange: [uniformIndex, 0],\n            };\n            uniformIndex += this.uniformBlocksPerInstance;\n            cluster.uniformRange[1] = uniformIndex;\n            buffer.clusters.push(cluster);\n            this.availableClusters.push(cluster);\n            this.clusterToBuffer.set(cluster, buffer);\n        }\n        // Grab the global uniforms from the material and add it to the uniform's materialUniform list so that\n        // We can keep uniforms consistent across all Instances\n        for (var i = 0, end = this.layer.uniforms.length; i < end; ++i) {\n            var uniform = this.layer.uniforms[i];\n            uniform.materialUniforms.push(newMaterial.uniforms[uniform.name]);\n        }\n        // Now that we are ready to utilize the buffer, let's add it to the scene so it may be rendered.\n        // Each new buffer equates to one draw call.\n        if (this.scene) {\n            this.scene.container.add(buffer.model);\n        }\n    };\n    return InstanceUniformManager;\n}());\nexports.InstanceUniformManager = InstanceUniformManager;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nvar maxPopulation = 5;\nvar maxDepth = 10;\n/**\n * This filters a quad tree query by type\n *\n * @export\n * @template T\n */\nfunction filterQuery(type, queryValues) {\n    var filtered = [];\n    queryValues.forEach(function (obj) {\n        if (type.find(function (t) { return obj instanceof t; })) {\n            filtered.push(obj);\n        }\n    });\n    return filtered;\n}\nexports.filterQuery = filterQuery;\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n *\n * @class Quadrants\n */\nvar Quadrants = /** @class */ (function () {\n    /**\n     * Creates an instance of Quadrants.\n     *\n     * @param bounds The bounds this will create quandrants for\n     * @param depth  The child depth of this element\n     *\n     * @memberOf Quadrants\n     */\n    function Quadrants(bounds, depth) {\n        var mid = bounds.mid;\n        this.TL = new Node(bounds.x, mid.x, bounds.y, mid.y, depth);\n        this.TR = new Node(mid.x, bounds.right, bounds.y, mid.y, depth);\n        this.BL = new Node(bounds.x, mid.x, mid.y, bounds.bottom, depth);\n        this.BR = new Node(mid.x, bounds.right, mid.y, bounds.bottom, depth);\n    }\n    /**\n     * Ensures all memory is released for all nodes and all references are removed\n     * to potentially high memory consumption items\n     *\n     * @memberOf Quadrants\n     */\n    Quadrants.prototype.destroy = function () {\n        this.TL.destroy();\n        this.TR.destroy();\n        this.BL.destroy();\n        this.BR.destroy();\n        delete this.TL;\n        delete this.TR;\n        delete this.BL;\n        delete this.BR;\n    };\n    return Quadrants;\n}());\nexports.Quadrants = Quadrants;\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n *\n * @export\n * @class Node\n */\nvar Node = /** @class */ (function () {\n    /**\n     * Creates an instance of Node.\n     *\n     * @param l     The bounding left wall of the space this node covers\n     * @param r     The bounding right wall of the space this node covers\n     * @param t     The bounding top wall of the space this node covers\n     * @param b     The bounding bottom wall of the space this node covers\n     * @param depth The depth within the quad tree this node resides\n     *\n     * @memberOf Node\n     */\n    function Node(left, right, top, bottom, depth) {\n        this.children = [];\n        this.depth = 0;\n        // If params insertted\n        if (arguments.length >= 4) {\n            this.bounds = new bounds_1.Bounds({\n                height: top - bottom,\n                width: right - left,\n                x: left,\n                y: top,\n            });\n        }\n        // Otherwise, make tiny start area\n        else {\n            this.bounds = new bounds_1.Bounds({\n                height: 1,\n                width: 1,\n                x: 0,\n                y: 0,\n            });\n        }\n        // Ensure the depth is set\n        this.depth = depth || 0;\n    }\n    /**\n     * Destroys this node and ensures all child nodes are destroyed as well.\n     *\n     * @memberOf Node\n     */\n    Node.prototype.destroy = function () {\n        delete this.children;\n        delete this.bounds;\n        if (this.nodes) {\n            this.nodes.destroy();\n            delete this.nodes;\n        }\n    };\n    /**\n     * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n     * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n     * this quad tree spans (and this is the root node), the quad tree will expand to include\n     * the new child.\n     *\n     * @param child The Bounds type object to inject\n     * @param props Properties that can be retrieved with the child object if applicable\n     *\n     * @returns True if the insertion was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.add = function (child, props) {\n        // This is the entry function for adding children, so we must first expand our top node\n        // To cover the area that the child is located.\n        // If we're in bounds, then let's just add the child\n        if (child.isInside(this.bounds)) {\n            return this.doAdd(child);\n        }\n        // Otherwise, we need to expand first\n        else {\n            this.cover(child);\n            return this.add(child, props);\n        }\n    };\n    /**\n     * Adds a list of new children to this quad tree. It performs the same operations as\n     * addChild for each child in the list, however, it more efficiently recalculates the\n     * bounds necessary to cover the area the children cover.\n     *\n     * @param children      List of Bounds objects to inject\n     * @param childrenProps List of props to associate with each element\n     *\n     * @memberOf Node\n     */\n    Node.prototype.addAll = function (children, childrenProps) {\n        var _this = this;\n        // Ensure the properties are at least defined\n        childrenProps = childrenProps || [];\n        // Make sure we cover the entire area of all the children.\n        // We can speed this up a lot if we first calculate the total bounds the new children covers\n        var minX = Number.MAX_VALUE;\n        var minY = Number.MAX_VALUE;\n        var maxX = -Number.MAX_VALUE;\n        var maxY = -Number.MAX_VALUE;\n        // Get the dimensions of the new bounds\n        children.forEach(function (child) {\n            if (child.x < minX) {\n                minX = child.x;\n            }\n            if (child.right > maxX) {\n                maxX = child.right;\n            }\n            if (child.bottom > maxY) {\n                maxY = child.bottom;\n            }\n            if (child.y < minY) {\n                minY = child.y;\n            }\n        });\n        // Make sure our bounds includes the specified bounds\n        this.cover(new bounds_1.Bounds({\n            height: maxY - minY,\n            width: maxX - minX,\n            x: minX,\n            y: minY,\n        }));\n        // Add all of the children into the tree\n        children.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n     * This will cause all children to be re-injected into the tree.\n     *\n     * @param bounds The bounds to include in the tree's coverage\n     *\n     * @memberOf Node\n     */\n    Node.prototype.cover = function (bounds) {\n        var _this = this;\n        // If we are already covering the area: abort\n        if (bounds.isInside(this.bounds)) {\n            return;\n        }\n        // Make our bounds cover the new area\n        this.bounds.encapsulate(bounds);\n        this.bounds.x -= 1;\n        this.bounds.y -= 1;\n        this.bounds.width += 2;\n        this.bounds.height += 4;\n        // Get all of the children underneath this node\n        var allChildren = this.gatherChildren([]);\n        // Destroy the split nodes\n        if (this.nodes) {\n            // Completely...destroy...\n            this.nodes.destroy();\n            delete this.nodes;\n        }\n        // Reinsert all children with the new dimensions in place\n        allChildren.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * When adding children, this performs the actual action of injecting the child into the tree\n     * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n     *\n     * @param child The Bounds item to inject into the tree\n     * @param props The props to remain associated with the child\n     *\n     * @returns True if the injection was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.doAdd = function (child) {\n        // If nodes are present, then we have already exceeded the population of this node\n        if (this.nodes) {\n            if (child.isInside(this.nodes.TL.bounds)) {\n                return this.nodes.TL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.TR.bounds)) {\n                return this.nodes.TR.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BL.bounds)) {\n                return this.nodes.BL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BR.bounds)) {\n                return this.nodes.BR.doAdd(child);\n            }\n            // Otherwise, this is a child overlapping this border\n            this.children.push(child);\n            return true;\n        }\n        // Otherwise, we have not had a split due to population limits being exceeded\n        else if (child.isInside(this.bounds)) {\n            this.children.push(child);\n            // If we exceeded our population for this quadrant, it is time to split up\n            if (this.children.length > maxPopulation && this.depth < maxDepth) {\n                this.split();\n            }\n            return true;\n        }\n        // This is when there is something wrong with the insertted child. The bounds\n        // For the quad should have grown without issue, but in this case the bounds\n        // Could not grow to accomodate the child.\n        if (isNaN(child.width + child.height + child.x + child.y)) {\n            console.error('Child did not fit into bounds because a dimension is NaN', child);\n        }\n        else if (child.area === 0) {\n            console.error('Child did not fit into bounds because the area is zero', child);\n        }\n        // Don't insert the child and continue\n        return true;\n    };\n    /**\n     * Collects all children of all the current and sub nodes into a single list.\n     *\n     * @param list The list we must aggregate children into\n     *\n     * @return The list specified as the list parameter\n     */\n    Node.prototype.gatherChildren = function (list) {\n        list = list.concat(this.children);\n        if (this.nodes) {\n            this.nodes.TL.gatherChildren(list);\n            this.nodes.TR.gatherChildren(list);\n            this.nodes.BL.gatherChildren(list);\n            this.nodes.BR.gatherChildren(list);\n        }\n        return list;\n    };\n    /**\n     * Entry query for determining query type based on input object\n     *\n     * @param bounds Can be a Bounds or a Point object\n     * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n     *               information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return An array of children that intersects with the query\n     */\n    Node.prototype.query = function (bounds, visit) {\n        // Query a rectangle\n        if (bounds instanceof bounds_1.Bounds) {\n            if (bounds.hitBounds(this.bounds)) {\n                return this.queryBounds(bounds, [], visit);\n            }\n            // Return an empty array when nothing is collided with\n            return [];\n        }\n        // Query a point\n        if (this.bounds.containsPoint(bounds)) {\n            return this.queryPoint(bounds, [], visit);\n        }\n        // Return an empty array when nothing is collided with\n        return [];\n    };\n    /**\n     * Queries children for intersection with a bounds object\n     *\n     * @param b     The Bounds to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return     Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryBounds = function (b, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.hitBounds(b)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (b.hitBounds(this.nodes.TL.bounds)) {\n                this.nodes.TL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.TR.bounds)) {\n                this.nodes.TR.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BL.bounds)) {\n                this.nodes.BL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BR.bounds)) {\n                this.nodes.BR.queryBounds(b, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Queries children for intersection with a point\n     *\n     * @param p     The Point to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return      Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryPoint = function (p, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.containsPoint(p)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (this.nodes.TL.bounds.containsPoint(p)) {\n                this.nodes.TL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.TR.bounds.containsPoint(p)) {\n                this.nodes.TR.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BL.bounds.containsPoint(p)) {\n                this.nodes.BL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BR.bounds.containsPoint(p)) {\n                this.nodes.BR.queryPoint(p, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Creates four sub quadrants for this node.\n     */\n    Node.prototype.split = function () {\n        // Gather all items to be handed down\n        var allChildren = this.gatherChildren([]);\n        // Gather all props for the children to be handed down as well\n        this.nodes = new Quadrants(this.bounds, this.depth + 1);\n        this.children = [];\n        while (allChildren.length > 0) {\n            var child = allChildren.pop();\n            if (child)\n                this.doAdd(child);\n        }\n    };\n    /**\n     * Traverses the quad tree returning every quadrant encountered\n     *\n     * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n     */\n    Node.prototype.visit = function (cb) {\n        var finished = Boolean(cb(this));\n        if (this.nodes && !finished) {\n            this.nodes.TL.visit(cb);\n            this.nodes.TR.visit(cb);\n            this.nodes.BL.visit(cb);\n            this.nodes.BR.visit(cb);\n        }\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar QuadTree = /** @class */ (function (_super) {\n    __extends(QuadTree, _super);\n    function QuadTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return QuadTree;\n}(Node));\nexports.QuadTree = QuadTree;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar data_bounds_1 = require(\"../util/data-bounds\");\nfunction value(val, ref, scaleRatio) {\n    var parse = \"\" + val;\n    var num = parseFloat(parse);\n    if (isNaN(num)) {\n        return 0;\n    }\n    // If this is a percentage use the reference as the num to multiply against\n    if (parse.indexOf('%') > -1) {\n        return (num / 100.0) * ref;\n    }\n    return num * scaleRatio;\n}\n/**\n * This evaluates an absolute position with a reference to produce meaningful bounds.\n *\n * The scaleRatio provided should be available in or for percents to have the same weighting\n * as whole number values.\n */\nfunction getAbsolutePositionBounds(item, reference, scaleRatio) {\n    if (reference.width === 0 || reference.height === 0) {\n        console.warn('An AbsolutePosition evaluated to invalid dimensions.', 'Please ensure that the object provided and the reference has valid dimensions', 'to produce dimensions with width and height that are non-zero.', 'item:', item, 'reference:', reference.toString());\n    }\n    var bounds = data_bounds_1.DataBounds.emptyBounds();\n    var width;\n    var height;\n    // Calculate the horizontal values\n    if (item.width) {\n        bounds.width = value(item.width, reference.width, scaleRatio);\n        if ('left' in item) {\n            bounds.x = value(item.left, reference.width, scaleRatio);\n        }\n        else if ('right' in item) {\n            bounds.x = reference.width - value(item.right, reference.width, scaleRatio) - bounds.width;\n        }\n    }\n    else {\n        var left = value(item.left, reference.width, scaleRatio);\n        var right = reference.width - value(item.right, reference.width, scaleRatio);\n        width = right - left;\n        if (width < 0) {\n            console.warn('An AbsolutePosition evaluated to invalid dimensions.', 'Please ensure that the object provided and the reference has valid dimensions', 'to produce dimensions with width and height that are greater than zero.', 'item:', item, 'reference:', reference.toString());\n        }\n        bounds.x = left;\n        bounds.width = width;\n    }\n    // Calculate the vertical values\n    if (item.height) {\n        bounds.height = value(item.height, reference.height, scaleRatio);\n        if ('top' in item) {\n            bounds.y = value(item.top, reference.height, scaleRatio);\n        }\n        else if ('bottom' in item) {\n            bounds.y = reference.height - value(item.bottom, reference.height, scaleRatio) - bounds.height;\n        }\n    }\n    else {\n        var top_1 = value(item.top, reference.height, scaleRatio);\n        var bottom = reference.height - value(item.bottom, reference.height, scaleRatio);\n        height = bottom - top_1;\n        if (width < 0) {\n            console.warn('An AbsolutePosition evaluated to invalid dimensions.', 'Please ensure that the object provided and the reference has valid dimensions', 'to produce dimensions with width and height that are greater than zero.', 'item:', item, 'reference:', reference.toString());\n        }\n        bounds.y = top_1;\n        bounds.height = height;\n    }\n    if (bounds.width === 0 || bounds.height === 0 || isNaN(bounds.x + bounds.y + bounds.width + bounds.height)) {\n        bounds.x = 0;\n        bounds.y = 0;\n        bounds.width = reference.width;\n        bounds.height = reference.height;\n    }\n    return bounds;\n}\nexports.getAbsolutePositionBounds = getAbsolutePositionBounds;\n","module.exports = \"// These are projection methods utilizing the simpler camera breakdown approach\\n\\nvec3 cameraSpace(vec3 world) {\\n  return (world + cameraOffset) * cameraScale;\\n}\\n\\nvec3 cameraSpaceSize(vec3 worldSize) {\\n  return worldSize * cameraScale;\\n}\\n\\nvec4 clipSpace(vec3 world) {\\n  return vec4(((projection * modelView) * vec4(cameraSpace(world), 1.0)).xyz, 1.0);\\n}\\n\\nvec4 clipSpaceSize(vec3 worldSize) {\\n  return vec4(((projection * modelView) * vec4(cameraSpaceSize(worldSize), 0.0)).xyz, 1.0);\\n}\\n\"","module.exports = \"// When instancing is enabled, it causes a major list of uniforms to be generated\\n// it also generates a massive search tree to retrieve the correct unforms in question.\\n${instanceUniformDeclarations}\\n\\n// This is the uniforms provided by the system along with the uniforms created by the layer\\n${layerUniforms}\\n\\n// This is the attributes generated for vertex attributes\\n${vertexAttributes}\\n\\n// This is the methods and set up needed to retrieve a block of data for an instance\\n${instanceDataRetrieval}\\n\"","module.exports = \"// This is the injected dereferencing of the instance attributes\\n  int instanceIndex = int(instance);\\n  ${instanceDestructuring}\\n\\n  // This is a special injected instance attribute. It lets the system\\n  // control specific instances ability to draw, which allows the backend\\n  // system greater control on how it optimizes draw calls and it's buffers.\\n  if (_active == 0.0) {\\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n\\n    // Quick exit to prevent any geometry from arising from the instance\\n    return;\\n  }\\n\"","module.exports = \"// This is the fragment shader generated by the system\\n${layerUniforms}\\n\\n// --------------- The fragment shader provided by the layer ------------------\\n${shader}\\n\"","module.exports = \"// This is the vertex shader generated by the system\\n${shaderInput}\\n${projectionMethods}\\n// --------------- Vertex shader provided by the layer -----------------\\n${shader}\\n\"","module.exports = \"int instanceSize = ${instanceBlockCount};\\n\\nvec4 getBlock(int index, int instanceIndex) {\\n  return instanceData[(instanceSize * instanceIndex) + index];\\n}\\n\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar types_1 = require(\"../../types\");\nvar make_instance_uniform_name_1 = require(\"../../util/make-instance-uniform-name\");\nvar shader_templating_1 = require(\"../../util/shader-templating\");\nvar template_vars_1 = require(\"../fragments/template-vars\");\nvar instanceRetrievalArrayFragment = require('../fragments/instance-retrieval-array.vs');\n/** Defines the elements for destructuring out of a vector */\nvar VECTOR_COMPONENTS = ['x', 'y', 'z', 'w'];\n/** Converts a size to a shader type */\nvar sizeToType = {\n    1: 'float',\n    2: 'vec2',\n    3: 'vec3',\n    4: 'vec4',\n    9: 'mat3',\n    16: 'mat4',\n    /** This is the special case for instance attributes that want an atlas resource */\n    99: 'vec4',\n};\nfunction makeUniformArrayDeclaration(totalBlocks) {\n    return {\n        fragment: \"uniform vec4 \" + make_instance_uniform_name_1.makeInstanceUniformNameArray() + \"[\" + totalBlocks + \"];\",\n        materialUniforms: [\n            {\n                name: make_instance_uniform_name_1.makeInstanceUniformNameArray(),\n                type: '4fv',\n                value: new Array(totalBlocks)\n                    .fill(0)\n                    .map(function () { return new Three.Vector4(0, 0, 0, 0); }),\n            },\n        ],\n    };\n}\nexports.makeUniformArrayDeclaration = makeUniformArrayDeclaration;\nfunction makeInstanceRetrievalArray(blocksPerInstance) {\n    var templateOptions = {};\n    templateOptions[template_vars_1.templateVars.instanceBlockCount] = \"\" + blocksPerInstance;\n    var required = {\n        name: 'makeInstanceRetrievalArray',\n        values: [\n            template_vars_1.templateVars.instanceBlockCount,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(instanceRetrievalArrayFragment, templateOptions, required);\n    return results.shader;\n}\nexports.makeInstanceRetrievalArray = makeInstanceRetrievalArray;\nfunction makeInstanceDestructuringArray(instanceAttributes, blocksPerInstance) {\n    var out = '';\n    // Generate the blocks\n    for (var i = 0; i < blocksPerInstance; ++i) {\n        out += \"  vec4 block\" + i + \" = getBlock(\" + i + \", instanceIndex);\\n\";\n    }\n    instanceAttributes.forEach(function (attribute) {\n        var block = attribute.block;\n        // If we have a size the size of a block, then don't swizzle the vector\n        if (attribute.size === types_1.InstanceAttributeSize.FOUR) {\n            out += \"  \" + sizeToType[attribute.size] + \" \" + attribute.name + \" = block\" + block + \";\\n\";\n        }\n        // If the attribute is an atlas, then we use the special ATLAS size and don't swizzle the vector\n        else if (attribute.atlas) {\n            out += \"  \" + sizeToType[types_1.InstanceAttributeSize.ATLAS] + \" \" + attribute.name + \" = block\" + block + \";\\n\";\n        }\n        // Do normal destructuring with any other size and type\n        else {\n            out += \"  \" + sizeToType[attribute.size] + \" \" + attribute.name + \" = block\" + block + \".\" + makeVectorSwizzle(attribute.blockIndex, attribute.size) + \";\\n\";\n        }\n    });\n    return out;\n}\nexports.makeInstanceDestructuringArray = makeInstanceDestructuringArray;\nfunction makeVectorSwizzle(start, size) {\n    return VECTOR_COMPONENTS.slice(start, start + size).join('');\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * The goal of this file is to take in model attributes and instance attributes specified\n * and inject the proper attributes into the shaders so the implementor of the shader does\n * not worry about syncing attribute and uniform names between the JS\n */\nvar types_1 = require(\"../../types\");\nvar shader_templating_1 = require(\"../../util/shader-templating\");\nvar webgl_stat_1 = require(\"../../util/webgl-stat\");\nvar template_vars_1 = require(\"../fragments/template-vars\");\nvar uniform_instance_block_array_1 = require(\"./uniform-instance-block-array\");\n// These are all of the necessary fragments that will comprise our shader that is generated\nvar vertexShaderComposition = require('../fragments/vertex-shader-composition.vs');\nvar fragmentShaderComposition = require('../fragments/fragment-shader-composition.fs');\nvar instanceDestructuringArray = require('../fragments/instance-destructuring-array.vs');\nvar shaderInput = require('../fragments/shader-input.vs');\nvar projectionMethods = require('../fragments/projection-methods.vs');\n// Constants\n/**\n * Defines how many floats are available in a uniform block\n * What is a uniform block you ask? Why let me tell you! It is how opengl stores and communicates uniforms\n * to the GPU. Whenever you declare a uniform, it will use a hunk of memory. You can see how many uniforms\n * a GPU can have via the paramter MAX_VERTEX_UNIFORM_VECTORS. The number returned is the number of blocks\n * we can use for uniforms in the vertex shader. A BLOCK is an entire vec4.\n *\n * When you declare a uniform in your shader, it will use an entire BLOCK at the MINIMUM.\n *\n * A uniform float uses 1 block. vec2 uses 1 block. vec3 uses one block. vec4 uses one block.\n * mat4 uses 4 blocks. mat3 uses 3 blocks.\n *\n * etc etc.\n */\nvar MAX_USE_PER_BLOCK = 4;\n/** Converts a size to a shader type */\nvar sizeToType = {\n    1: 'float',\n    2: 'vec2',\n    3: 'vec3',\n    4: 'vec4',\n    9: 'mat3',\n    16: 'mat4',\n    99: 'sampler2D',\n};\nfunction calculateUniformBlockUseage(uniforms) {\n    var count = 0;\n    for (var i = 0, end = uniforms.length; i < end; ++i) {\n        count += Math.ceil(uniforms[i].size / 4);\n    }\n    return count;\n}\n/**\n * This method is the main algorithm for piecing together all of the attributes necessary\n * and injecting them into the shaders.\n *\n * @param shaders\n * @param vertexAttributes\n * @param instanceAttributes\n */\nfunction injectFragments(shaders, vertexAttributes, instanceAttributes, uniforms) {\n    var shaderInputMetrics = generateShaderInputs(vertexAttributes, instanceAttributes, uniforms);\n    var templateOptions = (_a = {},\n        _a[template_vars_1.templateVars.projectionMethods] = generateProjectionMethods(),\n        _a[template_vars_1.templateVars.shaderInput] = shaderInputMetrics.fragment,\n        _a[template_vars_1.templateVars.shader] = generateVertexShader(shaders, instanceAttributes, shaderInputMetrics.metrics.maxInstancesPerBuffer, shaderInputMetrics.metrics.blocksPerInstance),\n        _a);\n    var required = {\n        name: 'vertex shader composition',\n        values: [\n            template_vars_1.templateVars.projectionMethods,\n            template_vars_1.templateVars.shaderInput,\n            template_vars_1.templateVars.shader,\n        ],\n    };\n    var vertexShaderResults = shader_templating_1.shaderTemplate(vertexShaderComposition, templateOptions, required);\n    templateOptions = (_b = {},\n        _b[template_vars_1.templateVars.layerUniforms] = generateUniforms(uniforms, types_1.ShaderInjectionTarget.FRAGMENT),\n        _b[template_vars_1.templateVars.shader] = generateFragmentShader(shaders),\n        _b);\n    required = {\n        name: 'fragment shader composition',\n        values: [\n            template_vars_1.templateVars.layerUniforms,\n            template_vars_1.templateVars.shader,\n        ],\n    };\n    var fragmentShaderResults = shader_templating_1.shaderTemplate(fragmentShaderComposition, templateOptions, required);\n    return {\n        fs: fragmentShaderResults.shader,\n        materialUniforms: shaderInputMetrics.materialUniforms,\n        maxInstancesPerBuffer: shaderInputMetrics.metrics.maxInstancesPerBuffer,\n        vs: vertexShaderResults.shader,\n    };\n    var _a, _b;\n}\nexports.injectFragments = injectFragments;\n/**\n * Creates the projection method fragment\n */\nfunction generateProjectionMethods() {\n    var templateOptions = {};\n    var required = {\n        name: 'projection methods',\n        values: [],\n    };\n    var results = shader_templating_1.shaderTemplate(projectionMethods, templateOptions, required);\n    return results.shader;\n}\n/**\n * Generates the fragments for shader IO such as vertex and instance attributes\n */\nfunction generateShaderInputs(vertexAttributes, instanceAttributes, uniforms) {\n    var templateOptions = {};\n    var instancingInfo = generateInstanceDataLookupOptions(templateOptions, instanceAttributes, uniforms);\n    var additionalOptions = (_a = {},\n        _a[template_vars_1.templateVars.layerUniforms] = generateUniforms(uniforms, types_1.ShaderInjectionTarget.VERTEX),\n        _a[template_vars_1.templateVars.vertexAttributes] = generateVertexAttributes(vertexAttributes),\n        _a);\n    Object.assign(templateOptions, additionalOptions);\n    var required = {\n        name: 'shader input',\n        values: [\n            template_vars_1.templateVars.instanceDataRetrieval,\n            template_vars_1.templateVars.instanceUniformDeclarations,\n            template_vars_1.templateVars.layerUniforms,\n            template_vars_1.templateVars.vertexAttributes,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(shaderInput, templateOptions, required);\n    return {\n        fragment: results.shader,\n        materialUniforms: instancingInfo.materialUniforms,\n        metrics: instancingInfo.metrics,\n    };\n    var _a;\n}\n/**\n *\n * @param uniforms\n */\nfunction generateUniforms(uniforms, injectionType) {\n    var out = '';\n    var injection = injectionType || types_1.ShaderInjectionTarget.VERTEX;\n    uniforms.forEach(function (uniform) {\n        uniform.shaderInjection = uniform.shaderInjection || types_1.ShaderInjectionTarget.VERTEX;\n        if (uniform.shaderInjection === injection || uniform.shaderInjection === types_1.ShaderInjectionTarget.ALL) {\n            out += \"uniform \" + (uniform.qualifier || '') + (uniform.qualifier ? ' ' : '') + sizeToType[uniform.size] + \" \" + uniform.name + \";\\n\";\n        }\n    });\n    return out;\n}\n/**\n * This takes in the layer's vertex shader and transforms any required templating within the\n * shader.\n */\nfunction generateVertexShader(shaders, instanceAttributes, maxInstancesPerBuffer, blocksPerInstance) {\n    var templateOptions = (_a = {},\n        _a[template_vars_1.templateVars.attributes] = makeInstanceAttributeReferences(instanceAttributes, blocksPerInstance),\n        _a);\n    var required = {\n        name: 'layer vertex shader',\n        values: [\n            template_vars_1.templateVars.attributes,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(shaders.vs, templateOptions, required);\n    return results.shader;\n    var _a;\n}\nfunction generateFragmentShader(shaders) {\n    var templateOptions = {};\n    var required = {\n        name: 'layer fragment shader',\n        values: [],\n    };\n    var results = shader_templating_1.shaderTemplate(shaders.fs, templateOptions, required);\n    return results.shader;\n}\n/**\n * This generates the inline attribute references needed to be able to reference instance attribute\n * vars.\n */\nfunction makeInstanceAttributeReferences(instanceAttributes, blocksPerInstance) {\n    var templateOptions = {};\n    templateOptions[template_vars_1.templateVars.blocksPerInstance] = \"\" + blocksPerInstance;\n    templateOptions[template_vars_1.templateVars.instanceDestructuring] = makeInstanceDestructuring(instanceAttributes, blocksPerInstance);\n    var required = {\n        name: 'instance attributes fragment',\n        values: [\n            template_vars_1.templateVars.instanceDestructuring,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(instanceDestructuringArray, templateOptions, required);\n    return results.shader;\n}\n/**\n * This generates an in method destructuring pattern to make instance attributes available within a method.\n */\nfunction makeInstanceDestructuring(instanceAttributes, blocksPerInstance) {\n    return uniform_instance_block_array_1.makeInstanceDestructuringArray(instanceAttributes, blocksPerInstance);\n}\n/**\n * This generates the model attribute declarations\n */\nfunction generateVertexAttributes(vertexAttributes) {\n    var out = '';\n    vertexAttributes.forEach(function (attribute) {\n        out += \"attribute \" + sizeToType[attribute.size] + \" \" + (attribute.qualifier || '') + ((attribute.qualifier && ' ') || '') + attribute.name + \";\\n\";\n    });\n    return out;\n}\n/**\n * This method generates the chunk of shader that is responsible for providing\n */\nfunction generateInstanceDataLookupOptions(templateOptions, instanceAttributes, uniforms) {\n    // This is how many uniform blocks the current device can utilize in a shader\n    var maxUniforms = webgl_stat_1.WebGLStat.MAX_VERTEX_UNIFORMS;\n    // This reflects how many uniform blocks are available for instancing\n    var instanceUniformBlockCount = maxUniforms - calculateUniformBlockUseage(uniforms);\n    // Go through the attributes provided and calculate the number of blocks requested\n    // Also sort the attributes by block and pack the block useage down.\n    var sortedInstanceAttributes = instanceAttributes.slice(0).sort(function (a, b) { return a.block - b.block; });\n    var currentBlock = sortedInstanceAttributes[0].block;\n    var trueBlockIndex = 0;\n    // This tracks how much a block is used\n    var blockUseage = new Map();\n    var innerBlockUseage = new Map();\n    sortedInstanceAttributes.forEach(function (attribute) {\n        if (attribute.block !== currentBlock) {\n            currentBlock = attribute.block;\n            trueBlockIndex++;\n        }\n        var attributeSize = attribute.size;\n        var oldUseage = blockUseage.get(trueBlockIndex) || 0;\n        var newUseage = oldUseage + attributeSize;\n        // Make sure the block isn't over used thus losing attribute information\n        if (newUseage > MAX_USE_PER_BLOCK) {\n            console.error(\"An instance attribute was specified that over fills the maximum allowed useage for a block.\", \"\\nMax Allowed per block \" + MAX_USE_PER_BLOCK, \"\\nAttribute: \" + attribute.name + \" Block Specified: \" + attribute.block, \"\\nTotal blocks used with this attribute: \" + newUseage);\n            return;\n        }\n        // Store how much of the block is utilized\n        blockUseage.set(trueBlockIndex, newUseage);\n        // We can now auto specify the inner index of where the attribute lines up within the block\n        attribute.blockIndex = oldUseage;\n        // Now we examine the attributes request of use inside the block and make sure there is no\n        // Overlap\n        var innerUseage = innerBlockUseage.get(trueBlockIndex) || new Map();\n        if (attribute.blockIndex + attributeSize > MAX_USE_PER_BLOCK) {\n            console.error(\"An instance attribute was specified that would fill indices greater than the block allows.\", \"\\nMax index per block \" + MAX_USE_PER_BLOCK, \"\\nAttribute: \" + attribute.name + \" Block Index: \" + attribute.blockIndex + \" Size: \" + attribute.size + \" Block Index + Size: \" + (attribute.blockIndex + attribute.size));\n            return;\n        }\n        for (var i = attribute.blockIndex; i < attribute.blockIndex + attributeSize; ++i) {\n            if (innerUseage.get(i)) {\n                console.error(\"An instance attribute was specified who's block index overaps another attributes useage\", \"\\nMax index per block \" + MAX_USE_PER_BLOCK, \"\\nAttribute: \" + attribute.name + \" Block Index: \" + attribute.blockIndex + \" Size: \" + attribute.size + \" Block Index + Size: \" + (attribute.blockIndex + attribute.size));\n                return;\n            }\n        }\n        // Adjust the attribute to reflect the actual bock it is using\n        attribute.block = trueBlockIndex;\n    });\n    /**\n     * We now must create a decision tree large enough to accomodate our instances.\n     * Explanation:\n     * Our shaders CANNOT do switch case statements, NOR can they handle large amounts of\n     * chained if else statements (it will produce a memory exhausted error on many systems).\n     * There is even limits on how deep if else statements can be nested within each other.\n     * Lastly: We do NOT want to create an array in memory in the shader to create a lookup for our\n     * instance data as it would need to be allocated EVERY vertex operation.\n     *\n     * So, our best workaround is to make a decision tree that balances how many decisions per\n     * node it can make vs the depth of decisions. The more decisions per node, the less deep the\n     * tree will be, but will suffer some performance cost. But the less deep the tree, the better\n     * chance you will not get a 'memory exhausted' error.\n     */\n    var branchesPerLevel = 4;\n    var blocksPerInstance = trueBlockIndex + 1;\n    // This determines how many instances our allowed uniforms will allow for a single draw call\n    var maxInstancesPerBuffer = Math.floor(instanceUniformBlockCount / blocksPerInstance);\n    // Generate the decision tree and uniform declarations\n    var instancingMetrics = makeUniformInstanceDataOptions(templateOptions, maxInstancesPerBuffer, branchesPerLevel, blocksPerInstance, sortedInstanceAttributes);\n    return {\n        materialUniforms: instancingMetrics.materialUniforms,\n        metrics: {\n            blocksPerInstance: blocksPerInstance,\n            maxInstancesPerBuffer: maxInstancesPerBuffer,\n        },\n    };\n}\n/**\n * This generates all of the necessary templating information from uniform-instance-data\n * in order to provide an instance data getter for the application.\n */\nfunction makeUniformInstanceDataOptions(templateOptions, maxInstancesPerBuffer, branchesPerLevel, blocksPerInstance, instanceAttributes) {\n    // Make a list containing all instance indicies that will be utilized and will be split\n    // Out into the decision tree\n    var instances = [];\n    for (var i = 0; i < maxInstancesPerBuffer; ++i) {\n        instances.push(i);\n    }\n    // Make the uniform declaration. Uniform declaration simultaneously gives us the material uniforms necessary\n    // To apply to our three material.\n    var uniformMetrics = makeInstanceUniformDeclaration(maxInstancesPerBuffer * blocksPerInstance, instanceAttributes);\n    templateOptions[template_vars_1.templateVars.instanceUniformDeclarations] = uniformMetrics.fragment;\n    templateOptions[template_vars_1.templateVars.instanceBlockCount] = \"\" + blocksPerInstance;\n    // This way produced the data retrieval method for decision tree instancing\n    // *templateOptions[templateVars.instanceDataRetrieval] = makeInstanceRetrievalDecisionTree(blocksPerInstance, instances, branchesPerLevel);\n    // This method produces the data retrieval method for array instancing\n    templateOptions[template_vars_1.templateVars.instanceDataRetrieval] = uniform_instance_block_array_1.makeInstanceRetrievalArray(blocksPerInstance);\n    return {\n        materialUniforms: uniformMetrics.materialUniforms,\n    };\n}\n/**\n * This generates the declaration of all of the individual uniform registers for instancing.\n */\nfunction makeInstanceUniformDeclaration(instanceUniformBlockCount, attributes) {\n    var out = '';\n    var blockQualifierDedup = new Map();\n    var maxBlock = 0;\n    // Dedup the attributes specified for the\n    attributes.forEach(function (attribute) {\n        var qualifiers = blockQualifierDedup.get(attribute.block) || new Map();\n        // Make sure the qualifier is added for the block\n        qualifiers.set(attribute.qualifier, true);\n        // Get the max block in use\n        maxBlock = Math.max(maxBlock, attribute.block);\n    });\n    // Generate the full string for the specified qualifiers\n    var blockQualifiers = new Map();\n    blockQualifierDedup.forEach(function (qualifierList, block) {\n        var allQualifiers = Array.from(qualifierList.keys());\n        blockQualifiers.set(block, allQualifiers.join(' ') + \" \");\n    });\n    // Generate our uniform declarations\n    // Const blockCount = maxBlock + 1;\n    // This method produces the instancing declaration for a search tree.\n    // *out += makeUniformDecisionTreeDeclarations(instanceUniformBlockCount, blockCount, blockQualifiers, materialUniforms);\n    // This method produces the instancing declaration for an instancing array\n    var declaration = uniform_instance_block_array_1.makeUniformArrayDeclaration(instanceUniformBlockCount);\n    out += declaration.fragment;\n    out += \"\\n\";\n    return {\n        fragment: out,\n        materialUniforms: declaration.materialUniforms,\n    };\n}\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar texture_1 = require(\"../../surface/texture\");\nvar instance_1 = require(\"../../util/instance\");\nvar types_1 = require(\"../types\");\n/**\n * This is a lookup to find existing rasterizations for a particularly created label so that every\n * new label does not have to go through the rasterization process.\n */\nvar rasterizationLookUp = new Map();\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nvar anchorCalculator = (_a = {},\n    _a[types_1.AnchorType.TopLeft] = function (anchor, label) {\n        anchor.x = -anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopMiddle] = function (anchor, label) {\n        anchor.x = label.width / 2.0;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopRight] = function (anchor, label) {\n        anchor.x = label.width + anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.MiddleLeft] = function (anchor, label) {\n        anchor.x = -anchor.padding;\n        anchor.y = label.height / 2;\n    },\n    _a[types_1.AnchorType.Middle] = function (anchor, label) {\n        anchor.x = label.width / 2.0;\n        anchor.y = label.height / 2.0;\n    },\n    _a[types_1.AnchorType.MiddleRight] = function (anchor, label) {\n        anchor.x = label.width + anchor.padding;\n        anchor.y = label.height / 2.0;\n    },\n    _a[types_1.AnchorType.BottomLeft] = function (anchor, label) {\n        anchor.x = -anchor.padding;\n        anchor.y = label.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomMiddle] = function (anchor, label) {\n        anchor.x = label.width / 2.0;\n        anchor.y = label.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomRight] = function (anchor, label) {\n        anchor.x = label.width + anchor.padding;\n        anchor.y = label.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.Custom] = function (anchor, label) {\n        anchor.x = anchor.x || 0;\n        anchor.y = anchor.y || 0;\n    },\n    _a);\n/**\n * This generates a new label instance which will render a single line of text for a given layer.\n * There are restrictions surrounding labels due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a label via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Labels should only be so long.\n * - Multiline is not supported inherently\n * - Once a label is constructed, only SOME properties can be altered thereafter\n *\n * A label that is constructed can only have some properties set upon creating the label and are locked\n * thereafter. The only way to modify them would be to destroy the label, then construct a new label\n * with the modifications. This has to deal with performance regarding rasterizing the label\n */\nvar LabelInstance = /** @class */ (function (_super) {\n    __extends(LabelInstance, _super);\n    function LabelInstance(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the rendered color of the label */\n        _this.color = [0, 0, 0, 1];\n        /** Depth sorting of the label (or the z value of the label) */\n        _this.depth = 0;\n        /** Sets the way the label scales with the world */\n        _this.scaling = types_1.ScaleType.BOUND_MAX;\n        /** Scales the label uniformly */\n        _this.scale = 1.0;\n        /** The x coordinate where the label will be anchored to in world space */\n        _this.x = 0;\n        /** The y coordinate where the label will be anchored to in world space */\n        _this.y = 0;\n        // The following properties are properties that are locked in after creating this label\n        // As the properties are completely locked into how the label was rasterized and can not\n        // Nor should not be easily adjusted for performance concerns\n        _this._cssFont = '';\n        _this._fontFamily = 'Arial';\n        _this._fontSize = 12;\n        _this._fontStyle = 'normal';\n        _this._fontWeight = 400;\n        _this._maxWidth = 0;\n        _this._text = '';\n        _this._width = 0;\n        _this._height = 0;\n        _this._isDestroyed = false;\n        // These are properties that can be altered, but have side effects from being changed\n        /** This is the anchor location on the  */\n        _this._anchor = {\n            padding: 0,\n            type: types_1.AnchorType.TopLeft,\n            x: 0,\n            y: 0,\n        };\n        _this.depth = options.depth || _this.depth;\n        _this.color = options.color || _this.color;\n        _this.scaling = options.scaling || _this.scaling;\n        _this.scale = options.scale || _this.scale;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        _this._fontFamily = options.fontFamily || _this._fontFamily;\n        _this._fontSize = options.fontSize || _this._fontSize;\n        _this._fontStyle = options.fontStyle || _this._fontStyle;\n        _this._fontWeight = options.fontWeight || _this._fontWeight;\n        _this._maxWidth = options.maxWidth || 0;\n        _this._text = options.text || _this._text;\n        // We get the CSS font string for this label so we can uniquely identify the rasterization\n        // Easily.\n        _this._cssFont = texture_1.LabelRasterizer.makeCSSFont(_this, 1);\n        // This is css font used to look up rasterizations. This lookup includes the max width of the label\n        // Which the css font does not account for\n        var cssFontLookup = _this._cssFont + \"_\" + _this._maxWidth;\n        // Look for other same texts that have been rasterized\n        var rasterizations = rasterizationLookUp.get(_this._text);\n        var rasterization;\n        if (rasterizations) {\n            // Look for those texts that have been rasterized in the same fashion that this label is requesting\n            rasterization = rasterizations.get(cssFontLookup);\n            // If a rasterization exists, we must increment the use reference\n            if (rasterization) {\n                rasterization.references++;\n            }\n        }\n        else {\n            rasterizations = new Map();\n        }\n        // If we have not found an existing rasterization\n        if (!rasterization) {\n            rasterization = {\n                references: 1,\n                resource: new texture_1.LabelAtlasResource(_this),\n            };\n            // Look to see if any rasterization options were specified\n            if (options.rasterization) {\n                rasterization.resource.sampleScale = options.rasterization.scale || 1.0;\n            }\n            // Ensure the sample scale is set. Defaults to 1.0\n            rasterization.resource.sampleScale = rasterization.resource.sampleScale || 1.0;\n            // Rasterize the resource generated for this label. We need it immediately rasterized so\n            // That we can utilize the dimensions for calculations.\n            texture_1.LabelRasterizer.renderSync(rasterization.resource);\n            // Now that we have an official rasterization for this text / label combo, we shall store it\n            // For others to look up\n            rasterizationLookUp.set(_this._text, rasterizations);\n            rasterizations.set(cssFontLookup, rasterization);\n        }\n        _this._rasterization = rasterization;\n        _this._width = rasterization.resource.rasterization.world.width;\n        _this._height = rasterization.resource.rasterization.world.height;\n        // Make sure the anchor is set to the appropriate location\n        options.anchor && _this.setAnchor(options.anchor);\n        return _this;\n    }\n    /**\n     * TODO: We should be implementing the destroy on LabelInstances to clean this up\n     * Frees up module scoped data.\n     */\n    LabelInstance.destroy = function () {\n        rasterizationLookUp.clear();\n    };\n    Object.defineProperty(LabelInstance.prototype, \"cssFont\", {\n        // The following are the getters for the locked in parameters of the label so we can read\n        // The properties but not set any of them.\n        /**\n         * This is the full css string that represents this label. This + the text of the label is essentially\n         * a unique identifier for the rendering of the label and is used to key the rasterization of the label\n         * so that label rasterization can be shared for similar labels.\n         */\n        get: function () { return this._cssFont; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"isDestroyed\", {\n        /** This flag indicates if this label is valid anymore */\n        get: function () { return this._isDestroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontFamily\", {\n        /** This is the font family of the label */\n        get: function () { return this._fontFamily; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontSize\", {\n        /**\n         * This is the size of the label in pixels. For Labels, this correlates to the rendering font size.\n         * The true pixel height of the label is calculated and placed into the height property for the label.\n         */\n        get: function () { return this._fontSize; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontStyle\", {\n        /** This is the style of the font (italic, oblique, etc) */\n        get: function () { return this._fontStyle; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontWeight\", {\n        /** This is the font weight specified for the label (bold, normal, etc). */\n        get: function () { return this._fontWeight; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"maxWidth\", {\n        /** This is the max width in pixels this label can fill */\n        get: function () { return this._maxWidth; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"resource\", {\n        /** This gets the atlas resource that is uniquely identified for this label */\n        get: function () { return this._rasterization.resource; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"text\", {\n        /** This is the label's text. */\n        get: function () { return this._text; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"truncatedText\", {\n        /**\n         * If a maxWidth is specified, there is a chance the text will be truncated.\n         * This provides the calculated truncated text.\n         */\n        get: function () { return this._rasterization.resource.truncatedText || this.text; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"width\", {\n        /**\n         * This is the width in world space of the label. If there is no camera distortion,\n         * this would be the width of the label in pixels on the screen.\n         */\n        get: function () {\n            return this._width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"height\", {\n        /**\n         * This is the height in world space of the label. If there is no camera distortion,\n         * this would be the height of the label in pixels on the screen.\n         */\n        get: function () {\n            return this._height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Labels are a sort of unique case where the use of a label should be destroyed as rasterization\n     * resources are in a way kept alive through reference counting.\n     */\n    LabelInstance.prototype.destroy = function () {\n        if (!this._isDestroyed) {\n            this._isDestroyed = true;\n            this._rasterization.references--;\n            // If all references are cleared, then the rasterization needs to be eradicated\n            if (this._rasterization.references === 0) {\n                this._rasterization.resource;\n            }\n        }\n    };\n    Object.defineProperty(LabelInstance.prototype, \"anchor\", {\n        get: function () {\n            return this._anchor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This applies a new anchor to this label and properly determines it's anchor position on the label\n     */\n    LabelInstance.prototype.setAnchor = function (anchor) {\n        var newAnchor = {\n            padding: anchor.padding || 0,\n            type: anchor.type,\n            x: anchor.x || 0,\n            y: anchor.y || 0,\n        };\n        // Calculate the new anchors position values\n        anchorCalculator[newAnchor.type](newAnchor, this);\n        // Apply the anchor\n        this._anchor = newAnchor;\n    };\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"color\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"depth\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"scaling\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"scale\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"x\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"y\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"_anchor\", void 0);\n    __decorate([\n        mobx_1.computed\n    ], LabelInstance.prototype, \"anchor\", null);\n    return LabelInstance;\n}(instance_1.Instance));\nexports.LabelInstance = LabelInstance;\nvar _a;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Determine final screen size of label\\n  vec3 screenSize = cameraSpaceSize(vec3(size * scale, 1.0));\\n\\n  // Test whether the label is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y || screenSize.x > size.x;\\n\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n\\n  // Correct aspect ratio.  Sufficient fix for most applications.\\n  // Will need another solution in the case of:\\n  //  (cameraScale y != cameraScale.x) && (cameraScale.x != 1 && cameraScale.y != 1)\\n\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float(cameraScale.x != cameraScale.y);\\n\\n  size = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  vec2 scaledAnchor = anchor * scale;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + scaledAnchor;\\n\\n  vec2 adjustedAnchor = mix(\\n    scaledAnchor,\\n    (scaledAnchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // Get the position of the current vertex\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * scale * size + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the label\\n  float labelScreenScale = mix(\\n    screenSize.y / size.y,\\n    screenSize.x / size.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the label is supposed to be, then we automagically\\n  // scale down our label to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / labelScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  // --Texture and Color\\n  // Get the tex coord from our inject texture info\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the label's color as a tint to the label (all labels are rendered white to the base texture)\\n  vertexColor = color;\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  gl_FragColor = texture2D(labelAtlas, texCoord) * vertexColor;\\n  gl_FragColor *= gl_FragColor.a;\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar types_2 = require(\"../types\");\nvar max = Math.max, min = Math.min;\n/**\n * This layer displays Labels and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar LabelLayer = /** @class */ (function (_super) {\n    __extends(LabelLayer, _super);\n    function LabelLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    LabelLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given label\n            boundsAccessor: function (label) {\n                var topLeft = [\n                    label.x - label.anchor.x,\n                    label.y - label.anchor.y,\n                ];\n                return new primitives_1.Bounds({\n                    height: label.height,\n                    width: label.width,\n                    x: topLeft[0],\n                    y: topLeft[1],\n                });\n            },\n            // Provide a precise hit test for the circle\n            hitTest: function (label, point, view) {\n                // The bounds of the label is in world space, but it does not account for the scale mode of the label.\n                // Here, we will apply the scale mode testing to the label\n                var maxScale = max.apply(void 0, view.camera.scale);\n                var minScale = min.apply(void 0, view.camera.scale);\n                // If we scale always then the label stays within it's initial world bounds at all times\n                if (label.scaling === types_2.ScaleType.ALWAYS) {\n                    return true;\n                }\n                // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n                // Label the same size. If the camera zooms out then the bounds === the world bounds.\n                else if (label.scaling === types_2.ScaleType.BOUND_MAX) {\n                    // We are zooming out. the bounds will stay within the world bounds\n                    if (minScale <= 1 && maxScale <= 1) {\n                        return true;\n                    }\n                    // We are zooming in. The bounds will shrink to keep the label at max font size\n                    else {\n                        // The location is within the world, but we reverse project the anchor spread\n                        var topLeft = view.worldToScreen({\n                            x: label.x - (label.anchor.x / view.camera.scale[0]),\n                            y: label.y - (label.anchor.y / view.camera.scale[1]),\n                        });\n                        var screenPoint = view.worldToScreen(point);\n                        // Reverse project the size and we should be within the distorted world coordinates\n                        return new primitives_1.Bounds({\n                            height: label.height,\n                            width: label.width,\n                            x: topLeft.x,\n                            y: topLeft.y,\n                        }).containsPoint(screenPoint);\n                    }\n                }\n                // If we never allow the label to scale, then the bounds will grow and shrink to counter the effects\n                // Of the camera zoom\n                else if (label.scaling === types_2.ScaleType.NEVER) {\n                    // The location is within the world, but we reverse project the anchor spread\n                    var topLeft = view.worldToScreen({\n                        x: label.x - (label.anchor.x / view.camera.scale[0]),\n                        y: label.y - (label.anchor.y / view.camera.scale[1]),\n                    });\n                    var screenPoint = view.worldToScreen(point);\n                    // Reverse project the size and we should be within the distorted world coordinates\n                    return new primitives_1.Bounds({\n                        height: label.height,\n                        width: label.width,\n                        x: topLeft.x,\n                        y: topLeft.y,\n                    }).containsPoint(screenPoint);\n                }\n                return true;\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    LabelLayer.prototype.initShader = function () {\n        var _this = this;\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: 0,\n            1: 0,\n            2: 0,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./label-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'location',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'anchor',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.anchor.x, o.anchor.y]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'size',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.width, o.height]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'scaling',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scaling]; },\n                },\n                {\n                    atlas: {\n                        key: this.props.atlas,\n                        name: 'labelAtlas',\n                    },\n                    block: 2,\n                    name: 'texture',\n                    update: function (o) { return _this.resource.request(_this, o, o.resource); },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.color; },\n                },\n                {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'scale',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scale]; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (u) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./label-layer.vs'),\n        };\n    };\n    LabelLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    LabelLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return LabelLayer;\n}(layer_1.Layer));\nexports.LabelLayer = LabelLayer;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar canvas;\nvar ImageRasterizer = /** @class */ (function () {\n    function ImageRasterizer() {\n    }\n    /**\n     * This loops until our canvas context is available\n     */\n    ImageRasterizer.awaitContext = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!canvas) return [3 /*break*/, 2];\n                        this.getContext();\n                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 0];\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Attempts to populate the 'canvas' context for rendering images offscreen.\n     */\n    ImageRasterizer.getContext = function () {\n        if (!canvas) {\n            canvas = document.createElement('canvas').getContext('2d');\n        }\n        return canvas;\n    };\n    /**\n     * This renders our image to a sizeable canvas where we loop over the pixel data to determine\n     * the bounds of the image.\n     *\n     * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n     *                                 the size to be rendered to the texture to the size the image\n     *                                 should be within world space.\n     * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n     */\n    ImageRasterizer.calculateImageSize = function (resource, sampleScale) {\n        /** Get the image properties for rasterizing */\n        var image = resource.image.element;\n        if (image.width === 0 || image.height === 0) {\n            console.warn('Images provided shoud have valid dimensions! Please ensure the image is loaded first.');\n            return;\n        }\n        // Just make sure th canvas is available\n        canvas.canvas.width = 100;\n        canvas.canvas.height = 100;\n        // Render the image into our canvas merely to ensure the image can be rendered\n        // This action often 'warms up' images such as images that have a data URL instead of a path\n        canvas.drawImage(image, 0, 0);\n        // Make sure the rasterization object is initialized\n        resource.rasterization = resource.rasterization || {\n            texture: { height: 0, width: 0 },\n            world: { height: 0, width: 0 },\n        };\n        // Update the calculated texture size.\n        resource.rasterization.texture = {\n            height: image.height * resource.sampleScale,\n            width: image.width * resource.sampleScale,\n        };\n        resource.rasterization.world = {\n            height: image.height,\n            width: image.width,\n        };\n        resource.rasterization.image = image;\n    };\n    /**\n     * Performs the rendering of the image\n     */\n    ImageRasterizer.render = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // Make sure our canvas object is ready for rendering\n                    return [4 /*yield*/, this.awaitContext()];\n                    case 1:\n                        // Make sure our canvas object is ready for rendering\n                        _a.sent();\n                        // Calculate all of the image metrics and ensure the image can be drawn\n                        this.calculateImageSize(resource, resource.sampleScale);\n                        return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    /**\n     * Performs the rendering of the image\n     */\n    ImageRasterizer.renderSync = function (resource) {\n        // Ensure our offscreen canvas is prepped\n        this.getContext();\n        if (!canvas) {\n            console.warn('Can not render a image synchronously without the canvas context being ready.');\n            return resource;\n        }\n        // Calculate all of the image metrics and generate a canvas on the image that can\n        // Be rendered to the canvas.\n        this.calculateImageSize(resource, resource.sampleScale);\n        return resource;\n    };\n    return ImageRasterizer;\n}());\nexports.ImageRasterizer = ImageRasterizer;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\nvar atlas_1 = require(\"./atlas\");\nvar color_atlas_resource_1 = require(\"./color-atlas-resource\");\nvar color_rasterizer_1 = require(\"./color-rasterizer\");\nvar image_atlas_resource_1 = require(\"./image-atlas-resource\");\nvar label_atlas_resource_1 = require(\"./label-atlas-resource\");\nvar label_rasterizer_1 = require(\"./label-rasterizer\");\nvar sub_texture_1 = require(\"./sub-texture\");\nvar debug = require('debug')('webgl-surface:Atlas');\nvar ZERO_IMAGE = {\n    aspectRatio: 0,\n    atlasBL: { x: 0, y: 0 },\n    atlasBR: { x: 0, y: 0 },\n    atlasReferenceID: '',\n    atlasTexture: null,\n    atlasTL: { x: 0, y: 0 },\n    atlasTR: { x: 0, y: 0 },\n    heightOnAtlas: 0,\n    isValid: false,\n    pixelHeight: 0,\n    pixelWidth: 0,\n    widthOnAtlas: 0,\n};\n/**\n * Determines if a SubTexture is a valid SubTexture for rendering\n */\nfunction isValidImage(image) {\n    var isValid = false;\n    if (image && image.isValid) {\n        if (image.pixelWidth && image.pixelHeight) {\n            isValid = true;\n        }\n    }\n    return isValid;\n}\n/**\n * Defines a manager of atlas', which includes generating the atlas and producing\n * textures defining those pieces of atlas.\n */\nvar AtlasManager = /** @class */ (function () {\n    function AtlasManager() {\n        /** Stores all of the generated atlas' in a lookup by name */\n        this.allAtlas = new Map();\n    }\n    /**\n     * Atlas' must be created from scratch to update them. In order to properly\n     * update an existing one, you must destroy it then recreate it again.\n     * This is from not knowing how to update a texture via three js.\n     *\n     * @param resources The images with their image path set to be loaded into the atlas.\n     *               Images that keep an atlas ID of null indicates the image did not load\n     *               correctly\n     *\n     * @return {Texture} The Threejs texture that is created as our atlas. The images injected\n     *                   into the texture will be populated with the atlas'\n     */\n    AtlasManager.prototype.createAtlas = function (options, resources) {\n        return __awaiter(this, void 0, void 0, function () {\n            var atlas;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        atlas = new atlas_1.Atlas(options);\n                        // Set the manager to the atlas\n                        atlas.setManager(this);\n                        // Make the atlas identifiable by it's name\n                        this.allAtlas.set(atlas.id, atlas);\n                        if (!resources) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.updateAtlas(atlas.id, resources)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        debug('Atlas Created-> %o', atlas);\n                        return [2 /*return*/, atlas];\n                }\n            });\n        });\n    };\n    /**\n     * Free ALL resources under this manager\n     */\n    AtlasManager.prototype.destroy = function () {\n        this.allAtlas.forEach(function (value) { return value.destroy(); });\n    };\n    /**\n     * Disposes of the resources the atlas held and makes the atlas invalid for use\n     *\n     * @param atlasName\n     */\n    AtlasManager.prototype.destroyAtlas = function (atlasName) {\n        var atlas = this.allAtlas.get(atlasName);\n        if (atlas) {\n            atlas.destroy();\n        }\n    };\n    AtlasManager.prototype.setDefaultImage = function (image, atlasName) {\n        image = Object.assign(image, ZERO_IMAGE, { atlasReferenceID: atlasName });\n        return image;\n    };\n    /**\n     * This loads, packs, and draws the indicated image into the specified canvas\n     * using the metrics that exists for the specified atlas.\n     *\n     * @param resource The image who should have it's image path loaded\n     * @param atlasName The name of the atlas to make the packing work\n     * @param canvas The canvas we will be drawing into to generate the complete image\n     *\n     * @return {Promise<boolean>} Promise that resolves to if the image successfully was drawn or not\n     */\n    AtlasManager.prototype.draw = function (atlas, resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var canvas, atlasName, loadedImage, rasterization, texture, rect, dimensions, packing, insertedNode, ux, uy, uw, uh, onePixelX, atlasDimensions, bottom, top_1, left, right;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        canvas = atlas.texture.image;\n                        atlasName = atlas.id;\n                        // Register the resource with the atlas\n                        if (!atlas.registerResource(resource)) {\n                            console.warn('Could not draw resource to the atlas as the resource was not properly registered to the atlas first', atlas, resource);\n                            return [2 /*return*/, Promise.resolve(false)];\n                        }\n                        return [4 /*yield*/, this.loadImage(resource)];\n                    case 1:\n                        loadedImage = _a.sent();\n                        // Only a non-null image means the image loaded correctly\n                        if (loadedImage && isValidImage(resource.texture)) {\n                            rasterization = resource.rasterization;\n                            texture = resource.texture;\n                            rect = new bounds_1.Bounds({ left: 0, right: rasterization.texture.width, top: 0, bottom: rasterization.texture.height });\n                            dimensions = {\n                                first: texture,\n                                second: rect,\n                            };\n                            // Auto add a buffer in\n                            dimensions.second.width += 1;\n                            dimensions.second.height += 1;\n                            packing = atlas.packing;\n                            insertedNode = packing.insert(dimensions);\n                            // If the result was NULL we did not successfully insert the image into any map\n                            if (insertedNode) {\n                                debug('Atlas location determined: %o', insertedNode);\n                                // Apply the image to the node\n                                insertedNode.nodeImage = texture;\n                                ux = insertedNode.nodeDimensions.x / atlas.width;\n                                uy = insertedNode.nodeDimensions.y / atlas.height;\n                                uw = insertedNode.nodeDimensions.width / atlas.width;\n                                uh = insertedNode.nodeDimensions.height / atlas.height;\n                                onePixelX = 1 / atlas.width;\n                                atlasDimensions = new bounds_1.Bounds({\n                                    bottom: 1.0 - uy,\n                                    left: ux,\n                                    right: ux + uw,\n                                    top: 1.0 - (uy + uh),\n                                });\n                                bottom = atlasDimensions.bottom;\n                                top_1 = atlasDimensions.y;\n                                left = atlasDimensions.x;\n                                right = atlasDimensions.x + atlasDimensions.width - onePixelX;\n                                texture.atlasReferenceID = atlasName;\n                                texture.atlasTL = { x: left, y: top_1 };\n                                texture.atlasBR = { x: right, y: bottom };\n                                texture.atlasBL = { x: left, y: bottom };\n                                texture.atlasTR = { x: right, y: top_1 };\n                                texture.widthOnAtlas = Math.abs(texture.atlasTR.x - texture.atlasTL.x);\n                                texture.heightOnAtlas = Math.abs(texture.atlasTR.y - texture.atlasBR.y);\n                                texture.pixelWidth = rasterization.texture.width;\n                                texture.pixelHeight = rasterization.texture.height;\n                                // Now draw the image to the indicated canvas\n                                canvas.getContext('2d').drawImage(loadedImage, insertedNode.nodeDimensions.x, insertedNode.nodeDimensions.y);\n                                // We have finished inserting\n                                return [2 /*return*/, true];\n                            }\n                            else {\n                                // Log an error\n                                console.error(\"Could not fit resource into atlas\", resource);\n                                resource.texture = this.setDefaultImage(resource.texture, atlasName);\n                                return [2 /*return*/, false];\n                            }\n                        }\n                        else {\n                            // Log an error and load a default sub texture\n                            console.error(\"Could not load resource:\", resource);\n                            resource.texture = this.setDefaultImage(resource.texture, atlasName);\n                            return [2 /*return*/, false];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Retrieves the threejs texture for the atlas\n     *\n     * @param atlasName The identifier of the atlas\n     */\n    AtlasManager.prototype.getAtlasTexture = function (atlasName) {\n        return this.allAtlas.get(atlasName);\n    };\n    /**\n     * This takes in any atlas resource and rasterizes it.\n     *\n     * @param {SubTexture} resource This is any atlas resource which will have it's image rasterized\n     *\n     * @return {Promise<HTMLImageElement>} A promise to resolve to the loaded image\n     *                                     or null if there was an error\n     */\n    AtlasManager.prototype.loadImage = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var imageSrc, subTexture, image_1, image, image;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        subTexture = resource.texture || new sub_texture_1.SubTexture();\n                        resource.texture = subTexture;\n                        if (!(resource instanceof image_atlas_resource_1.ImageAtlasResource)) return [3 /*break*/, 4];\n                        if (!resource.image.element) return [3 /*break*/, 2];\n                        if (resource.image.element.width !== 0 && resource.image.element.height !== 0) {\n                            image_1 = resource.image.element;\n                            subTexture.pixelWidth = image_1.width;\n                            subTexture.pixelHeight = image_1.height;\n                            subTexture.aspectRatio = image_1.width / image_1.height;\n                            return [2 /*return*/, image_1];\n                        }\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                var image = resource.image.element;\n                                image.onload = function () {\n                                    subTexture.pixelWidth = image.width;\n                                    subTexture.pixelHeight = image.height;\n                                    subTexture.aspectRatio = image.width / image.height;\n                                    resolve(image);\n                                };\n                                image.onerror = function () {\n                                    resolve(null);\n                                };\n                            })];\n                    case 1:\n                        image = _a.sent();\n                        return [2 /*return*/, image];\n                    case 2:\n                        if (resource.image.path) {\n                            imageSrc = resource.image.path;\n                        }\n                        _a.label = 3;\n                    case 3: return [3 /*break*/, 10];\n                    case 4:\n                        if (!(resource instanceof label_atlas_resource_1.LabelAtlasResource)) return [3 /*break*/, 7];\n                        if (!!resource.rasterization.canvas) return [3 /*break*/, 6];\n                        return [4 /*yield*/, label_rasterizer_1.LabelRasterizer.render(resource)];\n                    case 5:\n                        _a.sent();\n                        _a.label = 6;\n                    case 6:\n                        // Make sure the rasterization properly executed\n                        if (resource.rasterization.canvas) {\n                            debug('Rasterized label %o', resource.rasterization);\n                            imageSrc = resource.rasterization.canvas.toDataURL('image/png');\n                        }\n                        else {\n                            console.warn('The label was not able to be rasterized');\n                        }\n                        return [3 /*break*/, 10];\n                    case 7:\n                        if (!(resource instanceof color_atlas_resource_1.ColorAtlasResource)) return [3 /*break*/, 10];\n                        if (!!resource.rasterization.canvas) return [3 /*break*/, 9];\n                        return [4 /*yield*/, color_rasterizer_1.ColorRasterizer.render(resource)];\n                    case 8:\n                        _a.sent();\n                        _a.label = 9;\n                    case 9:\n                        // Make sure the rasterization properly executed\n                        if (resource.rasterization.canvas) {\n                            debug('Rasterized color %o', resource.rasterization);\n                            imageSrc = resource.rasterization.canvas.toDataURL('image/png');\n                        }\n                        else {\n                            console.warn('The color was not able to be rasterized');\n                        }\n                        _a.label = 10;\n                    case 10:\n                        if (!imageSrc) return [3 /*break*/, 12];\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                var image = new Image();\n                                image.onload = function () {\n                                    subTexture.pixelWidth = image.width;\n                                    subTexture.pixelHeight = image.height;\n                                    subTexture.aspectRatio = image.width / image.height;\n                                    resolve(image);\n                                };\n                                image.onerror = function () {\n                                    resolve(null);\n                                };\n                                image.src = imageSrc;\n                            })];\n                    case 11:\n                        image = _a.sent();\n                        return [2 /*return*/, image];\n                    case 12: return [2 /*return*/, null];\n                }\n            });\n        });\n    };\n    /**\n     * This targets an existing atlas and attempts to update it with the provided atlas resources.\n     *\n     * @param atlasName\n     * @param resources\n     */\n    AtlasManager.prototype.updateAtlas = function (atlasName, resources) {\n        return __awaiter(this, void 0, void 0, function () {\n            var atlas, _i, resources_1, resource;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        atlas = this.allAtlas.get(atlasName);\n                        if (!atlas) return [3 /*break*/, 5];\n                        _i = 0, resources_1 = resources;\n                        _a.label = 1;\n                    case 1:\n                        if (!(_i < resources_1.length)) return [3 /*break*/, 4];\n                        resource = resources_1[_i];\n                        return [4 /*yield*/, this.draw(atlas, resource)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        // Perform the best method for updating the underlying texture of the atlas to the latest changes\n                        atlas.updateTexture();\n                        return [3 /*break*/, 6];\n                    case 5:\n                        console.warn('Can not update non-existing atlas:', atlasName, 'These resources will not be loaded:', resources);\n                        _a.label = 6;\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return AtlasManager;\n}());\nexports.AtlasManager = AtlasManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\n/**\n * This is used specifically by the atlas manager to aid in packing\n * in textures within an area. This will guarantee boundaries of textures are\n * not violated and provide proper feedback for where to draw a given image\n */\nvar PackNode = /** @class */ (function () {\n    function PackNode(x, y, width, height) {\n        this.child = [null, null];\n        this.isLeaf = true;\n        this.nodeImage = null;\n        this.nodeDimensions = new bounds_1.Bounds({\n            height: height,\n            width: width,\n            x: x,\n            y: y,\n        });\n    }\n    /**\n     * Deletes all of the sub nodes in this Mapping, thus clearing up memory usage\n     */\n    PackNode.prototype.destroy = function () {\n        var child0 = this.child[0];\n        var child1 = this.child[1];\n        this.nodeImage = null;\n        if (child0) {\n            child0.destroy();\n        }\n        if (child1) {\n            child1.destroy();\n        }\n        this.child[0] = null;\n        this.child[1] = null;\n    };\n    /**\n     * Indicates if there is a child\n     */\n    PackNode.prototype.hasChild = function () {\n        var child0 = this.child[0];\n        var child1 = this.child[1];\n        if (child0 && !child0.nodeImage) {\n            return !child0.isLeaf;\n        }\n        if (child1 && !child1.nodeImage) {\n            return !child1.isLeaf;\n        }\n        return false;\n    };\n    /**\n     * Inserts images into our mapping, fitting them appropriately\n     */\n    PackNode.prototype.insert = function (image) {\n        var child0 = this.child[0];\n        var child1 = this.child[1];\n        if (!this.isLeaf && child0 && child1) {\n            // Try inserting into first child\n            var newNode = child0.insert(image);\n            if (newNode !== null) {\n                return newNode;\n            }\n            // No room in first so insert into second\n            return child1.insert(image);\n        }\n        else {\n            // If there's already an image here, return\n            if (this.nodeImage) {\n                return null;\n            }\n            // Check the fit status of the image in this nodes rectangle space\n            var fitFlag = this.nodeDimensions.fits(image.second);\n            // If we're too small, return null indicating can not fit\n            if (fitFlag === 0) {\n                return null;\n            }\n            // If we're just right, accept\n            if (fitFlag === 1) {\n                return this;\n            }\n            // Otherwise, gotta split this node and create some leaves\n            this.isLeaf = false;\n            // Get the image width\n            var imgWidth = image.second.width;\n            var imgHeight = image.second.height;\n            // Decide which way to split\n            var dWidth = this.nodeDimensions.width - imgWidth;\n            var dHeight = this.nodeDimensions.height - image.second.height;\n            if (dWidth > dHeight) {\n                this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, imgWidth, this.nodeDimensions.height);\n                this.child[1] = new PackNode(this.nodeDimensions.x + imgWidth, this.nodeDimensions.y, dWidth, this.nodeDimensions.height);\n            }\n            else {\n                this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, this.nodeDimensions.width, imgHeight);\n                this.child[1] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y + imgHeight, this.nodeDimensions.width, dHeight);\n            }\n        }\n        // Insert into first child we created\n        return this.child[0].insert(image);\n    };\n    /**\n     * Removes the image from the mapping and tries to open up as much space as possible.\n     *\n     * @param {AtlasTexture} image The image to insert into the\n     */\n    PackNode.prototype.remove = function (image) {\n        if (!this.isLeaf) {\n            // Try removing from first child\n            var removed = this.child[0].remove(image);\n            if (removed) {\n                return true;\n            }\n            // Try remove from second\n            removed = this.child[1].remove(image);\n            if (!this.child[0].hasChild()) {\n                if (!this.child[1].hasChild()) {\n                    this.child[0] = null;\n                    this.child[1] = null;\n                }\n            }\n            return removed;\n        }\n        else {\n            if (this.nodeImage === image) {\n                this.nodeImage = null;\n                image.atlasReferenceID = null;\n                image.pixelWidth = 0;\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n    };\n    return PackNode;\n}());\nexports.PackNode = PackNode;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar texture_1 = require(\"../../surface/texture\");\nvar instance_1 = require(\"../../util/instance\");\nvar types_1 = require(\"../types\");\nvar max = Math.max;\n/**\n * This is a lookup to find existing rasterizations for a particularly created image so that every\n * new image does not have to go through the rasterization process.\n */\nvar rasterizationLookUp = new Map();\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nvar anchorCalculator = (_a = {},\n    _a[types_1.AnchorType.TopLeft] = function (anchor, image) {\n        anchor.x = -anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopMiddle] = function (anchor, image) {\n        anchor.x = image.width / 2.0;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopRight] = function (anchor, image) {\n        anchor.x = image.width + anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.MiddleLeft] = function (anchor, image) {\n        anchor.x = -anchor.padding;\n        anchor.y = image.height / 2;\n    },\n    _a[types_1.AnchorType.Middle] = function (anchor, image) {\n        anchor.x = image.width / 2.0;\n        anchor.y = image.height / 2.0;\n    },\n    _a[types_1.AnchorType.MiddleRight] = function (anchor, image) {\n        anchor.x = image.width + anchor.padding;\n        anchor.y = image.height / 2.0;\n    },\n    _a[types_1.AnchorType.BottomLeft] = function (anchor, image) {\n        anchor.x = -anchor.padding;\n        anchor.y = image.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomMiddle] = function (anchor, image) {\n        anchor.x = image.width / 2.0;\n        anchor.y = image.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomRight] = function (anchor, image) {\n        anchor.x = image.width + anchor.padding;\n        anchor.y = image.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.Custom] = function (anchor, image) {\n        anchor.x = anchor.x || 0;\n        anchor.y = anchor.y || 0;\n    },\n    _a);\n/**\n * This generates a new image instance which will render a single line of text for a given layer.\n * There are restrictions surrounding images due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a image via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Images should only be so long.\n * - Multiline is not supported inherently\n * - Once a image is constructed, only SOME properties can be altered thereafter\n *\n * A image that is constructed can only have some properties set upon creating the image and are locked\n * thereafter. The only way to modify them would be to destroy the image, then construct a new image\n * with the modifications. This has to deal with performance regarding rasterizing the image\n */\nvar ImageInstance = /** @class */ (function (_super) {\n    __extends(ImageInstance, _super);\n    function ImageInstance(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the rendered color of the image */\n        _this.tint = [0, 0, 0, 1];\n        /** Depth sorting of the image (or the z value of the lable) */\n        _this.depth = 0;\n        /** The height of the image as it is to be rendered in world space */\n        _this.height = 1;\n        /** Sets the way the image scales with the world */\n        _this.scaling = types_1.ScaleType.BOUND_MAX;\n        /** The width of the image as it is to be rendered in world space */\n        _this.width = 1;\n        /** The x coordinate where the image will be anchored to in world space */\n        _this.x = 0;\n        /** The y coordinate where the image will be anchored to in world space */\n        _this.y = 0;\n        // The following properties are properties that are locked in after creating this image\n        // As the properties are completely locked into how the image was rasterized and can not\n        // Nor should not be easily adjusted for performance concerns\n        _this._sourceWidth = 0;\n        _this._sourceHeight = 0;\n        _this._isDestroyed = false;\n        // These are properties that can be altered, but have side effects from being changed\n        /** This is the anchor location on the  */\n        _this._anchor = {\n            padding: 0,\n            type: types_1.AnchorType.TopLeft,\n            x: 0,\n            y: 0,\n        };\n        _this.depth = options.depth || _this.depth;\n        _this.tint = options.tint || _this.tint;\n        _this.scaling = options.scaling || _this.scaling;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        // This is the image that is to be rendered\n        _this._element = options.element;\n        // Look for other same texts that have been rasterized\n        var rasterization = rasterizationLookUp.get(_this._path || _this._element);\n        // If a rasterization exists, we must increment the use reference\n        if (rasterization) {\n            rasterization.references++;\n        }\n        // If we have not found an existing rasterization\n        if (!rasterization) {\n            rasterization = {\n                references: 1,\n                resource: new texture_1.ImageAtlasResource(_this),\n            };\n            // Ensure the sample scale is set. Defaults to 1.0\n            rasterization.resource.sampleScale = rasterization.resource.sampleScale || 1.0;\n            // Rasterize the resource generated for this image. We need it immediately rasterized so\n            // That we can utilize the dimensions for calculations.\n            texture_1.ImageRasterizer.renderSync(rasterization.resource);\n            // Now that we have an official rasterization for this image, we shall store it\n            // For others to look up\n            rasterizationLookUp.set(_this._path || _this._element, rasterization);\n        }\n        _this._rasterization = rasterization;\n        _this._sourceWidth = rasterization.resource.rasterization.world.width;\n        _this._sourceHeight = rasterization.resource.rasterization.world.height;\n        _this.width = options.width || _this._sourceWidth || 1;\n        _this.height = options.height || _this._sourceHeight || 1;\n        // Make sure the anchor is set to the appropriate location\n        options.anchor && _this.setAnchor(options.anchor);\n        return _this;\n    }\n    /**\n     * TODO: We should be implementing the destroy on ImageInstances to clean this up\n     * Frees up module scoped data.\n     */\n    ImageInstance.destroy = function () {\n        rasterizationLookUp.clear();\n    };\n    Object.defineProperty(ImageInstance.prototype, \"size\", {\n        get: function () { return max(this.width, this.height); },\n        set: function (value) {\n            var aspect = this.width / this.height;\n            this.width = value * aspect;\n            this.height = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"element\", {\n        // The following are the getters for the locked in parameters of the image so we can read\n        // The properties but not set any of them.\n        /** This is the provided element this image will be rendering */\n        get: function () { return this._element; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"isDestroyed\", {\n        /** This flag indicates if this image is valid anymore */\n        get: function () { return this._isDestroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"path\", {\n        /** This is the path to the image's resource if it's available */\n        get: function () { return this._path; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"resource\", {\n        /** This gets the atlas resource that is uniquely idenfied for this image */\n        get: function () { return this._rasterization.resource; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"sourceWidth\", {\n        /**\n         * This is the width in world space of the image. If there is no camera distortion,\n         * this would be the width of the image in pixels on the screen.\n         */\n        get: function () {\n            return this._sourceWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"sourceHeight\", {\n        /**\n         * This is the height in world space of the image. If there is no camera distortion,\n         * this would be the height of the image in pixels on the screen.\n         */\n        get: function () {\n            return this._sourceHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Images are a sort of unique case where the use of a image should be destroyed as rasterization\n     * resources are in a way kept alive through reference counting.\n     */\n    ImageInstance.prototype.destroy = function () {\n        if (!this._isDestroyed) {\n            this._isDestroyed = true;\n            this._rasterization.references--;\n            // If all references are cleared, then the rasterization needs to be eradicated\n            if (this._rasterization.references === 0) {\n                this._rasterization.resource;\n                console.warn('The destroy method still needs completion');\n            }\n        }\n    };\n    Object.defineProperty(ImageInstance.prototype, \"anchor\", {\n        get: function () {\n            return this._anchor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This applies a new anchor to this image and properly determines it's anchor position on the image\n     */\n    ImageInstance.prototype.setAnchor = function (anchor) {\n        var newAnchor = {\n            padding: anchor.padding || 0,\n            type: anchor.type,\n            x: anchor.x || 0,\n            y: anchor.y || 0,\n        };\n        // Calculate the new anchors position values\n        anchorCalculator[newAnchor.type](newAnchor, this);\n        // Apply the anchor\n        this._anchor = newAnchor;\n    };\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"tint\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"depth\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"height\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"scaling\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"width\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"x\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"y\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"_anchor\", void 0);\n    __decorate([\n        mobx_1.computed\n    ], ImageInstance.prototype, \"anchor\", null);\n    return ImageInstance;\n}(instance_1.Instance));\nexports.ImageInstance = ImageInstance;\nvar _a;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the image as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the image is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y;\\n\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float(cameraScale.x != cameraScale.y);\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n\\n  // Get the tex coord from our inject texture info\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the image's tint as a tint to the image\\n  vertexColor = tint;\\n\\n  // Correct aspect ratio.\\n  size = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * size + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the image\\n  float imageScreenScale = mix(\\n    screenSize.y / size.y,\\n    screenSize.x / size.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the image is supposed to be, then we automagically\\n  // scale down our image to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / imageScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  gl_FragColor = texture2D(imageAtlas, texCoord) * vertexColor;\\n  gl_FragColor *= gl_FragColor.a;\\n}\\n\"","module.exports = \"void main() {\\n  gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n}\"","module.exports = \"\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\n/**\n * This manages mouse gestures broadcast to the layer and handles appropriate actions such as determining\n * how to make the interaction translate to picking events for the layer's instances.\n *\n * This class, in summary, takes in the gestures to the view and converts them to gestures to the instances.\n */\nvar LayerInteractionHandler = /** @class */ (function () {\n    function LayerInteractionHandler(layer) {\n        /** This tracks the elements that have the mouse currently over them */\n        this.isMouseOver = new Map();\n        /** This tracks the elements the mouse was down on */\n        this.isMouseDown = new Map();\n        this.layer = layer;\n    }\n    /**\n     * Handles mouse down gestures for a layer within a view\n     */\n    LayerInteractionHandler.prototype.handleMouseOver = function (view, mouse) {\n        // This is the mouse over for the view itself. We should probably just let the mouse over events handle the interactions\n        // With the instances\n    };\n    /**\n     * Handles mouse down gestures for a layer within a view\n     */\n    LayerInteractionHandler.prototype.handleMouseDown = function (view, mouse, button) {\n        var _this = this;\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type === types_1.PickType.ALL) {\n            var onMouseDown = this.layer.props.onMouseDown;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseDown) {\n                var world_1 = view.viewToWorld(mouse);\n                var hitTest_1 = this.layer.picking.hitTest;\n                var query_1 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                var instances = query_1(world_1).filter(function (o) { return hitTest_1(o, world_1, view); });\n                var info = {\n                    button: button,\n                    instances: instances,\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: function (check) { return query_1(check).filter(function (o) { return hitTest_1(o, world_1, view); }); },\n                    screen: [mouse.x, mouse.y],\n                    world: [world_1.x, world_1.y],\n                };\n                onMouseDown(info);\n                // We track all the elements the mouse is currently down on\n                this.isMouseDown.clear();\n                instances.forEach(function (o) { return _this.isMouseDown.set(o, true); });\n            }\n        }\n    };\n    /**\n     * Handles mouse out events for a layer within the view\n     */\n    LayerInteractionHandler.prototype.handleMouseOut = function (view, mouse) {\n        // This will fire an instance mouse out for any over instances in the queue since we left the view\n        // Thus no instances shall be considered 'over'\n        if (this.layer.picking && this.layer.picking.type === types_1.PickType.ALL) {\n            var onMouseOut = this.layer.props.onMouseOut;\n            if (onMouseOut) {\n                var world_2 = view.viewToWorld(mouse);\n                var query_2 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                var hitTest_2 = this.layer.picking.hitTest;\n                var info = {\n                    instances: Array.from(this.isMouseOver.keys()),\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: function (check) { return query_2(check).filter(function (o) { return hitTest_2(o, world_2, view); }); },\n                    screen: [mouse.x, mouse.y],\n                    world: [world_2.x, world_2.y],\n                };\n                onMouseOut(info);\n            }\n        }\n        // We clear as no instances are over anymore\n        this.isMouseOver.clear();\n        // We also clear all down elements as the mouse is no longer in proper context for the instances\n        // But since the mouse was never actually released, we do not fire an up\n        this.isMouseDown.clear();\n    };\n    /**\n     * Handles mouse up gestures for the layer within the provided view\n     */\n    LayerInteractionHandler.prototype.handleMouseUp = function (view, mouse, button) {\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type === types_1.PickType.ALL) {\n            var onMouseUp = this.layer.props.onMouseUp;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseUp) {\n                var world_3 = view.viewToWorld(mouse);\n                var hitTest_3 = this.layer.picking.hitTest;\n                var query_3 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                var instances = query_3(world_3).filter(function (o) { return hitTest_3(o, world_3, view); });\n                var info = {\n                    button: button,\n                    instances: instances,\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: function (check) { return query_3(check).filter(function (o) { return hitTest_3(o, world_3, view); }); },\n                    screen: [mouse.x, mouse.y],\n                    world: [world_3.x, world_3.y],\n                };\n                onMouseUp(info);\n            }\n        }\n    };\n    /**\n     * Mouse move events on the layer will detect when instances have their item newly over or just moved on\n     */\n    LayerInteractionHandler.prototype.handleMouseMove = function (view, mouse) {\n        var _this = this;\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type === types_1.PickType.ALL) {\n            var _a = this.layer.props, onMouseOver = _a.onMouseOver, onMouseMove = _a.onMouseMove, onMouseOut = _a.onMouseOut;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseOver || onMouseMove || onMouseOut) {\n                var info = void 0;\n                var world_4 = view.viewToWorld(mouse);\n                var hitTest_4 = this.layer.picking.hitTest;\n                var query_4 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                var instances = query_4(world_4).filter(function (o) { return hitTest_4(o, world_4, view); });\n                // Broadcast the picking info for newly over instances to any of the layers listeners if needed\n                if (onMouseOver) {\n                    var notOverInstances = instances.filter(function (o) { return !_this.isMouseOver.get(o); });\n                    info = {\n                        instances: notOverInstances,\n                        layer: this.layer.id,\n                        projection: view,\n                        querySpace: function (check) { return query_4(check).filter(function (o) { return hitTest_4(o, world_4, view); }); },\n                        screen: [mouse.x, mouse.y],\n                        world: [world_4.x, world_4.y],\n                    };\n                    if (notOverInstances.length > 0)\n                        onMouseOver(info);\n                }\n                // Broadcast the the picking info for all instances that the mouse moved on\n                if (onMouseMove) {\n                    // This is the pick info object we will broadcast from the layer\n                    info = {\n                        instances: instances,\n                        layer: this.layer.id,\n                        projection: view,\n                        querySpace: function (check) { return query_4(check).filter(function (o) { return hitTest_4(o, world_4, view); }); },\n                        screen: [mouse.x, mouse.y],\n                        world: [world_4.x, world_4.y],\n                    };\n                    onMouseMove(info);\n                }\n                // We take the hovered instances\n                var isCurrentlyOver_1 = new Map();\n                instances.forEach(function (o) { return isCurrentlyOver_1.set(o, true); });\n                // Broadcast the the picking info for all instances that the mouse moved off of\n                if (onMouseOut) {\n                    var noLongerOver = Array.from(this.isMouseOver.keys()).filter(function (o) { return !isCurrentlyOver_1.get(o); });\n                    // This is the pick info object we will broadcast from the layer\n                    info = {\n                        instances: noLongerOver,\n                        layer: this.layer.id,\n                        projection: view,\n                        querySpace: function (check) { return query_4(check).filter(function (o) { return hitTest_4(o, world_4, view); }); },\n                        screen: [mouse.x, mouse.y],\n                        world: [world_4.x, world_4.y],\n                    };\n                    if (noLongerOver.length > 0)\n                        onMouseOut(info);\n                }\n                // We store the current hovered over items as our over item list for next interaction\n                this.isMouseOver = isCurrentlyOver_1;\n            }\n        }\n    };\n    /**\n     * Handles click gestures on the layer within a view\n     */\n    LayerInteractionHandler.prototype.handleMouseClick = function (view, mouse, button) {\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type === types_1.PickType.ALL) {\n            var onMouseClick = this.layer.props.onMouseClick;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseClick) {\n                var world_5 = view.viewToWorld(mouse);\n                var hitTest_5 = this.layer.picking.hitTest;\n                var query_5 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                var instances = query_5(world_5).filter(function (o) { return hitTest_5(o, world_5, view); });\n                var info = {\n                    button: button,\n                    instances: instances,\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: function (check) { return query_5(check).filter(function (o) { return hitTest_5(o, world_5, view); }); },\n                    screen: [mouse.x, mouse.y],\n                    world: [world_5.x, world_5.y],\n                };\n                onMouseClick(info);\n            }\n        }\n    };\n    /**\n     * Handles drag gestures for the layer within the view\n     */\n    LayerInteractionHandler.prototype.handleMouseDrag = function (view, mouse) {\n        // We probably should not broadcast drag events for the sake of instances. Instance dragging should be handled on\n        // An instance by instance basis rather than coming from the view's gestures\n    };\n    return LayerInteractionHandler;\n}());\nexports.LayerInteractionHandler = LayerInteractionHandler;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\n// This is a mapping of the vector properties as they relate to an array order\nvar VECTOR_ACCESSORS = ['x', 'y', 'z', 'w'];\n/**\n * This class manages the process of taking the diffs of a layer and executing methods on those diffs to perform\n * updates to the uniforms that control those instances.\n */\nvar InstanceDiffManager = /** @class */ (function () {\n    function InstanceDiffManager(layer) {\n        this.layer = layer;\n    }\n    /**\n     * This returns the proper diff processor for handling diffs\n     */\n    InstanceDiffManager.prototype.getDiffProcessor = function () {\n        if (this.layer.picking) {\n            if (this.layer.picking.type === types_1.PickType.ALL) {\n                this.quadPicking = this.layer.picking;\n                return [\n                    this.changeInstanceQuad,\n                    this.addInstanceQuad,\n                    this.removeInstanceQuad,\n                ];\n            }\n        }\n        return [\n            this.changeInstance,\n            this.addInstance,\n            this.removeInstance,\n        ];\n    };\n    /**\n     * This processes add operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.addInstance = function (manager, instance, uniformCluster) {\n        // If the uniform cluster already exists, then we swap over to a change update\n        if (uniformCluster) {\n            manager.changeInstance(manager, instance, uniformCluster);\n        }\n        // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n        else {\n            var uniforms = manager.layer.uniformManager.add(instance);\n            instance.active = true;\n            manager.updateInstance(instance, uniforms);\n        }\n    };\n    /**\n     * This processes add operations from changes in the instancing data and manages the layer's quad tree\n     * with the instance as well.\n     */\n    InstanceDiffManager.prototype.addInstanceQuad = function (manager, instance, uniformCluster) {\n        // If the uniform cluster already exists, then we swap over to a change update\n        if (uniformCluster) {\n            manager.changeInstanceQuad(manager, instance, uniformCluster);\n        }\n        // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n        else {\n            var uniforms = manager.layer.uniformManager.add(instance);\n            instance.active = true;\n            manager.updateInstance(instance, uniforms);\n            // Ensure the instance has an updated injection in the quad tree\n            manager.quadPicking.quadTree.remove(instance);\n            manager.quadPicking.quadTree.add(instance);\n        }\n    };\n    /**\n     * This processes change operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.changeInstance = function (manager, instance, uniformCluster) {\n        // If there is an existing uniform cluster for this instance, then we can update the uniforms\n        if (uniformCluster) {\n            manager.updateInstance(instance, uniformCluster);\n        }\n        // If we don't have existing uniforms, then we must remove the instance\n        else {\n            manager.addInstance(manager, instance, uniformCluster);\n        }\n    };\n    /**\n     * This processes change operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.changeInstanceQuad = function (manager, instance, uniformCluster) {\n        // If there is an existing uniform cluster for this instance, then we can update the uniforms\n        if (uniformCluster) {\n            manager.updateInstance(instance, uniformCluster);\n            // Ensure the instance has an updated injection in the quad tree\n            manager.quadPicking.quadTree.remove(instance);\n            manager.quadPicking.quadTree.add(instance);\n        }\n        // If we don't have existing uniforms, then we must remove the instance\n        else {\n            manager.addInstanceQuad(manager, instance, uniformCluster);\n        }\n    };\n    /**\n     * This processes remove operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.removeInstance = function (manager, instance, uniformCluster) {\n        if (uniformCluster) {\n            // We deactivate the instance so it does not render anymore\n            instance.active = false;\n            // We do one last update on the instance to update to it's deactivated state\n            manager.updateInstance(instance, uniformCluster);\n            // Unlink the instance from the uniform cluster\n            manager.layer.uniformManager.remove(instance);\n        }\n    };\n    /**\n     * This processes remove operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.removeInstanceQuad = function (manager, instance, uniformCluster) {\n        if (uniformCluster) {\n            // We deactivate the instance so it does not render anymore\n            instance.active = false;\n            // We do one last update on the instance to update to it's deactivated state\n            manager.updateInstance(instance, uniformCluster);\n            // Unlink the instance from the uniform cluster\n            manager.layer.uniformManager.remove(instance);\n            // Remove the instance from our quad tree\n            manager.quadPicking.quadTree.remove(instance);\n        }\n    };\n    InstanceDiffManager.prototype.updateInstance = function (instance, uniformCluster) {\n        if (instance.active) {\n            var uniforms = uniformCluster.uniform;\n            var uniformRangeStart = uniformCluster.uniformRange[0];\n            var instanceData = uniforms.value;\n            var instanceUniform = void 0, value = void 0, block = void 0, start = void 0;\n            var k = void 0, endk = void 0;\n            // Loop through the instance attributes and update the uniform cluster with the valaues\n            // Calculated for the instance\n            for (var i = 0, end = this.layer.instanceAttributes.length; i < end; ++i) {\n                instanceUniform = this.layer.instanceAttributes[i];\n                value = instanceUniform.update(instance);\n                block = instanceData[uniformRangeStart + instanceUniform.block];\n                instanceUniform.atlas && this.layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n                start = instanceUniform.blockIndex;\n                // Hyper optimized vector filling routine. It uses properties that are globally scoped\n                // To greatly reduce overhead\n                for (k = start, endk = value.length + start; k < endk; ++k) {\n                    block[VECTOR_ACCESSORS[k]] = value[k - start];\n                }\n            }\n            uniforms.value = instanceData;\n        }\n        else {\n            var uniforms = uniformCluster.uniform;\n            var uniformRangeStart = uniformCluster.uniformRange[0];\n            var instanceData = uniforms.value;\n            var instanceUniform = void 0, value = void 0, block = void 0, start = void 0;\n            // Only update the _active attribute to ensure it is false. When it is false, there is no\n            // Point to updating any other uniform\n            instanceUniform = this.layer.activeAttribute;\n            value = instanceUniform.update(instance);\n            block = instanceData[uniformRangeStart + instanceUniform.block];\n            instanceUniform.atlas && this.layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n            start = instanceUniform.blockIndex;\n            // Hyper optimized vector filling routine. It uses properties that are globally scoped\n            // To greatly reduce overhead\n            for (var k = start, endk = value.length + start; k < endk; ++k) {\n                block[VECTOR_ACCESSORS[k]] = value[k - start];\n            }\n            uniforms.value = instanceData;\n        }\n    };\n    return InstanceDiffManager;\n}());\nexports.InstanceDiffManager = InstanceDiffManager;\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * Active `debug` instances.\n */\nexports.instances = [];\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  var prevTime;\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n  debug.destroy = destroy;\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  exports.instances.push(debug);\n\n  return debug;\n}\n\nfunction destroy () {\n  var index = exports.instances.indexOf(this);\n  if (index !== -1) {\n    exports.instances.splice(index, 1);\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var i;\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n\n  for (i = 0; i < exports.instances.length; i++) {\n    var instance = exports.instances[i];\n    instance.enabled = exports.enabled(instance.namespace);\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  if (name[name.length - 1] === '*') {\n    return true;\n  }\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__99__;","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nvar maxPopulation = 5;\nvar maxDepth = 10;\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n */\nvar Quadrants = /** @class */ (function () {\n    /**\n     * Creates an instance of Quadrants.\n     *\n     * @param bounds The bounds this will create quandrants for\n     * @param depth  The child depth of this element\n     */\n    function Quadrants(bounds, depth, getBounds, childToNode, childToBounds) {\n        var mid = bounds.mid;\n        this.TL = new Node(bounds.x, mid.x, bounds.y, mid.y, getBounds, depth);\n        this.TR = new Node(mid.x, bounds.right, bounds.y, mid.y, getBounds, depth);\n        this.BL = new Node(bounds.x, mid.x, mid.y, bounds.bottom, getBounds, depth);\n        this.BR = new Node(mid.x, bounds.right, mid.y, bounds.bottom, getBounds, depth);\n        this.TL.childToNode = childToNode;\n        this.TR.childToNode = childToNode;\n        this.BL.childToNode = childToNode;\n        this.BR.childToNode = childToNode;\n        this.TL.childToBounds = childToBounds;\n        this.TR.childToBounds = childToBounds;\n        this.BL.childToBounds = childToBounds;\n        this.BR.childToBounds = childToBounds;\n    }\n    /**\n     * Ensures all memory is released for all nodes and all references are removed\n     * to potentially high memory consumption items\n     */\n    Quadrants.prototype.destroy = function () {\n        this.TL.destroy();\n        this.TR.destroy();\n        this.BL.destroy();\n        this.BR.destroy();\n        delete this.TL;\n        delete this.TR;\n        delete this.BL;\n        delete this.BR;\n    };\n    return Quadrants;\n}());\nexports.Quadrants = Quadrants;\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n */\nvar Node = /** @class */ (function () {\n    /**\n     * Creates an instance of Node.\n     */\n    function Node(left, right, top, bottom, getBounds, depth) {\n        if (depth === void 0) { depth = 0; }\n        /** These are the child Instances of the node. */\n        this.children = [];\n        /** This is how deep the node is within the tree */\n        this.depth = 0;\n        /** These are the child nodes of this quad node when this node is split. It is null if the node is not split yet */\n        this.nodes = null;\n        // If params insertted\n        if (arguments.length >= 4) {\n            this.bounds = new bounds_1.Bounds({ left: left, right: right, top: top, bottom: bottom });\n        }\n        else {\n            // Otherwise, make tiny start area\n            this.bounds = new bounds_1.Bounds({ left: 0, right: 1, top: 1, bottom: 0 });\n        }\n        // Ensure the depth is set\n        this.depth = depth;\n        // Apply the bounds accessor method for instances\n        this.getBounds = getBounds;\n        // If this is the top level node, we need to instantiate the lookup that will be used\n        // Across all nodes.\n        if (this.depth === 0) {\n            this.nullBounded = [];\n            this.childToNode = new Map();\n            this.childToBounds = new Map();\n        }\n    }\n    /**\n     * Destroys this node and ensures all child nodes are destroyed as well.\n     */\n    Node.prototype.destroy = function () {\n        delete this.children;\n        delete this.bounds;\n        if (this.nodes) {\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n    };\n    /**\n     * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n     * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n     * this quad tree spans (and this is the root node), the quad tree will expand to include\n     * the new child.\n     *\n     * @param child The Bounds type object to inject\n     * @param props Properties that can be retrieved with the child object if applicable\n     *\n     * @returns True if the insertion was successful\n     */\n    Node.prototype.add = function (child) {\n        var bounds = this.childToBounds.get(child);\n        if (!bounds) {\n            // First we access the bounds of the child and store it\n            bounds = this.getBounds(child);\n            this.childToBounds.set(child, bounds);\n        }\n        // This is the entry function for adding children, so we must first expand our top node\n        // To cover the area that the child is located.\n        // If we're in bounds, then let's just add the child\n        if (!bounds || bounds.isInside(this.bounds)) {\n            return this.doAdd(child, bounds);\n        }\n        else {\n            // Otherwise, we need to expand first\n            this.cover(bounds);\n            return this.add(child);\n        }\n    };\n    /**\n     * Adds a list of new children to this quad tree. It performs the same operations as\n     * addChild for each child in the list, however, it more efficiently recalculates the\n     * bounds necessary to cover the area the children cover.\n     *\n     * @param children      List of Bounds objects to inject\n     */\n    Node.prototype.addAll = function (children) {\n        var _this = this;\n        // Make sure we cover the entire area of all the children.\n        // We can speed this up a lot if we first calculate the total bounds the new children covers\n        var minX = Number.MAX_VALUE;\n        var minY = Number.MAX_VALUE;\n        var maxX = -Number.MAX_VALUE;\n        var maxY = -Number.MAX_VALUE;\n        // Get the dimensions of the new bounds\n        children.forEach(function (child) {\n            var bounds = _this.getBounds(child);\n            _this.childToBounds.set(child, bounds);\n            if (!bounds)\n                return;\n            if (bounds.x < minX) {\n                minX = bounds.x;\n            }\n            if (bounds.right > maxX) {\n                maxX = bounds.right;\n            }\n            if (bounds.bottom > maxY) {\n                maxY = bounds.bottom;\n            }\n            if (bounds.y < minY) {\n                minY = bounds.y;\n            }\n        });\n        // Ensure a valid cover dimension was established. If no valid dimension is established\n        // Then we don't cover, but we can still add the children as that have null Bounds which\n        // Means injecting at the top level.\n        if (minX !== Number.MAX_VALUE &&\n            minY !== Number.MAX_VALUE &&\n            maxX !== -Number.MAX_VALUE &&\n            maxY !== -Number.MAX_VALUE) {\n            // Make sure our bounds includes the specified bounds\n            this.cover(new bounds_1.Bounds({ left: minX, right: maxX, bottom: maxY, top: minY }));\n        }\n        // Add all of the children into the tree.\n        children.forEach(function (child, index) { return _this.doAdd(child, _this.childToBounds.get(child) || null, true); });\n    };\n    /**\n     * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n     * This will cause all children to be re-injected into the tree.\n     *\n     * @param bounds The bounds to include in the tree's coverage\n     */\n    Node.prototype.cover = function (bounds) {\n        var _this = this;\n        // If we are already covering the area: abort\n        if (bounds.isInside(this.bounds)) {\n            return;\n        }\n        // Make our bounds cover the new area\n        this.bounds.encapsulate(bounds);\n        this.bounds.x -= 1;\n        this.bounds.y -= 1;\n        this.bounds.width += 2;\n        this.bounds.height += 2;\n        // Get all of the children underneath this node\n        var allChildren = this.gatherChildren([]);\n        this.children = [];\n        // Destroy the split nodes\n        if (this.nodes) {\n            // Completely...destroy...\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n        // Clear out the child to node relations\n        this.childToNode.clear();\n        // Reinsert all children with the new dimensions in place\n        allChildren.forEach(function (child, index) { return _this.doAdd(child, _this.childToBounds.get(child) || null); });\n    };\n    /**\n     * When adding children, this performs the actual action of injecting the child into the tree\n     * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n     *\n     * @param child The Bounds item to inject into the tree\n     * @param props The props to remain associated with the child\n     *\n     * @returns True if the injection was successful\n     */\n    Node.prototype.doAdd = function (child, bounds, fromSplit) {\n        // If this is the top level node and the bounds are null, then we add to the null list\n        if (!bounds && this.depth === 0) {\n            this.nullBounded.push(child);\n            this.childToNode.set(child, this);\n            return true;\n        }\n        // If no bounds is available at this point, something went terribly wrong\n        if (!bounds) {\n            console.warn('A null bounds was added to a Quad Tree node below the top node, which is invalid.');\n            return false;\n        }\n        // If bounds are null, then just immediately add\n        // If nodes are present, then we have already exceeded the population of this node\n        if (this.nodes) {\n            if (bounds.isInside(this.nodes.TL.bounds)) {\n                return this.nodes.TL.doAdd(child, bounds, fromSplit);\n            }\n            if (bounds.isInside(this.nodes.TR.bounds)) {\n                return this.nodes.TR.doAdd(child, bounds, fromSplit);\n            }\n            if (bounds.isInside(this.nodes.BL.bounds)) {\n                return this.nodes.BL.doAdd(child, bounds, fromSplit);\n            }\n            if (bounds.isInside(this.nodes.BR.bounds)) {\n                return this.nodes.BR.doAdd(child, bounds, fromSplit);\n            }\n            // Otherwise, this is a child overlapping this border\n            this.children.push(child);\n            this.childToNode.set(child, this);\n            return true;\n        }\n        else if (bounds.isInside(this.bounds)) {\n            // Otherwise, we have not had a split due to population limits being exceeded\n            this.children.push(child);\n            this.childToNode.set(child, this);\n            // If we exceeded our population for this quadrant, it is time to split up\n            if (this.children.length > maxPopulation && this.depth < maxDepth) {\n                this.split();\n            }\n            return true;\n        }\n        // This is when there is something wrong with the insertted child. The bounds\n        // For the quad should have grown without issue, but in this case the bounds\n        // Could not grow to accomodate the child.\n        if (isNaN(bounds.width + bounds.height + bounds.x + bounds.y)) {\n            console.error('Child did not fit into bounds because a dimension is NaN', child, bounds);\n        }\n        else if (bounds.area === 0) {\n            console.error('Child did not fit into bounds because the area is zero', child, bounds);\n        }\n        else {\n            console.error('Child did not get insertted.', 'Parent:', this.bounds.toString(), 'Child:', bounds.toString(), 'Inside Checks:', bounds.x >= this.bounds.x, bounds.right <= this.bounds.right, bounds.y >= this.bounds.y, bounds.bottom <= this.bounds.bottom);\n        }\n        // Don't insert the child and continue\n        return true;\n    };\n    Node.prototype.doRemove = function (child) {\n        var index = this.children.indexOf(child);\n        if (index > -1) {\n            this.children.splice(index, 1);\n            this.childToNode.delete(child);\n            this.childToBounds.delete(child);\n        }\n    };\n    /**\n     * Collects all children of all the current and sub nodes into a single list.\n     *\n     * @param list The list we must aggregate children into\n     *\n     * @return The list specified as the list parameter\n     */\n    Node.prototype.gatherChildren = function (list) {\n        this.children.forEach(function (child) { return list.push(child); });\n        if (this.nodes) {\n            this.nodes.TL.gatherChildren(list);\n            this.nodes.TR.gatherChildren(list);\n            this.nodes.BL.gatherChildren(list);\n            this.nodes.BR.gatherChildren(list);\n        }\n        return list;\n    };\n    /**\n     * Entry query for determining query type based on input object\n     *\n     * @param bounds Can be a Bounds or a Point object\n     * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n     *               information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return An array of children that intersects with the query\n     */\n    Node.prototype.query = function (bounds, visit) {\n        // This stores all of the found Instances when querying by bounds or point\n        var found = [];\n        // If this is the top level node then add in the null bunded items as the start\n        if (this.depth === 0) {\n            found = this.nullBounded.slice(0);\n        }\n        // Query a rectangle\n        if (bounds instanceof bounds_1.Bounds) {\n            if (bounds.hitBounds(this.bounds)) {\n                return this.queryBounds(bounds, found, visit);\n            }\n        }\n        // Query a point\n        if (this.bounds.containsPoint(bounds)) {\n            return this.queryPoint(bounds, found, visit);\n        }\n        // Return an empty array when nothing is collided with\n        return found;\n    };\n    /**\n     * Queries children for intersection with a bounds object\n     *\n     * @param b     The Bounds to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return     Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryBounds = function (b, list, visit) {\n        var _this = this;\n        this.children.forEach(function (c) {\n            var bounds = _this.childToBounds.get(c);\n            if (bounds && bounds.hitBounds(b)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (b.hitBounds(this.nodes.TL.bounds)) {\n                this.nodes.TL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.TR.bounds)) {\n                this.nodes.TR.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BL.bounds)) {\n                this.nodes.BL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BR.bounds)) {\n                this.nodes.BR.queryBounds(b, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Queries children for intersection with a point\n     *\n     * @param p     The Point to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return      Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryPoint = function (p, list, visit) {\n        var _this = this;\n        this.children.forEach(function (c) {\n            var bounds = _this.childToBounds.get(c);\n            if (bounds && bounds.containsPoint(p)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (this.nodes.TL.bounds.containsPoint(p)) {\n                this.nodes.TL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.TR.bounds.containsPoint(p)) {\n                this.nodes.TR.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BL.bounds.containsPoint(p)) {\n                this.nodes.BL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BR.bounds.containsPoint(p)) {\n                this.nodes.BR.queryPoint(p, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Remove the provided item from the tree.\n     */\n    Node.prototype.remove = function (child) {\n        if (this.childToNode) {\n            var node = this.childToNode.get(child);\n            // If the node is getting removed from the top level node, then it MAY be a null bounded item\n            // Which gets removed from the list\n            if (node && node.depth === 0) {\n                var index = node.nullBounded.indexOf(child);\n                if (index > -1) {\n                    node.nullBounded.splice(index);\n                    this.childToNode.delete(child);\n                    this.childToBounds.delete(child);\n                    return;\n                }\n            }\n            // Otherwise, just remove the node normally\n            if (node) {\n                node.doRemove(child);\n            }\n        }\n    };\n    /**\n     * Creates four sub quadrants for this node.\n     */\n    Node.prototype.split = function () {\n        // Gather all items to be handed down\n        var allChildren = this.gatherChildren([]);\n        // Gather all props for the children to be handed down as well\n        this.nodes = new Quadrants(this.bounds, this.depth + 1, this.getBounds, this.childToNode, this.childToBounds);\n        // Empty out the children as they are being re-injected\n        this.children = [];\n        for (var i = 0, end = allChildren.length; i < end; ++i) {\n            var child = allChildren[i];\n            this.doAdd(child, this.childToBounds.get(child) || null, true);\n        }\n    };\n    /**\n     * Traverses the quad tree returning every quadrant encountered\n     *\n     * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n     */\n    Node.prototype.visit = function (cb) {\n        var finished = Boolean(cb(this));\n        if (this.nodes && !finished) {\n            this.nodes.TL.visit(cb);\n            this.nodes.TR.visit(cb);\n            this.nodes.BL.visit(cb);\n            this.nodes.BR.visit(cb);\n        }\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar TrackedQuadTree = /** @class */ (function (_super) {\n    __extends(TrackedQuadTree, _super);\n    function TrackedQuadTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return TrackedQuadTree;\n}(Node));\nexports.TrackedQuadTree = TrackedQuadTree;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chart_camera_1 = require(\"./chart-camera\");\n/**\n * This is a camera that is based on another camera. This can apply filters\n * to the information provided from the base camera.\n *\n * Useful for situations such as a chart having a chart area and a list on the\n * left. This can use the same camera the chart area uses, but filter the response\n * to only track the y offset of the base camera.\n *\n * That would allow easy tracking of the left list to track with elements in the\n * chart and only manipulate a single camera instead of managing many cameras and\n * tie them together with lots of events.\n */\nvar ReferenceCamera = /** @class */ (function (_super) {\n    __extends(ReferenceCamera, _super);\n    function ReferenceCamera(options) {\n        var _this = _super.call(this) || this;\n        _this.offsetFilter = function (offset) { return offset; };\n        _this.scaleFilter = function (scale) { return scale; };\n        Object.assign(_this, options);\n        return _this;\n    }\n    Object.defineProperty(ReferenceCamera.prototype, \"offset\", {\n        get: function () {\n            return this.offsetFilter(this.base.offset);\n        },\n        set: function (val) {\n            /** no-op */\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ReferenceCamera.prototype, \"scale\", {\n        get: function () {\n            return this.scaleFilter(this.base.scale);\n        },\n        set: function (val) {\n            /** no-op */\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ReferenceCamera;\n}(chart_camera_1.ChartCamera));\nexports.ReferenceCamera = ReferenceCamera;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar DiffType;\n(function (DiffType) {\n    DiffType[DiffType[\"CHANGE\"] = 0] = \"CHANGE\";\n    DiffType[DiffType[\"INSERT\"] = 1] = \"INSERT\";\n    DiffType[DiffType[\"REMOVE\"] = 2] = \"REMOVE\";\n})(DiffType = exports.DiffType || (exports.DiffType = {}));\nfunction isObservableArray(val) {\n    return Boolean(val.observe);\n}\nvar UPDATE_FLAG = 'update';\nvar SPLICE_FLAG = 'splice';\n/**\n * This is a generic DataProvider that provides instance data to a layer. It monitors\n * changes to a list of instance items and records those changes for consumption by\n * internal layer processes. This allows for extremely easy editing of instance data\n * that reflects highly targetted changes to the system with very little overhead\n * allowing for very large datasets with rapidly changing parts.\n */\nvar DataProvider = /** @class */ (function () {\n    function DataProvider(data) {\n        var _this = this;\n        // When active, this provider is recording changes. Deactivate to temporarily disable\n        // Change tracking.\n        this.active = true;\n        this.instanceDisposers = new Map();\n        this.instanceChanges = new Map();\n        this.instanceById = new Map();\n        this.isChanged = false;\n        this._changeList = [];\n        /**\n         * This generates a method for an interceptor to monitor individual items within a list and record\n         * any changes found to the changelist\n         *\n         * @param changes This is the change list which records the changes to the items\n         */\n        this.monitorItem = function (changes) { return function (change) {\n            if (_this.active) {\n                if (change.type === UPDATE_FLAG) {\n                    changes.set(change.object, DiffType.CHANGE);\n                    _this.isChanged = true;\n                }\n                else {\n                    console.warn('Received an update type not supported by monitorItem:', change.type);\n                }\n            }\n            return change;\n        }; };\n        this._instances = mobx_1.observable(data || []);\n        if (isObservableArray(this._instances)) {\n            this.listDisposer = mobx_1.intercept(this._instances, this.monitorList(this._instances, this.instanceChanges, this.instanceById, this.instanceDisposers));\n        }\n    }\n    Object.defineProperty(DataProvider.prototype, \"instances\", {\n        // We very explicitly shut off the ability to set the top level properties on\n        // This element. Mutations on the properties are allowed (and are thus trackable)\n        // But modifying the root properties will not have a very clean way to monitor that.\n        // So we make the properties accessible without being replaceable.\n        get: function () {\n            return this._instances;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataProvider.prototype, \"changeList\", {\n        get: function () {\n            // When the changelist is retrieved, we deactivate change recording until the provider\n            // Is resolved\n            this.active = false;\n            if (this.isChanged) {\n                var changes_1 = [];\n                this.instanceChanges.forEach(function (changeType, instance) {\n                    changes_1.push([instance, changeType]);\n                });\n                this._changeList = changes_1;\n            }\n            return this._changeList;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Clears out all disposers and items in the dataset\n     */\n    DataProvider.prototype.destroy = function () {\n        this.listDisposer();\n        this.instanceDisposers.forEach(function (disposer) { return disposer(); });\n        this._instances = null;\n        this.instanceChanges.clear();\n        this._changeList = null;\n    };\n    /**\n     * This generates a method for an interceptor that will monitor and collect change information\n     * on the list of items specified.\n     *\n     * @param list The list of items to monitor\n     * @param changes The changelist for the list of given item type\n     * @param lookUp A lookup so items that have changed can get their source easily\n     */\n    DataProvider.prototype.monitorList = function (list, changes, lookUp, disposers) {\n        var _this = this;\n        return function (change) {\n            if (_this.active) {\n                // We only handle splice types for changes, these indicate elements have been added or removed\n                if (change.type === SPLICE_FLAG) {\n                    // Record the removals and clear out any interceptors\n                    for (var i = change.index, end = change.index + change.removedCount; i < end; ++i) {\n                        var item = change.object[i];\n                        changes.set(item, DiffType.REMOVE);\n                        _this.isChanged = true;\n                        var dispose = disposers.get(item);\n                        if (dispose) {\n                            dispose();\n                        }\n                    }\n                    // Record the additions and add intercepts for each item. Also generate a lookup for the item\n                    for (var i = 0, end = change.added.length; i < end; ++i) {\n                        var item = change.added[i] = mobx_1.observable(change.added[i]);\n                        changes.set(item, DiffType.INSERT);\n                        _this.isChanged = true;\n                        lookUp.set(item.id, item);\n                        disposers.set(item, mobx_1.intercept(item, _this.monitorItem(changes)));\n                    }\n                }\n                else {\n                    console.warn('Received an update type not supported by monitorList:', change.type);\n                }\n            }\n            return change;\n        };\n    };\n    /**\n     * This resolves all of the changes found and makes them disappear.\n     */\n    DataProvider.prototype.resolve = function () {\n        this.instanceById.clear();\n        this.instanceChanges.clear();\n        this._changeList = [];\n        this.active = true;\n    };\n    return DataProvider;\n}());\nexports.DataProvider = DataProvider;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Calculates the distance between two points, but keeps the distance in dquared form\n * thus performing Math.sqrt() on the output of this distance would provide the true\n * distance between the points.\n *\n * It is often faster and all that is needed to compare squared distances vs real distances\n * thus eliminating multiple Math.sqrt operations\n *\n * NOTE: For vectors this is the same as (pseudo code):\n * let vector3 = vector2.subtract(vector1)\n * return vector3.dot(vector3)\n *\n * @param p1 The point to find the distance from the second point\n * @param p2 The point to find the distance from the first point\n *\n * @return {number} The distance * distance between the two points\n */\nfunction squareDistance(p1, p2) {\n    var dx = p1.x - p2.x;\n    var dy = p1.y - p2.y;\n    return dx * dx + dy * dy;\n}\n/**\n * Contains methods for managing or manipulating points\n *\n * @export\n * @class Point\n */\nvar Point = /** @class */ (function () {\n    function Point() {\n    }\n    /**\n     * Adds two points together\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @return {IPoint} The two points added together\n     */\n    Point.add = function (p1, p2, out) {\n        if (out) {\n            out.x = p1.x + p2.x;\n            out.y = p1.y + p2.y;\n            return out;\n        }\n        return {\n            x: p1.x + p2.x,\n            y: p1.y + p2.y,\n        };\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {IPoint} The closest point to the test point\n     */\n    Point.getClosest = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = null;\n        var distance;\n        var findClosest = function (point) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = point;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * This just returns the index of the found point and not the point itself\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {number} The index of the closest point to the test point\n     */\n    Point.getClosestIndex = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = 0;\n        var distance;\n        var findClosest = function (point, i) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = i;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This will calculate a direction vector between two points that points toward p2\n     *\n     * @param {IPoint} amount The start of the direction\n     * @param {IPoint} from The direction to point the vector towards\n     * @param {boolean} normalize If true, this will make the vector have a magnitude of 1\n     *\n     * @returns {number}\n     */\n    Point.subtract = function (amount, from, normalize) {\n        if (normalize === void 0) { normalize = false; }\n        var dx = from.x - amount.x;\n        var dy = from.y - amount.y;\n        if (normalize) {\n            var magnitude = Math.sqrt(dx * dx + dy * dy);\n            dx /= magnitude;\n            dy /= magnitude;\n        }\n        return {\n            x: dx,\n            y: dy,\n        };\n    };\n    /**\n     * @static\n     * Gets the distance between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {boolean} squared If set to true, returns the distance * distance (performs faster)\n     *\n     * @returns {number} The real distance between two points\n     */\n    Point.getDistance = function (p1, p2, squared) {\n        if (squared === void 0) { squared = false; }\n        if (squared) {\n            return squareDistance(p1, p2);\n        }\n        return Math.sqrt(squareDistance(p1, p2));\n    };\n    /**\n     * @static\n     * Gets a point perfectly between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     *\n     * @returns {IPoint} The point between the two provided points\n     */\n    Point.getMidpoint = function (p1, p2) {\n        var direction = Point.subtract(p1, p2);\n        return {\n            x: direction.x / 2 + p1.x,\n            y: direction.y / 2 + p1.y,\n        };\n    };\n    Point.make = function (x, y) {\n        return { x: x, y: y };\n    };\n    /**\n     * Scales a point by a given amount\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {number} s The amount to scale the point by\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @memberof Point\n     */\n    Point.scale = function (p1, s, out) {\n        if (out) {\n            out.x = p1.x * s;\n            out.y = p1.y * s;\n            return out;\n        }\n        return {\n            x: p1.x * s,\n            y: p1.y * s,\n        };\n    };\n    /**\n     * Makes a new point initialized to {0,0}\n     *\n     * @static\n     * @returns {IPoint} A new point object at {0,0}\n     */\n    Point.zero = function () {\n        return {\n            x: 0,\n            y: 0,\n        };\n    };\n    return Point;\n}());\nexports.Point = Point;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar types_2 = require(\"../types\");\nvar min = Math.min, max = Math.max;\n/**\n * This layer displays Images and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar ImageLayer = /** @class */ (function (_super) {\n    __extends(ImageLayer, _super);\n    function ImageLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    ImageLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given image\n            boundsAccessor: function (image) {\n                var topLeft = [\n                    image.x - image.anchor.x,\n                    image.y - image.anchor.y,\n                ];\n                return new primitives_1.Bounds({\n                    height: image.height,\n                    width: image.width,\n                    x: topLeft[0],\n                    y: topLeft[1],\n                });\n            },\n            // Provide a precise hit test for the circle\n            hitTest: function (image, point, view) {\n                // The bounds of the image is in world space, but it does not account for the scale mode of the image.\n                // Here, we will apply the scale mode testing to the image\n                var maxScale = max.apply(void 0, view.camera.scale);\n                var minScale = min.apply(void 0, view.camera.scale);\n                // If we scale always then the image stays within it's initial world bounds at all times\n                if (image.scaling === types_2.ScaleType.ALWAYS) {\n                    return true;\n                }\n                // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n                // Image the same size. If the camera zooms out then the bounds === the world bounds.\n                else if (image.scaling === types_2.ScaleType.BOUND_MAX) {\n                    // We are zooming out. the bounds will stay within the world bounds\n                    if (minScale <= 1 && maxScale <= 1) {\n                        return true;\n                    }\n                    // We are zooming in. The bounds will shrink to keep the image at max font size\n                    else {\n                        // The location is within the world, but we reverse project the anchor spread\n                        var topLeft = view.worldToScreen({\n                            x: image.x - (image.anchor.x / view.camera.scale[0]),\n                            y: image.y - (image.anchor.y / view.camera.scale[1]),\n                        });\n                        var screenPoint = view.worldToScreen(point);\n                        // Reverse project the size and we should be within the distorted world coordinates\n                        return new primitives_1.Bounds({\n                            height: image.height,\n                            width: image.width,\n                            x: topLeft.x,\n                            y: topLeft.y,\n                        }).containsPoint(screenPoint);\n                    }\n                }\n                // If we never allow the image to scale, then the bounds will grow and shrink to counter the effects\n                // Of the camera zoom\n                else if (image.scaling === types_2.ScaleType.NEVER) {\n                    // The location is within the world, but we reverse project the anchor spread\n                    var topLeft = view.worldToScreen({\n                        x: image.x - (image.anchor.x / view.camera.scale[0]),\n                        y: image.y - (image.anchor.y / view.camera.scale[1]),\n                    });\n                    var screenPoint = view.worldToScreen(point);\n                    // Reverse project the size and we should be within the distorted world coordinates\n                    return new primitives_1.Bounds({\n                        height: image.height,\n                        width: image.width,\n                        x: topLeft.x,\n                        y: topLeft.y,\n                    }).containsPoint(screenPoint);\n                }\n                return true;\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    ImageLayer.prototype.initShader = function () {\n        var _this = this;\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: 0,\n            1: 0,\n            2: 0,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./image-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'location',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'anchor',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.anchor.x, o.anchor.y]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'size',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.width, o.height]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'scaling',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scaling]; },\n                },\n                {\n                    atlas: {\n                        key: this.props.atlas,\n                        name: 'imageAtlas',\n                    },\n                    block: 2,\n                    name: 'texture',\n                    update: function (o) { return _this.resource.request(_this, o, o.resource); },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'tint',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.tint; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (u) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./image-layer.vs'),\n        };\n    };\n    ImageLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    ImageLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return ImageLayer;\n}(layer_1.Layer));\nexports.ImageLayer = ImageLayer;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar images_1 = require(\"../base-layers/images\");\nvar labels_1 = require(\"../base-layers/labels\");\nvar bounds_1 = require(\"../primitives/bounds\");\nvar attribute_generation_1 = require(\"../shaders/util/attribute-generation\");\nvar generate_default_scene_1 = require(\"../surface/generate-default-scene\");\nvar generate_layer_geometry_1 = require(\"../surface/generate-layer-geometry\");\nvar generate_layer_material_1 = require(\"../surface/generate-layer-material\");\nvar generate_layer_model_1 = require(\"../surface/generate-layer-model\");\nvar inject_shader_io_1 = require(\"../surface/inject-shader-io\");\nvar mouse_event_manager_1 = require(\"../surface/mouse-event-manager\");\nvar scene_1 = require(\"../surface/scene\");\nvar view_1 = require(\"../surface/view\");\nvar data_bounds_1 = require(\"../util/data-bounds\");\nvar instance_uniform_manager_1 = require(\"../util/instance-uniform-manager\");\nvar layer_mouse_events_1 = require(\"./event-managers/layer-mouse-events\");\nvar texture_1 = require(\"./texture\");\nvar atlas_resource_manager_1 = require(\"./texture/atlas-resource-manager\");\nvar DEFAULT_BACKGROUND_COLOR = new Three.Color(1.0, 1.0, 1.0);\nfunction isCanvas(val) {\n    return Boolean(val.getContext);\n}\nfunction isString(val) {\n    return Boolean(val.substr);\n}\nfunction isWebGLContext(val) {\n    return Boolean(val.canvas);\n}\n/**\n * Used for reactive layer generation and updates.\n */\nfunction createLayer(layerClass, props) {\n    return [layerClass, props];\n}\nexports.createLayer = createLayer;\n/**\n * This is a manager for layers. It will use voidgl layers to intelligently render resources\n * as efficiently as possible. Layers will be rendered in the order they are provided and this\n * surface will provide some basic camera controls by default.\n */\nvar LayerSurface = /** @class */ (function () {\n    function LayerSurface() {\n        /** This is the atlas manager that will help with modifying and tracking atlas' generated for the layers */\n        this.atlasManager = new texture_1.AtlasManager();\n        /** This is all of the layers in this manager by their id */\n        this.layers = new Map();\n        /** This is the density the rendering renders for the surface */\n        this.pixelRatio = window.devicePixelRatio;\n        /**\n         * This is all of the available scenes and their views for this surface. Layers reference the IDs\n         * of the scenes and the views to be a part of their rendering state.\n         */\n        this.scenes = new Map();\n        /**\n         * This is all of the views currently generated for this surface paired with the scene they render.\n         */\n        this.sceneViews = [];\n        /**\n         * This flags all layers by id for disposal at the end of every render. A Layer must be recreated\n         * after each render in order to clear it's disposal flag. This is the trick to making this a\n         * reactive system.\n         */\n        this.willDisposeLayer = new Map();\n        /**\n         * This is used to help resolve concurrent draws. There are some very async operations that should\n         * not overlap in draw calls.\n         */\n        this.isBufferingAtlas = false;\n    }\n    Object.defineProperty(LayerSurface.prototype, \"gl\", {\n        /** Read only getter for the gl context */\n        get: function () {\n            return this.context;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This adds a layer to the manager which will manage all of the resource lifecycles of the layer\n     * as well as additional helper injections to aid in instancing and shader i/o.\n     */\n    LayerSurface.prototype.addLayer = function (layer) {\n        if (!layer.id) {\n            console.warn('All layers must have an id');\n            return layer;\n        }\n        if (this.layers.get(layer.id)) {\n            console.warn('All layer\\'s ids must be unique per layer manager');\n            return layer;\n        }\n        // We add the layer to our management\n        this.layers.set(layer.id, layer);\n        // Now we initialize the layer's gl components\n        this.initLayer(layer);\n        return layer;\n    };\n    /**\n     * Free all resources consumed by this surface that gets applied to the GPU.\n     */\n    LayerSurface.prototype.destroy = function () {\n        this.layers.forEach(function (layer) { return layer.destroy(); });\n        this.resourceManager.destroy();\n        this.mouseManager.destroy();\n        this.sceneViews.forEach(function (sceneView) { return sceneView.scene.destroy(); });\n        this.renderer.dispose();\n        // TODO: Instances should be implementing destroy for these clean ups.\n        labels_1.LabelInstance.destroy();\n        images_1.ImageInstance.destroy();\n    };\n    /**\n     * This is the draw loop that must be called per frame for updates to take effect and display.\n     */\n    LayerSurface.prototype.draw = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var scenes, i, end, scene, views, layers, k, endk, view, j, endj, layer, didBuffer;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.gl)\n                            return [2 /*return*/];\n                        scenes = Array.from(this.scenes.values());\n                        // Loop through scenes\n                        for (i = 0, end = scenes.length; i < end; ++i) {\n                            scene = scenes[i];\n                            views = Array.from(scene.viewById.values());\n                            layers = scene.layers;\n                            // Make sure the layers are depth sorted\n                            scene.sortLayers();\n                            // Loop through the views\n                            for (k = 0, endk = views.length; k < endk; ++k) {\n                                view = views[k];\n                                // We must perform any operations necessary to make the view camera fit the viewport\n                                // Correctly\n                                view.fitViewtoViewport(new bounds_1.Bounds({\n                                    height: this.context.canvas.height,\n                                    width: this.context.canvas.width,\n                                    x: 0,\n                                    y: 0,\n                                }));\n                                // Let the layers update their uniforms before the draw\n                                for (j = 0, endj = layers.length; j < endj; ++j) {\n                                    layer = layers[j];\n                                    // Update the layer with the view it is about to be rendered with\n                                    layer.view = view;\n                                    // Make sure the layer is given the opportunity to update all of it's uniforms\n                                    // To match the view state and update any unresolved diffs internally\n                                    layer.draw();\n                                }\n                                // Now perform the rendering\n                                this.drawSceneView(scene.container, view);\n                            }\n                        }\n                        // After we have drawn our views of our scenes, we can now ensure all of the bounds\n                        // Are updated in the interactions and flag our interactions ready for mouse input\n                        if (this.mouseManager.waitingForRender) {\n                            this.sceneViews.forEach(function (sceneView) {\n                                sceneView.bounds = new data_bounds_1.DataBounds(sceneView.view.screenBounds);\n                                sceneView.bounds.data = sceneView;\n                            });\n                            this.mouseManager.waitingForRender = false;\n                        }\n                        if (!!this.isBufferingAtlas) return [3 /*break*/, 2];\n                        this.isBufferingAtlas = true;\n                        return [4 /*yield*/, this.resourceManager.dequeueRequests()];\n                    case 1:\n                        didBuffer = _a.sent();\n                        this.isBufferingAtlas = false;\n                        // If buffering did occur and completed, then we should be performing a draw to ensure all of the\n                        // Changes are committed and pushed out.\n                        if (didBuffer)\n                            this.draw();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This finalizes everything and sets up viewports and clears colors and\n     */\n    LayerSurface.prototype.drawSceneView = function (scene, view) {\n        var offset = { x: view.viewBounds.left, y: view.viewBounds.top };\n        var size = view.viewBounds;\n        var rendererSize = this.renderer.getSize();\n        rendererSize.width *= this.renderer.getPixelRatio();\n        rendererSize.height *= this.renderer.getPixelRatio();\n        var background = view.background;\n        // Set the scissor rectangle.\n        this.context.enable(this.context.SCISSOR_TEST);\n        this.context.scissor(offset.x, rendererSize.height - offset.y - size.height, size.width, size.height);\n        // If a background is established, we should clear the background color\n        // Specified for this context\n        if (view.background) {\n            // Clear the rect of color and depth so the region is totally it's own\n            this.context.clearColor(background[0], background[1], background[2], background[3]);\n        }\n        // Get the view's clearing preferences\n        if (view.clearFlags) {\n            this.context.clear((view.clearFlags.indexOf(view_1.ClearFlags.COLOR) > -1 ? this.context.COLOR_BUFFER_BIT : 0x0) |\n                (view.clearFlags.indexOf(view_1.ClearFlags.DEPTH) > -1 ? this.context.DEPTH_BUFFER_BIT : 0x0) |\n                (view.clearFlags.indexOf(view_1.ClearFlags.STENCIL) > -1 ? this.context.STENCIL_BUFFER_BIT : 0x0));\n        }\n        // Default clearing is depth and color\n        else {\n            this.context.clear(this.context.COLOR_BUFFER_BIT | this.context.DEPTH_BUFFER_BIT);\n        }\n        // Only if the viewport is different from last viewport should we attempt a viewport state\n        // Change.\n        var box = this.currentViewport;\n        if (!box || box.x !== offset.x || box.y !== offset.y || box.width !== size.width || box.height !== size.height) {\n            this.renderer.setViewport(offset.x / this.pixelRatio, offset.y / this.pixelRatio, size.width, size.height);\n            this.currentViewport = {\n                height: size.height,\n                width: size.width,\n                x: offset.x,\n                y: offset.y,\n            };\n        }\n        // Render the scene with the provided view metrics\n        this.renderer.render(scene, view.viewCamera.baseCamera);\n    };\n    /**\n     * This allows for querying a view's screen bounds. Null is returned if the view id\n     * specified does not exist.\n     */\n    LayerSurface.prototype.getViewSize = function (viewId) {\n        for (var _i = 0, _a = this.sceneViews; _i < _a.length; _i++) {\n            var sceneView = _a[_i];\n            if (sceneView.view.id === viewId) {\n                return sceneView.view.screenBounds;\n            }\n        }\n        return null;\n    };\n    /**\n     * This queries a view's window into a world's space.\n     */\n    LayerSurface.prototype.getViewWorldBounds = function (viewId) {\n        for (var _i = 0, _a = this.sceneViews; _i < _a.length; _i++) {\n            var sceneView = _a[_i];\n            if (sceneView.view.id === viewId) {\n                var view = sceneView.view;\n                if (view.screenBounds) {\n                    var topLeft = view.viewToWorld({ x: 0, y: 0 });\n                    var bottomRight = view.screenToWorld({ x: view.screenBounds.right, y: view.screenBounds.bottom });\n                    return new bounds_1.Bounds({\n                        bottom: bottomRight.y,\n                        left: topLeft.x,\n                        right: bottomRight.x,\n                        top: topLeft.y,\n                    });\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n        return null;\n    };\n    /**\n     * This is the beginning of the system. This should be called immediately after the surface is constructed.\n     * We make this mandatory outside of the constructor so we can make it follow an async pattern.\n     */\n    LayerSurface.prototype.init = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Make sure our desired pixel ratio is set up\n                        this.pixelRatio = options.pixelRatio || this.pixelRatio;\n                        // Make sure we have a gl context to work with\n                        this.setContext(options.context);\n                        if (!this.gl) return [3 /*break*/, 2];\n                        // Initialize our GL needs that set the basis for rendering\n                        this.initGL(options);\n                        // Initialize our event manager that handles mouse interactions/gestures with the canvas\n                        this.initMouseManager(options);\n                        // Initialize any resources requested or needed, such as textures or rendering surfaces\n                        return [4 /*yield*/, this.initResources(options)];\n                    case 1:\n                        // Initialize any resources requested or needed, such as textures or rendering surfaces\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/, this];\n                }\n            });\n        });\n    };\n    /**\n     * This initializes the Canvas GL contexts needed for rendering.\n     */\n    LayerSurface.prototype.initGL = function (options) {\n        var _this = this;\n        if (!this.context) {\n            console.error('Can not initialize Layer Surface as a valid GL context was not established.');\n            return;\n        }\n        // Get the canvas of our context to set up our Three settings\n        var canvas = this.context.canvas;\n        // Get the starting width and height so adjustments don't affect it\n        var width = canvas.width;\n        var height = canvas.height;\n        // Generate the renderer along with it's properties\n        this.renderer = new Three.WebGLRenderer({\n            // Context supports rendering to an alpha canvas only if the background color has a transparent\n            // Alpha value.\n            alpha: options.background && (options.background[3] < 1.0),\n            // Yes to antialias! Make it preeeeetty!\n            antialias: true,\n            // Make three use an existing canvas rather than generate another\n            canvas: canvas,\n            // TODO: This should be toggleable. If it's true it allows us to snapshot the rendering in the canvas\n            //       But we dont' always want it as it makes performance drop a bit.\n            preserveDrawingBuffer: true,\n        });\n        // We want clearing to be controlled via the layer\n        this.renderer.autoClear = false;\n        // Charts don't really have face culling. Just 2D shapes\n        this.renderer.setFaceCulling(Three.CullFaceNone);\n        // This sets the pixel ratio to handle differing pixel densities in screens\n        this.renderer.setSize(width, height);\n        // Set the pixel ratio to match the pixel density of the monitor in use\n        this.renderer.setPixelRatio(this.pixelRatio);\n        // Applies the background color and establishes whether or not the context supports\n        // Alpha or not\n        if (options.background) {\n            this.renderer.setClearColor(new Three.Color(options.background[0], options.background[1], options.background[2]), options.background[3]);\n        }\n        // If a background color was not established, then we set a default background color\n        else {\n            this.renderer.setClearColor(DEFAULT_BACKGROUND_COLOR);\n        }\n        // Once we have made our renderer we now make us a default scene to which we can add objects\n        this.defaultSceneElements = generate_default_scene_1.generateDefaultScene(this.context);\n        this.defaultSceneElements.view.background = options.background;\n        // Set the default scene\n        this.scenes.set(this.defaultSceneElements.scene.id, this.defaultSceneElements.scene);\n        // Make a scene view depth tracker so we can track the order each scene view combo is drawn\n        var sceneViewDepth = 0;\n        // Make a SceneView for the default scene and view for mouse interactions\n        this.sceneViews.push({\n            depth: ++sceneViewDepth,\n            scene: this.defaultSceneElements.scene,\n            view: this.defaultSceneElements.view,\n        });\n        // Turn on the scissor test to keep the rendering clipped within the\n        // Render region of the context\n        this.context.enable(this.context.SCISSOR_TEST);\n        // Add the requested scenes to the surface and apply the necessary defaults\n        if (options.scenes) {\n            options.scenes.forEach(function (sceneOptions) {\n                // Make us a new scene based on the requested options\n                var newScene = new scene_1.Scene(sceneOptions);\n                // Make sure the default view is available for each scene\n                // IFF no view is provided for the scene\n                if (sceneOptions.views.length === 0) {\n                    newScene.addView(_this.defaultSceneElements.view);\n                    _this.sceneViews.push({\n                        depth: ++sceneViewDepth,\n                        scene: newScene,\n                        view: _this.defaultSceneElements.view,\n                    });\n                }\n                // Generate the views requested for the scene\n                sceneOptions.views.forEach(function (viewOptions) {\n                    var newView = new view_1.View(viewOptions);\n                    newView.camera = newView.camera || _this.defaultSceneElements.camera;\n                    newView.viewCamera = newView.viewCamera || _this.defaultSceneElements.viewCamera;\n                    newView.viewport = newView.viewport || _this.defaultSceneElements.viewport;\n                    newView.pixelRatio = _this.pixelRatio;\n                    newScene.addView(newView);\n                    for (var _i = 0, _a = _this.sceneViews; _i < _a.length; _i++) {\n                        var sceneView = _a[_i];\n                        if (sceneView.view.id === newView.id) {\n                            console.warn('You can NOT have two views with the same id. Please use unique identifiers for every view generated.');\n                        }\n                    }\n                    _this.sceneViews.push({\n                        depth: ++sceneViewDepth,\n                        scene: newScene,\n                        view: newView,\n                    });\n                });\n                _this.scenes.set(sceneOptions.key, newScene);\n            });\n        }\n    };\n    /**\n     * This does special initialization by gathering the layers shader IO, generates a material\n     * and injects special automated uniforms and attributes to make instancing work for the\n     * shader.\n     */\n    LayerSurface.prototype.initLayer = function (layer) {\n        // Set the resource manager this surface utilizes to the layer\n        layer.resource = this.resourceManager;\n        // For the sake of initializing uniforms to the correct values, we must first add the layer to it's appropriate\n        // Scene so that the necessary values will be in place for the sahder IO\n        var scene = this.addLayerToScene(layer);\n        // Get the shader metrics the layer desires\n        var shaderIO = layer.initShader();\n        // Clean out nulls provided as a convenience to the layer\n        shaderIO.instanceAttributes = shaderIO.instanceAttributes.filter(Boolean);\n        shaderIO.vertexAttributes = shaderIO.vertexAttributes.filter(Boolean);\n        shaderIO.uniforms = shaderIO.uniforms.filter(Boolean);\n        // Get the injected shader IO attributes and uniforms\n        var _a = inject_shader_io_1.injectShaderIO(layer, shaderIO), vertexAttributes = _a.vertexAttributes, instanceAttributes = _a.instanceAttributes, uniforms = _a.uniforms;\n        // Generate the actual shaders to be used by injecting all of the necessary fragments and injecting\n        // Instancing fragments\n        var shaderMetrics = attribute_generation_1.injectFragments(shaderIO, vertexAttributes, instanceAttributes, uniforms);\n        // Generate the geometry this layer will be utilizing\n        var geometry = generate_layer_geometry_1.generateLayerGeometry(shaderMetrics.maxInstancesPerBuffer, vertexAttributes, shaderIO.vertexCount);\n        // This is the material that is generated for the layer that utilizes all of the generated and\n        // Injected shader IO and shader fragments\n        var material = generate_layer_material_1.generateLayerMaterial(layer, shaderMetrics.vs, shaderMetrics.fs, uniforms, shaderMetrics.materialUniforms);\n        // And now we can now generate the mesh that will be added to the scene\n        var model = generate_layer_model_1.generateLayerModel(layer, geometry, material);\n        // Now that all of the elements of the layer are complete, let us apply them to the layer\n        layer.geometry = geometry;\n        layer.instanceAttributes = instanceAttributes;\n        layer.instanceVertexCount = shaderIO.vertexCount;\n        layer.material = material;\n        layer.maxInstancesPerBuffer = shaderMetrics.maxInstancesPerBuffer;\n        layer.model = model;\n        layer.uniforms = uniforms;\n        layer.vertexAttributes = vertexAttributes;\n        // The layer now needs a specialized uniform manager to provide instances with an appropriate set of uniforms\n        // To be able to render.\n        layer.uniformManager = new instance_uniform_manager_1.InstanceUniformManager(layer, scene);\n        return layer;\n    };\n    /**\n     * Initializes elements for handling mouse interactions with the canvas.\n     */\n    LayerSurface.prototype.initMouseManager = function (options) {\n        // We must inject an event manager to broadcast events through the layers themselves\n        var eventManagers = (options.eventManagers || []).concat([\n            new layer_mouse_events_1.LayerMouseEvents(this.sceneViews),\n        ]);\n        // Generate the mouse manager for the layer\n        this.mouseManager = new mouse_event_manager_1.MouseEventManager(this.context.canvas, this.sceneViews, eventManagers, options.handlesWheelEvents);\n    };\n    /**\n     * This initializes resources needed or requested such as textures or render surfaces.\n     */\n    LayerSurface.prototype.initResources = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _i, _a, resource;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!options.atlasResources) return [3 /*break*/, 4];\n                        _i = 0, _a = options.atlasResources;\n                        _b.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3 /*break*/, 4];\n                        resource = _a[_i];\n                        return [4 /*yield*/, this.atlasManager.createAtlas(resource)];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        // Initialize our resource manager with the atlas manager\n                        this.resourceManager = new atlas_resource_manager_1.AtlasResourceManager({\n                            atlasManager: this.atlasManager,\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This finds the scene and view the layer belongs to based on the layer's props. For invalid or not provided\n     * props, the layer gets added to default scenes and views.\n     */\n    LayerSurface.prototype.addLayerToScene = function (layer) {\n        // Get the scene the layer will add itself to\n        var scene = this.scenes.get(layer.props.scene);\n        if (!scene) {\n            // If no scene is specified by the layer, or the scene identifier is invalid, then we add the layer\n            // To the default scene.\n            scene = this.defaultSceneElements.scene;\n            if (layer.props.scene) {\n                console.warn('Layer specified a scene that is not within the layer surface manager. Layer will be added to the default scene.');\n            }\n        }\n        // Add the layer to the scene for rendering\n        scene.addLayer(layer);\n        return scene;\n    };\n    /**\n     * Discontinues a layer's management by this surface. This will invalidate any resources\n     * the layer was using in association with the context. If the layer is re-insertted, it will\n     * be revaluated as though it were a new layer.\n     */\n    LayerSurface.prototype.removeLayer = function (layer) {\n        // Make sure we are removing a layer that exists in the system\n        if (!this.layers.get(layer && layer.id)) {\n            console.warn('Tried to remove a layer that is not in the manager.', layer);\n            return layer;\n        }\n        layer.uniformManager.removeFromScene();\n        layer.destroy();\n        this.layers.delete(layer.id);\n        return layer;\n    };\n    /**\n     * Used for reactive rendering and diffs out the layers for changed layers.\n     */\n    LayerSurface.prototype.render = function (layerInitializers) {\n        var _this = this;\n        if (!this.gl)\n            return;\n        // Loop through all of the initializers and properly add and remove layers as needed\n        if (layerInitializers && layerInitializers.length > 0) {\n            layerInitializers.forEach(function (init) {\n                var layerClass = init[0];\n                var props = init[1];\n                var existingLayer = _this.layers.get(props.key);\n                if (existingLayer) {\n                    existingLayer.willUpdateProps(props);\n                    Object.assign(existingLayer.props, props);\n                    existingLayer.didUpdateProps();\n                }\n                else {\n                    _this.addLayer(new layerClass(Object.assign({}, layerClass.defaultProps, props)));\n                }\n                _this.willDisposeLayer.set(props.key, false);\n            });\n        }\n        // Take any layer that retained it's disposal flag and trash it\n        this.willDisposeLayer.forEach(function (dispose, layerId) {\n            if (dispose) {\n                _this.removeLayer(_this.layers.get(layerId));\n            }\n        });\n        // Resolve that all disposals occurred\n        this.willDisposeLayer.clear();\n        // Reflag every layer for removal again so creation of layers will determine\n        // Which layers remain for a reactive pattern\n        this.layers.forEach(function (layer, id) {\n            _this.willDisposeLayer.set(id, true);\n        });\n    };\n    /**\n     * This must be executed when the canvas changes size so that we can re-calculate the scenes and views\n     * dimensions for handling all of our rendered elements.\n     */\n    LayerSurface.prototype.fitContainer = function (pixelRatio) {\n        var container = this.context.canvas.parentElement;\n        if (container) {\n            var canvas = this.context.canvas;\n            canvas.className = '';\n            canvas.setAttribute('style', '');\n            container.style.position = 'relative';\n            canvas.style.position = 'absolute';\n            canvas.style.left = '0xp';\n            canvas.style.top = '0xp';\n            canvas.style.width = '100%';\n            canvas.style.height = '100%';\n            canvas.setAttribute('width', '');\n            canvas.setAttribute('height', '');\n            var containerBox = container.getBoundingClientRect();\n            var box = canvas.getBoundingClientRect();\n            this.resize(box.width || 100, containerBox.height || 100);\n        }\n    };\n    LayerSurface.prototype.resize = function (width, height, pixelRatio) {\n        var _this = this;\n        this.pixelRatio = pixelRatio || this.pixelRatio;\n        this.sceneViews.forEach(function (sceneView) { return sceneView.view.pixelRatio = _this.pixelRatio; });\n        this.renderer.setSize(width || 100, height || 100);\n        this.renderer.setPixelRatio(this.pixelRatio);\n        this.mouseManager.resize();\n    };\n    /**\n     * This establishes the rendering canvas context for the surface.\n     */\n    LayerSurface.prototype.setContext = function (context) {\n        if (!context) {\n            return;\n        }\n        if (isWebGLContext(context)) {\n            this.context = context;\n        }\n        else if (isCanvas(context)) {\n            this.context = context.getContext('webgl') || context.getContext('experimental-webgl');\n            if (!this.context) {\n                console.warn('A valid GL context was not found for the context provided to the surface. This surface will not be able to operate.');\n            }\n        }\n        else if (isString(context)) {\n            var element = document.getElementById(context);\n            if (isCanvas(element)) {\n                this.setContext(element);\n            }\n        }\n    };\n    return LayerSurface;\n}());\nexports.LayerSurface = LayerSurface;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./layer-surface\"));\n__export(require(\"./event-manager\"));\n__export(require(\"./generate-default-scene\"));\n__export(require(\"./generate-layer-geometry\"));\n__export(require(\"./generate-layer-material\"));\n__export(require(\"./generate-layer-model\"));\n__export(require(\"./inject-shader-io\"));\n__export(require(\"./layer\"));\n__export(require(\"./mouse-event-manager\"));\n__export(require(\"./scene\"));\n__export(require(\"./texture\"));\n__export(require(\"./view\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./surface\"));\n__export(require(\"./util\"));\n__export(require(\"./base-layers\"));\n__export(require(\"./base-event-managers\"));\n__export(require(\"./types\"));\n__export(require(\"./primitives\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./voidgl\"));\n"],"sourceRoot":""}