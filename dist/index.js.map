{"version":3,"sources":["webpack://network-bubble-chart/webpack/universalModuleDefinition","webpack://network-bubble-chart/webpack/bootstrap","webpack://network-bubble-chart/./src/voidgl/types.ts","webpack://network-bubble-chart/external \"three\"","webpack://network-bubble-chart/./src/voidgl/util/index.ts","webpack://network-bubble-chart/./src/voidgl/instance-provider/index.ts","webpack://network-bubble-chart/./src/voidgl/primitives/bounds.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/buffer-manager-base.ts","webpack://network-bubble-chart/./src/voidgl/instance-provider/instance.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/types.ts","webpack://network-bubble-chart/./src/voidgl/primitives/index.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/layer-buffer-type.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/index.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/generate-layer-model.ts","webpack://network-bubble-chart/./src/voidgl/util/identify-by-key.ts","webpack://network-bubble-chart/./src/voidgl/shaders/template-vars.ts","webpack://network-bubble-chart/./src/voidgl/util/shader-templating.ts","webpack://network-bubble-chart/./src/voidgl/instance-provider/observable.ts","webpack://network-bubble-chart/./src/voidgl/surface/view.ts","webpack://network-bubble-chart/./src/voidgl/surface/scene.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/label-atlas-resource.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/base-atlas-resource.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/types.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/diff-processors/uniform-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/diff-processors/instance-attribute-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/util/view-camera.ts","webpack://network-bubble-chart/./src/voidgl/util/chart-camera.ts","webpack://network-bubble-chart/./src/voidgl/util/vector.ts","webpack://network-bubble-chart/./src/voidgl/util/auto-easing-method.ts","webpack://network-bubble-chart/./src/voidgl/surface/event-manager.ts","webpack://network-bubble-chart/./src/voidgl/surface/mouse-event-manager.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/inject-shader-io.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/generate-layer-material.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/generate-layer-geometry.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/generate-default-scene.ts","webpack://network-bubble-chart/./src/voidgl/util/data-bounds.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/labels/index.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/label-rasterizer.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/image-atlas-resource.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/color-rasterizer.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/color-atlas-resource.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/sub-texture.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/atlas.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/images/index.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/diff-processors/base-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/shaders/util/make-instance-uniform-name.ts","webpack://network-bubble-chart/./src/voidgl/shaders/util/instance-attribute-shader-name.ts","webpack://network-bubble-chart/./src/voidgl/util/webgl-stat.ts","webpack://network-bubble-chart/./node_modules/debug/src/browser.js","webpack://network-bubble-chart/./src/voidgl/util/mouse.ts","webpack://network-bubble-chart/./src/voidgl/util/common-options.ts","webpack://network-bubble-chart/./src/voidgl/util/uid.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/atlas-resource-manager.ts","webpack://network-bubble-chart/./src/voidgl/util/quad-tree.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-processing/pack-attributes.ts","webpack://network-bubble-chart/./src/voidgl/primitives/absolute-position.ts","webpack://network-bubble-chart/./src/voidgl/surface/event-managers/layer-mouse-events.ts","webpack://network-bubble-chart/./src/voidgl/util/color-picking-analysis.ts","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/color-picking-assignment.vs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/color-picking-disabled.fs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/color-picking-method.fs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/color-picking-vertex-header.vs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/projection-methods.vs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/shader-input.vs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/instance-destructuring-array.vs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/fragment-shader-composition.fs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/vertex-shader-composition.vs","webpack://network-bubble-chart/./src/voidgl/shaders/fragments/instance-retrieval-array.vs","webpack://network-bubble-chart/./src/voidgl/shaders/util/uniform-instance-block-array.ts","webpack://network-bubble-chart/./src/voidgl/shaders/util/attribute-generation.ts","webpack://network-bubble-chart/./src/voidgl/surface/layer-surface.ts","webpack://network-bubble-chart/./src/voidgl/surface/index.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/rings/ring-layer.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/rings/ring-layer.fs","webpack://network-bubble-chart/./src/voidgl/base-layers/rings/ring-layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/rings/ring-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/rings/index.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/rectangle/rectangle-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/rectangle/rectangle-layer.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/rectangle/rectangle-layer.fs","webpack://network-bubble-chart/./src/voidgl/base-layers/rectangle/rectangle-layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/rectangle/index.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/labels/label-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/labels/label-layer.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/labels/label-layer.fs","webpack://network-bubble-chart/./src/voidgl/base-layers/labels/label-layer.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/image-rasterizer.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/atlas-manager.ts","webpack://network-bubble-chart/./src/voidgl/surface/texture/pack-node.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/images/image-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/images/image-layer.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/images/image-layer.fs","webpack://network-bubble-chart/./src/voidgl/base-layers/images/image-layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/edge-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/shader/edge-layer.fs","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/shader/edge-layer-screen-curve.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/shader/edge-layer.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/shader/edge-layer-bezier2.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/shader/edge-layer-bezier.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/shader/edge-layer-line.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/edge-picking.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/edge-layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/edges/index.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/circles/circle-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/circles/circle-layer.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/circles/circle-layer.fs","webpack://network-bubble-chart/./src/voidgl/primitives/point.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/circles/circle-layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/circles/index.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/arcs/arc-instance.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/arcs/arc-layer.fs","webpack://network-bubble-chart/./src/voidgl/base-layers/arcs/arc-layer-screen-space.vs","webpack://network-bubble-chart/./src/voidgl/base-layers/arcs/arc-layer.vs","webpack://network-bubble-chart/./src/voidgl/shaders/base/no-op.vs","webpack://network-bubble-chart/./src/voidgl/shaders/base/no-op.fs","webpack://network-bubble-chart/./src/voidgl/surface/layer-interaction-handler.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/diff-processors/uniform-quad-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/diff-processors/uniform-color-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/diff-processors/instance-attribute-quad-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/diff-processors/instance-attribute-color-diff-processor.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/uniform-buffer-manager.ts","webpack://network-bubble-chart/./src/voidgl/util/emit-once.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/instance-attribute-buffer-manager.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/index.ts","webpack://network-bubble-chart/./src/voidgl/surface/buffer-management/instance-diff-manager.ts","webpack://network-bubble-chart/./src/voidgl/instance-provider/instance-provider.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/arcs/arc-layer.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/arcs/index.ts","webpack://network-bubble-chart/./src/voidgl/base-layers/index.ts","webpack://network-bubble-chart/./src/voidgl/util/tracked-quad-tree.ts","webpack://network-bubble-chart/./src/voidgl/util/reference-camera.ts","webpack://network-bubble-chart/./node_modules/ms/index.js","webpack://network-bubble-chart/./node_modules/debug/src/debug.js","webpack://network-bubble-chart/./node_modules/process/browser.js","webpack://network-bubble-chart/external \"bowser\"","webpack://network-bubble-chart/./src/voidgl/shaders/util/extend-shader.ts","webpack://network-bubble-chart/./src/voidgl/util/extend-shader-io.ts","webpack://network-bubble-chart/./src/voidgl/util/animation-helper.ts","webpack://network-bubble-chart/./src/voidgl/base-event-managers/basic-camera-controller.ts","webpack://network-bubble-chart/./src/voidgl/base-event-managers/index.ts","webpack://network-bubble-chart/./src/voidgl/index.ts","webpack://network-bubble-chart/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__133__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","InstanceAttributeSize","InstanceBlockIndex","instanceAttributeSizeFloatCount","_a","ONE","TWO","THREE","FOUR","ATLAS","UniformSize","VertexAttributeSize","ShaderInjectionTarget","PickType","InstanceDiffType","__export","Bounds","options","this","x","y","width","height","left","top","bottom","right","emptyBounds","containsPoint","point","encapsulate","item","Math","abs","fits","bounds","hitBounds","isInside","toString","isBufferLocation","val","buffer","isBufferLocationGroup","propertyToBufferLocation","BufferManagerBase","layer","scene","observable_1","instanceUID","Instance","changes","_easing","Map","observableStorage","_uid","newUID","_id","id","active","_this","_observer","oldObserver","clear","remove","resourceTrigger","console","warn","__decorate","observable","Three","types_1","util_1","identify_by_key_1","instance_diff_manager_1","layer_interaction_handler_1","Layer","_super","props","depth","instanceById","instanceVertexCount","assign","defaultProps","picking","NONE","ALL","pickingMethods","getInstancePickingMethods","currentPickMode","hitTest","quadTree","TrackedQuadTree","boundsAccessor","type","SINGLE","uidToInstance","__extends","_bufferManager","_bufferType","destroy","bufferManager","removeLayer","removeFromScene","didUpdateProps","draw","uniform","change","instance","bufferLocations","changeList","data","diffManager","processing","processor","incomingChangeList","end","length","getBufferLocations","values","commit","resolve","uniforms","update","materialUniforms","forEach","materialUniform","Error","getModelType","drawMode","TrianglesDrawMode","modelType","Mesh","getMaterialOptions","initShader","fs","instanceAttributes","vertexAttributes","vertexCount","vs","makeInstanceAttribute","block","blockIndex","size","atlas","makeUniform","shaderInjection","qualifier","setBufferManager","InstanceDiffManager","makeProcessor","interactions","LayerInteractionHandler","setBufferType","undefined","willUpdateInstances","_changes","willUpdateProps","_newProps","didUpdate","IdentifyByKey","AnchorType","ScaleType","LayerBufferType","buffer_management_1","getLayerBufferType","_gl","bufferType","WebGLStat","HARDWARE_INSTANCING","attributesUsed","attribute","ceil","MAX_VERTEX_ATTRIBUTES","UNIFORM","INSTANCE_ATTRIBUTE","makeLayerBufferManager","gl","InstanceAttributeBufferManager","UniformBufferManager","generateLayerModel","geometry","material","modelInfo","model","Boolean","isMesh","TriangleStripDrawMode","key","templateVars","attributeFragments","attributes","blocksPerInstance","easingMethod","easingMethods","extend","extendHeader","instanceBlockCount","instanceDataBinaryTree","instanceDataRetrieval","instanceDestructuring","instanceFragments","instanceUniformDeclarations","layerUniforms","projectionMethods","shader","shaderInput","T","shaderTemplate","templateOptions","required","onError","onToken","matched","noValueProvided","notFound","shaderOptions","shaderResults","replace","_x","match","set","keys","option","results","resolvedShaderOptions","shaderProvidedOptions","unresolvedProvidedOptions","unresolvedShaderOptions","msg","error","uid_1","ObservableMonitoring","setObservableMonitor","enabled","gatherIds","observableIds","getObservableMonitorIds","slice","observableNamesToUID","target","propertyUID","uid","push","newVal","observer","instanceUpdated","absolute_position_1","bounds_1","view_camera_1","isOrthographic","ClearFlags","View","pixelRatio","devicePixelRatio","screenToPixelSpace","out","pixelSpaceToScreen","screenToView","viewBounds","viewToScreen","screenToWorld","view","world","camera","offset","scale","viewCamera","ViewCameraType","CUSTOM","worldToScreen","screen","viewToWorld","worldToView","fitViewtoViewport","surfaceDimensions","CONTROLLED","baseCamera","getAbsolutePositionBounds","viewport","far","near","position","z","updateMatrix","updateMatrixWorld","updateProjectionMatrix","screenBounds","DEFAULT_VIEW_ID","sortByDepth","a","b","Scene","container","pickingContainer","layers","sortIsDirty","viewById","frustumCulled","autoUpdate","addLayer","addView","index","indexOf","splice","sortLayers","sort","DEFAULT_SCENE_ID","LabelAtlasResource","label","BaseAtlasResource","sampleScale","EdgeScaleType","EdgeType","EdgeBroadphase","buffer_manager_base_1","VECTOR_ACCESSORS","EMPTY","UniformDiffProcessor","addInstance","manager","_propIds","uniformCluster","changeInstance","add","updateInstance","removeInstance","uniformRangeStart","range","instanceData","instanceUniform","start","k","endk","resource","setTargetAtlas","activeAttribute","BaseDiffProcessor","DiffMode","base_diff_processor_1","min","max","InstanceAttributeDiffProcessor","apply","arguments","diffMode","PARTIAL","bufferAttributeUpdateRange","bufferAttributeWillUpdate","updateInstancePartial","newBufferLocations","propIds","location","updateValue","updateRange","childLocations","propertyToLocation","getUpdateAllPropertyIdList","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","getActiveAttributePropertyId","updateInstanceFull","updates","bufferAttribute","needsUpdate","count","getInstanceCount","FULL","ViewCamera","chartCameraUID","applyArray","source","concat","ChartCamera","sqrt","add1","scale1","vec","subtract1","multiply1","dot1","linear1","t","length1","add2","scale2","subtract2","multiply2","dot2","linear2","length2","add3","scale3","subtract3","multiply3","linear3","length3","dot3","add4","scale4","subtract4","multiply4","dot4","linear4","length4","vec1Methods","dot","linear","multiply","subtract","vec2Methods","vec3Methods","vec4Methods","VecMath","AutoEasingLoopStyle","vector_1","pow","round","sin","PI","GPU_PI","clamp","minVal","maxVal","easeOutElasticGPU","easeBackInGPU","continuousSinusoidalGPU","AutoEasingMethod","cpu","gpu","duration","method","delay","loop","methodName","immediate","_start","_t","easeInQuad","time","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeOutElastic","easeBackIn","easeBackOut","t1","easeBackInOut","a1","t2","continuousSinusoidal","CONTINUOUS","direction","amplitude","validation","ignoreEndValueCheck","ignoreOverTimeCheck","EventManager","getProjection","viewId","mouseManager","getView","getViewScreenBounds","setMouseManager","mouse_1","quad_tree_1","isDefined","MouseEventManager","canvas","views","controllers","handlesWheelEvents","eventCleanup","_waitingForRender","getViewsUnderMouse","mouse","hitViews","query","resize","context","setViews","setControllers","addContextListeners","QuadTree","addAll","map","v","filter","startView","element","startPosition","wheelHandler","event","eventElementPosition","interaction","makeInteraction","wheel","makeWheel","controller","handleWheel","stopPropagation","preventDefault","onwheel","addEventListener","onmouseleave","waitingForRender","handleMouseOut","onmousemove","handleMouseMove","onmousedown","downViews","canClick","clickStartTime","Date","now","currentPosition","handleMouseDown","button","document","delta","drag","makeDrag","handleDrag","onmouseup","_event","onmouseover","handleMouseOver","handleMouseUp","handleClick","onselectstart","addTouchContextListeners","ontouchstart","ontouchend","ontouchmove","ontouchcancel","_i","previous","current","viewsUnderMouse","normalizeWheel","onmousewheel","removeEventListener","auto_easing_method_1","layer_buffer_type_1","pack_attributes_1","testStartVector","testEndVector","_b","emptyTexture","Texture","isEasingAttribute","attr","easing","isInstanceAttribute","isVertexAttribute","isUniform","toVertexAttributeInternal","materialAttribute","toUniformInternal","sortNeedsUpdateFirstToTop","generateAtlasResourceUniforms","atlasInstanceAttributes","requestedAtlasInjections","isAtlasAttribute","injection","FRAGMENT","injections","VERTEX","instanceAttribute","getAtlasTexture","compareVec","injectShaderIO","shaderIO","find","testStart","testEnd","validationRules","test","validateInstanceAttributes","easingAttributes","instanceAttributes_1","easingValues","name_1","easingUID","currentTime","surface","frameMetrics","startTime","timeValue","REPEAT","REFLECT","timePassed","childAttributes","startAttr","parentAttribute","_o","startTimeAttr","durationAttr","easingAttributes_1","generateEasingAttributes","addedUniforms","MATRIX4","projectionMatrix","elements","matrix","generateBaseUniforms","generatePickingUniforms","addedInstanceAttributes","generateBaseInstanceAttributes","color","generatePickingAttributes","allUniforms","allInstanceAttributes","packAttributes","generateBaseVertexAttributes","UNIFORM_SIZE_TO_MATERIAL_TYPE","MATRIX3","DEFAULT_UNIFORM_VALUE","toMaterialUniform","generateLayerMaterial","instancingUniforms","materialParams","vertexShader","fragmentShader","generatedUniform","RawShaderMaterial","isNumberCluster","Array","isArray","generateLayerGeometry","maxInstancesPerBuffer","vertexBuffers","attribute_1","Float32Array","formatError","j","endj","instanceSize","endk_1","copyWithin","instancingBuffer","instanceStartIndex","BufferGeometry","attribute_3","BufferAttribute","addAttribute","chart_camera_1","scene_1","view_1","generateDefaultScene","aspectRatio","viewSize","defaultCamera","OrthographicCamera","defaultChartCamera","defaultViewport","defaultView","defaultScene","DataBounds","floor","LabelRasterizer","awaitContext","getContext","Promise","setTimeout","sent","calculateLabelSize","calculateTexture","calculateTrucatedText","sampleScaling","drawLabel","truncatedText","measureContents","minX","minY","maxX","maxY","rasterization","texture","createCroppedCanvas","maxWidth","text","firstTest","cursor","safety","substr","nextCursor","cropped","createElement","imageSmoothingEnabled","drawImage","fontSize","getLabelRasterizationFontSize","fillStyle","font","makeCSSFont","measureText","fillText","potentialCanvas","fontWeight","fontFamily","imageData","getImageData","render","renderSync","ImageAtlasResource","image","ColorRasterizer","limit","makeCSS","g","opacity","fillRect","ColorAtlasResource","SubTexture","atlasReferenceID","atlasTexture","atlasTL","atlasTR","atlasBL","atlasBR","widthOnAtlas","heightOnAtlas","isValid","pixelWidth","pixelHeight","pack_node_1","sub_texture_1","AtlasSize","Atlas","validResources","textureSettings","packing","PackNode","updateTexture","invalidateResource","zero","setManager","registerResource","removeResource","redoneCanvas","dispose","generateMipmaps","premultiplyAlpha","_isValid","INSTANCE_UNIFORM_ATTRIBUTE_PREFIX","makeInstanceUniformNameArray","makeInstanceUniformNameTree","instanceAttributeShaderName","getProgramInfo","program","result","attributeCount","uniformCount","activeUniforms","getProgramParameter","ACTIVE_UNIFORMS","activeAttributes","ACTIVE_ATTRIBUTES","enums","35664","35665","35666","35667","35668","35669","35670","35671","35672","35673","35674","35675","35676","35678","35680","5120","5121","5122","5123","5124","5125","5126","blocks","getActiveUniform","typeName","getActiveAttrib","MAX_VERTEX_UNIFORMS","MAX_FRAGMENT_UNIFORMS","WEBGL_SUPPORTED","MAX_TEXTURE_SIZE","HARDWARE_INSTANCING_ANGLE","WebGLRenderingContext","e","getAContext","getParameter","MAX_VERTEX_UNIFORM_VECTORS","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_VERTEX_ATTRIBS","getExtension","initStats","process","load","storage","debug","env","DEBUG","log","Function","formatArgs","args","useColors","namespace","humanize","diff","lastC","save","namespaces","removeItem","navigator","userAgent","toLowerCase","documentElement","style","WebkitAppearance","firebug","exception","table","parseInt","RegExp","$1","chrome","local","localStorage","localstorage","colors","formatters","JSON","stringify","err","message","enable","browser","three_1","IE_ADJUSTMENT","OLD_IE_ADJUSTMENT","MAX_FIREFOX_WHEELDELTA","lowPassY","LOW_PASS_U0","LOW_PASS_U1","LOW_PASS_U2","LOW_PASS_U3","firefox","deltaX","deltaY","sign","unshift","pop","Vector2","msie","version","wheelDeltaX","wheelDeltaY","wheelDelta","detail","msedge","multiplyScalar","relative","mouseX","mouseY","eventX","eventY","nativeEvent","pageX","pageY","clientX","clientY","body","scrollLeft","scrollTop","offsetParent","offsetLeft","offsetTop","CommonMaterialOptions","transparentShape","premultipliedAlpha","transparent","transparentImage","blending","CustomBlending","blendSrc","OneFactor","UID","CUID","colorUID","label_atlas_resource_1","toInstanceIOValue","AtlasResourceManager","targetAtlas","requestQueue","requestLookup","atlasManager","dequeueRequests","didDequeue","resources","requests","this_1","updateAtlas","atlasRequests_1","request","delete","request_1","from","entries","atlasRequests","existingRequests","filterQuery","queryValues","filtered","obj","Quadrants","mid","TL","Node","TR","BL","BR","children","nodes","child","doAdd","cover","childrenProps","MAX_VALUE","allChildren","gatherChildren","split","isNaN","area","list","visit","queryBounds","queryPoint","cb","finished","Block","available","setAttribute","check","ensureSizes","newBlock","data_bounds_1","ref","scaleRatio","parse","num","parseFloat","reference","top_1","LayerMouseEvents","isOver","sceneViews","getSceneViewsUnderMouse","sceneViewByViewId","sceneView","viewItem","getMouseByViewId","viewMouseByViewId","handleInteraction","handleMouseClick","_drag","handleMouseDrag","callback","sceneViews_1","handleSceneView","_e","_flag","updateColorPickRange","allSceneViews","currentSceneViews","analyzeColorPickingRendering","pickingData","allColors","colorData","dataHeight","dataWidth","nearestColor","uniqueColors","pixelIndex","distance","row","dx","dy","testDistance","shader_templating_1","template_vars_1","make_instance_uniform_name_1","instanceRetrievalArrayFragment","VECTOR_COMPONENTS","sizeToType","1","2","3","4","9","16","99","orderByPriority","makeAutoEasingTiming","pingPong","makeVectorSwizzle","join","makeUniformArrayDeclaration","totalBlocks","fragment","fill","Vector4","makeInstanceRetrievalArray","makeInstanceDestructuringArray","orderedAttributes","instanceAttributeDestructuring","uniformInstancingDestructuring","webgl_stat_1","instance_attribute_shader_name_1","uniform_instance_block_array_1","vertexShaderComposition","fragmentShaderComposition","instanceDestructuringArray","MAX_USE_PER_BLOCK","generateUniforms","injectionType","injectFragments","shaders","shaderInputMetrics","instancingInfo","metrics","instanceUniformBlockCount","calculateUniformBlockUseage","sortedInstanceAttributes","currentBlock","trueBlockIndex","blockUseage","innerBlockUseage","attributeSize","oldUseage","newUseage","innerUseage","instances","uniformMetrics","blockQualifierDedup","maxBlock","qualifiers","blockQualifiers","qualifierList","allQualifiers","declaration","makeInstanceUniformDeclaration","makeUniformInstanceDataOptions","generateInstanceDataLookupOptions","additionalOptions","generateVertexAttributes","methods","methodSizes","sizeType","generateEasingMethods","generateShaderInputs","generateVertexPicking","_maxInstancesPerBuffer","makePickingDestructuring","makeInstanceAttributeReferences","generateVertexShader","vertexShaderResults","generateFragmentShader","generateFragmentPickingMethod","images_1","labels_1","attribute_generation_1","color_picking_analysis_1","layer_mouse_events_1","generate_default_scene_1","generate_layer_geometry_1","generate_layer_material_1","generate_layer_model_1","inject_shader_io_1","mouse_event_manager_1","texture_1","atlas_resource_manager_1","DEFAULT_BACKGROUND_COLOR","Color","isCanvas","createLayer","layerClass","LayerSurface","AtlasManager","currentViewport","currentFrame","previousTime","isBufferingAtlas","scenes","willDisposeLayer","loadReady","loadReadyResolve","initLayer","frameIncrement","onViewReady","validLayers","erroredLayers","pickingPass","errors","passed","stack","initializer","resourceManager","renderer","pickingRenderer","LabelInstance","ImageInstance","drawSceneView","updateColorPick","defaultSceneElements","flags","clearFlags","COLOR","DEPTH","pickingTarget","Uint8Array","pickWidth","readRenderTargetPixels","pickHeight","colorPicking","didBuffer","rendererSize","getSize","getPixelRatio","background","SCISSOR_TEST","scissor","clearColor","setSize","setRenderTarget","STENCIL","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","setViewport","getViewSize","getViewWorldBounds","topLeft","bottomRight","init","setContext","initGL","initMouseManager","initResources","WebGLRenderer","alpha","antialias","preserveDrawingBuffer","autoClear","setRendererSize","setPixelRatio","setClearColor","sceneViewDepth","sceneOptions","newScene","viewOptions","newView","addLayerToScene","shaderMetrics","eventManagers","atlasResources","createAtlas","layerInitializers","existingLayer","layerId","_layer","fitContainer","_pixelRatio","parentElement","className","containerBox","getBoundingClientRect","box","isWebGLContext","canvasContext","isString","getElementById","WebGLRenderTarget","magFilter","LinearFilter","minFilter","stencilBuffer","primitives_1","layer_1","RingLayer","ring","radius","scaleFactor","animations","animate","animateColor","animateCenter","center","animateRadius","vertexToNormal","0","5","vertexToSide","thickness","_","vertex","instance_1","RingInstance","instance_provider_1","anchorCalculator","TopLeft","anchor","_rectangle","padding","TopMiddle","rectangle","TopRight","MiddleLeft","Middle","MiddleRight","BottomLeft","BottomMiddle","BottomRight","Custom","RectangleInstance","scaling","BOUND_MAX","_anchor","setAnchor","newAnchor","types_2","RectangleLayer","anchorEffect","projection","maxScale","minScale","ALWAYS","NEVER","screenPoint","_u","rasterizationLookUp","_label","_cssFont","_fontFamily","_fontSize","_fontStyle","_fontWeight","_maxWidth","_text","_width","_height","_isDestroyed","fontStyle","cssFontLookup","rasterizations","references","_rasterization","LabelLayer","animateLocation","animateSize","ImageRasterizer","calculateImageSize","_sampleScale","atlas_1","color_atlas_resource_1","color_rasterizer_1","image_atlas_resource_1","label_rasterizer_1","ZERO_IMAGE","allAtlas","destroyAtlas","atlasName","setDefaultImage","loadImage","loadedImage","isValidImage","rect","dimensions","first","second","insertedNode","insert","nodeImage","ux","nodeDimensions","uy","uw","uh","onePixelX","atlasDimensions","imageSrc","subTexture","image_1","onload","onerror","path","toDataURL","Image","src","resources_1","isLeaf","child0","child1","hasChild","newNode","fitFlag","imgWidth","imgHeight","dWidth","dHeight","removed","_image","tint","_sourceWidth","_sourceHeight","_element","_path","aspect","common_options_1","ImageLayer","animateTint","EdgeInstance","colorStart","colorEnd","control","widthStart","widthEnd","setEdgeWidth","setColor","interpolation","LINE","p1","p2","_c1","_c2","BEZIER","c1","BEZIER2","c2","toPointObject","toPointArray","TEST_RESOLUTION","edgePicking","broadphase","minPickDistance","scaleType","interpolate","edge","edgeWidthStart","edgeWidthEnd","PASS_X","PASS_Y","SCREEN_CURVE","closestIndex","closestDistance","secondClosestIndex","secondClosestDistance","control1","control2","startPoint","endPoint","linePoint","lineWidth","startSegment","endSegment","vector","lineDirection","lineNormal","distanceTo","_view","edge_picking_1","pickVS","baseVS","screenVS","edgeFS","EdgeLayer","_c","_d","_f","animateEnd","animateStart","animateColorStart","animateColorEnd","animateControl","MAX_SEGMENTS","vertexInterpolation","token","_uniform","InstanceProvider","CircleInstance","squareDistance","Point","getClosest","testPoint","points","closestPoint","getClosestIndex","amount","normalize","magnitude","getDistance","squared","getMidpoint","make","CircleLayer","circle","circleScreenCenter","mouseScreen","fadeOutOversized","ArcInstance","angle","isMouseOver","isMouseDown","getColorPickInstance","isColorProcessor","_mouse","onMouseDown","hitTest_1","query_1","world_1","querySpace","bind","instanceForColor","onMouseOut","hitTest_2","query_2","world_2","onMouseUp","hitTest_3","query_3","world_3","onMouseOver","onMouseMove","hitTest_4","query_4","info","world_4","notOverInstances","isCurrentlyOver_1","noLongerOver","onMouseClick","hitTest_5","query_5","world_5","UniformQuadDiffProcessor","quadPicking","UniformColorDiffProcessor","InstanceAttributeQuadDiffProcessor","locations","InstanceAttributeColorDiffProcessor","buffers","availableClusters","instanceToCluster","clusterToBuffer","makeNewBuffer","cluster","maxUniformBlock","uniformBlocksPerInstance","pickModel","setScene","newGeometry","drawRange","newMaterial","clone","newModel","activeInstances","clusters","firstInstance","lastInstance","uniformIndex","uniformName","fakeAttribute","InstancedBufferAttribute","instanceIndex","toEmit","emitOnce","emit","clearTimeout","flushEmitOnce","emit_once_1","allBufferLocations","availableLocations","currentInstancedCount","instanceToBufferLocation","growthCount","maxInstancedCount","attributeToPropertyIds","updateAllPropertyIdList","activePropertyId","doAddWithRegistration","propertyIdsForAttribute","makeUpdateAllPropertyIdList","locationInfo","resizeBuffer","gatherLocationsIntoGroups","newLocations","growth","shift","ids","attributeToNewBufferLocations","InstancedBufferGeometry","previousInstanceAmount","_g","array","newAttribute","setDynamic","allLocations","newLocation","internalAttribute","totalNewInstances","attributesBufferLocations","bufferLocationsForAttribute","childBufferLocations","group","bufferLocation","childAttribute","bufferLocationsForChildAttribute","childBufferLocation","instance_attribute_color_diff_processor_1","instance_attribute_diff_processor_1","instance_attribute_quad_diff_processor_1","uniform_color_diff_processor_1","uniform_diff_processor_1","uniform_quad_diff_processor_1","cleanObservation","instanceChanges","allowChanges","disposer","observableDisposer","INSERT","CHANGE","REMOVE","ArcScaleType","ArcLayer","animateAngle","animateThickness","side","DoubleSide","getBounds","childToNode","childToBounds","nullBounded","fromSplit","doRemove","found","node","ReferenceCamera","offsetFilter","scaleFilter","base","_val","h","plural","ms","str","String","exec","long","fmtLong","fmtShort","createDebug","prevTime","self","curr","prev","coerce","format","formatter","hash","charCodeAt","selectColor","disable","names","skips","len","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","noop","nextTick","title","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","extendShader","baseFS","extendedVS","extendedFS","header","extend_shader_1","extendShaderInitialization","extendedShaders","isNumber","AnimationHelper","groupAnimation","groupCount","baseDelay","delayGap","modifyInstances","startFrameTime","gap","CameraBoundsAnchor","event_manager_1","BasicCameraController","isPanning","panFilter","_allViews","startViews","onRangeChanged","_camera","_targetView","startViewDidStart","applyBounds","targetView","applyScaleBounds","boundsHorizontalOffset","boundsVerticalOffset","scaleMin","scaleMax","setBounds","ignoreCoverViews","anchoredByBoundsHorizontal","TOP_LEFT","MIDDLE_LEFT","BOTTOM_LEFT","worldBounds","screenPadding","TOP_MIDDLE","MIDDLE","BOTTOM_MIDDLE","TOP_RIGHT","MIDDLE_RIGHT","BOTTOM_RIGHT","anchoredByBoundsVertical","worldTLinScreenSpace","worldBRinScreenSpace","canStart","findCoveredStartView","under","coveredStartView","getTargetView","_button","pan","wheelMetrics","beforeZoom","currentZoomX","currentZoomY","afterZoom","getRange","setRange","newWorld","deltaScale","deltaPan"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"three\"), require(\"bowser\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"three\", \"bowser\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"network-bubble-chart\"] = factory(require(\"three\"), require(\"bowser\"));\n\telse\n\t\troot[\"network-bubble-chart\"] = factory(root[\"three\"], root[\"bowser\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__133__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 140);\n","import * as Three from \"three\";\nimport { Instance } from \"./instance-provider/instance\";\nimport { Bounds } from \"./primitives/bounds\";\nimport { IPoint } from \"./primitives/point\";\nimport { ChartCamera, Vec, Vec2 } from \"./util\";\nimport { IAutoEasingMethod } from \"./util/auto-easing-method\";\nimport { IVisitFunction, TrackedQuadTree } from \"./util/tracked-quad-tree\";\n\nexport type Diff<T extends string, U extends string> = ({ [P in T]: P } &\n  { [P in U]: never } & { [x: string]: never })[T];\nexport type Omit<TType, TKeys> = Pick<TType, Exclude<keyof TType, TKeys>>;\nexport type ShaderIOValue =\n  | [number]\n  | [number, number]\n  | [number, number, number]\n  | [number, number, number, number]\n  | Three.Vector4[]\n  | Float32Array;\nexport type InstanceIOValue =\n  | [number]\n  | [number, number]\n  | [number, number, number]\n  | [number, number, number, number];\nexport type UniformIOValue =\n  | number\n  | InstanceIOValue\n  | Float32Array\n  | Three.Texture;\n\nexport enum InstanceBlockIndex {\n  ONE = 1,\n  TWO = 2,\n  THREE = 3,\n  FOUR = 4\n}\n\nexport enum InstanceAttributeSize {\n  ONE = 1,\n  TWO = 2,\n  THREE = 3,\n  FOUR = 4,\n  /** Special case for making instance attributes that can target Atlas resources */\n  ATLAS = 99\n}\n\nexport const instanceAttributeSizeFloatCount: { [key: number]: number } = {\n  [InstanceAttributeSize.ONE]: 1,\n  [InstanceAttributeSize.TWO]: 2,\n  [InstanceAttributeSize.THREE]: 3,\n  [InstanceAttributeSize.FOUR]: 4,\n  [InstanceAttributeSize.ATLAS]: 4\n};\n\nexport enum UniformSize {\n  ONE = 1,\n  TWO = 2,\n  THREE = 3,\n  FOUR = 4,\n  MATRIX3 = 9,\n  MATRIX4 = 16,\n  ATLAS = 99\n}\n\nexport enum VertexAttributeSize {\n  ONE = 1,\n  TWO = 2,\n  THREE = 3,\n  FOUR = 4\n}\n\n/**\n * This represents a color in the VoidGL system. Ranges are [0 - 1, 0 - 1, 0 - 1, 0 - 1]\n */\nexport type Color = [number, number, number, number];\n\n/**\n * Represents something with a unique id\n */\nexport interface Identifiable {\n  /** A unique identifier */\n  id: string;\n}\n\n/**\n * Information provided in mouse events interacting with instances and\n * layers.\n */\nexport interface IPickInfo<T extends Instance> {\n  /** If a mouse button is involved in the pick, this will be populated */\n  button?: number;\n  /** This is the parent layer id of the instances interacted with */\n  layer: string;\n  /** This is the list of instances that were detected in the interaction */\n  instances: T[];\n  /** If picking is set to ALL then this will be provided which can be used to make additional spatial queries */\n  querySpace?(bounds: Bounds | IPoint, visit?: IVisitFunction<T>): T[];\n  /** This is the screen coordinates of the mouse point that interacted with the instances */\n  screen: [number, number];\n  /** This is the world coordinates of the mouse point that interacted with the instances */\n  world: [number, number];\n  /** Projection methods to easily go between coordinate spaces */\n  projection: IProjection;\n}\n\nexport interface IVertexAttribute {\n  /**\n   * When initWithBuffer and customFill are not specified, this is was the system will initially\n   * load each vertex attribute with.\n   */\n  defaults?: number[];\n  /**\n   * When this is specified it will initialize the model's attribute with the data in this buffer.\n   */\n  initWithBuffer?: Float32Array;\n  /**\n   * When generating this attribute in the shader this will be the prefix to the attribute:\n   * For instance, if you specify 'highp' as the modifier, then the attribute that appears\n   * in the shader will be:\n   * attribute highp vec3 position;\n   */\n  qualifier?: string;\n  /**\n   * This is the name the attribute will be for the model.\n   */\n  name: string;\n  /**\n   * This is the number of floats the attribute will consume. For now, we only allow for up\n   * to four floats per attribute.\n   */\n  size: VertexAttributeSize;\n  /**\n   * This lets you populate the buffer with an automatically called method. This will fire when\n   * necessary updates are detected or on initialization.\n   */\n  update(vertex: number): ShaderIOValue;\n}\n\nexport interface IVertexAttributeInternal extends IVertexAttribute {\n  /** This is the actual attribute generated internally for the ThreeJS interfacing */\n  materialAttribute: Three.BufferAttribute | null;\n}\n\nexport interface IInstanceAttribute<T extends Instance> {\n  /**\n   * If this is specified, this attribute becomes a size of 4 and will have a block index of\n   * 0. This makes this attribute and layer become compatible with reading atlas resources.\n   * The value provided for this property should be the name of the atlas that is created.\n   */\n  atlas?: {\n    /** Specify which generated atlas to target for the resource */\n    key: string;\n    /** Specify the name that will be injected that will be the sampler2D in the shader */\n    name: string;\n    /**\n     * This specifies which of the shaders the sampler2D will be injected into.\n     * Defaults to the Fragment shader only.\n     */\n    shaderInjection?: ShaderInjectionTarget;\n  };\n  /**\n   * This is a block index helping describe the instancing process. It can be any number as\n   * the system will sort and organize them for you. This only helps the system detect when\n   * you cram too much info into a single block. The tighter you pack your blocks the better\n   * your program will perform.\n   *\n   * Note: It's best to leave this blank as the system now packs your attributes for you and\n   * will determine this number for you.\n   */\n  block?: number;\n  /**\n   * This is the index within the block this attribute will be available.\n   */\n  blockIndex?: InstanceBlockIndex;\n  /**\n   * If the settings on this attrubute spawns additional attributes, those attributes shall\n   * be populated here. Otherwise this remains undefined.\n   */\n  childAttributes?: IInstanceAttribute<T>[];\n  /**\n   * When this is set, the system will automatically inject necessary Shader IO to facilitate\n   * performing the easing on the GPU, which saves enormous amounts of CPU processing time\n   * trying to calcuate animations and tweens for properties.\n   *\n   * NOTE: Setting this increases the amount of data per instance by: size * 2 + ;\n   * as it injects in a start value, start time, and duration\n   */\n  easing?: IAutoEasingMethod<Vec>;\n  /**\n   * This is the name that will be available in your shader for use. This will only be\n   * available after the ${attributes} declaration.\n   */\n  name: string;\n  /**\n   * If this attribute is created automatically by the system based on the settings of another\n   * attribute, that parent attribute will be set here. Otherwise this remains undefined.\n   */\n  parentAttribute?: IInstanceAttribute<T>;\n  /**\n   * When generating this attribute in the shader this will be the prefix to the attribute:\n   * For instance, if you specify 'highp' as the modifier, then the attribute that appears\n   * in the shader will be:\n   * attribute highp vec3 position;\n   */\n  qualifier?: string;\n  /**\n   * This is how many floats the instance attribute takes up. Due to how instancing is\n   * implemented, we can only take up to 4 floats per variable right now.\n   */\n  size?: InstanceAttributeSize;\n  /**\n   * This is the accessor that executes when the instance needs updating. Simply return the\n   * value that should be populated for this attribute.\n   */\n  update(instance: T): InstanceIOValue;\n}\n\n/**\n * Internal Instance Attributes are ones that actually map to an attribute in the shader and use\n * hardware instancing.\n */\nexport interface IInstanceAttributeInternal<T extends Instance>\n  extends IInstanceAttribute<T> {\n  /** We will keep an internal uid for the  */\n  uid: number;\n  /** This is the actual attribute mapped to a buffer */\n  bufferAttribute: Three.InstancedBufferAttribute;\n}\n\n/**\n * This is an attribute where the atlas is definitely declared.\n */\nexport interface IAtlasInstanceAttribute<T extends Instance>\n  extends IInstanceAttribute<T> {\n  /**\n   * If this is specified, this attribute becomes a size of 4 and will have a block index of\n   * 0. This makes this attribute and layer become compatible with reading atlas resources.\n   * The value provided for this property should be the name of the atlas that is created.\n   */\n  atlas: {\n    /** Specify which generated atlas to target for the resource */\n    key: string;\n    /** Specify the name that will be injected that will be the sampler2D in the shader */\n    name: string;\n    /**\n     * This specifies which of the shaders the sampler2D will be injected into.\n     * Defaults to the Fragment shader only.\n     */\n    shaderInjection?: ShaderInjectionTarget;\n  };\n}\n\n/**\n * This is an attribute that is simply a value\n */\nexport interface IEasingInstanceAttribute<T extends Instance>\n  extends IInstanceAttribute<T> {\n  /**\n   * This MUST be defined to be an Easing attribute\n   */\n  easing: IAutoEasingMethod<Vec>;\n  /**\n   * Easing attributes requires size to be present\n   */\n  size: InstanceAttributeSize;\n}\n\n/**\n * This is an attribute that is simply a value\n */\nexport interface IValueInstanceAttribute<T extends Instance>\n  extends IInstanceAttribute<T> {\n  /**\n   * If this is specified, this attribute becomes a size of 4 and will have a block index of\n   * 0. This makes this attribute and layer become compatible with reading atlas resources.\n   * The value provided for this property should be the name of the atlas that is created.\n   */\n  atlas: undefined;\n}\n\n/** These are flags for indicating which shaders receive certain injection elements */\nexport enum ShaderInjectionTarget {\n  /** ONLY the vertex shader will receive the injection */\n  VERTEX = 1,\n  /** ONLY the fragment shader will receive the injection */\n  FRAGMENT = 2,\n  /** Both the fragment and vertex shader will receive the injection */\n  ALL = 3\n}\n\nexport interface IUniform {\n  /**\n   * This lets you specify which of the shaders will receive this uniform as available.\n   * This defaults to only injecting into the vertex shader.\n   */\n  shaderInjection?: ShaderInjectionTarget;\n  /** Name of the uniform as will be available in the shaders */\n  name: string;\n  /** How many floats the uniform shall encompass */\n  size: UniformSize;\n  /**\n   * When generating this uniform in the shader this will be the prefix to the uniform:\n   * For instance, if you specify 'highp' as the modifier, then the uniform that appears\n   * in the shader will be:\n   * uniform highp vec3 position;\n   */\n  qualifier?: string;\n  /**\n   * This is the accessor that executes every frame before this layer is drawn. It gives\n   * opportunity to update the uniform's value before every draw.\n   */\n  update(uniform: IUniform): UniformIOValue;\n}\n\nexport interface IUniformInternal extends IUniform {\n  /**\n   * All layers will have many many ShaderMaterials generated per each instance buffer as a single buffer\n   * can only render so many instances. This tracks across all generated ShaderMaterials for each buffer\n   * the material uniforms that need to be updated as a Uniform for a layer is dictated as uniform across\n   * all instances.\n   */\n  materialUniforms: Three.IUniform[];\n}\n\n/**\n * This is the structure of a uniform generated for the sake of instancing\n */\nexport interface IInstancingUniform {\n  name: string;\n  type: \"f\" | \"v2\" | \"v3\" | \"v4\" | \"4fv\" | \"bvec4\";\n  value: ShaderIOValue;\n}\n\n/**\n * Represents a complete shader object set.\n */\nexport interface IShaders {\n  fs: string;\n  header?: string;\n  vs: string;\n}\n\n/**\n * Represents an element that has a full list of projection methods\n */\nexport interface IProjection {\n  /** This is the chart camera utilized in the projection of elements */\n  camera: ChartCamera;\n  /** Converts from the pixel density layer to the screen space */\n  pixelSpaceToScreen(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from the screen coordinates to the pixel density layer */\n  screenToPixelSpace(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from screen space to the view's relative coordinates */\n  screenToView(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from screen space to the world space of a scene */\n  screenToWorld(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from a view's space to the screen */\n  viewToScreen(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from a views space to the world coordinates */\n  viewToWorld(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from world coordinate space of a scene to the screen */\n  worldToScreen(point: IPoint, out?: IPoint): IPoint;\n  /** Converts from world coordinate space of a scene to the view's space */\n  worldToView(point: IPoint, out?: IPoint): IPoint;\n}\n\nexport type IMaterialOptions = Partial<\n  Omit<\n    Omit<Omit<Three.ShaderMaterialParameters, \"uniforms\">, \"vertexShader\">,\n    \"fragmentShader\"\n  >\n>;\n\n/** This is the method signature for determining whether or not a point hits an instance */\nexport type InstanceHitTest<T> = (o: T, p: IPoint, v: IProjection) => boolean;\n\n/**\n * This is the type of picking assigned to a layer. Each mode has performance and functionality\n * tradeoffs.\n */\nexport enum PickType {\n  /** Disable any picking methodology */\n  NONE,\n  /** Pick all instances found underneath the mouse. The Layer must explicitly support this feature. */\n  ALL,\n  /**\n   * NOTE: NOT IMPLEMENTED YET\n   *\n   * Uses highly efficient color rendering method to detect an instance on a pixel by pixel check. Since it is\n   * based on rendering, it will only select the 'visually' top most rendered instance. This means instances can be occluded\n   * by other instances is an instance renders behind another.\n   *\n   * This is vastly more efficient and accurate than ALL. This also will be more readily supported than ALL.\n   */\n  SINGLE\n}\n\n/**\n * This represents the settings and objects used to facilitate picking in a layer.\n */\nexport interface IPickingMetrics {\n  /** This is the current pick mode that is active during the draw pass of the layer */\n  currentPickMode: PickType;\n  /** This is the picking style to be used */\n  type: PickType;\n}\n\n/**\n * This is the picking settings and objects to facilitate PickType.ALL so we can get\n * all instances underneath the mouse.\n */\nexport interface IQuadTreePickingMetrics<T extends Instance>\n  extends IPickingMetrics {\n  /** This handles the ALL type only */\n  type: PickType.ALL;\n  /** This stores all of our instances in a quad tree to spatially track our instances */\n  quadTree: TrackedQuadTree<T>;\n  /** This is the method for performing a hit test with the provided instance */\n  hitTest: InstanceHitTest<T>;\n}\n\n/**\n * This is the picking settings and objects to facilitate PickType.SINGLE so we can get\n * a single instance underneath the mouse.\n */\nexport interface ISinglePickingMetrics<T extends Instance>\n  extends IPickingMetrics {\n  /** Set the enum for the type */\n  type: PickType.SINGLE;\n  /**\n   * This is a lookup of the instance by it's UID which is all that is needed to decode a color to an instance\n   * The color UINT8 components composited into a single UINT32 IS the UID of the instance\n   */\n  uidToInstance: Map<number, T>;\n}\n\n/**\n * This is the picking settings and objects to facilitate PickType.NONE where no information\n * is retrieved for mouse interactions.\n */\nexport interface INonePickingMetrics extends IPickingMetrics {\n  // Single Picking does not require any special helper information\n  type: PickType.NONE;\n}\n\nexport interface IColorPickingData {\n  /** The mouse target position where the data is rendered */\n  mouse: Vec2;\n  /** The color data loaded for last picking rendering */\n  colorData: Uint8Array;\n  /** The height of the data array */\n  dataHeight: number;\n  /** The width of the data array */\n  dataWidth: number;\n  /** The nearest found color */\n  nearestColor: number;\n  /** All colors in the data */\n  allColors: number[];\n}\n\n/**\n * Diff types that an instance can go through. Used to help the system consume the diff\n * and apply it to the GL framework.\n */\nexport enum InstanceDiffType {\n  CHANGE = 0,\n  INSERT = 1,\n  REMOVE = 2\n}\n\n/**\n * This is the metrics associated with a frame. Mostly dealing with timing values.\n */\nexport type FrameMetrics = {\n  /** The frame number rendered. Increases by 1 every surface draw */\n  currentFrame: number;\n  /** The start time of the current frame */\n  currentTime: number;\n  /** The start time of the previous frame */\n  previousTime: number;\n};\n\n/**\n * This is the minimum properties required to make all easing functions operate.\n */\nexport interface IEasingProps {\n  start: Vec;\n  end: Vec;\n  startTime: number;\n  duration: number;\n}\n\n/**\n * This is the Shader IO information a layer will provide.\n */\nexport interface IShaderInputs<T extends Instance> {\n  /** These are very frequently changing attributes and are uniform across all vertices in the model */\n  instanceAttributes?: (IInstanceAttribute<T> | null)[];\n  /** These are attributes that should be static on a vertex. These are considered unique per vertex. */\n  vertexAttributes?: (IVertexAttribute | null)[];\n  /** Specify how many vertices there are per instance */\n  vertexCount: number;\n  /** These are uniforms in the shader. These are uniform across all vertices and all instances for this layer. */\n  uniforms?: (IUniform | null)[];\n}\n\n/**\n * This is the initialization of the shader.\n */\nexport type IShaderInitialization<T extends Instance> = IShaderInputs<T> &\n  IShaders;\n\nexport interface IShaderExtension {\n  header?: string;\n  body?: string;\n}\n\nexport type IShaderIOExtension<T extends Instance> = Partial<\n  IShaderInputs<T>\n> & {\n  vs?: IShaderExtension;\n  fs?: IShaderExtension;\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","export * from \"../instance-provider/instance\";\nexport * from \"./common-options\";\nexport * from \"./animation-helper\";\nexport * from \"./auto-easing-method\";\nexport * from \"./chart-camera\";\nexport * from \"./extend-shader-io\";\nexport * from \"./mouse\";\nexport * from \"./reference-camera\";\nexport * from \"./shader-templating\";\nexport * from \"./tracked-quad-tree\";\nexport * from \"./uid\";\nexport * from \"./vector\";\nexport * from \"./view-camera\";\nexport * from \"./webgl-stat\";\n","export * from \"./observable\";\nexport * from \"./instance-provider\";\nexport * from \"./instance\";\n","import { IPoint } from \"./point\";\n\nexport interface IBoundsOptions {\n  /** Top left x position */\n  x?: number;\n  /** Top left y position */\n  y?: number;\n  /** Width covered */\n  width?: number;\n  /** height covered */\n  height?: number;\n\n  /** Specify the left */\n  left?: number;\n  /** Specify the right */\n  right?: number;\n  /** Specify the top */\n  top?: number;\n  /** Specify the bottom */\n  bottom?: number;\n}\n\n/**\n * Class to manage the x, y, width, and height of an object\n *\n * @template T This specifies the data type associated with this shape and is accessible\n *             via the property 'd'\n */\nexport class Bounds {\n  x: number = 0;\n  y: number = 0;\n  width: number = 0;\n  height: number = 0;\n\n  get area() {\n    return this.width * this.height;\n  }\n\n  get bottom() {\n    return this.y + this.height;\n  }\n\n  get left() {\n    return this.x;\n  }\n\n  get mid() {\n    return {\n      x: this.x + this.width / 2.0,\n      y: this.y + this.height / 2.0\n    };\n  }\n\n  get right() {\n    return this.x + this.width;\n  }\n\n  get top() {\n    return this.y;\n  }\n\n  static emptyBounds() {\n    return new Bounds({\n      height: 0,\n      width: 0,\n      x: 0,\n      y: 0\n    });\n  }\n\n  /**\n   * Create a new instance\n   *\n   * @param left  The left side (x coordinate) of the instance\n   * @param right The right side of the instance\n   * @param top The top (y coordinate) of the instance\n   * @param bottom The bottom of the instance\n   */\n  constructor(options: IBoundsOptions) {\n    this.x = options.x || options.left || 0;\n    this.y = options.y || options.top || 0;\n    this.height = options.height || (options.bottom || 0) - this.y || 0;\n    this.width = options.width || (options.right || 0) - this.x || 0;\n  }\n\n  /**\n   * Checks to see if a point is within this bounds object.\n   *\n   * @param point\n   */\n  containsPoint(point: IPoint) {\n    return !(\n      point.x < this.x ||\n      point.y < this.y ||\n      point.x > this.right ||\n      point.y > this.bottom\n    );\n  }\n\n  /**\n   * Grows this bounds object to cover the space of the provided bounds object\n   *\n   * @param item\n   */\n  encapsulate(item: Bounds | IPoint) {\n    if (item instanceof Bounds) {\n      if (item.x < this.x) {\n        this.width += Math.abs(item.x - this.x);\n        this.x = item.x;\n      }\n\n      if (item.y < this.y) {\n        this.height += Math.abs(item.y - this.y);\n        this.y = item.y;\n      }\n\n      if (this.right < item.right) {\n        this.width += item.right - this.right;\n      }\n\n      if (this.bottom < item.bottom) {\n        this.height += item.bottom - this.bottom;\n      }\n\n      return true;\n    } else {\n      if (item.x < this.x) {\n        this.width += this.x - item.x;\n        this.x = item.x;\n      }\n\n      if (item.x > this.right) {\n        this.width += item.x - this.x;\n      }\n\n      if (item.y < this.y) {\n        this.height += this.y - item.y;\n        this.y = item.y;\n      }\n\n      if (item.y > this.bottom) {\n        this.height += item.y - this.y;\n      }\n\n      return true;\n    }\n  }\n\n  /**\n   * Checks to see if the provided bounds object could fit within the dimensions of this bounds object\n   * This ignores position and just checks width and height.\n   *\n   * @param bounds\n   *\n   * @return {number} 0 if it doesn't fit. 1 if it fits perfectly. 2 if it just fits.\n   */\n  fits(bounds: Bounds): 0 | 1 | 2 {\n    // If the same, the bounds fits exactly into this bounds\n    if (this.width === bounds.width && this.height === bounds.height) {\n      return 1;\n    }\n\n    // The bounds can fit within this, then it just fits\n    if (this.width >= bounds.width && this.height >= bounds.height) {\n      return 2;\n    }\n\n    // Otherwise, the bounds does not fit within this bounds\n    return 0;\n  }\n\n  /**\n   * Checks if a bounds object intersects another bounds object.\n   *\n   * @param bounds\n   */\n  hitBounds(bounds: Bounds) {\n    return !(\n      this.right < bounds.x ||\n      this.x > bounds.right ||\n      this.bottom < bounds.y ||\n      this.y > bounds.height\n    );\n  }\n\n  /**\n   * Sees if the provided bounds is completely within this bounds object. Unlike fits() this takes\n   * position into account.\n   *\n   * @param bounds\n   */\n  isInside(bounds: Bounds): boolean {\n    return (\n      this.x >= bounds.x &&\n      this.right <= bounds.right &&\n      this.y >= bounds.y &&\n      this.bottom <= bounds.bottom\n    );\n  }\n\n  /**\n   * Easy readout of this Bounds object.\n   */\n  toString() {\n    return `{x: ${this.x} y:${this.y} w:${this.width} h:${this.height}}`;\n  }\n}\n","import { Instance } from \"../../instance-provider/instance\";\nimport { IInstanceAttributeInternal } from \"../../types\";\nimport { Vec2 } from \"../../util\";\nimport { Layer } from \"../layer\";\nimport { Scene } from \"../scene\";\n\nexport function isBufferLocation(val: any): val is IBufferLocation {\n  return val && val.buffer && val.buffer.value;\n}\n\nexport function isBufferLocationGroup(\n  val: any\n): val is IBufferLocationGroup<IBufferLocation> {\n  return val && val.propertyToBufferLocation;\n}\n\n/**\n * This defines a base information object that explains where in a buffer a value\n * is represented.\n */\nexport interface IBufferLocation {\n  /** This is the parent attribute of this location */\n  attribute: IInstanceAttributeInternal<Instance>;\n  /**\n   * This is the generic buffer object interface for accessing the actual buffer.\n   */\n  buffer: {\n    value: Float32Array | Uint8Array;\n  };\n  /**\n   * If the attribute has child attributes (attributes auto generated as a consequence of the attributes settings)\n   * then the children's buffer locations can be found here.\n   */\n  childLocations?: IBufferLocation[];\n  /**\n   * This is the instance index indicative of the instance positioning within the buffer.\n   * Keep in mind: This does NOT correlate to a lookup for an Instance object but rather for\n   * the instancing concept designed for GL Buffers.\n   */\n  instanceIndex: number;\n  /**\n   * This is the range within the buffer values should be injected for this location.\n   */\n  range: Vec2;\n}\n\n/**\n * Each instance that comes in can be associated with a group of buffer locations. A buffer location for each\n * instance attribute used in updates. So a grouping is several buffer locations that are keyed by\n * the instance's property's UIDs.\n */\nexport interface IBufferLocationGroup<T extends IBufferLocation> {\n  /** This is the instance index WITHIN THE BUFFERS. This does NOT have relevance to Instance type objects */\n  instanceIndex: number;\n  /** This is a map of property UIDs to an associated buffer location */\n  propertyToBufferLocation: { [key: number]: T };\n}\n\n/**\n * Layers manage instances and those instances require a form of binding to their associated buffers.\n * The buffers have to be intelligently created and managed in this tieing to maximize performance.\n * One can not have a buffer for every instance in most cases, so the buffer manager has to get instances\n * to cooperate sharing a buffer in whatever strategy possible that best suits the hardware and it's limitations.\n *\n * This provides a uniform interface between instances and their corresponding buffer.\n */\nexport abstract class BufferManagerBase<\n  T extends Instance,\n  U extends IBufferLocation\n> {\n  /** The layer this manager glues Instances to Buffers */\n  layer: Layer<T, any>;\n  /** The scene the layer is injecting elements into */\n  scene: Scene;\n\n  /**\n   * Base constructor. A manager always needs to be associated with it's layer and it's scene.\n   */\n  constructor(layer: Layer<T, any>, scene: Scene) {\n    this.layer = layer;\n    this.scene = scene;\n  }\n\n  /**\n   * Destroy all elements that consume GPU resources or consumes otherwise unreleaseable resources.\n   */\n  abstract destroy(): void;\n\n  /**\n   * This adds an instance to the manager and thus ties the instance to an IBuffer location\n   */\n  add: (instance: T) => U | IBufferLocationGroup<U> | undefined;\n\n  /**\n   * Retrieves the buffer locations for the instance provided\n   */\n  abstract getBufferLocations(\n    instance: T\n  ): U | IBufferLocationGroup<U> | undefined;\n\n  /**\n   * This retrieves the property ID for the active attribute. This is necessary to prevent\n   * the need for lookups to find the active attribute.\n   */\n  abstract getActiveAttributePropertyId(): number;\n\n  /**\n   * This returns how many instances this buffer manager has grown to accommodate.\n   */\n  abstract getInstanceCount(): number;\n\n  /**\n   * This should provide a minimum property id list that represents a set of properties that if triggered\n   * for update, would cause all of the attributes to be updated for the layer.\n   */\n  abstract getUpdateAllPropertyIdList(): number[];\n\n  /**\n   * Disassociates an instance with it's buffer location and makes the instance\n   * in the buffer no longer drawable.\n   */\n  remove: (instance: T) => T;\n\n  /**\n   * Removes the manager from the scene it applied itself to.\n   */\n  abstract removeFromScene(): void;\n}\n","import { Identifiable, IEasingProps } from \"../types\";\nimport { InstanceProvider } from \"./instance-provider\";\nimport { observable } from \"./observable\";\n\nlet instanceUID = 0;\n\nexport interface IInstanceOptions {\n  /** The instance can be declared with an initial active state */\n  active?: boolean;\n  /** An instance must be declared with an identifier */\n  id?: string;\n}\n\nexport class Instance implements Identifiable {\n  static get newUID() {\n    return (instanceUID = ++instanceUID % 0xffffff);\n  }\n\n  /** This indicates when the instance is active / rendering */\n  @observable active: boolean;\n  /** The property changes on the instance */\n  changes: { [key: number]: number } = {};\n  /** This is an internal easing object to track properties for automated easing */\n  private _easing = new Map<number, IEasingProps>();\n  /** Internal, non-changeable id */\n  private _id: string;\n  /** This is the observer of the Instance's observable properties */\n  private _observer: InstanceProvider<this> | null;\n  /** This is where observables store their data for the instance */\n  observableStorage: any[] = [];\n  /** A numerical look up for the instance. Numerical identifiers run faster than objects or strings */\n  @observable private _uid = Instance.newUID;\n\n  /**\n   * Retrieves a method for disposing the link between observables and observer.\n   */\n  get observableDisposer(): () => void {\n    return () => delete this._observer;\n  }\n\n  /**\n   * Retrieves the observer of the observables.\n   */\n  get observer(): InstanceProvider<this> | null {\n    return this._observer || null;\n  }\n\n  /**\n   * Applies an observer for changes to the observables.\n   */\n  set observer(val: InstanceProvider<this> | null) {\n    // If an observer already is present, we should inform it, that it is being removed\n    // in favor of a new observer\n    const oldObserver = this._observer;\n\n    // If we're switching observers, then we have to dump out assumptions made within other observers\n    if (oldObserver && oldObserver !== val) {\n      this._easing.clear();\n      oldObserver.remove(this);\n    }\n\n    // Apply the new observer as the current observer\n    this._observer = val;\n  }\n\n  /**\n   * Retrieves easing properties for the observables that are associated with easing.\n   */\n  get easing() {\n    return this._easing;\n  }\n\n  /**\n   * Get the applied id of this instance\n   */\n  get id() {\n    return this._id;\n  }\n\n  /**\n   * Get the auto generated ID of this instance\n   */\n  get uid() {\n    return this._uid;\n  }\n\n  /**\n   * This method is utilized internally to indicate when requested resources are ready.\n   * If you have a property that will be requesting a resource, you should implement this method\n   * to cause a trigger for the property to activate such that the property will update it's buffer.\n   */\n  resourceTrigger() {\n    // No default behavior, subclasses must override and provide behavior.\n    console.warn(\n      \"resourceTrigger called on an instance that did not override resourceTrigger. resourceTrigger MUST be overridden for instances\",\n      \"that utilize a resource. The observable that is tied to committing the resource should be 'triggered' in this method.\"\n    );\n  }\n\n  constructor(options: IInstanceOptions) {\n    this._id = options.id || \"\";\n    this.active = options.active || this.active;\n  }\n}\n","import * as Three from \"three\";\nimport { Instance } from \"../instance-provider/instance\";\nimport { InstanceDiff } from \"../instance-provider/instance-provider\";\nimport {\n  IInstanceAttribute,\n  IMaterialOptions,\n  INonePickingMetrics,\n  InstanceAttributeSize,\n  InstanceBlockIndex,\n  InstanceDiffType,\n  InstanceHitTest,\n  InstanceIOValue,\n  IPickInfo,\n  IQuadTreePickingMetrics,\n  IShaderInitialization,\n  ISinglePickingMetrics,\n  IUniform,\n  IUniformInternal,\n  IVertexAttributeInternal,\n  PickType,\n  ShaderInjectionTarget,\n  UniformIOValue,\n  UniformSize\n} from \"../types\";\nimport { BoundsAccessor, TrackedQuadTree } from \"../util\";\nimport { IdentifyByKey, IdentifyByKeyOptions } from \"../util/identify-by-key\";\nimport {\n  BufferManagerBase,\n  IBufferLocation\n} from \"./buffer-management/buffer-manager-base\";\nimport { InstanceDiffManager } from \"./buffer-management/instance-diff-manager\";\nimport { LayerInteractionHandler } from \"./layer-interaction-handler\";\nimport { LayerBufferType } from \"./layer-processing/layer-buffer-type\";\nimport { LayerInitializer, LayerSurface } from \"./layer-surface\";\nimport { AtlasResourceManager } from \"./texture/atlas-resource-manager\";\nimport { View } from \"./view\";\n\nexport interface IModelType {\n  /** This is the draw type of the model to be used */\n  drawMode?: Three.TrianglesDrawModes;\n  /** This is the THREE JS model type */\n  modelType: IModelConstructable;\n}\n\n/**\n * Bare minimum required features a provider must provide to be the data for the layer.\n */\nexport interface IInstanceProvider<T extends Instance> {\n  /** A list of changes to instances */\n  changeList: InstanceDiff<T>[];\n  /** Resolves the changes as consumed */\n  resolve(): void;\n}\n\n/**\n * Constructor options when generating a layer.\n */\nexport interface ILayerProps<T extends Instance> extends IdentifyByKeyOptions {\n  /** This is the data provider where the instancing data is injected and modified. */\n  data: IInstanceProvider<T>;\n  /**\n   * This sets how instances can be picked via the mouse. This activates the mouse events for the layer IFF\n   * the value is not NONE.\n   */\n  picking?: PickType;\n  /**\n   * Used for debugging. Logs the generated shader for the layer in the console.\n   */\n  printShader?: boolean;\n  /**\n   * This identifies the scene we want the layer to be a part of.\n   * Layer's with the same identifiers will render their buffers in the same scene.\n   * This only applies to the layer when the layer is initialized in a layer surface. You shouldn't\n   * be swapping layers from scene to scene.\n   *\n   * The scene identifier must be an identifier used when constructing the layer surface that this layer\n   * is added to.\n   */\n  scene?: string;\n\n  // ---- EVENTS ----\n  /** Executes when the mouse is down on instances and a picking type is set */\n  onMouseDown?(info: IPickInfo<T>): void;\n  /** Executes when the mouse moves on instances and a picking type is set */\n  onMouseMove?(info: IPickInfo<T>): void;\n  /** Executes when the mouse no longer over instances and a picking type is set */\n  onMouseOut?(info: IPickInfo<T>): void;\n  /** Executes when the mouse is newly over instances and a picking type is set */\n  onMouseOver?(info: IPickInfo<T>): void;\n  /** Executes when the mouse button is release when over instances and a picking type is set */\n  onMouseUp?(info: IPickInfo<T>): void;\n  /** Executes when the mouse click gesture is executed over instances and a picking type is set */\n  onMouseClick?(info: IPickInfo<T>): void;\n}\n\nexport interface IModelConstructable {\n  new (\n    geometry?: Three.Geometry | Three.BufferGeometry,\n    material?: Three.Material | Three.Material[]\n  ): any;\n}\n\nexport interface IPickingMethods<T extends Instance> {\n  /** This provides a way to calculate bounds of an Instance */\n  boundsAccessor: BoundsAccessor<T>;\n  /** This is the way the system tests hitting an intsance */\n  hitTest: InstanceHitTest<T>;\n}\n\n/**\n * A base class for generating drawable content\n */\nexport class Layer<\n  T extends Instance,\n  U extends ILayerProps<T>\n> extends IdentifyByKey {\n  static defaultProps: any = {};\n\n  /** This is the attribute that specifies the _active flag for an instance */\n  activeAttribute: IInstanceAttribute<T>;\n  /** This matches an instance to the list of Three uniforms that the instance is responsible for updating */\n  private _bufferManager: BufferManagerBase<T, IBufferLocation>;\n  /** Buffer manager is read only. Must use setBufferManager */\n  get bufferManager() {\n    return this._bufferManager;\n  }\n  /** This is the determined buffering strategy of the layer */\n  private _bufferType: LayerBufferType;\n  /** Buffer type is private and should not be directly modified */\n  get bufferType() {\n    return this._bufferType;\n  }\n  /** This determines the drawing order of the layer within it's scene */\n  depth: number = 0;\n  /** This is the threejs geometry filled with the vertex information */\n  geometry: Three.BufferGeometry;\n  /** This is the initializer used when making this layer. */\n  initializer: LayerInitializer;\n  /** This is all of the instance attributes generated for the layer */\n  instanceAttributes: IInstanceAttribute<T>[];\n  /** A lookup fo an instance by it's ID */\n  instanceById = new Map<string, T>();\n  /** Provides the number of vertices a single instance spans */\n  instanceVertexCount: number = 0;\n  /** This is the handler that manages interactions for the layer */\n  interactions: LayerInteractionHandler<T, U>;\n  /** The official shader material generated for the layer */\n  material: Three.RawShaderMaterial;\n  /** INTERNAL: For the given shader IO provided this is how many instances can be present per buffer. */\n  maxInstancesPerBuffer: number;\n  /** This is the mesh for the Threejs setup */\n  model: Three.Object3D;\n  /** This is all of the picking metrics kept for handling picking scenarios */\n  picking:\n    | IQuadTreePickingMetrics<T>\n    | ISinglePickingMetrics<T>\n    | INonePickingMetrics;\n  /** Properties handed to the Layer during a LayerSurface render */\n  props: U;\n  /** This is the system provided resource manager that lets a layer request Atlas resources */\n  resource: AtlasResourceManager;\n  /** This is the surface this layer is generated under */\n  surface: LayerSurface;\n  /** This is all of the uniforms generated for the layer */\n  uniforms: IUniformInternal[];\n  /** This is all of the vertex attributes generated for the layer */\n  vertexAttributes: IVertexAttributeInternal[];\n  /** This is the view the layer is applied to. The system sets this, modifying will only cause sorrow. */\n  view: View;\n\n  /** This contains the methods and controls for handling diffs for the layer */\n  diffManager: InstanceDiffManager<T>;\n\n  constructor(props: ILayerProps<T>) {\n    // We do not establish bounds in the layer. The surface manager will take care of that for us\n    // After associating the layer with the view it is a part of.\n    super(props);\n    // Keep our props within the layer\n    this.props = Object.assign({}, Layer.defaultProps || {}, props as U);\n    // Set up the pick type for the layer\n    const { picking = PickType.NONE } = this.props;\n\n    // If ALL is specified we set up QUAD tree picking for our instances\n    if (picking === PickType.ALL) {\n      const pickingMethods = this.getInstancePickingMethods();\n\n      this.picking = {\n        currentPickMode: PickType.NONE,\n        hitTest: pickingMethods.hitTest,\n        quadTree: new TrackedQuadTree<T>(\n          0,\n          1,\n          0,\n          1,\n          pickingMethods.boundsAccessor\n        ),\n        type: PickType.ALL\n      };\n    } else if (picking === PickType.SINGLE) {\n      this.picking = {\n        currentPickMode: PickType.NONE,\n        type: PickType.SINGLE,\n        uidToInstance: new Map<number, T>()\n      };\n    } else {\n      this.picking = {\n        currentPickMode: PickType.NONE,\n        type: PickType.NONE\n      };\n    }\n  }\n\n  /**\n   * Invalidate and free all resources assocated with this layer.\n   */\n  destroy() {\n    if (this.bufferManager) {\n      if (this.bufferManager.scene) this.bufferManager.scene.removeLayer(this);\n      this.bufferManager.removeFromScene();\n      this.bufferManager.destroy();\n    }\n  }\n\n  didUpdateProps() {\n    /** LIFECYCLE */\n  }\n\n  /**\n   * This is where global uniforms should update their values. Executes every frame.\n   */\n  draw() {\n    let uniform: IUniformInternal;\n    let value: UniformIOValue;\n\n    // Consume the diffs for the instances to update each element\n    const changeList = this.props.data.changeList;\n    // Make some holder variables to prevent declaration within the loop\n    let change, instance, bufferLocations;\n    // Fast ref to the processor and manager\n    const diffManager = this.diffManager;\n    const processing = diffManager.processing;\n    const processor = diffManager.processor;\n\n    // Forewarn the processor how many instances are flagged for a change.\n    processor.incomingChangeList(changeList);\n\n    for (let i = 0, end = changeList.length; i < end; ++i) {\n      change = changeList[i];\n      instance = change[0];\n      bufferLocations = this.bufferManager.getBufferLocations(instance);\n      // The diff type is change[1] which we use to find the diff processing method to use\n      processing[change[1]](\n        processor,\n        instance,\n        Object.values(change[2]),\n        bufferLocations\n      );\n      // Clear the changes for the instance\n      instance.changes = {};\n    }\n\n    // Tell the diff processor that it has completed it's task set\n    processor.commit();\n    // Indicate the diffs are consumed\n    this.props.data.resolve();\n\n    // Loop through the uniforms that are across all instances\n    for (let i = 0, end = this.uniforms.length; i < end; ++i) {\n      uniform = this.uniforms[i];\n      value = uniform.update(uniform);\n      uniform.materialUniforms.forEach(\n        materialUniform => (materialUniform.value = value)\n      );\n    }\n  }\n\n  /**\n   * This method is for layers to implement to specify how the bounds for an instance are retrieved or\n   * calculated and how the Instance interacts with a point. This is REQUIRED to support PickType.ALL on the layer.\n   */\n  getInstancePickingMethods(): IPickingMethods<T> {\n    throw new Error(\n      \"When picking is set to PickType.ALL, the layer MUST have this method implemented; otherwise, the layer is incompatible with this picking mode.\"\n    );\n  }\n\n  /**\n   * The type of Three model as well as the preferred draw mode associated with it.\n   */\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TrianglesDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  /**\n   * The options for a three material without uniforms.\n   */\n  getMaterialOptions(): IMaterialOptions {\n    return {};\n  }\n\n  /**\n   * This sets up all of the data bindings that will transport data from the CPU\n   * to the Shader on the GPU.\n   *\n   * Instance Attributes: These are very frequently changing attributes\n   * Vertex Attributes: These are attributes that should be static on a vertex. Conisder it very costly to update.\n   *                    The only time making these modifieable is in the event of GL_POINTS.\n   * Uniforms: These set up the uniforms for the layer, thus having all normal implications of a uniform. Global\n   *           across the fragment and vertex shaders and can be modified with little consequence.\n   */\n  initShader(): IShaderInitialization<T> {\n    return {\n      fs: require(\"../shaders/base/no-op.fs\"),\n      instanceAttributes: [],\n      uniforms: [],\n      vertexAttributes: [],\n      vertexCount: 0,\n      vs: require(\"../shaders/base/no-op.vs\")\n    };\n  }\n\n  /**\n   * Helper method for making an instance attribute. Depending on set up, this makes creating elements\n   * have better documentation when typing out the elements.\n   */\n  makeInstanceAttribute(\n    block: number,\n    blockIndex: InstanceBlockIndex,\n    name: string,\n    size: InstanceAttributeSize,\n    update: (o: T) => InstanceIOValue,\n    atlas?: {\n      key: string;\n      name: string;\n      shaderInjection?: ShaderInjectionTarget;\n    }\n  ): IInstanceAttribute<T> {\n    return {\n      atlas,\n      block,\n      blockIndex,\n      name,\n      size,\n      update\n    };\n  }\n\n  /**\n   * Helper method for making a uniform type. Depending on set up, this makes creating elements\n   * have better documentation when typing out the elements.\n   */\n  makeUniform(\n    name: string,\n    size: UniformSize,\n    update: (o: IUniform) => UniformIOValue,\n    shaderInjection?: ShaderInjectionTarget,\n    qualifier?: string\n  ): IUniform {\n    return {\n      name,\n      qualifier,\n      shaderInjection,\n      size,\n      update\n    };\n  }\n\n  /**\n   * Applies a buffer manager to the layer which handles instance changes and applies those changes\n   * to an appropriate buffer at the appropriate location.\n   */\n  setBufferManager(bufferManager: BufferManagerBase<T, IBufferLocation>) {\n    if (!this._bufferManager) {\n      this._bufferManager = bufferManager;\n      this.diffManager = new InstanceDiffManager<T>(this, bufferManager);\n      this.diffManager.makeProcessor();\n      this.interactions = new LayerInteractionHandler(this);\n    } else {\n      console.warn(\n        \"You can not change a layer's buffer strategy once it has been instantiated.\"\n      );\n    }\n  }\n\n  /**\n   * Only allows the buffer type to be set once\n   */\n  setBufferType(val: LayerBufferType) {\n    if (this._bufferType === undefined) {\n      this._bufferType = val;\n    } else {\n      console.warn(\n        \"You can not change a layers buffer strategy once it has been instantiated.\"\n      );\n    }\n  }\n\n  willUpdateInstances(_changes: [T, InstanceDiffType]) {\n    // HOOK: Simple hook so a class can review all of it's changed instances before\n    //       Getting applied to the Shader IO\n  }\n\n  willUpdateProps(_newProps: ILayerProps<T>) {\n    /** LIFECYCLE */\n  }\n\n  didUpdate() {\n    this.props.data.resolve();\n  }\n}\n","export enum AnchorType {\n  BottomLeft,\n  BottomMiddle,\n  BottomRight,\n  Custom,\n  Middle,\n  MiddleLeft,\n  MiddleRight,\n  TopLeft,\n  TopMiddle,\n  TopRight\n}\n\nexport type Anchor = {\n  /** When the anchor gets calculated on the image, this allows the anchor to go beyond the borders of the image by this amount */\n  padding: number;\n  /** This is the location of the anchor. If a custom anchor is specified, then the x and y are not automatically populated */\n  type: AnchorType;\n  /** This is populated with the anchor's location relative to the image's surface */\n  x?: number;\n  /** This is populated with the anchor's location relative to the image's surface */\n  y?: number;\n};\n\nexport enum ScaleType {\n  /** The size of the image will be tied to world space */\n  ALWAYS = 1,\n  /** The image will scale to it's font size then stop growing */\n  BOUND_MAX = 2,\n  /** The image will alwyas retain it's font size on screen */\n  NEVER = 3\n}\n","export * from \"./bounds\";\nexport * from \"./circle\";\nexport * from \"./point\";\nexport * from \"./scale\";\nexport * from \"./size\";\n","import { Instance } from \"../../instance-provider/instance\";\nimport {\n  IInstanceAttribute,\n  instanceAttributeSizeFloatCount,\n  IVertexAttribute\n} from \"../../types\";\nimport { WebGLStat } from \"../../util\";\nimport {\n  InstanceAttributeBufferManager,\n  UniformBufferManager\n} from \"../buffer-management\";\nimport { Layer } from \"../layer\";\nimport { Scene } from \"../scene\";\n\nexport enum LayerBufferType {\n  // This is a compatibility mode for instance attributes. This is used when:\n  // 1. It would perform better\n  // 2. When instance attributes are not available for the gl context (ANGLE draw instanced arrays)\n  // 3. When the instance attributes + vertex attributes exceeds the max Vertex Attributes for the hardware\n  UNIFORM,\n  // This is a fast and zippy buffering strategy used when the hardware supports it for a provided layer!\n  INSTANCE_ATTRIBUTE\n}\n\n/**\n * This analyzes a layer and determines if it should use a compatibility instancing mode or use hardware\n * instancing.\n */\nexport function getLayerBufferType<T extends Instance>(\n  _gl: WebGLRenderingContext,\n  layer: Layer<T, any>,\n  vertexAttributes: IVertexAttribute[],\n  instanceAttributes: IInstanceAttribute<T>[]\n) {\n  let type;\n\n  // The layer only gets it's buffer type calculated once\n  if (layer.bufferType !== undefined) {\n    return layer.bufferType;\n  }\n\n  // Uncomment this to force the uniform buffer strategy\n  // layer.setBufferType(LayerBufferType.UNIFORM);\n  // return LayerBufferType.UNIFORM;\n\n  if (WebGLStat.HARDWARE_INSTANCING) {\n    let attributesUsed = 0;\n\n    for (let i = 0, end = vertexAttributes.length; i < end; ++i) {\n      const attribute = vertexAttributes[i];\n      attributesUsed += Math.ceil(attribute.size / 4);\n    }\n\n    for (let i = 0, end = instanceAttributes.length; i < end; ++i) {\n      const attribute = instanceAttributes[i];\n      attributesUsed += Math.ceil(\n        instanceAttributeSizeFloatCount[attribute.size || 1] / 4\n      );\n    }\n\n    // Too many attributes. We must use the uniform compatibility mode\n    if (attributesUsed > WebGLStat.MAX_VERTEX_ATTRIBUTES) {\n      type = LayerBufferType.UNIFORM;\n    }\n\n    // If we make it here, we are good to go using hardware instancing! Hooray performance!\n    else {\n      type = LayerBufferType.INSTANCE_ATTRIBUTE;\n    }\n  }\n\n  // No other faster mode supported: use uniform instancing\n  if (!type) type = LayerBufferType.UNIFORM;\n  // Apply the type to the layer\n  layer.setBufferType(type);\n\n  return type;\n}\n\n/**\n * Builds the proper buffer manager for the provided layer\n */\nexport function makeLayerBufferManager<T extends Instance>(\n  gl: WebGLRenderingContext,\n  layer: Layer<T, any>,\n  scene: Scene\n) {\n  // Esnure the buffering type has been calculated for the layer\n  const type = getLayerBufferType(\n    gl,\n    layer,\n    layer.vertexAttributes,\n    layer.instanceAttributes\n  );\n\n  switch (type) {\n    // This is the Instance Attribute buffering strategy, which means the system\n    case LayerBufferType.INSTANCE_ATTRIBUTE: {\n      layer.setBufferManager(new InstanceAttributeBufferManager(layer, scene));\n      break;\n    }\n\n    // Anything not utiliziing a specialized buffering strategy will use the uniform compatibility mode\n    default: {\n      layer.setBufferManager(new UniformBufferManager(layer, scene));\n      break;\n    }\n  }\n}\n","export * from \"./atlas\";\nexport * from \"./atlas-manager\";\nexport * from \"./color-atlas-resource\";\nexport * from \"./color-rasterizer\";\nexport * from \"./image-atlas-resource\";\nexport * from \"./image-rasterizer\";\nexport * from \"./label-atlas-resource\";\nexport * from \"./label-rasterizer\";\n","import * as Three from \"three\";\nimport { IModelConstructable, Layer } from \"../layer\";\n\nfunction isMesh(val: any): val is Three.Mesh {\n  return Boolean(val.isMesh);\n}\n\nexport function generateLayerModel(\n  layer: Layer<any, any>,\n  geometry: Three.BufferGeometry,\n  material: Three.ShaderMaterial\n): IModelConstructable & Three.Object3D {\n  const modelInfo = layer.getModelType();\n  const model = new modelInfo.modelType(geometry, material);\n\n  if (isMesh(model)) {\n    model.drawMode =\n      modelInfo.drawMode === undefined\n        ? Three.TriangleStripDrawMode\n        : modelInfo.drawMode;\n  }\n\n  return model;\n}\n","export interface IdentifyByKeyOptions {\n  /** The identifier of the object */\n  key: string;\n}\n\n/**\n * This is an object that specifically is generated with a 'key' option that can never\n * be modified on the object and is identified henceforth with the key applied as the\n * 'id' of the object.\n */\nexport class IdentifyByKey {\n  /** Internal key held by the object */\n  private key: string;\n\n  /** READONLY id of the object. */\n  get id() {\n    return this.key;\n  }\n\n  constructor(options: IdentifyByKeyOptions) {\n    this.key = options.key;\n  }\n}\n","export const templateVars = {\n  attributeFragments: \"attributeFragments\",\n  attributes: \"attributes\",\n  blocksPerInstance: \"blocksPerInstance\",\n  easingMethod: \"easingMethod\",\n  easingMethods: \"easingMethods\",\n  extend: \"extend\",\n  extendHeader: \"extendHeader\",\n  instanceBlockCount: \"instanceBlockCount\",\n  instanceDataBinaryTree: \"instanceDataBinaryTree\",\n  instanceDataRetrieval: \"instanceDataRetrieval\",\n  instanceDestructuring: \"instanceDestructuring\",\n  instanceFragments: \"instanceFragments\",\n  instanceUniformDeclarations: \"instanceUniformDeclarations\",\n  layerUniforms: \"layerUniforms\",\n  picking: \"picking\",\n  projectionMethods: \"projectionMethods\",\n  shader: \"shader\",\n  shaderInput: \"shaderInput\",\n  T: \"T\",\n  vertexAttributes: \"vertexAttributes\"\n};\n","export interface IShaderTemplateResults {\n  /** This is the resulting shader string generated from the templating */\n  shader: string;\n  /** This is the template options provided by the shader. {option: num occurrences} */\n  shaderProvidedOptions: Map<string, number>;\n  /**\n   * This is the template options provided by the shader that were not resolved by the options parameter\n   * {option: num occurrences}\n   */\n  unresolvedShaderOptions: Map<string, number>;\n  /** This is the options provided to the template that did not get resolved by the shader {option: 1} */\n  unresolvedProvidedOptions: Map<string, number>;\n  /** This is the list of options that DID get resolved by the options provided {option: num occurrences} */\n  resolvedShaderOptions: Map<string, number>;\n}\n\nexport interface IShaderTemplateRequirements {\n  /** A string identifier to make it easier to identify which shader template failed requirements */\n  name: string;\n  /** The options that must be present within both provided options AND within the template */\n  values: string[];\n}\n\nexport interface IShaderTemplateOptions {\n  /** Callback for 'required' errors being emitted */\n  onError?(msg: string): void;\n  /** Callback that allows overrides for token replacement. Provides the token found and the suggested replacement for it */\n  onToken?(token: string, replace: string): string;\n  /** This is a key value pair the template uses to match tokens found to replacement values */\n  options: { [key: string]: string };\n  /** This is used to indicate which tokens are required both within the shader AND within the 'options' */\n  required?: IShaderTemplateRequirements;\n  /** THis is the shader written with templating information */\n  shader: string;\n}\n\n/**\n * This is a method that aids in making shaders a bit more dynamic with simple string replacement based on tokens written\n * into the shader. Tokens in the shader will appear as ${token} and will either be ignored by this method and thus removed\n * or will be replaced with a provided value.\n *\n * This method will give feedback on the replacements taking place and simplify the process of detecting errors within the process.\n */\nexport function shaderTemplate(\n  templateOptions: IShaderTemplateOptions\n): IShaderTemplateResults {\n  const { shader, options, required, onError, onToken } = templateOptions;\n  const matched = new Map<string, number>();\n  const noValueProvided = new Map<string, number>();\n  const notFound = new Map<string, number>();\n  const shaderOptions = new Map<string, number>();\n\n  const shaderResults = shader.replace(\n    /\\$\\{(\\w+)\\}/g,\n    (_x: string, match: string) => {\n      let replace = \"\";\n      shaderOptions.set(match, (shaderOptions.get(match) || 0) + 1);\n\n      if (match in options) {\n        matched.set(match, (matched.get(match) || 0) + 1);\n        replace = options[match];\n      } else {\n        noValueProvided.set(match, (noValueProvided.get(match) || 0) + 1);\n      }\n\n      if (onToken) {\n        replace = onToken(match, replace);\n      }\n\n      return replace;\n    }\n  );\n\n  Object.keys(options).forEach(option => {\n    if (!matched.get(option)) {\n      notFound.set(option, (notFound.get(option) || 0) + 1);\n    }\n  });\n\n  // Provide metrics\n  const results = {\n    resolvedShaderOptions: matched,\n    shader: shaderResults,\n    shaderProvidedOptions: shaderOptions,\n    unresolvedProvidedOptions: notFound,\n    unresolvedShaderOptions: noValueProvided\n  };\n\n  if (required) {\n    // This will ensure that BOTH the parameter input AND the shader provided the required options.\n    required.values.forEach(require => {\n      if (results.unresolvedProvidedOptions.get(require)) {\n        const msg = `${\n          required.name\n        }: Could not resolve all the required inputs. Input: ${require}`;\n        if (onError) onError(msg);\n        else console.error(msg);\n      } else if (results.unresolvedShaderOptions.get(require)) {\n        const msg = `${\n          required.name\n        }: A required option was not provided in the options parameter. Option: ${require}`;\n        if (onError) onError(msg);\n        else console.error(msg);\n      } else if (!results.resolvedShaderOptions.get(require)) {\n        const msg = `${\n          required.name\n        }: A required option was not provided in the options parameter. Option: ${require}`;\n        if (onError) onError(msg);\n        else console.error(msg);\n      }\n    });\n  }\n\n  return results;\n}\n","import { uid } from \"../util/uid\";\nimport { Instance } from \"./instance\";\n\nexport class ObservableMonitoring {\n  static gatherIds: boolean = false;\n  static observableIds: number[] = [];\n  static observableNamesToUID = new Map<string, number>();\n\n  /**\n   * This activates all observables to gather their UIDs when they are retrieved via their getter.\n   * All of the ID's gathered can be accessed via getObservableMonitorIds. It is REQUIRED that this\n   * is disabled again to prevent a MASSIVE memory leak.\n   */\n  static setObservableMonitor(enabled: boolean) {\n    ObservableMonitoring.gatherIds = enabled;\n    ObservableMonitoring.observableIds = [];\n  }\n\n  /**\n   * This retrieves the observables montiored IDs that were gathered when setObservableMonitor was\n   * enabled.\n   */\n  static getObservableMonitorIds(clear?: boolean) {\n    const values = ObservableMonitoring.observableIds.slice(0);\n    if (clear) ObservableMonitoring.observableIds = [];\n\n    return values;\n  }\n}\n\n/**\n * This is a custom decorator intended for single properties on Instances only! It will\n * facilitate automatic updates and stream the updates through an InstanceProvider to properly\n * update the Instances values in the appropriate and corresponding buffers that will get committed\n * to the GPU.\n */\nexport function observable<T extends Instance>(target: T, key: string) {\n  // Here we store the name of the observable to a UID. This mapping allows us to have a UID\n  // per NAME of an observable. A UID for a name can produce MUCH faster lookups than the name itself.\n  // Matching against the name allows us to have instances with their own property sets but have matching\n  // name mappings to improve compatibility of Instances with varying Layers.\n  let propertyUID: number =\n    ObservableMonitoring.observableNamesToUID.get(key) || 0;\n\n  if (!propertyUID) {\n    propertyUID = uid();\n    ObservableMonitoring.observableNamesToUID.set(key, propertyUID);\n  }\n\n  /**\n   * New property getter to get the property's alternative storage since we overrode\n   * the initial storage with a custom getter and setter.\n   */\n  function getter(this: T) {\n    if (ObservableMonitoring.gatherIds) {\n      ObservableMonitoring.observableIds.push(propertyUID);\n    }\n    return this.observableStorage[propertyUID];\n  }\n\n  /**\n   * New property setter to replace the property marked as observable. This allows\n   * us to broadcast a change to our current observer.\n   */\n  function setter(this: T, newVal: any) {\n    // Update the privatized value\n    this.observableStorage[propertyUID] = newVal;\n    // Broadcast change\n    this.changes[propertyUID] = propertyUID;\n    this.observer && this.observer.instanceUpdated(this);\n  }\n\n  /**\n   * Make sure the desired property is declared on the class with our custom getter and\n   * setter.\n   */\n  Object.defineProperty(target, key, {\n    configurable: true,\n    enumerable: true,\n    get: getter,\n    set: setter\n  });\n}\n","import * as Three from \"three\";\nimport {\n  AbsolutePosition,\n  getAbsolutePositionBounds\n} from \"../primitives/absolute-position\";\nimport { Bounds } from \"../primitives/bounds\";\nimport { IPoint } from \"../primitives/point\";\nimport { Color } from \"../types\";\nimport { ChartCamera } from \"../util/chart-camera\";\nimport { DataBounds } from \"../util/data-bounds\";\nimport { IdentifyByKey, IdentifyByKeyOptions } from \"../util/identify-by-key\";\nimport { ViewCamera, ViewCameraType } from \"../util/view-camera\";\n\nexport enum ClearFlags {\n  COLOR = 0b0001,\n  DEPTH = 0b0010,\n  STENCIL = 0b0100\n}\n\n/**\n * Defines the input metrics of a view for a scene.\n */\nexport interface IViewOptions extends IdentifyByKeyOptions {\n  /**\n   * The background color that gets cleared out for this view. Performance is\n   * better if this is left clear. Probably better to draw a colored quad instead.\n   * This is just convenient.\n   */\n  background?: Color;\n  /**\n   * This is the spatial charting camera that is concerned with offsets and scales.\n   * It is often easier to work with camera positioning and settings rather than working\n   * with the complex and nuanced viewCamera which works with special transformation matrices\n   * to express orientation.\n   *\n   * If not provided, then this camera will use a default ChartCamera for this camera slot. This\n   * will also cause a normal camera handler to be utilized.\n   */\n  camera?: ChartCamera;\n  /**\n   * This sets what buffers get cleared by webgl before the view is drawn in it's space.\n   */\n  clearFlags?: ClearFlags[];\n  /**\n   * If this is provided, the layer can be rendered with a traditional camera that utilizes\n   * matrix transforms to provide orientation/projection for the view.\n   *\n   * If this is NOT provided, the camera will be a special orthographic camera for 2d spaces\n   * with a y-axis of +y points down with (0, 0) at the top left of the viewport.\n   */\n  viewCamera?: ViewCamera;\n  /**\n   * This specifies the bounds on the canvas this camera will render to. This let's you render\n   * say a little square in the bottom right showing a minimap.\n   *\n   * If this is not specified, the entire canvas will be the viewport.\n   */\n  viewport?: AbsolutePosition;\n}\n\nfunction isOrthographic(val: Three.Camera): val is Three.OrthographicCamera {\n  return \"left\" in val;\n}\n\n/**\n * This defines a view of a scene\n */\nexport class View extends IdentifyByKey {\n  static DEFAULT_VIEW_ID = \"__default__\";\n\n  /** If present, is the cleared color before this view renders */\n  background: Color;\n  /** Camera that defines the individual components of each axis with simpler concepts */\n  camera: ChartCamera;\n  /** These are the clear flags set for this view */\n  clearFlags: ClearFlags[];\n  /**\n   * This is the depth of the view. The higher the depth represents which layer is on top.\n   * Zero always represents the default view.\n   */\n  depth: number = 0;\n  /** This is set to ensure the projections that happen properly translates the pixel ratio to normal Web coordinates */\n  pixelRatio: number = window.devicePixelRatio;\n  /** This is the rendering bounds within screen space */\n  screenBounds: Bounds;\n  /** Camera that defines the view projection matrix */\n  viewCamera: ViewCamera;\n  /** The size positioning of the view */\n  viewport: AbsolutePosition;\n  /** The bounds of the render space on the canvas this view will render on */\n  viewBounds: DataBounds<View>;\n\n  constructor(options: IViewOptions) {\n    super(options);\n    Object.assign(this, options);\n  }\n\n  screenToPixelSpace(point: IPoint, out?: IPoint) {\n    const p = out || { x: 0, y: 0 };\n\n    p.x = point.x * this.pixelRatio;\n    p.y = point.y * this.pixelRatio;\n\n    return p;\n  }\n\n  pixelSpaceToScreen(point: IPoint, out?: IPoint) {\n    const p = out || { x: 0, y: 0 };\n\n    p.x = point.x / this.pixelRatio;\n    p.y = point.y / this.pixelRatio;\n\n    return p;\n  }\n\n  screenToView(point: IPoint, out?: IPoint) {\n    const p = this.screenToPixelSpace(point, out);\n\n    p.x = p.x - this.viewBounds.x;\n    p.y = p.y - this.viewBounds.y;\n\n    return p;\n  }\n\n  viewToScreen(point: IPoint, out?: IPoint) {\n    const p = { x: 0, y: 0 };\n\n    p.x = point.x + this.viewBounds.x;\n    p.y = point.y + this.viewBounds.y;\n\n    return this.pixelSpaceToScreen(p, out);\n  }\n\n  screenToWorld(point: IPoint, out?: IPoint) {\n    const view = this.pixelSpaceToScreen(this.screenToView(point));\n\n    const world = out || { x: 0, y: 0 };\n    world.x =\n      (view.x - this.camera.offset[0] * this.camera.scale[0]) /\n      this.camera.scale[0];\n    world.y =\n      (view.y - this.camera.offset[1] * this.camera.scale[1]) /\n      this.camera.scale[1];\n\n    // If this is a custom camera, we must actually project our world point to the screen\n    if (this.viewCamera.type === ViewCameraType.CUSTOM) {\n      console.warn(\"Custom View Camera projections not supported yet\");\n    }\n\n    return world;\n  }\n\n  worldToScreen(point: IPoint, out?: IPoint) {\n    const screen = { x: 0, y: 0 };\n\n    // Calculate from the camera to view space\n    screen.x =\n      (point.x * this.camera.scale[0] +\n        this.camera.offset[0] * this.camera.scale[0]) *\n      this.pixelRatio;\n    screen.y =\n      (point.y * this.camera.scale[1] +\n        this.camera.offset[1] * this.camera.scale[1]) *\n      this.pixelRatio;\n\n    // If this is a custom camera, we must actually project our world point to the screen\n    if (this.viewCamera.type === ViewCameraType.CUSTOM) {\n      console.warn(\"Custom View Camera projections not supported yet\");\n    }\n\n    // Convert from view to screen space\n    return this.viewToScreen(screen, out);\n  }\n\n  viewToWorld(point: IPoint, out?: IPoint) {\n    const world = out || { x: 0, y: 0 };\n\n    const screen = this.pixelSpaceToScreen(point);\n    world.x =\n      (screen.x - this.camera.offset[0] * this.camera.scale[0]) /\n      this.camera.scale[0];\n    world.y =\n      (screen.y - this.camera.offset[1] * this.camera.scale[1]) /\n      this.camera.scale[1];\n\n    // If this is a custom camera, we must actually project our world point to the screen\n    if (this.viewCamera.type === ViewCameraType.CUSTOM) {\n      console.warn(\"Custom View Camera projections not supported yet\");\n    }\n\n    return world;\n  }\n\n  worldToView(point: IPoint, out?: IPoint) {\n    const screen = out || { x: 0, y: 0 };\n\n    // Calculate from the camera to view space\n    screen.x =\n      point.x * this.camera.scale[0] +\n      this.camera.offset[0] * this.camera.scale[0];\n    screen.y =\n      point.y * this.camera.scale[1] +\n      this.camera.offset[1] * this.camera.scale[1];\n\n    // If this is a custom camera, we must actually project our world point to the screen\n    if (this.viewCamera.type === ViewCameraType.CUSTOM) {\n      console.warn(\"Custom View Camera projections not supported yet\");\n    }\n\n    return screen;\n  }\n\n  /**\n   * This operation makes sure we have the view camera adjusted to the new viewport's needs.\n   * For default behavior this ensures that the coordinate system has no distortion, orthographic,\n   * top left as 0,0 with +y axis pointing down.\n   */\n  fitViewtoViewport(surfaceDimensions: Bounds) {\n    if (\n      this.viewCamera.type === ViewCameraType.CONTROLLED &&\n      isOrthographic(this.viewCamera.baseCamera)\n    ) {\n      const viewBounds = getAbsolutePositionBounds<View>(\n        this.viewport,\n        surfaceDimensions,\n        this.pixelRatio\n      );\n      const width = viewBounds.width;\n      const height = viewBounds.height;\n\n      const viewport = {\n        bottom: -height / 2,\n        far: 10000000,\n        left: -width / 2,\n        near: -100,\n        right: width / 2,\n        top: height / 2\n      };\n\n      const scaleX = 1;\n      const scaleY = 1;\n      const camera = this.viewCamera.baseCamera;\n\n      Object.assign(camera, viewport);\n      camera.position.set(\n        -viewBounds.width / 2.0 * scaleX,\n        viewBounds.height / 2.0 * scaleY,\n        camera.position.z\n      );\n      camera.scale.set(scaleX, -scaleY, 1.0);\n      camera.updateMatrix();\n      camera.updateMatrixWorld(true);\n      camera.updateProjectionMatrix();\n\n      this.viewBounds = viewBounds;\n      this.viewBounds.data = this;\n      this.screenBounds = new Bounds({\n        height: this.viewBounds.height / this.pixelRatio,\n        width: this.viewBounds.width / this.pixelRatio,\n        x: this.viewBounds.x / this.pixelRatio,\n        y: this.viewBounds.y / this.pixelRatio\n      });\n    } else if (!isOrthographic(this.viewCamera.baseCamera)) {\n      console.warn(\n        \"Fit to viewport does not support non-orthographic cameras as a default behavior.\"\n      );\n    }\n  }\n}\n","import * as Three from \"three\";\nimport { Instance } from \"../instance-provider/instance\";\nimport { ILayerProps, Layer } from \"../surface/layer\";\nimport { IdentifyByKey, IdentifyByKeyOptions } from \"../util/identify-by-key\";\nimport { IViewOptions, View } from \"./view\";\n\n/**\n * Defines the input for an available scene layers can add themselves to. Each scene can be rendered with multiple\n * views.\n */\nexport interface ISceneOptions extends IdentifyByKeyOptions {\n  /**\n   * This indicates all of the views this scene can be rendered with. For instance: You have a\n   * world scene and you want to render it stereoscopically for VR. Then you can specify two\n   * views with two viewports to render the scene on both halves of the canvas.\n   *\n   * Or perhaps you want an aerial shot as a minimap in the bottom right corner while the rest\n   * of the canvas renders a first person view, then you would make two views for that as well.\n   */\n  views: IViewOptions[];\n}\n\nfunction sortByDepth(a: Layer<any, any>, b: Layer<any, any>) {\n  return a.depth - b.depth;\n}\n\n/**\n * This defines a scene to which layers are added to. It also tracks the views that this scene\n * is rendered with.\n */\nexport class Scene extends IdentifyByKey {\n  static DEFAULT_SCENE_ID = \"__default__\";\n\n  /** This is the three scene which actually sets up the rendering objects */\n  container: Three.Scene | undefined = new Three.Scene();\n  // TODO: This 'could' be smarter when Three is gone. The pipeline could IMMEDIATELY render\n  /** We make a picking container specifically for the cases where objects must be rendered for picking */\n  pickingContainer: Three.Scene = new Three.Scene();\n  /** This is all of the layers tracked to the scene */\n  layers: Layer<any, any>[] = [];\n  /** This indicates the sort is dirty for a set of layers */\n  sortIsDirty = false;\n  /** This is the view */\n  viewById = new Map<string, View>();\n\n  constructor(options: ISceneOptions) {\n    super(options);\n\n    if (this.container) {\n      this.container.frustumCulled = false;\n      this.container.autoUpdate = false;\n    }\n  }\n\n  /**\n   * Adds a layer to the scene with the current view setting the layer contains.\n   * The layer can not jump between views or scenes. You must destroy and reconstruct\n   * the layer.\n   */\n  addLayer<T extends Instance, U extends ILayerProps<T>>(layer: Layer<T, U>) {\n    // Add the layer to the list of layers under the view\n    this.layers.push(layer);\n    this.sortIsDirty = true;\n  }\n\n  /**\n   * This adds a view to this scene to be used by the scene\n   */\n  addView(view: View) {\n    this.viewById.set(view.id, view);\n  }\n\n  /**\n   * Release any resources this may be hanging onto\n   */\n  destroy() {\n    delete this.container;\n  }\n\n  /**\n   * Removes a layer from the scene. No resort is needed as remove operations\n   * do not adjust the sorting order.\n   */\n  removeLayer(layer: Layer<any, any>) {\n    if (this.layers) {\n      const index = this.layers.indexOf(layer);\n\n      if (index >= 0) {\n        this.layers.splice(index, 1);\n        return;\n      }\n    }\n\n    console.warn(\n      \"Could not remove a layer from the scene as the layer was not a part of the scene to start. Scene:\",\n      this.id,\n      \"Layer:\",\n      layer.id\n    );\n  }\n\n  sortLayers() {\n    if (this.sortIsDirty) {\n      this.layers.sort(sortByDepth);\n    }\n  }\n}\n","import { Label } from \"../../primitives/label\";\nimport { BaseAtlasResource } from \"./base-atlas-resource\";\n\nexport class LabelAtlasResource extends BaseAtlasResource {\n  /** This is the label to be loaded into the atlas */\n  label: Label;\n  /** If the label renders */\n  truncatedText: string;\n\n  constructor(label: Label) {\n    super();\n    this.label = label;\n  }\n}\n","import { SubTexture } from \"./sub-texture\";\n\nexport class BaseAtlasResource {\n  /** The rasterization metrics of the label */\n  rasterization: {\n    /**\n     * WARNING: This will ONLY SOMETIMES be populated. The system can choose\n     * when to consume this as it chooses as it can be a major memory eater if\n     * permanently left in place. DO NOT RELY on this being available.\n     */\n    canvas?: HTMLCanvasElement;\n    image?: HTMLImageElement;\n    /** The rasterization dimensions as it is rendered to texture space on an atlas */\n    texture: {\n      height: number;\n      width: number;\n    };\n    /** The rasterization dimensions as it would be rendered in world space */\n    world: {\n      height: number;\n      width: number;\n    };\n  };\n  /**\n   * This sets the ratserization to be a larger value on the texture than is rendered within\n   * the world space. This allows for techniques to be applied in the shaders to incorporate super sampling\n   * or other processes which require higher levels of resolution.\n   *\n   * The default is 1 for a 1 to 1 sample scaling to world space rendering\n   */\n  sampleScale: number = 1;\n  /** Once loaded into the texture, this will be populated */\n  texture: SubTexture;\n}\n","export enum EdgeScaleType {\n  /** All dimensions are within world space */\n  NONE,\n  /**\n   * The control points are a delta from the end points within screen space, and the line thickness is within\n   * screen space as well all measured in pixels. The scaleFactor scales both thickness and control delta values.\n   * The endpoints remain in world space\n   */\n  SCREEN_CURVE\n}\n\nexport enum EdgeType {\n  /** Makes a straight edge with no curve */\n  LINE,\n  /** Makes a single control point Bezier curve */\n  BEZIER,\n  /** Makes a two control point bezier curve */\n  BEZIER2\n}\n\n/**\n * This is the broadphase control for edges to help handle quad tree adjustments for picking. If the edge scale type\n * is NONE, you don't need to utilize this. If you use screen space and have camera distortions along an axis, this\n * can help greatly.\n */\nexport enum EdgeBroadphase {\n  /** Use this if the broad phase detection should use both width and height of the edge's bounds */\n  ALL,\n  /** Use this to ensure a test against the edge is performed if the mouse aligns with it on the x-axis */\n  PASS_Y,\n  /** Use this to ensure a test against the edge is performed if the mouse aligns with it on the y axis */\n  PASS_X\n}\n","import * as Three from \"three\";\nimport { Instance, InstanceDiff } from \"../../../instance-provider\";\nimport { isBufferLocation } from \"../buffer-manager-base\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\nimport { IUniformBufferLocation } from \"../uniform-buffer-manager\";\nimport { BaseDiffProcessor } from \"./base-diff-processor\";\n\n// This is a mapping of the vector properties as they relate to an array order\nconst VECTOR_ACCESSORS: (keyof Three.Vector4)[] = [\"x\", \"y\", \"z\", \"w\"];\nconst EMPTY: number[] = [];\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class UniformDiffProcessor<T extends Instance> extends BaseDiffProcessor<\n  T\n> {\n  /**\n   * This processes add operations from changes in the instancing data\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (uniformCluster) {\n      manager.changeInstance(manager, instance, EMPTY, uniformCluster);\n    }\n\n    // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n    else {\n      const uniforms = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocation(uniforms)) {\n        instance.active = true;\n        manager.updateInstance(manager.layer, instance, uniforms);\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the uniforms\n    if (uniformCluster) {\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n    }\n\n    // If we don't have existing uniforms, then we must remove the instance\n    else {\n      manager.addInstance(manager, instance, EMPTY, uniformCluster);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation\n  ) {\n    if (uniformCluster) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n    }\n  }\n\n  /**\n   * This performs the actual updating of buffers the instance needs to update\n   */\n  updateInstance(\n    layer: IInstanceDiffManagerTarget<T>,\n    instance: T,\n    uniformCluster: IUniformBufferLocation\n  ) {\n    if (instance.active) {\n      const uniforms = uniformCluster.buffer;\n      const uniformRangeStart = uniformCluster.range[0];\n      const instanceData: Three.Vector4[] = uniforms.value;\n      let instanceUniform, value, block, start;\n      let k, endk;\n\n      // Loop through the instance attributes and update the uniform cluster with the valaues\n      // Calculated for the instance\n      for (let i = 0, end = layer.instanceAttributes.length; i < end; ++i) {\n        instanceUniform = layer.instanceAttributes[i];\n        value = instanceUniform.update(instance);\n        block = instanceData[uniformRangeStart + (instanceUniform.block || 0)];\n        instanceUniform.atlas &&\n          layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n        start = instanceUniform.blockIndex;\n\n        if (start === undefined) {\n          continue;\n        }\n\n        // Hyper optimized vector filling routine. It uses properties that are globally scoped\n        // To greatly reduce overhead\n        for (k = start, endk = value.length + start; k < endk; ++k) {\n          block[VECTOR_ACCESSORS[k]] = value[k - start];\n        }\n      }\n\n      uniforms.value = instanceData;\n    } else {\n      const uniforms: Three.IUniform = uniformCluster.buffer;\n      const uniformRangeStart = uniformCluster.range[0];\n      const instanceData: Three.Vector4[] = uniforms.value;\n      let instanceUniform, value, block, start;\n\n      // Only update the _active attribute to ensure it is false. When it is false, there is no\n      // Point to updating any other uniform\n      instanceUniform = layer.activeAttribute;\n      value = instanceUniform.update(instance);\n      block = instanceData[uniformRangeStart + (instanceUniform.block || 0)];\n      instanceUniform.atlas &&\n        layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n      start = instanceUniform.blockIndex;\n\n      if (start !== undefined) {\n        // Hyper optimized vector filling routine. It uses properties that are globally scoped\n        // To greatly reduce overhead\n        for (let k = start, endk = value.length + start; k < endk; ++k) {\n          block[VECTOR_ACCESSORS[k]] = value[k - start];\n        }\n      }\n\n      uniforms.value = instanceData;\n    }\n  }\n\n  /**\n   * Right now there is no operations for committing for the uniform manager.\n   */\n  commit() {\n    /** no-op */\n  }\n\n  /**\n   * There are no optimizations available for this processor yet.\n   */\n  incomingChangeList(_changes: InstanceDiff<T>[]) {\n    /** no-op */\n  }\n}\n","import { Instance } from \"../../../instance-provider/instance\";\nimport { InstanceDiff } from \"../../../instance-provider/instance-provider\";\nimport { IInstanceAttributeInternal } from \"../../../types\";\nimport { Vec } from \"../../../util\";\nimport {\n  IBufferLocation,\n  IBufferLocationGroup,\n  isBufferLocationGroup\n} from \"../buffer-manager-base\";\nimport { IInstanceAttributeBufferLocationGroup } from \"../instance-attribute-buffer-manager\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\nimport { BaseDiffProcessor } from \"./base-diff-processor\";\n\nconst EMPTY: number[] = [];\nconst { min, max } = Math;\n\nenum DiffMode {\n  /** This mode will analyze incoming buffer location changes and only update the range of changed buffer */\n  PARTIAL,\n  /** This mode will not spend time figuring out what has changed for a buffer, rather the whole buffer will get an update */\n  FULL\n}\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class InstanceAttributeDiffProcessor<\n  T extends Instance\n> extends BaseDiffProcessor<T> {\n  /** This is the processor's current diff mode for consuming instance updates. */\n  private diffMode: DiffMode = DiffMode.PARTIAL;\n\n  /** This tracks a buffer attribute's uid to the range of data that it should update */\n  bufferAttributeUpdateRange: {\n    [key: number]: [IInstanceAttributeInternal<T>, number, number];\n  } = {};\n\n  /** This tracks a buffer attribute's uid that will perform a complete update */\n  bufferAttributeWillUpdate: {\n    [key: number]: IInstanceAttributeInternal<T>;\n  } = {};\n\n  /**\n   * The instance updating is a property instead of a method as we will want to be able to gear shift it for varying levels\n   * of adjustments.\n   */\n  updateInstance: (\n    layer: IInstanceDiffManagerTarget<T>,\n    instance: T,\n    propIds: number[],\n    bufferLocations: IBufferLocationGroup<IBufferLocation>\n  ) => void = this.updateInstancePartial;\n\n  /**\n   * This processes add operations from changes in the instancing data\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (bufferLocations) {\n      manager.changeInstance(manager, instance, EMPTY, bufferLocations);\n    }\n\n    // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n    else {\n      const newBufferLocations = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocationGroup(newBufferLocations)) {\n        instance.active = true;\n        manager.updateInstance(\n          manager.layer,\n          instance,\n          EMPTY,\n          newBufferLocations\n        );\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the bufferLocations\n    if (bufferLocations) {\n      manager.updateInstance(manager.layer, instance, propIds, bufferLocations);\n    }\n\n    // If we don't have existing bufferLocations, then we must remove the instance\n    else {\n      manager.addInstance(manager, instance, EMPTY, bufferLocations);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    if (bufferLocations) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, EMPTY, bufferLocations);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n    }\n  }\n\n  /**\n   * This performs the actual updating of buffers the instance needs to update\n   */\n  updateInstancePartial(\n    layer: IInstanceDiffManagerTarget<T>,\n    instance: T,\n    propIds: number[],\n    bufferLocations: IBufferLocationGroup<IBufferLocation>\n  ) {\n    const propertyToLocation = bufferLocations.propertyToBufferLocation;\n    const bufferAttributeUpdateRange = this.bufferAttributeUpdateRange;\n    let location: IBufferLocation;\n    let updateValue: Vec;\n    let updateRange;\n    let childLocations: IBufferLocation[];\n    let attribute: IInstanceAttributeInternal<T>;\n\n    if (instance.active) {\n      // If no prop ids provided, then we perform a complete instance property update\n      if (propIds.length === 0) {\n        propIds = this.bufferManager.getUpdateAllPropertyIdList();\n      }\n\n      for (let i = 0, end = propIds.length; i < end; ++i) {\n        // First update for the instance attribute itself\n        location = propertyToLocation[propIds[i]];\n        attribute = location.attribute;\n        attribute.atlas && layer.resource.setTargetAtlas(attribute.atlas.key);\n        updateValue = attribute.update(instance);\n        location.buffer.value.set(updateValue, location.range[0]);\n        updateRange = bufferAttributeUpdateRange[attribute.uid] || [\n          null,\n          Number.MAX_SAFE_INTEGER,\n          Number.MIN_SAFE_INTEGER\n        ];\n        updateRange[0] = attribute;\n        updateRange[1] = min(location.range[0], updateRange[1]);\n        updateRange[2] = max(location.range[1], updateRange[2]);\n        bufferAttributeUpdateRange[attribute.uid] = updateRange;\n\n        // Now update any child attributes that would need updating based on the parent attribute changing\n        if (location.childLocations) {\n          childLocations = location.childLocations;\n\n          for (let k = 0, endk = childLocations.length; k < endk; ++k) {\n            location = childLocations[k];\n            updateValue = location.attribute.update(instance);\n            location.buffer.value.set(updateValue, location.range[0]);\n            updateRange = bufferAttributeUpdateRange[\n              location.attribute.uid\n            ] || [null, Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER];\n            updateRange[0] = location.attribute;\n            updateRange[1] = min(location.range[0], updateRange[1]);\n            updateRange[2] = max(location.range[1], updateRange[2]);\n            bufferAttributeUpdateRange[location.attribute.uid] = updateRange;\n          }\n        }\n      }\n    }\n\n    // When the instance is inactive all we update is the active attribute to false\n    else {\n      location =\n        propertyToLocation[this.bufferManager.getActiveAttributePropertyId()];\n      attribute = location.attribute;\n      updateValue = attribute.update(instance);\n      location.buffer.value.set(updateValue, location.range[0]);\n      updateRange = bufferAttributeUpdateRange[attribute.uid] || [\n        null,\n        Number.MAX_SAFE_INTEGER,\n        Number.MIN_SAFE_INTEGER\n      ];\n      updateRange[0] = attribute;\n      updateRange[1] = min(location.range[0], updateRange[1]);\n      updateRange[2] = max(location.range[1], updateRange[2]);\n      bufferAttributeUpdateRange[attribute.uid] = updateRange;\n    }\n  }\n\n  /**\n   * This performs an update on the buffers with the intent the entire buffer is going to update\n   * rather than a chunk of it.\n   */\n  updateInstanceFull(\n    layer: IInstanceDiffManagerTarget<T>,\n    instance: T,\n    propIds: number[],\n    bufferLocations: IBufferLocationGroup<IBufferLocation>\n  ) {\n    const propertyToLocation = bufferLocations.propertyToBufferLocation;\n    const bufferAttributeWillUpdate = this.bufferAttributeWillUpdate;\n    let location: IBufferLocation;\n    let updateValue: Vec;\n    let childLocations: IBufferLocation[];\n    let attribute: IInstanceAttributeInternal<T>;\n\n    if (instance.active) {\n      // If no prop ids provided, then we perform a complete instance property update\n      if (propIds.length === 0) {\n        propIds = this.bufferManager.getUpdateAllPropertyIdList();\n      }\n\n      for (let i = 0, end = propIds.length; i < end; ++i) {\n        // First update for the instance attribute itself\n        location = propertyToLocation[propIds[i]];\n        attribute = location.attribute;\n        attribute.atlas && layer.resource.setTargetAtlas(attribute.atlas.key);\n        updateValue = attribute.update(instance);\n        location.buffer.value.set(updateValue, location.range[0]);\n        bufferAttributeWillUpdate[attribute.uid] = attribute;\n\n        // Now update any child attributes that would need updating based on the parent attribute changing\n        if (location.childLocations) {\n          childLocations = location.childLocations;\n\n          for (let k = 0, endk = childLocations.length; k < endk; ++k) {\n            location = childLocations[k];\n            attribute = location.attribute;\n            updateValue = attribute.update(instance);\n            location.buffer.value.set(updateValue, location.range[0]);\n            bufferAttributeWillUpdate[attribute.uid] = attribute;\n          }\n        }\n      }\n    }\n\n    // When the instance is inactive all we update is the active attribute to false\n    else {\n      location =\n        propertyToLocation[this.bufferManager.getActiveAttributePropertyId()];\n      attribute = location.attribute;\n      attribute.atlas && layer.resource.setTargetAtlas(attribute.atlas.key);\n      updateValue = attribute.update(instance);\n      location.buffer.value.set(updateValue, location.range[0]);\n      bufferAttributeWillUpdate[attribute.uid] = attribute;\n    }\n  }\n\n  /**\n   * Finalize all of the buffer changes and apply the correct update ranges\n   */\n  commit() {\n    // If we're in a partial mode: just update the portion of the buffer that needs updating.\n    if (this.diffMode === DiffMode.PARTIAL) {\n      // We now grab all of the attributes and set their update ranges\n      const updates = Object.values(this.bufferAttributeUpdateRange);\n\n      for (let i = 0, end = updates.length; i < end; ++i) {\n        const update = updates[i];\n        const attribute = update[0].bufferAttribute;\n        attribute.needsUpdate = true;\n        attribute.updateRange = {\n          count: update[2] - update[1],\n          offset: update[1]\n        };\n      }\n    }\n\n    // Otherwise just update the full buffer\n    else {\n      // We now grab all of the attributes and set their update ranges\n      const updates = Object.values(this.bufferAttributeWillUpdate);\n\n      for (let i = 0, end = updates.length; i < end; ++i) {\n        const attribute = updates[i].bufferAttribute;\n        attribute.needsUpdate = true;\n        attribute.updateRange = {\n          count: -1,\n          offset: 0\n        };\n      }\n    }\n\n    // Clear the attribute update metrics\n    this.bufferAttributeUpdateRange = {};\n  }\n\n  /**\n   * This will optimize the update method used. If there are enough instances being updated, we will\n   * cause the entire attribute buffer to update. If there are not enough, then we will update with\n   * additional steps to\n   */\n  incomingChangeList(changes: InstanceDiff<T>[]) {\n    if (changes.length === 0) {\n      this.diffMode = DiffMode.PARTIAL;\n    } else if (changes.length > this.bufferManager.getInstanceCount() * 0.7) {\n      this.diffMode = DiffMode.FULL;\n    } else {\n      this.diffMode = DiffMode.PARTIAL;\n    }\n\n    if (this.diffMode === DiffMode.PARTIAL) {\n      this.updateInstance = this.updateInstancePartial;\n    } else {\n      this.updateInstance = this.updateInstanceFull;\n    }\n  }\n}\n","import * as Three from \"three\";\n\nexport enum ViewCameraType {\n  /**\n   * Indicates a camera that is forced by the system to follow:\n   * - Match width and height of the view port\n   * - +y axis points downward\n   * - gl origin is at the top left of the screen\n   */\n  CONTROLLED,\n  /**\n   * This allows a custom view camera to be applied to the scene.\n   */\n  CUSTOM\n}\n\n/**\n * This is a camera that controls the view projection matrix. This is a much more\n * complicated way to handle views that is better suited for handling 3D applications\n * and is very overkill for most 2D charting systems. If you are working purely with\n * 2D components, it's recommended to leave this as a CONTROLLED camera and utilize\n * the ChartCamera for most of your needs.\n */\nexport class ViewCamera {\n  type: ViewCameraType = ViewCameraType.CONTROLLED;\n  baseCamera: Three.Camera;\n}\n","let chartCameraUID = 0;\n\nexport interface IChartCameraOptions {\n  /** The world space offset of elements in the chart */\n  offset?: [number] | [number, number] | [number, number, number];\n  /** The world space scaling present in the chart */\n  scale?: [number] | [number, number] | [number, number, number];\n}\n\n/**\n * Quick method for applying a source array to a target array. This\n * ensures the arrays both are valid and applies the values without just making\n * a copy of the source.\n */\nfunction applyArray(target?: number[], source?: number[]) {\n  target && source && target.splice(0, source.length, ...source);\n}\n\nexport class ChartCamera {\n  /** Internally set id */\n  _id: number = chartCameraUID++;\n  /** Represents how much an element should be offset in world space */\n  offset: [number, number, number] = [0, 0, 0];\n  /** Represents how scaled each axis should be in world space */\n  scale: [number, number, number] = [1, 1, 1];\n\n  constructor(options?: IChartCameraOptions) {\n    if (options) {\n      applyArray(this.offset, options.offset);\n      applyArray(this.scale, options.scale);\n    }\n  }\n\n  /** Keep id as readonly */\n  get id() {\n    return this._id;\n  }\n\n  /**\n   * Sets the location of the camera by adjusting the offsets to match.\n   */\n  position(location: [number, number, number]) {\n    this.offset = location.slice(0) as [number, number, number];\n  }\n}\n","const { sqrt } = Math;\n\n/** Explicit Vec1 */\nexport interface IVec1 extends Array<number> {\n  0: number;\n  length: 1;\n}\n\n/** Explicit Vec2 */\nexport interface IVec2 extends Array<number> {\n  0: number;\n  1: number;\n  length: 2;\n}\n\n/** Explicit Vec3 */\nexport interface IVec3 extends Array<number> {\n  0: number;\n  1: number;\n  2: number;\n  length: 3;\n}\n\n/** Explicit Vec4 */\nexport interface IVec4 extends Array<number> {\n  0: number;\n  1: number;\n  2: number;\n  3: number;\n  length: 4;\n}\n\n/** Vector of 1 components */\nexport type Vec1 = [number];\n/** Vector of 2 components */\nexport type Vec2 = [number, number];\n/** Vector of 3 components */\nexport type Vec3 = [number, number, number];\n/** Vector of 4 components */\nexport type Vec4 = [number, number, number, number];\n\n/** This type defines any possible explicit vector */\nexport type IVec = IVec1 | IVec2 | IVec3 | IVec4;\n/** This type defines any possible vector */\nexport type Vec = Vec1 | Vec2 | Vec3 | Vec4;\n\nexport function add1(left: Vec1, right: Vec1): Vec1 {\n  return [left[0] + right[0]];\n}\n\nexport function scale1(vec: Vec1, scale: number): Vec1 {\n  return [vec[0] * scale];\n}\n\nexport function subtract1(left: Vec1, right: Vec1): Vec1 {\n  return [left[0] - right[0]];\n}\n\nexport function multiply1(left: Vec1, right: Vec1): Vec1 {\n  return [left[0] * right[0]];\n}\n\nexport function dot1(left: Vec1, right: Vec1): number {\n  return left[0] * right[0];\n}\n\nexport function linear1(start: Vec1, end: Vec1, t: number): Vec1 {\n  return scale1(add1(subtract1(end, start), start), t);\n}\n\nexport function length1(start: Vec1): number {\n  return sqrt(dot1(start, start));\n}\n\nexport function add2(left: Vec2, right: Vec2): Vec2 {\n  return [left[0] + right[0], left[1] + right[1]];\n}\n\nexport function scale2(left: Vec2, scale: number): Vec2 {\n  return [left[0] * scale, left[1] * scale];\n}\n\nexport function subtract2(left: Vec2, right: Vec2): Vec2 {\n  return [left[0] - right[0], left[1] - right[1]];\n}\n\nexport function multiply2(left: Vec2, right: Vec2): Vec2 {\n  return [left[0] * right[0], left[1] * right[1]];\n}\n\nexport function dot2(left: Vec2, right: Vec2): number {\n  return left[0] * right[0] + left[1] * right[1];\n}\n\nexport function linear2(start: Vec2, end: Vec2, t: number): Vec2 {\n  return scale2(add2(subtract2(end, start), start), t);\n}\n\nexport function length2(start: Vec2): number {\n  return sqrt(dot2(start, start));\n}\n\nexport function add3(left: Vec3, right: Vec3): Vec3 {\n  return [left[0] + right[0], left[1] + right[1], left[2] + right[2]];\n}\n\nexport function scale3(left: Vec3, scale: number): Vec3 {\n  return [left[0] * scale, left[1] * scale, left[2] * scale];\n}\n\nexport function subtract3(left: Vec3, right: Vec3): Vec3 {\n  return [left[0] - right[0], left[1] - right[1], left[2] - right[2]];\n}\n\nexport function multiply3(left: Vec3, right: Vec3): Vec3 {\n  return [left[0] * right[0], left[1] * right[1], left[2] * right[2]];\n}\n\nexport function linear3(start: Vec3, end: Vec3, t: number): Vec3 {\n  return scale3(add3(subtract3(end, start), start), t);\n}\n\nexport function length3(start: Vec3): number {\n  return sqrt(dot3(start, start));\n}\n\nexport function dot3(left: Vec3, right: Vec3): number {\n  return left[0] * right[0] + left[1] * right[1] + left[2] * right[2];\n}\n\nexport function add4(left: Vec4, right: Vec4): Vec4 {\n  return [\n    left[0] + right[0],\n    left[1] + right[1],\n    left[2] + right[2],\n    left[3] + right[3]\n  ];\n}\n\nexport function scale4(left: Vec4, scale: number): Vec4 {\n  return [left[0] * scale, left[1] * scale, left[2] * scale, left[3] * scale];\n}\n\nexport function subtract4(left: Vec4, right: Vec4): Vec4 {\n  return [\n    left[0] - right[0],\n    left[1] - right[1],\n    left[2] - right[2],\n    left[3] - right[3]\n  ];\n}\n\nexport function multiply4(left: Vec4, right: Vec4): Vec4 {\n  return [\n    left[0] * right[0],\n    left[1] * right[1],\n    left[2] * right[2],\n    left[3] * right[3]\n  ];\n}\n\nexport function dot4(left: Vec4, right: Vec4): number {\n  return (\n    left[0] * right[0] +\n    left[1] * right[1] +\n    left[2] * right[2] +\n    left[3] * right[3]\n  );\n}\n\nexport function linear4(start: Vec4, end: Vec4, t: number): Vec4 {\n  return scale4(add4(subtract4(end, start), start), t);\n}\n\nexport function length4(start: Vec4): number {\n  return sqrt(dot4(start, start));\n}\n\nexport type VecMethods<T extends Vec> = {\n  add(left: T, right: T): T;\n  scale(vec: T, scale: number): T;\n  subtract(left: T, right: T): T;\n  multiply(left: T, right: T): T;\n  dot(left: T, right: T): number;\n  linear(start: T, end: T, t: number): T;\n  length(vec: T): number;\n};\n\nexport const vec1Methods: VecMethods<Vec1> = {\n  add: add1,\n  dot: dot1,\n  length: length1,\n  linear: linear1,\n  multiply: multiply1,\n  scale: scale1,\n  subtract: subtract1\n};\n\nexport const vec2Methods: VecMethods<Vec2> = {\n  add: add2,\n  dot: dot2,\n  length: length2,\n  linear: linear2,\n  multiply: multiply2,\n  scale: scale2,\n  subtract: subtract2\n};\n\nexport const vec3Methods: VecMethods<Vec3> = {\n  add: add3,\n  dot: dot3,\n  length: length3,\n  linear: linear3,\n  multiply: multiply3,\n  scale: scale3,\n  subtract: subtract3\n};\n\nexport const vec4Methods: VecMethods<Vec4> = {\n  add: add4,\n  dot: dot4,\n  length: length4,\n  linear: linear4,\n  multiply: multiply4,\n  scale: scale4,\n  subtract: subtract4\n};\n\nexport function VecMath<T extends IVec>(vec: T): VecMethods<T> {\n  let methods: VecMethods<T>;\n\n  if (vec.length === 1) {\n    methods = vec1Methods as VecMethods<T>;\n    return methods;\n  } else if (vec.length === 2) {\n    methods = vec2Methods as VecMethods<T>;\n    return methods;\n  } else if (vec.length === 3) {\n    methods = vec3Methods as VecMethods<T>;\n    return methods;\n  }\n\n  methods = vec4Methods as VecMethods<T>;\n\n  return methods;\n}\n","import { InstanceIOValue } from \"../types\";\nimport { Vec, VecMath } from \"./vector\";\n\nconst { min, max, pow, round, sin, PI } = Math;\nconst GPU_PI = round(PI * 1000) / 1000;\n\nfunction clamp(x: number, minVal: number, maxVal: number) {\n  return min(max(x, minVal), maxVal);\n}\n\nexport enum AutoEasingLoopStyle {\n  /** Time will go from 0 -> 1 then stop at 1 */\n  NONE = 1,\n  /** Time will go from 0 -> infinity */\n  CONTINUOUS = 4,\n  /** Time will continuously go 0 -> 1 then 0 -> 1 then 0 -> 1 etc etc */\n  REPEAT = 2,\n  /** Time will continously go 0 -> 1 then 1 -> 0 then 0 -> 1 then 1 -> 0 etc etc */\n  REFLECT = 3\n}\n\n/**\n * This defines a GPU enabled easing method that will be executed on the GPU to maneuver\n *\n */\nexport interface IAutoEasingMethod<T extends InstanceIOValue> {\n  /** An easing method that should produce IDENTICAL values to the values of the gpu easing method using the exact same parameters */\n  cpu(start: T, end: T, t: number): T;\n  /** This adds a delay to the starting time of an easing change */\n  delay: number;\n  /** This is how long the easing method should last */\n  duration: number;\n  /**\n   * An easing method written in shader language that should produce IDENTICAL\n   * values to the values of the cpu easing method using the exact same parameters.\n   */\n  gpu: string;\n  /**\n   * This defines the looping style of the easing.\n   */\n  loop: AutoEasingLoopStyle;\n  /**\n   * This shall be the name of the easing method as it appears in the spu shader.\n   * BE WARNED: This name is used to dedup the methods created on the shader. So,\n   * if you use the same name as another ease method used on a single layer, you run\n   * the risk of one overriding the other with an undefined chance of who wins.\n   */\n  methodName: string;\n\n  /**\n   * This lets you modify some auto easing validation rules.\n   */\n  validation?: {\n    ignoreEndValueCheck?: boolean;\n    ignoreOverTimeCheck?: boolean;\n  };\n}\n\n// GPU easing methods! Written here because it's cleaner to write `` style strings\n// Against the left side of the editor\n\nconst immediateGPU = `\n$\\{easingMethod} {\n  return end;\n}\n`;\n\nconst linearGPU = `\n$\\{easingMethod} {\n  return (end - start) * t + start;\n}\n`;\n\nconst easeInQuadGPU = `\n$\\{easingMethod} {\n  float time = t * t;\n  return (end - start) * time + start;\n}\n`;\n\nconst easeOutQuadGPU = `\n$\\{easingMethod} {\n  float time = t * (2.0 - t);\n  return (end - start) * time + start;\n}\n`;\nconst easeInOutQuadGPU = `\n$\\{easingMethod} {\n  float time = t < 0.5 ? 2.0 * t * t : -1.0 + (4.0 - 2.0 * t) * t;\n  return (end - start) * time + start;\n}\n`;\nconst easeInCubicGPU = `\n$\\{easingMethod} {\n  float time = t * t * t;\n  return (end - start) * time + start;\n}\n`;\nconst easeOutCubicGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float time = t1 * t1 * t1 + 1.0;\n  return (end - start) * time + start;\n}\n`;\nconst easeInOutCubicGPU = `\n$\\{easingMethod} {\n  float time = t < 0.5 ? 4.0 * t * t * t : (t - 1.0) * (2.0 * t - 2.0) * (2.0 * t - 2.0) + 1.0;\n  return (end - start) * time + start;\n}\n`;\nconst easeInQuartGPU = `\n$\\{easingMethod} {\n  float time = t * t * t * t;\n  return (end - start) * time + start;\n}\n`;\nconst easeOutQuartGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float time = 1.0 - t1 * t1 * t1 * t1;\n  return (end - start) * time + start;\n}\n`;\nconst easeInOutQuartGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float time = t < 0.5 ? 8.0 * t * t * t * t : 1.0 - 8.0 * t1 * t1 * t1 * t1;\n  return (end - start) * time + start;\n}\n`;\nconst easeInQuintGPU = `\n$\\{easingMethod} {\n  float time = t * t * t * t * t;\n  return (end - start) * time + start;\n}\n`;\nconst easeOutQuintGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float time = 1.0 + t1 * t1 * t1 * t1 * t1;\n  return (end - start) * time + start;\n}\n`;\nconst easeInOutQuintGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float time = t < 0.5 ? 16.0 * t * t * t * t * t : 1.0 + 16.0 * t1 * t1 * t1 * t1 * t1;\n  return (end - start) * time + start;\n}\n`;\n\nconst easeOutElasticGPU = `\n$\\{easingMethod} {\n  float p = 0.3;\n  float time = pow(2.0, -10.0 * t) * sin((t - p / 4.0) * (2.0 * ${GPU_PI}) / p) + 1.0;\n  return (end - start) * time + start;\n}\n`;\n\nconst easeBackInGPU = `\n$\\{easingMethod} {\n  float time = t * t * t - t * 1.05 * sin(t * ${GPU_PI});\n  return (end - start) * time + start;\n}\n`;\n\nconst easeBackOutGPU = `\n$\\{easingMethod} {\n  float t1 = t - 1.0;\n  float a = 1.7;\n  float time = (t1 * t1 * ((a + 1.0) * t1 + a) + 1.0);\n  return (end - start) * time + start;\n}\n`;\n\nconst easeBackInOutGPU = `\n$\\{easingMethod} {\n  float a = 1.4;\n  float a1 = a * 1.525;\n  float t1 = t / 0.5;\n  float t2 = t1 - 2.0;\n  float time =\n    (t1 < 1.0) ? 0.5 * (t1 * t1 * (a1 + 1.0) * t1 - a1) :\n    0.5 * (t2 * t2 * ((a1 + 1.0) * t2 + a1) + 2.0)\n  ;\n\n  return (end - start) * time + start;\n}\n`;\n\nconst continuousSinusoidalGPU = `\n$\\{easingMethod} {\n  $\\{T} direction = end - start;\n  float amplitude = length(direction) * 2.0;\n  return start + direction * sin(t * ${GPU_PI} * 2.0) * amplitude;\n}\n`;\n\n/**\n * Class of base AutoEasingMethods as well as helper constructs for making the methods.\n */\nexport class AutoEasingMethod<T extends InstanceIOValue>\n  implements IAutoEasingMethod<T> {\n  /**\n   * Autoeasing methods for linear easing\n   */\n  static immediate<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      cpu: (_start: T, end: T, _t: number) => end,\n      delay,\n      duration,\n      gpu: immediateGPU,\n      loop,\n      methodName: \"immediate\"\n    };\n  }\n\n  /**\n   * Autoeasing methods for linear easing\n   */\n  static linear<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        const { add, scale, subtract } = VecMath(start);\n        t = clamp(t, 0, 1);\n        return add(scale(subtract(end, start), t), start);\n      },\n      delay,\n      duration,\n      gpu: linearGPU,\n      loop,\n      methodName: \"linear\"\n    };\n  }\n\n  /**\n   * Auto easing for Accelerating to end\n   */\n  static easeInQuad<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInQuadGPU,\n      loop,\n      methodName: \"easeInQuad\"\n    };\n  }\n\n  /**\n   * Auto easing for decelerating to end\n   */\n  static easeOutQuad<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t * (2 - t);\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeOutQuadGPU,\n      loop,\n      methodName: \"easeOutQuad\"\n    };\n  }\n\n  /**\n   * Auto easing for Accelerate to mid, then decelerate to end\n   */\n  static easeInOutQuad<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInOutQuadGPU,\n      loop,\n      methodName: \"easeInOutQuad\"\n    };\n  }\n\n  /**\n   * Auto easing for Slower acceleration\n   */\n  static easeInCubic<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInCubicGPU,\n      loop,\n      methodName: \"easeInCubic\"\n    };\n  }\n\n  /**\n   * Auto easing for Slower deceleration\n   */\n  static easeOutCubic<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = --t * t * t + 1;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeOutCubicGPU,\n      loop,\n      methodName: \"easeOutCubic\"\n    };\n  }\n\n  /**\n   * Auto easing for Slower acceleration to mid, and slower deceleration to end\n   */\n  static easeInOutCubic<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time =\n          t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInOutCubicGPU,\n      loop,\n      methodName: \"easeInOutCubic\"\n    };\n  }\n\n  /**\n   * Auto easing for even Slower acceleration to end\n   */\n  static easeInQuart<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInQuartGPU,\n      loop,\n      methodName: \"easeInQuart\"\n    };\n  }\n\n  /**\n   * Auto easing for even Slower deceleration to end\n   */\n  static easeOutQuart<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = 1 - --t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeOutQuartGPU,\n      loop,\n      methodName: \"easeOutQuart\"\n    };\n  }\n\n  /**\n   * Auto easing for even Slower acceleration to mid, and even slower deceleration to end\n   */\n  static easeInOutQuart<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInOutQuartGPU,\n      loop,\n      methodName: \"easeInOutQuart\"\n    };\n  }\n\n  /**\n   * Auto easing for super slow accelerating to the end\n   */\n  static easeInQuint<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = t * t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInQuintGPU,\n      loop,\n      methodName: \"easeInQuint\"\n    };\n  }\n\n  /**\n   * Auto easing for super slow decelerating to the end\n   */\n  static easeOutQuint<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time = 1 + --t * t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeOutQuintGPU,\n      loop,\n      methodName: \"easeOutQuint\"\n    };\n  }\n\n  /**\n   * Auto easing for super slow accelerating to mid and super slow decelerating to the end\n   */\n  static easeInOutQuint<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const time =\n          t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeInOutQuintGPU,\n      loop,\n      methodName: \"easeInOutQuint\"\n    };\n  }\n\n  /**\n   * Auto easing for elastic effect\n   */\n  static easeOutElastic<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const p = 0.3;\n        const time = pow(2, -10 * t) * sin((t - p / 4) * (2 * PI) / p) + 1;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeOutElasticGPU,\n      loop,\n      methodName: \"easeOutElastic\"\n    };\n  }\n\n  /**\n   * Auto easing for retracting first then shooting to the end\n   */\n  static easeBackIn<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const a = 1.05;\n        const time = t * t * t - t * a * sin(t * PI);\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeBackInGPU,\n      loop,\n      methodName: \"easeBackIn\"\n    };\n  }\n\n  /**\n   * Auto easing for overshooting at the end\n   */\n  static easeBackOut<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const a = 1.7;\n        const t1 = t - 1;\n        const time = t1 * t1 * ((a + 1) * t1 + a) + 1;\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeBackOutGPU,\n      loop,\n      methodName: \"easeBackOut\"\n    };\n  }\n\n  /**\n   * Auto easing for overshooting at the end\n   */\n  static easeBackInOut<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.NONE\n  ): IAutoEasingMethod<T> {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        t = clamp(t, 0, 1);\n        const a = 1.7;\n        const a1 = a * 1.525;\n        const t1 = t / 0.5;\n        const t2 = t1 - 2;\n        const time =\n          t1 < 1\n            ? 0.5 * (t1 * t1 * (a1 + 1) * t1 - a1)\n            : 0.5 * (t2 * t2 * ((a1 + 1) * t2 + a1) + 2);\n        const { add, scale, subtract } = VecMath(start);\n        return add(scale(subtract(end, start), time), start);\n      },\n      delay,\n      duration,\n      gpu: easeBackInOutGPU,\n      loop,\n      methodName: \"easeBackInOut\"\n    };\n  }\n\n  /**\n   * This is an easing method that performs a sinusoidal wave where the amplitude is\n   * (start - end) * 2 and the wave starts at the start value.\n   *\n   * This is intended to work best with the CONTINUOUS loop style.\n   */\n  static continuousSinusoidal<T extends Vec>(\n    duration: number,\n    delay: number = 0,\n    loop = AutoEasingLoopStyle.CONTINUOUS\n  ): IAutoEasingMethod<T> {\n    return {\n      cpu: (start: T, end: T, t: number) => {\n        const { add, length, scale, subtract } = VecMath(start);\n        t = clamp(t, 0, 1);\n        const direction = subtract(end, start);\n        const amplitude = length(direction) * 2.0;\n        return add(start, scale(direction, sin(t * PI * 2) * amplitude));\n      },\n      delay,\n      duration,\n      gpu: continuousSinusoidalGPU,\n      loop,\n      methodName: \"repeatingSinusoidal\",\n\n      // Since this is sinusoidial and operates off of a continuous time structure\n      validation: {\n        // When time = 1 our value will = start and NOT end\n        ignoreEndValueCheck: true,\n        // When the time is > 1 our value will not clamp to the value at 1.\n        ignoreOverTimeCheck: true\n      }\n    };\n  }\n\n  /** The easing method for the cpu */\n  cpu: IAutoEasingMethod<T>[\"cpu\"];\n  /** Time before a delay  */\n  delay: number = 0;\n  /** The time in ms is takes to complete the animation */\n  duration: number = 500;\n  /** The easing method on the GPU */\n  gpu: IAutoEasingMethod<T>[\"gpu\"];\n  /** The looping style of the animation */\n  loop = AutoEasingLoopStyle.NONE;\n  /** Method name of the ease function on the gpu */\n  methodName: string;\n\n  constructor(\n    cpu: IAutoEasingMethod<T>[\"cpu\"],\n    gpu: IAutoEasingMethod<T>[\"gpu\"],\n    duration?: number,\n    method?: string\n  ) {\n    this.cpu = cpu;\n    this.gpu = gpu;\n    this.duration = duration || 500;\n    this.methodName = method || \"easingMethod\";\n  }\n}\n","import { Bounds } from \"../primitives\";\nimport { IProjection } from \"../types\";\nimport {\n  IDragMetrics,\n  IMouseInteraction,\n  IWheelMetrics,\n  MouseEventManager\n} from \"./mouse-event-manager\";\nimport { View } from \"./view\";\n\n/**\n * Classes can extend this and override the methods to respond to events.\n */\nexport abstract class EventManager {\n  private mouseManager: MouseEventManager;\n\n  abstract handleMouseDown(e: IMouseInteraction, button: number): void;\n  abstract handleMouseUp(e: IMouseInteraction, button: number): void;\n  abstract handleMouseOver(e: IMouseInteraction): void;\n  abstract handleMouseOut(e: IMouseInteraction): void;\n  abstract handleMouseMove(e: IMouseInteraction): void;\n  abstract handleClick(e: IMouseInteraction, button: number): void;\n  abstract handleDrag(e: IMouseInteraction, drag: IDragMetrics): void;\n  abstract handleWheel(e: IMouseInteraction, wheel: IWheelMetrics): void;\n\n  /**\n   * This retrieves the projections for the view specified by the provided viewId.\n   */\n  getProjection(viewId: string): IProjection | null {\n    return this.mouseManager.getView(viewId);\n  }\n\n  /**\n   * This retrieves the actual view for the view specified by the provided viewId.\n   */\n  getView(viewId: string): View | null {\n    return (this.mouseManager && this.mouseManager.getView(viewId)) || null;\n  }\n\n  /**\n   * This retrieves the screen bounds for the view specified by the provided viewId.\n   */\n  getViewScreenBounds(viewId: string): Bounds | null {\n    const view = this.mouseManager.getView(viewId);\n\n    if (view) {\n      return view.screenBounds;\n    }\n\n    return null;\n  }\n\n  /**\n   * This is used internally which provides the parent MouseEventManager via the param mouseManager for this\n   * EventManager.\n   */\n  setMouseManager(mouseManager: MouseEventManager) {\n    this.mouseManager = mouseManager;\n  }\n}\n","import { IPoint } from \"../primitives/point\";\nimport { DataBounds } from \"../util/data-bounds\";\nimport { eventElementPosition, normalizeWheel } from \"../util/mouse\";\nimport { QuadTree } from \"../util/quad-tree\";\nimport { EventManager } from \"./event-manager\";\nimport { Scene } from \"./scene\";\nimport { View } from \"./view\";\n\n// If a mouse up after a mouse down happens before this many milliseconds, a click gesture will happen\nconst VALID_CLICK_DELAY = 1e3;\n\n/**\n * Theorectically we can have a view be applied to multiple scenes. So to properly qualify a view\n * it must be paired with the scene it is rendering for.\n */\nexport type SceneView = {\n  /** This specifies the order the view is rendered in so we can pick the top most item when needed */\n  depth: number;\n  /** This is the scene the view is rendering for */\n  scene: Scene;\n  /** This is the view itself that our mouse will interact with */\n  view: View;\n  /** Gets the bounds of this view for this particular scene */\n  bounds?: DataBounds<SceneView>;\n};\n\n/**\n * This represents an interaction with the Layer Surface. It provides mouse metrics with how the mouse\n * interacts with the views below it.\n */\nexport interface IMouseInteraction {\n  /** When present indicates any relevant button codes used during a click event */\n  button?: number;\n  /** Metrics of the interaction in screen space */\n  screen: {\n    mouse: IPoint;\n  };\n  /** The View the mouse was 'down' on */\n  start?: {\n    mouse: IPoint;\n    view: View;\n  };\n  /** The View Immediately underneath the mouse */\n  target: {\n    mouse: IPoint;\n    view: View;\n  };\n  /** This is populated with ALL of the views underneath the mouse */\n  viewsUnderMouse: {\n    /** The mouse's location in the views coordinate space */\n    mouse: IPoint;\n    /** The view that is interacted with */\n    view: View;\n  }[];\n}\n\nexport interface IDragMetrics {\n  /** Drag metrics in screen space */\n  screen: {\n    /** The start position of the drag where the mouse down first occurred */\n    start: IPoint;\n    /** The previous position of the mouse last frame */\n    previous: IPoint;\n    /** The current position the mouse is located for this frame */\n    current: IPoint;\n    /** The change in position from last frame to this frame */\n    delta: IPoint;\n  };\n}\n\nexport interface IWheelMetrics {\n  wheel: [number, number];\n}\n\n/**\n * This is metrics measured between two touches\n */\nexport interface ITouchRelation {\n  /** The direction to the other touch */\n  direction: IPoint;\n  /** The current distance to the other touch */\n  distance: number;\n  /** The id of the other touch */\n  id: number;\n}\n\n/**\n * This is the information of a touch for a given frame.\n */\nexport interface ITouchFrame {\n  /** This is the location or delta location of the touch for this frame */\n  location: IPoint;\n  /** This is the direction from the start touch frame */\n  direction: IPoint;\n  /** This is the metrics or delta metrics of the touch relative to the other touches for the frame */\n  relations: Map<number, ITouchRelation>;\n}\n\nexport interface ITouchMetrics {\n  /** The starting metrics of the touch */\n  start: ITouchFrame;\n  /** The delta changes from previous event to the current event */\n  delta: ITouchFrame;\n  /** The current metrics of the touch event */\n  current: ITouchFrame;\n}\n\nfunction sortByDepth(a: DataBounds<SceneView>, b: DataBounds<SceneView>) {\n  return b.data.depth - a.data.depth;\n}\n\nfunction isDefined<T>(val: T | null | undefined): val is T {\n  return Boolean(val);\n}\n\n/**\n * This manages mouse events on the provided canvas and provides some higher level\n * interactions with the surface.\n */\nexport class MouseEventManager {\n  /** This is the canvas context we are rendering to */\n  context: HTMLCanvasElement;\n  /** This is list of Event Managers that receive the events and gestures which perform the nexessary actions */\n  controllers: EventManager[];\n  /** This is the quad tree for finding intersections with the mouse */\n  quadTree: QuadTree<DataBounds<SceneView>>;\n  /** This is the current list of views being managed */\n  views: SceneView[];\n\n  eventCleanup: [string, EventListenerOrEventListenerObject][] = [];\n\n  /**\n   * This flag is set when the system is waiting to render the elements to establish bounds.\n   * No Mouse interations will happen while this is set to true.\n   */\n  private _waitingForRender: boolean = true;\n\n  get waitingForRender() {\n    return this._waitingForRender;\n  }\n\n  set waitingForRender(val: boolean) {\n    this._waitingForRender = val;\n\n    // When we're no longer waiting for render to occur we update all of our views in the quad tree\n    if (!val) {\n      this.quadTree = new QuadTree(0, 0, 0, 0);\n      this.quadTree.addAll(this.views.map(v => v.bounds).filter(isDefined));\n    }\n  }\n\n  constructor(\n    canvas: HTMLCanvasElement,\n    views: SceneView[],\n    controllers: EventManager[],\n    handlesWheelEvents?: boolean\n  ) {\n    this.context = canvas;\n    this.setViews(views);\n    this.setControllers(controllers);\n    this.addContextListeners(handlesWheelEvents);\n  }\n\n  /**\n   * This sets up the DOM events to listen to the events that are broadcasted by the canvas.\n   * These events are set up in such a way as to continue some events when the user\n   * drags the mouse off of the browser or off the canvas without releasing.\n   */\n  addContextListeners(handlesWheelEvents?: boolean) {\n    const element = this.context;\n    let startView: SceneView | undefined;\n    let startPosition: IPoint = { x: 0, y: 0 };\n\n    if (handlesWheelEvents) {\n      const wheelHandler = (event: MouseWheelEvent) => {\n        const mouse = eventElementPosition(event, element);\n        const interaction = this.makeInteraction(\n          mouse,\n          startPosition,\n          startView\n        );\n        const wheel = this.makeWheel(event);\n\n        this.controllers.forEach(controller => {\n          controller.handleWheel(interaction, wheel);\n        });\n\n        event.stopPropagation();\n        event.preventDefault();\n      };\n\n      if (\"onwheel\" in element) {\n        element.onwheel = wheelHandler;\n      }\n\n      if (\"addEventListener\" in element) {\n        element.addEventListener(\"DOMMouseScroll\", wheelHandler);\n        this.eventCleanup.push([\"DOMMouseScroll\", wheelHandler]);\n      }\n    }\n\n    element.onmouseleave = event => {\n      // No interactions while waiting for the render to update\n      if (this.waitingForRender) return;\n\n      const mouse = eventElementPosition(event, element);\n      const interaction = this.makeInteraction(mouse, startPosition, startView);\n\n      this.controllers.forEach(controller => {\n        controller.handleMouseOut(interaction);\n      });\n    };\n\n    element.onmousemove = event => {\n      // No interactions while waiting for the render to update\n      if (this.waitingForRender) return;\n\n      const mouse = eventElementPosition(event, element);\n      const interaction = this.makeInteraction(mouse, startPosition, startView);\n\n      this.controllers.forEach(controller => {\n        controller.handleMouseMove(interaction);\n      });\n    };\n\n    element.onmousedown = (event: MouseEvent) => {\n      // No interactions while waiting for the render to update\n      if (this.waitingForRender) return;\n\n      startPosition = eventElementPosition(event, element);\n      const downViews = this.getViewsUnderMouse(startPosition);\n      // While this is true, when mouse up happens, the click gesture will execute\n      let canClick = true;\n      const clickStartTime = Date.now();\n\n      // If no views under this view, then we just quick exit with no interactions\n      if (downViews.length <= 0) {\n        return;\n      }\n\n      startView = downViews[0].data;\n      if (!startView) return;\n\n      const interaction = this.makeInteraction(\n        startPosition,\n        startPosition,\n        startView\n      );\n      let currentPosition = startPosition;\n\n      this.controllers.forEach(controller => {\n        controller.handleMouseDown(interaction, event.button);\n      });\n\n      event.stopPropagation();\n\n      document.onmousemove = (event: MouseEvent) => {\n        const mouse = eventElementPosition(event, element);\n        const interaction = this.makeInteraction(\n          mouse,\n          startPosition,\n          startView\n        );\n        const delta = {\n          x: mouse.x - currentPosition.x,\n          y: mouse.y - currentPosition.y\n        };\n\n        const drag = this.makeDrag(\n          mouse,\n          startPosition || { x: 0, y: 0 },\n          currentPosition,\n          delta\n        );\n        currentPosition = mouse;\n\n        this.controllers.forEach(controller => {\n          controller.handleDrag(interaction, drag);\n        });\n\n        // If we move after a mouse down, it's no longer a click\n        canClick = false;\n      };\n\n      document.onmouseup = (_event: MouseEvent) => {\n        document.onmousemove = null;\n        document.onmouseup = null;\n        document.onmouseover = null;\n      };\n\n      document.onmouseover = (event: MouseEvent) => {\n        const mouse = eventElementPosition(event, element);\n        const interaction = this.makeInteraction(\n          mouse,\n          startPosition,\n          startView\n        );\n\n        this.controllers.forEach(controller => {\n          controller.handleMouseOver(interaction);\n        });\n\n        event.stopPropagation();\n      };\n\n      element.onmouseup = (event: MouseEvent) => {\n        const mouse = eventElementPosition(event, element);\n        const interaction = this.makeInteraction(\n          mouse,\n          startPosition,\n          startView\n        );\n\n        this.controllers.forEach(controller => {\n          controller.handleMouseUp(interaction, event.button);\n        });\n\n        // If we release the mouse before the valid click delay\n        if (canClick && Date.now() - clickStartTime < VALID_CLICK_DELAY) {\n          this.controllers.forEach(controller => {\n            controller.handleClick(interaction, event.button);\n          });\n        }\n      };\n\n      // Text will not be selected when it is being dragged\n      element.onselectstart = function() {\n        return false;\n      };\n    };\n\n    // Enable touch support\n    this.addTouchContextListeners();\n  }\n\n  addTouchContextListeners() {\n    const element = this.context;\n\n    element.ontouchstart = _event => {\n      // TODO: This is the start work for the touch events. And this retains sentimental value.\n      // For (let i = 0, end = event.changedTouches.length; i < end; ++i) {\n      // TODO\n      // Const touch = event.changedTouches.item(i);\n      // CurrentTouches.set(touch.identifier, to);\n      // }\n    };\n\n    element.ontouchend = _event => {\n      // TODO\n    };\n\n    element.ontouchmove = _event => {\n      // TODO\n    };\n\n    element.ontouchcancel = _event => {\n      // TODO\n    };\n  }\n\n  /**\n   * Retrieves the view for the provided id\n   */\n  getView(viewId: string): View | null {\n    for (const view of this.views) {\n      if (view.view.id === viewId) {\n        return view.view;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Retrieves the views underneath the mouse with the top most view as\n   * the first view in the list.\n   */\n  getViewsUnderMouse = (mouse: IPoint) => {\n    // Find the views the mouse has interacted with\n    const hitViews = this.quadTree.query(mouse);\n    // Sort them by depth\n    hitViews.sort(sortByDepth);\n\n    return hitViews;\n  };\n\n  /**\n   * This generates the metrics for a drag gesture.\n   */\n  makeDrag(\n    mouse: IPoint,\n    start: IPoint,\n    previous: IPoint,\n    delta: IPoint\n  ): IDragMetrics {\n    return {\n      screen: {\n        current: mouse,\n        delta,\n        previous,\n        start\n      }\n    };\n  }\n\n  /**\n   * This makes the metrics for interactions with the views.\n   */\n  makeInteraction(\n    mouse: IPoint,\n    start?: IPoint,\n    startView?: SceneView\n  ): IMouseInteraction {\n    // Find the views the mouse has interacted with\n    const hitViews = this.getViewsUnderMouse(mouse);\n\n    return {\n      screen: {\n        mouse\n      },\n      start: start &&\n        startView && {\n          mouse: startView.view.screenToView(mouse),\n          view: startView.view\n        },\n      target: {\n        mouse: hitViews[0] && hitViews[0].data.view.screenToView(mouse),\n        view: hitViews[0] && hitViews[0].data.view\n      },\n      viewsUnderMouse: hitViews.map(v => ({\n        mouse: v.data.view.screenToView(mouse),\n        view: v.data.view\n      }))\n    };\n  }\n\n  makeWheel(event: MouseWheelEvent): IWheelMetrics {\n    const wheel = normalizeWheel(event);\n\n    return {\n      wheel: [wheel.x, wheel.y]\n    };\n  }\n\n  /**\n   * When the renderer is resized, we must reform our quad tree\n   */\n  resize = () => {\n    this._waitingForRender = true;\n  };\n\n  /**\n   * Sets the controllers to receive events from this manager.\n   */\n  setControllers(controllers: EventManager[]) {\n    this.controllers = controllers;\n\n    for (const controller of this.controllers) {\n      controller.setMouseManager(this);\n    }\n  }\n\n  /**\n   * Sets the views that gets queried for interactions.\n   */\n  setViews(views: SceneView[]) {\n    this.views = views;\n  }\n\n  destroy() {\n    delete this.quadTree;\n    this.context.onmousedown = null;\n    this.context.onmousemove = null;\n    this.context.onmouseleave = null;\n    this.context.onmousewheel = null;\n\n    this.eventCleanup.forEach(event => {\n      this.context.removeEventListener(event[0], event[1]);\n    });\n  }\n}\n","/**\n * This file is dedicted to the all important step of processing desired inputs from the layer\n * and coming up with automated generated uniforms and attributes that the shader's will need\n * in order to operate with the conveniences the library offers. This includes things such as\n * injecting camera projection uniforms, resource uniforms, animation adjustments etc etc.\n */\nimport * as Three from \"three\";\nimport { Instance } from \"../../instance-provider/instance\";\nimport {\n  IAtlasInstanceAttribute,\n  IEasingInstanceAttribute,\n  IEasingProps,\n  IInstanceAttribute,\n  InstanceAttributeSize,\n  InstanceBlockIndex,\n  IShaderInitialization,\n  IUniform,\n  IUniformInternal,\n  IValueInstanceAttribute,\n  IVertexAttribute,\n  IVertexAttributeInternal,\n  PickType,\n  ShaderInjectionTarget,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport { uid, Vec } from \"../../util\";\nimport { AutoEasingLoopStyle } from \"../../util/auto-easing-method\";\nimport { ILayerProps, Layer } from \"../layer\";\nimport { getLayerBufferType, LayerBufferType } from \"./layer-buffer-type\";\nimport { packAttributes } from \"./pack-attributes\";\n\nconst { abs } = Math;\n\n/**\n * This is a lookup for a test vector for the provided size\n */\nconst testStartVector: { [key: number]: Vec } = {\n  [InstanceAttributeSize.ONE]: [1],\n  [InstanceAttributeSize.TWO]: [1, 2],\n  [InstanceAttributeSize.THREE]: [1, 2, 3],\n  [InstanceAttributeSize.FOUR]: [1, 2, 3, 4]\n};\n\n/**\n * This is a lookup for a test vector for the provided size\n */\nconst testEndVector: { [key: number]: Vec } = {\n  [InstanceAttributeSize.ONE]: [4],\n  [InstanceAttributeSize.TWO]: [4, 3],\n  [InstanceAttributeSize.THREE]: [4, 3, 2],\n  [InstanceAttributeSize.FOUR]: [4, 3, 2, 1]\n};\n\nconst emptyTexture = new Three.Texture();\n\nfunction isAtlasAttribute<T extends Instance>(\n  attr: any\n): attr is IAtlasInstanceAttribute<T> {\n  return Boolean(attr) && attr.atlas;\n}\n\nfunction isEasingAttribute<T extends Instance>(\n  attr: any\n): attr is IEasingInstanceAttribute<T> {\n  return Boolean(attr) && attr.easing && attr.size !== undefined;\n}\n\nfunction isInstanceAttribute<T extends Instance>(\n  attr: any\n): attr is IInstanceAttribute<T> {\n  return Boolean(attr);\n}\n\nfunction isVertexAttribute(attr: any): attr is IVertexAttribute {\n  return Boolean(attr);\n}\n\nfunction isUniform(attr: any): attr is IUniform {\n  return Boolean(attr);\n}\n\nfunction toVertexAttributeInternal(\n  attribute: IVertexAttribute\n): IVertexAttributeInternal {\n  return Object.assign({}, attribute, { materialAttribute: null });\n}\n\nfunction toUniformInternal(uniform: IUniform): IUniformInternal {\n  return Object.assign({}, uniform, { materialUniforms: [] });\n}\n\n/**\n * This sorts the attributes such that the attributes that MUST be updated first are put to the top.\n * This is necessary for complex attributes like atlas and easing attributes who have other attributes\n * that have dependent behaviors based on their source attribute.\n */\nfunction sortNeedsUpdateFirstToTop<T extends Instance>(\n  a: IInstanceAttribute<T>,\n  b: IInstanceAttribute<T>\n) {\n  if (a.atlas && !b.atlas) return -1;\n  if (a.easing && !b.easing) return -1;\n  return 1;\n}\n\n/**\n * This generates any uniforms needed for when a layer is requesting\n */\nfunction generateAtlasResourceUniforms<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(layer: Layer<T, U>, instanceAttributes: IInstanceAttribute<T>[]) {\n  // Retrieve all of the instance attributes that are atlas references\n  const atlasInstanceAttributes: IAtlasInstanceAttribute<T>[] = [];\n  // Key: The atlas uniform name requested\n  const requestedAtlasInjections = new Map<string, [boolean, boolean]>();\n\n  // Get the atlas requests that have unique names. We only need one uniform\n  // For a single unique provided name. We also must merge the requests for\n  // Vertex and fragment injections\n  instanceAttributes.forEach(\n    (attribute: IValueInstanceAttribute<T> | IAtlasInstanceAttribute<T>) => {\n      if (isAtlasAttribute(attribute)) {\n        // Auto set the size of the attribute. Attribute's that are a resource automatically\n        // Consume a size of four\n        attribute.size = InstanceAttributeSize.FOUR;\n        attribute.blockIndex = InstanceBlockIndex.ONE;\n        // Get the atlas resource uniform (sampler2D) injection targets. We default to only the\n        // Fragment shader as it's the most commonly used location for sampler2Ds\n        const injection: number =\n          attribute.atlas.shaderInjection || ShaderInjectionTarget.FRAGMENT;\n        // See if we already have an injection for the given injected uniform name for an atlas resource.\n        const injections = requestedAtlasInjections.get(attribute.atlas.name);\n\n        if (injections) {\n          requestedAtlasInjections.set(attribute.atlas.name, [\n            injections[0] ||\n              injection === ShaderInjectionTarget.VERTEX ||\n              injection === ShaderInjectionTarget.ALL,\n            injections[1] ||\n              injection === ShaderInjectionTarget.FRAGMENT ||\n              injection === ShaderInjectionTarget.ALL\n          ]);\n        } else {\n          atlasInstanceAttributes.push(attribute);\n          requestedAtlasInjections.set(attribute.atlas.name, [\n            injection === ShaderInjectionTarget.VERTEX ||\n              injection === ShaderInjectionTarget.ALL,\n            injection === ShaderInjectionTarget.FRAGMENT ||\n              injection === ShaderInjectionTarget.ALL\n          ]);\n        }\n      }\n    }\n  );\n\n  // Make uniforms for all of the unique atlas requests.\n  return atlasInstanceAttributes.map(instanceAttribute => {\n    let injection: ShaderInjectionTarget = ShaderInjectionTarget.FRAGMENT;\n\n    if (instanceAttribute.atlas) {\n      const injections = requestedAtlasInjections.get(\n        instanceAttribute.atlas.name\n      );\n\n      if (injections) {\n        injection =\n          (injections[0] && injections[1] && ShaderInjectionTarget.ALL) ||\n          (injections[0] && !injections[1] && ShaderInjectionTarget.VERTEX) ||\n          (!injections[0] && injections[1] && ShaderInjectionTarget.FRAGMENT) ||\n          injection;\n      }\n    }\n\n    return {\n      name: instanceAttribute.atlas.name,\n      shaderInjection: injection,\n      size: UniformSize.ATLAS,\n      update: () =>\n        layer.resource.getAtlasTexture(instanceAttribute.atlas.key) ||\n        emptyTexture\n    };\n  });\n}\n\n/**\n * This modifies the instance attributes in a way that produces enough attributes to handle the easing equations\n * being performed on the gpu.\n */\nfunction generateEasingAttributes<T extends Instance, U extends ILayerProps<T>>(\n  layer: Layer<T, U>,\n  instanceAttributes: IInstanceAttribute<T>[]\n) {\n  const easingAttributes: IEasingInstanceAttribute<T>[] = [];\n\n  // We gather all of the easing attributes first so we can modify the attribute array\n  // On next pass\n  for (const attribute of instanceAttributes) {\n    if (isEasingAttribute(attribute)) {\n      easingAttributes.push(attribute);\n    }\n  }\n\n  // Now loop through each easing attribute and generate attributes needed for the easing method\n  for (const attribute of easingAttributes) {\n    const { cpu: easing, loop } = attribute.easing;\n    const { name, size, update } = attribute;\n    const easingUID = uid();\n\n    // We keep this in a scope above the update as we utilize the fact that the attributes will update\n    // In order for a single instance to our advantage.\n    let easingValues: IEasingProps;\n\n    // Hijack the update from the attribute to a new update method which will\n    // Be able to interact with the values for the easing methodology\n    attribute.update = o => {\n      // We retrieve properties that we want to be dynamic from the easing equation\n      const { delay, duration } = attribute.easing;\n      // First get the value that is to be our new destination\n      const end = update(o);\n      const currentTime = layer.surface.frameMetrics.currentTime;\n\n      // Get the easing values specific to an instance\n      easingValues = o.easing.get(easingUID) || {\n        duration,\n        end,\n        start: end,\n        startTime: currentTime\n      };\n\n      // Previous position time value\n      let timeValue = 1;\n\n      switch (loop) {\n        // Continuous means we start at 0 and let the time go to infinity\n        case AutoEasingLoopStyle.CONTINUOUS:\n          timeValue = (currentTime - easingValues.startTime) / duration;\n          break;\n\n        // Repeat means going from 0 to 1 then 0 to 1 etc etc\n        case AutoEasingLoopStyle.REPEAT:\n          timeValue = ((currentTime - easingValues.startTime) / duration) % 1;\n          break;\n\n        // Reflect means going from 0 to 1 then 1 to 0 then 0 to 1 etc etc\n        case AutoEasingLoopStyle.REFLECT:\n          const timePassed = (currentTime - easingValues.startTime) / duration;\n          // This is a triangle wave for an input\n          timeValue = abs((timePassed / 2.0) % 1 - 0.5) * 2.0;\n          break;\n\n        // No loop means just linear time\n        case AutoEasingLoopStyle.NONE:\n        default:\n          timeValue = (currentTime - easingValues.startTime) / duration;\n          break;\n      }\n\n      // Now get the value of where our instance currently is located this frame\n      easingValues.start = easing(\n        easingValues.start,\n        easingValues.end,\n        timeValue\n      );\n      // Set the current time as the start time of our animation\n      easingValues.startTime = currentTime + delay;\n      // Set the provided value as our destination\n      easingValues.end = end;\n      // Make sure the instance contains the current easing values\n      o.easing.set(easingUID, easingValues);\n\n      return end;\n    };\n\n    // The attribute is going to generate some child attributes\n    attribute.childAttributes = [];\n\n    // Find a slot available for our new start value\n    const startAttr: IInstanceAttribute<T> = {\n      name: `_${name}_start`,\n      parentAttribute: attribute,\n      size,\n      update: _o => easingValues.start\n    };\n\n    attribute.childAttributes.push(startAttr);\n    instanceAttributes.push(startAttr);\n\n    // Find a slot available for our new start time\n    const startTimeAttr: IInstanceAttribute<T> = {\n      name: `_${name}_start_time`,\n      parentAttribute: attribute,\n      size: InstanceAttributeSize.ONE,\n      update: _o => [easingValues.startTime]\n    };\n\n    attribute.childAttributes.push(startTimeAttr);\n    instanceAttributes.push(startTimeAttr);\n\n    // Find a slot available for our duration\n    const durationAttr: IInstanceAttribute<T> = {\n      name: `_${name}_duration`,\n      parentAttribute: attribute,\n      size: InstanceAttributeSize.ONE,\n      update: _o => [easingValues.duration]\n    };\n\n    attribute.childAttributes.push(durationAttr);\n    instanceAttributes.push(durationAttr);\n  }\n}\n\nfunction generatePickingUniforms<T extends Instance, U extends ILayerProps<T>>(\n  layer: Layer<T, U>\n): IUniform[] {\n  if (layer.picking.type === PickType.SINGLE) {\n    return [\n      {\n        name: \"pickingActive\",\n        shaderInjection: ShaderInjectionTarget.ALL,\n        size: UniformSize.ONE,\n        update: () => [\n          layer.picking.currentPickMode === PickType.SINGLE ? 1.0 : 0.0\n        ]\n      }\n    ];\n  }\n\n  return [];\n}\n\nfunction generatePickingAttributes<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(layer: Layer<T, U>): IInstanceAttribute<T>[] {\n  if (layer.picking.type === PickType.SINGLE) {\n    return [\n      {\n        name: \"_pickingColor\",\n        size: InstanceAttributeSize.FOUR,\n        update: o => {\n          // We start from white and move down so the colors are more visible\n          // For debugging\n          const color = 0xffffff - o.uid;\n\n          // Do bit maths do get float components out of the int color\n          return [\n            (color >> 16) / 255.0,\n            ((color & 0x00ff00) >> 8) / 255.0,\n            (color & 0x0000ff) / 255.0,\n            1\n          ];\n        }\n      }\n    ];\n  }\n\n  return [];\n}\n\nfunction generateBaseUniforms<T extends Instance, U extends ILayerProps<T>>(\n  layer: Layer<T, U>\n): IUniform[] {\n  return [\n    // This injects the projection matrix from the view camera\n    {\n      name: \"projection\",\n      size: UniformSize.MATRIX4,\n      update: () => layer.view.viewCamera.baseCamera.projectionMatrix.elements\n    },\n    // This injects the model view matrix from the view camera\n    {\n      name: \"modelView\",\n      size: UniformSize.MATRIX4,\n      update: () => layer.view.viewCamera.baseCamera.matrix.elements\n    },\n    // This injects the camera offset uniforms that need to be present for projecting in a more\n    // Chart centric style\n    {\n      name: \"cameraOffset\",\n      size: UniformSize.THREE,\n      update: () => layer.view.camera.offset\n    },\n    // This injects the camera scaling uniforms that need to be present for projecting in a more\n    // Chart centric style\n    {\n      name: \"cameraScale\",\n      size: UniformSize.THREE,\n      update: () => layer.view.camera.scale\n    },\n    // This injects the camera scaling uniforms that need to be present for projecting in a more\n    // Chart centric style\n    {\n      name: \"viewSize\",\n      size: UniformSize.TWO,\n      update: () => [layer.view.viewBounds.width, layer.view.viewBounds.height]\n    },\n    // This injects the current layer's pixel ratio so pixel ratio dependent items can react to it\n    // Things like gl_PointSize will need this metric if not working in clip space\n    {\n      name: \"pixelRatio\",\n      size: UniformSize.ONE,\n      update: () => [layer.view.pixelRatio]\n    },\n    // This will be the current frame's current time which is updated in the layer's surface draw call\n    {\n      name: \"currentTime\",\n      size: UniformSize.ONE,\n      update: () => [layer.surface.frameMetrics.currentTime]\n    }\n  ];\n}\n\n/**\n * This creates the base instance attributes that are ALWAYS present\n */\nfunction generateBaseInstanceAttributes<T extends Instance>(\n  layer: Layer<T, any>\n): IInstanceAttribute<T>[] {\n  // This is injected so the system can control when an instance should not be rendered.\n  // This allows for holes to be in the buffer without having to correct them immediately\n  const activeAttribute: IInstanceAttribute<T> = {\n    name: \"_active\",\n    size: InstanceAttributeSize.ONE,\n    update: o => [o.active ? 1 : 0]\n  };\n\n  // Set the active attribute to the layer for quick reference\n  layer.activeAttribute = activeAttribute;\n\n  return [activeAttribute];\n}\n\n/**\n * This creates the base vertex attributes that are ALWAYS present\n */\nfunction generateBaseVertexAttributes<T extends Instance>(\n  layer: Layer<T, any>\n): IVertexAttribute[] {\n  // Only the uniform buffering strategy requires instance information in it's vertex attributes\n  if (layer.bufferType === LayerBufferType.UNIFORM) {\n    return [\n      // We add an inherent instance attribute to our vertices so they can determine the instancing\n      // Data to retrieve.\n      {\n        name: \"instance\",\n        size: VertexAttributeSize.ONE,\n        // We no op this as our geomtry generating routine will establish the values needed here\n        update: () => [0]\n      }\n    ];\n  }\n\n  return [];\n}\n\nfunction compareVec(a: Vec, b: Vec) {\n  if (a.length !== b.length) return false;\n\n  for (let i = 0, end = a.length; i < end; ++i) {\n    if (Math.round(a[i] * 100) / 100 !== Math.round(b[i] * 100) / 100) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction validateInstanceAttributes<T extends Instance>(\n  layer: Layer<T, any>,\n  instanceAttributes: IInstanceAttribute<T>[],\n  vertexAttributes: IVertexAttribute[]\n) {\n  instanceAttributes.forEach(attribute => {\n    if (attribute.name === undefined) {\n      console.warn(\n        \"All instance attributes MUST have a name on Layer:\",\n        layer.id\n      );\n    }\n\n    if (\n      instanceAttributes.find(\n        attr => attr !== attribute && attr.name === attribute.name\n      )\n    ) {\n      console.warn(\n        \"An instance attribute can not have the same name used more than once:\",\n        attribute.name\n      );\n    }\n\n    if (vertexAttributes.find(attr => attr.name === attribute.name)) {\n      console.warn(\n        \"An instance attribute and a vertex attribute in a layer can not share the same name:\",\n        attribute.name\n      );\n    }\n\n    if (attribute.easing && attribute.atlas) {\n      console.warn(\n        \"An instance attribute can not have both easing and atlas properties. Undefined behavior will occur.\"\n      );\n      console.warn(attribute);\n    }\n\n    if (!attribute.atlas) {\n      if (attribute.size === undefined) {\n        console.warn(\"An instance attribute requires the size to be defined.\");\n        console.warn(attribute);\n      }\n    }\n\n    if (attribute.easing) {\n      if (attribute.size !== undefined) {\n        const testStart = testStartVector[attribute.size];\n        const testEnd = testEndVector[attribute.size];\n        const validationRules = attribute.easing.validation || {};\n\n        let test = attribute.easing.cpu(testStart, testEnd, 0);\n        if (!compareVec(test, testStart)) {\n          console.warn(\n            \"Auto Easing Validation Failed: using a time of 0 does not produce the start value\"\n          );\n          console.warn(\"Start:\", testStart, \"End:\", testEnd, \"Result:\", test);\n          console.warn(attribute);\n        }\n\n        test = attribute.easing.cpu(testStart, testEnd, 1);\n        if (\n          !validationRules.ignoreEndValueCheck &&\n          !compareVec(test, testEnd)\n        ) {\n          console.warn(\n            \"Auto Easing Validation Failed: using a time of 1 does not produce the end value\"\n          );\n          console.warn(\"Start:\", testStart, \"End:\", testEnd, \"Result:\", test);\n          console.warn(attribute);\n        }\n\n        test = attribute.easing.cpu(testStart, testEnd, -1);\n        if (!compareVec(test, testStart)) {\n          console.warn(\n            \"Auto Easing Validation Failed: using a time of -1 does not produce the start value\"\n          );\n          console.warn(\"Start:\", testStart, \"End:\", testEnd, \"Result:\", test);\n          console.warn(attribute);\n        }\n\n        test = attribute.easing.cpu(testStart, testEnd, 2);\n        if (\n          !validationRules.ignoreOverTimeCheck &&\n          !compareVec(test, testEnd)\n        ) {\n          console.warn(\n            \"Auto Easing Validation Failed: using a time of 2 does not produce the end value\"\n          );\n          console.warn(\"Start:\", testStart, \"End:\", testEnd, \"Result:\", test);\n          console.warn(attribute);\n        }\n      } else {\n        console.warn(\n          \"An Instance Attribute with easing MUST have a size declared\"\n        );\n      }\n    }\n  });\n}\n\n/**\n * This is the primary method that analyzes all shader IO and determines which elements needs to be automatically injected\n * into the shader.\n */\nexport function injectShaderIO<T extends Instance, U extends ILayerProps<T>>(\n  gl: WebGLRenderingContext,\n  layer: Layer<T, U>,\n  shaderIO: IShaderInitialization<T>\n) {\n  // All of the instance attributes with nulls filtered out\n  const instanceAttributes = (shaderIO.instanceAttributes || []).filter(\n    isInstanceAttribute\n  );\n  // All of the vertex attributes with nulls filtered out\n  const vertexAttributes = (shaderIO.vertexAttributes || []).filter(\n    isVertexAttribute\n  );\n  // All of the uniforms with nulls filtered out\n  const uniforms = (shaderIO.uniforms || []).filter(isUniform);\n  // Do a validation pass of the attributes injected so we can provide feedback as to why things behave odd\n  validateInstanceAttributes(layer, instanceAttributes, vertexAttributes);\n  // Generates all of the attributes needed to make attributes automagically be eased when changed\n  generateEasingAttributes(layer, instanceAttributes);\n  // Get the uniforms needed to facilitate atlas resource requests if any exists\n  let addedUniforms: IUniform[] = uniforms.concat(\n    generateAtlasResourceUniforms(layer, instanceAttributes)\n  );\n  // These are the uniforms that should be present in the shader for basic operation\n  addedUniforms = addedUniforms.concat(generateBaseUniforms(layer));\n  // Add in uniforms for picking\n  addedUniforms = addedUniforms.concat(generatePickingUniforms(layer));\n  // Create the base instance attributes that must be present\n  let addedInstanceAttributes = instanceAttributes.concat(\n    generateBaseInstanceAttributes(layer)\n  );\n  // Add in attributes for picking\n  addedInstanceAttributes = addedInstanceAttributes.concat(\n    generatePickingAttributes(layer)\n  );\n\n  const allUniforms = addedUniforms.map(toUniformInternal);\n\n  const allInstanceAttributes = addedInstanceAttributes.sort(\n    sortNeedsUpdateFirstToTop\n  );\n\n  // Let's pack in our attributes automagically so we can determine block and block indices.\n  packAttributes(allInstanceAttributes);\n  // Before we make the vertex attributes, we must determine the buffering strategy our layer will utilize\n  getLayerBufferType(gl, layer, vertexAttributes, allInstanceAttributes);\n\n  // Create the base vertex attributes that must be present\n  const addedVertexAttributes: IVertexAttribute[] = generateBaseVertexAttributes(\n    layer\n  );\n\n  // Aggregate all of the injected shaderIO with the layer's shaderIO\n  const allVertexAttributes: IVertexAttributeInternal[] = addedVertexAttributes\n    .concat(vertexAttributes || [])\n    .map(toVertexAttributeInternal);\n\n  return {\n    instanceAttributes: allInstanceAttributes,\n    uniforms: allUniforms,\n    vertexAttributes: allVertexAttributes\n  };\n}\n","import * as Three from \"three\";\nimport { IInstancingUniform, IUniform, UniformSize } from \"../../types\";\nimport { Instance } from \"../../util\";\nimport { ILayerProps, Layer } from \"../layer\";\n\nconst UNIFORM_SIZE_TO_MATERIAL_TYPE: { [key: number]: string } = {\n  [UniformSize.ONE]: \"f\",\n  [UniformSize.TWO]: \"v2\",\n  [UniformSize.THREE]: \"v3\",\n  [UniformSize.FOUR]: \"v4\",\n  [UniformSize.MATRIX3]: \"Matrix3fv\",\n  [UniformSize.MATRIX4]: \"Matrix4fv\"\n};\n\nconst DEFAULT_UNIFORM_VALUE: { [key: number]: number[] } = {\n  [UniformSize.ONE]: [0],\n  [UniformSize.TWO]: [0, 0],\n  [UniformSize.THREE]: [0, 0, 0],\n  [UniformSize.FOUR]: [0, 0, 0, 0],\n  [UniformSize.MATRIX3]: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [UniformSize.MATRIX4]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n};\n\nfunction toMaterialUniform(uniform: IUniform) {\n  return {\n    type: UNIFORM_SIZE_TO_MATERIAL_TYPE[uniform.size],\n    value: DEFAULT_UNIFORM_VALUE[uniform.size]\n  };\n}\n\nexport function generateLayerMaterial<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(\n  layer: Layer<T, U>,\n  vs: string,\n  fs: string,\n  layerUniforms: IUniform[],\n  instancingUniforms: IInstancingUniform[]\n): Three.RawShaderMaterial {\n  // We now need to establish the material for the layer\n  const materialParams: Three.ShaderMaterialParameters = layer.getMaterialOptions();\n  materialParams.vertexShader = vs;\n  materialParams.fragmentShader = fs;\n\n  // We must convert all of the uniforms to actual Three material initialization uniforms\n  materialParams.uniforms = {};\n\n  // Convert our non-instancing uniforms to our material uniforms\n  for (let i = 0, end = layerUniforms.length; i < end; ++i) {\n    const uniform = layerUniforms[i];\n    const materialUniform = toMaterialUniform(uniform);\n    materialParams.uniforms[uniform.name] = materialUniform;\n  }\n\n  // Add in the generated instancing uniforms\n  for (let i = 0, end = instancingUniforms.length; i < end; ++i) {\n    const generatedUniform = instancingUniforms[i];\n    materialParams.uniforms[generatedUniform.name] = {\n      type: generatedUniform.type,\n      value: generatedUniform.value\n    };\n  }\n\n  return new Three.RawShaderMaterial(materialParams);\n}\n","import * as Three from \"three\";\nimport { Instance } from \"../../instance-provider/instance\";\nimport {\n  IVertexAttribute,\n  IVertexAttributeInternal,\n  ShaderIOValue\n} from \"../../types\";\nimport { Layer } from \"../layer\";\nimport { LayerBufferType } from \"./layer-buffer-type\";\n\nfunction isNumberCluster(\n  val: ShaderIOValue\n): val is\n  | [number]\n  | [number, number]\n  | [number, number, number]\n  | [number, number, number, number] {\n  return !Array.isArray(val[0]);\n}\n\nexport function generateLayerGeometry<T extends Instance>(\n  layer: Layer<T, any>,\n  maxInstancesPerBuffer: number,\n  vertexAttributes: IVertexAttributeInternal[],\n  vertexCount: number\n): Three.BufferGeometry {\n  // Make the new buffers to be updated\n  const vertexBuffers = [];\n\n  if (layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE) {\n    maxInstancesPerBuffer = 1;\n  }\n\n  for (let i = 0, end = vertexAttributes.length; i < end; ++i) {\n    const attribute = vertexAttributes[i];\n    vertexBuffers.push(\n      new Float32Array(attribute.size * vertexCount * maxInstancesPerBuffer)\n    );\n  }\n\n  // Let's now fill in the baseline geometry with the instances we will be generating\n  // First we ask the layer for a single instance's buffer setup\n  const endk = vertexAttributes.length;\n  let buffer: Float32Array;\n  let attribute: IVertexAttribute;\n  let value: ShaderIOValue;\n  let formatError: boolean = false;\n\n  for (let i = 0, end = vertexCount; i < end; ++i) {\n    for (let k = 0; k < endk; ++k) {\n      attribute = vertexAttributes[k];\n      buffer = vertexBuffers[k];\n      value = attribute.update(i);\n\n      if (isNumberCluster(value)) {\n        for (\n          let j = i * attribute.size, endj = j + attribute.size, index = 0;\n          j < endj;\n          ++j, ++index\n        ) {\n          buffer[j] = value[index];\n        }\n      } else {\n        formatError = true;\n      }\n    }\n  }\n\n  if (formatError) {\n    console.warn(\n      \"A vertex buffer updating method should not use arrays of arrays of numbers.\"\n    );\n  }\n\n  // After getting the geometry for a single instance, we can now copy paste\n  // For subsequent instances using very fast FLoat32 methods\n  // NOTE: This is ONLY for certain buffering strategies. This is essentially a noop when the\n  // maxInstances is set to one.\n  for (let i = 0, end = vertexAttributes.length; i < end; ++i) {\n    const attribute = vertexAttributes[i];\n    const instanceSize = attribute.size * vertexCount;\n\n    // Copy the first buffer set into the rest of the buffer\n    for (let k = 1, endk = maxInstancesPerBuffer; k < endk; ++k) {\n      vertexBuffers[i].copyWithin(instanceSize * k, 0, instanceSize);\n    }\n  }\n\n  // Lastly, we make the instance attribute reflect correctly so each instance\n  // Can have varied information. This is only appropriate for the uniform buffer strategy\n  if (layer.bufferType === LayerBufferType.UNIFORM) {\n    const instancingBuffer = vertexBuffers[0];\n\n    for (let i = 0, end = maxInstancesPerBuffer; i < end; ++i) {\n      const instanceStartIndex = i * vertexCount;\n\n      for (let k = 0; k < vertexCount; ++k) {\n        instancingBuffer[k + instanceStartIndex] = i;\n      }\n    }\n  }\n\n  // Now we can generate the attributes and apply them to a geometry object\n  const geometry = new Three.BufferGeometry();\n\n  for (let i = 0, end = vertexAttributes.length; i < end; ++i) {\n    const attribute = vertexAttributes[i];\n    const materialAttribute = new Three.BufferAttribute(\n      vertexBuffers[i],\n      attribute.size\n    );\n    attribute.materialAttribute = materialAttribute;\n    geometry.addAttribute(attribute.name, materialAttribute);\n  }\n\n  return geometry;\n}\n","import * as Three from \"three\";\nimport { AbsolutePosition } from \"../../primitives/absolute-position\";\nimport { ChartCamera } from \"../../util/chart-camera\";\nimport { ViewCamera } from \"../../util/view-camera\";\nimport { Scene } from \"../scene\";\nimport { View } from \"../view\";\n\nexport interface IDefaultSceneElements {\n  /** Default chartting camera */\n  camera: ChartCamera;\n  /** Default scene for elements to be added into */\n  scene: Scene;\n  /** Default view scenes are rendered with when no other views are specified by the layer or the surface */\n  view: View;\n  /**\n   * The default view projection. Defaults to being an orthographic rendering with the origin at the\n   * top left of the canvas and the y-axis as +y going downward.\n   */\n  viewCamera: ViewCamera;\n  /** The default viewport that encompasses the entire canvas */\n  viewport: AbsolutePosition;\n}\n\n/**\n * This generates all of the cameras/views/scenes necessary for default viewing of elements.\n *\n * These defaults are required to ensure the following:\n *\n * - Orthographic view\n * - top left corner of the canvas is 0,0\n * - y axis is +y downward\n * - entire canvas is the viewport.\n */\nexport function generateDefaultScene(\n  context: WebGLRenderingContext\n): IDefaultSceneElements {\n  // Generate a default view camera that is\n  // - Orthographic\n  // - (0, 0) is the top left of the canvas\n  // - the y axis is +y going downward\n  const height = context.canvas.height;\n  const width = context.canvas.width;\n  const aspectRatio = width / height;\n\n  const viewport = {\n    aspectRatio: aspectRatio,\n    bottom: -height / 2,\n    far: 10000000,\n    left: -width / 2,\n    near: -100,\n    right: width / 2,\n    top: height / 2,\n    viewSize: height\n  };\n\n  const defaultCamera: ViewCamera = new ViewCamera();\n  defaultCamera.baseCamera = new Three.OrthographicCamera(\n    viewport.left,\n    viewport.right,\n    viewport.top,\n    viewport.bottom,\n    viewport.near,\n    viewport.far\n  );\n\n  defaultCamera.baseCamera.scale.set(1.0, -1.0, 1.0);\n  defaultCamera.baseCamera.position.set(0.0, 0.0, -300.0);\n  defaultCamera.baseCamera.updateMatrixWorld(true);\n  defaultCamera.baseCamera.updateMatrix();\n\n  if (defaultCamera.baseCamera instanceof Three.OrthographicCamera) {\n    defaultCamera.baseCamera.updateProjectionMatrix();\n  }\n\n  // Generate a charting camera with all scales set to 1 and no offsets in any direction\n  const defaultChartCamera: ChartCamera = new ChartCamera();\n\n  // This is a viewport that covers the entire context\n  const defaultViewport = {\n    bottom: 0,\n    left: 0,\n    right: 0,\n    top: 0\n  };\n\n  // Make a view using our defaults\n  const defaultView = new View({\n    camera: defaultChartCamera,\n    key: View.DEFAULT_VIEW_ID,\n    viewCamera: defaultCamera,\n    viewport: defaultViewport\n  });\n\n  // Make a scene with our defaults\n  const defaultScene = new Scene({\n    key: Scene.DEFAULT_SCENE_ID,\n    views: []\n  });\n\n  // Make sure the default view is a part of the default scene\n  defaultScene.addView(defaultView);\n\n  return {\n    camera: defaultChartCamera,\n    scene: defaultScene,\n    view: defaultView,\n    viewCamera: defaultCamera,\n    viewport: defaultViewport\n  };\n}\n","import { Bounds } from \"../primitives/bounds\";\n\nexport class DataBounds<T> extends Bounds {\n  data: T;\n\n  static emptyBounds<T>() {\n    return new DataBounds<T>({\n      height: 0,\n      width: 0,\n      x: 0,\n      y: 0\n    });\n  }\n}\n","export * from \"./label-layer\";\nexport * from \"./label-instance\";\n","import { Label } from \"../../primitives/label\";\nimport { LabelAtlasResource } from \"./label-atlas-resource\";\n\nlet canvas: CanvasRenderingContext2D;\nconst MAX_FONT_SIZE = 50;\nconst { floor, max, min } = Math;\n\nexport interface ILabelRasterizedMetrics {\n  canvas: HTMLCanvasElement;\n  height: number;\n  width: number;\n}\n\nexport class LabelRasterizer {\n  /**\n   * This loops until our canvas context is available\n   */\n  static async awaitContext() {\n    // Iterate till the browser provides a valid canvas to render elements into\n    while (!canvas) {\n      this.getContext();\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n  }\n\n  /**\n   * This renders our label to a sizeable canvas where we loop over the pixel data to determine\n   * the bounds of the label.\n   *\n   * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n   *                                 the size to be rendered to the texture to the size the label\n   *                                 should be within world space.\n   * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n   */\n  static calculateLabelSize(\n    resource: LabelAtlasResource,\n    sampleScale?: number,\n    calculateTexture?: boolean\n  ) {\n    // If a max width is specified, then we must render and determine the potentially truncated text of the\n    // Label. We can do a binary search for the correct truncated label size.\n    if (calculateTexture) {\n      this.calculateTrucatedText(resource);\n    }\n\n    /** Get the label properties for rasterizing */\n    const label = resource.label;\n    // Get the scaling of the sample base\n    const sampleScaling = sampleScale || resource.sampleScale || 1.0;\n    // Draw our label to a canvas\n    this.drawLabel(label, resource.truncatedText, canvas, sampleScaling);\n    // Measure the contents of the canvas\n    const { minX, minY, maxX, maxY } = this.measureContents(canvas);\n\n    // Make sure the rasterization object is initialized\n    resource.rasterization = resource.rasterization || {\n      texture: { height: 0, width: 0 },\n      world: { height: 0, width: 0 }\n    };\n\n    // When a forced sampling is present, it calculates that as the world space\n    if (!calculateTexture) {\n      // Update the calculated texture size.\n      resource.rasterization.world = {\n        height: maxY - minY,\n        width: maxX - minX\n      };\n    }\n\n    // Otherwise we first calculate the texture rasterization for the label\n    else {\n      // Update the calculated texture size.\n      resource.rasterization.texture = {\n        height: maxY - minY,\n        width: maxX - minX\n      };\n\n      resource.rasterization.canvas = this.createCroppedCanvas(\n        resource,\n        minY,\n        minX\n      );\n      this.calculateLabelSize(resource, 1.0, false);\n    }\n  }\n\n  /**\n   * This determines what the truncated text of the label will be. If there is no truncation\n   * then the truncated text === the label's text\n   */\n  static calculateTrucatedText(resource: LabelAtlasResource) {\n    const label = resource.label;\n    const maxWidth = label.maxWidth;\n\n    // If the label has no max width, then there will be no truncation\n    if (!maxWidth) {\n      resource.truncatedText = label.text;\n      return;\n    }\n\n    // We now do an initial rendering of the label as it will appear in world space\n    this.drawLabel(label, label.text, canvas, 1);\n    // We measure the contents of the rendered item to see if it violates the maxWidth\n    const firstTest = this.measureContents(canvas);\n\n    // If we're within spec, we do not need to truncate\n    if (firstTest.maxX - firstTest.minX <= maxWidth) {\n      resource.truncatedText = label.text;\n      return;\n    }\n\n    // At this point we need to binary search through chopping off letters to find a string\n    // That will fit within max width\n    const text = label.text;\n    let left = 0;\n    let right = text.length;\n    let cursor = floor((right - left) / 2.0);\n    let safety = 0;\n    const safetyMax = 50;\n\n    // Loop to perform the binary search\n    while (right > left && cursor !== 0 && safety++ < safetyMax) {\n      // Draw and measure\n      this.drawLabel(label, `${text.substr(0, cursor)}...`, canvas, 1);\n      const { minX, maxX } = this.measureContents(canvas);\n\n      // If we pass then we move left to cursor to make the test string longer\n      if (maxX - minX <= maxWidth) {\n        left = cursor;\n      }\n\n      // If we fail, we move right to cursor to make the test string shorter\n      else {\n        right = cursor;\n      }\n\n      // Get our next cursor position\n      const nextCursor = floor((right - left) / 2.0) + left;\n\n      // If the next cursor is the same as cursor, then we're done searching\n      if (nextCursor === cursor) {\n        break;\n      }\n\n      // Move our cursor\n      cursor = nextCursor;\n    }\n\n    // If cursor is zero, nothing passed and our truncation is just ellipses\n    if (cursor === 0) {\n      resource.truncatedText = \"...\";\n    }\n\n    // Otherwise we get the string that passes and use that as our truncated text\n    else {\n      resource.truncatedText = `${text.substr(0, cursor)}...`;\n    }\n  }\n\n  /**\n   * This generates a canvas that has the cropped version of the label where the label\n   * fits neatly in the canvas object.\n   */\n  static createCroppedCanvas(\n    resource: LabelAtlasResource,\n    top: number,\n    left: number\n  ) {\n    const cropped = document.createElement(\"canvas\");\n    const context = cropped.getContext(\"2d\");\n\n    if (context) {\n      const texture = resource.rasterization.texture;\n      cropped.width = texture.width;\n      cropped.height = texture.height;\n      context.imageSmoothingEnabled = false;\n\n      // Draw just the region the label appears into the canvas\n      context.drawImage(\n        canvas.canvas,\n        left,\n        top,\n        texture.width,\n        texture.height,\n        0,\n        0,\n        texture.width,\n        texture.height\n      );\n    } else {\n      console.warn(\n        \"Could not create a canvas 2d context to generate a label's cropped image.\"\n      );\n    }\n\n    return cropped;\n  }\n\n  /**\n   * This actually renders a string to a canvas context using a label's settings\n   */\n  static drawLabel(\n    label: Label,\n    text: string,\n    canvas: CanvasRenderingContext2D,\n    sampleScaling: number\n  ) {\n    // Get the font size we will rasterize with\n    const fontSize = this.getLabelRasterizationFontSize(label, sampleScaling);\n    // Set the color of the label to white so we know what color to look for\n    canvas.fillStyle = \"white\";\n    // Set the font to the canvas\n    canvas.font = this.makeCSSFont(label, sampleScaling);\n    // We will use the canvas measuring tool to give us a baseline for how wide\n    // The label will be. We add the font size to the width for the padding needed to ensure\n    // The entirety of the text is placed on the canvas.\n    canvas.canvas.width = canvas.measureText(label.text).width + fontSize;\n    // Make our test area the font size with one extra level of the font size\n    // For padding.\n    canvas.canvas.height = fontSize * 2.0;\n    // After adjusting the canvas dimensions we must re-set the font metrics\n    // Set the color of the label to white so we know what color to look for\n    canvas.fillStyle = \"white\";\n    // Set the font to the canvas\n    canvas.font = this.makeCSSFont(label, sampleScaling);\n    // Render the text into our canvas for calculating\n    canvas.fillText(text, fontSize / 2.0, fontSize / 4.0 + fontSize);\n  }\n\n  /**\n   * Attempts to populate the 'canvas' context for rendering labels offscreen.\n   */\n  static getContext() {\n    if (!canvas) {\n      const potentialCanvas = document.createElement(\"canvas\").getContext(\"2d\");\n\n      if (potentialCanvas) {\n        canvas = potentialCanvas;\n      }\n\n      return potentialCanvas;\n    }\n\n    return canvas;\n  }\n\n  /**\n   * This retrieves the font size that will be used when rasterizing the label. This takes into\n   * account whether the label is requesting super sampling be present for the rendering.\n   */\n  static getLabelRasterizationFontSize(label: Label, sampleScale: number) {\n    return label.fontSize * sampleScale;\n  }\n\n  /**\n   * Generates the CSS font string based on the label's values\n   */\n  static makeCSSFont(label: Label, sampleScale: number) {\n    return `${label.fontWeight} ${this.getLabelRasterizationFontSize(\n      label,\n      sampleScale\n    )}px ${label.fontFamily}`;\n  }\n\n  /**\n   * This measures the contents of what is inside the canvas assumming the rendered values are only white\n   */\n  static measureContents(canvas: CanvasRenderingContext2D) {\n    const { width, height } = canvas.canvas;\n    const imageData = canvas.getImageData(0, 0, width, height).data;\n    let r;\n\n    let minY = Number.MAX_SAFE_INTEGER;\n    let minX = Number.MAX_SAFE_INTEGER;\n    let maxX = Number.MIN_SAFE_INTEGER;\n    let maxY = Number.MIN_SAFE_INTEGER;\n\n    for (let i = 0; i < width; ++i) {\n      for (let k = 0; k < height; ++k) {\n        const redIndex = k * (width * 4) + i * 4;\n        r = imageData[redIndex];\n\n        if (r > 0.0) {\n          minY = min(minY, k);\n          minX = min(minX, i);\n          maxX = max(maxX, i);\n          maxY = max(maxY, k);\n        }\n      }\n    }\n\n    // The identified pixel needs to be encased and not a direct target\n    minY -= 1;\n    maxY += 2;\n    maxX += 2;\n    minX -= 1;\n\n    minY = max(minY, 0);\n    minX = max(minX, 0);\n\n    return { minX, minY, maxX, maxY };\n  }\n\n  /**\n   * Performs the rendering of the label\n   */\n  static async render(\n    resource: LabelAtlasResource\n  ): Promise<LabelAtlasResource> {\n    // Make sure our canvas object is ready for rendering\n    await this.awaitContext();\n\n    // Validate the label's input\n    if (resource.label.fontSize > MAX_FONT_SIZE) {\n      console.warn(\"Labels only support font sizes up to 50\");\n      return resource;\n    }\n\n    // Calculate all of the label metrics and generate a canvas on the label that can\n    // Be rendered to the canvas.\n    this.calculateLabelSize(resource, resource.sampleScale, true);\n\n    return resource;\n  }\n\n  /**\n   * Performs the rendering of the label\n   */\n  static renderSync(resource: LabelAtlasResource): LabelAtlasResource {\n    // Ensure our offscreen canvas is prepped\n    this.getContext();\n\n    if (!canvas) {\n      console.warn(\n        \"Can not render a label synchronously without the canvas context being ready.\"\n      );\n      return resource;\n    }\n\n    // Validate the label's input\n    if (resource.label.fontSize > MAX_FONT_SIZE) {\n      console.warn(\"Labels only support font sizes up to 50\");\n      return resource;\n    }\n\n    // Calculate all of the label metrics and generate a canvas on the label that can\n    // Be rendered to the canvas.\n    this.calculateLabelSize(resource, resource.sampleScale, true);\n\n    return resource;\n  }\n}\n","import { Image } from \"../../primitives/image\";\nimport { BaseAtlasResource } from \"./base-atlas-resource\";\n\nexport class ImageAtlasResource extends BaseAtlasResource {\n  /** This is the image to be loaded into the atlas */\n  image: Image;\n\n  constructor(image: Image) {\n    super();\n    this.image = image;\n  }\n}\n","import { Color } from \"../../primitives/color\";\nimport { ColorAtlasResource } from \"./color-atlas-resource\";\n\n// When ratserized to the image, this determines the size of the square rendered to the atlas.\nconst COLOR_RASTERIZATION_SIZE = 2;\n\n/**\n * Static class for rasterizing a color to a canvas object\n */\nexport class ColorRasterizer {\n  /**\n   * This loops until our canvas context is available\n   */\n  static async awaitContext(canvas: HTMLCanvasElement) {\n    // Iterate till the browser provides a valid canvas to render elements into\n    for (\n      let c = canvas.getContext(\"2d\"), limit = 0;\n      !Boolean(c) && limit < 100;\n      c = canvas.getContext(\"2d\"), ++limit\n    ) {\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n  }\n\n  /**\n   * Generates the CSS string version of the color\n   */\n  static makeCSS(color: Color) {\n    return `rgba(${Math.floor(color.r * 256)}, ${Math.floor(\n      color.g * 256\n    )}, ${Math.floor(color.b * 256)}, ${color.opacity})`;\n  }\n\n  static async render(resource: ColorAtlasResource) {\n    const canvas = document.createElement(\"canvas\");\n    const context = canvas.getContext(\"2d\");\n\n    await this.awaitContext(canvas);\n\n    if (context) {\n      canvas.width = COLOR_RASTERIZATION_SIZE;\n      canvas.height = COLOR_RASTERIZATION_SIZE;\n      context.imageSmoothingEnabled = false;\n      context.fillStyle = this.makeCSS(resource.color);\n\n      // Draw the color to the fill space\n      context.fillRect(\n        0,\n        0,\n        COLOR_RASTERIZATION_SIZE,\n        COLOR_RASTERIZATION_SIZE\n      );\n      // Update the resource with the rasterization\n      resource.rasterization.canvas = canvas;\n    } else {\n      console.warn(\n        \"Could not create a canvas 2d context to generate a color for rasterization.\"\n      );\n    }\n\n    return resource;\n  }\n}\n","import { Color } from \"../../primitives/color\";\nimport { BaseAtlasResource } from \"./base-atlas-resource\";\n\nexport class ColorAtlasResource extends BaseAtlasResource {\n  /** This is the color to be loaded into the atlas */\n  color: Color;\n\n  constructor(color: Color) {\n    super();\n    this.color = color;\n  }\n}\n","import * as Three from \"three\";\nimport { IPoint } from \"../../primitives/point\";\n\n/**\n * Defines a texture that is located on an atlas\n */\nexport class SubTexture {\n  /** Stores the aspect ratio of the image for quick reference */\n  aspectRatio: number = 1.0;\n  /** The id of the atlas this texture is located on */\n  atlasReferenceID: string = \"\";\n  /** This is the actual texture of the atlas this resource is located on */\n  atlasTexture: Three.Texture | null = null;\n  /** This is the top left UV coordinate of the sub texture on the atlas */\n  atlasTL: IPoint = { x: 0, y: 0 };\n  /** This is the top right UV coordinate of the sub texture on the atlas */\n  atlasTR: IPoint = { x: 0, y: 0 };\n  /** This is the bottom left UV coordinate of the sub texture on the atlas */\n  atlasBL: IPoint = { x: 0, y: 0 };\n  /** This is the bottom right UV coordinate of the sub texture on the atlas */\n  atlasBR: IPoint = { x: 0, y: 0 };\n  /** This is the normalized width of the sub texture on the atlas */\n  widthOnAtlas: number = 0;\n  /** This is the normalized height of the sub texture on the atlas */\n  heightOnAtlas: number = 0;\n  /** This flag is set to false when the underlying texture is no longer valid */\n  isValid: boolean = false;\n  /** Width in pixels of the image on the atlas */\n  pixelWidth: number = 0;\n  /** Height in pixels of the image on the atlas */\n  pixelHeight: number = 0;\n}\n","import * as Three from \"three\";\nimport {\n  IdentifyByKey,\n  IdentifyByKeyOptions\n} from \"../../util/identify-by-key\";\nimport { AtlasManager, AtlasResource } from \"./atlas-manager\";\nimport { PackNode } from \"./pack-node\";\nimport { SubTexture } from \"./sub-texture\";\n\n/**\n * These are valid atlas sizes available. We force a power of 2 to be utilized.\n * We do not allow crazy large sizes as browsers have very real caps on resources.\n * This helps implementations be a little smarter about what they are using. Future\n * versions may increase this number as GPUs improve and standards allow greater\n * flexibility.\n */\nexport enum AtlasSize {\n  _2 = 0x01 << 1,\n  _4 = 0x01 << 2,\n  _8 = 0x01 << 3,\n  _16 = 0x01 << 4,\n  _32 = 0x01 << 5,\n  _64 = 0x01 << 6,\n  _128 = 0x01 << 7,\n  _256 = 0x01 << 8,\n  _512 = 0x01 << 9,\n  _1024 = 0x01 << 10,\n  _2048 = 0x01 << 11,\n  _4096 = 0x01 << 12\n}\n\nexport interface IAtlasOptions extends IdentifyByKeyOptions {\n  /** This is the height of the texture */\n  height: AtlasSize;\n  /** This is the width of the atlas */\n  width: AtlasSize;\n  /**\n   * This applies any desired settings to the Threejs texture as desired.\n   * Some noteable defaults this system sets:\n   *  - generateMipMaps is false and\n   *  - premultiply alpha is true.\n   */\n  textureSettings?: Partial<Three.Texture>;\n}\n\n/**\n * This represents a single Texture on the gpu that is composed of several smaller textures\n * as a 'look up'.\n */\nexport class Atlas extends IdentifyByKey {\n  /** Stores the size of the atlas texture */\n  height: AtlasSize;\n  /** This is the parent manager of the atlas */\n  manager: AtlasManager;\n  /** This is the packing of the  */\n  packing: PackNode;\n  /** This is the actual texture object that represents the atlas on the GPU */\n  texture: Three.Texture;\n  /** These are the applied settings to our texture */\n  textureSettings?: Partial<Three.Texture>;\n  /**\n   * This is all of the resources associated with this atlas. The boolean flag indicates if the resource\n   * is flagged for removal. When set to false, the resource is no longer valid and can be removed from\n   * the atlas at any given moment.\n   */\n  validResources = new Map<AtlasResource, boolean>();\n  /** Stores the size of the atlas texture */\n  width: AtlasSize;\n\n  constructor(options: IAtlasOptions) {\n    super(options);\n    const canvas = document.createElement(\"canvas\");\n    this.width = canvas.width = options.width;\n    this.height = canvas.height = options.height;\n    this.textureSettings = options.textureSettings;\n\n    // Set up the packing for this atlas\n    this.packing = new PackNode(0, 0, options.width, options.height);\n    // Make sure the texture is started and updated\n    this.updateTexture(canvas);\n  }\n\n  /**\n   * This invalidates the SubTexture of an atlas resource.\n   */\n  private invalidateResource(resource: AtlasResource) {\n    const zero = { x: 0, y: 0 };\n    resource.texture.aspectRatio = 1;\n    resource.texture.atlasBL = zero;\n    resource.texture.atlasBR = zero;\n    resource.texture.atlasTL = zero;\n    resource.texture.atlasTR = zero;\n    resource.texture.atlasReferenceID = \"\";\n    resource.texture.pixelWidth = 0;\n    resource.texture.pixelHeight = 0;\n    resource.texture.isValid = false;\n  }\n\n  /**\n   * Sets the parent manager of this atlas\n   */\n  setManager(manager: AtlasManager) {\n    this.manager = manager;\n  }\n\n  /**\n   * Adds a resource to this atlas AND ensures the resource is flagged valid for use.\n   *\n   * @return {boolean} True if the resource successfully registered\n   */\n  registerResource(resource: AtlasResource) {\n    if (this.validResources.get(resource) === undefined) {\n      if (!resource.texture || !resource.texture.isValid) {\n        if (!resource.texture) {\n          resource.texture = new SubTexture();\n        }\n\n        resource.texture.isValid = true;\n        this.validResources.set(resource, true);\n\n        return true;\n      } else {\n        console.warn(\n          \"Atlas Error:\",\n          this.id,\n          \"Attempted to add a resource to an Atlas that is already a valid resource on another atlas.\",\n          \"Consider Creating a new resource to be loaded into this particular atlas.\",\n          \"Resource:\",\n          resource\n        );\n      }\n    } else {\n      console.warn(\n        \"Atlas Error:\",\n        this.id,\n        \"A resource was trying to be added to the atlas that has already been added before.\",\n        \"Consider creating a new resource to indicate what you want loaded to the atlas\",\n        \"Resource:\",\n        resource\n      );\n    }\n\n    return false;\n  }\n\n  /**\n   * This flags a resource from removal from an atlas.\n   *\n   * NOTE: This does not immediately clear the resource fromt he atlas, nor does it even guarantee\n   * the resource will be cleared from the atlas for a while. It merely suggests the resource be removed\n   * and makes the SubTexture invalid. It could be a long while before the atlas gets regnerated and repacked\n   * to actually reflect the resource not existing on the atlas.\n   */\n  removeResource(resource: AtlasResource) {\n    if (this.validResources.get(resource)) {\n      this.validResources.set(resource, false);\n      this.invalidateResource(resource);\n    } else {\n      console.warn(\n        \"Atlas Error:\",\n        this.id,\n        \"Attempted to remove a resource that does not exist on this atlas.\",\n        \"or the resource was already considered invalidated on this atlas.\",\n        \"Resource:\",\n        resource\n      );\n    }\n  }\n\n  /**\n   * TODO:\n   * This performs the currently best known way to update a texture.\n   *\n   * This is the current best attempt at updating the atlas which is junk as it destroys the old texture\n   * And makes a new one. We REALLY should be just subTexture2D updating the texture, but Three makes that really\n   * Difficult\n   */\n  updateTexture(canvas?: HTMLCanvasElement) {\n    if (this.texture) {\n      const redoneCanvas: HTMLCanvasElement = this.texture.image;\n      this.texture.dispose();\n      this.texture = new Three.Texture(redoneCanvas);\n    } else {\n      this.texture = new Three.Texture(canvas);\n    }\n\n    // Apply any relevant options to the texture desired to be set\n    this.texture.generateMipmaps = true;\n    this.texture.premultiplyAlpha = true;\n    this.textureSettings && Object.assign(this.texture, this.textureSettings);\n    this.texture.needsUpdate = true;\n  }\n\n  /**\n   * This frees up all the resources down to the GPU related to this atlas. It also\n   * loops through every resource and invalidates the texturing information within\n   * them so subsequent accidental renders will appear as a single color rather than\n   * an artifacted element.\n   */\n  destroy() {\n    this.texture.dispose();\n    this.validResources.forEach((_isValid, resource) => {\n      this.invalidateResource(resource);\n    });\n  }\n}\n","export * from \"./image-layer\";\nexport * from \"./image-instance\";\n","import { Instance, InstanceDiff } from \"../../../instance-provider\";\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  IBufferLocationGroup\n} from \"../buffer-manager-base\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\n\n/**\n * Base requirements for handling diffs from a layer.\n */\nexport abstract class BaseDiffProcessor<T extends Instance> {\n  layer: IInstanceDiffManagerTarget<T>;\n  bufferManager: BufferManagerBase<T, IBufferLocation>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>\n  ) {\n    this.layer = layer;\n    this.bufferManager = bufferManager;\n  }\n\n  /** Perform an 'add' operation for the instance's buffer */\n  abstract addInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocation?: IBufferLocation | IBufferLocationGroup<IBufferLocation>\n  ): void;\n  /** Perform a 'change' operation for the instance's buffer */\n  abstract changeInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocation?: IBufferLocation | IBufferLocationGroup<IBufferLocation>\n  ): void;\n  /** Perform a 'remove' operation for the instance's buffer */\n  abstract removeInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocation?: IBufferLocation | IBufferLocationGroup<IBufferLocation>\n  ): void;\n\n  /**\n   * This indicates all changes have been applied, this allows the processor to finalize buffer updates\n   */\n  abstract commit(): void;\n  /**\n   * This will be called with the changes that WILL be processed. This allows this processor to make extra judgement calls on\n   * how it will process the changes and let's it optimize itself before changes are actually processed. An example optimization:\n   *\n   * Buffers have an update range we can adjust so only a piece of the buffer is updated. However, calculating that range causes\n   * overhead to calculate the affected range. So, if we have mass changes happening for major sections of the buffer (number of\n   * changes approaches some large percentage of the instances supported by the buffer), then it would be more efficient just to\n   * update the entire buffer rather than discover the portion needing updating.\n   */\n  abstract incomingChangeList(changes: InstanceDiff<T>[]): void;\n}\n","const INSTANCE_UNIFORM_ATTRIBUTE_PREFIX = \"u\";\n\nexport function makeInstanceUniformNameArray() {\n  return `instanceData`;\n}\n\nexport function makeInstanceUniformNameTree(index: number) {\n  return `${INSTANCE_UNIFORM_ATTRIBUTE_PREFIX}${index.toString(31)}`;\n}\n","import { IInstanceAttribute } from \"../../types\";\nimport { Instance } from \"../../util\";\n\nexport function instanceAttributeShaderName<T extends Instance>(\n  attribute: IInstanceAttribute<T>\n) {\n  if (attribute.easing) {\n    return `_${attribute.name}_end`;\n  } else {\n    return attribute.name;\n  }\n}\n","export function getProgramInfo(gl: WebGLRenderingContext, program: any) {\n  const result = {\n      attributeCount: 0,\n      attributes: new Array(),\n      uniformCount: 0,\n      uniforms: new Array()\n    },\n    activeUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS),\n    activeAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n  // Taken from the WebGl spec:\n  // Http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14\n  const enums: { [key: number]: string } = {\n    0x8b50: \"FLOAT_VEC2\",\n    0x8b51: \"FLOAT_VEC3\",\n    0x8b52: \"FLOAT_VEC4\",\n    0x8b53: \"INT_VEC2\",\n    0x8b54: \"INT_VEC3\",\n    0x8b55: \"INT_VEC4\",\n    0x8b56: \"BOOL\",\n    0x8b57: \"BOOL_VEC2\",\n    0x8b58: \"BOOL_VEC3\",\n    0x8b59: \"BOOL_VEC4\",\n    0x8b5a: \"FLOAT_MAT2\",\n    0x8b5b: \"FLOAT_MAT3\",\n    0x8b5c: \"FLOAT_MAT4\",\n    0x8b5e: \"SAMPLER_2D\",\n    0x8b60: \"SAMPLER_CUBE\",\n    0x1400: \"BYTE\",\n    0x1401: \"UNSIGNED_BYTE\",\n    0x1402: \"SHORT\",\n    0x1403: \"UNSIGNED_SHORT\",\n    0x1404: \"INT\",\n    0x1405: \"UNSIGNED_INT\",\n    0x1406: \"FLOAT\"\n  };\n\n  const blocks: { [key: number]: number } = {\n    0x8b50: 1,\n    0x8b51: 1,\n    0x8b52: 1,\n    0x8b53: 1,\n    0x8b54: 1,\n    0x8b55: 1,\n    0x8b56: 1,\n    0x8b57: 1,\n    0x8b58: 1,\n    0x8b59: 1,\n    0x8b5a: 1,\n    0x8b5b: 3,\n    0x8b5c: 4,\n    0x8b5e: 1,\n    0x8b60: 1,\n    0x1400: 1,\n    0x1401: 1,\n    0x1402: 1,\n    0x1403: 1,\n    0x1404: 1,\n    0x1405: 1,\n    0x1406: 1\n  };\n\n  // Loop through active uniforms\n  for (let i = 0; i < activeUniforms; ++i) {\n    const uniform: any = gl.getActiveUniform(program, i);\n    uniform.typeName = enums[uniform.type];\n    result.uniforms.push(uniform);\n    result.uniformCount += uniform.size;\n    uniform.size = uniform.size * blocks[uniform.type];\n  }\n\n  // Loop through active attributes\n  for (let i = 0; i < activeAttributes; i++) {\n    const attribute: any = gl.getActiveAttrib(program, i);\n    attribute.typeName = enums[attribute.type];\n    result.attributes.push(attribute);\n    result.attributeCount += attribute.size;\n  }\n\n  return result;\n}\n\nexport class WebGLStat {\n  static MAX_VERTEX_UNIFORMS = 0;\n  static MAX_FRAGMENT_UNIFORMS = 0;\n  static MAX_VERTEX_ATTRIBUTES = 0;\n  static WEBGL_SUPPORTED: boolean = false;\n  static MAX_TEXTURE_SIZE = 0;\n  static HARDWARE_INSTANCING = false;\n  static HARDWARE_INSTANCING_ANGLE = false;\n}\n\nfunction initStats() {\n  // Let's perform some immediate operations to do some gl querying for useful information\n  function getAContext() {\n    try {\n      const canvas = document.createElement(\"canvas\");\n      return (\n        (window as any).WebGLRenderingContext &&\n        (canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\"))\n      );\n    } catch (e) {\n      return false;\n    }\n  }\n\n  // Attempt to retrieve a context for webgl\n  const gl = getAContext();\n\n  // If the context exists, then we know gl is supported and we can fill in some metrics\n  if (gl) {\n    WebGLStat.WEBGL_SUPPORTED = true;\n    WebGLStat.MAX_VERTEX_UNIFORMS = gl.getParameter(\n      gl.MAX_VERTEX_UNIFORM_VECTORS\n    );\n    WebGLStat.MAX_FRAGMENT_UNIFORMS = gl.getParameter(\n      gl.MAX_FRAGMENT_UNIFORM_VECTORS\n    );\n    WebGLStat.MAX_VERTEX_ATTRIBUTES = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    WebGLStat.MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    WebGLStat.HARDWARE_INSTANCING_ANGLE = Boolean(\n      gl.getExtension(\"ANGLE_instanced_arrays\")\n    );\n    WebGLStat.HARDWARE_INSTANCING = WebGLStat.HARDWARE_INSTANCING_ANGLE;\n  }\n}\n\ninitStats();\n","/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',\n  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',\n  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',\n  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',\n  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',\n  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',\n  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',\n  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',\n  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',\n  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',\n  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // Internet Explorer and Edge do not support colors.\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n    return false;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n","import * as browser from \"bowser\";\nimport { Vector2 } from \"three\";\nconst debug = require(\"debug\")(\"CommunicationsView:Mouse\");\n\n/** Used to adjust the base whee delta for IE browsers */\nconst IE_ADJUSTMENT = 1 / 30;\n/** Used to adjust the rates for IE 11 */\nconst OLD_IE_ADJUSTMENT = -0.25;\n// This determines how large the delta can grow to in firefox\nconst MAX_FIREFOX_WHEELDELTA = 100;\n/**\n * Create a low pass filter memory bank so we can slow down rapid accelerations and let normal slower accelerations pass\n * Common use case for this is the discrepancy in firefox from mousewheels to trackpad scroll speeds\n */\nconst lowPassY: number[] = [0, 0, 0, 0];\n// These coefficients represent the coefficients of a FIR filter.\n// This FIR filter uses the lowPassY as the memory for the filter and is created for\n// The reasons specified for the lowPassY memory. To edit the coefficients, you simply\n// Ensure the coefficients added together === 1.0. If they do not, you may get an unstable\n// Result that goes to infinity rather quickly. Changing the distribution of these coefficients\n// Alters the rate at which the delta can approach MAX_FIREFOX_WHEELDELTA. Explaining exactly\n// How it affects the rate requires an understanding of FIR filters, so unless this is already\n// Known knowledge, it would be faster to just tweak the coefficients until a desired effect is\n// Attained.\nconst LOW_PASS_U0 = 0.02;\nconst LOW_PASS_U1 = 0.1;\nconst LOW_PASS_U2 = 0.18;\nconst LOW_PASS_U3 = 0.7;\n\nfunction normalizeFirefoxWheel(e: MouseWheelEvent) {\n  const wheel: WheelEvent = e;\n  let deltaX = 0;\n  let deltaY = 0;\n\n  // Reset the filter if the direction changes to prevent lag in directional change\n  if (Math.sign(lowPassY[0]) !== Math.sign(deltaY)) {\n    lowPassY.splice(0, lowPassY.length, 0, 0, 0, 0);\n  }\n\n  deltaX = wheel.deltaX * MAX_FIREFOX_WHEELDELTA;\n\n  // Calculate the next value output from the FIR filter\n  deltaY =\n    wheel.deltaY * MAX_FIREFOX_WHEELDELTA * LOW_PASS_U0 +\n    lowPassY[0] * LOW_PASS_U1 +\n    lowPassY[1] * LOW_PASS_U2 +\n    lowPassY[2] * LOW_PASS_U3;\n  // Store the value of the filter in the FIR memory bank\n  lowPassY.unshift(deltaY);\n  // Keep our FIR memory clean and only the size of the number of coefficients\n  lowPassY.pop();\n\n  return new Vector2(-deltaX, -deltaY);\n}\n\nfunction normalizeChromeWheel(e: MouseWheelEvent) {\n  const wheel: WheelEvent = e;\n\n  return new Vector2(wheel.deltaX, -wheel.deltaY);\n}\n\nfunction normalizeIE11Wheel(e: MouseWheelEvent) {\n  const wheel: WheelEvent = e;\n  let deltaX = wheel.deltaX;\n\n  if (deltaX === undefined) {\n    deltaX =\n      wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n  }\n\n  let deltaY = wheel.deltaY;\n\n  if (deltaY === undefined) {\n    if (wheel.wheelDeltaY !== undefined) {\n      deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n    } else {\n      deltaY = (wheel.wheelDelta || -wheel.detail) * OLD_IE_ADJUSTMENT;\n    }\n  }\n\n  return new Vector2(-deltaX, -deltaY);\n}\n\nfunction normalizeIE12Wheel(e: MouseWheelEvent) {\n  const wheel: WheelEvent = e;\n  let { deltaX, deltaY } = wheel;\n\n  if (deltaX === undefined) {\n    deltaX =\n      wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n  }\n\n  if (deltaY === undefined) {\n    if (wheel.wheelDeltaY !== undefined) {\n      deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n    } else {\n      deltaY = wheel.wheelDelta || -wheel.detail;\n    }\n  }\n\n  const v = new Vector2(deltaX, -deltaY);\n  v.multiplyScalar(0.25);\n\n  return v;\n}\n\n// Determine this browsers version of wheel normalization and apply it\nlet normalizeWheel: (e: MouseWheelEvent) => Vector2;\n\nif (browser.firefox) {\n  debug(\"Using mouse wheel for firefox\");\n  normalizeWheel = normalizeFirefoxWheel;\n} else if (browser.msie && +browser.version >= 11) {\n  debug(\"Using mouse wheel for IE 11\");\n  normalizeWheel = normalizeIE11Wheel;\n} else if (browser.msedge) {\n  debug(\"Using mouse wheel for MS EDGE\");\n  normalizeWheel = normalizeIE12Wheel;\n} else {\n  debug(\"Using mouse wheel for Chrome\");\n  normalizeWheel = normalizeChromeWheel;\n}\n\n/**\n * Analyzes a MouseEvent and calculates the mouse coordinates (relative to the element).\n */\nfunction eventElementPosition(\n  e: any,\n  relative?: HTMLElement\n): { x: number; y: number } {\n  let mouseX: number = 0,\n    mouseY: number = 0,\n    eventX: number = 0,\n    eventY: number = 0,\n    object: any =\n      relative || (e.nativeEvent && e.nativeEvent.target) || e.target;\n\n  // Get mouse position on document crossbrowser\n  if (!e) {\n    e = window.event;\n  }\n\n  if (e.pageX || e.pageY) {\n    mouseX = e.pageX;\n    mouseY = e.pageY;\n  } else if (e.clientX || e.clientY) {\n    mouseX =\n      e.clientX +\n      document.body.scrollLeft +\n      document.documentElement.scrollLeft;\n    mouseY =\n      e.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n  }\n\n  // Get parent element position in document\n  if (object.offsetParent) {\n    do {\n      eventX += object.offsetLeft;\n      eventY += object.offsetTop;\n      object = object.offsetParent;\n    } while (object);\n  }\n\n  // Mouse position minus elm position is mouseposition relative to element:\n  return { x: mouseX - eventX, y: mouseY - eventY };\n}\n\nexport { eventElementPosition, normalizeWheel };\n","import * as Three from \"three\";\nimport { IMaterialOptions } from \"../types\";\n\nexport class CommonMaterialOptions {\n  static transparentShape: IMaterialOptions = {\n    premultipliedAlpha: true,\n    transparent: true\n  };\n\n  static transparentImage: IMaterialOptions = {\n    blending: Three.CustomBlending,\n    blendSrc: Three.OneFactor,\n    premultipliedAlpha: true,\n    transparent: true\n  };\n}\n","let UID = 0;\n\n/**\n * Provides a 64 bit UID.\n *\n * Note: all uids generated with uid() are unique amongst uid() calls and NOT unique amongst\n * other types of uid calls.\n */\nexport function uid() {\n  return ++UID;\n}\n\nlet CUID = 0;\n\n/**\n * Provides a 24 bit UID (keeps the UID within non-alpha color ranges)\n *\n * Note: all uids generated with colorUID() are unique amongst colorUID() calls and NOT unique amongst\n * other types of uid calls.\n */\nexport function colorUID() {\n  return ++CUID % 0xffffff;\n}\n","import * as Three from \"three\";\nimport { Instance } from \"../../instance-provider/instance\";\nimport { InstanceIOValue } from \"../../types\";\nimport { ILayerProps, Layer } from \"../layer\";\nimport { AtlasManager, AtlasResource } from \"./atlas-manager\";\nimport { LabelAtlasResource } from \"./label-atlas-resource\";\nimport { SubTexture } from \"./sub-texture\";\n\nexport interface IAtlasResourceManagerOptions {\n  /** This is the atlas manager that handles operations with our atlas' */\n  atlasManager: AtlasManager;\n}\n\nfunction toInstanceIOValue(texture?: SubTexture): InstanceIOValue {\n  // If the texture is not defined we just output an empty reference\n  if (!texture) {\n    return [0, 0, 0, 0];\n  }\n\n  // Otherwise, we return the atlas information of the texture\n  return [\n    texture.atlasTL.x,\n    texture.atlasTL.y,\n    texture.atlasBR.x,\n    texture.atlasBR.y\n  ];\n}\n\n/**\n * This class is responsible for tracking resources requested to be placed on an Atlas.\n * This makes sure the resource is uploaded and then properly cached so similar requests\n * return already existing resources. This also manages instances waiting for the resource\n * to be made available.\n */\nexport class AtlasResourceManager {\n  /** This is the atlas manager that handles operations with our atlas' */\n  atlasManager: AtlasManager;\n  /** This is the atlas currently targetted by requests */\n  targetAtlas: string = \"\";\n  /** This stores all of the requests awaiting dequeueing */\n  private requestQueue = new Map<string, AtlasResource[]>();\n  /**\n   * This tracks if a resource is already in the request queue. This also stores ALL instances awaiting the resource.\n   */\n  private requestLookup = new Map<\n    string,\n    Map<AtlasResource, [Layer<any, any>, Instance][]>\n  >();\n\n  constructor(options: IAtlasResourceManagerOptions) {\n    this.atlasManager = options.atlasManager;\n  }\n\n  /**\n   * This dequeues all instance requests for a resource and processes the request which will\n   * inevitably make the instance active\n   */\n  async dequeueRequests() {\n    // This flag will be modified to reflect if a dequeue operation has occurred\n    let didDequeue = false;\n\n    for (const [targetAtlas, resources] of Array.from(\n      this.requestQueue.entries()\n    )) {\n      if (resources.length > 0) {\n        // We did dequeue\n        didDequeue = true;\n        // Pull out all of the requests into a new array and empty the existing queue to allow the queue to register\n        // New requests while this dequeue is being processed\n        const requests = resources.slice(0);\n        // Empty the queue to begin taking in new requests as needed\n        resources.length = 0;\n\n        // Tell the atlas manager to update with all of the requested resources\n        await this.atlasManager.updateAtlas(targetAtlas, requests);\n        // Get the requests for the given atlas\n        const atlasRequests = this.requestLookup.get(targetAtlas);\n\n        if (atlasRequests) {\n          // Once the manager has been updated, we can now flag all of the instances waiting for the resources\n          // As active, which should thus trigger an update to the layers to perform a diff for each instance\n          requests.forEach(resource => {\n            const request = atlasRequests.get(resource);\n            atlasRequests.delete(resource);\n\n            if (request) {\n              for (const [layer, instance] of request) {\n                // If the instance is still associated with buffer locations, then the instance can be activated. Having\n                // A buffer location is indicative the instance has not been deleted.\n                if (layer.bufferManager.getBufferLocations(instance)) {\n                  // Make sure the instance is active\n                  instance.active = true;\n                  // Trigger the resource attributes to update\n                  instance.resourceTrigger();\n                }\n              }\n            }\n          });\n        }\n      }\n    }\n\n    return didDequeue;\n  }\n\n  /**\n   * Free ALL resources managed under this resource manager\n   */\n  destroy() {\n    this.atlasManager.destroy();\n  }\n\n  /**\n   * This retrieves the actual atlas texture that should be applied to a uniform's\n   * value.\n   */\n  getAtlasTexture(key: string): Three.Texture | null {\n    const atlas = this.atlasManager.getAtlasTexture(key);\n\n    if (atlas) {\n      return atlas.texture;\n    }\n\n    return null;\n  }\n\n  /**\n   * This is a request for atlas texture resources. It will produce either the coordinates needed to\n   * make valid texture lookups, or it will trigger a loading of resources to an atlas and cause an\n   * automated deactivation and reactivation of the instance.\n   */\n  request<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U>,\n    instance: Instance,\n    resource: AtlasResource\n  ): InstanceIOValue {\n    const texture: SubTexture = resource.texture;\n\n    // If the texture is ready and available, then we simply return the IO values\n    if (texture) {\n      return toInstanceIOValue(texture);\n    }\n\n    if (resource instanceof LabelAtlasResource) {\n      if (!resource.label.text) {\n        return toInstanceIOValue(texture);\n      }\n    }\n\n    // If a request is already made, then we must save the instance making the request for deactivation and\n    // Reactivation but without any additional atlas loading\n    let atlasRequests = this.requestLookup.get(this.targetAtlas);\n\n    if (atlasRequests) {\n      const existingRequests = atlasRequests.get(resource);\n\n      if (existingRequests) {\n        existingRequests.push([layer, instance]);\n        instance.active = false;\n\n        return toInstanceIOValue(texture);\n      }\n    } else {\n      atlasRequests = new Map();\n      this.requestLookup.set(this.targetAtlas, atlasRequests);\n    }\n\n    // If the texture is not available, then we must load the resource, deactivate the instance\n    // And wait for the resource to become available. Once the resource is available, the system\n    // Must activate the instance to render the resource.\n    instance.active = false;\n    let requests = this.requestQueue.get(this.targetAtlas);\n\n    if (!requests) {\n      requests = [];\n      this.requestQueue.set(this.targetAtlas, requests);\n    }\n\n    requests.push(resource);\n    atlasRequests.set(resource, [[layer, instance]]);\n\n    // This returns essentially returns blank values for the resource lookup\n    return toInstanceIOValue(texture);\n  }\n\n  /**\n   * This is used by the system to target the correct atlas for subsequent requests to a resource.\n   */\n  setTargetAtlas(target: string) {\n    this.targetAtlas = target;\n  }\n}\n","import { Bounds } from \"../primitives/bounds\";\nimport { IPoint } from \"../primitives/point\";\n\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nconst maxPopulation: number = 5;\nconst maxDepth: number = 10;\n\nexport interface IQuadItem {\n  area: number;\n  bottom: number;\n  height: number;\n  left: number;\n  mid: IPoint;\n  right: number;\n  top: number;\n  width: number;\n  x: number;\n  y: number;\n\n  containsPoint(point: IPoint): boolean;\n  encapsulate(item: IQuadItem): boolean;\n  fits(item: IQuadItem): 0 | 1 | 2;\n  hitBounds(item: IQuadItem): boolean;\n  isInside(item: IQuadItem): boolean;\n}\n\n/**\n * This filters a quad tree query by type\n *\n * @export\n * @template T\n */\nexport function filterQuery<T extends IQuadItem>(\n  type: Function[],\n  queryValues: IQuadItem[]\n): T[] {\n  const filtered: T[] = [];\n\n  queryValues.forEach((obj: IQuadItem) => {\n    if (type.find(t => obj instanceof t)) {\n      filtered.push(obj as T);\n    }\n  });\n\n  return filtered;\n}\n\n/**\n * Allows typing of a callback argument\n */\nexport interface IVisitFunction<T extends IQuadItem> {\n  /**\n   * A callback to use during add or query\n   *\n   * Called do provide aggregation or filtering like Array.reduce or\n   * Array.filter, but in a QuadTree instead.\n   *\n   * @param node  The node to effect the function upon\n   * @param child The child to add to the node\n   */\n  (node: Node<T>, child?: IQuadItem): void;\n}\n\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n *\n * @class Quadrants\n */\nexport class Quadrants<T extends IQuadItem> {\n  TL: Node<T>;\n  TR: Node<T>;\n  BL: Node<T>;\n  BR: Node<T>;\n\n  /**\n   * Ensures all memory is released for all nodes and all references are removed\n   * to potentially high memory consumption items\n   *\n   * @memberOf Quadrants\n   */\n  destroy() {\n    this.TL.destroy();\n    this.TR.destroy();\n    this.BL.destroy();\n    this.BR.destroy();\n    delete this.TL;\n    delete this.TR;\n    delete this.BL;\n    delete this.BR;\n  }\n\n  /**\n   * Creates an instance of Quadrants.\n   *\n   * @param bounds The bounds this will create quandrants for\n   * @param depth  The child depth of this element\n   *\n   * @memberOf Quadrants\n   */\n  constructor(bounds: IQuadItem, depth: number) {\n    const mid = bounds.mid;\n    this.TL = new Node<T>(bounds.x, mid.x, bounds.y, mid.y, depth);\n    this.TR = new Node<T>(mid.x, bounds.right, bounds.y, mid.y, depth);\n    this.BL = new Node<T>(bounds.x, mid.x, mid.y, bounds.bottom, depth);\n    this.BR = new Node<T>(mid.x, bounds.right, mid.y, bounds.bottom, depth);\n  }\n}\n\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n *\n * @export\n * @class Node\n */\nexport class Node<T extends IQuadItem> {\n  bounds: Bounds;\n  children: T[] = [];\n  depth: number = 0;\n  nodes: Quadrants<T>;\n\n  /**\n   * Destroys this node and ensures all child nodes are destroyed as well.\n   *\n   * @memberOf Node\n   */\n  destroy() {\n    delete this.children;\n    delete this.bounds;\n\n    if (this.nodes) {\n      this.nodes.destroy();\n      delete this.nodes;\n    }\n  }\n\n  /**\n   * Creates an instance of Node.\n   *\n   * @param l     The bounding left wall of the space this node covers\n   * @param r     The bounding right wall of the space this node covers\n   * @param t     The bounding top wall of the space this node covers\n   * @param b     The bounding bottom wall of the space this node covers\n   * @param depth The depth within the quad tree this node resides\n   *\n   * @memberOf Node\n   */\n  constructor(\n    left: number,\n    right: number,\n    top: number,\n    bottom: number,\n    depth?: number\n  ) {\n    // If params insertted\n    if (arguments.length >= 4) {\n      this.bounds = new Bounds({\n        height: top - bottom,\n        width: right - left,\n        x: left,\n        y: top\n      });\n    }\n\n    // Otherwise, make tiny start area\n    else {\n      this.bounds = new Bounds({\n        height: 1,\n        width: 1,\n        x: 0,\n        y: 0\n      });\n    }\n\n    // Ensure the depth is set\n    this.depth = depth || 0;\n  }\n\n  /**\n   * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n   * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n   * this quad tree spans (and this is the root node), the quad tree will expand to include\n   * the new child.\n   *\n   * @param child The Bounds type object to inject\n   * @param props Properties that can be retrieved with the child object if applicable\n   *\n   * @returns True if the insertion was successful\n   *\n   * @memberOf Node\n   */\n  add(child: T, props: any): boolean {\n    // This is the entry function for adding children, so we must first expand our top node\n    // To cover the area that the child is located.\n    // If we're in bounds, then let's just add the child\n    if (child.isInside(this.bounds)) {\n      return this.doAdd(child);\n    }\n\n    // Otherwise, we need to expand first\n    else {\n      this.cover(child);\n      return this.add(child, props);\n    }\n  }\n\n  /**\n   * Adds a list of new children to this quad tree. It performs the same operations as\n   * addChild for each child in the list, however, it more efficiently recalculates the\n   * bounds necessary to cover the area the children cover.\n   *\n   * @param children      List of Bounds objects to inject\n   * @param childrenProps List of props to associate with each element\n   *\n   * @memberOf Node\n   */\n  addAll(children: T[], childrenProps?: any[]) {\n    // Ensure the properties are at least defined\n    childrenProps = childrenProps || [];\n\n    // Make sure we cover the entire area of all the children.\n    // We can speed this up a lot if we first calculate the total bounds the new children covers\n    let minX = Number.MAX_VALUE;\n    let minY = Number.MAX_VALUE;\n    let maxX = -Number.MAX_VALUE;\n    let maxY = -Number.MAX_VALUE;\n\n    // Get the dimensions of the new bounds\n    children.forEach(child => {\n      if (child.x < minX) {\n        minX = child.x;\n      }\n      if (child.right > maxX) {\n        maxX = child.right;\n      }\n      if (child.bottom > maxY) {\n        maxY = child.bottom;\n      }\n      if (child.y < minY) {\n        minY = child.y;\n      }\n    });\n\n    // Make sure our bounds includes the specified bounds\n    this.cover(\n      new Bounds({\n        height: maxY - minY,\n        width: maxX - minX,\n        x: minX,\n        y: minY\n      })\n    );\n\n    // Add all of the children into the tree\n    children.forEach(child => this.doAdd(child));\n  }\n\n  /**\n   * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n   * This will cause all children to be re-injected into the tree.\n   *\n   * @param bounds The bounds to include in the tree's coverage\n   *\n   * @memberOf Node\n   */\n  cover(bounds: IQuadItem) {\n    // If we are already covering the area: abort\n    if (bounds.isInside(this.bounds)) {\n      return;\n    }\n\n    // Make our bounds cover the new area\n    this.bounds.encapsulate(bounds);\n    this.bounds.x -= 1;\n    this.bounds.y -= 1;\n    this.bounds.width += 2;\n    this.bounds.height += 4;\n    // Get all of the children underneath this node\n    const allChildren = this.gatherChildren([]);\n\n    // Destroy the split nodes\n    if (this.nodes) {\n      // Completely...destroy...\n      this.nodes.destroy();\n      delete this.nodes;\n    }\n\n    // Reinsert all children with the new dimensions in place\n    allChildren.forEach(child => this.doAdd(child));\n  }\n\n  /**\n   * When adding children, this performs the actual action of injecting the child into the tree\n   * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n   *\n   * @param child The Bounds item to inject into the tree\n   * @param props The props to remain associated with the child\n   *\n   * @returns True if the injection was successful\n   *\n   * @memberOf Node\n   */\n  doAdd(child: T): boolean {\n    // If nodes are present, then we have already exceeded the population of this node\n    if (this.nodes) {\n      if (child.isInside(this.nodes.TL.bounds)) {\n        return this.nodes.TL.doAdd(child);\n      }\n\n      if (child.isInside(this.nodes.TR.bounds)) {\n        return this.nodes.TR.doAdd(child);\n      }\n\n      if (child.isInside(this.nodes.BL.bounds)) {\n        return this.nodes.BL.doAdd(child);\n      }\n\n      if (child.isInside(this.nodes.BR.bounds)) {\n        return this.nodes.BR.doAdd(child);\n      }\n\n      // Otherwise, this is a child overlapping this border\n      this.children.push(child);\n\n      return true;\n    }\n\n    // Otherwise, we have not had a split due to population limits being exceeded\n    else if (child.isInside(this.bounds)) {\n      this.children.push(child);\n\n      // If we exceeded our population for this quadrant, it is time to split up\n      if (this.children.length > maxPopulation && this.depth < maxDepth) {\n        this.split();\n      }\n\n      return true;\n    }\n\n    // This is when there is something wrong with the insertted child. The bounds\n    // For the quad should have grown without issue, but in this case the bounds\n    // Could not grow to accomodate the child.\n    if (isNaN(child.width + child.height + child.x + child.y)) {\n      console.error(\n        \"Child did not fit into bounds because a dimension is NaN\",\n        child\n      );\n    } else if (child.area === 0) {\n      console.error(\n        \"Child did not fit into bounds because the area is zero\",\n        child\n      );\n    }\n\n    // Don't insert the child and continue\n    return true;\n  }\n\n  /**\n   * Collects all children of all the current and sub nodes into a single list.\n   *\n   * @param list The list we must aggregate children into\n   *\n   * @return The list specified as the list parameter\n   */\n  gatherChildren(list: T[]): T[] {\n    list = list.concat(this.children);\n\n    if (this.nodes) {\n      this.nodes.TL.gatherChildren(list);\n      this.nodes.TR.gatherChildren(list);\n      this.nodes.BL.gatherChildren(list);\n      this.nodes.BR.gatherChildren(list);\n    }\n\n    return list;\n  }\n\n  /**\n   * Entry query for determining query type based on input object\n   *\n   * @param bounds Can be a Bounds or a Point object\n   * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n   *               information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return An array of children that intersects with the query\n   */\n  query(bounds: IQuadItem | IPoint, visit?: IVisitFunction<T>): T[] {\n    // Query a rectangle\n    if (bounds instanceof Bounds) {\n      if (bounds.hitBounds(this.bounds)) {\n        return this.queryBounds(bounds, [], visit);\n      }\n\n      // Return an empty array when nothing is collided with\n      return [];\n    }\n\n    // Query a point\n    if (this.bounds.containsPoint(bounds)) {\n      return this.queryPoint(bounds, [], visit);\n    }\n\n    // Return an empty array when nothing is collided with\n    return [];\n  }\n\n  /**\n   * Queries children for intersection with a bounds object\n   *\n   * @param b     The Bounds to test children against\n   * @param list  The list of children to aggregate into the query\n   * @param visit A callback function that will receive the Node as it is analyzed. This gives\n   *              information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return     Returns the exact same list that was input as the list param\n   */\n  queryBounds(b: IQuadItem, list: T[], visit?: IVisitFunction<T>): T[] {\n    this.children.forEach(c => {\n      if (c.hitBounds(b)) {\n        list.push(c);\n      }\n    });\n\n    if (visit) {\n      visit(this);\n    }\n\n    if (this.nodes) {\n      if (b.hitBounds(this.nodes.TL.bounds)) {\n        this.nodes.TL.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.TR.bounds)) {\n        this.nodes.TR.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.BL.bounds)) {\n        this.nodes.BL.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.BR.bounds)) {\n        this.nodes.BR.queryBounds(b, list, visit);\n      }\n    }\n\n    return list;\n  }\n\n  /**\n   * Queries children for intersection with a point\n   *\n   * @param p     The Point to test children against\n   * @param list  The list of children to aggregate into the query\n   * @param visit A callback function that will receive the Node as it is analyzed. This gives\n   *              information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return      Returns the exact same list that was input as the list param\n   */\n  queryPoint(p: any, list: T[], visit?: IVisitFunction<T>): T[] {\n    this.children.forEach(c => {\n      if (c.containsPoint(p)) {\n        list.push(c);\n      }\n    });\n\n    if (visit) {\n      visit(this);\n    }\n\n    if (this.nodes) {\n      if (this.nodes.TL.bounds.containsPoint(p)) {\n        this.nodes.TL.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.TR.bounds.containsPoint(p)) {\n        this.nodes.TR.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.BL.bounds.containsPoint(p)) {\n        this.nodes.BL.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.BR.bounds.containsPoint(p)) {\n        this.nodes.BR.queryPoint(p, list, visit);\n      }\n    }\n\n    return list;\n  }\n\n  /**\n   * Creates four sub quadrants for this node.\n   */\n  split() {\n    // Gather all items to be handed down\n    const allChildren = this.gatherChildren([]);\n    // Gather all props for the children to be handed down as well\n    this.nodes = new Quadrants<T>(this.bounds, this.depth + 1);\n\n    this.children = [];\n\n    while (allChildren.length > 0) {\n      const child = allChildren.pop();\n      if (child) this.doAdd(child);\n    }\n  }\n\n  /**\n   * Traverses the quad tree returning every quadrant encountered\n   *\n   * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n   */\n  visit(cb: IVisitFunction<T>): void {\n    const finished = Boolean(cb(this));\n\n    if (this.nodes && !finished) {\n      this.nodes.TL.visit(cb);\n      this.nodes.TR.visit(cb);\n      this.nodes.BL.visit(cb);\n      this.nodes.BR.visit(cb);\n    }\n  }\n}\n\nexport class QuadTree<T extends IQuadItem> extends Node<T> {}\n","/**\n * The purpose of this file and processes is to take a layers attributes and\n * instance attributes and optimally pack them into blocks. As it should be known\n * an attribute and a uniform is limited by the hardware in 'blocks'. Each block\n * for webgl 1.0 is 4 floats. If you use a single float and not the rest, you have\n * used an entire block.\n *\n * Thus, we pack down the attributes into appropriate block indices and slots.\n */\n\nimport { IInstanceAttribute, InstanceAttributeSize } from \"../../types\";\nimport { Instance } from \"../../util\";\n\n/**\n * A quick representation of an available block with a convenience method to easily apply\n * metrics to an attribute if it fits.\n */\nclass Block<T extends Instance> {\n  index: number = 0;\n  available: number = 4;\n\n  constructor(blockIndex: number) {\n    this.index = blockIndex;\n  }\n\n  setAttribute(attr: IInstanceAttribute<T>) {\n    if ((attr.size || 0) <= this.available) {\n      attr.block = this.index;\n      attr.blockIndex = 4 - this.available;\n      this.available -= attr.size || 0;\n\n      return true;\n    }\n\n    return false;\n  }\n}\n\n/**\n * This loops through all attributes and ensures each attribute is applied\n */\nfunction ensureSizes<T extends Instance>(attributes: IInstanceAttribute<T>[]) {\n  attributes.forEach(attr => {\n    if (attr.atlas) {\n      attr.size = InstanceAttributeSize.FOUR;\n    }\n\n    // If the size of the attribute is not determiend at this point, we do our best\n    // to find it by whatever means possible\n    if (!attr.size) {\n      try {\n        // We inject a very phoney instance, we don't need accurate data, we will be happy if we get\n        // an array of undefineds which should be in line with the size of the attribute.\n        const check = attr.update(new Instance({}) as T);\n\n        // We see if the output is sane\n        if (check.length > 0 && check.length <= InstanceAttributeSize.FOUR) {\n          attr.size = check.length;\n        }\n      } catch (err) {\n        console.warn(\n          \"The system could not determine the size of the provided attribute. Please provide the size of the attribute:\",\n          attr\n        );\n      }\n    }\n  });\n}\n\n/**\n * This is the packing method that calculates the block and block index best suited for an attribute\n * so a layer developer does not have to worry about it.\n */\nexport function packAttributes<T extends Instance>(\n  attributes: IInstanceAttribute<T>[]\n) {\n  // First make sure each attribute has a size\n  ensureSizes(attributes);\n  // Keep a list of the blocks we have decided needs to be in use\n  const blocks = [new Block(0)];\n\n  // Loop through all attributes and pack em' in\n  attributes.forEach(attr => {\n    // Look for a block that can fit our attribute\n    const block = blocks.find(block => {\n      if (block.setAttribute(attr)) {\n        return Boolean(block);\n      }\n\n      return false;\n    });\n\n    // If our attribute did not fit into any of the existing blocks, then we must create a new block\n    // to stuff our attribute into.\n    if (!block) {\n      const newBlock = new Block(blocks.length);\n      blocks.push(newBlock);\n\n      if (!newBlock.setAttribute(attr)) {\n        console.warn(\n          \"There was a problem packing an attribute into a block. No block would accommodate it:\",\n          attr\n        );\n      }\n    }\n  });\n}\n","import { DataBounds } from \"../util/data-bounds\";\nimport { Bounds } from \"./bounds\";\n\n/**\n * Anytime this is used to express bounds of an object, it is expected\n * to behave like CSS styling with absolute positioning.\n *\n * Setting a left and a right will auto calculate width (setting width takes precedence)\n *\n * You can set numbers to a %. If no % is present all other characters will be ignored\n * (px, em, and other dimensions will not be supported...just px by default unless %)\n */\nexport type AbsolutePosition = {\n  bottom?: number | string;\n  height?: number | string;\n  left?: number | string;\n  right?: number | string;\n  top?: number | string;\n  width?: number | string;\n};\n\nfunction value(val: number | string, ref: number, scaleRatio: number) {\n  const parse = `${val}`;\n  const num = parseFloat(parse);\n\n  if (isNaN(num)) {\n    return 0;\n  }\n\n  // If this is a percentage use the reference as the num to multiply against\n  if (parse.indexOf(\"%\") > -1) {\n    return num / 100.0 * ref;\n  }\n\n  return num * scaleRatio;\n}\n\n/**\n * This evaluates an absolute position with a reference to produce meaningful bounds.\n *\n * The scaleRatio provided should be available in or for percents to have the same weighting\n * as whole number values.\n */\nexport function getAbsolutePositionBounds<T>(\n  item: AbsolutePosition,\n  reference: Bounds,\n  scaleRatio: number\n): DataBounds<T> {\n  if (reference.width === 0 || reference.height === 0) {\n    console.warn(\n      \"An AbsolutePosition evaluated to invalid dimensions.\",\n      \"Please ensure that the object provided and the reference has valid dimensions\",\n      \"to produce dimensions with width and height that are non-zero.\",\n      \"item:\",\n      item,\n      \"reference:\",\n      reference.toString()\n    );\n  }\n\n  const bounds = DataBounds.emptyBounds<T>();\n  let width;\n  let height;\n\n  // Calculate the horizontal values\n  if (item.width) {\n    bounds.width = value(item.width, reference.width, scaleRatio);\n\n    if (item.left !== undefined) {\n      bounds.x = value(item.left, reference.width, scaleRatio);\n    } else if (item.right !== undefined) {\n      bounds.x =\n        reference.width -\n        value(item.right, reference.width, scaleRatio) -\n        bounds.width;\n    }\n  } else {\n    const left = value(item.left || 0, reference.width, scaleRatio);\n    const right =\n      reference.width - value(item.right || 0, reference.width, scaleRatio);\n    width = right - left;\n\n    if (width < 0) {\n      console.warn(\n        \"An AbsolutePosition evaluated to invalid dimensions.\",\n        \"Please ensure that the object provided and the reference has valid dimensions\",\n        \"to produce dimensions with width and height that are greater than zero.\",\n        \"item:\",\n        item,\n        \"reference:\",\n        reference.toString()\n      );\n    }\n\n    bounds.x = left;\n    bounds.width = width;\n  }\n\n  // Calculate the vertical values\n  if (item.height) {\n    bounds.height = value(item.height, reference.height, scaleRatio);\n\n    if (item.top !== undefined) {\n      bounds.y = value(item.top, reference.height, scaleRatio);\n    } else if (item.bottom !== undefined) {\n      bounds.y =\n        reference.height -\n        value(item.bottom, reference.height, scaleRatio) -\n        bounds.height;\n    }\n  } else {\n    const top = value(item.top || 0, reference.height, scaleRatio);\n    const bottom =\n      reference.height - value(item.bottom || 0, reference.height, scaleRatio);\n    height = bottom - top;\n\n    if (height === undefined || height < 0) {\n      console.warn(\n        \"An AbsolutePosition evaluated to invalid dimensions.\",\n        \"Please ensure that the object provided and the reference has valid dimensions\",\n        \"to produce dimensions with width and height that are greater than zero.\",\n        \"item:\",\n        item,\n        \"reference:\",\n        reference.toString()\n      );\n    }\n\n    bounds.y = top;\n    bounds.height = height;\n  }\n\n  if (\n    bounds.width === 0 ||\n    bounds.height === 0 ||\n    isNaN(bounds.x + bounds.y + bounds.width + bounds.height)\n  ) {\n    bounds.x = 0;\n    bounds.y = 0;\n    bounds.width = reference.width;\n    bounds.height = reference.height;\n  }\n\n  return bounds;\n}\n","import { IPoint } from \"../../primitives/point\";\nimport { IProjection, PickType } from \"../../types\";\nimport { EventManager } from \"../event-manager\";\nimport { Layer } from \"../layer\";\nimport { LayerSurface } from \"../layer-surface\";\nimport {\n  IDragMetrics,\n  IMouseInteraction,\n  SceneView\n} from \"../mouse-event-manager\";\n\nfunction isDefined<T>(val: T | null | undefined): val is T {\n  return Boolean(val);\n}\n\n/**\n * This class is an injected event manager for the surface, it specifically handles taking in mouse events intended for view interactions\n * and broadcasts them to the layers that have picking enabled, thus allowing the layers to respond to\n * mouse view locations and broadcast Instance interactions based on the interaction with the View the layer is a part of\n *\n * In Summary: This is an adapter that takes in interactions to the views and injects those events into the layers associated with\n * the views so that the layers can translate the events to gestures.\n */\nexport class LayerMouseEvents extends EventManager {\n  /** This tracks which views have the mouse over them so we can properly broadcast view is out events */\n  isOver = new Map<SceneView, boolean>();\n  /** This is the surface this manager is aiding with broadcasting events to layers */\n  sceneViews: SceneView[];\n  /**\n   * This is the surface this LayerMouseEvent Controller is operating on behalf of. We use this to trigger,\n   * pre-layer processing items, such as color pick narrowing prior to the Layers receiving the event.\n   */\n  surface: LayerSurface;\n\n  constructor(surface: LayerSurface) {\n    super();\n    this.surface = surface;\n    this.sceneViews = surface.sceneViews;\n  }\n\n  getSceneViewsUnderMouse(e: IMouseInteraction) {\n    const sceneViewByViewId = new Map<string, SceneView>();\n\n    // Map the scene views by the view's identifiers\n    for (const sceneView of this.sceneViews) {\n      sceneViewByViewId.set(sceneView.view.id, sceneView);\n    }\n\n    // Now retrieve and convert each view under the mouse to the scene view it coincides with\n    return e.viewsUnderMouse\n      .map(viewItem => sceneViewByViewId.get(viewItem.view.id))\n      .filter(isDefined);\n  }\n\n  getMouseByViewId(e: IMouseInteraction) {\n    // This is the mouse position for the provided view in view space\n    const viewMouseByViewId = new Map<string, IPoint>();\n\n    for (const viewItem of e.viewsUnderMouse) {\n      viewMouseByViewId.set(viewItem.view.id, viewItem.mouse);\n    }\n\n    return viewMouseByViewId;\n  }\n\n  handleClick(e: IMouseInteraction, button: number) {\n    this.handleInteraction(e, (layer, view, mouse) =>\n      layer.interactions.handleMouseClick(view, mouse, button)\n    );\n  }\n\n  handleDrag(e: IMouseInteraction, _drag: IDragMetrics) {\n    this.handleInteraction(e, (layer, view, mouse) =>\n      layer.interactions.handleMouseDrag(view, mouse)\n    );\n  }\n\n  handleInteraction(\n    e: IMouseInteraction,\n    callback: (layer: Layer<any, any>, view: IProjection, mouse: IPoint) => void\n  ) {\n    // Get all of the scenes under the mouse\n    const sceneViews = this.getSceneViewsUnderMouse(e);\n    // Get a lookup of a view id to the mouse position in the view\n    const viewMouseByViewId = this.getMouseByViewId(e);\n\n    // For every view of every scene, we must tell it's layers it's world space is receiving mouse interactions\n    for (const sceneView of sceneViews) {\n      this.handleSceneView(sceneView, viewMouseByViewId, callback);\n    }\n\n    return sceneViews;\n  }\n\n  handleMouseDown(e: IMouseInteraction, button: number) {\n    this.handleInteraction(e, (layer, view, mouse) =>\n      layer.interactions.handleMouseDown(view, mouse, button)\n    );\n  }\n\n  handleMouseUp(e: IMouseInteraction, button: number) {\n    this.handleInteraction(e, (layer, view, mouse) =>\n      layer.interactions.handleMouseUp(view, mouse, button)\n    );\n  }\n\n  handleMouseOver(_e: IMouseInteraction) {\n    // We let the mouse move event handle the registration of moused over views\n  }\n\n  handleMouseOut(e: IMouseInteraction) {\n    // Get a lookup of a view id to the mouse position in the view\n    const viewMouseByViewId = this.getMouseByViewId(e);\n    const screen = e.screen.mouse;\n\n    // All views that are moused over should no longer be considered over and broadcast a mouse out\n    this.isOver.forEach((_flag, sceneView) => {\n      // Since we are leaving the view we must make the view relative cooridinates fromt he screen space coords\n      viewMouseByViewId.set(\n        sceneView.view.id,\n        sceneView.view.screenToView(screen)\n      );\n\n      this.handleSceneView(sceneView, viewMouseByViewId, (layer, view, mouse) =>\n        layer.interactions.handleMouseOut(view, mouse)\n      );\n    });\n\n    // Nothing is over anymore\n    this.isOver.clear();\n  }\n\n  handleMouseMove(e: IMouseInteraction) {\n    if (this.surface) {\n      this.surface.updateColorPickRange(\n        [e.screen.mouse.x, e.screen.mouse.y],\n        e.viewsUnderMouse.map(v => v.view)\n      );\n    }\n\n    // Get all of the scenes we have interacted with, and broadcast a move event for each\n    const allSceneViews = this.handleInteraction(e, (layer, view, mouse) =>\n      layer.interactions.handleMouseMove(view, mouse)\n    );\n    // Get a lookup of a view id to the mouse position in the view\n    const viewMouseByViewId = this.getMouseByViewId(e);\n    // Get the position of the mouse on the screen\n    const screen = e.screen.mouse;\n\n    // For quick lookups map all of the current SceneViews that are over\n    const currentSceneViews = new Map<SceneView, boolean>();\n    allSceneViews.forEach(v => currentSceneViews.set(v, true));\n\n    // Detect which of the views are newly over\n    currentSceneViews.forEach((_flag, sceneView) => {\n      if (!this.isOver.get(sceneView)) {\n        this.handleSceneView(\n          sceneView,\n          viewMouseByViewId,\n          (layer, view, mouse) =>\n            layer.interactions.handleMouseOver(view, mouse)\n        );\n      }\n    });\n\n    // Detect which of the views are no longer over\n    this.isOver.forEach((_flag, sceneView) => {\n      if (!currentSceneViews.get(sceneView)) {\n        // Since these views were not interacted with, we must create the mouse interaction position\n        viewMouseByViewId.set(\n          sceneView.view.id,\n          sceneView.view.screenToView(screen)\n        );\n\n        this.handleSceneView(\n          sceneView,\n          viewMouseByViewId,\n          (layer, view, mouse) => layer.interactions.handleMouseOut(view, mouse)\n        );\n      }\n    });\n\n    // Update the current views that are over to the currently over views for next event\n    this.isOver = currentSceneViews;\n  }\n\n  handleSceneView(\n    sceneView: SceneView,\n    viewMouseByViewId: Map<string, IPoint>,\n    callback: (layer: Layer<any, any>, view: IProjection, mouse: IPoint) => void\n  ) {\n    const view = sceneView.view;\n    const mouse = viewMouseByViewId.get(view.id);\n\n    if (mouse) {\n      for (const layer of sceneView.scene.layers) {\n        if (layer.picking && layer.picking.type !== PickType.NONE) {\n          callback(layer, view, mouse);\n        }\n      }\n    }\n  }\n\n  handleWheel(_e: IMouseInteraction) {\n    // TODO: This may need to be implemented. As of right now, there is no particular benefit\n  }\n}\n","import { IColorPickingData } from \"../types\";\nimport { Vec2 } from \"./vector\";\n\n/**\n * This analyzes the rendered data for color picking and outputs the metrics and data needed\n * for the operation.\n */\nexport function analyzeColorPickingRendering(\n  mouse: Vec2,\n  data: Uint8Array,\n  width: number,\n  height: number\n) {\n  const pickingData: IColorPickingData = {\n    allColors: [],\n    colorData: data,\n    dataHeight: height,\n    dataWidth: width,\n    mouse,\n    nearestColor: 0\n  };\n\n  const uniqueColors = new Map<number, boolean>();\n  let pixelIndex = 0;\n  const colors: number[][] = [];\n  const mouseX: number = width / 2;\n  const mouseY: number = height / 2;\n\n  let nearestColor = 0x000000;\n  let distance = Number.MAX_SAFE_INTEGER;\n\n  for (let i = 0; i < height; ++i) {\n    const row: number[] = [];\n    colors.push(row);\n\n    for (let k = 0; k < width; ++k) {\n      const r = data[pixelIndex];\n      const g = data[pixelIndex + 1];\n      const b = data[pixelIndex + 2];\n      pixelIndex += 4;\n\n      const color = (r << 16) | (g << 8) | b;\n      uniqueColors.set(color, true);\n      row.push(color);\n\n      // If the color is not black, let's test the distance against currnet nearest color\n      if (color !== 0x000000) {\n        const dx = k - mouseX;\n        const dy = i - mouseY;\n        const testDistance = dx * dx + dy * dy;\n\n        if (testDistance < distance) {\n          distance = testDistance;\n          nearestColor = color;\n        }\n      }\n    }\n  }\n\n  // Apply all o fthe unique colors that were discovered within the rendering\n  pickingData.allColors = Array.from(uniqueColors.keys());\n  // The nearest color will be the element in the middle of the array of colors\n  pickingData.nearestColor = nearestColor;\n\n  return pickingData;\n}\n","module.exports = \"// This portion is where the shader assigns the picking color that gets passed to the fragment shader\\n  _picking_color_pass_ = _pickingColor;\\n\"","module.exports = \"lowp vec4 setColor(vec4 color) {\\n  gl_FragColor = color;\\n  return gl_FragColor;\\n}\\n\"","module.exports = \"precision lowp float;\\n\\n// This contains the method required to be used on a fragment shader when a layer desires to use\\n// PickType.SINGLE (color picking).\\nvarying vec4 _picking_color_pass_;\\n\\nvec4 setColor(vec4 color) {\\n  gl_FragColor = mix(color, _picking_color_pass_, pickingActive);\\n\\n  if (color.a == 0.0) {\\n    discard;\\n  }\\n\\n  return gl_FragColor;\\n}\\n\"","module.exports = \"// This is the varying auto generated for the fragment shader that is needed in the vertex shader to pass the\\n// color for the instance through to the fragment shader\\nvarying vec4 _picking_color_pass_;\\n\"","module.exports = \"// These are projection methods utilizing the simpler camera breakdown approach\\n\\nvec3 cameraSpace(vec3 world) {\\n  return (world + cameraOffset) * cameraScale;\\n}\\n\\nvec3 cameraSpaceSize(vec3 worldSize) {\\n  return worldSize * cameraScale;\\n}\\n\\nvec4 clipSpace(vec3 world) {\\n  return vec4(((projection * modelView) * vec4(cameraSpace(world), 1.0)).xyz, 1.0);\\n}\\n\\nvec4 clipSpaceSize(vec3 worldSize) {\\n  return vec4(((projection * modelView) * vec4(cameraSpaceSize(worldSize), 0.0)).xyz, 1.0);\\n}\\n\"","module.exports = \"// When instancing is enabled, it causes a major list of uniforms to be generated\\n// it also generates a massive search tree to retrieve the correct unforms in question.\\n${instanceUniformDeclarations}\\n\\n// This is the uniforms provided by the system along with the uniforms created by the layer\\n${layerUniforms}\\n\\n// This is the attributes generated for vertex attributes\\n${vertexAttributes}\\n\\n// This is the methods and set up needed to retrieve a block of data for an instance\\n${instanceDataRetrieval}\\n\\n// This is the methods generated for the automated easing of attributes\\n${easingMethods}\\n\"","module.exports = \"// This is the injected dereferencing of the instance attributes\\n  ${instanceDestructuring}\\n\\n  // This is a special injected instance attribute. It lets the system\\n  // control specific instances ability to draw, which allows the backend\\n  // system greater control on how it optimizes draw calls and it's buffers.\\n  if (_active == 0.0) {\\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n\\n    // Quick exit to prevent any geometry from arising from the instance\\n    return;\\n  }\\n\\n  ${picking}\\n\"","module.exports = \"precision highp float;\\n\\n// This is the fragment shader generated by the system\\n${layerUniforms}\\n\\n${picking}\\n\\n// --------------- The fragment shader provided by the layer ------------------\\n${shader}\\n\"","module.exports = \"// This is the vertex shader generated by the system\\n${shaderInput}\\n${projectionMethods}\\n${picking}\\n// --------------- Vertex shader provided by the layer -----------------\\n${shader}\\n\"","module.exports = \"int instanceSize = ${instanceBlockCount};\\n\\nvec4 getBlock(int index, int instanceIndex) {\\n  return instanceData[(instanceSize * instanceIndex) + index];\\n}\\n\"","import * as Three from \"three\";\nimport { Instance } from \"../../instance-provider/instance\";\nimport { Layer } from \"../../surface/layer\";\nimport { LayerBufferType } from \"../../surface/layer-processing/layer-buffer-type\";\nimport {\n  IInstanceAttribute,\n  IInstancingUniform,\n  InstanceAttributeSize\n} from \"../../types\";\nimport { AutoEasingLoopStyle } from \"../../util/auto-easing-method\";\nimport { shaderTemplate } from \"../../util/shader-templating\";\nimport { templateVars } from \"../template-vars\";\nimport { makeInstanceUniformNameArray } from \"./make-instance-uniform-name\";\n\nconst instanceRetrievalArrayFragment = require(\"../fragments/instance-retrieval-array.vs\");\n\n/** Defines the elements for destructuring out of a vector */\nconst VECTOR_COMPONENTS = [\"x\", \"y\", \"z\", \"w\"];\n\n/** Converts a size to a shader type */\nconst sizeToType: { [key: number]: string } = {\n  1: \"float\",\n  2: \"vec2\",\n  3: \"vec3\",\n  4: \"vec4\",\n  9: \"mat3\",\n  16: \"mat4\",\n  /** This is the special case for instance attributes that want an atlas resource */\n  99: \"vec4\"\n};\n\n/**\n * This sorts attributes specific to how they need to be destructured. For example:\n * easing attributes MUST appear AFTER all of the specially integrated attributes that were generated\n * such as start times and durations.\n */\nfunction orderByPriority(\n  a: IInstanceAttribute<any>,\n  b: IInstanceAttribute<any>\n) {\n  if (a.easing && !b.easing) return 1;\n  return -1;\n}\n\nexport function makeUniformArrayDeclaration(totalBlocks: number) {\n  return {\n    fragment: `uniform vec4 ${makeInstanceUniformNameArray()}[${totalBlocks}];`,\n    materialUniforms: [\n      {\n        name: makeInstanceUniformNameArray(),\n        type: \"4fv\",\n        value: new Array(totalBlocks)\n          .fill(0)\n          .map(() => new Three.Vector4(0, 0, 0, 0))\n      }\n    ] as IInstancingUniform[]\n  };\n}\n\nexport function makeInstanceRetrievalArray(blocksPerInstance: number) {\n  const templateOptions: { [key: string]: string } = {};\n  templateOptions[templateVars.instanceBlockCount] = `${blocksPerInstance}`;\n\n  const required = {\n    name: \"makeInstanceRetrievalArray\",\n    values: [templateVars.instanceBlockCount]\n  };\n\n  const results = shaderTemplate({\n    options: templateOptions,\n    required,\n    shader: instanceRetrievalArrayFragment\n  });\n\n  return results.shader;\n}\n\nexport function makeInstanceDestructuringArray<T extends Instance>(\n  layer: Layer<T, any>,\n  instanceAttributes: IInstanceAttribute<T>[],\n  blocksPerInstance: number\n) {\n  let out = \"\";\n\n  const orderedAttributes = instanceAttributes.slice(0).sort(orderByPriority);\n\n  if (layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE) {\n    out = instanceAttributeDestructuring(orderedAttributes);\n  } else {\n    out = uniformInstancingDestructuring(orderedAttributes, blocksPerInstance);\n  }\n\n  return out;\n}\n\nfunction instanceAttributeDestructuring<T extends Instance>(\n  orderedAttributes: IInstanceAttribute<T>[]\n) {\n  let out = \"\";\n\n  orderedAttributes.forEach(attribute => {\n    // If this is the source easing attribute, we must add it in as an eased method along with a calculation for the\n    // Easing interpolation time value based on the current time and the injected start time of the change.\n    if (attribute.easing && attribute.size) {\n      // Make the time calculation for the easing equation\n      out += makeAutoEasingTiming(attribute);\n\n      out += `  ${sizeToType[attribute.size]} ${attribute.name} = ${\n        attribute.easing.methodName\n      }(_${attribute.name}_start, _${attribute.name}_end, _${\n        attribute.name\n      }_time);\\n`;\n    }\n  });\n\n  return out;\n}\n\nfunction uniformInstancingDestructuring<T extends Instance>(\n  orderedAttributes: IInstanceAttribute<T>[],\n  blocksPerInstance: number\n) {\n  let out = \"int instanceIndex = int(instance);\";\n\n  // Generate the blocks\n  for (let i = 0; i < blocksPerInstance; ++i) {\n    out += `  vec4 block${i} = getBlock(${i}, instanceIndex);\\n`;\n  }\n\n  orderedAttributes.forEach(attribute => {\n    const block = attribute.block;\n\n    // If this is the source easing attribute, we must add it in as an eased method along with a calculation for the\n    // Easing interpolation time value based on the current time and the injected start time of the change.\n    if (attribute.easing && attribute.size) {\n      if (attribute.size === InstanceAttributeSize.FOUR) {\n        out += `  ${sizeToType[attribute.size]} _${\n          attribute.name\n        }_end = block${block};\\n`;\n      } else {\n        out += `  ${sizeToType[attribute.size || 1]} _${\n          attribute.name\n        }_end = block${block}.${makeVectorSwizzle(\n          attribute.blockIndex || 0,\n          attribute.size || 1\n        )};\\n`;\n      }\n\n      // Generate the proper timing calculation for the easing involved\n      out += makeAutoEasingTiming(attribute);\n\n      out += `  ${sizeToType[attribute.size]} ${attribute.name} = ${\n        attribute.easing.methodName\n      }(_${attribute.name}_start, _${attribute.name}_end, _${\n        attribute.name\n      }_time);\\n`;\n    }\n\n    // If we have a size the size of a block, then don't swizzle the vector\n    else if (attribute.size === InstanceAttributeSize.FOUR) {\n      out += `  ${sizeToType[attribute.size]} ${\n        attribute.name\n      } = block${block};\\n`;\n    }\n\n    // If the attribute is an atlas, then we use the special ATLAS size and don't swizzle the vector\n    else if (attribute.atlas) {\n      out += `  ${sizeToType[InstanceAttributeSize.ATLAS]} ${\n        attribute.name\n      } = block${block};\\n`;\n    }\n\n    // Do normal destructuring with any other size and type\n    else {\n      out += `  ${sizeToType[attribute.size || 1]} ${\n        attribute.name\n      } = block${block}.${makeVectorSwizzle(\n        attribute.blockIndex || 0,\n        attribute.size || 1\n      )};\\n`;\n    }\n  });\n\n  return out;\n}\n\nfunction makeAutoEasingTiming<T extends Instance>(\n  attribute: IInstanceAttribute<T>\n) {\n  if (!attribute.easing) {\n    return;\n  }\n\n  let out = \"\";\n\n  switch (attribute.easing.loop) {\n    // Continuous means letting the time go from 0 to infinity\n    case AutoEasingLoopStyle.CONTINUOUS: {\n      const time = `_${attribute.name}_time`;\n      const startTime = `_${attribute.name}_start_time`;\n      const duration = `_${attribute.name}_duration`;\n\n      out += `  float ${time} = (currentTime - ${startTime}) / ${duration};\\n`;\n      break;\n    }\n\n    // Repeat means going from 0 to 1 then 0 to 1 etc etc\n    case AutoEasingLoopStyle.REPEAT: {\n      const time = `_${attribute.name}_time`;\n      const startTime = `_${attribute.name}_start_time`;\n      const duration = `_${attribute.name}_duration`;\n\n      out += `  float ${time} = clamp(fract((currentTime - ${startTime}) / ${duration}), 0.0, 1.0);\\n`;\n      break;\n    }\n\n    // Reflect means going from 0 to 1 then 1 to 0 then 0 to 1 etc etc\n    case AutoEasingLoopStyle.REFLECT: {\n      const time = `_${attribute.name}_time`;\n      const timePassed = `_${attribute.name}_timePassed`;\n      const startTime = `_${attribute.name}_start_time`;\n      const duration = `_${attribute.name}_duration`;\n      const pingPong = `_${attribute.name}_pingPong`;\n\n      // Get the time passed in a linear fashion\n      out += `  float ${timePassed} = (currentTime - ${startTime}) / ${duration};\\n`;\n      // Make a triangle wave from the time passed to ping pong the value\n      out += `  float ${pingPong} = abs((fract(${timePassed} / 2.0)) - 0.5) * 2.0;\\n`;\n      // Ensure we're clamped to the right values\n      out += `  float ${time} = clamp(${pingPong}, 0.0, 1.0);\\n`;\n      break;\n    }\n\n    // No loop means just linear time\n    case AutoEasingLoopStyle.NONE:\n    default: {\n      const time = `_${attribute.name}_time`;\n      const duration = `_${attribute.name}_duration`;\n      const startTime = `_${attribute.name}_start_time`;\n\n      out += `  float ${time} = clamp((currentTime - ${startTime}) / ${duration}, 0.0, 1.0);\\n`;\n      break;\n    }\n  }\n\n  return out;\n}\n\nfunction makeVectorSwizzle(start: number, size: number) {\n  return VECTOR_COMPONENTS.slice(start, start + size).join(\"\");\n}\n","/**\n * The goal of this file is to take in model attributes and instance attributes specified\n * and inject the proper attributes into the shaders so the implementor of the shader does\n * not worry about syncing attribute and uniform names between the JS\n */\nimport { Instance } from \"../../instance-provider/instance\";\nimport { ILayerProps, Layer } from \"../../surface/layer\";\nimport { LayerBufferType } from \"../../surface/layer-processing/layer-buffer-type\";\nimport {\n  IInstanceAttribute,\n  IInstancingUniform,\n  InstanceAttributeSize,\n  IShaders,\n  IUniform,\n  IVertexAttribute,\n  PickType,\n  ShaderInjectionTarget\n} from \"../../types\";\nimport {\n  IShaderTemplateRequirements,\n  shaderTemplate\n} from \"../../util/shader-templating\";\nimport { WebGLStat } from \"../../util/webgl-stat\";\nimport { templateVars } from \"../template-vars\";\nimport { instanceAttributeShaderName } from \"./instance-attribute-shader-name\";\nimport {\n  makeInstanceDestructuringArray,\n  makeInstanceRetrievalArray,\n  makeUniformArrayDeclaration\n} from \"./uniform-instance-block-array\";\n\n// These are all of the necessary fragments that will comprise our shader that is generated\nconst vertexShaderComposition = require(\"../fragments/vertex-shader-composition.vs\");\nconst fragmentShaderComposition = require(\"../fragments/fragment-shader-composition.fs\");\nconst instanceDestructuringArray = require(\"../fragments/instance-destructuring-array.vs\");\nconst shaderInput = require(\"../fragments/shader-input.vs\");\nconst projectionMethods = require(\"../fragments/projection-methods.vs\");\n\n// Constants\n\n/**\n * Defines how many floats are available in a uniform block\n * What is a uniform block you ask? Why let me tell you! It is how opengl stores and communicates uniforms\n * to the GPU. Whenever you declare a uniform, it will use a hunk of memory. You can see how many uniforms\n * a GPU can have via the paramter MAX_VERTEX_UNIFORM_VECTORS. The number returned is the number of blocks\n * we can use for uniforms in the vertex shader. A BLOCK is an entire vec4.\n *\n * When you declare a uniform in your shader, it will use an entire BLOCK at the MINIMUM.\n *\n * A uniform float uses 1 block. vec2 uses 1 block. vec3 uses one block. vec4 uses one block.\n * mat4 uses 4 blocks. mat3 uses 3 blocks.\n *\n * etc etc.\n */\nconst MAX_USE_PER_BLOCK = 4;\n\n/** Converts a size to a shader type */\nconst sizeToType: { [key: number]: string } = {\n  1: \"float\",\n  2: \"vec2\",\n  3: \"vec3\",\n  4: \"vec4\",\n  9: \"mat3\",\n  16: \"mat4\",\n  99: \"sampler2D\"\n};\n\nfunction calculateUniformBlockUseage(uniforms: IUniform[]) {\n  let count = 0;\n\n  for (let i = 0, end = uniforms.length; i < end; ++i) {\n    count += Math.ceil(uniforms[i].size / 4);\n  }\n\n  return count;\n}\n\nexport interface IInjectionDetails {\n  fs: string;\n  materialUniforms: IInstancingUniform[];\n  maxInstancesPerBuffer: number;\n  vs: string;\n}\n\n/**\n * This method is the main algorithm for piecing together all of the attributes necessary\n * and injecting them into the shaders.\n *\n * @param shaders\n * @param vertexAttributes\n * @param instanceAttributes\n */\nexport function injectFragments<T extends Instance, U extends ILayerProps<T>>(\n  layer: Layer<T, U>,\n  shaders: IShaders,\n  vertexAttributes: IVertexAttribute[],\n  instanceAttributes: IInstanceAttribute<any>[],\n  uniforms: IUniform[]\n): IInjectionDetails {\n  const shaderInputMetrics = generateShaderInputs(\n    layer,\n    vertexAttributes,\n    instanceAttributes,\n    uniforms\n  );\n\n  let templateOptions: { [key: string]: string } = {\n    [templateVars.projectionMethods]: generateProjectionMethods(),\n    [templateVars.picking]: generateVertexPicking(layer),\n    [templateVars.shaderInput]: shaderInputMetrics.fragment,\n    [templateVars.shader]: generateVertexShader(\n      layer,\n      shaders,\n      instanceAttributes,\n      shaderInputMetrics.metrics.maxInstancesPerBuffer,\n      shaderInputMetrics.metrics.blocksPerInstance\n    )\n  };\n\n  let required = {\n    name: \"vertex shader composition\",\n    values: [\n      templateVars.projectionMethods,\n      templateVars.shaderInput,\n      templateVars.shader\n    ]\n  };\n\n  // If our layer is using color picking, then we must require the shader to include the ${picking} annotation\n  // To receive the fragment picking method\n  if (layer.picking.type === PickType.SINGLE) {\n    required.values.push(templateVars.picking);\n  }\n\n  const vertexShaderResults = shaderTemplate({\n    options: templateOptions,\n    required,\n    shader: vertexShaderComposition\n  });\n\n  templateOptions = {\n    [templateVars.layerUniforms]: generateUniforms(\n      uniforms,\n      ShaderInjectionTarget.FRAGMENT\n    ),\n    [templateVars.shader]: generateFragmentShader(shaders),\n    [templateVars.picking]: generateFragmentPickingMethod(layer)\n  };\n\n  required = {\n    name: \"fragment shader composition\",\n    values: [templateVars.layerUniforms, templateVars.shader]\n  };\n\n  // If our layer is using color picking, then we must require the shader to include the ${picking} annotation\n  // To receive the fragment picking method\n  if (layer.picking.type === PickType.SINGLE) {\n    required.values.push(templateVars.picking);\n  }\n\n  const fragmentShaderResults = shaderTemplate({\n    options: templateOptions,\n    required,\n    shader: fragmentShaderComposition\n  });\n\n  return {\n    fs: fragmentShaderResults.shader,\n    materialUniforms: shaderInputMetrics.materialUniforms,\n    maxInstancesPerBuffer: shaderInputMetrics.metrics.maxInstancesPerBuffer,\n    vs: vertexShaderResults.shader\n  };\n}\n\n/**\n * Creates the projection method fragment\n */\nfunction generateProjectionMethods() {\n  const templateOptions: { [key: string]: string } = {};\n  const required: IShaderTemplateRequirements = {\n    name: \"projection methods\",\n    values: []\n  };\n\n  const results = shaderTemplate({\n    options: templateOptions,\n    required,\n    shader: projectionMethods\n  });\n\n  return results.shader;\n}\n\n/**\n * Generates the fragments for shader IO such as vertex and instance attributes\n */\nfunction generateShaderInputs<T extends Instance, U extends ILayerProps<T>>(\n  layer: Layer<T, U>,\n  vertexAttributes: IVertexAttribute[],\n  instanceAttributes: IInstanceAttribute<T>[],\n  uniforms: IUniform[]\n) {\n  const templateOptions: { [key: string]: string } = {};\n\n  let instancingInfo;\n\n  if (layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE) {\n    instancingInfo = {\n      materialUniforms: [],\n      metrics: {\n        blocksPerInstance: 0,\n        maxInstancesPerBuffer: 0\n      }\n    };\n\n    templateOptions.instanceDataRetrieval = \"\";\n    templateOptions.instanceUniformDeclarations = \"\";\n  } else {\n    instancingInfo = generateInstanceDataLookupOptions(\n      layer,\n      templateOptions,\n      instanceAttributes,\n      uniforms\n    );\n  }\n\n  const additionalOptions: { [key: string]: string } = {\n    [templateVars.layerUniforms]: generateUniforms(\n      uniforms,\n      ShaderInjectionTarget.VERTEX\n    ),\n    [templateVars.vertexAttributes]: generateVertexAttributes(\n      layer,\n      vertexAttributes,\n      instanceAttributes\n    ),\n    [templateVars.easingMethods]: generateEasingMethods(instanceAttributes)\n  };\n\n  Object.assign(templateOptions, additionalOptions);\n\n  const required: IShaderTemplateRequirements = {\n    name: \"shader input\",\n    values: [\n      templateVars.instanceDataRetrieval,\n      templateVars.instanceUniformDeclarations,\n      templateVars.layerUniforms,\n      templateVars.vertexAttributes,\n      templateVars.easingMethods\n    ]\n  };\n\n  const results = shaderTemplate({\n    options: templateOptions,\n    required,\n    shader: shaderInput\n  });\n\n  return {\n    fragment: results.shader,\n    materialUniforms: instancingInfo.materialUniforms,\n    metrics: instancingInfo.metrics\n  };\n}\n\n/**\n * Generates the easing methods for the Shader specified by each attribute\n */\nfunction generateEasingMethods<T extends Instance>(\n  instanceAttributes: IInstanceAttribute<T>[]\n) {\n  const methods = new Map<string, Map<InstanceAttributeSize, string>>();\n  let out = \"\";\n\n  // First dedupe the methods needed by their method name\n  instanceAttributes.forEach(attribute => {\n    if (attribute.easing && attribute.size) {\n      let methodSizes = methods.get(attribute.easing.methodName);\n\n      if (!methodSizes) {\n        methodSizes = new Map<InstanceAttributeSize, string>();\n        methods.set(attribute.easing.methodName, methodSizes);\n      }\n\n      methodSizes.set(attribute.size, attribute.easing.gpu);\n    }\n  });\n\n  const required: IShaderTemplateRequirements = {\n    name: \"Easing Method Generation\",\n    values: [templateVars.easingMethod]\n  };\n\n  // Now generate the full blown method for each element. We create overloaded methods for\n  // Each method name for each vector size required\n  methods.forEach(\n    (methodSizes: Map<InstanceAttributeSize, string>, methodName: string) => {\n      methodSizes.forEach((method, size) => {\n        const sizeType = sizeToType[size];\n\n        const templateOptions: { [key: string]: string } = {\n          [templateVars.easingMethod]: `${sizeType} ${methodName}(${sizeType} start, ${sizeType} end, float t)`,\n          [templateVars.T]: `${sizeType}`\n        };\n\n        const results = shaderTemplate({\n          options: templateOptions,\n          required,\n          shader: method\n        });\n\n        out += `${results.shader}\\n`;\n      });\n    }\n  );\n\n  return out;\n}\n\n/**\n * Generates all of the uniforms that are provided by the shader IO.\n */\nfunction generateUniforms(\n  uniforms: IUniform[],\n  injectionType: ShaderInjectionTarget\n) {\n  let out = \"\";\n  const injection = injectionType || ShaderInjectionTarget.VERTEX;\n\n  uniforms.forEach(uniform => {\n    uniform.shaderInjection =\n      uniform.shaderInjection || ShaderInjectionTarget.VERTEX;\n\n    if (\n      uniform.shaderInjection === injection ||\n      uniform.shaderInjection === ShaderInjectionTarget.ALL\n    ) {\n      out += `uniform ${uniform.qualifier || \"\"}${\n        uniform.qualifier ? \" \" : \"\"\n      }${sizeToType[uniform.size]} ${uniform.name};\\n`;\n    }\n  });\n\n  return out;\n}\n\n/**\n * This takes in the layer's vertex shader and transforms any required templating within the\n * shader.\n */\nfunction generateVertexShader<T extends Instance, U extends ILayerProps<T>>(\n  layer: Layer<T, U>,\n  shaders: IShaders,\n  instanceAttributes: IInstanceAttribute<T>[],\n  _maxInstancesPerBuffer: number,\n  blocksPerInstance: number\n) {\n  const templateOptions: { [key: string]: string } = {\n    [templateVars.attributes]: makeInstanceAttributeReferences(\n      layer,\n      instanceAttributes,\n      blocksPerInstance\n    )\n  };\n\n  const required = {\n    name: \"layer vertex shader\",\n    values: [templateVars.attributes]\n  };\n\n  const results = shaderTemplate({\n    options: templateOptions,\n    required,\n    shader: shaders.vs\n  });\n\n  return results.shader;\n}\n\n/**\n * This generates the header portion required for vertex picking to work\n */\nfunction generateVertexPicking(layer: Layer<any, any>) {\n  if (layer.picking.type === PickType.SINGLE) {\n    return require(\"../fragments/color-picking-vertex-header.vs\");\n  }\n\n  return \"\";\n}\n\n/**\n * This generates the fragment that defines the picking methods\n */\nfunction generateFragmentPickingMethod(layer: Layer<any, any>) {\n  if (layer.picking.type === PickType.SINGLE) {\n    return require(\"../fragments/color-picking-method.fs\");\n  }\n\n  return require(\"../fragments/color-picking-disabled.fs\");\n}\n\nfunction generateFragmentShader(shaders: IShaders) {\n  const templateOptions: { [key: string]: string } = {};\n\n  const required: IShaderTemplateRequirements = {\n    name: \"layer fragment shader\",\n    values: []\n  };\n\n  const results = shaderTemplate({\n    options: templateOptions,\n    required,\n    shader: shaders.fs\n  });\n\n  return results.shader;\n}\n\n/**\n * This generates the inline attribute references needed to be able to reference instance attribute\n * vars.\n */\nfunction makeInstanceAttributeReferences<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(\n  layer: Layer<T, U>,\n  instanceAttributes: IInstanceAttribute<T>[],\n  blocksPerInstance: number\n) {\n  const templateOptions: { [key: string]: string } = {};\n  templateOptions[templateVars.blocksPerInstance] = `${blocksPerInstance}`;\n  templateOptions[\n    templateVars.instanceDestructuring\n  ] = makeInstanceDestructuringArray(\n    layer,\n    instanceAttributes,\n    blocksPerInstance\n  );\n  templateOptions[templateVars.picking] = makePickingDestructuring(layer);\n\n  const required = {\n    name: \"instance attributes fragment\",\n    values: [templateVars.instanceDestructuring]\n  };\n\n  // If picking is enabled, then we require the picking set up that we inject into the destructuring portion\n  // Of the shader\n  if (layer.picking.type === PickType.SINGLE) {\n    required.values.push(templateVars.picking);\n  }\n\n  const results = shaderTemplate({\n    options: templateOptions,\n    required,\n    shader: instanceDestructuringArray\n  });\n\n  return results.shader;\n}\n\n/**\n * This generates the portion of picking logic that is injected into the destructuring portion of the shader\n */\nfunction makePickingDestructuring(layer: Layer<any, any>) {\n  if (layer.picking.type === PickType.SINGLE) {\n    return require(\"../fragments/color-picking-assignment.vs\");\n  }\n\n  return \"\";\n}\n\n/**\n * This generates the model attribute declarations\n */\nfunction generateVertexAttributes(\n  layer: Layer<any, any>,\n  vertexAttributes: IVertexAttribute[],\n  instanceAttributes: IInstanceAttribute<any>[]\n) {\n  let out = \"\";\n\n  vertexAttributes.forEach(attribute => {\n    out += `attribute ${sizeToType[attribute.size]} ${attribute.qualifier ||\n      \"\"}${(attribute.qualifier && \" \") || \"\"} ${attribute.name};\\n`;\n  });\n\n  if (layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE) {\n    out += \"\\n// Instance Attributes\\n\";\n    instanceAttributes.forEach(attribute => {\n      out += `attribute ${\n        sizeToType[attribute.size || 1]\n      } ${attribute.qualifier || \"\"}${(attribute.qualifier && \" \") ||\n        \"\"} ${instanceAttributeShaderName(attribute)};\\n`;\n    });\n  }\n\n  return out;\n}\n\n/**\n * This method generates the chunk of shader that is responsible for providing\n */\nfunction generateInstanceDataLookupOptions<\n  T extends Instance,\n  U extends ILayerProps<T>\n>(\n  layer: Layer<T, U>,\n  templateOptions: { [key: string]: string },\n  instanceAttributes: IInstanceAttribute<T>[],\n  uniforms: IUniform[]\n) {\n  // This is how many uniform blocks the current device can utilize in a shader\n  const maxUniforms = WebGLStat.MAX_VERTEX_UNIFORMS;\n  // This reflects how many uniform blocks are available for instancing\n  const instanceUniformBlockCount =\n    maxUniforms - calculateUniformBlockUseage(uniforms);\n\n  // Go through the attributes provided and calculate the number of blocks requested\n  // Also sort the attributes by block and pack the block useage down.\n  const sortedInstanceAttributes = instanceAttributes\n    .slice(0)\n    .sort((a, b) => (a.block || 0) - (b.block || 0));\n\n  let currentBlock = sortedInstanceAttributes[0].block;\n  let trueBlockIndex = 0;\n\n  // This tracks how much a block is used\n  const blockUseage = new Map<number, number>();\n  const innerBlockUseage = new Map<number, Map<number, boolean>>();\n\n  sortedInstanceAttributes.forEach(attribute => {\n    if (attribute.block !== currentBlock) {\n      currentBlock = attribute.block;\n      trueBlockIndex++;\n    }\n\n    const attributeSize = attribute.size || 1;\n    const oldUseage = blockUseage.get(trueBlockIndex) || 0;\n    const newUseage = oldUseage + attributeSize;\n\n    // Make sure the block isn't over used thus losing attribute information\n    if (newUseage > MAX_USE_PER_BLOCK) {\n      console.error(\n        `An instance attribute was specified that over fills the maximum allowed useage for a block.`,\n        `\\nSource Layer: ${layer.id}`,\n        layer,\n        `\\nMax Allowed per block ${MAX_USE_PER_BLOCK}`,\n        `\\nAttribute: ${attribute.name} Block Specified: ${attribute.block}`,\n        `\\nTotal blocks used with this attribute: ${newUseage}`\n      );\n      return;\n    }\n\n    // Store how much of the block is utilized\n    blockUseage.set(trueBlockIndex, newUseage);\n    // We can now auto specify the inner index of where the attribute lines up within the block\n    attribute.blockIndex = oldUseage;\n\n    // Now we examine the attributes request of use inside the block and make sure there is no\n    // Overlap\n    const innerUseage =\n      innerBlockUseage.get(trueBlockIndex) || new Map<number, boolean>();\n\n    if (attribute.blockIndex + attributeSize > MAX_USE_PER_BLOCK) {\n      console.error(\n        `An instance attribute was specified that would fill indices greater than the block allows.`,\n        `\\nMax index per block ${MAX_USE_PER_BLOCK}`,\n        `\\nAttribute: ${attribute.name} Block Index: ${\n          attribute.blockIndex\n        } Size: ${attribute.size} Block Index + Size: ${attribute.blockIndex +\n          (attribute.size || 1)}`\n      );\n\n      return;\n    }\n\n    for (\n      let i = attribute.blockIndex;\n      i < attribute.blockIndex + attributeSize;\n      ++i\n    ) {\n      if (innerUseage.get(i)) {\n        console.error(\n          `An instance attribute was specified who's block index overaps another attributes useage`,\n          `\\nMax index per block ${MAX_USE_PER_BLOCK}`,\n          `\\nAttribute: ${attribute.name} Block Index: ${\n            attribute.blockIndex\n          } Size: ${attribute.size} Block Index + Size: ${attribute.blockIndex +\n            (attribute.size || 1)}`\n        );\n\n        return;\n      }\n    }\n\n    // Adjust the attribute to reflect the actual bock it is using\n    attribute.block = trueBlockIndex;\n  });\n\n  const blocksPerInstance = trueBlockIndex + 1;\n  // This determines how many instances our allowed uniforms will allow for a single draw call\n  const maxInstancesPerBuffer = Math.floor(\n    instanceUniformBlockCount / blocksPerInstance\n  );\n\n  // Generate the decision tree and uniform declarations\n  const instancingMetrics = makeUniformInstanceDataOptions(\n    templateOptions,\n    maxInstancesPerBuffer,\n    blocksPerInstance,\n    sortedInstanceAttributes\n  );\n\n  return {\n    materialUniforms: instancingMetrics.materialUniforms,\n    metrics: {\n      blocksPerInstance,\n      maxInstancesPerBuffer\n    }\n  };\n}\n\n/**\n * This generates all of the necessary templating information from uniform-instance-data\n * in order to provide an instance data getter for the application.\n */\nfunction makeUniformInstanceDataOptions<T extends Instance>(\n  templateOptions: { [key: string]: string },\n  maxInstancesPerBuffer: number,\n  blocksPerInstance: number,\n  instanceAttributes: IInstanceAttribute<T>[]\n) {\n  // Make a list containing all instance indicies that will be utilized and will be split\n  // Out into the decision tree\n  const instances = [];\n\n  for (let i = 0; i < maxInstancesPerBuffer; ++i) {\n    instances.push(i);\n  }\n\n  // Make the uniform declaration. Uniform declaration simultaneously gives us the material uniforms necessary\n  // To apply to our three material.\n  const uniformMetrics = makeInstanceUniformDeclaration(\n    maxInstancesPerBuffer * blocksPerInstance,\n    instanceAttributes\n  );\n\n  templateOptions[templateVars.instanceUniformDeclarations] =\n    uniformMetrics.fragment;\n  templateOptions[templateVars.instanceBlockCount] = `${blocksPerInstance}`;\n\n  // This method produces the data retrieval method for array instancing\n  templateOptions[\n    templateVars.instanceDataRetrieval\n  ] = makeInstanceRetrievalArray(blocksPerInstance);\n\n  return {\n    materialUniforms: uniformMetrics.materialUniforms\n  };\n}\n\n/**\n * This generates the declaration of all of the individual uniform registers for instancing.\n */\nfunction makeInstanceUniformDeclaration<T extends Instance>(\n  instanceUniformBlockCount: number,\n  attributes: IInstanceAttribute<T>[]\n) {\n  let out = \"\";\n  const blockQualifierDedup = new Map<number, Map<string, boolean>>();\n  let maxBlock = 0;\n\n  // Dedup the attributes specified for the\n  attributes.forEach(attribute => {\n    const qualifiers =\n      blockQualifierDedup.get(attribute.block || 0) ||\n      new Map<string, boolean>();\n    // Make sure the qualifier is added for the block!\n    if (attribute.qualifier) {\n      qualifiers.set(attribute.qualifier, true);\n    }\n\n    // Get the max block in use\n    maxBlock = Math.max(maxBlock, attribute.block || 0);\n  });\n\n  // Generate the full string for the specified qualifiers\n  const blockQualifiers = new Map<number, string>();\n\n  blockQualifierDedup.forEach((qualifierList, block) => {\n    const allQualifiers = Array.from(qualifierList.keys());\n    blockQualifiers.set(block, `${allQualifiers.join(\" \")} `);\n  });\n\n  // Generate our uniform declarations\n  // Const blockCount = maxBlock + 1;\n\n  // This method produces the instancing declaration for a search tree.\n  // *out += makeUniformDecisionTreeDeclarations(instanceUniformBlockCount, blockCount, blockQualifiers, materialUniforms);\n  // This method produces the instancing declaration for an instancing array\n  const declaration = makeUniformArrayDeclaration(instanceUniformBlockCount);\n  out += declaration.fragment;\n\n  out += `\\n`;\n\n  return {\n    fragment: out,\n    materialUniforms: declaration.materialUniforms\n  };\n}\n","import * as Three from \"three\";\nimport { WebGLRenderTarget } from \"three\";\nimport { ImageInstance } from \"../base-layers/images\";\nimport { LabelInstance } from \"../base-layers/labels\";\nimport { Instance } from \"../instance-provider/instance\";\nimport { Bounds } from \"../primitives/bounds\";\nimport { Box } from \"../primitives/box\";\nimport { injectFragments } from \"../shaders/util/attribute-generation\";\nimport { PickType } from \"../types\";\nimport { FrameMetrics } from \"../types\";\nimport { analyzeColorPickingRendering } from \"../util/color-picking-analysis\";\nimport { DataBounds } from \"../util/data-bounds\";\nimport { Vec2 } from \"../util/vector\";\nimport { EventManager } from \"./event-manager\";\nimport { LayerMouseEvents } from \"./event-managers/layer-mouse-events\";\nimport { ILayerProps, Layer } from \"./layer\";\nimport {\n  generateDefaultScene,\n  IDefaultSceneElements\n} from \"./layer-processing/generate-default-scene\";\nimport { generateLayerGeometry } from \"./layer-processing/generate-layer-geometry\";\nimport { generateLayerMaterial } from \"./layer-processing/generate-layer-material\";\nimport { generateLayerModel } from \"./layer-processing/generate-layer-model\";\nimport { injectShaderIO } from \"./layer-processing/inject-shader-io\";\nimport {\n  getLayerBufferType,\n  makeLayerBufferManager\n} from \"./layer-processing/layer-buffer-type\";\nimport { MouseEventManager, SceneView } from \"./mouse-event-manager\";\nimport { ISceneOptions, Scene } from \"./scene\";\nimport { AtlasManager } from \"./texture\";\nimport { IAtlasOptions } from \"./texture/atlas\";\nimport { AtlasResourceManager } from \"./texture/atlas-resource-manager\";\nimport { ClearFlags, View } from \"./view\";\n\nexport interface ILayerSurfaceOptions {\n  /**\n   * These are the atlas resources we want available that our layers can be provided to utilize\n   * for their internal processes.\n   */\n  atlasResources?: IAtlasOptions[];\n  /**\n   * This is the color the canvas will be set to.\n   */\n  background: [number, number, number, number];\n  /**\n   * If this is provided, it will use this context for rendering. If a string is provided\n   * it will search for the canvas context by id.\n   */\n  context?: WebGLRenderingContext | HTMLCanvasElement | string;\n  /**\n   * This is the event managers to respond to the mouse events.\n   */\n  eventManagers?: EventManager[];\n  /**\n   * Set to true to allow this surface to absorb and handle wheel events from the mouse.\n   */\n  handlesWheelEvents?: boolean;\n  /**\n   * This specifies the density of rendering in the surface. The default value is window.devicePixelRatio to match the\n   * monitor for optimal clarity. Using a value of 1 will be acceptable, will not get high density renders, but will\n   * have better performance if needed.\n   */\n  pixelRatio?: number;\n  /**\n   * This sets up the available scenes the surface will have to work with. Layers then can\n   * reference the scene by it's scene property. The order of the scenes here is the drawing\n   * order of the scenes.\n   */\n  scenes?: ISceneOptions[];\n}\n\nconst DEFAULT_BACKGROUND_COLOR = new Three.Color(1.0, 1.0, 1.0);\n\nfunction isCanvas(val: any): val is HTMLCanvasElement {\n  return Boolean(val.getContext);\n}\n\nfunction isString(val: any): val is string {\n  return Boolean(val.substr);\n}\n\nfunction isWebGLContext(val: any): val is WebGLRenderingContext {\n  return Boolean(val.canvas);\n}\n\nexport interface ILayerConstructable<T extends Instance> {\n  new (props: ILayerProps<T>): Layer<any, any>;\n}\n\n/**\n * This is a pair of a Class Type and the props to be applied to that class type.\n */\nexport type LayerInitializer = [\n  ILayerConstructable<Instance> & { defaultProps: ILayerProps<Instance> },\n  ILayerProps<Instance>\n];\n\n/**\n * Used for reactive layer generation and updates.\n */\nexport function createLayer<T extends Instance, U extends ILayerProps<T>>(\n  layerClass: ILayerConstructable<T> & { defaultProps: U },\n  props: U\n): LayerInitializer {\n  return [layerClass, props];\n}\n\n/**\n * This is a manager for layers. It will use voidgl layers to intelligently render resources\n * as efficiently as possible. Layers will be rendered in the order they are provided and this\n * surface will provide some basic camera controls by default.\n */\nexport class LayerSurface {\n  /** This is the atlas manager that will help with modifying and tracking atlas' generated for the layers */\n  private atlasManager: AtlasManager = new AtlasManager();\n  /** This is the gl context this surface is rendering to */\n  private context: WebGLRenderingContext;\n  /** This is the current viewport the renderer state is in */\n  currentViewport = new Map<Three.WebGLRenderer, Box>();\n  /**\n   * This is the default scene that layers get added to if they do not specify a valid Scene.\n   * This scene by default only has a single default view.\n   */\n  defaultSceneElements: IDefaultSceneElements;\n  /**\n   * This is the metrics of the current running frame\n   */\n  frameMetrics: FrameMetrics = {\n    currentFrame: 0,\n    currentTime: Date.now() | 0,\n    previousTime: Date.now() | 0\n  };\n  /**\n   * This is used to help resolve concurrent draws. There are some very async operations that should\n   * not overlap in draw calls.\n   */\n  private isBufferingAtlas = false;\n  /** This is all of the layers in this manager by their id */\n  layers = new Map<string, Layer<any, any>>();\n  /** This manages the mouse events for the current canvas context */\n  private mouseManager: MouseEventManager;\n  /**\n   * This is the renderer that is meant for rendering the picking pass. We have a separate renderer so we can disable\n   * over complicated features like antialiasing which would ruin the picking pass.\n   */\n  pickingRenderer: Three.WebGLRenderer;\n  /** This is a target used to perform rendering our picking pass */\n  pickingTarget: Three.WebGLRenderTarget;\n  /** This is the density the rendering renders for the surface */\n  pixelRatio: number = window.devicePixelRatio;\n  /** This is the THREE render system we use to render scenes with views */\n  renderer: Three.WebGLRenderer;\n  /** This is the resource manager that handles resource requests for instances */\n  resourceManager: AtlasResourceManager;\n  /**\n   * This is all of the available scenes and their views for this surface. Layers reference the IDs\n   * of the scenes and the views to be a part of their rendering state.\n   */\n  scenes = new Map<string, Scene>();\n  /**\n   * This is all of the views currently generated for this surface paired with the scene they render.\n   */\n  sceneViews: SceneView[] = [];\n  /** When set to true, the next render will make sure color picking is updated for layer interactions */\n  updateColorPick?: {\n    mouse: Vec2;\n    views: View[];\n  };\n  /**\n   * This flags all layers by id for disposal at the end of every render. A Layer must be recreated\n   * after each render in order to clear it's disposal flag. This is the trick to making this a\n   * reactive system.\n   */\n  willDisposeLayer = new Map<string, boolean>();\n\n  /** This is used to indicate whether the loading is completed */\n  private loadReadyResolve: () => void;\n  loadReady: Promise<void> = new Promise(\n    resolve => (this.loadReadyResolve = resolve)\n  );\n\n  /** Read only getter for the gl context */\n  get gl() {\n    return this.context;\n  }\n\n  /**\n   * This adds a layer to the manager which will manage all of the resource lifecycles of the layer\n   * as well as additional helper injections to aid in instancing and shader i/o.\n   */\n  private addLayer<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U>\n  ): Layer<T, U> {\n    if (!layer.id) {\n      console.warn(\"All layers must have an id\");\n      return layer;\n    }\n\n    if (this.layers.get(layer.id)) {\n      console.warn(\"All layer's ids must be unique per layer manager\");\n      return layer;\n    }\n\n    // We add the layer to our management\n    this.layers.set(layer.id, layer);\n    // Now we initialize the layer's gl components\n    this.initLayer(layer);\n\n    return layer;\n  }\n\n  /**\n   * The performs all of the needed updates that layers need to commit to the scene and buffers\n   * to be ready for a draw pass. This is callable outside of the draw loop to allow for specialized\n   * procedures or optimizations to take place, where incremental updates to the buffers would make\n   * the most sense.\n   *\n   * @param time The start time of the given frame\n   * @param frameIncrement When true, the frame count for the frame metrics will increment\n   * @param onViewReady Callback for when all of the layers of a scene view have been committed\n   *                    and are thus potentially ready to be rendered.\n   */\n  async commit(\n    time?: number,\n    frameIncrement?: boolean,\n    onViewReady?: (\n      scene: Scene,\n      view: View,\n      pickingPass: Layer<any, any>[]\n    ) => void\n  ) {\n    if (!this.gl) return;\n\n    // We are rendering a new frame so increment our frame count\n    if (frameIncrement) this.frameMetrics.currentFrame++;\n    this.frameMetrics.previousTime = this.frameMetrics.currentTime;\n\n    // If no manual time was provided, we shall use Date.now in 32 bit format\n    if (time === undefined) {\n      this.frameMetrics.currentTime = Date.now() | 0;\n    } else {\n      // If this is our first frame and we have a manual time entry, then we first need to sync up\n      // The manual time as our previous timing.\n      if (this.frameMetrics.previousTime === this.frameMetrics.currentTime) {\n        this.frameMetrics.previousTime = time;\n      }\n\n      this.frameMetrics.currentTime = time;\n    }\n\n    // Get the scenes in their added order\n    const scenes = Array.from(this.scenes.values());\n    const validLayers: { [key: string]: Layer<any, any> } = {};\n    const erroredLayers: { [key: string]: [Layer<any, any>, Error] } = {};\n\n    // Loop through scenes\n    for (let i = 0, end = scenes.length; i < end; ++i) {\n      const scene = scenes[i];\n      const views = Array.from(scene.viewById.values());\n      const layers = scene.layers;\n\n      // Make sure the layers are depth sorted\n      scene.sortLayers();\n\n      // Loop through the views\n      for (let k = 0, endk = views.length; k < endk; ++k) {\n        const view = views[k];\n        // When this flags true, a picking pass will be rendered for the provided scene / view\n        const pickingPass: Layer<any, any>[] = [];\n\n        // We must perform any operations necessary to make the view camera fit the viewport\n        // Correctly\n        view.fitViewtoViewport(\n          new Bounds({\n            height: this.context.canvas.height,\n            width: this.context.canvas.width,\n            x: 0,\n            y: 0\n          })\n        );\n\n        // Let the layers update their uniforms before the draw\n        for (let j = 0, endj = layers.length; j < endj; ++j) {\n          // Get the layer to be rendered in the scene\n          const layer = layers[j];\n          // Update the layer with the view it is about to be rendered with\n          layer.view = view;\n          // Make sure the layer is given the opportunity to update all of it's uniforms\n          // To match the view state and update any unresolved diffs internally\n          try {\n            layer.draw();\n            validLayers[layer.id] = layer;\n          } catch (err) {\n            if (!erroredLayers[layer.id]) {\n              erroredLayers[layer.id] = [layer, err];\n            }\n          }\n\n          // If this layer specifies a picking draw pass, then we shall store it in the current draw order\n          // For that next step\n          if (layer.picking.type === PickType.SINGLE) {\n            pickingPass.push(layer);\n          }\n        }\n\n        if (onViewReady) {\n          onViewReady(scene, view, pickingPass);\n        }\n      }\n    }\n\n    // get the layers with errors flagged for them\n    const errors = Object.values(erroredLayers);\n\n    if (errors.length > 0) {\n      const passed = Object.values(validLayers);\n\n      console.warn(\n        \"Some layers errored during their draw update. These layers will be removed. They can be re-added if render() is called again:\",\n        errors.map(err => err[0].id)\n      );\n\n      // Output each layer and why it errored\n      errors.forEach(err => {\n        console.warn(`Layer ${err[0].id} removed for the following error:`);\n        if (err[1]) console.error(err[1].stack || err[1].message);\n      });\n\n      // Re-render but only include non-errored layers\n      this.render(passed.map(layer => layer.initializer));\n    }\n  }\n\n  /**\n   * Free all resources consumed by this surface that gets applied to the GPU.\n   */\n  destroy() {\n    this.layers.forEach(layer => layer.destroy());\n    this.resourceManager.destroy();\n    this.mouseManager.destroy();\n    this.sceneViews.forEach(sceneView => sceneView.scene.destroy());\n    this.renderer.dispose();\n    this.pickingRenderer.dispose();\n    this.currentViewport.clear();\n\n    // TODO: Instances should be implementing destroy for these clean ups.\n    LabelInstance.destroy();\n    ImageInstance.destroy();\n  }\n\n  /**\n   * This is the draw loop that must be called per frame for updates to take effect and display.\n   *\n   * @param time This is an optional time flag so one can manually control the time flag for the frame.\n   *             This will affect animations and other automated gpu processes.\n   */\n  async draw(time?: number) {\n    if (!this.gl) return;\n\n    // Make the layers commit their changes to the buffers then draw each scene view on\n    // Completion.\n    this.commit(time, true, (scene, view, pickingPass) => {\n      // Our scene must have a valid container to operate\n      if (!scene.container) return;\n      // Now perform the rendering\n      this.drawSceneView(scene.container, view);\n\n      // If a layer needs a picking pass, then perform a picking draw pass only\n      // if a request for the color pick has been made, then we query the pixels rendered to our picking target\n      if (pickingPass.length > 0 && this.updateColorPick) {\n        // Get the requested metrics\n        const mouse = this.updateColorPick.mouse;\n        const views = this.updateColorPick.views;\n\n        // Only if the view is interacted with should we both with rendering\n        if (\n          view.id !== this.defaultSceneElements.view.id &&\n          views.indexOf(view) > -1\n        ) {\n          // Picking uses a pixel ratio of 1\n          view.pixelRatio = 1.0;\n          // Get the current flags for the view\n          const flags = view.clearFlags.slice(0);\n          // Set color rendering flasg\n          view.clearFlags = [ClearFlags.COLOR, ClearFlags.DEPTH];\n\n          // We must perform any operations necessary to make the view camera fit the viewport\n          // Correctly with the possibly adjusted pixel ratio\n          view.fitViewtoViewport(\n            new Bounds({\n              height: this.context.canvas.height / this.pixelRatio,\n              width: this.context.canvas.width / this.pixelRatio,\n              x: 0,\n              y: 0\n            })\n          );\n\n          // We must redraw the layers so they will update their uniforms to adapt to a picking pass\n          for (let j = 0, endj = pickingPass.length; j < endj; ++j) {\n            const layer = pickingPass[j];\n            layer.picking.currentPickMode = PickType.SINGLE;\n            try {\n              layer.draw();\n            } catch (err) {\n              /** No-op, the first draw should have output an error for bad draw calls */\n            }\n            layer.picking.currentPickMode = PickType.NONE;\n          }\n\n          // Draw the picking container for the scene with our view long with our specialized picking renderer\n          // NOTE: Neat trick, just remove 'this.pickingTarget' from the argument and add\n          // canvas.parentNode.appendChild(this.pickingRenderer.getContext().canvas);\n          // below where the picking Target is created and you will see what is being rendered to the color picking buffer\n          this.drawSceneView(\n            scene.pickingContainer,\n            view,\n            this.pickingRenderer,\n            this.pickingTarget\n          );\n\n          // Make our metrics for how much of the image we wish to analyze\n          const pickWidth = 5;\n          const pickHeight = 5;\n          const numBytesPerColor = 4;\n          const out = new Uint8Array(pickWidth * pickHeight * numBytesPerColor);\n\n          // Read the pixels out\n          // TODO: We need to defer this reading to next frame as the rendering MUST be completed before a readPixels\n          // operation can complete. Thus in complex rendering situations that pushes the GPU, this could be a MAJOR bottleneck.\n          this.pickingRenderer.readRenderTargetPixels(\n            this.pickingTarget,\n            mouse[0] - view.screenBounds.x - pickWidth / 2,\n            view.screenBounds.height -\n              (mouse[1] - view.screenBounds.y) -\n              pickHeight / 2,\n            pickWidth,\n            pickHeight,\n            out\n          );\n\n          // Analyze the rendered color data for the picking routine\n          const pickingData = analyzeColorPickingRendering(\n            [mouse[0] - view.screenBounds.x, mouse[1] - view.screenBounds.y],\n            out,\n            pickWidth,\n            pickHeight\n          );\n\n          // We must redraw the layers so they will update their uniforms to adapt to a picking pass\n          for (let j = 0, endj = pickingPass.length; j < endj; ++j) {\n            const layer = pickingPass[j];\n\n            if (layer.picking.type === PickType.SINGLE) {\n              layer.interactions.colorPicking = pickingData;\n            }\n          }\n\n          // Return the pixel ratio back to the rendered ratio\n          view.pixelRatio = this.pixelRatio;\n          // Return the view's clear flags\n          view.clearFlags = flags;\n\n          // After reverting the pixel ratio, we must return to the state we came from so that mouse interactions\n          // will work properly\n          view.fitViewtoViewport(\n            new Bounds({\n              height: this.context.canvas.height,\n              width: this.context.canvas.width,\n              x: 0,\n              y: 0\n            })\n          );\n        }\n      }\n    });\n\n    // After we have drawn our views of our scenes, we can now ensure all of the bounds\n    // Are updated in the interactions and flag our interactions ready for mouse input\n    if (this.mouseManager.waitingForRender) {\n      this.sceneViews.forEach(sceneView => {\n        sceneView.bounds = new DataBounds(sceneView.view.screenBounds);\n        sceneView.bounds.data = sceneView;\n      });\n\n      this.mouseManager.waitingForRender = false;\n    }\n\n    // Now that all of our layers have performed updates to everything, we can now dequeue\n    // All resource requests\n    // We create this gate in case multiple draw calls flow through before a buffer opertion is completed\n    if (!this.isBufferingAtlas) {\n      this.isBufferingAtlas = true;\n      const didBuffer = await this.resourceManager.dequeueRequests();\n      this.isBufferingAtlas = false;\n\n      // If buffering did occur and completed, then we should be performing a draw to ensure all of the\n      // Changes are committed and pushed out.\n      if (didBuffer) {\n        this.loadReadyResolve();\n        this.loadReady = new Promise(\n          resolve => (this.loadReadyResolve = resolve)\n        );\n        this.draw();\n      }\n    }\n\n    // Clear out the flag requesting a pick pass so we don't perform a pick render pass unless we have\n    // another requested from mouse interactions\n    delete this.updateColorPick;\n  }\n\n  /**\n   * This finalizes everything and sets up viewports and clears colors and performs the actual render step\n   */\n  private drawSceneView(\n    scene: Three.Scene,\n    view: View,\n    renderer?: Three.WebGLRenderer,\n    target?: Three.WebGLRenderTarget\n  ) {\n    renderer = renderer || this.renderer;\n\n    const offset = { x: view.viewBounds.left, y: view.viewBounds.top };\n    const size = view.viewBounds;\n    const rendererSize = renderer.getSize();\n    const pixelRatio = renderer.getPixelRatio();\n    rendererSize.width *= pixelRatio;\n    rendererSize.height *= pixelRatio;\n    const background = view.background;\n    const context = renderer.getContext();\n\n    // Something is up with threejs that does not allow us to set viewport x and y values. So for targets\n    // We simply size the target to the view size and render. Thus scissoring is not required\n    if (!target) {\n      // Set the scissor rectangle.\n      context.enable(context.SCISSOR_TEST);\n      context.scissor(\n        offset.x,\n        rendererSize.height - offset.y - size.height,\n        size.width,\n        size.height\n      );\n      // If a background is established, we should clear the background color\n      // Specified for this context\n      if (view.background) {\n        // Clear the rect of color and depth so the region is totally it's own\n        context.clearColor(\n          background[0],\n          background[1],\n          background[2],\n          background[3]\n        );\n      }\n    }\n\n    // Get the view's clearing preferences\n    if (view.clearFlags) {\n      // For targets, we must also perform clear operations\n      if (target) {\n        // TODO: This is frustrating. Right now we can't specify and set the viewport for a render target\n        // Possibly with Threejs going away we can actually be more explcit for the render area to a render target\n        // and not cause this overhead of resizing the render target for every picking pass\n        target.setSize(size.width, size.height);\n        renderer.setRenderTarget(target);\n        renderer.clear(\n          view.clearFlags.indexOf(ClearFlags.COLOR) > -1,\n          view.clearFlags.indexOf(ClearFlags.DEPTH) > -1,\n          view.clearFlags.indexOf(ClearFlags.STENCIL) > -1\n        );\n      } else {\n        renderer\n          .getContext()\n          .clear(\n            (view.clearFlags.indexOf(ClearFlags.COLOR) > -1\n              ? context.COLOR_BUFFER_BIT\n              : 0x0) |\n              (view.clearFlags.indexOf(ClearFlags.DEPTH) > -1\n                ? context.DEPTH_BUFFER_BIT\n                : 0x0) |\n              (view.clearFlags.indexOf(ClearFlags.STENCIL) > -1\n                ? context.STENCIL_BUFFER_BIT\n                : 0x0)\n          );\n      }\n    }\n\n    // Default clearing is depth and color\n    else {\n      // For targets, we must also perform clear operations\n      if (target) {\n        // TODO: This is frustrating. Right now we can't specify and set the viewport for a render target\n        // Possibly with Threejs going away we can actually be more explcit for the render area to a render target\n        // and not cause this overhead of resizing the render target for every picking pass\n        target.setSize(size.width, size.height);\n        renderer.setRenderTarget(target);\n        renderer.clear(true, true);\n      } else {\n        context.clear(context.COLOR_BUFFER_BIT | context.DEPTH_BUFFER_BIT);\n      }\n    }\n\n    // Make sure the viewport is set properly for the next render\n    renderer.setViewport(\n      offset.x / pixelRatio,\n      offset.y / pixelRatio,\n      size.width,\n      size.height\n    );\n    // Render the scene with the provided view metrics\n    renderer.render(scene, view.viewCamera.baseCamera, target);\n  }\n\n  /**\n   * This allows for querying a view's screen bounds. Null is returned if the view id\n   * specified does not exist.\n   */\n  getViewSize(viewId: string): Bounds | null {\n    for (const sceneView of this.sceneViews) {\n      if (sceneView.view.id === viewId) {\n        return sceneView.view.screenBounds;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * This queries a view's window into a world's space.\n   */\n  getViewWorldBounds(viewId: string): Bounds | null {\n    for (const sceneView of this.sceneViews) {\n      if (sceneView.view.id === viewId) {\n        const view = sceneView.view;\n\n        if (view.screenBounds) {\n          const topLeft = view.viewToWorld({ x: 0, y: 0 });\n          const bottomRight = view.screenToWorld({\n            x: view.screenBounds.right,\n            y: view.screenBounds.bottom\n          });\n\n          return new Bounds({\n            bottom: bottomRight.y,\n            left: topLeft.x,\n            right: bottomRight.x,\n            top: topLeft.y\n          });\n        } else {\n          return null;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * This is the beginning of the system. This should be called immediately after the surface is constructed.\n   * We make this mandatory outside of the constructor so we can make it follow an async pattern.\n   */\n  async init(options: ILayerSurfaceOptions) {\n    // Make sure our desired pixel ratio is set up\n    this.pixelRatio = options.pixelRatio || this.pixelRatio;\n    // Make sure we have a gl context to work with\n    this.setContext(options.context);\n\n    if (this.gl) {\n      // Initialize our GL needs that set the basis for rendering\n      this.initGL(options);\n      // Initialize our event manager that handles mouse interactions/gestures with the canvas\n      this.initMouseManager(options);\n      // Initialize any resources requested or needed, such as textures or rendering surfaces\n      await this.initResources(options);\n    } else {\n      console.warn(\n        \"Could not establish a GL context. Layer Surface will be unable to render\"\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * This initializes the Canvas GL contexts needed for rendering.\n   */\n  private initGL(options: ILayerSurfaceOptions) {\n    if (!this.context) {\n      console.error(\n        \"Can not initialize Layer Surface as a valid GL context was not established.\"\n      );\n      return;\n    }\n\n    // Get the canvas of our context to set up our Three settings\n    const canvas = this.context.canvas;\n    // Get the starting width and height so adjustments don't affect it\n    const width = canvas.width;\n    const height = canvas.height;\n\n    // Generate the renderer along with it's properties\n    this.renderer = new Three.WebGLRenderer({\n      // Context supports rendering to an alpha canvas only if the background color has a transparent\n      // Alpha value.\n      alpha: options.background && options.background[3] < 1.0,\n      // Yes to antialias! Make it preeeeetty!\n      antialias: true,\n      // Make three use an existing canvas rather than generate another\n      canvas,\n      // TODO: This should be toggleable. If it's true it allows us to snapshot the rendering in the canvas\n      //       But we dont' always want it as it makes performance drop a bit.\n      preserveDrawingBuffer: true\n    });\n\n    // Generate a renderer for the picking pass\n    this.pickingRenderer = new Three.WebGLRenderer({\n      // Context supports rendering to an alpha canvas only if the background color has a transparent\n      // Alpha value.\n      alpha: false,\n      // Picking shall not\n      antialias: false,\n      // Do not need this for picking\n      preserveDrawingBuffer: true\n    });\n\n    // NOTE: Uncomment this plus remove this.pickingTarget from the drawSceneView of the color picking pass\n    // to view the colors rendered to the color picking buffer. This disables the interactions but helps\n    // debug what's going on with shaders etc\n    // canvas.parentNode.appendChild(this.pickingRenderer.getContext().canvas);\n\n    // We want clearing to be controlled via the layer\n    this.renderer.autoClear = false;\n    // This sets the pixel ratio to handle differing pixel densities in screens\n    this.setRendererSize(width, height);\n    // Set the pixel ratio to match the pixel density of the monitor in use\n    this.renderer.setPixelRatio(this.pixelRatio);\n\n    // Applies the background color and establishes whether or not the context supports\n    // Alpha or not\n    if (options.background) {\n      this.renderer.setClearColor(\n        new Three.Color(\n          options.background[0],\n          options.background[1],\n          options.background[2]\n        ),\n        options.background[3]\n      );\n    }\n\n    // If a background color was not established, then we set a default background color\n    else {\n      this.renderer.setClearColor(DEFAULT_BACKGROUND_COLOR);\n    }\n\n    // We want clearing to be controlled via the layer\n    this.pickingRenderer.autoClear = false;\n    // Picking does not need retina style precision\n    this.pickingRenderer.setPixelRatio(1.0);\n    // Applies the background color and establishes whether or not the context supports\n    // Alpha or not\n    this.pickingRenderer.setClearColor(new Three.Color(0, 0, 0), 1);\n\n    // Once we have made our renderer we now make us a default scene to which we can add objects\n    this.defaultSceneElements = generateDefaultScene(this.context);\n    this.defaultSceneElements.view.background = options.background;\n    // Set the default scene\n    this.scenes.set(\n      this.defaultSceneElements.scene.id,\n      this.defaultSceneElements.scene\n    );\n    // Make a scene view depth tracker so we can track the order each scene view combo is drawn\n    let sceneViewDepth = 0;\n\n    // Make a SceneView for the default scene and view for mouse interactions\n    this.sceneViews.push({\n      depth: ++sceneViewDepth,\n      scene: this.defaultSceneElements.scene,\n      view: this.defaultSceneElements.view\n    });\n\n    // Turn on the scissor test to keep the rendering clipped within the\n    // Render region of the context\n    this.context.enable(this.context.SCISSOR_TEST);\n\n    // Add the requested scenes to the surface and apply the necessary defaults\n    if (options.scenes) {\n      options.scenes.forEach(sceneOptions => {\n        // Make us a new scene based on the requested options\n        const newScene = new Scene(sceneOptions);\n\n        // Make sure the default view is available for each scene\n        // IFF no view is provided for the scene\n        if (sceneOptions.views.length === 0) {\n          newScene.addView(this.defaultSceneElements.view);\n\n          this.sceneViews.push({\n            depth: ++sceneViewDepth,\n            scene: newScene,\n            view: this.defaultSceneElements.view\n          });\n        }\n\n        // Generate the views requested for the scene\n        sceneOptions.views.forEach(viewOptions => {\n          const newView = new View(viewOptions);\n          newView.camera = newView.camera || this.defaultSceneElements.camera;\n          newView.viewCamera =\n            newView.viewCamera || this.defaultSceneElements.viewCamera;\n          newView.viewport =\n            newView.viewport || this.defaultSceneElements.viewport;\n          newView.pixelRatio = this.pixelRatio;\n          newScene.addView(newView);\n\n          for (const sceneView of this.sceneViews) {\n            if (sceneView.view.id === newView.id) {\n              console.warn(\n                \"You can NOT have two views with the same id. Please use unique identifiers for every view generated.\"\n              );\n            }\n          }\n\n          this.sceneViews.push({\n            depth: ++sceneViewDepth,\n            scene: newScene,\n            view: newView\n          });\n        });\n\n        this.scenes.set(sceneOptions.key, newScene);\n      });\n    }\n  }\n\n  /**\n   * This does special initialization by gathering the layers shader IO, generates a material\n   * and injects special automated uniforms and attributes to make instancing work for the\n   * shader.\n   */\n  private initLayer<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U>\n  ): Layer<T, U> {\n    // Set the layer's parent surface here\n    layer.surface = this;\n    // Set the resource manager this surface utilizes to the layer\n    layer.resource = this.resourceManager;\n    // For the sake of initializing uniforms to the correct values, we must first add the layer to it's appropriate\n    // Scene so that the necessary values will be in place for the sahder IO\n    const scene = this.addLayerToScene(layer);\n    // Get the shader metrics the layer desires\n    const shaderIO = layer.initShader();\n    // Clean out nulls provided as a convenience to the layer\n    shaderIO.instanceAttributes = (shaderIO.instanceAttributes || []).filter(\n      Boolean\n    );\n    shaderIO.vertexAttributes = (shaderIO.vertexAttributes || []).filter(\n      Boolean\n    );\n    shaderIO.uniforms = (shaderIO.uniforms || []).filter(Boolean);\n    // Get the injected shader IO attributes and uniforms\n    const { vertexAttributes, instanceAttributes, uniforms } = injectShaderIO(\n      this.gl,\n      layer,\n      shaderIO\n    );\n    // After all of the shader IO is established, let's calculate the appropriate buffering strategy\n    // For the layer.\n    getLayerBufferType(this.gl, layer, vertexAttributes, instanceAttributes);\n    // Generate the actual shaders to be used by injecting all of the necessary fragments and injecting\n    // Instancing fragments\n    const shaderMetrics = injectFragments(\n      layer,\n      shaderIO,\n      vertexAttributes,\n      instanceAttributes,\n      uniforms\n    );\n    // Generate the geometry this layer will be utilizing\n    const geometry = generateLayerGeometry(\n      layer,\n      shaderMetrics.maxInstancesPerBuffer,\n      vertexAttributes,\n      shaderIO.vertexCount\n    );\n    // This is the material that is generated for the layer that utilizes all of the generated and\n    // Injected shader IO and shader fragments\n    const material = generateLayerMaterial(\n      layer,\n      shaderMetrics.vs,\n      shaderMetrics.fs,\n      uniforms,\n      shaderMetrics.materialUniforms\n    );\n    // And now we can now generate the mesh that will be added to the scene\n    const model = generateLayerModel(layer, geometry, material);\n\n    // Now that all of the elements of the layer are complete, let us apply them to the layer\n    layer.geometry = geometry;\n    layer.instanceAttributes = instanceAttributes;\n    layer.instanceVertexCount = shaderIO.vertexCount;\n    layer.material = material;\n    layer.maxInstancesPerBuffer = shaderMetrics.maxInstancesPerBuffer;\n    layer.model = model;\n    layer.uniforms = uniforms;\n    layer.vertexAttributes = vertexAttributes;\n\n    // Generate the correct buffering strategy for the layer\n    makeLayerBufferManager(this.gl, layer, scene);\n\n    return layer;\n  }\n\n  /**\n   * Initializes elements for handling mouse interactions with the canvas.\n   */\n  private initMouseManager(options: ILayerSurfaceOptions) {\n    // We must inject an event manager to broadcast events through the layers themselves\n    const eventManagers: EventManager[] = ([\n      new LayerMouseEvents(this)\n    ] as EventManager[]).concat(options.eventManagers || []);\n\n    // Generate the mouse manager for the layer\n    this.mouseManager = new MouseEventManager(\n      this.context.canvas,\n      this.sceneViews,\n      eventManagers,\n      options.handlesWheelEvents\n    );\n  }\n\n  /**\n   * This initializes resources needed or requested such as textures or render surfaces.\n   */\n  private async initResources(options: ILayerSurfaceOptions) {\n    // Tell our manager to generate all of the atlas' requested for surface\n    if (options.atlasResources) {\n      for (const resource of options.atlasResources) {\n        await this.atlasManager.createAtlas(resource);\n      }\n    }\n\n    // Initialize our resource manager with the atlas manager\n    this.resourceManager = new AtlasResourceManager({\n      atlasManager: this.atlasManager\n    });\n  }\n\n  /**\n   * This finds the scene and view the layer belongs to based on the layer's props. For invalid or not provided\n   * props, the layer gets added to default scenes and views.\n   */\n  private addLayerToScene<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U>\n  ): Scene {\n    // Get the scene the layer will add itself to\n    let scene = this.scenes.get(layer.props.scene || \"\");\n\n    if (!scene) {\n      // If no scene is specified by the layer, or the scene identifier is invalid, then we add the layer\n      // To the default scene.\n      scene = this.defaultSceneElements.scene;\n\n      if (layer.props.scene) {\n        console.warn(\n          \"Layer specified a scene that is not within the layer surface manager. Layer will be added to the default scene.\"\n        );\n      }\n    }\n\n    // Add the layer to the scene for rendering\n    scene.addLayer(layer);\n\n    return scene;\n  }\n\n  /**\n   * Discontinues a layer's management by this surface. This will invalidate any resources\n   * the layer was using in association with the context. If the layer is re-insertted, it will\n   * be revaluated as though it were a new layer.\n   */\n  private removeLayer<T extends Instance, U extends ILayerProps<T>>(\n    layer: Layer<T, U> | null\n  ): Layer<T, U> | null {\n    // Make sure we are removing a layer that exists in the system\n    if (!layer) {\n      return null;\n    }\n    if (!this.layers.get(layer && layer.id)) {\n      console.warn(\n        \"Tried to remove a layer that is not in the manager.\",\n        layer\n      );\n      return layer;\n    }\n\n    layer.destroy();\n    this.layers.delete(layer.id);\n\n    return layer;\n  }\n\n  /**\n   * Used for reactive rendering and diffs out the layers for changed layers.\n   */\n  render(layerInitializers: LayerInitializer[]) {\n    if (!this.gl) return;\n\n    // Loop through all of the initializers and properly add and remove layers as needed\n    if (layerInitializers && layerInitializers.length > 0) {\n      layerInitializers.forEach(init => {\n        const layerClass = init[0];\n        const props = init[1];\n        const existingLayer = this.layers.get(props.key);\n\n        if (existingLayer) {\n          existingLayer.willUpdateProps(props);\n          Object.assign(existingLayer.props, props);\n          existingLayer.initializer[1] = existingLayer.props;\n          existingLayer.didUpdateProps();\n        } else {\n          const layer = new layerClass(\n            Object.assign({}, layerClass.defaultProps, props)\n          );\n          layer.initializer = init;\n          this.addLayer(layer);\n        }\n\n        this.willDisposeLayer.set(props.key, false);\n      });\n    }\n\n    // Take any layer that retained it's disposal flag and trash it\n    this.willDisposeLayer.forEach((dispose, layerId) => {\n      if (dispose) {\n        const layer = this.layers.get(layerId);\n        if (layer) {\n          this.removeLayer(layer);\n        } else {\n          console.warn(\n            \"this.willDisposeLayer applied to a layer that does not exist in the existing layer check.\"\n          );\n        }\n      }\n    });\n\n    // Resolve that all disposals occurred\n    this.willDisposeLayer.clear();\n\n    // Reflag every layer for removal again so creation of layers will determine\n    // Which layers remain for a reactive pattern\n    this.layers.forEach((_layer, id) => {\n      this.willDisposeLayer.set(id, true);\n    });\n  }\n\n  /**\n   * This must be executed when the canvas changes size so that we can re-calculate the scenes and views\n   * dimensions for handling all of our rendered elements.\n   */\n  fitContainer(_pixelRatio?: number) {\n    const container = this.context.canvas.parentElement;\n\n    if (container) {\n      const canvas = this.context.canvas;\n      canvas.className = \"\";\n      canvas.setAttribute(\"style\", \"\");\n      container.style.position = \"relative\";\n      canvas.style.position = \"absolute\";\n      canvas.style.left = \"0xp\";\n      canvas.style.top = \"0xp\";\n      canvas.style.width = \"100%\";\n      canvas.style.height = \"100%\";\n      canvas.setAttribute(\"width\", \"\");\n      canvas.setAttribute(\"height\", \"\");\n      const containerBox = container.getBoundingClientRect();\n      const box = canvas.getBoundingClientRect();\n\n      this.resize(box.width || 100, containerBox.height || 100);\n    }\n  }\n\n  /**\n   * This resizes the canvas and retains pixel ratios amongst all of the resources involved.\n   */\n  resize(width: number, height: number, pixelRatio?: number) {\n    this.pixelRatio = pixelRatio || this.pixelRatio;\n    this.sceneViews.forEach(\n      sceneView => (sceneView.view.pixelRatio = this.pixelRatio)\n    );\n    this.setRendererSize(width, height);\n    this.renderer.setPixelRatio(this.pixelRatio);\n    this.pickingRenderer.setPixelRatio(1.0);\n    this.mouseManager.resize();\n  }\n\n  /**\n   * This establishes the rendering canvas context for the surface.\n   */\n  private setContext(\n    context?: WebGLRenderingContext | HTMLCanvasElement | string\n  ) {\n    if (!context) {\n      return;\n    }\n\n    if (isWebGLContext(context)) {\n      this.context = context;\n    } else if (isCanvas(context)) {\n      const canvasContext =\n        context.getContext(\"webgl\") || context.getContext(\"experimental-webgl\");\n\n      if (!canvasContext) {\n        console.warn(\n          \"A valid GL context was not found for the context provided to the surface. This surface will not be able to operate.\"\n        );\n      } else {\n        this.context = canvasContext;\n      }\n    } else if (isString(context)) {\n      const element = document.getElementById(context);\n\n      if (isCanvas(element)) {\n        this.setContext(element);\n      }\n    }\n  }\n\n  /**\n   * This applies a new size to the renderer and resizes any additional resources that requires being\n   * sized along with the renderer.\n   */\n  private setRendererSize(width: number, height: number) {\n    width = width || 100;\n    height = height || 100;\n\n    this.renderer.setSize(width, height);\n    this.pickingRenderer.setSize(width, height);\n\n    if (!this.pickingTarget) {\n      this.pickingTarget = new WebGLRenderTarget(width, height, {\n        magFilter: Three.LinearFilter,\n        minFilter: Three.LinearFilter,\n        stencilBuffer: false\n      });\n    }\n\n    this.pickingTarget.setSize(width, height);\n  }\n\n  /**\n   * This triggers an update to all of the layers that perform picking, the pixel data\n   * within the specified mouse range.\n   */\n  updateColorPickRange(mouse: Vec2, views: View[]) {\n    // We will flag the color range as needing an update\n    this.updateColorPick = {\n      mouse,\n      views\n    };\n  }\n}\n","export * from \"./layer-surface\";\nexport * from \"./event-manager\";\nexport * from \"./layer-processing/generate-default-scene\";\nexport * from \"./layer-processing/generate-layer-geometry\";\nexport * from \"./layer-processing/generate-layer-material\";\nexport * from \"./layer-processing/generate-layer-model\";\nexport * from \"./layer-processing/inject-shader-io\";\nexport * from \"./layer\";\nexport * from \"./mouse-event-manager\";\nexport * from \"./scene\";\nexport * from \"./texture\";\nexport * from \"./view\";\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float borderSize;\\nvarying vec2 pointCoord;\\n${extendHeader}\\n\\nvarying float scale;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  scale = scaleFactor;\\n\\n  vertexColor = color * color.a;\\n  float size = radius * scaleFactor;\\n\\n  float ringWidth = mix(2.0 , thickness, float(thickness > 2.0));\\n\\n  borderSize = mix(\\n    (ringWidth) / size,\\n    ((ringWidth * pixelRatio) / size),\\n    float(pixelRatio > 1.0)\\n  );\\n\\n  edgeSharpness = min(0.2 / (ringWidth * scale),  0.1);\\n\\n  pointCoord = (position.xy + vec2(1.0, 1.0)) / 2.0;\\n\\n  // Center within clip space\\n  vec4 clipCenter = clipSpace(vec3(center, depth));\\n  // Center in screen space\\n  vec2 screenCenter = (clipCenter.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Position in screen space\\n  vec2 vertex = (position.xy * size) + screenCenter;\\n  // Position back to clip space\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), clipCenter.zw);\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\n\\n/** This is the color of the ring */\\nvarying vec4 vertexColor;\\n/**\\n * This is how sharp the ring renders. For tiny rings, it's best to have\\n * less sharpness to better convey the shape of a circle. A good starter setting:\\n * edgeSharpness = mix(0.8, 0.01, min(gl_PointSize / 45.0, 1.0));\\n */\\nvarying float edgeSharpness;\\n/**\\n * This should be a value that sets the thickness of the ring in normal space\\n * relative to the PointSize\\n */\\nvarying float borderSize;\\n/**\\n * Since this is now a quad instead of a point sprite, this provides what gl_PointCoord\\n * used to provide.\\n */\\nvarying vec2 pointCoord;\\n\\nvarying float scale;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius,\\n    dot(dist, dist) * 4.0\\n  );\\n\\n}\\n\\n${extendHeader}\\n\\nvoid main() {\\n  float outer_step_factor = circle(pointCoord, 1.0);\\n  float inner_step_factor = circle(pointCoord, 1.0 - borderSize * scale);\\n\\n  setColor(mix(\\n    mix(                        // Select the outer color outside of the inner radius\\n      vec4(0.0, 0.0, 0.0, 0.0),    // Select invisible outside of inner and outer radius\\n      vertexColor,                  // Select outer color outside of inner, but inside outer\\n      outer_step_factor\\n    ),\\n    vec4(0.0, 0.0, 0.0, 0.0),                 // Select inner color inside inner\\n    inner_step_factor\\n  ));\\n\\n  ${extend}\\n}\\n\"","import * as Three from \"three\";\nimport { Bounds, IPoint } from \"../../primitives\";\nimport { ILayerProps, IModelType, Layer } from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  IProjection,\n  IShaderInitialization,\n  IUniform,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport { CommonMaterialOptions, IAutoEasingMethod, Vec } from \"../../util\";\nimport { RingInstance } from \"./ring-instance\";\nconst { max } = Math;\n\nexport interface IRingLayerProps<T extends RingInstance>\n  extends ILayerProps<T> {\n  /** This sets a scaling factor for the circle's radius */\n  scaleFactor?(): number;\n  animate?: {\n    color?: IAutoEasingMethod<Vec>;\n    center?: IAutoEasingMethod<Vec>;\n    radius?: IAutoEasingMethod<Vec>;\n  };\n}\n\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class RingLayer<\n  T extends RingInstance,\n  U extends IRingLayerProps<T>\n> extends Layer<T, U> {\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods() {\n    return {\n      // Provide the calculated AABB world bounds for a given circle\n      boundsAccessor: (ring: RingInstance) =>\n        new Bounds({\n          height: ring.radius * 2,\n          width: ring.radius * 2,\n          x: ring.x - ring.radius,\n          y: ring.y - ring.radius\n        }),\n\n      // Provide a precise hit test for the ring\n      hitTest: (ring: RingInstance, point: IPoint, view: IProjection) => {\n        const r = ring.radius / max(...view.camera.scale);\n        const delta = [point.x - ring.x, point.y - ring.y];\n\n        return delta[0] * delta[0] + delta[1] * delta[1] < r * r;\n      }\n    };\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<RingInstance> {\n    const scaleFactor = this.props.scaleFactor || (() => 1);\n    const animations = this.props.animate || {};\n    const {\n      color: animateColor,\n      center: animateCenter,\n      radius: animateRadius\n    } = animations;\n\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      1: 1,\n      2: -1,\n      3: 1,\n      4: -1,\n      5: -1\n    };\n\n    const vertexToSide: { [key: number]: number } = {\n      0: -1,\n      1: -1,\n      2: -1,\n      3: 1,\n      4: 1,\n      5: 1\n    };\n\n    return {\n      fs: require(\"./ring-layer.fs\"),\n      instanceAttributes: [\n        {\n          easing: animateCenter,\n          name: \"center\",\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.x, o.y]\n        },\n        {\n          easing: animateRadius,\n          name: \"radius\",\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.radius]\n        },\n        {\n          name: \"depth\",\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth]\n        },\n        {\n          easing: animateColor,\n          name: \"color\",\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.color\n        },\n        {\n          name: \"thickness\",\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.thickness]\n        }\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: (_: IUniform) => [scaleFactor()]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexToSide[vertex],\n            0\n          ]\n        }\n      ],\n      vertexCount: 6,\n      vs: require(\"./ring-layer.vs\")\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentShape;\n  }\n}\n","import { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { observable } from \"../../instance-provider/observable\";\nimport { Circle } from \"../../primitives\";\n\nexport interface IRingInstanceOptions extends IInstanceOptions, Circle {\n  /** The color of this ring */\n  color?: [number, number, number, number];\n  /** The z depth of the ring (for draw ordering) */\n  depth?: number;\n  /** The thickness of the ring */\n  thickness?: number;\n}\n\nexport class RingInstance extends Instance implements Circle {\n  @observable color: [number, number, number, number] = [1.0, 1.0, 1.0, 1.0];\n  @observable depth: number = 0;\n  @observable radius: number = 0;\n  @observable thickness: number = 1;\n  @observable x: number = 0;\n  @observable y: number = 0;\n\n  constructor(options: IRingInstanceOptions) {\n    super(options);\n\n    this.color = options.color || [1, 1, 1, 1];\n    this.depth = options.depth || 0;\n    this.radius = options.radius;\n    this.thickness = options.thickness || this.thickness;\n    this.x = options.x;\n    this.y = options.y;\n  }\n\n  get width() {\n    return this.radius * 2;\n  }\n\n  get height() {\n    return this.radius * 2;\n  }\n\n  get innerRadius() {\n    return this.radius - this.thickness;\n  }\n}\n","export * from \"./ring-instance\";\nexport * from \"./ring-layer\";\n","import { observable } from \"../../instance-provider\";\nimport { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { Anchor, AnchorType, ScaleType } from \"../types\";\n\nexport interface IRectangleInstanceOptions extends IInstanceOptions {\n  /**\n   * The point on the rectangle which will be placed in world space via the x, y coords. This is also the point\n   * which the rectangle will be scaled around.\n   */\n  anchor?: Anchor;\n  /** Depth sorting of the rectangle (or the z value of the lable) */\n  depth?: number;\n  /** The height of the rectangle as it is to be rendered in world space */\n  height?: number;\n  /** Sets the way the rectangle scales with the world */\n  scaling?: ScaleType;\n  /** The color the rectangle should render as */\n  color: [number, number, number, number];\n  /** The width of the rectangle as it is to be rendered in world space */\n  width?: number;\n  /** The x coordinate where the rectangle will be anchored to in world space */\n  x?: number;\n  /** The y coordinate where the rectangle will be anchored to in world space */\n  y?: number;\n}\n\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nconst anchorCalculator: {\n  [key: number]: (anchor: Anchor, rectangle: RectangleInstance) => void;\n} = {\n  [AnchorType.TopLeft]: (anchor: Anchor, _rectangle: RectangleInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopMiddle]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width / 2.0;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopRight]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width + anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.MiddleLeft]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = rectangle.height / 2;\n  },\n  [AnchorType.Middle]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width / 2.0;\n    anchor.y = rectangle.height / 2.0;\n  },\n  [AnchorType.MiddleRight]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width + anchor.padding;\n    anchor.y = rectangle.height / 2.0;\n  },\n  [AnchorType.BottomLeft]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = rectangle.height + anchor.padding;\n  },\n  [AnchorType.BottomMiddle]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width / 2.0;\n    anchor.y = rectangle.height + anchor.padding;\n  },\n  [AnchorType.BottomRight]: (anchor: Anchor, rectangle: RectangleInstance) => {\n    anchor.x = rectangle.width + anchor.padding;\n    anchor.y = rectangle.height + anchor.padding;\n  },\n  [AnchorType.Custom]: (anchor: Anchor, _rectangle: RectangleInstance) => {\n    anchor.x = anchor.x || 0;\n    anchor.y = anchor.y || 0;\n  }\n};\n\n/**\n * This generates a new rectangle instance which will render a single line of text for a given layer.\n * There are restrictions surrounding rectangles due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a rectangle via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Rectangles should only be so long.\n * - Multiline is not supported inherently\n * - Once a rectangle is constructed, only SOME properties can be altered thereafter\n *\n * A rectangle that is constructed can only have some properties set upon creating the rectangle and are locked\n * thereafter. The only way to modify them would be to destroy the rectangle, then construct a new rectangle\n * with the modifications. This has to deal with performance regarding rasterizing the rectangle\n */\nexport class RectangleInstance extends Instance {\n  /** This is the rendered color of the rectangle */\n  @observable color: [number, number, number, number] = [0, 0, 0, 1];\n  /** Depth sorting of the rectangle (or the z value of the lable) */\n  @observable depth: number = 0;\n  /** The height of the rectangle as it is to be rendered in world space */\n  @observable height: number = 1;\n  /** Sets the way the rectangle scales with the world */\n  @observable scaling: ScaleType = ScaleType.BOUND_MAX;\n  /** The width of the rectangle as it is to be rendered in world space */\n  @observable width: number = 1;\n  /** The x coordinate where the rectangle will be anchored to in world space */\n  @observable x: number = 0;\n  /** The y coordinate where the rectangle will be anchored to in world space */\n  @observable y: number = 0;\n\n  // These are properties that can be altered, but have side effects from being changed\n\n  /** This is the anchor location on the  */\n  @observable\n  private _anchor: Anchor = {\n    padding: 0,\n    type: AnchorType.TopLeft,\n    x: 0,\n    y: 0\n  };\n\n  constructor(options: IRectangleInstanceOptions) {\n    super(options);\n\n    this.depth = options.depth || this.depth;\n    this.color = options.color || this.color;\n    this.scaling = options.scaling || this.scaling;\n    this.x = options.x || this.x;\n    this.y = options.y || this.y;\n    this.width = options.width || 1;\n    this.height = options.height || 1;\n\n    // Make sure the anchor is set to the appropriate location\n    options.anchor && this.setAnchor(options.anchor);\n  }\n\n  get anchor() {\n    return this._anchor;\n  }\n\n  /**\n   * This applies a new anchor to this rectangle and properly determines it's anchor position on the rectangle\n   */\n  setAnchor(anchor: Anchor) {\n    const newAnchor = {\n      padding: anchor.padding || 0,\n      type: anchor.type,\n      x: anchor.x || 0,\n      y: anchor.y || 0\n    };\n\n    // Calculate the new anchors position values\n    anchorCalculator[newAnchor.type](newAnchor, this);\n    // Apply the anchor\n    this._anchor = newAnchor;\n  }\n}\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the image as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the image is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y;\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float((cameraScale.x > cameraScale.y || cameraScale.y > cameraScale.x) && useScaleMode != 0.0);\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n  // Apply the image's tint as a tint to the image\\n  vertexColor = color * color.a;\\n\\n  // Correct aspect ratio.\\n  vec2 adjustedSize = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * size + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the image\\n  float imageScreenScale = mix(\\n    screenSize.y / adjustedSize.y,\\n    screenSize.x / adjustedSize.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the image is supposed to be, then we automagically\\n  // scale down our image to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / imageScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\n${extendHeader}\\n\\nvoid main() {\\n  setColor(vertexColor);\\n  ${extend}\\n}\\n\"","import * as Three from \"three\";\nimport { Bounds, IPoint } from \"../../primitives\";\nimport { ILayerProps, IModelType, Layer } from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  IProjection,\n  IShaderInitialization,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport { CommonMaterialOptions } from \"../../util\";\nimport { ScaleType } from \"../types\";\nimport { RectangleInstance } from \"./rectangle-instance\";\n\nconst { min, max } = Math;\n\nexport interface IRectangleLayerProps<T extends RectangleInstance>\n  extends ILayerProps<T> {\n  atlas?: string;\n}\n\n/**\n * This layer displays Rectangles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class RectangleLayer<\n  T extends RectangleInstance,\n  U extends IRectangleLayerProps<T>\n> extends Layer<T, U> {\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods() {\n    return {\n      // Provide the calculated AABB world bounds for a given rectangle\n      boundsAccessor: (rectangle: RectangleInstance) => {\n        const anchorEffect = [0, 0];\n\n        if (rectangle.anchor) {\n          anchorEffect[0] = rectangle.anchor.x || 0;\n          anchorEffect[1] = rectangle.anchor.y || 0;\n        }\n        const topLeft = [\n          rectangle.x - anchorEffect[0],\n          rectangle.y - anchorEffect[1]\n        ];\n\n        return new Bounds({\n          height: rectangle.height,\n          width: rectangle.width,\n          x: topLeft[0],\n          y: topLeft[1]\n        });\n      },\n\n      // Provide a precise hit test for the circle\n      hitTest: (\n        rectangle: RectangleInstance,\n        point: IPoint,\n        projection: IProjection\n      ) => {\n        // The bounds of the rectangle is in world space, but it does not account for the scale mode of the rectangle.\n        // Here, we will apply the scale mode testing to the rectangle\n        const maxScale = max(...projection.camera.scale);\n        const minScale = min(...projection.camera.scale);\n\n        // If we scale always then the rectangle stays within it's initial world bounds at all times\n        if (rectangle.scaling === ScaleType.ALWAYS) {\n          return true;\n        }\n\n        // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n        // Rectangle the same size. If the camera zooms out then the bounds === the world bounds.\n        else if (rectangle.scaling === ScaleType.BOUND_MAX) {\n          // We are zooming out. the bounds will stay within the world bounds\n          if (minScale <= 1 && maxScale <= 1) {\n            return true;\n          }\n\n          // We are zooming in. The bounds will shrink to keep the rectangle at max font size\n          else {\n            // The location is within the world, but we reverse project the anchor spread\n            const anchorEffect = [0, 0];\n\n            if (rectangle.anchor) {\n              anchorEffect[0] = rectangle.anchor.x || 0;\n              anchorEffect[1] = rectangle.anchor.y || 0;\n            }\n\n            const topLeft = [\n              rectangle.x - anchorEffect[0] / maxScale,\n              rectangle.y - anchorEffect[1] / maxScale\n            ];\n\n            // Reverse project the size and we should be within the distorted world coordinates\n            return new Bounds({\n              height: rectangle.height / maxScale,\n              width: rectangle.width / maxScale,\n              x: topLeft[0],\n              y: topLeft[1]\n            }).containsPoint(point);\n          }\n        }\n\n        // If we never allow the rectangle to scale, then the bounds will grow and shrink to counter the effects\n        // Of the camera zoom\n        else if (rectangle.scaling === ScaleType.NEVER) {\n          // The location is within the world, but we reverse project the anchor spread\n          const anchorEffect = [0, 0];\n\n          if (rectangle.anchor) {\n            anchorEffect[0] = rectangle.anchor.x || 0;\n            anchorEffect[1] = rectangle.anchor.y || 0;\n          }\n\n          const topLeft = projection.worldToScreen({\n            x: rectangle.x - anchorEffect[0] / projection.camera.scale[0],\n            y: rectangle.y - anchorEffect[1] / projection.camera.scale[1]\n          });\n\n          const screenPoint = projection.worldToScreen(point);\n\n          // Reverse project the size and we should be within the distorted world coordinates\n          return new Bounds({\n            height: rectangle.height,\n            width: rectangle.width,\n            x: topLeft.x,\n            y: topLeft.y\n          }).containsPoint(screenPoint);\n        }\n\n        return true;\n      }\n    };\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<RectangleInstance> {\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      1: 1,\n      2: -1,\n      3: 1,\n      4: -1,\n      5: -1\n    };\n\n    const vertexToSide: { [key: number]: number } = {\n      0: 0,\n      1: 0,\n      2: 0,\n      3: 1,\n      4: 1,\n      5: 1\n    };\n\n    return {\n      fs: require(\"./rectangle-layer.fs\"),\n      instanceAttributes: [\n        {\n          name: \"location\",\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.x, o.y]\n        },\n        {\n          name: \"anchor\",\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.anchor.x || 0, o.anchor.y || 0]\n        },\n        {\n          name: \"size\",\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.width, o.height]\n        },\n        {\n          name: \"depth\",\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth]\n        },\n        {\n          name: \"scaling\",\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.scaling]\n        },\n        {\n          name: \"color\",\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.color\n        }\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: _u => [1]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexToSide[vertex],\n            0\n          ]\n        }\n      ],\n      vertexCount: 6,\n      vs: require(\"./rectangle-layer.vs\")\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentShape;\n  }\n}\n","export * from \"./rectangle-layer\";\nexport * from \"./rectangle-instance\";\n","import { observable } from \"../../instance-provider\";\nimport { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { Label } from \"../../primitives/label\";\nimport { LabelAtlasResource, LabelRasterizer } from \"../../surface/texture\";\nimport { Anchor, AnchorType, ScaleType } from \"../types\";\n\nexport interface ILabelInstanceOptions\n  extends IInstanceOptions,\n    Partial<Label> {\n  /**\n   * The point on the label which will be placed in world space via the x, y coords. This is also the point\n   * which the label will be scaled around.\n   */\n  anchor?: Anchor;\n  /** The color the label should render as */\n  color: [number, number, number, number];\n  /** Depth sorting of the label (or the z value of the label) */\n  depth?: number;\n  /** The font of the label */\n  fontFamily?: string;\n  /** The font size of the label in px */\n  fontSize?: number;\n  /** Stylization of the font */\n  fontStyle?: Label[\"fontStyle\"];\n  /** The weight of the font */\n  fontWeight?: Label[\"fontWeight\"];\n  /** When this is set labels will only draw the label up to this size. If below, the label will automatically truncate with ellipses */\n  maxWidth?: number;\n  /** When in BOUND_MAX mode, this allows the label to scale up beyond it's max size */\n  maxScale?: number;\n  /** This allows for control over rasterization to the atlas */\n  rasterization?: {\n    /**\n     * This is the scale of the rasterization on the atlas. Higher numbers increase atlas usage, but can provide\n     * higher quality render outputs to the surface.\n     */\n    scale: number;\n  };\n  /** Sets the way the label scales with the world */\n  scaling?: ScaleType;\n  /** Scales the label uniformly */\n  scale?: number;\n  /** This will be the text that should render with  */\n  text: string;\n  /** The x coordinate where the label will be anchored to in world space */\n  x?: number;\n  /** The y coordinate where the label will be anchored to in world space */\n  y?: number;\n}\n\n/** This is to make a clear type that references label text values */\ntype TextValue = string;\n/** This is to make a clear type that references label css font values */\ntype CSSFont = string;\n/**\n * This is a reference for a rasterization that has reference counting. When the references go to zero,\n * the rasterization should be invalidated and resources freed for the rasterization.\n */\ntype RasterizationReference = {\n  resource: LabelAtlasResource;\n  references: number;\n};\n\n/**\n * This is a lookup to find existing rasterizations for a particularly created label so that every\n * new label does not have to go through the rasterization process.\n */\nconst rasterizationLookUp = new Map<\n  TextValue,\n  Map<CSSFont, RasterizationReference>\n>();\n\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nconst anchorCalculator: {\n  [key: number]: (anchor: Anchor, label: LabelInstance) => void;\n} = {\n  [AnchorType.TopLeft]: (anchor: Anchor, _label: LabelInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopMiddle]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width / 2.0;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopRight]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width + anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.MiddleLeft]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = label.height / 2;\n  },\n  [AnchorType.Middle]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width / 2.0;\n    anchor.y = label.height / 2.0;\n  },\n  [AnchorType.MiddleRight]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width + anchor.padding;\n    anchor.y = label.height / 2.0;\n  },\n  [AnchorType.BottomLeft]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = label.height + anchor.padding;\n  },\n  [AnchorType.BottomMiddle]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width / 2.0;\n    anchor.y = label.height + anchor.padding;\n  },\n  [AnchorType.BottomRight]: (anchor: Anchor, label: LabelInstance) => {\n    anchor.x = label.width + anchor.padding;\n    anchor.y = label.height + anchor.padding;\n  },\n  [AnchorType.Custom]: (anchor: Anchor, _label: LabelInstance) => {\n    anchor.x = anchor.x || 0;\n    anchor.y = anchor.y || 0;\n  }\n};\n\n/**\n * This generates a new label instance which will render a single line of text for a given layer.\n * There are restrictions surrounding labels due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a label via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Labels should only be so long.\n * - Multiline is not supported inherently\n * - Once a label is constructed, only SOME properties can be altered thereafter\n *\n * A label that is constructed can only have some properties set upon creating the label and are locked\n * thereafter. The only way to modify them would be to destroy the label, then construct a new label\n * with the modifications. This has to deal with performance regarding rasterizing the label\n */\nexport class LabelInstance extends Instance implements Label {\n  /**\n   * TODO: We should be implementing the destroy on LabelInstances to clean this up\n   * Frees up module scoped data.\n   */\n  static destroy() {\n    rasterizationLookUp.clear();\n  }\n\n  /** This is the rendered color of the label */\n  @observable color: [number, number, number, number] = [0, 0, 0, 1];\n  /** Depth sorting of the label (or the z value of the label) */\n  @observable depth: number = 0;\n  /** When in BOUND_MAX mode, this allows the label to scale up beyond it's max size */\n  @observable maxScale: number = 1;\n  /** Sets the way the label scales with the world */\n  @observable scaling: ScaleType = ScaleType.BOUND_MAX;\n  /** Scales the label uniformly */\n  @observable scale: number = 1.0;\n  /** The x coordinate where the label will be anchored to in world space */\n  @observable x: number = 0;\n  /** The y coordinate where the label will be anchored to in world space */\n  @observable y: number = 0;\n\n  // The following properties are properties that are locked in after creating this label\n  // As the properties are completely locked into how the label was rasterized and can not\n  // Nor should not be easily adjusted for performance concerns\n\n  private _cssFont: string = \"\";\n  private _fontFamily: string = \"Arial\";\n  private _fontSize: number = 12;\n  private _fontStyle: Label[\"fontStyle\"] = \"normal\";\n  private _fontWeight: Label[\"fontWeight\"] = 400;\n  private _maxWidth: number = 0;\n  private _text: string = \"\";\n\n  @observable private _width: number = 0;\n\n  @observable private _height: number = 0;\n\n  private _isDestroyed: boolean = false;\n\n  @observable private _rasterization: RasterizationReference;\n\n  // The following are the getters for the locked in parameters of the label so we can read\n  // The properties but not set any of them.\n\n  /**\n   * This is the full css string that represents this label. This + the text of the label is essentially\n   * a unique identifier for the rendering of the label and is used to key the rasterization of the label\n   * so that label rasterization can be shared for similar labels.\n   */\n  get cssFont() {\n    return this._cssFont;\n  }\n  /** This flag indicates if this label is valid anymore */\n  get isDestroyed() {\n    return this._isDestroyed;\n  }\n  /** This is the font family of the label */\n  get fontFamily() {\n    return this._fontFamily;\n  }\n  /**\n   * This is the size of the label in pixels. For Labels, this correlates to the rendering font size.\n   * The true pixel height of the label is calculated and placed into the height property for the label.\n   */\n  get fontSize() {\n    return this._fontSize;\n  }\n  /** This is the style of the font (italic, oblique, etc) */\n  get fontStyle() {\n    return this._fontStyle;\n  }\n  /** This is the font weight specified for the label (bold, normal, etc). */\n  get fontWeight() {\n    return this._fontWeight;\n  }\n  /** This is the max width in pixels this label can fill */\n  get maxWidth() {\n    return this._maxWidth;\n  }\n  /** This gets the atlas resource that is uniquely identified for this label */\n  get resource() {\n    return this._rasterization.resource;\n  }\n  /** This is the label's text. */\n  get text() {\n    return this._text;\n  }\n  /**\n   * If a maxWidth is specified, there is a chance the text will be truncated.\n   * This provides the calculated truncated text.\n   */\n  get truncatedText() {\n    return this._rasterization.resource.truncatedText || this.text;\n  }\n\n  /**\n   * This is the width in world space of the label. If there is no camera distortion,\n   * this would be the width of the label in pixels on the screen.\n   */\n  get width() {\n    return this._width;\n  }\n\n  /**\n   * This is the height in world space of the label. If there is no camera distortion,\n   * this would be the height of the label in pixels on the screen.\n   */\n  get height() {\n    return this._height;\n  }\n\n  // These are properties that can be altered, but have side effects from being changed\n\n  /** This is the anchor location on the  */\n  @observable\n  private _anchor: Anchor = {\n    padding: 0,\n    type: AnchorType.TopLeft,\n    x: 0,\n    y: 0\n  };\n\n  constructor(options: ILabelInstanceOptions) {\n    super(options);\n\n    this.depth = options.depth || this.depth;\n    this.color = options.color || this.color;\n    this.maxScale = options.maxScale || this.maxScale;\n    this.scaling = options.scaling || this.scaling;\n    this.scale = options.scale || this.scale;\n\n    this.x = options.x || this.x;\n    this.y = options.y || this.y;\n\n    this._fontFamily = options.fontFamily || this._fontFamily;\n    this._fontSize = options.fontSize || this._fontSize;\n    this._fontStyle = options.fontStyle || this._fontStyle;\n    this._fontWeight = options.fontWeight || this._fontWeight;\n    this._maxWidth = options.maxWidth || 0;\n    this._text = options.text || this._text;\n\n    // We get the CSS font string for this label so we can uniquely identify the rasterization\n    // Easily.\n    this._cssFont = LabelRasterizer.makeCSSFont(this, 1);\n    // This is css font used to look up rasterizations. This lookup includes the max width of the label\n    // Which the css font does not account for\n    const cssFontLookup = `${this._cssFont}_${this._maxWidth}`;\n    // Look for other same texts that have been rasterized\n    let rasterizations = rasterizationLookUp.get(this._text);\n    let rasterization: RasterizationReference | null | undefined;\n\n    if (rasterizations) {\n      // Look for those texts that have been rasterized in the same fashion that this label is requesting\n      rasterization = rasterizations.get(cssFontLookup);\n\n      // If a rasterization exists, we must increment the use reference\n      if (rasterization) {\n        rasterization.references++;\n      }\n    } else {\n      rasterizations = new Map<CSSFont, RasterizationReference>();\n    }\n\n    // If we have not found an existing rasterization\n    if (!rasterization) {\n      rasterization = {\n        references: 1,\n        resource: new LabelAtlasResource(this)\n      };\n\n      // Look to see if any rasterization options were specified\n      if (options.rasterization) {\n        rasterization.resource.sampleScale = options.rasterization.scale || 1.0;\n      }\n\n      // Ensure the sample scale is set. Defaults to 1.0\n      rasterization.resource.sampleScale =\n        rasterization.resource.sampleScale || 1.0;\n      // Rasterize the resource generated for this label. We need it immediately rasterized so\n      // That we can utilize the dimensions for calculations.\n      LabelRasterizer.renderSync(rasterization.resource);\n      // Now that we have an official rasterization for this text / label combo, we shall store it\n      // For others to look up\n      rasterizationLookUp.set(this._text, rasterizations);\n      rasterizations.set(cssFontLookup, rasterization);\n    }\n\n    this._rasterization = rasterization;\n    this._width = rasterization.resource.rasterization.world.width;\n    this._height = rasterization.resource.rasterization.world.height;\n\n    // Make sure the anchor is set to the appropriate location\n    options.anchor && this.setAnchor(options.anchor);\n  }\n\n  get anchor() {\n    return this._anchor;\n  }\n\n  /**\n   * Labels are a sort of unique case where the use of a label should be destroyed as rasterization\n   * resources are in a way kept alive through reference counting.\n   */\n  destroy() {\n    if (!this._isDestroyed) {\n      this._isDestroyed = true;\n      this._rasterization.references--;\n\n      // If all references are cleared, then the rasterization needs to be eradicated\n      if (this._rasterization.references === 0) {\n        this._rasterization.resource;\n      }\n    }\n  }\n\n  /**\n   * Triggers any attributes waiting on resources\n   */\n  resourceTrigger() {\n    // Trigger the accessed element that the layer utilizes for resource fetching.\n    this._rasterization = this._rasterization;\n    this._width = this._width;\n  }\n\n  /**\n   * This applies a new anchor to this label and properly determines it's anchor position on the label\n   */\n  setAnchor(anchor: Anchor) {\n    const newAnchor = {\n      padding: anchor.padding || 0,\n      type: anchor.type,\n      x: anchor.x || 0,\n      y: anchor.y || 0\n    };\n\n    // Calculate the new anchors position values\n    anchorCalculator[newAnchor.type](newAnchor, this);\n    // Apply the anchor\n    this._anchor = newAnchor;\n  }\n}\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Determine final screen size of label\\n  vec3 screenSize = cameraSpaceSize(vec3(size * scale / maxScale, 1.0));\\n\\n  // Test whether the label is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y || screenSize.x > size.x;\\n\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n\\n  // Correct aspect ratio.  Sufficient fix for most applications.\\n  // Will need another solution in the case of:\\n  //  (cameraScale y != cameraScale.x) && (cameraScale.x != 1 && cameraScale.y != 1)\\n\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float(cameraScale.x != cameraScale.y);\\n\\n  vec2 adjustedSize = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  vec2 scaledAnchor = anchor * scale;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + scaledAnchor;\\n\\n  vec2 adjustedAnchor = mix(\\n    scaledAnchor,\\n    (scaledAnchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // Get the position of the current vertex\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * scale * adjustedSize + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the label\\n  float labelScreenScale = mix(\\n    screenSize.y / adjustedSize.y,\\n    screenSize.x / adjustedSize.x,\\n    float((cameraScale.x != 1.0))\\n  );\\n\\n  float currentScale = labelScreenScale * scale;\\n\\n  // If our screen rendering is larger than the size the label is supposed to be, then we automagically\\n  // scale down our label to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / labelScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  // --Texture and Color\\n  // Get the tex coord from our inject texture info\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the label's color as a tint to the label (all labels are rendered white to the base texture)\\n  vertexColor = color;\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n${extendHeader}\\n\\nvoid main() {\\n  gl_FragColor = texture2D(labelAtlas, texCoord) * vertexColor;\\n  setColor(gl_FragColor * gl_FragColor.a);\\n  ${extend}\\n}\\n\"","import * as Three from \"three\";\nimport { Bounds, IPoint } from \"../../primitives\";\nimport { ILayerProps, IModelType, Layer } from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  IProjection,\n  IShaderInitialization,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport {\n  CommonMaterialOptions,\n  IAutoEasingMethod,\n  Vec,\n  Vec2\n} from \"../../util\";\nimport { ScaleType } from \"../types\";\nimport { LabelInstance } from \"./label-instance\";\n\nexport interface ILabelLayerProps<T extends LabelInstance>\n  extends ILayerProps<T> {\n  atlas?: string;\n  animate?: {\n    color?: IAutoEasingMethod<Vec>;\n    location?: IAutoEasingMethod<Vec>;\n    size?: IAutoEasingMethod<Vec>;\n  };\n}\n\nconst { max, min } = Math;\n\n/**\n * This layer displays Labels and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class LabelLayer<\n  T extends LabelInstance,\n  U extends ILabelLayerProps<T>\n> extends Layer<T, U> {\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods() {\n    return {\n      // Provide the calculated AABB world bounds for a given label\n      boundsAccessor: (label: LabelInstance) => {\n        const anchor: Vec2 = [label.anchor.x || 0, label.anchor.y || 0];\n\n        const topLeft = [label.x - anchor[0], label.y - anchor[1]];\n\n        return new Bounds({\n          height: label.height,\n          width: label.width,\n          x: topLeft[0],\n          y: topLeft[1]\n        });\n      },\n\n      // Provide a precise hit test for the circle\n      hitTest: (label: LabelInstance, point: IPoint, view: IProjection) => {\n        // The bounds of the label is in world space, but it does not account for the scale mode of the label.\n        // Here, we will apply the scale mode testing to the label\n        const maxScale = max(...view.camera.scale);\n        const minScale = min(...view.camera.scale);\n\n        // If we scale always then the label stays within it's initial world bounds at all times\n        if (label.scaling === ScaleType.ALWAYS) {\n          return true;\n        }\n\n        // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n        // Label the same size. If the camera zooms out then the bounds === the world bounds.\n        else if (label.scaling === ScaleType.BOUND_MAX) {\n          // We are zooming out. the bounds will stay within the world bounds\n          if (minScale <= 1 && maxScale <= 1) {\n            return true;\n          }\n\n          // We are zooming in. The bounds will shrink to keep the label at max font size\n          else {\n            const anchor: Vec2 = [label.anchor.x || 0, label.anchor.y || 0];\n\n            // The location is within the world, but we reverse project the anchor spread\n            const topLeft = view.worldToScreen({\n              x: label.x - anchor[0] / view.camera.scale[0],\n              y: label.y - anchor[1] / view.camera.scale[1]\n            });\n\n            const screenPoint = view.worldToScreen(point);\n\n            // Reverse project the size and we should be within the distorted world coordinates\n            return new Bounds({\n              height: label.height,\n              width: label.width,\n              x: topLeft.x,\n              y: topLeft.y\n            }).containsPoint(screenPoint);\n          }\n        }\n\n        // If we never allow the label to scale, then the bounds will grow and shrink to counter the effects\n        // Of the camera zoom\n        else if (label.scaling === ScaleType.NEVER) {\n          const anchor: Vec2 = [label.anchor.x || 0, label.anchor.y || 0];\n\n          // The location is within the world, but we reverse project the anchor spread\n          const topLeft = view.worldToScreen({\n            x: label.x - anchor[0] / view.camera.scale[0],\n            y: label.y - anchor[1] / view.camera.scale[1]\n          });\n\n          const screenPoint = view.worldToScreen(point);\n\n          // Reverse project the size and we should be within the distorted world coordinates\n          return new Bounds({\n            height: label.height,\n            width: label.width,\n            x: topLeft.x,\n            y: topLeft.y\n          }).containsPoint(screenPoint);\n        }\n\n        return true;\n      }\n    };\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<LabelInstance> {\n    const animations = this.props.animate || {};\n    const {\n      color: animateColor,\n      location: animateLocation,\n      size: animateSize\n    } = animations;\n\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      1: 1,\n      2: -1,\n      3: 1,\n      4: -1,\n      5: -1\n    };\n\n    const vertexToSide: { [key: number]: number } = {\n      0: 0,\n      1: 0,\n      2: 0,\n      3: 1,\n      4: 1,\n      5: 1\n    };\n\n    return {\n      fs: require(\"./label-layer.fs\"),\n      instanceAttributes: [\n        {\n          easing: animateLocation,\n          name: \"location\",\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.x, o.y]\n        },\n        {\n          name: \"anchor\",\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.anchor.x || 0, o.anchor.y || 0]\n        },\n        {\n          easing: animateSize,\n          name: \"size\",\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.width, o.height]\n        },\n        {\n          name: \"depth\",\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth]\n        },\n        {\n          name: \"scaling\",\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.scaling]\n        },\n        {\n          atlas: {\n            key: this.props.atlas || \"\",\n            name: \"labelAtlas\"\n          },\n          name: \"texture\",\n          update: o => this.resource.request(this, o, o.resource)\n        },\n        {\n          easing: animateColor,\n          name: \"color\",\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.color\n        },\n        {\n          name: \"scale\",\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.scale]\n        },\n        {\n          name: \"maxScale\",\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.maxScale]\n        }\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: _u => [1]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexToSide[vertex],\n            0\n          ]\n        }\n      ],\n      vertexCount: 6,\n      vs: require(\"./label-layer.vs\")\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentImage;\n  }\n}\n","import { ImageAtlasResource } from \"./image-atlas-resource\";\n\nlet canvas: CanvasRenderingContext2D | null;\n\nexport interface IImageRasterizedMetrics {\n  canvas: HTMLCanvasElement;\n  height: number;\n  width: number;\n}\n\nexport class ImageRasterizer {\n  /**\n   * This loops until our canvas context is available\n   */\n  static async awaitContext() {\n    // Iterate till the browser provides a valid canvas to render elements into\n    while (!canvas) {\n      this.getContext();\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n  }\n\n  /**\n   * Attempts to populate the 'canvas' context for rendering images offscreen.\n   */\n  static getContext() {\n    if (!canvas) {\n      canvas = document.createElement(\"canvas\").getContext(\"2d\");\n    }\n\n    return canvas;\n  }\n\n  /**\n   * This renders our image to a sizeable canvas where we loop over the pixel data to determine\n   * the bounds of the image.\n   *\n   * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n   *                                 the size to be rendered to the texture to the size the image\n   *                                 should be within world space.\n   * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n   */\n  static calculateImageSize(\n    resource: ImageAtlasResource,\n    _sampleScale?: number\n  ) {\n    /** Get the image properties for rasterizing */\n    const image = resource.image.element;\n\n    if (!image) {\n      console.warn(\n        \"Image does not exist! Please ensure the resource contains a valid image.\"\n      );\n      return;\n    }\n\n    if (!canvas) {\n      console.warn(\n        \"The Image rasterizer was unable to establish a valid canvas context. Please ensure the system supports contexts and ensure the document is ready first.\"\n      );\n      return;\n    }\n\n    if (image.width === 0 || image.height === 0) {\n      console.warn(\n        \"Images provided shoud have valid dimensions! Please ensure the image is loaded first.\"\n      );\n      return;\n    }\n\n    // Just make sure th canvas is available\n    canvas.canvas.width = 100;\n    canvas.canvas.height = 100;\n    // Render the image into our canvas merely to ensure the image can be rendered\n    // This action often 'warms up' images such as images that have a data URL instead of a path\n    canvas.drawImage(image, 0, 0);\n\n    // Make sure the rasterization object is initialized\n    resource.rasterization = resource.rasterization || {\n      texture: { height: 0, width: 0 },\n      world: { height: 0, width: 0 }\n    };\n\n    // Update the calculated texture size.\n    resource.rasterization.texture = {\n      height: image.height * resource.sampleScale,\n      width: image.width * resource.sampleScale\n    };\n\n    resource.rasterization.world = {\n      height: image.height,\n      width: image.width\n    };\n\n    resource.rasterization.image = image;\n  }\n\n  /**\n   * Performs the rendering of the image\n   */\n  static async render(\n    resource: ImageAtlasResource\n  ): Promise<ImageAtlasResource> {\n    // Make sure our canvas object is ready for rendering\n    await this.awaitContext();\n\n    // Calculate all of the image metrics and ensure the image can be drawn\n    this.calculateImageSize(resource, resource.sampleScale);\n\n    return resource;\n  }\n\n  /**\n   * Performs the rendering of the image\n   */\n  static renderSync(resource: ImageAtlasResource): ImageAtlasResource {\n    // Ensure our offscreen canvas is prepped\n    this.getContext();\n\n    if (!canvas) {\n      console.warn(\n        \"Can not render a image synchronously without the canvas context being ready.\"\n      );\n      return resource;\n    }\n\n    // Calculate all of the image metrics and generate a canvas on the image that can\n    // Be rendered to the canvas.\n    this.calculateImageSize(resource, resource.sampleScale);\n\n    return resource;\n  }\n}\n","import { Bounds } from \"../../primitives/bounds\";\nimport { Atlas, IAtlasOptions } from \"./atlas\";\nimport { ColorAtlasResource } from \"./color-atlas-resource\";\nimport { ColorRasterizer } from \"./color-rasterizer\";\nimport { ImageAtlasResource } from \"./image-atlas-resource\";\nimport { LabelAtlasResource } from \"./label-atlas-resource\";\nimport { LabelRasterizer } from \"./label-rasterizer\";\nimport { ImageDimensions, PackNode } from \"./pack-node\";\nimport { SubTexture } from \"./sub-texture\";\n\nconst debug = require(\"debug\")(\"webgl-surface:Atlas\");\n\nconst ZERO_IMAGE: SubTexture = {\n  aspectRatio: 0,\n  atlasBL: { x: 0, y: 0 },\n  atlasBR: { x: 0, y: 0 },\n  atlasReferenceID: \"\",\n  atlasTexture: null,\n  atlasTL: { x: 0, y: 0 },\n  atlasTR: { x: 0, y: 0 },\n  heightOnAtlas: 0,\n  isValid: false,\n  pixelHeight: 0,\n  pixelWidth: 0,\n  widthOnAtlas: 0\n};\n\nexport type AtlasResource =\n  | ColorAtlasResource\n  | LabelAtlasResource\n  | ImageAtlasResource;\n\n/**\n * Determines if a SubTexture is a valid SubTexture for rendering\n */\nfunction isValidImage(image: SubTexture) {\n  let isValid = false;\n\n  if (image && image.isValid) {\n    if (image.pixelWidth && image.pixelHeight) {\n      isValid = true;\n    }\n  }\n\n  return isValid;\n}\n\n/**\n * Defines a manager of atlas', which includes generating the atlas and producing\n * textures defining those pieces of atlas.\n */\nexport class AtlasManager {\n  /** Stores all of the generated atlas' in a lookup by name */\n  allAtlas = new Map<string, Atlas>();\n\n  /**\n   * Atlas' must be created from scratch to update them. In order to properly\n   * update an existing one, you must destroy it then recreate it again.\n   * This is from not knowing how to update a texture via three js.\n   *\n   * @param resources The images with their image path set to be loaded into the atlas.\n   *               Images that keep an atlas ID of null indicates the image did not load\n   *               correctly\n   *\n   * @return {Texture} The Threejs texture that is created as our atlas. The images injected\n   *                   into the texture will be populated with the atlas'\n   */\n  async createAtlas(options: IAtlasOptions, resources?: AtlasResource[]) {\n    // Create the new Atlas object that tracks all of our atlas' metrics\n    const atlas = new Atlas(options);\n    // Set the manager to the atlas\n    atlas.setManager(this);\n    // Make the atlas identifiable by it's name\n    this.allAtlas.set(atlas.id, atlas);\n\n    // Now we load, pack in, and draw each requested resource\n    if (resources) {\n      await this.updateAtlas(atlas.id, resources);\n    }\n\n    debug(\"Atlas Created-> %o\", atlas);\n\n    return atlas;\n  }\n\n  /**\n   * Free ALL resources under this manager\n   */\n  destroy() {\n    this.allAtlas.forEach(value => value.destroy());\n  }\n\n  /**\n   * Disposes of the resources the atlas held and makes the atlas invalid for use\n   *\n   * @param atlasName\n   */\n  destroyAtlas(atlasName: string) {\n    const atlas = this.allAtlas.get(atlasName);\n\n    if (atlas) {\n      atlas.destroy();\n    }\n  }\n\n  private setDefaultImage(image: SubTexture, atlasName: string) {\n    image = Object.assign(image, ZERO_IMAGE, { atlasReferenceID: atlasName });\n    return image;\n  }\n\n  /**\n   * This loads, packs, and draws the indicated image into the specified canvas\n   * using the metrics that exists for the specified atlas.\n   *\n   * @param resource The image who should have it's image path loaded\n   * @param atlasName The name of the atlas to make the packing work\n   * @param canvas The canvas we will be drawing into to generate the complete image\n   *\n   * @return {Promise<boolean>} Promise that resolves to if the image successfully was drawn or not\n   */\n  private async draw(atlas: Atlas, resource: AtlasResource): Promise<boolean> {\n    const canvas = atlas.texture.image;\n    const atlasName = atlas.id;\n\n    // Register the resource with the atlas\n    if (!atlas.registerResource(resource)) {\n      console.warn(\n        \"Could not draw resource to the atlas as the resource was not properly registered to the atlas first\",\n        atlas,\n        resource\n      );\n      return Promise.resolve(false);\n    }\n\n    // First we must load the image\n    // Make a buffer to hold our new image\n    // Load the image into memory, default to keeping the alpha channel\n    const loadedImage: HTMLImageElement | null = await this.loadImage(resource);\n\n    // Only a non-null image means the image loaded correctly\n    if (loadedImage && isValidImage(resource.texture)) {\n      // Get the sub texture that is going to be applied to the atlas\n      const rasterization = resource.rasterization;\n      const texture = resource.texture;\n      // Now we create a Rectangle to store the image dimensions\n      const rect: Bounds = new Bounds({\n        bottom: rasterization.texture.height,\n        left: 0,\n        right: rasterization.texture.width,\n        top: 0\n      });\n      // Create ImageDimension to insert into our atlas mapper\n      const dimensions: ImageDimensions = {\n        first: texture,\n        second: rect\n      };\n\n      // Auto add a buffer in\n      dimensions.second.width += 1;\n      dimensions.second.height += 1;\n      // Get the atlas map node\n      const packing: PackNode = atlas.packing;\n      // Store the node resulting from the insert operation\n      const insertedNode: PackNode | null = packing.insert(dimensions);\n\n      // If the result was NULL we did not successfully insert the image into any map\n      if (insertedNode) {\n        debug(\"Atlas location determined: %o\", insertedNode);\n\n        // Apply the image to the node\n        insertedNode.nodeImage = texture;\n\n        // Set our image's atlas properties\n        const ux = insertedNode.nodeDimensions.x / atlas.width;\n        const uy = insertedNode.nodeDimensions.y / atlas.height;\n        const uw = insertedNode.nodeDimensions.width / atlas.width;\n        const uh = insertedNode.nodeDimensions.height / atlas.height;\n        const onePixelX = 1 / atlas.width;\n\n        const atlasDimensions: Bounds = new Bounds({\n          bottom: 1.0 - uy,\n          left: ux,\n          right: ux + uw,\n          top: 1.0 - (uy + uh)\n        });\n\n        const bottom = atlasDimensions.bottom;\n        const top = atlasDimensions.y;\n        const left = atlasDimensions.x;\n        const right = atlasDimensions.x + atlasDimensions.width - onePixelX;\n\n        texture.atlasReferenceID = atlasName;\n        texture.atlasTL = { x: left, y: top };\n        texture.atlasBR = { x: right, y: bottom };\n        texture.atlasBL = { x: left, y: bottom };\n        texture.atlasTR = { x: right, y: top };\n        texture.widthOnAtlas = Math.abs(texture.atlasTR.x - texture.atlasTL.x);\n        texture.heightOnAtlas = Math.abs(texture.atlasTR.y - texture.atlasBR.y);\n        texture.pixelWidth = rasterization.texture.width;\n        texture.pixelHeight = rasterization.texture.height;\n\n        // Now draw the image to the indicated canvas\n        canvas\n          .getContext(\"2d\")\n          .drawImage(\n            loadedImage,\n            insertedNode.nodeDimensions.x,\n            insertedNode.nodeDimensions.y\n          );\n\n        // We have finished inserting\n        return true;\n      } else {\n        // Log an error\n        console.error(`Could not fit resource into atlas`, resource);\n        resource.texture = this.setDefaultImage(resource.texture, atlasName);\n        return false;\n      }\n    } else {\n      if (!resource.texture.isValid) {\n        debug(\"Resource was invalidated during load:\", resource);\n      } else {\n        // Log an error and load a default sub texture\n        console.error(`Could not load resource:`, resource);\n      }\n\n      resource.texture = this.setDefaultImage(resource.texture, atlasName);\n      return false;\n    }\n  }\n\n  /**\n   * Retrieves the threejs texture for the atlas\n   *\n   * @param atlasName The identifier of the atlas\n   */\n  getAtlasTexture(atlasName: string): Atlas | undefined {\n    return this.allAtlas.get(atlasName);\n  }\n\n  /**\n   * This takes in any atlas resource and rasterizes it.\n   *\n   * @param {SubTexture} resource This is any atlas resource which will have it's image rasterized\n   *\n   * @return {Promise<HTMLImageElement>} A promise to resolve to the loaded image\n   *                                     or null if there was an error\n   */\n  private async loadImage(\n    resource: AtlasResource\n  ): Promise<HTMLImageElement | null> {\n    let imageSrc: string = \"\";\n\n    const subTexture = resource.texture || new SubTexture();\n    resource.texture = subTexture;\n\n    if (resource.texture.isValid === false) return null;\n\n    if (resource instanceof ImageAtlasResource) {\n      // If the texture was provided an image then we ensure the image is loaded\n      // Then hand it back\n      if (resource.image.element) {\n        if (\n          resource.image.element.width !== 0 &&\n          resource.image.element.height !== 0\n        ) {\n          const image = resource.image.element;\n          subTexture.pixelWidth = image.width;\n          subTexture.pixelHeight = image.height;\n          subTexture.aspectRatio = image.width / image.height;\n\n          return image;\n        }\n\n        const image = await new Promise<HTMLImageElement | null>(resolve => {\n          const image: HTMLImageElement | undefined = resource.image.element;\n\n          if (image) {\n            image.onload = function() {\n              subTexture.pixelWidth = image.width;\n              subTexture.pixelHeight = image.height;\n              subTexture.aspectRatio = image.width / image.height;\n              resolve(image);\n            };\n\n            image.onerror = function() {\n              resolve(null);\n            };\n          } else {\n            resolve(null);\n          }\n        });\n\n        return image;\n      }\n\n      // If a string was returned, we must load the image then return the image\n      else if (resource.image.path) {\n        imageSrc = resource.image.path;\n      }\n    } else if (resource instanceof LabelAtlasResource) {\n      // Ensure the label has been rasterized to a canvas element\n      if (!resource.rasterization.canvas) {\n        await LabelRasterizer.render(resource);\n      }\n\n      // Make sure the rasterization properly executed\n      if (resource.rasterization.canvas) {\n        debug(\"Rasterized label %o\", resource.rasterization);\n        imageSrc = resource.rasterization.canvas.toDataURL(\"image/png\");\n      } else {\n        console.warn(\"The label was not able to be rasterized\");\n      }\n    } else if (resource instanceof ColorAtlasResource) {\n      // Ensure the color has been rasterized to a canvas element\n      if (!resource.rasterization.canvas) {\n        await ColorRasterizer.render(resource);\n      }\n\n      // Make sure the rasterization properly executed\n      if (resource.rasterization.canvas) {\n        debug(\"Rasterized color %o\", resource.rasterization);\n        imageSrc = resource.rasterization.canvas.toDataURL(\"image/png\");\n      } else {\n        console.warn(\"The color was not able to be rasterized\");\n      }\n    }\n\n    if (imageSrc) {\n      const image = await new Promise<HTMLImageElement | null>(resolve => {\n        const image: HTMLImageElement = new Image();\n\n        image.onload = function() {\n          subTexture.pixelWidth = image.width;\n          subTexture.pixelHeight = image.height;\n          subTexture.aspectRatio = image.width / image.height;\n          resolve(image);\n        };\n\n        image.onerror = function() {\n          resolve(null);\n        };\n\n        image.src = imageSrc;\n      });\n\n      return image;\n    }\n\n    return null;\n  }\n\n  /**\n   * This targets an existing atlas and attempts to update it with the provided atlas resources.\n   *\n   * @param atlasName\n   * @param resources\n   */\n  async updateAtlas(atlasName: string, resources: AtlasResource[]) {\n    const atlas = this.allAtlas.get(atlasName);\n\n    if (atlas) {\n      for (const resource of resources) {\n        await this.draw(atlas, resource);\n      }\n\n      // Perform the best method for updating the underlying texture of the atlas to the latest changes\n      atlas.updateTexture();\n    } else {\n      console.warn(\n        \"Can not update non-existing atlas:\",\n        atlasName,\n        \"These resources will not be loaded:\",\n        resources\n      );\n    }\n  }\n}\n","import { Bounds } from \"../../primitives/bounds\";\nimport { SubTexture } from \"./sub-texture\";\n\n/**\n * Helps us track the bounds of the image being loaded in tied in with the\n * texture it represents\n */\nexport interface ImageDimensions {\n  first: SubTexture;\n  second: Bounds;\n}\n\n/**\n * This is used specifically by the atlas manager to aid in packing\n * in textures within an area. This will guarantee boundaries of textures are\n * not violated and provide proper feedback for where to draw a given image\n */\nexport class PackNode {\n  child: [PackNode | null, PackNode | null] = [null, null];\n  isLeaf: boolean = true;\n  nodeDimensions: Bounds;\n  nodeImage: SubTexture | null = null;\n\n  constructor(x: number, y: number, width: number, height: number) {\n    this.nodeDimensions = new Bounds({\n      height,\n      width,\n      x,\n      y\n    });\n  }\n\n  /**\n   * Deletes all of the sub nodes in this Mapping, thus clearing up memory usage\n   */\n  destroy() {\n    const child0 = this.child[0];\n    const child1 = this.child[1];\n    this.nodeImage = null;\n    if (child0) {\n      child0.destroy();\n    }\n    if (child1) {\n      child1.destroy();\n    }\n    this.child[0] = null;\n    this.child[1] = null;\n  }\n\n  /**\n   * Indicates if there is a child\n   */\n  hasChild(): boolean {\n    const child0 = this.child[0];\n    const child1 = this.child[1];\n    if (child0 && !child0.nodeImage) {\n      return !child0.isLeaf;\n    }\n    if (child1 && !child1.nodeImage) {\n      return !child1.isLeaf;\n    }\n    return false;\n  }\n\n  /**\n   * Inserts images into our mapping, fitting them appropriately\n   */\n  insert(image: ImageDimensions): PackNode | null {\n    let child0 = this.child[0];\n    let child1 = this.child[1];\n\n    if (!this.isLeaf && child0 && child1) {\n      // Try inserting into first child\n      const newNode: PackNode | null = child0.insert(image);\n      if (newNode !== null) {\n        return newNode;\n      }\n      // No room in first so insert into second\n      return child1.insert(image);\n    } else {\n      // If there's already an image here, return\n      if (this.nodeImage) {\n        return null;\n      }\n      // Check the fit status of the image in this nodes rectangle space\n      const fitFlag: number = this.nodeDimensions.fits(image.second);\n      // If we're too small, return null indicating can not fit\n      if (fitFlag === 0) {\n        return null;\n      }\n      // If we're just right, accept\n      if (fitFlag === 1) {\n        return this;\n      }\n\n      // Otherwise, gotta split this node and create some leaves\n      this.isLeaf = false;\n      // Get the image width\n      const imgWidth: number = image.second.width;\n      const imgHeight: number = image.second.height;\n      // Decide which way to split\n      const dWidth: number = this.nodeDimensions.width - imgWidth;\n      const dHeight: number = this.nodeDimensions.height - image.second.height;\n\n      if (dWidth > dHeight) {\n        child0 = this.child[0] = new PackNode(\n          this.nodeDimensions.x,\n          this.nodeDimensions.y,\n          imgWidth,\n          this.nodeDimensions.height\n        );\n        child1 = this.child[1] = new PackNode(\n          this.nodeDimensions.x + imgWidth,\n          this.nodeDimensions.y,\n          dWidth,\n          this.nodeDimensions.height\n        );\n      } else {\n        child0 = this.child[0] = new PackNode(\n          this.nodeDimensions.x,\n          this.nodeDimensions.y,\n          this.nodeDimensions.width,\n          imgHeight\n        );\n        child1 = this.child[1] = new PackNode(\n          this.nodeDimensions.x,\n          this.nodeDimensions.y + imgHeight,\n          this.nodeDimensions.width,\n          dHeight\n        );\n      }\n    }\n\n    // Insert into first child we created\n    return child0.insert(image);\n  }\n\n  /**\n   * Removes the image from the mapping and tries to open up as much space as possible.\n   *\n   * @param {AtlasTexture} image The image to insert into the\n   */\n  remove(image: SubTexture): boolean {\n    const child0 = this.child[0];\n    const child1 = this.child[1];\n\n    if (child1 && child0 && !this.isLeaf) {\n      // Try removing from first child\n      let removed: boolean = child0.remove(image);\n      if (removed) {\n        return true;\n      }\n      // Try remove from second\n      removed = child1.remove(image);\n\n      if (!child0.hasChild()) {\n        if (!child1.hasChild()) {\n          this.child[0] = null;\n          this.child[1] = null;\n        }\n      }\n\n      return removed;\n    } else {\n      if (this.nodeImage === image) {\n        this.nodeImage = null;\n        delete image.atlasReferenceID;\n        image.pixelWidth = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n}\n","import { observable } from \"../../instance-provider\";\nimport { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { Image } from \"../../primitives/image\";\nimport { ImageAtlasResource, ImageRasterizer } from \"../../surface/texture\";\nimport { Anchor, AnchorType, ScaleType } from \"../types\";\n\nconst { max } = Math;\n\nexport interface IImageInstanceOptions extends IInstanceOptions {\n  /**\n   * The point on the image which will be placed in world space via the x, y coords. This is also the point\n   * which the image will be scaled around.\n   */\n  anchor?: Anchor;\n  /** Depth sorting of the image (or the z value of the lable) */\n  depth?: number;\n  /** This is the HTMLImageElement that the image is to render. This element MUST be loaded completely before this instance is created. */\n  element: HTMLImageElement;\n  /** The height of the image as it is to be rendered in world space */\n  height?: number;\n  /** Sets the way the image scales with the world */\n  scaling?: ScaleType;\n  /** The color the image should render as */\n  tint: [number, number, number, number];\n  /** The width of the image as it is to be rendered in world space */\n  width?: number;\n  /** The x coordinate where the image will be anchored to in world space */\n  x?: number;\n  /** The y coordinate where the image will be anchored to in world space */\n  y?: number;\n}\n\n/**\n * This is a reference for a rasterization that has reference counting. When the references go to zero,\n * the rasterization should be invalidated and resources freed for the rasterization.\n */\ntype RasterizationReference = {\n  resource: ImageAtlasResource;\n  references: number;\n};\n\n/**\n * This is a lookup to find existing rasterizations for a particularly created image so that every\n * new image does not have to go through the rasterization process.\n */\nconst rasterizationLookUp = new Map<\n  string | HTMLImageElement,\n  RasterizationReference\n>();\n\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nconst anchorCalculator: {\n  [key: number]: (anchor: Anchor, image: ImageInstance) => void;\n} = {\n  [AnchorType.TopLeft]: (anchor: Anchor, _image: ImageInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopMiddle]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width / 2.0;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.TopRight]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width + anchor.padding;\n    anchor.y = -anchor.padding;\n  },\n  [AnchorType.MiddleLeft]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = image.height / 2;\n  },\n  [AnchorType.Middle]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width / 2.0;\n    anchor.y = image.height / 2.0;\n  },\n  [AnchorType.MiddleRight]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width + anchor.padding;\n    anchor.y = image.height / 2.0;\n  },\n  [AnchorType.BottomLeft]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = -anchor.padding;\n    anchor.y = image.height + anchor.padding;\n  },\n  [AnchorType.BottomMiddle]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width / 2.0;\n    anchor.y = image.height + anchor.padding;\n  },\n  [AnchorType.BottomRight]: (anchor: Anchor, image: ImageInstance) => {\n    anchor.x = image.width + anchor.padding;\n    anchor.y = image.height + anchor.padding;\n  },\n  [AnchorType.Custom]: (anchor: Anchor, _image: ImageInstance) => {\n    anchor.x = anchor.x || 0;\n    anchor.y = anchor.y || 0;\n  }\n};\n\n/**\n * This generates a new image instance.\n * There are restrictions surrounding images due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a image via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Images should only be so large.\n * - Once a image is constructed, only SOME properties can be altered thereafter\n *\n * An image that is constructed can only have some properties set upon creating the image and are locked\n * thereafter. The only way to modify them would be to destroy the image, then construct a new image\n * with the modifications. This has to deal with performance regarding rasterizing the image.\n */\nexport class ImageInstance extends Instance implements Image {\n  /**\n   * TODO: We should be implementing the destroy on ImageInstances to clean this up\n   * Frees up module scoped data.\n   */\n  static destroy() {\n    rasterizationLookUp.clear();\n  }\n\n  /** This is the rendered color of the image */\n  @observable tint: [number, number, number, number] = [0, 0, 0, 1];\n  /** Depth sorting of the image (or the z value of the lable) */\n  @observable depth: number = 0;\n  /** The height of the image as it is to be rendered in world space */\n  @observable height: number = 1;\n  /** Sets the way the image scales with the world */\n  @observable scaling: ScaleType = ScaleType.BOUND_MAX;\n  /** The width of the image as it is to be rendered in world space */\n  @observable width: number = 1;\n  /** The x coordinate where the image will be anchored to in world space */\n  @observable x: number = 0;\n  /** The y coordinate where the image will be anchored to in world space */\n  @observable y: number = 0;\n\n  get size() {\n    return max(this.width, this.height);\n  }\n  set size(value: number) {\n    const aspect = this.width / this.height;\n    this.width = value * aspect;\n    this.height = value;\n  }\n\n  // The following properties are properties that are locked in after creating this image\n  // As the properties are completely locked into how the image was rasterized and can not\n  // Nor should not be easily adjusted for performance concerns\n\n  private _sourceWidth: number = 0;\n  private _sourceHeight: number = 0;\n  private _isDestroyed: boolean = false;\n  @observable private _rasterization: RasterizationReference;\n  private _path: string;\n  private _element: HTMLImageElement;\n\n  // The following are the getters for the locked in parameters of the image so we can read\n  // The properties but not set any of them.\n\n  /** This is the provided element this image will be rendering */\n  get element() {\n    return this._element;\n  }\n  /** This flag indicates if this image is valid anymore */\n  get isDestroyed() {\n    return this._isDestroyed;\n  }\n  /** This is the path to the image's resource if it's available */\n  get path() {\n    return this._path;\n  }\n  /** This gets the atlas resource that is uniquely idenfied for this image */\n  get resource() {\n    return this._rasterization.resource;\n  }\n\n  /**\n   * This is the width in world space of the image. If there is no camera distortion,\n   * this would be the width of the image in pixels on the screen.\n   */\n  get sourceWidth() {\n    return this._sourceWidth;\n  }\n\n  /**\n   * This is the height in world space of the image. If there is no camera distortion,\n   * this would be the height of the image in pixels on the screen.\n   */\n  get sourceHeight() {\n    return this._sourceHeight;\n  }\n\n  // These are properties that can be altered, but have side effects from being changed\n\n  /** This is the anchor location on the  */\n  @observable\n  private _anchor: Anchor = {\n    padding: 0,\n    type: AnchorType.TopLeft,\n    x: 0,\n    y: 0\n  };\n\n  constructor(options: IImageInstanceOptions) {\n    super(options);\n\n    this.depth = options.depth || this.depth;\n    this.tint = options.tint || this.tint;\n    this.scaling = options.scaling || this.scaling;\n    this.x = options.x || this.x;\n    this.y = options.y || this.y;\n\n    // This is the image that is to be rendered\n    this._element = options.element;\n    // Look for other same texts that have been rasterized\n    let rasterization = rasterizationLookUp.get(this._path || this._element);\n\n    // If a rasterization exists, we must increment the use reference\n    if (rasterization) {\n      rasterization.references++;\n    }\n\n    // If we have not found an existing rasterization\n    if (!rasterization) {\n      rasterization = {\n        references: 1,\n        resource: new ImageAtlasResource(this)\n      };\n\n      // Ensure the sample scale is set. Defaults to 1.0\n      rasterization.resource.sampleScale =\n        rasterization.resource.sampleScale || 1.0;\n      // Rasterize the resource generated for this image. We need it immediately rasterized so\n      // That we can utilize the dimensions for calculations.\n      ImageRasterizer.renderSync(rasterization.resource);\n      // Now that we have an official rasterization for this image, we shall store it\n      // For others to look up\n      rasterizationLookUp.set(this._path || this._element, rasterization);\n    }\n\n    this._rasterization = rasterization;\n    this._sourceWidth = rasterization.resource.rasterization.world.width;\n    this._sourceHeight = rasterization.resource.rasterization.world.height;\n\n    this.width = options.width || this._sourceWidth || 1;\n    this.height = options.height || this._sourceHeight || 1;\n\n    // Make sure the anchor is set to the appropriate location\n    options.anchor && this.setAnchor(options.anchor);\n  }\n\n  get anchor() {\n    return this._anchor;\n  }\n\n  /**\n   * Images are a sort of unique case where the use of a image should be destroyed as rasterization\n   * resources are in a way kept alive through reference counting.\n   */\n  destroy() {\n    if (!this._isDestroyed) {\n      this._isDestroyed = true;\n      this._rasterization.references--;\n\n      // If all references are cleared, then the rasterization needs to be eradicated\n      if (this._rasterization.references === 0) {\n        this._rasterization.resource;\n        console.warn(\"The destroy method still needs completion\");\n      }\n    }\n  }\n\n  resourceTrigger() {\n    // Trigger the accessed element that the layer utilizes for resource fetching.\n    this._rasterization = this._rasterization;\n  }\n\n  /**\n   * This applies a new anchor to this image and properly determines it's anchor position on the image\n   */\n  setAnchor(anchor: Anchor) {\n    const newAnchor = {\n      padding: anchor.padding || 0,\n      type: anchor.type,\n      x: anchor.x || 0,\n      y: anchor.y || 0\n    };\n\n    // Calculate the new anchors position values\n    anchorCalculator[newAnchor.type](newAnchor, this);\n    // Apply the anchor\n    this._anchor = newAnchor;\n  }\n}\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the image as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the image is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y;\\n\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float(cameraScale.x != cameraScale.y);\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n\\n  // Get the tex coord from our inject texture info\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the image's tint as a tint to the image\\n  vertexColor = tint;\\n\\n  // Correct aspect ratio.\\n  vec2 adjustedSize = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * adjustedSize + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the image\\n  float imageScreenScale = mix(\\n    screenSize.y / adjustedSize.y,\\n    screenSize.x / adjustedSize.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the image is supposed to be, then we automagically\\n  // scale down our image to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / imageScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n${extendHeader}\\n\\nvoid main() {\\n  gl_FragColor = texture2D(imageAtlas, texCoord) * vertexColor;\\n  setColor(gl_FragColor * gl_FragColor.a);\\n  ${extend}\\n}\\n\"","import * as Three from \"three\";\nimport { Bounds, IPoint } from \"../../primitives\";\nimport { ILayerProps, IModelType, Layer } from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  IProjection,\n  IShaderInitialization,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport { IAutoEasingMethod, Vec } from \"../../util\";\nimport { CommonMaterialOptions } from \"../../util/common-options\";\nimport { ScaleType } from \"../types\";\nimport { ImageInstance } from \"./image-instance\";\n\nconst { min, max } = Math;\n\nexport interface IImageLayerProps<T extends ImageInstance>\n  extends ILayerProps<T> {\n  atlas?: string;\n  animate?: {\n    tint?: IAutoEasingMethod<Vec>;\n    location?: IAutoEasingMethod<Vec>;\n    size?: IAutoEasingMethod<Vec>;\n  };\n}\n\n/**\n * This layer displays Images and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class ImageLayer<\n  T extends ImageInstance,\n  U extends IImageLayerProps<T>\n> extends Layer<T, U> {\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods() {\n    return {\n      // Provide the calculated AABB world bounds for a given image\n      boundsAccessor: (image: ImageInstance) => {\n        const anchorEffect = [0, 0];\n\n        if (image.anchor) {\n          anchorEffect[0] = image.anchor.x || 0;\n          anchorEffect[1] = image.anchor.y || 0;\n        }\n\n        const topLeft = [image.x - anchorEffect[0], image.y - anchorEffect[1]];\n\n        return new Bounds({\n          height: image.height,\n          width: image.width,\n          x: topLeft[0],\n          y: topLeft[1]\n        });\n      },\n\n      // Provide a precise hit test for the circle\n      hitTest: (image: ImageInstance, point: IPoint, view: IProjection) => {\n        // The bounds of the image is in world space, but it does not account for the scale mode of the image.\n        // Here, we will apply the scale mode testing to the image\n        const maxScale = max(...view.camera.scale);\n        const minScale = min(...view.camera.scale);\n\n        // If we scale always then the image stays within it's initial world bounds at all times\n        if (image.scaling === ScaleType.ALWAYS) {\n          return true;\n        }\n\n        // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n        // Image the same size. If the camera zooms out then the bounds === the world bounds.\n        else if (image.scaling === ScaleType.BOUND_MAX) {\n          // We are zooming out. the bounds will stay within the world bounds\n          if (minScale <= 1 && maxScale <= 1) {\n            return true;\n          }\n\n          // We are zooming in. The bounds will shrink to keep the image at max font size\n          else {\n            // The location is within the world, but we reverse project the anchor spread\n            const anchorEffect = [0, 0];\n\n            if (image.anchor) {\n              anchorEffect[0] = image.anchor.x || 0;\n              anchorEffect[1] = image.anchor.y || 0;\n            }\n\n            const topLeft = view.worldToScreen({\n              x: image.x - anchorEffect[0] / view.camera.scale[0],\n              y: image.y - anchorEffect[1] / view.camera.scale[1]\n            });\n\n            const screenPoint = view.worldToScreen(point);\n\n            // Reverse project the size and we should be within the distorted world coordinates\n            return new Bounds({\n              height: image.height,\n              width: image.width,\n              x: topLeft.x,\n              y: topLeft.y\n            }).containsPoint(screenPoint);\n          }\n        }\n\n        // If we never allow the image to scale, then the bounds will grow and shrink to counter the effects\n        // Of the camera zoom\n        else if (image.scaling === ScaleType.NEVER) {\n          // The location is within the world, but we reverse project the anchor spread\n          const anchorEffect = [0, 0];\n\n          if (image.anchor) {\n            anchorEffect[0] = image.anchor.x || 0;\n            anchorEffect[1] = image.anchor.y || 0;\n          }\n\n          const topLeft = view.worldToScreen({\n            x: image.x - anchorEffect[0] / view.camera.scale[0],\n            y: image.y - anchorEffect[1] / view.camera.scale[1]\n          });\n\n          const screenPoint = view.worldToScreen(point);\n\n          // Reverse project the size and we should be within the distorted world coordinates\n          return new Bounds({\n            height: image.height,\n            width: image.width,\n            x: topLeft.x,\n            y: topLeft.y\n          }).containsPoint(screenPoint);\n        }\n\n        return true;\n      }\n    };\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<ImageInstance> {\n    const animations = this.props.animate || {};\n    const {\n      tint: animateTint,\n      location: animateLocation,\n      size: animateSize\n    } = animations;\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      1: 1,\n      2: -1,\n      3: 1,\n      4: -1,\n      5: -1\n    };\n\n    const vertexToSide: { [key: number]: number } = {\n      0: 0,\n      1: 0,\n      2: 0,\n      3: 1,\n      4: 1,\n      5: 1\n    };\n\n    return {\n      fs: require(\"./image-layer.fs\"),\n      instanceAttributes: [\n        {\n          easing: animateLocation,\n          name: \"location\",\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.x, o.y]\n        },\n        {\n          name: \"anchor\",\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.anchor.x || 0, o.anchor.y || 0]\n        },\n        {\n          easing: animateSize,\n          name: \"size\",\n          size: InstanceAttributeSize.TWO,\n          update: o => [o.width, o.height]\n        },\n        {\n          name: \"depth\",\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth]\n        },\n        {\n          name: \"scaling\",\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.scaling]\n        },\n        {\n          atlas: {\n            key: this.props.atlas || \"\",\n            name: \"imageAtlas\"\n          },\n          name: \"texture\",\n          update: o => this.resource.request(this, o, o.resource)\n        },\n        {\n          easing: animateTint,\n          name: \"tint\",\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.tint\n        }\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: _u => [1]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexToSide[vertex],\n            0\n          ]\n        }\n      ],\n      vertexCount: 6,\n      vs: require(\"./image-layer.vs\")\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentImage;\n  }\n}\n","import { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { observable } from \"../../instance-provider/observable\";\n\nexport interface IEdgeInstanceOptions extends IInstanceOptions {\n  /** The color of this edge at the start point. */\n  colorStart?: [number, number, number, number];\n  /** The color of this edge at the end point. */\n  colorEnd?: [number, number, number, number];\n  /** This is the list of control points  */\n  control?: [number, number][];\n  /** The z depth of the edge (for draw ordering) */\n  depth?: number;\n  /** End point of the edge. */\n  end: [number, number];\n  /** Beginning point of the edge. */\n  start: [number, number];\n  /** Start width of the edge. */\n  widthStart?: number;\n  /** End width of the edge */\n  widthEnd?: number;\n}\n\nexport type EdgeColor = [number, number, number, number];\n\nexport class EdgeInstance extends Instance {\n  @observable colorStart: EdgeColor = [1.0, 1.0, 1.0, 1.0];\n  @observable colorEnd: EdgeColor = [1.0, 1.0, 1.0, 1.0];\n  @observable control: [number, number][] = [[0, 0], [0, 0]];\n  @observable depth: number = 0;\n  @observable end: [number, number] = [0, 0];\n  @observable start: [number, number] = [0, 0];\n  @observable widthStart: number = 1.0;\n  @observable widthEnd: number = 1.0;\n\n  get length() {\n    const delta = [this.end[0] - this.start[0], this.end[1] - this.start[1]];\n\n    return Math.sqrt(delta[0] * delta[0] + delta[1] * delta[1]);\n  }\n\n  /**\n   * Calculates the midpoint of the edge\n   */\n  get midpoint() {\n    return 0;\n  }\n\n  /**\n   * Calculates a perpendicular direction vector to the edge\n   */\n  get perpendicular(): [number, number] {\n    const length = this.length;\n\n    return [\n      (this.end[1] - this.start[1]) / length,\n      -(this.end[0] - this.start[0]) / length\n    ];\n  }\n\n  /**\n   * Applies the edge width to the start and end\n   */\n  setEdgeWidth(width: number) {\n    if (width) {\n      this.widthEnd = width;\n      this.widthStart = width;\n    }\n  }\n\n  /**\n   * Applies the color to the start and end\n   */\n  setColor(color: EdgeColor) {\n    this.colorStart = color;\n    this.colorEnd = color;\n  }\n\n  constructor(options: IEdgeInstanceOptions) {\n    super(options);\n    this.colorStart = options.colorStart || this.colorStart;\n    this.colorEnd = options.colorEnd || this.colorEnd;\n    this.control = options.control || this.control;\n    this.depth = options.depth || this.depth;\n    this.end = options.end || this.end;\n    this.widthStart = options.widthStart || this.widthStart;\n    this.widthEnd = options.widthEnd || this.widthEnd;\n    this.start = options.start || this.start;\n  }\n}\n","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\n${extendHeader}\\n\\nvoid main() {\\n  setColor(vertexColor);\\n  ${extend}\\n}\\n\"","module.exports = \"/**\\n  This vertex shader calculates edges based in world space to make an edge based on\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nprecision highp float;\\n\\nvarying vec4 vertexColor;\\n\\n// Interpolation type injection\\n${interpolation}\\n\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n\\n  // Convert our world points to screen space\\n  vec4 startClip = clipSpace(vec3(start, depth));\\n  vec4 endClip = clipSpace(vec3(end, depth));\\n  vec2 startScreen = (startClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  vec2 endScreen = (endClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Controls for this mode are screen space deltas from the end points\\n  vec2 control1 = startScreen + vec2(control.x, -control.y) * scaleFactor;\\n  vec2 control2 = endScreen + vec2(control.z, -control.w) * scaleFactor;\\n\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, startScreen, endScreen, control1, control2);\\n  // Calculate the next and previous segment's location on the line\\n  vec2 prePosition = interpolation(interpolationTime - interpolationIncrement, startScreen, endScreen, control1, control2);\\n  vec2 nextPosition = interpolation(interpolationTime + interpolationIncrement, startScreen, endScreen, control1, control2);\\n\\n  vec2 preLine = prePosition - currentPosition;\\n  vec2 nextLine = nextPosition - currentPosition;\\n\\n  // Get a spliced nromal at the joining of two segments to make a crisper curve\\n  vec2 currentNormal = mix(\\n    // Pick this value if we're at the beginning of the line\\n    normalize(vec2(preLine.y, -preLine.x)),\\n    mix(\\n      // Pick this value when we're between the ends\\n      normalize(vec2(preLine.y, -preLine.x) + vec2(-nextLine.y, nextLine.x)),\\n      // Pick this value if we're at the end of the line\\n      normalize(vec2(-nextLine.y, nextLine.x)),\\n      float(position.x >= 1.0)\\n    ),\\n    float(position.x > 0.0)\\n  );\\n\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (-normal * lineThickness * scaleFactor);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a;\\n\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), startClip.zw);\\n  gl_PointSize = 5.0;\\n\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\n/**\\n  This vertex shader calculates edges whose curve and width is in screen space where the curve is\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nvarying vec4 vertexColor;\\n\\n// Interpolation type injection\\n${interpolation}\\n\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, start, end, control.xy, control.zw);\\n  // Calculate the next and previous segment's location on the line\\n  vec2 prePosition = interpolation(interpolationTime - interpolationIncrement, start, end, control.xy, control.zw);\\n  vec2 nextPosition = interpolation(interpolationTime + interpolationIncrement, start, end, control.xy, control.zw);\\n\\n  vec2 preLine = prePosition - currentPosition;\\n  vec2 nextLine = nextPosition - currentPosition;\\n\\n  // Get a spliced nromal at the joining of two segments to make a crisper curve\\n  vec2 currentNormal = mix(\\n    // Pick this value if we're at the beginning of the line\\n    normalize(vec2(preLine.y, -preLine.x)),\\n    mix(\\n      // Pick this value when we're between the ends\\n      normalize(vec2(preLine.y, -preLine.x) + vec2(-nextLine.y, nextLine.x)),\\n      // Pick this value if we're at the end of the line\\n      normalize(vec2(-nextLine.y, nextLine.x)),\\n      float(position.x >= 1.0)\\n    ),\\n    float(position.x > 0.0)\\n  );\\n\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (normal * lineThickness);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a;\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n  gl_PointSize = 5.0;\\n\\n  ${extend}\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  float t1 = 1.0 - t;\\n  return pow(t1, 3.0) * p1 + 3.0 * t * pow(t1, 2.0) * c1 + 3.0 * pow(t, 2.0) * t1 * c2 + pow(t, 3.0) * p2;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return (1.0 - t) * (1.0 - t) * p1 + 2.0 * t * (1.0 - t) * c1 + t * t * p2;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return p1 + (p2 - p1) * t;\\n}\\n\"","/**\n * This file contains the logic for handling edge picking via quad tree and hit tests.\n * The methods involved are fairly robust and would clutter the layer's code file.\n */\nimport { IPoint } from \"../../primitives\";\nimport { Bounds } from \"../../primitives/bounds\";\nimport { IPickingMethods } from \"../../surface/layer\";\nimport { IProjection } from \"../../types\";\nimport {\n  add2,\n  dot2,\n  length2,\n  scale2,\n  subtract2,\n  Vec2\n} from \"../../util/vector\";\nimport { EdgeInstance } from \"./edge-instance\";\nimport { IEdgeLayerProps } from \"./edge-layer\";\nimport { EdgeBroadphase, EdgeScaleType, EdgeType } from \"./types\";\nconst { pow } = Math;\n\ntype InterpolationMethod = (\n  t: number,\n  p1: Vec2,\n  p2: Vec2,\n  c1: Vec2,\n  c2: Vec2\n) => Vec2;\n\n/** This is an interpolation across a line */\nfunction linear(t: number, p1: Vec2, p2: Vec2, _c1: Vec2, _c2: Vec2): Vec2 {\n  return add2(scale2(subtract2(p2, p1), t), p1);\n}\n\n/** This is an interpolation across a bezier curve, single control */\nfunction bezier(t: number, p1: Vec2, p2: Vec2, c1: Vec2, _c2: Vec2): Vec2 {\n  return [\n    (1.0 - t) * (1.0 - t) * p1[0] + 2.0 * t * (1.0 - t) * c1[0] + t * t * p2[0],\n    (1.0 - t) * (1.0 - t) * p1[1] + 2.0 * t * (1.0 - t) * c1[1] + t * t * p2[1]\n  ];\n}\n\n/** This is an interpolation across a bezier curve, double control */\nfunction bezier2(t: number, p1: Vec2, p2: Vec2, c1: Vec2, c2: Vec2): Vec2 {\n  const t1 = 1.0 - t;\n\n  return [\n    pow(t1, 3.0) * p1[0] +\n      3.0 * t * pow(t1, 2.0) * c1[0] +\n      3.0 * pow(t, 2.0) * t1 * c2[0] +\n      pow(t, 3.0) * p2[0],\n    pow(t1, 3.0) * p1[1] +\n      3.0 * t * pow(t1, 2.0) * c1[1] +\n      3.0 * pow(t, 2.0) * t1 * c2[1] +\n      pow(t, 3.0) * p2[1]\n  ];\n}\n\n/** A quick lookup for an interpolation method based on Edge Type */\nconst interpolation: { [key: number]: InterpolationMethod } = {\n  [EdgeType.LINE]: linear,\n  [EdgeType.BEZIER]: bezier,\n  [EdgeType.BEZIER2]: bezier2\n};\n\n/** Converts a point array to a point object */\nfunction toPointObject(point: Vec2): IPoint {\n  return {\n    x: point[0],\n    y: point[1]\n  };\n}\n\n/** Converts a point object to a point array */\nfunction toPointArray(point: IPoint): Vec2 {\n  return [point.x, point.y];\n}\n\n/** Takes two points that forms a line then calculates the nearest distance from that line to the third point */\nfunction distanceTo(start: Vec2, end: Vec2, p: Vec2) {\n  // Make a vector from a line point to the indicated point\n  const vector: Vec2 = subtract2(start, p);\n  const lineDirection: Vec2 = subtract2(end, start);\n  const lineNormal: Vec2 = [lineDirection[1], -lineDirection[0]];\n  const distance: number =\n    Math.abs(dot2(vector, lineNormal)) / length2(lineDirection);\n\n  // The distance is d = |v . r| where v is a unit perpendicular vector to the Line\n  return distance;\n}\n\n// This sets the number of iterations along a curve we sample to test collisions with\nconst TEST_RESOLUTION = 50;\n\n/**\n * This generates the picking methods needed for managing PickType.ALL for the edge layer.\n */\nexport function edgePicking<T extends EdgeInstance>(\n  props: IEdgeLayerProps<T>\n): IPickingMethods<EdgeInstance> {\n  const { broadphase, minPickDistance = 0, scaleType, type } = props;\n  const interpolate = interpolation[props.type];\n\n  const boundsAccessor = (edge: EdgeInstance) => {\n    const edgeWidthStart = edge.widthStart / 2 + minPickDistance;\n    const edgeWidthEnd = edge.widthEnd / 2 + minPickDistance;\n    // Encapsulate the endpoints as they are guaranteed to be included in the shape\n    // Each endpoint will be a box that includes the endpoint thickness\n    const bounds = new Bounds({\n      height: edge.widthStart,\n      width: edge.widthStart,\n      x: edge.start[0] - edgeWidthStart,\n      y: edge.start[1] - edgeWidthStart\n    });\n\n    bounds.encapsulate(\n      new Bounds({\n        height: edge.widthEnd,\n        width: edge.widthEnd,\n        x: edge.end[0] - edgeWidthEnd,\n        y: edge.end[1] - edgeWidthEnd\n      })\n    );\n\n    // Encapsulating the bezier control points is enough of a broadphase for beziers\n    if (props.type === EdgeType.BEZIER) {\n      bounds.encapsulate({\n        x: edge.control[0][0],\n        y: edge.control[0][1]\n      });\n    }\n\n    // Encapsulating the bezier control points is enough of a broadphase for beziers\n    else if (props.type === EdgeType.BEZIER2) {\n      bounds.encapsulate({\n        x: edge.control[0][0],\n        y: edge.control[0][1]\n      });\n\n      bounds.encapsulate({\n        x: edge.control[1][0],\n        y: edge.control[1][1]\n      });\n    }\n\n    if (broadphase === EdgeBroadphase.PASS_X) {\n      bounds.x = Number.MIN_SAFE_INTEGER / 2;\n      bounds.width = Number.MAX_SAFE_INTEGER;\n    }\n\n    if (broadphase === EdgeBroadphase.PASS_Y) {\n      bounds.y = Number.MIN_SAFE_INTEGER / 2;\n      bounds.height = Number.MAX_SAFE_INTEGER;\n    }\n\n    return bounds;\n  };\n\n  if (scaleType === EdgeScaleType.SCREEN_CURVE) {\n    return {\n      // Provide the calculated AABB world bounds for a given circle\n      boundsAccessor,\n\n      // Provide a precise hit test for the edge. This method performs all of the rendering\n      // And hit tests within screen space as opposed to world space.\n      hitTest: (edge: EdgeInstance, point: IPoint, view: IProjection) => {\n        point = view.worldToScreen(point);\n        const mouse: Vec2 = [point.x, point.y];\n        let closestIndex = 0;\n        let closestDistance = Number.MAX_VALUE;\n        let secondClosestIndex = 0;\n        let secondClosestDistance = Number.MAX_VALUE;\n\n        const start = view.worldToScreen(toPointObject(edge.start));\n        const end = view.worldToScreen(toPointObject(edge.end));\n        let control1: Vec2 = [0, 0];\n        let control2: Vec2 = [0, 0];\n\n        if (type === EdgeType.BEZIER) {\n          control1 = add2(toPointArray(start), edge.control[0]);\n        } else if (type === EdgeType.BEZIER2) {\n          control1 = add2(toPointArray(start), edge.control[0]);\n          control2 = add2(toPointArray(end), edge.control[1]);\n        }\n\n        const startPoint = toPointArray(start);\n        const endPoint = toPointArray(end);\n\n        control1 = edge.control.length > 0 ? control1 : [0, 0];\n        control2 = edge.control.length > 1 ? control2 : [0, 0];\n\n        // Loop through sample points on the line and find one that is closest to the mouse point as possible\n        for (let i = 0; i < TEST_RESOLUTION; ++i) {\n          const linePoint = interpolate(\n            i / TEST_RESOLUTION,\n            startPoint,\n            endPoint,\n            control1,\n            control2\n          );\n          const distance = length2(subtract2(mouse, linePoint));\n\n          if (distance < closestDistance) {\n            secondClosestIndex = closestIndex;\n            secondClosestDistance = closestDistance;\n            closestIndex = i;\n            closestDistance = distance;\n          } else if (distance < secondClosestDistance) {\n            secondClosestIndex = i;\n            closestDistance = distance;\n          }\n        }\n\n        const t = closestIndex / TEST_RESOLUTION;\n        const lineWidth =\n          (edge.widthEnd - edge.widthStart) * t + edge.widthStart;\n\n        if (closestIndex === secondClosestIndex) {\n          return false;\n        }\n\n        const startSegment = interpolate(\n          closestIndex / TEST_RESOLUTION,\n          startPoint,\n          endPoint,\n          control1,\n          control2\n        );\n\n        const endSegment = interpolate(\n          secondClosestIndex / TEST_RESOLUTION,\n          startPoint,\n          endPoint,\n          control1,\n          control2\n        );\n\n        // See how close the mouse is to the line between the two closest points for a more accurate\n        // Test\n        closestDistance = distanceTo(startSegment, endSegment, mouse);\n\n        // This helps determine if the mouse is beyond the end point\n        if (\n          dot2(\n            subtract2(endSegment, startSegment),\n            subtract2(mouse, startSegment)\n          ) < 0\n        ) {\n          return false;\n        }\n\n        return closestDistance < lineWidth / 2.0 + minPickDistance;\n      }\n    };\n  }\n\n  return {\n    // Provide the calculated AABB world bounds for a given circle\n    boundsAccessor,\n\n    // Provide a precise hit test for the edge\n    hitTest: (edge: EdgeInstance, point: IPoint, _view: IProjection) => {\n      const mouse: [number, number] = [point.x, point.y];\n      let closestIndex = 0;\n      let closestDistance = Number.MAX_VALUE;\n\n      // Loop through sample points on the line and find one that is closest to the mouse point as possible\n      for (let i = 0; i < TEST_RESOLUTION; ++i) {\n        const linePoint = interpolate(\n          i / TEST_RESOLUTION,\n          edge.start,\n          edge.end,\n          edge.control.length > 0 ? edge.control[0] : [0, 0],\n          edge.control.length > 1 ? edge.control[1] : [0, 0]\n        );\n        const distance = length2(subtract2(mouse, linePoint));\n\n        if (distance < closestDistance) {\n          closestIndex = i;\n          closestDistance = distance;\n        }\n      }\n\n      const t = closestIndex / TEST_RESOLUTION;\n      const lineWidth = (edge.widthEnd - edge.widthStart) * t + edge.widthStart;\n\n      return closestDistance < lineWidth / 2.0;\n    }\n  };\n}\n","import * as Three from \"three\";\nimport { InstanceProvider } from \"../../instance-provider\";\nimport { templateVars } from \"../../shaders/template-vars\";\nimport {\n  ILayerProps,\n  IModelType,\n  IPickingMethods,\n  Layer\n} from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  InstanceIOValue,\n  IShaderInitialization,\n  IUniform,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport {\n  CommonMaterialOptions,\n  IAutoEasingMethod,\n  shaderTemplate,\n  Vec\n} from \"../../util\";\nimport { EdgeInstance } from \"./edge-instance\";\nimport { edgePicking } from \"./edge-picking\";\nimport { EdgeBroadphase, EdgeScaleType, EdgeType } from \"./types\";\n\nexport interface IEdgeLayerProps<T extends EdgeInstance>\n  extends ILayerProps<T> {\n  /** Properties for animating attributes */\n  animate?: {\n    end?: IAutoEasingMethod<Vec>;\n    start?: IAutoEasingMethod<Vec>;\n    colorStart?: IAutoEasingMethod<Vec>;\n    colorEnd?: IAutoEasingMethod<Vec>;\n    control?: IAutoEasingMethod<Vec>;\n  };\n  /** Allows adjustments for broadphase interactions for an edge */\n  broadphase?: EdgeBroadphase;\n  /** Any distance to the mouse from an edge that is less than this distance will be picked */\n  minPickDistance?: number;\n  /** This sets a scaling factor for the edge's line width and curve  */\n  scaleFactor?(): number;\n  /**\n   * If this is set, then the thickness of the line and the curvature of the line exists in screen space\n   * rather than world space.\n   */\n  scaleType?: EdgeScaleType;\n  /** Specifies how the edge is formed */\n  type: EdgeType;\n}\n\nexport interface IEdgeLayerState {}\n\n/** Converts a control list to an IO value */\nfunction toInstanceIOValue(value: [number, number][]): InstanceIOValue {\n  return [value[0][0], value[0][1], value[1][0], value[1][1]];\n}\n\n/** This picks the appropriate shader for the edge type desired */\nconst pickVS = {\n  [EdgeType.LINE]: require(\"./shader/edge-layer-line.vs\"),\n  [EdgeType.BEZIER]: require(\"./shader/edge-layer-bezier.vs\"),\n  [EdgeType.BEZIER2]: require(\"./shader/edge-layer-bezier2.vs\")\n};\n\n/** This is the base edge layer which is a template that can be filled with the needed specifics for a given line type */\nconst baseVS = require(\"./shader/edge-layer.vs\");\nconst screenVS = require(\"./shader/edge-layer-screen-curve.vs\");\nconst edgeFS = require(\"./shader/edge-layer.fs\");\n\n/**\n * This layer displays edges and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class EdgeLayer<\n  T extends EdgeInstance,\n  U extends IEdgeLayerProps<T>\n> extends Layer<T, U> {\n  // Set default props for the layer\n  static defaultProps: IEdgeLayerProps<EdgeInstance> = {\n    broadphase: EdgeBroadphase.ALL,\n    data: new InstanceProvider<EdgeInstance>(),\n    key: \"none\",\n    scaleType: EdgeScaleType.NONE,\n    type: EdgeType.LINE\n  };\n\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods(): IPickingMethods<EdgeInstance> {\n    return edgePicking(this.props);\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<EdgeInstance> {\n    const {\n      animate = {},\n      scaleFactor = () => 1,\n      type,\n      scaleType = EdgeScaleType.NONE\n    } = this.props;\n\n    const {\n      end: animateEnd,\n      start: animateStart,\n      colorStart: animateColorStart,\n      colorEnd: animateColorEnd,\n      control: animateControl\n    } = animate;\n\n    const MAX_SEGMENTS = type === EdgeType.LINE ? 2 : 50;\n\n    // Calculate the normals and interpolations for our vertices\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      [MAX_SEGMENTS * 2 + 2]: -1\n    };\n\n    const vertexInterpolation: { [key: number]: number } = {\n      0: 0,\n      [MAX_SEGMENTS * 2 + 2]: 1\n    };\n\n    let sign = 1;\n    for (let i = 0; i < MAX_SEGMENTS * 2; ++i) {\n      vertexToNormal[i + 1] = sign;\n      vertexInterpolation[i + 1] = Math.floor(i / 2) / (MAX_SEGMENTS - 1);\n      sign *= -1;\n    }\n\n    const vs = shaderTemplate({\n      options: {\n        // Retain the attributes injection\n        attributes: \"${attributes}\",\n        // Inject the proper interpolation method\n        interpolation: pickVS[type]\n      },\n      required: {\n        name: \"Edge Layer\",\n        values: [\"interpolation\"]\n      },\n      shader: scaleType === EdgeScaleType.NONE ? baseVS : screenVS,\n\n      // We do not want to remove any extension macros\n      onToken: (token, replace) => {\n        if (\n          token === templateVars.extendHeader ||\n          token === templateVars.extend\n        ) {\n          return `$\\{${token}}`;\n        }\n\n        return replace;\n      }\n    });\n\n    return {\n      fs: edgeFS,\n      instanceAttributes: [\n        {\n          easing: animateStart,\n          name: \"start\",\n          size: InstanceAttributeSize.TWO,\n          update: o => o.start\n        },\n        {\n          easing: animateEnd,\n          name: \"end\",\n          size: InstanceAttributeSize.TWO,\n          update: o => o.end\n        },\n        {\n          name: \"widthStart\",\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.widthStart]\n        },\n        {\n          name: \"widthEnd\",\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.widthEnd]\n        },\n        {\n          name: \"depth\",\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth]\n        },\n        {\n          easing: animateColorStart,\n          name: \"colorStart\",\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.colorStart\n        },\n        {\n          easing: animateColorEnd,\n          name: \"colorEnd\",\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.colorEnd\n        },\n        type === EdgeType.LINE\n          ? {\n              easing: animateControl,\n              name: \"control\",\n              size: InstanceAttributeSize.FOUR,\n              update: _o => [0, 0, 0, 0]\n            }\n          : null,\n        type === EdgeType.BEZIER\n          ? {\n              easing: animateControl,\n              name: \"control\",\n              size: InstanceAttributeSize.FOUR,\n              update: o => [o.control[0][0], o.control[0][1], 0, 0]\n            }\n          : null,\n        type === EdgeType.BEZIER2\n          ? {\n              easing: animateControl,\n              name: \"control\",\n              size: InstanceAttributeSize.FOUR,\n              update: o => toInstanceIOValue(o.control)\n            }\n          : null\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: (_uniform: IUniform) => [scaleFactor()]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexInterpolation[vertex],\n            // The number of vertices\n            MAX_SEGMENTS * 2\n          ]\n        }\n      ],\n      vertexCount: MAX_SEGMENTS * 2 + 2,\n      vs: vs.shader\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentShape;\n  }\n}\n","export * from \"./edge-layer\";\nexport * from \"./edge-instance\";\nexport * from \"./types\";\n","import { observable } from \"../../instance-provider\";\nimport { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { Circle } from \"../../primitives/circle\";\n\nexport interface ICircleInstanceOptions extends IInstanceOptions, Circle {\n  /** The color of this circle */\n  color?: [number, number, number, number];\n  /** The z depth of the circle (for draw ordering) */\n  depth?: number;\n}\n\nexport class CircleInstance extends Instance implements Circle {\n  @observable color: [number, number, number, number] = [1.0, 1.0, 1.0, 1.0];\n  @observable depth: number = 0;\n  @observable radius: number = 0;\n  @observable x: number = 0;\n  @observable y: number = 0;\n\n  constructor(options: ICircleInstanceOptions) {\n    super(options);\n\n    this.color = options.color || this.color;\n    this.radius = options.radius || this.radius;\n    this.x = options.x || this.x;\n    this.y = options.y || this.y;\n    this.depth = options.depth || this.depth;\n  }\n\n  get width() {\n    return this.radius * 2;\n  }\n\n  get height() {\n    return this.radius * 2;\n  }\n}\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float edgeSharpnessBase;\\nvarying vec2 pointCoord;\\n\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  vertexColor = color * color.a;\\n  float size = radius * scaleFactor;\\n  edgeSharpness = mix(0.8, 0.0, min((size * 6.0 * pixelRatio) / (45.0 * pixelRatio), 1.0));\\n  edgeSharpnessBase = mix(0.1, 0.0, min((size * 6.0 * pixelRatio) / (45.0 * pixelRatio), 1.0));\\n  pointCoord = (position.xy + vec2(1.0, 1.0)) / 2.0;\\n\\n  // Center within clip space\\n  vec4 clipCenter = clipSpace(vec3(center, depth));\\n  // Center in screen space\\n  vec2 screenCenter = (clipCenter.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Position in screen space\\n  vec2 vertex = (position.xy * size) + screenCenter;\\n  // Position back to clip space\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), clipCenter.zw);\\n\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\n${picking}\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float edgeSharpnessBase;\\nvarying vec2 pointCoord;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius + (radius * edgeSharpnessBase),\\n    dot(dist, dist) * 4.0\\n  );\\n}\\n\\n${extendHeader}\\n\\nvoid main() {\\n  float step_factor = circle(pointCoord.xy, 1.0);\\n\\n  setColor(mix(\\n    vec4(0.0, 0.0, 0.0, 0.0),\\n    vertexColor,\\n    step_factor\\n  ));\\n\\n  ${extend}\\n}\\n\"","/**\n * Defines a 2d point within a coordinate plane\n */\nexport interface IPoint {\n  x: number;\n  y: number;\n}\n\n/**\n * Calculates the distance between two points, but keeps the distance in dquared form\n * thus performing Math.sqrt() on the output of this distance would provide the true\n * distance between the points.\n *\n * It is often faster and all that is needed to compare squared distances vs real distances\n * thus eliminating multiple Math.sqrt operations\n *\n * NOTE: For vectors this is the same as (pseudo code):\n * let vector3 = vector2.subtract(vector1)\n * return vector3.dot(vector3)\n *\n * @param p1 The point to find the distance from the second point\n * @param p2 The point to find the distance from the first point\n *\n * @return {number} The distance * distance between the two points\n */\nfunction squareDistance(p1: IPoint, p2: IPoint): number {\n  const dx = p1.x - p2.x;\n  const dy = p1.y - p2.y;\n\n  return dx * dx + dy * dy;\n}\n\n/**\n * Contains methods for managing or manipulating points\n *\n * @export\n * @class Point\n */\nexport class Point {\n  /**\n   * Adds two points together\n   *\n   * @static\n   * @param {IPoint} p1\n   * @param {IPoint} p2\n   * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n   *\n   * @return {IPoint} The two points added together\n   */\n  static add(p1: IPoint, p2: IPoint, out?: IPoint): IPoint {\n    if (out) {\n      out.x = p1.x + p2.x;\n      out.y = p1.y + p2.y;\n      return out;\n    }\n\n    return {\n      x: p1.x + p2.x,\n      y: p1.y + p2.y\n    };\n  }\n\n  /**\n   * @static\n   * This analyzes a test point against a list of points and determines which of the points is\n   * the closest to the test point. If there are equi-distant points in the list, this will return\n   * the first found in the list.\n   *\n   * @param {IPoint} testPoint The point to compare against other points\n   * @param {IPoint[]} points The list of points to be compared against\n   *\n   * @return {IPoint} The closest point to the test point\n   */\n  static getClosest(testPoint: IPoint, points: IPoint[]): IPoint {\n    let closestDistance = Number.MAX_VALUE;\n    let closestPoint: IPoint = testPoint;\n    let distance: number;\n\n    const findClosest = function(point: IPoint) {\n      distance = squareDistance(point, testPoint);\n\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestPoint = point;\n      }\n    };\n\n    points.forEach(findClosest);\n\n    return closestPoint;\n  }\n\n  /**\n   * @static\n   * This analyzes a test point against a list of points and determines which of the points is\n   * the closest to the test point. If there are equi-distant points in the list, this will return\n   * the first found in the list.\n   *\n   * This just returns the index of the found point and not the point itself\n   *\n   * @param {IPoint} testPoint The point to compare against other points\n   * @param {IPoint[]} points The list of points to be compared against\n   *\n   * @return {number} The index of the closest point to the test point\n   */\n  static getClosestIndex(testPoint: IPoint, points: IPoint[]): number {\n    let closestDistance = Number.MAX_VALUE;\n    let closestPoint: number = 0;\n    let distance: number;\n\n    const findClosest = function(point: IPoint, i: number) {\n      distance = squareDistance(point, testPoint);\n\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestPoint = i;\n      }\n    };\n\n    points.forEach(findClosest);\n\n    return closestPoint;\n  }\n\n  /**\n   * @static\n   * This will calculate a direction vector between two points that points toward p2\n   *\n   * @param {IPoint} amount The start of the direction\n   * @param {IPoint} from The direction to point the vector towards\n   * @param {boolean} normalize If true, this will make the vector have a magnitude of 1\n   *\n   * @returns {number}\n   */\n  static subtract(\n    amount: IPoint,\n    from: IPoint,\n    normalize: boolean = false\n  ): IPoint {\n    let dx = from.x - amount.x;\n    let dy = from.y - amount.y;\n\n    if (normalize) {\n      const magnitude = Math.sqrt(dx * dx + dy * dy);\n      dx /= magnitude;\n      dy /= magnitude;\n    }\n\n    return {\n      x: dx,\n      y: dy\n    };\n  }\n\n  /**\n   * @static\n   * Gets the distance between two points\n   *\n   * @param {IPoint} p1\n   * @param {IPoint} p2\n   * @param {boolean} squared If set to true, returns the distance * distance (performs faster)\n   *\n   * @returns {number} The real distance between two points\n   */\n  static getDistance(p1: IPoint, p2: IPoint, squared: boolean = false): number {\n    if (squared) {\n      return squareDistance(p1, p2);\n    }\n\n    return Math.sqrt(squareDistance(p1, p2));\n  }\n\n  /**\n   * @static\n   * Gets a point perfectly between two points\n   *\n   * @param {IPoint} p1\n   * @param {IPoint} p2\n   *\n   * @returns {IPoint} The point between the two provided points\n   */\n  static getMidpoint(p1: IPoint, p2: IPoint) {\n    const direction = Point.subtract(p1, p2);\n\n    return {\n      x: direction.x / 2 + p1.x,\n      y: direction.y / 2 + p1.y\n    };\n  }\n\n  static make(x: number, y: number) {\n    return { x, y };\n  }\n\n  /**\n   * Scales a point by a given amount\n   *\n   * @static\n   * @param {IPoint} p1\n   * @param {number} s The amount to scale the point by\n   * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n   *\n   * @memberof Point\n   */\n  static scale(p1: IPoint, s: number, out?: IPoint): IPoint {\n    if (out) {\n      out.x = p1.x * s;\n      out.y = p1.y * s;\n      return out;\n    }\n\n    return {\n      x: p1.x * s,\n      y: p1.y * s\n    };\n  }\n\n  /**\n   * Makes a new point initialized to {0,0}\n   *\n   * @static\n   * @returns {IPoint} A new point object at {0,0}\n   */\n  static zero(): IPoint {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n}\n","import * as Three from \"three\";\nimport { InstanceProvider } from \"../../instance-provider\";\nimport { Bounds, IPoint } from \"../../primitives\";\nimport { ILayerProps, IModelType, Layer } from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  IProjection,\n  IShaderInitialization,\n  IUniform,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport { CommonMaterialOptions, Vec } from \"../../util\";\nimport { IAutoEasingMethod } from \"../../util/auto-easing-method\";\nimport { CircleInstance } from \"./circle-instance\";\n\nexport interface ICircleLayerProps<T extends CircleInstance>\n  extends ILayerProps<T> {\n  /** This sets the  */\n  fadeOutOversized?: number;\n  /** This sets a scaling factor for the circle's radius */\n  scaleFactor?(): number;\n  /** Flags this layer to draw  */\n  disableDepthTest?: boolean;\n  /**\n   * This is the properties that can toggle on animations.\n   *\n   * NOTE: The more properties declared as animated will reduce the performance of the layer.\n   * if animated properties are created, it can be beneficial to have other layers with no\n   * animations be available for the Instances to 'rest' in when not moving.\n   */\n  animate?: {\n    center?: IAutoEasingMethod<Vec>;\n    radius?: IAutoEasingMethod<Vec>;\n    color?: IAutoEasingMethod<Vec>;\n  };\n}\n\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class CircleLayer<\n  T extends CircleInstance,\n  U extends ICircleLayerProps<T>\n> extends Layer<T, U> {\n  static defaultProps: ICircleLayerProps<CircleInstance> = {\n    data: new InstanceProvider<CircleInstance>(),\n    fadeOutOversized: -1,\n    key: \"\",\n    scaleFactor: () => 1\n  };\n\n  /**\n   * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n   * of elements\n   */\n  getInstancePickingMethods() {\n    const noScaleFactor = () => 1;\n\n    return {\n      // Provide the calculated AABB world bounds for a given circle\n      boundsAccessor: (circle: CircleInstance) =>\n        new Bounds({\n          height: circle.radius * 2,\n          width: circle.radius * 2,\n          x: circle.x - circle.radius,\n          y: circle.y - circle.radius\n        }),\n\n      // Provide a precise hit test for the circle\n      hitTest: (circle: CircleInstance, point: IPoint, view: IProjection) => {\n        const circleScreenCenter = view.worldToScreen(circle);\n        const mouseScreen = view.worldToScreen(point);\n        const r = circle.radius * (this.props.scaleFactor || noScaleFactor)();\n\n        const delta = [\n          mouseScreen.x - circleScreenCenter.x,\n          mouseScreen.y - circleScreenCenter.y\n        ];\n\n        return delta[0] * delta[0] + delta[1] * delta[1] < r * r;\n      }\n    };\n  }\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<CircleInstance> {\n    const scaleFactor = this.props.scaleFactor || (() => 1);\n    const animations = this.props.animate || {};\n    const {\n      center: animateCenter,\n      radius: animateRadius,\n      color: animateColor\n    } = animations;\n\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      1: 1,\n      2: -1,\n      3: 1,\n      4: -1,\n      5: -1\n    };\n\n    const vertexToSide: { [key: number]: number } = {\n      0: -1,\n      1: -1,\n      2: -1,\n      3: 1,\n      4: 1,\n      5: 1\n    };\n\n    return {\n      fs: require(\"./circle-layer.fs\"),\n      instanceAttributes: [\n        {\n          easing: animateCenter,\n          name: \"center\",\n          size: InstanceAttributeSize.TWO,\n          update: circle => [circle.x, circle.y]\n        },\n        {\n          easing: animateRadius,\n          name: \"radius\",\n          size: InstanceAttributeSize.ONE,\n          update: circle => [circle.radius]\n        },\n        {\n          name: \"depth\",\n          size: InstanceAttributeSize.ONE,\n          update: circle => [circle.depth]\n        },\n        {\n          easing: animateColor,\n          name: \"color\",\n          size: InstanceAttributeSize.FOUR,\n          update: circle => circle.color\n        }\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: (_uniform: IUniform) => [scaleFactor()]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexToSide[vertex],\n            0\n          ]\n        }\n      ],\n      vertexCount: 6,\n      vs: require(\"./circle-layer.vs\")\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return CommonMaterialOptions.transparentShape;\n  }\n}\n","export * from \"./circle-layer\";\nexport * from \"./circle-instance\";\n","import { observable } from \"../../instance-provider\";\nimport { IInstanceOptions, Instance } from \"../../instance-provider/instance\";\nimport { Vec2, Vec4 } from \"../../util\";\n\nexport interface IArcInstanceOptions extends IInstanceOptions {\n  /** The start and end angle of the arc */\n  angle: Vec2;\n  /** The center point where the arc wraps around */\n  center: Vec2;\n  /** This is the end color of the arc */\n  colorEnd: Vec4;\n  /** This is the start color of the arc */\n  colorStart: Vec4;\n  /** Depth sorting of the arc (or the z value of the lable) */\n  depth: number;\n  /** The radius of how far the middle of the arc is from the center point */\n  radius: number;\n  /** The start to end thickness of the arc */\n  thickness: Vec2;\n}\n\n/**\n * This generates a new arc instance. An arc is a shape with a center and an angle that\n * is spans. This effectively can be used for a 'pie slice' or just the edge line on the pie\n * slice.\n */\nexport class ArcInstance extends Instance {\n  /** The start and end angle of the arc */\n  @observable angle: Vec2 = [0, Math.PI];\n  /** This is the end color of the arc */\n  @observable colorEnd: Vec4 = [0, 0, 0, 1];\n  /** This is the start color of the arc */\n  @observable colorStart: Vec4 = [0, 0, 0, 1];\n  /** The center point where the arc wraps around */\n  @observable center: Vec2 = [0, 0];\n  /** Depth sorting of the arc (or the z value of the lable) */\n  @observable depth: number = 0;\n  /** The radius of how far the middle of the arc is from the center point */\n  @observable radius: number = 1;\n  /** The start to end thickness of the arc */\n  @observable thickness: Vec2 = [1, 1];\n\n  constructor(options: IArcInstanceOptions) {\n    super(options);\n\n    this.angle = options.angle || this.angle;\n    this.colorEnd = options.colorEnd || this.colorEnd;\n    this.colorStart = options.colorStart || this.colorStart;\n    this.center = options.center || this.center;\n    this.depth = options.depth || this.depth;\n    this.radius = options.radius || this.radius;\n    this.thickness = options.thickness || this.thickness;\n  }\n}\n","module.exports = \"precision highp float;\\n\\n${picking}\\nvarying vec4 vertexColor;\\n${extendHeader}\\n\\nvoid main() {\\n  setColor(vertexColor);\\n  gl_FragColor = vertexColor;\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\n/**\\n  This vertex shader calculates edges whose curve and width is in screen space where the curve is\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nvarying vec4 vertexColor;\\n\\nvec2 interpolation(float t, vec2 center, float radius, float start, float end) {\\n  float angle = (end - start) * t + start;\\n  return center + vec2(cos(angle) * radius, sin(angle) * radius);\\n}\\n\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure some of the vec injections\\n  float startAngle = angle.x;\\n  float endAngle = angle.y;\\n  float widthStart = thickness.x;\\n  float widthEnd = thickness.y;\\n\\n  // Convert world points to screen space\\n  vec4 centerClip = clipSpace(vec3(center, depth));\\n  vec2 centerScreen = (centerClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, centerScreen, radius, startAngle, endAngle);\\n  // Get normal with currentPosition and center\\n  vec2 currentNormal = normalize(currentPosition - centerScreen);\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (normal * lineThickness);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a;\\n\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), centerClip.zw);\\n  gl_PointSize = 5.0;\\n\\n  ${extend}\\n}\\n\"","module.exports = \"precision highp float;\\n\\nfloat PI = 3.14159265;\\nfloat PI_2 = 6.2831853;\\n\\n/**\\n * This is an approximation of sin that allows us to bypass hardware precision\\n * limitations for sin.\\n *\\n * http://lab.polygonal.de/2007/07/18/fast-and-accurate-sinecosine-approximation/\\n * This is a GPU adaptation of this method to provide optimal GPU performance for the operation\\n */\\nfloat fsin(float x) {\\n  float sine;\\n\\n  // Always wrap input angle to -PI..PI\\n  x += mix(\\n    mix(\\n      0.0,\\n      -PI_2, float(x > PI)\\n    ),\\n    PI_2, float(x < -PI)\\n  );\\n\\n  // Compute sine\\n  sine = 1.27323954 * x;\\n  sine += mix(-1.0, 1.0, float(x < 0.0)) * 0.405284735 * x * x;\\n  sine = 0.225 * (sine * (mix(1.0, -1.0, float(sine < 0.0)) * sine) - sine) + sine;\\n\\n  return sine;\\n}\\n\\n/**\\n * This is an approximation of cos that allows us to bypass hardware precision\\n * limitations for cos.\\n *\\n * http://lab.polygonal.de/2007/07/18/fast-and-accurate-sinecosine-approximation/\\n * This is a GPU adaptation of this method to provide optimal GPU performance for the operation\\n */\\nfloat fcos(float x) {\\n  float sine;\\n  // Cos is the same as sine but\\n  x += 1.57079632;\\n\\n  // Always wrap input angle to -PI..PI\\n  x += mix(\\n    mix(\\n      0.0,\\n      -PI_2, float(x > PI)\\n    ),\\n    PI_2, float(x < -PI)\\n  );\\n\\n  // Compute sine\\n  sine = 1.27323954 * x;\\n  sine += mix(-1.0, 1.0, float(x < 0.0)) * 0.405284735 * x * x;\\n  sine = 0.225 * (sine * (mix(1.0, -1.0, float(sine < 0.0)) * sine) - sine) + sine;\\n\\n  return sine;\\n}\\n\\n/**\\n  This vertex shader calculates edges whose curve and width is in screen space where the curve is\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nvarying vec4 vertexColor;\\n\\nvec2 interpolation(float t, vec2 center, float radius, float start, float end) {\\n  float angle = (end - start) * t + start;\\n  return center + vec2(fcos(angle) * radius, fsin(angle) * radius);\\n}\\n\\n${extendHeader}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure some of the vec injections\\n  float startAngle = angle.x;\\n  float endAngle = angle.y;\\n  float widthStart = thickness.x;\\n  float widthEnd = thickness.y;\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, center, radius, startAngle, endAngle);\\n  // Get normal with currentPosition and center\\n  vec2 currentNormal = normalize(currentPosition - center);\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (normal * lineThickness);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a;\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n\\n  ${extend}\\n}\\n\"","module.exports = \"void main() {\\n  gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n}\"","module.exports = \"\"","import { Bounds } from \"../primitives\";\nimport { IPoint } from \"../primitives/point\";\nimport {\n  IColorPickingData,\n  InstanceHitTest,\n  IPickInfo,\n  IProjection,\n  PickType\n} from \"../types\";\nimport { Instance, TrackedQuadTree } from \"../util\";\nimport { UniformColorDiffProcessor } from \"./buffer-management/diff-processors/uniform-color-diff-processor\";\nimport { ILayerProps, Layer } from \"./layer\";\n\nfunction isColorProcessor<T extends Instance>(\n  val: any\n): val is UniformColorDiffProcessor<T> {\n  return val && val.colorPicking;\n}\n\n/**\n * This manages mouse gestures broadcast to the layer and handles appropriate actions such as determining\n * how to make the interaction translate to picking events for the layer's instances.\n *\n * This class, in summary, takes in the gestures to the view and converts them to gestures to the instances.\n */\nexport class LayerInteractionHandler<\n  T extends Instance,\n  U extends ILayerProps<T>\n> {\n  /** This is the color picking information most recently rendered */\n  colorPicking?: IColorPickingData;\n  /** This tracks the elements that have the mouse currently over them */\n  isMouseOver = new Map<T, boolean>();\n  /** This tracks the elements the mouse was down on */\n  isMouseDown = new Map<T, boolean>();\n  /** This is the layer the interaction handler manages events for */\n  layer: Layer<T, U>;\n\n  constructor(layer: Layer<T, U>) {\n    this.layer = layer;\n  }\n\n  /**\n   * Retrieves the color picking instance determined for the procedure.\n   */\n  getColorPickInstance() {\n    if (\n      this.colorPicking &&\n      isColorProcessor<T>(this.layer.diffManager.processor)\n    ) {\n      return this.layer.diffManager.processor.colorPicking.uidToInstance.get(\n        0xffffff - this.colorPicking.nearestColor\n      );\n    }\n\n    return null;\n  }\n\n  /**\n   * Handles mouse down gestures for a layer within a view\n   */\n  handleMouseOver(_view: IProjection, _mouse: IPoint) {\n    // This is the mouse over for the view itself. We should probably just let the mouse over events handle the interactions\n    // With the instances\n  }\n\n  /**\n   * Handles mouse down gestures for a layer within a view\n   */\n  handleMouseDown(view: IProjection, mouse: IPoint, button: number) {\n    // This handles interactions for PickType ALL layers\n    if (this.layer.picking && this.layer.picking.type !== PickType.NONE) {\n      const { onMouseDown } = this.layer.props;\n\n      // If we have a listener for either event we should continue to process the event in more detail\n      if (onMouseDown) {\n        const world = view.viewToWorld(mouse);\n        let hitTest: InstanceHitTest<T>;\n        let query: TrackedQuadTree<T>[\"query\"];\n        let querySpace;\n        let instances: T[] = [];\n\n        if (this.layer.picking.type === PickType.ALL) {\n          hitTest = this.layer.picking.hitTest;\n          query = this.layer.picking.quadTree.query.bind(\n            this.layer.picking.quadTree\n          );\n          querySpace = (check: Bounds | IPoint) =>\n            query(check).filter(o => hitTest(o, world, view));\n          instances = query(world).filter(o => hitTest(o, world, view));\n        } else if (this.layer.picking.type === PickType.SINGLE) {\n          // Get the instance for the nearest color\n          const instanceForColor = this.getColorPickInstance();\n\n          if (instanceForColor) {\n            instances.push(instanceForColor);\n          }\n        }\n\n        const info: IPickInfo<T> = {\n          button,\n          instances,\n          layer: this.layer.id,\n          projection: view,\n          querySpace,\n          screen: [mouse.x, mouse.y],\n          world: [world.x, world.y]\n        };\n\n        onMouseDown(info);\n\n        // We track all the elements the mouse is currently down on\n        this.isMouseDown.clear();\n        instances.forEach(o => this.isMouseDown.set(o, true));\n      }\n    }\n  }\n\n  /**\n   * Handles mouse out events for a layer within the view\n   */\n  handleMouseOut(view: IProjection, mouse: IPoint) {\n    // This will fire an instance mouse out for any over instances in the queue since we left the view\n    // Thus no instances shall be considered 'over'\n    if (this.layer.picking && this.layer.picking.type !== PickType.NONE) {\n      const { onMouseOut } = this.layer.props;\n\n      if (onMouseOut) {\n        const world = view.viewToWorld(mouse);\n        let hitTest: InstanceHitTest<T>;\n        let query: TrackedQuadTree<T>[\"query\"];\n        let querySpace;\n\n        if (this.layer.picking.type === PickType.ALL) {\n          hitTest = this.layer.picking.hitTest;\n          query = this.layer.picking.quadTree.query.bind(\n            this.layer.picking.quadTree\n          );\n          querySpace = (check: Bounds | IPoint) =>\n            query(check).filter(o => hitTest(o, world, view));\n        }\n\n        const info: IPickInfo<T> = {\n          instances: Array.from(this.isMouseOver.keys()),\n          layer: this.layer.id,\n          projection: view,\n          querySpace,\n          screen: [mouse.x, mouse.y],\n          world: [world.x, world.y]\n        };\n\n        onMouseOut(info);\n      }\n    }\n\n    // We clear as no instances are over anymore\n    this.isMouseOver.clear();\n    // We also clear all down elements as the mouse is no longer in proper context for the instances\n    // But since the mouse was never actually released, we do not fire an up\n    this.isMouseDown.clear();\n  }\n\n  /**\n   * Handles mouse up gestures for the layer within the provided view\n   */\n  handleMouseUp(view: IProjection, mouse: IPoint, button: number) {\n    // This handles interactions for PickType ALL layers\n    if (this.layer.picking && this.layer.picking.type !== PickType.NONE) {\n      const { onMouseUp } = this.layer.props;\n\n      // If we have a listener for either event we should continue to process the event in more detail\n      if (onMouseUp) {\n        const world = view.viewToWorld(mouse);\n        let hitTest: InstanceHitTest<T>;\n        let query: TrackedQuadTree<T>[\"query\"];\n        let querySpace;\n        let instances: T[] = [];\n\n        if (this.layer.picking.type === PickType.ALL) {\n          hitTest = this.layer.picking.hitTest;\n          query = this.layer.picking.quadTree.query.bind(\n            this.layer.picking.quadTree\n          );\n          querySpace = (check: Bounds | IPoint) =>\n            query(check).filter(o => hitTest(o, world, view));\n          instances = query(world).filter(o => hitTest(o, world, view));\n        } else if (this.layer.picking.type === PickType.SINGLE) {\n          // Get the instance for the nearest color\n          const instanceForColor = this.getColorPickInstance();\n\n          if (instanceForColor) {\n            instances.push(instanceForColor);\n          }\n        }\n\n        const info: IPickInfo<T> = {\n          button,\n          instances,\n          layer: this.layer.id,\n          projection: view,\n          querySpace,\n          screen: [mouse.x, mouse.y],\n          world: [world.x, world.y]\n        };\n\n        onMouseUp(info);\n      }\n    }\n  }\n\n  /**\n   * Mouse move events on the layer will detect when instances have their item newly over or just moved on\n   */\n  handleMouseMove(view: IProjection, mouse: IPoint) {\n    // This handles interactions for PickType ALL layers\n    const { onMouseOver, onMouseMove, onMouseOut } = this.layer.props;\n\n    if (this.layer.picking && this.layer.picking.type !== PickType.NONE) {\n      // If we have a listener for either event we should continue to process the event in more detail\n      if (onMouseOver || onMouseMove || onMouseOut) {\n        let info: IPickInfo<T>;\n        const world = view.viewToWorld(mouse);\n        let hitTest: InstanceHitTest<T>;\n        let query: TrackedQuadTree<T>[\"query\"];\n        let querySpace;\n        let instances: T[] = [];\n\n        if (this.layer.picking.type === PickType.ALL) {\n          hitTest = this.layer.picking.hitTest;\n          query = this.layer.picking.quadTree.query.bind(\n            this.layer.picking.quadTree\n          );\n          querySpace = (check: Bounds | IPoint) =>\n            query(check).filter(o => hitTest(o, world, view));\n          instances = query(world).filter(o => hitTest(o, world, view));\n        } else if (this.layer.picking.type === PickType.SINGLE) {\n          // Get the instance for the nearest color\n          const instanceForColor = this.getColorPickInstance();\n\n          if (instanceForColor) {\n            instances.push(instanceForColor);\n          }\n        }\n\n        // Broadcast the picking info for newly over instances to any of the layers listeners if needed\n        if (onMouseOver) {\n          const notOverInstances = instances.filter(\n            o => !this.isMouseOver.get(o)\n          );\n          info = {\n            instances: notOverInstances,\n            layer: this.layer.id,\n            projection: view,\n            querySpace,\n            screen: [mouse.x, mouse.y],\n            world: [world.x, world.y]\n          };\n\n          if (notOverInstances.length > 0) onMouseOver(info);\n        }\n\n        // Broadcast the the picking info for all instances that the mouse moved on\n        if (onMouseMove) {\n          // This is the pick info object we will broadcast from the layer\n          info = {\n            instances,\n            layer: this.layer.id,\n            projection: view,\n            querySpace,\n            screen: [mouse.x, mouse.y],\n            world: [world.x, world.y]\n          };\n\n          onMouseMove(info);\n        }\n\n        // We take the hovered instances\n        const isCurrentlyOver = new Map<T, boolean>();\n        instances.forEach(o => isCurrentlyOver.set(o, true));\n\n        // Broadcast the the picking info for all instances that the mouse moved off of\n        if (onMouseOut) {\n          const noLongerOver = Array.from(this.isMouseOver.keys()).filter(\n            o => !isCurrentlyOver.get(o)\n          );\n\n          // This is the pick info object we will broadcast from the layer\n          info = {\n            instances: noLongerOver,\n            layer: this.layer.id,\n            projection: view,\n            querySpace,\n            screen: [mouse.x, mouse.y],\n            world: [world.x, world.y]\n          };\n\n          if (noLongerOver.length > 0) onMouseOut(info);\n        }\n\n        // We store the current hovered over items as our over item list for next interaction\n        this.isMouseOver = isCurrentlyOver;\n      }\n    }\n  }\n\n  /**\n   * Handles click gestures on the layer within a view\n   */\n  handleMouseClick(view: IProjection, mouse: IPoint, button: number) {\n    // This handles interactions for PickType ALL layers\n    if (this.layer.picking && this.layer.picking.type !== PickType.NONE) {\n      const { onMouseClick } = this.layer.props;\n\n      // If we have a listener for either event we should continue to process the event in more detail\n      if (onMouseClick) {\n        const world = view.viewToWorld(mouse);\n        let hitTest: InstanceHitTest<T>;\n        let query: TrackedQuadTree<T>[\"query\"];\n        let querySpace;\n        let instances: T[] = [];\n\n        if (this.layer.picking.type === PickType.ALL) {\n          hitTest = this.layer.picking.hitTest;\n          query = this.layer.picking.quadTree.query.bind(\n            this.layer.picking.quadTree\n          );\n          querySpace = (check: Bounds | IPoint) =>\n            query(check).filter(o => hitTest(o, world, view));\n          instances = query(world).filter(o => hitTest(o, world, view));\n        } else if (this.layer.picking.type === PickType.SINGLE) {\n          // Get the instance for the nearest color\n          const instanceForColor = this.getColorPickInstance();\n\n          if (instanceForColor) {\n            instances.push(instanceForColor);\n          }\n        }\n\n        const info: IPickInfo<T> = {\n          button,\n          instances,\n          layer: this.layer.id,\n          projection: view,\n          querySpace,\n          screen: [mouse.x, mouse.y],\n          world: [world.x, world.y]\n        };\n\n        onMouseClick(info);\n      }\n    }\n  }\n\n  /**\n   * Handles drag gestures for the layer within the view\n   */\n  handleMouseDrag(_view: IProjection, _mouse: IPoint) {\n    // We probably should not broadcast drag events for the sake of instances. Instance dragging should be handled on\n    // An instance by instance basis rather than coming from the view's gestures\n  }\n}\n","import { Instance } from \"../../../instance-provider\";\nimport { IQuadTreePickingMetrics, PickType } from \"../../../types\";\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  isBufferLocation\n} from \"../buffer-manager-base\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\nimport { IUniformBufferLocation } from \"../uniform-buffer-manager\";\nimport { UniformDiffProcessor } from \"./uniform-diff-processor\";\n\nconst EMPTY: number[] = [];\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class UniformQuadDiffProcessor<\n  T extends Instance\n> extends UniformDiffProcessor<T> {\n  quadPicking: IQuadTreePickingMetrics<T>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>\n  ) {\n    super(layer, bufferManager);\n\n    if (layer.picking.type === PickType.ALL) {\n      this.quadPicking = layer.picking;\n    } else {\n      console.warn(\n        \"Diff Processing Error: A layer has a diff processor requesting Quad Processing but the picking type is not valid.\"\n      );\n    }\n  }\n\n  /**\n   * This processes add operations from changes in the instancing data and manages the layer's quad tree\n   * with the instance as well.\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (uniformCluster) {\n      manager.changeInstance(manager, instance, EMPTY, uniformCluster);\n    }\n\n    // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n    else {\n      const uniforms = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocation(uniforms)) {\n        instance.active = true;\n        manager.updateInstance(manager.layer, instance, uniforms);\n\n        // Ensure the instance has an updated injection in the quad tree\n        manager.quadPicking.quadTree.remove(instance);\n        manager.quadPicking.quadTree.add(instance);\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the uniforms\n    if (uniformCluster) {\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n\n      // Ensure the instance has an updated injection in the quad tree\n      manager.quadPicking.quadTree.remove(instance);\n      manager.quadPicking.quadTree.add(instance);\n    }\n\n    // If we don't have existing uniforms, then we must remove the instance\n    else {\n      manager.addInstance(manager, instance, EMPTY, uniformCluster);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster?: IUniformBufferLocation\n  ) {\n    if (uniformCluster) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n      // Remove the instance from our quad tree\n      manager.quadPicking.quadTree.remove(instance);\n    }\n  }\n}\n","import { Instance } from \"../../../instance-provider\";\nimport { ISinglePickingMetrics, PickType } from \"../../../types\";\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  isBufferLocation\n} from \"../buffer-manager-base\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\nimport { IUniformBufferLocation } from \"../uniform-buffer-manager\";\nimport { UniformDiffProcessor } from \"./uniform-diff-processor\";\n\nconst EMPTY: number[] = [];\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class UniformColorDiffProcessor<\n  T extends Instance\n> extends UniformDiffProcessor<T> {\n  colorPicking: ISinglePickingMetrics<T>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>\n  ) {\n    super(layer, bufferManager);\n\n    if (layer.picking.type === PickType.SINGLE) {\n      this.colorPicking = layer.picking;\n      this.colorPicking.uidToInstance = new Map<number, T>();\n    } else {\n      console.warn(\n        \"Diff Processing Error: A layer has a diff processor requesting Color Processing but the picking type is not valid.\"\n      );\n    }\n  }\n\n  /**\n   * This processes add operations from changes in the instancing data and manages the layer's matching of\n   * color / UID to Instance\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster: IUniformBufferLocation\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (uniformCluster) {\n      manager.changeInstance(manager, instance, EMPTY, uniformCluster);\n    }\n\n    // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n    else {\n      const uniforms = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocation(uniforms)) {\n        instance.active = true;\n        manager.updateInstance(manager.layer, instance, uniforms);\n\n        // Make sure the instance is mapped to it's UID\n        manager.colorPicking.uidToInstance.set(instance.uid, instance);\n      } else {\n        console.warn(\n          \"A data cluster was not provided by the manager to associate an instance with.\"\n        );\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster: IUniformBufferLocation\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the uniforms\n    if (uniformCluster) {\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n    }\n\n    // If we don't have existing uniforms, then we must remove the instance\n    else {\n      manager.addInstance(manager, instance, EMPTY, uniformCluster);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    uniformCluster: IUniformBufferLocation\n  ) {\n    if (uniformCluster) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, uniformCluster);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n      // Remove the instance from our quad tree\n      manager.colorPicking.uidToInstance.delete(instance.uid);\n    }\n  }\n}\n","import { Instance } from \"../../../instance-provider\";\nimport { IQuadTreePickingMetrics, PickType } from \"../../../types\";\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  isBufferLocationGroup\n} from \"../buffer-manager-base\";\nimport { IInstanceAttributeBufferLocationGroup } from \"../instance-attribute-buffer-manager\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\nimport { InstanceAttributeDiffProcessor } from \"./instance-attribute-diff-processor\";\n\nconst EMPTY: number[] = [];\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class InstanceAttributeQuadDiffProcessor<\n  T extends Instance\n> extends InstanceAttributeDiffProcessor<T> {\n  quadPicking: IQuadTreePickingMetrics<T>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>\n  ) {\n    super(layer, bufferManager);\n\n    if (layer.picking.type === PickType.ALL) {\n      this.quadPicking = layer.picking;\n    } else {\n      console.warn(\n        \"Diff Processing Error: A layer has a diff processor requesting Quad Processing but the picking type is not valid.\"\n      );\n    }\n  }\n\n  /**\n   * This processes add operations from changes in the instancing data and manages the layer's quad tree\n   * with the instance as well.\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (bufferLocations) {\n      manager.changeInstance(manager, instance, EMPTY, bufferLocations);\n    }\n\n    // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n    else {\n      const locations = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocationGroup(locations)) {\n        instance.active = true;\n        manager.updateInstance(manager.layer, instance, EMPTY, locations);\n\n        // Ensure the instance has an updated injection in the quad tree\n        manager.quadPicking.quadTree.remove(instance);\n        manager.quadPicking.quadTree.add(instance);\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the uniforms\n    if (bufferLocations) {\n      manager.updateInstance(manager.layer, instance, propIds, bufferLocations);\n\n      // Ensure the instance has an updated injection in the quad tree\n      manager.quadPicking.quadTree.remove(instance);\n      manager.quadPicking.quadTree.add(instance);\n    }\n\n    // If we don't have existing uniforms, then we must remove the instance\n    else {\n      manager.addInstance(manager, instance, EMPTY, bufferLocations);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    if (bufferLocations) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, EMPTY, bufferLocations);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n      // Remove the instance from our quad tree\n      manager.quadPicking.quadTree.remove(instance);\n    }\n  }\n}\n","import { Instance } from \"../../../instance-provider\";\nimport { ISinglePickingMetrics, PickType } from \"../../../types\";\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  isBufferLocationGroup\n} from \"../buffer-manager-base\";\nimport { IInstanceAttributeBufferLocationGroup } from \"../instance-attribute-buffer-manager\";\nimport { IInstanceDiffManagerTarget } from \"../instance-diff-manager\";\nimport { InstanceAttributeDiffProcessor } from \"./instance-attribute-diff-processor\";\n\nconst EMPTY: number[] = [];\n\n/**\n * Manages diffs for layers that are utilizing the base uniform instancing buffer strategy.\n */\nexport class InstanceAttributeColorDiffProcessor<\n  T extends Instance\n> extends InstanceAttributeDiffProcessor<T> {\n  colorPicking: ISinglePickingMetrics<T>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>\n  ) {\n    super(layer, bufferManager);\n\n    if (layer.picking.type === PickType.SINGLE) {\n      this.colorPicking = layer.picking;\n      this.colorPicking.uidToInstance = new Map<number, T>();\n    } else {\n      console.warn(\n        \"Diff Processing Error: A layer has a diff processor requesting Color Processing but the picking type is not valid.\"\n      );\n    }\n  }\n\n  /**\n   * This processes add operations from changes in the instancing data and manages the layer's matching of\n   * color / UID to Instance\n   */\n  addInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    // If the uniform cluster already exists, then we swap over to a change update\n    if (bufferLocations) {\n      manager.changeInstance(manager, instance, EMPTY, bufferLocations);\n    }\n\n    // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n    else {\n      const locations = manager.layer.bufferManager.add(instance);\n\n      if (isBufferLocationGroup(locations)) {\n        instance.active = true;\n        manager.updateInstance(manager.layer, instance, EMPTY, locations);\n\n        // Make sure the instance is mapped to it's UID\n        manager.colorPicking.uidToInstance.set(instance.uid, instance);\n      } else {\n        console.warn(\n          \"A data cluster was not provided by the manager to associate an instance with.\"\n        );\n      }\n    }\n  }\n\n  /**\n   * This processes change operations from changes in the instancing data\n   */\n  changeInstance(\n    manager: this,\n    instance: T,\n    propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    // If there is an existing uniform cluster for this instance, then we can update the uniforms\n    if (bufferLocations) {\n      manager.updateInstance(manager.layer, instance, propIds, bufferLocations);\n    }\n\n    // If we don't have existing uniforms, then we must remove the instance\n    else {\n      manager.addInstance(manager, instance, EMPTY, bufferLocations);\n    }\n  }\n\n  /**\n   * This processes remove operations from changes in the instancing data\n   */\n  removeInstance(\n    manager: this,\n    instance: T,\n    _propIds: number[],\n    bufferLocations?: IInstanceAttributeBufferLocationGroup\n  ) {\n    if (bufferLocations) {\n      // We deactivate the instance so it does not render anymore\n      instance.active = false;\n      // We do one last update on the instance to update to it's deactivated state\n      manager.updateInstance(manager.layer, instance, EMPTY, bufferLocations);\n      // Unlink the instance from the uniform cluster\n      manager.layer.bufferManager.remove(instance);\n      // Remove the instance from our quad tree\n      manager.colorPicking.uidToInstance.delete(instance.uid);\n    }\n  }\n}\n","import * as Three from \"three\";\nimport { Instance } from \"../../instance-provider\";\nimport { makeInstanceUniformNameArray } from \"../../shaders/util/make-instance-uniform-name\";\nimport { IInstanceAttribute, PickType } from \"../../types\";\nimport { uid, Vec2 } from \"../../util\";\nimport { Layer } from \"../layer\";\nimport { generateLayerModel } from \"../layer-processing/generate-layer-model\";\nimport { Scene } from \"../scene\";\nimport { BufferManagerBase, IBufferLocation } from \"./buffer-manager-base\";\n\nexport interface IUniformBufferLocation extends IBufferLocation {\n  /** This is the index of the instance as it appears in the buffer */\n  instanceIndex: number;\n  /** This is the instance data uniform */\n  buffer: Three.IUniform;\n  /** This is the instance data range within the instanceData uniform */\n  range: Vec2;\n}\n\nexport interface InstanceUniformBuffer {\n  /** This tracks which instances are active. Helps optimize draw range */\n  activeInstances: boolean[];\n  /** This is all of the clusters within this buffer */\n  clusters: IUniformBufferLocation[];\n  /** The first instance in the draw range */\n  firstInstance: number;\n  /** The unique geometry object for the buffer: Used to set draw range */\n  geometry: Three.BufferGeometry;\n  /** The last instance in the draw range */\n  lastInstance: number;\n  /** The unique material for the buffer: Used to provide a new set of uniforms */\n  material: Three.ShaderMaterial;\n  /** The unique model generated for the buffer: Used to allow the buffer to be rendered by adding to a scene */\n  model: Three.Object3D;\n  /** Threejs can not have duplicate objects across Scenes */\n  pickModel?: Three.Object3D;\n}\n\n/**\n * This is a Buffer Management system that performs instancing via the uniforms available to the hardware.\n * This improves compatibility with instancing for systems DRAMATICALLY as ALL systems WILL support uniforms.\n * This will NOT perform the best against true hardware instancing support, but it will have edge cases where it\n * is needed.\n *\n * When a layer has too many instance + vertex attributes for the hardware, the system will defer to this buffer methodology.\n *\n * This class does a whoooooole lot of making the magical instancing optimization controls possible.\n *\n * Our instancing hackyness comes from the idea that uniforms are fast, and you don't have to commit\n * ALL of them when you touch just a little piece, and you don't have worry about drivers not supporting\n * partial vertex buffer updates.\n *\n * This also is WebGL 1.0 compatible without any extensions that are poorly implemented. And again: does\n * NOT require entire attribute buffer commits.\n *\n * Uniforms are limited for any given draw call. So we have to create multiple materials to support\n * chunks of the instances that need to be drawn. We then have to associate an instance with the set\n * of uniforms that is related to the instance and keep them paired together. If we have too many instances\n * we must generate more buffers to accomodate them.\n *\n * If we remove instances, we must free up the uniform set so that others can use the uniforms. While the uniforms\n * are not in use, the instance should not be rendering.\n */\nexport class UniformBufferManager<T extends Instance> extends BufferManagerBase<\n  T,\n  IUniformBufferLocation\n> {\n  /** The number of uniform blocks an instance requires */\n  private uniformBlocksPerInstance: number;\n  /** The generated buffers by this manager */\n  private buffers: InstanceUniformBuffer[] = [];\n  /** The uniform clusters that are free and can be used by an instance */\n  private availableClusters: IUniformBufferLocation[] = [];\n  /** A lookup of an instance to a cluster of uniforms associated with it */\n  private instanceToCluster: { [key: number]: IUniformBufferLocation } = {};\n  /** A map of a cluster of uniforms to the buffer it comes from */\n  private clusterToBuffer = new Map<\n    IUniformBufferLocation,\n    InstanceUniformBuffer\n  >();\n\n  constructor(layer: Layer<T, any>, scene: Scene) {\n    super(layer, scene);\n\n    let maxUniformBlock: number = 0;\n    layer.instanceAttributes.forEach((attributes: IInstanceAttribute<T>) => {\n      maxUniformBlock = Math.max(attributes.block || 0, maxUniformBlock);\n    });\n\n    this.uniformBlocksPerInstance = maxUniformBlock + 1;\n  }\n\n  /**\n   * This adds an instance to the manager and gives the instance an associative\n   * block of uniforms to work with.\n   */\n  add = function(instance: T) {\n    // If there are no available buffers, we must add a buffer\n    if (this.availableClusters.length <= 0) {\n      this.makeNewBuffer();\n    }\n\n    const cluster = this.availableClusters.pop();\n\n    if (cluster) {\n      this.instanceToCluster[instance.uid] = cluster;\n    } else {\n      console.warn(\n        \"No valid cluster available for instance added to uniform manager.\"\n      );\n    }\n\n    return cluster;\n  };\n\n  /**\n   * Free all resources this manager may be holding onto\n   */\n  destroy() {\n    this.buffers.forEach(buffer => {\n      buffer.geometry.dispose();\n      buffer.material.dispose();\n    });\n  }\n\n  /**\n   * This retireves the uniforms associated with an instance, or returns nothing\n   * if the instance has not been associated yet.\n   */\n  getBufferLocations(instance: T) {\n    return this.instanceToCluster[instance.uid];\n  }\n\n  /**\n   * TODO: The uniform buffer does not need to utilize this yet. it will be more necessary\n   * when this manager updates only changed properties.\n   */\n  getActiveAttributePropertyId() {\n    return -1;\n  }\n\n  /**\n   * TODO: This is irrelevant tot his manager for now.\n   * Number of instances this buffer manages.\n   */\n  getInstanceCount() {\n    return -1;\n  }\n\n  /**\n   * TODO: The uniform buffer updates ALL attributes every change for any property so far.\n   * This should be fixed for performance improvements on the compatibility mode.\n   */\n  getUpdateAllPropertyIdList() {\n    return [];\n  }\n\n  /**\n   * Disassociates an instance with it's group of uniforms and makes the instance\n   * in the buffer no longer drawable.\n   */\n  remove = function(instance: T) {\n    const cluster = this.instanceToCluster[instance.uid];\n\n    // If the instance is associated with a cluster, we can add the cluster back to being available\n    // For another instance.\n    if (cluster) {\n      delete this.instanceToCluster[instance.uid];\n      this.availableClusters.push(cluster);\n    }\n\n    return instance;\n  };\n\n  /**\n   * Clears all elements of this manager from the current scene it was in.\n   */\n  removeFromScene() {\n    const scene = this.scene;\n\n    if (scene.container) {\n      for (let i = 0, end = this.buffers.length; i < end; ++i) {\n        const buffer = this.buffers[i];\n        scene.container.remove(buffer.model);\n        buffer.pickModel &&\n          this.scene.pickingContainer.remove(buffer.pickModel);\n      }\n\n      delete this.scene;\n    }\n  }\n\n  /**\n   * Applies the buffers to the provided scene for rendering.\n   */\n  setScene(scene: Scene) {\n    if (scene.container) {\n      for (let i = 0, end = this.buffers.length; i < end; ++i) {\n        const buffer = this.buffers[i];\n        scene.container.add(buffer.model);\n        buffer.pickModel && scene.pickingContainer.add(buffer.pickModel);\n      }\n\n      this.scene = scene;\n    } else {\n      console.warn(\"Can not set a scene that has an undefined container.\");\n    }\n  }\n\n  /**\n   * This generates a new buffer of uniforms to associate instances with.\n   */\n  makeNewBuffer() {\n    // We generate a new geometry object for the buffer as the geometry\n    // Needs to have it's own unique draw range per buffer for optimal\n    // Performance\n    const newGeometry = new Three.BufferGeometry();\n    this.layer.vertexAttributes.forEach(attribute => {\n      if (attribute.materialAttribute) {\n        newGeometry.addAttribute(attribute.name, attribute.materialAttribute);\n      }\n    });\n\n    // Ensure the draw range covers every instance in the geometry.\n    newGeometry.drawRange.start = 0;\n    newGeometry.drawRange.count =\n      this.layer.maxInstancesPerBuffer * this.layer.instanceVertexCount;\n\n    // This is the material that is generated for the layer that utilizes all of the generated and\n    // Injected shader IO and shader fragments\n    const newMaterial = this.layer.material.clone();\n    // Now make a Model for the buffer so it can be rendered withn the scene\n    const newModel = generateLayerModel(this.layer, newGeometry, newMaterial);\n    // We render junkloads of instances in a buffer. Culling will have to happen\n    // On an instance level.\n    newModel.frustumCulled = false;\n\n    // Make our new buffer which will manage the geometry and everything necessary\n    const buffer: InstanceUniformBuffer = {\n      activeInstances: [],\n      clusters: [],\n      firstInstance: 0,\n      geometry: newGeometry,\n      lastInstance: 0,\n      material: newMaterial,\n      model: newModel,\n      pickModel:\n        this.layer.picking.type === PickType.SINGLE\n          ? newModel.clone()\n          : undefined\n    };\n\n    this.buffers.push(buffer);\n\n    // Now that we have created a new buffer, we have all of it's uniforms\n    // To use to render more instances. We must take the instancing uniforms\n    // And divvy them up into clusters for our available buffer.\n    let uniformIndex = 0;\n    const uniformName = makeInstanceUniformNameArray();\n    const instanceData = newMaterial.uniforms[uniformName];\n\n    // We must ensure the vector objects are TOTALLY unique otherwise they'll get shared across buffers\n    instanceData.value = instanceData.value.map(\n      () => new Three.Vector4(0.0, 0.0, 0.0, 0.0)\n    );\n\n    // TODO: This will go away! To satisfy the changing buffer manager interfaces, we make a\n    // fake internal attribute for now\n    const fakeAttribute = Object.assign({}, this.layer.instanceAttributes[0], {\n      bufferAttribute: new Three.InstancedBufferAttribute(\n        new Float32Array(1),\n        1\n      ),\n      uid: uid()\n    });\n\n    for (let i = 0, end = this.layer.maxInstancesPerBuffer; i < end; ++i) {\n      const cluster: IUniformBufferLocation = {\n        attribute: fakeAttribute, // TODO: This is not needed for the uniform method yet. When we break down\n        // the uniform updates into attributes, this will be utilized.\n        buffer: instanceData,\n        instanceIndex: i,\n        range: [uniformIndex, 0]\n      };\n\n      uniformIndex += this.uniformBlocksPerInstance;\n      cluster.range[1] = uniformIndex;\n\n      buffer.clusters.push(cluster);\n      this.availableClusters.push(cluster);\n      this.clusterToBuffer.set(cluster, buffer);\n    }\n\n    // Grab the global uniforms from the material and add it to the uniform's materialUniform list so that\n    // We can keep uniforms consistent across all Instances\n    for (let i = 0, end = this.layer.uniforms.length; i < end; ++i) {\n      const uniform = this.layer.uniforms[i];\n      uniform.materialUniforms.push(newMaterial.uniforms[uniform.name]);\n    }\n\n    // Now that we are ready to utilize the buffer, let's add it to the scene so it may be rendered.\n    // Each new buffer equates to one draw call.\n    if (this.scene && this.scene.container) {\n      this.scene.container.add(buffer.model);\n      buffer.pickModel && this.scene.pickingContainer.add(buffer.pickModel);\n    }\n  }\n}\n","let toEmit: { [key: string]: [Function, number, number] } = {};\n\nexport function emitOnce(\n  id: string,\n  callback: (calledCountBeforeEmit: number, id: string) => void\n) {\n  const emit = toEmit[id] || [callback, -1, 0];\n  toEmit[id] = emit;\n  emit[2]++;\n\n  clearTimeout(emit[1]);\n  emit[1] = window.setTimeout(() => {\n    callback(emit[2], id);\n    delete toEmit[id];\n  }, 1);\n}\n\nexport function flushEmitOnce() {\n  for (const id in toEmit) {\n    const emit = toEmit[id];\n    clearTimeout(emit[1]);\n    emit[0](emit[2], id);\n  }\n\n  toEmit = {};\n}\n","import * as Three from \"three\";\nimport { Instance, ObservableMonitoring } from \"../../instance-provider\";\nimport { instanceAttributeShaderName } from \"../../shaders/util/instance-attribute-shader-name\";\nimport {\n  IInstanceAttribute,\n  IInstanceAttributeInternal,\n  PickType\n} from \"../../types\";\nimport { uid } from \"../../util\";\nimport { emitOnce, flushEmitOnce } from \"../../util/emit-once\";\nimport { IModelConstructable, Layer } from \"../layer\";\nimport { generateLayerModel } from \"../layer-processing/generate-layer-model\";\nimport { Scene } from \"../scene\";\nimport {\n  BufferManagerBase,\n  IBufferLocation,\n  IBufferLocationGroup\n} from \"./buffer-manager-base\";\n\nconst { max } = Math;\n\n/**\n * This represents the location of data for an instance's property to the piece of attribute buffer\n * it will update when it changes.\n */\nexport interface IInstanceAttributeBufferLocation extends IBufferLocation {}\n\n/** Represents the Location Groupings for Instance attribute Buffer locations */\nexport type IInstanceAttributeBufferLocationGroup = IBufferLocationGroup<\n  IInstanceAttributeBufferLocation\n>;\n\n/**\n * This manages instances in how they associate with buffer data for an instanced attribute strategy.\n */\nexport class InstanceAttributeBufferManager<\n  T extends Instance\n> extends BufferManagerBase<T, IInstanceAttributeBufferLocation> {\n  /** This stores an attribute's name to the buffer locations generated for it */\n  private allBufferLocations: { [key: string]: IBufferLocation[] } = {};\n  /** This contains the buffer locations the system will have available to the  */\n  private availableLocations: IInstanceAttributeBufferLocationGroup[] = [];\n  /** This is the number of instances the buffer draws currently */\n  currentInstancedCount = 0;\n  /** This is the mapped buffer location to the provided Instance */\n  private instanceToBufferLocation: {\n    [key: number]: IInstanceAttributeBufferLocationGroup;\n  } = {};\n  /**\n   * This is the number of times the buffer has grown. This is used to determine how much the buffer will grow\n   * for next growth pass.\n   */\n  private growthCount: number = 0;\n  /** This is the number of instances the buffer currently supports */\n  private maxInstancedCount: number = 1000;\n\n  // These are the only Three objects that must be monitored for disposal\n  private geometry?: Three.InstancedBufferGeometry;\n  private material?: Three.ShaderMaterial;\n  private model?: IModelConstructable & Three.Object3D;\n  private pickModel?: IModelConstructable & Three.Object3D | undefined;\n  private attributes?: IInstanceAttributeInternal<T>[];\n\n  /** This is a mapping of all attributes to their associated property ids that, when the property changes, the attribute will be updated */\n  private attributeToPropertyIds = new Map<IInstanceAttribute<T>, number[]>();\n  /**\n   * This is a trimmed listing of minimum property ids needed to trigger an update on all properties.\n   * This is used by the diffing process mostly to handle adding a new instance.\n   */\n  private updateAllPropertyIdList: number[] = [];\n  /**\n   * This is the discovered property id of the active attribute for the instance type this manager manages.\n   * This is used by the diffing process to target updates related to deactivating an instance.\n   */\n  private activePropertyId: number = -1;\n\n  constructor(layer: Layer<T, any>, scene: Scene) {\n    super(layer, scene);\n    // Start our add method as a registration step.\n    this.add = this.doAddWithRegistration;\n  }\n\n  /**\n   * First instance to be added to this manager will be heavily analyzed for used observables per attribute.\n   */\n  private doAddWithRegistration(instance: T) {\n    // We need to find out how an instance interacts with the attributes, so we will\n    // loop through the instances, call their updates and get feedback\n    this.layer.instanceAttributes.forEach(attribute => {\n      // We don't need to register child attributes as they get updated as a consequence to parent attributes\n      if (attribute.parentAttribute) return;\n      // Activate monitoring of ids, this also resets the monitor's list\n      ObservableMonitoring.setObservableMonitor(true);\n      // Access the update which accesses an instances properties (usually)\n      attribute.update(instance);\n      // We now have all of the ids of the properties that were used in updating the attributes\n      const propertyIdsForAttribute = ObservableMonitoring.getObservableMonitorIds(\n        true\n      );\n      // Store the mapping of the property ids\n      this.attributeToPropertyIds.set(attribute, propertyIdsForAttribute);\n\n      // If this is the active attribute, then we track the property id that modifies it\n      // for handling internal instance management.\n      if (attribute === this.layer.activeAttribute) {\n        this.activePropertyId = propertyIdsForAttribute[0];\n      }\n    });\n\n    // SUPER IMPORTANT to deactivate this here. Leaving this turned on causes memory to be chewed up\n    // for every property getter.\n    ObservableMonitoring.setObservableMonitor(false);\n    // This analyzes the properties and how they affect the attributes. It determines the smallest\n    // list possible of property ids needed to trigger an update on all of the attributes.\n    this.makeUpdateAllPropertyIdList();\n    // Do the first resize which creates the buffer and makes all of the initial buffer locations\n    const locationInfo = this.resizeBuffer();\n    // After all of the property id to attribute associations are made, we must break down the buffers\n    // into locations and then group those locations which will become our instance to buffer location\n    // slots\n    this.gatherLocationsIntoGroups(\n      locationInfo.newLocations,\n      locationInfo.growth\n    );\n    // After the first registration add, we gear shift to a more efficient add method.\n    this.add = this.doAdd;\n\n    // Perform the add after all of the registration process is complete\n    return this.doAdd(instance);\n  }\n\n  /**\n   * After the registration add happens, we gear shift over to this add method which will only pair instances\n   * with their appropriate buffer location.\n   */\n  private doAdd(instance: T) {\n    // Ensure we have buffer locations available\n    if (this.availableLocations.length <= 0) {\n      // Resice the buffer to accommodate more instances\n      const locationInfo = this.resizeBuffer();\n      // Break down the newly generated buffers into property groupings for the instances\n      this.gatherLocationsIntoGroups(\n        locationInfo.newLocations,\n        locationInfo.growth\n      );\n    }\n\n    // Get the next available location\n    const bufferLocations = this.availableLocations.shift();\n\n    // Pair up the instance with it's buffer location\n    if (bufferLocations && this.geometry) {\n      this.instanceToBufferLocation[instance.uid] = bufferLocations;\n      this.currentInstancedCount = this.geometry.maxInstancedCount = max(\n        this.currentInstancedCount,\n        // Instance index + 1 because the indices are zero indexed and the maxInstancedCount is a count value\n        bufferLocations.instanceIndex + 1\n      );\n      this.geometry.drawRange = {\n        count: this.currentInstancedCount * this.layer.instanceVertexCount,\n        start: 0\n      };\n    } else {\n      console.error(\n        \"Add Error: Instance Attribute Buffer Manager failed to pair an instance with a buffer location\"\n      );\n    }\n\n    return bufferLocations;\n  }\n\n  destroy() {\n    if (this.geometry) this.geometry.dispose();\n    if (this.material) this.material.dispose();\n\n    if (this.scene && this.scene.container && this.model) {\n      this.scene.container.remove(this.model);\n    }\n  }\n\n  /**\n   * This retireves the buffer locations associated with an instance, or returns nothing\n   * if the instance has not been associated yet.\n   */\n  getBufferLocations(instance: T) {\n    return this.instanceToBufferLocation[instance.uid];\n  }\n\n  /**\n   * This is the property id of the active attribute.\n   */\n  getActiveAttributePropertyId() {\n    return this.activePropertyId;\n  }\n\n  /**\n   * This is the bare minimum property ids that, when triggered for update, will update ALL of the attribute buffers\n   * for the managed layer.\n   */\n  getUpdateAllPropertyIdList() {\n    return this.updateAllPropertyIdList;\n  }\n\n  /**\n   * Analyzes the list of attributes to the property ids that affects them. This populates the list\n   * of minimal property ids needed to trigger updates on all of the attributes.\n   */\n  private makeUpdateAllPropertyIdList() {\n    // Make a deduping list of ids\n    const updateAllPropertyIdList: { [key: number]: number } = {};\n\n    // Get unique ids that will target all attributes\n    this.attributeToPropertyIds.forEach(ids => {\n      updateAllPropertyIdList[ids[0]] = ids[0];\n    });\n\n    // Store the list for the diffing process to utilize\n    this.updateAllPropertyIdList = Object.values(\n      updateAllPropertyIdList\n    ).filter(Boolean);\n  }\n\n  /**\n   * Disassociates an instance with a buffer\n   */\n  remove = (instance: T) => {\n    const location = this.instanceToBufferLocation[instance.uid];\n\n    if (location) {\n      delete this.instanceToBufferLocation[instance.uid];\n      this.availableLocations.push(location);\n    }\n\n    return instance;\n  };\n\n  /**\n   * Clears all elements of this manager from the current scene it was in.\n   */\n  removeFromScene() {\n    if (this.scene && this.scene.container && this.model) {\n      this.scene.container.remove(this.model);\n    }\n    this.pickModel && this.scene.pickingContainer.remove(this.pickModel);\n    delete this.scene;\n  }\n\n  /**\n   * This generates a new buffer of uniforms to associate instances with.\n   */\n  private resizeBuffer() {\n    let growth = 0;\n    // Each attribute will generate lists of new buffer locations after being created or expanded\n    const attributeToNewBufferLocations = new Map<\n      string,\n      IInstanceAttributeBufferLocation[]\n    >();\n\n    // If our geometry is not created yet, then it need be made\n    if (!this.geometry) {\n      // The buffer grows from 0 to our initial instance count\n      growth = this.maxInstancedCount;\n      // We generate a new geometry object for the buffer as the geometry\n      // Needs to have it's own unique draw range per buffer for optimal\n      // Performance.\n      this.geometry = new Three.InstancedBufferGeometry();\n\n      // The geometry needs the vertex information (which should be shared amongst all instances of the layer)\n      for (const attribute of this.layer.vertexAttributes) {\n        if (attribute.materialAttribute) {\n          this.geometry.addAttribute(\n            attribute.name,\n            attribute.materialAttribute\n          );\n        }\n      }\n\n      this.attributes = [];\n\n      // We now take the instance attributes and add them as Instanced Attributes to our geometry\n      for (const attribute of this.layer.instanceAttributes) {\n        // We start with enough data in the buffer to accommodate 1024 instances\n        const size: number = attribute.size || 0;\n        const buffer = new Float32Array(size * this.maxInstancedCount);\n        const bufferAttribute = new Three.InstancedBufferAttribute(\n          buffer,\n          size\n        );\n        bufferAttribute.setDynamic(true);\n        this.geometry.addAttribute(\n          instanceAttributeShaderName(attribute),\n          bufferAttribute\n        );\n        let newBufferLocations = attributeToNewBufferLocations.get(\n          attribute.name\n        );\n\n        if (!newBufferLocations) {\n          newBufferLocations = [];\n          attributeToNewBufferLocations.set(attribute.name, newBufferLocations);\n        }\n\n        const allLocations = this.allBufferLocations[attribute.name] || [];\n        this.allBufferLocations[attribute.name] = allLocations;\n\n        const internalAttribute: IInstanceAttributeInternal<T> = Object.assign(\n          {},\n          attribute,\n          { uid: uid(), bufferAttribute: bufferAttribute }\n        );\n\n        for (let i = 0; i < this.maxInstancedCount; ++i) {\n          const newLocation: IBufferLocation = {\n            attribute: internalAttribute,\n            buffer: {\n              value: buffer\n            },\n            instanceIndex: i,\n            range: [i * size, i * size + size]\n          };\n\n          newBufferLocations.push(newLocation);\n          allLocations.push(newLocation);\n        }\n\n        // Make an internal instance attribute for tracking\n        this.attributes.push(internalAttribute);\n      }\n\n      // Ensure the draw range covers every instance in the geometry.\n      this.geometry.maxInstancedCount = 0;\n      // This is the material that is generated for the layer that utilizes all of the generated and\n      // Injected shader IO and shader fragments\n      this.material = this.layer.material.clone();\n\n      // Grab the global uniforms from the material and add it to the uniform's materialUniform list so that\n      // We can keep uniforms consistent across all Instances\n      for (let i = 0, end = this.layer.uniforms.length; i < end; ++i) {\n        const uniform = this.layer.uniforms[i];\n        uniform.materialUniforms.push(this.material.uniforms[uniform.name]);\n      }\n    }\n\n    // If the geometry is already created, then we will expand each instanced attribute to the next growth\n    // level and generate the new buffer locations based on the expansion\n    else {\n      // Since were are resizing the buffer, let's destroy the old buffer and make one anew\n      this.geometry.dispose();\n      this.geometry = new Three.InstancedBufferGeometry();\n      const previousInstanceAmount = this.maxInstancedCount;\n\n      // The geometry needs the vertex information (which should be shared amongst all instances of the layer)\n      for (const attribute of this.layer.vertexAttributes) {\n        if (attribute.materialAttribute) {\n          this.geometry.addAttribute(\n            attribute.name,\n            attribute.materialAttribute\n          );\n        }\n      }\n\n      // We grow our buffer by magnitudes of 10 * 1024\n      // First growth: 1000\n      // Next: 10000\n      // Next: 10000\n      // Next: 10000\n      // Next: 10000\n      // We cap at growth of 1 million to prevent a mass unused RAM void.\n      this.growthCount = Math.min(1, this.growthCount + 1);\n      growth = Math.pow(10, this.growthCount) * 1000;\n      this.maxInstancedCount += growth;\n\n      // Ensure attributes is still defined\n      this.attributes = this.attributes || [];\n\n      for (const attribute of this.attributes) {\n        const bufferAttribute = attribute.bufferAttribute;\n        const size: number = attribute.size || 0;\n\n        if (bufferAttribute.array instanceof Float32Array) {\n          // Make a new buffer that is the proper size\n          const buffer: Float32Array = new Float32Array(\n            this.maxInstancedCount * size\n          );\n          // Retain all of the information in the previous buffer\n          buffer.set(bufferAttribute.array, 0);\n          // Make our new attribute based on the grown buffer\n          const newAttribute = new Three.InstancedBufferAttribute(buffer, size);\n          // Set the attribute to dynamic so we can update ranges within it\n          newAttribute.setDynamic(true);\n          // Make sure our attribute is updated with the newly made attribute\n          attribute.bufferAttribute = newAttribute;\n          // Add the new attribute to our new geometry object\n          this.geometry.addAttribute(\n            instanceAttributeShaderName(attribute),\n            newAttribute\n          );\n          // Get the temp storage for new buffer locations\n          let newBufferLocations = attributeToNewBufferLocations.get(\n            attribute.name\n          );\n\n          // Since we have a new buffer object we are working with, we must update all of the existing buffer\n          // locations to utilize this new buffer. The locations keep everything else the same, but the buffer\n          // object itself should be updated\n          const allLocations = this.allBufferLocations[attribute.name] || [];\n          this.allBufferLocations[attribute.name] = allLocations;\n\n          for (let k = 0, endk = allLocations.length; k < endk; ++k) {\n            allLocations[k].buffer.value = buffer;\n          }\n\n          if (!newBufferLocations) {\n            newBufferLocations = [];\n            attributeToNewBufferLocations.set(\n              attribute.name,\n              newBufferLocations\n            );\n          }\n\n          for (\n            let i = previousInstanceAmount, end = this.maxInstancedCount;\n            i < end;\n            ++i\n          ) {\n            const newLocation: IBufferLocation = {\n              attribute,\n              buffer: {\n                value: buffer\n              },\n              instanceIndex: i,\n              range: [i * size, i * size + size]\n            };\n\n            newBufferLocations.push(newLocation);\n            allLocations.push(newLocation);\n          }\n        }\n      }\n\n      if (this.scene.container && this.model) {\n        this.scene.container.remove(this.model);\n      }\n    }\n\n    if (this.scene && this.model && this.scene.container) {\n      this.scene.container.remove(this.model);\n    }\n\n    if (this.scene && this.scene.pickingContainer && this.pickModel) {\n      this.scene.pickingContainer.remove(this.pickModel);\n    }\n\n    // Ensure material is defined\n    this.material = this.material || this.layer.material.clone();\n    // Remake the model with the generated geometry\n    this.model = generateLayerModel(this.layer, this.geometry, this.material);\n    // We render junkloads of instances for a given buffer. Culling will have to happen\n    // On an instance level.\n    this.model.frustumCulled = false;\n    // Make a picking model if we need it so we can render the model with a different uniform set\n    // for the picking procedure.\n    this.pickModel =\n      this.layer.picking.type === PickType.SINGLE\n        ? this.model.clone()\n        : undefined;\n\n    // Now that we are ready to utilize the buffer, let's add it to the scene so it may be rendered.\n    // Each new buffer equates to one draw call.\n    if (this.scene && this.scene.container) {\n      this.scene.container.add(this.model);\n\n      if (this.pickModel) {\n        this.scene.pickingContainer.add(this.pickModel);\n      }\n    }\n\n    return {\n      growth,\n      newLocations: attributeToNewBufferLocations\n    };\n  }\n\n  /**\n   * This takes newly created buffer locations and groups them by the property ids identified by the\n   * registration phase.\n   */\n  private gatherLocationsIntoGroups(\n    attributeToNewBufferLocations: Map<\n      string,\n      IInstanceAttributeBufferLocation[]\n    >,\n    totalNewInstances: number\n  ) {\n    if (this.attributeToPropertyIds.size === 0) return;\n\n    // Optimize inner loops by pre-fetching lookups by names\n    const attributesBufferLocations: {\n      attribute: IInstanceAttribute<T>;\n      bufferLocationsForAttribute: IInstanceAttributeBufferLocation[];\n      childBufferLocations: IInstanceAttributeBufferLocation[][];\n      ids: number[];\n    }[] = [];\n\n    this.attributeToPropertyIds.forEach((ids, attribute) => {\n      attributesBufferLocations.push({\n        attribute,\n        bufferLocationsForAttribute:\n          attributeToNewBufferLocations.get(attribute.name) || [],\n        childBufferLocations: (attribute.childAttributes || []).map(\n          attr => attributeToNewBufferLocations.get(attr.name) || []\n        ),\n        ids\n      });\n    });\n\n    // Loop through all of the new instances available and gather all of the buffer locations\n    for (let i = 0; i < totalNewInstances; ++i) {\n      const group: IInstanceAttributeBufferLocationGroup = {\n        instanceIndex: -1,\n        propertyToBufferLocation: {}\n      };\n\n      // Loop through all of the property ids that affect specific attributes. Each of these ids\n      // needs an association with the buffer location they modify.\n      for (let j = 0, endj = attributesBufferLocations.length; j < endj; ++j) {\n        const allLocations = attributesBufferLocations[j];\n        const attribute = allLocations.attribute;\n        const ids = allLocations.ids;\n        const bufferLocationsForAttribute =\n          allLocations.bufferLocationsForAttribute;\n\n        if (!bufferLocationsForAttribute) {\n          emitOnce(\n            \"Instance Attribute Buffer Error\",\n            (count: number, id: string) => {\n              console.warn(\n                `${id}: There is an error in forming buffer location groups in InstanceAttributeBufferManager. Error count: ${count}`\n              );\n            }\n          );\n          continue;\n        }\n\n        const bufferLocation = bufferLocationsForAttribute.shift();\n\n        if (!bufferLocation) {\n          emitOnce(\n            \"Instance Attribute Buffer Error\",\n            (count: number, id: string) => {\n              console.warn(\n                `${id}: There is an error in forming buffer location groups in InstanceAttributeBufferManager. Error count: ${count}`\n              );\n            }\n          );\n          continue;\n        }\n\n        if (group.instanceIndex === -1) {\n          group.instanceIndex = bufferLocation.instanceIndex;\n        } else if (bufferLocation.instanceIndex !== group.instanceIndex) {\n          emitOnce(\n            \"Instance Attribute Parallelism Error\",\n            (count: number, id: string) => {\n              console.warn(\n                `${id}: A buffer location does not have a matching instance index which means the buffer locations are not in parallel with each other somehow. Error count: ${count}`\n              );\n              console.warn(attribute.name, bufferLocation);\n            }\n          );\n          continue;\n        }\n\n        // If the attribute has children attributes. Then when the attribute is updated, the child attributes should\n        // be updated as well. Thus the buffer location needs the child attribute buffer locations.\n        if (attribute.childAttributes) {\n          const childLocations = [];\n\n          for (\n            let k = 0, endk = attribute.childAttributes.length;\n            k < endk;\n            ++k\n          ) {\n            const childAttribute = attribute.childAttributes[k];\n            const bufferLocationsForChildAttribute =\n              allLocations.childBufferLocations[k];\n\n            if (bufferLocationsForChildAttribute) {\n              const childBufferLocation = bufferLocationsForChildAttribute.shift();\n              if (childBufferLocation) {\n                childLocations.push(childBufferLocation);\n              } else {\n                emitOnce(\n                  \"Instance Attribute Child Attribute Error\",\n                  (count: number, id: string) => {\n                    console.warn(\n                      `${id}: A child attribute does not have a buffer location available. Error count: ${count}`\n                    );\n                    console.warn(\n                      `Parent Attribute: ${attribute.name} Child Attribute: ${\n                        childAttribute.name\n                      }`\n                    );\n                  }\n                );\n              }\n            }\n          }\n\n          bufferLocation.childLocations = childLocations;\n        }\n\n        // In the group, associate the property ids that affect a buffer location WITH the buffer location they affect\n        for (let k = 0, endk = ids.length; k < endk; ++k) {\n          const id = ids[k];\n          group.propertyToBufferLocation[id] = bufferLocation;\n        }\n      }\n\n      // Store this group as a group that is ready to be associated with an instance\n      this.availableLocations.push(group);\n    }\n\n    // This helps ensure errors get reported in a timely fashion in case this triggers some massive looping\n    flushEmitOnce();\n  }\n\n  /**\n   * Returns the total instances this buffer manages.\n   */\n  getInstanceCount() {\n    return this.maxInstancedCount;\n  }\n}\n","export * from \"./buffer-manager-base\";\nexport * from \"./instance-attribute-buffer-manager\";\nexport * from \"./uniform-buffer-manager\";\n","import { Instance } from \"../../instance-provider/instance\";\nimport {\n  IInstanceAttribute,\n  INonePickingMetrics,\n  IQuadTreePickingMetrics,\n  ISinglePickingMetrics,\n  PickType\n} from \"../../types\";\nimport { LayerBufferType } from \"../layer-processing/layer-buffer-type\";\nimport { AtlasResourceManager } from \"../texture/atlas-resource-manager\";\nimport { BufferManagerBase, IBufferLocation } from \"./buffer-manager-base\";\nimport { IBufferLocationGroup } from \"./buffer-manager-base\";\nimport { BaseDiffProcessor } from \"./diff-processors/base-diff-processor\";\nimport { InstanceAttributeColorDiffProcessor } from \"./diff-processors/instance-attribute-color-diff-processor\";\nimport { InstanceAttributeDiffProcessor } from \"./diff-processors/instance-attribute-diff-processor\";\nimport { InstanceAttributeQuadDiffProcessor } from \"./diff-processors/instance-attribute-quad-diff-processor\";\nimport { UniformColorDiffProcessor } from \"./diff-processors/uniform-color-diff-processor\";\nimport { UniformDiffProcessor } from \"./diff-processors/uniform-diff-processor\";\nimport { UniformQuadDiffProcessor } from \"./diff-processors/uniform-quad-diff-processor\";\n\n/** Signature of a method that handles a diff */\nexport type DiffHandler<T extends Instance> = (\n  manager: BaseDiffProcessor<T>,\n  instance: T,\n  propIds: number[],\n  bufferLocations?: IBufferLocation | IBufferLocationGroup<IBufferLocation>\n) => void;\n/** A set of diff handling methods in this order [change, add, remove] */\nexport type DiffLookup<T extends Instance> = DiffHandler<T>[];\n\n/**\n * This interface is the bare minimum properties needed for this diff manager to map instance updates to\n * uniform changes. We don't use a Layer as a target explicitly to avoid circular/hard dependencies\n */\nexport interface IInstanceDiffManagerTarget<T extends Instance> {\n  /** This is the attribute for the target that represents the _active injected value */\n  activeAttribute: IInstanceAttribute<T>;\n  /** This is all of the instance attributes applied to the target */\n  instanceAttributes: IInstanceAttribute<T>[];\n  /** This is the picking metrics for how Instances are picked with the mouse */\n  picking:\n    | IQuadTreePickingMetrics<T>\n    | ISinglePickingMetrics<T>\n    | INonePickingMetrics;\n  /** This is the resource manager for the target which let's us fetch information from an atlas for an instance */\n  resource: AtlasResourceManager;\n  /** This is the manager that links an instance to it's uniform cluster for populating the uniform buffer */\n  bufferManager: BufferManagerBase<T, IBufferLocation>;\n  /** This is the buffering strategy being used */\n  bufferType: LayerBufferType;\n}\n\n/**\n * This class manages the process of taking the diffs of a layer and executing methods on those diffs to perform\n * updates to the uniforms that control those instances.\n */\nexport class InstanceDiffManager<T extends Instance> {\n  bufferManager: BufferManagerBase<T, IBufferLocation>;\n  processor: BaseDiffProcessor<T>;\n  processing: DiffLookup<T>;\n  layer: IInstanceDiffManagerTarget<T>;\n\n  constructor(\n    layer: IInstanceDiffManagerTarget<T>,\n    bufferManager: BufferManagerBase<T, IBufferLocation>\n  ) {\n    this.layer = layer;\n    this.bufferManager = bufferManager;\n  }\n\n  /**\n   * This returns the proper diff processor for handling diffs\n   */\n  makeProcessor(): DiffLookup<T> {\n    // If this manager has already figured out which processor to use. Just return that processor.\n    if (this.processing) return this.processing;\n\n    if (this.layer.bufferType === LayerBufferType.INSTANCE_ATTRIBUTE) {\n      // Now we look at the state of the layer to determine the best diff processor strategy\n      if (this.layer.picking) {\n        if (this.layer.picking.type === PickType.SINGLE) {\n          this.processor = new InstanceAttributeColorDiffProcessor(\n            this.layer,\n            this.bufferManager\n          );\n        } else if (this.layer.picking.type === PickType.ALL) {\n          this.processor = new InstanceAttributeQuadDiffProcessor(\n            this.layer,\n            this.bufferManager\n          );\n        }\n      }\n\n      if (!this.processor) {\n        this.processor = new InstanceAttributeDiffProcessor(\n          this.layer,\n          this.bufferManager\n        );\n      }\n    } else {\n      // Now we look at the state of the layer to determine the best diff processor strategy\n      if (this.layer.picking) {\n        if (this.layer.picking.type === PickType.ALL) {\n          this.processor = new UniformQuadDiffProcessor(\n            this.layer,\n            this.bufferManager\n          );\n        } else if (this.layer.picking.type === PickType.SINGLE) {\n          this.processor = new UniformColorDiffProcessor(\n            this.layer,\n            this.bufferManager\n          );\n        }\n      }\n\n      if (!this.processor) {\n        this.processor = new UniformDiffProcessor(\n          this.layer,\n          this.bufferManager\n        );\n      }\n    }\n\n    this.processing = [\n      this.processor.changeInstance,\n      this.processor.addInstance,\n      this.processor.removeInstance\n    ];\n\n    return this.processing;\n  }\n}\n","import { InstanceDiffType } from \"../types\";\nimport { Instance } from \"./instance\";\n\n/**\n * This is an entry within the change list of the provider. It represents the type of change\n * and stores the property id's of the properties on the instance that have changed.\n */\nexport type InstanceDiff<T extends Instance> = [\n  T,\n  InstanceDiffType,\n  { [key: number]: number }\n];\n\n/**\n * This is an optimized provider, that can provide instances that use the internal observable system\n * to deliver updates to the framework.\n */\nexport class InstanceProvider<T extends Instance> {\n  /** Stores the disposers that are called when the instance is no longer listened to */\n  private cleanObservation: { [key: number]: [T, Function] } = {};\n  /** This stores the changes to the instances themselves */\n  private instanceChanges = new Map<number, InstanceDiff<T>>();\n  /** This flag is true when resolving changes when the change list is retrieved. it blocks changes until the current list is resolved */\n  private allowChanges = true;\n\n  /**\n   * Retrieve all of the changes applied to instances\n   */\n  get changeList(): InstanceDiff<T>[] {\n    this.allowChanges = false;\n    const changes = Array.from(this.instanceChanges.values());\n\n    return changes;\n  }\n\n  /**\n   * Adds an instance to the provider which will stream observable changes of the instance to\n   * the framework.\n   */\n  add(instance: T) {\n    // No need to duplicate the addition\n    if (this.cleanObservation[instance.uid]) {\n      return instance;\n    }\n\n    if (this.allowChanges) {\n      instance.observer = this;\n      const disposer: Function = instance.observableDisposer;\n      // Store the disposers so we can clean up the observable properties\n      this.cleanObservation[instance.uid] = [instance, disposer];\n      // Indicate we have a new instance\n      this.instanceChanges.set(instance.uid, [\n        instance,\n        InstanceDiffType.INSERT,\n        instance.changes\n      ]);\n    }\n\n    return instance;\n  }\n\n  /**\n   * Removes all instances from this provider\n   */\n  clear() {\n    const values = Object.values(this.cleanObservation);\n\n    for (let i = 0, end = values.length; i < end; ++i) {\n      this.remove(values[i][0]);\n    }\n  }\n\n  /**\n   * Clear all resources held by this provider. It IS valid to lose reference to all instances\n   * and to this object, which would effectively cause this object to get GC'ed. But if you\n   * desire to hang onto the instance objects, then this should be called.\n   */\n  destroy() {\n    const values = Object.values(this.cleanObservation);\n\n    for (let i = 0, end = values.length; i < end; ++i) {\n      values[i][1]();\n    }\n\n    this.cleanObservation = {};\n    this.instanceChanges.clear();\n  }\n\n  /**\n   * This is called from observables to indicate it's parent has been updated\n   */\n  instanceUpdated(instance: T) {\n    if (this.allowChanges) {\n      // Flag the instance as having a property changed\n      this.instanceChanges.set(instance.uid, [\n        instance,\n        InstanceDiffType.CHANGE,\n        instance.changes\n      ]);\n    }\n  }\n\n  /**\n   * Removes the instance from being advertised changes and from providing the changes\n   * for the instance.\n   */\n  remove(instance: T) {\n    if (this.allowChanges) {\n      const disposer = this.cleanObservation[instance.uid];\n\n      if (disposer) {\n        disposer[1]();\n        delete this.cleanObservation[instance.uid];\n        this.instanceChanges.set(instance.uid, [\n          instance,\n          InstanceDiffType.REMOVE,\n          {}\n        ]);\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Flagged all changes as dealt with\n   */\n  resolve() {\n    this.allowChanges = true;\n    this.instanceChanges.clear();\n  }\n}\n","import * as Three from \"three\";\nimport { InstanceProvider } from \"../../instance-provider\";\nimport { ILayerProps, IModelType, Layer } from \"../../surface/layer\";\nimport {\n  IMaterialOptions,\n  InstanceAttributeSize,\n  IShaderInitialization,\n  UniformSize,\n  VertexAttributeSize\n} from \"../../types\";\nimport { CommonMaterialOptions, IAutoEasingMethod, Vec } from \"../../util\";\nimport { ArcInstance } from \"./arc-instance\";\n\nexport enum ArcScaleType {\n  /** All dimensions are within world space */\n  NONE,\n  /**\n   * The thickness of the arc is in screen space. Thus, camera zoom changes will not affect it and\n   * must be controlled by scaleFactor alone.\n   */\n  SCREEN_CURVE\n}\n\nexport interface IArcLayerProps<T extends ArcInstance> extends ILayerProps<T> {\n  scaleType?: ArcScaleType;\n  animate?: {\n    angle?: IAutoEasingMethod<Vec>;\n    center?: IAutoEasingMethod<Vec>;\n    colorEnd?: IAutoEasingMethod<Vec>;\n    colorStart?: IAutoEasingMethod<Vec>;\n    radius?: IAutoEasingMethod<Vec>;\n    thickness?: IAutoEasingMethod<Vec>;\n  };\n}\n\n/**\n * This layer displays Arcs and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nexport class ArcLayer<\n  T extends ArcInstance,\n  U extends IArcLayerProps<T>\n> extends Layer<T, U> {\n  static defaultProps: IArcLayerProps<ArcInstance> = {\n    data: new InstanceProvider<ArcInstance>(),\n    key: \"\",\n    scaleType: ArcScaleType.NONE\n  };\n\n  /**\n   * Define our shader and it's inputs\n   */\n  initShader(): IShaderInitialization<ArcInstance> {\n    const { scaleType } = this.props;\n    const animations = this.props.animate || {};\n    const {\n      angle: animateAngle,\n      center: animateCenter,\n      radius: animateRadius,\n      thickness: animateThickness,\n      colorStart: animateColorStart,\n      colorEnd: animateColorEnd\n    } = animations;\n\n    const MAX_SEGMENTS = 150;\n\n    // Calculate the normals and interpolations for our vertices\n    const vertexToNormal: { [key: number]: number } = {\n      0: 1,\n      [MAX_SEGMENTS * 2 + 2]: -1\n    };\n\n    const vertexInterpolation: { [key: number]: number } = {\n      0: 0,\n      [MAX_SEGMENTS * 2 + 2]: 1\n    };\n\n    let sign = 1;\n    for (let i = 0; i < MAX_SEGMENTS * 2; ++i) {\n      vertexToNormal[i + 1] = sign;\n      vertexInterpolation[i + 1] = Math.floor(i / 2) / (MAX_SEGMENTS - 1);\n      sign *= -1;\n    }\n\n    const vs =\n      scaleType === ArcScaleType.NONE\n        ? require(\"./arc-layer.vs\")\n        : require(\"./arc-layer-screen-space.vs\");\n\n    return {\n      fs: require(\"./arc-layer.fs\"),\n      instanceAttributes: [\n        {\n          easing: animateCenter,\n          name: \"center\",\n          size: InstanceAttributeSize.TWO,\n          update: o => o.center\n        },\n        {\n          easing: animateRadius,\n          name: \"radius\",\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.radius]\n        },\n        {\n          name: \"depth\",\n          size: InstanceAttributeSize.ONE,\n          update: o => [o.depth]\n        },\n        {\n          easing: animateThickness,\n          name: \"thickness\",\n          size: InstanceAttributeSize.TWO,\n          update: o => o.thickness\n        },\n        {\n          easing: animateAngle,\n          name: \"angle\",\n          size: InstanceAttributeSize.TWO,\n          update: o => o.angle\n        },\n        {\n          easing: animateColorStart,\n          name: \"colorStart\",\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.colorStart\n        },\n        {\n          easing: animateColorEnd,\n          name: \"colorEnd\",\n          size: InstanceAttributeSize.FOUR,\n          update: o => o.colorEnd\n        }\n      ],\n      uniforms: [\n        {\n          name: \"scaleFactor\",\n          size: UniformSize.ONE,\n          update: _u => [1]\n        }\n      ],\n      vertexAttributes: [\n        // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n        // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n        // Zero against your wishes.\n        {\n          name: \"position\",\n          size: VertexAttributeSize.THREE,\n          update: (vertex: number) => [\n            // Normal\n            vertexToNormal[vertex],\n            // The side of the quad\n            vertexInterpolation[vertex],\n            // The number of vertices\n            MAX_SEGMENTS * 2\n          ]\n        }\n      ],\n      vertexCount: MAX_SEGMENTS * 2 + 2,\n      vs\n    };\n  }\n\n  getModelType(): IModelType {\n    return {\n      drawMode: Three.TriangleStripDrawMode,\n      modelType: Three.Mesh\n    };\n  }\n\n  getMaterialOptions(): IMaterialOptions {\n    return Object.assign({}, CommonMaterialOptions.transparentShape, {\n      side: Three.DoubleSide\n    } as IMaterialOptions);\n  }\n}\n","export * from \"./arc-layer\";\nexport * from \"./arc-instance\";\n","export * from \"./arcs\";\nexport * from \"./circles\";\nexport * from \"./edges\";\nexport * from \"./images\";\nexport * from \"./labels\";\nexport * from \"./rectangle\";\nexport * from \"./rings\";\nexport * from \"./types\";\n","import { Instance } from \"../instance-provider/instance\";\nimport { Bounds } from \"../primitives/bounds\";\nimport { IPoint } from \"../primitives/point\";\n\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nconst maxPopulation: number = 5;\nconst maxDepth: number = 10;\n\nexport type BoundsAccessor<T extends Instance> = (o: T) => Bounds | null;\n\n/**\n * Allows typing of a callback argument\n */\nexport interface IVisitFunction<T extends Instance> {\n  /**\n   * A callback to use during add or query\n   *\n   * Called do provide aggregation or filtering like Array.reduce or\n   * Array.filter, but in a QuadTree instead.\n   *\n   * @param node  The node to effect the function upon\n   * @param child The child to add to the node\n   */\n  (node: Node<T>, child?: Bounds): void;\n}\n\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n */\nexport class Quadrants<T extends Instance> {\n  TL: Node<T>;\n  TR: Node<T>;\n  BL: Node<T>;\n  BR: Node<T>;\n\n  /**\n   * Ensures all memory is released for all nodes and all references are removed\n   * to potentially high memory consumption items\n   */\n  destroy() {\n    this.TL.destroy();\n    this.TR.destroy();\n    this.BL.destroy();\n    this.BR.destroy();\n    delete this.TL;\n    delete this.TR;\n    delete this.BL;\n    delete this.BR;\n  }\n\n  /**\n   * Creates an instance of Quadrants.\n   *\n   * @param bounds The bounds this will create quandrants for\n   * @param depth  The child depth of this element\n   */\n  constructor(\n    bounds: Bounds,\n    depth: number,\n    getBounds: BoundsAccessor<T>,\n    childToNode: Map<T, Node<T>>,\n    childToBounds: Map<T, Bounds | null>\n  ) {\n    const mid = bounds.mid;\n    this.TL = new Node<T>(bounds.x, mid.x, bounds.y, mid.y, getBounds, depth);\n    this.TR = new Node<T>(\n      mid.x,\n      bounds.right,\n      bounds.y,\n      mid.y,\n      getBounds,\n      depth\n    );\n    this.BL = new Node<T>(\n      bounds.x,\n      mid.x,\n      mid.y,\n      bounds.bottom,\n      getBounds,\n      depth\n    );\n    this.BR = new Node<T>(\n      mid.x,\n      bounds.right,\n      mid.y,\n      bounds.bottom,\n      getBounds,\n      depth\n    );\n    this.TL.childToNode = childToNode;\n    this.TR.childToNode = childToNode;\n    this.BL.childToNode = childToNode;\n    this.BR.childToNode = childToNode;\n    this.TL.childToBounds = childToBounds;\n    this.TR.childToBounds = childToBounds;\n    this.BL.childToBounds = childToBounds;\n    this.BR.childToBounds = childToBounds;\n  }\n}\n\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n */\nexport class Node<T extends Instance> {\n  /** This is the amount of space this node covers */\n  bounds: Bounds;\n  /** These are the child Instances of the node. */\n  children: T[] = [];\n  /**\n   * This tracks a quick lookup of a child to it's parent node. This is used so the child can\n   * be removed with ease and not require a traversal of the tree.\n   */\n  childToNode: Map<T, Node<T>>;\n  /** This tracks the bounds calcuated for the given instance */\n  childToBounds: Map<T, Bounds | null>;\n  /** This is how deep the node is within the tree */\n  depth: number = 0;\n  /** This is the accessor method that retrieves the bounds for an injected instance */\n  getBounds: BoundsAccessor<T>;\n  /** These are the child nodes of this quad node when this node is split. It is null if the node is not split yet */\n  nodes: Quadrants<T> | null = null;\n  /**\n   * These are children with null bounds that do not affect the splitting and ALWAYS get checked every query.\n   * They should only reside on the top node.\n   */\n  nullBounded: T[];\n\n  /**\n   * Destroys this node and ensures all child nodes are destroyed as well.\n   */\n  destroy() {\n    delete this.children;\n    delete this.bounds;\n\n    if (this.nodes) {\n      this.nodes.destroy();\n      this.nodes = null;\n    }\n  }\n\n  /**\n   * Creates an instance of Node.\n   */\n  constructor(\n    left: number,\n    right: number,\n    top: number,\n    bottom: number,\n    getBounds: BoundsAccessor<T>,\n    depth: number = 0\n  ) {\n    // If params insertted\n    if (arguments.length >= 4) {\n      this.bounds = new Bounds({ left, right, top, bottom });\n    } else {\n      // Otherwise, make tiny start area\n      this.bounds = new Bounds({ left: 0, right: 1, top: 1, bottom: 0 });\n    }\n\n    // Ensure the depth is set\n    this.depth = depth;\n    // Apply the bounds accessor method for instances\n    this.getBounds = getBounds;\n\n    // If this is the top level node, we need to instantiate the lookup that will be used\n    // Across all nodes.\n    if (this.depth === 0) {\n      this.nullBounded = [];\n      this.childToNode = new Map<T, Node<T>>();\n      this.childToBounds = new Map<T, Bounds>();\n    }\n  }\n\n  /**\n   * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n   * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n   * this quad tree spans (and this is the root node), the quad tree will expand to include\n   * the new child.\n   *\n   * @param child The Bounds type object to inject\n   * @param props Properties that can be retrieved with the child object if applicable\n   *\n   * @returns True if the insertion was successful\n   */\n  add(child: T): boolean {\n    let bounds = this.childToBounds.get(child);\n\n    if (!bounds) {\n      // First we access the bounds of the child and store it\n      bounds = this.getBounds(child);\n      this.childToBounds.set(child, bounds);\n    }\n\n    // This is the entry function for adding children, so we must first expand our top node\n    // To cover the area that the child is located.\n    // If we're in bounds, then let's just add the child\n    if (!bounds || bounds.isInside(this.bounds)) {\n      return this.doAdd(child, bounds);\n    } else {\n      // Otherwise, we need to expand first\n      this.cover(bounds);\n      return this.add(child);\n    }\n  }\n\n  /**\n   * Adds a list of new children to this quad tree. It performs the same operations as\n   * addChild for each child in the list, however, it more efficiently recalculates the\n   * bounds necessary to cover the area the children cover.\n   *\n   * @param children      List of Bounds objects to inject\n   */\n  addAll(children: T[]) {\n    // Make sure we cover the entire area of all the children.\n    // We can speed this up a lot if we first calculate the total bounds the new children covers\n    let minX = Number.MAX_VALUE;\n    let minY = Number.MAX_VALUE;\n    let maxX = -Number.MAX_VALUE;\n    let maxY = -Number.MAX_VALUE;\n\n    // Get the dimensions of the new bounds\n    children.forEach(child => {\n      const bounds = this.getBounds(child);\n      this.childToBounds.set(child, bounds);\n      if (!bounds) return;\n\n      if (bounds.x < minX) {\n        minX = bounds.x;\n      }\n      if (bounds.right > maxX) {\n        maxX = bounds.right;\n      }\n      if (bounds.bottom > maxY) {\n        maxY = bounds.bottom;\n      }\n      if (bounds.y < minY) {\n        minY = bounds.y;\n      }\n    });\n\n    // Ensure a valid cover dimension was established. If no valid dimension is established\n    // Then we don't cover, but we can still add the children as that have null Bounds which\n    // Means injecting at the top level.\n    if (\n      minX !== Number.MAX_VALUE &&\n      minY !== Number.MAX_VALUE &&\n      maxX !== -Number.MAX_VALUE &&\n      maxY !== -Number.MAX_VALUE\n    ) {\n      // Make sure our bounds includes the specified bounds\n      this.cover(\n        new Bounds({ left: minX, right: maxX, bottom: maxY, top: minY })\n      );\n    }\n\n    // Add all of the children into the tree.\n    children.forEach(child =>\n      this.doAdd(child, this.childToBounds.get(child) || null, true)\n    );\n  }\n\n  /**\n   * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n   * This will cause all children to be re-injected into the tree.\n   *\n   * @param bounds The bounds to include in the tree's coverage\n   */\n  cover(bounds: Bounds) {\n    // If we are already covering the area: abort\n    if (bounds.isInside(this.bounds)) {\n      return;\n    }\n\n    // Make our bounds cover the new area\n    this.bounds.encapsulate(bounds);\n    this.bounds.x -= 1;\n    this.bounds.y -= 1;\n    this.bounds.width += 2;\n    this.bounds.height += 2;\n    // Get all of the children underneath this node\n    const allChildren = this.gatherChildren([]);\n    this.children = [];\n\n    // Destroy the split nodes\n    if (this.nodes) {\n      // Completely...destroy...\n      this.nodes.destroy();\n      this.nodes = null;\n    }\n\n    // Clear out the child to node relations\n    this.childToNode.clear();\n    // Reinsert all children with the new dimensions in place\n    allChildren.forEach(child =>\n      this.doAdd(child, this.childToBounds.get(child) || null)\n    );\n  }\n\n  /**\n   * When adding children, this performs the actual action of injecting the child into the tree\n   * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n   *\n   * @param child The Bounds item to inject into the tree\n   * @param props The props to remain associated with the child\n   *\n   * @returns True if the injection was successful\n   */\n  private doAdd(child: T, bounds: Bounds | null, fromSplit?: boolean): boolean {\n    // If this is the top level node and the bounds are null, then we add to the null list\n    if (!bounds && this.depth === 0) {\n      this.nullBounded.push(child);\n      this.childToNode.set(child, this);\n\n      return true;\n    }\n\n    // If no bounds is available at this point, something went terribly wrong\n    if (!bounds) {\n      console.warn(\n        \"A null bounds was added to a Quad Tree node below the top node, which is invalid.\"\n      );\n      return false;\n    }\n\n    // If bounds are null, then just immediately add\n    // If nodes are present, then we have already exceeded the population of this node\n    if (this.nodes) {\n      if (bounds.isInside(this.nodes.TL.bounds)) {\n        return this.nodes.TL.doAdd(child, bounds, fromSplit);\n      }\n\n      if (bounds.isInside(this.nodes.TR.bounds)) {\n        return this.nodes.TR.doAdd(child, bounds, fromSplit);\n      }\n\n      if (bounds.isInside(this.nodes.BL.bounds)) {\n        return this.nodes.BL.doAdd(child, bounds, fromSplit);\n      }\n\n      if (bounds.isInside(this.nodes.BR.bounds)) {\n        return this.nodes.BR.doAdd(child, bounds, fromSplit);\n      }\n\n      // Otherwise, this is a child overlapping this border\n      this.children.push(child);\n      this.childToNode.set(child, this);\n\n      return true;\n    } else if (bounds.isInside(this.bounds)) {\n      // Otherwise, we have not had a split due to population limits being exceeded\n      this.children.push(child);\n      this.childToNode.set(child, this);\n\n      // If we exceeded our population for this quadrant, it is time to split up\n      if (this.children.length > maxPopulation && this.depth < maxDepth) {\n        this.split();\n      }\n\n      return true;\n    }\n\n    // This is when there is something wrong with the insertted child. The bounds\n    // For the quad should have grown without issue, but in this case the bounds\n    // Could not grow to accomodate the child.\n    if (isNaN(bounds.width + bounds.height + bounds.x + bounds.y)) {\n      console.error(\n        \"Child did not fit into bounds because a dimension is NaN\",\n        child,\n        bounds\n      );\n    } else if (bounds.area === 0) {\n      console.error(\n        \"Child did not fit into bounds because the area is zero\",\n        child,\n        bounds\n      );\n    } else {\n      console.error(\n        \"Child did not get insertted.\",\n        \"Parent:\",\n        this.bounds.toString(),\n        \"Child:\",\n        bounds.toString(),\n        \"Inside Checks:\",\n        bounds.x >= this.bounds.x,\n        bounds.right <= this.bounds.right,\n        bounds.y >= this.bounds.y,\n        bounds.bottom <= this.bounds.bottom\n      );\n    }\n\n    // Don't insert the child and continue\n    return true;\n  }\n\n  private doRemove(child: T) {\n    const index = this.children.indexOf(child);\n\n    if (index > -1) {\n      this.children.splice(index, 1);\n      this.childToNode.delete(child);\n      this.childToBounds.delete(child);\n    }\n  }\n\n  /**\n   * Collects all children of all the current and sub nodes into a single list.\n   *\n   * @param list The list we must aggregate children into\n   *\n   * @return The list specified as the list parameter\n   */\n  gatherChildren(list: T[]): T[] {\n    this.children.forEach(child => list.push(child));\n\n    if (this.nodes) {\n      this.nodes.TL.gatherChildren(list);\n      this.nodes.TR.gatherChildren(list);\n      this.nodes.BL.gatherChildren(list);\n      this.nodes.BR.gatherChildren(list);\n    }\n\n    return list;\n  }\n\n  /**\n   * Entry query for determining query type based on input object\n   *\n   * @param bounds Can be a Bounds or a Point object\n   * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n   *               information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return An array of children that intersects with the query\n   */\n  query(bounds: Bounds | IPoint, visit?: IVisitFunction<T>): T[] {\n    // This stores all of the found Instances when querying by bounds or point\n    let found: T[] = [];\n\n    // If this is the top level node then add in the null bunded items as the start\n    if (this.depth === 0) {\n      found = this.nullBounded.slice(0);\n    }\n\n    // Query a rectangle\n    if (bounds instanceof Bounds) {\n      if (bounds.hitBounds(this.bounds)) {\n        return this.queryBounds(bounds, found, visit);\n      }\n    }\n\n    // Query a point\n    if (this.bounds.containsPoint(bounds)) {\n      return this.queryPoint(bounds, found, visit);\n    }\n\n    // Return an empty array when nothing is collided with\n    return found;\n  }\n\n  /**\n   * Queries children for intersection with a bounds object\n   *\n   * @param b     The Bounds to test children against\n   * @param list  The list of children to aggregate into the query\n   * @param visit A callback function that will receive the Node as it is analyzed. This gives\n   *              information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return     Returns the exact same list that was input as the list param\n   */\n  queryBounds(b: Bounds, list: T[], visit?: IVisitFunction<T>): T[] {\n    this.children.forEach(c => {\n      const bounds = this.childToBounds.get(c);\n\n      if (bounds && bounds.hitBounds(b)) {\n        list.push(c);\n      }\n    });\n\n    if (visit) {\n      visit(this);\n    }\n\n    if (this.nodes) {\n      if (b.hitBounds(this.nodes.TL.bounds)) {\n        this.nodes.TL.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.TR.bounds)) {\n        this.nodes.TR.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.BL.bounds)) {\n        this.nodes.BL.queryBounds(b, list, visit);\n      }\n\n      if (b.hitBounds(this.nodes.BR.bounds)) {\n        this.nodes.BR.queryBounds(b, list, visit);\n      }\n    }\n\n    return list;\n  }\n\n  /**\n   * Queries children for intersection with a point\n   *\n   * @param p     The Point to test children against\n   * @param list  The list of children to aggregate into the query\n   * @param visit A callback function that will receive the Node as it is analyzed. This gives\n   *              information on a spatial scale, how a query reaches it's target intersections.\n   *\n   * @return      Returns the exact same list that was input as the list param\n   */\n  queryPoint(p: any, list: T[], visit?: IVisitFunction<T>): T[] {\n    this.children.forEach(c => {\n      const bounds = this.childToBounds.get(c);\n\n      if (bounds && bounds.containsPoint(p)) {\n        list.push(c);\n      }\n    });\n\n    if (visit) {\n      visit(this);\n    }\n\n    if (this.nodes) {\n      if (this.nodes.TL.bounds.containsPoint(p)) {\n        this.nodes.TL.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.TR.bounds.containsPoint(p)) {\n        this.nodes.TR.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.BL.bounds.containsPoint(p)) {\n        this.nodes.BL.queryPoint(p, list, visit);\n      }\n\n      if (this.nodes.BR.bounds.containsPoint(p)) {\n        this.nodes.BR.queryPoint(p, list, visit);\n      }\n    }\n\n    return list;\n  }\n\n  /**\n   * Remove the provided item from the tree.\n   */\n  remove(child: T) {\n    if (this.childToNode) {\n      const node = this.childToNode.get(child);\n\n      // If the node is getting removed from the top level node, then it MAY be a null bounded item\n      // Which gets removed from the list\n      if (node && node.depth === 0) {\n        const index = node.nullBounded.indexOf(child);\n\n        if (index > -1) {\n          node.nullBounded.splice(index);\n          this.childToNode.delete(child);\n          this.childToBounds.delete(child);\n\n          return;\n        }\n      }\n\n      // Otherwise, just remove the node normally\n      if (node) {\n        node.doRemove(child);\n      }\n    }\n  }\n\n  /**\n   * Creates four sub quadrants for this node.\n   */\n  split() {\n    // Gather all items to be handed down\n    const allChildren = this.gatherChildren([]);\n    // Gather all props for the children to be handed down as well\n    this.nodes = new Quadrants<T>(\n      this.bounds,\n      this.depth + 1,\n      this.getBounds,\n      this.childToNode,\n      this.childToBounds\n    );\n    // Empty out the children as they are being re-injected\n    this.children = [];\n\n    for (let i = 0, end = allChildren.length; i < end; ++i) {\n      const child = allChildren[i];\n      this.doAdd(child, this.childToBounds.get(child) || null, true);\n    }\n  }\n\n  /**\n   * Traverses the quad tree returning every quadrant encountered\n   *\n   * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n   */\n  visit(cb: IVisitFunction<T>): void {\n    const finished = Boolean(cb(this));\n\n    if (this.nodes && !finished) {\n      this.nodes.TL.visit(cb);\n      this.nodes.TR.visit(cb);\n      this.nodes.BL.visit(cb);\n      this.nodes.BR.visit(cb);\n    }\n  }\n}\n\nexport class TrackedQuadTree<T extends Instance> extends Node<T> {}\n","import { ChartCamera } from \"./chart-camera\";\n\nexport interface IReferenceCameraOptions {\n  /** This is the base camera to monitor */\n  base: ChartCamera;\n  /**\n   * This is a filter applied to the offset that comes from the chart camera.\n   */\n  offsetFilter?(offset: [number, number, number]): [number, number, number];\n  /**\n   * This is a filter applied to the scale that comes from the chart camera.\n   */\n  scaleFilter?(scale: [number, number, number]): [number, number, number];\n}\n\n/**\n * This is a camera that is based on another camera. This can apply filters\n * to the information provided from the base camera.\n *\n * Useful for situations such as a chart having a chart area and a list on the\n * left. This can use the same camera the chart area uses, but filter the response\n * to only track the y offset of the base camera.\n *\n * That would allow easy tracking of the left list to track with elements in the\n * chart and only manipulate a single camera instead of managing many cameras and\n * tie them together with lots of events.\n */\nexport class ReferenceCamera extends ChartCamera {\n  private base: ChartCamera;\n  private offsetFilter = (offset: [number, number, number]) => offset;\n  private scaleFilter = (scale: [number, number, number]) => scale;\n\n  set offset(_val: any) {\n    /** no-op */\n  }\n\n  get offset() {\n    return this.offsetFilter(this.base.offset);\n  }\n\n  set scale(_val: any) {\n    /** no-op */\n  }\n\n  get scale() {\n    return this.scaleFilter(this.base.scale);\n  }\n\n  constructor(options: IReferenceCameraOptions) {\n    super();\n    Object.assign(this, options);\n  }\n}\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * Active `debug` instances.\n */\nexports.instances = [];\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  var prevTime;\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n  debug.destroy = destroy;\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  exports.instances.push(debug);\n\n  return debug;\n}\n\nfunction destroy () {\n  var index = exports.instances.indexOf(this);\n  if (index !== -1) {\n    exports.instances.splice(index, 1);\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var i;\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n\n  for (i = 0; i < exports.instances.length; i++) {\n    var instance = exports.instances[i];\n    instance.enabled = exports.enabled(instance.namespace);\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  if (name[name.length - 1] === '*') {\n    return true;\n  }\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__133__;","import { Instance } from \"../../instance-provider/instance\";\nimport { IShaderExtension, IShaderInitialization } from \"../../types\";\nimport {\n  IShaderTemplateRequirements,\n  shaderTemplate\n} from \"../../util/shader-templating\";\nimport { templateVars } from \"../template-vars\";\n\nexport function extendShader<T extends Instance>(\n  shaderIO: IShaderInitialization<T>,\n  vs?: IShaderExtension,\n  fs?: IShaderExtension\n) {\n  const baseVS = shaderIO.vs;\n  const baseFS = shaderIO.fs;\n\n  let extendedVS = { shader: baseVS };\n  let extendedFS = { shader: baseFS };\n\n  // Set the replacements for the extension locations, but also retain the extension modifier to allow for\n  // Further extensions if desired.\n  if (vs) {\n    const options: { [key: string]: string } = {};\n\n    options[templateVars.extendHeader] = vs.header\n      ? `${vs.header}\\n$\\{${templateVars.extendHeader}}`\n      : \"\";\n    options[templateVars.extend] = vs.body\n      ? `${vs.body}\\n$\\{${templateVars.extend}}`\n      : \"\";\n\n    // It is REQUIRED to have both header and body extensions to be a valid extendible shader\n    const required: IShaderTemplateRequirements = {\n      name: \"Extend VS Shader\",\n      values: [templateVars.extendHeader, templateVars.extend]\n    };\n\n    // Generated the extended shader\n    extendedVS = shaderTemplate({\n      options,\n      required,\n      shader: baseVS,\n\n      // We do not want to remove any template macros that do not deal with extension\n      onToken: (token, replace) => {\n        if (\n          token === templateVars.extendHeader ||\n          token === templateVars.extend\n        ) {\n          return replace;\n        }\n\n        return `$\\{${token}}`;\n      }\n    });\n  }\n\n  // Next, extend the fragment shader\n\n  // Set the replacements for the extension locations, but also retain the extension modifier to allow for\n  // Further extensions if desired.\n  if (fs) {\n    const options: { [key: string]: string } = {};\n\n    options[templateVars.extendHeader] = fs.header\n      ? `${fs.header}\\n$\\{${templateVars.extendHeader}}`\n      : \"\";\n    options[templateVars.extend] = fs.body\n      ? `${fs.body}\\n$\\{${templateVars.extend}}`\n      : \"\";\n\n    // It is REQUIRED to have both header and body extensions to be a valid extendible shader\n    const required = {\n      name: \"Extend FS Shader\",\n      values: [templateVars.extendHeader, templateVars.extend]\n    };\n\n    // Generate the extended shader\n    extendedFS = shaderTemplate({\n      options,\n      required,\n      shader: baseFS,\n\n      // We do not want to remove any template macros that do not deal with extension\n      onToken: (token, replace) => {\n        if (\n          token === templateVars.extendHeader ||\n          token === templateVars.extend\n        ) {\n          return replace;\n        }\n\n        return `$\\{${token}}`;\n      }\n    });\n  }\n\n  // Apply the extension to the shader io program\n  return {\n    fs: extendedFS.shader,\n    vs: extendedVS.shader\n  };\n}\n","import { Instance } from \"../instance-provider/instance\";\nimport { extendShader } from \"../shaders/util/extend-shader\";\nimport { IShaderInitialization, IShaderIOExtension } from \"../types\";\n\nexport function extendShaderInitialization<T extends Instance>(\n  shaderIO: IShaderInitialization<T>,\n  extend: IShaderIOExtension<T>\n): IShaderInitialization<T> {\n  const extendedShaders = extendShader(shaderIO, extend.vs, extend.fs);\n\n  return {\n    fs: extendedShaders.fs,\n    instanceAttributes: (shaderIO.instanceAttributes || []).concat(\n      extend.instanceAttributes || []\n    ),\n    uniforms: (shaderIO.uniforms || []).concat(extend.uniforms || []),\n    vertexAttributes: (shaderIO.vertexAttributes || []).concat(\n      extend.vertexAttributes || []\n    ),\n    vertexCount: shaderIO.vertexCount,\n    vs: extendedShaders.vs\n  };\n}\n","import { LayerSurface } from \"../surface\";\nimport { IAutoEasingMethod } from \"./auto-easing-method\";\nimport { Vec } from \"./vector\";\n\nexport type AnimationDelayAccessor = (\n  groupIndex: number,\n  currentDelay: number\n) => number;\nexport type AnimationInstanceModificationCallback = (\n  groupIndex: number\n) => void;\n\nfunction isNumber(val: any): val is number {\n  return !isNaN(val);\n}\n\n/**\n * This provides some methods that aids in more complicated animation tasks, such as\n * adjusting gpu animated properties with differing time delay values for each change.\n */\nexport class AnimationHelper {\n  surface: LayerSurface;\n\n  constructor(surface: LayerSurface) {\n    this.surface = surface;\n  }\n\n  /**\n   * When you want to animate properties of instances but you want them to start at differing times,\n   * use this method to ensure the timings starting between the elements is correct.\n   *\n   * @param easingMethod This is the easing method used for the layer's property to animate\n   * @param groupCount This is the number of animations desired for a given delay level\n   * @param delayGap This is the amount of delay between each group. This can be a static value or\n   *                 can be a dynamic callback\n   */\n  groupAnimation(\n    easingMethod: IAutoEasingMethod<Vec>,\n    groupCount: number,\n    baseDelay: number,\n    delayGap: number | AnimationDelayAccessor,\n    modifyInstances: AnimationInstanceModificationCallback\n  ) {\n    // Get the time of the current frame as our timing basis\n    const startFrameTime = this.surface.frameMetrics.currentTime;\n    // Do an initial commit to ensure all previous animated properties are committed based on the\n    // Delay specified for them\n    this.surface.commit(startFrameTime);\n\n    // Loop through the the number of grouped animations to work with\n    for (let i = 0; i < groupCount; ++i) {\n      // Determine how much extra delay is applied for the provided group\n      const gap = isNumber(delayGap)\n        ? delayGap\n        : delayGap(i, easingMethod.delay);\n      // Apply the delay\n      easingMethod.delay = baseDelay + gap * i;\n      // Make the instance modifications\n      modifyInstances(i);\n      // Commit the instance modifications based on the current delay settings\n      this.surface.commit(startFrameTime);\n    }\n  }\n}\n","import { Bounds } from \"../primitives/bounds\";\nimport { EventManager } from \"../surface/event-manager\";\nimport {\n  IDragMetrics,\n  IMouseInteraction,\n  IWheelMetrics\n} from \"../surface/mouse-event-manager\";\nimport { View } from \"../surface/view\";\nimport { add3, subtract3, Vec3 } from \"../util\";\nimport { ChartCamera } from \"../util/chart-camera\";\nexport enum CameraBoundsAnchor {\n  TOP_LEFT,\n  TOP_MIDDLE,\n  TOP_RIGHT,\n  MIDDLE_LEFT,\n  MIDDLE,\n  MIDDLE_RIGHT,\n  BOTTOM_LEFT,\n  BOTTOM_MIDDLE,\n  BOTTOM_RIGHT\n}\n\nconst { max, min } = Math;\n\n/**\n * This represents how the camera should be bounded in the world space. This gives enough information\n * to handle all cases of bounding, including screen padding and anchoring for cases where the viewed space\n * is smaller than the view.\n */\nexport interface ICameraBoundsOptions {\n  /** How the bounded world space should anchor itself within the view when the projected world space to the screen is smaller than the view */\n  anchor: CameraBoundsAnchor;\n  /** Minimum settings the camera can scale to */\n  scaleMin?: Vec3;\n  /** Maximum settings the camera can scale to */\n  scaleMax?: Vec3;\n  /** The actual screen pixels the bounds can exceed when the camera's view has reached the bounds of the world */\n  screenPadding: { left: number; right: number; top: number; bottom: number };\n  /** This is the view for which the bounds applies towards */\n  view: string;\n  /** The area the camera is bound inside */\n  worldBounds: Bounds;\n}\n\nexport interface IBasicCameraControllerOptions {\n  /** Takes in the options to be used for creating a new ViewBounds object on this controller. */\n  bounds?: ICameraBoundsOptions;\n  /** This is the camera this controller will manipulate */\n  camera: ChartCamera;\n  /** When this is set to true, the start view can be targetted even when behind other views */\n  ignoreCoverViews?: boolean;\n  /**\n   * This provides a control to filter panning that will be applied to the camera. The input and\n   * output of this will be the delta value to be applied.\n   */\n  panFilter?(\n    offset: [number, number, number],\n    view: View,\n    allViews: View[]\n  ): [number, number, number];\n  /**\n   * This adjusts how fast scaling is applied from the mouse wheel\n   */\n  scaleFactor?: number;\n  /**\n   * This provides a control to filter scaling that will be applied to the camera. The input and\n   * output of this will be the delta value to be applied.\n   */\n  scaleFilter?(\n    scale: [number, number, number],\n    view: View,\n    allViews: View[]\n  ): [number, number, number];\n  /**\n   * This is the view that MUST be the start view from the events.\n   * If not provided, then dragging anywhere will adjust the camera\n   */\n  startView?: string | string[];\n\n  /**\n   * This is a handler for when the camera has applied changes to the visible range of what is seen.\n   * Which most likely means offset or scale has been altered.\n   */\n  onRangeChanged?(camera: ChartCamera, targetView: View): void;\n}\n\n/**\n * This provides some very basic common needs for a camera control system. This is not a total solution\n * very every scenario. This should just often handle most basic needs.\n */\nexport class BasicCameraController extends EventManager {\n  /**\n   * If total bounds of worldbounds + screenpadding is smaller\n   * than width or height of view, anchor dictates placement.\n   */\n  bounds?: ICameraBoundsOptions;\n  /** This is the camera that this controller will manipulate */\n  camera: ChartCamera;\n  /** When this is set to true, the start view can be targetted even when behind other views */\n  ignoreCoverViews?: boolean;\n  /** Informative property indicating the controller is panning the chart or not */\n  isPanning: boolean = false;\n  /** This is the filter applied to panning operations */\n  private panFilter = (\n    offset: [number, number, number],\n    _view: View,\n    _allViews: View[]\n  ) => offset;\n  /** The rate scale is adjusted with the mouse wheel */\n  scaleFactor: number;\n  /** THis is the filter applied to tscaling operations */\n  private scaleFilter = (\n    scale: [number, number, number],\n    _view: View,\n    _allViews: View[]\n  ) => scale;\n  /** The view that must be the start or focus of the interactions in order for the interactions to occur */\n  startViews: string[] = [];\n\n  /**\n   * If an unconvered start view is not available, this is the next available covered view, if present\n   */\n  private coveredStartView: View;\n  /**\n   * Callback for when the range has changed for the camera in a view\n   */\n  private onRangeChanged = (_camera: ChartCamera, _targetView: View) => {\n    /* no-op */\n  };\n  /**\n   * This flag is set to true when a start view is targetted on mouse down even if it is not\n   * the top most view.\n   */\n  private startViewDidStart: boolean = false;\n\n  constructor(options: IBasicCameraControllerOptions) {\n    super();\n    if (options.bounds) {\n      this.setBounds(options.bounds);\n    }\n    this.camera = options.camera;\n    this.scaleFactor = options.scaleFactor || 1000.0;\n    this.ignoreCoverViews = options.ignoreCoverViews || false;\n\n    if (options.startView) {\n      this.startViews = Array.isArray(options.startView)\n        ? options.startView\n        : [options.startView];\n    }\n\n    this.panFilter = options.panFilter || this.panFilter;\n    this.scaleFilter = options.scaleFilter || this.scaleFilter;\n    this.onRangeChanged = options.onRangeChanged || this.onRangeChanged;\n  }\n\n  /**\n   * Corrects camera offset to respect current bounds and anchor.\n   */\n  applyBounds = () => {\n    if (this.bounds && this.camera) {\n      const targetView = this.getView(this.bounds.view);\n      this.applyScaleBounds();\n\n      // Next bound the positioning\n      if (targetView) {\n        this.camera.offset[0] = this.boundsHorizontalOffset(\n          targetView,\n          this.bounds\n        );\n        this.camera.offset[1] = this.boundsVerticalOffset(\n          targetView,\n          this.bounds\n        );\n      }\n    }\n  };\n\n  applyScaleBounds = () => {\n    if (this.camera && this.bounds) {\n      // First bound the scaling\n      if (this.bounds.scaleMin) {\n        this.camera.scale = [\n          max(this.camera.scale[0], this.bounds.scaleMin[0]),\n          max(this.camera.scale[1], this.bounds.scaleMin[1]),\n          max(this.camera.scale[2], this.bounds.scaleMin[2])\n        ];\n      }\n\n      if (this.bounds.scaleMax) {\n        this.camera.scale = [\n          min(this.camera.scale[0], this.bounds.scaleMax[0]),\n          min(this.camera.scale[1], this.bounds.scaleMax[1]),\n          min(this.camera.scale[2], this.bounds.scaleMax[2])\n        ];\n      }\n    }\n  };\n\n  /**\n   * Calculation for adhering to an anchor - x-axis offset only.\n   */\n  anchoredByBoundsHorizontal(targetView: View, bounds: ICameraBoundsOptions) {\n    switch (bounds.anchor) {\n      case CameraBoundsAnchor.TOP_LEFT:\n      case CameraBoundsAnchor.MIDDLE_LEFT:\n      case CameraBoundsAnchor.BOTTOM_LEFT:\n        return -(\n          bounds.worldBounds.left -\n          bounds.screenPadding.left / this.camera.scale[0]\n        );\n\n      case CameraBoundsAnchor.TOP_MIDDLE:\n      case CameraBoundsAnchor.MIDDLE:\n      case CameraBoundsAnchor.BOTTOM_MIDDLE:\n        return -(\n          bounds.worldBounds.right -\n          bounds.worldBounds.width / 2 -\n          0.5 *\n            ((targetView.screenBounds.width + bounds.screenPadding.right) /\n              this.camera.scale[0])\n        );\n\n      case CameraBoundsAnchor.TOP_RIGHT:\n      case CameraBoundsAnchor.MIDDLE_RIGHT:\n      case CameraBoundsAnchor.BOTTOM_RIGHT:\n        return -(\n          bounds.worldBounds.right -\n          (targetView.screenBounds.width - bounds.screenPadding.right) /\n            this.camera.scale[0]\n        );\n    }\n  }\n\n  /**\n   * Calculation for adhering to an anchor - y-axis offset only.\n   */\n  anchoredByBoundsVertical(targetView: View, bounds: ICameraBoundsOptions) {\n    switch (bounds.anchor) {\n      case CameraBoundsAnchor.TOP_LEFT:\n      case CameraBoundsAnchor.TOP_MIDDLE:\n      case CameraBoundsAnchor.TOP_RIGHT:\n        return (\n          -bounds.worldBounds.top - -bounds.screenPadding.top / this.scale[1]\n        );\n\n      case CameraBoundsAnchor.MIDDLE_LEFT:\n      case CameraBoundsAnchor.MIDDLE:\n      case CameraBoundsAnchor.MIDDLE_RIGHT:\n        return (\n          -(bounds.worldBounds.bottom - bounds.worldBounds.height / 2) +\n          0.5 *\n            (targetView.screenBounds.height - bounds.screenPadding.bottom) /\n            this.scale[1]\n        );\n\n      case CameraBoundsAnchor.BOTTOM_LEFT:\n      case CameraBoundsAnchor.BOTTOM_MIDDLE:\n      case CameraBoundsAnchor.BOTTOM_RIGHT:\n        return -(\n          bounds.worldBounds.bottom -\n          (targetView.screenBounds.height - bounds.screenPadding.bottom) /\n            this.scale[1]\n        );\n    }\n  }\n\n  /**\n   * Returns offset on x-axis due to current bounds and anchor.\n   */\n  boundsHorizontalOffset(targetView: View, bounds: ICameraBoundsOptions) {\n    const worldTLinScreenSpace = targetView.worldToScreen({\n      x: bounds.worldBounds.left,\n      y: bounds.worldBounds.top\n    });\n    const worldBRinScreenSpace = targetView.worldToScreen({\n      x: bounds.worldBounds.right,\n      y: bounds.worldBounds.bottom\n    });\n\n    const widthDifference =\n      worldBRinScreenSpace.x -\n      worldTLinScreenSpace.x +\n      bounds.screenPadding.left +\n      bounds.screenPadding.right -\n      targetView.screenBounds.width;\n\n    // If the worldBounds are smaller than the screenBounds,\n    // We offset according to the anchoring\n    if (widthDifference < 0) {\n      return this.anchoredByBoundsHorizontal(targetView, bounds);\n    }\n\n    if (\n      worldBRinScreenSpace.x <\n      targetView.screenBounds.right - bounds.screenPadding.right\n    ) {\n      return (\n        -bounds.worldBounds.right +\n        (targetView.screenBounds.width - bounds.screenPadding.right) /\n          this.camera.scale[0]\n      );\n    }\n\n    if (\n      worldTLinScreenSpace.x >\n      targetView.screenBounds.left + bounds.screenPadding.left\n    ) {\n      return (\n        -bounds.worldBounds.left +\n        bounds.screenPadding.left / this.camera.scale[0]\n      );\n    }\n\n    return this.camera.offset[0];\n  }\n\n  /**\n   * Returns offset on y-axis due to current bounds and anchor.\n   */\n  boundsVerticalOffset(targetView: View, bounds: ICameraBoundsOptions) {\n    const worldTLinScreenSpace = targetView.worldToScreen({\n      x: bounds.worldBounds.left,\n      y: bounds.worldBounds.top\n    });\n    const worldBRinScreenSpace = targetView.worldToScreen({\n      x: bounds.worldBounds.right,\n      y: bounds.worldBounds.bottom\n    });\n\n    const heightDifference =\n      worldBRinScreenSpace.y -\n      worldTLinScreenSpace.y +\n      bounds.screenPadding.top +\n      bounds.screenPadding.bottom -\n      targetView.screenBounds.height;\n\n    // If the viewBounds are larger than the screenBounds,\n    // We offset according to the anchoring\n    if (heightDifference < 0) {\n      return this.anchoredByBoundsVertical(targetView, bounds);\n    }\n\n    if (\n      worldTLinScreenSpace.y >\n      targetView.screenBounds.top - bounds.screenPadding.top\n    ) {\n      return -(\n        bounds.worldBounds.top -\n        bounds.screenPadding.top / this.camera.scale[1]\n      );\n    }\n\n    if (\n      worldBRinScreenSpace.y <\n      targetView.screenBounds.bottom + bounds.screenPadding.bottom\n    ) {\n      return -(\n        bounds.worldBounds.bottom +\n        (-targetView.screenBounds.height + bounds.screenPadding.bottom) /\n          this.camera.scale[1]\n      );\n    }\n\n    return this.camera.offset[1];\n  }\n\n  private canStart(viewId: string) {\n    return (\n      this.startViews.length === 0 ||\n      (this.startViews && this.startViews.indexOf(viewId) > -1) ||\n      (this.startViewDidStart && this.ignoreCoverViews)\n    );\n  }\n\n  private findCoveredStartView(e: IMouseInteraction) {\n    const found = e.viewsUnderMouse.find(\n      under => this.startViews.indexOf(under.view.id) > -1\n    );\n    this.startViewDidStart = Boolean(found);\n\n    if (found) {\n      this.coveredStartView = found.view;\n    }\n  }\n\n  private getTargetView(e: IMouseInteraction) {\n    // If we have a start view and we do not ignore covering views,\n    // Then our target view is the view we started with\n    if (this.startViews && !this.ignoreCoverViews) {\n      return e.target.view;\n    }\n\n    // Otherwise, we use the covered start view\n    else {\n      return this.coveredStartView;\n    }\n  }\n\n  /**\n   * Used to aid in handling the pan effect and determine the contextual view targetted.\n   */\n  handleMouseDown(e: IMouseInteraction, _button: number) {\n    if (this.startViews) {\n      // We look for valid covered views on mouse down so dragging will work\n      this.findCoveredStartView(e);\n      // If this is a valid start view, then we enter a panning state with the mouse down\n      if (e.start) {\n        this.isPanning = this.canStart(e.start.view.id) || this.isPanning;\n      }\n    }\n  }\n\n  /**\n   * Used to aid in handling the pan effect\n   */\n  handleMouseUp(_e: IMouseInteraction) {\n    this.startViewDidStart = false;\n    this.isPanning = false;\n  }\n\n  /**\n   * Applies a panning effect by adjusting the camera's offset.\n   */\n  handleDrag(e: IMouseInteraction, drag: IDragMetrics) {\n    if (e.start) {\n      if (this.canStart(e.start.view.id)) {\n        let pan: [number, number, number] = [\n          drag.screen.delta.x / this.camera.scale[0],\n          drag.screen.delta.y / this.camera.scale[1],\n          0\n        ];\n\n        if (this.panFilter) {\n          pan = this.panFilter(\n            pan,\n            e.start.view,\n            e.viewsUnderMouse.map(v => v.view)\n          );\n        }\n\n        this.camera.offset[0] += pan[0];\n        this.camera.offset[1] += pan[1];\n\n        // Add additional correction for bounds\n        this.applyBounds();\n        // Broadcast the change occurred\n        this.onRangeChanged(this.camera, e.start.view);\n        // Add additional correction for bounds\n        this.applyBounds();\n      }\n    }\n  }\n\n  /**\n   * Applies a scaling effect to the camera for mouse wheel events\n   */\n  handleWheel(e: IMouseInteraction, wheelMetrics: IWheelMetrics) {\n    // Every mouse wheel event must look to see if it's over a valid covered start view\n    this.findCoveredStartView(e);\n\n    if (this.canStart(e.target.view.id)) {\n      const targetView = this.getTargetView(e);\n      const beforeZoom = targetView.screenToWorld(e.screen.mouse);\n\n      const currentZoomX = this.camera.scale[0] || 1.0;\n      const currentZoomY = this.camera.scale[1] || 1.0;\n\n      let scale: [number, number, number] = [\n        wheelMetrics.wheel[1] / this.scaleFactor * currentZoomX,\n        wheelMetrics.wheel[1] / this.scaleFactor * currentZoomY,\n        1\n      ];\n\n      if (this.scaleFilter) {\n        scale = this.scaleFilter(\n          scale,\n          targetView,\n          e.viewsUnderMouse.map(v => v.view)\n        );\n      }\n\n      this.camera.scale[0] = currentZoomX + scale[0];\n      this.camera.scale[1] = currentZoomY + scale[1];\n\n      // Ensure the new scale values are within bounds before attempting to correct offsets\n      this.applyScaleBounds();\n\n      const afterZoom = targetView.screenToWorld(e.screen.mouse);\n      this.camera.offset[0] -= beforeZoom.x - afterZoom.x;\n      this.camera.offset[1] -= beforeZoom.y - afterZoom.y;\n\n      // Add additional correction for bounds\n      this.applyBounds();\n      // Broadcast the change occurred\n      this.onRangeChanged(this.camera, targetView);\n      // Add additional correction for bounds\n      this.applyBounds();\n    }\n  }\n\n  // These are the currently Unused responses for this controller\n  handleMouseOut(_e: IMouseInteraction) {\n    /*no-op*/\n  }\n  handleClick(_e: IMouseInteraction) {\n    /*no-op*/\n  }\n  handleMouseMove(_e: IMouseInteraction) {\n    /*no-op*/\n  }\n  handleMouseOver(_e: IMouseInteraction) {\n    /*no-op*/\n  }\n\n  /**\n   * Evaluates the world bounds the specified view is observing\n   *\n   * @param viewId The id of the view when the view was generated when the surface was made\n   */\n  getRange(viewId: string): Bounds {\n    /** Get the projections for the provided view */\n    const projection = this.getProjection(viewId);\n    /** Get the bounds on the screen for the indicated view */\n    const screenBounds = this.getViewScreenBounds(viewId);\n\n    // Make sure we have a valid projection and screen bounds to make the adjustment\n    if (projection && screenBounds) {\n      /** Get the current viewed world bounds of the view */\n      const topLeft = projection.screenToWorld(screenBounds);\n      const bottomRight = projection.screenToWorld({\n        x: screenBounds.right,\n        y: screenBounds.bottom\n      });\n\n      return new Bounds({\n        height: bottomRight.y - topLeft.y,\n        width: bottomRight.x - topLeft.x,\n        x: topLeft.x,\n        y: topLeft.y\n      });\n    }\n\n    return new Bounds({ x: 0, y: 0, width: 1, height: 1 });\n  }\n\n  /**\n   * Retrieves the current pan of the controlled camera\n   */\n  get pan(): Vec3 {\n    return this.camera.offset;\n  }\n\n  /**\n   * Sets bounds applicable to the supplied view.\n   * If no view is supplied, it uses the first in the startViews array\n   */\n  setBounds(bounds: ICameraBoundsOptions) {\n    this.bounds = bounds;\n    this.applyBounds();\n  }\n\n  /**\n   * Retrieves the current scale of the camera\n   */\n  get scale(): Vec3 {\n    return this.camera.scale;\n  }\n\n  /**\n   * This lets you set the visible range of a view based on the view's camera. This will probably not work\n   * as expected if the view indicated and this controller do not share the same camera.\n   *\n   * @param viewId The id of the view when the view was generated when the surface was made\n   */\n  setRange(newWorld: Bounds, viewId: string) {\n    /** Get the projections for the provided view */\n    const projection = this.getProjection(viewId);\n    /** Get the bounds on the screen for the indicated view */\n    const screenBounds = this.getViewScreenBounds(viewId);\n    /** Get the view the range is being applied towards */\n    const view = this.getView(viewId);\n\n    // Make sure we have a valid projection and screen bounds to make the adjustment\n    if (projection && screenBounds && view) {\n      const deltaScale = subtract3(\n        [\n          screenBounds.width / newWorld.width,\n          screenBounds.height / newWorld.height,\n          1\n        ],\n        this.camera.scale\n      );\n\n      this.camera.scale = add3(\n        this.camera.scale,\n        this.scaleFilter(deltaScale, view, [view])\n      );\n\n      const deltaPan = subtract3(\n        [-newWorld.x, -newWorld.y, 0],\n        this.camera.offset\n      );\n\n      this.camera.offset = add3(\n        this.camera.offset,\n        this.scaleFilter(deltaPan, view, [view])\n      );\n\n      // Bound the camera to the specified bounding range\n      this.applyBounds();\n      // Broadcast the change occurred\n      this.onRangeChanged(this.camera, view);\n      // Bound the camera to the specified bounding range\n      this.applyBounds();\n    }\n  }\n}\n","export * from \"./basic-camera-controller\";\n","export * from \"./base-event-managers\";\nexport * from \"./base-layers\";\nexport * from \"./instance-provider\";\nexport * from \"./primitives\";\nexport * from \"./surface\";\nexport * from \"./types\";\nexport * from \"./util\";\n","export * from \"./voidgl\";\n"],"sourceRoot":""}