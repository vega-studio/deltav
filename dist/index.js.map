{"version":3,"sources":["webpack://voidgl/webpack/universalModuleDefinition","webpack://voidgl/webpack/bootstrap","webpack://voidgl/external \"three\"","webpack://voidgl/./src/voidgl/types.ts","webpack://voidgl/./src/voidgl/primitives/bounds.ts","webpack://voidgl/external \"mobx\"","webpack://voidgl/./src/voidgl/base-layers/types.ts","webpack://voidgl/./src/voidgl/util/index.ts","webpack://voidgl/./src/voidgl/surface/layer.ts","webpack://voidgl/./src/voidgl/util/instance.ts","webpack://voidgl/./src/voidgl/primitives/index.ts","webpack://voidgl/./src/voidgl/surface/texture/index.ts","webpack://voidgl/./src/voidgl/util/identify-by-key.ts","webpack://voidgl/./src/voidgl/base-layers/edges/types.ts","webpack://voidgl/./src/voidgl/surface/event-manager.ts","webpack://voidgl/./src/voidgl/surface/generate-layer-model.ts","webpack://voidgl/./src/voidgl/surface/view.ts","webpack://voidgl/./src/voidgl/surface/scene.ts","webpack://voidgl/./src/voidgl/surface/texture/label-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/base-atlas-resource.ts","webpack://voidgl/./src/voidgl/util/view-camera.ts","webpack://voidgl/./src/voidgl/util/vector.ts","webpack://voidgl/./src/voidgl/util/shader-templating.ts","webpack://voidgl/./src/voidgl/util/chart-camera.ts","webpack://voidgl/./src/voidgl/surface/mouse-event-manager.ts","webpack://voidgl/./src/voidgl/surface/inject-shader-io.ts","webpack://voidgl/./src/voidgl/surface/generate-layer-material.ts","webpack://voidgl/./src/voidgl/surface/generate-layer-geometry.ts","webpack://voidgl/./src/voidgl/util/data-bounds.ts","webpack://voidgl/./src/voidgl/surface/generate-default-scene.ts","webpack://voidgl/./src/voidgl/util/make-instance-uniform-name.ts","webpack://voidgl/./src/voidgl/util/auto-easing-method.ts","webpack://voidgl/./src/voidgl/shaders/fragments/template-vars.ts","webpack://voidgl/./src/voidgl/base-layers/labels/index.ts","webpack://voidgl/./src/voidgl/surface/texture/label-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/image-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/color-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/color-atlas-resource.ts","webpack://voidgl/./src/voidgl/surface/texture/sub-texture.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas.ts","webpack://voidgl/./src/voidgl/util/webgl-stat.ts","webpack://voidgl/./node_modules/debug/src/browser.js","webpack://voidgl/./src/voidgl/util/mouse.ts","webpack://voidgl/./src/voidgl/base-layers/images/index.ts","webpack://voidgl/./src/voidgl/base-event-managers/basic-camera-controller.ts","webpack://voidgl/./src/voidgl/base-event-managers/index.ts","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.vs","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.fs","webpack://voidgl/./src/voidgl/base-layers/rings/ring-layer.ts","webpack://voidgl/./src/voidgl/base-layers/rings/ring-instance.ts","webpack://voidgl/./src/voidgl/base-layers/rings/index.ts","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-instance.ts","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-layer.vs","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-layer.fs","webpack://voidgl/./src/voidgl/base-layers/rectangle/rectangle-layer.ts","webpack://voidgl/./src/voidgl/base-layers/rectangle/index.ts","webpack://voidgl/./src/voidgl/base-layers/edges/edge-instance.ts","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer.fs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-screen-curve.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-bezier2.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-bezier.vs","webpack://voidgl/./src/voidgl/base-layers/edges/shader/edge-layer-line.vs","webpack://voidgl/./src/voidgl/base-layers/edges/edge-picking.ts","webpack://voidgl/./src/voidgl/base-layers/edges/edge-layer.ts","webpack://voidgl/./src/voidgl/base-layers/edges/index.ts","webpack://voidgl/./src/voidgl/base-layers/circles/circle-instance.ts","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.vs","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.fs","webpack://voidgl/./src/voidgl/base-layers/circles/circle-layer.ts","webpack://voidgl/./src/voidgl/base-layers/circles/index.ts","webpack://voidgl/./src/voidgl/base-layers/index.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas-resource-manager.ts","webpack://voidgl/./src/voidgl/surface/event-managers/layer-mouse-events.ts","webpack://voidgl/./src/voidgl/util/instance-uniform-manager.ts","webpack://voidgl/./src/voidgl/util/quad-tree.ts","webpack://voidgl/./src/voidgl/primitives/absolute-position.ts","webpack://voidgl/./src/voidgl/shaders/fragments/projection-methods.vs","webpack://voidgl/./src/voidgl/shaders/fragments/shader-input.vs","webpack://voidgl/./src/voidgl/shaders/fragments/instance-destructuring-array.vs","webpack://voidgl/./src/voidgl/shaders/fragments/fragment-shader-composition.fs","webpack://voidgl/./src/voidgl/shaders/fragments/vertex-shader-composition.vs","webpack://voidgl/./src/voidgl/shaders/fragments/instance-retrieval-array.vs","webpack://voidgl/./src/voidgl/shaders/util/uniform-instance-block-array.ts","webpack://voidgl/./src/voidgl/shaders/util/attribute-generation.ts","webpack://voidgl/./src/voidgl/base-layers/labels/label-instance.ts","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.vs","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.fs","webpack://voidgl/./src/voidgl/base-layers/labels/label-layer.ts","webpack://voidgl/./src/voidgl/surface/texture/image-rasterizer.ts","webpack://voidgl/./src/voidgl/surface/texture/atlas-manager.ts","webpack://voidgl/./src/voidgl/surface/texture/pack-node.ts","webpack://voidgl/./src/voidgl/base-layers/images/image-instance.ts","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.vs","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.fs","webpack://voidgl/./src/voidgl/shaders/base/no-op.vs","webpack://voidgl/./src/voidgl/shaders/base/no-op.fs","webpack://voidgl/./src/voidgl/surface/layer-interaction-handler.ts","webpack://voidgl/./src/voidgl/surface/instance-diff-manager.ts","webpack://voidgl/./src/voidgl/util/uid.ts","webpack://voidgl/./src/voidgl/util/tracked-quad-tree.ts","webpack://voidgl/./src/voidgl/util/reference-camera.ts","webpack://voidgl/./node_modules/ms/index.js","webpack://voidgl/./node_modules/debug/src/debug.js","webpack://voidgl/./node_modules/process/browser.js","webpack://voidgl/external \"bowser\"","webpack://voidgl/./src/voidgl/util/data-provider.ts","webpack://voidgl/./src/voidgl/primitives/point.ts","webpack://voidgl/./src/voidgl/base-layers/images/image-layer.ts","webpack://voidgl/./src/voidgl/surface/layer-surface.ts","webpack://voidgl/./src/voidgl/surface/index.ts","webpack://voidgl/./src/voidgl/index.ts","webpack://voidgl/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__103__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","InstanceBlockIndex","InstanceAttributeSize","UniformSize","VertexAttributeSize","ShaderInjectionTarget","PickType","Bounds","options","this","x","y","width","height","left","top","bottom","right","emptyBounds","containsPoint","point","encapsulate","item","Math","abs","fits","bounds","hitBounds","isInside","toString","AnchorType","ScaleType","__export","extendStatics","__extends","setPrototypeOf","__proto__","Array","b","__","constructor","create","Three","types_1","util_1","identify_by_key_1","instance_diff_manager_1","layer_interaction_handler_1","Layer","_super","props","_this","depth","instanceById","Map","instanceVertexCount","assign","defaultProps","_a","picking","NONE","ALL","pickingMethods","getInstancePickingMethods","hitTest","quadTree","TrackedQuadTree","boundsAccessor","type","diffManager","InstanceDiffManager","diffProcessor","getDiffProcessor","interactions","LayerInteractionHandler","destroy","uniformManager","didUpdateProps","draw","uniform","change","instance","uniforms","changeList","data","end","length","getUniforms","resolve","update","materialUniforms","forEach","materialUniform","Error","getModelType","drawMode","TrianglesDrawMode","modelType","Mesh","getMaterialOptions","initShader","fs","instanceAttributes","vertexAttributes","vertexCount","vs","makeInstanceAttribute","block","blockIndex","size","atlas","makeUniform","shaderInjection","qualifier","willUpdateInstances","changes","willUpdateProps","newProps","didUpdate","IdentifyByKey","__decorate","decorators","target","key","desc","arguments","getOwnPropertyDescriptor","Reflect","decorate","mobx_1","Instance","_easing","_id","id","active","observable","EdgeScaleType","EdgeType","EdgeBroadphase","EventManager","getProjection","viewId","mouseManager","getView","getViewScreenBounds","view","screenBounds","setMouseManager","generateLayerModel","layer","geometry","material","modelInfo","model","Boolean","isMesh","undefined","TriangleStripDrawMode","absolute_position_1","bounds_1","view_camera_1","isOrthographic","val","ClearFlags","View","pixelRatio","devicePixelRatio","screenToPixelSpace","out","pixelSpaceToScreen","screenToView","viewBounds","viewToScreen","screenToWorld","world","camera","offset","scale","viewCamera","ViewCameraType","CUSTOM","console","warn","worldToScreen","screen","viewToWorld","worldToView","fitViewtoViewport","surfaceDimensions","CONTROLLED","baseCamera","getAbsolutePositionBounds","viewport","far","near","position","set","z","updateMatrix","updateMatrixWorld","updateProjectionMatrix","DEFAULT_VIEW_ID","sortByDepth","a","Scene","container","layers","sortIsDirty","viewById","frustumCulled","autoUpdate","addLayer","push","addView","removeLayer","index","indexOf","splice","sortLayers","sort","DEFAULT_SCENE_ID","LabelAtlasResource","label","BaseAtlasResource","sampleScale","ViewCamera","sqrt","add1","scale1","vec","subtract1","multiply1","dot1","linear1","start","t","length1","add2","scale2","subtract2","multiply2","dot2","linear2","length2","add3","scale3","subtract3","multiply3","linear3","length3","dot3","add4","scale4","subtract4","multiply4","dot4","linear4","length4","VecMath","add","dot","linear","multiply","subtract","shaderTemplate","shader","required","matched","noValueProvided","notFound","shaderOptions","shaderResults","replace","match","keys","option","results","resolvedShaderOptions","shaderProvidedOptions","unresolvedProvidedOptions","unresolvedShaderOptions","values","error","chartCameraUID","applyArray","source","apply","concat","ChartCamera","location","slice","mouse_1","quad_tree_1","isDefined","MouseEventManager","canvas","views","controllers","handlesWheelEvents","eventCleanup","_waitingForRender","getViewsUnderMouse","mouse","hitViews","query","resize","context","setViews","setControllers","addContextListeners","QuadTree","addAll","map","v","filter","element","startView","startPosition","wheelHandler","event","eventElementPosition","interaction","makeInteraction","wheel","makeWheel","controller","handleWheel","stopPropagation","preventDefault","onwheel","addEventListener","onmouseleave","waitingForRender","handleMouseOut","onmousemove","handleMouseMove","onmousedown","downViews","canClick","clickStartTime","Date","now","currentPosition","handleMouseDown","button","document","delta","drag","makeDrag","handleDrag","onmouseup","onmouseover","handleMouseOver","handleMouseUp","handleClick","onselectstart","addTouchContextListeners","ontouchstart","ontouchend","ontouchmove","ontouchcancel","_i","previous","current","viewsUnderMouse","normalizeWheel","onmousewheel","removeEventListener","_b","auto_easing_method_1","testStartVector","ONE","TWO","THREE","FOUR","testEndVector","emptyTexture","Texture","isInstanceAttribute","attr","isVertexAttribute","isUniform","toVertexAttributeInternal","attribute","materialAttribute","toUniformInternal","findEmptyBlock","attributes","seekingSize","usedBlocks","maxBlock","instanceAttribute","max","ind","breadth","sortNeedsUpdateFirstToTop","easing","generateAtlasResourceUniforms","atlasInstanceAttributes","requestedAtlasInjections","injection","FRAGMENT","injections","VERTEX","ATLAS","resource","getAtlasTexture","generateBaseInstanceAttributes","blocks","found","fillBlock","compareVec","round","injectShaderIO","shaderIO","testStart","testEnd","test","cpu","validateInstanceAttributes","easingAttributes","instanceAttributes_1","_loop_1","easingValues","loop","name_1","easingUID","uid","delay","duration","currentTime","surface","frameMetrics","startTime","timeValue","AutoEasingLoopStyle","REPEAT","REFLECT","timePassed","slot","startAttr","startTimeAttr","durationAttr","easingAttributes_1","generateEasingAttributes","addedUniforms","MATRIX4","projectionMatrix","elements","matrix","generateBaseUniforms","addedInstanceAttributes","addedVertexAttributes","activeAttribute","allVertexAttributes","allUniforms","UNIFORM_SIZE_TO_MATERIAL_TYPE","MATRIX3","DEFAULT_UNIFORM_VALUE","toMaterialUniform","generateLayerMaterial","layerUniforms","instancingUniforms","materialParams","vertexShader","fragmentShader","generatedUniform","RawShaderMaterial","generateLayerGeometry","maxInstancesPerBuffer","vertexBuffers","attribute_1","Float32Array","buffer","endk","formatError","k","isArray","j","endj","instanceSize","endk_1","copyWithin","instancingBuffer","instanceStartIndex","BufferGeometry","attribute_3","BufferAttribute","addAttribute","DataBounds","chart_camera_1","scene_1","view_1","generateDefaultScene","aspectRatio","viewSize","defaultCamera","OrthographicCamera","defaultChartCamera","defaultViewport","defaultView","defaultScene","scene","INSTANCE_UNIFORM_ATTRIBUTE_PREFIX","makeInstanceUniformNameArray","makeInstanceUniformNameTree","vector_1","min","pow","sin","PI","GPU_PI","clamp","minVal","maxVal","easeOutElasticGPU","easeBackInGPU","AutoEasingMethod","gpu","method","methodName","immediate","easeInQuad","time","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeOutElastic","easeBackIn","easeBackOut","t1","easeBackInOut","a1","t2","templateVars","attributeFragments","blocksPerInstance","easingMethod","easingMethods","instanceBlockCount","instanceDataBinaryTree","instanceDataRetrieval","instanceDestructuring","instanceFragments","instanceUniformDeclarations","projectionMethods","shaderInput","__awaiter","thisArg","_arguments","P","generator","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","__generator","body","f","g","_","sent","trys","ops","verb","throw","return","Symbol","iterator","op","TypeError","pop","floor","LabelRasterizer","awaitContext","getContext","setTimeout","calculateLabelSize","calculateTexture","calculateTrucatedText","sampleScaling","drawLabel","truncatedText","measureContents","minX","minY","maxX","maxY","rasterization","texture","createCroppedCanvas","maxWidth","text","firstTest","cursor","safety","substr","nextCursor","cropped","createElement","imageSmoothingEnabled","drawImage","fontSize","getLabelRasterizationFontSize","fillStyle","font","makeCSSFont","measureText","fillText","potentialCanvas","fontWeight","fontFamily","imageData","getImageData","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","render","renderSync","ImageAtlasResource","image","ColorRasterizer","limit","makeCSS","color","opacity","fillRect","ColorAtlasResource","SubTexture","atlasReferenceID","atlasTexture","atlasTL","atlasTR","atlasBL","atlasBR","widthOnAtlas","heightOnAtlas","isValid","pixelWidth","pixelHeight","pack_node_1","sub_texture_1","AtlasSize","Atlas","validResources","textureSettings","packing","PackNode","updateTexture","invalidateResource","zero","setManager","manager","registerResource","removeResource","redoneCanvas","dispose","generateMipmaps","premultiplyAlpha","needsUpdate","getProgramInfo","gl","program","attributeCount","uniformCount","activeUniforms","getProgramParameter","ACTIVE_UNIFORMS","activeAttributes","ACTIVE_ATTRIBUTES","enums","35664","35665","35666","35667","35668","35669","35670","35671","35672","35673","35674","35675","35676","35678","35680","5120","5121","5122","5123","5124","5125","5126","getActiveUniform","typeName","getActiveAttrib","WebGLStat","MAX_VERTEX_UNIFORMS","MAX_FRAGMENT_UNIFORMS","MAX_ATTRIBUTES","WEBGL_SUPPORTED","MAX_TEXTURE_SIZE","WebGLRenderingContext","getAContext","getParameter","MAX_VERTEX_UNIFORM_VECTORS","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_VERTEX_ATTRIBS","process","load","storage","debug","env","DEBUG","log","Function","formatArgs","args","useColors","namespace","humanize","diff","lastC","save","namespaces","removeItem","navigator","userAgent","toLowerCase","documentElement","style","WebkitAppearance","firebug","exception","table","parseInt","RegExp","$1","chrome","local","localStorage","localstorage","colors","formatters","JSON","stringify","err","message","enable","browser","three_1","IE_ADJUSTMENT","OLD_IE_ADJUSTMENT","MAX_FIREFOX_WHEELDELTA","lowPassY","LOW_PASS_U0","LOW_PASS_U1","LOW_PASS_U2","LOW_PASS_U3","firefox","deltaX","deltaY","sign","unshift","Vector2","msie","version","wheelDeltaX","wheelDeltaY","wheelDelta","detail","msedge","multiplyScalar","relative","mouseX","mouseY","eventX","eventY","nativeEvent","pageX","pageY","clientX","clientY","scrollLeft","scrollTop","offsetParent","offsetLeft","offsetTop","CameraBoundsAnchor","event_manager_1","BasicCameraController","isPanning","panFilter","allViews","scaleFilter","startViews","onRangeChanged","targetView","startViewDidStart","applyBounds","applyScaleBounds","boundsHorizontalOffset","boundsVerticalOffset","scaleMin","scaleMax","setBounds","scaleFactor","ignoreCoverViews","anchoredByBoundsHorizontal","anchor","TOP_LEFT","MIDDLE_LEFT","BOTTOM_LEFT","worldBounds","screenPadding","TOP_MIDDLE","MIDDLE","BOTTOM_MIDDLE","TOP_RIGHT","MIDDLE_RIGHT","BOTTOM_RIGHT","anchoredByBoundsVertical","worldTLinScreenSpace","worldBRinScreenSpace","canStart","findCoveredStartView","find","under","coveredStartView","getTargetView","pan","wheelMetrics","beforeZoom","currentZoomX","currentZoomY","afterZoom","getRange","projection","topLeft","bottomRight","setRange","newWorld","deltaScale","deltaPan","primitives_1","layer_1","RingLayer","ring","radius","vertexToNormal","0","1","2","3","4","5","vertexToSide","thickness","vertex","blending","CustomBlending","blendSrc","OneFactor","premultipliedAlpha","transparent","RingInstance","computed","instance_1","anchorCalculator","TopLeft","rectangle","padding","TopMiddle","TopRight","MiddleLeft","Middle","MiddleRight","BottomLeft","BottomMiddle","BottomRight","Custom","RectangleInstance","scaling","BOUND_MAX","_anchor","setAnchor","newAnchor","types_2","RectangleLayer","anchorEffect","maxScale","minScale","ALWAYS","NEVER","screenPoint","u","EdgeInstance","colorStart","colorEnd","control","widthStart","widthEnd","setEdgeWidth","setColor","interpolation","LINE","p1","p2","c1","c2","BEZIER","BEZIER2","toPointObject","toPointArray","TEST_RESOLUTION","edgePicking","broadphase","minPickDistance","scaleType","interpolate","edge","edgeWidthStart","edgeWidthEnd","PASS_X","PASS_Y","SCREEN_CURVE","closestIndex","closestDistance","MAX_VALUE","secondClosestIndex","secondClosestDistance","control1","control2","startPoint","endPoint","linePoint","distance","lineWidth","startSegment","endSegment","vector","lineDirection","lineNormal","distanceTo","edge_picking_1","pickVS","baseVS","screenVS","edgeFS","EdgeLayer","_c","MAX_SEGMENTS","_d","vertexInterpolation","_e","DataProvider","CircleInstance","CircleLayer","circle","circleScreenCenter","mouseScreen","animations","animate","animateCenter","center","animateRadius","animateColor","fadeOutOversized","label_atlas_resource_1","toInstanceIOValue","AtlasResourceManager","targetAtlas","requestQueue","requestLookup","atlasManager","dequeueRequests","didDequeue","this_1","resources","requests","atlasRequests_1","updateAtlas","request","delete","request_1","from","entries","atlasRequests","existingRequests","setTargetAtlas","LayerMouseEvents","sceneViews","isOver","getSceneViewsUnderMouse","sceneViewByViewId","sceneView","viewItem","getMouseByViewId","viewMouseByViewId","handleInteraction","handleMouseClick","handleMouseDrag","callback","sceneViews_1","handleSceneView","flag","clear","allSceneViews","currentSceneViews","generate_layer_model_1","make_instance_uniform_name_1","InstanceUniformManager","buffers","availableClusters","instanceToCluster","clusterToBuffer","maxUniformBlock","uniformBlocksPerInstance","makeNewBuffer","cluster","shift","remove","removeFromScene","setScene","newGeometry","drawRange","count","newMaterial","clone","newModel","activeInstances","clusters","firstInstance","lastInstance","uniformIndex","uniformName","instanceData","Vector4","instanceIndex","uniformRange","filterQuery","queryValues","filtered","obj","Quadrants","mid","TL","Node","TR","BL","BR","children","nodes","child","doAdd","cover","childrenProps","allChildren","gatherChildren","split","isNaN","area","list","visit","queryBounds","queryPoint","cb","finished","data_bounds_1","ref","scaleRatio","parse","num","parseFloat","reference","top_1","shader_templating_1","template_vars_1","instanceRetrievalArrayFragment","VECTOR_COMPONENTS","sizeToType","9","16","99","orderByPriority","makeVectorSwizzle","join","makeUniformArrayDeclaration","totalBlocks","fragment","fill","makeInstanceRetrievalArray","templateOptions","makeInstanceDestructuringArray","orderedAttributes","webgl_stat_1","uniform_instance_block_array_1","vertexShaderComposition","fragmentShaderComposition","instanceDestructuringArray","MAX_USE_PER_BLOCK","generateUniforms","injectionType","injectFragments","shaders","shaderInputMetrics","instancingInfo","instanceUniformBlockCount","ceil","calculateUniformBlockUseage","sortedInstanceAttributes","currentBlock","trueBlockIndex","blockUseage","innerBlockUseage","attributeSize","oldUseage","newUseage","innerUseage","branchesPerLevel","instances","uniformMetrics","blockQualifierDedup","qualifiers","blockQualifiers","qualifierList","allQualifiers","declaration","makeInstanceUniformDeclaration","makeUniformInstanceDataOptions","metrics","generateInstanceDataLookupOptions","additionalOptions","generateVertexAttributes","methods","methodSizes","sizeType","generateEasingMethods","generateShaderInputs","makeInstanceDestructuring","makeInstanceAttributeReferences","generateVertexShader","vertexShaderResults","generateFragmentShader","texture_1","rasterizationLookUp","LabelInstance","_cssFont","_fontFamily","_fontSize","_fontStyle","_fontWeight","_maxWidth","_text","_width","_height","_isDestroyed","fontStyle","cssFontLookup","rasterizations","references","_rasterization","LabelLayer","ImageRasterizer","calculateImageSize","atlas_1","color_atlas_resource_1","color_rasterizer_1","image_atlas_resource_1","label_rasterizer_1","ZERO_IMAGE","AtlasManager","allAtlas","createAtlas","destroyAtlas","atlasName","setDefaultImage","loadedImage","rect","dimensions","insertedNode","ux","uy","uw","uh","onePixelX","atlasDimensions","loadImage","first","second","insert","nodeImage","nodeDimensions","imageSrc","subTexture","image_1","onload","onerror","path","toDataURL","Image","src","resources_1","isLeaf","child0","child1","hasChild","newNode","fitFlag","imgWidth","imgHeight","dWidth","dHeight","removed","ImageInstance","tint","_sourceWidth","_sourceHeight","_element","_path","aspect","isMouseOver","isMouseDown","onMouseDown","world_1","hitTest_1","query_1","bind","querySpace","check","onMouseOut","world_2","query_2","hitTest_2","onMouseUp","world_3","hitTest_3","query_3","onMouseOver","onMouseMove","info","world_4","hitTest_4","query_4","notOverInstances","isCurrentlyOver_1","noLongerOver","onMouseClick","world_5","hitTest_5","query_5","VECTOR_ACCESSORS","quadPicking","changeInstanceQuad","addInstanceQuad","removeInstanceQuad","changeInstance","addInstance","removeInstance","uniformCluster","updateInstance","uniformRangeStart","instanceUniform","UID","CUID","colorUID","getBounds","childToNode","childToBounds","nullBounded","fromSplit","doRemove","node","ReferenceCamera","offsetFilter","base","h","plural","ms","str","String","exec","long","fmtShort","createDebug","prevTime","enabled","self","curr","prev","coerce","format","formatter","hash","charCodeAt","selectColor","init","stack","disable","names","skips","len","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","array","noop","nextTick","title","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","DiffType","UPDATE_FLAG","instanceDisposers","instanceChanges","isChanged","_changeList","monitorItem","CHANGE","_instances","observe","listDisposer","intercept","monitorList","changes_1","changeType","disposer","lookUp","disposers","removedCount","REMOVE","added","INSERT","squareDistance","dx","dy","Point","getClosest","testPoint","points","closestPoint","getClosestIndex","amount","normalize","magnitude","getDistance","squared","getMidpoint","direction","make","ImageLayer","images_1","labels_1","attribute_generation_1","generate_default_scene_1","generate_layer_geometry_1","generate_layer_material_1","inject_shader_io_1","mouse_event_manager_1","instance_uniform_manager_1","layer_mouse_events_1","atlas_resource_manager_1","DEFAULT_BACKGROUND_COLOR","Color","isCanvas","createLayer","layerClass","LayerSurface","currentFrame","previousTime","isBufferingAtlas","scenes","willDisposeLayer","initLayer","resourceManager","renderer","didBuffer","drawSceneView","rendererSize","getSize","getPixelRatio","background","SCISSOR_TEST","scissor","clearColor","clearFlags","COLOR","COLOR_BUFFER_BIT","DEPTH","DEPTH_BUFFER_BIT","STENCIL","STENCIL_BUFFER_BIT","setViewport","getViewSize","getViewWorldBounds","setContext","initGL","initMouseManager","initResources","WebGLRenderer","alpha","antialias","preserveDrawingBuffer","autoClear","setFaceCulling","CullFaceNone","setSize","setPixelRatio","setClearColor","defaultSceneElements","sceneViewDepth","sceneOptions","newScene","viewOptions","newView","addLayerToScene","shaderMetrics","eventManagers","atlasResources","layerInitializers","existingLayer","layerId","fitContainer","parentElement","className","setAttribute","containerBox","getBoundingClientRect","box","canvasContext","isString","getElementById"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"three\"), require(\"mobx\"), require(\"bowser\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"three\", \"mobx\", \"bowser\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"voidgl\"] = factory(require(\"three\"), require(\"mobx\"), require(\"bowser\"));\n\telse\n\t\troot[\"voidgl\"] = factory(root[\"three\"], root[\"mobx\"], root[\"bowser\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__3__, __WEBPACK_EXTERNAL_MODULE__103__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 110);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar InstanceBlockIndex;\n(function (InstanceBlockIndex) {\n    InstanceBlockIndex[InstanceBlockIndex[\"ONE\"] = 1] = \"ONE\";\n    InstanceBlockIndex[InstanceBlockIndex[\"TWO\"] = 2] = \"TWO\";\n    InstanceBlockIndex[InstanceBlockIndex[\"THREE\"] = 3] = \"THREE\";\n    InstanceBlockIndex[InstanceBlockIndex[\"FOUR\"] = 4] = \"FOUR\";\n})(InstanceBlockIndex = exports.InstanceBlockIndex || (exports.InstanceBlockIndex = {}));\nvar InstanceAttributeSize;\n(function (InstanceAttributeSize) {\n    InstanceAttributeSize[InstanceAttributeSize[\"ONE\"] = 1] = \"ONE\";\n    InstanceAttributeSize[InstanceAttributeSize[\"TWO\"] = 2] = \"TWO\";\n    InstanceAttributeSize[InstanceAttributeSize[\"THREE\"] = 3] = \"THREE\";\n    InstanceAttributeSize[InstanceAttributeSize[\"FOUR\"] = 4] = \"FOUR\";\n    /** Special case for making instance attributes that can target Atlas resources */\n    InstanceAttributeSize[InstanceAttributeSize[\"ATLAS\"] = 99] = \"ATLAS\";\n})(InstanceAttributeSize = exports.InstanceAttributeSize || (exports.InstanceAttributeSize = {}));\nvar UniformSize;\n(function (UniformSize) {\n    UniformSize[UniformSize[\"ONE\"] = 1] = \"ONE\";\n    UniformSize[UniformSize[\"TWO\"] = 2] = \"TWO\";\n    UniformSize[UniformSize[\"THREE\"] = 3] = \"THREE\";\n    UniformSize[UniformSize[\"FOUR\"] = 4] = \"FOUR\";\n    UniformSize[UniformSize[\"MATRIX3\"] = 9] = \"MATRIX3\";\n    UniformSize[UniformSize[\"MATRIX4\"] = 16] = \"MATRIX4\";\n    UniformSize[UniformSize[\"ATLAS\"] = 99] = \"ATLAS\";\n})(UniformSize = exports.UniformSize || (exports.UniformSize = {}));\nvar VertexAttributeSize;\n(function (VertexAttributeSize) {\n    VertexAttributeSize[VertexAttributeSize[\"ONE\"] = 1] = \"ONE\";\n    VertexAttributeSize[VertexAttributeSize[\"TWO\"] = 2] = \"TWO\";\n    VertexAttributeSize[VertexAttributeSize[\"THREE\"] = 3] = \"THREE\";\n    VertexAttributeSize[VertexAttributeSize[\"FOUR\"] = 4] = \"FOUR\";\n})(VertexAttributeSize = exports.VertexAttributeSize || (exports.VertexAttributeSize = {}));\n/** These are flags for indicating which shaders receive certain injection elements */\nvar ShaderInjectionTarget;\n(function (ShaderInjectionTarget) {\n    /** ONLY the vertex shader will receive the injection */\n    ShaderInjectionTarget[ShaderInjectionTarget[\"VERTEX\"] = 1] = \"VERTEX\";\n    /** ONLY the fragment shader will receive the injection */\n    ShaderInjectionTarget[ShaderInjectionTarget[\"FRAGMENT\"] = 2] = \"FRAGMENT\";\n    /** Both the fragment and vertex shader will receive the injection */\n    ShaderInjectionTarget[ShaderInjectionTarget[\"ALL\"] = 3] = \"ALL\";\n})(ShaderInjectionTarget = exports.ShaderInjectionTarget || (exports.ShaderInjectionTarget = {}));\n/**\n * This is the type of picking assigned to a layer. Each mode has performance and functionality\n * tradeoffs.\n */\nvar PickType;\n(function (PickType) {\n    /** Disable any picking methodology */\n    PickType[PickType[\"NONE\"] = 0] = \"NONE\";\n    /** Pick all instances found underneath the mouse. The Layer must explicitly support this feature. */\n    PickType[PickType[\"ALL\"] = 1] = \"ALL\";\n    /**\n     * NOTE: NOT IMPLEMENTED YET\n     *\n     * Uses highly efficient color rendering method to detect an instance on a pixel by pixel check. Since it is\n     * based on rendering, it will only select the 'visually' top most rendered instance. This means instances can be occluded\n     * by other instances is an instance renders behind another.\n     *\n     * This is vastly more efficient and accurate than ALL. This also will be more readily supported than ALL.\n     */\n    PickType[PickType[\"SINGLE\"] = 2] = \"SINGLE\";\n})(PickType = exports.PickType || (exports.PickType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Class to manage the x, y, width, and height of an object\n *\n * @template T This specifies the data type associated with this shape and is accessible\n *             via the property 'd'\n */\nvar Bounds = /** @class */ (function () {\n    /**\n     * Create a new instance\n     *\n     * @param left  The left side (x coordinate) of the instance\n     * @param right The right side of the instance\n     * @param top The top (y coordinate) of the instance\n     * @param bottom The bottom of the instance\n     */\n    function Bounds(options) {\n        this.x = 0;\n        this.y = 0;\n        this.width = 0;\n        this.height = 0;\n        this.x = options.x || options.left || 0;\n        this.y = options.y || options.top || 0;\n        this.height = options.height || ((options.bottom || 0) - this.y) || 0;\n        this.width = options.width || ((options.right || 0) - this.x) || 0;\n    }\n    Object.defineProperty(Bounds.prototype, \"area\", {\n        get: function () {\n            return this.width * this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"bottom\", {\n        get: function () {\n            return this.y + this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"left\", {\n        get: function () {\n            return this.x;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"mid\", {\n        get: function () {\n            return {\n                x: this.x + this.width / 2.0,\n                y: this.y + this.height / 2.0,\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"right\", {\n        get: function () {\n            return this.x + this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"top\", {\n        get: function () {\n            return this.y;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Bounds.emptyBounds = function () {\n        return new Bounds({\n            height: 0,\n            width: 0,\n            x: 0,\n            y: 0,\n        });\n    };\n    /**\n     * Checks to see if a point is within this bounds object.\n     *\n     * @param point\n     */\n    Bounds.prototype.containsPoint = function (point) {\n        return !(point.x < this.x || point.y < this.y || point.x > this.right || point.y > this.bottom);\n    };\n    /**\n     * Grows this bounds object to cover the space of the provided bounds object\n     *\n     * @param item\n     */\n    Bounds.prototype.encapsulate = function (item) {\n        if (item instanceof Bounds) {\n            if (item.x < this.x) {\n                this.width += Math.abs(item.x - this.x);\n                this.x = item.x;\n            }\n            if (item.y < this.y) {\n                this.height += Math.abs(item.y - this.y);\n                this.y = item.y;\n            }\n            if (this.right < item.right) {\n                this.width += item.right - this.right;\n            }\n            if (this.bottom < item.bottom) {\n                this.height += item.bottom - this.bottom;\n            }\n            return true;\n        }\n        else {\n            if (item.x < this.x) {\n                this.width += this.x - item.x;\n                this.x = item.x;\n            }\n            if (item.x > this.right) {\n                this.width += item.x - this.x;\n            }\n            if (item.y < this.y) {\n                this.height += this.y - item.y;\n                this.y = item.y;\n            }\n            if (item.y > this.bottom) {\n                this.height += item.y - this.y;\n            }\n            return true;\n        }\n    };\n    /**\n     * Checks to see if the provided bounds object could fit within the dimensions of this bounds object\n     * This ignores position and just checks width and height.\n     *\n     * @param bounds\n     *\n     * @return {number} 0 if it doesn't fit. 1 if it fits perfectly. 2 if it just fits.\n     */\n    Bounds.prototype.fits = function (bounds) {\n        // If the same, the bounds fits exactly into this bounds\n        if (this.width === bounds.width && this.height === bounds.height) {\n            return 1;\n        }\n        // The bounds can fit within this, then it just fits\n        if (this.width >= bounds.width && this.height >= bounds.height) {\n            return 2;\n        }\n        // Otherwise, the bounds does not fit within this bounds\n        return 0;\n    };\n    /**\n     * Checks if a bounds object intersects another bounds object.\n     *\n     * @param bounds\n     */\n    Bounds.prototype.hitBounds = function (bounds) {\n        return !(this.right < bounds.x || this.x > bounds.right || this.bottom < bounds.y || this.y > bounds.height);\n    };\n    /**\n     * Sees if the provided bounds is completely within this bounds object. Unlike fits() this takes\n     * position into account.\n     *\n     * @param bounds\n     */\n    Bounds.prototype.isInside = function (bounds) {\n        return this.x >= bounds.x && this.right <= bounds.right && this.y >= bounds.y && this.bottom <= bounds.bottom;\n    };\n    /**\n     * Easy readout of this Bounds object.\n     */\n    Bounds.prototype.toString = function () {\n        return \"{x: \" + this.x + \" y:\" + this.y + \" w:\" + this.width + \" h:\" + this.height + \"}\";\n    };\n    return Bounds;\n}());\nexports.Bounds = Bounds;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AnchorType;\n(function (AnchorType) {\n    AnchorType[AnchorType[\"BottomLeft\"] = 0] = \"BottomLeft\";\n    AnchorType[AnchorType[\"BottomMiddle\"] = 1] = \"BottomMiddle\";\n    AnchorType[AnchorType[\"BottomRight\"] = 2] = \"BottomRight\";\n    AnchorType[AnchorType[\"Custom\"] = 3] = \"Custom\";\n    AnchorType[AnchorType[\"Middle\"] = 4] = \"Middle\";\n    AnchorType[AnchorType[\"MiddleLeft\"] = 5] = \"MiddleLeft\";\n    AnchorType[AnchorType[\"MiddleRight\"] = 6] = \"MiddleRight\";\n    AnchorType[AnchorType[\"TopLeft\"] = 7] = \"TopLeft\";\n    AnchorType[AnchorType[\"TopMiddle\"] = 8] = \"TopMiddle\";\n    AnchorType[AnchorType[\"TopRight\"] = 9] = \"TopRight\";\n})(AnchorType = exports.AnchorType || (exports.AnchorType = {}));\nvar ScaleType;\n(function (ScaleType) {\n    /** The size of the image will be tied to world space */\n    ScaleType[ScaleType[\"ALWAYS\"] = 1] = \"ALWAYS\";\n    /** The image will scale to it's font size then stop growing */\n    ScaleType[ScaleType[\"BOUND_MAX\"] = 2] = \"BOUND_MAX\";\n    /** The image will alwyas retain it's font size on screen */\n    ScaleType[ScaleType[\"NEVER\"] = 3] = \"NEVER\";\n})(ScaleType = exports.ScaleType || (exports.ScaleType = {}));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./chart-camera\"));\n__export(require(\"./data-provider\"));\n__export(require(\"./instance\"));\n__export(require(\"./mouse\"));\n__export(require(\"./reference-camera\"));\n__export(require(\"./shader-templating\"));\n__export(require(\"./tracked-quad-tree\"));\n__export(require(\"./uid\"));\n__export(require(\"./vector\"));\n__export(require(\"./view-camera\"));\n__export(require(\"./webgl-stat\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar types_1 = require(\"../types\");\nvar util_1 = require(\"../util\");\nvar identify_by_key_1 = require(\"../util/identify-by-key\");\nvar instance_diff_manager_1 = require(\"./instance-diff-manager\");\nvar layer_interaction_handler_1 = require(\"./layer-interaction-handler\");\n/**\n * A base class for generating drawable content\n */\nvar Layer = /** @class */ (function (_super) {\n    __extends(Layer, _super);\n    function Layer(props) {\n        var _this = \n        // We do not establish bounds in the layer. The surface manager will take care of that for us\n        // After associating the layer with the view it is a part of.\n        _super.call(this, props) || this;\n        /** This determines the drawing order of the layer within it's scene */\n        _this.depth = 0;\n        /** A lookup fo an instance by it's ID */\n        _this.instanceById = new Map();\n        /** Provides the number of vertices a single instance spans */\n        _this.instanceVertexCount = 0;\n        // Keep our props within the layer\n        _this.props = Object.assign({}, Layer.defaultProps || {}, props);\n        // Set up the pick type for the layer\n        var _a = _this.props.picking, picking = _a === void 0 ? types_1.PickType.NONE : _a;\n        // If ALL is specified we set up QUAD tree picking for our instances\n        if (picking === types_1.PickType.ALL) {\n            var pickingMethods = _this.getInstancePickingMethods();\n            _this.picking = {\n                hitTest: pickingMethods.hitTest,\n                quadTree: new util_1.TrackedQuadTree(0, 1, 0, 1, pickingMethods.boundsAccessor),\n                type: types_1.PickType.ALL,\n            };\n        }\n        _this.diffManager = new instance_diff_manager_1.InstanceDiffManager(_this);\n        _this.diffProcessor = _this.diffManager.getDiffProcessor();\n        _this.interactions = new layer_interaction_handler_1.LayerInteractionHandler(_this);\n        return _this;\n    }\n    /**\n     * Invalidate and free all resources assocated with this layer.\n     */\n    Layer.prototype.destroy = function () {\n        this.uniformManager.destroy();\n    };\n    Layer.prototype.didUpdateProps = function () {\n        /** LIFECYCLE */\n    };\n    /**\n     * This is where global uniforms should update their values. Executes every frame.\n     */\n    Layer.prototype.draw = function () {\n        var uniform;\n        var value;\n        // Consume the diffs for the instances to update each element\n        var changeList = this.props.data.changeList;\n        // Make some holder variables to prevent declaration within the loop\n        var change, instance, uniforms;\n        // Fast ref to the processor and manager\n        var diffProcessor = this.diffProcessor;\n        var diffManager = this.diffManager;\n        for (var i = 0, end = changeList.length; i < end; ++i) {\n            change = changeList[i];\n            instance = change[0];\n            uniforms = this.uniformManager.getUniforms(instance);\n            // The diff type is change[1] which we use to find the diff processing method to use\n            diffProcessor[change[1]](diffManager, instance, uniforms);\n        }\n        // Indicate the diffs are consumed\n        this.props.data.resolve();\n        // Loop through the uniforms that are across all instances\n        for (var i = 0, end = this.uniforms.length; i < end; ++i) {\n            uniform = this.uniforms[i];\n            value = uniform.update(uniform);\n            uniform.materialUniforms.forEach(function (materialUniform) { return materialUniform.value = value; });\n        }\n    };\n    /**\n     * This method is for layers to implement to specify how the bounds for an instance are retrieved or\n     * calculated and how the Instance interacts with a point. This is REQUIRED to support PickType.ALL on the layer.\n     */\n    Layer.prototype.getInstancePickingMethods = function () {\n        throw new Error('When picking is set to PickType.ALL, the layer MUST have this method implemented; otherwise, the layer is incompatible with this picking mode.');\n    };\n    /**\n     * The type of Three model as well as the preferred draw mode associated with it.\n     */\n    Layer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TrianglesDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    /**\n     * The options for a three material without uniforms.\n     */\n    Layer.prototype.getMaterialOptions = function () {\n        return {};\n    };\n    /**\n     * This sets up all of the data bindings that will transport data from the CPU\n     * to the Shader on the GPU.\n     *\n     * Instance Attributes: These are very frequently changing attributes\n     * Vertex Attributes: These are attributes that should be static on a vertex. Conisder it very costly to update.\n     *                    The only time making these modifieable is in the event of GL_POINTS.\n     * Uniforms: These set up the uniforms for the layer, thus having all normal implications of a uniform. Global\n     *           across the fragment and vertex shaders and can be modified with little consequence.\n     */\n    Layer.prototype.initShader = function () {\n        return {\n            fs: require('../shaders/base/no-op.fs'),\n            instanceAttributes: [],\n            uniforms: [],\n            vertexAttributes: [],\n            vertexCount: 0,\n            vs: require('../shaders/base/no-op.vs'),\n        };\n    };\n    /**\n     * Helper method for making an instance attribute. Depending on set up, this makes creating elements\n     * have better documentation when typing out the elements.\n     */\n    Layer.prototype.makeInstanceAttribute = function (block, blockIndex, name, size, update, atlas) {\n        return {\n            atlas: atlas,\n            block: block,\n            blockIndex: blockIndex,\n            name: name,\n            size: size,\n            update: update,\n        };\n    };\n    /**\n     * Helper method for making a uniform type. Depending on set up, this makes creating elements\n     * have better documentation when typing out the elements.\n     */\n    Layer.prototype.makeUniform = function (name, size, update, shaderInjection, qualifier) {\n        return {\n            name: name,\n            qualifier: qualifier,\n            shaderInjection: shaderInjection,\n            size: size,\n            update: update,\n        };\n    };\n    Layer.prototype.willUpdateInstances = function (changes) {\n        // HOOK: Simple hook so a class can review all of it's changed instances before\n        //       Getting applied to the Shader IO\n    };\n    Layer.prototype.willUpdateProps = function (newProps) {\n        /** LIFECYCLE */\n    };\n    Layer.prototype.didUpdate = function () {\n        this.props.data.resolve();\n    };\n    Layer.defaultProps = {};\n    return Layer;\n}(identify_by_key_1.IdentifyByKey));\nexports.Layer = Layer;\n","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar Instance = /** @class */ (function () {\n    function Instance(options) {\n        /** This is an internal easing object to track properties for automated easing */\n        this._easing = new Map();\n        this._id = options.id;\n        this.active = options.active || this.active;\n    }\n    /**\n     * The system will call this on the instance when it believes the instance may be\n     * harboring resources that are not released.\n     */\n    Instance.prototype.destroy = function () {\n        // Generally a No-op\n    };\n    Object.defineProperty(Instance.prototype, \"easing\", {\n        get: function () {\n            return this._easing;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Instance.prototype, \"id\", {\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        mobx_1.observable\n    ], Instance.prototype, \"active\", void 0);\n    return Instance;\n}());\nexports.Instance = Instance;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./bounds\"));\n__export(require(\"./point\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./atlas\"));\n__export(require(\"./atlas-manager\"));\n__export(require(\"./color-atlas-resource\"));\n__export(require(\"./color-rasterizer\"));\n__export(require(\"./image-atlas-resource\"));\n__export(require(\"./image-rasterizer\"));\n__export(require(\"./label-atlas-resource\"));\n__export(require(\"./label-rasterizer\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This is an object that specifically is generated with a 'key' option that can never\n * be modified on the object and is identified henceforth with the key applied as the\n * 'id' of the object.\n */\nvar IdentifyByKey = /** @class */ (function () {\n    function IdentifyByKey(options) {\n        this.key = options.key;\n    }\n    Object.defineProperty(IdentifyByKey.prototype, \"id\", {\n        /** READONLY id of the object. */\n        get: function () {\n            return this.key;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IdentifyByKey;\n}());\nexports.IdentifyByKey = IdentifyByKey;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EdgeScaleType;\n(function (EdgeScaleType) {\n    /** All dimensions are within world space */\n    EdgeScaleType[EdgeScaleType[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * The control points are a delta from the end points within screen space, and the line thickness is within\n     * screen space as well all measured in pixels. The scaleFactor scales both thickness and control delta values.\n     * The endpoints remain in world space\n     */\n    EdgeScaleType[EdgeScaleType[\"SCREEN_CURVE\"] = 1] = \"SCREEN_CURVE\";\n})(EdgeScaleType = exports.EdgeScaleType || (exports.EdgeScaleType = {}));\nvar EdgeType;\n(function (EdgeType) {\n    /** Makes a straight edge with no curve */\n    EdgeType[EdgeType[\"LINE\"] = 0] = \"LINE\";\n    /** Makes a single control point Bezier curve */\n    EdgeType[EdgeType[\"BEZIER\"] = 1] = \"BEZIER\";\n    /** Makes a two control point bezier curve */\n    EdgeType[EdgeType[\"BEZIER2\"] = 2] = \"BEZIER2\";\n})(EdgeType = exports.EdgeType || (exports.EdgeType = {}));\n/**\n * This is the broadphase control for edges to help handle quad tree adjustments for picking. If the edge scale type\n * is NONE, you don't need to utilize this. If you use screen space and have camera distortions along an axis, this\n * can help greatly.\n */\nvar EdgeBroadphase;\n(function (EdgeBroadphase) {\n    /** Use this if the broad phase detection should use both width and height of the edge's bounds */\n    EdgeBroadphase[EdgeBroadphase[\"ALL\"] = 0] = \"ALL\";\n    /** Use this to ensure a test against the edge is performed if the mouse aligns with it on the x-axis */\n    EdgeBroadphase[EdgeBroadphase[\"PASS_Y\"] = 1] = \"PASS_Y\";\n    /** Use this to ensure a test against the edge is performed if the mouse aligns with it on the y axis */\n    EdgeBroadphase[EdgeBroadphase[\"PASS_X\"] = 2] = \"PASS_X\";\n})(EdgeBroadphase = exports.EdgeBroadphase || (exports.EdgeBroadphase = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Classes can extend this and override the methods to respond to events.\n */\nvar EventManager = /** @class */ (function () {\n    function EventManager() {\n    }\n    /**\n     * This retrieves the projections for the view specified by the provided viewId.\n     */\n    EventManager.prototype.getProjection = function (viewId) {\n        return this.mouseManager.getView(viewId);\n    };\n    /**\n     * This retrieves the actual view for the view specified by the provided viewId.\n     */\n    EventManager.prototype.getView = function (viewId) {\n        return (this.mouseManager && this.mouseManager.getView(viewId)) || null;\n    };\n    /**\n     * This retrieves the screen bounds for the view specified by the provided viewId.\n     */\n    EventManager.prototype.getViewScreenBounds = function (viewId) {\n        var view = this.mouseManager.getView(viewId);\n        if (view) {\n            return view.screenBounds;\n        }\n        return null;\n    };\n    /**\n     * This is used internally which provides the parent MouseEventManager via the param mouseManager for this\n     * EventManager.\n     */\n    EventManager.prototype.setMouseManager = function (mouseManager) {\n        this.mouseManager = mouseManager;\n    };\n    return EventManager;\n}());\nexports.EventManager = EventManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nfunction isMesh(val) {\n    return Boolean(val.isMesh);\n}\nfunction generateLayerModel(layer, geometry, material) {\n    var modelInfo = layer.getModelType();\n    var model = new modelInfo.modelType(geometry, material);\n    if (isMesh(model)) {\n        model.drawMode = modelInfo.drawMode === undefined ? Three.TriangleStripDrawMode : modelInfo.drawMode;\n    }\n    return model;\n}\nexports.generateLayerModel = generateLayerModel;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar absolute_position_1 = require(\"../primitives/absolute-position\");\nvar bounds_1 = require(\"../primitives/bounds\");\nvar identify_by_key_1 = require(\"../util/identify-by-key\");\nvar view_camera_1 = require(\"../util/view-camera\");\nvar ClearFlags;\n(function (ClearFlags) {\n    ClearFlags[ClearFlags[\"COLOR\"] = 1] = \"COLOR\";\n    ClearFlags[ClearFlags[\"DEPTH\"] = 2] = \"DEPTH\";\n    ClearFlags[ClearFlags[\"STENCIL\"] = 4] = \"STENCIL\";\n})(ClearFlags = exports.ClearFlags || (exports.ClearFlags = {}));\nfunction isOrthographic(val) {\n    return 'left' in val;\n}\n/**\n * This defines a view of a scene\n */\nvar View = /** @class */ (function (_super) {\n    __extends(View, _super);\n    function View(options) {\n        var _this = _super.call(this, options) || this;\n        /**\n         * This is the depth of the view. The higher the depth represents which layer is on top.\n         * Zero always represents the default view.\n         */\n        _this.depth = 0;\n        /** This is set to ensure the projections that happen properly translates the pixel ratio to normal Web coordinates */\n        _this.pixelRatio = window.devicePixelRatio;\n        Object.assign(_this, options);\n        return _this;\n    }\n    View.prototype.screenToPixelSpace = function (point, out) {\n        var p = out || { x: 0, y: 0 };\n        p.x = point.x * this.pixelRatio;\n        p.y = point.y * this.pixelRatio;\n        return p;\n    };\n    View.prototype.pixelSpaceToScreen = function (point, out) {\n        var p = out || { x: 0, y: 0 };\n        p.x = point.x / this.pixelRatio;\n        p.y = point.y / this.pixelRatio;\n        return p;\n    };\n    View.prototype.screenToView = function (point, out) {\n        var p = this.screenToPixelSpace(point, out);\n        p.x = p.x - this.viewBounds.x;\n        p.y = p.y - this.viewBounds.y;\n        return p;\n    };\n    View.prototype.viewToScreen = function (point, out) {\n        var p = { x: 0, y: 0 };\n        p.x = point.x + this.viewBounds.x;\n        p.y = point.y + this.viewBounds.y;\n        return this.pixelSpaceToScreen(p, out);\n    };\n    View.prototype.screenToWorld = function (point, out) {\n        var view = this.pixelSpaceToScreen(this.screenToView(point));\n        var world = out || { x: 0, y: 0 };\n        world.x = (view.x - (this.camera.offset[0] * this.camera.scale[0])) / this.camera.scale[0];\n        world.y = (view.y - (this.camera.offset[1] * this.camera.scale[1])) / this.camera.scale[1];\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        return world;\n    };\n    View.prototype.worldToScreen = function (point, out) {\n        var screen = { x: 0, y: 0 };\n        // Calculate from the camera to view space\n        screen.x = ((point.x * this.camera.scale[0]) + (this.camera.offset[0] * this.camera.scale[0])) * this.pixelRatio;\n        screen.y = ((point.y * this.camera.scale[1]) + (this.camera.offset[1] * this.camera.scale[1])) * this.pixelRatio;\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        // Convert from view to screen space\n        return this.viewToScreen(screen, out);\n    };\n    View.prototype.viewToWorld = function (point, out) {\n        var world = out || { x: 0, y: 0 };\n        var screen = this.pixelSpaceToScreen(point);\n        world.x = (screen.x - (this.camera.offset[0] * this.camera.scale[0])) / this.camera.scale[0];\n        world.y = (screen.y - (this.camera.offset[1] * this.camera.scale[1])) / this.camera.scale[1];\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        return world;\n    };\n    View.prototype.worldToView = function (point, out) {\n        var screen = out || { x: 0, y: 0 };\n        // Calculate from the camera to view space\n        screen.x = (point.x * this.camera.scale[0]) + (this.camera.offset[0] * this.camera.scale[0]);\n        screen.y = (point.y * this.camera.scale[1]) + (this.camera.offset[1] * this.camera.scale[1]);\n        // If this is a custom camera, we must actually project our world point to the screen\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CUSTOM) {\n            console.warn('Custom View Camera projections not supported yet');\n        }\n        return screen;\n    };\n    /**\n     * This operation makes sure we have the view camera adjusted to the new viewport's needs.\n     * For default behavior this ensures that the coordinate system has no distortion, orthographic,\n     * top left as 0,0 with +y axis pointing down.\n     */\n    View.prototype.fitViewtoViewport = function (surfaceDimensions) {\n        if (this.viewCamera.type === view_camera_1.ViewCameraType.CONTROLLED && isOrthographic(this.viewCamera.baseCamera)) {\n            var viewBounds = absolute_position_1.getAbsolutePositionBounds(this.viewport, surfaceDimensions, this.pixelRatio);\n            var width = viewBounds.width;\n            var height = viewBounds.height;\n            var viewport = {\n                bottom: -height / 2,\n                far: 10000000,\n                left: -width / 2,\n                near: -100,\n                right: width / 2,\n                top: height / 2,\n            };\n            var scaleX = 1;\n            var scaleY = 1;\n            var camera = this.viewCamera.baseCamera;\n            Object.assign(camera, viewport);\n            camera.position.set(-viewBounds.width / 2.0 * scaleX, viewBounds.height / 2.0 * scaleY, camera.position.z);\n            camera.scale.set(scaleX, -scaleY, 1.0);\n            camera.updateMatrix();\n            camera.updateMatrixWorld(true);\n            camera.updateProjectionMatrix();\n            this.viewBounds = viewBounds;\n            this.viewBounds.data = this;\n            this.screenBounds = new bounds_1.Bounds({\n                height: this.viewBounds.height / this.pixelRatio,\n                width: this.viewBounds.width / this.pixelRatio,\n                x: this.viewBounds.x / this.pixelRatio,\n                y: this.viewBounds.y / this.pixelRatio,\n            });\n        }\n        else if (!isOrthographic(this.viewCamera.baseCamera)) {\n            console.warn('Fit to viewport does not support non-orthographic cameras as a default behavior.');\n        }\n    };\n    View.DEFAULT_VIEW_ID = '__default__';\n    return View;\n}(identify_by_key_1.IdentifyByKey));\nexports.View = View;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar identify_by_key_1 = require(\"../util/identify-by-key\");\nfunction sortByDepth(a, b) {\n    return a.depth - b.depth;\n}\n/**\n * This defines a scene to which layers are added to. It also tracks the views that this scene\n * is rendered with.\n */\nvar Scene = /** @class */ (function (_super) {\n    __extends(Scene, _super);\n    function Scene(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the three scene which actually sets up the rendering objects */\n        _this.container = new Three.Scene();\n        /** This is all of the layers tracked to the scene */\n        _this.layers = [];\n        /** This indicates the sort is dirty for a set of layers */\n        _this.sortIsDirty = false;\n        /** This is the view */\n        _this.viewById = new Map();\n        _this.container.frustumCulled = false;\n        _this.container.autoUpdate = false;\n        return _this;\n    }\n    /**\n     * Adds a layer to the scene with the current view setting the layer contains.\n     * The layer can not jump between views or scenes. You must destroy and reconstruct\n     * the layer.\n     */\n    Scene.prototype.addLayer = function (layer) {\n        // Add the layer to the list of layers under the view\n        this.layers.push(layer);\n        this.sortIsDirty = true;\n    };\n    /**\n     * This adds a view to this scene to be used by the scene\n     */\n    Scene.prototype.addView = function (view) {\n        this.viewById.set(view.id, view);\n    };\n    /**\n     * Release any resources this may be hanging onto\n     */\n    Scene.prototype.destroy = function () {\n        delete this.container;\n    };\n    /**\n     * Removes a layer from the scene. No resort is needed as remove operations\n     * do not adjust the sorting order.\n     */\n    Scene.prototype.removeLayer = function (layer) {\n        if (this.layers) {\n            var index = this.layers.indexOf(layer);\n            if (index >= 0) {\n                this.layers.splice(index, 1);\n                return;\n            }\n        }\n        console.warn('Could not remove a layer from the scene as the layer was not a part of the scene to start. Scene:', this.id, 'Layer:', layer.id);\n    };\n    Scene.prototype.sortLayers = function () {\n        if (this.sortIsDirty) {\n            this.layers.sort(sortByDepth);\n        }\n    };\n    Scene.DEFAULT_SCENE_ID = '__default__';\n    return Scene;\n}(identify_by_key_1.IdentifyByKey));\nexports.Scene = Scene;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_atlas_resource_1 = require(\"./base-atlas-resource\");\nvar LabelAtlasResource = /** @class */ (function (_super) {\n    __extends(LabelAtlasResource, _super);\n    function LabelAtlasResource(label) {\n        var _this = _super.call(this) || this;\n        _this.label = label;\n        return _this;\n    }\n    return LabelAtlasResource;\n}(base_atlas_resource_1.BaseAtlasResource));\nexports.LabelAtlasResource = LabelAtlasResource;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BaseAtlasResource = /** @class */ (function () {\n    function BaseAtlasResource() {\n        /**\n         * This sets the ratserization to be a larger value on the texture than is rendered within\n         * the world space. This allows for techniques to be applied in the shaders to incorporate super sampling\n         * or other processes which require higher levels of resolution.\n         *\n         * The default is 1 for a 1 to 1 sample scaling to world space rendering\n         */\n        this.sampleScale = 1;\n    }\n    return BaseAtlasResource;\n}());\nexports.BaseAtlasResource = BaseAtlasResource;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ViewCameraType;\n(function (ViewCameraType) {\n    /**\n     * Indicates a camera that is forced by the system to follow:\n     * - Match width and height of the view port\n     * - +y axis points downward\n     * - gl origin is at the top left of the screen\n     */\n    ViewCameraType[ViewCameraType[\"CONTROLLED\"] = 0] = \"CONTROLLED\";\n    /**\n     * This allows a custom view camera to be applied to the scene.\n     */\n    ViewCameraType[ViewCameraType[\"CUSTOM\"] = 1] = \"CUSTOM\";\n})(ViewCameraType = exports.ViewCameraType || (exports.ViewCameraType = {}));\n/**\n * This is a camera that controls the view projection matrix. This is a much more\n * complicated way to handle views that is better suited for handling 3D applications\n * and is very overkill for most 2D charting systems. If you are working purely with\n * 2D components, it's recommended to leave this as a CONTROLLED camera and utilize\n * the ChartCamera for most of your needs.\n */\nvar ViewCamera = /** @class */ (function () {\n    function ViewCamera() {\n        this.type = ViewCameraType.CONTROLLED;\n    }\n    return ViewCamera;\n}());\nexports.ViewCamera = ViewCamera;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar sqrt = Math.sqrt;\nfunction add1(left, right) {\n    return [\n        left[0] + right[0],\n    ];\n}\nexports.add1 = add1;\nfunction scale1(vec, scale) {\n    return [\n        vec[0] * scale,\n    ];\n}\nexports.scale1 = scale1;\nfunction subtract1(left, right) {\n    return [\n        left[0] - right[0],\n    ];\n}\nexports.subtract1 = subtract1;\nfunction multiply1(left, right) {\n    return [\n        left[0] * right[0],\n    ];\n}\nexports.multiply1 = multiply1;\nfunction dot1(left, right) {\n    return (left[0] * right[0]);\n}\nexports.dot1 = dot1;\nfunction linear1(start, end, t) {\n    return scale1(add1(subtract1(end, start), start), t);\n}\nexports.linear1 = linear1;\nfunction length1(start) {\n    return sqrt(dot1(start, start));\n}\nexports.length1 = length1;\nfunction add2(left, right) {\n    return [\n        left[0] + right[0],\n        left[1] + right[1],\n    ];\n}\nexports.add2 = add2;\nfunction scale2(left, scale) {\n    return [\n        left[0] * scale,\n        left[1] * scale,\n    ];\n}\nexports.scale2 = scale2;\nfunction subtract2(left, right) {\n    return [\n        left[0] - right[0],\n        left[1] - right[1],\n    ];\n}\nexports.subtract2 = subtract2;\nfunction multiply2(left, right) {\n    return [\n        left[0] * right[0],\n        left[1] * right[1],\n    ];\n}\nexports.multiply2 = multiply2;\nfunction dot2(left, right) {\n    return (left[0] * right[0] +\n        left[1] * right[1]);\n}\nexports.dot2 = dot2;\nfunction linear2(start, end, t) {\n    return scale2(add2(subtract2(end, start), start), t);\n}\nexports.linear2 = linear2;\nfunction length2(start) {\n    return sqrt(dot2(start, start));\n}\nexports.length2 = length2;\nfunction add3(left, right) {\n    return [\n        left[0] + right[0],\n        left[1] + right[1],\n        left[2] + right[2],\n    ];\n}\nexports.add3 = add3;\nfunction scale3(left, scale) {\n    return [\n        left[0] * scale,\n        left[1] * scale,\n        left[2] * scale,\n    ];\n}\nexports.scale3 = scale3;\nfunction subtract3(left, right) {\n    return [\n        left[0] - right[0],\n        left[1] - right[1],\n        left[2] - right[2],\n    ];\n}\nexports.subtract3 = subtract3;\nfunction multiply3(left, right) {\n    return [\n        left[0] * right[0],\n        left[1] * right[1],\n        left[2] * right[2],\n    ];\n}\nexports.multiply3 = multiply3;\nfunction linear3(start, end, t) {\n    return scale3(add3(subtract3(end, start), start), t);\n}\nexports.linear3 = linear3;\nfunction length3(start) {\n    return sqrt(dot3(start, start));\n}\nexports.length3 = length3;\nfunction dot3(left, right) {\n    return (left[0] * right[0] +\n        left[1] * right[1] +\n        left[2] * right[2]);\n}\nexports.dot3 = dot3;\nfunction add4(left, right) {\n    return [\n        left[0] + right[0],\n        left[1] + right[1],\n        left[2] + right[2],\n        left[3] + right[3],\n    ];\n}\nexports.add4 = add4;\nfunction scale4(left, scale) {\n    return [\n        left[0] * scale,\n        left[1] * scale,\n        left[2] * scale,\n        left[3] * scale,\n    ];\n}\nexports.scale4 = scale4;\nfunction subtract4(left, right) {\n    return [\n        left[0] - right[0],\n        left[1] - right[1],\n        left[2] - right[2],\n        left[3] - right[3],\n    ];\n}\nexports.subtract4 = subtract4;\nfunction multiply4(left, right) {\n    return [\n        left[0] * right[0],\n        left[1] * right[1],\n        left[2] * right[2],\n        left[3] * right[3],\n    ];\n}\nexports.multiply4 = multiply4;\nfunction dot4(left, right) {\n    return (left[0] * right[0] +\n        left[1] * right[1] +\n        left[2] * right[2] +\n        left[3] * right[3]);\n}\nexports.dot4 = dot4;\nfunction linear4(start, end, t) {\n    return scale4(add4(subtract4(end, start), start), t);\n}\nexports.linear4 = linear4;\nfunction length4(start) {\n    return sqrt(dot4(start, start));\n}\nexports.length4 = length4;\nfunction VecMath(vec) {\n    var methods;\n    if (vec.length === 1) {\n        methods = {\n            add: add1,\n            dot: dot1,\n            length: length1,\n            linear: linear1,\n            multiply: multiply1,\n            scale: scale1,\n            subtract: subtract1,\n        };\n        return methods;\n    }\n    else if (vec.length === 2) {\n        methods = {\n            add: add2,\n            dot: dot2,\n            length: length2,\n            linear: linear2,\n            multiply: multiply2,\n            scale: scale2,\n            subtract: subtract2,\n        };\n        return methods;\n    }\n    else if (vec.length === 3) {\n        methods = {\n            add: add3,\n            dot: dot3,\n            length: length3,\n            linear: linear3,\n            multiply: multiply3,\n            scale: scale3,\n            subtract: subtract3,\n        };\n        return methods;\n    }\n    methods = {\n        add: add4,\n        dot: dot4,\n        length: length4,\n        linear: linear4,\n        multiply: multiply4,\n        scale: scale4,\n        subtract: subtract4,\n    };\n    return methods;\n}\nexports.VecMath = VecMath;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction shaderTemplate(shader, options, required) {\n    var matched = new Map();\n    var noValueProvided = new Map();\n    var notFound = new Map();\n    var shaderOptions = new Map();\n    var shaderResults = shader.replace(/\\$\\{(\\w+)\\}/g, function (x, match) {\n        shaderOptions.set(match, (shaderOptions.get(match) || 0) + 1);\n        if (match in options) {\n            matched.set(match, (matched.get(match) || 0) + 1);\n            return options[match];\n        }\n        noValueProvided.set(match, (noValueProvided.get(match) || 0) + 1);\n        return '';\n    });\n    Object.keys(options).forEach(function (option) {\n        if (!matched.get(option)) {\n            notFound.set(option, (notFound.get(option) || 0) + 1);\n        }\n    });\n    // Provide metrics\n    var results = {\n        resolvedShaderOptions: matched,\n        shader: shaderResults,\n        shaderProvidedOptions: shaderOptions,\n        unresolvedProvidedOptions: notFound,\n        unresolvedShaderOptions: noValueProvided,\n    };\n    if (required) {\n        // This will ensure that BOTH the parameter input AND the shader provided the required options.\n        required.values.forEach(function (require) {\n            if (results.unresolvedProvidedOptions.get(require)) {\n                console.error(required.name + \": Could not resolve all the required inputs. Input:\", require);\n            }\n            else if (results.unresolvedShaderOptions.get(require)) {\n                console.error(required.name + \": A required option was not provided in the options parameter. Option:\", require);\n            }\n            else if (!results.resolvedShaderOptions.get(require)) {\n                console.error(required.name + \": A required option was not provided in the options parameter. Option:\", require);\n            }\n        });\n    }\n    return results;\n}\nexports.shaderTemplate = shaderTemplate;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chartCameraUID = 0;\n/**\n * Quick method for applying a source array to a target array. This\n * ensures the arrays both are valid and applies the values without just making\n * a copy of the source.\n */\nfunction applyArray(target, source) {\n    target && source && target.splice.apply(target, [0, source.length].concat(source));\n}\nvar ChartCamera = /** @class */ (function () {\n    function ChartCamera(options) {\n        /** Internally set id */\n        this._id = chartCameraUID++;\n        /** Represents how much an element should be offset in world space */\n        this.offset = [0, 0, 0];\n        /** Represents how scaled each axis should be in world space */\n        this.scale = [1, 1, 1];\n        if (options) {\n            applyArray(this.offset, options.offset);\n            applyArray(this.scale, options.scale);\n        }\n    }\n    Object.defineProperty(ChartCamera.prototype, \"id\", {\n        /** Keep id as readonly */\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the location of the camera by adjusting the offsets to match.\n     */\n    ChartCamera.prototype.position = function (location) {\n        this.offset = location.slice(0);\n    };\n    return ChartCamera;\n}());\nexports.ChartCamera = ChartCamera;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mouse_1 = require(\"../util/mouse\");\nvar quad_tree_1 = require(\"../util/quad-tree\");\n// If a mouse up after a mouse down happens before this many milliseconds, a click gesture will happen\nvar VALID_CLICK_DELAY = 1E3;\nfunction sortByDepth(a, b) {\n    return b.data.depth - a.data.depth;\n}\nfunction isDefined(val) {\n    return Boolean(val);\n}\n/**\n * This manages mouse events on the provided canvas and provides some higher level\n * interactions with the surface.\n */\nvar MouseEventManager = /** @class */ (function () {\n    function MouseEventManager(canvas, views, controllers, handlesWheelEvents) {\n        var _this = this;\n        this.eventCleanup = [];\n        /**\n         * This flag is set when the system is waiting to render the elements to establish bounds.\n         * No Mouse interations will happen while this is set to true.\n         */\n        this._waitingForRender = true;\n        /**\n         * Retrieves the views underneath the mouse with the top most view as\n         * the first view in the list.\n         */\n        this.getViewsUnderMouse = function (mouse) {\n            // Find the views the mouse has interacted with\n            var hitViews = _this.quadTree.query(mouse);\n            // Sort them by depth\n            hitViews.sort(sortByDepth);\n            return hitViews;\n        };\n        /**\n         * When the renderer is resized, we must reform our quad tree\n         */\n        this.resize = function () {\n            _this._waitingForRender = true;\n        };\n        this.context = canvas;\n        this.setViews(views);\n        this.setControllers(controllers);\n        this.addContextListeners(handlesWheelEvents);\n    }\n    Object.defineProperty(MouseEventManager.prototype, \"waitingForRender\", {\n        get: function () {\n            return this._waitingForRender;\n        },\n        set: function (val) {\n            this._waitingForRender = val;\n            // When we're no longer waiting for render to occur we update all of our views in the quad tree\n            if (!val) {\n                this.quadTree = new quad_tree_1.QuadTree(0, 0, 0, 0);\n                this.quadTree.addAll(this.views.map(function (v) { return v.bounds; }).filter(isDefined));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This sets up the DOM events to listen to the events that are broadcasted by the canvas.\n     * These events are set up in such a way as to continue some events when the user\n     * drags the mouse off of the browser or off the canvas without releasing.\n     */\n    MouseEventManager.prototype.addContextListeners = function (handlesWheelEvents) {\n        var _this = this;\n        var element = this.context;\n        var startView = null;\n        var startPosition = { x: 0, y: 0 };\n        if (handlesWheelEvents) {\n            var wheelHandler = function (event) {\n                if (!startView)\n                    return;\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                var wheel = _this.makeWheel(event);\n                _this.controllers.forEach(function (controller) {\n                    controller.handleWheel(interaction, wheel);\n                });\n                event.stopPropagation();\n                event.preventDefault();\n            };\n            if ('onwheel' in element) {\n                element.onwheel = wheelHandler;\n            }\n            if ('addEventListener' in element) {\n                element.addEventListener('DOMMouseScroll', wheelHandler);\n                this.eventCleanup.push(['DOMMouseScroll', wheelHandler]);\n            }\n        }\n        element.onmouseleave = function (event) {\n            // No interactions while waiting for the render to update\n            if (_this.waitingForRender)\n                return;\n            if (!startView)\n                return;\n            var mouse = mouse_1.eventElementPosition(event, element);\n            var interaction = _this.makeInteraction(mouse, startPosition, startView);\n            _this.controllers.forEach(function (controller) {\n                controller.handleMouseOut(interaction);\n            });\n        };\n        element.onmousemove = function (event) {\n            // No interactions while waiting for the render to update\n            if (_this.waitingForRender)\n                return;\n            if (!startView)\n                return;\n            var mouse = mouse_1.eventElementPosition(event, element);\n            var interaction = _this.makeInteraction(mouse, startPosition, startView);\n            _this.controllers.forEach(function (controller) {\n                controller.handleMouseMove(interaction);\n            });\n        };\n        element.onmousedown = function (event) {\n            // No interactions while waiting for the render to update\n            if (_this.waitingForRender)\n                return;\n            startPosition = mouse_1.eventElementPosition(event, element);\n            var downViews = _this.getViewsUnderMouse(startPosition);\n            // While this is true, when mouse up happens, the click gesture will execute\n            var canClick = true;\n            var clickStartTime = Date.now();\n            // If no views under this view, then we just quick exit with no interactions\n            if (downViews.length <= 0) {\n                return;\n            }\n            startView = downViews[0].data;\n            if (!startView)\n                return;\n            var interaction = _this.makeInteraction(startPosition, startPosition, startView);\n            var currentPosition = startPosition;\n            _this.controllers.forEach(function (controller) {\n                controller.handleMouseDown(interaction, event.button);\n            });\n            event.stopPropagation();\n            document.onmousemove = function (event) {\n                if (!startView)\n                    return;\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                var delta = {\n                    x: mouse.x - currentPosition.x,\n                    y: mouse.y - currentPosition.y,\n                };\n                var drag = _this.makeDrag(mouse, startPosition, currentPosition, delta);\n                currentPosition = mouse;\n                _this.controllers.forEach(function (controller) {\n                    controller.handleDrag(interaction, drag);\n                });\n                // If we move after a mouse down, it's no longer a click\n                canClick = false;\n            };\n            document.onmouseup = function (event) {\n                document.onmousemove = null;\n                document.onmouseup = null;\n                document.onmouseover = null;\n            };\n            document.onmouseover = function (event) {\n                if (!startView)\n                    return;\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                _this.controllers.forEach(function (controller) {\n                    controller.handleMouseOver(interaction);\n                });\n                event.stopPropagation();\n            };\n            element.onmouseup = function (event) {\n                if (!startView)\n                    return;\n                var mouse = mouse_1.eventElementPosition(event, element);\n                var interaction = _this.makeInteraction(mouse, startPosition, startView);\n                _this.controllers.forEach(function (controller) {\n                    controller.handleMouseUp(interaction, event.button);\n                });\n                // If we release the mouse before the valid click delay\n                if (canClick && Date.now() - clickStartTime < VALID_CLICK_DELAY) {\n                    _this.controllers.forEach(function (controller) {\n                        controller.handleClick(interaction, event.button);\n                    });\n                }\n            };\n            // Text will not be selected when it is being dragged\n            element.onselectstart = function () {\n                return false;\n            };\n        };\n        // Enable touch support\n        this.addTouchContextListeners();\n    };\n    MouseEventManager.prototype.addTouchContextListeners = function () {\n        var element = this.context;\n        element.ontouchstart = function (event) {\n            // TODO: This is the start work for the touch events. And this retains sentimental value.\n            // For (let i = 0, end = event.changedTouches.length; i < end; ++i) {\n            // TODO\n            // Const touch = event.changedTouches.item(i);\n            // CurrentTouches.set(touch.identifier, to);\n            // }\n        };\n        element.ontouchend = function (event) {\n            // TODO\n        };\n        element.ontouchmove = function (event) {\n            // TODO\n        };\n        element.ontouchcancel = function (event) {\n            // TODO\n        };\n    };\n    /**\n     * Retrieves the view for the provided id\n     */\n    MouseEventManager.prototype.getView = function (viewId) {\n        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n            var view = _a[_i];\n            if (view.view.id === viewId) {\n                return view.view;\n            }\n        }\n        return null;\n    };\n    /**\n     * This generates the metrics for a drag gesture.\n     */\n    MouseEventManager.prototype.makeDrag = function (mouse, start, previous, delta) {\n        return {\n            screen: {\n                current: mouse,\n                delta: delta,\n                previous: previous,\n                start: start,\n            },\n        };\n    };\n    /**\n     * This makes the metrics for interactions with the views.\n     */\n    MouseEventManager.prototype.makeInteraction = function (mouse, start, startView) {\n        // Find the views the mouse has interacted with\n        var hitViews = this.getViewsUnderMouse(mouse);\n        return {\n            screen: {\n                mouse: mouse,\n            },\n            start: start && startView && {\n                mouse: startView.view.screenToView(mouse),\n                view: startView.view,\n            },\n            target: {\n                mouse: hitViews[0] && hitViews[0].data.view.screenToView(mouse),\n                view: hitViews[0] && hitViews[0].data.view,\n            },\n            viewsUnderMouse: hitViews.map(function (v) { return ({\n                mouse: v.data.view.screenToView(mouse),\n                view: v.data.view,\n            }); }),\n        };\n    };\n    MouseEventManager.prototype.makeWheel = function (event) {\n        var wheel = mouse_1.normalizeWheel(event);\n        return {\n            wheel: [wheel.x, wheel.y],\n        };\n    };\n    /**\n     * Sets the controllers to receive events from this manager.\n     */\n    MouseEventManager.prototype.setControllers = function (controllers) {\n        this.controllers = controllers;\n        for (var _i = 0, _a = this.controllers; _i < _a.length; _i++) {\n            var controller = _a[_i];\n            controller.setMouseManager(this);\n        }\n    };\n    /**\n     * Sets the views that gets queried for interactions.\n     */\n    MouseEventManager.prototype.setViews = function (views) {\n        this.views = views;\n    };\n    MouseEventManager.prototype.destroy = function () {\n        var _this = this;\n        delete this.quadTree;\n        this.context.onmousedown = null;\n        this.context.onmousemove = null;\n        this.context.onmouseleave = null;\n        this.context.onmousewheel = null;\n        this.eventCleanup.forEach(function (event) {\n            _this.context.removeEventListener(event[0], event[1]);\n        });\n    };\n    return MouseEventManager;\n}());\nexports.MouseEventManager = MouseEventManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This file is dedicted to the all important step of processing desired inputs from the layer\n * and coming up with automated generated uniforms and attributes that the shader's will need\n * in order to operate with the conveniences the library offers. This includes things such as\n * injecting camera projection uniforms, resource uniforms, animation adjustments etc etc.\n */\nvar Three = require(\"three\");\nvar types_1 = require(\"../types\");\nvar util_1 = require(\"../util\");\nvar auto_easing_method_1 = require(\"../util/auto-easing-method\");\nvar abs = Math.abs;\n/**\n * This is a lookup for a test vector for the provided size\n */\nvar testStartVector = (_a = {},\n    _a[types_1.InstanceAttributeSize.ONE] = [1],\n    _a[types_1.InstanceAttributeSize.TWO] = [1, 2],\n    _a[types_1.InstanceAttributeSize.THREE] = [1, 2, 3],\n    _a[types_1.InstanceAttributeSize.FOUR] = [1, 2, 3, 4],\n    _a);\n/**\n * This is a lookup for a test vector for the provided size\n */\nvar testEndVector = (_b = {},\n    _b[types_1.InstanceAttributeSize.ONE] = [4],\n    _b[types_1.InstanceAttributeSize.TWO] = [4, 3],\n    _b[types_1.InstanceAttributeSize.THREE] = [4, 3, 2],\n    _b[types_1.InstanceAttributeSize.FOUR] = [4, 3, 2, 1],\n    _b);\nvar emptyTexture = new Three.Texture();\nfunction isAtlasAttribute(attr) {\n    return Boolean(attr) && attr.atlas;\n}\nfunction isEasingAttribute(attr) {\n    return Boolean(attr) && attr.easing && attr.size !== undefined;\n}\nfunction isInstanceAttribute(attr) {\n    return Boolean(attr);\n}\nfunction isVertexAttribute(attr) {\n    return Boolean(attr);\n}\nfunction isUniform(attr) {\n    return Boolean(attr);\n}\nfunction toVertexAttributeInternal(attribute) {\n    return Object.assign({}, attribute, { materialAttribute: null });\n}\nfunction toUniformInternal(uniform) {\n    return Object.assign({}, uniform, { materialUniforms: [] });\n}\n/**\n * This searches through attribute packing for the first empty slot it can find to fill.\n * If a slot is not available it will just start a new block.\n */\nfunction findSingleEmptyBlock(attributes) {\n    var blocks = new Map();\n    var found = null;\n    var maxBlock = 0;\n    attributes.forEach(function (instanceAttribute) {\n        var block = instanceAttribute.block;\n        var index = instanceAttribute.blockIndex;\n        var size = instanceAttribute.size || 1;\n        if (index === undefined) {\n            return;\n        }\n        var usedBlocks = blocks.get(block);\n        maxBlock = Math.max(block, maxBlock);\n        if (!usedBlocks) {\n            usedBlocks = new Map();\n            blocks.set(block, usedBlocks);\n        }\n        for (var i = index, end = index + size; i < end; ++i) {\n            usedBlocks.set(i, true);\n        }\n    });\n    blocks.forEach(function (usedBlocks, block) {\n        if (!usedBlocks.get(1))\n            found = [block, types_1.InstanceBlockIndex.ONE];\n        if (!usedBlocks.get(2))\n            found = [block, types_1.InstanceBlockIndex.TWO];\n        if (!usedBlocks.get(3))\n            found = [block, types_1.InstanceBlockIndex.THREE];\n        if (!usedBlocks.get(4))\n            found = [block, types_1.InstanceBlockIndex.FOUR];\n    });\n    // If no block was ever found, then we take the max block detected and make\n    // A new block after it\n    if (!found) {\n        found = [maxBlock + 1, 0];\n    }\n    return found;\n}\n/**\n * This finds a block and an index that can accomodate a provided size\n * @param attributes\n * @param seekingSize\n */\nfunction findEmptyBlock(attributes, seekingSize) {\n    var usedBlocks = [];\n    var maxBlock = 0;\n    if (seekingSize === undefined) {\n        seekingSize = 1;\n    }\n    attributes.forEach(function (instanceAttribute) {\n        var block = instanceAttribute.block;\n        var index = instanceAttribute.blockIndex === undefined ? 0 : instanceAttribute.blockIndex;\n        var size = instanceAttribute.size === undefined ? 0 : instanceAttribute.size;\n        maxBlock = Math.max(block, maxBlock);\n        while (usedBlocks.length - 1 < block) {\n            usedBlocks.push([false, false, false, false]);\n        }\n        for (var i = index - 1, end = index - 1 + size; i < end; ++i) {\n            usedBlocks[block][i] = true;\n        }\n    });\n    for (var x = 0; x < usedBlocks.length; x++) {\n        for (var ind = 0; ind < 4; ind++) {\n            if (usedBlocks[x][ind]) {\n                continue;\n            }\n            else {\n                for (var breadth = ind; breadth < 4; breadth++) {\n                    if (!usedBlocks[x][breadth]) {\n                        if ((breadth - ind + 1) === seekingSize) {\n                            return [x, ind + 1];\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // If no block was ever found, then we take the max block detected and make\n    // A new block after it\n    return [maxBlock + 1, types_1.InstanceBlockIndex.ONE];\n}\n/**\n * This sorts the attributes such that the attributes that MUST be updated first are put to the top.\n * This is necessary for complex attributes like atlas and easing attributes who have other attributes\n * that have dependent behaviors based on their source attribute.\n */\nfunction sortNeedsUpdateFirstToTop(a, b) {\n    if (a.atlas && !b.atlas)\n        return -1;\n    if (a.easing && !b.easing)\n        return -1;\n    return 1;\n}\n/**\n * This generates any uniforms needed for when a layer is requesting\n */\nfunction generateAtlasResourceUniforms(layer, instanceAttributes) {\n    // Retrieve all of the instance attributes that are atlas references\n    var atlasInstanceAttributes = [];\n    // Key: The atlas uniform name requested\n    var requestedAtlasInjections = new Map();\n    // Get the atlas requests that have unique names. We only need one uniform\n    // For a single unique provided name. We also must merge the requests for\n    // Vertex and fragment injections\n    instanceAttributes.forEach(function (attribute) {\n        if (isAtlasAttribute(attribute)) {\n            // Auto set the size of the attribute. Attribute's that are a resource automatically\n            // Consume a size of four\n            attribute.size = types_1.InstanceAttributeSize.FOUR;\n            attribute.blockIndex = types_1.InstanceBlockIndex.ONE;\n            // Get the atlas resource uniform (sampler2D) injection targets. We default to only the\n            // Fragment shader as it's the most commonly used location for sampler2Ds\n            var injection = attribute.atlas.shaderInjection || types_1.ShaderInjectionTarget.FRAGMENT;\n            // See if we already have an injection for the given injected uniform name for an atlas resource.\n            var injections = requestedAtlasInjections.get(attribute.atlas.name);\n            if (injections) {\n                requestedAtlasInjections.set(attribute.atlas.name, [\n                    injections[0] ||\n                        injection === types_1.ShaderInjectionTarget.VERTEX ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                    injections[1] ||\n                        injection === types_1.ShaderInjectionTarget.FRAGMENT ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                ]);\n            }\n            else {\n                atlasInstanceAttributes.push(attribute);\n                requestedAtlasInjections.set(attribute.atlas.name, [\n                    injection === types_1.ShaderInjectionTarget.VERTEX ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                    injection === types_1.ShaderInjectionTarget.FRAGMENT ||\n                        injection === types_1.ShaderInjectionTarget.ALL,\n                ]);\n            }\n        }\n    });\n    // Make uniforms for all of the unique atlas requests.\n    return atlasInstanceAttributes.map(function (instanceAttribute) {\n        var injection = types_1.ShaderInjectionTarget.FRAGMENT;\n        if (instanceAttribute.atlas) {\n            var injections = requestedAtlasInjections.get(instanceAttribute.atlas.name);\n            if (injections) {\n                injection =\n                    (injections[0] && injections[1] && types_1.ShaderInjectionTarget.ALL) ||\n                        (injections[0] && !injections[1] && types_1.ShaderInjectionTarget.VERTEX) ||\n                        (!injections[0] && injections[1] && types_1.ShaderInjectionTarget.FRAGMENT) ||\n                        injection;\n            }\n        }\n        return {\n            name: instanceAttribute.atlas.name,\n            shaderInjection: injection,\n            size: types_1.UniformSize.ATLAS,\n            update: function () { return layer.resource.getAtlasTexture(instanceAttribute.atlas.key) || emptyTexture; },\n        };\n    });\n}\n/**\n * This modifies the instance attributes in a way that produces enough attributes to handle the easing equations\n * being performed on the gpu.\n */\nfunction generateEasingAttributes(layer, instanceAttributes) {\n    var easingAttributes = [];\n    // We gather all of the easing attributes first so we can modify the attribute array\n    // On next pass\n    for (var _i = 0, instanceAttributes_1 = instanceAttributes; _i < instanceAttributes_1.length; _i++) {\n        var attribute = instanceAttributes_1[_i];\n        if (isEasingAttribute(attribute)) {\n            easingAttributes.push(attribute);\n        }\n    }\n    var _loop_1 = function (attribute) {\n        var _a = attribute.easing, easing = _a.cpu, loop = _a.loop;\n        var name_1 = attribute.name, size = attribute.size, update = attribute.update;\n        var easingUID = util_1.uid();\n        // We keep this in a scope above the update as we utilize the fact that the attributes will update\n        // In order for a single instance to our advantage.\n        var easingValues;\n        // Hijack the update from the attribute to a new update method which will\n        // Be able to interact with the values for the easing methodology\n        attribute.update = function (o) {\n            // We retrieve properties that we want to be dynamic from the easing equation\n            var _a = attribute.easing, delay = _a.delay, duration = _a.duration;\n            // First get the value that is to be our new destination\n            var end = update(o);\n            var currentTime = layer.surface.frameMetrics.currentTime;\n            // Get the easing values specific to an instance\n            easingValues = o.easing.get(easingUID) || {\n                duration: duration,\n                end: end,\n                start: end,\n                startTime: currentTime,\n            };\n            // Previous position time value\n            var timeValue = 1;\n            switch (loop) {\n                // Repeat means going from 0 to 1 then 0 to 1 etc etc\n                case auto_easing_method_1.AutoEasingLoopStyle.REPEAT:\n                    timeValue = ((currentTime - easingValues.startTime) / duration) % 1;\n                    break;\n                // Reflect means going from 0 to 1 then 1 to 0 then 0 to 1 etc etc\n                case auto_easing_method_1.AutoEasingLoopStyle.REFLECT:\n                    var timePassed = ((currentTime - easingValues.startTime) / duration);\n                    // This is a triangle wave for an input\n                    timeValue = abs(((timePassed / 2.0) % 1) - 0.5) * 2.0;\n                    break;\n                // No loop means just linear time\n                case auto_easing_method_1.AutoEasingLoopStyle.NONE:\n                default:\n                    timeValue = (currentTime - easingValues.startTime) / duration;\n                    break;\n            }\n            // Now get the value of where our instance currently is located this frame\n            easingValues.start = easing(easingValues.start, easingValues.end, timeValue);\n            // Set the current time as the start time of our animation\n            easingValues.startTime = currentTime + delay;\n            // Set the provided value as our destination\n            easingValues.end = end;\n            // Make sure the instance contains the current easing values\n            o.easing.set(easingUID, easingValues);\n            return end;\n        };\n        // Find a slot available for our new start value\n        var slot = findEmptyBlock(instanceAttributes, size);\n        var startAttr = {\n            block: slot[0],\n            blockIndex: slot[1],\n            name: \"_\" + name_1 + \"_start\",\n            size: size,\n            update: function (o) { return easingValues.start; },\n        };\n        instanceAttributes.push(startAttr);\n        // Find a slot available for our new start time\n        slot = findEmptyBlock(instanceAttributes, types_1.InstanceAttributeSize.ONE);\n        var startTimeAttr = {\n            block: slot[0],\n            blockIndex: slot[1],\n            name: \"_\" + name_1 + \"_start_time\",\n            size: types_1.InstanceAttributeSize.ONE,\n            update: function (o) { return [easingValues.startTime]; },\n        };\n        instanceAttributes.push(startTimeAttr);\n        // Find a slot available for our duration\n        slot = findEmptyBlock(instanceAttributes, types_1.InstanceAttributeSize.ONE);\n        var durationAttr = {\n            block: slot[0],\n            blockIndex: slot[1],\n            name: \"_\" + name_1 + \"_duration\",\n            size: types_1.InstanceAttributeSize.ONE,\n            update: function (o) { return [easingValues.duration]; },\n        };\n        instanceAttributes.push(durationAttr);\n    };\n    // Now loop through each easing attribute and generate attributes needed for the easing method\n    for (var _a = 0, easingAttributes_1 = easingAttributes; _a < easingAttributes_1.length; _a++) {\n        var attribute = easingAttributes_1[_a];\n        _loop_1(attribute);\n    }\n}\nfunction generateBaseUniforms(layer) {\n    return [\n        // This injects the projection matrix from the view camera\n        {\n            name: 'projection',\n            size: types_1.UniformSize.MATRIX4,\n            update: function () { return layer.view.viewCamera.baseCamera.projectionMatrix.elements; },\n        },\n        // This injects the model view matrix from the view camera\n        {\n            name: 'modelView',\n            size: types_1.UniformSize.MATRIX4,\n            update: function () { return layer.view.viewCamera.baseCamera.matrix.elements; },\n        },\n        // This injects the camera offset uniforms that need to be present for projecting in a more\n        // Chart centric style\n        {\n            name: 'cameraOffset',\n            size: types_1.UniformSize.THREE,\n            update: function () { return layer.view.camera.offset; },\n        },\n        // This injects the camera scaling uniforms that need to be present for projecting in a more\n        // Chart centric style\n        {\n            name: 'cameraScale',\n            size: types_1.UniformSize.THREE,\n            update: function () { return layer.view.camera.scale; },\n        },\n        // This injects the camera scaling uniforms that need to be present for projecting in a more\n        // Chart centric style\n        {\n            name: 'viewSize',\n            size: types_1.UniformSize.TWO,\n            update: function () { return [layer.view.viewBounds.width, layer.view.viewBounds.height]; },\n        },\n        // This injects the current layer's pixel ratio so pixel ratio dependent items can react to it\n        // Things like gl_PointSize will need this metric if not working in clip space\n        {\n            name: 'pixelRatio',\n            size: types_1.UniformSize.ONE,\n            update: function () { return [layer.view.pixelRatio]; },\n        },\n        // This will be the current frame's current time which is updated in the layer's surface draw call\n        {\n            name: 'currentTime',\n            size: types_1.UniformSize.ONE,\n            update: function () { return [layer.surface.frameMetrics.currentTime]; },\n        },\n    ];\n}\n/**\n * This creates the base instance attributes that are ALWAYS present\n */\nfunction generateBaseInstanceAttributes(instanceAttributes) {\n    var fillBlock = findSingleEmptyBlock(instanceAttributes);\n    return [\n        // This is injected so the system can control when an instance should not be rendered.\n        // This allows for holes to be in the buffer without having to correct them immediately\n        {\n            block: fillBlock[0],\n            blockIndex: fillBlock[1],\n            name: '_active',\n            size: types_1.InstanceAttributeSize.ONE,\n            update: function (o) { return [o.active ? 1 : 0]; },\n        },\n    ];\n}\n/**\n * This creates the base vertex attributes that are ALWAYS present\n */\nfunction generateBaseVertexAttributes() {\n    return [\n        // We add an inherent instance attribute to our vertices so they can determine the instancing\n        // Data to retrieve.\n        {\n            name: 'instance',\n            size: types_1.VertexAttributeSize.ONE,\n            // We no op this as our geomtry generating routine will establish the values needed here\n            update: function () { return [0]; },\n        },\n    ];\n}\nfunction compareVec(a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (var i = 0, end = a.length; i < end; ++i) {\n        if (Math.round(a[i] * 100) / 100 !== Math.round(b[i] * 100) / 100)\n            return false;\n    }\n    return true;\n}\nfunction validateInstanceAttributes(instanceAttributes) {\n    instanceAttributes.forEach(function (attribute) {\n        if (attribute.easing && attribute.atlas) {\n            console.warn('An instance attribute can not have both easing and atlas properties. Undefined behavior will occur.');\n            console.warn(attribute);\n        }\n        if (!attribute.atlas) {\n            if (attribute.size === undefined) {\n                console.warn('An instance attribute requires the size to be defined.');\n                console.warn(attribute);\n            }\n        }\n        if (attribute.easing) {\n            if (attribute.size !== undefined) {\n                var testStart = testStartVector[attribute.size];\n                var testEnd = testEndVector[attribute.size];\n                var test = attribute.easing.cpu(testStart, testEnd, 0);\n                if (!compareVec(test, testStart)) {\n                    console.warn('Auto Easing Validation Failed: using a time of 0 does not produce the start value');\n                    console.warn('Start:', testStart, 'End:', testEnd, 'Result:', test);\n                    console.warn(attribute);\n                }\n                test = attribute.easing.cpu(testStart, testEnd, 1);\n                if (!compareVec(test, testEnd)) {\n                    console.warn('Auto Easing Validation Failed: using a time of 1 does not produce the end value');\n                    console.warn('Start:', testStart, 'End:', testEnd, 'Result:', test);\n                    console.warn(attribute);\n                }\n                test = attribute.easing.cpu(testStart, testEnd, -1);\n                if (!compareVec(test, testStart)) {\n                    console.warn('Auto Easing Validation Failed: using a time of -1 does not produce the start value');\n                    console.warn('Start:', testStart, 'End:', testEnd, 'Result:', test);\n                    console.warn(attribute);\n                }\n                test = attribute.easing.cpu(testStart, testEnd, 2);\n                if (!compareVec(test, testEnd)) {\n                    console.warn('Auto Easing Validation Failed: using a time of 2 does not produce the end value');\n                    console.warn('Start:', testStart, 'End:', testEnd, 'Result:', test);\n                    console.warn(attribute);\n                }\n            }\n            else {\n                console.warn('An Instance Attribute with easing MUST have a size declared');\n            }\n        }\n    });\n}\n/**\n * This is the primary method that analyzes all shader IO and determines which elements needs to be automatically injected\n * into the shader.\n */\nfunction injectShaderIO(layer, shaderIO) {\n    // All of the instance attributes with nulls filtered out\n    var instanceAttributes = (shaderIO.instanceAttributes || []).filter(isInstanceAttribute);\n    // All of the vertex attributes with nulls filtered out\n    var vertexAttributes = (shaderIO.vertexAttributes || []).filter(isVertexAttribute);\n    // All of the uniforms with nulls filtered out\n    var uniforms = (shaderIO.uniforms || []).filter(isUniform);\n    // Do a validation pass of the attributes injected so we can provide feedback as to why things behave odd\n    validateInstanceAttributes(instanceAttributes);\n    // Generates all of the attributes needed to make attributes automagically be eased when changed\n    generateEasingAttributes(layer, instanceAttributes);\n    // Get the uniforms needed to facilitate atlas resource requests if any exists\n    var atlasUniforms = generateAtlasResourceUniforms(layer, instanceAttributes);\n    // These are the uniforms that should be present in the shader for basic operation\n    var addedUniforms = atlasUniforms.concat(generateBaseUniforms(layer));\n    // Create the base instance attributes that must be present\n    var addedInstanceAttributes = generateBaseInstanceAttributes(instanceAttributes);\n    // Create the base vertex attributes that must be present\n    var addedVertexAttributes = generateBaseVertexAttributes();\n    // Set the active attribute to the layer for quick reference\n    layer.activeAttribute = addedInstanceAttributes[0];\n    // Aggregate all of the injected shaderIO with the layer's shaderIO\n    var allVertexAttributes = addedVertexAttributes\n        .concat(vertexAttributes || [])\n        .map(toVertexAttributeInternal);\n    var allUniforms = addedUniforms\n        .concat(uniforms)\n        .map(toUniformInternal);\n    var allInstanceAttributes = addedInstanceAttributes\n        .concat(instanceAttributes)\n        .sort(sortNeedsUpdateFirstToTop);\n    return {\n        instanceAttributes: allInstanceAttributes,\n        uniforms: allUniforms,\n        vertexAttributes: allVertexAttributes,\n    };\n}\nexports.injectShaderIO = injectShaderIO;\nvar _a, _b;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar types_1 = require(\"../types\");\nvar UNIFORM_SIZE_TO_MATERIAL_TYPE = (_a = {},\n    _a[types_1.UniformSize.ONE] = 'f',\n    _a[types_1.UniformSize.TWO] = 'v2',\n    _a[types_1.UniformSize.THREE] = 'v3',\n    _a[types_1.UniformSize.FOUR] = 'v4',\n    _a[types_1.UniformSize.MATRIX3] = 'Matrix3fv',\n    _a[types_1.UniformSize.MATRIX4] = 'Matrix4fv',\n    _a);\nvar DEFAULT_UNIFORM_VALUE = (_b = {},\n    _b[types_1.UniformSize.ONE] = [0],\n    _b[types_1.UniformSize.TWO] = [0, 0],\n    _b[types_1.UniformSize.THREE] = [0, 0, 0],\n    _b[types_1.UniformSize.FOUR] = [0, 0, 0, 0],\n    _b[types_1.UniformSize.MATRIX3] = [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    _b[types_1.UniformSize.MATRIX4] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    _b);\nfunction toMaterialUniform(uniform) {\n    return {\n        type: UNIFORM_SIZE_TO_MATERIAL_TYPE[uniform.size],\n        value: DEFAULT_UNIFORM_VALUE[uniform.size],\n    };\n}\nfunction generateLayerMaterial(layer, vs, fs, layerUniforms, instancingUniforms) {\n    // We now need to establish the material for the layer\n    var materialParams = layer.getMaterialOptions();\n    materialParams.vertexShader = vs;\n    materialParams.fragmentShader = fs;\n    // We must convert all of the uniforms to actual Three material initialization uniforms\n    materialParams.uniforms = {};\n    // Convert our non-instancing uniforms to our material uniforms\n    for (var i = 0, end = layerUniforms.length; i < end; ++i) {\n        var uniform = layerUniforms[i];\n        var materialUniform = toMaterialUniform(uniform);\n        materialParams.uniforms[uniform.name] = materialUniform;\n    }\n    // Add in the generated instancing uniforms\n    for (var i = 0, end = instancingUniforms.length; i < end; ++i) {\n        var generatedUniform = instancingUniforms[i];\n        materialParams.uniforms[generatedUniform.name] = {\n            type: generatedUniform.type,\n            value: generatedUniform.value,\n        };\n    }\n    return new Three.RawShaderMaterial(materialParams);\n}\nexports.generateLayerMaterial = generateLayerMaterial;\nvar _a, _b;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nfunction isNumberCluster(val) {\n    return !Array.isArray(val[0]);\n}\nfunction generateLayerGeometry(maxInstancesPerBuffer, vertexAttributes, vertexCount) {\n    // Make the new buffers to be updated\n    var vertexBuffers = [];\n    for (var i = 0, end = vertexAttributes.length; i < end; ++i) {\n        var attribute_1 = vertexAttributes[i];\n        vertexBuffers.push(new Float32Array((attribute_1.size) * vertexCount * maxInstancesPerBuffer));\n    }\n    // Let's now fill in the baseline geometry with the instances we will be generating\n    // First we ask the layer for a single instance's buffer setup\n    var endk = vertexAttributes.length;\n    var buffer;\n    var attribute;\n    var value;\n    var formatError = false;\n    for (var i = 0, end = vertexCount; i < end; ++i) {\n        for (var k = 0; k < endk; ++k) {\n            attribute = vertexAttributes[k];\n            buffer = vertexBuffers[k];\n            value = attribute.update(i);\n            if (isNumberCluster(value)) {\n                for (var j = i * attribute.size, endj = j + attribute.size, index = 0; j < endj; ++j, ++index) {\n                    buffer[j] = value[index];\n                }\n            }\n            else {\n                formatError = true;\n            }\n        }\n    }\n    if (formatError) {\n        console.warn('A vertex buffer updating method should not use arrays of arrays of numbers.');\n    }\n    // After getting the geometry for a single instance, we can now copy paste\n    // For subsequent instances using very fast FLoat32 methods\n    for (var i = 0, end = vertexAttributes.length; i < end; ++i) {\n        var attribute_2 = vertexAttributes[i];\n        var instanceSize = (attribute_2.size) * vertexCount;\n        // Copy the first buffer set into the rest of the buffer\n        for (var k = 1, endk_1 = maxInstancesPerBuffer; k < endk_1; ++k) {\n            vertexBuffers[i].copyWithin(instanceSize * k, 0, instanceSize);\n        }\n    }\n    // Lastly, we make the instance attribute reflect correctly so each instance\n    // Can have varied information\n    var instancingBuffer = vertexBuffers[0];\n    for (var i = 0, end = maxInstancesPerBuffer; i < end; ++i) {\n        var instanceStartIndex = i * vertexCount;\n        for (var k = 0; k < vertexCount; ++k) {\n            instancingBuffer[k + instanceStartIndex] = i;\n        }\n    }\n    // Now we can generate the attributes and apply them to a geometry object\n    var geometry = new Three.BufferGeometry();\n    for (var i = 0, end = vertexAttributes.length; i < end; ++i) {\n        var attribute_3 = vertexAttributes[i];\n        var materialAttribute = new Three.BufferAttribute(vertexBuffers[i], attribute_3.size);\n        attribute_3.materialAttribute = materialAttribute;\n        geometry.addAttribute(attribute_3.name, materialAttribute);\n    }\n    return geometry;\n}\nexports.generateLayerGeometry = generateLayerGeometry;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\nvar DataBounds = /** @class */ (function (_super) {\n    __extends(DataBounds, _super);\n    function DataBounds() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DataBounds.emptyBounds = function () {\n        return new DataBounds({\n            height: 0,\n            width: 0,\n            x: 0,\n            y: 0,\n        });\n    };\n    return DataBounds;\n}(bounds_1.Bounds));\nexports.DataBounds = DataBounds;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar chart_camera_1 = require(\"../util/chart-camera\");\nvar view_camera_1 = require(\"../util/view-camera\");\nvar scene_1 = require(\"./scene\");\nvar view_1 = require(\"./view\");\n/**\n * This generates all of the cameras/views/scenes necessary for default viewing of elements.\n *\n * These defaults are required to ensure the following:\n *\n * - Orthographic view\n * - top left corner of the canvas is 0,0\n * - y axis is +y downward\n * - entire canvas is the viewport.\n */\nfunction generateDefaultScene(context) {\n    // Generate a default view camera that is\n    // - Orthographic\n    // - (0, 0) is the top left of the canvas\n    // - the y axis is +y going downward\n    var height = context.canvas.height;\n    var width = context.canvas.width;\n    var aspectRatio = width / height;\n    var viewport = {\n        aspectRatio: aspectRatio,\n        bottom: -height / 2,\n        far: 10000000,\n        left: -width / 2,\n        near: -100,\n        right: width / 2,\n        top: height / 2,\n        viewSize: height,\n    };\n    var defaultCamera = new view_camera_1.ViewCamera();\n    defaultCamera.baseCamera = new Three.OrthographicCamera(viewport.left, viewport.right, viewport.top, viewport.bottom, viewport.near, viewport.far);\n    defaultCamera.baseCamera.scale.set(1.0, -1.0, 1.0);\n    defaultCamera.baseCamera.position.set(0.0, 0.0, -300.0);\n    defaultCamera.baseCamera.updateMatrixWorld(true);\n    defaultCamera.baseCamera.updateMatrix();\n    if (defaultCamera.baseCamera instanceof Three.OrthographicCamera) {\n        defaultCamera.baseCamera.updateProjectionMatrix();\n    }\n    // Generate a charting camera with all scales set to 1 and no offsets in any direction\n    var defaultChartCamera = new chart_camera_1.ChartCamera();\n    // This is a viewport that covers the entire context\n    var defaultViewport = {\n        bottom: 0,\n        left: 0,\n        right: 0,\n        top: 0,\n    };\n    // Make a view using our defaults\n    var defaultView = new view_1.View({\n        camera: defaultChartCamera,\n        key: view_1.View.DEFAULT_VIEW_ID,\n        viewCamera: defaultCamera,\n        viewport: defaultViewport,\n    });\n    // Make a scene with our defaults\n    var defaultScene = new scene_1.Scene({\n        key: scene_1.Scene.DEFAULT_SCENE_ID,\n        views: [],\n    });\n    // Make sure the default view is a part of the default scene\n    defaultScene.addView(defaultView);\n    return {\n        camera: defaultChartCamera,\n        scene: defaultScene,\n        view: defaultView,\n        viewCamera: defaultCamera,\n        viewport: defaultViewport,\n    };\n}\nexports.generateDefaultScene = generateDefaultScene;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar INSTANCE_UNIFORM_ATTRIBUTE_PREFIX = 'u';\nfunction makeInstanceUniformNameArray() {\n    return \"instanceData\";\n}\nexports.makeInstanceUniformNameArray = makeInstanceUniformNameArray;\nfunction makeInstanceUniformNameTree(index) {\n    return \"\" + INSTANCE_UNIFORM_ATTRIBUTE_PREFIX + index.toString(31);\n}\nexports.makeInstanceUniformNameTree = makeInstanceUniformNameTree;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar vector_1 = require(\"./vector\");\nvar min = Math.min, max = Math.max, pow = Math.pow, round = Math.round, sin = Math.sin, PI = Math.PI;\nvar GPU_PI = round(PI * 1000) / 1000;\nfunction clamp(x, minVal, maxVal) {\n    return min(max(x, minVal), maxVal);\n}\nvar AutoEasingLoopStyle;\n(function (AutoEasingLoopStyle) {\n    /** Time will go from 0 -> 1 then stop at 1 */\n    AutoEasingLoopStyle[AutoEasingLoopStyle[\"NONE\"] = 1] = \"NONE\";\n    /** Time will continuously go 0 -> 1 then 0 -> 1 then 0 -> 1 etc etc */\n    AutoEasingLoopStyle[AutoEasingLoopStyle[\"REPEAT\"] = 2] = \"REPEAT\";\n    /** Time will continously go 0 -> 1 then 1 -> 0 then 0 -> 1 then 1 -> 0 etc etc */\n    AutoEasingLoopStyle[AutoEasingLoopStyle[\"REFLECT\"] = 3] = \"REFLECT\";\n})(AutoEasingLoopStyle = exports.AutoEasingLoopStyle || (exports.AutoEasingLoopStyle = {}));\n// GPU easing methods! Written here because it's cleaner to write `` style strings\n// Against the left side of the editor\nvar immediateGPU = \"\\n${easingMethod} {\\n  return end;\\n}\\n\";\nvar linearGPU = \"\\n${easingMethod} {\\n  return (end - start) * t + start;\\n}\\n\";\nvar easeInQuadGPU = \"\\n${easingMethod} {\\n  float time = t * t;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeOutQuadGPU = \"\\n${easingMethod} {\\n  float time = t * (2.0 - t);\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeInOutQuadGPU = \"\\n${easingMethod} {\\n  float time = t < 0.5 ? 2.0 * t * t : -1.0 + (4.0 - 2.0 * t) * t;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeInCubicGPU = \"\\n${easingMethod} {\\n  float time = t * t * t;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeOutCubicGPU = \"\\n${easingMethod} {\\n  float t1 = t - 1.0;\\n  float time = t1 * t1 * t1 + 1.0;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeInOutCubicGPU = \"\\n${easingMethod} {\\n  float time = t < 0.5 ? 4.0 * t * t * t : (t - 1.0) * (2.0 * t - 2.0) * (2.0 * t - 2.0) + 1.0;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeInQuartGPU = \"\\n${easingMethod} {\\n  float time = t * t * t * t;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeOutQuartGPU = \"\\n${easingMethod} {\\n  float t1 = t - 1.0;\\n  float time = 1.0 - t1 * t1 * t1 * t1;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeInOutQuartGPU = \"\\n${easingMethod} {\\n  float t1 = t - 1.0;\\n  float time = t < 0.5 ? 8.0 * t * t * t * t : 1.0 - 8.0 * t1 * t1 * t1 * t1;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeInQuintGPU = \"\\n${easingMethod} {\\n  float time = t * t * t * t * t;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeOutQuintGPU = \"\\n${easingMethod} {\\n  float t1 = t - 1.0;\\n  float time = 1.0 + t1 * t1 * t1 * t1 * t1;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeInOutQuintGPU = \"\\n${easingMethod} {\\n  float t1 = t - 1.0;\\n  float time = t < 0.5 ? 16.0 * t * t * t * t * t : 1.0 + 16.0 * t1 * t1 * t1 * t1 * t1;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeOutElasticGPU = \"\\n${easingMethod} {\\n  float p = 0.3;\\n  float time = pow(2.0, -10.0 * t) * sin((t - p / 4.0) * (2.0 * \" + GPU_PI + \") / p) + 1.0;\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeBackInGPU = \"\\n${easingMethod} {\\n  float time = t * t * t - t * 1.05 * sin(t * \" + GPU_PI + \");\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeBackOutGPU = \"\\n${easingMethod} {\\n  float t1 = t - 1.0;\\n  float a = 1.7;\\n  float time = (t1 * t1 * ((a + 1.0) * t1 + a) + 1.0);\\n  return (end - start) * time + start;\\n}\\n\";\nvar easeBackInOutGPU = \"\\n${easingMethod} {\\n  float a = 1.4;\\n  float a1 = a * 1.525;\\n  float t1 = t / 0.5;\\n  float t2 = t1 - 2.0;\\n  float time =\\n    (t1 < 1.0) ? 0.5 * (t1 * t1 * (a1 + 1.0) * t1 - a1) :\\n    0.5 * (t2 * t2 * ((a1 + 1.0) * t2 + a1) + 2.0)\\n  ;\\n\\n  return (end - start) * time + start;\\n}\\n\";\n/**\n * Class of base AutoEasingMethods as well as helper constructs for making the methods.\n */\nvar AutoEasingMethod = /** @class */ (function () {\n    function AutoEasingMethod(cpu, gpu, duration, method) {\n        /** Time before a delay  */\n        this.delay = 0;\n        /** The time in ms is takes to complete the animation */\n        this.duration = 500;\n        /** The looping style of the animation */\n        this.loop = AutoEasingLoopStyle.NONE;\n        this.cpu = cpu;\n        this.gpu = gpu;\n        this.duration = duration || 500;\n        this.methodName = method || 'easingMethod';\n    }\n    /**\n     * Autoeasing methods for linear easing\n     */\n    AutoEasingMethod.immediate = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) { return end; },\n            delay: delay,\n            duration: duration,\n            gpu: immediateGPU,\n            loop: loop,\n            methodName: 'immediate',\n        };\n    };\n    /**\n     * Autoeasing methods for linear easing\n     */\n    AutoEasingMethod.linear = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                t = clamp(t, 0, 1);\n                return add(scale(subtract(end, start), t), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: linearGPU,\n            loop: loop,\n            methodName: 'linear',\n        };\n    };\n    /**\n     * Auto easing for Accelerating to end\n     */\n    AutoEasingMethod.easeInQuad = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeInQuadGPU,\n            loop: loop,\n            methodName: 'easeInQuad',\n        };\n    };\n    /**\n     * Auto easing for decelerating to end\n     */\n    AutoEasingMethod.easeOutQuad = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t * (2 - t);\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeOutQuadGPU,\n            loop: loop,\n            methodName: 'easeOutQuad',\n        };\n    };\n    /**\n     * Auto easing for Accelerate to mid, then decelerate to end\n     */\n    AutoEasingMethod.easeInOutQuad = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeInOutQuadGPU,\n            loop: loop,\n            methodName: 'easeInOutQuad',\n        };\n    };\n    /**\n     * Auto easing for Slower acceleration\n     */\n    AutoEasingMethod.easeInCubic = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t * t * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeInCubicGPU,\n            loop: loop,\n            methodName: 'easeInCubic',\n        };\n    };\n    /**\n     * Auto easing for Slower deceleration\n     */\n    AutoEasingMethod.easeOutCubic = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = (--t) * t * t + 1;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeOutCubicGPU,\n            loop: loop,\n            methodName: 'easeOutCubic',\n        };\n    };\n    /**\n     * Auto easing for Slower acceleration to mid, and slower deceleration to end\n     */\n    AutoEasingMethod.easeInOutCubic = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeInOutCubicGPU,\n            loop: loop,\n            methodName: 'easeInOutCubic',\n        };\n    };\n    /**\n     * Auto easing for even Slower acceleration to end\n     */\n    AutoEasingMethod.easeInQuart = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t * t * t * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeInQuartGPU,\n            loop: loop,\n            methodName: 'easeInQuart',\n        };\n    };\n    /**\n     * Auto easing for even Slower deceleration to end\n     */\n    AutoEasingMethod.easeOutQuart = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = 1 - (--t) * t * t * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeOutQuartGPU,\n            loop: loop,\n            methodName: 'easeOutQuart',\n        };\n    };\n    /**\n     * Auto easing for even Slower acceleration to mid, and even slower deceleration to end\n     */\n    AutoEasingMethod.easeInOutQuart = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t < 0.5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeInOutQuartGPU,\n            loop: loop,\n            methodName: 'easeInOutQuart',\n        };\n    };\n    /**\n     * Auto easing for super slow accelerating to the end\n     */\n    AutoEasingMethod.easeInQuint = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t * t * t * t * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeInQuintGPU,\n            loop: loop,\n            methodName: 'easeInQuint',\n        };\n    };\n    /**\n     * Auto easing for super slow decelerating to the end\n     */\n    AutoEasingMethod.easeOutQuint = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = 1 + (--t) * t * t * t * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeOutQuintGPU,\n            loop: loop,\n            methodName: 'easeOutQuint',\n        };\n    };\n    /**\n     * Auto easing for super slow accelerating to mid and super slow decelerating to the end\n     */\n    AutoEasingMethod.easeInOutQuint = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var time = t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeInOutQuintGPU,\n            loop: loop,\n            methodName: 'easeInOutQuint',\n        };\n    };\n    /**\n     * Auto easing for elastic effect\n     */\n    AutoEasingMethod.easeOutElastic = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var p = 0.3;\n                var time = pow(2, -10 * t) * sin((t - p / 4) * (2 * PI) / p) + 1;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeOutElasticGPU,\n            loop: loop,\n            methodName: 'easeOutElastic',\n        };\n    };\n    /**\n     * Auto easing for retracting first then shooting to the end\n     */\n    AutoEasingMethod.easeBackIn = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var a = 1.05;\n                var time = t * t * t - t * a * sin(t * PI);\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeBackInGPU,\n            loop: loop,\n            methodName: 'easeBackIn',\n        };\n    };\n    /**\n     * Auto easing for overshooting at the end\n     */\n    AutoEasingMethod.easeBackOut = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var a = 1.7;\n                var t1 = t - 1;\n                var time = t1 * t1 * ((a + 1) * t1 + a) + 1;\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeBackOutGPU,\n            loop: loop,\n            methodName: 'easeBackOut',\n        };\n    };\n    /**\n     * Auto easing for overshooting at the end\n     */\n    AutoEasingMethod.easeBackInOut = function (duration, delay, loop) {\n        if (delay === void 0) { delay = 0; }\n        if (loop === void 0) { loop = AutoEasingLoopStyle.NONE; }\n        return {\n            cpu: function (start, end, t) {\n                t = clamp(t, 0, 1);\n                var a = 1.7;\n                var a1 = a * 1.525;\n                var t1 = t / 0.5;\n                var t2 = t1 - 2;\n                var time = (t1 < 1) ? 0.5 * (t1 * t1 * (a1 + 1) * t1 - a1) :\n                    0.5 * (t2 * t2 * ((a1 + 1) * t2 + a1) + 2);\n                var _a = vector_1.VecMath(start), add = _a.add, scale = _a.scale, subtract = _a.subtract;\n                return add(scale(subtract(end, start), time), start);\n            },\n            delay: delay,\n            duration: duration,\n            gpu: easeBackInOutGPU,\n            loop: loop,\n            methodName: 'easeBackInOut',\n        };\n    };\n    return AutoEasingMethod;\n}());\nexports.AutoEasingMethod = AutoEasingMethod;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.templateVars = {\n    attributeFragments: 'attributeFragments',\n    attributes: 'attributes',\n    blocksPerInstance: 'blocksPerInstance',\n    easingMethod: 'easingMethod',\n    easingMethods: 'easingMethods',\n    instanceBlockCount: 'instanceBlockCount',\n    instanceDataBinaryTree: 'instanceDataBinaryTree',\n    instanceDataRetrieval: 'instanceDataRetrieval',\n    instanceDestructuring: 'instanceDestructuring',\n    instanceFragments: 'instanceFragments',\n    instanceUniformDeclarations: 'instanceUniformDeclarations',\n    layerUniforms: 'layerUniforms',\n    projectionMethods: 'projectionMethods',\n    shader: 'shader',\n    shaderInput: 'shaderInput',\n    vertexAttributes: 'vertexAttributes',\n};\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./label-layer\"));\n__export(require(\"./label-instance\"));\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar canvas;\nvar MAX_FONT_SIZE = 50;\nvar floor = Math.floor, max = Math.max, min = Math.min;\nvar LabelRasterizer = /** @class */ (function () {\n    function LabelRasterizer() {\n    }\n    /**\n     * This loops until our canvas context is available\n     */\n    LabelRasterizer.awaitContext = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!canvas) return [3 /*break*/, 2];\n                        this.getContext();\n                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 0];\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This renders our label to a sizeable canvas where we loop over the pixel data to determine\n     * the bounds of the label.\n     *\n     * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n     *                                 the size to be rendered to the texture to the size the label\n     *                                 should be within world space.\n     * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n     */\n    LabelRasterizer.calculateLabelSize = function (resource, sampleScale, calculateTexture) {\n        // If a max width is specified, then we must render and determine the potentially truncated text of the\n        // Label. We can do a binary search for the correct truncated label size.\n        if (calculateTexture) {\n            this.calculateTrucatedText(resource);\n        }\n        /** Get the label properties for rasterizing */\n        var label = resource.label;\n        // Get the scaling of the sample base\n        var sampleScaling = sampleScale || resource.sampleScale || 1.0;\n        // Draw our label to a canvas\n        this.drawLabel(label, resource.truncatedText, canvas, sampleScaling);\n        // Measure the contents of the canvas\n        var _a = this.measureContents(canvas), minX = _a.minX, minY = _a.minY, maxX = _a.maxX, maxY = _a.maxY;\n        // Make sure the rasterization object is initialized\n        resource.rasterization = resource.rasterization || {\n            texture: { height: 0, width: 0 },\n            world: { height: 0, width: 0 },\n        };\n        // When a forced sampling is present, it calculates that as the world space\n        if (!calculateTexture) {\n            // Update the calculated texture size.\n            resource.rasterization.world = {\n                height: maxY - minY,\n                width: maxX - minX,\n            };\n        }\n        // Otherwise we first calculate the texture rasterization for the label\n        else {\n            // Update the calculated texture size.\n            resource.rasterization.texture = {\n                height: maxY - minY,\n                width: maxX - minX,\n            };\n            resource.rasterization.canvas = this.createCroppedCanvas(resource, minY, minX);\n            this.calculateLabelSize(resource, 1.0, false);\n        }\n    };\n    /**\n     * This determines what the truncated text of the label will be. If there is no truncation\n     * then the truncated text === the label's text\n     */\n    LabelRasterizer.calculateTrucatedText = function (resource) {\n        var label = resource.label;\n        var maxWidth = label.maxWidth;\n        // If the label has no max width, then there will be no truncation\n        if (!maxWidth) {\n            resource.truncatedText = label.text;\n            return;\n        }\n        // We now do an initial rendering of the label as it will appear in world space\n        this.drawLabel(label, label.text, canvas, 1);\n        // We measure the contents of the rendered item to see if it violates the maxWidth\n        var firstTest = this.measureContents(canvas);\n        // If we're within spec, we do not need to truncate\n        if (firstTest.maxX - firstTest.minX <= maxWidth) {\n            resource.truncatedText = label.text;\n            return;\n        }\n        // At this point we need to binary search through chopping off letters to find a string\n        // That will fit within max width\n        var text = label.text;\n        var left = 0;\n        var right = text.length;\n        var cursor = floor((right - left) / 2.0);\n        var safety = 0;\n        var safetyMax = 50;\n        // Loop to perform the binary search\n        while (right > left && cursor !== 0 && safety++ < safetyMax) {\n            // Draw and measure\n            this.drawLabel(label, text.substr(0, cursor) + \"...\", canvas, 1);\n            var _a = this.measureContents(canvas), minX = _a.minX, maxX = _a.maxX;\n            // If we pass then we move left to cursor to make the test string longer\n            if (maxX - minX <= maxWidth) {\n                left = cursor;\n            }\n            // If we fail, we move right to cursor to make the test string shorter\n            else {\n                right = cursor;\n            }\n            // Get our next cursor position\n            var nextCursor = floor((right - left) / 2.0) + left;\n            // If the next cursor is the same as cursor, then we're done searching\n            if (nextCursor === cursor) {\n                break;\n            }\n            // Move our cursor\n            cursor = nextCursor;\n        }\n        // If cursor is zero, nothing passed and our truncation is just ellipses\n        if (cursor === 0) {\n            resource.truncatedText = '...';\n        }\n        // Otherwise we get the string that passes and use that as our truncated text\n        else {\n            resource.truncatedText = text.substr(0, cursor) + \"...\";\n        }\n    };\n    /**\n     * This generates a canvas that has the cropped version of the label where the label\n     * fits neatly in the canvas object.\n     */\n    LabelRasterizer.createCroppedCanvas = function (resource, top, left) {\n        var cropped = document.createElement('canvas');\n        var context = cropped.getContext('2d');\n        if (context) {\n            var texture = resource.rasterization.texture;\n            cropped.width = texture.width;\n            cropped.height = texture.height;\n            context.imageSmoothingEnabled = false;\n            // Draw just the region the label appears into the canvas\n            context.drawImage(canvas.canvas, left, top, texture.width, texture.height, 0, 0, texture.width, texture.height);\n        }\n        else {\n            console.warn('Could not create a canvas 2d context to generate a label\\'s cropped image.');\n        }\n        return cropped;\n    };\n    /**\n     * This actually renders a string to a canvas context using a label's settings\n     */\n    LabelRasterizer.drawLabel = function (label, text, canvas, sampleScaling) {\n        // Get the font size we will rasterize with\n        var fontSize = this.getLabelRasterizationFontSize(label, sampleScaling);\n        // Set the color of the label to white so we know what color to look for\n        canvas.fillStyle = 'white';\n        // Set the font to the canvas\n        canvas.font = this.makeCSSFont(label, sampleScaling);\n        // We will use the canvas measuring tool to give us a baseline for how wide\n        // The label will be. We add the font size to the width for the padding needed to ensure\n        // The entirety of the text is placed on the canvas.\n        canvas.canvas.width = canvas.measureText(label.text).width + fontSize;\n        // Make our test area the font size with one extra level of the font size\n        // For padding.\n        canvas.canvas.height = fontSize * 2.0;\n        // After adjusting the canvas dimensions we must re-set the font metrics\n        // Set the color of the label to white so we know what color to look for\n        canvas.fillStyle = 'white';\n        // Set the font to the canvas\n        canvas.font = this.makeCSSFont(label, sampleScaling);\n        // Render the text into our canvas for calculating\n        canvas.fillText(text, fontSize / 2.0, fontSize / 4.0 + fontSize);\n    };\n    /**\n     * Attempts to populate the 'canvas' context for rendering labels offscreen.\n     */\n    LabelRasterizer.getContext = function () {\n        if (!canvas) {\n            var potentialCanvas = document.createElement('canvas').getContext('2d');\n            if (potentialCanvas) {\n                canvas = potentialCanvas;\n            }\n            return potentialCanvas;\n        }\n        return canvas;\n    };\n    /**\n     * This retrieves the font size that will be used when rasterizing the label. This takes into\n     * account whether the label is requesting super sampling be present for the rendering.\n     */\n    LabelRasterizer.getLabelRasterizationFontSize = function (label, sampleScale) {\n        return label.fontSize * sampleScale;\n    };\n    /**\n     * Generates the CSS font string based on the label's values\n     */\n    LabelRasterizer.makeCSSFont = function (label, sampleScale) {\n        return label.fontWeight + \" \" + this.getLabelRasterizationFontSize(label, sampleScale) + \"px \" + label.fontFamily;\n    };\n    /**\n     * This measures the contents of what is inside the canvas assumming the rendered values are only white\n     */\n    LabelRasterizer.measureContents = function (canvas) {\n        var _a = canvas.canvas, width = _a.width, height = _a.height;\n        var imageData = canvas.getImageData(0, 0, width, height).data;\n        var r;\n        var minY = Number.MAX_SAFE_INTEGER;\n        var minX = Number.MAX_SAFE_INTEGER;\n        var maxX = Number.MIN_SAFE_INTEGER;\n        var maxY = Number.MIN_SAFE_INTEGER;\n        for (var i = 0; i < width; ++i) {\n            for (var k = 0; k < height; ++k) {\n                var redIndex = k * (width * 4) + i * 4;\n                r = imageData[redIndex];\n                if (r > 0.0) {\n                    minY = min(minY, k);\n                    minX = min(minX, i);\n                    maxX = max(maxX, i);\n                    maxY = max(maxY, k);\n                }\n            }\n        }\n        // The identified pixel needs to be encased and not a direct target\n        minY -= 1;\n        maxY += 2;\n        maxX += 2;\n        minX -= 1;\n        minY = max(minY, 0);\n        minX = max(minX, 0);\n        return { minX: minX, minY: minY, maxX: maxX, maxY: maxY };\n    };\n    /**\n     * Performs the rendering of the label\n     */\n    LabelRasterizer.render = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // Make sure our canvas object is ready for rendering\n                    return [4 /*yield*/, this.awaitContext()];\n                    case 1:\n                        // Make sure our canvas object is ready for rendering\n                        _a.sent();\n                        // Validate the label's input\n                        if (resource.label.fontSize > MAX_FONT_SIZE) {\n                            console.warn('Labels only support font sizes up to 50');\n                            return [2 /*return*/, resource];\n                        }\n                        // Calculate all of the label metrics and generate a canvas on the label that can\n                        // Be rendered to the canvas.\n                        this.calculateLabelSize(resource, resource.sampleScale, true);\n                        return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    /**\n     * Performs the rendering of the label\n     */\n    LabelRasterizer.renderSync = function (resource) {\n        // Ensure our offscreen canvas is prepped\n        this.getContext();\n        if (!canvas) {\n            console.warn('Can not render a label synchronously without the canvas context being ready.');\n            return resource;\n        }\n        // Validate the label's input\n        if (resource.label.fontSize > MAX_FONT_SIZE) {\n            console.warn('Labels only support font sizes up to 50');\n            return resource;\n        }\n        // Calculate all of the label metrics and generate a canvas on the label that can\n        // Be rendered to the canvas.\n        this.calculateLabelSize(resource, resource.sampleScale, true);\n        return resource;\n    };\n    return LabelRasterizer;\n}());\nexports.LabelRasterizer = LabelRasterizer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_atlas_resource_1 = require(\"./base-atlas-resource\");\nvar ImageAtlasResource = /** @class */ (function (_super) {\n    __extends(ImageAtlasResource, _super);\n    function ImageAtlasResource(image) {\n        var _this = _super.call(this) || this;\n        _this.image = image;\n        return _this;\n    }\n    return ImageAtlasResource;\n}(base_atlas_resource_1.BaseAtlasResource));\nexports.ImageAtlasResource = ImageAtlasResource;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// When ratserized to the image, this determines the size of the square rendered to the atlas.\nvar COLOR_RASTERIZATION_SIZE = 2;\n/**\n * Static class for rasterizing a color to a canvas object\n */\nvar ColorRasterizer = /** @class */ (function () {\n    function ColorRasterizer() {\n    }\n    /**\n     * This loops until our canvas context is available\n     */\n    ColorRasterizer.awaitContext = function (canvas) {\n        return __awaiter(this, void 0, void 0, function () {\n            var c, limit;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        c = canvas.getContext('2d'), limit = 0;\n                        _a.label = 1;\n                    case 1:\n                        if (!(!Boolean(c) && limit < 100)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        c = canvas.getContext('2d'), ++limit;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Generates the CSS string version of the color\n     */\n    ColorRasterizer.makeCSS = function (color) {\n        return \"rgba(\" + Math.floor(color.r * 256) + \", \" + Math.floor(color.g * 256) + \", \" + Math.floor(color.b * 256) + \", \" + color.opacity + \")\";\n    };\n    ColorRasterizer.render = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var canvas, context;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        canvas = document.createElement('canvas');\n                        context = canvas.getContext('2d');\n                        return [4 /*yield*/, this.awaitContext(canvas)];\n                    case 1:\n                        _a.sent();\n                        if (context) {\n                            canvas.width = COLOR_RASTERIZATION_SIZE;\n                            canvas.height = COLOR_RASTERIZATION_SIZE;\n                            context.imageSmoothingEnabled = false;\n                            context.fillStyle = this.makeCSS(resource.color);\n                            // Draw the color to the fill space\n                            context.fillRect(0, 0, COLOR_RASTERIZATION_SIZE, COLOR_RASTERIZATION_SIZE);\n                            // Update the resource with the rasterization\n                            resource.rasterization.canvas = canvas;\n                        }\n                        else {\n                            console.warn('Could not create a canvas 2d context to generate a color for rasterization.');\n                        }\n                        return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    return ColorRasterizer;\n}());\nexports.ColorRasterizer = ColorRasterizer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base_atlas_resource_1 = require(\"./base-atlas-resource\");\nvar ColorAtlasResource = /** @class */ (function (_super) {\n    __extends(ColorAtlasResource, _super);\n    function ColorAtlasResource(color) {\n        var _this = _super.call(this) || this;\n        _this.color = color;\n        return _this;\n    }\n    return ColorAtlasResource;\n}(base_atlas_resource_1.BaseAtlasResource));\nexports.ColorAtlasResource = ColorAtlasResource;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Defines a texture that is located on an atlas\n */\nvar SubTexture = /** @class */ (function () {\n    function SubTexture() {\n        /** Stores the aspect ratio of the image for quick reference */\n        this.aspectRatio = 1.0;\n        /** The id of the atlas this texture is located on */\n        this.atlasReferenceID = '';\n        /** This is the actual texture of the atlas this resource is located on */\n        this.atlasTexture = null;\n        /** This is the top left UV coordinate of the sub texture on the atlas */\n        this.atlasTL = { x: 0, y: 0 };\n        /** This is the top right UV coordinate of the sub texture on the atlas */\n        this.atlasTR = { x: 0, y: 0 };\n        /** This is the bottom left UV coordinate of the sub texture on the atlas */\n        this.atlasBL = { x: 0, y: 0 };\n        /** This is the bottom right UV coordinate of the sub texture on the atlas */\n        this.atlasBR = { x: 0, y: 0 };\n        /** This is the normalized width of the sub texture on the atlas */\n        this.widthOnAtlas = 0;\n        /** This is the normalized height of the sub texture on the atlas */\n        this.heightOnAtlas = 0;\n        /** This flag is set to false when the underlying texture is no longer valid */\n        this.isValid = false;\n        /** Width in pixels of the image on the atlas */\n        this.pixelWidth = 0;\n        /** Height in pixels of the image on the atlas */\n        this.pixelHeight = 0;\n    }\n    return SubTexture;\n}());\nexports.SubTexture = SubTexture;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar identify_by_key_1 = require(\"../../util/identify-by-key\");\nvar pack_node_1 = require(\"./pack-node\");\nvar sub_texture_1 = require(\"./sub-texture\");\n/**\n * These are valid atlas sizes available. We force a power of 2 to be utilized.\n * We do not allow crazy large sizes as browsers have very real caps on resources.\n * This helps implementations be a little smarter about what they are using. Future\n * versions may increase this number as GPUs improve and standards allow greater\n * flexibility.\n */\nvar AtlasSize;\n(function (AtlasSize) {\n    AtlasSize[AtlasSize[\"_2\"] = 2] = \"_2\";\n    AtlasSize[AtlasSize[\"_4\"] = 4] = \"_4\";\n    AtlasSize[AtlasSize[\"_8\"] = 8] = \"_8\";\n    AtlasSize[AtlasSize[\"_16\"] = 16] = \"_16\";\n    AtlasSize[AtlasSize[\"_32\"] = 32] = \"_32\";\n    AtlasSize[AtlasSize[\"_64\"] = 64] = \"_64\";\n    AtlasSize[AtlasSize[\"_128\"] = 128] = \"_128\";\n    AtlasSize[AtlasSize[\"_256\"] = 256] = \"_256\";\n    AtlasSize[AtlasSize[\"_512\"] = 512] = \"_512\";\n    AtlasSize[AtlasSize[\"_1024\"] = 1024] = \"_1024\";\n    AtlasSize[AtlasSize[\"_2048\"] = 2048] = \"_2048\";\n    AtlasSize[AtlasSize[\"_4096\"] = 4096] = \"_4096\";\n})(AtlasSize = exports.AtlasSize || (exports.AtlasSize = {}));\n/**\n * This represents a single Texture on the gpu that is composed of several smaller textures\n * as a 'look up'.\n */\nvar Atlas = /** @class */ (function (_super) {\n    __extends(Atlas, _super);\n    function Atlas(options) {\n        var _this = _super.call(this, options) || this;\n        /**\n         * This is all of the resources associated with this atlas. The boolean flag indicates if the resource\n         * is flagged for removal. When set to false, the resource is no longer valid and can be removed from\n         * the atlas at any given moment.\n         */\n        _this.validResources = new Map();\n        var canvas = document.createElement('canvas');\n        _this.width = canvas.width = options.width;\n        _this.height = canvas.height = options.height;\n        _this.textureSettings = options.textureSettings;\n        // Set up the packing for this atlas\n        _this.packing = new pack_node_1.PackNode(0, 0, options.width, options.height);\n        // Make sure the texture is started and updated\n        _this.updateTexture(canvas);\n        return _this;\n    }\n    /**\n     * This invalidates the SubTexture of an atlas resource.\n     */\n    Atlas.prototype.invalidateResource = function (resource) {\n        var zero = { x: 0, y: 0 };\n        resource.texture.aspectRatio = 1;\n        resource.texture.atlasBL = zero;\n        resource.texture.atlasBR = zero;\n        resource.texture.atlasTL = zero;\n        resource.texture.atlasTR = zero;\n        resource.texture.atlasReferenceID = '';\n        resource.texture.pixelWidth = 0;\n        resource.texture.pixelHeight = 0;\n        resource.texture.isValid = false;\n    };\n    /**\n     * Sets the parent manager of this atlas\n     */\n    Atlas.prototype.setManager = function (manager) {\n        this.manager = manager;\n    };\n    /**\n     * Adds a resource to this atlas AND ensures the resource is flagged valid for use.\n     *\n     * @return {boolean} True if the resource successfully registered\n     */\n    Atlas.prototype.registerResource = function (resource) {\n        if (this.validResources.get(resource) === undefined) {\n            if (!resource.texture || !resource.texture.isValid) {\n                if (!resource.texture) {\n                    resource.texture = new sub_texture_1.SubTexture();\n                }\n                resource.texture.isValid = true;\n                this.validResources.set(resource, true);\n                return true;\n            }\n            else {\n                console.warn('Atlas Error:', this.id, 'Attempted to add a resource to an Atlas that is already a valid resource on another atlas.', 'Consider Creating a new resource to be loaded into this particular atlas.', 'Resource:', resource);\n            }\n        }\n        else {\n            console.warn('Atlas Error:', this.id, 'A resource was trying to be added to the atlas that has already been added before.', 'Consider creating a new resource to indicate what you want loaded to the atlas', 'Resource:', resource);\n        }\n        return false;\n    };\n    /**\n     * This flags a resource from removal from an atlas.\n     *\n     * NOTE: This does not immediately clear the resource fromt he atlas, nor does it even guarantee\n     * the resource will be cleared from the atlas for a while. It merely suggests the resource be removed\n     * and makes the SubTexture invalid. It could be a long while before the atlas gets regnerated and repacked\n     * to actually reflect the resource not existing on the atlas.\n     */\n    Atlas.prototype.removeResource = function (resource) {\n        if (this.validResources.get(resource)) {\n            this.validResources.set(resource, false);\n            this.invalidateResource(resource);\n        }\n        else {\n            console.warn('Atlas Error:', this.id, 'Attempted to remove a resource that does not exist on this atlas.', 'or the resource was already considered invalidated on this atlas.', 'Resource:', resource);\n        }\n    };\n    /**\n     * TODO:\n     * This performs the currently best known way to update a texture.\n     *\n     * This is the current best attempt at updating the atlas which is junk as it destroys the old texture\n     * And makes a new one. We REALLY should be just subTexture2D updating the texture, but Three makes that really\n     * Difficult\n     */\n    Atlas.prototype.updateTexture = function (canvas) {\n        if (this.texture) {\n            var redoneCanvas = this.texture.image;\n            this.texture.dispose();\n            this.texture = new Three.Texture(redoneCanvas);\n        }\n        else {\n            this.texture = new Three.Texture(canvas);\n        }\n        // Apply any relevant options to the texture desired to be set\n        this.texture.generateMipmaps = true;\n        this.texture.premultiplyAlpha = true;\n        this.textureSettings && Object.assign(this.texture, this.textureSettings);\n        this.texture.needsUpdate = true;\n    };\n    /**\n     * This frees up all the resources down to the GPU related to this atlas. It also\n     * loops through every resource and invalidates the texturing information within\n     * them so subsequent accidental renders will appear as a single color rather than\n     * an artifacted element.\n     */\n    Atlas.prototype.destroy = function () {\n        var _this = this;\n        this.texture.dispose();\n        this.validResources.forEach(function (isValid, resource) {\n            _this.invalidateResource(resource);\n        });\n    };\n    return Atlas;\n}(identify_by_key_1.IdentifyByKey));\nexports.Atlas = Atlas;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getProgramInfo(gl, program) {\n    var result = {\n        attributeCount: 0,\n        attributes: new Array(),\n        uniformCount: 0,\n        uniforms: new Array(),\n    }, activeUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS), activeAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    // Taken from the WebGl spec:\n    // Http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14\n    var enums = {\n        0x8B50: 'FLOAT_VEC2',\n        0x8B51: 'FLOAT_VEC3',\n        0x8B52: 'FLOAT_VEC4',\n        0x8B53: 'INT_VEC2',\n        0x8B54: 'INT_VEC3',\n        0x8B55: 'INT_VEC4',\n        0x8B56: 'BOOL',\n        0x8B57: 'BOOL_VEC2',\n        0x8B58: 'BOOL_VEC3',\n        0x8B59: 'BOOL_VEC4',\n        0x8B5A: 'FLOAT_MAT2',\n        0x8B5B: 'FLOAT_MAT3',\n        0x8B5C: 'FLOAT_MAT4',\n        0x8B5E: 'SAMPLER_2D',\n        0x8B60: 'SAMPLER_CUBE',\n        0x1400: 'BYTE',\n        0x1401: 'UNSIGNED_BYTE',\n        0x1402: 'SHORT',\n        0x1403: 'UNSIGNED_SHORT',\n        0x1404: 'INT',\n        0x1405: 'UNSIGNED_INT',\n        0x1406: 'FLOAT',\n    };\n    var blocks = {\n        0x8B50: 1,\n        0x8B51: 1,\n        0x8B52: 1,\n        0x8B53: 1,\n        0x8B54: 1,\n        0x8B55: 1,\n        0x8B56: 1,\n        0x8B57: 1,\n        0x8B58: 1,\n        0x8B59: 1,\n        0x8B5A: 1,\n        0x8B5B: 3,\n        0x8B5C: 4,\n        0x8B5E: 1,\n        0x8B60: 1,\n        0x1400: 1,\n        0x1401: 1,\n        0x1402: 1,\n        0x1403: 1,\n        0x1404: 1,\n        0x1405: 1,\n        0x1406: 1,\n    };\n    // Loop through active uniforms\n    for (var i = 0; i < activeUniforms; ++i) {\n        var uniform = gl.getActiveUniform(program, i);\n        uniform.typeName = enums[uniform.type];\n        result.uniforms.push(uniform);\n        result.uniformCount += uniform.size;\n        uniform.size = uniform.size * blocks[uniform.type];\n    }\n    // Loop through active attributes\n    for (var i = 0; i < activeAttributes; i++) {\n        var attribute = gl.getActiveAttrib(program, i);\n        attribute.typeName = enums[attribute.type];\n        result.attributes.push(attribute);\n        result.attributeCount += attribute.size;\n    }\n    return result;\n}\nexports.getProgramInfo = getProgramInfo;\nvar WebGLStat = /** @class */ (function () {\n    function WebGLStat() {\n    }\n    WebGLStat.MAX_VERTEX_UNIFORMS = 0;\n    WebGLStat.MAX_FRAGMENT_UNIFORMS = 0;\n    WebGLStat.MAX_ATTRIBUTES = 0;\n    WebGLStat.WEBGL_SUPPORTED = false;\n    WebGLStat.MAX_TEXTURE_SIZE = 0;\n    return WebGLStat;\n}());\nexports.WebGLStat = WebGLStat;\nfunction initStats() {\n    // Let's perform some immediate operations to do some gl querying for useful information\n    function getAContext() {\n        try {\n            var canvas = document.createElement('canvas');\n            return window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    // Attempt to retrieve a context for webgl\n    var gl = getAContext();\n    // If the context exists, then we know gl is supported and we can fill in some metrics\n    if (gl) {\n        WebGLStat.WEBGL_SUPPORTED = true;\n        WebGLStat.MAX_VERTEX_UNIFORMS = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n        WebGLStat.MAX_FRAGMENT_UNIFORMS = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n        WebGLStat.MAX_ATTRIBUTES = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n        WebGLStat.MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    }\n}\ninitStats();\n","/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',\n  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',\n  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',\n  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',\n  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',\n  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',\n  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',\n  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',\n  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',\n  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',\n  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // Internet Explorer and Edge do not support colors.\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n    return false;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar browser = require(\"bowser\");\nvar three_1 = require(\"three\");\nvar debug = require('debug')('CommunicationsView:Mouse');\n/** Used to adjust the base whee delta for IE browsers */\nvar IE_ADJUSTMENT = 1 / 30;\n/** Used to adjust the rates for IE 11 */\nvar OLD_IE_ADJUSTMENT = -0.25;\n// This determines how large the delta can grow to in firefox\nvar MAX_FIREFOX_WHEELDELTA = 100;\n/**\n * Create a low pass filter memory bank so we can slow down rapid accelerations and let normal slower accelerations pass\n * Common use case for this is the discrepancy in firefox from mousewheels to trackpad scroll speeds\n */\nvar lowPassY = [0, 0, 0, 0];\n// These coefficients represent the coefficients of a FIR filter.\n// This FIR filter uses the lowPassY as the memory for the filter and is created for\n// The reasons specified for the lowPassY memory. To edit the coefficients, you simply\n// Ensure the coefficients added together === 1.0. If they do not, you may get an unstable\n// Result that goes to infinity rather quickly. Changing the distribution of these coefficients\n// Alters the rate at which the delta can approach MAX_FIREFOX_WHEELDELTA. Explaining exactly\n// How it affects the rate requires an understanding of FIR filters, so unless this is already\n// Known knowledge, it would be faster to just tweak the coefficients until a desired effect is\n// Attained.\nvar LOW_PASS_U0 = 0.02;\nvar LOW_PASS_U1 = 0.1;\nvar LOW_PASS_U2 = 0.18;\nvar LOW_PASS_U3 = 0.7;\nfunction normalizeFirefoxWheel(e) {\n    var wheel = e;\n    var deltaX = 0;\n    var deltaY = 0;\n    // Reset the filter if the direction changes to prevent lag in directional change\n    if (Math.sign(lowPassY[0]) !== Math.sign(deltaY)) {\n        lowPassY.splice(0, lowPassY.length, 0, 0, 0, 0);\n    }\n    deltaX = wheel.deltaX * MAX_FIREFOX_WHEELDELTA;\n    // Calculate the next value output from the FIR filter\n    deltaY = (wheel.deltaY * MAX_FIREFOX_WHEELDELTA) * LOW_PASS_U0 + lowPassY[0] * LOW_PASS_U1 + lowPassY[1] * LOW_PASS_U2 + lowPassY[2] * LOW_PASS_U3;\n    // Store the value of the filter in the FIR memory bank\n    lowPassY.unshift(deltaY);\n    // Keep our FIR memory clean and only the size of the number of coefficients\n    lowPassY.pop();\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeChromeWheel(e) {\n    var wheel = e;\n    return new three_1.Vector2(wheel.deltaX, -wheel.deltaY);\n}\nfunction normalizeIE11Wheel(e) {\n    var wheel = e;\n    var deltaX = wheel.deltaX;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    var deltaY = wheel.deltaY;\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = (wheel.wheelDelta || -wheel.detail) * OLD_IE_ADJUSTMENT;\n        }\n    }\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeIE12Wheel(e) {\n    var wheel = e;\n    var deltaX = wheel.deltaX, deltaY = wheel.deltaY;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = wheel.wheelDelta || -wheel.detail;\n        }\n    }\n    var v = new three_1.Vector2(deltaX, -deltaY);\n    v.multiplyScalar(0.25);\n    return v;\n}\n// Determine this browsers version of wheel normalization and apply it\nvar normalizeWheel;\nexports.normalizeWheel = normalizeWheel;\nif (browser.firefox) {\n    debug('Using mouse wheel for firefox');\n    exports.normalizeWheel = normalizeWheel = normalizeFirefoxWheel;\n}\nelse if (browser.msie && +browser.version >= 11) {\n    debug('Using mouse wheel for IE 11');\n    exports.normalizeWheel = normalizeWheel = normalizeIE11Wheel;\n}\nelse if (browser.msedge) {\n    debug('Using mouse wheel for MS EDGE');\n    exports.normalizeWheel = normalizeWheel = normalizeIE12Wheel;\n}\nelse {\n    debug('Using mouse wheel for Chrome');\n    exports.normalizeWheel = normalizeWheel = normalizeChromeWheel;\n}\n/**\n * Analyzes a MouseEvent and calculates the mouse coordinates (relative to the element).\n */\nfunction eventElementPosition(e, relative) {\n    var mouseX = 0, mouseY = 0, eventX = 0, eventY = 0, object = relative || (e.nativeEvent && e.nativeEvent.target) || e.target;\n    // Get mouse position on document crossbrowser\n    if (!e) {\n        e = window.event;\n    }\n    if (e.pageX || e.pageY) {\n        mouseX = e.pageX;\n        mouseY = e.pageY;\n    }\n    else if (e.clientX || e.clientY) {\n        mouseX = e.clientX + document.body.scrollLeft\n            + document.documentElement.scrollLeft;\n        mouseY = e.clientY + document.body.scrollTop\n            + document.documentElement.scrollTop;\n    }\n    // Get parent element position in document\n    if (object.offsetParent) {\n        do {\n            eventX += object.offsetLeft;\n            eventY += object.offsetTop;\n            object = object.offsetParent;\n        } while (object);\n    }\n    // Mouse position minus elm position is mouseposition relative to element:\n    return { x: mouseX - eventX, y: mouseY - eventY };\n}\nexports.eventElementPosition = eventElementPosition;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./image-layer\"));\n__export(require(\"./image-instance\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\nvar event_manager_1 = require(\"../surface/event-manager\");\nvar util_1 = require(\"../util\");\nvar CameraBoundsAnchor;\n(function (CameraBoundsAnchor) {\n    CameraBoundsAnchor[CameraBoundsAnchor[\"TOP_LEFT\"] = 0] = \"TOP_LEFT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"TOP_MIDDLE\"] = 1] = \"TOP_MIDDLE\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"TOP_RIGHT\"] = 2] = \"TOP_RIGHT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"MIDDLE_LEFT\"] = 3] = \"MIDDLE_LEFT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"MIDDLE\"] = 4] = \"MIDDLE\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"MIDDLE_RIGHT\"] = 5] = \"MIDDLE_RIGHT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"BOTTOM_LEFT\"] = 6] = \"BOTTOM_LEFT\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"BOTTOM_MIDDLE\"] = 7] = \"BOTTOM_MIDDLE\";\n    CameraBoundsAnchor[CameraBoundsAnchor[\"BOTTOM_RIGHT\"] = 8] = \"BOTTOM_RIGHT\";\n})(CameraBoundsAnchor = exports.CameraBoundsAnchor || (exports.CameraBoundsAnchor = {}));\nvar max = Math.max, min = Math.min;\n/**\n * This provides some very basic common needs for a camera control system. This is not a total solution\n * very every scenario. This should just often handle most basic needs.\n */\nvar BasicCameraController = /** @class */ (function (_super) {\n    __extends(BasicCameraController, _super);\n    function BasicCameraController(options) {\n        var _this = _super.call(this) || this;\n        /** Informative property indicating the controller is panning the chart or not */\n        _this.isPanning = false;\n        /** This is the filter applied to panning operations */\n        _this.panFilter = function (offset, view, allViews) { return offset; };\n        /** THis is the filter applied to tscaling operations */\n        _this.scaleFilter = function (scale, view, allViews) { return scale; };\n        /** The view that must be the start or focus of the interactions in order for the interactions to occur */\n        _this.startViews = [];\n        /**\n         * Callback for when the range has changed for the camera in a view\n         */\n        _this.onRangeChanged = function (camera, targetView) { };\n        /**\n         * This flag is set to true when a start view is targetted on mouse down even if it is not\n         * the top most view.\n         */\n        _this.startViewDidStart = false;\n        /**\n         * Corrects camera offset to respect current bounds and anchor.\n         */\n        _this.applyBounds = function () {\n            if (_this.bounds && _this.camera) {\n                var targetView = _this.getView(_this.bounds.view);\n                _this.applyScaleBounds();\n                // Next bound the positioning\n                if (targetView) {\n                    _this.camera.offset[0] = _this.boundsHorizontalOffset(targetView, _this.bounds);\n                    _this.camera.offset[1] = _this.boundsVerticalOffset(targetView, _this.bounds);\n                }\n            }\n        };\n        _this.applyScaleBounds = function () {\n            if (_this.camera && _this.bounds) {\n                // First bound the scaling\n                if (_this.bounds.scaleMin) {\n                    _this.camera.scale = [\n                        max(_this.camera.scale[0], _this.bounds.scaleMin[0]),\n                        max(_this.camera.scale[1], _this.bounds.scaleMin[1]),\n                        max(_this.camera.scale[2], _this.bounds.scaleMin[2]),\n                    ];\n                }\n                if (_this.bounds.scaleMax) {\n                    _this.camera.scale = [\n                        min(_this.camera.scale[0], _this.bounds.scaleMax[0]),\n                        min(_this.camera.scale[1], _this.bounds.scaleMax[1]),\n                        min(_this.camera.scale[2], _this.bounds.scaleMax[2]),\n                    ];\n                }\n            }\n        };\n        if (options.bounds) {\n            _this.setBounds(options.bounds);\n        }\n        _this.camera = options.camera;\n        _this.scaleFactor = options.scaleFactor || 1000.0;\n        _this.ignoreCoverViews = options.ignoreCoverViews || false;\n        if (options.startView) {\n            _this.startViews = Array.isArray(options.startView) ? options.startView : [options.startView];\n        }\n        _this.panFilter = options.panFilter || _this.panFilter;\n        _this.scaleFilter = options.scaleFilter || _this.scaleFilter;\n        _this.onRangeChanged = options.onRangeChanged || _this.onRangeChanged;\n        return _this;\n    }\n    /**\n     * Calculation for adhering to an anchor - x-axis offset only.\n     */\n    BasicCameraController.prototype.anchoredByBoundsHorizontal = function (targetView, bounds) {\n        switch (bounds.anchor) {\n            case CameraBoundsAnchor.TOP_LEFT:\n            case CameraBoundsAnchor.MIDDLE_LEFT:\n            case CameraBoundsAnchor.BOTTOM_LEFT:\n                return -(bounds.worldBounds.left -\n                    bounds.screenPadding.left / this.camera.scale[0]);\n            case CameraBoundsAnchor.TOP_MIDDLE:\n            case CameraBoundsAnchor.MIDDLE:\n            case CameraBoundsAnchor.BOTTOM_MIDDLE:\n                return -(bounds.worldBounds.right - (bounds.worldBounds.width / 2) -\n                    (0.5 * ((targetView.screenBounds.width + bounds.screenPadding.right) / this.camera.scale[0])));\n            case CameraBoundsAnchor.TOP_RIGHT:\n            case CameraBoundsAnchor.MIDDLE_RIGHT:\n            case CameraBoundsAnchor.BOTTOM_RIGHT:\n                return -(bounds.worldBounds.right - ((targetView.screenBounds.width - bounds.screenPadding.right) / this.camera.scale[0]));\n        }\n    };\n    /**\n     * Calculation for adhering to an anchor - y-axis offset only.\n     */\n    BasicCameraController.prototype.anchoredByBoundsVertical = function (targetView, bounds) {\n        switch (bounds.anchor) {\n            case CameraBoundsAnchor.TOP_LEFT:\n            case CameraBoundsAnchor.TOP_MIDDLE:\n            case CameraBoundsAnchor.TOP_RIGHT:\n                return -(bounds.worldBounds.top) -\n                    (-bounds.screenPadding.top / this.scale[1]);\n            case CameraBoundsAnchor.MIDDLE_LEFT:\n            case CameraBoundsAnchor.MIDDLE:\n            case CameraBoundsAnchor.MIDDLE_RIGHT:\n                return -(bounds.worldBounds.bottom - (bounds.worldBounds.height / 2)) +\n                    ((0.5 * (targetView.screenBounds.height - bounds.screenPadding.bottom) / this.scale[1]));\n            case CameraBoundsAnchor.BOTTOM_LEFT:\n            case CameraBoundsAnchor.BOTTOM_MIDDLE:\n            case CameraBoundsAnchor.BOTTOM_RIGHT:\n                return -(bounds.worldBounds.bottom -\n                    (targetView.screenBounds.height - bounds.screenPadding.bottom) / this.scale[1]);\n        }\n    };\n    /**\n     * Returns offset on x-axis due to current bounds and anchor.\n     */\n    BasicCameraController.prototype.boundsHorizontalOffset = function (targetView, bounds) {\n        var worldTLinScreenSpace = targetView.worldToScreen({ x: bounds.worldBounds.left, y: bounds.worldBounds.top });\n        var worldBRinScreenSpace = targetView.worldToScreen({ x: bounds.worldBounds.right, y: bounds.worldBounds.bottom });\n        var widthDifference = (worldBRinScreenSpace.x - worldTLinScreenSpace.x) +\n            bounds.screenPadding.left +\n            bounds.screenPadding.right -\n            targetView.screenBounds.width;\n        // If the worldBounds are smaller than the screenBounds,\n        // We offset according to the anchoring\n        if (widthDifference < 0) {\n            return this.anchoredByBoundsHorizontal(targetView, bounds);\n        }\n        if (worldBRinScreenSpace.x < (targetView.screenBounds.right - bounds.screenPadding.right)) {\n            return (-bounds.worldBounds.right + (targetView.screenBounds.width - bounds.screenPadding.right) / this.camera.scale[0]);\n        }\n        if (worldTLinScreenSpace.x > (targetView.screenBounds.left + bounds.screenPadding.left)) {\n            return (-bounds.worldBounds.left + (bounds.screenPadding.left / this.camera.scale[0]));\n        }\n        return this.camera.offset[0];\n    };\n    /**\n     * Returns offset on y-axis due to current bounds and anchor.\n     */\n    BasicCameraController.prototype.boundsVerticalOffset = function (targetView, bounds) {\n        var worldTLinScreenSpace = targetView.worldToScreen({ x: bounds.worldBounds.left, y: bounds.worldBounds.top });\n        var worldBRinScreenSpace = targetView.worldToScreen({ x: bounds.worldBounds.right, y: bounds.worldBounds.bottom });\n        var heightDifference = (worldBRinScreenSpace.y - worldTLinScreenSpace.y) +\n            bounds.screenPadding.top +\n            bounds.screenPadding.bottom -\n            targetView.screenBounds.height;\n        // If the viewBounds are larger than the screenBounds,\n        // We offset according to the anchoring\n        if (heightDifference < 0) {\n            return this.anchoredByBoundsVertical(targetView, bounds);\n        }\n        if (worldTLinScreenSpace.y > targetView.screenBounds.top - bounds.screenPadding.top) {\n            return (-(bounds.worldBounds.top - (bounds.screenPadding.top / this.camera.scale[1])));\n        }\n        if (worldBRinScreenSpace.y < targetView.screenBounds.bottom + bounds.screenPadding.bottom) {\n            return (-(bounds.worldBounds.bottom + ((-targetView.screenBounds.height + bounds.screenPadding.bottom) / this.camera.scale[1])));\n        }\n        return this.camera.offset[1];\n    };\n    BasicCameraController.prototype.canStart = function (viewId) {\n        return (this.startViews.length === 0 ||\n            (this.startViews && this.startViews.indexOf(viewId) > -1) ||\n            this.startViewDidStart && this.ignoreCoverViews);\n    };\n    BasicCameraController.prototype.findCoveredStartView = function (e) {\n        var _this = this;\n        var found = e.viewsUnderMouse.find(function (under) { return _this.startViews.indexOf(under.view.id) > -1; });\n        this.startViewDidStart = Boolean(found);\n        if (found) {\n            this.coveredStartView = found.view;\n        }\n    };\n    BasicCameraController.prototype.getTargetView = function (e) {\n        // If we have a start view and we do not ignore covering views,\n        // Then our target view is the view we started with\n        if (this.startViews && !this.ignoreCoverViews) {\n            return e.target.view;\n        }\n        // Otherwise, we use the covered start view\n        else {\n            return this.coveredStartView;\n        }\n    };\n    /**\n     * Used to aid in handling the pan effect and determine the contextual view targetted.\n     */\n    BasicCameraController.prototype.handleMouseDown = function (e, button) {\n        if (this.startViews) {\n            // We look for valid covered views on mouse down so dragging will work\n            this.findCoveredStartView(e);\n            // If this is a valid start view, then we enter a panning state with the mouse down\n            if (e.start) {\n                this.isPanning = (this.canStart(e.start.view.id) || this.isPanning);\n            }\n        }\n    };\n    /**\n     * Used to aid in handling the pan effect\n     */\n    BasicCameraController.prototype.handleMouseUp = function (e) {\n        this.startViewDidStart = false;\n        this.isPanning = false;\n    };\n    /**\n     * Applies a panning effect by adjusting the camera's offset.\n     */\n    BasicCameraController.prototype.handleDrag = function (e, drag) {\n        if (e.start) {\n            if (this.canStart(e.start.view.id)) {\n                var pan = [(drag.screen.delta.x / this.camera.scale[0]),\n                    (drag.screen.delta.y / this.camera.scale[1]),\n                    0];\n                if (this.panFilter) {\n                    pan = this.panFilter(pan, e.start.view, e.viewsUnderMouse.map(function (v) { return v.view; }));\n                }\n                this.camera.offset[0] += pan[0];\n                this.camera.offset[1] += pan[1];\n                // Add additional correction for bounds\n                this.applyBounds();\n                // Broadcast the change occurred\n                this.onRangeChanged(this.camera, e.start.view);\n                // Add additional correction for bounds\n                this.applyBounds();\n            }\n        }\n    };\n    /**\n     * Applies a scaling effect to the camera for mouse wheel events\n     */\n    BasicCameraController.prototype.handleWheel = function (e, wheelMetrics) {\n        // Every mouse wheel event must look to see if it's over a valid covered start view\n        this.findCoveredStartView(e);\n        if (this.canStart(e.target.view.id)) {\n            var targetView = this.getTargetView(e);\n            var beforeZoom = targetView.screenToWorld(e.screen.mouse);\n            var currentZoomX = this.camera.scale[0] || 1.0;\n            var currentZoomY = this.camera.scale[1] || 1.0;\n            var scale = [wheelMetrics.wheel[1] / this.scaleFactor *\n                    currentZoomX, wheelMetrics.wheel[1] / this.scaleFactor * currentZoomY, 1];\n            if (this.scaleFilter) {\n                scale = this.scaleFilter(scale, targetView, e.viewsUnderMouse.map(function (v) { return v.view; }));\n            }\n            this.camera.scale[0] = currentZoomX + scale[0];\n            this.camera.scale[1] = currentZoomY + scale[1];\n            // Ensure the new scale values are within bounds before attempting to correct offsets\n            this.applyScaleBounds();\n            var afterZoom = targetView.screenToWorld(e.screen.mouse);\n            this.camera.offset[0] -= (beforeZoom.x - afterZoom.x);\n            this.camera.offset[1] -= (beforeZoom.y - afterZoom.y);\n            // Add additional correction for bounds\n            this.applyBounds();\n            // Broadcast the change occurred\n            this.onRangeChanged(this.camera, targetView);\n            // Add additional correction for bounds\n            this.applyBounds();\n        }\n    };\n    // These are the currently Unused responses for this controller\n    BasicCameraController.prototype.handleMouseOut = function (e) { };\n    BasicCameraController.prototype.handleClick = function (e) { };\n    BasicCameraController.prototype.handleMouseMove = function (e) { };\n    BasicCameraController.prototype.handleMouseOver = function (e) { };\n    /**\n     * Evaluates the world bounds the specified view is observing\n     *\n     * @param viewId The id of the view when the view was generated when the surface was made\n     */\n    BasicCameraController.prototype.getRange = function (viewId) {\n        /** Get the projections for the provided view */\n        var projection = this.getProjection(viewId);\n        /** Get the bounds on the screen for the indicated view */\n        var screenBounds = this.getViewScreenBounds(viewId);\n        // Make sure we have a valid projection and screen bounds to make the adjustment\n        if (projection && screenBounds) {\n            /** Get the current viewed world bounds of the view */\n            var topLeft = projection.screenToWorld(screenBounds);\n            var bottomRight = projection.screenToWorld({ x: screenBounds.right, y: screenBounds.bottom });\n            return new bounds_1.Bounds({\n                height: bottomRight.y - topLeft.y,\n                width: bottomRight.x - topLeft.x,\n                x: topLeft.x,\n                y: topLeft.y,\n            });\n        }\n        return new bounds_1.Bounds({ x: 0, y: 0, width: 1, height: 1 });\n    };\n    Object.defineProperty(BasicCameraController.prototype, \"pan\", {\n        /**\n         * Retrieves the current pan of the controlled camera\n         */\n        get: function () {\n            return this.camera.offset;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets bounds applicable to the supplied view.\n     * If no view is supplied, it uses the first in the startViews array\n     */\n    BasicCameraController.prototype.setBounds = function (bounds) {\n        this.bounds = bounds;\n        this.applyBounds();\n    };\n    Object.defineProperty(BasicCameraController.prototype, \"scale\", {\n        /**\n         * Retrieves the current scale of the camera\n         */\n        get: function () {\n            return this.camera.scale;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This lets you set the visible range of a view based on the view's camera. This will probably not work\n     * as expected if the view indicated and this controller do not share the same camera.\n     *\n     * @param viewId The id of the view when the view was generated when the surface was made\n     */\n    BasicCameraController.prototype.setRange = function (newWorld, viewId) {\n        /** Get the projections for the provided view */\n        var projection = this.getProjection(viewId);\n        /** Get the bounds on the screen for the indicated view */\n        var screenBounds = this.getViewScreenBounds(viewId);\n        /** Get the view the range is being applied towards */\n        var view = this.getView(viewId);\n        // Make sure we have a valid projection and screen bounds to make the adjustment\n        if (projection && screenBounds && view) {\n            var deltaScale = util_1.subtract3([\n                screenBounds.width / newWorld.width,\n                screenBounds.height / newWorld.height,\n                1,\n            ], this.camera.scale);\n            this.camera.scale = util_1.add3(this.camera.scale, this.scaleFilter(deltaScale, view, [view]));\n            var deltaPan = util_1.subtract3([\n                -newWorld.x,\n                -newWorld.y,\n                0,\n            ], this.camera.offset);\n            this.camera.offset = util_1.add3(this.camera.offset, this.scaleFilter(deltaPan, view, [view]));\n            // Bound the camera to the specified bounding range\n            this.applyBounds();\n            // Broadcast the change occurred\n            this.onRangeChanged(this.camera, view);\n            // Bound the camera to the specified bounding range\n            this.applyBounds();\n        }\n    };\n    return BasicCameraController;\n}(event_manager_1.EventManager));\nexports.BasicCameraController = BasicCameraController;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./basic-camera-controller\"));\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float borderSize;\\nvarying vec2 pointCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  vertexColor = color * color.a;\\n  float size = radius * scaleFactor;\\n  borderSize = mix(\\n    (thickness + 1.5) / size,\\n    ((thickness * pixelRatio) / size),\\n    float(pixelRatio > 1.0)\\n  );\\n  edgeSharpness = mix(0.8, 0.01, min((size * 3.0 * pixelRatio) / (45.0 * pixelRatio), 1.0));\\n  pointCoord = (position.xy + vec2(1.0, 1.0)) / 2.0;\\n\\n  // Center within clip space\\n  vec4 clipCenter = clipSpace(vec3(center, depth));\\n  // Center in screen space\\n  vec2 screenCenter = (clipCenter.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Position in screen space\\n  vec2 vertex = (position.xy * size) + screenCenter;\\n  // Position back to clip space\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), clipCenter.zw);\\n}\\n\"","module.exports = \"precision highp float;\\n\\n/** This is the color of the ring */\\nvarying vec4 vertexColor;\\n/**\\n * This is how sharp the ring renders. For tiny rings, it's best to have\\n * less sharpness to better convey the shape of a circle. A good starter setting:\\n * edgeSharpness = mix(0.8, 0.01, min(gl_PointSize / 45.0, 1.0));\\n */\\nvarying float edgeSharpness;\\n/**\\n * This should be a value that sets the thickness of the ring in normal space\\n * relative to the PointSize\\n */\\nvarying float borderSize;\\n/**\\n * Since this is now a quad instead of a point sprite, this provides what gl_PointCoord\\n * used to provide.\\n */\\nvarying vec2 pointCoord;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius + (radius * 0.01),\\n    dot(dist, dist) * 4.0\\n  );\\n}\\n\\nvoid main() {\\n  float outer_step_factor = circle(pointCoord, 1.0);\\n  float inner_step_factor = circle(pointCoord, 1.0 - borderSize);\\n\\n  gl_FragColor = mix(\\n    mix(                        // Select the outer color outside of the inner radius\\n      vec4(0.0, 0.0, 0.0, 0.0),    // Select invisible outside of inner and outer radius\\n      vertexColor,                  // Select outer color outside of inner, but inside outer\\n      outer_step_factor\\n    ),\\n    vec4(0.0, 0.0, 0.0, 0.0),                 // Select inner color inside inner\\n    inner_step_factor\\n  );\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar max = Math.max;\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar RingLayer = /** @class */ (function (_super) {\n    __extends(RingLayer, _super);\n    function RingLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    RingLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given circle\n            boundsAccessor: function (ring) { return new primitives_1.Bounds({\n                height: ring.radius * 2,\n                width: ring.radius * 2,\n                x: ring.x - ring.radius,\n                y: ring.y - ring.radius,\n            }); },\n            // Provide a precise hit test for the ring\n            hitTest: function (ring, point, view) {\n                var r = ring.radius / max.apply(void 0, view.camera.scale);\n                var delta = [\n                    point.x - ring.x,\n                    point.y - ring.y,\n                ];\n                return (delta[0] * delta[0] + delta[1] * delta[1]) < (r * r);\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    RingLayer.prototype.initShader = function () {\n        var scaleFactor = this.props.scaleFactor || (function () { return 1; });\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: -1,\n            1: -1,\n            2: -1,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./ring-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'center',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'radius',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.radius]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.color; },\n                },\n                {\n                    block: 2,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'thickness',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.thickness]; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (_) { return [scaleFactor()]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./ring-layer.vs'),\n        };\n    };\n    RingLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    RingLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return RingLayer;\n}(layer_1.Layer));\nexports.RingLayer = RingLayer;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar util_1 = require(\"../../util\");\nvar RingInstance = /** @class */ (function (_super) {\n    __extends(RingInstance, _super);\n    function RingInstance(options) {\n        var _this = _super.call(this, options) || this;\n        _this.color = [1.0, 1.0, 1.0, 1.0];\n        _this.depth = 0;\n        _this.radius = 0;\n        _this.thickness = 1;\n        _this.x = 0;\n        _this.y = 0;\n        _this.color = options.color || [1, 1, 1, 1];\n        _this.depth = options.depth || 0;\n        _this.radius = options.radius;\n        _this.thickness = options.thickness || _this.thickness;\n        _this.x = options.x;\n        _this.y = options.y;\n        return _this;\n    }\n    Object.defineProperty(RingInstance.prototype, \"width\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RingInstance.prototype, \"height\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RingInstance.prototype, \"innerRadius\", {\n        get: function () {\n            return this.radius - this.thickness;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        mobx_1.observable\n    ], RingInstance.prototype, \"color\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RingInstance.prototype, \"depth\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RingInstance.prototype, \"radius\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RingInstance.prototype, \"thickness\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RingInstance.prototype, \"x\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RingInstance.prototype, \"y\", void 0);\n    __decorate([\n        mobx_1.computed\n    ], RingInstance.prototype, \"width\", null);\n    __decorate([\n        mobx_1.computed\n    ], RingInstance.prototype, \"height\", null);\n    __decorate([\n        mobx_1.computed\n    ], RingInstance.prototype, \"innerRadius\", null);\n    return RingInstance;\n}(util_1.Instance));\nexports.RingInstance = RingInstance;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./ring-instance\"));\n__export(require(\"./ring-layer\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar instance_1 = require(\"../../util/instance\");\nvar types_1 = require(\"../types\");\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nvar anchorCalculator = (_a = {},\n    _a[types_1.AnchorType.TopLeft] = function (anchor, rectangle) {\n        anchor.x = -anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopMiddle] = function (anchor, rectangle) {\n        anchor.x = rectangle.width / 2.0;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopRight] = function (anchor, rectangle) {\n        anchor.x = rectangle.width + anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.MiddleLeft] = function (anchor, rectangle) {\n        anchor.x = -anchor.padding;\n        anchor.y = rectangle.height / 2;\n    },\n    _a[types_1.AnchorType.Middle] = function (anchor, rectangle) {\n        anchor.x = rectangle.width / 2.0;\n        anchor.y = rectangle.height / 2.0;\n    },\n    _a[types_1.AnchorType.MiddleRight] = function (anchor, rectangle) {\n        anchor.x = rectangle.width + anchor.padding;\n        anchor.y = rectangle.height / 2.0;\n    },\n    _a[types_1.AnchorType.BottomLeft] = function (anchor, rectangle) {\n        anchor.x = -anchor.padding;\n        anchor.y = rectangle.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomMiddle] = function (anchor, rectangle) {\n        anchor.x = rectangle.width / 2.0;\n        anchor.y = rectangle.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomRight] = function (anchor, rectangle) {\n        anchor.x = rectangle.width + anchor.padding;\n        anchor.y = rectangle.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.Custom] = function (anchor, rectangle) {\n        anchor.x = anchor.x || 0;\n        anchor.y = anchor.y || 0;\n    },\n    _a);\n/**\n * This generates a new rectangle instance which will render a single line of text for a given layer.\n * There are restrictions surrounding rectangles due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a rectangle via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Rectangles should only be so long.\n * - Multiline is not supported inherently\n * - Once a rectangle is constructed, only SOME properties can be altered thereafter\n *\n * A rectangle that is constructed can only have some properties set upon creating the rectangle and are locked\n * thereafter. The only way to modify them would be to destroy the rectangle, then construct a new rectangle\n * with the modifications. This has to deal with performance regarding rasterizing the rectangle\n */\nvar RectangleInstance = /** @class */ (function (_super) {\n    __extends(RectangleInstance, _super);\n    function RectangleInstance(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the rendered color of the rectangle */\n        _this.color = [0, 0, 0, 1];\n        /** Depth sorting of the rectangle (or the z value of the lable) */\n        _this.depth = 0;\n        /** The height of the rectangle as it is to be rendered in world space */\n        _this.height = 1;\n        /** Sets the way the rectangle scales with the world */\n        _this.scaling = types_1.ScaleType.BOUND_MAX;\n        /** The width of the rectangle as it is to be rendered in world space */\n        _this.width = 1;\n        /** The x coordinate where the rectangle will be anchored to in world space */\n        _this.x = 0;\n        /** The y coordinate where the rectangle will be anchored to in world space */\n        _this.y = 0;\n        // These are properties that can be altered, but have side effects from being changed\n        /** This is the anchor location on the  */\n        _this._anchor = {\n            padding: 0,\n            type: types_1.AnchorType.TopLeft,\n            x: 0,\n            y: 0,\n        };\n        _this.depth = options.depth || _this.depth;\n        _this.color = options.color || _this.color;\n        _this.scaling = options.scaling || _this.scaling;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        _this.width = options.width || 1;\n        _this.height = options.height || 1;\n        // Make sure the anchor is set to the appropriate location\n        options.anchor && _this.setAnchor(options.anchor);\n        return _this;\n    }\n    Object.defineProperty(RectangleInstance.prototype, \"anchor\", {\n        get: function () {\n            return this._anchor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This applies a new anchor to this rectangle and properly determines it's anchor position on the rectangle\n     */\n    RectangleInstance.prototype.setAnchor = function (anchor) {\n        var newAnchor = {\n            padding: anchor.padding || 0,\n            type: anchor.type,\n            x: anchor.x || 0,\n            y: anchor.y || 0,\n        };\n        // Calculate the new anchors position values\n        anchorCalculator[newAnchor.type](newAnchor, this);\n        // Apply the anchor\n        this._anchor = newAnchor;\n    };\n    __decorate([\n        mobx_1.observable\n    ], RectangleInstance.prototype, \"color\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RectangleInstance.prototype, \"depth\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RectangleInstance.prototype, \"height\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RectangleInstance.prototype, \"scaling\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RectangleInstance.prototype, \"width\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RectangleInstance.prototype, \"x\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RectangleInstance.prototype, \"y\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], RectangleInstance.prototype, \"_anchor\", void 0);\n    __decorate([\n        mobx_1.computed\n    ], RectangleInstance.prototype, \"anchor\", null);\n    return RectangleInstance;\n}(instance_1.Instance));\nexports.RectangleInstance = RectangleInstance;\nvar _a;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the image as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the image is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y;\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float((cameraScale.x > cameraScale.y || cameraScale.y > cameraScale.x) && useScaleMode != 0.0);\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n  // Apply the image's tint as a tint to the image\\n  vertexColor = color * color.a;\\n\\n  // Correct aspect ratio.\\n  size = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * size + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the image\\n  float imageScreenScale = mix(\\n    screenSize.y / size.y,\\n    screenSize.x / size.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the image is supposed to be, then we automagically\\n  // scale down our image to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / imageScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\n\\nvoid main() {\\n  gl_FragColor = vertexColor;\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar types_2 = require(\"../types\");\nvar min = Math.min, max = Math.max;\n/**\n * This layer displays Rectangles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar RectangleLayer = /** @class */ (function (_super) {\n    __extends(RectangleLayer, _super);\n    function RectangleLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    RectangleLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given rectangle\n            boundsAccessor: function (rectangle) {\n                var anchorEffect = [0, 0];\n                if (rectangle.anchor) {\n                    anchorEffect[0] = rectangle.anchor.x || 0;\n                    anchorEffect[1] = rectangle.anchor.y || 0;\n                }\n                var topLeft = [\n                    rectangle.x - anchorEffect[0],\n                    rectangle.y - anchorEffect[1],\n                ];\n                return new primitives_1.Bounds({\n                    height: rectangle.height,\n                    width: rectangle.width,\n                    x: topLeft[0],\n                    y: topLeft[1],\n                });\n            },\n            // Provide a precise hit test for the circle\n            hitTest: function (rectangle, point, projection) {\n                // The bounds of the rectangle is in world space, but it does not account for the scale mode of the rectangle.\n                // Here, we will apply the scale mode testing to the rectangle\n                var maxScale = max.apply(void 0, projection.camera.scale);\n                var minScale = min.apply(void 0, projection.camera.scale);\n                // If we scale always then the rectangle stays within it's initial world bounds at all times\n                if (rectangle.scaling === types_2.ScaleType.ALWAYS) {\n                    return true;\n                }\n                // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n                // Rectangle the same size. If the camera zooms out then the bounds === the world bounds.\n                else if (rectangle.scaling === types_2.ScaleType.BOUND_MAX) {\n                    // We are zooming out. the bounds will stay within the world bounds\n                    if (minScale <= 1 && maxScale <= 1) {\n                        return true;\n                    }\n                    // We are zooming in. The bounds will shrink to keep the rectangle at max font size\n                    else {\n                        // The location is within the world, but we reverse project the anchor spread\n                        var anchorEffect = [0, 0];\n                        if (rectangle.anchor) {\n                            anchorEffect[0] = rectangle.anchor.x || 0;\n                            anchorEffect[1] = rectangle.anchor.y || 0;\n                        }\n                        var topLeft = [\n                            rectangle.x - (anchorEffect[0] / maxScale),\n                            rectangle.y - (anchorEffect[1] / maxScale),\n                        ];\n                        // Reverse project the size and we should be within the distorted world coordinates\n                        return new primitives_1.Bounds({\n                            height: rectangle.height / maxScale,\n                            width: rectangle.width / maxScale,\n                            x: topLeft[0],\n                            y: topLeft[1],\n                        }).containsPoint(point);\n                    }\n                }\n                // If we never allow the rectangle to scale, then the bounds will grow and shrink to counter the effects\n                // Of the camera zoom\n                else if (rectangle.scaling === types_2.ScaleType.NEVER) {\n                    // The location is within the world, but we reverse project the anchor spread\n                    var anchorEffect = [0, 0];\n                    if (rectangle.anchor) {\n                        anchorEffect[0] = rectangle.anchor.x || 0;\n                        anchorEffect[1] = rectangle.anchor.y || 0;\n                    }\n                    var topLeft = projection.worldToScreen({\n                        x: rectangle.x - (anchorEffect[0] / projection.camera.scale[0]),\n                        y: rectangle.y - (anchorEffect[1] / projection.camera.scale[1]),\n                    });\n                    var screenPoint = projection.worldToScreen(point);\n                    // Reverse project the size and we should be within the distorted world coordinates\n                    return new primitives_1.Bounds({\n                        height: rectangle.height,\n                        width: rectangle.width,\n                        x: topLeft.x,\n                        y: topLeft.y,\n                    }).containsPoint(screenPoint);\n                }\n                return true;\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    RectangleLayer.prototype.initShader = function () {\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: 0,\n            1: 0,\n            2: 0,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./rectangle-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'location',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'anchor',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.anchor.x || 0, o.anchor.y || 0]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'size',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.width, o.height]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'scaling',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scaling]; },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.color; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (u) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./rectangle-layer.vs'),\n        };\n    };\n    RectangleLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    RectangleLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return RectangleLayer;\n}(layer_1.Layer));\nexports.RectangleLayer = RectangleLayer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./rectangle-layer\"));\n__export(require(\"./rectangle-instance\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar instance_1 = require(\"../../util/instance\");\nvar EdgeInstance = /** @class */ (function (_super) {\n    __extends(EdgeInstance, _super);\n    function EdgeInstance(options) {\n        var _this = _super.call(this, options) || this;\n        _this.colorStart = [1.0, 1.0, 1.0, 1.0];\n        _this.colorEnd = [1.0, 1.0, 1.0, 1.0];\n        _this.control = [[0, 0], [0, 0]];\n        _this.depth = 0;\n        _this.end = [0, 0];\n        _this.start = [0, 0];\n        _this.widthStart = 1.0;\n        _this.widthEnd = 1.0;\n        _this.colorStart = options.colorStart || _this.colorStart;\n        _this.colorEnd = options.colorEnd || _this.colorEnd;\n        _this.control = options.control || _this.control;\n        _this.depth = options.depth || _this.depth;\n        _this.end = options.end || _this.end;\n        _this.widthStart = options.widthStart || _this.widthStart;\n        _this.widthEnd = options.widthEnd || _this.widthEnd;\n        _this.start = options.start || _this.start;\n        return _this;\n    }\n    Object.defineProperty(EdgeInstance.prototype, \"length\", {\n        get: function () {\n            var delta = [\n                this.end[0] - this.start[0],\n                this.end[1] - this.start[1],\n            ];\n            return Math.sqrt(delta[0] * delta[0] + delta[1] * delta[1]);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EdgeInstance.prototype, \"midpoint\", {\n        /**\n         * Calculates the midpoint of the edge\n         */\n        get: function () {\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EdgeInstance.prototype, \"perpendicular\", {\n        /**\n         * Calculates a perpendicular direction vector to the edge\n         */\n        get: function () {\n            var length = this.length;\n            return [\n                (this.end[1] - this.start[1]) / length,\n                -(this.end[0] - this.start[0]) / length,\n            ];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Applies the edge width to the start and end\n     */\n    EdgeInstance.prototype.setEdgeWidth = function (width) {\n        if (width) {\n            this.widthEnd = width;\n            this.widthStart = width;\n        }\n    };\n    /**\n     * Applies the color to the start and end\n     */\n    EdgeInstance.prototype.setColor = function (color) {\n        this.colorStart = color;\n        this.colorEnd = color;\n    };\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"colorStart\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"colorEnd\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"control\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"depth\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"end\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"start\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"widthStart\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], EdgeInstance.prototype, \"widthEnd\", void 0);\n    __decorate([\n        mobx_1.computed\n    ], EdgeInstance.prototype, \"length\", null);\n    __decorate([\n        mobx_1.computed\n    ], EdgeInstance.prototype, \"midpoint\", null);\n    __decorate([\n        mobx_1.computed\n    ], EdgeInstance.prototype, \"perpendicular\", null);\n    return EdgeInstance;\n}(instance_1.Instance));\nexports.EdgeInstance = EdgeInstance;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\n\\nvoid main() {\\n  gl_FragColor = vertexColor;\\n}\\n\"","module.exports = \"/**\\n  This vertex shader calculates edges based in world space to make an edge based on\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nprecision highp float;\\n\\nvarying vec4 vertexColor;\\n\\n// Interpolation type injection\\n${interpolation}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n\\n  // Convert our world points to screen space\\n  vec4 startClip = clipSpace(vec3(start, depth));\\n  vec4 endClip = clipSpace(vec3(end, depth));\\n  vec2 startScreen = (startClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  vec2 endScreen = (endClip.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Controls for this mode are screen space deltas from the end points\\n  vec2 control1 = startScreen + vec2(control.x, -control.y) * scaleFactor;\\n  vec2 control2 = endScreen + vec2(control.z, -control.w) * scaleFactor;\\n\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, startScreen, endScreen, control1, control2);\\n  // Calculate the next and previous segment's location on the line\\n  vec2 prePosition = interpolation(interpolationTime - interpolationIncrement, startScreen, endScreen, control1, control2);\\n  vec2 nextPosition = interpolation(interpolationTime + interpolationIncrement, startScreen, endScreen, control1, control2);\\n\\n  vec2 preLine = prePosition - currentPosition;\\n  vec2 nextLine = nextPosition - currentPosition;\\n\\n  // Get a spliced nromal at the joining of two segments to make a crisper curve\\n  vec2 currentNormal = mix(\\n    // Pick this value if we're at the beginning of the line\\n    normalize(vec2(preLine.y, -preLine.x)),\\n    mix(\\n      // Pick this value when we're between the ends\\n      normalize(vec2(preLine.y, -preLine.x) + vec2(-nextLine.y, nextLine.x)),\\n      // Pick this value if we're at the end of the line\\n      normalize(vec2(-nextLine.y, nextLine.x)),\\n      float(position.x >= 1.0)\\n    ),\\n    float(position.x > 0.0)\\n  );\\n\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (-normal * lineThickness * scaleFactor);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a;\\n\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), startClip.zw);\\n  gl_PointSize = 5.0;\\n}\\n\"","module.exports = \"precision highp float;\\n\\n/**\\n  This vertex shader calculates edges whose curve and width is in screen space where the curve is\\n  bezier curves with 0, 1, and 2 control points.\\n**/\\nvarying vec4 vertexColor;\\n\\n// Interpolation type injection\\n${interpolation}\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float interpolationTime = position.y;\\n  float interpolationIncrement = 1.0 / position.z;\\n  // Get the position of the current vertex\\n  vec2 currentPosition = interpolation(interpolationTime, start, end, control.xy, control.zw);\\n  // Calculate the next and previous segment's location on the line\\n  vec2 prePosition = interpolation(interpolationTime - interpolationIncrement, start, end, control.xy, control.zw);\\n  vec2 nextPosition = interpolation(interpolationTime + interpolationIncrement, start, end, control.xy, control.zw);\\n\\n  vec2 preLine = prePosition - currentPosition;\\n  vec2 nextLine = nextPosition - currentPosition;\\n\\n  // Get a spliced nromal at the joining of two segments to make a crisper curve\\n  vec2 currentNormal = mix(\\n    // Pick this value if we're at the beginning of the line\\n    normalize(vec2(preLine.y, -preLine.x)),\\n    mix(\\n      // Pick this value when we're between the ends\\n      normalize(vec2(preLine.y, -preLine.x) + vec2(-nextLine.y, nextLine.x)),\\n      // Pick this value if we're at the end of the line\\n      normalize(vec2(-nextLine.y, nextLine.x)),\\n      float(position.x >= 1.0)\\n    ),\\n    float(position.x > 0.0)\\n  );\\n\\n  // Get the thickness based on the side we're on\\n  float lineThickness = mix(widthStart, widthEnd, interpolationTime) / 2.0;\\n  // Start on the calculated line and push out by the normal's value\\n  vec2 vertex = currentPosition + currentNormal * (normal * lineThickness);\\n  // Get the color based on where we are on the line\\n  vertexColor = mix(colorStart, colorEnd, interpolationTime);\\n  vertexColor *= vertexColor.a;\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n  gl_PointSize = 5.0;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  float t1 = 1.0 - t;\\n  return pow(t1, 3.0) * p1 + 3.0 * t * pow(t1, 2.0) * c1 + 3.0 * pow(t, 2.0) * t1 * c2 + pow(t, 3.0) * p2;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return (1.0 - t) * (1.0 - t) * p1 + 2.0 * t * (1.0 - t) * c1 + t * t * p2;\\n}\\n\"","module.exports = \"/**\\n * Makes a linear interpolation between two points\\n *\\n * @param {vec2} s The start point\\n * @param {vec2} e The end point\\n * @param {vec2} c The bezier control point\\n * @param {float} t The interpolation value [0, 1]\\n *\\n * @returns {vec2} A point interpolated between the two provided points\\n */\\nvec2 interpolation(float t, vec2 p1, vec2 p2, vec2 c1, vec2 c2) {\\n  return p1 + (p2 - p1) * t;\\n}\\n\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\nvar vector_1 = require(\"../../util/vector\");\nvar types_1 = require(\"./types\");\nvar pow = Math.pow;\n/** This is an interpolation across a line */\nfunction linear(t, p1, p2, c1, c2) {\n    return vector_1.add2(vector_1.scale2(vector_1.subtract2(p2, p1), t), p1);\n}\n/** This is an interpolation across a bezier curve, single control */\nfunction bezier(t, p1, p2, c1, c2) {\n    return [\n        (1.0 - t) * (1.0 - t) * p1[0] + 2.0 * t * (1.0 - t) * c1[0] + t * t * p2[0],\n        (1.0 - t) * (1.0 - t) * p1[1] + 2.0 * t * (1.0 - t) * c1[1] + t * t * p2[1],\n    ];\n}\n/** This is an interpolation across a bezier curve, double control */\nfunction bezier2(t, p1, p2, c1, c2) {\n    var t1 = 1.0 - t;\n    return [\n        (pow(t1, 3.0) * p1[0]) + (3.0 * t * pow(t1, 2.0) * c1[0]) + (3.0 * pow(t, 2.0) * t1 * c2[0]) + (pow(t, 3.0) * p2[0]),\n        (pow(t1, 3.0) * p1[1]) + (3.0 * t * pow(t1, 2.0) * c1[1]) + (3.0 * pow(t, 2.0) * t1 * c2[1]) + (pow(t, 3.0) * p2[1]),\n    ];\n}\n/** A quick lookup for an interpolation method based on Edge Type */\nvar interpolation = (_a = {},\n    _a[types_1.EdgeType.LINE] = linear,\n    _a[types_1.EdgeType.BEZIER] = bezier,\n    _a[types_1.EdgeType.BEZIER2] = bezier2,\n    _a);\n/** Converts a point array to a point object */\nfunction toPointObject(point) {\n    return {\n        x: point[0],\n        y: point[1],\n    };\n}\n/** Converts a point object to a point array */\nfunction toPointArray(point) {\n    return [\n        point.x,\n        point.y,\n    ];\n}\n/** Takes two points that forms a line then calculates the nearest distance from that line to the third point */\nfunction distanceTo(start, end, p) {\n    // Make a vector from a line point to the indicated point\n    var vector = vector_1.subtract2(start, p);\n    var lineDirection = vector_1.subtract2(end, start);\n    var lineNormal = [lineDirection[1], -lineDirection[0]];\n    var distance = Math.abs(vector_1.dot2(vector, lineNormal)) / vector_1.length2(lineDirection);\n    // The distance is d = |v . r| where v is a unit perpendicular vector to the Line\n    return distance;\n}\n// This sets the number of iterations along a curve we sample to test collisions with\nvar TEST_RESOLUTION = 50;\n/**\n * This generates the picking methods needed for managing PickType.ALL for the edge layer.\n */\nfunction edgePicking(props) {\n    var broadphase = props.broadphase, _a = props.minPickDistance, minPickDistance = _a === void 0 ? 0 : _a, scaleType = props.scaleType, type = props.type;\n    var interpolate = interpolation[props.type];\n    var boundsAccessor = function (edge) {\n        var edgeWidthStart = edge.widthStart / 2 + minPickDistance;\n        var edgeWidthEnd = edge.widthEnd / 2 + minPickDistance;\n        // Encapsulate the endpoints as they are guaranteed to be included in the shape\n        // Each endpoint will be a box that includes the endpoint thickness\n        var bounds = new bounds_1.Bounds({\n            height: edge.widthStart,\n            width: edge.widthStart,\n            x: edge.start[0] - edgeWidthStart,\n            y: edge.start[1] - edgeWidthStart,\n        });\n        bounds.encapsulate(new bounds_1.Bounds({\n            height: edge.widthEnd,\n            width: edge.widthEnd,\n            x: edge.end[0] - edgeWidthEnd,\n            y: edge.end[1] - edgeWidthEnd,\n        }));\n        // Encapsulating the bezier control points is enough of a broadphase for beziers\n        if (props.type === types_1.EdgeType.BEZIER) {\n            bounds.encapsulate({\n                x: edge.control[0][0],\n                y: edge.control[0][1],\n            });\n        }\n        // Encapsulating the bezier control points is enough of a broadphase for beziers\n        else if (props.type === types_1.EdgeType.BEZIER2) {\n            bounds.encapsulate({\n                x: edge.control[0][0],\n                y: edge.control[0][1],\n            });\n            bounds.encapsulate({\n                x: edge.control[1][0],\n                y: edge.control[1][1],\n            });\n        }\n        if (broadphase === types_1.EdgeBroadphase.PASS_X) {\n            bounds.x = Number.MIN_SAFE_INTEGER / 2;\n            bounds.width = Number.MAX_SAFE_INTEGER;\n        }\n        if (broadphase === types_1.EdgeBroadphase.PASS_Y) {\n            bounds.y = Number.MIN_SAFE_INTEGER / 2;\n            bounds.height = Number.MAX_SAFE_INTEGER;\n        }\n        return bounds;\n    };\n    if (scaleType === types_1.EdgeScaleType.SCREEN_CURVE) {\n        return {\n            // Provide the calculated AABB world bounds for a given circle\n            boundsAccessor: boundsAccessor,\n            // Provide a precise hit test for the edge. This method performs all of the rendering\n            // And hit tests within screen space as opposed to world space.\n            hitTest: function (edge, point, view) {\n                point = view.worldToScreen(point);\n                var mouse = [point.x, point.y];\n                var closestIndex = 0;\n                var closestDistance = Number.MAX_VALUE;\n                var secondClosestIndex = 0;\n                var secondClosestDistance = Number.MAX_VALUE;\n                var start = view.worldToScreen(toPointObject(edge.start));\n                var end = view.worldToScreen(toPointObject(edge.end));\n                var control1 = [0, 0];\n                var control2 = [0, 0];\n                if (type === types_1.EdgeType.BEZIER) {\n                    control1 = vector_1.add2(toPointArray(start), edge.control[0]);\n                }\n                else if (type === types_1.EdgeType.BEZIER2) {\n                    control1 = vector_1.add2(toPointArray(start), edge.control[0]);\n                    control2 = vector_1.add2(toPointArray(end), edge.control[1]);\n                }\n                var startPoint = toPointArray(start);\n                var endPoint = toPointArray(end);\n                control1 = edge.control.length > 0 ? control1 : [0, 0];\n                control2 = edge.control.length > 1 ? control2 : [0, 0];\n                // Loop through sample points on the line and find one that is closest to the mouse point as possible\n                for (var i = 0; i < TEST_RESOLUTION; ++i) {\n                    var linePoint = interpolate(i / TEST_RESOLUTION, startPoint, endPoint, control1, control2);\n                    var distance = vector_1.length2(vector_1.subtract2(mouse, linePoint));\n                    if (distance < closestDistance) {\n                        secondClosestIndex = closestIndex;\n                        secondClosestDistance = closestDistance;\n                        closestIndex = i;\n                        closestDistance = distance;\n                    }\n                    else if (distance < secondClosestDistance) {\n                        secondClosestIndex = i;\n                        closestDistance = distance;\n                    }\n                }\n                var t = closestIndex / TEST_RESOLUTION;\n                var lineWidth = (edge.widthEnd - edge.widthStart) * t + edge.widthStart;\n                if (closestIndex === secondClosestIndex) {\n                    return false;\n                }\n                var startSegment = interpolate(closestIndex / TEST_RESOLUTION, startPoint, endPoint, control1, control2);\n                var endSegment = interpolate(secondClosestIndex / TEST_RESOLUTION, startPoint, endPoint, control1, control2);\n                // See how close the mouse is to the line between the two closest points for a more accurate\n                // Test\n                closestDistance = distanceTo(startSegment, endSegment, mouse);\n                // This helps determine if the mouse is beyond the end point\n                if (vector_1.dot2(vector_1.subtract2(endSegment, startSegment), vector_1.subtract2(mouse, startSegment)) < 0) {\n                    return false;\n                }\n                return closestDistance < ((lineWidth / 2.0) + minPickDistance);\n            },\n        };\n    }\n    return {\n        // Provide the calculated AABB world bounds for a given circle\n        boundsAccessor: boundsAccessor,\n        // Provide a precise hit test for the edge\n        hitTest: function (edge, point, view) {\n            var mouse = [point.x, point.y];\n            var closestIndex = 0;\n            var closestDistance = Number.MAX_VALUE;\n            // Loop through sample points on the line and find one that is closest to the mouse point as possible\n            for (var i = 0; i < TEST_RESOLUTION; ++i) {\n                var linePoint = interpolate(i / TEST_RESOLUTION, edge.start, edge.end, edge.control.length > 0 ? edge.control[0] : [0, 0], edge.control.length > 1 ? edge.control[1] : [0, 0]);\n                var distance = vector_1.length2(vector_1.subtract2(mouse, linePoint));\n                if (distance < closestDistance) {\n                    closestIndex = i;\n                    closestDistance = distance;\n                }\n            }\n            var t = closestIndex / TEST_RESOLUTION;\n            var lineWidth = (edge.widthEnd - edge.widthStart) * t + edge.widthStart;\n            return closestDistance < (lineWidth / 2.0);\n        },\n    };\n}\nexports.edgePicking = edgePicking;\nvar _a;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar util_1 = require(\"../../util\");\nvar edge_picking_1 = require(\"./edge-picking\");\nvar types_2 = require(\"./types\");\n/** Converts a control list to an IO value */\nfunction toInstanceIOValue(value) {\n    return [\n        value[0][0],\n        value[0][1],\n        value[1][0],\n        value[1][1],\n    ];\n}\n/** This picks the appropriate shader for the edge type desired */\nvar pickVS = (_a = {},\n    _a[types_2.EdgeType.LINE] = require('./shader/edge-layer-line.vs'),\n    _a[types_2.EdgeType.BEZIER] = require('./shader/edge-layer-bezier.vs'),\n    _a[types_2.EdgeType.BEZIER2] = require('./shader/edge-layer-bezier2.vs'),\n    _a);\n/** This is the base edge layer which is a template that can be filled with the needed specifics for a given line type */\nvar baseVS = require('./shader/edge-layer.vs');\nvar screenVS = require('./shader/edge-layer-screen-curve.vs');\nvar edgeFS = require('./shader/edge-layer.fs');\n/**\n * This layer displays edges and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar EdgeLayer = /** @class */ (function (_super) {\n    __extends(EdgeLayer, _super);\n    function EdgeLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    EdgeLayer.prototype.getInstancePickingMethods = function () {\n        return edge_picking_1.edgePicking(this.props);\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    EdgeLayer.prototype.initShader = function () {\n        var _a = this.props, _b = _a.scaleFactor, scaleFactor = _b === void 0 ? function () { return 1; } : _b, type = _a.type, _c = _a.scaleType, scaleType = _c === void 0 ? types_2.EdgeScaleType.NONE : _c;\n        var MAX_SEGMENTS = type === types_2.EdgeType.LINE ? 2 : 50;\n        // Calculate the normals and interpolations for our vertices\n        var vertexToNormal = (_d = {\n                0: 1\n            },\n            _d[MAX_SEGMENTS * 2 + 2] = -1,\n            _d);\n        var vertexInterpolation = (_e = {\n                0: 0\n            },\n            _e[MAX_SEGMENTS * 2 + 2] = 1,\n            _e);\n        var sign = 1;\n        for (var i = 0; i < MAX_SEGMENTS * 2; ++i) {\n            vertexToNormal[i + 1] = sign;\n            vertexInterpolation[i + 1] = Math.floor(i / 2) / (MAX_SEGMENTS - 1);\n            sign *= -1;\n        }\n        var vs = util_1.shaderTemplate(scaleType === types_2.EdgeScaleType.NONE ? baseVS : screenVS, {\n            // Retain the attributes injection\n            attributes: '${attributes}',\n            // Inject the proper interpolation method\n            interpolation: pickVS[type],\n        }, {\n            name: 'Edge Layer',\n            values: [\n                'interpolation',\n            ],\n        });\n        return {\n            fs: edgeFS,\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'start',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return o.start; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'end',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return o.end; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'widthStart',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.widthStart]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.TWO,\n                    name: 'widthEnd',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.widthEnd]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 2,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'colorStart',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.colorStart; },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'colorEnd',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.colorEnd; },\n                },\n                type === types_2.EdgeType.LINE ? {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'control',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return [0, 0, 0, 0]; },\n                } : null,\n                type === types_2.EdgeType.BEZIER ? {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'control',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return [o.control[0][0], o.control[0][1], 0, 0]; },\n                } : null,\n                type === types_2.EdgeType.BEZIER2 ? {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'control',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return toInstanceIOValue(o.control); },\n                } : null,\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (uniform) { return [scaleFactor()]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexInterpolation[vertex],\n                        // The number of vertices\n                        MAX_SEGMENTS * 2,\n                    ]; },\n                },\n            ],\n            vertexCount: MAX_SEGMENTS * 2 + 2,\n            vs: vs.shader,\n        };\n        var _d, _e;\n    };\n    EdgeLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    EdgeLayer.prototype.getMaterialOptions = function () {\n        return {\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    // Set default props for the layer\n    EdgeLayer.defaultProps = {\n        broadphase: types_2.EdgeBroadphase.ALL,\n        data: new util_1.DataProvider([]),\n        key: 'none',\n        scaleType: types_2.EdgeScaleType.NONE,\n        type: types_2.EdgeType.LINE,\n    };\n    return EdgeLayer;\n}(layer_1.Layer));\nexports.EdgeLayer = EdgeLayer;\nvar _a;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./edge-layer\"));\n__export(require(\"./edge-instance\"));\n__export(require(\"./types\"));\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar instance_1 = require(\"../../util/instance\");\nvar CircleInstance = /** @class */ (function (_super) {\n    __extends(CircleInstance, _super);\n    function CircleInstance(options) {\n        var _this = _super.call(this, options) || this;\n        _this.color = [1.0, 1.0, 1.0, 1.0];\n        _this.radius = 0;\n        _this.x = 0;\n        _this.y = 0;\n        _this.depth = 0;\n        _this.color = options.color || _this.color;\n        _this.radius = options.radius || _this.radius;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        _this.depth = options.depth || _this.depth;\n        return _this;\n    }\n    Object.defineProperty(CircleInstance.prototype, \"width\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CircleInstance.prototype, \"height\", {\n        get: function () {\n            return this.radius * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        mobx_1.observable\n    ], CircleInstance.prototype, \"color\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], CircleInstance.prototype, \"radius\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], CircleInstance.prototype, \"x\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], CircleInstance.prototype, \"y\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], CircleInstance.prototype, \"depth\", void 0);\n    __decorate([\n        mobx_1.computed\n    ], CircleInstance.prototype, \"width\", null);\n    __decorate([\n        mobx_1.computed\n    ], CircleInstance.prototype, \"height\", null);\n    return CircleInstance;\n}(instance_1.Instance));\nexports.CircleInstance = CircleInstance;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float edgeSharpnessBase;\\nvarying vec2 pointCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  vertexColor = color * color.a;\\n  float size = radius * scaleFactor;\\n  edgeSharpness = mix(0.8, 0.0, min((size * 6.0 * pixelRatio) / (45.0 * pixelRatio), 1.0));\\n  edgeSharpnessBase = mix(0.1, 0.0, min((size * 6.0 * pixelRatio) / (45.0 * pixelRatio), 1.0));\\n  pointCoord = (position.xy + vec2(1.0, 1.0)) / 2.0;\\n\\n  // Center within clip space\\n  vec4 clipCenter = clipSpace(vec3(center, depth));\\n  // Center in screen space\\n  vec2 screenCenter = (clipCenter.xy + vec2(1.0, 1.0)) * vec2(0.5, 0.5) * viewSize;\\n  // Position in screen space\\n  vec2 vertex = (position.xy * size) + screenCenter;\\n  // Position back to clip space\\n  gl_Position = vec4((vertex / viewSize) * vec2(2.0, 2.0) - vec2(1.0, 1.0), clipCenter.zw);\\n}\\n\"","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying float edgeSharpness;\\nvarying float edgeSharpnessBase;\\nvarying vec2 pointCoord;\\n\\nfloat circle(vec2 coord, float radius){\\n  vec2 dist = coord - vec2(0.5);\\n\\n  return 1.0 - smoothstep(\\n    radius - (radius * edgeSharpness),\\n    radius + (radius * edgeSharpnessBase),\\n    dot(dist, dist) * 4.0\\n  );\\n}\\n\\nvoid main() {\\n  float step_factor = circle(pointCoord, 1.0);\\n  gl_FragColor = mix(\\n    vec4(0.0, 0.0, 0.0, 0.0),\\n    vertexColor,\\n    step_factor\\n  );\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar util_1 = require(\"../../util\");\n/**\n * This layer displays circles and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar CircleLayer = /** @class */ (function (_super) {\n    __extends(CircleLayer, _super);\n    function CircleLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    CircleLayer.prototype.getInstancePickingMethods = function () {\n        var _this = this;\n        var noScaleFactor = function () { return 1; };\n        return {\n            // Provide the calculated AABB world bounds for a given circle\n            boundsAccessor: function (circle) { return new primitives_1.Bounds({\n                height: circle.radius * 2,\n                width: circle.radius * 2,\n                x: circle.x - circle.radius,\n                y: circle.y - circle.radius,\n            }); },\n            // Provide a precise hit test for the circle\n            hitTest: function (circle, point, view) {\n                var circleScreenCenter = view.worldToScreen(circle);\n                var mouseScreen = view.worldToScreen(point);\n                var r = circle.radius * (_this.props.scaleFactor || noScaleFactor)();\n                var delta = [\n                    mouseScreen.x - circleScreenCenter.x,\n                    mouseScreen.y - circleScreenCenter.y,\n                ];\n                return (delta[0] * delta[0] + delta[1] * delta[1]) < (r * r);\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    CircleLayer.prototype.initShader = function () {\n        var scaleFactor = this.props.scaleFactor || (function () { return 1; });\n        var animations = this.props.animate || {};\n        var animateCenter = animations.center, animateRadius = animations.radius, animateColor = animations.color;\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: -1,\n            1: -1,\n            2: -1,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./circle-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    easing: animateCenter,\n                    name: 'center',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (circle) { return [circle.x, circle.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    easing: animateRadius,\n                    name: 'radius',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (circle) { return [circle.radius]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (circle) { return [circle.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    easing: animateColor,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (circle) { return circle.color; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (uniform) { return [scaleFactor()]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./circle-layer.vs'),\n        };\n    };\n    CircleLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    CircleLayer.prototype.getMaterialOptions = function () {\n        return {\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    CircleLayer.defaultProps = {\n        data: new util_1.DataProvider([]),\n        fadeOutOversized: -1,\n        key: '',\n        scaleFactor: function () { return 1; },\n    };\n    return CircleLayer;\n}(layer_1.Layer));\nexports.CircleLayer = CircleLayer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./circle-layer\"));\n__export(require(\"./circle-instance\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./circles\"));\n__export(require(\"./edges\"));\n__export(require(\"./images\"));\n__export(require(\"./labels\"));\n__export(require(\"./rectangle\"));\n__export(require(\"./rings\"));\n__export(require(\"./types\"));\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar label_atlas_resource_1 = require(\"./label-atlas-resource\");\nfunction toInstanceIOValue(texture) {\n    // If the texture is not defined we just output an empty reference\n    if (!texture) {\n        return [0, 0, 0, 0];\n    }\n    // Otherwise, we return the atlas information of the texture\n    return [\n        texture.atlasTL.x,\n        texture.atlasTL.y,\n        texture.atlasBR.x,\n        texture.atlasBR.y,\n    ];\n}\n/**\n * This class is responsible for tracking resources requested to be placed on an Atlas.\n * This makes sure the resource is uploaded and then properly cached so similar requests\n * return already existing resources. This also manages instances waiting for the resource\n * to be made available.\n */\nvar AtlasResourceManager = /** @class */ (function () {\n    function AtlasResourceManager(options) {\n        /** This is the atlas currently targetted by requests */\n        this.targetAtlas = '';\n        /** This stores all of the requests awaiting dequeueing */\n        this.requestQueue = new Map();\n        /**\n         * This tracks if a resource is already in the request queue. This also stores ALL instances awaiting the resource.\n         */\n        this.requestLookup = new Map();\n        this.atlasManager = options.atlasManager;\n    }\n    /**\n     * This dequeues all instance requests for a resource and processes the request which will\n     * inevitably make the instance active\n     */\n    AtlasResourceManager.prototype.dequeueRequests = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var didDequeue, _loop_1, this_1, _i, _a, _b, targetAtlas, resources;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        didDequeue = false;\n                        _loop_1 = function (targetAtlas, resources) {\n                            var requests, atlasRequests_1;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        if (!(resources.length > 0)) return [3 /*break*/, 2];\n                                        // We did dequeue\n                                        didDequeue = true;\n                                        requests = resources.slice(0);\n                                        // Empty the queue to begin taking in new requests as needed\n                                        resources.length = 0;\n                                        // Tell the atlas manager to update with all of the requested resources\n                                        return [4 /*yield*/, this_1.atlasManager.updateAtlas(targetAtlas, requests)];\n                                    case 1:\n                                        // Tell the atlas manager to update with all of the requested resources\n                                        _a.sent();\n                                        atlasRequests_1 = this_1.requestLookup.get(targetAtlas);\n                                        if (atlasRequests_1) {\n                                            // Once the manager has been updated, we can now flag all of the instances waiting for the resources\n                                            // As active, which should thus trigger an update to the layers to perform a diff for each instance\n                                            requests.forEach(function (resource) {\n                                                var request = atlasRequests_1.get(resource);\n                                                atlasRequests_1.delete(resource);\n                                                if (request) {\n                                                    for (var _i = 0, request_1 = request; _i < request_1.length; _i++) {\n                                                        var _a = request_1[_i], layer = _a[0], instance = _a[1];\n                                                        // If the instance is still associated with a cluster, then the instance can be activated. Having\n                                                        // A cluster is indicative the instance has not been deleted.\n                                                        if (layer.uniformManager.getUniforms(instance)) {\n                                                            instance.active = true;\n                                                        }\n                                                    }\n                                                }\n                                            });\n                                        }\n                                        _a.label = 2;\n                                    case 2: return [2 /*return*/];\n                                }\n                            });\n                        };\n                        this_1 = this;\n                        _i = 0, _a = Array.from(this.requestQueue.entries());\n                        _c.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3 /*break*/, 4];\n                        _b = _a[_i], targetAtlas = _b[0], resources = _b[1];\n                        return [5 /*yield**/, _loop_1(targetAtlas, resources)];\n                    case 2:\n                        _c.sent();\n                        _c.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/, didDequeue];\n                }\n            });\n        });\n    };\n    /**\n     * Free ALL resources managed under this resource manager\n     */\n    AtlasResourceManager.prototype.destroy = function () {\n        this.atlasManager.destroy();\n    };\n    /**\n     * This retrieves the actual atlas texture that should be applied to a uniform's\n     * value.\n     */\n    AtlasResourceManager.prototype.getAtlasTexture = function (key) {\n        var atlas = this.atlasManager.getAtlasTexture(key);\n        if (atlas) {\n            return atlas.texture;\n        }\n        return null;\n    };\n    /**\n     * This is a request for atlas texture resources. It will produce either the coordinates needed to\n     * make valid texture lookups, or it will trigger a loading of resources to an atlas and cause an\n     * automated deactivation and reactivation of the instance.\n     */\n    AtlasResourceManager.prototype.request = function (layer, instance, resource) {\n        var texture = resource.texture;\n        // If the texture is ready and available, then we simply return the IO values\n        if (texture) {\n            return toInstanceIOValue(texture);\n        }\n        if (resource instanceof label_atlas_resource_1.LabelAtlasResource) {\n            if (!resource.label.text) {\n                return toInstanceIOValue(texture);\n            }\n        }\n        // If a request is already made, then we must save the instance making the request for deactivation and\n        // Reactivation but without any additional atlas loading\n        var atlasRequests = this.requestLookup.get(this.targetAtlas);\n        if (atlasRequests) {\n            var existingRequests = atlasRequests.get(resource);\n            if (existingRequests) {\n                existingRequests.push([layer, instance]);\n                instance.active = false;\n                return toInstanceIOValue(texture);\n            }\n        }\n        else {\n            atlasRequests = new Map();\n            this.requestLookup.set(this.targetAtlas, atlasRequests);\n        }\n        // If the texture is not available, then we must load the resource, deactivate the instance\n        // And wait for the resource to become available. Once the resource is available, the system\n        // Must activate the instance to render the resource.\n        instance.active = false;\n        var requests = this.requestQueue.get(this.targetAtlas);\n        if (!requests) {\n            requests = [];\n            this.requestQueue.set(this.targetAtlas, requests);\n        }\n        requests.push(resource);\n        atlasRequests.set(resource, [[layer, instance]]);\n        // This returns essentially returns blank values for the resource lookup\n        return toInstanceIOValue(texture);\n    };\n    /**\n     * This is used by the system to target the correct atlas for subsequent requests to a resource.\n     */\n    AtlasResourceManager.prototype.setTargetAtlas = function (target) {\n        this.targetAtlas = target;\n    };\n    return AtlasResourceManager;\n}());\nexports.AtlasResourceManager = AtlasResourceManager;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../../types\");\nvar event_manager_1 = require(\"../event-manager\");\nfunction isDefined(val) {\n    return Boolean(val);\n}\n/**\n * This class is an injected event manager for the surface, it specifically handles taking in mouse events intended for view interactions\n * and broadcasts them to the layers that have picking enabled, thus allowing the layers to respond to\n * mouse view locations and broadcast Instance interactions based on the interaction with the View the layer is a part of\n *\n * In Summary: This is an adapter that takes in interactions to the views and injects those events into the layers associated with\n * the views so that the layers can translate the events to gestures.\n */\nvar LayerMouseEvents = /** @class */ (function (_super) {\n    __extends(LayerMouseEvents, _super);\n    function LayerMouseEvents(sceneViews) {\n        var _this = _super.call(this) || this;\n        /** This tracks which views have the mouse over them so we can properly broadcast view is out events */\n        _this.isOver = new Map();\n        _this.sceneViews = sceneViews;\n        return _this;\n    }\n    LayerMouseEvents.prototype.getSceneViewsUnderMouse = function (e) {\n        var sceneViewByViewId = new Map();\n        // Map the scene views by the view's identifiers\n        for (var _i = 0, _a = this.sceneViews; _i < _a.length; _i++) {\n            var sceneView = _a[_i];\n            sceneViewByViewId.set(sceneView.view.id, sceneView);\n        }\n        // Now retrieve and convert each view under the mouse to the scene view it coincides with\n        return e.viewsUnderMouse.map(function (viewItem) { return sceneViewByViewId.get(viewItem.view.id); }).filter(isDefined);\n    };\n    LayerMouseEvents.prototype.getMouseByViewId = function (e) {\n        // This is the mouse position for the provided view in view space\n        var viewMouseByViewId = new Map();\n        for (var _i = 0, _a = e.viewsUnderMouse; _i < _a.length; _i++) {\n            var viewItem = _a[_i];\n            viewMouseByViewId.set(viewItem.view.id, viewItem.mouse);\n        }\n        return viewMouseByViewId;\n    };\n    LayerMouseEvents.prototype.handleClick = function (e, button) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseClick(view, mouse, button); });\n    };\n    LayerMouseEvents.prototype.handleDrag = function (e, drag) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseDrag(view, mouse); });\n    };\n    LayerMouseEvents.prototype.handleInteraction = function (e, callback) {\n        // Get all of the scenes under the mouse\n        var sceneViews = this.getSceneViewsUnderMouse(e);\n        // Get a lookup of a view id to the mouse position in the view\n        var viewMouseByViewId = this.getMouseByViewId(e);\n        // For every view of every scene, we must tell it's layers it's world space is receiving mouse interactions\n        for (var _i = 0, sceneViews_1 = sceneViews; _i < sceneViews_1.length; _i++) {\n            var sceneView = sceneViews_1[_i];\n            this.handleSceneView(sceneView, viewMouseByViewId, callback);\n        }\n        return sceneViews;\n    };\n    LayerMouseEvents.prototype.handleMouseDown = function (e, button) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseDown(view, mouse, button); });\n    };\n    LayerMouseEvents.prototype.handleMouseUp = function (e, button) {\n        this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseUp(view, mouse, button); });\n    };\n    LayerMouseEvents.prototype.handleMouseOver = function (e) {\n        // We let the mouse move event handle the registration of moused over views\n    };\n    LayerMouseEvents.prototype.handleMouseOut = function (e) {\n        var _this = this;\n        // Get a lookup of a view id to the mouse position in the view\n        var viewMouseByViewId = this.getMouseByViewId(e);\n        var screen = e.screen.mouse;\n        // All views that are moused over should no longer be considered over and broadcast a mouse out\n        this.isOver.forEach(function (flag, sceneView) {\n            // Since we are leaving the view we must make the view relative cooridinates fromt he screen space coords\n            viewMouseByViewId.set(sceneView.view.id, sceneView.view.screenToView(screen));\n            _this.handleSceneView(sceneView, viewMouseByViewId, function (layer, view, mouse) { return layer.interactions.handleMouseOut(view, mouse); });\n        });\n        // Nothing is over anymore\n        this.isOver.clear();\n    };\n    LayerMouseEvents.prototype.handleMouseMove = function (e) {\n        var _this = this;\n        // Get all of the scenes we have interacted with, and broadcast a move event for each\n        var allSceneViews = this.handleInteraction(e, function (layer, view, mouse) { return layer.interactions.handleMouseMove(view, mouse); });\n        // Get a lookup of a view id to the mouse position in the view\n        var viewMouseByViewId = this.getMouseByViewId(e);\n        // Get the position of the mouse on the screen\n        var screen = e.screen.mouse;\n        // For quick lookups map all of the current SceneViews that are over\n        var currentSceneViews = new Map();\n        allSceneViews.forEach(function (v) { return currentSceneViews.set(v, true); });\n        // Detect which of the views are newly over\n        currentSceneViews.forEach(function (flag, sceneView) {\n            if (!_this.isOver.get(sceneView)) {\n                _this.handleSceneView(sceneView, viewMouseByViewId, function (layer, view, mouse) { return layer.interactions.handleMouseOver(view, mouse); });\n            }\n        });\n        // Detect which of the views are no longer over\n        this.isOver.forEach(function (flag, sceneView) {\n            if (!currentSceneViews.get(sceneView)) {\n                // Since these views were not interacted with, we must create the mouse interaction position\n                viewMouseByViewId.set(sceneView.view.id, sceneView.view.screenToView(screen));\n                _this.handleSceneView(sceneView, viewMouseByViewId, function (layer, view, mouse) { return layer.interactions.handleMouseOut(view, mouse); });\n            }\n        });\n        // Update the current views that are over to the currently over views for next event\n        this.isOver = currentSceneViews;\n    };\n    LayerMouseEvents.prototype.handleSceneView = function (sceneView, viewMouseByViewId, callback) {\n        var view = sceneView.view;\n        var mouse = viewMouseByViewId.get(view.id);\n        if (mouse) {\n            for (var _i = 0, _a = sceneView.scene.layers; _i < _a.length; _i++) {\n                var layer = _a[_i];\n                if (layer.picking && layer.picking.type === types_1.PickType.ALL) {\n                    callback(layer, view, mouse);\n                }\n            }\n        }\n    };\n    LayerMouseEvents.prototype.handleWheel = function (e) {\n        // TODO: This may need to be implemented. As of right now, there is no particular benefit\n    };\n    return LayerMouseEvents;\n}(event_manager_1.EventManager));\nexports.LayerMouseEvents = LayerMouseEvents;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar generate_layer_model_1 = require(\"../surface/generate-layer-model\");\nvar make_instance_uniform_name_1 = require(\"./make-instance-uniform-name\");\n/**\n * This class does a whoooooole lot of making the magical instancing optimization controls possible.\n *\n * Our instancing hackyness comes from the idea that uniforms are fast, and you don't have to commit\n * ALL of them when you touch just a little piece, and you don't have worry about drivers not supporting\n * partial vertex buffer updates.\n *\n * This also is WebGL 1.0 compatible without any extensions that are poorly implemented. And again: does\n * NOT require entire attribute buffer commits.\n *\n * Uniforms are limited for any given draw call. So we have to create multiple materials to support\n * chunks of the instances that need to be drawn. We then have to associate an instance with the set\n * of uniforms that is related to the instance and keep them paired together. If we have too many instances\n * we must generate more buffers to accomodate them.\n *\n * If we remove instances, we must free up the uniform set so that others can use the uniforms. While the uniforms\n * are not in use, the instance should not be rendering.\n */\nvar InstanceUniformManager = /** @class */ (function () {\n    function InstanceUniformManager(layer, scene) {\n        /** The generated buffers by this manager */\n        this.buffers = [];\n        /** The uniform clusters that are free and can be used by an instance */\n        this.availableClusters = [];\n        /** A lookup of an instance to a cluster of uniforms associated with it */\n        this.instanceToCluster = new Map();\n        /** A map of a cluster of uniforms to the buffer it comes from */\n        this.clusterToBuffer = new Map();\n        this.layer = layer;\n        var maxUniformBlock = 0;\n        layer.instanceAttributes.forEach(function (attributes) {\n            maxUniformBlock = Math.max(attributes.block, maxUniformBlock);\n        });\n        this.uniformBlocksPerInstance = maxUniformBlock + 1;\n        this.scene = scene;\n    }\n    /**\n     * This adds an instance to the manager and gives the instance an associative\n     * block of uniforms to work with.\n     */\n    InstanceUniformManager.prototype.add = function (instance) {\n        // If there are no available buffers, we must add a buffer\n        if (this.availableClusters.length <= 0) {\n            this.makeNewBuffer();\n        }\n        var cluster = this.availableClusters.shift();\n        if (cluster) {\n            this.instanceToCluster.set(instance, cluster);\n        }\n        else {\n            console.warn('No valid cluster available for instance added to uniform manager.');\n        }\n        return cluster;\n    };\n    /**\n     * Free all resources this manager may be holding onto\n     */\n    InstanceUniformManager.prototype.destroy = function () {\n        this.buffers.forEach(function (buffer) {\n            buffer.geometry.dispose();\n            buffer.material.dispose();\n        });\n    };\n    /**\n     * This retireves the uniforms associated with an instance, or returns nothing\n     * if the instance has not been associated yet.\n     */\n    InstanceUniformManager.prototype.getUniforms = function (instance) {\n        return this.instanceToCluster.get(instance);\n    };\n    /**\n     * Disassociates an instance with it's group of uniforms and makes the instance\n     * in the buffer no longer drawable.\n     */\n    InstanceUniformManager.prototype.remove = function (instance) {\n        var cluster = this.instanceToCluster.get(instance);\n        // If the instance is associated with a cluster, we can add the cluster back to being available\n        // For another instance.\n        if (cluster) {\n            this.instanceToCluster.delete(instance);\n            this.availableClusters.unshift(cluster);\n        }\n        return cluster;\n    };\n    /**\n     * Clears all elements of this manager from the current scene it was in.\n     */\n    InstanceUniformManager.prototype.removeFromScene = function () {\n        var _this = this;\n        this.buffers.forEach(function (buffer, index) {\n            _this.scene.container.remove(buffer.model);\n        });\n        delete this.scene;\n    };\n    /**\n     * Applies the buffers to the provided scene for rendering.\n     */\n    InstanceUniformManager.prototype.setScene = function (scene) {\n        var _this = this;\n        this.buffers.forEach(function (buffer, index) {\n            _this.scene.container.add(buffer.model);\n        });\n        this.scene = scene;\n    };\n    /**\n     * This generates a new buffer of uniforms to associate instances with.\n     */\n    InstanceUniformManager.prototype.makeNewBuffer = function () {\n        // We generate a new geometry object for the buffer as the geometry\n        // Needs to have it's own unique draw range per buffer for optimal\n        // Performance\n        var newGeometry = new Three.BufferGeometry();\n        this.layer.vertexAttributes.forEach(function (attribute) {\n            if (attribute.materialAttribute) {\n                newGeometry.addAttribute(attribute.name, attribute.materialAttribute);\n            }\n        });\n        // Ensure the draw range covers every instance in the geometry.\n        newGeometry.drawRange.start = 0;\n        newGeometry.drawRange.count = this.layer.maxInstancesPerBuffer * this.layer.instanceVertexCount;\n        // This is the material that is generated for the layer that utilizes all of the generated and\n        // Injected shader IO and shader fragments\n        var newMaterial = this.layer.material.clone();\n        // Now make a Model for the buffer so it can be rendered withn the scene\n        var newModel = generate_layer_model_1.generateLayerModel(this.layer, newGeometry, newMaterial);\n        // We render junkloads of instances in a buffer. Culling will have to happen\n        // On an instance level.\n        newModel.frustumCulled = false;\n        // Make our new buffer which will manage the geometry and everything necessary\n        var buffer = {\n            activeInstances: [],\n            clusters: [],\n            firstInstance: 0,\n            geometry: newGeometry,\n            lastInstance: 0,\n            material: newMaterial,\n            model: newModel,\n        };\n        this.buffers.push(buffer);\n        // Now that we have created a new buffer, we have all of it's uniforms\n        // To use to render more instances. We must take the instancing uniforms\n        // And divvy them up into clusters for our available buffer.\n        var uniformIndex = 0;\n        var uniformName = make_instance_uniform_name_1.makeInstanceUniformNameArray();\n        var instanceData = newMaterial.uniforms[uniformName];\n        // We must ensure the vector objects are TOTALLY unique otherwise they'll get shared across buffers\n        instanceData.value = instanceData.value.map(function () { return new Three.Vector4(0.0, 0.0, 0.0, 0.0); });\n        for (var i = 0, end = this.layer.maxInstancesPerBuffer; i < end; ++i) {\n            var cluster = {\n                instanceIndex: i,\n                uniform: instanceData,\n                uniformRange: [uniformIndex, 0],\n            };\n            uniformIndex += this.uniformBlocksPerInstance;\n            cluster.uniformRange[1] = uniformIndex;\n            buffer.clusters.push(cluster);\n            this.availableClusters.push(cluster);\n            this.clusterToBuffer.set(cluster, buffer);\n        }\n        // Grab the global uniforms from the material and add it to the uniform's materialUniform list so that\n        // We can keep uniforms consistent across all Instances\n        for (var i = 0, end = this.layer.uniforms.length; i < end; ++i) {\n            var uniform = this.layer.uniforms[i];\n            uniform.materialUniforms.push(newMaterial.uniforms[uniform.name]);\n        }\n        // Now that we are ready to utilize the buffer, let's add it to the scene so it may be rendered.\n        // Each new buffer equates to one draw call.\n        if (this.scene) {\n            this.scene.container.add(buffer.model);\n        }\n    };\n    return InstanceUniformManager;\n}());\nexports.InstanceUniformManager = InstanceUniformManager;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nvar maxPopulation = 5;\nvar maxDepth = 10;\n/**\n * This filters a quad tree query by type\n *\n * @export\n * @template T\n */\nfunction filterQuery(type, queryValues) {\n    var filtered = [];\n    queryValues.forEach(function (obj) {\n        if (type.find(function (t) { return obj instanceof t; })) {\n            filtered.push(obj);\n        }\n    });\n    return filtered;\n}\nexports.filterQuery = filterQuery;\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n *\n * @class Quadrants\n */\nvar Quadrants = /** @class */ (function () {\n    /**\n     * Creates an instance of Quadrants.\n     *\n     * @param bounds The bounds this will create quandrants for\n     * @param depth  The child depth of this element\n     *\n     * @memberOf Quadrants\n     */\n    function Quadrants(bounds, depth) {\n        var mid = bounds.mid;\n        this.TL = new Node(bounds.x, mid.x, bounds.y, mid.y, depth);\n        this.TR = new Node(mid.x, bounds.right, bounds.y, mid.y, depth);\n        this.BL = new Node(bounds.x, mid.x, mid.y, bounds.bottom, depth);\n        this.BR = new Node(mid.x, bounds.right, mid.y, bounds.bottom, depth);\n    }\n    /**\n     * Ensures all memory is released for all nodes and all references are removed\n     * to potentially high memory consumption items\n     *\n     * @memberOf Quadrants\n     */\n    Quadrants.prototype.destroy = function () {\n        this.TL.destroy();\n        this.TR.destroy();\n        this.BL.destroy();\n        this.BR.destroy();\n        delete this.TL;\n        delete this.TR;\n        delete this.BL;\n        delete this.BR;\n    };\n    return Quadrants;\n}());\nexports.Quadrants = Quadrants;\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n *\n * @export\n * @class Node\n */\nvar Node = /** @class */ (function () {\n    /**\n     * Creates an instance of Node.\n     *\n     * @param l     The bounding left wall of the space this node covers\n     * @param r     The bounding right wall of the space this node covers\n     * @param t     The bounding top wall of the space this node covers\n     * @param b     The bounding bottom wall of the space this node covers\n     * @param depth The depth within the quad tree this node resides\n     *\n     * @memberOf Node\n     */\n    function Node(left, right, top, bottom, depth) {\n        this.children = [];\n        this.depth = 0;\n        // If params insertted\n        if (arguments.length >= 4) {\n            this.bounds = new bounds_1.Bounds({\n                height: top - bottom,\n                width: right - left,\n                x: left,\n                y: top,\n            });\n        }\n        // Otherwise, make tiny start area\n        else {\n            this.bounds = new bounds_1.Bounds({\n                height: 1,\n                width: 1,\n                x: 0,\n                y: 0,\n            });\n        }\n        // Ensure the depth is set\n        this.depth = depth || 0;\n    }\n    /**\n     * Destroys this node and ensures all child nodes are destroyed as well.\n     *\n     * @memberOf Node\n     */\n    Node.prototype.destroy = function () {\n        delete this.children;\n        delete this.bounds;\n        if (this.nodes) {\n            this.nodes.destroy();\n            delete this.nodes;\n        }\n    };\n    /**\n     * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n     * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n     * this quad tree spans (and this is the root node), the quad tree will expand to include\n     * the new child.\n     *\n     * @param child The Bounds type object to inject\n     * @param props Properties that can be retrieved with the child object if applicable\n     *\n     * @returns True if the insertion was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.add = function (child, props) {\n        // This is the entry function for adding children, so we must first expand our top node\n        // To cover the area that the child is located.\n        // If we're in bounds, then let's just add the child\n        if (child.isInside(this.bounds)) {\n            return this.doAdd(child);\n        }\n        // Otherwise, we need to expand first\n        else {\n            this.cover(child);\n            return this.add(child, props);\n        }\n    };\n    /**\n     * Adds a list of new children to this quad tree. It performs the same operations as\n     * addChild for each child in the list, however, it more efficiently recalculates the\n     * bounds necessary to cover the area the children cover.\n     *\n     * @param children      List of Bounds objects to inject\n     * @param childrenProps List of props to associate with each element\n     *\n     * @memberOf Node\n     */\n    Node.prototype.addAll = function (children, childrenProps) {\n        var _this = this;\n        // Ensure the properties are at least defined\n        childrenProps = childrenProps || [];\n        // Make sure we cover the entire area of all the children.\n        // We can speed this up a lot if we first calculate the total bounds the new children covers\n        var minX = Number.MAX_VALUE;\n        var minY = Number.MAX_VALUE;\n        var maxX = -Number.MAX_VALUE;\n        var maxY = -Number.MAX_VALUE;\n        // Get the dimensions of the new bounds\n        children.forEach(function (child) {\n            if (child.x < minX) {\n                minX = child.x;\n            }\n            if (child.right > maxX) {\n                maxX = child.right;\n            }\n            if (child.bottom > maxY) {\n                maxY = child.bottom;\n            }\n            if (child.y < minY) {\n                minY = child.y;\n            }\n        });\n        // Make sure our bounds includes the specified bounds\n        this.cover(new bounds_1.Bounds({\n            height: maxY - minY,\n            width: maxX - minX,\n            x: minX,\n            y: minY,\n        }));\n        // Add all of the children into the tree\n        children.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n     * This will cause all children to be re-injected into the tree.\n     *\n     * @param bounds The bounds to include in the tree's coverage\n     *\n     * @memberOf Node\n     */\n    Node.prototype.cover = function (bounds) {\n        var _this = this;\n        // If we are already covering the area: abort\n        if (bounds.isInside(this.bounds)) {\n            return;\n        }\n        // Make our bounds cover the new area\n        this.bounds.encapsulate(bounds);\n        this.bounds.x -= 1;\n        this.bounds.y -= 1;\n        this.bounds.width += 2;\n        this.bounds.height += 4;\n        // Get all of the children underneath this node\n        var allChildren = this.gatherChildren([]);\n        // Destroy the split nodes\n        if (this.nodes) {\n            // Completely...destroy...\n            this.nodes.destroy();\n            delete this.nodes;\n        }\n        // Reinsert all children with the new dimensions in place\n        allChildren.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * When adding children, this performs the actual action of injecting the child into the tree\n     * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n     *\n     * @param child The Bounds item to inject into the tree\n     * @param props The props to remain associated with the child\n     *\n     * @returns True if the injection was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.doAdd = function (child) {\n        // If nodes are present, then we have already exceeded the population of this node\n        if (this.nodes) {\n            if (child.isInside(this.nodes.TL.bounds)) {\n                return this.nodes.TL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.TR.bounds)) {\n                return this.nodes.TR.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BL.bounds)) {\n                return this.nodes.BL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BR.bounds)) {\n                return this.nodes.BR.doAdd(child);\n            }\n            // Otherwise, this is a child overlapping this border\n            this.children.push(child);\n            return true;\n        }\n        // Otherwise, we have not had a split due to population limits being exceeded\n        else if (child.isInside(this.bounds)) {\n            this.children.push(child);\n            // If we exceeded our population for this quadrant, it is time to split up\n            if (this.children.length > maxPopulation && this.depth < maxDepth) {\n                this.split();\n            }\n            return true;\n        }\n        // This is when there is something wrong with the insertted child. The bounds\n        // For the quad should have grown without issue, but in this case the bounds\n        // Could not grow to accomodate the child.\n        if (isNaN(child.width + child.height + child.x + child.y)) {\n            console.error('Child did not fit into bounds because a dimension is NaN', child);\n        }\n        else if (child.area === 0) {\n            console.error('Child did not fit into bounds because the area is zero', child);\n        }\n        // Don't insert the child and continue\n        return true;\n    };\n    /**\n     * Collects all children of all the current and sub nodes into a single list.\n     *\n     * @param list The list we must aggregate children into\n     *\n     * @return The list specified as the list parameter\n     */\n    Node.prototype.gatherChildren = function (list) {\n        list = list.concat(this.children);\n        if (this.nodes) {\n            this.nodes.TL.gatherChildren(list);\n            this.nodes.TR.gatherChildren(list);\n            this.nodes.BL.gatherChildren(list);\n            this.nodes.BR.gatherChildren(list);\n        }\n        return list;\n    };\n    /**\n     * Entry query for determining query type based on input object\n     *\n     * @param bounds Can be a Bounds or a Point object\n     * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n     *               information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return An array of children that intersects with the query\n     */\n    Node.prototype.query = function (bounds, visit) {\n        // Query a rectangle\n        if (bounds instanceof bounds_1.Bounds) {\n            if (bounds.hitBounds(this.bounds)) {\n                return this.queryBounds(bounds, [], visit);\n            }\n            // Return an empty array when nothing is collided with\n            return [];\n        }\n        // Query a point\n        if (this.bounds.containsPoint(bounds)) {\n            return this.queryPoint(bounds, [], visit);\n        }\n        // Return an empty array when nothing is collided with\n        return [];\n    };\n    /**\n     * Queries children for intersection with a bounds object\n     *\n     * @param b     The Bounds to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return     Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryBounds = function (b, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.hitBounds(b)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (b.hitBounds(this.nodes.TL.bounds)) {\n                this.nodes.TL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.TR.bounds)) {\n                this.nodes.TR.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BL.bounds)) {\n                this.nodes.BL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BR.bounds)) {\n                this.nodes.BR.queryBounds(b, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Queries children for intersection with a point\n     *\n     * @param p     The Point to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return      Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryPoint = function (p, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.containsPoint(p)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (this.nodes.TL.bounds.containsPoint(p)) {\n                this.nodes.TL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.TR.bounds.containsPoint(p)) {\n                this.nodes.TR.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BL.bounds.containsPoint(p)) {\n                this.nodes.BL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BR.bounds.containsPoint(p)) {\n                this.nodes.BR.queryPoint(p, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Creates four sub quadrants for this node.\n     */\n    Node.prototype.split = function () {\n        // Gather all items to be handed down\n        var allChildren = this.gatherChildren([]);\n        // Gather all props for the children to be handed down as well\n        this.nodes = new Quadrants(this.bounds, this.depth + 1);\n        this.children = [];\n        while (allChildren.length > 0) {\n            var child = allChildren.pop();\n            if (child)\n                this.doAdd(child);\n        }\n    };\n    /**\n     * Traverses the quad tree returning every quadrant encountered\n     *\n     * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n     */\n    Node.prototype.visit = function (cb) {\n        var finished = Boolean(cb(this));\n        if (this.nodes && !finished) {\n            this.nodes.TL.visit(cb);\n            this.nodes.TR.visit(cb);\n            this.nodes.BL.visit(cb);\n            this.nodes.BR.visit(cb);\n        }\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar QuadTree = /** @class */ (function (_super) {\n    __extends(QuadTree, _super);\n    function QuadTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return QuadTree;\n}(Node));\nexports.QuadTree = QuadTree;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar data_bounds_1 = require(\"../util/data-bounds\");\nfunction value(val, ref, scaleRatio) {\n    var parse = \"\" + val;\n    var num = parseFloat(parse);\n    if (isNaN(num)) {\n        return 0;\n    }\n    // If this is a percentage use the reference as the num to multiply against\n    if (parse.indexOf('%') > -1) {\n        return (num / 100.0) * ref;\n    }\n    return num * scaleRatio;\n}\n/**\n * This evaluates an absolute position with a reference to produce meaningful bounds.\n *\n * The scaleRatio provided should be available in or for percents to have the same weighting\n * as whole number values.\n */\nfunction getAbsolutePositionBounds(item, reference, scaleRatio) {\n    if (reference.width === 0 || reference.height === 0) {\n        console.warn('An AbsolutePosition evaluated to invalid dimensions.', 'Please ensure that the object provided and the reference has valid dimensions', 'to produce dimensions with width and height that are non-zero.', 'item:', item, 'reference:', reference.toString());\n    }\n    var bounds = data_bounds_1.DataBounds.emptyBounds();\n    var width;\n    var height;\n    // Calculate the horizontal values\n    if (item.width) {\n        bounds.width = value(item.width, reference.width, scaleRatio);\n        if (item.left !== undefined) {\n            bounds.x = value(item.left, reference.width, scaleRatio);\n        }\n        else if (item.right !== undefined) {\n            bounds.x = reference.width - value(item.right, reference.width, scaleRatio) - bounds.width;\n        }\n    }\n    else {\n        var left = value(item.left || 0, reference.width, scaleRatio);\n        var right = reference.width - value(item.right || 0, reference.width, scaleRatio);\n        width = right - left;\n        if (width < 0) {\n            console.warn('An AbsolutePosition evaluated to invalid dimensions.', 'Please ensure that the object provided and the reference has valid dimensions', 'to produce dimensions with width and height that are greater than zero.', 'item:', item, 'reference:', reference.toString());\n        }\n        bounds.x = left;\n        bounds.width = width;\n    }\n    // Calculate the vertical values\n    if (item.height) {\n        bounds.height = value(item.height, reference.height, scaleRatio);\n        if (item.top !== undefined) {\n            bounds.y = value(item.top, reference.height, scaleRatio);\n        }\n        else if (item.bottom !== undefined) {\n            bounds.y = reference.height - value(item.bottom, reference.height, scaleRatio) - bounds.height;\n        }\n    }\n    else {\n        var top_1 = value(item.top || 0, reference.height, scaleRatio);\n        var bottom = reference.height - value(item.bottom || 0, reference.height, scaleRatio);\n        height = bottom - top_1;\n        if (height === undefined || height < 0) {\n            console.warn('An AbsolutePosition evaluated to invalid dimensions.', 'Please ensure that the object provided and the reference has valid dimensions', 'to produce dimensions with width and height that are greater than zero.', 'item:', item, 'reference:', reference.toString());\n        }\n        bounds.y = top_1;\n        bounds.height = height;\n    }\n    if (bounds.width === 0 || bounds.height === 0 || isNaN(bounds.x + bounds.y + bounds.width + bounds.height)) {\n        bounds.x = 0;\n        bounds.y = 0;\n        bounds.width = reference.width;\n        bounds.height = reference.height;\n    }\n    return bounds;\n}\nexports.getAbsolutePositionBounds = getAbsolutePositionBounds;\n","module.exports = \"// These are projection methods utilizing the simpler camera breakdown approach\\n\\nvec3 cameraSpace(vec3 world) {\\n  return (world + cameraOffset) * cameraScale;\\n}\\n\\nvec3 cameraSpaceSize(vec3 worldSize) {\\n  return worldSize * cameraScale;\\n}\\n\\nvec4 clipSpace(vec3 world) {\\n  return vec4(((projection * modelView) * vec4(cameraSpace(world), 1.0)).xyz, 1.0);\\n}\\n\\nvec4 clipSpaceSize(vec3 worldSize) {\\n  return vec4(((projection * modelView) * vec4(cameraSpaceSize(worldSize), 0.0)).xyz, 1.0);\\n}\\n\"","module.exports = \"// When instancing is enabled, it causes a major list of uniforms to be generated\\n// it also generates a massive search tree to retrieve the correct unforms in question.\\n${instanceUniformDeclarations}\\n\\n// This is the uniforms provided by the system along with the uniforms created by the layer\\n${layerUniforms}\\n\\n// This is the attributes generated for vertex attributes\\n${vertexAttributes}\\n\\n// This is the methods and set up needed to retrieve a block of data for an instance\\n${instanceDataRetrieval}\\n\\n// This is the methods generated for the automated easing of attributes\\n${easingMethods}\\n\"","module.exports = \"// This is the injected dereferencing of the instance attributes\\n  int instanceIndex = int(instance);\\n  ${instanceDestructuring}\\n\\n  // This is a special injected instance attribute. It lets the system\\n  // control specific instances ability to draw, which allows the backend\\n  // system greater control on how it optimizes draw calls and it's buffers.\\n  if (_active == 0.0) {\\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n\\n    // Quick exit to prevent any geometry from arising from the instance\\n    return;\\n  }\\n\"","module.exports = \"// This is the fragment shader generated by the system\\n${layerUniforms}\\n\\n// --------------- The fragment shader provided by the layer ------------------\\n${shader}\\n\"","module.exports = \"// This is the vertex shader generated by the system\\n${shaderInput}\\n${projectionMethods}\\n// --------------- Vertex shader provided by the layer -----------------\\n${shader}\\n\"","module.exports = \"int instanceSize = ${instanceBlockCount};\\n\\nvec4 getBlock(int index, int instanceIndex) {\\n  return instanceData[(instanceSize * instanceIndex) + index];\\n}\\n\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar types_1 = require(\"../../types\");\nvar auto_easing_method_1 = require(\"../../util/auto-easing-method\");\nvar make_instance_uniform_name_1 = require(\"../../util/make-instance-uniform-name\");\nvar shader_templating_1 = require(\"../../util/shader-templating\");\nvar template_vars_1 = require(\"../fragments/template-vars\");\nvar instanceRetrievalArrayFragment = require('../fragments/instance-retrieval-array.vs');\n/** Defines the elements for destructuring out of a vector */\nvar VECTOR_COMPONENTS = ['x', 'y', 'z', 'w'];\n/** Converts a size to a shader type */\nvar sizeToType = {\n    1: 'float',\n    2: 'vec2',\n    3: 'vec3',\n    4: 'vec4',\n    9: 'mat3',\n    16: 'mat4',\n    /** This is the special case for instance attributes that want an atlas resource */\n    99: 'vec4',\n};\n/**\n * This sorts attributes specific to how they need to be destructured. For example:\n * easing attributes MUST appear AFTER all of the specially integrated attributes that were generated\n * such as start times and durations.\n */\nfunction orderByPriority(a, b) {\n    if (a.easing && !b.easing)\n        return 1;\n    return -1;\n}\nfunction makeUniformArrayDeclaration(totalBlocks) {\n    return {\n        fragment: \"uniform vec4 \" + make_instance_uniform_name_1.makeInstanceUniformNameArray() + \"[\" + totalBlocks + \"];\",\n        materialUniforms: [\n            {\n                name: make_instance_uniform_name_1.makeInstanceUniformNameArray(),\n                type: '4fv',\n                value: new Array(totalBlocks)\n                    .fill(0)\n                    .map(function () { return new Three.Vector4(0, 0, 0, 0); }),\n            },\n        ],\n    };\n}\nexports.makeUniformArrayDeclaration = makeUniformArrayDeclaration;\nfunction makeInstanceRetrievalArray(blocksPerInstance) {\n    var templateOptions = {};\n    templateOptions[template_vars_1.templateVars.instanceBlockCount] = \"\" + blocksPerInstance;\n    var required = {\n        name: 'makeInstanceRetrievalArray',\n        values: [\n            template_vars_1.templateVars.instanceBlockCount,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(instanceRetrievalArrayFragment, templateOptions, required);\n    return results.shader;\n}\nexports.makeInstanceRetrievalArray = makeInstanceRetrievalArray;\nfunction makeInstanceDestructuringArray(instanceAttributes, blocksPerInstance) {\n    var out = '';\n    var orderedAttributes = instanceAttributes.slice(0).sort(orderByPriority);\n    // Generate the blocks\n    for (var i = 0; i < blocksPerInstance; ++i) {\n        out += \"  vec4 block\" + i + \" = getBlock(\" + i + \", instanceIndex);\\n\";\n    }\n    orderedAttributes.forEach(function (attribute) {\n        var block = attribute.block;\n        // If this is the source easing attribute, we must add it in as an eased method along with a calculation for the\n        // Easing interpolation time value based on the current time and the injected start time of the change.\n        if (attribute.easing && attribute.size) {\n            if (attribute.size === types_1.InstanceAttributeSize.FOUR) {\n                out += \"  \" + sizeToType[attribute.size] + \" _\" + attribute.name + \"_end = block\" + block + \";\\n\";\n            }\n            else {\n                out += \"  \" + sizeToType[attribute.size || 1] + \" _\" + attribute.name + \"_end = block\" + block + \".\" + makeVectorSwizzle(attribute.blockIndex || 0, attribute.size || 1) + \";\\n\";\n            }\n            switch (attribute.easing.loop) {\n                // Repeat means going from 0 to 1 then 0 to 1 etc etc\n                case auto_easing_method_1.AutoEasingLoopStyle.REPEAT:\n                    out += \"  float _\" + attribute.name + \"_time = clamp(fract((currentTime - _\" + attribute.name + \"_start_time) / _\" + attribute.name + \"_duration), 0.0, 1.0);\\n\";\n                    break;\n                // Reflect means going from 0 to 1 then 1 to 0 then 0 to 1 etc etc\n                case auto_easing_method_1.AutoEasingLoopStyle.REFLECT:\n                    // Get the time passed in a linear fashion\n                    out += \"  float _\" + attribute.name + \"_timePassed = (currentTime - _\" + attribute.name + \"_start_time) / _\" + attribute.name + \"_duration;\\n\";\n                    // Make a triangle wave from the time passed to ping pong the value\n                    out += \"  float _\" + attribute.name + \"_pingPong = abs((fract(_\" + attribute.name + \"_timePassed / 2.0)) - 0.5) * 2.0;\\n\";\n                    // Ensure we're clamped to the right values\n                    out += \"  float _\" + attribute.name + \"_time = clamp(_\" + attribute.name + \"_pingPong, 0.0, 1.0);\\n\";\n                    break;\n                // No loop means just linear time\n                case auto_easing_method_1.AutoEasingLoopStyle.NONE:\n                default:\n                    out += \"  float _\" + attribute.name + \"_time = clamp((currentTime - _\" + attribute.name + \"_start_time) / _\" + attribute.name + \"_duration, 0.0, 1.0);\\n\";\n                    break;\n            }\n            out += \"  \" + sizeToType[attribute.size] + \" \" + attribute.name + \" = \" + attribute.easing.methodName + \"(_\" + attribute.name + \"_start, _\" + attribute.name + \"_end, _\" + attribute.name + \"_time);\\n\";\n        }\n        // If we have a size the size of a block, then don't swizzle the vector\n        else if (attribute.size === types_1.InstanceAttributeSize.FOUR) {\n            out += \"  \" + sizeToType[attribute.size] + \" \" + attribute.name + \" = block\" + block + \";\\n\";\n        }\n        // If the attribute is an atlas, then we use the special ATLAS size and don't swizzle the vector\n        else if (attribute.atlas) {\n            out += \"  \" + sizeToType[types_1.InstanceAttributeSize.ATLAS] + \" \" + attribute.name + \" = block\" + block + \";\\n\";\n        }\n        // Do normal destructuring with any other size and type\n        else {\n            out += \"  \" + sizeToType[attribute.size || 1] + \" \" + attribute.name + \" = block\" + block + \".\" + makeVectorSwizzle(attribute.blockIndex || 0, attribute.size || 1) + \";\\n\";\n        }\n    });\n    return out;\n}\nexports.makeInstanceDestructuringArray = makeInstanceDestructuringArray;\nfunction makeVectorSwizzle(start, size) {\n    return VECTOR_COMPONENTS.slice(start, start + size).join('');\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * The goal of this file is to take in model attributes and instance attributes specified\n * and inject the proper attributes into the shaders so the implementor of the shader does\n * not worry about syncing attribute and uniform names between the JS\n */\nvar types_1 = require(\"../../types\");\nvar shader_templating_1 = require(\"../../util/shader-templating\");\nvar webgl_stat_1 = require(\"../../util/webgl-stat\");\nvar template_vars_1 = require(\"../fragments/template-vars\");\nvar uniform_instance_block_array_1 = require(\"./uniform-instance-block-array\");\n// These are all of the necessary fragments that will comprise our shader that is generated\nvar vertexShaderComposition = require('../fragments/vertex-shader-composition.vs');\nvar fragmentShaderComposition = require('../fragments/fragment-shader-composition.fs');\nvar instanceDestructuringArray = require('../fragments/instance-destructuring-array.vs');\nvar shaderInput = require('../fragments/shader-input.vs');\nvar projectionMethods = require('../fragments/projection-methods.vs');\n// Constants\n/**\n * Defines how many floats are available in a uniform block\n * What is a uniform block you ask? Why let me tell you! It is how opengl stores and communicates uniforms\n * to the GPU. Whenever you declare a uniform, it will use a hunk of memory. You can see how many uniforms\n * a GPU can have via the paramter MAX_VERTEX_UNIFORM_VECTORS. The number returned is the number of blocks\n * we can use for uniforms in the vertex shader. A BLOCK is an entire vec4.\n *\n * When you declare a uniform in your shader, it will use an entire BLOCK at the MINIMUM.\n *\n * A uniform float uses 1 block. vec2 uses 1 block. vec3 uses one block. vec4 uses one block.\n * mat4 uses 4 blocks. mat3 uses 3 blocks.\n *\n * etc etc.\n */\nvar MAX_USE_PER_BLOCK = 4;\n/** Converts a size to a shader type */\nvar sizeToType = {\n    1: 'float',\n    2: 'vec2',\n    3: 'vec3',\n    4: 'vec4',\n    9: 'mat3',\n    16: 'mat4',\n    99: 'sampler2D',\n};\nfunction calculateUniformBlockUseage(uniforms) {\n    var count = 0;\n    for (var i = 0, end = uniforms.length; i < end; ++i) {\n        count += Math.ceil(uniforms[i].size / 4);\n    }\n    return count;\n}\n/**\n * This method is the main algorithm for piecing together all of the attributes necessary\n * and injecting them into the shaders.\n *\n * @param shaders\n * @param vertexAttributes\n * @param instanceAttributes\n */\nfunction injectFragments(shaders, vertexAttributes, instanceAttributes, uniforms) {\n    var shaderInputMetrics = generateShaderInputs(vertexAttributes, instanceAttributes, uniforms);\n    var templateOptions = (_a = {},\n        _a[template_vars_1.templateVars.projectionMethods] = generateProjectionMethods(),\n        _a[template_vars_1.templateVars.shaderInput] = shaderInputMetrics.fragment,\n        _a[template_vars_1.templateVars.shader] = generateVertexShader(shaders, instanceAttributes, shaderInputMetrics.metrics.maxInstancesPerBuffer, shaderInputMetrics.metrics.blocksPerInstance),\n        _a);\n    var required = {\n        name: 'vertex shader composition',\n        values: [\n            template_vars_1.templateVars.projectionMethods,\n            template_vars_1.templateVars.shaderInput,\n            template_vars_1.templateVars.shader,\n        ],\n    };\n    var vertexShaderResults = shader_templating_1.shaderTemplate(vertexShaderComposition, templateOptions, required);\n    templateOptions = (_b = {},\n        _b[template_vars_1.templateVars.layerUniforms] = generateUniforms(uniforms, types_1.ShaderInjectionTarget.FRAGMENT),\n        _b[template_vars_1.templateVars.shader] = generateFragmentShader(shaders),\n        _b);\n    required = {\n        name: 'fragment shader composition',\n        values: [\n            template_vars_1.templateVars.layerUniforms,\n            template_vars_1.templateVars.shader,\n        ],\n    };\n    var fragmentShaderResults = shader_templating_1.shaderTemplate(fragmentShaderComposition, templateOptions, required);\n    return {\n        fs: fragmentShaderResults.shader,\n        materialUniforms: shaderInputMetrics.materialUniforms,\n        maxInstancesPerBuffer: shaderInputMetrics.metrics.maxInstancesPerBuffer,\n        vs: vertexShaderResults.shader,\n    };\n    var _a, _b;\n}\nexports.injectFragments = injectFragments;\n/**\n * Creates the projection method fragment\n */\nfunction generateProjectionMethods() {\n    var templateOptions = {};\n    var required = {\n        name: 'projection methods',\n        values: [],\n    };\n    var results = shader_templating_1.shaderTemplate(projectionMethods, templateOptions, required);\n    return results.shader;\n}\n/**\n * Generates the fragments for shader IO such as vertex and instance attributes\n */\nfunction generateShaderInputs(vertexAttributes, instanceAttributes, uniforms) {\n    var templateOptions = {};\n    var instancingInfo = generateInstanceDataLookupOptions(templateOptions, instanceAttributes, uniforms);\n    var additionalOptions = (_a = {},\n        _a[template_vars_1.templateVars.layerUniforms] = generateUniforms(uniforms, types_1.ShaderInjectionTarget.VERTEX),\n        _a[template_vars_1.templateVars.vertexAttributes] = generateVertexAttributes(vertexAttributes),\n        _a[template_vars_1.templateVars.easingMethods] = generateEasingMethods(instanceAttributes),\n        _a);\n    Object.assign(templateOptions, additionalOptions);\n    var required = {\n        name: 'shader input',\n        values: [\n            template_vars_1.templateVars.instanceDataRetrieval,\n            template_vars_1.templateVars.instanceUniformDeclarations,\n            template_vars_1.templateVars.layerUniforms,\n            template_vars_1.templateVars.vertexAttributes,\n            template_vars_1.templateVars.easingMethods,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(shaderInput, templateOptions, required);\n    return {\n        fragment: results.shader,\n        materialUniforms: instancingInfo.materialUniforms,\n        metrics: instancingInfo.metrics,\n    };\n    var _a;\n}\n/**\n * Generates the easing methods for the Shader specified by each attribute\n */\nfunction generateEasingMethods(instanceAttributes) {\n    var methods = new Map();\n    var out = '';\n    // First dedup the methods needed by their method name\n    instanceAttributes.forEach(function (attribute) {\n        if (attribute.easing && attribute.size) {\n            var methodSizes = methods.get(attribute.easing.methodName);\n            if (!methodSizes) {\n                methodSizes = new Map();\n                methods.set(attribute.easing.methodName, methodSizes);\n            }\n            methodSizes.set(attribute.size, attribute.easing.gpu);\n        }\n    });\n    var required = {\n        name: 'Easing Method Generation',\n        values: [\n            template_vars_1.templateVars.easingMethod,\n        ],\n    };\n    // Now generate the full blown method for each element. We create overloaded methods for\n    // Each method name for each vector size required\n    methods.forEach(function (methodSizes, methodName) {\n        methodSizes.forEach(function (method, size) {\n            var sizeType = sizeToType[size];\n            var templateOptions = (_a = {},\n                _a[template_vars_1.templateVars.easingMethod] = sizeType + \" \" + methodName + \"(\" + sizeType + \" start, \" + sizeType + \" end, float t)\",\n                _a);\n            var results = shader_templating_1.shaderTemplate(method, templateOptions, required);\n            out += results.shader + \"\\n\";\n            var _a;\n        });\n    });\n    return out;\n}\n/**\n * Generates all of the uniforms that are provided by the shader IO.\n */\nfunction generateUniforms(uniforms, injectionType) {\n    var out = '';\n    var injection = injectionType || types_1.ShaderInjectionTarget.VERTEX;\n    uniforms.forEach(function (uniform) {\n        uniform.shaderInjection = uniform.shaderInjection || types_1.ShaderInjectionTarget.VERTEX;\n        if (uniform.shaderInjection === injection || uniform.shaderInjection === types_1.ShaderInjectionTarget.ALL) {\n            out += \"uniform \" + (uniform.qualifier || '') + (uniform.qualifier ? ' ' : '') + sizeToType[uniform.size] + \" \" + uniform.name + \";\\n\";\n        }\n    });\n    return out;\n}\n/**\n * This takes in the layer's vertex shader and transforms any required templating within the\n * shader.\n */\nfunction generateVertexShader(shaders, instanceAttributes, maxInstancesPerBuffer, blocksPerInstance) {\n    var templateOptions = (_a = {},\n        _a[template_vars_1.templateVars.attributes] = makeInstanceAttributeReferences(instanceAttributes, blocksPerInstance),\n        _a);\n    var required = {\n        name: 'layer vertex shader',\n        values: [\n            template_vars_1.templateVars.attributes,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(shaders.vs, templateOptions, required);\n    return results.shader;\n    var _a;\n}\nfunction generateFragmentShader(shaders) {\n    var templateOptions = {};\n    var required = {\n        name: 'layer fragment shader',\n        values: [],\n    };\n    var results = shader_templating_1.shaderTemplate(shaders.fs, templateOptions, required);\n    return results.shader;\n}\n/**\n * This generates the inline attribute references needed to be able to reference instance attribute\n * vars.\n */\nfunction makeInstanceAttributeReferences(instanceAttributes, blocksPerInstance) {\n    var templateOptions = {};\n    templateOptions[template_vars_1.templateVars.blocksPerInstance] = \"\" + blocksPerInstance;\n    templateOptions[template_vars_1.templateVars.instanceDestructuring] = makeInstanceDestructuring(instanceAttributes, blocksPerInstance);\n    var required = {\n        name: 'instance attributes fragment',\n        values: [\n            template_vars_1.templateVars.instanceDestructuring,\n        ],\n    };\n    var results = shader_templating_1.shaderTemplate(instanceDestructuringArray, templateOptions, required);\n    return results.shader;\n}\n/**\n * This generates an in method destructuring pattern to make instance attributes available within a method.\n */\nfunction makeInstanceDestructuring(instanceAttributes, blocksPerInstance) {\n    return uniform_instance_block_array_1.makeInstanceDestructuringArray(instanceAttributes, blocksPerInstance);\n}\n/**\n * This generates the model attribute declarations\n */\nfunction generateVertexAttributes(vertexAttributes) {\n    var out = '';\n    vertexAttributes.forEach(function (attribute) {\n        out += \"attribute \" + sizeToType[attribute.size] + \" \" + (attribute.qualifier || '') + ((attribute.qualifier && ' ') || '') + attribute.name + \";\\n\";\n    });\n    return out;\n}\n/**\n * This method generates the chunk of shader that is responsible for providing\n */\nfunction generateInstanceDataLookupOptions(templateOptions, instanceAttributes, uniforms) {\n    // This is how many uniform blocks the current device can utilize in a shader\n    var maxUniforms = webgl_stat_1.WebGLStat.MAX_VERTEX_UNIFORMS;\n    // This reflects how many uniform blocks are available for instancing\n    var instanceUniformBlockCount = maxUniforms - calculateUniformBlockUseage(uniforms);\n    // Go through the attributes provided and calculate the number of blocks requested\n    // Also sort the attributes by block and pack the block useage down.\n    var sortedInstanceAttributes = instanceAttributes.slice(0).sort(function (a, b) { return a.block - b.block; });\n    var currentBlock = sortedInstanceAttributes[0].block;\n    var trueBlockIndex = 0;\n    // This tracks how much a block is used\n    var blockUseage = new Map();\n    var innerBlockUseage = new Map();\n    sortedInstanceAttributes.forEach(function (attribute) {\n        if (attribute.block !== currentBlock) {\n            currentBlock = attribute.block;\n            trueBlockIndex++;\n        }\n        var attributeSize = attribute.size || 1;\n        var oldUseage = blockUseage.get(trueBlockIndex) || 0;\n        var newUseage = oldUseage + attributeSize;\n        // Make sure the block isn't over used thus losing attribute information\n        if (newUseage > MAX_USE_PER_BLOCK) {\n            console.error(\"An instance attribute was specified that over fills the maximum allowed useage for a block.\", \"\\nMax Allowed per block \" + MAX_USE_PER_BLOCK, \"\\nAttribute: \" + attribute.name + \" Block Specified: \" + attribute.block, \"\\nTotal blocks used with this attribute: \" + newUseage);\n            return;\n        }\n        // Store how much of the block is utilized\n        blockUseage.set(trueBlockIndex, newUseage);\n        // We can now auto specify the inner index of where the attribute lines up within the block\n        attribute.blockIndex = oldUseage;\n        // Now we examine the attributes request of use inside the block and make sure there is no\n        // Overlap\n        var innerUseage = innerBlockUseage.get(trueBlockIndex) || new Map();\n        if (attribute.blockIndex + attributeSize > MAX_USE_PER_BLOCK) {\n            console.error(\"An instance attribute was specified that would fill indices greater than the block allows.\", \"\\nMax index per block \" + MAX_USE_PER_BLOCK, \"\\nAttribute: \" + attribute.name + \" Block Index: \" + attribute.blockIndex + \" Size: \" + attribute.size + \" Block Index + Size: \" + (attribute.blockIndex + (attribute.size || 1)));\n            return;\n        }\n        for (var i = attribute.blockIndex; i < attribute.blockIndex + attributeSize; ++i) {\n            if (innerUseage.get(i)) {\n                console.error(\"An instance attribute was specified who's block index overaps another attributes useage\", \"\\nMax index per block \" + MAX_USE_PER_BLOCK, \"\\nAttribute: \" + attribute.name + \" Block Index: \" + attribute.blockIndex + \" Size: \" + attribute.size + \" Block Index + Size: \" + (attribute.blockIndex + (attribute.size || 1)));\n                return;\n            }\n        }\n        // Adjust the attribute to reflect the actual bock it is using\n        attribute.block = trueBlockIndex;\n    });\n    /**\n     * We now must create a decision tree large enough to accomodate our instances.\n     * Explanation:\n     * Our shaders CANNOT do switch case statements, NOR can they handle large amounts of\n     * chained if else statements (it will produce a memory exhausted error on many systems).\n     * There is even limits on how deep if else statements can be nested within each other.\n     * Lastly: We do NOT want to create an array in memory in the shader to create a lookup for our\n     * instance data as it would need to be allocated EVERY vertex operation.\n     *\n     * So, our best workaround is to make a decision tree that balances how many decisions per\n     * node it can make vs the depth of decisions. The more decisions per node, the less deep the\n     * tree will be, but will suffer some performance cost. But the less deep the tree, the better\n     * chance you will not get a 'memory exhausted' error.\n     */\n    var branchesPerLevel = 4;\n    var blocksPerInstance = trueBlockIndex + 1;\n    // This determines how many instances our allowed uniforms will allow for a single draw call\n    var maxInstancesPerBuffer = Math.floor(instanceUniformBlockCount / blocksPerInstance);\n    // Generate the decision tree and uniform declarations\n    var instancingMetrics = makeUniformInstanceDataOptions(templateOptions, maxInstancesPerBuffer, branchesPerLevel, blocksPerInstance, sortedInstanceAttributes);\n    return {\n        materialUniforms: instancingMetrics.materialUniforms,\n        metrics: {\n            blocksPerInstance: blocksPerInstance,\n            maxInstancesPerBuffer: maxInstancesPerBuffer,\n        },\n    };\n}\n/**\n * This generates all of the necessary templating information from uniform-instance-data\n * in order to provide an instance data getter for the application.\n */\nfunction makeUniformInstanceDataOptions(templateOptions, maxInstancesPerBuffer, branchesPerLevel, blocksPerInstance, instanceAttributes) {\n    // Make a list containing all instance indicies that will be utilized and will be split\n    // Out into the decision tree\n    var instances = [];\n    for (var i = 0; i < maxInstancesPerBuffer; ++i) {\n        instances.push(i);\n    }\n    // Make the uniform declaration. Uniform declaration simultaneously gives us the material uniforms necessary\n    // To apply to our three material.\n    var uniformMetrics = makeInstanceUniformDeclaration(maxInstancesPerBuffer * blocksPerInstance, instanceAttributes);\n    templateOptions[template_vars_1.templateVars.instanceUniformDeclarations] = uniformMetrics.fragment;\n    templateOptions[template_vars_1.templateVars.instanceBlockCount] = \"\" + blocksPerInstance;\n    // This way produced the data retrieval method for decision tree instancing\n    // *templateOptions[templateVars.instanceDataRetrieval] = makeInstanceRetrievalDecisionTree(blocksPerInstance, instances, branchesPerLevel);\n    // This method produces the data retrieval method for array instancing\n    templateOptions[template_vars_1.templateVars.instanceDataRetrieval] = uniform_instance_block_array_1.makeInstanceRetrievalArray(blocksPerInstance);\n    return {\n        materialUniforms: uniformMetrics.materialUniforms,\n    };\n}\n/**\n * This generates the declaration of all of the individual uniform registers for instancing.\n */\nfunction makeInstanceUniformDeclaration(instanceUniformBlockCount, attributes) {\n    var out = '';\n    var blockQualifierDedup = new Map();\n    var maxBlock = 0;\n    // Dedup the attributes specified for the\n    attributes.forEach(function (attribute) {\n        var qualifiers = blockQualifierDedup.get(attribute.block) || new Map();\n        // Make sure the qualifier is added for the block!\n        if (attribute.qualifier) {\n            qualifiers.set(attribute.qualifier, true);\n        }\n        // Get the max block in use\n        maxBlock = Math.max(maxBlock, attribute.block);\n    });\n    // Generate the full string for the specified qualifiers\n    var blockQualifiers = new Map();\n    blockQualifierDedup.forEach(function (qualifierList, block) {\n        var allQualifiers = Array.from(qualifierList.keys());\n        blockQualifiers.set(block, allQualifiers.join(' ') + \" \");\n    });\n    // Generate our uniform declarations\n    // Const blockCount = maxBlock + 1;\n    // This method produces the instancing declaration for a search tree.\n    // *out += makeUniformDecisionTreeDeclarations(instanceUniformBlockCount, blockCount, blockQualifiers, materialUniforms);\n    // This method produces the instancing declaration for an instancing array\n    var declaration = uniform_instance_block_array_1.makeUniformArrayDeclaration(instanceUniformBlockCount);\n    out += declaration.fragment;\n    out += \"\\n\";\n    return {\n        fragment: out,\n        materialUniforms: declaration.materialUniforms,\n    };\n}\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar texture_1 = require(\"../../surface/texture\");\nvar instance_1 = require(\"../../util/instance\");\nvar types_1 = require(\"../types\");\n/**\n * This is a lookup to find existing rasterizations for a particularly created label so that every\n * new label does not have to go through the rasterization process.\n */\nvar rasterizationLookUp = new Map();\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nvar anchorCalculator = (_a = {},\n    _a[types_1.AnchorType.TopLeft] = function (anchor, label) {\n        anchor.x = -anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopMiddle] = function (anchor, label) {\n        anchor.x = label.width / 2.0;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopRight] = function (anchor, label) {\n        anchor.x = label.width + anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.MiddleLeft] = function (anchor, label) {\n        anchor.x = -anchor.padding;\n        anchor.y = label.height / 2;\n    },\n    _a[types_1.AnchorType.Middle] = function (anchor, label) {\n        anchor.x = label.width / 2.0;\n        anchor.y = label.height / 2.0;\n    },\n    _a[types_1.AnchorType.MiddleRight] = function (anchor, label) {\n        anchor.x = label.width + anchor.padding;\n        anchor.y = label.height / 2.0;\n    },\n    _a[types_1.AnchorType.BottomLeft] = function (anchor, label) {\n        anchor.x = -anchor.padding;\n        anchor.y = label.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomMiddle] = function (anchor, label) {\n        anchor.x = label.width / 2.0;\n        anchor.y = label.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomRight] = function (anchor, label) {\n        anchor.x = label.width + anchor.padding;\n        anchor.y = label.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.Custom] = function (anchor, label) {\n        anchor.x = anchor.x || 0;\n        anchor.y = anchor.y || 0;\n    },\n    _a);\n/**\n * This generates a new label instance which will render a single line of text for a given layer.\n * There are restrictions surrounding labels due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a label via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Labels should only be so long.\n * - Multiline is not supported inherently\n * - Once a label is constructed, only SOME properties can be altered thereafter\n *\n * A label that is constructed can only have some properties set upon creating the label and are locked\n * thereafter. The only way to modify them would be to destroy the label, then construct a new label\n * with the modifications. This has to deal with performance regarding rasterizing the label\n */\nvar LabelInstance = /** @class */ (function (_super) {\n    __extends(LabelInstance, _super);\n    function LabelInstance(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the rendered color of the label */\n        _this.color = [0, 0, 0, 1];\n        /** Depth sorting of the label (or the z value of the label) */\n        _this.depth = 0;\n        /** When in BOUND_MAX mode, this allows the label to scale up beyond it's max size */\n        _this.maxScale = 1;\n        /** Sets the way the label scales with the world */\n        _this.scaling = types_1.ScaleType.BOUND_MAX;\n        /** Scales the label uniformly */\n        _this.scale = 1.0;\n        /** The x coordinate where the label will be anchored to in world space */\n        _this.x = 0;\n        /** The y coordinate where the label will be anchored to in world space */\n        _this.y = 0;\n        // The following properties are properties that are locked in after creating this label\n        // As the properties are completely locked into how the label was rasterized and can not\n        // Nor should not be easily adjusted for performance concerns\n        _this._cssFont = '';\n        _this._fontFamily = 'Arial';\n        _this._fontSize = 12;\n        _this._fontStyle = 'normal';\n        _this._fontWeight = 400;\n        _this._maxWidth = 0;\n        _this._text = '';\n        _this._width = 0;\n        _this._height = 0;\n        _this._isDestroyed = false;\n        // These are properties that can be altered, but have side effects from being changed\n        /** This is the anchor location on the  */\n        _this._anchor = {\n            padding: 0,\n            type: types_1.AnchorType.TopLeft,\n            x: 0,\n            y: 0,\n        };\n        _this.depth = options.depth || _this.depth;\n        _this.color = options.color || _this.color;\n        _this.maxScale = options.maxScale || _this.maxScale;\n        _this.scaling = options.scaling || _this.scaling;\n        _this.scale = options.scale || _this.scale;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        _this._fontFamily = options.fontFamily || _this._fontFamily;\n        _this._fontSize = options.fontSize || _this._fontSize;\n        _this._fontStyle = options.fontStyle || _this._fontStyle;\n        _this._fontWeight = options.fontWeight || _this._fontWeight;\n        _this._maxWidth = options.maxWidth || 0;\n        _this._text = options.text || _this._text;\n        // We get the CSS font string for this label so we can uniquely identify the rasterization\n        // Easily.\n        _this._cssFont = texture_1.LabelRasterizer.makeCSSFont(_this, 1);\n        // This is css font used to look up rasterizations. This lookup includes the max width of the label\n        // Which the css font does not account for\n        var cssFontLookup = _this._cssFont + \"_\" + _this._maxWidth;\n        // Look for other same texts that have been rasterized\n        var rasterizations = rasterizationLookUp.get(_this._text);\n        var rasterization;\n        if (rasterizations) {\n            // Look for those texts that have been rasterized in the same fashion that this label is requesting\n            rasterization = rasterizations.get(cssFontLookup);\n            // If a rasterization exists, we must increment the use reference\n            if (rasterization) {\n                rasterization.references++;\n            }\n        }\n        else {\n            rasterizations = new Map();\n        }\n        // If we have not found an existing rasterization\n        if (!rasterization) {\n            rasterization = {\n                references: 1,\n                resource: new texture_1.LabelAtlasResource(_this),\n            };\n            // Look to see if any rasterization options were specified\n            if (options.rasterization) {\n                rasterization.resource.sampleScale = options.rasterization.scale || 1.0;\n            }\n            // Ensure the sample scale is set. Defaults to 1.0\n            rasterization.resource.sampleScale = rasterization.resource.sampleScale || 1.0;\n            // Rasterize the resource generated for this label. We need it immediately rasterized so\n            // That we can utilize the dimensions for calculations.\n            texture_1.LabelRasterizer.renderSync(rasterization.resource);\n            // Now that we have an official rasterization for this text / label combo, we shall store it\n            // For others to look up\n            rasterizationLookUp.set(_this._text, rasterizations);\n            rasterizations.set(cssFontLookup, rasterization);\n        }\n        _this._rasterization = rasterization;\n        _this._width = rasterization.resource.rasterization.world.width;\n        _this._height = rasterization.resource.rasterization.world.height;\n        // Make sure the anchor is set to the appropriate location\n        options.anchor && _this.setAnchor(options.anchor);\n        return _this;\n    }\n    /**\n     * TODO: We should be implementing the destroy on LabelInstances to clean this up\n     * Frees up module scoped data.\n     */\n    LabelInstance.destroy = function () {\n        rasterizationLookUp.clear();\n    };\n    Object.defineProperty(LabelInstance.prototype, \"cssFont\", {\n        // The following are the getters for the locked in parameters of the label so we can read\n        // The properties but not set any of them.\n        /**\n         * This is the full css string that represents this label. This + the text of the label is essentially\n         * a unique identifier for the rendering of the label and is used to key the rasterization of the label\n         * so that label rasterization can be shared for similar labels.\n         */\n        get: function () { return this._cssFont; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"isDestroyed\", {\n        /** This flag indicates if this label is valid anymore */\n        get: function () { return this._isDestroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontFamily\", {\n        /** This is the font family of the label */\n        get: function () { return this._fontFamily; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontSize\", {\n        /**\n         * This is the size of the label in pixels. For Labels, this correlates to the rendering font size.\n         * The true pixel height of the label is calculated and placed into the height property for the label.\n         */\n        get: function () { return this._fontSize; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontStyle\", {\n        /** This is the style of the font (italic, oblique, etc) */\n        get: function () { return this._fontStyle; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"fontWeight\", {\n        /** This is the font weight specified for the label (bold, normal, etc). */\n        get: function () { return this._fontWeight; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"maxWidth\", {\n        /** This is the max width in pixels this label can fill */\n        get: function () { return this._maxWidth; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"resource\", {\n        /** This gets the atlas resource that is uniquely identified for this label */\n        get: function () { return this._rasterization.resource; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"text\", {\n        /** This is the label's text. */\n        get: function () { return this._text; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"truncatedText\", {\n        /**\n         * If a maxWidth is specified, there is a chance the text will be truncated.\n         * This provides the calculated truncated text.\n         */\n        get: function () { return this._rasterization.resource.truncatedText || this.text; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"width\", {\n        /**\n         * This is the width in world space of the label. If there is no camera distortion,\n         * this would be the width of the label in pixels on the screen.\n         */\n        get: function () {\n            return this._width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LabelInstance.prototype, \"height\", {\n        /**\n         * This is the height in world space of the label. If there is no camera distortion,\n         * this would be the height of the label in pixels on the screen.\n         */\n        get: function () {\n            return this._height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Labels are a sort of unique case where the use of a label should be destroyed as rasterization\n     * resources are in a way kept alive through reference counting.\n     */\n    LabelInstance.prototype.destroy = function () {\n        if (!this._isDestroyed) {\n            this._isDestroyed = true;\n            this._rasterization.references--;\n            // If all references are cleared, then the rasterization needs to be eradicated\n            if (this._rasterization.references === 0) {\n                this._rasterization.resource;\n            }\n        }\n    };\n    Object.defineProperty(LabelInstance.prototype, \"anchor\", {\n        get: function () {\n            return this._anchor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This applies a new anchor to this label and properly determines it's anchor position on the label\n     */\n    LabelInstance.prototype.setAnchor = function (anchor) {\n        var newAnchor = {\n            padding: anchor.padding || 0,\n            type: anchor.type,\n            x: anchor.x || 0,\n            y: anchor.y || 0,\n        };\n        // Calculate the new anchors position values\n        anchorCalculator[newAnchor.type](newAnchor, this);\n        // Apply the anchor\n        this._anchor = newAnchor;\n    };\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"color\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"depth\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"maxScale\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"scaling\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"scale\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"x\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"y\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], LabelInstance.prototype, \"_anchor\", void 0);\n    __decorate([\n        mobx_1.computed\n    ], LabelInstance.prototype, \"anchor\", null);\n    return LabelInstance;\n}(instance_1.Instance));\nexports.LabelInstance = LabelInstance;\nvar _a;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Determine final screen size of label\\n  vec3 screenSize = cameraSpaceSize(vec3(size * scale / maxScale, 1.0));\\n\\n  // Test whether the label is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y || screenSize.x > size.x;\\n\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n\\n  // Correct aspect ratio.  Sufficient fix for most applications.\\n  // Will need another solution in the case of:\\n  //  (cameraScale y != cameraScale.x) && (cameraScale.x != 1 && cameraScale.y != 1)\\n\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float(cameraScale.x != cameraScale.y);\\n\\n  size = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  vec2 scaledAnchor = anchor * scale;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + scaledAnchor;\\n\\n  vec2 adjustedAnchor = mix(\\n    scaledAnchor,\\n    (scaledAnchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  // Get the position of the current vertex\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * scale * size + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the label\\n  float labelScreenScale = mix(\\n    screenSize.y / size.y,\\n    screenSize.x / size.x,\\n    float((cameraScale.x != 1.0))\\n  );\\n\\n  float currentScale = labelScreenScale * scale;\\n\\n  // If our screen rendering is larger than the size the label is supposed to be, then we automagically\\n  // scale down our label to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / labelScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  // --Texture and Color\\n  // Get the tex coord from our inject texture info\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the label's color as a tint to the label (all labels are rendered white to the base texture)\\n  vertexColor = color;\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  gl_FragColor = texture2D(labelAtlas, texCoord) * vertexColor;\\n  gl_FragColor *= gl_FragColor.a;\\n}\\n\"","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar types_2 = require(\"../types\");\nvar max = Math.max, min = Math.min;\n/**\n * This layer displays Labels and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar LabelLayer = /** @class */ (function (_super) {\n    __extends(LabelLayer, _super);\n    function LabelLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    LabelLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given label\n            boundsAccessor: function (label) {\n                var anchor = [label.anchor.x || 0, label.anchor.y || 0];\n                var topLeft = [\n                    label.x - anchor[0],\n                    label.y - anchor[1],\n                ];\n                return new primitives_1.Bounds({\n                    height: label.height,\n                    width: label.width,\n                    x: topLeft[0],\n                    y: topLeft[1],\n                });\n            },\n            // Provide a precise hit test for the circle\n            hitTest: function (label, point, view) {\n                // The bounds of the label is in world space, but it does not account for the scale mode of the label.\n                // Here, we will apply the scale mode testing to the label\n                var maxScale = max.apply(void 0, view.camera.scale);\n                var minScale = min.apply(void 0, view.camera.scale);\n                // If we scale always then the label stays within it's initial world bounds at all times\n                if (label.scaling === types_2.ScaleType.ALWAYS) {\n                    return true;\n                }\n                // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n                // Label the same size. If the camera zooms out then the bounds === the world bounds.\n                else if (label.scaling === types_2.ScaleType.BOUND_MAX) {\n                    // We are zooming out. the bounds will stay within the world bounds\n                    if (minScale <= 1 && maxScale <= 1) {\n                        return true;\n                    }\n                    // We are zooming in. The bounds will shrink to keep the label at max font size\n                    else {\n                        var anchor = [label.anchor.x || 0, label.anchor.y || 0];\n                        // The location is within the world, but we reverse project the anchor spread\n                        var topLeft = view.worldToScreen({\n                            x: label.x - (anchor[0] / view.camera.scale[0]),\n                            y: label.y - (anchor[1] / view.camera.scale[1]),\n                        });\n                        var screenPoint = view.worldToScreen(point);\n                        // Reverse project the size and we should be within the distorted world coordinates\n                        return new primitives_1.Bounds({\n                            height: label.height,\n                            width: label.width,\n                            x: topLeft.x,\n                            y: topLeft.y,\n                        }).containsPoint(screenPoint);\n                    }\n                }\n                // If we never allow the label to scale, then the bounds will grow and shrink to counter the effects\n                // Of the camera zoom\n                else if (label.scaling === types_2.ScaleType.NEVER) {\n                    var anchor = [label.anchor.x || 0, label.anchor.y || 0];\n                    // The location is within the world, but we reverse project the anchor spread\n                    var topLeft = view.worldToScreen({\n                        x: label.x - (anchor[0] / view.camera.scale[0]),\n                        y: label.y - (anchor[1] / view.camera.scale[1]),\n                    });\n                    var screenPoint = view.worldToScreen(point);\n                    // Reverse project the size and we should be within the distorted world coordinates\n                    return new primitives_1.Bounds({\n                        height: label.height,\n                        width: label.width,\n                        x: topLeft.x,\n                        y: topLeft.y,\n                    }).containsPoint(screenPoint);\n                }\n                return true;\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    LabelLayer.prototype.initShader = function () {\n        var _this = this;\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: 0,\n            1: 0,\n            2: 0,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./label-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'location',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'anchor',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.anchor.x || 0, o.anchor.y || 0]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'size',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.width, o.height]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'scaling',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scaling]; },\n                },\n                {\n                    atlas: {\n                        key: this.props.atlas || '',\n                        name: 'labelAtlas',\n                    },\n                    block: 2,\n                    name: 'texture',\n                    update: function (o) { return _this.resource.request(_this, o, o.resource); },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'color',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.color; },\n                },\n                {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'scale',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scale]; },\n                },\n                {\n                    block: 4,\n                    blockIndex: types_1.InstanceBlockIndex.TWO,\n                    name: 'maxScale',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.maxScale]; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (u) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./label-layer.vs'),\n        };\n    };\n    LabelLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    LabelLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return LabelLayer;\n}(layer_1.Layer));\nexports.LabelLayer = LabelLayer;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar canvas;\nvar ImageRasterizer = /** @class */ (function () {\n    function ImageRasterizer() {\n    }\n    /**\n     * This loops until our canvas context is available\n     */\n    ImageRasterizer.awaitContext = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!canvas) return [3 /*break*/, 2];\n                        this.getContext();\n                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 0];\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Attempts to populate the 'canvas' context for rendering images offscreen.\n     */\n    ImageRasterizer.getContext = function () {\n        if (!canvas) {\n            canvas = document.createElement('canvas').getContext('2d');\n        }\n        return canvas;\n    };\n    /**\n     * This renders our image to a sizeable canvas where we loop over the pixel data to determine\n     * the bounds of the image.\n     *\n     * @param {boolean} calculateWorld This is used within the method. It switches from calculating\n     *                                 the size to be rendered to the texture to the size the image\n     *                                 should be within world space.\n     * @param {number} sampleScale     INTERNAL: Do not use this parameter manually.\n     */\n    ImageRasterizer.calculateImageSize = function (resource, sampleScale) {\n        /** Get the image properties for rasterizing */\n        var image = resource.image.element;\n        if (!image) {\n            console.warn('Image does not exist! Please ensure the resource contains a valid image.');\n            return;\n        }\n        if (!canvas) {\n            console.warn('The Image rasterizer was unable to establish a valid canvas context. Please ensure the system supports contexts and ensure the document is ready first.');\n            return;\n        }\n        if (image.width === 0 || image.height === 0) {\n            console.warn('Images provided shoud have valid dimensions! Please ensure the image is loaded first.');\n            return;\n        }\n        // Just make sure th canvas is available\n        canvas.canvas.width = 100;\n        canvas.canvas.height = 100;\n        // Render the image into our canvas merely to ensure the image can be rendered\n        // This action often 'warms up' images such as images that have a data URL instead of a path\n        canvas.drawImage(image, 0, 0);\n        // Make sure the rasterization object is initialized\n        resource.rasterization = resource.rasterization || {\n            texture: { height: 0, width: 0 },\n            world: { height: 0, width: 0 },\n        };\n        // Update the calculated texture size.\n        resource.rasterization.texture = {\n            height: image.height * resource.sampleScale,\n            width: image.width * resource.sampleScale,\n        };\n        resource.rasterization.world = {\n            height: image.height,\n            width: image.width,\n        };\n        resource.rasterization.image = image;\n    };\n    /**\n     * Performs the rendering of the image\n     */\n    ImageRasterizer.render = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // Make sure our canvas object is ready for rendering\n                    return [4 /*yield*/, this.awaitContext()];\n                    case 1:\n                        // Make sure our canvas object is ready for rendering\n                        _a.sent();\n                        // Calculate all of the image metrics and ensure the image can be drawn\n                        this.calculateImageSize(resource, resource.sampleScale);\n                        return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    /**\n     * Performs the rendering of the image\n     */\n    ImageRasterizer.renderSync = function (resource) {\n        // Ensure our offscreen canvas is prepped\n        this.getContext();\n        if (!canvas) {\n            console.warn('Can not render a image synchronously without the canvas context being ready.');\n            return resource;\n        }\n        // Calculate all of the image metrics and generate a canvas on the image that can\n        // Be rendered to the canvas.\n        this.calculateImageSize(resource, resource.sampleScale);\n        return resource;\n    };\n    return ImageRasterizer;\n}());\nexports.ImageRasterizer = ImageRasterizer;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\nvar atlas_1 = require(\"./atlas\");\nvar color_atlas_resource_1 = require(\"./color-atlas-resource\");\nvar color_rasterizer_1 = require(\"./color-rasterizer\");\nvar image_atlas_resource_1 = require(\"./image-atlas-resource\");\nvar label_atlas_resource_1 = require(\"./label-atlas-resource\");\nvar label_rasterizer_1 = require(\"./label-rasterizer\");\nvar sub_texture_1 = require(\"./sub-texture\");\nvar debug = require('debug')('webgl-surface:Atlas');\nvar ZERO_IMAGE = {\n    aspectRatio: 0,\n    atlasBL: { x: 0, y: 0 },\n    atlasBR: { x: 0, y: 0 },\n    atlasReferenceID: '',\n    atlasTexture: null,\n    atlasTL: { x: 0, y: 0 },\n    atlasTR: { x: 0, y: 0 },\n    heightOnAtlas: 0,\n    isValid: false,\n    pixelHeight: 0,\n    pixelWidth: 0,\n    widthOnAtlas: 0,\n};\n/**\n * Determines if a SubTexture is a valid SubTexture for rendering\n */\nfunction isValidImage(image) {\n    var isValid = false;\n    if (image && image.isValid) {\n        if (image.pixelWidth && image.pixelHeight) {\n            isValid = true;\n        }\n    }\n    return isValid;\n}\n/**\n * Defines a manager of atlas', which includes generating the atlas and producing\n * textures defining those pieces of atlas.\n */\nvar AtlasManager = /** @class */ (function () {\n    function AtlasManager() {\n        /** Stores all of the generated atlas' in a lookup by name */\n        this.allAtlas = new Map();\n    }\n    /**\n     * Atlas' must be created from scratch to update them. In order to properly\n     * update an existing one, you must destroy it then recreate it again.\n     * This is from not knowing how to update a texture via three js.\n     *\n     * @param resources The images with their image path set to be loaded into the atlas.\n     *               Images that keep an atlas ID of null indicates the image did not load\n     *               correctly\n     *\n     * @return {Texture} The Threejs texture that is created as our atlas. The images injected\n     *                   into the texture will be populated with the atlas'\n     */\n    AtlasManager.prototype.createAtlas = function (options, resources) {\n        return __awaiter(this, void 0, void 0, function () {\n            var atlas;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        atlas = new atlas_1.Atlas(options);\n                        // Set the manager to the atlas\n                        atlas.setManager(this);\n                        // Make the atlas identifiable by it's name\n                        this.allAtlas.set(atlas.id, atlas);\n                        if (!resources) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.updateAtlas(atlas.id, resources)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        debug('Atlas Created-> %o', atlas);\n                        return [2 /*return*/, atlas];\n                }\n            });\n        });\n    };\n    /**\n     * Free ALL resources under this manager\n     */\n    AtlasManager.prototype.destroy = function () {\n        this.allAtlas.forEach(function (value) { return value.destroy(); });\n    };\n    /**\n     * Disposes of the resources the atlas held and makes the atlas invalid for use\n     *\n     * @param atlasName\n     */\n    AtlasManager.prototype.destroyAtlas = function (atlasName) {\n        var atlas = this.allAtlas.get(atlasName);\n        if (atlas) {\n            atlas.destroy();\n        }\n    };\n    AtlasManager.prototype.setDefaultImage = function (image, atlasName) {\n        image = Object.assign(image, ZERO_IMAGE, { atlasReferenceID: atlasName });\n        return image;\n    };\n    /**\n     * This loads, packs, and draws the indicated image into the specified canvas\n     * using the metrics that exists for the specified atlas.\n     *\n     * @param resource The image who should have it's image path loaded\n     * @param atlasName The name of the atlas to make the packing work\n     * @param canvas The canvas we will be drawing into to generate the complete image\n     *\n     * @return {Promise<boolean>} Promise that resolves to if the image successfully was drawn or not\n     */\n    AtlasManager.prototype.draw = function (atlas, resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var canvas, atlasName, loadedImage, rasterization, texture, rect, dimensions, packing, insertedNode, ux, uy, uw, uh, onePixelX, atlasDimensions, bottom, top_1, left, right;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        canvas = atlas.texture.image;\n                        atlasName = atlas.id;\n                        // Register the resource with the atlas\n                        if (!atlas.registerResource(resource)) {\n                            console.warn('Could not draw resource to the atlas as the resource was not properly registered to the atlas first', atlas, resource);\n                            return [2 /*return*/, Promise.resolve(false)];\n                        }\n                        return [4 /*yield*/, this.loadImage(resource)];\n                    case 1:\n                        loadedImage = _a.sent();\n                        // Only a non-null image means the image loaded correctly\n                        if (loadedImage && isValidImage(resource.texture)) {\n                            rasterization = resource.rasterization;\n                            texture = resource.texture;\n                            rect = new bounds_1.Bounds({ left: 0, right: rasterization.texture.width, top: 0, bottom: rasterization.texture.height });\n                            dimensions = {\n                                first: texture,\n                                second: rect,\n                            };\n                            // Auto add a buffer in\n                            dimensions.second.width += 1;\n                            dimensions.second.height += 1;\n                            packing = atlas.packing;\n                            insertedNode = packing.insert(dimensions);\n                            // If the result was NULL we did not successfully insert the image into any map\n                            if (insertedNode) {\n                                debug('Atlas location determined: %o', insertedNode);\n                                // Apply the image to the node\n                                insertedNode.nodeImage = texture;\n                                ux = insertedNode.nodeDimensions.x / atlas.width;\n                                uy = insertedNode.nodeDimensions.y / atlas.height;\n                                uw = insertedNode.nodeDimensions.width / atlas.width;\n                                uh = insertedNode.nodeDimensions.height / atlas.height;\n                                onePixelX = 1 / atlas.width;\n                                atlasDimensions = new bounds_1.Bounds({\n                                    bottom: 1.0 - uy,\n                                    left: ux,\n                                    right: ux + uw,\n                                    top: 1.0 - (uy + uh),\n                                });\n                                bottom = atlasDimensions.bottom;\n                                top_1 = atlasDimensions.y;\n                                left = atlasDimensions.x;\n                                right = atlasDimensions.x + atlasDimensions.width - onePixelX;\n                                texture.atlasReferenceID = atlasName;\n                                texture.atlasTL = { x: left, y: top_1 };\n                                texture.atlasBR = { x: right, y: bottom };\n                                texture.atlasBL = { x: left, y: bottom };\n                                texture.atlasTR = { x: right, y: top_1 };\n                                texture.widthOnAtlas = Math.abs(texture.atlasTR.x - texture.atlasTL.x);\n                                texture.heightOnAtlas = Math.abs(texture.atlasTR.y - texture.atlasBR.y);\n                                texture.pixelWidth = rasterization.texture.width;\n                                texture.pixelHeight = rasterization.texture.height;\n                                // Now draw the image to the indicated canvas\n                                canvas.getContext('2d').drawImage(loadedImage, insertedNode.nodeDimensions.x, insertedNode.nodeDimensions.y);\n                                // We have finished inserting\n                                return [2 /*return*/, true];\n                            }\n                            else {\n                                // Log an error\n                                console.error(\"Could not fit resource into atlas\", resource);\n                                resource.texture = this.setDefaultImage(resource.texture, atlasName);\n                                return [2 /*return*/, false];\n                            }\n                        }\n                        else {\n                            // Log an error and load a default sub texture\n                            console.error(\"Could not load resource:\", resource);\n                            resource.texture = this.setDefaultImage(resource.texture, atlasName);\n                            return [2 /*return*/, false];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Retrieves the threejs texture for the atlas\n     *\n     * @param atlasName The identifier of the atlas\n     */\n    AtlasManager.prototype.getAtlasTexture = function (atlasName) {\n        return this.allAtlas.get(atlasName);\n    };\n    /**\n     * This takes in any atlas resource and rasterizes it.\n     *\n     * @param {SubTexture} resource This is any atlas resource which will have it's image rasterized\n     *\n     * @return {Promise<HTMLImageElement>} A promise to resolve to the loaded image\n     *                                     or null if there was an error\n     */\n    AtlasManager.prototype.loadImage = function (resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var imageSrc, subTexture, image_1, image, image;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        imageSrc = '';\n                        subTexture = resource.texture || new sub_texture_1.SubTexture();\n                        resource.texture = subTexture;\n                        if (!(resource instanceof image_atlas_resource_1.ImageAtlasResource)) return [3 /*break*/, 4];\n                        if (!resource.image.element) return [3 /*break*/, 2];\n                        if (resource.image.element.width !== 0 && resource.image.element.height !== 0) {\n                            image_1 = resource.image.element;\n                            subTexture.pixelWidth = image_1.width;\n                            subTexture.pixelHeight = image_1.height;\n                            subTexture.aspectRatio = image_1.width / image_1.height;\n                            return [2 /*return*/, image_1];\n                        }\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                var image = resource.image.element;\n                                if (image) {\n                                    image.onload = function () {\n                                        subTexture.pixelWidth = image.width;\n                                        subTexture.pixelHeight = image.height;\n                                        subTexture.aspectRatio = image.width / image.height;\n                                        resolve(image);\n                                    };\n                                    image.onerror = function () {\n                                        resolve(null);\n                                    };\n                                }\n                                else {\n                                    resolve(null);\n                                }\n                            })];\n                    case 1:\n                        image = _a.sent();\n                        return [2 /*return*/, image];\n                    case 2:\n                        if (resource.image.path) {\n                            imageSrc = resource.image.path;\n                        }\n                        _a.label = 3;\n                    case 3: return [3 /*break*/, 10];\n                    case 4:\n                        if (!(resource instanceof label_atlas_resource_1.LabelAtlasResource)) return [3 /*break*/, 7];\n                        if (!!resource.rasterization.canvas) return [3 /*break*/, 6];\n                        return [4 /*yield*/, label_rasterizer_1.LabelRasterizer.render(resource)];\n                    case 5:\n                        _a.sent();\n                        _a.label = 6;\n                    case 6:\n                        // Make sure the rasterization properly executed\n                        if (resource.rasterization.canvas) {\n                            debug('Rasterized label %o', resource.rasterization);\n                            imageSrc = resource.rasterization.canvas.toDataURL('image/png');\n                        }\n                        else {\n                            console.warn('The label was not able to be rasterized');\n                        }\n                        return [3 /*break*/, 10];\n                    case 7:\n                        if (!(resource instanceof color_atlas_resource_1.ColorAtlasResource)) return [3 /*break*/, 10];\n                        if (!!resource.rasterization.canvas) return [3 /*break*/, 9];\n                        return [4 /*yield*/, color_rasterizer_1.ColorRasterizer.render(resource)];\n                    case 8:\n                        _a.sent();\n                        _a.label = 9;\n                    case 9:\n                        // Make sure the rasterization properly executed\n                        if (resource.rasterization.canvas) {\n                            debug('Rasterized color %o', resource.rasterization);\n                            imageSrc = resource.rasterization.canvas.toDataURL('image/png');\n                        }\n                        else {\n                            console.warn('The color was not able to be rasterized');\n                        }\n                        _a.label = 10;\n                    case 10:\n                        if (!imageSrc) return [3 /*break*/, 12];\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                var image = new Image();\n                                image.onload = function () {\n                                    subTexture.pixelWidth = image.width;\n                                    subTexture.pixelHeight = image.height;\n                                    subTexture.aspectRatio = image.width / image.height;\n                                    resolve(image);\n                                };\n                                image.onerror = function () {\n                                    resolve(null);\n                                };\n                                image.src = imageSrc;\n                            })];\n                    case 11:\n                        image = _a.sent();\n                        return [2 /*return*/, image];\n                    case 12: return [2 /*return*/, null];\n                }\n            });\n        });\n    };\n    /**\n     * This targets an existing atlas and attempts to update it with the provided atlas resources.\n     *\n     * @param atlasName\n     * @param resources\n     */\n    AtlasManager.prototype.updateAtlas = function (atlasName, resources) {\n        return __awaiter(this, void 0, void 0, function () {\n            var atlas, _i, resources_1, resource;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        atlas = this.allAtlas.get(atlasName);\n                        if (!atlas) return [3 /*break*/, 5];\n                        _i = 0, resources_1 = resources;\n                        _a.label = 1;\n                    case 1:\n                        if (!(_i < resources_1.length)) return [3 /*break*/, 4];\n                        resource = resources_1[_i];\n                        return [4 /*yield*/, this.draw(atlas, resource)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        // Perform the best method for updating the underlying texture of the atlas to the latest changes\n                        atlas.updateTexture();\n                        return [3 /*break*/, 6];\n                    case 5:\n                        console.warn('Can not update non-existing atlas:', atlasName, 'These resources will not be loaded:', resources);\n                        _a.label = 6;\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return AtlasManager;\n}());\nexports.AtlasManager = AtlasManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\n/**\n * This is used specifically by the atlas manager to aid in packing\n * in textures within an area. This will guarantee boundaries of textures are\n * not violated and provide proper feedback for where to draw a given image\n */\nvar PackNode = /** @class */ (function () {\n    function PackNode(x, y, width, height) {\n        this.child = [null, null];\n        this.isLeaf = true;\n        this.nodeImage = null;\n        this.nodeDimensions = new bounds_1.Bounds({\n            height: height,\n            width: width,\n            x: x,\n            y: y,\n        });\n    }\n    /**\n     * Deletes all of the sub nodes in this Mapping, thus clearing up memory usage\n     */\n    PackNode.prototype.destroy = function () {\n        var child0 = this.child[0];\n        var child1 = this.child[1];\n        this.nodeImage = null;\n        if (child0) {\n            child0.destroy();\n        }\n        if (child1) {\n            child1.destroy();\n        }\n        this.child[0] = null;\n        this.child[1] = null;\n    };\n    /**\n     * Indicates if there is a child\n     */\n    PackNode.prototype.hasChild = function () {\n        var child0 = this.child[0];\n        var child1 = this.child[1];\n        if (child0 && !child0.nodeImage) {\n            return !child0.isLeaf;\n        }\n        if (child1 && !child1.nodeImage) {\n            return !child1.isLeaf;\n        }\n        return false;\n    };\n    /**\n     * Inserts images into our mapping, fitting them appropriately\n     */\n    PackNode.prototype.insert = function (image) {\n        var child0 = this.child[0];\n        var child1 = this.child[1];\n        if (!this.isLeaf && child0 && child1) {\n            // Try inserting into first child\n            var newNode = child0.insert(image);\n            if (newNode !== null) {\n                return newNode;\n            }\n            // No room in first so insert into second\n            return child1.insert(image);\n        }\n        else {\n            // If there's already an image here, return\n            if (this.nodeImage) {\n                return null;\n            }\n            // Check the fit status of the image in this nodes rectangle space\n            var fitFlag = this.nodeDimensions.fits(image.second);\n            // If we're too small, return null indicating can not fit\n            if (fitFlag === 0) {\n                return null;\n            }\n            // If we're just right, accept\n            if (fitFlag === 1) {\n                return this;\n            }\n            // Otherwise, gotta split this node and create some leaves\n            this.isLeaf = false;\n            // Get the image width\n            var imgWidth = image.second.width;\n            var imgHeight = image.second.height;\n            // Decide which way to split\n            var dWidth = this.nodeDimensions.width - imgWidth;\n            var dHeight = this.nodeDimensions.height - image.second.height;\n            if (dWidth > dHeight) {\n                child0 = this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, imgWidth, this.nodeDimensions.height);\n                child1 = this.child[1] = new PackNode(this.nodeDimensions.x + imgWidth, this.nodeDimensions.y, dWidth, this.nodeDimensions.height);\n            }\n            else {\n                child0 = this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, this.nodeDimensions.width, imgHeight);\n                child1 = this.child[1] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y + imgHeight, this.nodeDimensions.width, dHeight);\n            }\n        }\n        // Insert into first child we created\n        return child0.insert(image);\n    };\n    /**\n     * Removes the image from the mapping and tries to open up as much space as possible.\n     *\n     * @param {AtlasTexture} image The image to insert into the\n     */\n    PackNode.prototype.remove = function (image) {\n        var child0 = this.child[0];\n        var child1 = this.child[1];\n        if (child1 && child0 && !this.isLeaf) {\n            // Try removing from first child\n            var removed = child0.remove(image);\n            if (removed) {\n                return true;\n            }\n            // Try remove from second\n            removed = child1.remove(image);\n            if (!child0.hasChild()) {\n                if (!child1.hasChild()) {\n                    this.child[0] = null;\n                    this.child[1] = null;\n                }\n            }\n            return removed;\n        }\n        else {\n            if (this.nodeImage === image) {\n                this.nodeImage = null;\n                delete image.atlasReferenceID;\n                image.pixelWidth = 0;\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n    };\n    return PackNode;\n}());\nexports.PackNode = PackNode;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar texture_1 = require(\"../../surface/texture\");\nvar instance_1 = require(\"../../util/instance\");\nvar types_1 = require(\"../types\");\nvar max = Math.max;\n/**\n * This is a lookup to find existing rasterizations for a particularly created image so that every\n * new image does not have to go through the rasterization process.\n */\nvar rasterizationLookUp = new Map();\n/**\n * This is a lookup to quickly find the proper calculation for setting the correct anchor\n * position based on the anchor type.\n */\nvar anchorCalculator = (_a = {},\n    _a[types_1.AnchorType.TopLeft] = function (anchor, image) {\n        anchor.x = -anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopMiddle] = function (anchor, image) {\n        anchor.x = image.width / 2.0;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.TopRight] = function (anchor, image) {\n        anchor.x = image.width + anchor.padding;\n        anchor.y = -anchor.padding;\n    },\n    _a[types_1.AnchorType.MiddleLeft] = function (anchor, image) {\n        anchor.x = -anchor.padding;\n        anchor.y = image.height / 2;\n    },\n    _a[types_1.AnchorType.Middle] = function (anchor, image) {\n        anchor.x = image.width / 2.0;\n        anchor.y = image.height / 2.0;\n    },\n    _a[types_1.AnchorType.MiddleRight] = function (anchor, image) {\n        anchor.x = image.width + anchor.padding;\n        anchor.y = image.height / 2.0;\n    },\n    _a[types_1.AnchorType.BottomLeft] = function (anchor, image) {\n        anchor.x = -anchor.padding;\n        anchor.y = image.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomMiddle] = function (anchor, image) {\n        anchor.x = image.width / 2.0;\n        anchor.y = image.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.BottomRight] = function (anchor, image) {\n        anchor.x = image.width + anchor.padding;\n        anchor.y = image.height + anchor.padding;\n    },\n    _a[types_1.AnchorType.Custom] = function (anchor, image) {\n        anchor.x = anchor.x || 0;\n        anchor.y = anchor.y || 0;\n    },\n    _a);\n/**\n * This generates a new image instance which will render a single line of text for a given layer.\n * There are restrictions surrounding images due to texture sizes and rendering limitations.\n *\n * Currently, we only support rendering a image via canvas, then rendering it to an Atlas texture\n * which is used to render to cards in the world for rendering. This is highly performant, but means:\n *\n * - Images should only be so long.\n * - Multiline is not supported inherently\n * - Once a image is constructed, only SOME properties can be altered thereafter\n *\n * A image that is constructed can only have some properties set upon creating the image and are locked\n * thereafter. The only way to modify them would be to destroy the image, then construct a new image\n * with the modifications. This has to deal with performance regarding rasterizing the image\n */\nvar ImageInstance = /** @class */ (function (_super) {\n    __extends(ImageInstance, _super);\n    function ImageInstance(options) {\n        var _this = _super.call(this, options) || this;\n        /** This is the rendered color of the image */\n        _this.tint = [0, 0, 0, 1];\n        /** Depth sorting of the image (or the z value of the lable) */\n        _this.depth = 0;\n        /** The height of the image as it is to be rendered in world space */\n        _this.height = 1;\n        /** Sets the way the image scales with the world */\n        _this.scaling = types_1.ScaleType.BOUND_MAX;\n        /** The width of the image as it is to be rendered in world space */\n        _this.width = 1;\n        /** The x coordinate where the image will be anchored to in world space */\n        _this.x = 0;\n        /** The y coordinate where the image will be anchored to in world space */\n        _this.y = 0;\n        // The following properties are properties that are locked in after creating this image\n        // As the properties are completely locked into how the image was rasterized and can not\n        // Nor should not be easily adjusted for performance concerns\n        _this._sourceWidth = 0;\n        _this._sourceHeight = 0;\n        _this._isDestroyed = false;\n        // These are properties that can be altered, but have side effects from being changed\n        /** This is the anchor location on the  */\n        _this._anchor = {\n            padding: 0,\n            type: types_1.AnchorType.TopLeft,\n            x: 0,\n            y: 0,\n        };\n        _this.depth = options.depth || _this.depth;\n        _this.tint = options.tint || _this.tint;\n        _this.scaling = options.scaling || _this.scaling;\n        _this.x = options.x || _this.x;\n        _this.y = options.y || _this.y;\n        // This is the image that is to be rendered\n        _this._element = options.element;\n        // Look for other same texts that have been rasterized\n        var rasterization = rasterizationLookUp.get(_this._path || _this._element);\n        // If a rasterization exists, we must increment the use reference\n        if (rasterization) {\n            rasterization.references++;\n        }\n        // If we have not found an existing rasterization\n        if (!rasterization) {\n            rasterization = {\n                references: 1,\n                resource: new texture_1.ImageAtlasResource(_this),\n            };\n            // Ensure the sample scale is set. Defaults to 1.0\n            rasterization.resource.sampleScale = rasterization.resource.sampleScale || 1.0;\n            // Rasterize the resource generated for this image. We need it immediately rasterized so\n            // That we can utilize the dimensions for calculations.\n            texture_1.ImageRasterizer.renderSync(rasterization.resource);\n            // Now that we have an official rasterization for this image, we shall store it\n            // For others to look up\n            rasterizationLookUp.set(_this._path || _this._element, rasterization);\n        }\n        _this._rasterization = rasterization;\n        _this._sourceWidth = rasterization.resource.rasterization.world.width;\n        _this._sourceHeight = rasterization.resource.rasterization.world.height;\n        _this.width = options.width || _this._sourceWidth || 1;\n        _this.height = options.height || _this._sourceHeight || 1;\n        // Make sure the anchor is set to the appropriate location\n        options.anchor && _this.setAnchor(options.anchor);\n        return _this;\n    }\n    /**\n     * TODO: We should be implementing the destroy on ImageInstances to clean this up\n     * Frees up module scoped data.\n     */\n    ImageInstance.destroy = function () {\n        rasterizationLookUp.clear();\n    };\n    Object.defineProperty(ImageInstance.prototype, \"size\", {\n        get: function () { return max(this.width, this.height); },\n        set: function (value) {\n            var aspect = this.width / this.height;\n            this.width = value * aspect;\n            this.height = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"element\", {\n        // The following are the getters for the locked in parameters of the image so we can read\n        // The properties but not set any of them.\n        /** This is the provided element this image will be rendering */\n        get: function () { return this._element; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"isDestroyed\", {\n        /** This flag indicates if this image is valid anymore */\n        get: function () { return this._isDestroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"path\", {\n        /** This is the path to the image's resource if it's available */\n        get: function () { return this._path; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"resource\", {\n        /** This gets the atlas resource that is uniquely idenfied for this image */\n        get: function () { return this._rasterization.resource; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"sourceWidth\", {\n        /**\n         * This is the width in world space of the image. If there is no camera distortion,\n         * this would be the width of the image in pixels on the screen.\n         */\n        get: function () {\n            return this._sourceWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageInstance.prototype, \"sourceHeight\", {\n        /**\n         * This is the height in world space of the image. If there is no camera distortion,\n         * this would be the height of the image in pixels on the screen.\n         */\n        get: function () {\n            return this._sourceHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Images are a sort of unique case where the use of a image should be destroyed as rasterization\n     * resources are in a way kept alive through reference counting.\n     */\n    ImageInstance.prototype.destroy = function () {\n        if (!this._isDestroyed) {\n            this._isDestroyed = true;\n            this._rasterization.references--;\n            // If all references are cleared, then the rasterization needs to be eradicated\n            if (this._rasterization.references === 0) {\n                this._rasterization.resource;\n                console.warn('The destroy method still needs completion');\n            }\n        }\n    };\n    Object.defineProperty(ImageInstance.prototype, \"anchor\", {\n        get: function () {\n            return this._anchor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This applies a new anchor to this image and properly determines it's anchor position on the image\n     */\n    ImageInstance.prototype.setAnchor = function (anchor) {\n        var newAnchor = {\n            padding: anchor.padding || 0,\n            type: anchor.type,\n            x: anchor.x || 0,\n            y: anchor.y || 0,\n        };\n        // Calculate the new anchors position values\n        anchorCalculator[newAnchor.type](newAnchor, this);\n        // Apply the anchor\n        this._anchor = newAnchor;\n    };\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"tint\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"depth\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"height\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"scaling\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"width\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"x\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"y\", void 0);\n    __decorate([\n        mobx_1.observable\n    ], ImageInstance.prototype, \"_anchor\", void 0);\n    __decorate([\n        mobx_1.computed\n    ], ImageInstance.prototype, \"anchor\", null);\n    return ImageInstance;\n}(instance_1.Instance));\nexports.ImageInstance = ImageInstance;\nvar _a;\n","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  ${attributes}\\n\\n  // Figure out the size of the image as it'd show on the screen\\n  vec3 screenSize = cameraSpaceSize(vec3(size, 1.0));\\n  // Do the test for when the image is larger on the screen than the font size\\n  bool largerOnScreen = screenSize.y > size.y;\\n\\n  // Determines if a scale mode should be used or not for the vertex\\n  float useScaleMode = float(\\n    (\\n      scaling == 3.0 ||                  // NEVER mode - keep the image the same size always\\n      (largerOnScreen && scaling == 2.0) // BOUND_MAX mode - only if we're larger than the font size do we scale down\\n    ) &&\\n    scaling != 1.0                       // ALWAYS mode - the image stays completely in world space allowing it to scale freely\\n  );\\n  // If zooms are unequal, assume one is filtered to be 1.0\\n  float unequalZooms = float(cameraScale.x != cameraScale.y);\\n\\n  // Destructure threejs's bug with the position requirement\\n  float normal = position.x;\\n  float side = position.y;\\n\\n  // Get the location of the anchor in world space\\n  vec2 worldAnchor = location + anchor;\\n\\n  // Get the tex coord from our inject texture info\\n  texCoord = texture.xy + ((texture.zw - texture.xy) * vec2(side, float(normal == -1.0)));\\n  // Apply the image's tint as a tint to the image\\n  vertexColor = tint;\\n\\n  // Correct aspect ratio.\\n  size = mix(\\n    size,\\n    (size * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 adjustedAnchor = mix(\\n    anchor,\\n    (anchor * cameraScale.yx),\\n    unequalZooms\\n  );\\n\\n  vec2 vertex = vec2(side, float(normal == 1.0)) * size + location - adjustedAnchor;\\n\\n  // See how scaled the size on screen will be from the actual height of the image\\n  float imageScreenScale = mix(\\n    screenSize.y / size.y,\\n    screenSize.x / size.x,\\n    float((cameraScale.x < 1.0) || (cameraScale.x > 1.0))\\n  );\\n\\n  // If our screen rendering is larger than the size the image is supposed to be, then we automagically\\n  // scale down our image to stay the correct size, centered on the anchor point\\n  vec2 anchorToVertex = vertex - location;\\n\\n  // We now choose between keeping the same image size or keeping it in world space\\n  vertex = mix(\\n    // This option keeps the image size in world space\\n    vertex,\\n    // This option counters the scaling of the image on the screen keeping it a static size\\n    (anchorToVertex / imageScreenScale) + location,\\n    // This is the flag determining if a scale mode should be applied to the vertex\\n    useScaleMode\\n  );\\n\\n  gl_Position = clipSpace(vec3(vertex, depth));\\n}\\n\"","module.exports = \"precision highp float;\\n\\nvarying vec4 vertexColor;\\nvarying vec2 texCoord;\\n\\nvoid main() {\\n  gl_FragColor = texture2D(imageAtlas, texCoord) * vertexColor;\\n  gl_FragColor *= gl_FragColor.a;\\n}\\n\"","module.exports = \"void main() {\\n  gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n}\"","module.exports = \"\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\n/**\n * This manages mouse gestures broadcast to the layer and handles appropriate actions such as determining\n * how to make the interaction translate to picking events for the layer's instances.\n *\n * This class, in summary, takes in the gestures to the view and converts them to gestures to the instances.\n */\nvar LayerInteractionHandler = /** @class */ (function () {\n    function LayerInteractionHandler(layer) {\n        /** This tracks the elements that have the mouse currently over them */\n        this.isMouseOver = new Map();\n        /** This tracks the elements the mouse was down on */\n        this.isMouseDown = new Map();\n        this.layer = layer;\n    }\n    /**\n     * Handles mouse down gestures for a layer within a view\n     */\n    LayerInteractionHandler.prototype.handleMouseOver = function (view, mouse) {\n        // This is the mouse over for the view itself. We should probably just let the mouse over events handle the interactions\n        // With the instances\n    };\n    /**\n     * Handles mouse down gestures for a layer within a view\n     */\n    LayerInteractionHandler.prototype.handleMouseDown = function (view, mouse, button) {\n        var _this = this;\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type === types_1.PickType.ALL) {\n            var onMouseDown = this.layer.props.onMouseDown;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseDown) {\n                var world_1 = view.viewToWorld(mouse);\n                var hitTest_1 = this.layer.picking.hitTest;\n                var query_1 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                var instances = query_1(world_1).filter(function (o) { return hitTest_1(o, world_1, view); });\n                var info = {\n                    button: button,\n                    instances: instances,\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: function (check) { return query_1(check).filter(function (o) { return hitTest_1(o, world_1, view); }); },\n                    screen: [mouse.x, mouse.y],\n                    world: [world_1.x, world_1.y],\n                };\n                onMouseDown(info);\n                // We track all the elements the mouse is currently down on\n                this.isMouseDown.clear();\n                instances.forEach(function (o) { return _this.isMouseDown.set(o, true); });\n            }\n        }\n    };\n    /**\n     * Handles mouse out events for a layer within the view\n     */\n    LayerInteractionHandler.prototype.handleMouseOut = function (view, mouse) {\n        // This will fire an instance mouse out for any over instances in the queue since we left the view\n        // Thus no instances shall be considered 'over'\n        if (this.layer.picking && this.layer.picking.type === types_1.PickType.ALL) {\n            var onMouseOut = this.layer.props.onMouseOut;\n            if (onMouseOut) {\n                var world_2 = view.viewToWorld(mouse);\n                var query_2 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                var hitTest_2 = this.layer.picking.hitTest;\n                var info = {\n                    instances: Array.from(this.isMouseOver.keys()),\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: function (check) { return query_2(check).filter(function (o) { return hitTest_2(o, world_2, view); }); },\n                    screen: [mouse.x, mouse.y],\n                    world: [world_2.x, world_2.y],\n                };\n                onMouseOut(info);\n            }\n        }\n        // We clear as no instances are over anymore\n        this.isMouseOver.clear();\n        // We also clear all down elements as the mouse is no longer in proper context for the instances\n        // But since the mouse was never actually released, we do not fire an up\n        this.isMouseDown.clear();\n    };\n    /**\n     * Handles mouse up gestures for the layer within the provided view\n     */\n    LayerInteractionHandler.prototype.handleMouseUp = function (view, mouse, button) {\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type === types_1.PickType.ALL) {\n            var onMouseUp = this.layer.props.onMouseUp;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseUp) {\n                var world_3 = view.viewToWorld(mouse);\n                var hitTest_3 = this.layer.picking.hitTest;\n                var query_3 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                var instances = query_3(world_3).filter(function (o) { return hitTest_3(o, world_3, view); });\n                var info = {\n                    button: button,\n                    instances: instances,\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: function (check) { return query_3(check).filter(function (o) { return hitTest_3(o, world_3, view); }); },\n                    screen: [mouse.x, mouse.y],\n                    world: [world_3.x, world_3.y],\n                };\n                onMouseUp(info);\n            }\n        }\n    };\n    /**\n     * Mouse move events on the layer will detect when instances have their item newly over or just moved on\n     */\n    LayerInteractionHandler.prototype.handleMouseMove = function (view, mouse) {\n        var _this = this;\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type === types_1.PickType.ALL) {\n            var _a = this.layer.props, onMouseOver = _a.onMouseOver, onMouseMove = _a.onMouseMove, onMouseOut = _a.onMouseOut;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseOver || onMouseMove || onMouseOut) {\n                var info = void 0;\n                var world_4 = view.viewToWorld(mouse);\n                var hitTest_4 = this.layer.picking.hitTest;\n                var query_4 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                var instances = query_4(world_4).filter(function (o) { return hitTest_4(o, world_4, view); });\n                // Broadcast the picking info for newly over instances to any of the layers listeners if needed\n                if (onMouseOver) {\n                    var notOverInstances = instances.filter(function (o) { return !_this.isMouseOver.get(o); });\n                    info = {\n                        instances: notOverInstances,\n                        layer: this.layer.id,\n                        projection: view,\n                        querySpace: function (check) { return query_4(check).filter(function (o) { return hitTest_4(o, world_4, view); }); },\n                        screen: [mouse.x, mouse.y],\n                        world: [world_4.x, world_4.y],\n                    };\n                    if (notOverInstances.length > 0)\n                        onMouseOver(info);\n                }\n                // Broadcast the the picking info for all instances that the mouse moved on\n                if (onMouseMove) {\n                    // This is the pick info object we will broadcast from the layer\n                    info = {\n                        instances: instances,\n                        layer: this.layer.id,\n                        projection: view,\n                        querySpace: function (check) { return query_4(check).filter(function (o) { return hitTest_4(o, world_4, view); }); },\n                        screen: [mouse.x, mouse.y],\n                        world: [world_4.x, world_4.y],\n                    };\n                    onMouseMove(info);\n                }\n                // We take the hovered instances\n                var isCurrentlyOver_1 = new Map();\n                instances.forEach(function (o) { return isCurrentlyOver_1.set(o, true); });\n                // Broadcast the the picking info for all instances that the mouse moved off of\n                if (onMouseOut) {\n                    var noLongerOver = Array.from(this.isMouseOver.keys()).filter(function (o) { return !isCurrentlyOver_1.get(o); });\n                    // This is the pick info object we will broadcast from the layer\n                    info = {\n                        instances: noLongerOver,\n                        layer: this.layer.id,\n                        projection: view,\n                        querySpace: function (check) { return query_4(check).filter(function (o) { return hitTest_4(o, world_4, view); }); },\n                        screen: [mouse.x, mouse.y],\n                        world: [world_4.x, world_4.y],\n                    };\n                    if (noLongerOver.length > 0)\n                        onMouseOut(info);\n                }\n                // We store the current hovered over items as our over item list for next interaction\n                this.isMouseOver = isCurrentlyOver_1;\n            }\n        }\n    };\n    /**\n     * Handles click gestures on the layer within a view\n     */\n    LayerInteractionHandler.prototype.handleMouseClick = function (view, mouse, button) {\n        // This handles interactions for PickType ALL layers\n        if (this.layer.picking && this.layer.picking.type === types_1.PickType.ALL) {\n            var onMouseClick = this.layer.props.onMouseClick;\n            // If we have a listener for either event we should continue to process the event in more detail\n            if (onMouseClick) {\n                var world_5 = view.viewToWorld(mouse);\n                var hitTest_5 = this.layer.picking.hitTest;\n                var query_5 = this.layer.picking.quadTree.query.bind(this.layer.picking.quadTree);\n                var instances = query_5(world_5).filter(function (o) { return hitTest_5(o, world_5, view); });\n                var info = {\n                    button: button,\n                    instances: instances,\n                    layer: this.layer.id,\n                    projection: view,\n                    querySpace: function (check) { return query_5(check).filter(function (o) { return hitTest_5(o, world_5, view); }); },\n                    screen: [mouse.x, mouse.y],\n                    world: [world_5.x, world_5.y],\n                };\n                onMouseClick(info);\n            }\n        }\n    };\n    /**\n     * Handles drag gestures for the layer within the view\n     */\n    LayerInteractionHandler.prototype.handleMouseDrag = function (view, mouse) {\n        // We probably should not broadcast drag events for the sake of instances. Instance dragging should be handled on\n        // An instance by instance basis rather than coming from the view's gestures\n    };\n    return LayerInteractionHandler;\n}());\nexports.LayerInteractionHandler = LayerInteractionHandler;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\n// This is a mapping of the vector properties as they relate to an array order\nvar VECTOR_ACCESSORS = ['x', 'y', 'z', 'w'];\n/**\n * This class manages the process of taking the diffs of a layer and executing methods on those diffs to perform\n * updates to the uniforms that control those instances.\n */\nvar InstanceDiffManager = /** @class */ (function () {\n    function InstanceDiffManager(layer) {\n        this.layer = layer;\n    }\n    /**\n     * This returns the proper diff processor for handling diffs\n     */\n    InstanceDiffManager.prototype.getDiffProcessor = function () {\n        if (this.layer.picking) {\n            if (this.layer.picking.type === types_1.PickType.ALL) {\n                this.quadPicking = this.layer.picking;\n                return [\n                    this.changeInstanceQuad,\n                    this.addInstanceQuad,\n                    this.removeInstanceQuad,\n                ];\n            }\n        }\n        return [\n            this.changeInstance,\n            this.addInstance,\n            this.removeInstance,\n        ];\n    };\n    /**\n     * This processes add operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.addInstance = function (manager, instance, uniformCluster) {\n        // If the uniform cluster already exists, then we swap over to a change update\n        if (uniformCluster) {\n            manager.changeInstance(manager, instance, uniformCluster);\n        }\n        // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n        else {\n            var uniforms = manager.layer.uniformManager.add(instance);\n            if (uniforms) {\n                instance.active = true;\n                manager.updateInstance(instance, uniforms);\n            }\n        }\n    };\n    /**\n     * This processes add operations from changes in the instancing data and manages the layer's quad tree\n     * with the instance as well.\n     */\n    InstanceDiffManager.prototype.addInstanceQuad = function (manager, instance, uniformCluster) {\n        // If the uniform cluster already exists, then we swap over to a change update\n        if (uniformCluster) {\n            manager.changeInstanceQuad(manager, instance, uniformCluster);\n        }\n        // Otherwise, we DO need to perform an add and we link a Uniform cluster to our instance\n        else {\n            var uniforms = manager.layer.uniformManager.add(instance);\n            if (uniforms) {\n                instance.active = true;\n                manager.updateInstance(instance, uniforms);\n                // Ensure the instance has an updated injection in the quad tree\n                manager.quadPicking.quadTree.remove(instance);\n                manager.quadPicking.quadTree.add(instance);\n            }\n        }\n    };\n    /**\n     * This processes change operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.changeInstance = function (manager, instance, uniformCluster) {\n        // If there is an existing uniform cluster for this instance, then we can update the uniforms\n        if (uniformCluster) {\n            manager.updateInstance(instance, uniformCluster);\n        }\n        // If we don't have existing uniforms, then we must remove the instance\n        else {\n            manager.addInstance(manager, instance, uniformCluster);\n        }\n    };\n    /**\n     * This processes change operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.changeInstanceQuad = function (manager, instance, uniformCluster) {\n        // If there is an existing uniform cluster for this instance, then we can update the uniforms\n        if (uniformCluster) {\n            manager.updateInstance(instance, uniformCluster);\n            // Ensure the instance has an updated injection in the quad tree\n            manager.quadPicking.quadTree.remove(instance);\n            manager.quadPicking.quadTree.add(instance);\n        }\n        // If we don't have existing uniforms, then we must remove the instance\n        else {\n            manager.addInstanceQuad(manager, instance, uniformCluster);\n        }\n    };\n    /**\n     * This processes remove operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.removeInstance = function (manager, instance, uniformCluster) {\n        if (uniformCluster) {\n            // We deactivate the instance so it does not render anymore\n            instance.active = false;\n            // We do one last update on the instance to update to it's deactivated state\n            manager.updateInstance(instance, uniformCluster);\n            // Unlink the instance from the uniform cluster\n            manager.layer.uniformManager.remove(instance);\n        }\n    };\n    /**\n     * This processes remove operations from changes in the instancing data\n     */\n    InstanceDiffManager.prototype.removeInstanceQuad = function (manager, instance, uniformCluster) {\n        if (uniformCluster) {\n            // We deactivate the instance so it does not render anymore\n            instance.active = false;\n            // We do one last update on the instance to update to it's deactivated state\n            manager.updateInstance(instance, uniformCluster);\n            // Unlink the instance from the uniform cluster\n            manager.layer.uniformManager.remove(instance);\n            // Remove the instance from our quad tree\n            manager.quadPicking.quadTree.remove(instance);\n        }\n    };\n    InstanceDiffManager.prototype.updateInstance = function (instance, uniformCluster) {\n        if (instance.active) {\n            var uniforms = uniformCluster.uniform;\n            var uniformRangeStart = uniformCluster.uniformRange[0];\n            var instanceData = uniforms.value;\n            var instanceUniform = void 0, value = void 0, block = void 0, start = void 0;\n            var k = void 0, endk = void 0;\n            // Loop through the instance attributes and update the uniform cluster with the valaues\n            // Calculated for the instance\n            for (var i = 0, end = this.layer.instanceAttributes.length; i < end; ++i) {\n                instanceUniform = this.layer.instanceAttributes[i];\n                value = instanceUniform.update(instance);\n                block = instanceData[uniformRangeStart + instanceUniform.block];\n                instanceUniform.atlas && this.layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n                start = instanceUniform.blockIndex;\n                if (start === undefined) {\n                    continue;\n                }\n                // Hyper optimized vector filling routine. It uses properties that are globally scoped\n                // To greatly reduce overhead\n                for (k = start, endk = value.length + start; k < endk; ++k) {\n                    block[VECTOR_ACCESSORS[k]] = value[k - start];\n                }\n            }\n            uniforms.value = instanceData;\n        }\n        else {\n            var uniforms = uniformCluster.uniform;\n            var uniformRangeStart = uniformCluster.uniformRange[0];\n            var instanceData = uniforms.value;\n            var instanceUniform = void 0, value = void 0, block = void 0, start = void 0;\n            // Only update the _active attribute to ensure it is false. When it is false, there is no\n            // Point to updating any other uniform\n            instanceUniform = this.layer.activeAttribute;\n            value = instanceUniform.update(instance);\n            block = instanceData[uniformRangeStart + instanceUniform.block];\n            instanceUniform.atlas && this.layer.resource.setTargetAtlas(instanceUniform.atlas.key);\n            start = instanceUniform.blockIndex;\n            if (start !== undefined) {\n                // Hyper optimized vector filling routine. It uses properties that are globally scoped\n                // To greatly reduce overhead\n                for (var k = start, endk = value.length + start; k < endk; ++k) {\n                    block[VECTOR_ACCESSORS[k]] = value[k - start];\n                }\n            }\n            uniforms.value = instanceData;\n        }\n    };\n    return InstanceDiffManager;\n}());\nexports.InstanceDiffManager = InstanceDiffManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar UID = 0;\n/**\n * Provides a 64 bit UID.\n *\n * Note: all uids generated with uid() are unique amongst uid() calls and NOT unique amongst\n * other types of uid calls.\n */\nfunction uid() {\n    return ++UID;\n}\nexports.uid = uid;\nvar CUID = 0;\n/**\n * Provides a 24 bit UID (keeps the UID within non-alpha color ranges)\n *\n * Note: all uids generated with colorUID() are unique amongst colorUID() calls and NOT unique amongst\n * other types of uid calls.\n */\nfunction colorUID() {\n    return (++CUID) % 0xFFFFFF;\n}\nexports.colorUID = colorUID;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nvar maxPopulation = 5;\nvar maxDepth = 10;\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n */\nvar Quadrants = /** @class */ (function () {\n    /**\n     * Creates an instance of Quadrants.\n     *\n     * @param bounds The bounds this will create quandrants for\n     * @param depth  The child depth of this element\n     */\n    function Quadrants(bounds, depth, getBounds, childToNode, childToBounds) {\n        var mid = bounds.mid;\n        this.TL = new Node(bounds.x, mid.x, bounds.y, mid.y, getBounds, depth);\n        this.TR = new Node(mid.x, bounds.right, bounds.y, mid.y, getBounds, depth);\n        this.BL = new Node(bounds.x, mid.x, mid.y, bounds.bottom, getBounds, depth);\n        this.BR = new Node(mid.x, bounds.right, mid.y, bounds.bottom, getBounds, depth);\n        this.TL.childToNode = childToNode;\n        this.TR.childToNode = childToNode;\n        this.BL.childToNode = childToNode;\n        this.BR.childToNode = childToNode;\n        this.TL.childToBounds = childToBounds;\n        this.TR.childToBounds = childToBounds;\n        this.BL.childToBounds = childToBounds;\n        this.BR.childToBounds = childToBounds;\n    }\n    /**\n     * Ensures all memory is released for all nodes and all references are removed\n     * to potentially high memory consumption items\n     */\n    Quadrants.prototype.destroy = function () {\n        this.TL.destroy();\n        this.TR.destroy();\n        this.BL.destroy();\n        this.BR.destroy();\n        delete this.TL;\n        delete this.TR;\n        delete this.BL;\n        delete this.BR;\n    };\n    return Quadrants;\n}());\nexports.Quadrants = Quadrants;\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n */\nvar Node = /** @class */ (function () {\n    /**\n     * Creates an instance of Node.\n     */\n    function Node(left, right, top, bottom, getBounds, depth) {\n        if (depth === void 0) { depth = 0; }\n        /** These are the child Instances of the node. */\n        this.children = [];\n        /** This is how deep the node is within the tree */\n        this.depth = 0;\n        /** These are the child nodes of this quad node when this node is split. It is null if the node is not split yet */\n        this.nodes = null;\n        // If params insertted\n        if (arguments.length >= 4) {\n            this.bounds = new bounds_1.Bounds({ left: left, right: right, top: top, bottom: bottom });\n        }\n        else {\n            // Otherwise, make tiny start area\n            this.bounds = new bounds_1.Bounds({ left: 0, right: 1, top: 1, bottom: 0 });\n        }\n        // Ensure the depth is set\n        this.depth = depth;\n        // Apply the bounds accessor method for instances\n        this.getBounds = getBounds;\n        // If this is the top level node, we need to instantiate the lookup that will be used\n        // Across all nodes.\n        if (this.depth === 0) {\n            this.nullBounded = [];\n            this.childToNode = new Map();\n            this.childToBounds = new Map();\n        }\n    }\n    /**\n     * Destroys this node and ensures all child nodes are destroyed as well.\n     */\n    Node.prototype.destroy = function () {\n        delete this.children;\n        delete this.bounds;\n        if (this.nodes) {\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n    };\n    /**\n     * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n     * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n     * this quad tree spans (and this is the root node), the quad tree will expand to include\n     * the new child.\n     *\n     * @param child The Bounds type object to inject\n     * @param props Properties that can be retrieved with the child object if applicable\n     *\n     * @returns True if the insertion was successful\n     */\n    Node.prototype.add = function (child) {\n        var bounds = this.childToBounds.get(child);\n        if (!bounds) {\n            // First we access the bounds of the child and store it\n            bounds = this.getBounds(child);\n            this.childToBounds.set(child, bounds);\n        }\n        // This is the entry function for adding children, so we must first expand our top node\n        // To cover the area that the child is located.\n        // If we're in bounds, then let's just add the child\n        if (!bounds || bounds.isInside(this.bounds)) {\n            return this.doAdd(child, bounds);\n        }\n        else {\n            // Otherwise, we need to expand first\n            this.cover(bounds);\n            return this.add(child);\n        }\n    };\n    /**\n     * Adds a list of new children to this quad tree. It performs the same operations as\n     * addChild for each child in the list, however, it more efficiently recalculates the\n     * bounds necessary to cover the area the children cover.\n     *\n     * @param children      List of Bounds objects to inject\n     */\n    Node.prototype.addAll = function (children) {\n        var _this = this;\n        // Make sure we cover the entire area of all the children.\n        // We can speed this up a lot if we first calculate the total bounds the new children covers\n        var minX = Number.MAX_VALUE;\n        var minY = Number.MAX_VALUE;\n        var maxX = -Number.MAX_VALUE;\n        var maxY = -Number.MAX_VALUE;\n        // Get the dimensions of the new bounds\n        children.forEach(function (child) {\n            var bounds = _this.getBounds(child);\n            _this.childToBounds.set(child, bounds);\n            if (!bounds)\n                return;\n            if (bounds.x < minX) {\n                minX = bounds.x;\n            }\n            if (bounds.right > maxX) {\n                maxX = bounds.right;\n            }\n            if (bounds.bottom > maxY) {\n                maxY = bounds.bottom;\n            }\n            if (bounds.y < minY) {\n                minY = bounds.y;\n            }\n        });\n        // Ensure a valid cover dimension was established. If no valid dimension is established\n        // Then we don't cover, but we can still add the children as that have null Bounds which\n        // Means injecting at the top level.\n        if (minX !== Number.MAX_VALUE &&\n            minY !== Number.MAX_VALUE &&\n            maxX !== -Number.MAX_VALUE &&\n            maxY !== -Number.MAX_VALUE) {\n            // Make sure our bounds includes the specified bounds\n            this.cover(new bounds_1.Bounds({ left: minX, right: maxX, bottom: maxY, top: minY }));\n        }\n        // Add all of the children into the tree.\n        children.forEach(function (child, index) { return _this.doAdd(child, _this.childToBounds.get(child) || null, true); });\n    };\n    /**\n     * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n     * This will cause all children to be re-injected into the tree.\n     *\n     * @param bounds The bounds to include in the tree's coverage\n     */\n    Node.prototype.cover = function (bounds) {\n        var _this = this;\n        // If we are already covering the area: abort\n        if (bounds.isInside(this.bounds)) {\n            return;\n        }\n        // Make our bounds cover the new area\n        this.bounds.encapsulate(bounds);\n        this.bounds.x -= 1;\n        this.bounds.y -= 1;\n        this.bounds.width += 2;\n        this.bounds.height += 2;\n        // Get all of the children underneath this node\n        var allChildren = this.gatherChildren([]);\n        this.children = [];\n        // Destroy the split nodes\n        if (this.nodes) {\n            // Completely...destroy...\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n        // Clear out the child to node relations\n        this.childToNode.clear();\n        // Reinsert all children with the new dimensions in place\n        allChildren.forEach(function (child, index) { return _this.doAdd(child, _this.childToBounds.get(child) || null); });\n    };\n    /**\n     * When adding children, this performs the actual action of injecting the child into the tree\n     * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n     *\n     * @param child The Bounds item to inject into the tree\n     * @param props The props to remain associated with the child\n     *\n     * @returns True if the injection was successful\n     */\n    Node.prototype.doAdd = function (child, bounds, fromSplit) {\n        // If this is the top level node and the bounds are null, then we add to the null list\n        if (!bounds && this.depth === 0) {\n            this.nullBounded.push(child);\n            this.childToNode.set(child, this);\n            return true;\n        }\n        // If no bounds is available at this point, something went terribly wrong\n        if (!bounds) {\n            console.warn('A null bounds was added to a Quad Tree node below the top node, which is invalid.');\n            return false;\n        }\n        // If bounds are null, then just immediately add\n        // If nodes are present, then we have already exceeded the population of this node\n        if (this.nodes) {\n            if (bounds.isInside(this.nodes.TL.bounds)) {\n                return this.nodes.TL.doAdd(child, bounds, fromSplit);\n            }\n            if (bounds.isInside(this.nodes.TR.bounds)) {\n                return this.nodes.TR.doAdd(child, bounds, fromSplit);\n            }\n            if (bounds.isInside(this.nodes.BL.bounds)) {\n                return this.nodes.BL.doAdd(child, bounds, fromSplit);\n            }\n            if (bounds.isInside(this.nodes.BR.bounds)) {\n                return this.nodes.BR.doAdd(child, bounds, fromSplit);\n            }\n            // Otherwise, this is a child overlapping this border\n            this.children.push(child);\n            this.childToNode.set(child, this);\n            return true;\n        }\n        else if (bounds.isInside(this.bounds)) {\n            // Otherwise, we have not had a split due to population limits being exceeded\n            this.children.push(child);\n            this.childToNode.set(child, this);\n            // If we exceeded our population for this quadrant, it is time to split up\n            if (this.children.length > maxPopulation && this.depth < maxDepth) {\n                this.split();\n            }\n            return true;\n        }\n        // This is when there is something wrong with the insertted child. The bounds\n        // For the quad should have grown without issue, but in this case the bounds\n        // Could not grow to accomodate the child.\n        if (isNaN(bounds.width + bounds.height + bounds.x + bounds.y)) {\n            console.error('Child did not fit into bounds because a dimension is NaN', child, bounds);\n        }\n        else if (bounds.area === 0) {\n            console.error('Child did not fit into bounds because the area is zero', child, bounds);\n        }\n        else {\n            console.error('Child did not get insertted.', 'Parent:', this.bounds.toString(), 'Child:', bounds.toString(), 'Inside Checks:', bounds.x >= this.bounds.x, bounds.right <= this.bounds.right, bounds.y >= this.bounds.y, bounds.bottom <= this.bounds.bottom);\n        }\n        // Don't insert the child and continue\n        return true;\n    };\n    Node.prototype.doRemove = function (child) {\n        var index = this.children.indexOf(child);\n        if (index > -1) {\n            this.children.splice(index, 1);\n            this.childToNode.delete(child);\n            this.childToBounds.delete(child);\n        }\n    };\n    /**\n     * Collects all children of all the current and sub nodes into a single list.\n     *\n     * @param list The list we must aggregate children into\n     *\n     * @return The list specified as the list parameter\n     */\n    Node.prototype.gatherChildren = function (list) {\n        this.children.forEach(function (child) { return list.push(child); });\n        if (this.nodes) {\n            this.nodes.TL.gatherChildren(list);\n            this.nodes.TR.gatherChildren(list);\n            this.nodes.BL.gatherChildren(list);\n            this.nodes.BR.gatherChildren(list);\n        }\n        return list;\n    };\n    /**\n     * Entry query for determining query type based on input object\n     *\n     * @param bounds Can be a Bounds or a Point object\n     * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n     *               information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return An array of children that intersects with the query\n     */\n    Node.prototype.query = function (bounds, visit) {\n        // This stores all of the found Instances when querying by bounds or point\n        var found = [];\n        // If this is the top level node then add in the null bunded items as the start\n        if (this.depth === 0) {\n            found = this.nullBounded.slice(0);\n        }\n        // Query a rectangle\n        if (bounds instanceof bounds_1.Bounds) {\n            if (bounds.hitBounds(this.bounds)) {\n                return this.queryBounds(bounds, found, visit);\n            }\n        }\n        // Query a point\n        if (this.bounds.containsPoint(bounds)) {\n            return this.queryPoint(bounds, found, visit);\n        }\n        // Return an empty array when nothing is collided with\n        return found;\n    };\n    /**\n     * Queries children for intersection with a bounds object\n     *\n     * @param b     The Bounds to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return     Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryBounds = function (b, list, visit) {\n        var _this = this;\n        this.children.forEach(function (c) {\n            var bounds = _this.childToBounds.get(c);\n            if (bounds && bounds.hitBounds(b)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (b.hitBounds(this.nodes.TL.bounds)) {\n                this.nodes.TL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.TR.bounds)) {\n                this.nodes.TR.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BL.bounds)) {\n                this.nodes.BL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BR.bounds)) {\n                this.nodes.BR.queryBounds(b, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Queries children for intersection with a point\n     *\n     * @param p     The Point to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return      Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryPoint = function (p, list, visit) {\n        var _this = this;\n        this.children.forEach(function (c) {\n            var bounds = _this.childToBounds.get(c);\n            if (bounds && bounds.containsPoint(p)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (this.nodes.TL.bounds.containsPoint(p)) {\n                this.nodes.TL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.TR.bounds.containsPoint(p)) {\n                this.nodes.TR.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BL.bounds.containsPoint(p)) {\n                this.nodes.BL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BR.bounds.containsPoint(p)) {\n                this.nodes.BR.queryPoint(p, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Remove the provided item from the tree.\n     */\n    Node.prototype.remove = function (child) {\n        if (this.childToNode) {\n            var node = this.childToNode.get(child);\n            // If the node is getting removed from the top level node, then it MAY be a null bounded item\n            // Which gets removed from the list\n            if (node && node.depth === 0) {\n                var index = node.nullBounded.indexOf(child);\n                if (index > -1) {\n                    node.nullBounded.splice(index);\n                    this.childToNode.delete(child);\n                    this.childToBounds.delete(child);\n                    return;\n                }\n            }\n            // Otherwise, just remove the node normally\n            if (node) {\n                node.doRemove(child);\n            }\n        }\n    };\n    /**\n     * Creates four sub quadrants for this node.\n     */\n    Node.prototype.split = function () {\n        // Gather all items to be handed down\n        var allChildren = this.gatherChildren([]);\n        // Gather all props for the children to be handed down as well\n        this.nodes = new Quadrants(this.bounds, this.depth + 1, this.getBounds, this.childToNode, this.childToBounds);\n        // Empty out the children as they are being re-injected\n        this.children = [];\n        for (var i = 0, end = allChildren.length; i < end; ++i) {\n            var child = allChildren[i];\n            this.doAdd(child, this.childToBounds.get(child) || null, true);\n        }\n    };\n    /**\n     * Traverses the quad tree returning every quadrant encountered\n     *\n     * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n     */\n    Node.prototype.visit = function (cb) {\n        var finished = Boolean(cb(this));\n        if (this.nodes && !finished) {\n            this.nodes.TL.visit(cb);\n            this.nodes.TR.visit(cb);\n            this.nodes.BL.visit(cb);\n            this.nodes.BR.visit(cb);\n        }\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar TrackedQuadTree = /** @class */ (function (_super) {\n    __extends(TrackedQuadTree, _super);\n    function TrackedQuadTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return TrackedQuadTree;\n}(Node));\nexports.TrackedQuadTree = TrackedQuadTree;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chart_camera_1 = require(\"./chart-camera\");\n/**\n * This is a camera that is based on another camera. This can apply filters\n * to the information provided from the base camera.\n *\n * Useful for situations such as a chart having a chart area and a list on the\n * left. This can use the same camera the chart area uses, but filter the response\n * to only track the y offset of the base camera.\n *\n * That would allow easy tracking of the left list to track with elements in the\n * chart and only manipulate a single camera instead of managing many cameras and\n * tie them together with lots of events.\n */\nvar ReferenceCamera = /** @class */ (function (_super) {\n    __extends(ReferenceCamera, _super);\n    function ReferenceCamera(options) {\n        var _this = _super.call(this) || this;\n        _this.offsetFilter = function (offset) { return offset; };\n        _this.scaleFilter = function (scale) { return scale; };\n        Object.assign(_this, options);\n        return _this;\n    }\n    Object.defineProperty(ReferenceCamera.prototype, \"offset\", {\n        get: function () {\n            return this.offsetFilter(this.base.offset);\n        },\n        set: function (val) {\n            /** no-op */\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ReferenceCamera.prototype, \"scale\", {\n        get: function () {\n            return this.scaleFilter(this.base.scale);\n        },\n        set: function (val) {\n            /** no-op */\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ReferenceCamera;\n}(chart_camera_1.ChartCamera));\nexports.ReferenceCamera = ReferenceCamera;\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * Active `debug` instances.\n */\nexports.instances = [];\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  var prevTime;\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n  debug.destroy = destroy;\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  exports.instances.push(debug);\n\n  return debug;\n}\n\nfunction destroy () {\n  var index = exports.instances.indexOf(this);\n  if (index !== -1) {\n    exports.instances.splice(index, 1);\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var i;\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n\n  for (i = 0; i < exports.instances.length; i++) {\n    var instance = exports.instances[i];\n    instance.enabled = exports.enabled(instance.namespace);\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  if (name[name.length - 1] === '*') {\n    return true;\n  }\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__103__;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mobx_1 = require(\"mobx\");\nvar DiffType;\n(function (DiffType) {\n    DiffType[DiffType[\"CHANGE\"] = 0] = \"CHANGE\";\n    DiffType[DiffType[\"INSERT\"] = 1] = \"INSERT\";\n    DiffType[DiffType[\"REMOVE\"] = 2] = \"REMOVE\";\n})(DiffType = exports.DiffType || (exports.DiffType = {}));\nfunction isObservableArray(val) {\n    return Boolean(val.observe);\n}\nvar UPDATE_FLAG = 'update';\nvar SPLICE_FLAG = 'splice';\n/**\n * This is a generic DataProvider that provides instance data to a layer. It monitors\n * changes to a list of instance items and records those changes for consumption by\n * internal layer processes. This allows for extremely easy editing of instance data\n * that reflects highly targetted changes to the system with very little overhead\n * allowing for very large datasets with rapidly changing parts.\n */\nvar DataProvider = /** @class */ (function () {\n    function DataProvider(data) {\n        var _this = this;\n        // When active, this provider is recording changes. Deactivate to temporarily disable\n        // Change tracking.\n        this.active = true;\n        this.instanceDisposers = new Map();\n        this.instanceChanges = new Map();\n        this.instanceById = new Map();\n        this.isChanged = false;\n        this._changeList = [];\n        /**\n         * This generates a method for an interceptor to monitor individual items within a list and record\n         * any changes found to the changelist\n         *\n         * @param changes This is the change list which records the changes to the items\n         */\n        this.monitorItem = function (changes) { return function (change) {\n            if (_this.active) {\n                if (change.type === UPDATE_FLAG) {\n                    changes.set(change.object, DiffType.CHANGE);\n                    _this.isChanged = true;\n                }\n                else {\n                    console.warn('Received an update type not supported by monitorItem:', change.type);\n                }\n            }\n            return change;\n        }; };\n        this._instances = mobx_1.observable(data || []);\n        if (isObservableArray(this._instances)) {\n            this.listDisposer = mobx_1.intercept(this._instances, this.monitorList(this._instances, this.instanceChanges, this.instanceById, this.instanceDisposers));\n        }\n    }\n    Object.defineProperty(DataProvider.prototype, \"instances\", {\n        // We very explicitly shut off the ability to set the top level properties on\n        // This element. Mutations on the properties are allowed (and are thus trackable)\n        // But modifying the root properties will not have a very clean way to monitor that.\n        // So we make the properties accessible without being replaceable.\n        get: function () {\n            return this._instances;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataProvider.prototype, \"changeList\", {\n        get: function () {\n            // When the changelist is retrieved, we deactivate change recording until the provider\n            // Is resolved\n            this.active = false;\n            if (this.isChanged) {\n                var changes_1 = [];\n                this.instanceChanges.forEach(function (changeType, instance) {\n                    changes_1.push([instance, changeType]);\n                });\n                this._changeList = changes_1;\n            }\n            return this._changeList;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Clears out all disposers and items in the dataset\n     */\n    DataProvider.prototype.destroy = function () {\n        this.listDisposer();\n        this.instanceDisposers.forEach(function (disposer) { return disposer(); });\n        delete this._instances;\n        this.instanceChanges.clear();\n        delete this._changeList;\n    };\n    /**\n     * This generates a method for an interceptor that will monitor and collect change information\n     * on the list of items specified.\n     *\n     * @param list The list of items to monitor\n     * @param changes The changelist for the list of given item type\n     * @param lookUp A lookup so items that have changed can get their source easily\n     */\n    DataProvider.prototype.monitorList = function (list, changes, lookUp, disposers) {\n        var _this = this;\n        return function (change) {\n            if (_this.active) {\n                // We only handle splice types for changes, these indicate elements have been added or removed\n                if (change.type === SPLICE_FLAG) {\n                    // Record the removals and clear out any interceptors\n                    for (var i = change.index, end = change.index + change.removedCount; i < end; ++i) {\n                        var item = change.object[i];\n                        changes.set(item, DiffType.REMOVE);\n                        _this.isChanged = true;\n                        var dispose = disposers.get(item);\n                        if (dispose) {\n                            dispose();\n                        }\n                    }\n                    // Record the additions and add intercepts for each item. Also generate a lookup for the item\n                    for (var i = 0, end = change.added.length; i < end; ++i) {\n                        var item = change.added[i] = mobx_1.observable(change.added[i]);\n                        changes.set(item, DiffType.INSERT);\n                        _this.isChanged = true;\n                        lookUp.set(item.id, item);\n                        disposers.set(item, mobx_1.intercept(item, _this.monitorItem(changes)));\n                    }\n                }\n                else {\n                    console.warn('Received an update type not supported by monitorList:', change.type);\n                }\n            }\n            return change;\n        };\n    };\n    /**\n     * This resolves all of the changes found and makes them disappear.\n     */\n    DataProvider.prototype.resolve = function () {\n        this.instanceById.clear();\n        this.instanceChanges.clear();\n        this._changeList = [];\n        this.active = true;\n    };\n    return DataProvider;\n}());\nexports.DataProvider = DataProvider;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Calculates the distance between two points, but keeps the distance in dquared form\n * thus performing Math.sqrt() on the output of this distance would provide the true\n * distance between the points.\n *\n * It is often faster and all that is needed to compare squared distances vs real distances\n * thus eliminating multiple Math.sqrt operations\n *\n * NOTE: For vectors this is the same as (pseudo code):\n * let vector3 = vector2.subtract(vector1)\n * return vector3.dot(vector3)\n *\n * @param p1 The point to find the distance from the second point\n * @param p2 The point to find the distance from the first point\n *\n * @return {number} The distance * distance between the two points\n */\nfunction squareDistance(p1, p2) {\n    var dx = p1.x - p2.x;\n    var dy = p1.y - p2.y;\n    return dx * dx + dy * dy;\n}\n/**\n * Contains methods for managing or manipulating points\n *\n * @export\n * @class Point\n */\nvar Point = /** @class */ (function () {\n    function Point() {\n    }\n    /**\n     * Adds two points together\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @return {IPoint} The two points added together\n     */\n    Point.add = function (p1, p2, out) {\n        if (out) {\n            out.x = p1.x + p2.x;\n            out.y = p1.y + p2.y;\n            return out;\n        }\n        return {\n            x: p1.x + p2.x,\n            y: p1.y + p2.y,\n        };\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {IPoint} The closest point to the test point\n     */\n    Point.getClosest = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = testPoint;\n        var distance;\n        var findClosest = function (point) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = point;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * This just returns the index of the found point and not the point itself\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {number} The index of the closest point to the test point\n     */\n    Point.getClosestIndex = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = 0;\n        var distance;\n        var findClosest = function (point, i) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = i;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This will calculate a direction vector between two points that points toward p2\n     *\n     * @param {IPoint} amount The start of the direction\n     * @param {IPoint} from The direction to point the vector towards\n     * @param {boolean} normalize If true, this will make the vector have a magnitude of 1\n     *\n     * @returns {number}\n     */\n    Point.subtract = function (amount, from, normalize) {\n        if (normalize === void 0) { normalize = false; }\n        var dx = from.x - amount.x;\n        var dy = from.y - amount.y;\n        if (normalize) {\n            var magnitude = Math.sqrt(dx * dx + dy * dy);\n            dx /= magnitude;\n            dy /= magnitude;\n        }\n        return {\n            x: dx,\n            y: dy,\n        };\n    };\n    /**\n     * @static\n     * Gets the distance between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {boolean} squared If set to true, returns the distance * distance (performs faster)\n     *\n     * @returns {number} The real distance between two points\n     */\n    Point.getDistance = function (p1, p2, squared) {\n        if (squared === void 0) { squared = false; }\n        if (squared) {\n            return squareDistance(p1, p2);\n        }\n        return Math.sqrt(squareDistance(p1, p2));\n    };\n    /**\n     * @static\n     * Gets a point perfectly between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     *\n     * @returns {IPoint} The point between the two provided points\n     */\n    Point.getMidpoint = function (p1, p2) {\n        var direction = Point.subtract(p1, p2);\n        return {\n            x: direction.x / 2 + p1.x,\n            y: direction.y / 2 + p1.y,\n        };\n    };\n    Point.make = function (x, y) {\n        return { x: x, y: y };\n    };\n    /**\n     * Scales a point by a given amount\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {number} s The amount to scale the point by\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @memberof Point\n     */\n    Point.scale = function (p1, s, out) {\n        if (out) {\n            out.x = p1.x * s;\n            out.y = p1.y * s;\n            return out;\n        }\n        return {\n            x: p1.x * s,\n            y: p1.y * s,\n        };\n    };\n    /**\n     * Makes a new point initialized to {0,0}\n     *\n     * @static\n     * @returns {IPoint} A new point object at {0,0}\n     */\n    Point.zero = function () {\n        return {\n            x: 0,\n            y: 0,\n        };\n    };\n    return Point;\n}());\nexports.Point = Point;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar primitives_1 = require(\"../../primitives\");\nvar layer_1 = require(\"../../surface/layer\");\nvar types_1 = require(\"../../types\");\nvar types_2 = require(\"../types\");\nvar min = Math.min, max = Math.max;\n/**\n * This layer displays Images and provides as many controls as possible for displaying\n * them in interesting ways.\n */\nvar ImageLayer = /** @class */ (function (_super) {\n    __extends(ImageLayer, _super);\n    function ImageLayer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * We provide bounds and hit test information for the instances for this layer to allow for mouse picking\n     * of elements\n     */\n    ImageLayer.prototype.getInstancePickingMethods = function () {\n        return {\n            // Provide the calculated AABB world bounds for a given image\n            boundsAccessor: function (image) {\n                var anchorEffect = [0, 0];\n                if (image.anchor) {\n                    anchorEffect[0] = image.anchor.x || 0;\n                    anchorEffect[1] = image.anchor.y || 0;\n                }\n                var topLeft = [\n                    image.x - anchorEffect[0],\n                    image.y - anchorEffect[1],\n                ];\n                return new primitives_1.Bounds({\n                    height: image.height,\n                    width: image.width,\n                    x: topLeft[0],\n                    y: topLeft[1],\n                });\n            },\n            // Provide a precise hit test for the circle\n            hitTest: function (image, point, view) {\n                // The bounds of the image is in world space, but it does not account for the scale mode of the image.\n                // Here, we will apply the scale mode testing to the image\n                var maxScale = max.apply(void 0, view.camera.scale);\n                var minScale = min.apply(void 0, view.camera.scale);\n                // If we scale always then the image stays within it's initial world bounds at all times\n                if (image.scaling === types_2.ScaleType.ALWAYS) {\n                    return true;\n                }\n                // If we scale with bound max, then when the camera zooms in, the bounds will shrink to keep the\n                // Image the same size. If the camera zooms out then the bounds === the world bounds.\n                else if (image.scaling === types_2.ScaleType.BOUND_MAX) {\n                    // We are zooming out. the bounds will stay within the world bounds\n                    if (minScale <= 1 && maxScale <= 1) {\n                        return true;\n                    }\n                    // We are zooming in. The bounds will shrink to keep the image at max font size\n                    else {\n                        // The location is within the world, but we reverse project the anchor spread\n                        var anchorEffect = [0, 0];\n                        if (image.anchor) {\n                            anchorEffect[0] = image.anchor.x || 0;\n                            anchorEffect[1] = image.anchor.y || 0;\n                        }\n                        var topLeft = view.worldToScreen({\n                            x: image.x - (anchorEffect[0] / view.camera.scale[0]),\n                            y: image.y - (anchorEffect[1] / view.camera.scale[1]),\n                        });\n                        var screenPoint = view.worldToScreen(point);\n                        // Reverse project the size and we should be within the distorted world coordinates\n                        return new primitives_1.Bounds({\n                            height: image.height,\n                            width: image.width,\n                            x: topLeft.x,\n                            y: topLeft.y,\n                        }).containsPoint(screenPoint);\n                    }\n                }\n                // If we never allow the image to scale, then the bounds will grow and shrink to counter the effects\n                // Of the camera zoom\n                else if (image.scaling === types_2.ScaleType.NEVER) {\n                    // The location is within the world, but we reverse project the anchor spread\n                    var anchorEffect = [0, 0];\n                    if (image.anchor) {\n                        anchorEffect[0] = image.anchor.x || 0;\n                        anchorEffect[1] = image.anchor.y || 0;\n                    }\n                    var topLeft = view.worldToScreen({\n                        x: image.x - (anchorEffect[0] / view.camera.scale[0]),\n                        y: image.y - (anchorEffect[1] / view.camera.scale[1]),\n                    });\n                    var screenPoint = view.worldToScreen(point);\n                    // Reverse project the size and we should be within the distorted world coordinates\n                    return new primitives_1.Bounds({\n                        height: image.height,\n                        width: image.width,\n                        x: topLeft.x,\n                        y: topLeft.y,\n                    }).containsPoint(screenPoint);\n                }\n                return true;\n            },\n        };\n    };\n    /**\n     * Define our shader and it's inputs\n     */\n    ImageLayer.prototype.initShader = function () {\n        var _this = this;\n        var vertexToNormal = {\n            0: 1,\n            1: 1,\n            2: -1,\n            3: 1,\n            4: -1,\n            5: -1,\n        };\n        var vertexToSide = {\n            0: 0,\n            1: 0,\n            2: 0,\n            3: 1,\n            4: 1,\n            5: 1,\n        };\n        return {\n            fs: require('./image-layer.fs'),\n            instanceAttributes: [\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'location',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.x, o.y]; },\n                },\n                {\n                    block: 0,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'anchor',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.anchor.x || 0, o.anchor.y || 0]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'size',\n                    size: types_1.InstanceAttributeSize.TWO,\n                    update: function (o) { return [o.width, o.height]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.THREE,\n                    name: 'depth',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.depth]; },\n                },\n                {\n                    block: 1,\n                    blockIndex: types_1.InstanceBlockIndex.FOUR,\n                    name: 'scaling',\n                    size: types_1.InstanceAttributeSize.ONE,\n                    update: function (o) { return [o.scaling]; },\n                },\n                {\n                    atlas: {\n                        key: this.props.atlas || '',\n                        name: 'imageAtlas',\n                    },\n                    block: 2,\n                    name: 'texture',\n                    update: function (o) { return _this.resource.request(_this, o, o.resource); },\n                },\n                {\n                    block: 3,\n                    blockIndex: types_1.InstanceBlockIndex.ONE,\n                    name: 'tint',\n                    size: types_1.InstanceAttributeSize.FOUR,\n                    update: function (o) { return o.tint; },\n                },\n            ],\n            uniforms: [\n                {\n                    name: 'scaleFactor',\n                    size: types_1.UniformSize.ONE,\n                    update: function (u) { return [1]; },\n                },\n            ],\n            vertexAttributes: [\n                // TODO: This is from the heinous evils of THREEJS and their inability to fix a bug within our lifetimes.\n                // Right now position is REQUIRED in order for rendering to occur, otherwise the draw range gets updated to\n                // Zero against your wishes.\n                {\n                    name: 'position',\n                    size: types_1.VertexAttributeSize.THREE,\n                    update: function (vertex) { return [\n                        // Normal\n                        vertexToNormal[vertex],\n                        // The side of the quad\n                        vertexToSide[vertex],\n                        0,\n                    ]; },\n                },\n            ],\n            vertexCount: 6,\n            vs: require('./image-layer.vs'),\n        };\n    };\n    ImageLayer.prototype.getModelType = function () {\n        return {\n            drawMode: Three.TriangleStripDrawMode,\n            modelType: Three.Mesh,\n        };\n    };\n    ImageLayer.prototype.getMaterialOptions = function () {\n        return {\n            blending: Three.CustomBlending,\n            blendSrc: Three.OneFactor,\n            premultipliedAlpha: true,\n            transparent: true,\n        };\n    };\n    return ImageLayer;\n}(layer_1.Layer));\nexports.ImageLayer = ImageLayer;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Three = require(\"three\");\nvar images_1 = require(\"../base-layers/images\");\nvar labels_1 = require(\"../base-layers/labels\");\nvar bounds_1 = require(\"../primitives/bounds\");\nvar attribute_generation_1 = require(\"../shaders/util/attribute-generation\");\nvar generate_default_scene_1 = require(\"../surface/generate-default-scene\");\nvar generate_layer_geometry_1 = require(\"../surface/generate-layer-geometry\");\nvar generate_layer_material_1 = require(\"../surface/generate-layer-material\");\nvar generate_layer_model_1 = require(\"../surface/generate-layer-model\");\nvar inject_shader_io_1 = require(\"../surface/inject-shader-io\");\nvar mouse_event_manager_1 = require(\"../surface/mouse-event-manager\");\nvar scene_1 = require(\"../surface/scene\");\nvar view_1 = require(\"../surface/view\");\nvar data_bounds_1 = require(\"../util/data-bounds\");\nvar instance_uniform_manager_1 = require(\"../util/instance-uniform-manager\");\nvar layer_mouse_events_1 = require(\"./event-managers/layer-mouse-events\");\nvar texture_1 = require(\"./texture\");\nvar atlas_resource_manager_1 = require(\"./texture/atlas-resource-manager\");\nvar DEFAULT_BACKGROUND_COLOR = new Three.Color(1.0, 1.0, 1.0);\nfunction isCanvas(val) {\n    return Boolean(val.getContext);\n}\nfunction isString(val) {\n    return Boolean(val.substr);\n}\nfunction isWebGLContext(val) {\n    return Boolean(val.canvas);\n}\n/**\n * Used for reactive layer generation and updates.\n */\nfunction createLayer(layerClass, props) {\n    return [layerClass, props];\n}\nexports.createLayer = createLayer;\n/**\n * This is a manager for layers. It will use voidgl layers to intelligently render resources\n * as efficiently as possible. Layers will be rendered in the order they are provided and this\n * surface will provide some basic camera controls by default.\n */\nvar LayerSurface = /** @class */ (function () {\n    function LayerSurface() {\n        /** This is the atlas manager that will help with modifying and tracking atlas' generated for the layers */\n        this.atlasManager = new texture_1.AtlasManager();\n        /**\n         * This is the metrics of the current running frame\n         */\n        this.frameMetrics = {\n            currentFrame: 0,\n            currentTime: Date.now() | 0,\n            previousTime: Date.now() | 0,\n        };\n        /**\n         * This is used to help resolve concurrent draws. There are some very async operations that should\n         * not overlap in draw calls.\n         */\n        this.isBufferingAtlas = false;\n        /** This is all of the layers in this manager by their id */\n        this.layers = new Map();\n        /** This is the density the rendering renders for the surface */\n        this.pixelRatio = window.devicePixelRatio;\n        /**\n         * This is all of the available scenes and their views for this surface. Layers reference the IDs\n         * of the scenes and the views to be a part of their rendering state.\n         */\n        this.scenes = new Map();\n        /**\n         * This is all of the views currently generated for this surface paired with the scene they render.\n         */\n        this.sceneViews = [];\n        /**\n         * This flags all layers by id for disposal at the end of every render. A Layer must be recreated\n         * after each render in order to clear it's disposal flag. This is the trick to making this a\n         * reactive system.\n         */\n        this.willDisposeLayer = new Map();\n    }\n    Object.defineProperty(LayerSurface.prototype, \"gl\", {\n        /** Read only getter for the gl context */\n        get: function () {\n            return this.context;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This adds a layer to the manager which will manage all of the resource lifecycles of the layer\n     * as well as additional helper injections to aid in instancing and shader i/o.\n     */\n    LayerSurface.prototype.addLayer = function (layer) {\n        if (!layer.id) {\n            console.warn('All layers must have an id');\n            return layer;\n        }\n        if (this.layers.get(layer.id)) {\n            console.warn('All layer\\'s ids must be unique per layer manager');\n            return layer;\n        }\n        // We add the layer to our management\n        this.layers.set(layer.id, layer);\n        // Now we initialize the layer's gl components\n        this.initLayer(layer);\n        return layer;\n    };\n    /**\n     * Free all resources consumed by this surface that gets applied to the GPU.\n     */\n    LayerSurface.prototype.destroy = function () {\n        this.layers.forEach(function (layer) { return layer.destroy(); });\n        this.resourceManager.destroy();\n        this.mouseManager.destroy();\n        this.sceneViews.forEach(function (sceneView) { return sceneView.scene.destroy(); });\n        this.renderer.dispose();\n        // TODO: Instances should be implementing destroy for these clean ups.\n        labels_1.LabelInstance.destroy();\n        images_1.ImageInstance.destroy();\n    };\n    /**\n     * This is the draw loop that must be called per frame for updates to take effect and display.\n     *\n     * @param time This is an optional time flag so one can manually control the time flag for the frame.\n     *             This will affect animations and other automated gpu processes.\n     */\n    LayerSurface.prototype.draw = function (time) {\n        return __awaiter(this, void 0, void 0, function () {\n            var scenes, i, end, scene, views, layers, k, endk, view, j, endj, layer, didBuffer;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.gl)\n                            return [2 /*return*/];\n                        // We are rendering a new frame so increment our frame count\n                        this.frameMetrics.currentFrame++;\n                        this.frameMetrics.previousTime = this.frameMetrics.currentTime;\n                        // If no manual time was provided, we shall use Date.now in 32 bit format\n                        if (time === undefined) {\n                            this.frameMetrics.currentTime = Date.now() | 0;\n                        }\n                        else {\n                            // If this is our first frame and we have a manual time entry, then we first need to sync up\n                            // The manual time as our previous timing.\n                            if (this.frameMetrics.previousTime === this.frameMetrics.currentTime) {\n                                this.frameMetrics.previousTime = time;\n                            }\n                            this.frameMetrics.currentTime = time;\n                        }\n                        scenes = Array.from(this.scenes.values());\n                        // Loop through scenes\n                        for (i = 0, end = scenes.length; i < end; ++i) {\n                            scene = scenes[i];\n                            views = Array.from(scene.viewById.values());\n                            layers = scene.layers;\n                            // Make sure the layers are depth sorted\n                            scene.sortLayers();\n                            // Loop through the views\n                            for (k = 0, endk = views.length; k < endk; ++k) {\n                                view = views[k];\n                                // We must perform any operations necessary to make the view camera fit the viewport\n                                // Correctly\n                                view.fitViewtoViewport(new bounds_1.Bounds({\n                                    height: this.context.canvas.height,\n                                    width: this.context.canvas.width,\n                                    x: 0,\n                                    y: 0,\n                                }));\n                                // Let the layers update their uniforms before the draw\n                                for (j = 0, endj = layers.length; j < endj; ++j) {\n                                    layer = layers[j];\n                                    // Update the layer with the view it is about to be rendered with\n                                    layer.view = view;\n                                    // Make sure the layer is given the opportunity to update all of it's uniforms\n                                    // To match the view state and update any unresolved diffs internally\n                                    layer.draw();\n                                }\n                                // Now perform the rendering\n                                this.drawSceneView(scene.container, view);\n                            }\n                        }\n                        // After we have drawn our views of our scenes, we can now ensure all of the bounds\n                        // Are updated in the interactions and flag our interactions ready for mouse input\n                        if (this.mouseManager.waitingForRender) {\n                            this.sceneViews.forEach(function (sceneView) {\n                                sceneView.bounds = new data_bounds_1.DataBounds(sceneView.view.screenBounds);\n                                sceneView.bounds.data = sceneView;\n                            });\n                            this.mouseManager.waitingForRender = false;\n                        }\n                        if (!!this.isBufferingAtlas) return [3 /*break*/, 2];\n                        this.isBufferingAtlas = true;\n                        return [4 /*yield*/, this.resourceManager.dequeueRequests()];\n                    case 1:\n                        didBuffer = _a.sent();\n                        this.isBufferingAtlas = false;\n                        // If buffering did occur and completed, then we should be performing a draw to ensure all of the\n                        // Changes are committed and pushed out.\n                        if (didBuffer)\n                            this.draw();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This finalizes everything and sets up viewports and clears colors and\n     */\n    LayerSurface.prototype.drawSceneView = function (scene, view) {\n        var offset = { x: view.viewBounds.left, y: view.viewBounds.top };\n        var size = view.viewBounds;\n        var rendererSize = this.renderer.getSize();\n        rendererSize.width *= this.renderer.getPixelRatio();\n        rendererSize.height *= this.renderer.getPixelRatio();\n        var background = view.background;\n        // Set the scissor rectangle.\n        this.context.enable(this.context.SCISSOR_TEST);\n        this.context.scissor(offset.x, rendererSize.height - offset.y - size.height, size.width, size.height);\n        // If a background is established, we should clear the background color\n        // Specified for this context\n        if (view.background) {\n            // Clear the rect of color and depth so the region is totally it's own\n            this.context.clearColor(background[0], background[1], background[2], background[3]);\n        }\n        // Get the view's clearing preferences\n        if (view.clearFlags) {\n            this.context.clear((view.clearFlags.indexOf(view_1.ClearFlags.COLOR) > -1 ? this.context.COLOR_BUFFER_BIT : 0x0) |\n                (view.clearFlags.indexOf(view_1.ClearFlags.DEPTH) > -1 ? this.context.DEPTH_BUFFER_BIT : 0x0) |\n                (view.clearFlags.indexOf(view_1.ClearFlags.STENCIL) > -1 ? this.context.STENCIL_BUFFER_BIT : 0x0));\n        }\n        // Default clearing is depth and color\n        else {\n            this.context.clear(this.context.COLOR_BUFFER_BIT | this.context.DEPTH_BUFFER_BIT);\n        }\n        this.renderer.setViewport(offset.x / this.pixelRatio, offset.y / this.pixelRatio, size.width, size.height);\n        // Render the scene with the provided view metrics\n        this.renderer.render(scene, view.viewCamera.baseCamera);\n    };\n    /**\n     * This allows for querying a view's screen bounds. Null is returned if the view id\n     * specified does not exist.\n     */\n    LayerSurface.prototype.getViewSize = function (viewId) {\n        for (var _i = 0, _a = this.sceneViews; _i < _a.length; _i++) {\n            var sceneView = _a[_i];\n            if (sceneView.view.id === viewId) {\n                return sceneView.view.screenBounds;\n            }\n        }\n        return null;\n    };\n    /**\n     * This queries a view's window into a world's space.\n     */\n    LayerSurface.prototype.getViewWorldBounds = function (viewId) {\n        for (var _i = 0, _a = this.sceneViews; _i < _a.length; _i++) {\n            var sceneView = _a[_i];\n            if (sceneView.view.id === viewId) {\n                var view = sceneView.view;\n                if (view.screenBounds) {\n                    var topLeft = view.viewToWorld({ x: 0, y: 0 });\n                    var bottomRight = view.screenToWorld({ x: view.screenBounds.right, y: view.screenBounds.bottom });\n                    return new bounds_1.Bounds({\n                        bottom: bottomRight.y,\n                        left: topLeft.x,\n                        right: bottomRight.x,\n                        top: topLeft.y,\n                    });\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n        return null;\n    };\n    /**\n     * This is the beginning of the system. This should be called immediately after the surface is constructed.\n     * We make this mandatory outside of the constructor so we can make it follow an async pattern.\n     */\n    LayerSurface.prototype.init = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Make sure our desired pixel ratio is set up\n                        this.pixelRatio = options.pixelRatio || this.pixelRatio;\n                        // Make sure we have a gl context to work with\n                        this.setContext(options.context);\n                        if (!this.gl) return [3 /*break*/, 2];\n                        // Initialize our GL needs that set the basis for rendering\n                        this.initGL(options);\n                        // Initialize our event manager that handles mouse interactions/gestures with the canvas\n                        this.initMouseManager(options);\n                        // Initialize any resources requested or needed, such as textures or rendering surfaces\n                        return [4 /*yield*/, this.initResources(options)];\n                    case 1:\n                        // Initialize any resources requested or needed, such as textures or rendering surfaces\n                        _a.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        console.warn('Could not establish a GL context. Layer Surface will be unable to render');\n                        _a.label = 3;\n                    case 3: return [2 /*return*/, this];\n                }\n            });\n        });\n    };\n    /**\n     * This initializes the Canvas GL contexts needed for rendering.\n     */\n    LayerSurface.prototype.initGL = function (options) {\n        var _this = this;\n        if (!this.context) {\n            console.error('Can not initialize Layer Surface as a valid GL context was not established.');\n            return;\n        }\n        // Get the canvas of our context to set up our Three settings\n        var canvas = this.context.canvas;\n        // Get the starting width and height so adjustments don't affect it\n        var width = canvas.width;\n        var height = canvas.height;\n        // Generate the renderer along with it's properties\n        this.renderer = new Three.WebGLRenderer({\n            // Context supports rendering to an alpha canvas only if the background color has a transparent\n            // Alpha value.\n            alpha: options.background && (options.background[3] < 1.0),\n            // Yes to antialias! Make it preeeeetty!\n            antialias: true,\n            // Make three use an existing canvas rather than generate another\n            canvas: canvas,\n            // TODO: This should be toggleable. If it's true it allows us to snapshot the rendering in the canvas\n            //       But we dont' always want it as it makes performance drop a bit.\n            preserveDrawingBuffer: true,\n        });\n        // We want clearing to be controlled via the layer\n        this.renderer.autoClear = false;\n        // Charts don't really have face culling. Just 2D shapes\n        this.renderer.setFaceCulling(Three.CullFaceNone);\n        // This sets the pixel ratio to handle differing pixel densities in screens\n        this.renderer.setSize(width, height);\n        // Set the pixel ratio to match the pixel density of the monitor in use\n        this.renderer.setPixelRatio(this.pixelRatio);\n        // Applies the background color and establishes whether or not the context supports\n        // Alpha or not\n        if (options.background) {\n            this.renderer.setClearColor(new Three.Color(options.background[0], options.background[1], options.background[2]), options.background[3]);\n        }\n        // If a background color was not established, then we set a default background color\n        else {\n            this.renderer.setClearColor(DEFAULT_BACKGROUND_COLOR);\n        }\n        // Once we have made our renderer we now make us a default scene to which we can add objects\n        this.defaultSceneElements = generate_default_scene_1.generateDefaultScene(this.context);\n        this.defaultSceneElements.view.background = options.background;\n        // Set the default scene\n        this.scenes.set(this.defaultSceneElements.scene.id, this.defaultSceneElements.scene);\n        // Make a scene view depth tracker so we can track the order each scene view combo is drawn\n        var sceneViewDepth = 0;\n        // Make a SceneView for the default scene and view for mouse interactions\n        this.sceneViews.push({\n            depth: ++sceneViewDepth,\n            scene: this.defaultSceneElements.scene,\n            view: this.defaultSceneElements.view,\n        });\n        // Turn on the scissor test to keep the rendering clipped within the\n        // Render region of the context\n        this.context.enable(this.context.SCISSOR_TEST);\n        // Add the requested scenes to the surface and apply the necessary defaults\n        if (options.scenes) {\n            options.scenes.forEach(function (sceneOptions) {\n                // Make us a new scene based on the requested options\n                var newScene = new scene_1.Scene(sceneOptions);\n                // Make sure the default view is available for each scene\n                // IFF no view is provided for the scene\n                if (sceneOptions.views.length === 0) {\n                    newScene.addView(_this.defaultSceneElements.view);\n                    _this.sceneViews.push({\n                        depth: ++sceneViewDepth,\n                        scene: newScene,\n                        view: _this.defaultSceneElements.view,\n                    });\n                }\n                // Generate the views requested for the scene\n                sceneOptions.views.forEach(function (viewOptions) {\n                    var newView = new view_1.View(viewOptions);\n                    newView.camera = newView.camera || _this.defaultSceneElements.camera;\n                    newView.viewCamera = newView.viewCamera || _this.defaultSceneElements.viewCamera;\n                    newView.viewport = newView.viewport || _this.defaultSceneElements.viewport;\n                    newView.pixelRatio = _this.pixelRatio;\n                    newScene.addView(newView);\n                    for (var _i = 0, _a = _this.sceneViews; _i < _a.length; _i++) {\n                        var sceneView = _a[_i];\n                        if (sceneView.view.id === newView.id) {\n                            console.warn('You can NOT have two views with the same id. Please use unique identifiers for every view generated.');\n                        }\n                    }\n                    _this.sceneViews.push({\n                        depth: ++sceneViewDepth,\n                        scene: newScene,\n                        view: newView,\n                    });\n                });\n                _this.scenes.set(sceneOptions.key, newScene);\n            });\n        }\n    };\n    /**\n     * This does special initialization by gathering the layers shader IO, generates a material\n     * and injects special automated uniforms and attributes to make instancing work for the\n     * shader.\n     */\n    LayerSurface.prototype.initLayer = function (layer) {\n        // Set the layer's parent surface here\n        layer.surface = this;\n        // Set the resource manager this surface utilizes to the layer\n        layer.resource = this.resourceManager;\n        // For the sake of initializing uniforms to the correct values, we must first add the layer to it's appropriate\n        // Scene so that the necessary values will be in place for the sahder IO\n        var scene = this.addLayerToScene(layer);\n        // Get the shader metrics the layer desires\n        var shaderIO = layer.initShader();\n        // Clean out nulls provided as a convenience to the layer\n        shaderIO.instanceAttributes = (shaderIO.instanceAttributes || []).filter(Boolean);\n        shaderIO.vertexAttributes = (shaderIO.vertexAttributes || []).filter(Boolean);\n        shaderIO.uniforms = (shaderIO.uniforms || []).filter(Boolean);\n        // Get the injected shader IO attributes and uniforms\n        var _a = inject_shader_io_1.injectShaderIO(layer, shaderIO), vertexAttributes = _a.vertexAttributes, instanceAttributes = _a.instanceAttributes, uniforms = _a.uniforms;\n        // Generate the actual shaders to be used by injecting all of the necessary fragments and injecting\n        // Instancing fragments\n        var shaderMetrics = attribute_generation_1.injectFragments(shaderIO, vertexAttributes, instanceAttributes, uniforms);\n        // Generate the geometry this layer will be utilizing\n        var geometry = generate_layer_geometry_1.generateLayerGeometry(shaderMetrics.maxInstancesPerBuffer, vertexAttributes, shaderIO.vertexCount);\n        // This is the material that is generated for the layer that utilizes all of the generated and\n        // Injected shader IO and shader fragments\n        var material = generate_layer_material_1.generateLayerMaterial(layer, shaderMetrics.vs, shaderMetrics.fs, uniforms, shaderMetrics.materialUniforms);\n        // And now we can now generate the mesh that will be added to the scene\n        var model = generate_layer_model_1.generateLayerModel(layer, geometry, material);\n        // Now that all of the elements of the layer are complete, let us apply them to the layer\n        layer.geometry = geometry;\n        layer.instanceAttributes = instanceAttributes;\n        layer.instanceVertexCount = shaderIO.vertexCount;\n        layer.material = material;\n        layer.maxInstancesPerBuffer = shaderMetrics.maxInstancesPerBuffer;\n        layer.model = model;\n        layer.uniforms = uniforms;\n        layer.vertexAttributes = vertexAttributes;\n        // The layer now needs a specialized uniform manager to provide instances with an appropriate set of uniforms\n        // To be able to render.\n        layer.uniformManager = new instance_uniform_manager_1.InstanceUniformManager(layer, scene);\n        return layer;\n    };\n    /**\n     * Initializes elements for handling mouse interactions with the canvas.\n     */\n    LayerSurface.prototype.initMouseManager = function (options) {\n        // We must inject an event manager to broadcast events through the layers themselves\n        var eventManagers = (options.eventManagers || []).concat([\n            new layer_mouse_events_1.LayerMouseEvents(this.sceneViews),\n        ]);\n        // Generate the mouse manager for the layer\n        this.mouseManager = new mouse_event_manager_1.MouseEventManager(this.context.canvas, this.sceneViews, eventManagers, options.handlesWheelEvents);\n    };\n    /**\n     * This initializes resources needed or requested such as textures or render surfaces.\n     */\n    LayerSurface.prototype.initResources = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _i, _a, resource;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!options.atlasResources) return [3 /*break*/, 4];\n                        _i = 0, _a = options.atlasResources;\n                        _b.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3 /*break*/, 4];\n                        resource = _a[_i];\n                        return [4 /*yield*/, this.atlasManager.createAtlas(resource)];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        // Initialize our resource manager with the atlas manager\n                        this.resourceManager = new atlas_resource_manager_1.AtlasResourceManager({\n                            atlasManager: this.atlasManager,\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This finds the scene and view the layer belongs to based on the layer's props. For invalid or not provided\n     * props, the layer gets added to default scenes and views.\n     */\n    LayerSurface.prototype.addLayerToScene = function (layer) {\n        // Get the scene the layer will add itself to\n        var scene = this.scenes.get(layer.props.scene || '');\n        if (!scene) {\n            // If no scene is specified by the layer, or the scene identifier is invalid, then we add the layer\n            // To the default scene.\n            scene = this.defaultSceneElements.scene;\n            if (layer.props.scene) {\n                console.warn('Layer specified a scene that is not within the layer surface manager. Layer will be added to the default scene.');\n            }\n        }\n        // Add the layer to the scene for rendering\n        scene.addLayer(layer);\n        return scene;\n    };\n    /**\n     * Discontinues a layer's management by this surface. This will invalidate any resources\n     * the layer was using in association with the context. If the layer is re-insertted, it will\n     * be revaluated as though it were a new layer.\n     */\n    LayerSurface.prototype.removeLayer = function (layer) {\n        // Make sure we are removing a layer that exists in the system\n        if (!layer) {\n            return null;\n        }\n        if (!this.layers.get(layer && layer.id)) {\n            console.warn('Tried to remove a layer that is not in the manager.', layer);\n            return layer;\n        }\n        layer.uniformManager.removeFromScene();\n        layer.destroy();\n        this.layers.delete(layer.id);\n        return layer;\n    };\n    /**\n     * Used for reactive rendering and diffs out the layers for changed layers.\n     */\n    LayerSurface.prototype.render = function (layerInitializers) {\n        var _this = this;\n        if (!this.gl)\n            return;\n        // Loop through all of the initializers and properly add and remove layers as needed\n        if (layerInitializers && layerInitializers.length > 0) {\n            layerInitializers.forEach(function (init) {\n                var layerClass = init[0];\n                var props = init[1];\n                var existingLayer = _this.layers.get(props.key);\n                if (existingLayer) {\n                    existingLayer.willUpdateProps(props);\n                    Object.assign(existingLayer.props, props);\n                    existingLayer.didUpdateProps();\n                }\n                else {\n                    _this.addLayer(new layerClass(Object.assign({}, layerClass.defaultProps, props)));\n                }\n                _this.willDisposeLayer.set(props.key, false);\n            });\n        }\n        // Take any layer that retained it's disposal flag and trash it\n        this.willDisposeLayer.forEach(function (dispose, layerId) {\n            if (dispose) {\n                var layer = _this.layers.get(layerId);\n                if (layer) {\n                    _this.removeLayer(layer);\n                }\n                else {\n                    console.warn('this.willDisposeLayer called on non-gettable layer.');\n                }\n            }\n        });\n        // Resolve that all disposals occurred\n        this.willDisposeLayer.clear();\n        // Reflag every layer for removal again so creation of layers will determine\n        // Which layers remain for a reactive pattern\n        this.layers.forEach(function (layer, id) {\n            _this.willDisposeLayer.set(id, true);\n        });\n    };\n    /**\n     * This must be executed when the canvas changes size so that we can re-calculate the scenes and views\n     * dimensions for handling all of our rendered elements.\n     */\n    LayerSurface.prototype.fitContainer = function (pixelRatio) {\n        var container = this.context.canvas.parentElement;\n        if (container) {\n            var canvas = this.context.canvas;\n            canvas.className = '';\n            canvas.setAttribute('style', '');\n            container.style.position = 'relative';\n            canvas.style.position = 'absolute';\n            canvas.style.left = '0xp';\n            canvas.style.top = '0xp';\n            canvas.style.width = '100%';\n            canvas.style.height = '100%';\n            canvas.setAttribute('width', '');\n            canvas.setAttribute('height', '');\n            var containerBox = container.getBoundingClientRect();\n            var box = canvas.getBoundingClientRect();\n            this.resize(box.width || 100, containerBox.height || 100);\n        }\n    };\n    LayerSurface.prototype.resize = function (width, height, pixelRatio) {\n        var _this = this;\n        this.pixelRatio = pixelRatio || this.pixelRatio;\n        this.sceneViews.forEach(function (sceneView) { return sceneView.view.pixelRatio = _this.pixelRatio; });\n        this.renderer.setSize(width || 100, height || 100);\n        this.renderer.setPixelRatio(this.pixelRatio);\n        this.mouseManager.resize();\n    };\n    /**\n     * This establishes the rendering canvas context for the surface.\n     */\n    LayerSurface.prototype.setContext = function (context) {\n        if (!context) {\n            return;\n        }\n        if (isWebGLContext(context)) {\n            this.context = context;\n        }\n        else if (isCanvas(context)) {\n            var canvasContext = context.getContext('webgl') || context.getContext('experimental-webgl');\n            if (!canvasContext) {\n                console.warn('A valid GL context was not found for the context provided to the surface. This surface will not be able to operate.');\n            }\n            else {\n                this.context = canvasContext;\n            }\n        }\n        else if (isString(context)) {\n            var element = document.getElementById(context);\n            if (isCanvas(element)) {\n                this.setContext(element);\n            }\n        }\n    };\n    return LayerSurface;\n}());\nexports.LayerSurface = LayerSurface;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./layer-surface\"));\n__export(require(\"./event-manager\"));\n__export(require(\"./generate-default-scene\"));\n__export(require(\"./generate-layer-geometry\"));\n__export(require(\"./generate-layer-material\"));\n__export(require(\"./generate-layer-model\"));\n__export(require(\"./inject-shader-io\"));\n__export(require(\"./layer\"));\n__export(require(\"./mouse-event-manager\"));\n__export(require(\"./scene\"));\n__export(require(\"./texture\"));\n__export(require(\"./view\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./surface\"));\n__export(require(\"./util\"));\n__export(require(\"./base-layers\"));\n__export(require(\"./base-event-managers\"));\n__export(require(\"./types\"));\n__export(require(\"./primitives\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./voidgl\"));\n"],"sourceRoot":""}