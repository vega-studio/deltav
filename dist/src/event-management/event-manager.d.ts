import { Bounds } from "../primitives";
import { IViewProps, View } from "../surface/view";
import { IProjection } from "../types";
import { IMouseInteraction, ITouchInteraction } from "./types";
import { UserInputEventManager } from "./user-input-event-manager";
export declare abstract class EventManager {
    private userInputManager;
    abstract handleMouseDown(e: IMouseInteraction): void;
    abstract handleMouseUp(e: IMouseInteraction): void;
    abstract handleMouseOver(e: IMouseInteraction): void;
    abstract handleMouseOut(e: IMouseInteraction): void;
    abstract handleMouseMove(e: IMouseInteraction): void;
    abstract handleClick(e: IMouseInteraction): void;
    abstract handleDrag(e: IMouseInteraction): void;
    abstract handleWheel(e: IMouseInteraction): void;
    abstract handleTouchDown(e: ITouchInteraction): void;
    abstract handleTouchUp(e: ITouchInteraction): void;
    abstract handleTouchOut(e: ITouchInteraction): void;
    abstract handleTouchCancelled(e: ITouchInteraction): void;
    abstract handleTouchDrag(e: ITouchInteraction): void;
    abstract handleTap(e: ITouchInteraction): void;
    abstract handleDoubleTap(e: ITouchInteraction): void;
    abstract handleLongTouch(e: ITouchInteraction): void;
    abstract handleLongTap(e: ITouchInteraction): void;
    abstract handlePinch(e: ITouchInteraction): void;
    abstract handleSpread(e: ITouchInteraction): void;
    abstract handleTouchRotate(e: ITouchInteraction): void;
    abstract handleSwipe(e: ITouchInteraction): void;
    getProjection(viewId: string): IProjection | null;
    getView(viewId: string): View<IViewProps> | null;
    getViewScreenBounds(viewId: string): Bounds<View<IViewProps>> | null;
    setUserInputManager(mouseManager: UserInputEventManager): void;
}
