import { Vec4 } from "../math/vector";
import { TypeVec } from "../types";
import { GLProxy } from "./gl-proxy";
import { GLSettings } from "./gl-settings";
import { Material } from "./material";
import { RenderTarget } from "./render-target";
import { Texture } from "./texture";
import { IExtensions, IMaterialUniform, MaterialUniformType } from "./types";
export declare class GLState {
    debugContext: string;
    private extensions;
    private gl;
    private glProxy;
    private _textureUnitToTexture;
    private _freeUnits;
    readonly blendingEnabled: boolean;
    private _blendingEnabled;
    readonly blendDstFactor: GLSettings.Material.BlendingDstFactor;
    private _blendDstFactor;
    readonly blendSrcFactor: GLSettings.Material.BlendingDstFactor | GLSettings.Material.BlendingSrcFactor;
    private _blendSrcFactor;
    readonly blendEquation: GLSettings.Material.BlendingEquations;
    private _blendEquation;
    readonly cullFace: GLSettings.Material.CullSide;
    private _cullFace;
    readonly colorMask: TypeVec<boolean>;
    private _colorMask;
    readonly clearColor: [number, number, number, number];
    private _clearColor;
    readonly depthFunc: GLSettings.Material.DepthFunctions;
    private _depthFunc;
    readonly depthTestEnabled: boolean;
    private _depthTestEnabled;
    readonly depthMask: boolean;
    private _depthMask;
    readonly ditheringEnabled: boolean;
    private _ditheringEnabled;
    readonly boundFBO: WebGLFramebuffer | null;
    private _boundFBO;
    readonly boundRBO: WebGLRenderbuffer | null;
    private _boundRBO;
    readonly boundVBO: WebGLBuffer | null;
    private _boundVBO;
    readonly boundTexture: {
        id: WebGLTexture | null;
        unit: number;
    };
    private _boundTexture;
    readonly currentProgram: WebGLProgram | null;
    private _currentProgram;
    readonly scissorTestEnabled: boolean;
    private _scissorTestEnabled;
    readonly scissorBounds: {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    private _scissorBounds;
    readonly currentUniforms: {
        [name: string]: IMaterialUniform<MaterialUniformType>;
    };
    private _currentUniforms;
    readonly activeTextureUnit: number;
    private _activeTextureUnit;
    readonly textureWillBeUsed: Map<Texture, RenderTarget | Set<WebGLUniformLocation>>;
    private _textureWillBeUsed;
    readonly viewport: {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    private _viewport;
    readonly enabledVertexAttributeArray: number[];
    private _enabledVertexAttributeArray;
    private _willUseVertexAttributeArray;
    private _vertexAttributeArrayDivisor;
    constructor(gl: WebGLRenderingContext, extensions: IExtensions);
    bindVBO(id: WebGLBuffer | null): void;
    bindRBO(id: WebGLRenderbuffer): void;
    bindFBO(id: WebGLFramebuffer | null): void;
    bindTexture(texture: Texture, target: GLSettings.Texture.TextureBindingTarget): void;
    willUseVertexAttributeArray(index: number): void;
    applyVertexAttributeArrays(): void;
    setVertexAttributeArrayDivisor(index: number, divisor: number): void;
    freeTextureUnit(texture: Texture): void;
    setActiveTextureUnit(unit: number): void;
    setClearColor(color: Vec4): void;
    setProxy(proxy: GLProxy): void;
    setScissor(bounds: {
        x: number;
        y: number;
        width: number;
        height: number;
    } | null): void;
    setViewport(x: number, y: number, width: number, height: number): void;
    useProgram(program: WebGLProgram): void;
    useMaterial(material: Material): boolean;
    useRenderTarget(target: RenderTarget | null): boolean;
    syncMaterial(material: Material): boolean;
    private uploadUniform;
    applyUsedTextures(): boolean;
    private assignTextureUnits;
    private uploadTextureToUniform;
    willUseTextureUnit(texture: Texture, target: WebGLUniformLocation | RenderTarget): void;
    syncState(): void;
    private applyClearColor;
    private applyDepthFunc;
    private applyScissorBounds;
    private applyColorMask;
    private applyBlendEquation;
    private applyBlendFactors;
    private applyCullFace;
    private applyViewport;
}
